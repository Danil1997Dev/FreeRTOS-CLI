
RTOS-CLI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000218b0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000047cc  08021a40  08021a40  00022a40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802620c  0802620c  0002821c  2**0
                  CONTENTS
  4 .ARM          00000008  0802620c  0802620c  0002720c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026214  08026214  0002821c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026214  08026214  00027214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08026218  08026218  00027218  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000021c  20000000  0802621c  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002821c  2**0
                  CONTENTS
 10 .bss          00012740  2000021c  2000021c  0002821c  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  2001295c  2001295c  0002821c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002821c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00042c84  00000000  00000000  0002824c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a523  00000000  00000000  0006aed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00003038  00000000  00000000  000753f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00002633  00000000  00000000  00078430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003934b  00000000  00000000  0007aa63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004c494  00000000  00000000  000b3dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc5f2  00000000  00000000  00100242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001fc834  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000daf0  00000000  00000000  001fc878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  0020a368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000021c 	.word	0x2000021c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08021a28 	.word	0x08021a28

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000220 	.word	0x20000220
 80001cc:	08021a28 	.word	0x08021a28

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <FreeRTOS_CLIRegisterCommand>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
    {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFAIL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
        CLI_Definition_List_Item_t * pxNewListItem;

        /* Check the parameter is not NULL. */
        configASSERT( pxCommandToRegister != NULL );
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10b      	bne.n	800100e <FreeRTOS_CLIRegisterCommand+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ffa:	f383 8811 	msr	BASEPRI, r3
 8000ffe:	f3bf 8f6f 	isb	sy
 8001002:	f3bf 8f4f 	dsb	sy
 8001006:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	e7fd      	b.n	800100a <FreeRTOS_CLIRegisterCommand+0x26>

        /* Create a new list item that will reference the command being registered. */
        pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800100e:	2008      	movs	r0, #8
 8001010:	f00b fbbc 	bl	800c78c <pvPortMalloc>
 8001014:	6138      	str	r0, [r7, #16]
        configASSERT( pxNewListItem != NULL );
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10b      	bne.n	8001034 <FreeRTOS_CLIRegisterCommand+0x50>
	__asm volatile
 800101c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001020:	f383 8811 	msr	BASEPRI, r3
 8001024:	f3bf 8f6f 	isb	sy
 8001028:	f3bf 8f4f 	dsb	sy
 800102c:	60bb      	str	r3, [r7, #8]
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <FreeRTOS_CLIRegisterCommand+0x4c>

        if( pxNewListItem != NULL )
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <FreeRTOS_CLIRegisterCommand+0x62>
        {
            prvRegisterCommand( pxCommandToRegister, pxNewListItem );
 800103a:	6939      	ldr	r1, [r7, #16]
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f8e7 	bl	8001210 <prvRegisterCommand>
            xReturn = pdPASS;
 8001042:	2301      	movs	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8001046:	697b      	ldr	r3, [r7, #20]
    }
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput,
                                       char * pcWriteBuffer,
                                       size_t xWriteBufferLen )
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn = pdTRUE;
 800105c:	2301      	movs	r3, #1
 800105e:	61fb      	str	r3, [r7, #28]
    size_t xCommandStringLength;

    /* Note:  This function is not re-entrant.  It must not be called from more
     * thank one task. */

    if( pxCommand == NULL )
 8001060:	4b3a      	ldr	r3, [pc, #232]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d141      	bne.n	80010ec <FreeRTOS_CLIProcessCommand+0x9c>
    {
        /* Search for the command string in the list of registered commands. */
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8001068:	4b38      	ldr	r3, [pc, #224]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800106a:	4a39      	ldr	r2, [pc, #228]	@ (8001150 <FreeRTOS_CLIProcessCommand+0x100>)
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e037      	b.n	80010e0 <FreeRTOS_CLIProcessCommand+0x90>
        {
            pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8001070:	4b36      	ldr	r3, [pc, #216]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
            xCommandStringLength = strlen( pcRegisteredCommandString );
 800107a:	69b8      	ldr	r0, [r7, #24]
 800107c:	f7ff f8f8 	bl	8000270 <strlen>
 8001080:	6178      	str	r0, [r7, #20]

            /* To ensure the string lengths match exactly, so as not to pick up
             * a sub-string of a longer command, check the byte after the expected
             * end of the string is either the end of the string or a space before
             * a parameter. */
            if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	69b9      	ldr	r1, [r7, #24]
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f01d f9cf 	bl	801e42a <strncmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d121      	bne.n	80010d6 <FreeRTOS_CLIProcessCommand+0x86>
            {
                if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b20      	cmp	r3, #32
 800109c:	d005      	beq.n	80010aa <FreeRTOS_CLIProcessCommand+0x5a>
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	4413      	add	r3, r2
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d115      	bne.n	80010d6 <FreeRTOS_CLIProcessCommand+0x86>
                {
                    /* The command has been found.  Check it has the expected
                     * number of parameters.  If cExpectedNumberOfParameters is -1,
                     * then there could be a variable number of parameters and no
                     * check is made. */
                    if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 80010aa:	4b28      	ldr	r3, [pc, #160]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db18      	blt.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
                    {
                        if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f000 f911 	bl	80012e0 <prvGetNumberOfParameters>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b22      	ldr	r3, [pc, #136]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d00c      	beq.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
                        {
                            xReturn = pdFALSE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
                        }
                    }

                    break;
 80010d4:	e009      	b.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80010d6:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a1b      	ldr	r2, [pc, #108]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1c3      	bne.n	8001070 <FreeRTOS_CLIProcessCommand+0x20>
 80010e8:	e000      	b.n	80010ec <FreeRTOS_CLIProcessCommand+0x9c>
                    break;
 80010ea:	bf00      	nop
                }
            }
        }
    }

    if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <FreeRTOS_CLIProcessCommand+0xbc>
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d108      	bne.n	800110c <FreeRTOS_CLIProcessCommand+0xbc>
    {
        /* The command was found, but the number of parameters with the command
         * was incorrect. */
        strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	4915      	ldr	r1, [pc, #84]	@ (8001154 <FreeRTOS_CLIProcessCommand+0x104>)
 80010fe:	68b8      	ldr	r0, [r7, #8]
 8001100:	f01d f9a5 	bl	801e44e <strncpy>
        pxCommand = NULL;
 8001104:	4b11      	ldr	r3, [pc, #68]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e01a      	b.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
    }
    else if( pxCommand != NULL )
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00f      	beq.n	8001134 <FreeRTOS_CLIProcessCommand+0xe4>
    {
        /* Call the callback function that is registered to this command. */
        xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8001114:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	68b8      	ldr	r0, [r7, #8]
 8001122:	4798      	blx	r3
 8001124:	61f8      	str	r0, [r7, #28]

        /* If xReturn is pdFALSE, then no further strings will be returned
         * after this one, and	pxCommand can be reset to NULL ready to search
         * for the next entered command. */
        if( xReturn == pdFALSE )
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10a      	bne.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
        {
            pxCommand = NULL;
 800112c:	4b07      	ldr	r3, [pc, #28]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e006      	b.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
        }
    }
    else
    {
        /* pxCommand was NULL, the command was not found. */
        strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	4908      	ldr	r1, [pc, #32]	@ (8001158 <FreeRTOS_CLIProcessCommand+0x108>)
 8001138:	68b8      	ldr	r0, [r7, #8]
 800113a:	f01d f988 	bl	801e44e <strncpy>
        xReturn = pdFALSE;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001142:	69fb      	ldr	r3, [r7, #28]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000238 	.word	0x20000238
 8001150:	20000000 	.word	0x20000000
 8001154:	08021a78 	.word	0x08021a78
 8001158:	08021ad0 	.word	0x08021ad0

0800115c <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char * FreeRTOS_CLIGetParameter( const char * pcCommandString,
                                       UBaseType_t uxWantedParameter,
                                       BaseType_t * pxParameterStringLength )
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
    UBaseType_t uxParametersFound = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
    const char * pcReturn = NULL;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]

    *pxParameterStringLength = 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]

    while( uxParametersFound < uxWantedParameter )
 8001176:	e03b      	b.n	80011f0 <FreeRTOS_CLIGetParameter+0x94>
    {
        /* Index the character pointer past the current word.  If this is the start
         * of the command string then the first word is the command itself. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
        {
            pcCommandString++;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d007      	beq.n	8001196 <FreeRTOS_CLIGetParameter+0x3a>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b20      	cmp	r3, #32
 800118c:	d1f4      	bne.n	8001178 <FreeRTOS_CLIGetParameter+0x1c>
        }

        /* Find the start of the next string. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800118e:	e002      	b.n	8001196 <FreeRTOS_CLIGetParameter+0x3a>
        {
            pcCommandString++;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <FreeRTOS_CLIGetParameter+0x4a>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b20      	cmp	r3, #32
 80011a4:	d0f4      	beq.n	8001190 <FreeRTOS_CLIGetParameter+0x34>
        }

        /* Was a string found? */
        if( *pcCommandString != 0x00 )
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d025      	beq.n	80011fa <FreeRTOS_CLIGetParameter+0x9e>
        {
            /* Is this the start of the required parameter? */
            uxParametersFound++;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]

            if( uxParametersFound == uxWantedParameter )
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d119      	bne.n	80011f0 <FreeRTOS_CLIGetParameter+0x94>
            {
                /* How long is the parameter? */
                pcReturn = pcCommandString;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	613b      	str	r3, [r7, #16]

                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80011c0:	e007      	b.n	80011d2 <FreeRTOS_CLIGetParameter+0x76>
                {
                    ( *pxParameterStringLength )++;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	601a      	str	r2, [r3, #0]
                    pcCommandString++;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <FreeRTOS_CLIGetParameter+0x86>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b20      	cmp	r3, #32
 80011e0:	d1ef      	bne.n	80011c2 <FreeRTOS_CLIGetParameter+0x66>
                }

                if( *pxParameterStringLength == 0 )
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <FreeRTOS_CLIGetParameter+0xa2>
                {
                    pcReturn = NULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
                }

                break;
 80011ee:	e006      	b.n	80011fe <FreeRTOS_CLIGetParameter+0xa2>
    while( uxParametersFound < uxWantedParameter )
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d3c2      	bcc.n	800117e <FreeRTOS_CLIGetParameter+0x22>
 80011f8:	e002      	b.n	8001200 <FreeRTOS_CLIGetParameter+0xa4>
            }
        }
        else
        {
            break;
 80011fa:	bf00      	nop
 80011fc:	e000      	b.n	8001200 <FreeRTOS_CLIGetParameter+0xa4>
                break;
 80011fe:	bf00      	nop
        }
    }

    return pcReturn;
 8001200:	693b      	ldr	r3, [r7, #16]
}
 8001202:	4618      	mov	r0, r3
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <prvRegisterCommand>:
/*-----------------------------------------------------------*/

static void prvRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister,
                                CLI_Definition_List_Item_t * pxCliDefinitionListItemBuffer )
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
    static CLI_Definition_List_Item_t * pxLastCommandInList = &xRegisteredCommands;

    /* Check the parameters are not NULL. */
    configASSERT( pxCommandToRegister != NULL );
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d10b      	bne.n	8001238 <prvRegisterCommand+0x28>
	__asm volatile
 8001220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001224:	f383 8811 	msr	BASEPRI, r3
 8001228:	f3bf 8f6f 	isb	sy
 800122c:	f3bf 8f4f 	dsb	sy
 8001230:	60fb      	str	r3, [r7, #12]
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <prvRegisterCommand+0x24>
    configASSERT( pxCliDefinitionListItemBuffer != NULL );
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10b      	bne.n	8001256 <prvRegisterCommand+0x46>
	__asm volatile
 800123e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001242:	f383 8811 	msr	BASEPRI, r3
 8001246:	f3bf 8f6f 	isb	sy
 800124a:	f3bf 8f4f 	dsb	sy
 800124e:	60bb      	str	r3, [r7, #8]
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	e7fd      	b.n	8001252 <prvRegisterCommand+0x42>

    taskENTER_CRITICAL();
 8001256:	f00b f977 	bl	800c548 <vPortEnterCritical>
    {
        /* Reference the command being registered from the newly created
         * list item. */
        pxCliDefinitionListItemBuffer->pxCommandLineDefinition = pxCommandToRegister;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	601a      	str	r2, [r3, #0]

        /* The new list item will get added to the end of the list, so
         * pxNext has nowhere to point. */
        pxCliDefinitionListItemBuffer->pxNext = NULL;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]

        /* Add the newly created list item to the end of the already existing
         * list. */
        pxLastCommandInList->pxNext = pxCliDefinitionListItemBuffer;
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <prvRegisterCommand+0x70>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	605a      	str	r2, [r3, #4]

        /* Set the end of list marker to the new list item. */
        pxLastCommandInList = pxCliDefinitionListItemBuffer;
 800126e:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <prvRegisterCommand+0x70>)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	6013      	str	r3, [r2, #0]
    }
    taskEXIT_CRITICAL();
 8001274:	f00b f99a 	bl	800c5ac <vPortExitCritical>
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000008 	.word	0x20000008

08001284 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char * pcWriteBuffer,
                                  size_t xWriteBufferLen,
                                  const char * pcCommandString )
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn;

    ( void ) pcCommandString;

    if( pxCommand == NULL )
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <prvHelpCommand+0x54>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <prvHelpCommand+0x1a>
    {
        /* Reset the pxCommand pointer back to the start of the list. */
        pxCommand = &xRegisteredCommands;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <prvHelpCommand+0x54>)
 800129a:	4a10      	ldr	r2, [pc, #64]	@ (80012dc <prvHelpCommand+0x58>)
 800129c:	601a      	str	r2, [r3, #0]
    }

    /* Return the next command help string, before moving the pointer on to
     * the next command in the list. */
    strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <prvHelpCommand+0x54>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	4619      	mov	r1, r3
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f01d f8cf 	bl	801e44e <strncpy>
    pxCommand = pxCommand->pxNext;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <prvHelpCommand+0x54>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4a08      	ldr	r2, [pc, #32]	@ (80012d8 <prvHelpCommand+0x54>)
 80012b8:	6013      	str	r3, [r2, #0]

    if( pxCommand == NULL )
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <prvHelpCommand+0x54>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <prvHelpCommand+0x44>
    {
        /* There are no more commands in the list, so there will be no more
         *  strings to return after this one and pdFALSE should be returned. */
        xReturn = pdFALSE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	e001      	b.n	80012cc <prvHelpCommand+0x48>
    }
    else
    {
        xReturn = pdTRUE;
 80012c8:	2301      	movs	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80012cc:	697b      	ldr	r3, [r7, #20]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000023c 	.word	0x2000023c
 80012dc:	20000000 	.word	0x20000000

080012e0 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char * pcCommandString )
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    int8_t cParameters = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
    BaseType_t xLastCharacterWasSpace = pdFALSE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]

    /* Count the number of space delimited words in pcCommandString. */
    while( *pcCommandString != 0x00 )
 80012f0:	e014      	b.n	800131c <prvGetNumberOfParameters+0x3c>
    {
        if( ( *pcCommandString ) == ' ' )
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b20      	cmp	r3, #32
 80012f8:	d10b      	bne.n	8001312 <prvGetNumberOfParameters+0x32>
        {
            if( xLastCharacterWasSpace != pdTRUE )
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d00a      	beq.n	8001316 <prvGetNumberOfParameters+0x36>
            {
                cParameters++;
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	3301      	adds	r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	73fb      	strb	r3, [r7, #15]
                xLastCharacterWasSpace = pdTRUE;
 800130c:	2301      	movs	r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	e001      	b.n	8001316 <prvGetNumberOfParameters+0x36>
            }
        }
        else
        {
            xLastCharacterWasSpace = pdFALSE;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
        }

        pcCommandString++;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3301      	adds	r3, #1
 800131a:	607b      	str	r3, [r7, #4]
    while( *pcCommandString != 0x00 )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e6      	bne.n	80012f2 <prvGetNumberOfParameters+0x12>
    }

    /* If the command string ended with spaces, then there will have been too
     * many parameters counted. */
    if( xLastCharacterWasSpace == pdTRUE )
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d105      	bne.n	8001336 <prvGetNumberOfParameters+0x56>
    {
        cParameters--;
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	3b01      	subs	r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	73fb      	strb	r3, [r7, #15]
    }

    /* The value returned is one less than the number of space delimited words,
     * as the first word should be the command itself. */
    return cParameters;
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <_write>:
/* CLI escape sequences*/
uint8_t backspace[] = "\b \b";
uint8_t backspace_tt[] = " \b";

int _write(int file, char *data, int len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
    UNUSED(file);
    // Transmit data using UART2
    for (int i = 0; i < len; i++)
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e00b      	b.n	8001372 <_write+0x2a>
    {
        // Send the character
    	HAL_UART_Transmit(&huart3, (const uint8_t*)&data[i], 1, 0xffff);
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	18d1      	adds	r1, r2, r3
 8001360:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001364:	2201      	movs	r2, #1
 8001366:	4807      	ldr	r0, [pc, #28]	@ (8001384 <_write+0x3c>)
 8001368:	f004 fee2 	bl	8006130 <HAL_UART_Transmit>
    for (int i = 0; i < len; i++)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	3301      	adds	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	429a      	cmp	r2, r3
 8001378:	dbef      	blt.n	800135a <_write+0x12>
        // Wait for the transmit buffer to be empty
//        while (!(USART3->ISR & USART_ISR_TXE));
    }
    return len;
 800137a:	687b      	ldr	r3, [r7, #4]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	20003db4 	.word	0x20003db4

08001388 <cmd_clearScreen>:
//*****************************************************************************
BaseType_t cmd_clearScreen(char *pcWriteBuffer, size_t xWriteBufferLen,
                                  const char *pcCommandString)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
    /* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
    (void)pcCommandString;
    (void)xWriteBufferLen;
    memset(pcWriteBuffer, 0x00, xWriteBufferLen);
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	2100      	movs	r1, #0
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f01d f83e 	bl	801e41a <memset>
    printf("\033[2J\033[1;1H");
 800139e:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <cmd_clearScreen+0x28>)
 80013a0:	f01c ff9c 	bl	801e2dc <iprintf>
    return pdFALSE;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	08021b38 	.word	0x08021b38

080013b4 <cmd_toggle_led>:
//*****************************************************************************
BaseType_t cmd_toggle_led(char *pcWriteBuffer, size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b089      	sub	sp, #36	@ 0x24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
    /* Toggle the LED */
    //ToggleLED();


    /* Write the response to the buffer */
    uint8_t string[] = "LED toggled\r\n";
 80013c0:	4b08      	ldr	r3, [pc, #32]	@ (80013e4 <cmd_toggle_led+0x30>)
 80013c2:	f107 0410 	add.w	r4, r7, #16
 80013c6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80013c8:	c407      	stmia	r4!, {r0, r1, r2}
 80013ca:	8023      	strh	r3, [r4, #0]
    strcpy(pcWriteBuffer, (char *)string);
 80013cc:	f107 0310 	add.w	r3, r7, #16
 80013d0:	4619      	mov	r1, r3
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f01d f91b 	bl	801e60e <strcpy>

    return pdFALSE;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	@ 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	08021b44 	.word	0x08021b44

080013e8 <cmd_connect>:
//*****************************************************************************
BaseType_t cmd_connect(char *pcWriteBuffer, size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b088      	sub	sp, #32
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
    const char *pcParameter1, *pcParameter2;
    BaseType_t xParameter1StringLength, xParameter2StringLength;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	461a      	mov	r2, r3
 80013fa:	2101      	movs	r1, #1
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff fead 	bl	800115c <FreeRTOS_CLIGetParameter>
 8001402:	61f8      	str	r0, [r7, #28]
                          /* Return the first parameter. */
                          1,
                          /* Store the parameter string length. */
						  &xParameter1StringLength
                        );
    pcParameter2 = FreeRTOS_CLIGetParameter
 8001404:	f107 0310 	add.w	r3, r7, #16
 8001408:	461a      	mov	r2, r3
 800140a:	2102      	movs	r1, #2
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f7ff fea5 	bl	800115c <FreeRTOS_CLIGetParameter>
 8001412:	61b8      	str	r0, [r7, #24]
                          /* Return the first parameter. */
                          2,
                          /* Store the parameter string length. */
						  &xParameter2StringLength
                        );
    remout_ip = (uint8_t*)pcParameter1;
 8001414:	4a0b      	ldr	r2, [pc, #44]	@ (8001444 <cmd_connect+0x5c>)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	6013      	str	r3, [r2, #0]
    *(remout_ip + 15) = '\0';
 800141a:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <cmd_connect+0x5c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	330f      	adds	r3, #15
 8001420:	2200      	movs	r2, #0
 8001422:	701a      	strb	r2, [r3, #0]
    remout_port = (uint8_t)*pcParameter2;
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	781b      	ldrb	r3, [r3, #0]
 8001428:	461a      	mov	r2, r3
 800142a:	4b07      	ldr	r3, [pc, #28]	@ (8001448 <cmd_connect+0x60>)
 800142c:	801a      	strh	r2, [r3, #0]

    vTaskResume((TaskHandle_t)vClientTaskHandle);
 800142e:	4b07      	ldr	r3, [pc, #28]	@ (800144c <cmd_connect+0x64>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f009 fd1a 	bl	800ae6c <vTaskResume>


    return pdFALSE;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3720      	adds	r7, #32
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	20000010 	.word	0x20000010
 8001448:	20000014 	.word	0x20000014
 800144c:	20002b24 	.word	0x20002b24

08001450 <vRegisterCLICommands>:
    {
        .pcCommand = NULL /* simply used as delimeter for end of array*/
    }
};

void vRegisterCLICommands(void){
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
    //itterate thourgh the list of commands and register them
    for (int i = 0; xCommandList[i].pcCommand != NULL; i++)
 8001456:	2300      	movs	r3, #0
 8001458:	607b      	str	r3, [r7, #4]
 800145a:	e009      	b.n	8001470 <vRegisterCLICommands+0x20>
    {
        FreeRTOS_CLIRegisterCommand(&xCommandList[i]);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	011b      	lsls	r3, r3, #4
 8001460:	4a09      	ldr	r2, [pc, #36]	@ (8001488 <vRegisterCLICommands+0x38>)
 8001462:	4413      	add	r3, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff fdbd 	bl	8000fe4 <FreeRTOS_CLIRegisterCommand>
    for (int i = 0; xCommandList[i].pcCommand != NULL; i++)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3301      	adds	r3, #1
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	4a05      	ldr	r2, [pc, #20]	@ (8001488 <vRegisterCLICommands+0x38>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	011b      	lsls	r3, r3, #4
 8001476:	4413      	add	r3, r2
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1ee      	bne.n	800145c <vRegisterCLICommands+0xc>
    }
}
 800147e:	bf00      	nop
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	08025aec 	.word	0x08025aec

0800148c <cliWrite>:
/*************************************************************************************************/
void cliWrite(const char *str)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
   printf("%s", str);
 8001494:	6879      	ldr	r1, [r7, #4]
 8001496:	4806      	ldr	r0, [pc, #24]	@ (80014b0 <cliWrite+0x24>)
 8001498:	f01c ff20 	bl	801e2dc <iprintf>
   // flush stdout
   fflush(stdout);
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <cliWrite+0x28>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f01c fe44 	bl	801e130 <fflush>
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	08021c04 	.word	0x08021c04
 80014b4:	20000060 	.word	0x20000060

080014b8 <handleNewline>:
/*************************************************************************************************/
void handleNewline(const char *const pcInputString, char *cOutputBuffer, uint8_t *cInputIndex)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
    cliWrite("\r\n");
 80014c4:	4810      	ldr	r0, [pc, #64]	@ (8001508 <handleNewline+0x50>)
 80014c6:	f7ff ffe1 	bl	800148c <cliWrite>

    BaseType_t xMoreDataToFollow;
    do
    {
        xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString, cOutputBuffer, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 80014ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014ce:	68b9      	ldr	r1, [r7, #8]
 80014d0:	68f8      	ldr	r0, [r7, #12]
 80014d2:	f7ff fdbd 	bl	8001050 <FreeRTOS_CLIProcessCommand>
 80014d6:	6178      	str	r0, [r7, #20]
        cliWrite(cOutputBuffer);
 80014d8:	68b8      	ldr	r0, [r7, #8]
 80014da:	f7ff ffd7 	bl	800148c <cliWrite>
    } while (xMoreDataToFollow != pdFALSE);
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f2      	bne.n	80014ca <handleNewline+0x12>

    cliWrite(cli_prompt);
 80014e4:	4b09      	ldr	r3, [pc, #36]	@ (800150c <handleNewline+0x54>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ffcf 	bl	800148c <cliWrite>
    *cInputIndex = 0;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
    memset((void*)pcInputString, 0x00, MAX_INPUT_LENGTH);
 80014f4:	2232      	movs	r2, #50	@ 0x32
 80014f6:	2100      	movs	r1, #0
 80014f8:	68f8      	ldr	r0, [r7, #12]
 80014fa:	f01c ff8e 	bl	801e41a <memset>
}
 80014fe:	bf00      	nop
 8001500:	3718      	adds	r7, #24
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	08021c08 	.word	0x08021c08
 800150c:	2000000c 	.word	0x2000000c

08001510 <handleBackspace>:
/*************************************************************************************************/
void handleBackspace(uint8_t *cInputIndex, char *pcInputString)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
    if (*cInputIndex > 0)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b00      	cmp	r3, #0
 8001520:	d010      	beq.n	8001544 <handleBackspace+0x34>
    {
        (*cInputIndex)--;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	3b01      	subs	r3, #1
 8001528:	b2da      	uxtb	r2, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	701a      	strb	r2, [r3, #0]
        pcInputString[*cInputIndex] = '\0';
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	461a      	mov	r2, r3
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	4413      	add	r3, r2
 8001538:	2200      	movs	r2, #0
 800153a:	701a      	strb	r2, [r3, #0]

#if USING_VS_CODE_TERMINAL
        cliWrite((char *)backspace);
#elif USING_OTHER_TERMINAL
        cliWrite((char *)backspace_tt);
 800153c:	4807      	ldr	r0, [pc, #28]	@ (800155c <handleBackspace+0x4c>)
 800153e:	f7ff ffa5 	bl	800148c <cliWrite>
#if USING_OTHER_TERMINAL
        uint8_t right[] = "\x1b\x5b\x43";
        cliWrite((char *)right);
#endif
    }
}
 8001542:	e006      	b.n	8001552 <handleBackspace+0x42>
        uint8_t right[] = "\x1b\x5b\x43";
 8001544:	4b06      	ldr	r3, [pc, #24]	@ (8001560 <handleBackspace+0x50>)
 8001546:	60fb      	str	r3, [r7, #12]
        cliWrite((char *)right);
 8001548:	f107 030c 	add.w	r3, r7, #12
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff9d 	bl	800148c <cliWrite>
}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	20000018 	.word	0x20000018
 8001560:	00435b1b 	.word	0x00435b1b

08001564 <handleCharacterInput>:
/*************************************************************************************************/
void handleCharacterInput(uint8_t *cInputIndex, char *pcInputString)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
    if (cRxedChar == '\r')
 800156e:	4b14      	ldr	r3, [pc, #80]	@ (80015c0 <handleCharacterInput+0x5c>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b0d      	cmp	r3, #13
 8001574:	d01f      	beq.n	80015b6 <handleCharacterInput+0x52>
    {
        return;
    }
    else if (cRxedChar == (uint8_t)0x08 || cRxedChar == (uint8_t)0x7F)
 8001576:	4b12      	ldr	r3, [pc, #72]	@ (80015c0 <handleCharacterInput+0x5c>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b08      	cmp	r3, #8
 800157c:	d003      	beq.n	8001586 <handleCharacterInput+0x22>
 800157e:	4b10      	ldr	r3, [pc, #64]	@ (80015c0 <handleCharacterInput+0x5c>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b7f      	cmp	r3, #127	@ 0x7f
 8001584:	d104      	bne.n	8001590 <handleCharacterInput+0x2c>
    {
        handleBackspace(cInputIndex, pcInputString);
 8001586:	6839      	ldr	r1, [r7, #0]
 8001588:	6878      	ldr	r0, [r7, #4]
 800158a:	f7ff ffc1 	bl	8001510 <handleBackspace>
 800158e:	e013      	b.n	80015b8 <handleCharacterInput+0x54>
    }
    else
    {
        if (*cInputIndex < MAX_INPUT_LENGTH)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b31      	cmp	r3, #49	@ 0x31
 8001596:	d80f      	bhi.n	80015b8 <handleCharacterInput+0x54>
        {
            pcInputString[*cInputIndex] = cRxedChar;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	461a      	mov	r2, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	4413      	add	r3, r2
 80015a2:	4a07      	ldr	r2, [pc, #28]	@ (80015c0 <handleCharacterInput+0x5c>)
 80015a4:	7812      	ldrb	r2, [r2, #0]
 80015a6:	701a      	strb	r2, [r3, #0]
            (*cInputIndex)++;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	3301      	adds	r3, #1
 80015ae:	b2da      	uxtb	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	701a      	strb	r2, [r3, #0]
 80015b4:	e000      	b.n	80015b8 <handleCharacterInput+0x54>
        return;
 80015b6:	bf00      	nop
        }
    }
}
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	20000a72 	.word	0x20000a72

080015c4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0

}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr

080015d2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
return 0;
 80015d6:	2300      	movs	r3, #0
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80015e4:	b580      	push	{r7, lr}
 80015e6:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of dhcpSem */
  dhcpSemHandle = osSemaphoreNew(1, 0, &dhcpSem_attributes);
 80015e8:	4a14      	ldr	r2, [pc, #80]	@ (800163c <MX_FREERTOS_Init+0x58>)
 80015ea:	2100      	movs	r1, #0
 80015ec:	2001      	movs	r0, #1
 80015ee:	f007 fcdc 	bl	8008faa <osSemaphoreNew>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a12      	ldr	r2, [pc, #72]	@ (8001640 <MX_FREERTOS_Init+0x5c>)
 80015f6:	6013      	str	r3, [r2, #0]

  /* creation of uartConfigSem */
  uartConfigSemHandle = osSemaphoreNew(1, 0, &uartConfigSem_attributes);
 80015f8:	4a12      	ldr	r2, [pc, #72]	@ (8001644 <MX_FREERTOS_Init+0x60>)
 80015fa:	2100      	movs	r1, #0
 80015fc:	2001      	movs	r0, #1
 80015fe:	f007 fcd4 	bl	8008faa <osSemaphoreNew>
 8001602:	4603      	mov	r3, r0
 8001604:	4a10      	ldr	r2, [pc, #64]	@ (8001648 <MX_FREERTOS_Init+0x64>)
 8001606:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of vInitTask */
  vInitTaskHandle = osThreadNew(StartInitTask, NULL, &vInitTask_attributes);
 8001608:	4a10      	ldr	r2, [pc, #64]	@ (800164c <MX_FREERTOS_Init+0x68>)
 800160a:	2100      	movs	r1, #0
 800160c:	4810      	ldr	r0, [pc, #64]	@ (8001650 <MX_FREERTOS_Init+0x6c>)
 800160e:	f007 fb10 	bl	8008c32 <osThreadNew>
 8001612:	4603      	mov	r3, r0
 8001614:	4a0f      	ldr	r2, [pc, #60]	@ (8001654 <MX_FREERTOS_Init+0x70>)
 8001616:	6013      	str	r3, [r2, #0]

  /* creation of vClientTask */
  vClientTaskHandle = osThreadNew(StartClientTask, NULL, &vClientTask_attributes);
 8001618:	4a0f      	ldr	r2, [pc, #60]	@ (8001658 <MX_FREERTOS_Init+0x74>)
 800161a:	2100      	movs	r1, #0
 800161c:	480f      	ldr	r0, [pc, #60]	@ (800165c <MX_FREERTOS_Init+0x78>)
 800161e:	f007 fb08 	bl	8008c32 <osThreadNew>
 8001622:	4603      	mov	r3, r0
 8001624:	4a0e      	ldr	r2, [pc, #56]	@ (8001660 <MX_FREERTOS_Init+0x7c>)
 8001626:	6013      	str	r3, [r2, #0]

  /* creation of vCmdTask */
  vCmdTaskHandle = osThreadNew(vStartCmdTask, NULL, &vCmdTask_attributes);
 8001628:	4a0e      	ldr	r2, [pc, #56]	@ (8001664 <MX_FREERTOS_Init+0x80>)
 800162a:	2100      	movs	r1, #0
 800162c:	480e      	ldr	r0, [pc, #56]	@ (8001668 <MX_FREERTOS_Init+0x84>)
 800162e:	f007 fb00 	bl	8008c32 <osThreadNew>
 8001632:	4603      	mov	r3, r0
 8001634:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <MX_FREERTOS_Init+0x88>)
 8001636:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}
 800163c:	08025b98 	.word	0x08025b98
 8001640:	20003c84 	.word	0x20003c84
 8001644:	08025ba8 	.word	0x08025ba8
 8001648:	20003c88 	.word	0x20003c88
 800164c:	08025b2c 	.word	0x08025b2c
 8001650:	08001671 	.word	0x08001671
 8001654:	20000a74 	.word	0x20000a74
 8001658:	08025b50 	.word	0x08025b50
 800165c:	080016c9 	.word	0x080016c9
 8001660:	20002b24 	.word	0x20002b24
 8001664:	08025b74 	.word	0x08025b74
 8001668:	08001731 	.word	0x08001731
 800166c:	200033d4 	.word	0x200033d4

08001670 <StartInitTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void *argument)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001678:	f006 fc8e 	bl	8007f98 <MX_LWIP_Init>
  /* USER CODE BEGIN StartInitTask */
  vTaskSuspend((TaskHandle_t)vClientTaskHandle);
 800167c:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <StartInitTask+0x4c>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f009 fb4b 	bl	800ad1c <vTaskSuspend>
  vTaskSuspend((TaskHandle_t)vCmdTaskHandle);
 8001686:	4b0e      	ldr	r3, [pc, #56]	@ (80016c0 <StartInitTask+0x50>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4618      	mov	r0, r3
 800168c:	f009 fb46 	bl	800ad1c <vTaskSuspend>
  HAL_Delay(10000);
 8001690:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001694:	f000 fe94 	bl	80023c0 <HAL_Delay>
//  while (gnetif.ip_addr.addr == 0){};
  /* Infinite loop */
  for(;;)
  {
	  if (gnetif.ip_addr.addr != 0)
 8001698:	4b0a      	ldr	r3, [pc, #40]	@ (80016c4 <StartInitTask+0x54>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d007      	beq.n	80016b0 <StartInitTask+0x40>
	  {
//		  vCmdTaskHandle = osThreadNew(vStartCmdTask, NULL, &vCmdTask_attributes);
//		  vClientTaskHandle = osThreadNew(StartClientTask, NULL, &vClientTask_attributes);

		  vTaskResume((TaskHandle_t)vCmdTaskHandle);
 80016a0:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <StartInitTask+0x50>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f009 fbe1 	bl	800ae6c <vTaskResume>
		  vTaskSuspend(NULL);
 80016aa:	2000      	movs	r0, #0
 80016ac:	f009 fb36 	bl	800ad1c <vTaskSuspend>

	  }
      osDelay(10000);
 80016b0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80016b4:	f007 fb50 	bl	8008d58 <osDelay>
	  if (gnetif.ip_addr.addr != 0)
 80016b8:	e7ee      	b.n	8001698 <StartInitTask+0x28>
 80016ba:	bf00      	nop
 80016bc:	20002b24 	.word	0x20002b24
 80016c0:	200033d4 	.word	0x200033d4
 80016c4:	20003e0c 	.word	0x20003e0c

080016c8 <StartClientTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartClientTask */
void StartClientTask(void *argument)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartClientTask */
	  struct sockaddr_in remout_host;
	  int s;

	  s = lwip_socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
 80016d0:	2206      	movs	r2, #6
 80016d2:	2101      	movs	r1, #1
 80016d4:	2002      	movs	r0, #2
 80016d6:	f00d fadf 	bl	800ec98 <lwip_socket>
 80016da:	61f8      	str	r0, [r7, #28]
	  remout_host.sin_family = AF_INET;
 80016dc:	2302      	movs	r3, #2
 80016de:	737b      	strb	r3, [r7, #13]
	  remout_host.sin_port = htons(remout_port);
 80016e0:	4b10      	ldr	r3, [pc, #64]	@ (8001724 <StartClientTask+0x5c>)
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f00d fe8b 	bl	800f400 <lwip_htons>
 80016ea:	4603      	mov	r3, r0
 80016ec:	81fb      	strh	r3, [r7, #14]
	  ip4addr_aton((char*)remout_ip,(ip4_addr_t*)&remout_host.sin_addr);
 80016ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001728 <StartClientTask+0x60>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	f107 030c 	add.w	r3, r7, #12
 80016f6:	3304      	adds	r3, #4
 80016f8:	4619      	mov	r1, r3
 80016fa:	4610      	mov	r0, r2
 80016fc:	f01a fb52 	bl	801bda4 <ip4addr_aton>
	  lwip_connect(s, (struct sockaddr *)&remout_host, sizeof(struct sockaddr_in));
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	2210      	movs	r2, #16
 8001706:	4619      	mov	r1, r3
 8001708:	69f8      	ldr	r0, [r7, #28]
 800170a:	f00d f935 	bl	800e978 <lwip_connect>
	  lwip_write(s, "Hello\n\r", sizeof("Hello\n\r"));
 800170e:	2208      	movs	r2, #8
 8001710:	4906      	ldr	r1, [pc, #24]	@ (800172c <StartClientTask+0x64>)
 8001712:	69f8      	ldr	r0, [r7, #28]
 8001714:	f00d fb1e 	bl	800ed54 <lwip_write>
	  for(;;)
	  {
//		lwip_recv(s, buf, 30, 0);
//		HAL_UART_Transmit(&huart3, buf, sizeof(buf), 0xffff);
//		memset(buf, (uint32_t)'\0', sizeof(buf));
	    osDelay(1000);
 8001718:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800171c:	f007 fb1c 	bl	8008d58 <osDelay>
 8001720:	e7fa      	b.n	8001718 <StartClientTask+0x50>
 8001722:	bf00      	nop
 8001724:	20000014 	.word	0x20000014
 8001728:	20000010 	.word	0x20000010
 800172c:	08021c48 	.word	0x08021c48

08001730 <vStartCmdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStartCmdTask */
void vStartCmdTask(void *argument)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStartCmdTask */
    uint8_t cInputIndex = 0; // simply used to keep track of the index of the input string
 8001738:	2300      	movs	r3, #0
 800173a:	73fb      	strb	r3, [r7, #15]
//    uint32_t receivedValue; // used to store the received value from the notification
//    pDataByte = (uint8_t*)&cRxedChar;
    vRegisterCLICommands();
 800173c:	f7ff fe88 	bl	8001450 <vRegisterCLICommands>
    HAL_UART_Transmit(&huart3, (uint8_t*)"Start cli\r\n", sizeof("Start cli\r\n"), 0xffff);
 8001740:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001744:	220c      	movs	r2, #12
 8001746:	4915      	ldr	r1, [pc, #84]	@ (800179c <vStartCmdTask+0x6c>)
 8001748:	4815      	ldr	r0, [pc, #84]	@ (80017a0 <vStartCmdTask+0x70>)
 800174a:	f004 fcf1 	bl	8006130 <HAL_UART_Transmit>

    for (;;)
    {
  	  if (xSemaphoreTake(uartConfigSemHandle, portMAX_DELAY))
 800174e:	4b15      	ldr	r3, [pc, #84]	@ (80017a4 <vStartCmdTask+0x74>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f04f 31ff 	mov.w	r1, #4294967295
 8001756:	4618      	mov	r0, r3
 8001758:	f008 fd46 	bl	800a1e8 <xQueueSemaphoreTake>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d018      	beq.n	8001794 <vStartCmdTask+0x64>
  	  {
        //echo recevied char
//        cRxedChar = receivedValue & 0xFF;

        cliWrite((char *)&cRxedChar);
 8001762:	4811      	ldr	r0, [pc, #68]	@ (80017a8 <vStartCmdTask+0x78>)
 8001764:	f7ff fe92 	bl	800148c <cliWrite>
        if (cRxedChar == '\r' || cRxedChar == '\n')
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <vStartCmdTask+0x78>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b0d      	cmp	r3, #13
 800176e:	d003      	beq.n	8001778 <vStartCmdTask+0x48>
 8001770:	4b0d      	ldr	r3, [pc, #52]	@ (80017a8 <vStartCmdTask+0x78>)
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b0a      	cmp	r3, #10
 8001776:	d107      	bne.n	8001788 <vStartCmdTask+0x58>
        {
            // user pressed enter, process the command
            handleNewline(pcInputString, cOutputBuffer, &cInputIndex);
 8001778:	f107 030f 	add.w	r3, r7, #15
 800177c:	461a      	mov	r2, r3
 800177e:	490b      	ldr	r1, [pc, #44]	@ (80017ac <vStartCmdTask+0x7c>)
 8001780:	480b      	ldr	r0, [pc, #44]	@ (80017b0 <vStartCmdTask+0x80>)
 8001782:	f7ff fe99 	bl	80014b8 <handleNewline>
 8001786:	e005      	b.n	8001794 <vStartCmdTask+0x64>
        }
        else
        {
            // user pressed a character add it to the input string
            handleCharacterInput(&cInputIndex, pcInputString);
 8001788:	f107 030f 	add.w	r3, r7, #15
 800178c:	4908      	ldr	r1, [pc, #32]	@ (80017b0 <vStartCmdTask+0x80>)
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fee8 	bl	8001564 <handleCharacterInput>
        }
  	  }
        osDelay(100);
 8001794:	2064      	movs	r0, #100	@ 0x64
 8001796:	f007 fadf 	bl	8008d58 <osDelay>
  	  if (xSemaphoreTake(uartConfigSemHandle, portMAX_DELAY))
 800179a:	e7d8      	b.n	800174e <vStartCmdTask+0x1e>
 800179c:	08021c50 	.word	0x08021c50
 80017a0:	20003db4 	.word	0x20003db4
 80017a4:	20003c88 	.word	0x20003c88
 80017a8:	20000a72 	.word	0x20000a72
 80017ac:	20000240 	.word	0x20000240
 80017b0:	20000a40 	.word	0x20000a40

080017b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b087      	sub	sp, #28
 80017b8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
 80017be:	4b25      	ldr	r3, [pc, #148]	@ (8001854 <MX_GPIO_Init+0xa0>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a24      	ldr	r2, [pc, #144]	@ (8001854 <MX_GPIO_Init+0xa0>)
 80017c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b22      	ldr	r3, [pc, #136]	@ (8001854 <MX_GPIO_Init+0xa0>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017d2:	617b      	str	r3, [r7, #20]
 80017d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	4b1e      	ldr	r3, [pc, #120]	@ (8001854 <MX_GPIO_Init+0xa0>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a1d      	ldr	r2, [pc, #116]	@ (8001854 <MX_GPIO_Init+0xa0>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001854 <MX_GPIO_Init+0xa0>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	613b      	str	r3, [r7, #16]
 80017f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	4b17      	ldr	r3, [pc, #92]	@ (8001854 <MX_GPIO_Init+0xa0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a16      	ldr	r2, [pc, #88]	@ (8001854 <MX_GPIO_Init+0xa0>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b14      	ldr	r3, [pc, #80]	@ (8001854 <MX_GPIO_Init+0xa0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	4b10      	ldr	r3, [pc, #64]	@ (8001854 <MX_GPIO_Init+0xa0>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001816:	4a0f      	ldr	r2, [pc, #60]	@ (8001854 <MX_GPIO_Init+0xa0>)
 8001818:	f043 0302 	orr.w	r3, r3, #2
 800181c:	6313      	str	r3, [r2, #48]	@ 0x30
 800181e:	4b0d      	ldr	r3, [pc, #52]	@ (8001854 <MX_GPIO_Init+0xa0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	60bb      	str	r3, [r7, #8]
 8001828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	4b09      	ldr	r3, [pc, #36]	@ (8001854 <MX_GPIO_Init+0xa0>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001832:	4a08      	ldr	r2, [pc, #32]	@ (8001854 <MX_GPIO_Init+0xa0>)
 8001834:	f043 0308 	orr.w	r3, r3, #8
 8001838:	6313      	str	r3, [r2, #48]	@ 0x30
 800183a:	4b06      	ldr	r3, [pc, #24]	@ (8001854 <MX_GPIO_Init+0xa0>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	f003 0308 	and.w	r3, r3, #8
 8001842:	607b      	str	r3, [r7, #4]
 8001844:	687b      	ldr	r3, [r7, #4]

}
 8001846:	bf00      	nop
 8001848:	371c      	adds	r7, #28
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	40023800 	.word	0x40023800

08001858 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800185c:	f000 fd6e 	bl	800233c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001860:	f000 f820 	bl	80018a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001864:	f7ff ffa6 	bl	80017b4 <MX_GPIO_Init>
  MX_TIM5_Init();
 8001868:	f000 fb28 	bl	8001ebc <MX_TIM5_Init>
  MX_SDIO_SD_Init();
 800186c:	f000 f8d8 	bl	8001a20 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001870:	f006 f978 	bl	8007b64 <MX_FATFS_Init>
  MX_RNG_Init();
 8001874:	f000 f898 	bl	80019a8 <MX_RNG_Init>
  MX_USART3_UART_Init();
 8001878:	f000 fb96 	bl	8001fa8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
// HAL_UART_Transmit(&huart3, (uint8_t *)"Start\n\r", sizeof("Start\n\r"), 0xffff);
  HAL_UART_Receive_IT(&huart3, pcRxedChar, 1);
 800187c:	4b07      	ldr	r3, [pc, #28]	@ (800189c <main+0x44>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2201      	movs	r2, #1
 8001882:	4619      	mov	r1, r3
 8001884:	4806      	ldr	r0, [pc, #24]	@ (80018a0 <main+0x48>)
 8001886:	f004 fcde 	bl	8006246 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800188a:	f007 f951 	bl	8008b30 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800188e:	f7ff fea9 	bl	80015e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001892:	f007 f993 	bl	8008bbc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001896:	bf00      	nop
 8001898:	e7fd      	b.n	8001896 <main+0x3e>
 800189a:	bf00      	nop
 800189c:	20000020 	.word	0x20000020
 80018a0:	20003db4 	.word	0x20003db4

080018a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b094      	sub	sp, #80	@ 0x50
 80018a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018aa:	f107 0320 	add.w	r3, r7, #32
 80018ae:	2230      	movs	r2, #48	@ 0x30
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f01c fdb1 	bl	801e41a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	4b28      	ldr	r3, [pc, #160]	@ (8001970 <SystemClock_Config+0xcc>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d0:	4a27      	ldr	r2, [pc, #156]	@ (8001970 <SystemClock_Config+0xcc>)
 80018d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d8:	4b25      	ldr	r3, [pc, #148]	@ (8001970 <SystemClock_Config+0xcc>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <SystemClock_Config+0xd0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a21      	ldr	r2, [pc, #132]	@ (8001974 <SystemClock_Config+0xd0>)
 80018ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <SystemClock_Config+0xd0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001900:	2302      	movs	r3, #2
 8001902:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001904:	2301      	movs	r3, #1
 8001906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001908:	2310      	movs	r3, #16
 800190a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800190c:	2302      	movs	r3, #2
 800190e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001910:	2300      	movs	r3, #0
 8001912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001914:	2308      	movs	r3, #8
 8001916:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001918:	23a8      	movs	r3, #168	@ 0xa8
 800191a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800191c:	2302      	movs	r3, #2
 800191e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001920:	2307      	movs	r3, #7
 8001922:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001924:	f107 0320 	add.w	r3, r7, #32
 8001928:	4618      	mov	r0, r3
 800192a:	f002 fb87 	bl	800403c <HAL_RCC_OscConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001934:	f000 f832 	bl	800199c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001938:	230f      	movs	r3, #15
 800193a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193c:	2302      	movs	r3, #2
 800193e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001944:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001948:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800194a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800194e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	2105      	movs	r1, #5
 8001956:	4618      	mov	r0, r3
 8001958:	f002 fde8 	bl	800452c <HAL_RCC_ClockConfig>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001962:	f000 f81b 	bl	800199c <Error_Handler>
  }
}
 8001966:	bf00      	nop
 8001968:	3750      	adds	r7, #80	@ 0x50
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	40007000 	.word	0x40007000

08001978 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d101      	bne.n	800198e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800198a:	f000 fcf9 	bl	8002380 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40010000 	.word	0x40010000

0800199c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a0:	b672      	cpsid	i
}
 80019a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <Error_Handler+0x8>

080019a8 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <MX_RNG_Init+0x20>)
 80019ae:	4a07      	ldr	r2, [pc, #28]	@ (80019cc <MX_RNG_Init+0x24>)
 80019b0:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80019b2:	4805      	ldr	r0, [pc, #20]	@ (80019c8 <MX_RNG_Init+0x20>)
 80019b4:	f002 ffcc 	bl	8004950 <HAL_RNG_Init>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d001      	beq.n	80019c2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80019be:	f7ff ffed 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20003c8c 	.word	0x20003c8c
 80019cc:	50060800 	.word	0x50060800

080019d0 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b084      	sub	sp, #16
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a0e      	ldr	r2, [pc, #56]	@ (8001a18 <HAL_RNG_MspInit+0x48>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d115      	bne.n	8001a0e <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	4b0d      	ldr	r3, [pc, #52]	@ (8001a1c <HAL_RNG_MspInit+0x4c>)
 80019e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019ea:	4a0c      	ldr	r2, [pc, #48]	@ (8001a1c <HAL_RNG_MspInit+0x4c>)
 80019ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019f0:	6353      	str	r3, [r2, #52]	@ 0x34
 80019f2:	4b0a      	ldr	r3, [pc, #40]	@ (8001a1c <HAL_RNG_MspInit+0x4c>)
 80019f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 5, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2105      	movs	r1, #5
 8001a02:	2050      	movs	r0, #80	@ 0x50
 8001a04:	f000 fdb8 	bl	8002578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8001a08:	2050      	movs	r0, #80	@ 0x50
 8001a0a:	f000 fdd1 	bl	80025b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001a0e:	bf00      	nop
 8001a10:	3710      	adds	r7, #16
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	50060800 	.word	0x50060800
 8001a1c:	40023800 	.word	0x40023800

08001a20 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <MX_SDIO_SD_Init+0x38>)
 8001a26:	4a0d      	ldr	r2, [pc, #52]	@ (8001a5c <MX_SDIO_SD_Init+0x3c>)
 8001a28:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a58 <MX_SDIO_SD_Init+0x38>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001a30:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <MX_SDIO_SD_Init+0x38>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001a36:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <MX_SDIO_SD_Init+0x38>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	@ (8001a58 <MX_SDIO_SD_Init+0x38>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001a42:	4b05      	ldr	r3, [pc, #20]	@ (8001a58 <MX_SDIO_SD_Init+0x38>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001a48:	4b03      	ldr	r3, [pc, #12]	@ (8001a58 <MX_SDIO_SD_Init+0x38>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	20003c9c 	.word	0x20003c9c
 8001a5c:	40012c00 	.word	0x40012c00

08001a60 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	@ 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a28      	ldr	r2, [pc, #160]	@ (8001b20 <HAL_SD_MspInit+0xc0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d14a      	bne.n	8001b18 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	613b      	str	r3, [r7, #16]
 8001a86:	4b27      	ldr	r3, [pc, #156]	@ (8001b24 <HAL_SD_MspInit+0xc4>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8a:	4a26      	ldr	r2, [pc, #152]	@ (8001b24 <HAL_SD_MspInit+0xc4>)
 8001a8c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a92:	4b24      	ldr	r3, [pc, #144]	@ (8001b24 <HAL_SD_MspInit+0xc4>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a9a:	613b      	str	r3, [r7, #16]
 8001a9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60fb      	str	r3, [r7, #12]
 8001aa2:	4b20      	ldr	r3, [pc, #128]	@ (8001b24 <HAL_SD_MspInit+0xc4>)
 8001aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	@ (8001b24 <HAL_SD_MspInit+0xc4>)
 8001aa8:	f043 0304 	orr.w	r3, r3, #4
 8001aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aae:	4b1d      	ldr	r3, [pc, #116]	@ (8001b24 <HAL_SD_MspInit+0xc4>)
 8001ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ab2:	f003 0304 	and.w	r3, r3, #4
 8001ab6:	60fb      	str	r3, [r7, #12]
 8001ab8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
 8001abe:	4b19      	ldr	r3, [pc, #100]	@ (8001b24 <HAL_SD_MspInit+0xc4>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac2:	4a18      	ldr	r2, [pc, #96]	@ (8001b24 <HAL_SD_MspInit+0xc4>)
 8001ac4:	f043 0308 	orr.w	r3, r3, #8
 8001ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aca:	4b16      	ldr	r3, [pc, #88]	@ (8001b24 <HAL_SD_MspInit+0xc4>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ace:	f003 0308 	and.w	r3, r3, #8
 8001ad2:	60bb      	str	r3, [r7, #8]
 8001ad4:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001ad6:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001adc:	2302      	movs	r3, #2
 8001ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001ae8:	230c      	movs	r3, #12
 8001aea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aec:	f107 0314 	add.w	r3, r7, #20
 8001af0:	4619      	mov	r1, r3
 8001af2:	480d      	ldr	r0, [pc, #52]	@ (8001b28 <HAL_SD_MspInit+0xc8>)
 8001af4:	f002 f906 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001af8:	2304      	movs	r3, #4
 8001afa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b00:	2300      	movs	r3, #0
 8001b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b08:	230c      	movs	r3, #12
 8001b0a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b0c:	f107 0314 	add.w	r3, r7, #20
 8001b10:	4619      	mov	r1, r3
 8001b12:	4806      	ldr	r0, [pc, #24]	@ (8001b2c <HAL_SD_MspInit+0xcc>)
 8001b14:	f002 f8f6 	bl	8003d04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001b18:	bf00      	nop
 8001b1a:	3728      	adds	r7, #40	@ 0x28
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40012c00 	.word	0x40012c00
 8001b24:	40023800 	.word	0x40023800
 8001b28:	40020800 	.word	0x40020800
 8001b2c:	40020c00 	.word	0x40020c00

08001b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
 8001b3a:	4b16      	ldr	r3, [pc, #88]	@ (8001b94 <HAL_MspInit+0x64>)
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b3e:	4a15      	ldr	r2, [pc, #84]	@ (8001b94 <HAL_MspInit+0x64>)
 8001b40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b46:	4b13      	ldr	r3, [pc, #76]	@ (8001b94 <HAL_MspInit+0x64>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	603b      	str	r3, [r7, #0]
 8001b56:	4b0f      	ldr	r3, [pc, #60]	@ (8001b94 <HAL_MspInit+0x64>)
 8001b58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b94 <HAL_MspInit+0x64>)
 8001b5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b62:	4b0c      	ldr	r3, [pc, #48]	@ (8001b94 <HAL_MspInit+0x64>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6a:	603b      	str	r3, [r7, #0]
 8001b6c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	210f      	movs	r1, #15
 8001b72:	f06f 0001 	mvn.w	r0, #1
 8001b76:	f000 fcff 	bl	8002578 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2105      	movs	r1, #5
 8001b7e:	2005      	movs	r0, #5
 8001b80:	f000 fcfa 	bl	8002578 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001b84:	2005      	movs	r0, #5
 8001b86:	f000 fd13 	bl	80025b0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023800 	.word	0x40023800

08001b98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08c      	sub	sp, #48	@ 0x30
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	4b2f      	ldr	r3, [pc, #188]	@ (8001c6c <HAL_InitTick+0xd4>)
 8001bae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb0:	4a2e      	ldr	r2, [pc, #184]	@ (8001c6c <HAL_InitTick+0xd4>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bb8:	4b2c      	ldr	r3, [pc, #176]	@ (8001c6c <HAL_InitTick+0xd4>)
 8001bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001bc4:	f107 020c 	add.w	r2, r7, #12
 8001bc8:	f107 0310 	add.w	r3, r7, #16
 8001bcc:	4611      	mov	r1, r2
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f002 fe8c 	bl	80048ec <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001bd4:	f002 fe76 	bl	80048c4 <HAL_RCC_GetPCLK2Freq>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001bde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001be0:	4a23      	ldr	r2, [pc, #140]	@ (8001c70 <HAL_InitTick+0xd8>)
 8001be2:	fba2 2303 	umull	r2, r3, r2, r3
 8001be6:	0c9b      	lsrs	r3, r3, #18
 8001be8:	3b01      	subs	r3, #1
 8001bea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001bec:	4b21      	ldr	r3, [pc, #132]	@ (8001c74 <HAL_InitTick+0xdc>)
 8001bee:	4a22      	ldr	r2, [pc, #136]	@ (8001c78 <HAL_InitTick+0xe0>)
 8001bf0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001bf2:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <HAL_InitTick+0xdc>)
 8001bf4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001bf8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001bfa:	4a1e      	ldr	r2, [pc, #120]	@ (8001c74 <HAL_InitTick+0xdc>)
 8001bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001c00:	4b1c      	ldr	r3, [pc, #112]	@ (8001c74 <HAL_InitTick+0xdc>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c06:	4b1b      	ldr	r3, [pc, #108]	@ (8001c74 <HAL_InitTick+0xdc>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0c:	4b19      	ldr	r3, [pc, #100]	@ (8001c74 <HAL_InitTick+0xdc>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001c12:	4818      	ldr	r0, [pc, #96]	@ (8001c74 <HAL_InitTick+0xdc>)
 8001c14:	f003 fdc6 	bl	80057a4 <HAL_TIM_Base_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001c1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d11b      	bne.n	8001c5e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001c26:	4813      	ldr	r0, [pc, #76]	@ (8001c74 <HAL_InitTick+0xdc>)
 8001c28:	f003 fe0c 	bl	8005844 <HAL_TIM_Base_Start_IT>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001c32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d111      	bne.n	8001c5e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c3a:	2019      	movs	r0, #25
 8001c3c:	f000 fcb8 	bl	80025b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b0f      	cmp	r3, #15
 8001c44:	d808      	bhi.n	8001c58 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001c46:	2200      	movs	r2, #0
 8001c48:	6879      	ldr	r1, [r7, #4]
 8001c4a:	2019      	movs	r0, #25
 8001c4c:	f000 fc94 	bl	8002578 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c50:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <HAL_InitTick+0xe4>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e002      	b.n	8001c5e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3730      	adds	r7, #48	@ 0x30
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	431bde83 	.word	0x431bde83
 8001c74:	20003d20 	.word	0x20003d20
 8001c78:	40010000 	.word	0x40010000
 8001c7c:	20000024 	.word	0x20000024

08001c80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c80:	b480      	push	{r7}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c84:	bf00      	nop
 8001c86:	e7fd      	b.n	8001c84 <NMI_Handler+0x4>

08001c88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c8c:	bf00      	nop
 8001c8e:	e7fd      	b.n	8001c8c <HardFault_Handler+0x4>

08001c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c94:	bf00      	nop
 8001c96:	e7fd      	b.n	8001c94 <MemManage_Handler+0x4>

08001c98 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c9c:	bf00      	nop
 8001c9e:	e7fd      	b.n	8001c9c <BusFault_Handler+0x4>

08001ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ca4:	bf00      	nop
 8001ca6:	e7fd      	b.n	8001ca4 <UsageFault_Handler+0x4>

08001ca8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cac:	bf00      	nop
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001cc8:	4802      	ldr	r0, [pc, #8]	@ (8001cd4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001cca:	f003 fe2b 	bl	8005924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20003d20 	.word	0x20003d20

08001cd8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001cdc:	4802      	ldr	r0, [pc, #8]	@ (8001ce8 <USART3_IRQHandler+0x10>)
 8001cde:	f004 fad7 	bl	8006290 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20003db4 	.word	0x20003db4

08001cec <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001cf0:	4802      	ldr	r0, [pc, #8]	@ (8001cfc <TIM5_IRQHandler+0x10>)
 8001cf2:	f003 fe17 	bl	8005924 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20003d6c 	.word	0x20003d6c

08001d00 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001d04:	4802      	ldr	r0, [pc, #8]	@ (8001d10 <ETH_IRQHandler+0x10>)
 8001d06:	f001 f913 	bl	8002f30 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20008948 	.word	0x20008948

08001d14 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001d18:	4802      	ldr	r0, [pc, #8]	@ (8001d24 <ETH_WKUP_IRQHandler+0x10>)
 8001d1a:	f001 f909 	bl	8002f30 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001d1e:	bf00      	nop
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20008948 	.word	0x20008948

08001d28 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 8001d2c:	4802      	ldr	r0, [pc, #8]	@ (8001d38 <HASH_RNG_IRQHandler+0x10>)
 8001d2e:	f002 fe39 	bl	80049a4 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 8001d32:	bf00      	nop
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20003c8c 	.word	0x20003c8c

08001d3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  return 1;
 8001d40:	2301      	movs	r3, #1
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_kill>:

int _kill(int pid, int sig)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
 8001d54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d56:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <_kill+0x20>)
 8001d58:	2216      	movs	r2, #22
 8001d5a:	601a      	str	r2, [r3, #0]
  return -1;
 8001d5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	2001294c 	.word	0x2001294c

08001d70 <_exit>:

void _exit (int status)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d78:	f04f 31ff 	mov.w	r1, #4294967295
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff ffe5 	bl	8001d4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d82:	bf00      	nop
 8001d84:	e7fd      	b.n	8001d82 <_exit+0x12>

08001d86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b086      	sub	sp, #24
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	60f8      	str	r0, [r7, #12]
 8001d8e:	60b9      	str	r1, [r7, #8]
 8001d90:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
 8001d96:	e00a      	b.n	8001dae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d98:	f3af 8000 	nop.w
 8001d9c:	4601      	mov	r1, r0
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	1c5a      	adds	r2, r3, #1
 8001da2:	60ba      	str	r2, [r7, #8]
 8001da4:	b2ca      	uxtb	r2, r1
 8001da6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3301      	adds	r3, #1
 8001dac:	617b      	str	r3, [r7, #20]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	dbf0      	blt.n	8001d98 <_read+0x12>
  }

  return len;
 8001db6:	687b      	ldr	r3, [r7, #4]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3718      	adds	r7, #24
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001dc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001de8:	605a      	str	r2, [r3, #4]
  return 0;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <_isatty>:

int _isatty(int file)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e00:	2301      	movs	r3, #1
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b085      	sub	sp, #20
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	60f8      	str	r0, [r7, #12]
 8001e16:	60b9      	str	r1, [r7, #8]
 8001e18:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e1a:	2300      	movs	r3, #0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b087      	sub	sp, #28
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e30:	4a14      	ldr	r2, [pc, #80]	@ (8001e84 <_sbrk+0x5c>)
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <_sbrk+0x60>)
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e3c:	4b13      	ldr	r3, [pc, #76]	@ (8001e8c <_sbrk+0x64>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d102      	bne.n	8001e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e44:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <_sbrk+0x64>)
 8001e46:	4a12      	ldr	r2, [pc, #72]	@ (8001e90 <_sbrk+0x68>)
 8001e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e4a:	4b10      	ldr	r3, [pc, #64]	@ (8001e8c <_sbrk+0x64>)
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	4413      	add	r3, r2
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d205      	bcs.n	8001e64 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001e58:	4b0e      	ldr	r3, [pc, #56]	@ (8001e94 <_sbrk+0x6c>)
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e62:	e009      	b.n	8001e78 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e64:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <_sbrk+0x64>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	@ (8001e8c <_sbrk+0x64>)
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	4413      	add	r3, r2
 8001e72:	4a06      	ldr	r2, [pc, #24]	@ (8001e8c <_sbrk+0x64>)
 8001e74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e76:	68fb      	ldr	r3, [r7, #12]
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	20020000 	.word	0x20020000
 8001e88:	00000800 	.word	0x00000800
 8001e8c:	20003d68 	.word	0x20003d68
 8001e90:	20012960 	.word	0x20012960
 8001e94:	2001294c 	.word	0x2001294c

08001e98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <SystemInit+0x20>)
 8001e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ea2:	4a05      	ldr	r2, [pc, #20]	@ (8001eb8 <SystemInit+0x20>)
 8001ea4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ea8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	e000ed00 	.word	0xe000ed00

08001ebc <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed0:	463b      	mov	r3, r7
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001ed8:	4b1d      	ldr	r3, [pc, #116]	@ (8001f50 <MX_TIM5_Init+0x94>)
 8001eda:	4a1e      	ldr	r2, [pc, #120]	@ (8001f54 <MX_TIM5_Init+0x98>)
 8001edc:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 599;
 8001ede:	4b1c      	ldr	r3, [pc, #112]	@ (8001f50 <MX_TIM5_Init+0x94>)
 8001ee0:	f240 2257 	movw	r2, #599	@ 0x257
 8001ee4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f50 <MX_TIM5_Init+0x94>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001eec:	4b18      	ldr	r3, [pc, #96]	@ (8001f50 <MX_TIM5_Init+0x94>)
 8001eee:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef4:	4b16      	ldr	r3, [pc, #88]	@ (8001f50 <MX_TIM5_Init+0x94>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efa:	4b15      	ldr	r3, [pc, #84]	@ (8001f50 <MX_TIM5_Init+0x94>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001f00:	4813      	ldr	r0, [pc, #76]	@ (8001f50 <MX_TIM5_Init+0x94>)
 8001f02:	f003 fc4f 	bl	80057a4 <HAL_TIM_Base_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001f0c:	f7ff fd46 	bl	800199c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f14:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f16:	f107 0308 	add.w	r3, r7, #8
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	480c      	ldr	r0, [pc, #48]	@ (8001f50 <MX_TIM5_Init+0x94>)
 8001f1e:	f003 fdf1 	bl	8005b04 <HAL_TIM_ConfigClockSource>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001f28:	f7ff fd38 	bl	800199c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001f34:	463b      	mov	r3, r7
 8001f36:	4619      	mov	r1, r3
 8001f38:	4805      	ldr	r0, [pc, #20]	@ (8001f50 <MX_TIM5_Init+0x94>)
 8001f3a:	f004 f819 	bl	8005f70 <HAL_TIMEx_MasterConfigSynchronization>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001f44:	f7ff fd2a 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001f48:	bf00      	nop
 8001f4a:	3718      	adds	r7, #24
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20003d6c 	.word	0x20003d6c
 8001f54:	40000c00 	.word	0x40000c00

08001f58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a0e      	ldr	r2, [pc, #56]	@ (8001fa0 <HAL_TIM_Base_MspInit+0x48>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d115      	bne.n	8001f96 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa4 <HAL_TIM_Base_MspInit+0x4c>)
 8001f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f72:	4a0c      	ldr	r2, [pc, #48]	@ (8001fa4 <HAL_TIM_Base_MspInit+0x4c>)
 8001f74:	f043 0308 	orr.w	r3, r3, #8
 8001f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa4 <HAL_TIM_Base_MspInit+0x4c>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8001f86:	2200      	movs	r2, #0
 8001f88:	2105      	movs	r1, #5
 8001f8a:	2032      	movs	r0, #50	@ 0x32
 8001f8c:	f000 faf4 	bl	8002578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001f90:	2032      	movs	r0, #50	@ 0x32
 8001f92:	f000 fb0d 	bl	80025b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8001f96:	bf00      	nop
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40000c00 	.word	0x40000c00
 8001fa4:	40023800 	.word	0x40023800

08001fa8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fac:	4b11      	ldr	r3, [pc, #68]	@ (8001ff4 <MX_USART3_UART_Init+0x4c>)
 8001fae:	4a12      	ldr	r2, [pc, #72]	@ (8001ff8 <MX_USART3_UART_Init+0x50>)
 8001fb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fb2:	4b10      	ldr	r3, [pc, #64]	@ (8001ff4 <MX_USART3_UART_Init+0x4c>)
 8001fb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fb8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff4 <MX_USART3_UART_Init+0x4c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff4 <MX_USART3_UART_Init+0x4c>)
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff4 <MX_USART3_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fcc:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <MX_USART3_UART_Init+0x4c>)
 8001fce:	220c      	movs	r2, #12
 8001fd0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd2:	4b08      	ldr	r3, [pc, #32]	@ (8001ff4 <MX_USART3_UART_Init+0x4c>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	@ (8001ff4 <MX_USART3_UART_Init+0x4c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fde:	4805      	ldr	r0, [pc, #20]	@ (8001ff4 <MX_USART3_UART_Init+0x4c>)
 8001fe0:	f004 f856 	bl	8006090 <HAL_UART_Init>
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d001      	beq.n	8001fee <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fea:	f7ff fcd7 	bl	800199c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	20003db4 	.word	0x20003db4
 8001ff8:	40004800 	.word	0x40004800

08001ffc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	@ 0x28
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]
 800200c:	605a      	str	r2, [r3, #4]
 800200e:	609a      	str	r2, [r3, #8]
 8002010:	60da      	str	r2, [r3, #12]
 8002012:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a1d      	ldr	r2, [pc, #116]	@ (8002090 <HAL_UART_MspInit+0x94>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d134      	bne.n	8002088 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800201e:	2300      	movs	r3, #0
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	4b1c      	ldr	r3, [pc, #112]	@ (8002094 <HAL_UART_MspInit+0x98>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	4a1b      	ldr	r2, [pc, #108]	@ (8002094 <HAL_UART_MspInit+0x98>)
 8002028:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800202c:	6413      	str	r3, [r2, #64]	@ 0x40
 800202e:	4b19      	ldr	r3, [pc, #100]	@ (8002094 <HAL_UART_MspInit+0x98>)
 8002030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002032:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	60fb      	str	r3, [r7, #12]
 800203e:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <HAL_UART_MspInit+0x98>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	4a14      	ldr	r2, [pc, #80]	@ (8002094 <HAL_UART_MspInit+0x98>)
 8002044:	f043 0308 	orr.w	r3, r3, #8
 8002048:	6313      	str	r3, [r2, #48]	@ 0x30
 800204a:	4b12      	ldr	r3, [pc, #72]	@ (8002094 <HAL_UART_MspInit+0x98>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800204e:	f003 0308 	and.w	r3, r3, #8
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002056:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800205a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205c:	2302      	movs	r3, #2
 800205e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002064:	2303      	movs	r3, #3
 8002066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002068:	2307      	movs	r3, #7
 800206a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800206c:	f107 0314 	add.w	r3, r7, #20
 8002070:	4619      	mov	r1, r3
 8002072:	4809      	ldr	r0, [pc, #36]	@ (8002098 <HAL_UART_MspInit+0x9c>)
 8002074:	f001 fe46 	bl	8003d04 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002078:	2200      	movs	r2, #0
 800207a:	2105      	movs	r1, #5
 800207c:	2027      	movs	r0, #39	@ 0x27
 800207e:	f000 fa7b 	bl	8002578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002082:	2027      	movs	r0, #39	@ 0x27
 8002084:	f000 fa94 	bl	80025b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002088:	bf00      	nop
 800208a:	3728      	adds	r7, #40	@ 0x28
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40004800 	.word	0x40004800
 8002094:	40023800 	.word	0x40023800
 8002098:	40020c00 	.word	0x40020c00

0800209c <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 80020a4:	2300      	movs	r3, #0
 80020a6:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive_IT(&huart3, pcRxedChar, 1);
 80020a8:	4b09      	ldr	r3, [pc, #36]	@ (80020d0 <HAL_UART_RxCpltCallback+0x34>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2201      	movs	r2, #1
 80020ae:	4619      	mov	r1, r3
 80020b0:	4808      	ldr	r0, [pc, #32]	@ (80020d4 <HAL_UART_RxCpltCallback+0x38>)
 80020b2:	f004 f8c8 	bl	8006246 <HAL_UART_Receive_IT>
	xSemaphoreGiveFromISR(uartConfigSemHandle, &pxHigherPriorityTaskWoken);
 80020b6:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <HAL_UART_RxCpltCallback+0x3c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f107 020c 	add.w	r2, r7, #12
 80020be:	4611      	mov	r1, r2
 80020c0:	4618      	mov	r0, r3
 80020c2:	f007 ff1f 	bl	8009f04 <xQueueGiveFromISR>

}
 80020c6:	bf00      	nop
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20000020 	.word	0x20000020
 80020d4:	20003db4 	.word	0x20003db4
 80020d8:	20003c88 	.word	0x20003c88

080020dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002114 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80020e0:	f7ff feda 	bl	8001e98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020e4:	480c      	ldr	r0, [pc, #48]	@ (8002118 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020e6:	490d      	ldr	r1, [pc, #52]	@ (800211c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002120 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ec:	e002      	b.n	80020f4 <LoopCopyDataInit>

080020ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020f2:	3304      	adds	r3, #4

080020f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020f8:	d3f9      	bcc.n	80020ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002128 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002100:	e001      	b.n	8002106 <LoopFillZerobss>

08002102 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002102:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002104:	3204      	adds	r2, #4

08002106 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002106:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002108:	d3fb      	bcc.n	8002102 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800210a:	f01c fa59 	bl	801e5c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800210e:	f7ff fba3 	bl	8001858 <main>
  bx  lr    
 8002112:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002114:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002118:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800211c:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8002120:	0802621c 	.word	0x0802621c
  ldr r2, =_sbss
 8002124:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8002128:	2001295c 	.word	0x2001295c

0800212c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800212c:	e7fe      	b.n	800212c <ADC_IRQHandler>

0800212e <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 800212e:	b480      	push	{r7}
 8002130:	b083      	sub	sp, #12
 8002132:	af00      	add	r7, sp, #0
 8002134:	6078      	str	r0, [r7, #4]
 8002136:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00b      	beq.n	8002156 <DP83848_RegisterBusIO+0x28>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d007      	beq.n	8002156 <DP83848_RegisterBusIO+0x28>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <DP83848_RegisterBusIO+0x28>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d102      	bne.n	800215c <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8002156:	f04f 33ff 	mov.w	r3, #4294967295
 800215a:	e014      	b.n	8002186 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685a      	ldr	r2, [r3, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	68da      	ldr	r2, [r3, #12]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	691a      	ldr	r2, [r3, #16]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <DP83848_Init>:
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ADDRESS_ERROR if cannot find device address
  *         DP83848_STATUS_READ_ERROR if connot read register
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 80021a2:	2300      	movs	r3, #0
 80021a4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d139      	bne.n	8002222 <DP83848_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d002      	beq.n	80021bc <DP83848_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2220      	movs	r2, #32
 80021c0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
 80021c6:	e01c      	b.n	8002202 <DP83848_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	f107 020c 	add.w	r2, r7, #12
 80021d0:	2119      	movs	r1, #25
 80021d2:	6978      	ldr	r0, [r7, #20]
 80021d4:	4798      	blx	r3
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	da03      	bge.n	80021e4 <DP83848_Init+0x52>
       {
         status = DP83848_STATUS_READ_ERROR;
 80021dc:	f06f 0304 	mvn.w	r3, #4
 80021e0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80021e2:	e00b      	b.n	80021fc <DP83848_Init+0x6a>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f003 031f 	and.w	r3, r3, #31
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d105      	bne.n	80021fc <DP83848_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	613b      	str	r3, [r7, #16]
         break;
 80021fa:	e005      	b.n	8002208 <DP83848_Init+0x76>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	3301      	adds	r3, #1
 8002200:	617b      	str	r3, [r7, #20]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	2b1f      	cmp	r3, #31
 8002206:	d9df      	bls.n	80021c8 <DP83848_Init+0x36>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2b1f      	cmp	r3, #31
 800220e:	d902      	bls.n	8002216 <DP83848_Init+0x84>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8002210:	f06f 0302 	mvn.w	r3, #2
 8002214:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d102      	bne.n	8002222 <DP83848_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2201      	movs	r2, #1
 8002220:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8002222:	693b      	ldr	r3, [r7, #16]
 }
 8002224:	4618      	mov	r0, r3
 8002226:	3718      	adds	r7, #24
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b084      	sub	sp, #16
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	695b      	ldr	r3, [r3, #20]
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	6810      	ldr	r0, [r2, #0]
 8002240:	f107 020c 	add.w	r2, r7, #12
 8002244:	2101      	movs	r1, #1
 8002246:	4798      	blx	r3
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	da02      	bge.n	8002254 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 800224e:	f06f 0304 	mvn.w	r3, #4
 8002252:	e06e      	b.n	8002332 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	695b      	ldr	r3, [r3, #20]
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6810      	ldr	r0, [r2, #0]
 800225c:	f107 020c 	add.w	r2, r7, #12
 8002260:	2101      	movs	r1, #1
 8002262:	4798      	blx	r3
 8002264:	4603      	mov	r3, r0
 8002266:	2b00      	cmp	r3, #0
 8002268:	da02      	bge.n	8002270 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 800226a:	f06f 0304 	mvn.w	r3, #4
 800226e:	e060      	b.n	8002332 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0304 	and.w	r3, r3, #4
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 800227a:	2301      	movs	r3, #1
 800227c:	e059      	b.n	8002332 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6810      	ldr	r0, [r2, #0]
 8002286:	f107 020c 	add.w	r2, r7, #12
 800228a:	2100      	movs	r1, #0
 800228c:	4798      	blx	r3
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	da02      	bge.n	800229a <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8002294:	f06f 0304 	mvn.w	r3, #4
 8002298:	e04b      	b.n	8002332 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d11b      	bne.n	80022dc <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d006      	beq.n	80022bc <DP83848_GetLinkState+0x90>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80022b8:	2302      	movs	r3, #2
 80022ba:	e03a      	b.n	8002332 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d001      	beq.n	80022ca <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80022c6:	2303      	movs	r3, #3
 80022c8:	e033      	b.n	8002332 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80022d4:	2304      	movs	r3, #4
 80022d6:	e02c      	b.n	8002332 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80022d8:	2305      	movs	r3, #5
 80022da:	e02a      	b.n	8002332 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	695b      	ldr	r3, [r3, #20]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	6810      	ldr	r0, [r2, #0]
 80022e4:	f107 020c 	add.w	r2, r7, #12
 80022e8:	2110      	movs	r1, #16
 80022ea:	4798      	blx	r3
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	da02      	bge.n	80022f8 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 80022f2:	f06f 0304 	mvn.w	r3, #4
 80022f6:	e01c      	b.n	8002332 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	f003 0310 	and.w	r3, r3, #16
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8002302:	2306      	movs	r3, #6
 8002304:	e015      	b.n	8002332 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f003 0306 	and.w	r3, r3, #6
 800230c:	2b04      	cmp	r3, #4
 800230e:	d101      	bne.n	8002314 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8002310:	2302      	movs	r3, #2
 8002312:	e00e      	b.n	8002332 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0306 	and.w	r3, r3, #6
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 800231e:	2303      	movs	r3, #3
 8002320:	e007      	b.n	8002332 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f003 0306 	and.w	r3, r3, #6
 8002328:	2b06      	cmp	r3, #6
 800232a:	d101      	bne.n	8002330 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800232c:	2304      	movs	r3, #4
 800232e:	e000      	b.n	8002332 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8002330:	2305      	movs	r3, #5
    }
  }
}
 8002332:	4618      	mov	r0, r3
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002340:	4b0e      	ldr	r3, [pc, #56]	@ (800237c <HAL_Init+0x40>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0d      	ldr	r2, [pc, #52]	@ (800237c <HAL_Init+0x40>)
 8002346:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800234a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800234c:	4b0b      	ldr	r3, [pc, #44]	@ (800237c <HAL_Init+0x40>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a0a      	ldr	r2, [pc, #40]	@ (800237c <HAL_Init+0x40>)
 8002352:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002356:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002358:	4b08      	ldr	r3, [pc, #32]	@ (800237c <HAL_Init+0x40>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a07      	ldr	r2, [pc, #28]	@ (800237c <HAL_Init+0x40>)
 800235e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002364:	2003      	movs	r0, #3
 8002366:	f000 f8fc 	bl	8002562 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800236a:	200f      	movs	r0, #15
 800236c:	f7ff fc14 	bl	8001b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002370:	f7ff fbde 	bl	8001b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40023c00 	.word	0x40023c00

08002380 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002384:	4b06      	ldr	r3, [pc, #24]	@ (80023a0 <HAL_IncTick+0x20>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	461a      	mov	r2, r3
 800238a:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <HAL_IncTick+0x24>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4413      	add	r3, r2
 8002390:	4a04      	ldr	r2, [pc, #16]	@ (80023a4 <HAL_IncTick+0x24>)
 8002392:	6013      	str	r3, [r2, #0]
}
 8002394:	bf00      	nop
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000028 	.word	0x20000028
 80023a4:	20003dfc 	.word	0x20003dfc

080023a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return uwTick;
 80023ac:	4b03      	ldr	r3, [pc, #12]	@ (80023bc <HAL_GetTick+0x14>)
 80023ae:	681b      	ldr	r3, [r3, #0]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr
 80023ba:	bf00      	nop
 80023bc:	20003dfc 	.word	0x20003dfc

080023c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023c8:	f7ff ffee 	bl	80023a8 <HAL_GetTick>
 80023cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023d8:	d005      	beq.n	80023e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023da:	4b0a      	ldr	r3, [pc, #40]	@ (8002404 <HAL_Delay+0x44>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4413      	add	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80023e6:	bf00      	nop
 80023e8:	f7ff ffde 	bl	80023a8 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d8f7      	bhi.n	80023e8 <HAL_Delay+0x28>
  {
  }
}
 80023f8:	bf00      	nop
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000028 	.word	0x20000028

08002408 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002408:	b480      	push	{r7}
 800240a:	b085      	sub	sp, #20
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	f003 0307 	and.w	r3, r3, #7
 8002416:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002418:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <__NVIC_SetPriorityGrouping+0x44>)
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002424:	4013      	ands	r3, r2
 8002426:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002430:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002434:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002438:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800243a:	4a04      	ldr	r2, [pc, #16]	@ (800244c <__NVIC_SetPriorityGrouping+0x44>)
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	60d3      	str	r3, [r2, #12]
}
 8002440:	bf00      	nop
 8002442:	3714      	adds	r7, #20
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002454:	4b04      	ldr	r3, [pc, #16]	@ (8002468 <__NVIC_GetPriorityGrouping+0x18>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	0a1b      	lsrs	r3, r3, #8
 800245a:	f003 0307 	and.w	r3, r3, #7
}
 800245e:	4618      	mov	r0, r3
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800247a:	2b00      	cmp	r3, #0
 800247c:	db0b      	blt.n	8002496 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800247e:	79fb      	ldrb	r3, [r7, #7]
 8002480:	f003 021f 	and.w	r2, r3, #31
 8002484:	4907      	ldr	r1, [pc, #28]	@ (80024a4 <__NVIC_EnableIRQ+0x38>)
 8002486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248a:	095b      	lsrs	r3, r3, #5
 800248c:	2001      	movs	r0, #1
 800248e:	fa00 f202 	lsl.w	r2, r0, r2
 8002492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	e000e100 	.word	0xe000e100

080024a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	4603      	mov	r3, r0
 80024b0:	6039      	str	r1, [r7, #0]
 80024b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	db0a      	blt.n	80024d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	b2da      	uxtb	r2, r3
 80024c0:	490c      	ldr	r1, [pc, #48]	@ (80024f4 <__NVIC_SetPriority+0x4c>)
 80024c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c6:	0112      	lsls	r2, r2, #4
 80024c8:	b2d2      	uxtb	r2, r2
 80024ca:	440b      	add	r3, r1
 80024cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024d0:	e00a      	b.n	80024e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	b2da      	uxtb	r2, r3
 80024d6:	4908      	ldr	r1, [pc, #32]	@ (80024f8 <__NVIC_SetPriority+0x50>)
 80024d8:	79fb      	ldrb	r3, [r7, #7]
 80024da:	f003 030f 	and.w	r3, r3, #15
 80024de:	3b04      	subs	r3, #4
 80024e0:	0112      	lsls	r2, r2, #4
 80024e2:	b2d2      	uxtb	r2, r2
 80024e4:	440b      	add	r3, r1
 80024e6:	761a      	strb	r2, [r3, #24]
}
 80024e8:	bf00      	nop
 80024ea:	370c      	adds	r7, #12
 80024ec:	46bd      	mov	sp, r7
 80024ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f2:	4770      	bx	lr
 80024f4:	e000e100 	.word	0xe000e100
 80024f8:	e000ed00 	.word	0xe000ed00

080024fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b089      	sub	sp, #36	@ 0x24
 8002500:	af00      	add	r7, sp, #0
 8002502:	60f8      	str	r0, [r7, #12]
 8002504:	60b9      	str	r1, [r7, #8]
 8002506:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	f1c3 0307 	rsb	r3, r3, #7
 8002516:	2b04      	cmp	r3, #4
 8002518:	bf28      	it	cs
 800251a:	2304      	movcs	r3, #4
 800251c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	3304      	adds	r3, #4
 8002522:	2b06      	cmp	r3, #6
 8002524:	d902      	bls.n	800252c <NVIC_EncodePriority+0x30>
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	3b03      	subs	r3, #3
 800252a:	e000      	b.n	800252e <NVIC_EncodePriority+0x32>
 800252c:	2300      	movs	r3, #0
 800252e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002530:	f04f 32ff 	mov.w	r2, #4294967295
 8002534:	69bb      	ldr	r3, [r7, #24]
 8002536:	fa02 f303 	lsl.w	r3, r2, r3
 800253a:	43da      	mvns	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	401a      	ands	r2, r3
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002544:	f04f 31ff 	mov.w	r1, #4294967295
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	fa01 f303 	lsl.w	r3, r1, r3
 800254e:	43d9      	mvns	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002554:	4313      	orrs	r3, r2
         );
}
 8002556:	4618      	mov	r0, r3
 8002558:	3724      	adds	r7, #36	@ 0x24
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr

08002562 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002562:	b580      	push	{r7, lr}
 8002564:	b082      	sub	sp, #8
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff ff4c 	bl	8002408 <__NVIC_SetPriorityGrouping>
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002578:	b580      	push	{r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002586:	2300      	movs	r3, #0
 8002588:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800258a:	f7ff ff61 	bl	8002450 <__NVIC_GetPriorityGrouping>
 800258e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	68b9      	ldr	r1, [r7, #8]
 8002594:	6978      	ldr	r0, [r7, #20]
 8002596:	f7ff ffb1 	bl	80024fc <NVIC_EncodePriority>
 800259a:	4602      	mov	r2, r0
 800259c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a0:	4611      	mov	r1, r2
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7ff ff80 	bl	80024a8 <__NVIC_SetPriority>
}
 80025a8:	bf00      	nop
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ff54 	bl	800246c <__NVIC_EnableIRQ>
}
 80025c4:	bf00      	nop
 80025c6:	3708      	adds	r7, #8
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_DMA_Start_IT+0x26>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e040      	b.n	8002674 <HAL_DMA_Start_IT+0xa8>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002600:	b2db      	uxtb	r3, r3
 8002602:	2b01      	cmp	r3, #1
 8002604:	d12f      	bne.n	8002666 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2202      	movs	r2, #2
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68b9      	ldr	r1, [r7, #8]
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f8cc 	bl	80027b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002624:	223f      	movs	r2, #63	@ 0x3f
 8002626:	409a      	lsls	r2, r3
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f042 0216 	orr.w	r2, r2, #22
 800263a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002640:	2b00      	cmp	r3, #0
 8002642:	d007      	beq.n	8002654 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0208 	orr.w	r2, r2, #8
 8002652:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e005      	b.n	8002672 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800266e:	2302      	movs	r3, #2
 8002670:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002672:	7dfb      	ldrb	r3, [r7, #23]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002688:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800268a:	f7ff fe8d 	bl	80023a8 <HAL_GetTick>
 800268e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002696:	b2db      	uxtb	r3, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d008      	beq.n	80026ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2280      	movs	r2, #128	@ 0x80
 80026a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e052      	b.n	8002754 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0216 	bic.w	r2, r2, #22
 80026bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	695a      	ldr	r2, [r3, #20]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d103      	bne.n	80026de <HAL_DMA_Abort+0x62>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0208 	bic.w	r2, r2, #8
 80026ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f022 0201 	bic.w	r2, r2, #1
 80026fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026fe:	e013      	b.n	8002728 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002700:	f7ff fe52 	bl	80023a8 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b05      	cmp	r3, #5
 800270c:	d90c      	bls.n	8002728 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2220      	movs	r2, #32
 8002712:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2203      	movs	r2, #3
 8002718:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e015      	b.n	8002754 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1e4      	bne.n	8002700 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800273a:	223f      	movs	r2, #63	@ 0x3f
 800273c:	409a      	lsls	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b02      	cmp	r3, #2
 800276e:	d004      	beq.n	800277a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2280      	movs	r2, #128	@ 0x80
 8002774:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e00c      	b.n	8002794 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2205      	movs	r2, #5
 800277e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0201 	bic.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002792:	2300      	movs	r3, #0
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	370c      	adds	r7, #12
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	60b9      	str	r1, [r7, #8]
 80027c2:	607a      	str	r2, [r7, #4]
 80027c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80027d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	2b40      	cmp	r3, #64	@ 0x40
 80027e4:	d108      	bne.n	80027f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	687a      	ldr	r2, [r7, #4]
 80027ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	68ba      	ldr	r2, [r7, #8]
 80027f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027f6:	e007      	b.n	8002808 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	68ba      	ldr	r2, [r7, #8]
 80027fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	60da      	str	r2, [r3, #12]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e08a      	b.n	800293c <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800282c:	2b00      	cmp	r3, #0
 800282e:	d106      	bne.n	800283e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2223      	movs	r2, #35	@ 0x23
 8002834:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f005 fecb 	bl	80085d4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
 8002842:	4b40      	ldr	r3, [pc, #256]	@ (8002944 <HAL_ETH_Init+0x130>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002846:	4a3f      	ldr	r2, [pc, #252]	@ (8002944 <HAL_ETH_Init+0x130>)
 8002848:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800284c:	6453      	str	r3, [r2, #68]	@ 0x44
 800284e:	4b3d      	ldr	r3, [pc, #244]	@ (8002944 <HAL_ETH_Init+0x130>)
 8002850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002852:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002856:	60bb      	str	r3, [r7, #8]
 8002858:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800285a:	4b3b      	ldr	r3, [pc, #236]	@ (8002948 <HAL_ETH_Init+0x134>)
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	4a3a      	ldr	r2, [pc, #232]	@ (8002948 <HAL_ETH_Init+0x134>)
 8002860:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8002864:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002866:	4b38      	ldr	r3, [pc, #224]	@ (8002948 <HAL_ETH_Init+0x134>)
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	4936      	ldr	r1, [pc, #216]	@ (8002948 <HAL_ETH_Init+0x134>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002874:	4b34      	ldr	r3, [pc, #208]	@ (8002948 <HAL_ETH_Init+0x134>)
 8002876:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	f043 0301 	orr.w	r3, r3, #1
 800288a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800288e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002890:	f7ff fd8a 	bl	80023a8 <HAL_GetTick>
 8002894:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002896:	e011      	b.n	80028bc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002898:	f7ff fd86 	bl	80023a8 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80028a6:	d909      	bls.n	80028bc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2204      	movs	r2, #4
 80028ac:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	22e0      	movs	r2, #224	@ 0xe0
 80028b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e03f      	b.n	800293c <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d1e4      	bne.n	8002898 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 ff5a 	bl	8003788 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f001 f805 	bl	80038e4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f001 f85b 	bl	8003996 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	461a      	mov	r2, r3
 80028e6:	2100      	movs	r1, #0
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 ffc3 	bl	8003874 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 80028fc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8002906:	687a      	ldr	r2, [r7, #4]
 8002908:	6812      	ldr	r2, [r2, #0]
 800290a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800290e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002912:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8002926:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2210      	movs	r2, #16
 8002936:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	40023800 	.word	0x40023800
 8002948:	40013800 	.word	0x40013800

0800294c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800295a:	2b10      	cmp	r3, #16
 800295c:	d161      	bne.n	8002a22 <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2223      	movs	r2, #35	@ 0x23
 8002962:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2204      	movs	r2, #4
 8002970:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f9f4 	bl	8002d60 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002980:	2001      	movs	r0, #1
 8002982:	f7ff fd1d 	bl	80023c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6812      	ldr	r2, [r2, #0]
 800299c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80029a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029a4:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6812      	ldr	r2, [r2, #0]
 80029b4:	f043 0302 	orr.w	r3, r3, #2
 80029b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80029bc:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 fd7e 	bl	80034c0 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0208 	orr.w	r2, r2, #8
 80029d2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80029dc:	2001      	movs	r0, #1
 80029de:	f7ff fcef 	bl	80023c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68fa      	ldr	r2, [r7, #12]
 80029e8:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0204 	orr.w	r2, r2, #4
 80029f8:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a02:	69db      	ldr	r3, [r3, #28]
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8002a0c:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8002a10:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a14:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2223      	movs	r2, #35	@ 0x23
 8002a1a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	e000      	b.n	8002a24 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
  }
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}

08002a2c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b086      	sub	sp, #24
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a3a:	2b23      	cmp	r3, #35	@ 0x23
 8002a3c:	d170      	bne.n	8002b20 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2223      	movs	r2, #35	@ 0x23
 8002a42:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6812      	ldr	r2, [r2, #0]
 8002a54:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8002a58:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8002a5c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a60:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a6a:	699b      	ldr	r3, [r3, #24]
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6812      	ldr	r2, [r2, #0]
 8002a70:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002a74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a78:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	f023 0302 	bic.w	r3, r3, #2
 8002a8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002a90:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f022 0204 	bic.w	r2, r2, #4
 8002aa0:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002aaa:	2001      	movs	r0, #1
 8002aac:	f7ff fc88 	bl	80023c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fd01 	bl	80034c0 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0208 	bic.w	r2, r2, #8
 8002acc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	f7ff fc72 	bl	80023c0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	617b      	str	r3, [r7, #20]
 8002ae8:	e00e      	b.n	8002b08 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	3212      	adds	r2, #18
 8002af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af4:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	3301      	adds	r3, #1
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	2b03      	cmp	r3, #3
 8002b0c:	d9ed      	bls.n	8002aea <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2210      	movs	r2, #16
 8002b18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	e000      	b.n	8002b22 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
  }
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3718      	adds	r7, #24
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}

08002b2a <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8002b2a:	b580      	push	{r7, lr}
 8002b2c:	b082      	sub	sp, #8
 8002b2e:	af00      	add	r7, sp, #0
 8002b30:	6078      	str	r0, [r7, #4]
 8002b32:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d109      	bne.n	8002b4e <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b40:	f043 0201 	orr.w	r2, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e045      	b.n	8002bda <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b54:	2b23      	cmp	r3, #35	@ 0x23
 8002b56:	d13f      	bne.n	8002bd8 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8002b60:	2201      	movs	r2, #1
 8002b62:	6839      	ldr	r1, [r7, #0]
 8002b64:	6878      	ldr	r0, [r7, #4]
 8002b66:	f000 ff85 	bl	8003a74 <ETH_Prepare_Tx_Descriptors>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d009      	beq.n	8002b84 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b76:	f043 0202 	orr.w	r2, r3, #2
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e02a      	b.n	8002bda <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8002b84:	f3bf 8f4f 	dsb	sy
}
 8002b88:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b98:	2b03      	cmp	r3, #3
 8002b9a:	d904      	bls.n	8002ba6 <HAL_ETH_Transmit_IT+0x7c>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ba0:	1f1a      	subs	r2, r3, #4
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	f003 0304 	and.w	r3, r3, #4
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00d      	beq.n	8002bd4 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	e000      	b.n	8002bda <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
  }
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b088      	sub	sp, #32
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
 8002bea:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c00:	f043 0201 	orr.w	r2, r3, #1
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e0a4      	b.n	8002d58 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c14:	2b23      	cmp	r3, #35	@ 0x23
 8002c16:	d001      	beq.n	8002c1c <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e09d      	b.n	8002d58 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c20:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	69fa      	ldr	r2, [r7, #28]
 8002c26:	3212      	adds	r2, #18
 8002c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c2c:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c32:	f1c3 0304 	rsb	r3, r3, #4
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002c38:	e066      	b.n	8002d08 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d007      	beq.n	8002c56 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	69da      	ldr	r2, [r3, #28]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	699a      	ldr	r2, [r3, #24]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d103      	bne.n	8002c6a <HAL_ETH_ReadData+0x88>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d03c      	beq.n	8002ce4 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	0c1b      	lsrs	r3, r3, #16
 8002c88:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002c8c:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	f005 fe48 	bl	8008958 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ccc:	1c5a      	adds	r2, r3, #1
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	441a      	add	r2, r3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002cde:	69bb      	ldr	r3, [r7, #24]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	3301      	adds	r3, #1
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d902      	bls.n	8002cf6 <HAL_ETH_ReadData+0x114>
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	3b04      	subs	r3, #4
 8002cf4:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	3212      	adds	r2, #18
 8002cfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d00:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	3301      	adds	r3, #1
 8002d06:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	db06      	blt.n	8002d1e <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002d10:	697a      	ldr	r2, [r7, #20]
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d202      	bcs.n	8002d1e <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8002d18:	7cfb      	ldrb	r3, [r7, #19]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d08d      	beq.n	8002c3a <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	441a      	add	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 f814 	bl	8002d60 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69fa      	ldr	r2, [r7, #28]
 8002d3c:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 8002d3e:	7cfb      	ldrb	r3, [r7, #19]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d108      	bne.n	8002d56 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	e000      	b.n	8002d58 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3720      	adds	r7, #32
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d74:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	69fa      	ldr	r2, [r7, #28]
 8002d7a:	3212      	adds	r2, #18
 8002d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d80:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d86:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002d88:	e044      	b.n	8002e14 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d112      	bne.n	8002db8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8002d92:	f107 0308 	add.w	r3, r7, #8
 8002d96:	4618      	mov	r0, r3
 8002d98:	f005 fdae 	bl	80088f8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d102      	bne.n	8002da8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8002da2:	2300      	movs	r3, #0
 8002da4:	74fb      	strb	r3, [r7, #19]
 8002da6:	e007      	b.n	8002db8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	461a      	mov	r2, r3
 8002dac:	697b      	ldr	r3, [r7, #20]
 8002dae:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	461a      	mov	r2, r3
 8002db4:	697b      	ldr	r3, [r7, #20]
 8002db6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002db8:	7cfb      	ldrb	r3, [r7, #19]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d02a      	beq.n	8002e14 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d108      	bne.n	8002dd8 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	695b      	ldr	r3, [r3, #20]
 8002dca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002dce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	6053      	str	r3, [r2, #4]
 8002dd6:	e005      	b.n	8002de4 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	3301      	adds	r3, #1
 8002df4:	61fb      	str	r3, [r7, #28]
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d902      	bls.n	8002e02 <ETH_UpdateDescriptor+0xa2>
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	3b04      	subs	r3, #4
 8002e00:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	3212      	adds	r2, #18
 8002e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e0c:	617b      	str	r3, [r7, #20]
      desccount--;
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	3b01      	subs	r3, #1
 8002e12:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <ETH_UpdateDescriptor+0xc0>
 8002e1a:	7cfb      	ldrb	r3, [r7, #19]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1b4      	bne.n	8002d8a <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d01a      	beq.n	8002e60 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e34:	f3bf 8f5f 	dmb	sy
}
 8002e38:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6919      	ldr	r1, [r3, #16]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	4613      	mov	r3, r2
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	4413      	add	r3, r2
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	18ca      	adds	r2, r1, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002e52:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	69fa      	ldr	r2, [r7, #28]
 8002e58:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 8002e60:	bf00      	nop
 8002e62:	3720      	adds	r7, #32
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b086      	sub	sp, #24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3318      	adds	r3, #24
 8002e74:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e80:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8002e82:	2301      	movs	r3, #1
 8002e84:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002e86:	e047      	b.n	8002f18 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8002e92:	68ba      	ldr	r2, [r7, #8]
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	3304      	adds	r3, #4
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	4413      	add	r3, r2
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10a      	bne.n	8002eb8 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	613b      	str	r3, [r7, #16]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	2b03      	cmp	r3, #3
 8002eac:	d902      	bls.n	8002eb4 <HAL_ETH_ReleaseTxPacket+0x4c>
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	3b04      	subs	r3, #4
 8002eb2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002eb8:	7bbb      	ldrb	r3, [r7, #14]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d02c      	beq.n	8002f18 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68d9      	ldr	r1, [r3, #12]
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	4413      	add	r3, r2
 8002eca:	00db      	lsls	r3, r3, #3
 8002ecc:	440b      	add	r3, r1
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	db1f      	blt.n	8002f14 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	3304      	adds	r3, #4
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f005 fd79 	bl	80089d8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002ee6:	68ba      	ldr	r2, [r7, #8]
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	3304      	adds	r3, #4
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	4413      	add	r3, r2
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d902      	bls.n	8002f06 <HAL_ETH_ReleaseTxPacket+0x9e>
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	3b04      	subs	r3, #4
 8002f04:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	697a      	ldr	r2, [r7, #20]
 8002f0a:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002f12:	e001      	b.n	8002f18 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8002f14:	2300      	movs	r3, #0
 8002f16:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <HAL_ETH_ReleaseTxPacket+0xbc>
 8002f1e:	7bfb      	ldrb	r3, [r7, #15]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d1b1      	bne.n	8002e88 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f3e:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8002f58:	4b4b      	ldr	r3, [pc, #300]	@ (8003088 <HAL_ETH_IRQHandler+0x158>)
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00e      	beq.n	8002f86 <HAL_ETH_IRQHandler+0x56>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d009      	beq.n	8002f86 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	4b43      	ldr	r3, [pc, #268]	@ (800308c <HAL_ETH_IRQHandler+0x15c>)
 8002f7e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f005 f867 	bl	8008054 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d00f      	beq.n	8002fb0 <HAL_ETH_IRQHandler+0x80>
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002fa8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f005 f862 	bl	8008074 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d042      	beq.n	8003040 <HAL_ETH_IRQHandler+0x110>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d03d      	beq.n	8003040 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fca:	f043 0208 	orr.w	r2, r3, #8
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d01a      	beq.n	8003014 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fe6:	695a      	ldr	r2, [r3, #20]
 8002fe8:	4b29      	ldr	r3, [pc, #164]	@ (8003090 <HAL_ETH_IRQHandler+0x160>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	687a      	ldr	r2, [r7, #4]
 8002fee:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	687a      	ldr	r2, [r7, #4]
 8002ffe:	6812      	ldr	r2, [r2, #0]
 8003000:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003004:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003008:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	22e0      	movs	r2, #224	@ 0xe0
 800300e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003012:	e012      	b.n	800303a <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800301c:	695a      	ldr	r2, [r3, #20]
 800301e:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003022:	4013      	ands	r3, r2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003032:	461a      	mov	r2, r3
 8003034:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003038:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f005 f82a 	bl	8008094 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	f003 0308 	and.w	r3, r3, #8
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00e      	beq.n	8003068 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003050:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f000 f81a 	bl	8003094 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003072:	4b05      	ldr	r3, [pc, #20]	@ (8003088 <HAL_ETH_IRQHandler+0x158>)
 8003074:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003078:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f814 	bl	80030a8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003080:	bf00      	nop
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	40013c00 	.word	0x40013c00
 800308c:	00010040 	.word	0x00010040
 8003090:	007e2000 	.word	0x007e2000

08003094 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
 80030c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	f003 031c 	and.w	r3, r3, #28
 80030d8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	02db      	lsls	r3, r3, #11
 80030de:	b29b      	uxth	r3, r3
 80030e0:	697a      	ldr	r2, [r7, #20]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	019b      	lsls	r3, r3, #6
 80030ea:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80030ee:	697a      	ldr	r2, [r7, #20]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	f023 0302 	bic.w	r3, r3, #2
 80030fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f043 0301 	orr.w	r3, r3, #1
 8003102:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800310c:	f7ff f94c 	bl	80023a8 <HAL_GetTick>
 8003110:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003112:	e00d      	b.n	8003130 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003114:	f7ff f948 	bl	80023a8 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003122:	d301      	bcc.n	8003128 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e010      	b.n	800314a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	691b      	ldr	r3, [r3, #16]
 800312e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1ec      	bne.n	8003114 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	695b      	ldr	r3, [r3, #20]
 8003140:	b29b      	uxth	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003148:	2300      	movs	r3, #0
}
 800314a:	4618      	mov	r0, r3
 800314c:	3718      	adds	r7, #24
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b086      	sub	sp, #24
 8003156:	af00      	add	r7, sp, #0
 8003158:	60f8      	str	r0, [r7, #12]
 800315a:	60b9      	str	r1, [r7, #8]
 800315c:	607a      	str	r2, [r7, #4]
 800315e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	691b      	ldr	r3, [r3, #16]
 8003166:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	f003 031c 	and.w	r3, r3, #28
 800316e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	02db      	lsls	r3, r3, #11
 8003174:	b29b      	uxth	r3, r3
 8003176:	697a      	ldr	r2, [r7, #20]
 8003178:	4313      	orrs	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	019b      	lsls	r3, r3, #6
 8003180:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	4313      	orrs	r3, r2
 8003188:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	f043 0302 	orr.w	r3, r3, #2
 8003190:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	b29a      	uxth	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031ac:	f7ff f8fc 	bl	80023a8 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80031b2:	e00d      	b.n	80031d0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80031b4:	f7ff f8f8 	bl	80023a8 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031c2:	d301      	bcc.n	80031c8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e009      	b.n	80031dc <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	691b      	ldr	r3, [r3, #16]
 80031ce:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1ec      	bne.n	80031b4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 80031da:	2300      	movs	r3, #0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3718      	adds	r7, #24
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0e6      	b.n	80033c6 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b00      	cmp	r3, #0
 8003204:	bf14      	ite	ne
 8003206:	2301      	movne	r3, #1
 8003208:	2300      	moveq	r3, #0
 800320a:	b2db      	uxtb	r3, r3
 800320c:	461a      	mov	r2, r3
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800322c:	2b00      	cmp	r3, #0
 800322e:	bf0c      	ite	eq
 8003230:	2301      	moveq	r3, #1
 8003232:	2300      	movne	r3, #0
 8003234:	b2db      	uxtb	r3, r3
 8003236:	461a      	mov	r2, r3
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf14      	ite	ne
 800324c:	2301      	movne	r3, #1
 800324e:	2300      	moveq	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003262:	2b00      	cmp	r3, #0
 8003264:	bf0c      	ite	eq
 8003266:	2301      	moveq	r3, #1
 8003268:	2300      	movne	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf14      	ite	ne
 8003280:	2301      	movne	r3, #1
 8003282:	2300      	moveq	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	461a      	mov	r2, r3
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	bf0c      	ite	eq
 80032b6:	2301      	moveq	r3, #1
 80032b8:	2300      	movne	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	461a      	mov	r2, r3
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bf0c      	ite	eq
 80032d0:	2301      	moveq	r3, #1
 80032d2:	2300      	movne	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	461a      	mov	r2, r3
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	bf14      	ite	ne
 80032ea:	2301      	movne	r3, #1
 80032ec:	2300      	moveq	r3, #0
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	461a      	mov	r2, r3
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800330e:	2b00      	cmp	r3, #0
 8003310:	bf14      	ite	ne
 8003312:	2301      	movne	r3, #1
 8003314:	2300      	moveq	r3, #0
 8003316:	b2db      	uxtb	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	461a      	mov	r2, r3
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	bf14      	ite	ne
 8003346:	2301      	movne	r3, #1
 8003348:	2300      	moveq	r3, #0
 800334a:	b2db      	uxtb	r3, r3
 800334c:	461a      	mov	r2, r3
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800335e:	2b00      	cmp	r3, #0
 8003360:	bf0c      	ite	eq
 8003362:	2301      	moveq	r3, #1
 8003364:	2300      	movne	r3, #0
 8003366:	b2db      	uxtb	r3, r3
 8003368:	461a      	mov	r2, r3
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	b29a      	uxth	r2, r3
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	699b      	ldr	r3, [r3, #24]
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b00      	cmp	r3, #0
 8003398:	bf14      	ite	ne
 800339a:	2301      	movne	r3, #1
 800339c:	2300      	moveq	r3, #0
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bf14      	ite	ne
 80033b6:	2301      	movne	r3, #1
 80033b8:	2300      	moveq	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e00b      	b.n	80033fe <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033ec:	2b10      	cmp	r3, #16
 80033ee:	d105      	bne.n	80033fc <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80033f0:	6839      	ldr	r1, [r7, #0]
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f88a 	bl	800350c <ETH_SetMACConfig>

    return HAL_OK;
 80033f8:	2300      	movs	r3, #0
 80033fa:	e000      	b.n	80033fe <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
  }
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3708      	adds	r7, #8
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f023 031c 	bic.w	r3, r3, #28
 800341e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003420:	f001 fa30 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 8003424:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4a14      	ldr	r2, [pc, #80]	@ (800347c <HAL_ETH_SetMDIOClockRange+0x74>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d804      	bhi.n	8003438 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	f043 0308 	orr.w	r3, r3, #8
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	e019      	b.n	800346c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4a11      	ldr	r2, [pc, #68]	@ (8003480 <HAL_ETH_SetMDIOClockRange+0x78>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d204      	bcs.n	800344a <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f043 030c 	orr.w	r3, r3, #12
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	e010      	b.n	800346c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	4a0d      	ldr	r2, [pc, #52]	@ (8003484 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d90c      	bls.n	800346c <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	4a0c      	ldr	r2, [pc, #48]	@ (8003488 <HAL_ETH_SetMDIOClockRange+0x80>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d804      	bhi.n	8003464 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f043 0304 	orr.w	r3, r3, #4
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	e003      	b.n	800346c <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	f043 0310 	orr.w	r3, r3, #16
 800346a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	611a      	str	r2, [r3, #16]
}
 8003474:	bf00      	nop
 8003476:	3710      	adds	r7, #16
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	02160ebf 	.word	0x02160ebf
 8003480:	03938700 	.word	0x03938700
 8003484:	05f5e0ff 	.word	0x05f5e0ff
 8003488:	08f0d17f 	.word	0x08f0d17f

0800348c <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 800349a:	4618      	mov	r0, r3
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr

080034c0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6812      	ldr	r2, [r2, #0]
 80034da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034de:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034e2:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80034f0:	2001      	movs	r0, #1
 80034f2:	f7fe ff65 	bl	80023c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003500:	6193      	str	r3, [r2, #24]
}
 8003502:	bf00      	nop
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	4b53      	ldr	r3, [pc, #332]	@ (8003670 <ETH_SetMACConfig+0x164>)
 8003522:	4013      	ands	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	7b9b      	ldrb	r3, [r3, #14]
 800352a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800352c:	683a      	ldr	r2, [r7, #0]
 800352e:	7c12      	ldrb	r2, [r2, #16]
 8003530:	2a00      	cmp	r2, #0
 8003532:	d102      	bne.n	800353a <ETH_SetMACConfig+0x2e>
 8003534:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003538:	e000      	b.n	800353c <ETH_SetMACConfig+0x30>
 800353a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800353c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	7c52      	ldrb	r2, [r2, #17]
 8003542:	2a00      	cmp	r2, #0
 8003544:	d102      	bne.n	800354c <ETH_SetMACConfig+0x40>
 8003546:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 800354a:	e000      	b.n	800354e <ETH_SetMACConfig+0x42>
 800354c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800354e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003554:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	7fdb      	ldrb	r3, [r3, #31]
 800355a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800355c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003562:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	7f92      	ldrb	r2, [r2, #30]
 8003568:	2a00      	cmp	r2, #0
 800356a:	d102      	bne.n	8003572 <ETH_SetMACConfig+0x66>
 800356c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003570:	e000      	b.n	8003574 <ETH_SetMACConfig+0x68>
 8003572:	2200      	movs	r2, #0
                        macconf->Speed |
 8003574:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	7f1b      	ldrb	r3, [r3, #28]
 800357a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800357c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003582:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	791b      	ldrb	r3, [r3, #4]
 8003588:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800358a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003592:	2a00      	cmp	r2, #0
 8003594:	d102      	bne.n	800359c <ETH_SetMACConfig+0x90>
 8003596:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800359a:	e000      	b.n	800359e <ETH_SetMACConfig+0x92>
 800359c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800359e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	7bdb      	ldrb	r3, [r3, #15]
 80035a4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80035a6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80035ac:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80035b4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80035b6:	4313      	orrs	r3, r2
 80035b8:	68fa      	ldr	r2, [r7, #12]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80035ce:	2001      	movs	r0, #1
 80035d0:	f7fe fef6 	bl	80023c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	f64f 7341 	movw	r3, #65345	@ 0xff41
 80035ea:	4013      	ands	r3, r2
 80035ec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035f2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80035f4:	683a      	ldr	r2, [r7, #0]
 80035f6:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 80035fa:	2a00      	cmp	r2, #0
 80035fc:	d101      	bne.n	8003602 <ETH_SetMACConfig+0xf6>
 80035fe:	2280      	movs	r2, #128	@ 0x80
 8003600:	e000      	b.n	8003604 <ETH_SetMACConfig+0xf8>
 8003602:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003604:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800360a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800360c:	683a      	ldr	r2, [r7, #0]
 800360e:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8003612:	2a01      	cmp	r2, #1
 8003614:	d101      	bne.n	800361a <ETH_SetMACConfig+0x10e>
 8003616:	2208      	movs	r2, #8
 8003618:	e000      	b.n	800361c <ETH_SetMACConfig+0x110>
 800361a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800361c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8003624:	2a01      	cmp	r2, #1
 8003626:	d101      	bne.n	800362c <ETH_SetMACConfig+0x120>
 8003628:	2204      	movs	r2, #4
 800362a:	e000      	b.n	800362e <ETH_SetMACConfig+0x122>
 800362c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800362e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8003630:	683a      	ldr	r2, [r7, #0]
 8003632:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8003636:	2a01      	cmp	r2, #1
 8003638:	d101      	bne.n	800363e <ETH_SetMACConfig+0x132>
 800363a:	2202      	movs	r2, #2
 800363c:	e000      	b.n	8003640 <ETH_SetMACConfig+0x134>
 800363e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8003640:	4313      	orrs	r3, r2
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	4313      	orrs	r3, r2
 8003646:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003658:	2001      	movs	r0, #1
 800365a:	f7fe feb1 	bl	80023c0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	619a      	str	r2, [r3, #24]
}
 8003666:	bf00      	nop
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	fd20810f 	.word	0xfd20810f

08003674 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4b3d      	ldr	r3, [pc, #244]	@ (8003784 <ETH_SetDMAConfig+0x110>)
 800368e:	4013      	ands	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	7b1b      	ldrb	r3, [r3, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d102      	bne.n	80036a0 <ETH_SetDMAConfig+0x2c>
 800369a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800369e:	e000      	b.n	80036a2 <ETH_SetDMAConfig+0x2e>
 80036a0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	7b5b      	ldrb	r3, [r3, #13]
 80036a6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036a8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	7f52      	ldrb	r2, [r2, #29]
 80036ae:	2a00      	cmp	r2, #0
 80036b0:	d102      	bne.n	80036b8 <ETH_SetDMAConfig+0x44>
 80036b2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80036b6:	e000      	b.n	80036ba <ETH_SetDMAConfig+0x46>
 80036b8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80036ba:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	7b9b      	ldrb	r3, [r3, #14]
 80036c0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80036c2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80036c8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	7f1b      	ldrb	r3, [r3, #28]
 80036ce:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80036d0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	7f9b      	ldrb	r3, [r3, #30]
 80036d6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80036d8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80036de:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036e6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80036e8:	4313      	orrs	r3, r2
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80036f8:	461a      	mov	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800370a:	2001      	movs	r0, #1
 800370c:	f7fe fe58 	bl	80023c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003718:	461a      	mov	r2, r3
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	791b      	ldrb	r3, [r3, #4]
 8003722:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003728:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800372e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003734:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800373c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800373e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003744:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003746:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800374c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6812      	ldr	r2, [r2, #0]
 8003752:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003756:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800375a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003768:	2001      	movs	r0, #1
 800376a:	f7fe fe29 	bl	80023c0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003776:	461a      	mov	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6013      	str	r3, [r2, #0]
}
 800377c:	bf00      	nop
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	f8de3f23 	.word	0xf8de3f23

08003788 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b0a6      	sub	sp, #152	@ 0x98
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003790:	2301      	movs	r3, #1
 8003792:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 8003796:	2301      	movs	r3, #1
 8003798:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800379c:	2300      	movs	r3, #0
 800379e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80037a0:	2300      	movs	r3, #0
 80037a2:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80037ac:	2300      	movs	r3, #0
 80037ae:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80037b8:	2301      	movs	r3, #1
 80037ba:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80037be:	2300      	movs	r3, #0
 80037c0:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80037c4:	2300      	movs	r3, #0
 80037c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80037ca:	2300      	movs	r3, #0
 80037cc:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80037d4:	2300      	movs	r3, #0
 80037d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80037d8:	2300      	movs	r3, #0
 80037da:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80037de:	2300      	movs	r3, #0
 80037e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80037e4:	2300      	movs	r3, #0
 80037e6:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80037ea:	2300      	movs	r3, #0
 80037ec:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80037f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80037f4:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80037f6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80037fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003802:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f7ff fe7f 	bl	800350c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800380e:	2301      	movs	r3, #1
 8003810:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003812:	2301      	movs	r3, #1
 8003814:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003816:	2301      	movs	r3, #1
 8003818:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800381c:	2301      	movs	r3, #1
 800381e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003820:	2300      	movs	r3, #0
 8003822:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8003824:	2300      	movs	r3, #0
 8003826:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800382a:	2300      	movs	r3, #0
 800382c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003830:	2300      	movs	r3, #0
 8003832:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8003834:	2301      	movs	r3, #1
 8003836:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800383a:	2301      	movs	r3, #1
 800383c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800383e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003842:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003844:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003848:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800384a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800384e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8003850:	2301      	movs	r3, #1
 8003852:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003856:	2300      	movs	r3, #0
 8003858:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800385e:	f107 0308 	add.w	r3, r7, #8
 8003862:	4619      	mov	r1, r3
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff ff05 	bl	8003674 <ETH_SetDMAConfig>
}
 800386a:	bf00      	nop
 800386c:	3798      	adds	r7, #152	@ 0x98
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
	...

08003874 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003874:	b480      	push	{r7}
 8003876:	b087      	sub	sp, #28
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3305      	adds	r3, #5
 8003884:	781b      	ldrb	r3, [r3, #0]
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	3204      	adds	r2, #4
 800388c:	7812      	ldrb	r2, [r2, #0]
 800388e:	4313      	orrs	r3, r2
 8003890:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003892:	68ba      	ldr	r2, [r7, #8]
 8003894:	4b11      	ldr	r3, [pc, #68]	@ (80038dc <ETH_MACAddressConfig+0x68>)
 8003896:	4413      	add	r3, r2
 8003898:	461a      	mov	r2, r3
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	3303      	adds	r3, #3
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	061a      	lsls	r2, r3, #24
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	3302      	adds	r3, #2
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	041b      	lsls	r3, r3, #16
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	3301      	adds	r3, #1
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	021b      	lsls	r3, r3, #8
 80038b8:	4313      	orrs	r3, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	7812      	ldrb	r2, [r2, #0]
 80038be:	4313      	orrs	r3, r2
 80038c0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80038c2:	68ba      	ldr	r2, [r7, #8]
 80038c4:	4b06      	ldr	r3, [pc, #24]	@ (80038e0 <ETH_MACAddressConfig+0x6c>)
 80038c6:	4413      	add	r3, r2
 80038c8:	461a      	mov	r2, r3
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	6013      	str	r3, [r2, #0]
}
 80038ce:	bf00      	nop
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40028040 	.word	0x40028040
 80038e0:	40028044 	.word	0x40028044

080038e4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b085      	sub	sp, #20
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]
 80038f0:	e03e      	b.n	8003970 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	68d9      	ldr	r1, [r3, #12]
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4613      	mov	r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	4413      	add	r3, r2
 80038fe:	00db      	lsls	r3, r3, #3
 8003900:	440b      	add	r3, r1
 8003902:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	2200      	movs	r2, #0
 8003908:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2200      	movs	r2, #0
 800390e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2200      	movs	r2, #0
 8003914:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	2200      	movs	r2, #0
 800391a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800391c:	68b9      	ldr	r1, [r7, #8]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	3206      	adds	r2, #6
 8003924:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b02      	cmp	r3, #2
 8003938:	d80c      	bhi.n	8003954 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	68d9      	ldr	r1, [r3, #12]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	1c5a      	adds	r2, r3, #1
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	00db      	lsls	r3, r3, #3
 800394a:	440b      	add	r3, r1
 800394c:	461a      	mov	r2, r3
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	60da      	str	r2, [r3, #12]
 8003952:	e004      	b.n	800395e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	461a      	mov	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800395e:	68bb      	ldr	r3, [r7, #8]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	3301      	adds	r3, #1
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2b03      	cmp	r3, #3
 8003974:	d9bd      	bls.n	80038f2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68da      	ldr	r2, [r3, #12]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003988:	611a      	str	r2, [r3, #16]
}
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8003996:	b480      	push	{r7}
 8003998:	b085      	sub	sp, #20
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	e048      	b.n	8003a36 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6919      	ldr	r1, [r3, #16]
 80039a8:	68fa      	ldr	r2, [r7, #12]
 80039aa:	4613      	mov	r3, r2
 80039ac:	009b      	lsls	r3, r3, #2
 80039ae:	4413      	add	r3, r2
 80039b0:	00db      	lsls	r3, r3, #3
 80039b2:	440b      	add	r3, r1
 80039b4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	2200      	movs	r2, #0
 80039c0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	2200      	movs	r2, #0
 80039c6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	2200      	movs	r2, #0
 80039cc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2200      	movs	r2, #0
 80039d2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80039d4:	68bb      	ldr	r3, [r7, #8]
 80039d6:	2200      	movs	r2, #0
 80039d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80039e0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	685b      	ldr	r3, [r3, #4]
 80039f2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80039fa:	68b9      	ldr	r1, [r7, #8]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	3212      	adds	r2, #18
 8003a02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d80c      	bhi.n	8003a26 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6919      	ldr	r1, [r3, #16]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1c5a      	adds	r2, r3, #1
 8003a14:	4613      	mov	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	00db      	lsls	r3, r3, #3
 8003a1c:	440b      	add	r3, r1
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	60da      	str	r2, [r3, #12]
 8003a24:	e004      	b.n	8003a30 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	3301      	adds	r3, #1
 8003a34:	60fb      	str	r3, [r7, #12]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d9b3      	bls.n	80039a4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691a      	ldr	r2, [r3, #16]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a66:	60da      	str	r2, [r3, #12]
}
 8003a68:	bf00      	nop
 8003a6a:	3714      	adds	r7, #20
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b091      	sub	sp, #68	@ 0x44
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	60f8      	str	r0, [r7, #12]
 8003a7c:	60b9      	str	r1, [r7, #8]
 8003a7e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	3318      	adds	r3, #24
 8003a84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8003a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003a8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 8003a92:	2300      	movs	r3, #0
 8003a94:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a98:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a9e:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ab2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ab6:	d007      	beq.n	8003ac8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003ab8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003abc:	3304      	adds	r3, #4
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	e115      	b.n	8003cf8 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8003acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ace:	3301      	adds	r3, #1
 8003ad0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	461a      	mov	r2, r3
 8003ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ada:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003adc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003ae4:	f023 031f 	bic.w	r3, r3, #31
 8003ae8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003aea:	6852      	ldr	r2, [r2, #4]
 8003aec:	431a      	orrs	r2, r3
 8003aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003af0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 0301 	and.w	r3, r3, #1
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d008      	beq.n	8003b10 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	431a      	orrs	r2, r3
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d008      	beq.n	8003b2e <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d005      	beq.n	8003b46 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b44:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b50:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8003b52:	e084      	b.n	8003c5e <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8003b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5e:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d006      	beq.n	8003b74 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	e005      	b.n	8003b80 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7e:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b82:	3301      	adds	r3, #1
 8003b84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d902      	bls.n	8003b92 <ETH_Prepare_Tx_Descriptors+0x11e>
 8003b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b8e:	3b04      	subs	r3, #4
 8003b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b94:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003b96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b9a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003ba8:	d007      	beq.n	8003bba <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003baa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bae:	3304      	adds	r3, #4
 8003bb0:	009b      	lsls	r3, r3, #2
 8003bb2:	4413      	add	r3, r2
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d029      	beq.n	8003c0e <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003bc8:	2300      	movs	r3, #0
 8003bca:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bcc:	e019      	b.n	8003c02 <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8003bce:	f3bf 8f5f 	dmb	sy
}
 8003bd2:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003bd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003bdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bde:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003be0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be2:	3301      	adds	r3, #1
 8003be4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003be6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d902      	bls.n	8003bf2 <ETH_Prepare_Tx_Descriptors+0x17e>
 8003bec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bee:	3b04      	subs	r3, #4
 8003bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bf4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bfa:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bfe:	3301      	adds	r3, #1
 8003c00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d3e1      	bcc.n	8003bce <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e074      	b.n	8003cf8 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8003c16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c18:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8003c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8003c20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8003c26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c2e:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8003c38:	f023 031f 	bic.w	r3, r3, #31
 8003c3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c3e:	6852      	ldr	r2, [r2, #4]
 8003c40:	431a      	orrs	r2, r3
 8003c42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c44:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8003c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c48:	3301      	adds	r3, #1
 8003c4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8003c4c:	f3bf 8f5f 	dmb	sy
}
 8003c50:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003c52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8003c5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f47f af76 	bne.w	8003b54 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d006      	beq.n	8003c7c <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	e005      	b.n	8003c88 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c86:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003c88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003c90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c92:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 8003c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c96:	6a3a      	ldr	r2, [r7, #32]
 8003c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c9c:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003c9e:	f3bf 8f5f 	dmb	sy
}
 8003ca2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8003ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cae:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003cb4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003cb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cb8:	3304      	adds	r3, #4
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003cc4:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cca:	613b      	str	r3, [r7, #16]
  return(result);
 8003ccc:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003cce:	61fb      	str	r3, [r7, #28]
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	f383 8810 	msr	PRIMASK, r3
}
 8003cda:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cde:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ce2:	4413      	add	r3, r2
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce8:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	f383 8810 	msr	PRIMASK, r3
}
 8003cf4:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3744      	adds	r7, #68	@ 0x44
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b089      	sub	sp, #36	@ 0x24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
 8003d1e:	e16b      	b.n	8003ff8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d20:	2201      	movs	r2, #1
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	fa02 f303 	lsl.w	r3, r2, r3
 8003d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	4013      	ands	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	f040 815a 	bne.w	8003ff2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d005      	beq.n	8003d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d130      	bne.n	8003db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	2203      	movs	r2, #3
 8003d62:	fa02 f303 	lsl.w	r3, r2, r3
 8003d66:	43db      	mvns	r3, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	68da      	ldr	r2, [r3, #12]
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	fa02 f303 	lsl.w	r3, r2, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	091b      	lsrs	r3, r3, #4
 8003da2:	f003 0201 	and.w	r2, r3, #1
 8003da6:	69fb      	ldr	r3, [r7, #28]
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 0303 	and.w	r3, r3, #3
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d017      	beq.n	8003df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	2203      	movs	r2, #3
 8003dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd4:	43db      	mvns	r3, r3
 8003dd6:	69ba      	ldr	r2, [r7, #24]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	005b      	lsls	r3, r3, #1
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69ba      	ldr	r2, [r7, #24]
 8003df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f003 0303 	and.w	r3, r3, #3
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d123      	bne.n	8003e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	08da      	lsrs	r2, r3, #3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3208      	adds	r2, #8
 8003e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e0e:	69fb      	ldr	r3, [r7, #28]
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	220f      	movs	r2, #15
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	43db      	mvns	r3, r3
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	4013      	ands	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	691a      	ldr	r2, [r3, #16]
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	f003 0307 	and.w	r3, r3, #7
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	fa02 f303 	lsl.w	r3, r2, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	08da      	lsrs	r2, r3, #3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	3208      	adds	r2, #8
 8003e42:	69b9      	ldr	r1, [r7, #24]
 8003e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e4e:	69fb      	ldr	r3, [r7, #28]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	2203      	movs	r2, #3
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 0203 	and.w	r2, r3, #3
 8003e68:	69fb      	ldr	r3, [r7, #28]
 8003e6a:	005b      	lsls	r3, r3, #1
 8003e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69ba      	ldr	r2, [r7, #24]
 8003e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f000 80b4 	beq.w	8003ff2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	4b60      	ldr	r3, [pc, #384]	@ (8004010 <HAL_GPIO_Init+0x30c>)
 8003e90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e92:	4a5f      	ldr	r2, [pc, #380]	@ (8004010 <HAL_GPIO_Init+0x30c>)
 8003e94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e98:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e9a:	4b5d      	ldr	r3, [pc, #372]	@ (8004010 <HAL_GPIO_Init+0x30c>)
 8003e9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ea6:	4a5b      	ldr	r2, [pc, #364]	@ (8004014 <HAL_GPIO_Init+0x310>)
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	089b      	lsrs	r3, r3, #2
 8003eac:	3302      	adds	r3, #2
 8003eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f003 0303 	and.w	r3, r3, #3
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	220f      	movs	r2, #15
 8003ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec2:	43db      	mvns	r3, r3
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	4a52      	ldr	r2, [pc, #328]	@ (8004018 <HAL_GPIO_Init+0x314>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d02b      	beq.n	8003f2a <HAL_GPIO_Init+0x226>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a51      	ldr	r2, [pc, #324]	@ (800401c <HAL_GPIO_Init+0x318>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d025      	beq.n	8003f26 <HAL_GPIO_Init+0x222>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a50      	ldr	r2, [pc, #320]	@ (8004020 <HAL_GPIO_Init+0x31c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d01f      	beq.n	8003f22 <HAL_GPIO_Init+0x21e>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a4f      	ldr	r2, [pc, #316]	@ (8004024 <HAL_GPIO_Init+0x320>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d019      	beq.n	8003f1e <HAL_GPIO_Init+0x21a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a4e      	ldr	r2, [pc, #312]	@ (8004028 <HAL_GPIO_Init+0x324>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d013      	beq.n	8003f1a <HAL_GPIO_Init+0x216>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a4d      	ldr	r2, [pc, #308]	@ (800402c <HAL_GPIO_Init+0x328>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d00d      	beq.n	8003f16 <HAL_GPIO_Init+0x212>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a4c      	ldr	r2, [pc, #304]	@ (8004030 <HAL_GPIO_Init+0x32c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d007      	beq.n	8003f12 <HAL_GPIO_Init+0x20e>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a4b      	ldr	r2, [pc, #300]	@ (8004034 <HAL_GPIO_Init+0x330>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d101      	bne.n	8003f0e <HAL_GPIO_Init+0x20a>
 8003f0a:	2307      	movs	r3, #7
 8003f0c:	e00e      	b.n	8003f2c <HAL_GPIO_Init+0x228>
 8003f0e:	2308      	movs	r3, #8
 8003f10:	e00c      	b.n	8003f2c <HAL_GPIO_Init+0x228>
 8003f12:	2306      	movs	r3, #6
 8003f14:	e00a      	b.n	8003f2c <HAL_GPIO_Init+0x228>
 8003f16:	2305      	movs	r3, #5
 8003f18:	e008      	b.n	8003f2c <HAL_GPIO_Init+0x228>
 8003f1a:	2304      	movs	r3, #4
 8003f1c:	e006      	b.n	8003f2c <HAL_GPIO_Init+0x228>
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e004      	b.n	8003f2c <HAL_GPIO_Init+0x228>
 8003f22:	2302      	movs	r3, #2
 8003f24:	e002      	b.n	8003f2c <HAL_GPIO_Init+0x228>
 8003f26:	2301      	movs	r3, #1
 8003f28:	e000      	b.n	8003f2c <HAL_GPIO_Init+0x228>
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	69fa      	ldr	r2, [r7, #28]
 8003f2e:	f002 0203 	and.w	r2, r2, #3
 8003f32:	0092      	lsls	r2, r2, #2
 8003f34:	4093      	lsls	r3, r2
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f3c:	4935      	ldr	r1, [pc, #212]	@ (8004014 <HAL_GPIO_Init+0x310>)
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	089b      	lsrs	r3, r3, #2
 8003f42:	3302      	adds	r3, #2
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8004038 <HAL_GPIO_Init+0x334>)
 8003f4c:	689b      	ldr	r3, [r3, #8]
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	43db      	mvns	r3, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4013      	ands	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f6e:	4a32      	ldr	r2, [pc, #200]	@ (8004038 <HAL_GPIO_Init+0x334>)
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f74:	4b30      	ldr	r3, [pc, #192]	@ (8004038 <HAL_GPIO_Init+0x334>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f98:	4a27      	ldr	r2, [pc, #156]	@ (8004038 <HAL_GPIO_Init+0x334>)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f9e:	4b26      	ldr	r3, [pc, #152]	@ (8004038 <HAL_GPIO_Init+0x334>)
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	43db      	mvns	r3, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4013      	ands	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d003      	beq.n	8003fc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003fba:	69ba      	ldr	r2, [r7, #24]
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fc2:	4a1d      	ldr	r2, [pc, #116]	@ (8004038 <HAL_GPIO_Init+0x334>)
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004038 <HAL_GPIO_Init+0x334>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d003      	beq.n	8003fec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fec:	4a12      	ldr	r2, [pc, #72]	@ (8004038 <HAL_GPIO_Init+0x334>)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	61fb      	str	r3, [r7, #28]
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	2b0f      	cmp	r3, #15
 8003ffc:	f67f ae90 	bls.w	8003d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	3724      	adds	r7, #36	@ 0x24
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800
 8004014:	40013800 	.word	0x40013800
 8004018:	40020000 	.word	0x40020000
 800401c:	40020400 	.word	0x40020400
 8004020:	40020800 	.word	0x40020800
 8004024:	40020c00 	.word	0x40020c00
 8004028:	40021000 	.word	0x40021000
 800402c:	40021400 	.word	0x40021400
 8004030:	40021800 	.word	0x40021800
 8004034:	40021c00 	.word	0x40021c00
 8004038:	40013c00 	.word	0x40013c00

0800403c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b086      	sub	sp, #24
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d101      	bne.n	800404e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e267      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	2b00      	cmp	r3, #0
 8004058:	d075      	beq.n	8004146 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800405a:	4b88      	ldr	r3, [pc, #544]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 030c 	and.w	r3, r3, #12
 8004062:	2b04      	cmp	r3, #4
 8004064:	d00c      	beq.n	8004080 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004066:	4b85      	ldr	r3, [pc, #532]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800406e:	2b08      	cmp	r3, #8
 8004070:	d112      	bne.n	8004098 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004072:	4b82      	ldr	r3, [pc, #520]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 8004074:	685b      	ldr	r3, [r3, #4]
 8004076:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800407a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800407e:	d10b      	bne.n	8004098 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004080:	4b7e      	ldr	r3, [pc, #504]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d05b      	beq.n	8004144 <HAL_RCC_OscConfig+0x108>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d157      	bne.n	8004144 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e242      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80040a0:	d106      	bne.n	80040b0 <HAL_RCC_OscConfig+0x74>
 80040a2:	4b76      	ldr	r3, [pc, #472]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a75      	ldr	r2, [pc, #468]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 80040a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040ac:	6013      	str	r3, [r2, #0]
 80040ae:	e01d      	b.n	80040ec <HAL_RCC_OscConfig+0xb0>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80040b8:	d10c      	bne.n	80040d4 <HAL_RCC_OscConfig+0x98>
 80040ba:	4b70      	ldr	r3, [pc, #448]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a6f      	ldr	r2, [pc, #444]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 80040c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80040c4:	6013      	str	r3, [r2, #0]
 80040c6:	4b6d      	ldr	r3, [pc, #436]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a6c      	ldr	r2, [pc, #432]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 80040cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80040d0:	6013      	str	r3, [r2, #0]
 80040d2:	e00b      	b.n	80040ec <HAL_RCC_OscConfig+0xb0>
 80040d4:	4b69      	ldr	r3, [pc, #420]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a68      	ldr	r2, [pc, #416]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 80040da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	4b66      	ldr	r3, [pc, #408]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a65      	ldr	r2, [pc, #404]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 80040e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d013      	beq.n	800411c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f4:	f7fe f958 	bl	80023a8 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040fc:	f7fe f954 	bl	80023a8 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b64      	cmp	r3, #100	@ 0x64
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e207      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410e:	4b5b      	ldr	r3, [pc, #364]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d0f0      	beq.n	80040fc <HAL_RCC_OscConfig+0xc0>
 800411a:	e014      	b.n	8004146 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411c:	f7fe f944 	bl	80023a8 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004124:	f7fe f940 	bl	80023a8 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b64      	cmp	r3, #100	@ 0x64
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e1f3      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004136:	4b51      	ldr	r3, [pc, #324]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1f0      	bne.n	8004124 <HAL_RCC_OscConfig+0xe8>
 8004142:	e000      	b.n	8004146 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004144:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d063      	beq.n	800421a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004152:	4b4a      	ldr	r3, [pc, #296]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00b      	beq.n	8004176 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800415e:	4b47      	ldr	r3, [pc, #284]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004166:	2b08      	cmp	r3, #8
 8004168:	d11c      	bne.n	80041a4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800416a:	4b44      	ldr	r3, [pc, #272]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004172:	2b00      	cmp	r3, #0
 8004174:	d116      	bne.n	80041a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004176:	4b41      	ldr	r3, [pc, #260]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b00      	cmp	r3, #0
 8004180:	d005      	beq.n	800418e <HAL_RCC_OscConfig+0x152>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	68db      	ldr	r3, [r3, #12]
 8004186:	2b01      	cmp	r3, #1
 8004188:	d001      	beq.n	800418e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e1c7      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800418e:	4b3b      	ldr	r3, [pc, #236]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	691b      	ldr	r3, [r3, #16]
 800419a:	00db      	lsls	r3, r3, #3
 800419c:	4937      	ldr	r1, [pc, #220]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 800419e:	4313      	orrs	r3, r2
 80041a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041a2:	e03a      	b.n	800421a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d020      	beq.n	80041ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041ac:	4b34      	ldr	r3, [pc, #208]	@ (8004280 <HAL_RCC_OscConfig+0x244>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041b2:	f7fe f8f9 	bl	80023a8 <HAL_GetTick>
 80041b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041ba:	f7fe f8f5 	bl	80023a8 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e1a8      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041cc:	4b2b      	ldr	r3, [pc, #172]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d0f0      	beq.n	80041ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d8:	4b28      	ldr	r3, [pc, #160]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	691b      	ldr	r3, [r3, #16]
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	4925      	ldr	r1, [pc, #148]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	600b      	str	r3, [r1, #0]
 80041ec:	e015      	b.n	800421a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041ee:	4b24      	ldr	r3, [pc, #144]	@ (8004280 <HAL_RCC_OscConfig+0x244>)
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f4:	f7fe f8d8 	bl	80023a8 <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041fc:	f7fe f8d4 	bl	80023a8 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e187      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800420e:	4b1b      	ldr	r3, [pc, #108]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f003 0302 	and.w	r3, r3, #2
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1f0      	bne.n	80041fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f003 0308 	and.w	r3, r3, #8
 8004222:	2b00      	cmp	r3, #0
 8004224:	d036      	beq.n	8004294 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d016      	beq.n	800425c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800422e:	4b15      	ldr	r3, [pc, #84]	@ (8004284 <HAL_RCC_OscConfig+0x248>)
 8004230:	2201      	movs	r2, #1
 8004232:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004234:	f7fe f8b8 	bl	80023a8 <HAL_GetTick>
 8004238:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800423a:	e008      	b.n	800424e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800423c:	f7fe f8b4 	bl	80023a8 <HAL_GetTick>
 8004240:	4602      	mov	r2, r0
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1ad3      	subs	r3, r2, r3
 8004246:	2b02      	cmp	r3, #2
 8004248:	d901      	bls.n	800424e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e167      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800424e:	4b0b      	ldr	r3, [pc, #44]	@ (800427c <HAL_RCC_OscConfig+0x240>)
 8004250:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d0f0      	beq.n	800423c <HAL_RCC_OscConfig+0x200>
 800425a:	e01b      	b.n	8004294 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800425c:	4b09      	ldr	r3, [pc, #36]	@ (8004284 <HAL_RCC_OscConfig+0x248>)
 800425e:	2200      	movs	r2, #0
 8004260:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004262:	f7fe f8a1 	bl	80023a8 <HAL_GetTick>
 8004266:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004268:	e00e      	b.n	8004288 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800426a:	f7fe f89d 	bl	80023a8 <HAL_GetTick>
 800426e:	4602      	mov	r2, r0
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b02      	cmp	r3, #2
 8004276:	d907      	bls.n	8004288 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e150      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
 800427c:	40023800 	.word	0x40023800
 8004280:	42470000 	.word	0x42470000
 8004284:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004288:	4b88      	ldr	r3, [pc, #544]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 800428a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1ea      	bne.n	800426a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f003 0304 	and.w	r3, r3, #4
 800429c:	2b00      	cmp	r3, #0
 800429e:	f000 8097 	beq.w	80043d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042a2:	2300      	movs	r3, #0
 80042a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042a6:	4b81      	ldr	r3, [pc, #516]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 80042a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10f      	bne.n	80042d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b2:	2300      	movs	r3, #0
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	4b7d      	ldr	r3, [pc, #500]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ba:	4a7c      	ldr	r2, [pc, #496]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 80042bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80042c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80042c2:	4b7a      	ldr	r3, [pc, #488]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80042ca:	60bb      	str	r3, [r7, #8]
 80042cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042ce:	2301      	movs	r3, #1
 80042d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042d2:	4b77      	ldr	r3, [pc, #476]	@ (80044b0 <HAL_RCC_OscConfig+0x474>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d118      	bne.n	8004310 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042de:	4b74      	ldr	r3, [pc, #464]	@ (80044b0 <HAL_RCC_OscConfig+0x474>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a73      	ldr	r2, [pc, #460]	@ (80044b0 <HAL_RCC_OscConfig+0x474>)
 80042e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ea:	f7fe f85d 	bl	80023a8 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042f2:	f7fe f859 	bl	80023a8 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e10c      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004304:	4b6a      	ldr	r3, [pc, #424]	@ (80044b0 <HAL_RCC_OscConfig+0x474>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f0      	beq.n	80042f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d106      	bne.n	8004326 <HAL_RCC_OscConfig+0x2ea>
 8004318:	4b64      	ldr	r3, [pc, #400]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 800431a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431c:	4a63      	ldr	r2, [pc, #396]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 800431e:	f043 0301 	orr.w	r3, r3, #1
 8004322:	6713      	str	r3, [r2, #112]	@ 0x70
 8004324:	e01c      	b.n	8004360 <HAL_RCC_OscConfig+0x324>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	2b05      	cmp	r3, #5
 800432c:	d10c      	bne.n	8004348 <HAL_RCC_OscConfig+0x30c>
 800432e:	4b5f      	ldr	r3, [pc, #380]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004332:	4a5e      	ldr	r2, [pc, #376]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 8004334:	f043 0304 	orr.w	r3, r3, #4
 8004338:	6713      	str	r3, [r2, #112]	@ 0x70
 800433a:	4b5c      	ldr	r3, [pc, #368]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 800433c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800433e:	4a5b      	ldr	r2, [pc, #364]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 8004340:	f043 0301 	orr.w	r3, r3, #1
 8004344:	6713      	str	r3, [r2, #112]	@ 0x70
 8004346:	e00b      	b.n	8004360 <HAL_RCC_OscConfig+0x324>
 8004348:	4b58      	ldr	r3, [pc, #352]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 800434a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434c:	4a57      	ldr	r2, [pc, #348]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 800434e:	f023 0301 	bic.w	r3, r3, #1
 8004352:	6713      	str	r3, [r2, #112]	@ 0x70
 8004354:	4b55      	ldr	r3, [pc, #340]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 8004356:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004358:	4a54      	ldr	r2, [pc, #336]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 800435a:	f023 0304 	bic.w	r3, r3, #4
 800435e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d015      	beq.n	8004394 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004368:	f7fe f81e 	bl	80023a8 <HAL_GetTick>
 800436c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436e:	e00a      	b.n	8004386 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004370:	f7fe f81a 	bl	80023a8 <HAL_GetTick>
 8004374:	4602      	mov	r2, r0
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	1ad3      	subs	r3, r2, r3
 800437a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800437e:	4293      	cmp	r3, r2
 8004380:	d901      	bls.n	8004386 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004382:	2303      	movs	r3, #3
 8004384:	e0cb      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004386:	4b49      	ldr	r3, [pc, #292]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 8004388:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800438a:	f003 0302 	and.w	r3, r3, #2
 800438e:	2b00      	cmp	r3, #0
 8004390:	d0ee      	beq.n	8004370 <HAL_RCC_OscConfig+0x334>
 8004392:	e014      	b.n	80043be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004394:	f7fe f808 	bl	80023a8 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800439a:	e00a      	b.n	80043b2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800439c:	f7fe f804 	bl	80023a8 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e0b5      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b2:	4b3e      	ldr	r3, [pc, #248]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 80043b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1ee      	bne.n	800439c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043be:	7dfb      	ldrb	r3, [r7, #23]
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d105      	bne.n	80043d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043c4:	4b39      	ldr	r3, [pc, #228]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 80043c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c8:	4a38      	ldr	r2, [pc, #224]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 80043ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80043ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f000 80a1 	beq.w	800451c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043da:	4b34      	ldr	r3, [pc, #208]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f003 030c 	and.w	r3, r3, #12
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d05c      	beq.n	80044a0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d141      	bne.n	8004472 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ee:	4b31      	ldr	r3, [pc, #196]	@ (80044b4 <HAL_RCC_OscConfig+0x478>)
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f4:	f7fd ffd8 	bl	80023a8 <HAL_GetTick>
 80043f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fa:	e008      	b.n	800440e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043fc:	f7fd ffd4 	bl	80023a8 <HAL_GetTick>
 8004400:	4602      	mov	r2, r0
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	1ad3      	subs	r3, r2, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d901      	bls.n	800440e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800440a:	2303      	movs	r3, #3
 800440c:	e087      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800440e:	4b27      	ldr	r3, [pc, #156]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004416:	2b00      	cmp	r3, #0
 8004418:	d1f0      	bne.n	80043fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	69da      	ldr	r2, [r3, #28]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004428:	019b      	lsls	r3, r3, #6
 800442a:	431a      	orrs	r2, r3
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004430:	085b      	lsrs	r3, r3, #1
 8004432:	3b01      	subs	r3, #1
 8004434:	041b      	lsls	r3, r3, #16
 8004436:	431a      	orrs	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443c:	061b      	lsls	r3, r3, #24
 800443e:	491b      	ldr	r1, [pc, #108]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 8004440:	4313      	orrs	r3, r2
 8004442:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004444:	4b1b      	ldr	r3, [pc, #108]	@ (80044b4 <HAL_RCC_OscConfig+0x478>)
 8004446:	2201      	movs	r2, #1
 8004448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800444a:	f7fd ffad 	bl	80023a8 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004452:	f7fd ffa9 	bl	80023a8 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e05c      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004464:	4b11      	ldr	r3, [pc, #68]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800446c:	2b00      	cmp	r3, #0
 800446e:	d0f0      	beq.n	8004452 <HAL_RCC_OscConfig+0x416>
 8004470:	e054      	b.n	800451c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004472:	4b10      	ldr	r3, [pc, #64]	@ (80044b4 <HAL_RCC_OscConfig+0x478>)
 8004474:	2200      	movs	r2, #0
 8004476:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004478:	f7fd ff96 	bl	80023a8 <HAL_GetTick>
 800447c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447e:	e008      	b.n	8004492 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004480:	f7fd ff92 	bl	80023a8 <HAL_GetTick>
 8004484:	4602      	mov	r2, r0
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1ad3      	subs	r3, r2, r3
 800448a:	2b02      	cmp	r3, #2
 800448c:	d901      	bls.n	8004492 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800448e:	2303      	movs	r3, #3
 8004490:	e045      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004492:	4b06      	ldr	r3, [pc, #24]	@ (80044ac <HAL_RCC_OscConfig+0x470>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1f0      	bne.n	8004480 <HAL_RCC_OscConfig+0x444>
 800449e:	e03d      	b.n	800451c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d107      	bne.n	80044b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e038      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
 80044ac:	40023800 	.word	0x40023800
 80044b0:	40007000 	.word	0x40007000
 80044b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004528 <HAL_RCC_OscConfig+0x4ec>)
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d028      	beq.n	8004518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d121      	bne.n	8004518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044de:	429a      	cmp	r2, r3
 80044e0:	d11a      	bne.n	8004518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80044e8:	4013      	ands	r3, r2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80044ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d111      	bne.n	8004518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044fe:	085b      	lsrs	r3, r3, #1
 8004500:	3b01      	subs	r3, #1
 8004502:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004504:	429a      	cmp	r2, r3
 8004506:	d107      	bne.n	8004518 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004512:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d001      	beq.n	800451c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e000      	b.n	800451e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3718      	adds	r7, #24
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40023800 	.word	0x40023800

0800452c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0cc      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004540:	4b68      	ldr	r3, [pc, #416]	@ (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d90c      	bls.n	8004568 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b65      	ldr	r3, [pc, #404]	@ (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004550:	683a      	ldr	r2, [r7, #0]
 8004552:	b2d2      	uxtb	r2, r2
 8004554:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004556:	4b63      	ldr	r3, [pc, #396]	@ (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	429a      	cmp	r2, r3
 8004562:	d001      	beq.n	8004568 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e0b8      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0302 	and.w	r3, r3, #2
 8004570:	2b00      	cmp	r3, #0
 8004572:	d020      	beq.n	80045b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 0304 	and.w	r3, r3, #4
 800457c:	2b00      	cmp	r3, #0
 800457e:	d005      	beq.n	800458c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004580:	4b59      	ldr	r3, [pc, #356]	@ (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	4a58      	ldr	r2, [pc, #352]	@ (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800458a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d005      	beq.n	80045a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004598:	4b53      	ldr	r3, [pc, #332]	@ (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	4a52      	ldr	r2, [pc, #328]	@ (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800459e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80045a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045a4:	4b50      	ldr	r3, [pc, #320]	@ (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	494d      	ldr	r1, [pc, #308]	@ (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f003 0301 	and.w	r3, r3, #1
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d044      	beq.n	800464c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d107      	bne.n	80045da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ca:	4b47      	ldr	r3, [pc, #284]	@ (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d119      	bne.n	800460a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e07f      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	2b02      	cmp	r3, #2
 80045e0:	d003      	beq.n	80045ea <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045e6:	2b03      	cmp	r3, #3
 80045e8:	d107      	bne.n	80045fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ea:	4b3f      	ldr	r3, [pc, #252]	@ (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d109      	bne.n	800460a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e06f      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045fa:	4b3b      	ldr	r3, [pc, #236]	@ (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e067      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800460a:	4b37      	ldr	r3, [pc, #220]	@ (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f023 0203 	bic.w	r2, r3, #3
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	4934      	ldr	r1, [pc, #208]	@ (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004618:	4313      	orrs	r3, r2
 800461a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800461c:	f7fd fec4 	bl	80023a8 <HAL_GetTick>
 8004620:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004622:	e00a      	b.n	800463a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004624:	f7fd fec0 	bl	80023a8 <HAL_GetTick>
 8004628:	4602      	mov	r2, r0
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004632:	4293      	cmp	r3, r2
 8004634:	d901      	bls.n	800463a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e04f      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463a:	4b2b      	ldr	r3, [pc, #172]	@ (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 020c 	and.w	r2, r3, #12
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	429a      	cmp	r2, r3
 800464a:	d1eb      	bne.n	8004624 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800464c:	4b25      	ldr	r3, [pc, #148]	@ (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	683a      	ldr	r2, [r7, #0]
 8004656:	429a      	cmp	r2, r3
 8004658:	d20c      	bcs.n	8004674 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800465a:	4b22      	ldr	r3, [pc, #136]	@ (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	4b20      	ldr	r3, [pc, #128]	@ (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	429a      	cmp	r2, r3
 800466e:	d001      	beq.n	8004674 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e032      	b.n	80046da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d008      	beq.n	8004692 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004680:	4b19      	ldr	r3, [pc, #100]	@ (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	4916      	ldr	r1, [pc, #88]	@ (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 800468e:	4313      	orrs	r3, r2
 8004690:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d009      	beq.n	80046b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800469e:	4b12      	ldr	r3, [pc, #72]	@ (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	490e      	ldr	r1, [pc, #56]	@ (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046b2:	f000 f821 	bl	80046f8 <HAL_RCC_GetSysClockFreq>
 80046b6:	4602      	mov	r2, r0
 80046b8:	4b0b      	ldr	r3, [pc, #44]	@ (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	091b      	lsrs	r3, r3, #4
 80046be:	f003 030f 	and.w	r3, r3, #15
 80046c2:	490a      	ldr	r1, [pc, #40]	@ (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 80046c4:	5ccb      	ldrb	r3, [r1, r3]
 80046c6:	fa22 f303 	lsr.w	r3, r2, r3
 80046ca:	4a09      	ldr	r2, [pc, #36]	@ (80046f0 <HAL_RCC_ClockConfig+0x1c4>)
 80046cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80046ce:	4b09      	ldr	r3, [pc, #36]	@ (80046f4 <HAL_RCC_ClockConfig+0x1c8>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fd fa60 	bl	8001b98 <HAL_InitTick>

  return HAL_OK;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	40023c00 	.word	0x40023c00
 80046e8:	40023800 	.word	0x40023800
 80046ec:	08025bb8 	.word	0x08025bb8
 80046f0:	2000001c 	.word	0x2000001c
 80046f4:	20000024 	.word	0x20000024

080046f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046fc:	b090      	sub	sp, #64	@ 0x40
 80046fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004700:	2300      	movs	r3, #0
 8004702:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004704:	2300      	movs	r3, #0
 8004706:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004708:	2300      	movs	r3, #0
 800470a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800470c:	2300      	movs	r3, #0
 800470e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004710:	4b59      	ldr	r3, [pc, #356]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x180>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f003 030c 	and.w	r3, r3, #12
 8004718:	2b08      	cmp	r3, #8
 800471a:	d00d      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0x40>
 800471c:	2b08      	cmp	r3, #8
 800471e:	f200 80a1 	bhi.w	8004864 <HAL_RCC_GetSysClockFreq+0x16c>
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <HAL_RCC_GetSysClockFreq+0x34>
 8004726:	2b04      	cmp	r3, #4
 8004728:	d003      	beq.n	8004732 <HAL_RCC_GetSysClockFreq+0x3a>
 800472a:	e09b      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800472c:	4b53      	ldr	r3, [pc, #332]	@ (800487c <HAL_RCC_GetSysClockFreq+0x184>)
 800472e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004730:	e09b      	b.n	800486a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004732:	4b53      	ldr	r3, [pc, #332]	@ (8004880 <HAL_RCC_GetSysClockFreq+0x188>)
 8004734:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004736:	e098      	b.n	800486a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004738:	4b4f      	ldr	r3, [pc, #316]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x180>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004740:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004742:	4b4d      	ldr	r3, [pc, #308]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x180>)
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d028      	beq.n	80047a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800474e:	4b4a      	ldr	r3, [pc, #296]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x180>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	099b      	lsrs	r3, r3, #6
 8004754:	2200      	movs	r2, #0
 8004756:	623b      	str	r3, [r7, #32]
 8004758:	627a      	str	r2, [r7, #36]	@ 0x24
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004760:	2100      	movs	r1, #0
 8004762:	4b47      	ldr	r3, [pc, #284]	@ (8004880 <HAL_RCC_GetSysClockFreq+0x188>)
 8004764:	fb03 f201 	mul.w	r2, r3, r1
 8004768:	2300      	movs	r3, #0
 800476a:	fb00 f303 	mul.w	r3, r0, r3
 800476e:	4413      	add	r3, r2
 8004770:	4a43      	ldr	r2, [pc, #268]	@ (8004880 <HAL_RCC_GetSysClockFreq+0x188>)
 8004772:	fba0 1202 	umull	r1, r2, r0, r2
 8004776:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004778:	460a      	mov	r2, r1
 800477a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800477c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800477e:	4413      	add	r3, r2
 8004780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004784:	2200      	movs	r2, #0
 8004786:	61bb      	str	r3, [r7, #24]
 8004788:	61fa      	str	r2, [r7, #28]
 800478a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800478e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004792:	f7fc fa79 	bl	8000c88 <__aeabi_uldivmod>
 8004796:	4602      	mov	r2, r0
 8004798:	460b      	mov	r3, r1
 800479a:	4613      	mov	r3, r2
 800479c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800479e:	e053      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047a0:	4b35      	ldr	r3, [pc, #212]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x180>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	099b      	lsrs	r3, r3, #6
 80047a6:	2200      	movs	r2, #0
 80047a8:	613b      	str	r3, [r7, #16]
 80047aa:	617a      	str	r2, [r7, #20]
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80047b2:	f04f 0b00 	mov.w	fp, #0
 80047b6:	4652      	mov	r2, sl
 80047b8:	465b      	mov	r3, fp
 80047ba:	f04f 0000 	mov.w	r0, #0
 80047be:	f04f 0100 	mov.w	r1, #0
 80047c2:	0159      	lsls	r1, r3, #5
 80047c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c8:	0150      	lsls	r0, r2, #5
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	ebb2 080a 	subs.w	r8, r2, sl
 80047d2:	eb63 090b 	sbc.w	r9, r3, fp
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80047e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80047e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80047ea:	ebb2 0408 	subs.w	r4, r2, r8
 80047ee:	eb63 0509 	sbc.w	r5, r3, r9
 80047f2:	f04f 0200 	mov.w	r2, #0
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	00eb      	lsls	r3, r5, #3
 80047fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004800:	00e2      	lsls	r2, r4, #3
 8004802:	4614      	mov	r4, r2
 8004804:	461d      	mov	r5, r3
 8004806:	eb14 030a 	adds.w	r3, r4, sl
 800480a:	603b      	str	r3, [r7, #0]
 800480c:	eb45 030b 	adc.w	r3, r5, fp
 8004810:	607b      	str	r3, [r7, #4]
 8004812:	f04f 0200 	mov.w	r2, #0
 8004816:	f04f 0300 	mov.w	r3, #0
 800481a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800481e:	4629      	mov	r1, r5
 8004820:	028b      	lsls	r3, r1, #10
 8004822:	4621      	mov	r1, r4
 8004824:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004828:	4621      	mov	r1, r4
 800482a:	028a      	lsls	r2, r1, #10
 800482c:	4610      	mov	r0, r2
 800482e:	4619      	mov	r1, r3
 8004830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004832:	2200      	movs	r2, #0
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	60fa      	str	r2, [r7, #12]
 8004838:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800483c:	f7fc fa24 	bl	8000c88 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4613      	mov	r3, r2
 8004846:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004848:	4b0b      	ldr	r3, [pc, #44]	@ (8004878 <HAL_RCC_GetSysClockFreq+0x180>)
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	0c1b      	lsrs	r3, r3, #16
 800484e:	f003 0303 	and.w	r3, r3, #3
 8004852:	3301      	adds	r3, #1
 8004854:	005b      	lsls	r3, r3, #1
 8004856:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004858:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800485a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004860:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004862:	e002      	b.n	800486a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004864:	4b05      	ldr	r3, [pc, #20]	@ (800487c <HAL_RCC_GetSysClockFreq+0x184>)
 8004866:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800486a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800486c:	4618      	mov	r0, r3
 800486e:	3740      	adds	r7, #64	@ 0x40
 8004870:	46bd      	mov	sp, r7
 8004872:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004876:	bf00      	nop
 8004878:	40023800 	.word	0x40023800
 800487c:	00f42400 	.word	0x00f42400
 8004880:	017d7840 	.word	0x017d7840

08004884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004888:	4b03      	ldr	r3, [pc, #12]	@ (8004898 <HAL_RCC_GetHCLKFreq+0x14>)
 800488a:	681b      	ldr	r3, [r3, #0]
}
 800488c:	4618      	mov	r0, r3
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	2000001c 	.word	0x2000001c

0800489c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048a0:	f7ff fff0 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048a4:	4602      	mov	r2, r0
 80048a6:	4b05      	ldr	r3, [pc, #20]	@ (80048bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	0a9b      	lsrs	r3, r3, #10
 80048ac:	f003 0307 	and.w	r3, r3, #7
 80048b0:	4903      	ldr	r1, [pc, #12]	@ (80048c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048b2:	5ccb      	ldrb	r3, [r1, r3]
 80048b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	40023800 	.word	0x40023800
 80048c0:	08025bc8 	.word	0x08025bc8

080048c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048c8:	f7ff ffdc 	bl	8004884 <HAL_RCC_GetHCLKFreq>
 80048cc:	4602      	mov	r2, r0
 80048ce:	4b05      	ldr	r3, [pc, #20]	@ (80048e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	0b5b      	lsrs	r3, r3, #13
 80048d4:	f003 0307 	and.w	r3, r3, #7
 80048d8:	4903      	ldr	r1, [pc, #12]	@ (80048e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048da:	5ccb      	ldrb	r3, [r1, r3]
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40023800 	.word	0x40023800
 80048e8:	08025bc8 	.word	0x08025bc8

080048ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	220f      	movs	r2, #15
 80048fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80048fc:	4b12      	ldr	r3, [pc, #72]	@ (8004948 <HAL_RCC_GetClockConfig+0x5c>)
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	f003 0203 	and.w	r2, r3, #3
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004908:	4b0f      	ldr	r3, [pc, #60]	@ (8004948 <HAL_RCC_GetClockConfig+0x5c>)
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004914:	4b0c      	ldr	r3, [pc, #48]	@ (8004948 <HAL_RCC_GetClockConfig+0x5c>)
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004920:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <HAL_RCC_GetClockConfig+0x5c>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	08db      	lsrs	r3, r3, #3
 8004926:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800492e:	4b07      	ldr	r3, [pc, #28]	@ (800494c <HAL_RCC_GetClockConfig+0x60>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0207 	and.w	r2, r3, #7
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	601a      	str	r2, [r3, #0]
}
 800493a:	bf00      	nop
 800493c:	370c      	adds	r7, #12
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40023800 	.word	0x40023800
 800494c:	40023c00 	.word	0x40023c00

08004950 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b082      	sub	sp, #8
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d101      	bne.n	8004962 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e01c      	b.n	800499c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	795b      	ldrb	r3, [r3, #5]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d105      	bne.n	8004978 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f7fd f82c 	bl	80019d0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2202      	movs	r2, #2
 800497c:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f042 0204 	orr.w	r2, r2, #4
 800498c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2200      	movs	r2, #0
 8004998:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3708      	adds	r7, #8
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d005      	beq.n	80049ce <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2210      	movs	r2, #16
 80049c6:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80049c8:	2301      	movs	r3, #1
 80049ca:	60fb      	str	r3, [r7, #12]
 80049cc:	e009      	b.n	80049e2 <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d004      	beq.n	80049e2 <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2208      	movs	r2, #8
 80049dc:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80049de:	2301      	movs	r3, #1
 80049e0:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d10b      	bne.n	8004a00 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2204      	movs	r2, #4
 80049ec:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 f837 	bl	8004a62 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 80049fc:	605a      	str	r2, [r3, #4]

    return;
 80049fe:	e022      	b.n	8004a46 <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d01d      	beq.n	8004a46 <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f022 0208 	bic.w	r2, r2, #8
 8004a18:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	795b      	ldrb	r3, [r3, #5]
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	2b04      	cmp	r3, #4
 8004a2c:	d00b      	beq.n	8004a46 <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2201      	movs	r2, #1
 8004a32:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f803 	bl	8004a4c <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8004a46:	3710      	adds	r7, #16
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}

08004a4c <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8004a62:	b480      	push	{r7}
 8004a64:	b083      	sub	sp, #12
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b082      	sub	sp, #8
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e022      	b.n	8004ace <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d105      	bne.n	8004aa0 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f7fc ffe0 	bl	8001a60 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2203      	movs	r2, #3
 8004aa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f815 	bl	8004ad8 <HAL_SD_InitCard>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d001      	beq.n	8004ab8 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	e00a      	b.n	8004ace <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2200      	movs	r2, #0
 8004abc:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004acc:	2300      	movs	r3, #0
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004ad8:	b5b0      	push	{r4, r5, r7, lr}
 8004ada:	b08e      	sub	sp, #56	@ 0x38
 8004adc:	af04      	add	r7, sp, #16
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8004af4:	2376      	movs	r3, #118	@ 0x76
 8004af6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681d      	ldr	r5, [r3, #0]
 8004afc:	466c      	mov	r4, sp
 8004afe:	f107 0314 	add.w	r3, r7, #20
 8004b02:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004b06:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004b0a:	f107 0308 	add.w	r3, r7, #8
 8004b0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b10:	4628      	mov	r0, r5
 8004b12:	f002 fb13 	bl	800713c <SDIO_Init>
 8004b16:	4603      	mov	r3, r0
 8004b18:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8004b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d001      	beq.n	8004b28 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e04f      	b.n	8004bc8 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8004b28:	4b29      	ldr	r3, [pc, #164]	@ (8004bd0 <HAL_SD_InitCard+0xf8>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4618      	mov	r0, r3
 8004b34:	f002 fb2d 	bl	8007192 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8004b38:	4b25      	ldr	r3, [pc, #148]	@ (8004bd0 <HAL_SD_InitCard+0xf8>)
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8004b3e:	2002      	movs	r0, #2
 8004b40:	f7fd fc3e 	bl	80023c0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fd77 	bl	8005638 <SD_PowerON>
 8004b4a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b4c:	6a3b      	ldr	r3, [r7, #32]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d00b      	beq.n	8004b6a <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	431a      	orrs	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e02e      	b.n	8004bc8 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fc96 	bl	800549c <SD_InitCard>
 8004b70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00b      	beq.n	8004b90 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b84:	6a3b      	ldr	r3, [r7, #32]
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e01b      	b.n	8004bc8 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f002 fb8c 	bl	80072b6 <SDMMC_CmdBlockLength>
 8004b9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ba0:	6a3b      	ldr	r3, [r7, #32]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00f      	beq.n	8004bc6 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a0a      	ldr	r2, [pc, #40]	@ (8004bd4 <HAL_SD_InitCard+0xfc>)
 8004bac:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	431a      	orrs	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2201      	movs	r2, #1
 8004bbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3728      	adds	r7, #40	@ 0x28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bdb0      	pop	{r4, r5, r7, pc}
 8004bd0:	422580a0 	.word	0x422580a0
 8004bd4:	004005ff 	.word	0x004005ff

08004bd8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b08c      	sub	sp, #48	@ 0x30
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	60f8      	str	r0, [r7, #12]
 8004be0:	60b9      	str	r1, [r7, #8]
 8004be2:	607a      	str	r2, [r7, #4]
 8004be4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d107      	bne.n	8004c00 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e0c0      	b.n	8004d82 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004c06:	b2db      	uxtb	r3, r3
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	f040 80b9 	bne.w	8004d80 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004c14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	441a      	add	r2, r3
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c1e:	429a      	cmp	r2, r3
 8004c20:	d907      	bls.n	8004c32 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c26:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e0a7      	b.n	8004d82 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2203      	movs	r2, #3
 8004c36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 8004c50:	f043 0302 	orr.w	r3, r3, #2
 8004c54:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	4a4c      	ldr	r2, [pc, #304]	@ (8004d8c <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8004c5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c62:	4a4b      	ldr	r2, [pc, #300]	@ (8004d90 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8004c64:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c72:	2200      	movs	r2, #0
 8004c74:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3380      	adds	r3, #128	@ 0x80
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	68ba      	ldr	r2, [r7, #8]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	025b      	lsls	r3, r3, #9
 8004ca4:	089b      	lsrs	r3, r3, #2
 8004ca6:	f7fd fc91 	bl	80025cc <HAL_DMA_Start_IT>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d017      	beq.n	8004ce0 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8004cbe:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a33      	ldr	r2, [pc, #204]	@ (8004d94 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004cc6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ccc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e050      	b.n	8004d82 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004ce0:	4b2d      	ldr	r3, [pc, #180]	@ (8004d98 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d002      	beq.n	8004cf4 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8004cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf0:	025b      	lsls	r3, r3, #9
 8004cf2:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	025b      	lsls	r3, r3, #9
 8004cfe:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004d00:	2390      	movs	r3, #144	@ 0x90
 8004d02:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004d04:	2302      	movs	r3, #2
 8004d06:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f107 0210 	add.w	r2, r7, #16
 8004d18:	4611      	mov	r1, r2
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f002 fa9f 	bl	800725e <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d90a      	bls.n	8004d3c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2282      	movs	r2, #130	@ 0x82
 8004d2a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d32:	4618      	mov	r0, r3
 8004d34:	f002 fb03 	bl	800733e <SDMMC_CmdReadMultiBlock>
 8004d38:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004d3a:	e009      	b.n	8004d50 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2281      	movs	r2, #129	@ 0x81
 8004d40:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f002 fad6 	bl	80072fa <SDMMC_CmdReadSingleBlock>
 8004d4e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8004d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d012      	beq.n	8004d7c <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a0e      	ldr	r2, [pc, #56]	@ (8004d94 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8004d5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d64:	431a      	orrs	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e002      	b.n	8004d82 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e000      	b.n	8004d82 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8004d80:	2302      	movs	r3, #2
  }
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3730      	adds	r7, #48	@ 0x30
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}
 8004d8a:	bf00      	nop
 8004d8c:	08005387 	.word	0x08005387
 8004d90:	080053f9 	.word	0x080053f9
 8004d94:	004005ff 	.word	0x004005ff
 8004d98:	4225858c 	.word	0x4225858c

08004d9c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b08c      	sub	sp, #48	@ 0x30
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	60f8      	str	r0, [r7, #12]
 8004da4:	60b9      	str	r1, [r7, #8]
 8004da6:	607a      	str	r2, [r7, #4]
 8004da8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d107      	bne.n	8004dc4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004db8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0c5      	b.n	8004f50 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	f040 80be 	bne.w	8004f4e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004dd8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	441a      	add	r2, r3
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d907      	bls.n	8004df6 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dea:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e0ac      	b.n	8004f50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2203      	movs	r2, #3
 8004dfa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2200      	movs	r2, #0
 8004e04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e0c:	68fa      	ldr	r2, [r7, #12]
 8004e0e:	6812      	ldr	r2, [r2, #0]
 8004e10:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8004e14:	f043 0302 	orr.w	r3, r3, #2
 8004e18:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e1e:	4a4e      	ldr	r2, [pc, #312]	@ (8004f58 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8004e20:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e26:	4a4d      	ldr	r2, [pc, #308]	@ (8004f5c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8004e28:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2e:	2200      	movs	r2, #0
 8004e30:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d002      	beq.n	8004e40 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8004e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e3c:	025b      	lsls	r3, r3, #9
 8004e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d90a      	bls.n	8004e5c <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	22a0      	movs	r2, #160	@ 0xa0
 8004e4a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e52:	4618      	mov	r0, r3
 8004e54:	f002 fab7 	bl	80073c6 <SDMMC_CmdWriteMultiBlock>
 8004e58:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8004e5a:	e009      	b.n	8004e70 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2290      	movs	r2, #144	@ 0x90
 8004e60:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f002 fa8a 	bl	8007382 <SDMMC_CmdWriteSingleBlock>
 8004e6e:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d012      	beq.n	8004e9c <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4a39      	ldr	r2, [pc, #228]	@ (8004f60 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004e7c:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e84:	431a      	orrs	r2, r3
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	e059      	b.n	8004f50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004e9c:	4b31      	ldr	r3, [pc, #196]	@ (8004f64 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ea6:	2240      	movs	r2, #64	@ 0x40
 8004ea8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eba:	689a      	ldr	r2, [r3, #8]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004eca:	68b9      	ldr	r1, [r7, #8]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3380      	adds	r3, #128	@ 0x80
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	025b      	lsls	r3, r3, #9
 8004ed8:	089b      	lsrs	r3, r3, #2
 8004eda:	f7fd fb77 	bl	80025cc <HAL_DMA_Start_IT>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d01c      	beq.n	8004f1e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 8004ef2:	f023 0302 	bic.w	r3, r3, #2
 8004ef6:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a18      	ldr	r2, [pc, #96]	@ (8004f60 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004efe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f04:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2200      	movs	r2, #0
 8004f18:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e018      	b.n	8004f50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f22:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	025b      	lsls	r3, r3, #9
 8004f28:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004f2a:	2390      	movs	r3, #144	@ 0x90
 8004f2c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004f32:	2300      	movs	r3, #0
 8004f34:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004f36:	2301      	movs	r3, #1
 8004f38:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f107 0210 	add.w	r2, r7, #16
 8004f42:	4611      	mov	r1, r2
 8004f44:	4618      	mov	r0, r3
 8004f46:	f002 f98a 	bl	800725e <SDIO_ConfigData>

      return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	e000      	b.n	8004f50 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8004f4e:	2302      	movs	r3, #2
  }
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3730      	adds	r7, #48	@ 0x30
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	0800535d 	.word	0x0800535d
 8004f5c:	080053f9 	.word	0x080053f9
 8004f60:	004005ff 	.word	0x004005ff
 8004f64:	4225858c 	.word	0x4225858c

08004f68 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b083      	sub	sp, #12
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f8a:	0f9b      	lsrs	r3, r3, #30
 8004f8c:	b2da      	uxtb	r2, r3
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004f96:	0e9b      	lsrs	r3, r3, #26
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	f003 030f 	and.w	r3, r3, #15
 8004f9e:	b2da      	uxtb	r2, r3
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fa8:	0e1b      	lsrs	r3, r3, #24
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fba:	0c1b      	lsrs	r3, r3, #16
 8004fbc:	b2da      	uxtb	r2, r3
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fc6:	0a1b      	lsrs	r3, r3, #8
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fdc:	0d1b      	lsrs	r3, r3, #20
 8004fde:	b29a      	uxth	r2, r3
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004fe8:	0c1b      	lsrs	r3, r3, #16
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	f003 030f 	and.w	r3, r3, #15
 8004ff0:	b2da      	uxtb	r2, r3
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004ffa:	0bdb      	lsrs	r3, r3, #15
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	b2da      	uxtb	r2, r3
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800500c:	0b9b      	lsrs	r3, r3, #14
 800500e:	b2db      	uxtb	r3, r3
 8005010:	f003 0301 	and.w	r3, r3, #1
 8005014:	b2da      	uxtb	r2, r3
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800501e:	0b5b      	lsrs	r3, r3, #13
 8005020:	b2db      	uxtb	r3, r3
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	b2da      	uxtb	r2, r3
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005030:	0b1b      	lsrs	r3, r3, #12
 8005032:	b2db      	uxtb	r3, r3
 8005034:	f003 0301 	and.w	r3, r3, #1
 8005038:	b2da      	uxtb	r2, r3
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	2200      	movs	r2, #0
 8005042:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005048:	2b00      	cmp	r3, #0
 800504a:	d163      	bne.n	8005114 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005050:	009a      	lsls	r2, r3, #2
 8005052:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005056:	4013      	ands	r3, r2
 8005058:	687a      	ldr	r2, [r7, #4]
 800505a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 800505c:	0f92      	lsrs	r2, r2, #30
 800505e:	431a      	orrs	r2, r3
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005068:	0edb      	lsrs	r3, r3, #27
 800506a:	b2db      	uxtb	r3, r3
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	b2da      	uxtb	r2, r3
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800507a:	0e1b      	lsrs	r3, r3, #24
 800507c:	b2db      	uxtb	r3, r3
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	b2da      	uxtb	r2, r3
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800508c:	0d5b      	lsrs	r3, r3, #21
 800508e:	b2db      	uxtb	r3, r3
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	b2da      	uxtb	r2, r3
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800509e:	0c9b      	lsrs	r3, r3, #18
 80050a0:	b2db      	uxtb	r3, r3
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050b0:	0bdb      	lsrs	r3, r3, #15
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	f003 0307 	and.w	r3, r3, #7
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	1c5a      	adds	r2, r3, #1
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	7e1b      	ldrb	r3, [r3, #24]
 80050cc:	b2db      	uxtb	r3, r3
 80050ce:	f003 0307 	and.w	r3, r3, #7
 80050d2:	3302      	adds	r3, #2
 80050d4:	2201      	movs	r2, #1
 80050d6:	fa02 f303 	lsl.w	r3, r2, r3
 80050da:	687a      	ldr	r2, [r7, #4]
 80050dc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 80050de:	fb03 f202 	mul.w	r2, r3, r2
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	7a1b      	ldrb	r3, [r3, #8]
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	f003 030f 	and.w	r3, r3, #15
 80050f0:	2201      	movs	r2, #1
 80050f2:	409a      	lsls	r2, r3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005100:	0a52      	lsrs	r2, r2, #9
 8005102:	fb03 f202 	mul.w	r2, r3, r2
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005110:	661a      	str	r2, [r3, #96]	@ 0x60
 8005112:	e031      	b.n	8005178 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005118:	2b01      	cmp	r3, #1
 800511a:	d11d      	bne.n	8005158 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005120:	041b      	lsls	r3, r3, #16
 8005122:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800512a:	0c1b      	lsrs	r3, r3, #16
 800512c:	431a      	orrs	r2, r3
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	3301      	adds	r3, #1
 8005138:	029a      	lsls	r2, r3, #10
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800514c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	661a      	str	r2, [r3, #96]	@ 0x60
 8005156:	e00f      	b.n	8005178 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a58      	ldr	r2, [pc, #352]	@ (80052c0 <HAL_SD_GetCardCSD+0x344>)
 800515e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005164:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e09d      	b.n	80052b4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800517c:	0b9b      	lsrs	r3, r3, #14
 800517e:	b2db      	uxtb	r3, r3
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	b2da      	uxtb	r2, r3
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800518e:	09db      	lsrs	r3, r3, #7
 8005190:	b2db      	uxtb	r3, r3
 8005192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005196:	b2da      	uxtb	r2, r3
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80051a6:	b2da      	uxtb	r2, r3
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b0:	0fdb      	lsrs	r3, r3, #31
 80051b2:	b2da      	uxtb	r2, r3
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051bc:	0f5b      	lsrs	r3, r3, #29
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	f003 0303 	and.w	r3, r3, #3
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ce:	0e9b      	lsrs	r3, r3, #26
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	b2da      	uxtb	r2, r3
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e0:	0d9b      	lsrs	r3, r3, #22
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	f003 030f 	and.w	r3, r3, #15
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f2:	0d5b      	lsrs	r3, r3, #21
 80051f4:	b2db      	uxtb	r3, r3
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	b2da      	uxtb	r2, r3
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2200      	movs	r2, #0
 8005206:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800520e:	0c1b      	lsrs	r3, r3, #16
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f003 0301 	and.w	r3, r3, #1
 8005216:	b2da      	uxtb	r2, r3
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005222:	0bdb      	lsrs	r3, r3, #15
 8005224:	b2db      	uxtb	r3, r3
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	b2da      	uxtb	r2, r3
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005236:	0b9b      	lsrs	r3, r3, #14
 8005238:	b2db      	uxtb	r3, r3
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	b2da      	uxtb	r2, r3
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800524a:	0b5b      	lsrs	r3, r3, #13
 800524c:	b2db      	uxtb	r3, r3
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	b2da      	uxtb	r2, r3
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800525e:	0b1b      	lsrs	r3, r3, #12
 8005260:	b2db      	uxtb	r3, r3
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	b2da      	uxtb	r2, r3
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005272:	0a9b      	lsrs	r3, r3, #10
 8005274:	b2db      	uxtb	r3, r3
 8005276:	f003 0303 	and.w	r3, r3, #3
 800527a:	b2da      	uxtb	r2, r3
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005286:	0a1b      	lsrs	r3, r3, #8
 8005288:	b2db      	uxtb	r3, r3
 800528a:	f003 0303 	and.w	r3, r3, #3
 800528e:	b2da      	uxtb	r2, r3
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529a:	085b      	lsrs	r3, r3, #1
 800529c:	b2db      	uxtb	r3, r3
 800529e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2201      	movs	r2, #1
 80052ae:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr
 80052c0:	004005ff 	.word	0x004005ff

080052c4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005324:	2300      	movs	r3, #0
 8005326:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005328:	f107 030c 	add.w	r3, r7, #12
 800532c:	4619      	mov	r1, r3
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fa10 	bl	8005754 <SD_SendStatus>
 8005334:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d005      	beq.n	8005348 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	431a      	orrs	r2, r3
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	0a5b      	lsrs	r3, r3, #9
 800534c:	f003 030f 	and.w	r3, r3, #15
 8005350:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005352:	693b      	ldr	r3, [r7, #16]
}
 8005354:	4618      	mov	r0, r3
 8005356:	3718      	adds	r7, #24
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005368:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005378:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800537a:	bf00      	nop
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b084      	sub	sp, #16
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005392:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005398:	2b82      	cmp	r3, #130	@ 0x82
 800539a:	d111      	bne.n	80053c0 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4618      	mov	r0, r3
 80053a2:	f002 f833 	bl	800740c <SDMMC_CmdStopTransfer>
 80053a6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d008      	beq.n	80053c0 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053b2:	68bb      	ldr	r3, [r7, #8]
 80053b4:	431a      	orrs	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f7ff fdd4 	bl	8004f68 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0208 	bic.w	r2, r2, #8
 80053ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f240 523a 	movw	r2, #1338	@ 0x53a
 80053d8:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f002 fc37 	bl	8007c5c <HAL_SD_RxCpltCallback>
#endif
}
 80053ee:	bf00      	nop
 80053f0:	3710      	adds	r7, #16
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
	...

080053f8 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b086      	sub	sp, #24
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005404:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f7fd f9ca 	bl	80027a0 <HAL_DMA_GetError>
 800540c:	4603      	mov	r3, r0
 800540e:	2b02      	cmp	r3, #2
 8005410:	d03e      	beq.n	8005490 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005416:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005418:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005420:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d002      	beq.n	800542e <SD_DMAError+0x36>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d12d      	bne.n	800548a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a19      	ldr	r2, [pc, #100]	@ (8005498 <SD_DMAError+0xa0>)
 8005434:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8005444:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800544a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005452:	6978      	ldr	r0, [r7, #20]
 8005454:	f7ff ff62 	bl	800531c <HAL_SD_GetCardState>
 8005458:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b06      	cmp	r3, #6
 800545e:	d002      	beq.n	8005466 <SD_DMAError+0x6e>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b05      	cmp	r3, #5
 8005464:	d10a      	bne.n	800547c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4618      	mov	r0, r3
 800546c:	f001 ffce 	bl	800740c <SDMMC_CmdStopTransfer>
 8005470:	4602      	mov	r2, r0
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005476:	431a      	orrs	r2, r3
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2200      	movs	r2, #0
 8005488:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800548a:	6978      	ldr	r0, [r7, #20]
 800548c:	f7ff fd6c 	bl	8004f68 <HAL_SD_ErrorCallback>
#endif
  }
}
 8005490:	bf00      	nop
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	004005ff 	.word	0x004005ff

0800549c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800549c:	b5b0      	push	{r4, r5, r7, lr}
 800549e:	b094      	sub	sp, #80	@ 0x50
 80054a0:	af04      	add	r7, sp, #16
 80054a2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80054a4:	2301      	movs	r3, #1
 80054a6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f001 fe7e 	bl	80071ae <SDIO_GetPowerState>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d102      	bne.n	80054be <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80054b8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80054bc:	e0b8      	b.n	8005630 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c2:	2b03      	cmp	r3, #3
 80054c4:	d02f      	beq.n	8005526 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4618      	mov	r0, r3
 80054cc:	f002 f865 	bl	800759a <SDMMC_CmdSendCID>
 80054d0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80054d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <SD_InitCard+0x40>
    {
      return errorstate;
 80054d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054da:	e0a9      	b.n	8005630 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2100      	movs	r1, #0
 80054e2:	4618      	mov	r0, r3
 80054e4:	f001 fea8 	bl	8007238 <SDIO_GetResponse>
 80054e8:	4602      	mov	r2, r0
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	2104      	movs	r1, #4
 80054f4:	4618      	mov	r0, r3
 80054f6:	f001 fe9f 	bl	8007238 <SDIO_GetResponse>
 80054fa:	4602      	mov	r2, r0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2108      	movs	r1, #8
 8005506:	4618      	mov	r0, r3
 8005508:	f001 fe96 	bl	8007238 <SDIO_GetResponse>
 800550c:	4602      	mov	r2, r0
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	210c      	movs	r1, #12
 8005518:	4618      	mov	r0, r3
 800551a:	f001 fe8d 	bl	8007238 <SDIO_GetResponse>
 800551e:	4602      	mov	r2, r0
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800552a:	2b03      	cmp	r3, #3
 800552c:	d00d      	beq.n	800554a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f107 020e 	add.w	r2, r7, #14
 8005536:	4611      	mov	r1, r2
 8005538:	4618      	mov	r0, r3
 800553a:	f002 f86b 	bl	8007614 <SDMMC_CmdSetRelAdd>
 800553e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8005540:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005542:	2b00      	cmp	r3, #0
 8005544:	d001      	beq.n	800554a <SD_InitCard+0xae>
    {
      return errorstate;
 8005546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005548:	e072      	b.n	8005630 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800554e:	2b03      	cmp	r3, #3
 8005550:	d036      	beq.n	80055c0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8005552:	89fb      	ldrh	r3, [r7, #14]
 8005554:	461a      	mov	r2, r3
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005562:	041b      	lsls	r3, r3, #16
 8005564:	4619      	mov	r1, r3
 8005566:	4610      	mov	r0, r2
 8005568:	f002 f835 	bl	80075d6 <SDMMC_CmdSendCSD>
 800556c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800556e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005570:	2b00      	cmp	r3, #0
 8005572:	d001      	beq.n	8005578 <SD_InitCard+0xdc>
    {
      return errorstate;
 8005574:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005576:	e05b      	b.n	8005630 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	2100      	movs	r1, #0
 800557e:	4618      	mov	r0, r3
 8005580:	f001 fe5a 	bl	8007238 <SDIO_GetResponse>
 8005584:	4602      	mov	r2, r0
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	2104      	movs	r1, #4
 8005590:	4618      	mov	r0, r3
 8005592:	f001 fe51 	bl	8007238 <SDIO_GetResponse>
 8005596:	4602      	mov	r2, r0
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2108      	movs	r1, #8
 80055a2:	4618      	mov	r0, r3
 80055a4:	f001 fe48 	bl	8007238 <SDIO_GetResponse>
 80055a8:	4602      	mov	r2, r0
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	210c      	movs	r1, #12
 80055b4:	4618      	mov	r0, r3
 80055b6:	f001 fe3f 	bl	8007238 <SDIO_GetResponse>
 80055ba:	4602      	mov	r2, r0
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2104      	movs	r1, #4
 80055c6:	4618      	mov	r0, r3
 80055c8:	f001 fe36 	bl	8007238 <SDIO_GetResponse>
 80055cc:	4603      	mov	r3, r0
 80055ce:	0d1a      	lsrs	r2, r3, #20
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80055d4:	f107 0310 	add.w	r3, r7, #16
 80055d8:	4619      	mov	r1, r3
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f7ff fcce 	bl	8004f7c <HAL_SD_GetCardCSD>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80055e6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80055ea:	e021      	b.n	8005630 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6819      	ldr	r1, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055f4:	041b      	lsls	r3, r3, #16
 80055f6:	2200      	movs	r2, #0
 80055f8:	461c      	mov	r4, r3
 80055fa:	4615      	mov	r5, r2
 80055fc:	4622      	mov	r2, r4
 80055fe:	462b      	mov	r3, r5
 8005600:	4608      	mov	r0, r1
 8005602:	f001 ff25 	bl	8007450 <SDMMC_CmdSelDesel>
 8005606:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8005608:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <SD_InitCard+0x176>
  {
    return errorstate;
 800560e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005610:	e00e      	b.n	8005630 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681d      	ldr	r5, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	466c      	mov	r4, sp
 800561a:	f103 0210 	add.w	r2, r3, #16
 800561e:	ca07      	ldmia	r2, {r0, r1, r2}
 8005620:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005624:	3304      	adds	r3, #4
 8005626:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005628:	4628      	mov	r0, r5
 800562a:	f001 fd87 	bl	800713c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3740      	adds	r7, #64	@ 0x40
 8005634:	46bd      	mov	sp, r7
 8005636:	bdb0      	pop	{r4, r5, r7, pc}

08005638 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	617b      	str	r3, [r7, #20]
 8005648:	2300      	movs	r3, #0
 800564a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4618      	mov	r0, r3
 8005652:	f001 ff20 	bl	8007496 <SDMMC_CmdGoIdleState>
 8005656:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d001      	beq.n	8005662 <SD_PowerON+0x2a>
  {
    return errorstate;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	e072      	b.n	8005748 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4618      	mov	r0, r3
 8005668:	f001 ff33 	bl	80074d2 <SDMMC_CmdOperCond>
 800566c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d00d      	beq.n	8005690 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4618      	mov	r0, r3
 8005680:	f001 ff09 	bl	8007496 <SDMMC_CmdGoIdleState>
 8005684:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d004      	beq.n	8005696 <SD_PowerON+0x5e>
    {
      return errorstate;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	e05b      	b.n	8005748 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2201      	movs	r2, #1
 8005694:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800569a:	2b01      	cmp	r3, #1
 800569c:	d137      	bne.n	800570e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	2100      	movs	r1, #0
 80056a4:	4618      	mov	r0, r3
 80056a6:	f001 ff33 	bl	8007510 <SDMMC_CmdAppCommand>
 80056aa:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d02d      	beq.n	800570e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056b2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80056b6:	e047      	b.n	8005748 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2100      	movs	r1, #0
 80056be:	4618      	mov	r0, r3
 80056c0:	f001 ff26 	bl	8007510 <SDMMC_CmdAppCommand>
 80056c4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d001      	beq.n	80056d0 <SD_PowerON+0x98>
    {
      return errorstate;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	e03b      	b.n	8005748 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	491e      	ldr	r1, [pc, #120]	@ (8005750 <SD_PowerON+0x118>)
 80056d6:	4618      	mov	r0, r3
 80056d8:	f001 ff3c 	bl	8007554 <SDMMC_CmdAppOperCommand>
 80056dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80056e4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80056e8:	e02e      	b.n	8005748 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	2100      	movs	r1, #0
 80056f0:	4618      	mov	r0, r3
 80056f2:	f001 fda1 	bl	8007238 <SDIO_GetResponse>
 80056f6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	0fdb      	lsrs	r3, r3, #31
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <SD_PowerON+0xcc>
 8005700:	2301      	movs	r3, #1
 8005702:	e000      	b.n	8005706 <SD_PowerON+0xce>
 8005704:	2300      	movs	r3, #0
 8005706:	613b      	str	r3, [r7, #16]

    count++;
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	3301      	adds	r3, #1
 800570c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005714:	4293      	cmp	r3, r2
 8005716:	d802      	bhi.n	800571e <SD_PowerON+0xe6>
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0cc      	beq.n	80056b8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005724:	4293      	cmp	r3, r2
 8005726:	d902      	bls.n	800572e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8005728:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800572c:	e00c      	b.n	8005748 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005734:	2b00      	cmp	r3, #0
 8005736:	d003      	beq.n	8005740 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	645a      	str	r2, [r3, #68]	@ 0x44
 800573e:	e002      	b.n	8005746 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}
 8005750:	c1100000 	.word	0xc1100000

08005754 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	2b00      	cmp	r3, #0
 8005762:	d102      	bne.n	800576a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8005764:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005768:	e018      	b.n	800579c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005772:	041b      	lsls	r3, r3, #16
 8005774:	4619      	mov	r1, r3
 8005776:	4610      	mov	r0, r2
 8005778:	f001 ff6d 	bl	8007656 <SDMMC_CmdSendStatus>
 800577c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d001      	beq.n	8005788 <SD_SendStatus+0x34>
  {
    return errorstate;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	e009      	b.n	800579c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2100      	movs	r1, #0
 800578e:	4618      	mov	r0, r3
 8005790:	f001 fd52 	bl	8007238 <SDIO_GetResponse>
 8005794:	4602      	mov	r2, r0
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b082      	sub	sp, #8
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d101      	bne.n	80057b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e041      	b.n	800583a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fc fbc4 	bl	8001f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	3304      	adds	r3, #4
 80057e0:	4619      	mov	r1, r3
 80057e2:	4610      	mov	r0, r2
 80057e4:	f000 fa7e 	bl	8005ce4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2201      	movs	r2, #1
 800580c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005838:	2300      	movs	r3, #0
}
 800583a:	4618      	mov	r0, r3
 800583c:	3708      	adds	r7, #8
 800583e:	46bd      	mov	sp, r7
 8005840:	bd80      	pop	{r7, pc}
	...

08005844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b01      	cmp	r3, #1
 8005856:	d001      	beq.n	800585c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005858:	2301      	movs	r3, #1
 800585a:	e04e      	b.n	80058fa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2202      	movs	r2, #2
 8005860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f042 0201 	orr.w	r2, r2, #1
 8005872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a23      	ldr	r2, [pc, #140]	@ (8005908 <HAL_TIM_Base_Start_IT+0xc4>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d022      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005886:	d01d      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a1f      	ldr	r2, [pc, #124]	@ (800590c <HAL_TIM_Base_Start_IT+0xc8>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d018      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a1e      	ldr	r2, [pc, #120]	@ (8005910 <HAL_TIM_Base_Start_IT+0xcc>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d013      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a1c      	ldr	r2, [pc, #112]	@ (8005914 <HAL_TIM_Base_Start_IT+0xd0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d00e      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a1b      	ldr	r2, [pc, #108]	@ (8005918 <HAL_TIM_Base_Start_IT+0xd4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d009      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a19      	ldr	r2, [pc, #100]	@ (800591c <HAL_TIM_Base_Start_IT+0xd8>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d004      	beq.n	80058c4 <HAL_TIM_Base_Start_IT+0x80>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a18      	ldr	r2, [pc, #96]	@ (8005920 <HAL_TIM_Base_Start_IT+0xdc>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d111      	bne.n	80058e8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	f003 0307 	and.w	r3, r3, #7
 80058ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	2b06      	cmp	r3, #6
 80058d4:	d010      	beq.n	80058f8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f042 0201 	orr.w	r2, r2, #1
 80058e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e6:	e007      	b.n	80058f8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f042 0201 	orr.w	r2, r2, #1
 80058f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3714      	adds	r7, #20
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	40010000 	.word	0x40010000
 800590c:	40000400 	.word	0x40000400
 8005910:	40000800 	.word	0x40000800
 8005914:	40000c00 	.word	0x40000c00
 8005918:	40010400 	.word	0x40010400
 800591c:	40014000 	.word	0x40014000
 8005920:	40001800 	.word	0x40001800

08005924 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	691b      	ldr	r3, [r3, #16]
 800593a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d020      	beq.n	8005988 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	f003 0302 	and.w	r3, r3, #2
 800594c:	2b00      	cmp	r3, #0
 800594e:	d01b      	beq.n	8005988 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f06f 0202 	mvn.w	r2, #2
 8005958:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	f003 0303 	and.w	r3, r3, #3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d003      	beq.n	8005976 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f999 	bl	8005ca6 <HAL_TIM_IC_CaptureCallback>
 8005974:	e005      	b.n	8005982 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f98b 	bl	8005c92 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f99c 	bl	8005cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	d020      	beq.n	80059d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b00      	cmp	r3, #0
 800599a:	d01b      	beq.n	80059d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f06f 0204 	mvn.w	r2, #4
 80059a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2202      	movs	r2, #2
 80059aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 f973 	bl	8005ca6 <HAL_TIM_IC_CaptureCallback>
 80059c0:	e005      	b.n	80059ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 f965 	bl	8005c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f000 f976 	bl	8005cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d020      	beq.n	8005a20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f003 0308 	and.w	r3, r3, #8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d01b      	beq.n	8005a20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f06f 0208 	mvn.w	r2, #8
 80059f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2204      	movs	r2, #4
 80059f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d003      	beq.n	8005a0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f94d 	bl	8005ca6 <HAL_TIM_IC_CaptureCallback>
 8005a0c:	e005      	b.n	8005a1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f93f 	bl	8005c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f950 	bl	8005cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	f003 0310 	and.w	r3, r3, #16
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d020      	beq.n	8005a6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d01b      	beq.n	8005a6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f06f 0210 	mvn.w	r2, #16
 8005a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2208      	movs	r2, #8
 8005a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	69db      	ldr	r3, [r3, #28]
 8005a4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f927 	bl	8005ca6 <HAL_TIM_IC_CaptureCallback>
 8005a58:	e005      	b.n	8005a66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 f919 	bl	8005c92 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	f000 f92a 	bl	8005cba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f003 0301 	and.w	r3, r3, #1
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00c      	beq.n	8005a90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d007      	beq.n	8005a90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f06f 0201 	mvn.w	r2, #1
 8005a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f7fb ff74 	bl	8001978 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d00c      	beq.n	8005ab4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d007      	beq.n	8005ab4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005aac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fae4 	bl	800607c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005ab4:	68bb      	ldr	r3, [r7, #8]
 8005ab6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d00c      	beq.n	8005ad8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d007      	beq.n	8005ad8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ad0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f8fb 	bl	8005cce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f003 0320 	and.w	r3, r3, #32
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00c      	beq.n	8005afc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f003 0320 	and.w	r3, r3, #32
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d007      	beq.n	8005afc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f06f 0220 	mvn.w	r2, #32
 8005af4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 fab6 	bl	8006068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005afc:	bf00      	nop
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b18:	2b01      	cmp	r3, #1
 8005b1a:	d101      	bne.n	8005b20 <HAL_TIM_ConfigClockSource+0x1c>
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	e0b4      	b.n	8005c8a <HAL_TIM_ConfigClockSource+0x186>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b58:	d03e      	beq.n	8005bd8 <HAL_TIM_ConfigClockSource+0xd4>
 8005b5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b5e:	f200 8087 	bhi.w	8005c70 <HAL_TIM_ConfigClockSource+0x16c>
 8005b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b66:	f000 8086 	beq.w	8005c76 <HAL_TIM_ConfigClockSource+0x172>
 8005b6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b6e:	d87f      	bhi.n	8005c70 <HAL_TIM_ConfigClockSource+0x16c>
 8005b70:	2b70      	cmp	r3, #112	@ 0x70
 8005b72:	d01a      	beq.n	8005baa <HAL_TIM_ConfigClockSource+0xa6>
 8005b74:	2b70      	cmp	r3, #112	@ 0x70
 8005b76:	d87b      	bhi.n	8005c70 <HAL_TIM_ConfigClockSource+0x16c>
 8005b78:	2b60      	cmp	r3, #96	@ 0x60
 8005b7a:	d050      	beq.n	8005c1e <HAL_TIM_ConfigClockSource+0x11a>
 8005b7c:	2b60      	cmp	r3, #96	@ 0x60
 8005b7e:	d877      	bhi.n	8005c70 <HAL_TIM_ConfigClockSource+0x16c>
 8005b80:	2b50      	cmp	r3, #80	@ 0x50
 8005b82:	d03c      	beq.n	8005bfe <HAL_TIM_ConfigClockSource+0xfa>
 8005b84:	2b50      	cmp	r3, #80	@ 0x50
 8005b86:	d873      	bhi.n	8005c70 <HAL_TIM_ConfigClockSource+0x16c>
 8005b88:	2b40      	cmp	r3, #64	@ 0x40
 8005b8a:	d058      	beq.n	8005c3e <HAL_TIM_ConfigClockSource+0x13a>
 8005b8c:	2b40      	cmp	r3, #64	@ 0x40
 8005b8e:	d86f      	bhi.n	8005c70 <HAL_TIM_ConfigClockSource+0x16c>
 8005b90:	2b30      	cmp	r3, #48	@ 0x30
 8005b92:	d064      	beq.n	8005c5e <HAL_TIM_ConfigClockSource+0x15a>
 8005b94:	2b30      	cmp	r3, #48	@ 0x30
 8005b96:	d86b      	bhi.n	8005c70 <HAL_TIM_ConfigClockSource+0x16c>
 8005b98:	2b20      	cmp	r3, #32
 8005b9a:	d060      	beq.n	8005c5e <HAL_TIM_ConfigClockSource+0x15a>
 8005b9c:	2b20      	cmp	r3, #32
 8005b9e:	d867      	bhi.n	8005c70 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d05c      	beq.n	8005c5e <HAL_TIM_ConfigClockSource+0x15a>
 8005ba4:	2b10      	cmp	r3, #16
 8005ba6:	d05a      	beq.n	8005c5e <HAL_TIM_ConfigClockSource+0x15a>
 8005ba8:	e062      	b.n	8005c70 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005bba:	f000 f9b9 	bl	8005f30 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	689b      	ldr	r3, [r3, #8]
 8005bc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005bcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68ba      	ldr	r2, [r7, #8]
 8005bd4:	609a      	str	r2, [r3, #8]
      break;
 8005bd6:	e04f      	b.n	8005c78 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005be8:	f000 f9a2 	bl	8005f30 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005bfa:	609a      	str	r2, [r3, #8]
      break;
 8005bfc:	e03c      	b.n	8005c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	f000 f916 	bl	8005e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2150      	movs	r1, #80	@ 0x50
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 f96f 	bl	8005efa <TIM_ITRx_SetConfig>
      break;
 8005c1c:	e02c      	b.n	8005c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c2a:	461a      	mov	r2, r3
 8005c2c:	f000 f935 	bl	8005e9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2160      	movs	r1, #96	@ 0x60
 8005c36:	4618      	mov	r0, r3
 8005c38:	f000 f95f 	bl	8005efa <TIM_ITRx_SetConfig>
      break;
 8005c3c:	e01c      	b.n	8005c78 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	f000 f8f6 	bl	8005e3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2140      	movs	r1, #64	@ 0x40
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 f94f 	bl	8005efa <TIM_ITRx_SetConfig>
      break;
 8005c5c:	e00c      	b.n	8005c78 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4619      	mov	r1, r3
 8005c68:	4610      	mov	r0, r2
 8005c6a:	f000 f946 	bl	8005efa <TIM_ITRx_SetConfig>
      break;
 8005c6e:	e003      	b.n	8005c78 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	73fb      	strb	r3, [r7, #15]
      break;
 8005c74:	e000      	b.n	8005c78 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005c9a:	bf00      	nop
 8005c9c:	370c      	adds	r7, #12
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr

08005ca6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ca6:	b480      	push	{r7}
 8005ca8:	b083      	sub	sp, #12
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cae:	bf00      	nop
 8005cb0:	370c      	adds	r7, #12
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr

08005cba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cba:	b480      	push	{r7}
 8005cbc:	b083      	sub	sp, #12
 8005cbe:	af00      	add	r7, sp, #0
 8005cc0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cc2:	bf00      	nop
 8005cc4:	370c      	adds	r7, #12
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b083      	sub	sp, #12
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cd6:	bf00      	nop
 8005cd8:	370c      	adds	r7, #12
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
	...

08005ce4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	b085      	sub	sp, #20
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a46      	ldr	r2, [pc, #280]	@ (8005e10 <TIM_Base_SetConfig+0x12c>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d013      	beq.n	8005d24 <TIM_Base_SetConfig+0x40>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d02:	d00f      	beq.n	8005d24 <TIM_Base_SetConfig+0x40>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a43      	ldr	r2, [pc, #268]	@ (8005e14 <TIM_Base_SetConfig+0x130>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d00b      	beq.n	8005d24 <TIM_Base_SetConfig+0x40>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a42      	ldr	r2, [pc, #264]	@ (8005e18 <TIM_Base_SetConfig+0x134>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d007      	beq.n	8005d24 <TIM_Base_SetConfig+0x40>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a41      	ldr	r2, [pc, #260]	@ (8005e1c <TIM_Base_SetConfig+0x138>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_Base_SetConfig+0x40>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a40      	ldr	r2, [pc, #256]	@ (8005e20 <TIM_Base_SetConfig+0x13c>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d108      	bne.n	8005d36 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a35      	ldr	r2, [pc, #212]	@ (8005e10 <TIM_Base_SetConfig+0x12c>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d02b      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d44:	d027      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a32      	ldr	r2, [pc, #200]	@ (8005e14 <TIM_Base_SetConfig+0x130>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d023      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a31      	ldr	r2, [pc, #196]	@ (8005e18 <TIM_Base_SetConfig+0x134>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d01f      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a30      	ldr	r2, [pc, #192]	@ (8005e1c <TIM_Base_SetConfig+0x138>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d01b      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a2f      	ldr	r2, [pc, #188]	@ (8005e20 <TIM_Base_SetConfig+0x13c>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d017      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a2e      	ldr	r2, [pc, #184]	@ (8005e24 <TIM_Base_SetConfig+0x140>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d013      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a2d      	ldr	r2, [pc, #180]	@ (8005e28 <TIM_Base_SetConfig+0x144>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00f      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a2c      	ldr	r2, [pc, #176]	@ (8005e2c <TIM_Base_SetConfig+0x148>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00b      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4a2b      	ldr	r2, [pc, #172]	@ (8005e30 <TIM_Base_SetConfig+0x14c>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d007      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a2a      	ldr	r2, [pc, #168]	@ (8005e34 <TIM_Base_SetConfig+0x150>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d003      	beq.n	8005d96 <TIM_Base_SetConfig+0xb2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a29      	ldr	r2, [pc, #164]	@ (8005e38 <TIM_Base_SetConfig+0x154>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d108      	bne.n	8005da8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	4313      	orrs	r3, r2
 8005da6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	4a10      	ldr	r2, [pc, #64]	@ (8005e10 <TIM_Base_SetConfig+0x12c>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d003      	beq.n	8005ddc <TIM_Base_SetConfig+0xf8>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	4a12      	ldr	r2, [pc, #72]	@ (8005e20 <TIM_Base_SetConfig+0x13c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d103      	bne.n	8005de4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	691a      	ldr	r2, [r3, #16]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	f003 0301 	and.w	r3, r3, #1
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d105      	bne.n	8005e02 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	f023 0201 	bic.w	r2, r3, #1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	611a      	str	r2, [r3, #16]
  }
}
 8005e02:	bf00      	nop
 8005e04:	3714      	adds	r7, #20
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	40010000 	.word	0x40010000
 8005e14:	40000400 	.word	0x40000400
 8005e18:	40000800 	.word	0x40000800
 8005e1c:	40000c00 	.word	0x40000c00
 8005e20:	40010400 	.word	0x40010400
 8005e24:	40014000 	.word	0x40014000
 8005e28:	40014400 	.word	0x40014400
 8005e2c:	40014800 	.word	0x40014800
 8005e30:	40001800 	.word	0x40001800
 8005e34:	40001c00 	.word	0x40001c00
 8005e38:	40002000 	.word	0x40002000

08005e3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	f023 0201 	bic.w	r2, r3, #1
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	699b      	ldr	r3, [r3, #24]
 8005e5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005e66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	f023 030a 	bic.w	r3, r3, #10
 8005e78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e7a:	697a      	ldr	r2, [r7, #20]
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	693a      	ldr	r2, [r7, #16]
 8005e86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	621a      	str	r2, [r3, #32]
}
 8005e8e:	bf00      	nop
 8005e90:	371c      	adds	r7, #28
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b087      	sub	sp, #28
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6a1b      	ldr	r3, [r3, #32]
 8005eb0:	f023 0210 	bic.w	r2, r3, #16
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ec4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	031b      	lsls	r3, r3, #12
 8005eca:	693a      	ldr	r2, [r7, #16]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005ed6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	011b      	lsls	r3, r3, #4
 8005edc:	697a      	ldr	r2, [r7, #20]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	621a      	str	r2, [r3, #32]
}
 8005eee:	bf00      	nop
 8005ef0:	371c      	adds	r7, #28
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b085      	sub	sp, #20
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
 8005f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f12:	683a      	ldr	r2, [r7, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	f043 0307 	orr.w	r3, r3, #7
 8005f1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	68fa      	ldr	r2, [r7, #12]
 8005f22:	609a      	str	r2, [r3, #8]
}
 8005f24:	bf00      	nop
 8005f26:	3714      	adds	r7, #20
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
 8005f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f44:	697b      	ldr	r3, [r7, #20]
 8005f46:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	021a      	lsls	r2, r3, #8
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	431a      	orrs	r2, r3
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	697a      	ldr	r2, [r7, #20]
 8005f5a:	4313      	orrs	r3, r2
 8005f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	697a      	ldr	r2, [r7, #20]
 8005f62:	609a      	str	r2, [r3, #8]
}
 8005f64:	bf00      	nop
 8005f66:	371c      	adds	r7, #28
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b085      	sub	sp, #20
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e05a      	b.n	800603e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68fa      	ldr	r2, [r7, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a21      	ldr	r2, [pc, #132]	@ (800604c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d022      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd4:	d01d      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1d      	ldr	r2, [pc, #116]	@ (8006050 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d018      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1b      	ldr	r2, [pc, #108]	@ (8006054 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d013      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a1a      	ldr	r2, [pc, #104]	@ (8006058 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d00e      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a18      	ldr	r2, [pc, #96]	@ (800605c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d009      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a17      	ldr	r2, [pc, #92]	@ (8006060 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d004      	beq.n	8006012 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a15      	ldr	r2, [pc, #84]	@ (8006064 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d10c      	bne.n	800602c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006018:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	4313      	orrs	r3, r2
 8006022:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40010000 	.word	0x40010000
 8006050:	40000400 	.word	0x40000400
 8006054:	40000800 	.word	0x40000800
 8006058:	40000c00 	.word	0x40000c00
 800605c:	40010400 	.word	0x40010400
 8006060:	40014000 	.word	0x40014000
 8006064:	40001800 	.word	0x40001800

08006068 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006068:	b480      	push	{r7}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006070:	bf00      	nop
 8006072:	370c      	adds	r7, #12
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800607c:	b480      	push	{r7}
 800607e:	b083      	sub	sp, #12
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006084:	bf00      	nop
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d101      	bne.n	80060a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800609e:	2301      	movs	r3, #1
 80060a0:	e042      	b.n	8006128 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d106      	bne.n	80060bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f7fb ffa0 	bl	8001ffc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2224      	movs	r2, #36	@ 0x24
 80060c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68da      	ldr	r2, [r3, #12]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80060d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fdbd 	bl	8006c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	691a      	ldr	r2, [r3, #16]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80060e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	695a      	ldr	r2, [r3, #20]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80060f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2220      	movs	r2, #32
 8006114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2220      	movs	r2, #32
 800611c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006126:	2300      	movs	r3, #0
}
 8006128:	4618      	mov	r0, r3
 800612a:	3708      	adds	r7, #8
 800612c:	46bd      	mov	sp, r7
 800612e:	bd80      	pop	{r7, pc}

08006130 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08a      	sub	sp, #40	@ 0x28
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	4613      	mov	r3, r2
 800613e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b20      	cmp	r3, #32
 800614e:	d175      	bne.n	800623c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <HAL_UART_Transmit+0x2c>
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e06e      	b.n	800623e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2200      	movs	r2, #0
 8006164:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2221      	movs	r2, #33	@ 0x21
 800616a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800616e:	f7fc f91b 	bl	80023a8 <HAL_GetTick>
 8006172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	88fa      	ldrh	r2, [r7, #6]
 8006178:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	88fa      	ldrh	r2, [r7, #6]
 800617e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006188:	d108      	bne.n	800619c <HAL_UART_Transmit+0x6c>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d104      	bne.n	800619c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006192:	2300      	movs	r3, #0
 8006194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	61bb      	str	r3, [r7, #24]
 800619a:	e003      	b.n	80061a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061a0:	2300      	movs	r3, #0
 80061a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061a4:	e02e      	b.n	8006204 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	9300      	str	r3, [sp, #0]
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2200      	movs	r2, #0
 80061ae:	2180      	movs	r1, #128	@ 0x80
 80061b0:	68f8      	ldr	r0, [r7, #12]
 80061b2:	f000 fb1f 	bl	80067f4 <UART_WaitOnFlagUntilTimeout>
 80061b6:	4603      	mov	r3, r0
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	2220      	movs	r2, #32
 80061c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e03a      	b.n	800623e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d10b      	bne.n	80061e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	881b      	ldrh	r3, [r3, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	3302      	adds	r3, #2
 80061e2:	61bb      	str	r3, [r7, #24]
 80061e4:	e007      	b.n	80061f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	781a      	ldrb	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	3301      	adds	r3, #1
 80061f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80061fa:	b29b      	uxth	r3, r3
 80061fc:	3b01      	subs	r3, #1
 80061fe:	b29a      	uxth	r2, r3
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006208:	b29b      	uxth	r3, r3
 800620a:	2b00      	cmp	r3, #0
 800620c:	d1cb      	bne.n	80061a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	2200      	movs	r2, #0
 8006216:	2140      	movs	r1, #64	@ 0x40
 8006218:	68f8      	ldr	r0, [r7, #12]
 800621a:	f000 faeb 	bl	80067f4 <UART_WaitOnFlagUntilTimeout>
 800621e:	4603      	mov	r3, r0
 8006220:	2b00      	cmp	r3, #0
 8006222:	d005      	beq.n	8006230 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	2220      	movs	r2, #32
 8006228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800622c:	2303      	movs	r3, #3
 800622e:	e006      	b.n	800623e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2220      	movs	r2, #32
 8006234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006238:	2300      	movs	r3, #0
 800623a:	e000      	b.n	800623e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800623c:	2302      	movs	r3, #2
  }
}
 800623e:	4618      	mov	r0, r3
 8006240:	3720      	adds	r7, #32
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}

08006246 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006246:	b580      	push	{r7, lr}
 8006248:	b084      	sub	sp, #16
 800624a:	af00      	add	r7, sp, #0
 800624c:	60f8      	str	r0, [r7, #12]
 800624e:	60b9      	str	r1, [r7, #8]
 8006250:	4613      	mov	r3, r2
 8006252:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b20      	cmp	r3, #32
 800625e:	d112      	bne.n	8006286 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <HAL_UART_Receive_IT+0x26>
 8006266:	88fb      	ldrh	r3, [r7, #6]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800626c:	2301      	movs	r3, #1
 800626e:	e00b      	b.n	8006288 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006276:	88fb      	ldrh	r3, [r7, #6]
 8006278:	461a      	mov	r2, r3
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 fb12 	bl	80068a6 <UART_Start_Receive_IT>
 8006282:	4603      	mov	r3, r0
 8006284:	e000      	b.n	8006288 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8006286:	2302      	movs	r3, #2
  }
}
 8006288:	4618      	mov	r0, r3
 800628a:	3710      	adds	r7, #16
 800628c:	46bd      	mov	sp, r7
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b0ba      	sub	sp, #232	@ 0xe8
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	68db      	ldr	r3, [r3, #12]
 80062a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80062b6:	2300      	movs	r3, #0
 80062b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80062bc:	2300      	movs	r3, #0
 80062be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80062c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062c6:	f003 030f 	and.w	r3, r3, #15
 80062ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80062ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d10f      	bne.n	80062f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80062d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062da:	f003 0320 	and.w	r3, r3, #32
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d009      	beq.n	80062f6 <HAL_UART_IRQHandler+0x66>
 80062e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e6:	f003 0320 	and.w	r3, r3, #32
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fbf2 	bl	8006ad8 <UART_Receive_IT>
      return;
 80062f4:	e25b      	b.n	80067ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80062f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 80de 	beq.w	80064bc <HAL_UART_IRQHandler+0x22c>
 8006300:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d106      	bne.n	800631a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800630c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006310:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006314:	2b00      	cmp	r3, #0
 8006316:	f000 80d1 	beq.w	80064bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800631a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800631e:	f003 0301 	and.w	r3, r3, #1
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00b      	beq.n	800633e <HAL_UART_IRQHandler+0xae>
 8006326:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800632a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800632e:	2b00      	cmp	r3, #0
 8006330:	d005      	beq.n	800633e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006336:	f043 0201 	orr.w	r2, r3, #1
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800633e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006342:	f003 0304 	and.w	r3, r3, #4
 8006346:	2b00      	cmp	r3, #0
 8006348:	d00b      	beq.n	8006362 <HAL_UART_IRQHandler+0xd2>
 800634a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b00      	cmp	r3, #0
 8006354:	d005      	beq.n	8006362 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800635a:	f043 0202 	orr.w	r2, r3, #2
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d00b      	beq.n	8006386 <HAL_UART_IRQHandler+0xf6>
 800636e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d005      	beq.n	8006386 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637e:	f043 0204 	orr.w	r2, r3, #4
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006386:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800638a:	f003 0308 	and.w	r3, r3, #8
 800638e:	2b00      	cmp	r3, #0
 8006390:	d011      	beq.n	80063b6 <HAL_UART_IRQHandler+0x126>
 8006392:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006396:	f003 0320 	and.w	r3, r3, #32
 800639a:	2b00      	cmp	r3, #0
 800639c:	d105      	bne.n	80063aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800639e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d005      	beq.n	80063b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ae:	f043 0208 	orr.w	r2, r3, #8
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	f000 81f2 	beq.w	80067a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063c4:	f003 0320 	and.w	r3, r3, #32
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d008      	beq.n	80063de <HAL_UART_IRQHandler+0x14e>
 80063cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063d0:	f003 0320 	and.w	r3, r3, #32
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d002      	beq.n	80063de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f000 fb7d 	bl	8006ad8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063e8:	2b40      	cmp	r3, #64	@ 0x40
 80063ea:	bf0c      	ite	eq
 80063ec:	2301      	moveq	r3, #1
 80063ee:	2300      	movne	r3, #0
 80063f0:	b2db      	uxtb	r3, r3
 80063f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063fa:	f003 0308 	and.w	r3, r3, #8
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d103      	bne.n	800640a <HAL_UART_IRQHandler+0x17a>
 8006402:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006406:	2b00      	cmp	r3, #0
 8006408:	d04f      	beq.n	80064aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f000 fa85 	bl	800691a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800641a:	2b40      	cmp	r3, #64	@ 0x40
 800641c:	d141      	bne.n	80064a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	3314      	adds	r3, #20
 8006424:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800642c:	e853 3f00 	ldrex	r3, [r3]
 8006430:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006434:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006438:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800643c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	3314      	adds	r3, #20
 8006446:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800644a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800644e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006452:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006456:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006462:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d1d9      	bne.n	800641e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800646e:	2b00      	cmp	r3, #0
 8006470:	d013      	beq.n	800649a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006476:	4a7e      	ldr	r2, [pc, #504]	@ (8006670 <HAL_UART_IRQHandler+0x3e0>)
 8006478:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800647e:	4618      	mov	r0, r3
 8006480:	f7fc f96c 	bl	800275c <HAL_DMA_Abort_IT>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d016      	beq.n	80064b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800648e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006494:	4610      	mov	r0, r2
 8006496:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006498:	e00e      	b.n	80064b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f994 	bl	80067c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a0:	e00a      	b.n	80064b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f990 	bl	80067c8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a8:	e006      	b.n	80064b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f98c 	bl	80067c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80064b6:	e175      	b.n	80067a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064b8:	bf00      	nop
    return;
 80064ba:	e173      	b.n	80067a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	f040 814f 	bne.w	8006764 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80064c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064ca:	f003 0310 	and.w	r3, r3, #16
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 8148 	beq.w	8006764 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80064d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064d8:	f003 0310 	and.w	r3, r3, #16
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 8141 	beq.w	8006764 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064e2:	2300      	movs	r3, #0
 80064e4:	60bb      	str	r3, [r7, #8]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	60bb      	str	r3, [r7, #8]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	60bb      	str	r3, [r7, #8]
 80064f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006502:	2b40      	cmp	r3, #64	@ 0x40
 8006504:	f040 80b6 	bne.w	8006674 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	685b      	ldr	r3, [r3, #4]
 8006510:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006514:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006518:	2b00      	cmp	r3, #0
 800651a:	f000 8145 	beq.w	80067a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006522:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006526:	429a      	cmp	r2, r3
 8006528:	f080 813e 	bcs.w	80067a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006532:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800653e:	f000 8088 	beq.w	8006652 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	330c      	adds	r3, #12
 8006548:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006550:	e853 3f00 	ldrex	r3, [r3]
 8006554:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006558:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800655c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006560:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	330c      	adds	r3, #12
 800656a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800656e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006572:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006576:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800657a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800657e:	e841 2300 	strex	r3, r2, [r1]
 8006582:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006586:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1d9      	bne.n	8006542 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3314      	adds	r3, #20
 8006594:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800659e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80065a0:	f023 0301 	bic.w	r3, r3, #1
 80065a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	3314      	adds	r3, #20
 80065ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80065b2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80065b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80065ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80065be:	e841 2300 	strex	r3, r2, [r1]
 80065c2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80065c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1e1      	bne.n	800658e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3314      	adds	r3, #20
 80065d0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80065d4:	e853 3f00 	ldrex	r3, [r3]
 80065d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80065da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065e0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	3314      	adds	r3, #20
 80065ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80065ee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80065f0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80065f4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80065f6:	e841 2300 	strex	r3, r2, [r1]
 80065fa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80065fc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d1e3      	bne.n	80065ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2220      	movs	r2, #32
 8006606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	330c      	adds	r3, #12
 8006616:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006618:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800661a:	e853 3f00 	ldrex	r3, [r3]
 800661e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006620:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006622:	f023 0310 	bic.w	r3, r3, #16
 8006626:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	330c      	adds	r3, #12
 8006630:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006634:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006636:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006638:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800663a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800663c:	e841 2300 	strex	r3, r2, [r1]
 8006640:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e3      	bne.n	8006610 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800664c:	4618      	mov	r0, r3
 800664e:	f7fc f815 	bl	800267c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2202      	movs	r2, #2
 8006656:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006660:	b29b      	uxth	r3, r3
 8006662:	1ad3      	subs	r3, r2, r3
 8006664:	b29b      	uxth	r3, r3
 8006666:	4619      	mov	r1, r3
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 f8b7 	bl	80067dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800666e:	e09b      	b.n	80067a8 <HAL_UART_IRQHandler+0x518>
 8006670:	080069e1 	.word	0x080069e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800667c:	b29b      	uxth	r3, r3
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006688:	b29b      	uxth	r3, r3
 800668a:	2b00      	cmp	r3, #0
 800668c:	f000 808e 	beq.w	80067ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006690:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006694:	2b00      	cmp	r3, #0
 8006696:	f000 8089 	beq.w	80067ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	330c      	adds	r3, #12
 80066a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a4:	e853 3f00 	ldrex	r3, [r3]
 80066a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80066aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80066b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	330c      	adds	r3, #12
 80066ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80066be:	647a      	str	r2, [r7, #68]	@ 0x44
 80066c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80066c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80066c6:	e841 2300 	strex	r3, r2, [r1]
 80066ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80066cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1e3      	bne.n	800669a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	3314      	adds	r3, #20
 80066d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	623b      	str	r3, [r7, #32]
   return(result);
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	f023 0301 	bic.w	r3, r3, #1
 80066e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	3314      	adds	r3, #20
 80066f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80066f6:	633a      	str	r2, [r7, #48]	@ 0x30
 80066f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80066fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80066fe:	e841 2300 	strex	r3, r2, [r1]
 8006702:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1e3      	bne.n	80066d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2220      	movs	r2, #32
 800670e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2200      	movs	r2, #0
 8006716:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	330c      	adds	r3, #12
 800671e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	60fb      	str	r3, [r7, #12]
   return(result);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0310 	bic.w	r3, r3, #16
 800672e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	330c      	adds	r3, #12
 8006738:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800673c:	61fa      	str	r2, [r7, #28]
 800673e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006740:	69b9      	ldr	r1, [r7, #24]
 8006742:	69fa      	ldr	r2, [r7, #28]
 8006744:	e841 2300 	strex	r3, r2, [r1]
 8006748:	617b      	str	r3, [r7, #20]
   return(result);
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d1e3      	bne.n	8006718 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006756:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800675a:	4619      	mov	r1, r3
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 f83d 	bl	80067dc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006762:	e023      	b.n	80067ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800676c:	2b00      	cmp	r3, #0
 800676e:	d009      	beq.n	8006784 <HAL_UART_IRQHandler+0x4f4>
 8006770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 f943 	bl	8006a08 <UART_Transmit_IT>
    return;
 8006782:	e014      	b.n	80067ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00e      	beq.n	80067ae <HAL_UART_IRQHandler+0x51e>
 8006790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006794:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d008      	beq.n	80067ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 f983 	bl	8006aa8 <UART_EndTransmit_IT>
    return;
 80067a2:	e004      	b.n	80067ae <HAL_UART_IRQHandler+0x51e>
    return;
 80067a4:	bf00      	nop
 80067a6:	e002      	b.n	80067ae <HAL_UART_IRQHandler+0x51e>
      return;
 80067a8:	bf00      	nop
 80067aa:	e000      	b.n	80067ae <HAL_UART_IRQHandler+0x51e>
      return;
 80067ac:	bf00      	nop
  }
}
 80067ae:	37e8      	adds	r7, #232	@ 0xe8
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067e8:	bf00      	nop
 80067ea:	370c      	adds	r7, #12
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b086      	sub	sp, #24
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	603b      	str	r3, [r7, #0]
 8006800:	4613      	mov	r3, r2
 8006802:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006804:	e03b      	b.n	800687e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006806:	6a3b      	ldr	r3, [r7, #32]
 8006808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800680c:	d037      	beq.n	800687e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800680e:	f7fb fdcb 	bl	80023a8 <HAL_GetTick>
 8006812:	4602      	mov	r2, r0
 8006814:	683b      	ldr	r3, [r7, #0]
 8006816:	1ad3      	subs	r3, r2, r3
 8006818:	6a3a      	ldr	r2, [r7, #32]
 800681a:	429a      	cmp	r2, r3
 800681c:	d302      	bcc.n	8006824 <UART_WaitOnFlagUntilTimeout+0x30>
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d101      	bne.n	8006828 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006824:	2303      	movs	r3, #3
 8006826:	e03a      	b.n	800689e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	f003 0304 	and.w	r3, r3, #4
 8006832:	2b00      	cmp	r3, #0
 8006834:	d023      	beq.n	800687e <UART_WaitOnFlagUntilTimeout+0x8a>
 8006836:	68bb      	ldr	r3, [r7, #8]
 8006838:	2b80      	cmp	r3, #128	@ 0x80
 800683a:	d020      	beq.n	800687e <UART_WaitOnFlagUntilTimeout+0x8a>
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2b40      	cmp	r3, #64	@ 0x40
 8006840:	d01d      	beq.n	800687e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0308 	and.w	r3, r3, #8
 800684c:	2b08      	cmp	r3, #8
 800684e:	d116      	bne.n	800687e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006850:	2300      	movs	r3, #0
 8006852:	617b      	str	r3, [r7, #20]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	617b      	str	r3, [r7, #20]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	617b      	str	r3, [r7, #20]
 8006864:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 f857 	bl	800691a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2208      	movs	r2, #8
 8006870:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	e00f      	b.n	800689e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	4013      	ands	r3, r2
 8006888:	68ba      	ldr	r2, [r7, #8]
 800688a:	429a      	cmp	r2, r3
 800688c:	bf0c      	ite	eq
 800688e:	2301      	moveq	r3, #1
 8006890:	2300      	movne	r3, #0
 8006892:	b2db      	uxtb	r3, r3
 8006894:	461a      	mov	r2, r3
 8006896:	79fb      	ldrb	r3, [r7, #7]
 8006898:	429a      	cmp	r2, r3
 800689a:	d0b4      	beq.n	8006806 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3718      	adds	r7, #24
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b085      	sub	sp, #20
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	4613      	mov	r3, r2
 80068b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	68ba      	ldr	r2, [r7, #8]
 80068b8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	88fa      	ldrh	r2, [r7, #6]
 80068be:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	88fa      	ldrh	r2, [r7, #6]
 80068c4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2222      	movs	r2, #34	@ 0x22
 80068d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d007      	beq.n	80068ec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80068ea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	695a      	ldr	r2, [r3, #20]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0201 	orr.w	r2, r2, #1
 80068fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68da      	ldr	r2, [r3, #12]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f042 0220 	orr.w	r2, r2, #32
 800690a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006918:	4770      	bx	lr

0800691a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800691a:	b480      	push	{r7}
 800691c:	b095      	sub	sp, #84	@ 0x54
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	330c      	adds	r3, #12
 8006928:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692c:	e853 3f00 	ldrex	r3, [r3]
 8006930:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006934:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006938:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	330c      	adds	r3, #12
 8006940:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006942:	643a      	str	r2, [r7, #64]	@ 0x40
 8006944:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006946:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006948:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800694a:	e841 2300 	strex	r3, r2, [r1]
 800694e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006952:	2b00      	cmp	r3, #0
 8006954:	d1e5      	bne.n	8006922 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	3314      	adds	r3, #20
 800695c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695e:	6a3b      	ldr	r3, [r7, #32]
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	61fb      	str	r3, [r7, #28]
   return(result);
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	f023 0301 	bic.w	r3, r3, #1
 800696c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	3314      	adds	r3, #20
 8006974:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006976:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006978:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800697a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800697c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800697e:	e841 2300 	strex	r3, r2, [r1]
 8006982:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006986:	2b00      	cmp	r3, #0
 8006988:	d1e5      	bne.n	8006956 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698e:	2b01      	cmp	r3, #1
 8006990:	d119      	bne.n	80069c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	330c      	adds	r3, #12
 8006998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	e853 3f00 	ldrex	r3, [r3]
 80069a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	f023 0310 	bic.w	r3, r3, #16
 80069a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	330c      	adds	r3, #12
 80069b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069b2:	61ba      	str	r2, [r7, #24]
 80069b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b6:	6979      	ldr	r1, [r7, #20]
 80069b8:	69ba      	ldr	r2, [r7, #24]
 80069ba:	e841 2300 	strex	r3, r2, [r1]
 80069be:	613b      	str	r3, [r7, #16]
   return(result);
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1e5      	bne.n	8006992 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2220      	movs	r2, #32
 80069ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80069d4:	bf00      	nop
 80069d6:	3754      	adds	r7, #84	@ 0x54
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2200      	movs	r2, #0
 80069f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2200      	movs	r2, #0
 80069f8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f7ff fee4 	bl	80067c8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a00:	bf00      	nop
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b085      	sub	sp, #20
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a16:	b2db      	uxtb	r3, r3
 8006a18:	2b21      	cmp	r3, #33	@ 0x21
 8006a1a:	d13e      	bne.n	8006a9a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a24:	d114      	bne.n	8006a50 <UART_Transmit_IT+0x48>
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	691b      	ldr	r3, [r3, #16]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d110      	bne.n	8006a50 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a42:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	1c9a      	adds	r2, r3, #2
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	621a      	str	r2, [r3, #32]
 8006a4e:	e008      	b.n	8006a62 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6a1b      	ldr	r3, [r3, #32]
 8006a54:	1c59      	adds	r1, r3, #1
 8006a56:	687a      	ldr	r2, [r7, #4]
 8006a58:	6211      	str	r1, [r2, #32]
 8006a5a:	781a      	ldrb	r2, [r3, #0]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d10f      	bne.n	8006a96 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a96:	2300      	movs	r3, #0
 8006a98:	e000      	b.n	8006a9c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a9a:	2302      	movs	r3, #2
  }
}
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	3714      	adds	r7, #20
 8006aa0:	46bd      	mov	sp, r7
 8006aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa6:	4770      	bx	lr

08006aa8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006abe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f7ff fe73 	bl	80067b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006ace:	2300      	movs	r3, #0
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08c      	sub	sp, #48	@ 0x30
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b22      	cmp	r3, #34	@ 0x22
 8006aea:	f040 80ae 	bne.w	8006c4a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006af6:	d117      	bne.n	8006b28 <UART_Receive_IT+0x50>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d113      	bne.n	8006b28 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006b00:	2300      	movs	r3, #0
 8006b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b08:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	b29b      	uxth	r3, r3
 8006b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b20:	1c9a      	adds	r2, r3, #2
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b26:	e026      	b.n	8006b76 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b3a:	d007      	beq.n	8006b4c <UART_Receive_IT+0x74>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d10a      	bne.n	8006b5a <UART_Receive_IT+0x82>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d106      	bne.n	8006b5a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	b2da      	uxtb	r2, r3
 8006b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b56:	701a      	strb	r2, [r3, #0]
 8006b58:	e008      	b.n	8006b6c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b66:	b2da      	uxtb	r2, r3
 8006b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b70:	1c5a      	adds	r2, r3, #1
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	4619      	mov	r1, r3
 8006b84:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d15d      	bne.n	8006c46 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	68da      	ldr	r2, [r3, #12]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f022 0220 	bic.w	r2, r2, #32
 8006b98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68da      	ldr	r2, [r3, #12]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ba8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695a      	ldr	r2, [r3, #20]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0201 	bic.w	r2, r2, #1
 8006bb8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d135      	bne.n	8006c3c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	330c      	adds	r3, #12
 8006bdc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	e853 3f00 	ldrex	r3, [r3]
 8006be4:	613b      	str	r3, [r7, #16]
   return(result);
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f023 0310 	bic.w	r3, r3, #16
 8006bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	330c      	adds	r3, #12
 8006bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf6:	623a      	str	r2, [r7, #32]
 8006bf8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bfa:	69f9      	ldr	r1, [r7, #28]
 8006bfc:	6a3a      	ldr	r2, [r7, #32]
 8006bfe:	e841 2300 	strex	r3, r2, [r1]
 8006c02:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c04:	69bb      	ldr	r3, [r7, #24]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d1e5      	bne.n	8006bd6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0310 	and.w	r3, r3, #16
 8006c14:	2b10      	cmp	r3, #16
 8006c16:	d10a      	bne.n	8006c2e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c18:	2300      	movs	r3, #0
 8006c1a:	60fb      	str	r3, [r7, #12]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	60fb      	str	r3, [r7, #12]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	60fb      	str	r3, [r7, #12]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff fdd1 	bl	80067dc <HAL_UARTEx_RxEventCallback>
 8006c3a:	e002      	b.n	8006c42 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f7fb fa2d 	bl	800209c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	e002      	b.n	8006c4c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	e000      	b.n	8006c4c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006c4a:	2302      	movs	r3, #2
  }
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3730      	adds	r7, #48	@ 0x30
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c58:	b0c0      	sub	sp, #256	@ 0x100
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c70:	68d9      	ldr	r1, [r3, #12]
 8006c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	ea40 0301 	orr.w	r3, r0, r1
 8006c7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	431a      	orrs	r2, r3
 8006c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006cac:	f021 010c 	bic.w	r1, r1, #12
 8006cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006cba:	430b      	orrs	r3, r1
 8006cbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cce:	6999      	ldr	r1, [r3, #24]
 8006cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	ea40 0301 	orr.w	r3, r0, r1
 8006cda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	4b8f      	ldr	r3, [pc, #572]	@ (8006f20 <UART_SetConfig+0x2cc>)
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d005      	beq.n	8006cf4 <UART_SetConfig+0xa0>
 8006ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	4b8d      	ldr	r3, [pc, #564]	@ (8006f24 <UART_SetConfig+0x2d0>)
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d104      	bne.n	8006cfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cf4:	f7fd fde6 	bl	80048c4 <HAL_RCC_GetPCLK2Freq>
 8006cf8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006cfc:	e003      	b.n	8006d06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cfe:	f7fd fdcd 	bl	800489c <HAL_RCC_GetPCLK1Freq>
 8006d02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d0a:	69db      	ldr	r3, [r3, #28]
 8006d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d10:	f040 810c 	bne.w	8006f2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006d22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006d26:	4622      	mov	r2, r4
 8006d28:	462b      	mov	r3, r5
 8006d2a:	1891      	adds	r1, r2, r2
 8006d2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006d2e:	415b      	adcs	r3, r3
 8006d30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006d36:	4621      	mov	r1, r4
 8006d38:	eb12 0801 	adds.w	r8, r2, r1
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	eb43 0901 	adc.w	r9, r3, r1
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	f04f 0300 	mov.w	r3, #0
 8006d4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d56:	4690      	mov	r8, r2
 8006d58:	4699      	mov	r9, r3
 8006d5a:	4623      	mov	r3, r4
 8006d5c:	eb18 0303 	adds.w	r3, r8, r3
 8006d60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d64:	462b      	mov	r3, r5
 8006d66:	eb49 0303 	adc.w	r3, r9, r3
 8006d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d82:	460b      	mov	r3, r1
 8006d84:	18db      	adds	r3, r3, r3
 8006d86:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d88:	4613      	mov	r3, r2
 8006d8a:	eb42 0303 	adc.w	r3, r2, r3
 8006d8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d98:	f7f9 ff76 	bl	8000c88 <__aeabi_uldivmod>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4b61      	ldr	r3, [pc, #388]	@ (8006f28 <UART_SetConfig+0x2d4>)
 8006da2:	fba3 2302 	umull	r2, r3, r3, r2
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	011c      	lsls	r4, r3, #4
 8006daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006db4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006db8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006dbc:	4642      	mov	r2, r8
 8006dbe:	464b      	mov	r3, r9
 8006dc0:	1891      	adds	r1, r2, r2
 8006dc2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006dc4:	415b      	adcs	r3, r3
 8006dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006dcc:	4641      	mov	r1, r8
 8006dce:	eb12 0a01 	adds.w	sl, r2, r1
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	eb43 0b01 	adc.w	fp, r3, r1
 8006dd8:	f04f 0200 	mov.w	r2, #0
 8006ddc:	f04f 0300 	mov.w	r3, #0
 8006de0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006de4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006de8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dec:	4692      	mov	sl, r2
 8006dee:	469b      	mov	fp, r3
 8006df0:	4643      	mov	r3, r8
 8006df2:	eb1a 0303 	adds.w	r3, sl, r3
 8006df6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006dfa:	464b      	mov	r3, r9
 8006dfc:	eb4b 0303 	adc.w	r3, fp, r3
 8006e00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	18db      	adds	r3, r3, r3
 8006e1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e1e:	4613      	mov	r3, r2
 8006e20:	eb42 0303 	adc.w	r3, r2, r3
 8006e24:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006e2e:	f7f9 ff2b 	bl	8000c88 <__aeabi_uldivmod>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	4611      	mov	r1, r2
 8006e38:	4b3b      	ldr	r3, [pc, #236]	@ (8006f28 <UART_SetConfig+0x2d4>)
 8006e3a:	fba3 2301 	umull	r2, r3, r3, r1
 8006e3e:	095b      	lsrs	r3, r3, #5
 8006e40:	2264      	movs	r2, #100	@ 0x64
 8006e42:	fb02 f303 	mul.w	r3, r2, r3
 8006e46:	1acb      	subs	r3, r1, r3
 8006e48:	00db      	lsls	r3, r3, #3
 8006e4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006e4e:	4b36      	ldr	r3, [pc, #216]	@ (8006f28 <UART_SetConfig+0x2d4>)
 8006e50:	fba3 2302 	umull	r2, r3, r3, r2
 8006e54:	095b      	lsrs	r3, r3, #5
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e5c:	441c      	add	r4, r3
 8006e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e70:	4642      	mov	r2, r8
 8006e72:	464b      	mov	r3, r9
 8006e74:	1891      	adds	r1, r2, r2
 8006e76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e78:	415b      	adcs	r3, r3
 8006e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e80:	4641      	mov	r1, r8
 8006e82:	1851      	adds	r1, r2, r1
 8006e84:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e86:	4649      	mov	r1, r9
 8006e88:	414b      	adcs	r3, r1
 8006e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e8c:	f04f 0200 	mov.w	r2, #0
 8006e90:	f04f 0300 	mov.w	r3, #0
 8006e94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e98:	4659      	mov	r1, fp
 8006e9a:	00cb      	lsls	r3, r1, #3
 8006e9c:	4651      	mov	r1, sl
 8006e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ea2:	4651      	mov	r1, sl
 8006ea4:	00ca      	lsls	r2, r1, #3
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	4603      	mov	r3, r0
 8006eac:	4642      	mov	r2, r8
 8006eae:	189b      	adds	r3, r3, r2
 8006eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006eb4:	464b      	mov	r3, r9
 8006eb6:	460a      	mov	r2, r1
 8006eb8:	eb42 0303 	adc.w	r3, r2, r3
 8006ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ecc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006ed0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	18db      	adds	r3, r3, r3
 8006ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eda:	4613      	mov	r3, r2
 8006edc:	eb42 0303 	adc.w	r3, r2, r3
 8006ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ee2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ee6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006eea:	f7f9 fecd 	bl	8000c88 <__aeabi_uldivmod>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8006f28 <UART_SetConfig+0x2d4>)
 8006ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ef8:	095b      	lsrs	r3, r3, #5
 8006efa:	2164      	movs	r1, #100	@ 0x64
 8006efc:	fb01 f303 	mul.w	r3, r1, r3
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	3332      	adds	r3, #50	@ 0x32
 8006f06:	4a08      	ldr	r2, [pc, #32]	@ (8006f28 <UART_SetConfig+0x2d4>)
 8006f08:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0c:	095b      	lsrs	r3, r3, #5
 8006f0e:	f003 0207 	and.w	r2, r3, #7
 8006f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4422      	add	r2, r4
 8006f1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f1c:	e106      	b.n	800712c <UART_SetConfig+0x4d8>
 8006f1e:	bf00      	nop
 8006f20:	40011000 	.word	0x40011000
 8006f24:	40011400 	.word	0x40011400
 8006f28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f30:	2200      	movs	r2, #0
 8006f32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006f3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006f3e:	4642      	mov	r2, r8
 8006f40:	464b      	mov	r3, r9
 8006f42:	1891      	adds	r1, r2, r2
 8006f44:	6239      	str	r1, [r7, #32]
 8006f46:	415b      	adcs	r3, r3
 8006f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f4e:	4641      	mov	r1, r8
 8006f50:	1854      	adds	r4, r2, r1
 8006f52:	4649      	mov	r1, r9
 8006f54:	eb43 0501 	adc.w	r5, r3, r1
 8006f58:	f04f 0200 	mov.w	r2, #0
 8006f5c:	f04f 0300 	mov.w	r3, #0
 8006f60:	00eb      	lsls	r3, r5, #3
 8006f62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f66:	00e2      	lsls	r2, r4, #3
 8006f68:	4614      	mov	r4, r2
 8006f6a:	461d      	mov	r5, r3
 8006f6c:	4643      	mov	r3, r8
 8006f6e:	18e3      	adds	r3, r4, r3
 8006f70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f74:	464b      	mov	r3, r9
 8006f76:	eb45 0303 	adc.w	r3, r5, r3
 8006f7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f8e:	f04f 0200 	mov.w	r2, #0
 8006f92:	f04f 0300 	mov.w	r3, #0
 8006f96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	008b      	lsls	r3, r1, #2
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	008a      	lsls	r2, r1, #2
 8006fa8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006fac:	f7f9 fe6c 	bl	8000c88 <__aeabi_uldivmod>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4b60      	ldr	r3, [pc, #384]	@ (8007138 <UART_SetConfig+0x4e4>)
 8006fb6:	fba3 2302 	umull	r2, r3, r3, r2
 8006fba:	095b      	lsrs	r3, r3, #5
 8006fbc:	011c      	lsls	r4, r3, #4
 8006fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006fc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006fcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	1891      	adds	r1, r2, r2
 8006fd6:	61b9      	str	r1, [r7, #24]
 8006fd8:	415b      	adcs	r3, r3
 8006fda:	61fb      	str	r3, [r7, #28]
 8006fdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fe0:	4641      	mov	r1, r8
 8006fe2:	1851      	adds	r1, r2, r1
 8006fe4:	6139      	str	r1, [r7, #16]
 8006fe6:	4649      	mov	r1, r9
 8006fe8:	414b      	adcs	r3, r1
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	f04f 0200 	mov.w	r2, #0
 8006ff0:	f04f 0300 	mov.w	r3, #0
 8006ff4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ff8:	4659      	mov	r1, fp
 8006ffa:	00cb      	lsls	r3, r1, #3
 8006ffc:	4651      	mov	r1, sl
 8006ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007002:	4651      	mov	r1, sl
 8007004:	00ca      	lsls	r2, r1, #3
 8007006:	4610      	mov	r0, r2
 8007008:	4619      	mov	r1, r3
 800700a:	4603      	mov	r3, r0
 800700c:	4642      	mov	r2, r8
 800700e:	189b      	adds	r3, r3, r2
 8007010:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007014:	464b      	mov	r3, r9
 8007016:	460a      	mov	r2, r1
 8007018:	eb42 0303 	adc.w	r3, r2, r3
 800701c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	67bb      	str	r3, [r7, #120]	@ 0x78
 800702a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800702c:	f04f 0200 	mov.w	r2, #0
 8007030:	f04f 0300 	mov.w	r3, #0
 8007034:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007038:	4649      	mov	r1, r9
 800703a:	008b      	lsls	r3, r1, #2
 800703c:	4641      	mov	r1, r8
 800703e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007042:	4641      	mov	r1, r8
 8007044:	008a      	lsls	r2, r1, #2
 8007046:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800704a:	f7f9 fe1d 	bl	8000c88 <__aeabi_uldivmod>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	4611      	mov	r1, r2
 8007054:	4b38      	ldr	r3, [pc, #224]	@ (8007138 <UART_SetConfig+0x4e4>)
 8007056:	fba3 2301 	umull	r2, r3, r3, r1
 800705a:	095b      	lsrs	r3, r3, #5
 800705c:	2264      	movs	r2, #100	@ 0x64
 800705e:	fb02 f303 	mul.w	r3, r2, r3
 8007062:	1acb      	subs	r3, r1, r3
 8007064:	011b      	lsls	r3, r3, #4
 8007066:	3332      	adds	r3, #50	@ 0x32
 8007068:	4a33      	ldr	r2, [pc, #204]	@ (8007138 <UART_SetConfig+0x4e4>)
 800706a:	fba2 2303 	umull	r2, r3, r2, r3
 800706e:	095b      	lsrs	r3, r3, #5
 8007070:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007074:	441c      	add	r4, r3
 8007076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800707a:	2200      	movs	r2, #0
 800707c:	673b      	str	r3, [r7, #112]	@ 0x70
 800707e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007080:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007084:	4642      	mov	r2, r8
 8007086:	464b      	mov	r3, r9
 8007088:	1891      	adds	r1, r2, r2
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	415b      	adcs	r3, r3
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007094:	4641      	mov	r1, r8
 8007096:	1851      	adds	r1, r2, r1
 8007098:	6039      	str	r1, [r7, #0]
 800709a:	4649      	mov	r1, r9
 800709c:	414b      	adcs	r3, r1
 800709e:	607b      	str	r3, [r7, #4]
 80070a0:	f04f 0200 	mov.w	r2, #0
 80070a4:	f04f 0300 	mov.w	r3, #0
 80070a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070ac:	4659      	mov	r1, fp
 80070ae:	00cb      	lsls	r3, r1, #3
 80070b0:	4651      	mov	r1, sl
 80070b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070b6:	4651      	mov	r1, sl
 80070b8:	00ca      	lsls	r2, r1, #3
 80070ba:	4610      	mov	r0, r2
 80070bc:	4619      	mov	r1, r3
 80070be:	4603      	mov	r3, r0
 80070c0:	4642      	mov	r2, r8
 80070c2:	189b      	adds	r3, r3, r2
 80070c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070c6:	464b      	mov	r3, r9
 80070c8:	460a      	mov	r2, r1
 80070ca:	eb42 0303 	adc.w	r3, r2, r3
 80070ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80070da:	667a      	str	r2, [r7, #100]	@ 0x64
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80070e8:	4649      	mov	r1, r9
 80070ea:	008b      	lsls	r3, r1, #2
 80070ec:	4641      	mov	r1, r8
 80070ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070f2:	4641      	mov	r1, r8
 80070f4:	008a      	lsls	r2, r1, #2
 80070f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80070fa:	f7f9 fdc5 	bl	8000c88 <__aeabi_uldivmod>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4b0d      	ldr	r3, [pc, #52]	@ (8007138 <UART_SetConfig+0x4e4>)
 8007104:	fba3 1302 	umull	r1, r3, r3, r2
 8007108:	095b      	lsrs	r3, r3, #5
 800710a:	2164      	movs	r1, #100	@ 0x64
 800710c:	fb01 f303 	mul.w	r3, r1, r3
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	3332      	adds	r3, #50	@ 0x32
 8007116:	4a08      	ldr	r2, [pc, #32]	@ (8007138 <UART_SetConfig+0x4e4>)
 8007118:	fba2 2303 	umull	r2, r3, r2, r3
 800711c:	095b      	lsrs	r3, r3, #5
 800711e:	f003 020f 	and.w	r2, r3, #15
 8007122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4422      	add	r2, r4
 800712a:	609a      	str	r2, [r3, #8]
}
 800712c:	bf00      	nop
 800712e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007132:	46bd      	mov	sp, r7
 8007134:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007138:	51eb851f 	.word	0x51eb851f

0800713c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800713c:	b084      	sub	sp, #16
 800713e:	b480      	push	{r7}
 8007140:	b085      	sub	sp, #20
 8007142:	af00      	add	r7, sp, #0
 8007144:	6078      	str	r0, [r7, #4]
 8007146:	f107 001c 	add.w	r0, r7, #28
 800714a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800714e:	2300      	movs	r3, #0
 8007150:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8007152:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8007154:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8007156:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8007158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800715a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800715c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800715e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8007160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8007162:	431a      	orrs	r2, r3
             Init.ClockDiv
 8007164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8007166:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	4313      	orrs	r3, r2
 800716c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8007176:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800717a:	68fa      	ldr	r2, [r7, #12]
 800717c:	431a      	orrs	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007182:	2300      	movs	r3, #0
}
 8007184:	4618      	mov	r0, r3
 8007186:	3714      	adds	r7, #20
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	b004      	add	sp, #16
 8007190:	4770      	bx	lr

08007192 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2203      	movs	r2, #3
 800719e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	370c      	adds	r7, #12
 80071a6:	46bd      	mov	sp, r7
 80071a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ac:	4770      	bx	lr

080071ae <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f003 0303 	and.w	r3, r3, #3
}
 80071be:	4618      	mov	r0, r3
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b085      	sub	sp, #20
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80071d4:	2300      	movs	r3, #0
 80071d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80071e8:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80071ee:	431a      	orrs	r2, r3
                       Command->CPSM);
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80071f4:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	4313      	orrs	r3, r2
 80071fa:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	68db      	ldr	r3, [r3, #12]
 8007200:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8007204:	f023 030f 	bic.w	r3, r3, #15
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	431a      	orrs	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8007210:	2300      	movs	r3, #0
}
 8007212:	4618      	mov	r0, r3
 8007214:	3714      	adds	r7, #20
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	b2db      	uxtb	r3, r3
}
 800722c:	4618      	mov	r0, r3
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8007238:	b480      	push	{r7}
 800723a:	b085      	sub	sp, #20
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	3314      	adds	r3, #20
 8007246:	461a      	mov	r2, r3
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	4413      	add	r3, r2
 800724c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
}  
 8007252:	4618      	mov	r0, r3
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr

0800725e <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800725e:	b480      	push	{r7}
 8007260:	b085      	sub	sp, #20
 8007262:	af00      	add	r7, sp, #0
 8007264:	6078      	str	r0, [r7, #4]
 8007266:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8007268:	2300      	movs	r3, #0
 800726a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	685a      	ldr	r2, [r3, #4]
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007284:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800728a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8007290:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8007292:	68fa      	ldr	r2, [r7, #12]
 8007294:	4313      	orrs	r3, r2
 8007296:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800729c:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	431a      	orrs	r2, r3
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0

}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3714      	adds	r7, #20
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr

080072b6 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80072b6:	b580      	push	{r7, lr}
 80072b8:	b088      	sub	sp, #32
 80072ba:	af00      	add	r7, sp, #0
 80072bc:	6078      	str	r0, [r7, #4]
 80072be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80072c4:	2310      	movs	r3, #16
 80072c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80072c8:	2340      	movs	r3, #64	@ 0x40
 80072ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80072cc:	2300      	movs	r3, #0
 80072ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80072d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80072d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80072d6:	f107 0308 	add.w	r3, r7, #8
 80072da:	4619      	mov	r1, r3
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f7ff ff74 	bl	80071ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80072e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80072e6:	2110      	movs	r1, #16
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f9d7 	bl	800769c <SDMMC_GetCmdResp1>
 80072ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80072f0:	69fb      	ldr	r3, [r7, #28]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3720      	adds	r7, #32
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}

080072fa <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80072fa:	b580      	push	{r7, lr}
 80072fc:	b088      	sub	sp, #32
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
 8007302:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8007308:	2311      	movs	r3, #17
 800730a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800730c:	2340      	movs	r3, #64	@ 0x40
 800730e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007310:	2300      	movs	r3, #0
 8007312:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007314:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007318:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800731a:	f107 0308 	add.w	r3, r7, #8
 800731e:	4619      	mov	r1, r3
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7ff ff52 	bl	80071ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8007326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800732a:	2111      	movs	r1, #17
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f9b5 	bl	800769c <SDMMC_GetCmdResp1>
 8007332:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007334:	69fb      	ldr	r3, [r7, #28]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3720      	adds	r7, #32
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}

0800733e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800733e:	b580      	push	{r7, lr}
 8007340:	b088      	sub	sp, #32
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
 8007346:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800734c:	2312      	movs	r3, #18
 800734e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007350:	2340      	movs	r3, #64	@ 0x40
 8007352:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007354:	2300      	movs	r3, #0
 8007356:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007358:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800735c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800735e:	f107 0308 	add.w	r3, r7, #8
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f7ff ff30 	bl	80071ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800736a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800736e:	2112      	movs	r1, #18
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f000 f993 	bl	800769c <SDMMC_GetCmdResp1>
 8007376:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007378:	69fb      	ldr	r3, [r7, #28]
}
 800737a:	4618      	mov	r0, r3
 800737c:	3720      	adds	r7, #32
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b088      	sub	sp, #32
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
 800738a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8007390:	2318      	movs	r3, #24
 8007392:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007394:	2340      	movs	r3, #64	@ 0x40
 8007396:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007398:	2300      	movs	r3, #0
 800739a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800739c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073a2:	f107 0308 	add.w	r3, r7, #8
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff ff0e 	bl	80071ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80073ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073b2:	2118      	movs	r1, #24
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 f971 	bl	800769c <SDMMC_GetCmdResp1>
 80073ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80073bc:	69fb      	ldr	r3, [r7, #28]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3720      	adds	r7, #32
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}

080073c6 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80073c6:	b580      	push	{r7, lr}
 80073c8:	b088      	sub	sp, #32
 80073ca:	af00      	add	r7, sp, #0
 80073cc:	6078      	str	r0, [r7, #4]
 80073ce:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80073d4:	2319      	movs	r3, #25
 80073d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80073d8:	2340      	movs	r3, #64	@ 0x40
 80073da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80073dc:	2300      	movs	r3, #0
 80073de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80073e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80073e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80073e6:	f107 0308 	add.w	r3, r7, #8
 80073ea:	4619      	mov	r1, r3
 80073ec:	6878      	ldr	r0, [r7, #4]
 80073ee:	f7ff feec 	bl	80071ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80073f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80073f6:	2119      	movs	r1, #25
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f000 f94f 	bl	800769c <SDMMC_GetCmdResp1>
 80073fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007400:	69fb      	ldr	r3, [r7, #28]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3720      	adds	r7, #32
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b088      	sub	sp, #32
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8007418:	230c      	movs	r3, #12
 800741a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800741c:	2340      	movs	r3, #64	@ 0x40
 800741e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007420:	2300      	movs	r3, #0
 8007422:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007424:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007428:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800742a:	f107 0308 	add.w	r3, r7, #8
 800742e:	4619      	mov	r1, r3
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f7ff feca 	bl	80071ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8007436:	4a05      	ldr	r2, [pc, #20]	@ (800744c <SDMMC_CmdStopTransfer+0x40>)
 8007438:	210c      	movs	r1, #12
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 f92e 	bl	800769c <SDMMC_GetCmdResp1>
 8007440:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007442:	69fb      	ldr	r3, [r7, #28]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3720      	adds	r7, #32
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	05f5e100 	.word	0x05f5e100

08007450 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b08a      	sub	sp, #40	@ 0x28
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8007460:	2307      	movs	r3, #7
 8007462:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007464:	2340      	movs	r3, #64	@ 0x40
 8007466:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007468:	2300      	movs	r3, #0
 800746a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800746c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007470:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007472:	f107 0310 	add.w	r3, r7, #16
 8007476:	4619      	mov	r1, r3
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f7ff fea6 	bl	80071ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800747e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007482:	2107      	movs	r1, #7
 8007484:	68f8      	ldr	r0, [r7, #12]
 8007486:	f000 f909 	bl	800769c <SDMMC_GetCmdResp1>
 800748a:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 800748c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800748e:	4618      	mov	r0, r3
 8007490:	3728      	adds	r7, #40	@ 0x28
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}

08007496 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8007496:	b580      	push	{r7, lr}
 8007498:	b088      	sub	sp, #32
 800749a:	af00      	add	r7, sp, #0
 800749c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800749e:	2300      	movs	r3, #0
 80074a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80074a6:	2300      	movs	r3, #0
 80074a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074aa:	2300      	movs	r3, #0
 80074ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074b4:	f107 0308 	add.w	r3, r7, #8
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f7ff fe85 	bl	80071ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 fb23 	bl	8007b0c <SDMMC_GetCmdError>
 80074c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80074c8:	69fb      	ldr	r3, [r7, #28]
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3720      	adds	r7, #32
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}

080074d2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80074d2:	b580      	push	{r7, lr}
 80074d4:	b088      	sub	sp, #32
 80074d6:	af00      	add	r7, sp, #0
 80074d8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80074da:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80074de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80074e0:	2308      	movs	r3, #8
 80074e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80074e4:	2340      	movs	r3, #64	@ 0x40
 80074e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80074e8:	2300      	movs	r3, #0
 80074ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80074ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80074f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80074f2:	f107 0308 	add.w	r3, r7, #8
 80074f6:	4619      	mov	r1, r3
 80074f8:	6878      	ldr	r0, [r7, #4]
 80074fa:	f7ff fe66 	bl	80071ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fab6 	bl	8007a70 <SDMMC_GetCmdResp7>
 8007504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007506:	69fb      	ldr	r3, [r7, #28]
}
 8007508:	4618      	mov	r0, r3
 800750a:	3720      	adds	r7, #32
 800750c:	46bd      	mov	sp, r7
 800750e:	bd80      	pop	{r7, pc}

08007510 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b088      	sub	sp, #32
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
 8007518:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800751e:	2337      	movs	r3, #55	@ 0x37
 8007520:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007522:	2340      	movs	r3, #64	@ 0x40
 8007524:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007526:	2300      	movs	r3, #0
 8007528:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800752a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800752e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007530:	f107 0308 	add.w	r3, r7, #8
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7ff fe47 	bl	80071ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800753c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007540:	2137      	movs	r1, #55	@ 0x37
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f8aa 	bl	800769c <SDMMC_GetCmdResp1>
 8007548:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800754a:	69fb      	ldr	r3, [r7, #28]
}
 800754c:	4618      	mov	r0, r3
 800754e:	3720      	adds	r7, #32
 8007550:	46bd      	mov	sp, r7
 8007552:	bd80      	pop	{r7, pc}

08007554 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b088      	sub	sp, #32
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
 800755c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007564:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007568:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800756a:	2329      	movs	r3, #41	@ 0x29
 800756c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800756e:	2340      	movs	r3, #64	@ 0x40
 8007570:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007572:	2300      	movs	r3, #0
 8007574:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007576:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800757a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800757c:	f107 0308 	add.w	r3, r7, #8
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f7ff fe21 	bl	80071ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 f9bd 	bl	8007908 <SDMMC_GetCmdResp3>
 800758e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007590:	69fb      	ldr	r3, [r7, #28]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3720      	adds	r7, #32
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b088      	sub	sp, #32
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80075a6:	2302      	movs	r3, #2
 80075a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80075aa:	23c0      	movs	r3, #192	@ 0xc0
 80075ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075ae:	2300      	movs	r3, #0
 80075b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075b8:	f107 0308 	add.w	r3, r7, #8
 80075bc:	4619      	mov	r1, r3
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f7ff fe03 	bl	80071ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f957 	bl	8007878 <SDMMC_GetCmdResp2>
 80075ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80075cc:	69fb      	ldr	r3, [r7, #28]
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3720      	adds	r7, #32
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}

080075d6 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80075d6:	b580      	push	{r7, lr}
 80075d8:	b088      	sub	sp, #32
 80075da:	af00      	add	r7, sp, #0
 80075dc:	6078      	str	r0, [r7, #4]
 80075de:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80075e4:	2309      	movs	r3, #9
 80075e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80075e8:	23c0      	movs	r3, #192	@ 0xc0
 80075ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80075ec:	2300      	movs	r3, #0
 80075ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80075f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80075f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80075f6:	f107 0308 	add.w	r3, r7, #8
 80075fa:	4619      	mov	r1, r3
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7ff fde4 	bl	80071ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8007602:	6878      	ldr	r0, [r7, #4]
 8007604:	f000 f938 	bl	8007878 <SDMMC_GetCmdResp2>
 8007608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800760a:	69fb      	ldr	r3, [r7, #28]
}
 800760c:	4618      	mov	r0, r3
 800760e:	3720      	adds	r7, #32
 8007610:	46bd      	mov	sp, r7
 8007612:	bd80      	pop	{r7, pc}

08007614 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b088      	sub	sp, #32
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800761e:	2300      	movs	r3, #0
 8007620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8007622:	2303      	movs	r3, #3
 8007624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007626:	2340      	movs	r3, #64	@ 0x40
 8007628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800762a:	2300      	movs	r3, #0
 800762c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800762e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007632:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007634:	f107 0308 	add.w	r3, r7, #8
 8007638:	4619      	mov	r1, r3
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f7ff fdc5 	bl	80071ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	2103      	movs	r1, #3
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f99d 	bl	8007984 <SDMMC_GetCmdResp6>
 800764a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800764c:	69fb      	ldr	r3, [r7, #28]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3720      	adds	r7, #32
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}

08007656 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007656:	b580      	push	{r7, lr}
 8007658:	b088      	sub	sp, #32
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
 800765e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8007664:	230d      	movs	r3, #13
 8007666:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007668:	2340      	movs	r3, #64	@ 0x40
 800766a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800766c:	2300      	movs	r3, #0
 800766e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8007670:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007674:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007676:	f107 0308 	add.w	r3, r7, #8
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7ff fda4 	bl	80071ca <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8007682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007686:	210d      	movs	r1, #13
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f807 	bl	800769c <SDMMC_GetCmdResp1>
 800768e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007690:	69fb      	ldr	r3, [r7, #28]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3720      	adds	r7, #32
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}
	...

0800769c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b088      	sub	sp, #32
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	460b      	mov	r3, r1
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80076aa:	4b70      	ldr	r3, [pc, #448]	@ (800786c <SDMMC_GetCmdResp1+0x1d0>)
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	4a70      	ldr	r2, [pc, #448]	@ (8007870 <SDMMC_GetCmdResp1+0x1d4>)
 80076b0:	fba2 2303 	umull	r2, r3, r2, r3
 80076b4:	0a5a      	lsrs	r2, r3, #9
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	fb02 f303 	mul.w	r3, r2, r3
 80076bc:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	1e5a      	subs	r2, r3, #1
 80076c2:	61fa      	str	r2, [r7, #28]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d102      	bne.n	80076ce <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80076c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80076cc:	e0c9      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076d2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076d4:	69bb      	ldr	r3, [r7, #24]
 80076d6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d0ef      	beq.n	80076be <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d1ea      	bne.n	80076be <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d004      	beq.n	80076fe <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2204      	movs	r2, #4
 80076f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80076fa:	2304      	movs	r3, #4
 80076fc:	e0b1      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b00      	cmp	r3, #0
 8007708:	d004      	beq.n	8007714 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2201      	movs	r2, #1
 800770e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007710:	2301      	movs	r3, #1
 8007712:	e0a6      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	22c5      	movs	r2, #197	@ 0xc5
 8007718:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f7ff fd7f 	bl	800721e <SDIO_GetCommandResponse>
 8007720:	4603      	mov	r3, r0
 8007722:	461a      	mov	r2, r3
 8007724:	7afb      	ldrb	r3, [r7, #11]
 8007726:	4293      	cmp	r3, r2
 8007728:	d001      	beq.n	800772e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800772a:	2301      	movs	r3, #1
 800772c:	e099      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800772e:	2100      	movs	r1, #0
 8007730:	68f8      	ldr	r0, [r7, #12]
 8007732:	f7ff fd81 	bl	8007238 <SDIO_GetResponse>
 8007736:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8007738:	697a      	ldr	r2, [r7, #20]
 800773a:	4b4e      	ldr	r3, [pc, #312]	@ (8007874 <SDMMC_GetCmdResp1+0x1d8>)
 800773c:	4013      	ands	r3, r2
 800773e:	2b00      	cmp	r3, #0
 8007740:	d101      	bne.n	8007746 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8007742:	2300      	movs	r3, #0
 8007744:	e08d      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2b00      	cmp	r3, #0
 800774a:	da02      	bge.n	8007752 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800774c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007750:	e087      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800775c:	2340      	movs	r3, #64	@ 0x40
 800775e:	e080      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800776a:	2380      	movs	r3, #128	@ 0x80
 800776c:	e079      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007774:	2b00      	cmp	r3, #0
 8007776:	d002      	beq.n	800777e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8007778:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800777c:	e071      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007784:	2b00      	cmp	r3, #0
 8007786:	d002      	beq.n	800778e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8007788:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800778c:	e069      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8007798:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800779c:	e061      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d002      	beq.n	80077ae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80077a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80077ac:	e059      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d002      	beq.n	80077be <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80077b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80077bc:	e051      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d002      	beq.n	80077ce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80077c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80077cc:	e049      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d002      	beq.n	80077de <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80077d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80077dc:	e041      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80077e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80077ec:	e039      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d002      	beq.n	80077fe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80077f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80077fc:	e031      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d002      	beq.n	800780e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8007808:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800780c:	e029      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007814:	2b00      	cmp	r3, #0
 8007816:	d002      	beq.n	800781e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8007818:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800781c:	e021      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007824:	2b00      	cmp	r3, #0
 8007826:	d002      	beq.n	800782e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8007828:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800782c:	e019      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007834:	2b00      	cmp	r3, #0
 8007836:	d002      	beq.n	800783e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8007838:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800783c:	e011      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d002      	beq.n	800784e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8007848:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800784c:	e009      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	f003 0308 	and.w	r3, r3, #8
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8007858:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 800785c:	e001      	b.n	8007862 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800785e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007862:	4618      	mov	r0, r3
 8007864:	3720      	adds	r7, #32
 8007866:	46bd      	mov	sp, r7
 8007868:	bd80      	pop	{r7, pc}
 800786a:	bf00      	nop
 800786c:	2000001c 	.word	0x2000001c
 8007870:	10624dd3 	.word	0x10624dd3
 8007874:	fdffe008 	.word	0xfdffe008

08007878 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007880:	4b1f      	ldr	r3, [pc, #124]	@ (8007900 <SDMMC_GetCmdResp2+0x88>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a1f      	ldr	r2, [pc, #124]	@ (8007904 <SDMMC_GetCmdResp2+0x8c>)
 8007886:	fba2 2303 	umull	r2, r3, r2, r3
 800788a:	0a5b      	lsrs	r3, r3, #9
 800788c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007890:	fb02 f303 	mul.w	r3, r2, r3
 8007894:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	1e5a      	subs	r2, r3, #1
 800789a:	60fa      	str	r2, [r7, #12]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d102      	bne.n	80078a6 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80078a0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80078a4:	e026      	b.n	80078f4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078aa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d0ef      	beq.n	8007896 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1ea      	bne.n	8007896 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d004      	beq.n	80078d6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2204      	movs	r2, #4
 80078d0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80078d2:	2304      	movs	r3, #4
 80078d4:	e00e      	b.n	80078f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80078da:	f003 0301 	and.w	r3, r3, #1
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d004      	beq.n	80078ec <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80078e8:	2301      	movs	r3, #1
 80078ea:	e003      	b.n	80078f4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	22c5      	movs	r2, #197	@ 0xc5
 80078f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80078f2:	2300      	movs	r3, #0
}
 80078f4:	4618      	mov	r0, r3
 80078f6:	3714      	adds	r7, #20
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr
 8007900:	2000001c 	.word	0x2000001c
 8007904:	10624dd3 	.word	0x10624dd3

08007908 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007910:	4b1a      	ldr	r3, [pc, #104]	@ (800797c <SDMMC_GetCmdResp3+0x74>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a1a      	ldr	r2, [pc, #104]	@ (8007980 <SDMMC_GetCmdResp3+0x78>)
 8007916:	fba2 2303 	umull	r2, r3, r2, r3
 800791a:	0a5b      	lsrs	r3, r3, #9
 800791c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007920:	fb02 f303 	mul.w	r3, r2, r3
 8007924:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	1e5a      	subs	r2, r3, #1
 800792a:	60fa      	str	r2, [r7, #12]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d102      	bne.n	8007936 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007930:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007934:	e01b      	b.n	800796e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800793a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800793c:	68bb      	ldr	r3, [r7, #8]
 800793e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007942:	2b00      	cmp	r3, #0
 8007944:	d0ef      	beq.n	8007926 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800794c:	2b00      	cmp	r3, #0
 800794e:	d1ea      	bne.n	8007926 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d004      	beq.n	8007966 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2204      	movs	r2, #4
 8007960:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007962:	2304      	movs	r3, #4
 8007964:	e003      	b.n	800796e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	22c5      	movs	r2, #197	@ 0xc5
 800796a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800796c:	2300      	movs	r3, #0
}
 800796e:	4618      	mov	r0, r3
 8007970:	3714      	adds	r7, #20
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
 800797a:	bf00      	nop
 800797c:	2000001c 	.word	0x2000001c
 8007980:	10624dd3 	.word	0x10624dd3

08007984 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b088      	sub	sp, #32
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	460b      	mov	r3, r1
 800798e:	607a      	str	r2, [r7, #4]
 8007990:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007992:	4b35      	ldr	r3, [pc, #212]	@ (8007a68 <SDMMC_GetCmdResp6+0xe4>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a35      	ldr	r2, [pc, #212]	@ (8007a6c <SDMMC_GetCmdResp6+0xe8>)
 8007998:	fba2 2303 	umull	r2, r3, r2, r3
 800799c:	0a5b      	lsrs	r3, r3, #9
 800799e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079a2:	fb02 f303 	mul.w	r3, r2, r3
 80079a6:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80079a8:	69fb      	ldr	r3, [r7, #28]
 80079aa:	1e5a      	subs	r2, r3, #1
 80079ac:	61fa      	str	r2, [r7, #28]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d102      	bne.n	80079b8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80079b2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80079b6:	e052      	b.n	8007a5e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079bc:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d0ef      	beq.n	80079a8 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d1ea      	bne.n	80079a8 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079d6:	f003 0304 	and.w	r3, r3, #4
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d004      	beq.n	80079e8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2204      	movs	r2, #4
 80079e2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80079e4:	2304      	movs	r3, #4
 80079e6:	e03a      	b.n	8007a5e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d004      	beq.n	80079fe <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2201      	movs	r2, #1
 80079f8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80079fa:	2301      	movs	r3, #1
 80079fc:	e02f      	b.n	8007a5e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f7ff fc0d 	bl	800721e <SDIO_GetCommandResponse>
 8007a04:	4603      	mov	r3, r0
 8007a06:	461a      	mov	r2, r3
 8007a08:	7afb      	ldrb	r3, [r7, #11]
 8007a0a:	4293      	cmp	r3, r2
 8007a0c:	d001      	beq.n	8007a12 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007a0e:	2301      	movs	r3, #1
 8007a10:	e025      	b.n	8007a5e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	22c5      	movs	r2, #197	@ 0xc5
 8007a16:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007a18:	2100      	movs	r1, #0
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f7ff fc0c 	bl	8007238 <SDIO_GetResponse>
 8007a20:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007a22:	697b      	ldr	r3, [r7, #20]
 8007a24:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d106      	bne.n	8007a3a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	0c1b      	lsrs	r3, r3, #16
 8007a30:	b29a      	uxth	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8007a36:	2300      	movs	r3, #0
 8007a38:	e011      	b.n	8007a5e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007a44:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007a48:	e009      	b.n	8007a5e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8007a4a:	697b      	ldr	r3, [r7, #20]
 8007a4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d002      	beq.n	8007a5a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007a54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007a58:	e001      	b.n	8007a5e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007a5a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3720      	adds	r7, #32
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	2000001c 	.word	0x2000001c
 8007a6c:	10624dd3 	.word	0x10624dd3

08007a70 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b085      	sub	sp, #20
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007a78:	4b22      	ldr	r3, [pc, #136]	@ (8007b04 <SDMMC_GetCmdResp7+0x94>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a22      	ldr	r2, [pc, #136]	@ (8007b08 <SDMMC_GetCmdResp7+0x98>)
 8007a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8007a82:	0a5b      	lsrs	r3, r3, #9
 8007a84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a88:	fb02 f303 	mul.w	r3, r2, r3
 8007a8c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	1e5a      	subs	r2, r3, #1
 8007a92:	60fa      	str	r2, [r7, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d102      	bne.n	8007a9e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007a98:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007a9c:	e02c      	b.n	8007af8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007aa2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d0ef      	beq.n	8007a8e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007aae:	68bb      	ldr	r3, [r7, #8]
 8007ab0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d1ea      	bne.n	8007a8e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007abc:	f003 0304 	and.w	r3, r3, #4
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d004      	beq.n	8007ace <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2204      	movs	r2, #4
 8007ac8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007aca:	2304      	movs	r3, #4
 8007acc:	e014      	b.n	8007af8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d004      	beq.n	8007ae4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e009      	b.n	8007af8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d002      	beq.n	8007af6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2240      	movs	r2, #64	@ 0x40
 8007af4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007af6:	2300      	movs	r3, #0
  
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3714      	adds	r7, #20
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	2000001c 	.word	0x2000001c
 8007b08:	10624dd3 	.word	0x10624dd3

08007b0c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b085      	sub	sp, #20
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007b14:	4b11      	ldr	r3, [pc, #68]	@ (8007b5c <SDMMC_GetCmdError+0x50>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a11      	ldr	r2, [pc, #68]	@ (8007b60 <SDMMC_GetCmdError+0x54>)
 8007b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b1e:	0a5b      	lsrs	r3, r3, #9
 8007b20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007b24:	fb02 f303 	mul.w	r3, r2, r3
 8007b28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	1e5a      	subs	r2, r3, #1
 8007b2e:	60fa      	str	r2, [r7, #12]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d102      	bne.n	8007b3a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007b34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8007b38:	e009      	b.n	8007b4e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d0f1      	beq.n	8007b2a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	22c5      	movs	r2, #197	@ 0xc5
 8007b4a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8007b4c:	2300      	movs	r3, #0
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	2000001c 	.word	0x2000001c
 8007b60:	10624dd3 	.word	0x10624dd3

08007b64 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007b68:	4904      	ldr	r1, [pc, #16]	@ (8007b7c <MX_FATFS_Init+0x18>)
 8007b6a:	4805      	ldr	r0, [pc, #20]	@ (8007b80 <MX_FATFS_Init+0x1c>)
 8007b6c:	f000 ff8c 	bl	8008a88 <FATFS_LinkDriver>
 8007b70:	4603      	mov	r3, r0
 8007b72:	461a      	mov	r2, r3
 8007b74:	4b03      	ldr	r3, [pc, #12]	@ (8007b84 <MX_FATFS_Init+0x20>)
 8007b76:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007b78:	bf00      	nop
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	20003e04 	.word	0x20003e04
 8007b80:	08025bd0 	.word	0x08025bd0
 8007b84:	20003e00 	.word	0x20003e00

08007b88 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b082      	sub	sp, #8
 8007b8c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8007b92:	f000 f86d 	bl	8007c70 <BSP_SD_IsDetected>
 8007b96:	4603      	mov	r3, r0
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d001      	beq.n	8007ba0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	e005      	b.n	8007bac <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007ba0:	4804      	ldr	r0, [pc, #16]	@ (8007bb4 <BSP_SD_Init+0x2c>)
 8007ba2:	f7fc ff68 	bl	8004a76 <HAL_SD_Init>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007baa:	79fb      	ldrb	r3, [r7, #7]
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3708      	adds	r7, #8
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	20003c9c 	.word	0x20003c9c

08007bb8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b086      	sub	sp, #24
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	60f8      	str	r0, [r7, #12]
 8007bc0:	60b9      	str	r1, [r7, #8]
 8007bc2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68ba      	ldr	r2, [r7, #8]
 8007bcc:	68f9      	ldr	r1, [r7, #12]
 8007bce:	4806      	ldr	r0, [pc, #24]	@ (8007be8 <BSP_SD_ReadBlocks_DMA+0x30>)
 8007bd0:	f7fd f802 	bl	8004bd8 <HAL_SD_ReadBlocks_DMA>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007bde:	7dfb      	ldrb	r3, [r7, #23]
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3718      	adds	r7, #24
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}
 8007be8:	20003c9c 	.word	0x20003c9c

08007bec <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	60f8      	str	r0, [r7, #12]
 8007bf4:	60b9      	str	r1, [r7, #8]
 8007bf6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	68f9      	ldr	r1, [r7, #12]
 8007c02:	4806      	ldr	r0, [pc, #24]	@ (8007c1c <BSP_SD_WriteBlocks_DMA+0x30>)
 8007c04:	f7fd f8ca 	bl	8004d9c <HAL_SD_WriteBlocks_DMA>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d001      	beq.n	8007c12 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8007c0e:	2301      	movs	r3, #1
 8007c10:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	20003c9c 	.word	0x20003c9c

08007c20 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007c24:	4805      	ldr	r0, [pc, #20]	@ (8007c3c <BSP_SD_GetCardState+0x1c>)
 8007c26:	f7fd fb79 	bl	800531c <HAL_SD_GetCardState>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	2b04      	cmp	r3, #4
 8007c2e:	bf14      	ite	ne
 8007c30:	2301      	movne	r3, #1
 8007c32:	2300      	moveq	r3, #0
 8007c34:	b2db      	uxtb	r3, r3
}
 8007c36:	4618      	mov	r0, r3
 8007c38:	bd80      	pop	{r7, pc}
 8007c3a:	bf00      	nop
 8007c3c:	20003c9c 	.word	0x20003c9c

08007c40 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007c48:	6879      	ldr	r1, [r7, #4]
 8007c4a:	4803      	ldr	r0, [pc, #12]	@ (8007c58 <BSP_SD_GetCardInfo+0x18>)
 8007c4c:	f7fd fb3a 	bl	80052c4 <HAL_SD_GetCardInfo>
}
 8007c50:	bf00      	nop
 8007c52:	3708      	adds	r7, #8
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	20003c9c 	.word	0x20003c9c

08007c5c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007c64:	f000 f986 	bl	8007f74 <BSP_SD_ReadCpltCallback>
}
 8007c68:	bf00      	nop
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007c76:	2301      	movs	r3, #1
 8007c78:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
 8007c7c:	b2db      	uxtb	r3, r3
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	370c      	adds	r7, #12
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr

08007c8a <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8007c8a:	b580      	push	{r7, lr}
 8007c8c:	b084      	sub	sp, #16
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8007c92:	f000 ffb9 	bl	8008c08 <osKernelGetTickCount>
 8007c96:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8007c98:	e006      	b.n	8007ca8 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007c9a:	f7ff ffc1 	bl	8007c20 <BSP_SD_GetCardState>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d101      	bne.n	8007ca8 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	e009      	b.n	8007cbc <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8007ca8:	f000 ffae 	bl	8008c08 <osKernelGetTickCount>
 8007cac:	4602      	mov	r2, r0
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	1ad3      	subs	r3, r2, r3
 8007cb2:	687a      	ldr	r2, [r7, #4]
 8007cb4:	429a      	cmp	r2, r3
 8007cb6:	d8f0      	bhi.n	8007c9a <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8007cb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	4603      	mov	r3, r0
 8007ccc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007cce:	4b0b      	ldr	r3, [pc, #44]	@ (8007cfc <SD_CheckStatus+0x38>)
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007cd4:	f7ff ffa4 	bl	8007c20 <BSP_SD_GetCardState>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d107      	bne.n	8007cee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007cde:	4b07      	ldr	r3, [pc, #28]	@ (8007cfc <SD_CheckStatus+0x38>)
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	b2db      	uxtb	r3, r3
 8007ce4:	f023 0301 	bic.w	r3, r3, #1
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	4b04      	ldr	r3, [pc, #16]	@ (8007cfc <SD_CheckStatus+0x38>)
 8007cec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007cee:	4b03      	ldr	r3, [pc, #12]	@ (8007cfc <SD_CheckStatus+0x38>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	b2db      	uxtb	r3, r3
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	3708      	adds	r7, #8
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	bd80      	pop	{r7, pc}
 8007cfc:	20000029 	.word	0x20000029

08007d00 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	4603      	mov	r3, r0
 8007d08:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8007d7c <SD_initialize+0x7c>)
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8007d10:	f000 ff32 	bl	8008b78 <osKernelGetState>
 8007d14:	4603      	mov	r3, r0
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d129      	bne.n	8007d6e <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8007d1a:	f7ff ff35 	bl	8007b88 <BSP_SD_Init>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d107      	bne.n	8007d34 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8007d24:	79fb      	ldrb	r3, [r7, #7]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7ff ffcc 	bl	8007cc4 <SD_CheckStatus>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	461a      	mov	r2, r3
 8007d30:	4b12      	ldr	r3, [pc, #72]	@ (8007d7c <SD_initialize+0x7c>)
 8007d32:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8007d34:	4b11      	ldr	r3, [pc, #68]	@ (8007d7c <SD_initialize+0x7c>)
 8007d36:	781b      	ldrb	r3, [r3, #0]
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d017      	beq.n	8007d6e <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8007d3e:	4b10      	ldr	r3, [pc, #64]	@ (8007d80 <SD_initialize+0x80>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d107      	bne.n	8007d56 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8007d46:	2200      	movs	r2, #0
 8007d48:	2102      	movs	r1, #2
 8007d4a:	200a      	movs	r0, #10
 8007d4c:	f001 fa70 	bl	8009230 <osMessageQueueNew>
 8007d50:	4603      	mov	r3, r0
 8007d52:	4a0b      	ldr	r2, [pc, #44]	@ (8007d80 <SD_initialize+0x80>)
 8007d54:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8007d56:	4b0a      	ldr	r3, [pc, #40]	@ (8007d80 <SD_initialize+0x80>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d107      	bne.n	8007d6e <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8007d5e:	4b07      	ldr	r3, [pc, #28]	@ (8007d7c <SD_initialize+0x7c>)
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	b2db      	uxtb	r3, r3
 8007d64:	f043 0301 	orr.w	r3, r3, #1
 8007d68:	b2da      	uxtb	r2, r3
 8007d6a:	4b04      	ldr	r3, [pc, #16]	@ (8007d7c <SD_initialize+0x7c>)
 8007d6c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8007d6e:	4b03      	ldr	r3, [pc, #12]	@ (8007d7c <SD_initialize+0x7c>)
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	b2db      	uxtb	r3, r3
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}
 8007d7c:	20000029 	.word	0x20000029
 8007d80:	20003e08 	.word	0x20003e08

08007d84 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007d8e:	79fb      	ldrb	r3, [r7, #7]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7ff ff97 	bl	8007cc4 <SD_CheckStatus>
 8007d96:	4603      	mov	r3, r0
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b088      	sub	sp, #32
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	60b9      	str	r1, [r7, #8]
 8007da8:	607a      	str	r2, [r7, #4]
 8007daa:	603b      	str	r3, [r7, #0]
 8007dac:	4603      	mov	r3, r0
 8007dae:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007db4:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007db8:	f7ff ff67 	bl	8007c8a <SD_CheckStatusWithTimeout>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	da01      	bge.n	8007dc6 <SD_read+0x26>
  {
    return res;
 8007dc2:	7ffb      	ldrb	r3, [r7, #31]
 8007dc4:	e02f      	b.n	8007e26 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8007dc6:	683a      	ldr	r2, [r7, #0]
 8007dc8:	6879      	ldr	r1, [r7, #4]
 8007dca:	68b8      	ldr	r0, [r7, #8]
 8007dcc:	f7ff fef4 	bl	8007bb8 <BSP_SD_ReadBlocks_DMA>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8007dd4:	7fbb      	ldrb	r3, [r7, #30]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d124      	bne.n	8007e24 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8007dda:	4b15      	ldr	r3, [pc, #84]	@ (8007e30 <SD_read+0x90>)
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	f107 0112 	add.w	r1, r7, #18
 8007de2:	f247 5330 	movw	r3, #30000	@ 0x7530
 8007de6:	2200      	movs	r2, #0
 8007de8:	f001 faf6 	bl	80093d8 <osMessageQueueGet>
 8007dec:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d117      	bne.n	8007e24 <SD_read+0x84>
 8007df4:	8a7b      	ldrh	r3, [r7, #18]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d114      	bne.n	8007e24 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8007dfa:	f000 ff05 	bl	8008c08 <osKernelGetTickCount>
 8007dfe:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8007e00:	e007      	b.n	8007e12 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007e02:	f7ff ff0d 	bl	8007c20 <BSP_SD_GetCardState>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d102      	bne.n	8007e12 <SD_read+0x72>
              {
                res = RES_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8007e10:	e008      	b.n	8007e24 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8007e12:	f000 fef9 	bl	8008c08 <osKernelGetTickCount>
 8007e16:	4602      	mov	r2, r0
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007e20:	4293      	cmp	r3, r2
 8007e22:	d9ee      	bls.n	8007e02 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8007e24:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e26:	4618      	mov	r0, r3
 8007e28:	3720      	adds	r7, #32
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	bd80      	pop	{r7, pc}
 8007e2e:	bf00      	nop
 8007e30:	20003e08 	.word	0x20003e08

08007e34 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b088      	sub	sp, #32
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	60b9      	str	r1, [r7, #8]
 8007e3c:	607a      	str	r2, [r7, #4]
 8007e3e:	603b      	str	r3, [r7, #0]
 8007e40:	4603      	mov	r3, r0
 8007e42:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8007e48:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007e4c:	f7ff ff1d 	bl	8007c8a <SD_CheckStatusWithTimeout>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	da01      	bge.n	8007e5a <SD_write+0x26>
  {
    return res;
 8007e56:	7ffb      	ldrb	r3, [r7, #31]
 8007e58:	e02d      	b.n	8007eb6 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8007e5a:	683a      	ldr	r2, [r7, #0]
 8007e5c:	6879      	ldr	r1, [r7, #4]
 8007e5e:	68b8      	ldr	r0, [r7, #8]
 8007e60:	f7ff fec4 	bl	8007bec <BSP_SD_WriteBlocks_DMA>
 8007e64:	4603      	mov	r3, r0
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d124      	bne.n	8007eb4 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8007e6a:	4b15      	ldr	r3, [pc, #84]	@ (8007ec0 <SD_write+0x8c>)
 8007e6c:	6818      	ldr	r0, [r3, #0]
 8007e6e:	f107 0112 	add.w	r1, r7, #18
 8007e72:	f247 5330 	movw	r3, #30000	@ 0x7530
 8007e76:	2200      	movs	r2, #0
 8007e78:	f001 faae 	bl	80093d8 <osMessageQueueGet>
 8007e7c:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d117      	bne.n	8007eb4 <SD_write+0x80>
 8007e84:	8a7b      	ldrh	r3, [r7, #18]
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d114      	bne.n	8007eb4 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8007e8a:	f000 febd 	bl	8008c08 <osKernelGetTickCount>
 8007e8e:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8007e90:	e007      	b.n	8007ea2 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8007e92:	f7ff fec5 	bl	8007c20 <BSP_SD_GetCardState>
 8007e96:	4603      	mov	r3, r0
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d102      	bne.n	8007ea2 <SD_write+0x6e>
          {
            res = RES_OK;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	77fb      	strb	r3, [r7, #31]
            break;
 8007ea0:	e008      	b.n	8007eb4 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8007ea2:	f000 feb1 	bl	8008c08 <osKernelGetTickCount>
 8007ea6:	4602      	mov	r2, r0
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	1ad3      	subs	r3, r2, r3
 8007eac:	f247 522f 	movw	r2, #29999	@ 0x752f
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d9ee      	bls.n	8007e92 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8007eb4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3720      	adds	r7, #32
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	20003e08 	.word	0x20003e08

08007ec4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b08c      	sub	sp, #48	@ 0x30
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	4603      	mov	r3, r0
 8007ecc:	603a      	str	r2, [r7, #0]
 8007ece:	71fb      	strb	r3, [r7, #7]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8007eda:	4b25      	ldr	r3, [pc, #148]	@ (8007f70 <SD_ioctl+0xac>)
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	b2db      	uxtb	r3, r3
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <SD_ioctl+0x28>
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e03c      	b.n	8007f66 <SD_ioctl+0xa2>

  switch (cmd)
 8007eec:	79bb      	ldrb	r3, [r7, #6]
 8007eee:	2b03      	cmp	r3, #3
 8007ef0:	d834      	bhi.n	8007f5c <SD_ioctl+0x98>
 8007ef2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ef8 <SD_ioctl+0x34>)
 8007ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ef8:	08007f09 	.word	0x08007f09
 8007efc:	08007f11 	.word	0x08007f11
 8007f00:	08007f29 	.word	0x08007f29
 8007f04:	08007f43 	.word	0x08007f43
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007f0e:	e028      	b.n	8007f62 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007f10:	f107 030c 	add.w	r3, r7, #12
 8007f14:	4618      	mov	r0, r3
 8007f16:	f7ff fe93 	bl	8007c40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8007f1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007f26:	e01c      	b.n	8007f62 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007f28:	f107 030c 	add.w	r3, r7, #12
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f7ff fe87 	bl	8007c40 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f34:	b29a      	uxth	r2, r3
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007f40:	e00f      	b.n	8007f62 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007f42:	f107 030c 	add.w	r3, r7, #12
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7ff fe7a 	bl	8007c40 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f4e:	0a5a      	lsrs	r2, r3, #9
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007f54:	2300      	movs	r3, #0
 8007f56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8007f5a:	e002      	b.n	8007f62 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007f5c:	2304      	movs	r3, #4
 8007f5e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8007f62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3730      	adds	r7, #48	@ 0x30
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
 8007f6e:	bf00      	nop
 8007f70:	20000029 	.word	0x20000029

08007f74 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8007f7e:	4b05      	ldr	r3, [pc, #20]	@ (8007f94 <BSP_SD_ReadCpltCallback+0x20>)
 8007f80:	6818      	ldr	r0, [r3, #0]
 8007f82:	1db9      	adds	r1, r7, #6
 8007f84:	2300      	movs	r3, #0
 8007f86:	2200      	movs	r2, #0
 8007f88:	f001 f9c6 	bl	8009318 <osMessageQueuePut>
#endif
}
 8007f8c:	bf00      	nop
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	20003e08 	.word	0x20003e08

08007f98 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b084      	sub	sp, #16
 8007f9c:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8007f9e:	2100      	movs	r1, #0
 8007fa0:	2000      	movs	r0, #0
 8007fa2:	f007 f9e3 	bl	800f36c <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8007fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8008018 <MX_LWIP_Init+0x80>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8007fac:	4b1b      	ldr	r3, [pc, #108]	@ (800801c <MX_LWIP_Init+0x84>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8007fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8008020 <MX_LWIP_Init+0x88>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007fb8:	4b1a      	ldr	r3, [pc, #104]	@ (8008024 <MX_LWIP_Init+0x8c>)
 8007fba:	9302      	str	r3, [sp, #8]
 8007fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8008028 <MX_LWIP_Init+0x90>)
 8007fbe:	9301      	str	r3, [sp, #4]
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	9300      	str	r3, [sp, #0]
 8007fc4:	4b16      	ldr	r3, [pc, #88]	@ (8008020 <MX_LWIP_Init+0x88>)
 8007fc6:	4a15      	ldr	r2, [pc, #84]	@ (800801c <MX_LWIP_Init+0x84>)
 8007fc8:	4913      	ldr	r1, [pc, #76]	@ (8008018 <MX_LWIP_Init+0x80>)
 8007fca:	4818      	ldr	r0, [pc, #96]	@ (800802c <MX_LWIP_Init+0x94>)
 8007fcc:	f008 fa86 	bl	80104dc <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007fd0:	4816      	ldr	r0, [pc, #88]	@ (800802c <MX_LWIP_Init+0x94>)
 8007fd2:	f008 fc3d 	bl	8010850 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8007fd6:	4815      	ldr	r0, [pc, #84]	@ (800802c <MX_LWIP_Init+0x94>)
 8007fd8:	f008 fc4a 	bl	8010870 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8007fdc:	4914      	ldr	r1, [pc, #80]	@ (8008030 <MX_LWIP_Init+0x98>)
 8007fde:	4813      	ldr	r0, [pc, #76]	@ (800802c <MX_LWIP_Init+0x94>)
 8007fe0:	f008 fd4c 	bl	8010a7c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8007fe4:	2224      	movs	r2, #36	@ 0x24
 8007fe6:	2100      	movs	r1, #0
 8007fe8:	4812      	ldr	r0, [pc, #72]	@ (8008034 <MX_LWIP_Init+0x9c>)
 8007fea:	f016 fa16 	bl	801e41a <memset>
  attributes.name = "EthLink";
 8007fee:	4b11      	ldr	r3, [pc, #68]	@ (8008034 <MX_LWIP_Init+0x9c>)
 8007ff0:	4a11      	ldr	r2, [pc, #68]	@ (8008038 <MX_LWIP_Init+0xa0>)
 8007ff2:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8007ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8008034 <MX_LWIP_Init+0x9c>)
 8007ff6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007ffa:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8007ffc:	4b0d      	ldr	r3, [pc, #52]	@ (8008034 <MX_LWIP_Init+0x9c>)
 8007ffe:	2210      	movs	r2, #16
 8008000:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8008002:	4a0c      	ldr	r2, [pc, #48]	@ (8008034 <MX_LWIP_Init+0x9c>)
 8008004:	4909      	ldr	r1, [pc, #36]	@ (800802c <MX_LWIP_Init+0x94>)
 8008006:	480d      	ldr	r0, [pc, #52]	@ (800803c <MX_LWIP_Init+0xa4>)
 8008008:	f000 fe13 	bl	8008c32 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800800c:	4807      	ldr	r0, [pc, #28]	@ (800802c <MX_LWIP_Init+0x94>)
 800800e:	f010 ffb5 	bl	8018f7c <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8008012:	bf00      	nop
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}
 8008018:	20003e44 	.word	0x20003e44
 800801c:	20003e48 	.word	0x20003e48
 8008020:	20003e4c 	.word	0x20003e4c
 8008024:	0800f27d 	.word	0x0800f27d
 8008028:	08008529 	.word	0x08008529
 800802c:	20003e0c 	.word	0x20003e0c
 8008030:	08008041 	.word	0x08008041
 8008034:	20003e50 	.word	0x20003e50
 8008038:	08021c5c 	.word	0x08021c5c
 800803c:	080087dd 	.word	0x080087dd

08008040 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8008040:	b480      	push	{r7}
 8008042:	b083      	sub	sp, #12
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8008048:	bf00      	nop
 800804a:	370c      	adds	r7, #12
 800804c:	46bd      	mov	sp, r7
 800804e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008052:	4770      	bx	lr

08008054 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b082      	sub	sp, #8
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800805c:	4b04      	ldr	r3, [pc, #16]	@ (8008070 <HAL_ETH_RxCpltCallback+0x1c>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4618      	mov	r0, r3
 8008062:	f001 f87d 	bl	8009160 <osSemaphoreRelease>
}
 8008066:	bf00      	nop
 8008068:	3708      	adds	r7, #8
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	bf00      	nop
 8008070:	20008940 	.word	0x20008940

08008074 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800807c:	4b04      	ldr	r3, [pc, #16]	@ (8008090 <HAL_ETH_TxCpltCallback+0x1c>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4618      	mov	r0, r3
 8008082:	f001 f86d 	bl	8009160 <osSemaphoreRelease>
}
 8008086:	bf00      	nop
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	20008944 	.word	0x20008944

08008094 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7fb fa02 	bl	80034a6 <HAL_ETH_GetDMAError>
 80080a2:	4603      	mov	r3, r0
 80080a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080a8:	2b80      	cmp	r3, #128	@ 0x80
 80080aa:	d104      	bne.n	80080b6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80080ac:	4b04      	ldr	r3, [pc, #16]	@ (80080c0 <HAL_ETH_ErrorCallback+0x2c>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f001 f855 	bl	8009160 <osSemaphoreRelease>
  }
}
 80080b6:	bf00      	nop
 80080b8:	3708      	adds	r7, #8
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	20008940 	.word	0x20008940

080080c4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b0aa      	sub	sp, #168	@ 0xa8
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80080d2:	2300      	movs	r3, #0
 80080d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 80080d8:	2300      	movs	r3, #0
 80080da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 80080de:	f107 0310 	add.w	r3, r7, #16
 80080e2:	2264      	movs	r2, #100	@ 0x64
 80080e4:	2100      	movs	r1, #0
 80080e6:	4618      	mov	r0, r3
 80080e8:	f016 f997 	bl	801e41a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80080ec:	4b89      	ldr	r3, [pc, #548]	@ (8008314 <low_level_init+0x250>)
 80080ee:	4a8a      	ldr	r2, [pc, #552]	@ (8008318 <low_level_init+0x254>)
 80080f0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80080f2:	2300      	movs	r3, #0
 80080f4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80080f6:	2380      	movs	r3, #128	@ 0x80
 80080f8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80080fa:	23e1      	movs	r3, #225	@ 0xe1
 80080fc:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80080fe:	2300      	movs	r3, #0
 8008100:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8008102:	2300      	movs	r3, #0
 8008104:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8008106:	2300      	movs	r3, #0
 8008108:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800810a:	4a82      	ldr	r2, [pc, #520]	@ (8008314 <low_level_init+0x250>)
 800810c:	f107 0308 	add.w	r3, r7, #8
 8008110:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8008112:	4b80      	ldr	r3, [pc, #512]	@ (8008314 <low_level_init+0x250>)
 8008114:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8008118:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800811a:	4b7e      	ldr	r3, [pc, #504]	@ (8008314 <low_level_init+0x250>)
 800811c:	4a7f      	ldr	r2, [pc, #508]	@ (800831c <low_level_init+0x258>)
 800811e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8008120:	4b7c      	ldr	r3, [pc, #496]	@ (8008314 <low_level_init+0x250>)
 8008122:	4a7f      	ldr	r2, [pc, #508]	@ (8008320 <low_level_init+0x25c>)
 8008124:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8008126:	4b7b      	ldr	r3, [pc, #492]	@ (8008314 <low_level_init+0x250>)
 8008128:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800812c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800812e:	4879      	ldr	r0, [pc, #484]	@ (8008314 <low_level_init+0x250>)
 8008130:	f7fa fb70 	bl	8002814 <HAL_ETH_Init>
 8008134:	4603      	mov	r3, r0
 8008136:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800813a:	2238      	movs	r2, #56	@ 0x38
 800813c:	2100      	movs	r1, #0
 800813e:	4879      	ldr	r0, [pc, #484]	@ (8008324 <low_level_init+0x260>)
 8008140:	f016 f96b 	bl	801e41a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8008144:	4b77      	ldr	r3, [pc, #476]	@ (8008324 <low_level_init+0x260>)
 8008146:	2221      	movs	r2, #33	@ 0x21
 8008148:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800814a:	4b76      	ldr	r3, [pc, #472]	@ (8008324 <low_level_init+0x260>)
 800814c:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8008150:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8008152:	4b74      	ldr	r3, [pc, #464]	@ (8008324 <low_level_init+0x260>)
 8008154:	2200      	movs	r2, #0
 8008156:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8008158:	4873      	ldr	r0, [pc, #460]	@ (8008328 <low_level_init+0x264>)
 800815a:	f008 f879 	bl	8010250 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2206      	movs	r2, #6
 8008162:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8008166:	4b6b      	ldr	r3, [pc, #428]	@ (8008314 <low_level_init+0x250>)
 8008168:	685b      	ldr	r3, [r3, #4]
 800816a:	781a      	ldrb	r2, [r3, #0]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8008172:	4b68      	ldr	r3, [pc, #416]	@ (8008314 <low_level_init+0x250>)
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	785a      	ldrb	r2, [r3, #1]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800817e:	4b65      	ldr	r3, [pc, #404]	@ (8008314 <low_level_init+0x250>)
 8008180:	685b      	ldr	r3, [r3, #4]
 8008182:	789a      	ldrb	r2, [r3, #2]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800818a:	4b62      	ldr	r3, [pc, #392]	@ (8008314 <low_level_init+0x250>)
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	78da      	ldrb	r2, [r3, #3]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8008196:	4b5f      	ldr	r3, [pc, #380]	@ (8008314 <low_level_init+0x250>)
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	791a      	ldrb	r2, [r3, #4]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80081a2:	4b5c      	ldr	r3, [pc, #368]	@ (8008314 <low_level_init+0x250>)
 80081a4:	685b      	ldr	r3, [r3, #4]
 80081a6:	795a      	ldrb	r2, [r3, #5]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80081b4:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80081bc:	f043 030a 	orr.w	r3, r3, #10
 80081c0:	b2da      	uxtb	r2, r3
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80081c8:	2200      	movs	r2, #0
 80081ca:	2100      	movs	r1, #0
 80081cc:	2001      	movs	r0, #1
 80081ce:	f000 feec 	bl	8008faa <osSemaphoreNew>
 80081d2:	4603      	mov	r3, r0
 80081d4:	4a55      	ldr	r2, [pc, #340]	@ (800832c <low_level_init+0x268>)
 80081d6:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80081d8:	2200      	movs	r2, #0
 80081da:	2100      	movs	r1, #0
 80081dc:	2001      	movs	r0, #1
 80081de:	f000 fee4 	bl	8008faa <osSemaphoreNew>
 80081e2:	4603      	mov	r3, r0
 80081e4:	4a52      	ldr	r2, [pc, #328]	@ (8008330 <low_level_init+0x26c>)
 80081e6:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80081e8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80081ec:	2224      	movs	r2, #36	@ 0x24
 80081ee:	2100      	movs	r1, #0
 80081f0:	4618      	mov	r0, r3
 80081f2:	f016 f912 	bl	801e41a <memset>
  attributes.name = "EthIf";
 80081f6:	4b4f      	ldr	r3, [pc, #316]	@ (8008334 <low_level_init+0x270>)
 80081f8:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80081fa:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80081fe:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 8008202:	2330      	movs	r3, #48	@ 0x30
 8008204:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8008208:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800820c:	461a      	mov	r2, r3
 800820e:	6879      	ldr	r1, [r7, #4]
 8008210:	4849      	ldr	r0, [pc, #292]	@ (8008338 <low_level_init+0x274>)
 8008212:	f000 fd0e 	bl	8008c32 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8008216:	4949      	ldr	r1, [pc, #292]	@ (800833c <low_level_init+0x278>)
 8008218:	4849      	ldr	r0, [pc, #292]	@ (8008340 <low_level_init+0x27c>)
 800821a:	f7f9 ff88 	bl	800212e <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  if(DP83848_Init(&DP83848) != DP83848_STATUS_OK)
 800821e:	4848      	ldr	r0, [pc, #288]	@ (8008340 <low_level_init+0x27c>)
 8008220:	f7f9 ffb7 	bl	8002192 <DP83848_Init>
 8008224:	4603      	mov	r3, r0
 8008226:	2b00      	cmp	r3, #0
 8008228:	d006      	beq.n	8008238 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f008 fbf6 	bl	8010a1c <netif_set_link_down>
    netif_set_down(netif);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f008 fb89 	bl	8010948 <netif_set_down>
 8008236:	e06a      	b.n	800830e <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8008238:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800823c:	2b00      	cmp	r3, #0
 800823e:	d164      	bne.n	800830a <low_level_init+0x246>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 8008240:	483f      	ldr	r0, [pc, #252]	@ (8008340 <low_level_init+0x27c>)
 8008242:	f7f9 fff3 	bl	800222c <DP83848_GetLinkState>
 8008246:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 800824a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800824e:	2b01      	cmp	r3, #1
 8008250:	dc06      	bgt.n	8008260 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f008 fbe2 	bl	8010a1c <netif_set_link_down>
      netif_set_down(netif);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f008 fb75 	bl	8010948 <netif_set_down>
 800825e:	e056      	b.n	800830e <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8008260:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008264:	3b02      	subs	r3, #2
 8008266:	2b03      	cmp	r3, #3
 8008268:	d82a      	bhi.n	80082c0 <low_level_init+0x1fc>
 800826a:	a201      	add	r2, pc, #4	@ (adr r2, 8008270 <low_level_init+0x1ac>)
 800826c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008270:	08008281 	.word	0x08008281
 8008274:	08008293 	.word	0x08008293
 8008278:	080082a3 	.word	0x080082a3
 800827c:	080082b3 	.word	0x080082b3
      {
      case DP83848_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8008280:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008284:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8008288:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800828c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8008290:	e01f      	b.n	80082d2 <low_level_init+0x20e>
      case DP83848_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8008292:	2300      	movs	r3, #0
 8008294:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8008298:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800829c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80082a0:	e017      	b.n	80082d2 <low_level_init+0x20e>
      case DP83848_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 80082a2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80082a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 80082aa:	2300      	movs	r3, #0
 80082ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80082b0:	e00f      	b.n	80082d2 <low_level_init+0x20e>
      case DP83848_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80082b2:	2300      	movs	r3, #0
 80082b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 80082b8:	2300      	movs	r3, #0
 80082ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80082be:	e008      	b.n	80082d2 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 80082c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80082c4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 80082c8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80082cc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80082d0:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80082d2:	f107 0310 	add.w	r3, r7, #16
 80082d6:	4619      	mov	r1, r3
 80082d8:	480e      	ldr	r0, [pc, #56]	@ (8008314 <low_level_init+0x250>)
 80082da:	f7fa ff83 	bl	80031e4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80082de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80082e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 80082e4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80082e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80082ea:	f107 0310 	add.w	r3, r7, #16
 80082ee:	4619      	mov	r1, r3
 80082f0:	4808      	ldr	r0, [pc, #32]	@ (8008314 <low_level_init+0x250>)
 80082f2:	f7fb f86e 	bl	80033d2 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 80082f6:	4807      	ldr	r0, [pc, #28]	@ (8008314 <low_level_init+0x250>)
 80082f8:	f7fa fb28 	bl	800294c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f008 fab7 	bl	8010870 <netif_set_up>
    netif_set_link_up(netif);
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f008 fb52 	bl	80109ac <netif_set_link_up>
 8008308:	e001      	b.n	800830e <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 800830a:	f7f9 fb47 	bl	800199c <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800830e:	37a8      	adds	r7, #168	@ 0xa8
 8008310:	46bd      	mov	sp, r7
 8008312:	bd80      	pop	{r7, pc}
 8008314:	20008948 	.word	0x20008948
 8008318:	40028000 	.word	0x40028000
 800831c:	200088a0 	.word	0x200088a0
 8008320:	20008800 	.word	0x20008800
 8008324:	200089f8 	.word	0x200089f8
 8008328:	08025be4 	.word	0x08025be4
 800832c:	20008940 	.word	0x20008940
 8008330:	20008944 	.word	0x20008944
 8008334:	08021c64 	.word	0x08021c64
 8008338:	080084d5 	.word	0x080084d5
 800833c:	2000002c 	.word	0x2000002c
 8008340:	20008a30 	.word	0x20008a30

08008344 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b092      	sub	sp, #72	@ 0x48
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800834e:	2300      	movs	r3, #0
 8008350:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8008352:	2300      	movs	r3, #0
 8008354:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8008356:	2300      	movs	r3, #0
 8008358:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800835c:	f107 030c 	add.w	r3, r7, #12
 8008360:	2230      	movs	r2, #48	@ 0x30
 8008362:	2100      	movs	r1, #0
 8008364:	4618      	mov	r0, r3
 8008366:	f016 f858 	bl	801e41a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800836a:	f107 030c 	add.w	r3, r7, #12
 800836e:	2230      	movs	r2, #48	@ 0x30
 8008370:	2100      	movs	r1, #0
 8008372:	4618      	mov	r0, r3
 8008374:	f016 f851 	bl	801e41a <memset>

  for(q = p; q != NULL; q = q->next)
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	643b      	str	r3, [r7, #64]	@ 0x40
 800837c:	e045      	b.n	800840a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800837e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008380:	2b03      	cmp	r3, #3
 8008382:	d902      	bls.n	800838a <low_level_output+0x46>
      return ERR_IF;
 8008384:	f06f 030b 	mvn.w	r3, #11
 8008388:	e07f      	b.n	800848a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800838a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800838c:	6859      	ldr	r1, [r3, #4]
 800838e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008390:	4613      	mov	r3, r2
 8008392:	005b      	lsls	r3, r3, #1
 8008394:	4413      	add	r3, r2
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	3348      	adds	r3, #72	@ 0x48
 800839a:	443b      	add	r3, r7
 800839c:	3b3c      	subs	r3, #60	@ 0x3c
 800839e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80083a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083a2:	895b      	ldrh	r3, [r3, #10]
 80083a4:	4619      	mov	r1, r3
 80083a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083a8:	4613      	mov	r3, r2
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	4413      	add	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	3348      	adds	r3, #72	@ 0x48
 80083b2:	443b      	add	r3, r7
 80083b4:	3b38      	subs	r3, #56	@ 0x38
 80083b6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80083b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d011      	beq.n	80083e2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80083be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083c0:	1e5a      	subs	r2, r3, #1
 80083c2:	f107 000c 	add.w	r0, r7, #12
 80083c6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80083c8:	460b      	mov	r3, r1
 80083ca:	005b      	lsls	r3, r3, #1
 80083cc:	440b      	add	r3, r1
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	18c1      	adds	r1, r0, r3
 80083d2:	4613      	mov	r3, r2
 80083d4:	005b      	lsls	r3, r3, #1
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	3348      	adds	r3, #72	@ 0x48
 80083dc:	443b      	add	r3, r7
 80083de:	3b34      	subs	r3, #52	@ 0x34
 80083e0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80083e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d109      	bne.n	80083fe <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80083ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083ec:	4613      	mov	r3, r2
 80083ee:	005b      	lsls	r3, r3, #1
 80083f0:	4413      	add	r3, r2
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	3348      	adds	r3, #72	@ 0x48
 80083f6:	443b      	add	r3, r7
 80083f8:	3b34      	subs	r3, #52	@ 0x34
 80083fa:	2200      	movs	r2, #0
 80083fc:	601a      	str	r2, [r3, #0]
    }

    i++;
 80083fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008400:	3301      	adds	r3, #1
 8008402:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 8008404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	643b      	str	r3, [r7, #64]	@ 0x40
 800840a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800840c:	2b00      	cmp	r3, #0
 800840e:	d1b6      	bne.n	800837e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8008410:	683b      	ldr	r3, [r7, #0]
 8008412:	891b      	ldrh	r3, [r3, #8]
 8008414:	461a      	mov	r2, r3
 8008416:	4b1f      	ldr	r3, [pc, #124]	@ (8008494 <low_level_output+0x150>)
 8008418:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800841a:	4a1e      	ldr	r2, [pc, #120]	@ (8008494 <low_level_output+0x150>)
 800841c:	f107 030c 	add.w	r3, r7, #12
 8008420:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8008422:	4a1c      	ldr	r2, [pc, #112]	@ (8008494 <low_level_output+0x150>)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8008428:	6838      	ldr	r0, [r7, #0]
 800842a:	f008 ff7b 	bl	8011324 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800842e:	4919      	ldr	r1, [pc, #100]	@ (8008494 <low_level_output+0x150>)
 8008430:	4819      	ldr	r0, [pc, #100]	@ (8008498 <low_level_output+0x154>)
 8008432:	f7fa fb7a 	bl	8002b2a <HAL_ETH_Transmit_IT>
 8008436:	4603      	mov	r3, r0
 8008438:	2b00      	cmp	r3, #0
 800843a:	d103      	bne.n	8008444 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800843c:	2300      	movs	r3, #0
 800843e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008442:	e01b      	b.n	800847c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8008444:	4814      	ldr	r0, [pc, #80]	@ (8008498 <low_level_output+0x154>)
 8008446:	f7fb f821 	bl	800348c <HAL_ETH_GetError>
 800844a:	4603      	mov	r3, r0
 800844c:	f003 0302 	and.w	r3, r3, #2
 8008450:	2b00      	cmp	r3, #0
 8008452:	d00d      	beq.n	8008470 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8008454:	4b11      	ldr	r3, [pc, #68]	@ (800849c <low_level_output+0x158>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800845c:	4618      	mov	r0, r3
 800845e:	f000 fe2d 	bl	80090bc <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8008462:	480d      	ldr	r0, [pc, #52]	@ (8008498 <low_level_output+0x154>)
 8008464:	f7fa fd00 	bl	8002e68 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8008468:	23fe      	movs	r3, #254	@ 0xfe
 800846a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800846e:	e005      	b.n	800847c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8008470:	6838      	ldr	r0, [r7, #0]
 8008472:	f008 feb1 	bl	80111d8 <pbuf_free>
        errval =  ERR_IF;
 8008476:	23f4      	movs	r3, #244	@ 0xf4
 8008478:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800847c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8008480:	f113 0f02 	cmn.w	r3, #2
 8008484:	d0d3      	beq.n	800842e <low_level_output+0xea>

  return errval;
 8008486:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800848a:	4618      	mov	r0, r3
 800848c:	3748      	adds	r7, #72	@ 0x48
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}
 8008492:	bf00      	nop
 8008494:	200089f8 	.word	0x200089f8
 8008498:	20008948 	.word	0x20008948
 800849c:	20008944 	.word	0x20008944

080084a0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b084      	sub	sp, #16
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80084a8:	2300      	movs	r3, #0
 80084aa:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80084ac:	4b07      	ldr	r3, [pc, #28]	@ (80084cc <low_level_input+0x2c>)
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d105      	bne.n	80084c0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80084b4:	f107 030c 	add.w	r3, r7, #12
 80084b8:	4619      	mov	r1, r3
 80084ba:	4805      	ldr	r0, [pc, #20]	@ (80084d0 <low_level_input+0x30>)
 80084bc:	f7fa fb91 	bl	8002be2 <HAL_ETH_ReadData>
  }

  return p;
 80084c0:	68fb      	ldr	r3, [r7, #12]
}
 80084c2:	4618      	mov	r0, r3
 80084c4:	3710      	adds	r7, #16
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
 80084ca:	bf00      	nop
 80084cc:	200087fc 	.word	0x200087fc
 80084d0:	20008948 	.word	0x20008948

080084d4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80084dc:	2300      	movs	r3, #0
 80084de:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80084e4:	4b0f      	ldr	r3, [pc, #60]	@ (8008524 <ethernetif_input+0x50>)
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	f04f 31ff 	mov.w	r1, #4294967295
 80084ec:	4618      	mov	r0, r3
 80084ee:	f000 fde5 	bl	80090bc <osSemaphoreAcquire>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d1f5      	bne.n	80084e4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80084f8:	68b8      	ldr	r0, [r7, #8]
 80084fa:	f7ff ffd1 	bl	80084a0 <low_level_input>
 80084fe:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d00a      	beq.n	800851c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	691b      	ldr	r3, [r3, #16]
 800850a:	68b9      	ldr	r1, [r7, #8]
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	4798      	blx	r3
 8008510:	4603      	mov	r3, r0
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8008516:	68f8      	ldr	r0, [r7, #12]
 8008518:	f008 fe5e 	bl	80111d8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1ea      	bne.n	80084f8 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8008522:	e7df      	b.n	80084e4 <ethernetif_input+0x10>
 8008524:	20008940 	.word	0x20008940

08008528 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8008528:	b580      	push	{r7, lr}
 800852a:	b082      	sub	sp, #8
 800852c:	af00      	add	r7, sp, #0
 800852e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d106      	bne.n	8008544 <ethernetif_init+0x1c>
 8008536:	4b0e      	ldr	r3, [pc, #56]	@ (8008570 <ethernetif_init+0x48>)
 8008538:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 800853c:	490d      	ldr	r1, [pc, #52]	@ (8008574 <ethernetif_init+0x4c>)
 800853e:	480e      	ldr	r0, [pc, #56]	@ (8008578 <ethernetif_init+0x50>)
 8008540:	f015 fecc 	bl	801e2dc <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2273      	movs	r2, #115	@ 0x73
 8008548:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2274      	movs	r2, #116	@ 0x74
 8008550:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	4a09      	ldr	r2, [pc, #36]	@ (800857c <ethernetif_init+0x54>)
 8008558:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a08      	ldr	r2, [pc, #32]	@ (8008580 <ethernetif_init+0x58>)
 800855e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f7ff fdaf 	bl	80080c4 <low_level_init>

  return ERR_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}
 8008570:	08021c6c 	.word	0x08021c6c
 8008574:	08021c88 	.word	0x08021c88
 8008578:	08021c98 	.word	0x08021c98
 800857c:	0801ae9d 	.word	0x0801ae9d
 8008580:	08008345 	.word	0x08008345

08008584 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8008590:	68f9      	ldr	r1, [r7, #12]
 8008592:	4809      	ldr	r0, [pc, #36]	@ (80085b8 <pbuf_free_custom+0x34>)
 8008594:	f007 ff4c 	bl	8010430 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8008598:	4b08      	ldr	r3, [pc, #32]	@ (80085bc <pbuf_free_custom+0x38>)
 800859a:	781b      	ldrb	r3, [r3, #0]
 800859c:	2b01      	cmp	r3, #1
 800859e:	d107      	bne.n	80085b0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80085a0:	4b06      	ldr	r3, [pc, #24]	@ (80085bc <pbuf_free_custom+0x38>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80085a6:	4b06      	ldr	r3, [pc, #24]	@ (80085c0 <pbuf_free_custom+0x3c>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f000 fdd8 	bl	8009160 <osSemaphoreRelease>
  }
}
 80085b0:	bf00      	nop
 80085b2:	3710      	adds	r7, #16
 80085b4:	46bd      	mov	sp, r7
 80085b6:	bd80      	pop	{r7, pc}
 80085b8:	08025be4 	.word	0x08025be4
 80085bc:	200087fc 	.word	0x200087fc
 80085c0:	20008940 	.word	0x20008940

080085c4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80085c8:	f7f9 feee 	bl	80023a8 <HAL_GetTick>
 80085cc:	4603      	mov	r3, r0
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	bd80      	pop	{r7, pc}
	...

080085d4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b08e      	sub	sp, #56	@ 0x38
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80085e0:	2200      	movs	r2, #0
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	605a      	str	r2, [r3, #4]
 80085e6:	609a      	str	r2, [r3, #8]
 80085e8:	60da      	str	r2, [r3, #12]
 80085ea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a4e      	ldr	r2, [pc, #312]	@ (800872c <HAL_ETH_MspInit+0x158>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	f040 8095 	bne.w	8008722 <HAL_ETH_MspInit+0x14e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80085f8:	2300      	movs	r3, #0
 80085fa:	623b      	str	r3, [r7, #32]
 80085fc:	4b4c      	ldr	r3, [pc, #304]	@ (8008730 <HAL_ETH_MspInit+0x15c>)
 80085fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008600:	4a4b      	ldr	r2, [pc, #300]	@ (8008730 <HAL_ETH_MspInit+0x15c>)
 8008602:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008606:	6313      	str	r3, [r2, #48]	@ 0x30
 8008608:	4b49      	ldr	r3, [pc, #292]	@ (8008730 <HAL_ETH_MspInit+0x15c>)
 800860a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800860c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008610:	623b      	str	r3, [r7, #32]
 8008612:	6a3b      	ldr	r3, [r7, #32]
 8008614:	2300      	movs	r3, #0
 8008616:	61fb      	str	r3, [r7, #28]
 8008618:	4b45      	ldr	r3, [pc, #276]	@ (8008730 <HAL_ETH_MspInit+0x15c>)
 800861a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800861c:	4a44      	ldr	r2, [pc, #272]	@ (8008730 <HAL_ETH_MspInit+0x15c>)
 800861e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008622:	6313      	str	r3, [r2, #48]	@ 0x30
 8008624:	4b42      	ldr	r3, [pc, #264]	@ (8008730 <HAL_ETH_MspInit+0x15c>)
 8008626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008628:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800862c:	61fb      	str	r3, [r7, #28]
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	2300      	movs	r3, #0
 8008632:	61bb      	str	r3, [r7, #24]
 8008634:	4b3e      	ldr	r3, [pc, #248]	@ (8008730 <HAL_ETH_MspInit+0x15c>)
 8008636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008638:	4a3d      	ldr	r2, [pc, #244]	@ (8008730 <HAL_ETH_MspInit+0x15c>)
 800863a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800863e:	6313      	str	r3, [r2, #48]	@ 0x30
 8008640:	4b3b      	ldr	r3, [pc, #236]	@ (8008730 <HAL_ETH_MspInit+0x15c>)
 8008642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008648:	61bb      	str	r3, [r7, #24]
 800864a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800864c:	2300      	movs	r3, #0
 800864e:	617b      	str	r3, [r7, #20]
 8008650:	4b37      	ldr	r3, [pc, #220]	@ (8008730 <HAL_ETH_MspInit+0x15c>)
 8008652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008654:	4a36      	ldr	r2, [pc, #216]	@ (8008730 <HAL_ETH_MspInit+0x15c>)
 8008656:	f043 0304 	orr.w	r3, r3, #4
 800865a:	6313      	str	r3, [r2, #48]	@ 0x30
 800865c:	4b34      	ldr	r3, [pc, #208]	@ (8008730 <HAL_ETH_MspInit+0x15c>)
 800865e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008660:	f003 0304 	and.w	r3, r3, #4
 8008664:	617b      	str	r3, [r7, #20]
 8008666:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008668:	2300      	movs	r3, #0
 800866a:	613b      	str	r3, [r7, #16]
 800866c:	4b30      	ldr	r3, [pc, #192]	@ (8008730 <HAL_ETH_MspInit+0x15c>)
 800866e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008670:	4a2f      	ldr	r2, [pc, #188]	@ (8008730 <HAL_ETH_MspInit+0x15c>)
 8008672:	f043 0301 	orr.w	r3, r3, #1
 8008676:	6313      	str	r3, [r2, #48]	@ 0x30
 8008678:	4b2d      	ldr	r3, [pc, #180]	@ (8008730 <HAL_ETH_MspInit+0x15c>)
 800867a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800867c:	f003 0301 	and.w	r3, r3, #1
 8008680:	613b      	str	r3, [r7, #16]
 8008682:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008684:	2300      	movs	r3, #0
 8008686:	60fb      	str	r3, [r7, #12]
 8008688:	4b29      	ldr	r3, [pc, #164]	@ (8008730 <HAL_ETH_MspInit+0x15c>)
 800868a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800868c:	4a28      	ldr	r2, [pc, #160]	@ (8008730 <HAL_ETH_MspInit+0x15c>)
 800868e:	f043 0302 	orr.w	r3, r3, #2
 8008692:	6313      	str	r3, [r2, #48]	@ 0x30
 8008694:	4b26      	ldr	r3, [pc, #152]	@ (8008730 <HAL_ETH_MspInit+0x15c>)
 8008696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008698:	f003 0302 	and.w	r3, r3, #2
 800869c:	60fb      	str	r3, [r7, #12]
 800869e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80086a0:	2332      	movs	r3, #50	@ 0x32
 80086a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086a4:	2302      	movs	r3, #2
 80086a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086a8:	2300      	movs	r3, #0
 80086aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086ac:	2303      	movs	r3, #3
 80086ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80086b0:	230b      	movs	r3, #11
 80086b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086b8:	4619      	mov	r1, r3
 80086ba:	481e      	ldr	r0, [pc, #120]	@ (8008734 <HAL_ETH_MspInit+0x160>)
 80086bc:	f7fb fb22 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80086c0:	2386      	movs	r3, #134	@ 0x86
 80086c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086c4:	2302      	movs	r3, #2
 80086c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086c8:	2300      	movs	r3, #0
 80086ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086cc:	2303      	movs	r3, #3
 80086ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80086d0:	230b      	movs	r3, #11
 80086d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086d8:	4619      	mov	r1, r3
 80086da:	4817      	ldr	r0, [pc, #92]	@ (8008738 <HAL_ETH_MspInit+0x164>)
 80086dc:	f7fb fb12 	bl	8003d04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80086e0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80086e4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086e6:	2302      	movs	r3, #2
 80086e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086ea:	2300      	movs	r3, #0
 80086ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086ee:	2303      	movs	r3, #3
 80086f0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80086f2:	230b      	movs	r3, #11
 80086f4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80086f6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086fa:	4619      	mov	r1, r3
 80086fc:	480f      	ldr	r0, [pc, #60]	@ (800873c <HAL_ETH_MspInit+0x168>)
 80086fe:	f7fb fb01 	bl	8003d04 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8008702:	2200      	movs	r2, #0
 8008704:	2105      	movs	r1, #5
 8008706:	203d      	movs	r0, #61	@ 0x3d
 8008708:	f7f9 ff36 	bl	8002578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800870c:	203d      	movs	r0, #61	@ 0x3d
 800870e:	f7f9 ff4f 	bl	80025b0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8008712:	2200      	movs	r2, #0
 8008714:	2105      	movs	r1, #5
 8008716:	203e      	movs	r0, #62	@ 0x3e
 8008718:	f7f9 ff2e 	bl	8002578 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800871c:	203e      	movs	r0, #62	@ 0x3e
 800871e:	f7f9 ff47 	bl	80025b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8008722:	bf00      	nop
 8008724:	3738      	adds	r7, #56	@ 0x38
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	40028000 	.word	0x40028000
 8008730:	40023800 	.word	0x40023800
 8008734:	40020800 	.word	0x40020800
 8008738:	40020000 	.word	0x40020000
 800873c:	40020400 	.word	0x40020400

08008740 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8008744:	4802      	ldr	r0, [pc, #8]	@ (8008750 <ETH_PHY_IO_Init+0x10>)
 8008746:	f7fa fe5f 	bl	8003408 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	bd80      	pop	{r7, pc}
 8008750:	20008948 	.word	0x20008948

08008754 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8008754:	b480      	push	{r7}
 8008756:	af00      	add	r7, sp, #0
  return 0;
 8008758:	2300      	movs	r3, #0
}
 800875a:	4618      	mov	r0, r3
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b084      	sub	sp, #16
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68ba      	ldr	r2, [r7, #8]
 8008774:	68f9      	ldr	r1, [r7, #12]
 8008776:	4807      	ldr	r0, [pc, #28]	@ (8008794 <ETH_PHY_IO_ReadReg+0x30>)
 8008778:	f7fa fca0 	bl	80030bc <HAL_ETH_ReadPHYRegister>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d002      	beq.n	8008788 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8008782:	f04f 33ff 	mov.w	r3, #4294967295
 8008786:	e000      	b.n	800878a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3710      	adds	r7, #16
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}
 8008792:	bf00      	nop
 8008794:	20008948 	.word	0x20008948

08008798 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
 800879e:	60f8      	str	r0, [r7, #12]
 80087a0:	60b9      	str	r1, [r7, #8]
 80087a2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	68ba      	ldr	r2, [r7, #8]
 80087a8:	68f9      	ldr	r1, [r7, #12]
 80087aa:	4807      	ldr	r0, [pc, #28]	@ (80087c8 <ETH_PHY_IO_WriteReg+0x30>)
 80087ac:	f7fa fcd1 	bl	8003152 <HAL_ETH_WritePHYRegister>
 80087b0:	4603      	mov	r3, r0
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d002      	beq.n	80087bc <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80087b6:	f04f 33ff 	mov.w	r3, #4294967295
 80087ba:	e000      	b.n	80087be <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20008948 	.word	0x20008948

080087cc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80087d0:	f7f9 fdea 	bl	80023a8 <HAL_GetTick>
 80087d4:	4603      	mov	r3, r0
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	bd80      	pop	{r7, pc}
	...

080087dc <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b0a0      	sub	sp, #128	@ 0x80
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80087e4:	f107 0308 	add.w	r3, r7, #8
 80087e8:	2264      	movs	r2, #100	@ 0x64
 80087ea:	2100      	movs	r1, #0
 80087ec:	4618      	mov	r0, r3
 80087ee:	f015 fe14 	bl	801e41a <memset>
  int32_t PHYLinkState = 0;
 80087f2:	2300      	movs	r3, #0
 80087f4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80087f6:	2300      	movs	r3, #0
 80087f8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80087fa:	2300      	movs	r3, #0
 80087fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80087fe:	2300      	movs	r3, #0
 8008800:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8008806:	483a      	ldr	r0, [pc, #232]	@ (80088f0 <ethernet_link_thread+0x114>)
 8008808:	f7f9 fd10 	bl	800222c <DP83848_GetLinkState>
 800880c:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 800880e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008810:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008814:	089b      	lsrs	r3, r3, #2
 8008816:	f003 0301 	and.w	r3, r3, #1
 800881a:	b2db      	uxtb	r3, r3
 800881c:	2b00      	cmp	r3, #0
 800881e:	d00c      	beq.n	800883a <ethernet_link_thread+0x5e>
 8008820:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008822:	2b01      	cmp	r3, #1
 8008824:	dc09      	bgt.n	800883a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8008826:	4833      	ldr	r0, [pc, #204]	@ (80088f4 <ethernet_link_thread+0x118>)
 8008828:	f7fa f900 	bl	8002a2c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800882c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800882e:	f008 f88b 	bl	8010948 <netif_set_down>
    netif_set_link_down(netif);
 8008832:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008834:	f008 f8f2 	bl	8010a1c <netif_set_link_down>
 8008838:	e055      	b.n	80088e6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 800883a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800883c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008840:	f003 0304 	and.w	r3, r3, #4
 8008844:	2b00      	cmp	r3, #0
 8008846:	d14e      	bne.n	80088e6 <ethernet_link_thread+0x10a>
 8008848:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800884a:	2b01      	cmp	r3, #1
 800884c:	dd4b      	ble.n	80088e6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800884e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008850:	3b02      	subs	r3, #2
 8008852:	2b03      	cmp	r3, #3
 8008854:	d82a      	bhi.n	80088ac <ethernet_link_thread+0xd0>
 8008856:	a201      	add	r2, pc, #4	@ (adr r2, 800885c <ethernet_link_thread+0x80>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	0800886d 	.word	0x0800886d
 8008860:	0800887f 	.word	0x0800887f
 8008864:	0800888f 	.word	0x0800888f
 8008868:	0800889f 	.word	0x0800889f
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800886c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008870:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8008872:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008876:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008878:	2301      	movs	r3, #1
 800887a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800887c:	e017      	b.n	80088ae <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800887e:	2300      	movs	r3, #0
 8008880:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8008882:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008886:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008888:	2301      	movs	r3, #1
 800888a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800888c:	e00f      	b.n	80088ae <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800888e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008892:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8008894:	2300      	movs	r3, #0
 8008896:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8008898:	2301      	movs	r3, #1
 800889a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800889c:	e007      	b.n	80088ae <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800889e:	2300      	movs	r3, #0
 80088a0:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 80088a2:	2300      	movs	r3, #0
 80088a4:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 80088a6:	2301      	movs	r3, #1
 80088a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 80088aa:	e000      	b.n	80088ae <ethernet_link_thread+0xd2>
    default:
      break;
 80088ac:	bf00      	nop
    }

    if(linkchanged)
 80088ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d018      	beq.n	80088e6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80088b4:	f107 0308 	add.w	r3, r7, #8
 80088b8:	4619      	mov	r1, r3
 80088ba:	480e      	ldr	r0, [pc, #56]	@ (80088f4 <ethernet_link_thread+0x118>)
 80088bc:	f7fa fc92 	bl	80031e4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80088c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80088c2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80088c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80088c6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80088c8:	f107 0308 	add.w	r3, r7, #8
 80088cc:	4619      	mov	r1, r3
 80088ce:	4809      	ldr	r0, [pc, #36]	@ (80088f4 <ethernet_link_thread+0x118>)
 80088d0:	f7fa fd7f 	bl	80033d2 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80088d4:	4807      	ldr	r0, [pc, #28]	@ (80088f4 <ethernet_link_thread+0x118>)
 80088d6:	f7fa f839 	bl	800294c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80088da:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80088dc:	f007 ffc8 	bl	8010870 <netif_set_up>
      netif_set_link_up(netif);
 80088e0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80088e2:	f008 f863 	bl	80109ac <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80088e6:	2064      	movs	r0, #100	@ 0x64
 80088e8:	f000 fa36 	bl	8008d58 <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 80088ec:	e78b      	b.n	8008806 <ethernet_link_thread+0x2a>
 80088ee:	bf00      	nop
 80088f0:	20008a30 	.word	0x20008a30
 80088f4:	20008948 	.word	0x20008948

080088f8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b086      	sub	sp, #24
 80088fc:	af02      	add	r7, sp, #8
 80088fe:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8008900:	4812      	ldr	r0, [pc, #72]	@ (800894c <HAL_ETH_RxAllocateCallback+0x54>)
 8008902:	f007 fd21 	bl	8010348 <memp_malloc_pool>
 8008906:	60f8      	str	r0, [r7, #12]
  if (p)
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d014      	beq.n	8008938 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f103 0220 	add.w	r2, r3, #32
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	4a0d      	ldr	r2, [pc, #52]	@ (8008950 <HAL_ETH_RxAllocateCallback+0x58>)
 800891c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8008926:	9201      	str	r2, [sp, #4]
 8008928:	9300      	str	r3, [sp, #0]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2241      	movs	r2, #65	@ 0x41
 800892e:	2100      	movs	r1, #0
 8008930:	2000      	movs	r0, #0
 8008932:	f008 fa97 	bl	8010e64 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8008936:	e005      	b.n	8008944 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8008938:	4b06      	ldr	r3, [pc, #24]	@ (8008954 <HAL_ETH_RxAllocateCallback+0x5c>)
 800893a:	2201      	movs	r2, #1
 800893c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	601a      	str	r2, [r3, #0]
}
 8008944:	bf00      	nop
 8008946:	3710      	adds	r7, #16
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}
 800894c:	08025be4 	.word	0x08025be4
 8008950:	08008585 	.word	0x08008585
 8008954:	200087fc 	.word	0x200087fc

08008958 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8008958:	b480      	push	{r7}
 800895a:	b089      	sub	sp, #36	@ 0x24
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	60b9      	str	r1, [r7, #8]
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800896e:	2300      	movs	r3, #0
 8008970:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	3b20      	subs	r3, #32
 8008976:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8008978:	69fb      	ldr	r3, [r7, #28]
 800897a:	2200      	movs	r2, #0
 800897c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800897e:	69fb      	ldr	r3, [r7, #28]
 8008980:	2200      	movs	r2, #0
 8008982:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	887a      	ldrh	r2, [r7, #2]
 8008988:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800898a:	69bb      	ldr	r3, [r7, #24]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2b00      	cmp	r3, #0
 8008990:	d103      	bne.n	800899a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	69fa      	ldr	r2, [r7, #28]
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	e003      	b.n	80089a2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800899a:	697b      	ldr	r3, [r7, #20]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	69fa      	ldr	r2, [r7, #28]
 80089a0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	69fa      	ldr	r2, [r7, #28]
 80089a6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	61fb      	str	r3, [r7, #28]
 80089ae:	e009      	b.n	80089c4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	891a      	ldrh	r2, [r3, #8]
 80089b4:	887b      	ldrh	r3, [r7, #2]
 80089b6:	4413      	add	r3, r2
 80089b8:	b29a      	uxth	r2, r3
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	61fb      	str	r3, [r7, #28]
 80089c4:	69fb      	ldr	r3, [r7, #28]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1f2      	bne.n	80089b0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80089ca:	bf00      	nop
 80089cc:	bf00      	nop
 80089ce:	3724      	adds	r7, #36	@ 0x24
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b082      	sub	sp, #8
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f008 fbf9 	bl	80111d8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80089e6:	bf00      	nop
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
	...

080089f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80089f0:	b480      	push	{r7}
 80089f2:	b087      	sub	sp, #28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	4613      	mov	r3, r2
 80089fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80089fe:	2301      	movs	r3, #1
 8008a00:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008a02:	2300      	movs	r3, #0
 8008a04:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008a06:	4b1f      	ldr	r3, [pc, #124]	@ (8008a84 <FATFS_LinkDriverEx+0x94>)
 8008a08:	7a5b      	ldrb	r3, [r3, #9]
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d131      	bne.n	8008a74 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008a10:	4b1c      	ldr	r3, [pc, #112]	@ (8008a84 <FATFS_LinkDriverEx+0x94>)
 8008a12:	7a5b      	ldrb	r3, [r3, #9]
 8008a14:	b2db      	uxtb	r3, r3
 8008a16:	461a      	mov	r2, r3
 8008a18:	4b1a      	ldr	r3, [pc, #104]	@ (8008a84 <FATFS_LinkDriverEx+0x94>)
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008a1e:	4b19      	ldr	r3, [pc, #100]	@ (8008a84 <FATFS_LinkDriverEx+0x94>)
 8008a20:	7a5b      	ldrb	r3, [r3, #9]
 8008a22:	b2db      	uxtb	r3, r3
 8008a24:	4a17      	ldr	r2, [pc, #92]	@ (8008a84 <FATFS_LinkDriverEx+0x94>)
 8008a26:	009b      	lsls	r3, r3, #2
 8008a28:	4413      	add	r3, r2
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008a2e:	4b15      	ldr	r3, [pc, #84]	@ (8008a84 <FATFS_LinkDriverEx+0x94>)
 8008a30:	7a5b      	ldrb	r3, [r3, #9]
 8008a32:	b2db      	uxtb	r3, r3
 8008a34:	461a      	mov	r2, r3
 8008a36:	4b13      	ldr	r3, [pc, #76]	@ (8008a84 <FATFS_LinkDriverEx+0x94>)
 8008a38:	4413      	add	r3, r2
 8008a3a:	79fa      	ldrb	r2, [r7, #7]
 8008a3c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008a3e:	4b11      	ldr	r3, [pc, #68]	@ (8008a84 <FATFS_LinkDriverEx+0x94>)
 8008a40:	7a5b      	ldrb	r3, [r3, #9]
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	1c5a      	adds	r2, r3, #1
 8008a46:	b2d1      	uxtb	r1, r2
 8008a48:	4a0e      	ldr	r2, [pc, #56]	@ (8008a84 <FATFS_LinkDriverEx+0x94>)
 8008a4a:	7251      	strb	r1, [r2, #9]
 8008a4c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008a4e:	7dbb      	ldrb	r3, [r7, #22]
 8008a50:	3330      	adds	r3, #48	@ 0x30
 8008a52:	b2da      	uxtb	r2, r3
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	223a      	movs	r2, #58	@ 0x3a
 8008a5e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	3302      	adds	r3, #2
 8008a64:	222f      	movs	r2, #47	@ 0x2f
 8008a66:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	3303      	adds	r3, #3
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008a70:	2300      	movs	r3, #0
 8008a72:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	371c      	adds	r7, #28
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	20008a50 	.word	0x20008a50

08008a88 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008a92:	2200      	movs	r2, #0
 8008a94:	6839      	ldr	r1, [r7, #0]
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f7ff ffaa 	bl	80089f0 <FATFS_LinkDriverEx>
 8008a9c:	4603      	mov	r3, r0
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3708      	adds	r7, #8
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
	...

08008aa8 <__NVIC_SetPriority>:
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b083      	sub	sp, #12
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	6039      	str	r1, [r7, #0]
 8008ab2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ab4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	db0a      	blt.n	8008ad2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	490c      	ldr	r1, [pc, #48]	@ (8008af4 <__NVIC_SetPriority+0x4c>)
 8008ac2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ac6:	0112      	lsls	r2, r2, #4
 8008ac8:	b2d2      	uxtb	r2, r2
 8008aca:	440b      	add	r3, r1
 8008acc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008ad0:	e00a      	b.n	8008ae8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	b2da      	uxtb	r2, r3
 8008ad6:	4908      	ldr	r1, [pc, #32]	@ (8008af8 <__NVIC_SetPriority+0x50>)
 8008ad8:	79fb      	ldrb	r3, [r7, #7]
 8008ada:	f003 030f 	and.w	r3, r3, #15
 8008ade:	3b04      	subs	r3, #4
 8008ae0:	0112      	lsls	r2, r2, #4
 8008ae2:	b2d2      	uxtb	r2, r2
 8008ae4:	440b      	add	r3, r1
 8008ae6:	761a      	strb	r2, [r3, #24]
}
 8008ae8:	bf00      	nop
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr
 8008af4:	e000e100 	.word	0xe000e100
 8008af8:	e000ed00 	.word	0xe000ed00

08008afc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008afc:	b580      	push	{r7, lr}
 8008afe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008b00:	4b05      	ldr	r3, [pc, #20]	@ (8008b18 <SysTick_Handler+0x1c>)
 8008b02:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008b04:	f002 feb4 	bl	800b870 <xTaskGetSchedulerState>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d001      	beq.n	8008b12 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008b0e:	f003 fdab 	bl	800c668 <xPortSysTickHandler>
  }
}
 8008b12:	bf00      	nop
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	e000e010 	.word	0xe000e010

08008b1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008b20:	2100      	movs	r1, #0
 8008b22:	f06f 0004 	mvn.w	r0, #4
 8008b26:	f7ff ffbf 	bl	8008aa8 <__NVIC_SetPriority>
#endif
}
 8008b2a:	bf00      	nop
 8008b2c:	bd80      	pop	{r7, pc}
	...

08008b30 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b36:	f3ef 8305 	mrs	r3, IPSR
 8008b3a:	603b      	str	r3, [r7, #0]
  return(result);
 8008b3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d003      	beq.n	8008b4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008b42:	f06f 0305 	mvn.w	r3, #5
 8008b46:	607b      	str	r3, [r7, #4]
 8008b48:	e00c      	b.n	8008b64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8008b74 <osKernelInitialize+0x44>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d105      	bne.n	8008b5e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008b52:	4b08      	ldr	r3, [pc, #32]	@ (8008b74 <osKernelInitialize+0x44>)
 8008b54:	2201      	movs	r2, #1
 8008b56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	607b      	str	r3, [r7, #4]
 8008b5c:	e002      	b.n	8008b64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8008b62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008b64:	687b      	ldr	r3, [r7, #4]
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	370c      	adds	r7, #12
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	20008a5c 	.word	0x20008a5c

08008b78 <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8008b7e:	f002 fe77 	bl	800b870 <xTaskGetSchedulerState>
 8008b82:	4603      	mov	r3, r0
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d004      	beq.n	8008b92 <osKernelGetState+0x1a>
 8008b88:	2b02      	cmp	r3, #2
 8008b8a:	d105      	bne.n	8008b98 <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8008b8c:	2302      	movs	r3, #2
 8008b8e:	607b      	str	r3, [r7, #4]
      break;
 8008b90:	e00c      	b.n	8008bac <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8008b92:	2303      	movs	r3, #3
 8008b94:	607b      	str	r3, [r7, #4]
      break;
 8008b96:	e009      	b.n	8008bac <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8008b98:	4b07      	ldr	r3, [pc, #28]	@ (8008bb8 <osKernelGetState+0x40>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	2b01      	cmp	r3, #1
 8008b9e:	d102      	bne.n	8008ba6 <osKernelGetState+0x2e>
        state = osKernelReady;
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8008ba4:	e001      	b.n	8008baa <osKernelGetState+0x32>
        state = osKernelInactive;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	607b      	str	r3, [r7, #4]
      break;
 8008baa:	bf00      	nop
  }

  return (state);
 8008bac:	687b      	ldr	r3, [r7, #4]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3708      	adds	r7, #8
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}
 8008bb6:	bf00      	nop
 8008bb8:	20008a5c 	.word	0x20008a5c

08008bbc <osKernelStart>:

osStatus_t osKernelStart (void) {
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bc2:	f3ef 8305 	mrs	r3, IPSR
 8008bc6:	603b      	str	r3, [r7, #0]
  return(result);
 8008bc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d003      	beq.n	8008bd6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008bce:	f06f 0305 	mvn.w	r3, #5
 8008bd2:	607b      	str	r3, [r7, #4]
 8008bd4:	e010      	b.n	8008bf8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8008c04 <osKernelStart+0x48>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	d109      	bne.n	8008bf2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008bde:	f7ff ff9d 	bl	8008b1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008be2:	4b08      	ldr	r3, [pc, #32]	@ (8008c04 <osKernelStart+0x48>)
 8008be4:	2202      	movs	r2, #2
 8008be6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008be8:	f002 f9a0 	bl	800af2c <vTaskStartScheduler>
      stat = osOK;
 8008bec:	2300      	movs	r3, #0
 8008bee:	607b      	str	r3, [r7, #4]
 8008bf0:	e002      	b.n	8008bf8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8008bf6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008bf8:	687b      	ldr	r3, [r7, #4]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3708      	adds	r7, #8
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
 8008c02:	bf00      	nop
 8008c04:	20008a5c 	.word	0x20008a5c

08008c08 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c0e:	f3ef 8305 	mrs	r3, IPSR
 8008c12:	603b      	str	r3, [r7, #0]
  return(result);
 8008c14:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d003      	beq.n	8008c22 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8008c1a:	f002 fab5 	bl	800b188 <xTaskGetTickCountFromISR>
 8008c1e:	6078      	str	r0, [r7, #4]
 8008c20:	e002      	b.n	8008c28 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8008c22:	f002 faa1 	bl	800b168 <xTaskGetTickCount>
 8008c26:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8008c28:	687b      	ldr	r3, [r7, #4]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b08e      	sub	sp, #56	@ 0x38
 8008c36:	af04      	add	r7, sp, #16
 8008c38:	60f8      	str	r0, [r7, #12]
 8008c3a:	60b9      	str	r1, [r7, #8]
 8008c3c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008c3e:	2300      	movs	r3, #0
 8008c40:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c42:	f3ef 8305 	mrs	r3, IPSR
 8008c46:	617b      	str	r3, [r7, #20]
  return(result);
 8008c48:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d17f      	bne.n	8008d4e <osThreadNew+0x11c>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d07c      	beq.n	8008d4e <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8008c54:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008c58:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008c5a:	2318      	movs	r3, #24
 8008c5c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8008c62:	f04f 33ff 	mov.w	r3, #4294967295
 8008c66:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d045      	beq.n	8008cfa <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d002      	beq.n	8008c7c <osThreadNew+0x4a>
        name = attr->name;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d002      	beq.n	8008c8a <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	699b      	ldr	r3, [r3, #24]
 8008c88:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008c8a:	69fb      	ldr	r3, [r7, #28]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d008      	beq.n	8008ca2 <osThreadNew+0x70>
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	2b38      	cmp	r3, #56	@ 0x38
 8008c94:	d805      	bhi.n	8008ca2 <osThreadNew+0x70>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f003 0301 	and.w	r3, r3, #1
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <osThreadNew+0x74>
        return (NULL);
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	e054      	b.n	8008d50 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	695b      	ldr	r3, [r3, #20]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d003      	beq.n	8008cb6 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	695b      	ldr	r3, [r3, #20]
 8008cb2:	089b      	lsrs	r3, r3, #2
 8008cb4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d00e      	beq.n	8008cdc <osThreadNew+0xaa>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	2bab      	cmp	r3, #171	@ 0xab
 8008cc4:	d90a      	bls.n	8008cdc <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d006      	beq.n	8008cdc <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d002      	beq.n	8008cdc <osThreadNew+0xaa>
        mem = 1;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	61bb      	str	r3, [r7, #24]
 8008cda:	e010      	b.n	8008cfe <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d10c      	bne.n	8008cfe <osThreadNew+0xcc>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d108      	bne.n	8008cfe <osThreadNew+0xcc>
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d104      	bne.n	8008cfe <osThreadNew+0xcc>
          mem = 0;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	61bb      	str	r3, [r7, #24]
 8008cf8:	e001      	b.n	8008cfe <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d110      	bne.n	8008d26 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008d0c:	9202      	str	r2, [sp, #8]
 8008d0e:	9301      	str	r3, [sp, #4]
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	6a3a      	ldr	r2, [r7, #32]
 8008d18:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f001 fe08 	bl	800a930 <xTaskCreateStatic>
 8008d20:	4603      	mov	r3, r0
 8008d22:	613b      	str	r3, [r7, #16]
 8008d24:	e013      	b.n	8008d4e <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d110      	bne.n	8008d4e <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008d2c:	6a3b      	ldr	r3, [r7, #32]
 8008d2e:	b29a      	uxth	r2, r3
 8008d30:	f107 0310 	add.w	r3, r7, #16
 8008d34:	9301      	str	r3, [sp, #4]
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	9300      	str	r3, [sp, #0]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008d3e:	68f8      	ldr	r0, [r7, #12]
 8008d40:	f001 fe56 	bl	800a9f0 <xTaskCreate>
 8008d44:	4603      	mov	r3, r0
 8008d46:	2b01      	cmp	r3, #1
 8008d48:	d001      	beq.n	8008d4e <osThreadNew+0x11c>
            hTask = NULL;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008d4e:	693b      	ldr	r3, [r7, #16]
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	3728      	adds	r7, #40	@ 0x28
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}

08008d58 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b084      	sub	sp, #16
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d60:	f3ef 8305 	mrs	r3, IPSR
 8008d64:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d66:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d003      	beq.n	8008d74 <osDelay+0x1c>
    stat = osErrorISR;
 8008d6c:	f06f 0305 	mvn.w	r3, #5
 8008d70:	60fb      	str	r3, [r7, #12]
 8008d72:	e007      	b.n	8008d84 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008d74:	2300      	movs	r3, #0
 8008d76:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d002      	beq.n	8008d84 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f001 ff96 	bl	800acb0 <vTaskDelay>
    }
  }

  return (stat);
 8008d84:	68fb      	ldr	r3, [r7, #12]
}
 8008d86:	4618      	mov	r0, r3
 8008d88:	3710      	adds	r7, #16
 8008d8a:	46bd      	mov	sp, r7
 8008d8c:	bd80      	pop	{r7, pc}

08008d8e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8008d8e:	b580      	push	{r7, lr}
 8008d90:	b088      	sub	sp, #32
 8008d92:	af00      	add	r7, sp, #0
 8008d94:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8008d96:	2300      	movs	r3, #0
 8008d98:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d9a:	f3ef 8305 	mrs	r3, IPSR
 8008d9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008da0:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d174      	bne.n	8008e90 <osMutexNew+0x102>
    if (attr != NULL) {
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d003      	beq.n	8008db4 <osMutexNew+0x26>
      type = attr->attr_bits;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	61bb      	str	r3, [r7, #24]
 8008db2:	e001      	b.n	8008db8 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8008db4:	2300      	movs	r3, #0
 8008db6:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	f003 0301 	and.w	r3, r3, #1
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d002      	beq.n	8008dc8 <osMutexNew+0x3a>
      rmtx = 1U;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	617b      	str	r3, [r7, #20]
 8008dc6:	e001      	b.n	8008dcc <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8008dc8:	2300      	movs	r3, #0
 8008dca:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008dcc:	69bb      	ldr	r3, [r7, #24]
 8008dce:	f003 0308 	and.w	r3, r3, #8
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d15c      	bne.n	8008e90 <osMutexNew+0x102>
      mem = -1;
 8008dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8008dda:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d015      	beq.n	8008e0e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	689b      	ldr	r3, [r3, #8]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d006      	beq.n	8008df8 <osMutexNew+0x6a>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	2b4f      	cmp	r3, #79	@ 0x4f
 8008df0:	d902      	bls.n	8008df8 <osMutexNew+0x6a>
          mem = 1;
 8008df2:	2301      	movs	r3, #1
 8008df4:	613b      	str	r3, [r7, #16]
 8008df6:	e00c      	b.n	8008e12 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d108      	bne.n	8008e12 <osMutexNew+0x84>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d104      	bne.n	8008e12 <osMutexNew+0x84>
            mem = 0;
 8008e08:	2300      	movs	r3, #0
 8008e0a:	613b      	str	r3, [r7, #16]
 8008e0c:	e001      	b.n	8008e12 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	2b01      	cmp	r3, #1
 8008e16:	d112      	bne.n	8008e3e <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d007      	beq.n	8008e2e <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	689b      	ldr	r3, [r3, #8]
 8008e22:	4619      	mov	r1, r3
 8008e24:	2004      	movs	r0, #4
 8008e26:	f000 fdd8 	bl	80099da <xQueueCreateMutexStatic>
 8008e2a:	61f8      	str	r0, [r7, #28]
 8008e2c:	e016      	b.n	8008e5c <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	689b      	ldr	r3, [r3, #8]
 8008e32:	4619      	mov	r1, r3
 8008e34:	2001      	movs	r0, #1
 8008e36:	f000 fdd0 	bl	80099da <xQueueCreateMutexStatic>
 8008e3a:	61f8      	str	r0, [r7, #28]
 8008e3c:	e00e      	b.n	8008e5c <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10b      	bne.n	8008e5c <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d004      	beq.n	8008e54 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8008e4a:	2004      	movs	r0, #4
 8008e4c:	f000 fdad 	bl	80099aa <xQueueCreateMutex>
 8008e50:	61f8      	str	r0, [r7, #28]
 8008e52:	e003      	b.n	8008e5c <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8008e54:	2001      	movs	r0, #1
 8008e56:	f000 fda8 	bl	80099aa <xQueueCreateMutex>
 8008e5a:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00c      	beq.n	8008e7c <osMutexNew+0xee>
        if (attr != NULL) {
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d003      	beq.n	8008e70 <osMutexNew+0xe2>
          name = attr->name;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	60fb      	str	r3, [r7, #12]
 8008e6e:	e001      	b.n	8008e74 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8008e70:	2300      	movs	r3, #0
 8008e72:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8008e74:	68f9      	ldr	r1, [r7, #12]
 8008e76:	69f8      	ldr	r0, [r7, #28]
 8008e78:	f001 fcd2 	bl	800a820 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d006      	beq.n	8008e90 <osMutexNew+0x102>
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d003      	beq.n	8008e90 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	f043 0301 	orr.w	r3, r3, #1
 8008e8e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8008e90:	69fb      	ldr	r3, [r7, #28]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3720      	adds	r7, #32
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	b086      	sub	sp, #24
 8008e9e:	af00      	add	r7, sp, #0
 8008ea0:	6078      	str	r0, [r7, #4]
 8008ea2:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f023 0301 	bic.w	r3, r3, #1
 8008eaa:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f003 0301 	and.w	r3, r3, #1
 8008eb2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008eb4:	2300      	movs	r3, #0
 8008eb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008eb8:	f3ef 8305 	mrs	r3, IPSR
 8008ebc:	60bb      	str	r3, [r7, #8]
  return(result);
 8008ebe:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d003      	beq.n	8008ecc <osMutexAcquire+0x32>
    stat = osErrorISR;
 8008ec4:	f06f 0305 	mvn.w	r3, #5
 8008ec8:	617b      	str	r3, [r7, #20]
 8008eca:	e02c      	b.n	8008f26 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d103      	bne.n	8008eda <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8008ed2:	f06f 0303 	mvn.w	r3, #3
 8008ed6:	617b      	str	r3, [r7, #20]
 8008ed8:	e025      	b.n	8008f26 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d011      	beq.n	8008f04 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8008ee0:	6839      	ldr	r1, [r7, #0]
 8008ee2:	6938      	ldr	r0, [r7, #16]
 8008ee4:	f000 fdc9 	bl	8009a7a <xQueueTakeMutexRecursive>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d01b      	beq.n	8008f26 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d003      	beq.n	8008efc <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8008ef4:	f06f 0301 	mvn.w	r3, #1
 8008ef8:	617b      	str	r3, [r7, #20]
 8008efa:	e014      	b.n	8008f26 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008efc:	f06f 0302 	mvn.w	r3, #2
 8008f00:	617b      	str	r3, [r7, #20]
 8008f02:	e010      	b.n	8008f26 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6938      	ldr	r0, [r7, #16]
 8008f08:	f001 f96e 	bl	800a1e8 <xQueueSemaphoreTake>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d009      	beq.n	8008f26 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d003      	beq.n	8008f20 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8008f18:	f06f 0301 	mvn.w	r3, #1
 8008f1c:	617b      	str	r3, [r7, #20]
 8008f1e:	e002      	b.n	8008f26 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8008f20:	f06f 0302 	mvn.w	r3, #2
 8008f24:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8008f26:	697b      	ldr	r3, [r7, #20]
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	3718      	adds	r7, #24
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}

08008f30 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b086      	sub	sp, #24
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f023 0301 	bic.w	r3, r3, #1
 8008f3e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	f003 0301 	and.w	r3, r3, #1
 8008f46:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f4c:	f3ef 8305 	mrs	r3, IPSR
 8008f50:	60bb      	str	r3, [r7, #8]
  return(result);
 8008f52:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d003      	beq.n	8008f60 <osMutexRelease+0x30>
    stat = osErrorISR;
 8008f58:	f06f 0305 	mvn.w	r3, #5
 8008f5c:	617b      	str	r3, [r7, #20]
 8008f5e:	e01f      	b.n	8008fa0 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d103      	bne.n	8008f6e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8008f66:	f06f 0303 	mvn.w	r3, #3
 8008f6a:	617b      	str	r3, [r7, #20]
 8008f6c:	e018      	b.n	8008fa0 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d009      	beq.n	8008f88 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008f74:	6938      	ldr	r0, [r7, #16]
 8008f76:	f000 fd4b 	bl	8009a10 <xQueueGiveMutexRecursive>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d00f      	beq.n	8008fa0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008f80:	f06f 0302 	mvn.w	r3, #2
 8008f84:	617b      	str	r3, [r7, #20]
 8008f86:	e00b      	b.n	8008fa0 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008f88:	2300      	movs	r3, #0
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	6938      	ldr	r0, [r7, #16]
 8008f90:	f000 fe18 	bl	8009bc4 <xQueueGenericSend>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d002      	beq.n	8008fa0 <osMutexRelease+0x70>
        stat = osErrorResource;
 8008f9a:	f06f 0302 	mvn.w	r3, #2
 8008f9e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008fa0:	697b      	ldr	r3, [r7, #20]
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3718      	adds	r7, #24
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}

08008faa <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008faa:	b580      	push	{r7, lr}
 8008fac:	b08a      	sub	sp, #40	@ 0x28
 8008fae:	af02      	add	r7, sp, #8
 8008fb0:	60f8      	str	r0, [r7, #12]
 8008fb2:	60b9      	str	r1, [r7, #8]
 8008fb4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fba:	f3ef 8305 	mrs	r3, IPSR
 8008fbe:	613b      	str	r3, [r7, #16]
  return(result);
 8008fc0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d175      	bne.n	80090b2 <osSemaphoreNew+0x108>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d072      	beq.n	80090b2 <osSemaphoreNew+0x108>
 8008fcc:	68ba      	ldr	r2, [r7, #8]
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	429a      	cmp	r2, r3
 8008fd2:	d86e      	bhi.n	80090b2 <osSemaphoreNew+0x108>
    mem = -1;
 8008fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8008fd8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d015      	beq.n	800900c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	689b      	ldr	r3, [r3, #8]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d006      	beq.n	8008ff6 <osSemaphoreNew+0x4c>
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	2b4f      	cmp	r3, #79	@ 0x4f
 8008fee:	d902      	bls.n	8008ff6 <osSemaphoreNew+0x4c>
        mem = 1;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	61bb      	str	r3, [r7, #24]
 8008ff4:	e00c      	b.n	8009010 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d108      	bne.n	8009010 <osSemaphoreNew+0x66>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	68db      	ldr	r3, [r3, #12]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d104      	bne.n	8009010 <osSemaphoreNew+0x66>
          mem = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	61bb      	str	r3, [r7, #24]
 800900a:	e001      	b.n	8009010 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800900c:	2300      	movs	r3, #0
 800900e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009010:	69bb      	ldr	r3, [r7, #24]
 8009012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009016:	d04c      	beq.n	80090b2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d128      	bne.n	8009070 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	2b01      	cmp	r3, #1
 8009022:	d10a      	bne.n	800903a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	2203      	movs	r2, #3
 800902a:	9200      	str	r2, [sp, #0]
 800902c:	2200      	movs	r2, #0
 800902e:	2100      	movs	r1, #0
 8009030:	2001      	movs	r0, #1
 8009032:	f000 fbc5 	bl	80097c0 <xQueueGenericCreateStatic>
 8009036:	61f8      	str	r0, [r7, #28]
 8009038:	e005      	b.n	8009046 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800903a:	2203      	movs	r2, #3
 800903c:	2100      	movs	r1, #0
 800903e:	2001      	movs	r0, #1
 8009040:	f000 fc3b 	bl	80098ba <xQueueGenericCreate>
 8009044:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d022      	beq.n	8009092 <osSemaphoreNew+0xe8>
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d01f      	beq.n	8009092 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009052:	2300      	movs	r3, #0
 8009054:	2200      	movs	r2, #0
 8009056:	2100      	movs	r1, #0
 8009058:	69f8      	ldr	r0, [r7, #28]
 800905a:	f000 fdb3 	bl	8009bc4 <xQueueGenericSend>
 800905e:	4603      	mov	r3, r0
 8009060:	2b01      	cmp	r3, #1
 8009062:	d016      	beq.n	8009092 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009064:	69f8      	ldr	r0, [r7, #28]
 8009066:	f001 fa8f 	bl	800a588 <vQueueDelete>
            hSemaphore = NULL;
 800906a:	2300      	movs	r3, #0
 800906c:	61fb      	str	r3, [r7, #28]
 800906e:	e010      	b.n	8009092 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	2b01      	cmp	r3, #1
 8009074:	d108      	bne.n	8009088 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	689b      	ldr	r3, [r3, #8]
 800907a:	461a      	mov	r2, r3
 800907c:	68b9      	ldr	r1, [r7, #8]
 800907e:	68f8      	ldr	r0, [r7, #12]
 8009080:	f000 fd32 	bl	8009ae8 <xQueueCreateCountingSemaphoreStatic>
 8009084:	61f8      	str	r0, [r7, #28]
 8009086:	e004      	b.n	8009092 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8009088:	68b9      	ldr	r1, [r7, #8]
 800908a:	68f8      	ldr	r0, [r7, #12]
 800908c:	f000 fd65 	bl	8009b5a <xQueueCreateCountingSemaphore>
 8009090:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8009092:	69fb      	ldr	r3, [r7, #28]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00c      	beq.n	80090b2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d003      	beq.n	80090a6 <osSemaphoreNew+0xfc>
          name = attr->name;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	617b      	str	r3, [r7, #20]
 80090a4:	e001      	b.n	80090aa <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80090a6:	2300      	movs	r3, #0
 80090a8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80090aa:	6979      	ldr	r1, [r7, #20]
 80090ac:	69f8      	ldr	r0, [r7, #28]
 80090ae:	f001 fbb7 	bl	800a820 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80090b2:	69fb      	ldr	r3, [r7, #28]
}
 80090b4:	4618      	mov	r0, r3
 80090b6:	3720      	adds	r7, #32
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bd80      	pop	{r7, pc}

080090bc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80090bc:	b580      	push	{r7, lr}
 80090be:	b086      	sub	sp, #24
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	6078      	str	r0, [r7, #4]
 80090c4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d103      	bne.n	80090dc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80090d4:	f06f 0303 	mvn.w	r3, #3
 80090d8:	617b      	str	r3, [r7, #20]
 80090da:	e039      	b.n	8009150 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80090dc:	f3ef 8305 	mrs	r3, IPSR
 80090e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80090e2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d022      	beq.n	800912e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80090ee:	f06f 0303 	mvn.w	r3, #3
 80090f2:	617b      	str	r3, [r7, #20]
 80090f4:	e02c      	b.n	8009150 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80090f6:	2300      	movs	r3, #0
 80090f8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80090fa:	f107 0308 	add.w	r3, r7, #8
 80090fe:	461a      	mov	r2, r3
 8009100:	2100      	movs	r1, #0
 8009102:	6938      	ldr	r0, [r7, #16]
 8009104:	f001 f980 	bl	800a408 <xQueueReceiveFromISR>
 8009108:	4603      	mov	r3, r0
 800910a:	2b01      	cmp	r3, #1
 800910c:	d003      	beq.n	8009116 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800910e:	f06f 0302 	mvn.w	r3, #2
 8009112:	617b      	str	r3, [r7, #20]
 8009114:	e01c      	b.n	8009150 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d019      	beq.n	8009150 <osSemaphoreAcquire+0x94>
 800911c:	4b0f      	ldr	r3, [pc, #60]	@ (800915c <osSemaphoreAcquire+0xa0>)
 800911e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	f3bf 8f4f 	dsb	sy
 8009128:	f3bf 8f6f 	isb	sy
 800912c:	e010      	b.n	8009150 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800912e:	6839      	ldr	r1, [r7, #0]
 8009130:	6938      	ldr	r0, [r7, #16]
 8009132:	f001 f859 	bl	800a1e8 <xQueueSemaphoreTake>
 8009136:	4603      	mov	r3, r0
 8009138:	2b01      	cmp	r3, #1
 800913a:	d009      	beq.n	8009150 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009142:	f06f 0301 	mvn.w	r3, #1
 8009146:	617b      	str	r3, [r7, #20]
 8009148:	e002      	b.n	8009150 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800914a:	f06f 0302 	mvn.w	r3, #2
 800914e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009150:	697b      	ldr	r3, [r7, #20]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3718      	adds	r7, #24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}
 800915a:	bf00      	nop
 800915c:	e000ed04 	.word	0xe000ed04

08009160 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009160:	b580      	push	{r7, lr}
 8009162:	b086      	sub	sp, #24
 8009164:	af00      	add	r7, sp, #0
 8009166:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800916c:	2300      	movs	r3, #0
 800916e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d103      	bne.n	800917e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8009176:	f06f 0303 	mvn.w	r3, #3
 800917a:	617b      	str	r3, [r7, #20]
 800917c:	e02c      	b.n	80091d8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800917e:	f3ef 8305 	mrs	r3, IPSR
 8009182:	60fb      	str	r3, [r7, #12]
  return(result);
 8009184:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8009186:	2b00      	cmp	r3, #0
 8009188:	d01a      	beq.n	80091c0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800918a:	2300      	movs	r3, #0
 800918c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800918e:	f107 0308 	add.w	r3, r7, #8
 8009192:	4619      	mov	r1, r3
 8009194:	6938      	ldr	r0, [r7, #16]
 8009196:	f000 feb5 	bl	8009f04 <xQueueGiveFromISR>
 800919a:	4603      	mov	r3, r0
 800919c:	2b01      	cmp	r3, #1
 800919e:	d003      	beq.n	80091a8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80091a0:	f06f 0302 	mvn.w	r3, #2
 80091a4:	617b      	str	r3, [r7, #20]
 80091a6:	e017      	b.n	80091d8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80091a8:	68bb      	ldr	r3, [r7, #8]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d014      	beq.n	80091d8 <osSemaphoreRelease+0x78>
 80091ae:	4b0d      	ldr	r3, [pc, #52]	@ (80091e4 <osSemaphoreRelease+0x84>)
 80091b0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80091b4:	601a      	str	r2, [r3, #0]
 80091b6:	f3bf 8f4f 	dsb	sy
 80091ba:	f3bf 8f6f 	isb	sy
 80091be:	e00b      	b.n	80091d8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80091c0:	2300      	movs	r3, #0
 80091c2:	2200      	movs	r2, #0
 80091c4:	2100      	movs	r1, #0
 80091c6:	6938      	ldr	r0, [r7, #16]
 80091c8:	f000 fcfc 	bl	8009bc4 <xQueueGenericSend>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d002      	beq.n	80091d8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80091d2:	f06f 0302 	mvn.w	r3, #2
 80091d6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80091d8:	697b      	ldr	r3, [r7, #20]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3718      	adds	r7, #24
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
 80091e2:	bf00      	nop
 80091e4:	e000ed04 	.word	0xe000ed04

080091e8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80091e8:	b580      	push	{r7, lr}
 80091ea:	b086      	sub	sp, #24
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091f4:	f3ef 8305 	mrs	r3, IPSR
 80091f8:	60fb      	str	r3, [r7, #12]
  return(result);
 80091fa:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d003      	beq.n	8009208 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8009200:	f06f 0305 	mvn.w	r3, #5
 8009204:	617b      	str	r3, [r7, #20]
 8009206:	e00e      	b.n	8009226 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8009208:	693b      	ldr	r3, [r7, #16]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d103      	bne.n	8009216 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800920e:	f06f 0303 	mvn.w	r3, #3
 8009212:	617b      	str	r3, [r7, #20]
 8009214:	e007      	b.n	8009226 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8009216:	6938      	ldr	r0, [r7, #16]
 8009218:	f001 fb2c 	bl	800a874 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800921c:	2300      	movs	r3, #0
 800921e:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8009220:	6938      	ldr	r0, [r7, #16]
 8009222:	f001 f9b1 	bl	800a588 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009226:	697b      	ldr	r3, [r7, #20]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3718      	adds	r7, #24
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8009230:	b580      	push	{r7, lr}
 8009232:	b08a      	sub	sp, #40	@ 0x28
 8009234:	af02      	add	r7, sp, #8
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800923c:	2300      	movs	r3, #0
 800923e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009240:	f3ef 8305 	mrs	r3, IPSR
 8009244:	613b      	str	r3, [r7, #16]
  return(result);
 8009246:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009248:	2b00      	cmp	r3, #0
 800924a:	d15f      	bne.n	800930c <osMessageQueueNew+0xdc>
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d05c      	beq.n	800930c <osMessageQueueNew+0xdc>
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d059      	beq.n	800930c <osMessageQueueNew+0xdc>
    mem = -1;
 8009258:	f04f 33ff 	mov.w	r3, #4294967295
 800925c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2b00      	cmp	r3, #0
 8009262:	d029      	beq.n	80092b8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	689b      	ldr	r3, [r3, #8]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d012      	beq.n	8009292 <osMessageQueueNew+0x62>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	2b4f      	cmp	r3, #79	@ 0x4f
 8009272:	d90e      	bls.n	8009292 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00a      	beq.n	8009292 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	695a      	ldr	r2, [r3, #20]
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	68b9      	ldr	r1, [r7, #8]
 8009284:	fb01 f303 	mul.w	r3, r1, r3
 8009288:	429a      	cmp	r2, r3
 800928a:	d302      	bcc.n	8009292 <osMessageQueueNew+0x62>
        mem = 1;
 800928c:	2301      	movs	r3, #1
 800928e:	61bb      	str	r3, [r7, #24]
 8009290:	e014      	b.n	80092bc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	689b      	ldr	r3, [r3, #8]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d110      	bne.n	80092bc <osMessageQueueNew+0x8c>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	68db      	ldr	r3, [r3, #12]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10c      	bne.n	80092bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d108      	bne.n	80092bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d104      	bne.n	80092bc <osMessageQueueNew+0x8c>
          mem = 0;
 80092b2:	2300      	movs	r3, #0
 80092b4:	61bb      	str	r3, [r7, #24]
 80092b6:	e001      	b.n	80092bc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80092b8:	2300      	movs	r3, #0
 80092ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80092bc:	69bb      	ldr	r3, [r7, #24]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	d10b      	bne.n	80092da <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	691a      	ldr	r2, [r3, #16]
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	689b      	ldr	r3, [r3, #8]
 80092ca:	2100      	movs	r1, #0
 80092cc:	9100      	str	r1, [sp, #0]
 80092ce:	68b9      	ldr	r1, [r7, #8]
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f000 fa75 	bl	80097c0 <xQueueGenericCreateStatic>
 80092d6:	61f8      	str	r0, [r7, #28]
 80092d8:	e008      	b.n	80092ec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80092da:	69bb      	ldr	r3, [r7, #24]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d105      	bne.n	80092ec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80092e0:	2200      	movs	r2, #0
 80092e2:	68b9      	ldr	r1, [r7, #8]
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f000 fae8 	bl	80098ba <xQueueGenericCreate>
 80092ea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80092ec:	69fb      	ldr	r3, [r7, #28]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00c      	beq.n	800930c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d003      	beq.n	8009300 <osMessageQueueNew+0xd0>
        name = attr->name;
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	617b      	str	r3, [r7, #20]
 80092fe:	e001      	b.n	8009304 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8009300:	2300      	movs	r3, #0
 8009302:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8009304:	6979      	ldr	r1, [r7, #20]
 8009306:	69f8      	ldr	r0, [r7, #28]
 8009308:	f001 fa8a 	bl	800a820 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800930c:	69fb      	ldr	r3, [r7, #28]
}
 800930e:	4618      	mov	r0, r3
 8009310:	3720      	adds	r7, #32
 8009312:	46bd      	mov	sp, r7
 8009314:	bd80      	pop	{r7, pc}
	...

08009318 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8009318:	b580      	push	{r7, lr}
 800931a:	b088      	sub	sp, #32
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	603b      	str	r3, [r7, #0]
 8009324:	4613      	mov	r3, r2
 8009326:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800932c:	2300      	movs	r3, #0
 800932e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009330:	f3ef 8305 	mrs	r3, IPSR
 8009334:	617b      	str	r3, [r7, #20]
  return(result);
 8009336:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009338:	2b00      	cmp	r3, #0
 800933a:	d028      	beq.n	800938e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800933c:	69bb      	ldr	r3, [r7, #24]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d005      	beq.n	800934e <osMessageQueuePut+0x36>
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d002      	beq.n	800934e <osMessageQueuePut+0x36>
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800934e:	f06f 0303 	mvn.w	r3, #3
 8009352:	61fb      	str	r3, [r7, #28]
 8009354:	e038      	b.n	80093c8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009356:	2300      	movs	r3, #0
 8009358:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800935a:	f107 0210 	add.w	r2, r7, #16
 800935e:	2300      	movs	r3, #0
 8009360:	68b9      	ldr	r1, [r7, #8]
 8009362:	69b8      	ldr	r0, [r7, #24]
 8009364:	f000 fd30 	bl	8009dc8 <xQueueGenericSendFromISR>
 8009368:	4603      	mov	r3, r0
 800936a:	2b01      	cmp	r3, #1
 800936c:	d003      	beq.n	8009376 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800936e:	f06f 0302 	mvn.w	r3, #2
 8009372:	61fb      	str	r3, [r7, #28]
 8009374:	e028      	b.n	80093c8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d025      	beq.n	80093c8 <osMessageQueuePut+0xb0>
 800937c:	4b15      	ldr	r3, [pc, #84]	@ (80093d4 <osMessageQueuePut+0xbc>)
 800937e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009382:	601a      	str	r2, [r3, #0]
 8009384:	f3bf 8f4f 	dsb	sy
 8009388:	f3bf 8f6f 	isb	sy
 800938c:	e01c      	b.n	80093c8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800938e:	69bb      	ldr	r3, [r7, #24]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d002      	beq.n	800939a <osMessageQueuePut+0x82>
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d103      	bne.n	80093a2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800939a:	f06f 0303 	mvn.w	r3, #3
 800939e:	61fb      	str	r3, [r7, #28]
 80093a0:	e012      	b.n	80093c8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80093a2:	2300      	movs	r3, #0
 80093a4:	683a      	ldr	r2, [r7, #0]
 80093a6:	68b9      	ldr	r1, [r7, #8]
 80093a8:	69b8      	ldr	r0, [r7, #24]
 80093aa:	f000 fc0b 	bl	8009bc4 <xQueueGenericSend>
 80093ae:	4603      	mov	r3, r0
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d009      	beq.n	80093c8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d003      	beq.n	80093c2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80093ba:	f06f 0301 	mvn.w	r3, #1
 80093be:	61fb      	str	r3, [r7, #28]
 80093c0:	e002      	b.n	80093c8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80093c2:	f06f 0302 	mvn.w	r3, #2
 80093c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80093c8:	69fb      	ldr	r3, [r7, #28]
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3720      	adds	r7, #32
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	e000ed04 	.word	0xe000ed04

080093d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80093d8:	b580      	push	{r7, lr}
 80093da:	b088      	sub	sp, #32
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
 80093e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80093ea:	2300      	movs	r3, #0
 80093ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093ee:	f3ef 8305 	mrs	r3, IPSR
 80093f2:	617b      	str	r3, [r7, #20]
  return(result);
 80093f4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d028      	beq.n	800944c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80093fa:	69bb      	ldr	r3, [r7, #24]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d005      	beq.n	800940c <osMessageQueueGet+0x34>
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d002      	beq.n	800940c <osMessageQueueGet+0x34>
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	2b00      	cmp	r3, #0
 800940a:	d003      	beq.n	8009414 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800940c:	f06f 0303 	mvn.w	r3, #3
 8009410:	61fb      	str	r3, [r7, #28]
 8009412:	e037      	b.n	8009484 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8009414:	2300      	movs	r3, #0
 8009416:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8009418:	f107 0310 	add.w	r3, r7, #16
 800941c:	461a      	mov	r2, r3
 800941e:	68b9      	ldr	r1, [r7, #8]
 8009420:	69b8      	ldr	r0, [r7, #24]
 8009422:	f000 fff1 	bl	800a408 <xQueueReceiveFromISR>
 8009426:	4603      	mov	r3, r0
 8009428:	2b01      	cmp	r3, #1
 800942a:	d003      	beq.n	8009434 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800942c:	f06f 0302 	mvn.w	r3, #2
 8009430:	61fb      	str	r3, [r7, #28]
 8009432:	e027      	b.n	8009484 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d024      	beq.n	8009484 <osMessageQueueGet+0xac>
 800943a:	4b15      	ldr	r3, [pc, #84]	@ (8009490 <osMessageQueueGet+0xb8>)
 800943c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009440:	601a      	str	r2, [r3, #0]
 8009442:	f3bf 8f4f 	dsb	sy
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	e01b      	b.n	8009484 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800944c:	69bb      	ldr	r3, [r7, #24]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d002      	beq.n	8009458 <osMessageQueueGet+0x80>
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d103      	bne.n	8009460 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009458:	f06f 0303 	mvn.w	r3, #3
 800945c:	61fb      	str	r3, [r7, #28]
 800945e:	e011      	b.n	8009484 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8009460:	683a      	ldr	r2, [r7, #0]
 8009462:	68b9      	ldr	r1, [r7, #8]
 8009464:	69b8      	ldr	r0, [r7, #24]
 8009466:	f000 fddd 	bl	800a024 <xQueueReceive>
 800946a:	4603      	mov	r3, r0
 800946c:	2b01      	cmp	r3, #1
 800946e:	d009      	beq.n	8009484 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8009470:	683b      	ldr	r3, [r7, #0]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d003      	beq.n	800947e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009476:	f06f 0301 	mvn.w	r3, #1
 800947a:	61fb      	str	r3, [r7, #28]
 800947c:	e002      	b.n	8009484 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800947e:	f06f 0302 	mvn.w	r3, #2
 8009482:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009484:	69fb      	ldr	r3, [r7, #28]
}
 8009486:	4618      	mov	r0, r3
 8009488:	3720      	adds	r7, #32
 800948a:	46bd      	mov	sp, r7
 800948c:	bd80      	pop	{r7, pc}
 800948e:	bf00      	nop
 8009490:	e000ed04 	.word	0xe000ed04

08009494 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8009494:	b580      	push	{r7, lr}
 8009496:	b086      	sub	sp, #24
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d102      	bne.n	80094ac <osMessageQueueGetCount+0x18>
    count = 0U;
 80094a6:	2300      	movs	r3, #0
 80094a8:	617b      	str	r3, [r7, #20]
 80094aa:	e00e      	b.n	80094ca <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094ac:	f3ef 8305 	mrs	r3, IPSR
 80094b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80094b2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d004      	beq.n	80094c2 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80094b8:	6938      	ldr	r0, [r7, #16]
 80094ba:	f001 f846 	bl	800a54a <uxQueueMessagesWaitingFromISR>
 80094be:	6178      	str	r0, [r7, #20]
 80094c0:	e003      	b.n	80094ca <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80094c2:	6938      	ldr	r0, [r7, #16]
 80094c4:	f001 f822 	bl	800a50c <uxQueueMessagesWaiting>
 80094c8:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80094ca:	697b      	ldr	r3, [r7, #20]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b086      	sub	sp, #24
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80094e0:	f3ef 8305 	mrs	r3, IPSR
 80094e4:	60fb      	str	r3, [r7, #12]
  return(result);
 80094e6:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d003      	beq.n	80094f4 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 80094ec:	f06f 0305 	mvn.w	r3, #5
 80094f0:	617b      	str	r3, [r7, #20]
 80094f2:	e00e      	b.n	8009512 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d103      	bne.n	8009502 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 80094fa:	f06f 0303 	mvn.w	r3, #3
 80094fe:	617b      	str	r3, [r7, #20]
 8009500:	e007      	b.n	8009512 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 8009502:	6938      	ldr	r0, [r7, #16]
 8009504:	f001 f9b6 	bl	800a874 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8009508:	2300      	movs	r3, #0
 800950a:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 800950c:	6938      	ldr	r0, [r7, #16]
 800950e:	f001 f83b 	bl	800a588 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8009512:	697b      	ldr	r3, [r7, #20]
}
 8009514:	4618      	mov	r0, r3
 8009516:	3718      	adds	r7, #24
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800951c:	b480      	push	{r7}
 800951e:	b085      	sub	sp, #20
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	4a07      	ldr	r2, [pc, #28]	@ (8009548 <vApplicationGetIdleTaskMemory+0x2c>)
 800952c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	4a06      	ldr	r2, [pc, #24]	@ (800954c <vApplicationGetIdleTaskMemory+0x30>)
 8009532:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800953a:	601a      	str	r2, [r3, #0]
}
 800953c:	bf00      	nop
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr
 8009548:	20008a60 	.word	0x20008a60
 800954c:	20008b0c 	.word	0x20008b0c

08009550 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	60f8      	str	r0, [r7, #12]
 8009558:	60b9      	str	r1, [r7, #8]
 800955a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	4a07      	ldr	r2, [pc, #28]	@ (800957c <vApplicationGetTimerTaskMemory+0x2c>)
 8009560:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	4a06      	ldr	r2, [pc, #24]	@ (8009580 <vApplicationGetTimerTaskMemory+0x30>)
 8009566:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800956e:	601a      	str	r2, [r3, #0]
}
 8009570:	bf00      	nop
 8009572:	3714      	adds	r7, #20
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr
 800957c:	2000930c 	.word	0x2000930c
 8009580:	200093b8 	.word	0x200093b8

08009584 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	f103 0208 	add.w	r2, r3, #8
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f04f 32ff 	mov.w	r2, #4294967295
 800959c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f103 0208 	add.w	r2, r3, #8
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f103 0208 	add.w	r2, r3, #8
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2200      	movs	r2, #0
 80095d0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80095d2:	bf00      	nop
 80095d4:	370c      	adds	r7, #12
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr

080095de <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095de:	b480      	push	{r7}
 80095e0:	b085      	sub	sp, #20
 80095e2:	af00      	add	r7, sp, #0
 80095e4:	6078      	str	r0, [r7, #4]
 80095e6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	689a      	ldr	r2, [r3, #8]
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	683a      	ldr	r2, [r7, #0]
 8009602:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	683a      	ldr	r2, [r7, #0]
 8009608:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	1c5a      	adds	r2, r3, #1
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	601a      	str	r2, [r3, #0]
}
 800961a:	bf00      	nop
 800961c:	3714      	adds	r7, #20
 800961e:	46bd      	mov	sp, r7
 8009620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009624:	4770      	bx	lr

08009626 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009626:	b480      	push	{r7}
 8009628:	b085      	sub	sp, #20
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
 800962e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963c:	d103      	bne.n	8009646 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	60fb      	str	r3, [r7, #12]
 8009644:	e00c      	b.n	8009660 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	3308      	adds	r3, #8
 800964a:	60fb      	str	r3, [r7, #12]
 800964c:	e002      	b.n	8009654 <vListInsert+0x2e>
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	60fb      	str	r3, [r7, #12]
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	429a      	cmp	r2, r3
 800965e:	d2f6      	bcs.n	800964e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	685b      	ldr	r3, [r3, #4]
 800966c:	683a      	ldr	r2, [r7, #0]
 800966e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	683a      	ldr	r2, [r7, #0]
 800967a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	687a      	ldr	r2, [r7, #4]
 8009680:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	1c5a      	adds	r2, r3, #1
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	601a      	str	r2, [r3, #0]
}
 800968c:	bf00      	nop
 800968e:	3714      	adds	r7, #20
 8009690:	46bd      	mov	sp, r7
 8009692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009696:	4770      	bx	lr

08009698 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	691b      	ldr	r3, [r3, #16]
 80096a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	685b      	ldr	r3, [r3, #4]
 80096aa:	687a      	ldr	r2, [r7, #4]
 80096ac:	6892      	ldr	r2, [r2, #8]
 80096ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	6852      	ldr	r2, [r2, #4]
 80096b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	687a      	ldr	r2, [r7, #4]
 80096c0:	429a      	cmp	r2, r3
 80096c2:	d103      	bne.n	80096cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	689a      	ldr	r2, [r3, #8]
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2200      	movs	r2, #0
 80096d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	1e5a      	subs	r2, r3, #1
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3714      	adds	r7, #20
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10b      	bne.n	8009718 <xQueueGenericReset+0x2c>
	__asm volatile
 8009700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009704:	f383 8811 	msr	BASEPRI, r3
 8009708:	f3bf 8f6f 	isb	sy
 800970c:	f3bf 8f4f 	dsb	sy
 8009710:	60bb      	str	r3, [r7, #8]
}
 8009712:	bf00      	nop
 8009714:	bf00      	nop
 8009716:	e7fd      	b.n	8009714 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009718:	f002 ff16 	bl	800c548 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	681a      	ldr	r2, [r3, #0]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009724:	68f9      	ldr	r1, [r7, #12]
 8009726:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009728:	fb01 f303 	mul.w	r3, r1, r3
 800972c:	441a      	add	r2, r3
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2200      	movs	r2, #0
 8009736:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009748:	3b01      	subs	r3, #1
 800974a:	68f9      	ldr	r1, [r7, #12]
 800974c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800974e:	fb01 f303 	mul.w	r3, r1, r3
 8009752:	441a      	add	r2, r3
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	22ff      	movs	r2, #255	@ 0xff
 800975c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	22ff      	movs	r2, #255	@ 0xff
 8009764:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d114      	bne.n	8009798 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	691b      	ldr	r3, [r3, #16]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d01a      	beq.n	80097ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	3310      	adds	r3, #16
 800977a:	4618      	mov	r0, r3
 800977c:	f001 fea2 	bl	800b4c4 <xTaskRemoveFromEventList>
 8009780:	4603      	mov	r3, r0
 8009782:	2b00      	cmp	r3, #0
 8009784:	d012      	beq.n	80097ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009786:	4b0d      	ldr	r3, [pc, #52]	@ (80097bc <xQueueGenericReset+0xd0>)
 8009788:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800978c:	601a      	str	r2, [r3, #0]
 800978e:	f3bf 8f4f 	dsb	sy
 8009792:	f3bf 8f6f 	isb	sy
 8009796:	e009      	b.n	80097ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	3310      	adds	r3, #16
 800979c:	4618      	mov	r0, r3
 800979e:	f7ff fef1 	bl	8009584 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	3324      	adds	r3, #36	@ 0x24
 80097a6:	4618      	mov	r0, r3
 80097a8:	f7ff feec 	bl	8009584 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80097ac:	f002 fefe 	bl	800c5ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80097b0:	2301      	movs	r3, #1
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	e000ed04 	.word	0xe000ed04

080097c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b08e      	sub	sp, #56	@ 0x38
 80097c4:	af02      	add	r7, sp, #8
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
 80097cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10b      	bne.n	80097ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097d8:	f383 8811 	msr	BASEPRI, r3
 80097dc:	f3bf 8f6f 	isb	sy
 80097e0:	f3bf 8f4f 	dsb	sy
 80097e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80097e6:	bf00      	nop
 80097e8:	bf00      	nop
 80097ea:	e7fd      	b.n	80097e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d10b      	bne.n	800980a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80097f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097f6:	f383 8811 	msr	BASEPRI, r3
 80097fa:	f3bf 8f6f 	isb	sy
 80097fe:	f3bf 8f4f 	dsb	sy
 8009802:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop
 8009808:	e7fd      	b.n	8009806 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d002      	beq.n	8009816 <xQueueGenericCreateStatic+0x56>
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	2b00      	cmp	r3, #0
 8009814:	d001      	beq.n	800981a <xQueueGenericCreateStatic+0x5a>
 8009816:	2301      	movs	r3, #1
 8009818:	e000      	b.n	800981c <xQueueGenericCreateStatic+0x5c>
 800981a:	2300      	movs	r3, #0
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10b      	bne.n	8009838 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	623b      	str	r3, [r7, #32]
}
 8009832:	bf00      	nop
 8009834:	bf00      	nop
 8009836:	e7fd      	b.n	8009834 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d102      	bne.n	8009844 <xQueueGenericCreateStatic+0x84>
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <xQueueGenericCreateStatic+0x88>
 8009844:	2301      	movs	r3, #1
 8009846:	e000      	b.n	800984a <xQueueGenericCreateStatic+0x8a>
 8009848:	2300      	movs	r3, #0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d10b      	bne.n	8009866 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800984e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	61fb      	str	r3, [r7, #28]
}
 8009860:	bf00      	nop
 8009862:	bf00      	nop
 8009864:	e7fd      	b.n	8009862 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009866:	2350      	movs	r3, #80	@ 0x50
 8009868:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2b50      	cmp	r3, #80	@ 0x50
 800986e:	d00b      	beq.n	8009888 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009874:	f383 8811 	msr	BASEPRI, r3
 8009878:	f3bf 8f6f 	isb	sy
 800987c:	f3bf 8f4f 	dsb	sy
 8009880:	61bb      	str	r3, [r7, #24]
}
 8009882:	bf00      	nop
 8009884:	bf00      	nop
 8009886:	e7fd      	b.n	8009884 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009888:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800988e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00d      	beq.n	80098b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009896:	2201      	movs	r2, #1
 8009898:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800989c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80098a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80098a2:	9300      	str	r3, [sp, #0]
 80098a4:	4613      	mov	r3, r2
 80098a6:	687a      	ldr	r2, [r7, #4]
 80098a8:	68b9      	ldr	r1, [r7, #8]
 80098aa:	68f8      	ldr	r0, [r7, #12]
 80098ac:	f000 f840 	bl	8009930 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80098b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3730      	adds	r7, #48	@ 0x30
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b08a      	sub	sp, #40	@ 0x28
 80098be:	af02      	add	r7, sp, #8
 80098c0:	60f8      	str	r0, [r7, #12]
 80098c2:	60b9      	str	r1, [r7, #8]
 80098c4:	4613      	mov	r3, r2
 80098c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d10b      	bne.n	80098e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	613b      	str	r3, [r7, #16]
}
 80098e0:	bf00      	nop
 80098e2:	bf00      	nop
 80098e4:	e7fd      	b.n	80098e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	68ba      	ldr	r2, [r7, #8]
 80098ea:	fb02 f303 	mul.w	r3, r2, r3
 80098ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80098f0:	69fb      	ldr	r3, [r7, #28]
 80098f2:	3350      	adds	r3, #80	@ 0x50
 80098f4:	4618      	mov	r0, r3
 80098f6:	f002 ff49 	bl	800c78c <pvPortMalloc>
 80098fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d011      	beq.n	8009926 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	3350      	adds	r3, #80	@ 0x50
 800990a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	2200      	movs	r2, #0
 8009910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009914:	79fa      	ldrb	r2, [r7, #7]
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	9300      	str	r3, [sp, #0]
 800991a:	4613      	mov	r3, r2
 800991c:	697a      	ldr	r2, [r7, #20]
 800991e:	68b9      	ldr	r1, [r7, #8]
 8009920:	68f8      	ldr	r0, [r7, #12]
 8009922:	f000 f805 	bl	8009930 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009926:	69bb      	ldr	r3, [r7, #24]
	}
 8009928:	4618      	mov	r0, r3
 800992a:	3720      	adds	r7, #32
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	60f8      	str	r0, [r7, #12]
 8009938:	60b9      	str	r1, [r7, #8]
 800993a:	607a      	str	r2, [r7, #4]
 800993c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d103      	bne.n	800994c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	69ba      	ldr	r2, [r7, #24]
 8009948:	601a      	str	r2, [r3, #0]
 800994a:	e002      	b.n	8009952 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800994c:	69bb      	ldr	r3, [r7, #24]
 800994e:	687a      	ldr	r2, [r7, #4]
 8009950:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	68fa      	ldr	r2, [r7, #12]
 8009956:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	68ba      	ldr	r2, [r7, #8]
 800995c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800995e:	2101      	movs	r1, #1
 8009960:	69b8      	ldr	r0, [r7, #24]
 8009962:	f7ff fec3 	bl	80096ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	78fa      	ldrb	r2, [r7, #3]
 800996a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800996e:	bf00      	nop
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009976:	b580      	push	{r7, lr}
 8009978:	b082      	sub	sp, #8
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d00e      	beq.n	80099a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2200      	movs	r2, #0
 8009994:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009996:	2300      	movs	r3, #0
 8009998:	2200      	movs	r2, #0
 800999a:	2100      	movs	r1, #0
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f911 	bl	8009bc4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80099a2:	bf00      	nop
 80099a4:	3708      	adds	r7, #8
 80099a6:	46bd      	mov	sp, r7
 80099a8:	bd80      	pop	{r7, pc}

080099aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80099aa:	b580      	push	{r7, lr}
 80099ac:	b086      	sub	sp, #24
 80099ae:	af00      	add	r7, sp, #0
 80099b0:	4603      	mov	r3, r0
 80099b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80099b4:	2301      	movs	r3, #1
 80099b6:	617b      	str	r3, [r7, #20]
 80099b8:	2300      	movs	r3, #0
 80099ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80099bc:	79fb      	ldrb	r3, [r7, #7]
 80099be:	461a      	mov	r2, r3
 80099c0:	6939      	ldr	r1, [r7, #16]
 80099c2:	6978      	ldr	r0, [r7, #20]
 80099c4:	f7ff ff79 	bl	80098ba <xQueueGenericCreate>
 80099c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80099ca:	68f8      	ldr	r0, [r7, #12]
 80099cc:	f7ff ffd3 	bl	8009976 <prvInitialiseMutex>

		return xNewQueue;
 80099d0:	68fb      	ldr	r3, [r7, #12]
	}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3718      	adds	r7, #24
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}

080099da <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80099da:	b580      	push	{r7, lr}
 80099dc:	b088      	sub	sp, #32
 80099de:	af02      	add	r7, sp, #8
 80099e0:	4603      	mov	r3, r0
 80099e2:	6039      	str	r1, [r7, #0]
 80099e4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80099e6:	2301      	movs	r3, #1
 80099e8:	617b      	str	r3, [r7, #20]
 80099ea:	2300      	movs	r3, #0
 80099ec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80099ee:	79fb      	ldrb	r3, [r7, #7]
 80099f0:	9300      	str	r3, [sp, #0]
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	2200      	movs	r2, #0
 80099f6:	6939      	ldr	r1, [r7, #16]
 80099f8:	6978      	ldr	r0, [r7, #20]
 80099fa:	f7ff fee1 	bl	80097c0 <xQueueGenericCreateStatic>
 80099fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f7ff ffb8 	bl	8009976 <prvInitialiseMutex>

		return xNewQueue;
 8009a06:	68fb      	ldr	r3, [r7, #12]
	}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009a10:	b590      	push	{r4, r7, lr}
 8009a12:	b087      	sub	sp, #28
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d10b      	bne.n	8009a3a <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8009a22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a26:	f383 8811 	msr	BASEPRI, r3
 8009a2a:	f3bf 8f6f 	isb	sy
 8009a2e:	f3bf 8f4f 	dsb	sy
 8009a32:	60fb      	str	r3, [r7, #12]
}
 8009a34:	bf00      	nop
 8009a36:	bf00      	nop
 8009a38:	e7fd      	b.n	8009a36 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	689c      	ldr	r4, [r3, #8]
 8009a3e:	f001 ff07 	bl	800b850 <xTaskGetCurrentTaskHandle>
 8009a42:	4603      	mov	r3, r0
 8009a44:	429c      	cmp	r4, r3
 8009a46:	d111      	bne.n	8009a6c <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	1e5a      	subs	r2, r3, #1
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009a52:	693b      	ldr	r3, [r7, #16]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d105      	bne.n	8009a66 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	2100      	movs	r1, #0
 8009a60:	6938      	ldr	r0, [r7, #16]
 8009a62:	f000 f8af 	bl	8009bc4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009a66:	2301      	movs	r3, #1
 8009a68:	617b      	str	r3, [r7, #20]
 8009a6a:	e001      	b.n	8009a70 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8009a70:	697b      	ldr	r3, [r7, #20]
	}
 8009a72:	4618      	mov	r0, r3
 8009a74:	371c      	adds	r7, #28
 8009a76:	46bd      	mov	sp, r7
 8009a78:	bd90      	pop	{r4, r7, pc}

08009a7a <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009a7a:	b590      	push	{r4, r7, lr}
 8009a7c:	b087      	sub	sp, #28
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
 8009a82:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d10b      	bne.n	8009aa6 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	60fb      	str	r3, [r7, #12]
}
 8009aa0:	bf00      	nop
 8009aa2:	bf00      	nop
 8009aa4:	e7fd      	b.n	8009aa2 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009aa6:	693b      	ldr	r3, [r7, #16]
 8009aa8:	689c      	ldr	r4, [r3, #8]
 8009aaa:	f001 fed1 	bl	800b850 <xTaskGetCurrentTaskHandle>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	429c      	cmp	r4, r3
 8009ab2:	d107      	bne.n	8009ac4 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009ab4:	693b      	ldr	r3, [r7, #16]
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	1c5a      	adds	r2, r3, #1
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	617b      	str	r3, [r7, #20]
 8009ac2:	e00c      	b.n	8009ade <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6938      	ldr	r0, [r7, #16]
 8009ac8:	f000 fb8e 	bl	800a1e8 <xQueueSemaphoreTake>
 8009acc:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009ace:	697b      	ldr	r3, [r7, #20]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d004      	beq.n	8009ade <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	68db      	ldr	r3, [r3, #12]
 8009ad8:	1c5a      	adds	r2, r3, #1
 8009ada:	693b      	ldr	r3, [r7, #16]
 8009adc:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009ade:	697b      	ldr	r3, [r7, #20]
	}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	371c      	adds	r7, #28
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd90      	pop	{r4, r7, pc}

08009ae8 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b08a      	sub	sp, #40	@ 0x28
 8009aec:	af02      	add	r7, sp, #8
 8009aee:	60f8      	str	r0, [r7, #12]
 8009af0:	60b9      	str	r1, [r7, #8]
 8009af2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10b      	bne.n	8009b12 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8009afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afe:	f383 8811 	msr	BASEPRI, r3
 8009b02:	f3bf 8f6f 	isb	sy
 8009b06:	f3bf 8f4f 	dsb	sy
 8009b0a:	61bb      	str	r3, [r7, #24]
}
 8009b0c:	bf00      	nop
 8009b0e:	bf00      	nop
 8009b10:	e7fd      	b.n	8009b0e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b12:	68ba      	ldr	r2, [r7, #8]
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d90b      	bls.n	8009b32 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8009b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1e:	f383 8811 	msr	BASEPRI, r3
 8009b22:	f3bf 8f6f 	isb	sy
 8009b26:	f3bf 8f4f 	dsb	sy
 8009b2a:	617b      	str	r3, [r7, #20]
}
 8009b2c:	bf00      	nop
 8009b2e:	bf00      	nop
 8009b30:	e7fd      	b.n	8009b2e <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009b32:	2302      	movs	r3, #2
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	2100      	movs	r1, #0
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f7ff fe3f 	bl	80097c0 <xQueueGenericCreateStatic>
 8009b42:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009b44:	69fb      	ldr	r3, [r7, #28]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d002      	beq.n	8009b50 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009b4a:	69fb      	ldr	r3, [r7, #28]
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009b50:	69fb      	ldr	r3, [r7, #28]
	}
 8009b52:	4618      	mov	r0, r3
 8009b54:	3720      	adds	r7, #32
 8009b56:	46bd      	mov	sp, r7
 8009b58:	bd80      	pop	{r7, pc}

08009b5a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009b5a:	b580      	push	{r7, lr}
 8009b5c:	b086      	sub	sp, #24
 8009b5e:	af00      	add	r7, sp, #0
 8009b60:	6078      	str	r0, [r7, #4]
 8009b62:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d10b      	bne.n	8009b82 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8009b6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	613b      	str	r3, [r7, #16]
}
 8009b7c:	bf00      	nop
 8009b7e:	bf00      	nop
 8009b80:	e7fd      	b.n	8009b7e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009b82:	683a      	ldr	r2, [r7, #0]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	429a      	cmp	r2, r3
 8009b88:	d90b      	bls.n	8009ba2 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8009b8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b8e:	f383 8811 	msr	BASEPRI, r3
 8009b92:	f3bf 8f6f 	isb	sy
 8009b96:	f3bf 8f4f 	dsb	sy
 8009b9a:	60fb      	str	r3, [r7, #12]
}
 8009b9c:	bf00      	nop
 8009b9e:	bf00      	nop
 8009ba0:	e7fd      	b.n	8009b9e <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	2100      	movs	r1, #0
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f7ff fe87 	bl	80098ba <xQueueGenericCreate>
 8009bac:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d002      	beq.n	8009bba <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	683a      	ldr	r2, [r7, #0]
 8009bb8:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009bba:	697b      	ldr	r3, [r7, #20]
	}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3718      	adds	r7, #24
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b08e      	sub	sp, #56	@ 0x38
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	607a      	str	r2, [r7, #4]
 8009bd0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009bd2:	2300      	movs	r3, #0
 8009bd4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8009bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d10b      	bne.n	8009bf8 <xQueueGenericSend+0x34>
	__asm volatile
 8009be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009be4:	f383 8811 	msr	BASEPRI, r3
 8009be8:	f3bf 8f6f 	isb	sy
 8009bec:	f3bf 8f4f 	dsb	sy
 8009bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009bf2:	bf00      	nop
 8009bf4:	bf00      	nop
 8009bf6:	e7fd      	b.n	8009bf4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bf8:	68bb      	ldr	r3, [r7, #8]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d103      	bne.n	8009c06 <xQueueGenericSend+0x42>
 8009bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d101      	bne.n	8009c0a <xQueueGenericSend+0x46>
 8009c06:	2301      	movs	r3, #1
 8009c08:	e000      	b.n	8009c0c <xQueueGenericSend+0x48>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d10b      	bne.n	8009c28 <xQueueGenericSend+0x64>
	__asm volatile
 8009c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c14:	f383 8811 	msr	BASEPRI, r3
 8009c18:	f3bf 8f6f 	isb	sy
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009c22:	bf00      	nop
 8009c24:	bf00      	nop
 8009c26:	e7fd      	b.n	8009c24 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d103      	bne.n	8009c36 <xQueueGenericSend+0x72>
 8009c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d101      	bne.n	8009c3a <xQueueGenericSend+0x76>
 8009c36:	2301      	movs	r3, #1
 8009c38:	e000      	b.n	8009c3c <xQueueGenericSend+0x78>
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10b      	bne.n	8009c58 <xQueueGenericSend+0x94>
	__asm volatile
 8009c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c44:	f383 8811 	msr	BASEPRI, r3
 8009c48:	f3bf 8f6f 	isb	sy
 8009c4c:	f3bf 8f4f 	dsb	sy
 8009c50:	623b      	str	r3, [r7, #32]
}
 8009c52:	bf00      	nop
 8009c54:	bf00      	nop
 8009c56:	e7fd      	b.n	8009c54 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009c58:	f001 fe0a 	bl	800b870 <xTaskGetSchedulerState>
 8009c5c:	4603      	mov	r3, r0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d102      	bne.n	8009c68 <xQueueGenericSend+0xa4>
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d101      	bne.n	8009c6c <xQueueGenericSend+0xa8>
 8009c68:	2301      	movs	r3, #1
 8009c6a:	e000      	b.n	8009c6e <xQueueGenericSend+0xaa>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d10b      	bne.n	8009c8a <xQueueGenericSend+0xc6>
	__asm volatile
 8009c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c76:	f383 8811 	msr	BASEPRI, r3
 8009c7a:	f3bf 8f6f 	isb	sy
 8009c7e:	f3bf 8f4f 	dsb	sy
 8009c82:	61fb      	str	r3, [r7, #28]
}
 8009c84:	bf00      	nop
 8009c86:	bf00      	nop
 8009c88:	e7fd      	b.n	8009c86 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009c8a:	f002 fc5d 	bl	800c548 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d302      	bcc.n	8009ca0 <xQueueGenericSend+0xdc>
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	2b02      	cmp	r3, #2
 8009c9e:	d129      	bne.n	8009cf4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009ca0:	683a      	ldr	r2, [r7, #0]
 8009ca2:	68b9      	ldr	r1, [r7, #8]
 8009ca4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009ca6:	f000 fcab 	bl	800a600 <prvCopyDataToQueue>
 8009caa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d010      	beq.n	8009cd6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009cb6:	3324      	adds	r3, #36	@ 0x24
 8009cb8:	4618      	mov	r0, r3
 8009cba:	f001 fc03 	bl	800b4c4 <xTaskRemoveFromEventList>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d013      	beq.n	8009cec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009cc4:	4b3f      	ldr	r3, [pc, #252]	@ (8009dc4 <xQueueGenericSend+0x200>)
 8009cc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cca:	601a      	str	r2, [r3, #0]
 8009ccc:	f3bf 8f4f 	dsb	sy
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	e00a      	b.n	8009cec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d007      	beq.n	8009cec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009cdc:	4b39      	ldr	r3, [pc, #228]	@ (8009dc4 <xQueueGenericSend+0x200>)
 8009cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ce2:	601a      	str	r2, [r3, #0]
 8009ce4:	f3bf 8f4f 	dsb	sy
 8009ce8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009cec:	f002 fc5e 	bl	800c5ac <vPortExitCritical>
				return pdPASS;
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	e063      	b.n	8009dbc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d103      	bne.n	8009d02 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009cfa:	f002 fc57 	bl	800c5ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e05c      	b.n	8009dbc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d106      	bne.n	8009d16 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d08:	f107 0314 	add.w	r3, r7, #20
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f001 fc3d 	bl	800b58c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d12:	2301      	movs	r3, #1
 8009d14:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d16:	f002 fc49 	bl	800c5ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d1a:	f001 f979 	bl	800b010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d1e:	f002 fc13 	bl	800c548 <vPortEnterCritical>
 8009d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009d28:	b25b      	sxtb	r3, r3
 8009d2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d2e:	d103      	bne.n	8009d38 <xQueueGenericSend+0x174>
 8009d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009d38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009d3e:	b25b      	sxtb	r3, r3
 8009d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d44:	d103      	bne.n	8009d4e <xQueueGenericSend+0x18a>
 8009d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d48:	2200      	movs	r2, #0
 8009d4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009d4e:	f002 fc2d 	bl	800c5ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009d52:	1d3a      	adds	r2, r7, #4
 8009d54:	f107 0314 	add.w	r3, r7, #20
 8009d58:	4611      	mov	r1, r2
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f001 fc2c 	bl	800b5b8 <xTaskCheckForTimeOut>
 8009d60:	4603      	mov	r3, r0
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d124      	bne.n	8009db0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009d66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d68:	f000 fd42 	bl	800a7f0 <prvIsQueueFull>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d018      	beq.n	8009da4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d74:	3310      	adds	r3, #16
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	4611      	mov	r1, r2
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f001 fb50 	bl	800b420 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009d80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009d82:	f000 fccd 	bl	800a720 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009d86:	f001 f951 	bl	800b02c <xTaskResumeAll>
 8009d8a:	4603      	mov	r3, r0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	f47f af7c 	bne.w	8009c8a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8009d92:	4b0c      	ldr	r3, [pc, #48]	@ (8009dc4 <xQueueGenericSend+0x200>)
 8009d94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d98:	601a      	str	r2, [r3, #0]
 8009d9a:	f3bf 8f4f 	dsb	sy
 8009d9e:	f3bf 8f6f 	isb	sy
 8009da2:	e772      	b.n	8009c8a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009da4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009da6:	f000 fcbb 	bl	800a720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009daa:	f001 f93f 	bl	800b02c <xTaskResumeAll>
 8009dae:	e76c      	b.n	8009c8a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009db0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009db2:	f000 fcb5 	bl	800a720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009db6:	f001 f939 	bl	800b02c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009dba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3738      	adds	r7, #56	@ 0x38
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}
 8009dc4:	e000ed04 	.word	0xe000ed04

08009dc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b090      	sub	sp, #64	@ 0x40
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	60f8      	str	r0, [r7, #12]
 8009dd0:	60b9      	str	r1, [r7, #8]
 8009dd2:	607a      	str	r2, [r7, #4]
 8009dd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8009dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d10b      	bne.n	8009df8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8009de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009de4:	f383 8811 	msr	BASEPRI, r3
 8009de8:	f3bf 8f6f 	isb	sy
 8009dec:	f3bf 8f4f 	dsb	sy
 8009df0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009df2:	bf00      	nop
 8009df4:	bf00      	nop
 8009df6:	e7fd      	b.n	8009df4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d103      	bne.n	8009e06 <xQueueGenericSendFromISR+0x3e>
 8009dfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d101      	bne.n	8009e0a <xQueueGenericSendFromISR+0x42>
 8009e06:	2301      	movs	r3, #1
 8009e08:	e000      	b.n	8009e0c <xQueueGenericSendFromISR+0x44>
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10b      	bne.n	8009e28 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8009e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e14:	f383 8811 	msr	BASEPRI, r3
 8009e18:	f3bf 8f6f 	isb	sy
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009e22:	bf00      	nop
 8009e24:	bf00      	nop
 8009e26:	e7fd      	b.n	8009e24 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d103      	bne.n	8009e36 <xQueueGenericSendFromISR+0x6e>
 8009e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e32:	2b01      	cmp	r3, #1
 8009e34:	d101      	bne.n	8009e3a <xQueueGenericSendFromISR+0x72>
 8009e36:	2301      	movs	r3, #1
 8009e38:	e000      	b.n	8009e3c <xQueueGenericSendFromISR+0x74>
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d10b      	bne.n	8009e58 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8009e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e44:	f383 8811 	msr	BASEPRI, r3
 8009e48:	f3bf 8f6f 	isb	sy
 8009e4c:	f3bf 8f4f 	dsb	sy
 8009e50:	623b      	str	r3, [r7, #32]
}
 8009e52:	bf00      	nop
 8009e54:	bf00      	nop
 8009e56:	e7fd      	b.n	8009e54 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009e58:	f002 fc56 	bl	800c708 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009e5c:	f3ef 8211 	mrs	r2, BASEPRI
 8009e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e64:	f383 8811 	msr	BASEPRI, r3
 8009e68:	f3bf 8f6f 	isb	sy
 8009e6c:	f3bf 8f4f 	dsb	sy
 8009e70:	61fa      	str	r2, [r7, #28]
 8009e72:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009e74:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009e76:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009e7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d302      	bcc.n	8009e8a <xQueueGenericSendFromISR+0xc2>
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d12f      	bne.n	8009eea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009e8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009e90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009e96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009e98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009e9a:	683a      	ldr	r2, [r7, #0]
 8009e9c:	68b9      	ldr	r1, [r7, #8]
 8009e9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8009ea0:	f000 fbae 	bl	800a600 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009ea4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8009ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009eac:	d112      	bne.n	8009ed4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009eae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d016      	beq.n	8009ee4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009eb8:	3324      	adds	r3, #36	@ 0x24
 8009eba:	4618      	mov	r0, r3
 8009ebc:	f001 fb02 	bl	800b4c4 <xTaskRemoveFromEventList>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d00e      	beq.n	8009ee4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d00b      	beq.n	8009ee4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	601a      	str	r2, [r3, #0]
 8009ed2:	e007      	b.n	8009ee4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ed4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8009ed8:	3301      	adds	r3, #1
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	b25a      	sxtb	r2, r3
 8009ede:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ee0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8009ee4:	2301      	movs	r3, #1
 8009ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8009ee8:	e001      	b.n	8009eee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009eea:	2300      	movs	r3, #0
 8009eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009ef0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009ef8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3740      	adds	r7, #64	@ 0x40
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b08e      	sub	sp, #56	@ 0x38
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d10b      	bne.n	8009f30 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8009f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f1c:	f383 8811 	msr	BASEPRI, r3
 8009f20:	f3bf 8f6f 	isb	sy
 8009f24:	f3bf 8f4f 	dsb	sy
 8009f28:	623b      	str	r3, [r7, #32]
}
 8009f2a:	bf00      	nop
 8009f2c:	bf00      	nop
 8009f2e:	e7fd      	b.n	8009f2c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00b      	beq.n	8009f50 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8009f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f3c:	f383 8811 	msr	BASEPRI, r3
 8009f40:	f3bf 8f6f 	isb	sy
 8009f44:	f3bf 8f4f 	dsb	sy
 8009f48:	61fb      	str	r3, [r7, #28]
}
 8009f4a:	bf00      	nop
 8009f4c:	bf00      	nop
 8009f4e:	e7fd      	b.n	8009f4c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8009f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d103      	bne.n	8009f60 <xQueueGiveFromISR+0x5c>
 8009f58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f5a:	689b      	ldr	r3, [r3, #8]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d101      	bne.n	8009f64 <xQueueGiveFromISR+0x60>
 8009f60:	2301      	movs	r3, #1
 8009f62:	e000      	b.n	8009f66 <xQueueGiveFromISR+0x62>
 8009f64:	2300      	movs	r3, #0
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d10b      	bne.n	8009f82 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8009f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f6e:	f383 8811 	msr	BASEPRI, r3
 8009f72:	f3bf 8f6f 	isb	sy
 8009f76:	f3bf 8f4f 	dsb	sy
 8009f7a:	61bb      	str	r3, [r7, #24]
}
 8009f7c:	bf00      	nop
 8009f7e:	bf00      	nop
 8009f80:	e7fd      	b.n	8009f7e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f82:	f002 fbc1 	bl	800c708 <vPortValidateInterruptPriority>
	__asm volatile
 8009f86:	f3ef 8211 	mrs	r2, BASEPRI
 8009f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f8e:	f383 8811 	msr	BASEPRI, r3
 8009f92:	f3bf 8f6f 	isb	sy
 8009f96:	f3bf 8f4f 	dsb	sy
 8009f9a:	617a      	str	r2, [r7, #20]
 8009f9c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009f9e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009fa6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009faa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009fac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d22b      	bcs.n	800a00a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009fb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009fb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fbe:	1c5a      	adds	r2, r3, #1
 8009fc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fc2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009fc4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8009fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fcc:	d112      	bne.n	8009ff4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009fce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d016      	beq.n	800a004 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009fd8:	3324      	adds	r3, #36	@ 0x24
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f001 fa72 	bl	800b4c4 <xTaskRemoveFromEventList>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00e      	beq.n	800a004 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00b      	beq.n	800a004 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	601a      	str	r2, [r3, #0]
 8009ff2:	e007      	b.n	800a004 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009ff4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ff8:	3301      	adds	r3, #1
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	b25a      	sxtb	r2, r3
 8009ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a000:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a004:	2301      	movs	r3, #1
 800a006:	637b      	str	r3, [r7, #52]	@ 0x34
 800a008:	e001      	b.n	800a00e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	637b      	str	r3, [r7, #52]	@ 0x34
 800a00e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a010:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f383 8811 	msr	BASEPRI, r3
}
 800a018:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a01a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3738      	adds	r7, #56	@ 0x38
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b08c      	sub	sp, #48	@ 0x30
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a030:	2300      	movs	r3, #0
 800a032:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d10b      	bne.n	800a056 <xQueueReceive+0x32>
	__asm volatile
 800a03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a042:	f383 8811 	msr	BASEPRI, r3
 800a046:	f3bf 8f6f 	isb	sy
 800a04a:	f3bf 8f4f 	dsb	sy
 800a04e:	623b      	str	r3, [r7, #32]
}
 800a050:	bf00      	nop
 800a052:	bf00      	nop
 800a054:	e7fd      	b.n	800a052 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d103      	bne.n	800a064 <xQueueReceive+0x40>
 800a05c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a05e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a060:	2b00      	cmp	r3, #0
 800a062:	d101      	bne.n	800a068 <xQueueReceive+0x44>
 800a064:	2301      	movs	r3, #1
 800a066:	e000      	b.n	800a06a <xQueueReceive+0x46>
 800a068:	2300      	movs	r3, #0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d10b      	bne.n	800a086 <xQueueReceive+0x62>
	__asm volatile
 800a06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a072:	f383 8811 	msr	BASEPRI, r3
 800a076:	f3bf 8f6f 	isb	sy
 800a07a:	f3bf 8f4f 	dsb	sy
 800a07e:	61fb      	str	r3, [r7, #28]
}
 800a080:	bf00      	nop
 800a082:	bf00      	nop
 800a084:	e7fd      	b.n	800a082 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a086:	f001 fbf3 	bl	800b870 <xTaskGetSchedulerState>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d102      	bne.n	800a096 <xQueueReceive+0x72>
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <xQueueReceive+0x76>
 800a096:	2301      	movs	r3, #1
 800a098:	e000      	b.n	800a09c <xQueueReceive+0x78>
 800a09a:	2300      	movs	r3, #0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d10b      	bne.n	800a0b8 <xQueueReceive+0x94>
	__asm volatile
 800a0a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a4:	f383 8811 	msr	BASEPRI, r3
 800a0a8:	f3bf 8f6f 	isb	sy
 800a0ac:	f3bf 8f4f 	dsb	sy
 800a0b0:	61bb      	str	r3, [r7, #24]
}
 800a0b2:	bf00      	nop
 800a0b4:	bf00      	nop
 800a0b6:	e7fd      	b.n	800a0b4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a0b8:	f002 fa46 	bl	800c548 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a0c0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d01f      	beq.n	800a108 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a0c8:	68b9      	ldr	r1, [r7, #8]
 800a0ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a0cc:	f000 fb02 	bl	800a6d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0d2:	1e5a      	subs	r2, r3, #1
 800a0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0d6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0da:	691b      	ldr	r3, [r3, #16]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00f      	beq.n	800a100 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0e2:	3310      	adds	r3, #16
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	f001 f9ed 	bl	800b4c4 <xTaskRemoveFromEventList>
 800a0ea:	4603      	mov	r3, r0
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d007      	beq.n	800a100 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a0f0:	4b3c      	ldr	r3, [pc, #240]	@ (800a1e4 <xQueueReceive+0x1c0>)
 800a0f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a0f6:	601a      	str	r2, [r3, #0]
 800a0f8:	f3bf 8f4f 	dsb	sy
 800a0fc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a100:	f002 fa54 	bl	800c5ac <vPortExitCritical>
				return pdPASS;
 800a104:	2301      	movs	r3, #1
 800a106:	e069      	b.n	800a1dc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d103      	bne.n	800a116 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a10e:	f002 fa4d 	bl	800c5ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a112:	2300      	movs	r3, #0
 800a114:	e062      	b.n	800a1dc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d106      	bne.n	800a12a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a11c:	f107 0310 	add.w	r3, r7, #16
 800a120:	4618      	mov	r0, r3
 800a122:	f001 fa33 	bl	800b58c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a126:	2301      	movs	r3, #1
 800a128:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a12a:	f002 fa3f 	bl	800c5ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a12e:	f000 ff6f 	bl	800b010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a132:	f002 fa09 	bl	800c548 <vPortEnterCritical>
 800a136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a138:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a13c:	b25b      	sxtb	r3, r3
 800a13e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a142:	d103      	bne.n	800a14c <xQueueReceive+0x128>
 800a144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a146:	2200      	movs	r2, #0
 800a148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a14c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a14e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a152:	b25b      	sxtb	r3, r3
 800a154:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a158:	d103      	bne.n	800a162 <xQueueReceive+0x13e>
 800a15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15c:	2200      	movs	r2, #0
 800a15e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a162:	f002 fa23 	bl	800c5ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a166:	1d3a      	adds	r2, r7, #4
 800a168:	f107 0310 	add.w	r3, r7, #16
 800a16c:	4611      	mov	r1, r2
 800a16e:	4618      	mov	r0, r3
 800a170:	f001 fa22 	bl	800b5b8 <xTaskCheckForTimeOut>
 800a174:	4603      	mov	r3, r0
 800a176:	2b00      	cmp	r3, #0
 800a178:	d123      	bne.n	800a1c2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a17a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a17c:	f000 fb22 	bl	800a7c4 <prvIsQueueEmpty>
 800a180:	4603      	mov	r3, r0
 800a182:	2b00      	cmp	r3, #0
 800a184:	d017      	beq.n	800a1b6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a188:	3324      	adds	r3, #36	@ 0x24
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	4611      	mov	r1, r2
 800a18e:	4618      	mov	r0, r3
 800a190:	f001 f946 	bl	800b420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a194:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a196:	f000 fac3 	bl	800a720 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a19a:	f000 ff47 	bl	800b02c <xTaskResumeAll>
 800a19e:	4603      	mov	r3, r0
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d189      	bne.n	800a0b8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a1a4:	4b0f      	ldr	r3, [pc, #60]	@ (800a1e4 <xQueueReceive+0x1c0>)
 800a1a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a1aa:	601a      	str	r2, [r3, #0]
 800a1ac:	f3bf 8f4f 	dsb	sy
 800a1b0:	f3bf 8f6f 	isb	sy
 800a1b4:	e780      	b.n	800a0b8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a1b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1b8:	f000 fab2 	bl	800a720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a1bc:	f000 ff36 	bl	800b02c <xTaskResumeAll>
 800a1c0:	e77a      	b.n	800a0b8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a1c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1c4:	f000 faac 	bl	800a720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a1c8:	f000 ff30 	bl	800b02c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a1cc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1ce:	f000 faf9 	bl	800a7c4 <prvIsQueueEmpty>
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	f43f af6f 	beq.w	800a0b8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a1da:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3730      	adds	r7, #48	@ 0x30
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	e000ed04 	.word	0xe000ed04

0800a1e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b08e      	sub	sp, #56	@ 0x38
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10b      	bne.n	800a21c <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	623b      	str	r3, [r7, #32]
}
 800a216:	bf00      	nop
 800a218:	bf00      	nop
 800a21a:	e7fd      	b.n	800a218 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a21c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a21e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a220:	2b00      	cmp	r3, #0
 800a222:	d00b      	beq.n	800a23c <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a228:	f383 8811 	msr	BASEPRI, r3
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	f3bf 8f4f 	dsb	sy
 800a234:	61fb      	str	r3, [r7, #28]
}
 800a236:	bf00      	nop
 800a238:	bf00      	nop
 800a23a:	e7fd      	b.n	800a238 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a23c:	f001 fb18 	bl	800b870 <xTaskGetSchedulerState>
 800a240:	4603      	mov	r3, r0
 800a242:	2b00      	cmp	r3, #0
 800a244:	d102      	bne.n	800a24c <xQueueSemaphoreTake+0x64>
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d101      	bne.n	800a250 <xQueueSemaphoreTake+0x68>
 800a24c:	2301      	movs	r3, #1
 800a24e:	e000      	b.n	800a252 <xQueueSemaphoreTake+0x6a>
 800a250:	2300      	movs	r3, #0
 800a252:	2b00      	cmp	r3, #0
 800a254:	d10b      	bne.n	800a26e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a25a:	f383 8811 	msr	BASEPRI, r3
 800a25e:	f3bf 8f6f 	isb	sy
 800a262:	f3bf 8f4f 	dsb	sy
 800a266:	61bb      	str	r3, [r7, #24]
}
 800a268:	bf00      	nop
 800a26a:	bf00      	nop
 800a26c:	e7fd      	b.n	800a26a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a26e:	f002 f96b 	bl	800c548 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a272:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a276:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d024      	beq.n	800a2c8 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a280:	1e5a      	subs	r2, r3, #1
 800a282:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a284:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d104      	bne.n	800a298 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a28e:	f001 fc69 	bl	800bb64 <pvTaskIncrementMutexHeldCount>
 800a292:	4602      	mov	r2, r0
 800a294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a296:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a29a:	691b      	ldr	r3, [r3, #16]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d00f      	beq.n	800a2c0 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a2a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a2a2:	3310      	adds	r3, #16
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	f001 f90d 	bl	800b4c4 <xTaskRemoveFromEventList>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d007      	beq.n	800a2c0 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a2b0:	4b54      	ldr	r3, [pc, #336]	@ (800a404 <xQueueSemaphoreTake+0x21c>)
 800a2b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2b6:	601a      	str	r2, [r3, #0]
 800a2b8:	f3bf 8f4f 	dsb	sy
 800a2bc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a2c0:	f002 f974 	bl	800c5ac <vPortExitCritical>
				return pdPASS;
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e098      	b.n	800a3fa <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d112      	bne.n	800a2f4 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d00b      	beq.n	800a2ec <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a2d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2d8:	f383 8811 	msr	BASEPRI, r3
 800a2dc:	f3bf 8f6f 	isb	sy
 800a2e0:	f3bf 8f4f 	dsb	sy
 800a2e4:	617b      	str	r3, [r7, #20]
}
 800a2e6:	bf00      	nop
 800a2e8:	bf00      	nop
 800a2ea:	e7fd      	b.n	800a2e8 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a2ec:	f002 f95e 	bl	800c5ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	e082      	b.n	800a3fa <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a2f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d106      	bne.n	800a308 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a2fa:	f107 030c 	add.w	r3, r7, #12
 800a2fe:	4618      	mov	r0, r3
 800a300:	f001 f944 	bl	800b58c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a304:	2301      	movs	r3, #1
 800a306:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a308:	f002 f950 	bl	800c5ac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a30c:	f000 fe80 	bl	800b010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a310:	f002 f91a 	bl	800c548 <vPortEnterCritical>
 800a314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a316:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a31a:	b25b      	sxtb	r3, r3
 800a31c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a320:	d103      	bne.n	800a32a <xQueueSemaphoreTake+0x142>
 800a322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a324:	2200      	movs	r2, #0
 800a326:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a32a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a32c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a330:	b25b      	sxtb	r3, r3
 800a332:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a336:	d103      	bne.n	800a340 <xQueueSemaphoreTake+0x158>
 800a338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a33a:	2200      	movs	r2, #0
 800a33c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a340:	f002 f934 	bl	800c5ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a344:	463a      	mov	r2, r7
 800a346:	f107 030c 	add.w	r3, r7, #12
 800a34a:	4611      	mov	r1, r2
 800a34c:	4618      	mov	r0, r3
 800a34e:	f001 f933 	bl	800b5b8 <xTaskCheckForTimeOut>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d132      	bne.n	800a3be <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a358:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a35a:	f000 fa33 	bl	800a7c4 <prvIsQueueEmpty>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d026      	beq.n	800a3b2 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d109      	bne.n	800a380 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a36c:	f002 f8ec 	bl	800c548 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a370:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	4618      	mov	r0, r3
 800a376:	f001 fa99 	bl	800b8ac <xTaskPriorityInherit>
 800a37a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a37c:	f002 f916 	bl	800c5ac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a380:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a382:	3324      	adds	r3, #36	@ 0x24
 800a384:	683a      	ldr	r2, [r7, #0]
 800a386:	4611      	mov	r1, r2
 800a388:	4618      	mov	r0, r3
 800a38a:	f001 f849 	bl	800b420 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a38e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a390:	f000 f9c6 	bl	800a720 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a394:	f000 fe4a 	bl	800b02c <xTaskResumeAll>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f47f af67 	bne.w	800a26e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a3a0:	4b18      	ldr	r3, [pc, #96]	@ (800a404 <xQueueSemaphoreTake+0x21c>)
 800a3a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a3a6:	601a      	str	r2, [r3, #0]
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	f3bf 8f6f 	isb	sy
 800a3b0:	e75d      	b.n	800a26e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a3b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a3b4:	f000 f9b4 	bl	800a720 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a3b8:	f000 fe38 	bl	800b02c <xTaskResumeAll>
 800a3bc:	e757      	b.n	800a26e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a3be:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a3c0:	f000 f9ae 	bl	800a720 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a3c4:	f000 fe32 	bl	800b02c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a3ca:	f000 f9fb 	bl	800a7c4 <prvIsQueueEmpty>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	f43f af4c 	beq.w	800a26e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d00d      	beq.n	800a3f8 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a3dc:	f002 f8b4 	bl	800c548 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a3e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a3e2:	f000 f8f5 	bl	800a5d0 <prvGetDisinheritPriorityAfterTimeout>
 800a3e6:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a3e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3ea:	689b      	ldr	r3, [r3, #8]
 800a3ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a3ee:	4618      	mov	r0, r3
 800a3f0:	f001 fb34 	bl	800ba5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a3f4:	f002 f8da 	bl	800c5ac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a3f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3738      	adds	r7, #56	@ 0x38
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	e000ed04 	.word	0xe000ed04

0800a408 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b08e      	sub	sp, #56	@ 0x38
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d10b      	bne.n	800a436 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	623b      	str	r3, [r7, #32]
}
 800a430:	bf00      	nop
 800a432:	bf00      	nop
 800a434:	e7fd      	b.n	800a432 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d103      	bne.n	800a444 <xQueueReceiveFromISR+0x3c>
 800a43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a440:	2b00      	cmp	r3, #0
 800a442:	d101      	bne.n	800a448 <xQueueReceiveFromISR+0x40>
 800a444:	2301      	movs	r3, #1
 800a446:	e000      	b.n	800a44a <xQueueReceiveFromISR+0x42>
 800a448:	2300      	movs	r3, #0
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d10b      	bne.n	800a466 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800a44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a452:	f383 8811 	msr	BASEPRI, r3
 800a456:	f3bf 8f6f 	isb	sy
 800a45a:	f3bf 8f4f 	dsb	sy
 800a45e:	61fb      	str	r3, [r7, #28]
}
 800a460:	bf00      	nop
 800a462:	bf00      	nop
 800a464:	e7fd      	b.n	800a462 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a466:	f002 f94f 	bl	800c708 <vPortValidateInterruptPriority>
	__asm volatile
 800a46a:	f3ef 8211 	mrs	r2, BASEPRI
 800a46e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a472:	f383 8811 	msr	BASEPRI, r3
 800a476:	f3bf 8f6f 	isb	sy
 800a47a:	f3bf 8f4f 	dsb	sy
 800a47e:	61ba      	str	r2, [r7, #24]
 800a480:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a482:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a484:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a488:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a48a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d02f      	beq.n	800a4f2 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a494:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a49c:	68b9      	ldr	r1, [r7, #8]
 800a49e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4a0:	f000 f918 	bl	800a6d4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4a6:	1e5a      	subs	r2, r3, #1
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4aa:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a4ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4b4:	d112      	bne.n	800a4dc <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b8:	691b      	ldr	r3, [r3, #16]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d016      	beq.n	800a4ec <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4c0:	3310      	adds	r3, #16
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	f000 fffe 	bl	800b4c4 <xTaskRemoveFromEventList>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d00e      	beq.n	800a4ec <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d00b      	beq.n	800a4ec <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	e007      	b.n	800a4ec <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a4dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4e0:	3301      	adds	r3, #1
 800a4e2:	b2db      	uxtb	r3, r3
 800a4e4:	b25a      	sxtb	r2, r3
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800a4ec:	2301      	movs	r3, #1
 800a4ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4f0:	e001      	b.n	800a4f6 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a4f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	f383 8811 	msr	BASEPRI, r3
}
 800a500:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a504:	4618      	mov	r0, r3
 800a506:	3738      	adds	r7, #56	@ 0x38
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b084      	sub	sp, #16
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d10b      	bne.n	800a532 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800a51a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a51e:	f383 8811 	msr	BASEPRI, r3
 800a522:	f3bf 8f6f 	isb	sy
 800a526:	f3bf 8f4f 	dsb	sy
 800a52a:	60bb      	str	r3, [r7, #8]
}
 800a52c:	bf00      	nop
 800a52e:	bf00      	nop
 800a530:	e7fd      	b.n	800a52e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800a532:	f002 f809 	bl	800c548 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a53a:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800a53c:	f002 f836 	bl	800c5ac <vPortExitCritical>

	return uxReturn;
 800a540:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a542:	4618      	mov	r0, r3
 800a544:	3710      	adds	r7, #16
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}

0800a54a <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800a54a:	b480      	push	{r7}
 800a54c:	b087      	sub	sp, #28
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800a556:	697b      	ldr	r3, [r7, #20]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d10b      	bne.n	800a574 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 800a55c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a560:	f383 8811 	msr	BASEPRI, r3
 800a564:	f3bf 8f6f 	isb	sy
 800a568:	f3bf 8f4f 	dsb	sy
 800a56c:	60fb      	str	r3, [r7, #12]
}
 800a56e:	bf00      	nop
 800a570:	bf00      	nop
 800a572:	e7fd      	b.n	800a570 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800a574:	697b      	ldr	r3, [r7, #20]
 800a576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a578:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800a57a:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800a57c:	4618      	mov	r0, r3
 800a57e:	371c      	adds	r7, #28
 800a580:	46bd      	mov	sp, r7
 800a582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d10b      	bne.n	800a5b2 <vQueueDelete+0x2a>
	__asm volatile
 800a59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	60bb      	str	r3, [r7, #8]
}
 800a5ac:	bf00      	nop
 800a5ae:	bf00      	nop
 800a5b0:	e7fd      	b.n	800a5ae <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a5b2:	68f8      	ldr	r0, [r7, #12]
 800a5b4:	f000 f95e 	bl	800a874 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d102      	bne.n	800a5c8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	f002 f9b0 	bl	800c928 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a5c8:	bf00      	nop
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b085      	sub	sp, #20
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d006      	beq.n	800a5ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a5ea:	60fb      	str	r3, [r7, #12]
 800a5ec:	e001      	b.n	800a5f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a5ee:	2300      	movs	r3, #0
 800a5f0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
	}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3714      	adds	r7, #20
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b086      	sub	sp, #24
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a60c:	2300      	movs	r3, #0
 800a60e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a614:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d10d      	bne.n	800a63a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	2b00      	cmp	r3, #0
 800a624:	d14d      	bne.n	800a6c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	689b      	ldr	r3, [r3, #8]
 800a62a:	4618      	mov	r0, r3
 800a62c:	f001 f9a6 	bl	800b97c <xTaskPriorityDisinherit>
 800a630:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2200      	movs	r2, #0
 800a636:	609a      	str	r2, [r3, #8]
 800a638:	e043      	b.n	800a6c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d119      	bne.n	800a674 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6858      	ldr	r0, [r3, #4]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a648:	461a      	mov	r2, r3
 800a64a:	68b9      	ldr	r1, [r7, #8]
 800a64c:	f013 ffe7 	bl	801e61e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	685a      	ldr	r2, [r3, #4]
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a658:	441a      	add	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	685a      	ldr	r2, [r3, #4]
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	429a      	cmp	r2, r3
 800a668:	d32b      	bcc.n	800a6c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	605a      	str	r2, [r3, #4]
 800a672:	e026      	b.n	800a6c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	68d8      	ldr	r0, [r3, #12]
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a67c:	461a      	mov	r2, r3
 800a67e:	68b9      	ldr	r1, [r7, #8]
 800a680:	f013 ffcd 	bl	801e61e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	68da      	ldr	r2, [r3, #12]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a68c:	425b      	negs	r3, r3
 800a68e:	441a      	add	r2, r3
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	68da      	ldr	r2, [r3, #12]
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d207      	bcs.n	800a6b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	689a      	ldr	r2, [r3, #8]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6a8:	425b      	negs	r3, r3
 800a6aa:	441a      	add	r2, r3
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d105      	bne.n	800a6c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6b6:	693b      	ldr	r3, [r7, #16]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a6bc:	693b      	ldr	r3, [r7, #16]
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	1c5a      	adds	r2, r3, #1
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a6ca:	697b      	ldr	r3, [r7, #20]
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3718      	adds	r7, #24
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}

0800a6d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b082      	sub	sp, #8
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d018      	beq.n	800a718 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	68da      	ldr	r2, [r3, #12]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a6ee:	441a      	add	r2, r3
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	68da      	ldr	r2, [r3, #12]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	689b      	ldr	r3, [r3, #8]
 800a6fc:	429a      	cmp	r2, r3
 800a6fe:	d303      	bcc.n	800a708 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681a      	ldr	r2, [r3, #0]
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	68d9      	ldr	r1, [r3, #12]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a710:	461a      	mov	r2, r3
 800a712:	6838      	ldr	r0, [r7, #0]
 800a714:	f013 ff83 	bl	801e61e <memcpy>
	}
}
 800a718:	bf00      	nop
 800a71a:	3708      	adds	r7, #8
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a728:	f001 ff0e 	bl	800c548 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a732:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a734:	e011      	b.n	800a75a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d012      	beq.n	800a764 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	3324      	adds	r3, #36	@ 0x24
 800a742:	4618      	mov	r0, r3
 800a744:	f000 febe 	bl	800b4c4 <xTaskRemoveFromEventList>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a74e:	f000 ff97 	bl	800b680 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a752:	7bfb      	ldrb	r3, [r7, #15]
 800a754:	3b01      	subs	r3, #1
 800a756:	b2db      	uxtb	r3, r3
 800a758:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a75a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	dce9      	bgt.n	800a736 <prvUnlockQueue+0x16>
 800a762:	e000      	b.n	800a766 <prvUnlockQueue+0x46>
					break;
 800a764:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	22ff      	movs	r2, #255	@ 0xff
 800a76a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800a76e:	f001 ff1d 	bl	800c5ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a772:	f001 fee9 	bl	800c548 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a77c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a77e:	e011      	b.n	800a7a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d012      	beq.n	800a7ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	3310      	adds	r3, #16
 800a78c:	4618      	mov	r0, r3
 800a78e:	f000 fe99 	bl	800b4c4 <xTaskRemoveFromEventList>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d001      	beq.n	800a79c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a798:	f000 ff72 	bl	800b680 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a79c:	7bbb      	ldrb	r3, [r7, #14]
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	dce9      	bgt.n	800a780 <prvUnlockQueue+0x60>
 800a7ac:	e000      	b.n	800a7b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a7ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	22ff      	movs	r2, #255	@ 0xff
 800a7b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800a7b8:	f001 fef8 	bl	800c5ac <vPortExitCritical>
}
 800a7bc:	bf00      	nop
 800a7be:	3710      	adds	r7, #16
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7cc:	f001 febc 	bl	800c548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d102      	bne.n	800a7de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	60fb      	str	r3, [r7, #12]
 800a7dc:	e001      	b.n	800a7e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7de:	2300      	movs	r3, #0
 800a7e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7e2:	f001 fee3 	bl	800c5ac <vPortExitCritical>

	return xReturn;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3710      	adds	r7, #16
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b084      	sub	sp, #16
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7f8:	f001 fea6 	bl	800c548 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a804:	429a      	cmp	r2, r3
 800a806:	d102      	bne.n	800a80e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a808:	2301      	movs	r3, #1
 800a80a:	60fb      	str	r3, [r7, #12]
 800a80c:	e001      	b.n	800a812 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a80e:	2300      	movs	r3, #0
 800a810:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a812:	f001 fecb 	bl	800c5ac <vPortExitCritical>

	return xReturn;
 800a816:	68fb      	ldr	r3, [r7, #12]
}
 800a818:	4618      	mov	r0, r3
 800a81a:	3710      	adds	r7, #16
 800a81c:	46bd      	mov	sp, r7
 800a81e:	bd80      	pop	{r7, pc}

0800a820 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a820:	b480      	push	{r7}
 800a822:	b085      	sub	sp, #20
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a82a:	2300      	movs	r3, #0
 800a82c:	60fb      	str	r3, [r7, #12]
 800a82e:	e014      	b.n	800a85a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a830:	4a0f      	ldr	r2, [pc, #60]	@ (800a870 <vQueueAddToRegistry+0x50>)
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d10b      	bne.n	800a854 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a83c:	490c      	ldr	r1, [pc, #48]	@ (800a870 <vQueueAddToRegistry+0x50>)
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	683a      	ldr	r2, [r7, #0]
 800a842:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a846:	4a0a      	ldr	r2, [pc, #40]	@ (800a870 <vQueueAddToRegistry+0x50>)
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	00db      	lsls	r3, r3, #3
 800a84c:	4413      	add	r3, r2
 800a84e:	687a      	ldr	r2, [r7, #4]
 800a850:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a852:	e006      	b.n	800a862 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	3301      	adds	r3, #1
 800a858:	60fb      	str	r3, [r7, #12]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	2b07      	cmp	r3, #7
 800a85e:	d9e7      	bls.n	800a830 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a860:	bf00      	nop
 800a862:	bf00      	nop
 800a864:	3714      	adds	r7, #20
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	2000a3b8 	.word	0x2000a3b8

0800a874 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a874:	b480      	push	{r7}
 800a876:	b085      	sub	sp, #20
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a87c:	2300      	movs	r3, #0
 800a87e:	60fb      	str	r3, [r7, #12]
 800a880:	e016      	b.n	800a8b0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a882:	4a10      	ldr	r2, [pc, #64]	@ (800a8c4 <vQueueUnregisterQueue+0x50>)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	00db      	lsls	r3, r3, #3
 800a888:	4413      	add	r3, r2
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d10b      	bne.n	800a8aa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a892:	4a0c      	ldr	r2, [pc, #48]	@ (800a8c4 <vQueueUnregisterQueue+0x50>)
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2100      	movs	r1, #0
 800a898:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a89c:	4a09      	ldr	r2, [pc, #36]	@ (800a8c4 <vQueueUnregisterQueue+0x50>)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	00db      	lsls	r3, r3, #3
 800a8a2:	4413      	add	r3, r2
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	605a      	str	r2, [r3, #4]
				break;
 800a8a8:	e006      	b.n	800a8b8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	60fb      	str	r3, [r7, #12]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2b07      	cmp	r3, #7
 800a8b4:	d9e5      	bls.n	800a882 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a8b6:	bf00      	nop
 800a8b8:	bf00      	nop
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr
 800a8c4:	2000a3b8 	.word	0x2000a3b8

0800a8c8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a8d8:	f001 fe36 	bl	800c548 <vPortEnterCritical>
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a8e2:	b25b      	sxtb	r3, r3
 800a8e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8e8:	d103      	bne.n	800a8f2 <vQueueWaitForMessageRestricted+0x2a>
 800a8ea:	697b      	ldr	r3, [r7, #20]
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a8f8:	b25b      	sxtb	r3, r3
 800a8fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8fe:	d103      	bne.n	800a908 <vQueueWaitForMessageRestricted+0x40>
 800a900:	697b      	ldr	r3, [r7, #20]
 800a902:	2200      	movs	r2, #0
 800a904:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a908:	f001 fe50 	bl	800c5ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a910:	2b00      	cmp	r3, #0
 800a912:	d106      	bne.n	800a922 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	3324      	adds	r3, #36	@ 0x24
 800a918:	687a      	ldr	r2, [r7, #4]
 800a91a:	68b9      	ldr	r1, [r7, #8]
 800a91c:	4618      	mov	r0, r3
 800a91e:	f000 fda5 	bl	800b46c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a922:	6978      	ldr	r0, [r7, #20]
 800a924:	f7ff fefc 	bl	800a720 <prvUnlockQueue>
	}
 800a928:	bf00      	nop
 800a92a:	3718      	adds	r7, #24
 800a92c:	46bd      	mov	sp, r7
 800a92e:	bd80      	pop	{r7, pc}

0800a930 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a930:	b580      	push	{r7, lr}
 800a932:	b08e      	sub	sp, #56	@ 0x38
 800a934:	af04      	add	r7, sp, #16
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
 800a93c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a93e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a940:	2b00      	cmp	r3, #0
 800a942:	d10b      	bne.n	800a95c <xTaskCreateStatic+0x2c>
	__asm volatile
 800a944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a948:	f383 8811 	msr	BASEPRI, r3
 800a94c:	f3bf 8f6f 	isb	sy
 800a950:	f3bf 8f4f 	dsb	sy
 800a954:	623b      	str	r3, [r7, #32]
}
 800a956:	bf00      	nop
 800a958:	bf00      	nop
 800a95a:	e7fd      	b.n	800a958 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a95c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d10b      	bne.n	800a97a <xTaskCreateStatic+0x4a>
	__asm volatile
 800a962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a966:	f383 8811 	msr	BASEPRI, r3
 800a96a:	f3bf 8f6f 	isb	sy
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	61fb      	str	r3, [r7, #28]
}
 800a974:	bf00      	nop
 800a976:	bf00      	nop
 800a978:	e7fd      	b.n	800a976 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a97a:	23ac      	movs	r3, #172	@ 0xac
 800a97c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	2bac      	cmp	r3, #172	@ 0xac
 800a982:	d00b      	beq.n	800a99c <xTaskCreateStatic+0x6c>
	__asm volatile
 800a984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	61bb      	str	r3, [r7, #24]
}
 800a996:	bf00      	nop
 800a998:	bf00      	nop
 800a99a:	e7fd      	b.n	800a998 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a99c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d01e      	beq.n	800a9e2 <xTaskCreateStatic+0xb2>
 800a9a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d01b      	beq.n	800a9e2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9ac:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a9ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a9b2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a9b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9b6:	2202      	movs	r2, #2
 800a9b8:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a9bc:	2300      	movs	r3, #0
 800a9be:	9303      	str	r3, [sp, #12]
 800a9c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c2:	9302      	str	r3, [sp, #8]
 800a9c4:	f107 0314 	add.w	r3, r7, #20
 800a9c8:	9301      	str	r3, [sp, #4]
 800a9ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a9cc:	9300      	str	r3, [sp, #0]
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	68b9      	ldr	r1, [r7, #8]
 800a9d4:	68f8      	ldr	r0, [r7, #12]
 800a9d6:	f000 f851 	bl	800aa7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a9da:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a9dc:	f000 f8f8 	bl	800abd0 <prvAddNewTaskToReadyList>
 800a9e0:	e001      	b.n	800a9e6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a9e6:	697b      	ldr	r3, [r7, #20]
	}
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	3728      	adds	r7, #40	@ 0x28
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	bd80      	pop	{r7, pc}

0800a9f0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b08c      	sub	sp, #48	@ 0x30
 800a9f4:	af04      	add	r7, sp, #16
 800a9f6:	60f8      	str	r0, [r7, #12]
 800a9f8:	60b9      	str	r1, [r7, #8]
 800a9fa:	603b      	str	r3, [r7, #0]
 800a9fc:	4613      	mov	r3, r2
 800a9fe:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aa00:	88fb      	ldrh	r3, [r7, #6]
 800aa02:	009b      	lsls	r3, r3, #2
 800aa04:	4618      	mov	r0, r3
 800aa06:	f001 fec1 	bl	800c78c <pvPortMalloc>
 800aa0a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aa0c:	697b      	ldr	r3, [r7, #20]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d00e      	beq.n	800aa30 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aa12:	20ac      	movs	r0, #172	@ 0xac
 800aa14:	f001 feba 	bl	800c78c <pvPortMalloc>
 800aa18:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aa1a:	69fb      	ldr	r3, [r7, #28]
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d003      	beq.n	800aa28 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aa20:	69fb      	ldr	r3, [r7, #28]
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	631a      	str	r2, [r3, #48]	@ 0x30
 800aa26:	e005      	b.n	800aa34 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aa28:	6978      	ldr	r0, [r7, #20]
 800aa2a:	f001 ff7d 	bl	800c928 <vPortFree>
 800aa2e:	e001      	b.n	800aa34 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aa30:	2300      	movs	r3, #0
 800aa32:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aa34:	69fb      	ldr	r3, [r7, #28]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d017      	beq.n	800aa6a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aa3a:	69fb      	ldr	r3, [r7, #28]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aa42:	88fa      	ldrh	r2, [r7, #6]
 800aa44:	2300      	movs	r3, #0
 800aa46:	9303      	str	r3, [sp, #12]
 800aa48:	69fb      	ldr	r3, [r7, #28]
 800aa4a:	9302      	str	r3, [sp, #8]
 800aa4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa4e:	9301      	str	r3, [sp, #4]
 800aa50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	68b9      	ldr	r1, [r7, #8]
 800aa58:	68f8      	ldr	r0, [r7, #12]
 800aa5a:	f000 f80f 	bl	800aa7c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa5e:	69f8      	ldr	r0, [r7, #28]
 800aa60:	f000 f8b6 	bl	800abd0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa64:	2301      	movs	r3, #1
 800aa66:	61bb      	str	r3, [r7, #24]
 800aa68:	e002      	b.n	800aa70 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa6a:	f04f 33ff 	mov.w	r3, #4294967295
 800aa6e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa70:	69bb      	ldr	r3, [r7, #24]
	}
 800aa72:	4618      	mov	r0, r3
 800aa74:	3720      	adds	r7, #32
 800aa76:	46bd      	mov	sp, r7
 800aa78:	bd80      	pop	{r7, pc}
	...

0800aa7c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	60f8      	str	r0, [r7, #12]
 800aa84:	60b9      	str	r1, [r7, #8]
 800aa86:	607a      	str	r2, [r7, #4]
 800aa88:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa8c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	009b      	lsls	r3, r3, #2
 800aa92:	461a      	mov	r2, r3
 800aa94:	21a5      	movs	r1, #165	@ 0xa5
 800aa96:	f013 fcc0 	bl	801e41a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800aaa4:	3b01      	subs	r3, #1
 800aaa6:	009b      	lsls	r3, r3, #2
 800aaa8:	4413      	add	r3, r2
 800aaaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aaac:	69bb      	ldr	r3, [r7, #24]
 800aaae:	f023 0307 	bic.w	r3, r3, #7
 800aab2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	f003 0307 	and.w	r3, r3, #7
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00b      	beq.n	800aad6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	617b      	str	r3, [r7, #20]
}
 800aad0:	bf00      	nop
 800aad2:	bf00      	nop
 800aad4:	e7fd      	b.n	800aad2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d01f      	beq.n	800ab1c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aadc:	2300      	movs	r3, #0
 800aade:	61fb      	str	r3, [r7, #28]
 800aae0:	e012      	b.n	800ab08 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	69fb      	ldr	r3, [r7, #28]
 800aae6:	4413      	add	r3, r2
 800aae8:	7819      	ldrb	r1, [r3, #0]
 800aaea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	4413      	add	r3, r2
 800aaf0:	3334      	adds	r3, #52	@ 0x34
 800aaf2:	460a      	mov	r2, r1
 800aaf4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	4413      	add	r3, r2
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d006      	beq.n	800ab10 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	3301      	adds	r3, #1
 800ab06:	61fb      	str	r3, [r7, #28]
 800ab08:	69fb      	ldr	r3, [r7, #28]
 800ab0a:	2b0f      	cmp	r3, #15
 800ab0c:	d9e9      	bls.n	800aae2 <prvInitialiseNewTask+0x66>
 800ab0e:	e000      	b.n	800ab12 <prvInitialiseNewTask+0x96>
			{
				break;
 800ab10:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ab12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab14:	2200      	movs	r2, #0
 800ab16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ab1a:	e003      	b.n	800ab24 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ab24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab26:	2b37      	cmp	r3, #55	@ 0x37
 800ab28:	d901      	bls.n	800ab2e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ab2a:	2337      	movs	r3, #55	@ 0x37
 800ab2c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab32:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ab34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab36:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab38:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ab3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab3c:	2200      	movs	r2, #0
 800ab3e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ab40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab42:	3304      	adds	r3, #4
 800ab44:	4618      	mov	r0, r3
 800ab46:	f7fe fd3d 	bl	80095c4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ab4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab4c:	3318      	adds	r3, #24
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fe fd38 	bl	80095c4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ab54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab5c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ab60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab68:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800ab6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab72:	2200      	movs	r2, #0
 800ab74:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ab80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab82:	3358      	adds	r3, #88	@ 0x58
 800ab84:	224c      	movs	r2, #76	@ 0x4c
 800ab86:	2100      	movs	r1, #0
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f013 fc46 	bl	801e41a <memset>
 800ab8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab90:	4a0c      	ldr	r2, [pc, #48]	@ (800abc4 <prvInitialiseNewTask+0x148>)
 800ab92:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ab94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab96:	4a0c      	ldr	r2, [pc, #48]	@ (800abc8 <prvInitialiseNewTask+0x14c>)
 800ab98:	661a      	str	r2, [r3, #96]	@ 0x60
 800ab9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9c:	4a0b      	ldr	r2, [pc, #44]	@ (800abcc <prvInitialiseNewTask+0x150>)
 800ab9e:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aba0:	683a      	ldr	r2, [r7, #0]
 800aba2:	68f9      	ldr	r1, [r7, #12]
 800aba4:	69b8      	ldr	r0, [r7, #24]
 800aba6:	f001 fb9f 	bl	800c2e8 <pxPortInitialiseStack>
 800abaa:	4602      	mov	r2, r0
 800abac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800abb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d002      	beq.n	800abbc <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800abb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800abba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abbc:	bf00      	nop
 800abbe:	3720      	adds	r7, #32
 800abc0:	46bd      	mov	sp, r7
 800abc2:	bd80      	pop	{r7, pc}
 800abc4:	20012810 	.word	0x20012810
 800abc8:	20012878 	.word	0x20012878
 800abcc:	200128e0 	.word	0x200128e0

0800abd0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b082      	sub	sp, #8
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800abd8:	f001 fcb6 	bl	800c548 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800abdc:	4b2d      	ldr	r3, [pc, #180]	@ (800ac94 <prvAddNewTaskToReadyList+0xc4>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	3301      	adds	r3, #1
 800abe2:	4a2c      	ldr	r2, [pc, #176]	@ (800ac94 <prvAddNewTaskToReadyList+0xc4>)
 800abe4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800abe6:	4b2c      	ldr	r3, [pc, #176]	@ (800ac98 <prvAddNewTaskToReadyList+0xc8>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d109      	bne.n	800ac02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800abee:	4a2a      	ldr	r2, [pc, #168]	@ (800ac98 <prvAddNewTaskToReadyList+0xc8>)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800abf4:	4b27      	ldr	r3, [pc, #156]	@ (800ac94 <prvAddNewTaskToReadyList+0xc4>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	2b01      	cmp	r3, #1
 800abfa:	d110      	bne.n	800ac1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800abfc:	f000 fd64 	bl	800b6c8 <prvInitialiseTaskLists>
 800ac00:	e00d      	b.n	800ac1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ac02:	4b26      	ldr	r3, [pc, #152]	@ (800ac9c <prvAddNewTaskToReadyList+0xcc>)
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	2b00      	cmp	r3, #0
 800ac08:	d109      	bne.n	800ac1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ac0a:	4b23      	ldr	r3, [pc, #140]	@ (800ac98 <prvAddNewTaskToReadyList+0xc8>)
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac14:	429a      	cmp	r2, r3
 800ac16:	d802      	bhi.n	800ac1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ac18:	4a1f      	ldr	r2, [pc, #124]	@ (800ac98 <prvAddNewTaskToReadyList+0xc8>)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ac1e:	4b20      	ldr	r3, [pc, #128]	@ (800aca0 <prvAddNewTaskToReadyList+0xd0>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	3301      	adds	r3, #1
 800ac24:	4a1e      	ldr	r2, [pc, #120]	@ (800aca0 <prvAddNewTaskToReadyList+0xd0>)
 800ac26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ac28:	4b1d      	ldr	r3, [pc, #116]	@ (800aca0 <prvAddNewTaskToReadyList+0xd0>)
 800ac2a:	681a      	ldr	r2, [r3, #0]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac34:	4b1b      	ldr	r3, [pc, #108]	@ (800aca4 <prvAddNewTaskToReadyList+0xd4>)
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d903      	bls.n	800ac44 <prvAddNewTaskToReadyList+0x74>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac40:	4a18      	ldr	r2, [pc, #96]	@ (800aca4 <prvAddNewTaskToReadyList+0xd4>)
 800ac42:	6013      	str	r3, [r2, #0]
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac48:	4613      	mov	r3, r2
 800ac4a:	009b      	lsls	r3, r3, #2
 800ac4c:	4413      	add	r3, r2
 800ac4e:	009b      	lsls	r3, r3, #2
 800ac50:	4a15      	ldr	r2, [pc, #84]	@ (800aca8 <prvAddNewTaskToReadyList+0xd8>)
 800ac52:	441a      	add	r2, r3
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	3304      	adds	r3, #4
 800ac58:	4619      	mov	r1, r3
 800ac5a:	4610      	mov	r0, r2
 800ac5c:	f7fe fcbf 	bl	80095de <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ac60:	f001 fca4 	bl	800c5ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ac64:	4b0d      	ldr	r3, [pc, #52]	@ (800ac9c <prvAddNewTaskToReadyList+0xcc>)
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00e      	beq.n	800ac8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ac6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ac98 <prvAddNewTaskToReadyList+0xc8>)
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac76:	429a      	cmp	r2, r3
 800ac78:	d207      	bcs.n	800ac8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ac7a:	4b0c      	ldr	r3, [pc, #48]	@ (800acac <prvAddNewTaskToReadyList+0xdc>)
 800ac7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac80:	601a      	str	r2, [r3, #0]
 800ac82:	f3bf 8f4f 	dsb	sy
 800ac86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac8a:	bf00      	nop
 800ac8c:	3708      	adds	r7, #8
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	bd80      	pop	{r7, pc}
 800ac92:	bf00      	nop
 800ac94:	2000a8cc 	.word	0x2000a8cc
 800ac98:	2000a3f8 	.word	0x2000a3f8
 800ac9c:	2000a8d8 	.word	0x2000a8d8
 800aca0:	2000a8e8 	.word	0x2000a8e8
 800aca4:	2000a8d4 	.word	0x2000a8d4
 800aca8:	2000a3fc 	.word	0x2000a3fc
 800acac:	e000ed04 	.word	0xe000ed04

0800acb0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b084      	sub	sp, #16
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800acb8:	2300      	movs	r3, #0
 800acba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d018      	beq.n	800acf4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800acc2:	4b14      	ldr	r3, [pc, #80]	@ (800ad14 <vTaskDelay+0x64>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d00b      	beq.n	800ace2 <vTaskDelay+0x32>
	__asm volatile
 800acca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acce:	f383 8811 	msr	BASEPRI, r3
 800acd2:	f3bf 8f6f 	isb	sy
 800acd6:	f3bf 8f4f 	dsb	sy
 800acda:	60bb      	str	r3, [r7, #8]
}
 800acdc:	bf00      	nop
 800acde:	bf00      	nop
 800ace0:	e7fd      	b.n	800acde <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ace2:	f000 f995 	bl	800b010 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ace6:	2100      	movs	r1, #0
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 ff4f 	bl	800bb8c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800acee:	f000 f99d 	bl	800b02c <xTaskResumeAll>
 800acf2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d107      	bne.n	800ad0a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800acfa:	4b07      	ldr	r3, [pc, #28]	@ (800ad18 <vTaskDelay+0x68>)
 800acfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ad00:	601a      	str	r2, [r3, #0]
 800ad02:	f3bf 8f4f 	dsb	sy
 800ad06:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad0a:	bf00      	nop
 800ad0c:	3710      	adds	r7, #16
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}
 800ad12:	bf00      	nop
 800ad14:	2000a8f4 	.word	0x2000a8f4
 800ad18:	e000ed04 	.word	0xe000ed04

0800ad1c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800ad24:	f001 fc10 	bl	800c548 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d102      	bne.n	800ad34 <vTaskSuspend+0x18>
 800ad2e:	4b30      	ldr	r3, [pc, #192]	@ (800adf0 <vTaskSuspend+0xd4>)
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	e000      	b.n	800ad36 <vTaskSuspend+0x1a>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	3304      	adds	r3, #4
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f7fe fcab 	bl	8009698 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d004      	beq.n	800ad54 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	3318      	adds	r3, #24
 800ad4e:	4618      	mov	r0, r3
 800ad50:	f7fe fca2 	bl	8009698 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	3304      	adds	r3, #4
 800ad58:	4619      	mov	r1, r3
 800ad5a:	4826      	ldr	r0, [pc, #152]	@ (800adf4 <vTaskSuspend+0xd8>)
 800ad5c:	f7fe fc3f 	bl	80095de <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800ad66:	b2db      	uxtb	r3, r3
 800ad68:	2b01      	cmp	r3, #1
 800ad6a:	d103      	bne.n	800ad74 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800ad74:	f001 fc1a 	bl	800c5ac <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800ad78:	4b1f      	ldr	r3, [pc, #124]	@ (800adf8 <vTaskSuspend+0xdc>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d005      	beq.n	800ad8c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800ad80:	f001 fbe2 	bl	800c548 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800ad84:	f000 fd44 	bl	800b810 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800ad88:	f001 fc10 	bl	800c5ac <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800ad8c:	4b18      	ldr	r3, [pc, #96]	@ (800adf0 <vTaskSuspend+0xd4>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	68fa      	ldr	r2, [r7, #12]
 800ad92:	429a      	cmp	r2, r3
 800ad94:	d128      	bne.n	800ade8 <vTaskSuspend+0xcc>
		{
			if( xSchedulerRunning != pdFALSE )
 800ad96:	4b18      	ldr	r3, [pc, #96]	@ (800adf8 <vTaskSuspend+0xdc>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d018      	beq.n	800add0 <vTaskSuspend+0xb4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800ad9e:	4b17      	ldr	r3, [pc, #92]	@ (800adfc <vTaskSuspend+0xe0>)
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	d00b      	beq.n	800adbe <vTaskSuspend+0xa2>
	__asm volatile
 800ada6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adaa:	f383 8811 	msr	BASEPRI, r3
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	60bb      	str	r3, [r7, #8]
}
 800adb8:	bf00      	nop
 800adba:	bf00      	nop
 800adbc:	e7fd      	b.n	800adba <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 800adbe:	4b10      	ldr	r3, [pc, #64]	@ (800ae00 <vTaskSuspend+0xe4>)
 800adc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adc4:	601a      	str	r2, [r3, #0]
 800adc6:	f3bf 8f4f 	dsb	sy
 800adca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800adce:	e00b      	b.n	800ade8 <vTaskSuspend+0xcc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800add0:	4b08      	ldr	r3, [pc, #32]	@ (800adf4 <vTaskSuspend+0xd8>)
 800add2:	681a      	ldr	r2, [r3, #0]
 800add4:	4b0b      	ldr	r3, [pc, #44]	@ (800ae04 <vTaskSuspend+0xe8>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	429a      	cmp	r2, r3
 800adda:	d103      	bne.n	800ade4 <vTaskSuspend+0xc8>
					pxCurrentTCB = NULL;
 800addc:	4b04      	ldr	r3, [pc, #16]	@ (800adf0 <vTaskSuspend+0xd4>)
 800adde:	2200      	movs	r2, #0
 800ade0:	601a      	str	r2, [r3, #0]
	}
 800ade2:	e001      	b.n	800ade8 <vTaskSuspend+0xcc>
					vTaskSwitchContext();
 800ade4:	f000 fa9c 	bl	800b320 <vTaskSwitchContext>
	}
 800ade8:	bf00      	nop
 800adea:	3710      	adds	r7, #16
 800adec:	46bd      	mov	sp, r7
 800adee:	bd80      	pop	{r7, pc}
 800adf0:	2000a3f8 	.word	0x2000a3f8
 800adf4:	2000a8b8 	.word	0x2000a8b8
 800adf8:	2000a8d8 	.word	0x2000a8d8
 800adfc:	2000a8f4 	.word	0x2000a8f4
 800ae00:	e000ed04 	.word	0xe000ed04
 800ae04:	2000a8cc 	.word	0x2000a8cc

0800ae08 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 800ae08:	b480      	push	{r7}
 800ae0a:	b087      	sub	sp, #28
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800ae10:	2300      	movs	r3, #0
 800ae12:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10b      	bne.n	800ae36 <prvTaskIsTaskSuspended+0x2e>
	__asm volatile
 800ae1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae22:	f383 8811 	msr	BASEPRI, r3
 800ae26:	f3bf 8f6f 	isb	sy
 800ae2a:	f3bf 8f4f 	dsb	sy
 800ae2e:	60fb      	str	r3, [r7, #12]
}
 800ae30:	bf00      	nop
 800ae32:	bf00      	nop
 800ae34:	e7fd      	b.n	800ae32 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ae36:	693b      	ldr	r3, [r7, #16]
 800ae38:	695b      	ldr	r3, [r3, #20]
 800ae3a:	4a0a      	ldr	r2, [pc, #40]	@ (800ae64 <prvTaskIsTaskSuspended+0x5c>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d10a      	bne.n	800ae56 <prvTaskIsTaskSuspended+0x4e>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae44:	4a08      	ldr	r2, [pc, #32]	@ (800ae68 <prvTaskIsTaskSuspended+0x60>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d005      	beq.n	800ae56 <prvTaskIsTaskSuspended+0x4e>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d101      	bne.n	800ae56 <prvTaskIsTaskSuspended+0x4e>
				{
					xReturn = pdTRUE;
 800ae52:	2301      	movs	r3, #1
 800ae54:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ae56:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800ae58:	4618      	mov	r0, r3
 800ae5a:	371c      	adds	r7, #28
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr
 800ae64:	2000a8b8 	.word	0x2000a8b8
 800ae68:	2000a88c 	.word	0x2000a88c

0800ae6c <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10b      	bne.n	800ae96 <vTaskResume+0x2a>
	__asm volatile
 800ae7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae82:	f383 8811 	msr	BASEPRI, r3
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	60bb      	str	r3, [r7, #8]
}
 800ae90:	bf00      	nop
 800ae92:	bf00      	nop
 800ae94:	e7fd      	b.n	800ae92 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800ae96:	4b21      	ldr	r3, [pc, #132]	@ (800af1c <vTaskResume+0xb0>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	68fa      	ldr	r2, [r7, #12]
 800ae9c:	429a      	cmp	r2, r3
 800ae9e:	d038      	beq.n	800af12 <vTaskResume+0xa6>
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d035      	beq.n	800af12 <vTaskResume+0xa6>
		{
			taskENTER_CRITICAL();
 800aea6:	f001 fb4f 	bl	800c548 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800aeaa:	68f8      	ldr	r0, [r7, #12]
 800aeac:	f7ff ffac 	bl	800ae08 <prvTaskIsTaskSuspended>
 800aeb0:	4603      	mov	r3, r0
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d02b      	beq.n	800af0e <vTaskResume+0xa2>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	3304      	adds	r3, #4
 800aeba:	4618      	mov	r0, r3
 800aebc:	f7fe fbec 	bl	8009698 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aec4:	4b16      	ldr	r3, [pc, #88]	@ (800af20 <vTaskResume+0xb4>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d903      	bls.n	800aed4 <vTaskResume+0x68>
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aed0:	4a13      	ldr	r2, [pc, #76]	@ (800af20 <vTaskResume+0xb4>)
 800aed2:	6013      	str	r3, [r2, #0]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aed8:	4613      	mov	r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	4413      	add	r3, r2
 800aede:	009b      	lsls	r3, r3, #2
 800aee0:	4a10      	ldr	r2, [pc, #64]	@ (800af24 <vTaskResume+0xb8>)
 800aee2:	441a      	add	r2, r3
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	3304      	adds	r3, #4
 800aee8:	4619      	mov	r1, r3
 800aeea:	4610      	mov	r0, r2
 800aeec:	f7fe fb77 	bl	80095de <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aef4:	4b09      	ldr	r3, [pc, #36]	@ (800af1c <vTaskResume+0xb0>)
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d307      	bcc.n	800af0e <vTaskResume+0xa2>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 800aefe:	4b0a      	ldr	r3, [pc, #40]	@ (800af28 <vTaskResume+0xbc>)
 800af00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af04:	601a      	str	r2, [r3, #0]
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 800af0e:	f001 fb4d 	bl	800c5ac <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800af12:	bf00      	nop
 800af14:	3710      	adds	r7, #16
 800af16:	46bd      	mov	sp, r7
 800af18:	bd80      	pop	{r7, pc}
 800af1a:	bf00      	nop
 800af1c:	2000a3f8 	.word	0x2000a3f8
 800af20:	2000a8d4 	.word	0x2000a8d4
 800af24:	2000a3fc 	.word	0x2000a3fc
 800af28:	e000ed04 	.word	0xe000ed04

0800af2c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b08a      	sub	sp, #40	@ 0x28
 800af30:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800af32:	2300      	movs	r3, #0
 800af34:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800af36:	2300      	movs	r3, #0
 800af38:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800af3a:	463a      	mov	r2, r7
 800af3c:	1d39      	adds	r1, r7, #4
 800af3e:	f107 0308 	add.w	r3, r7, #8
 800af42:	4618      	mov	r0, r3
 800af44:	f7fe faea 	bl	800951c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800af48:	6839      	ldr	r1, [r7, #0]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	68ba      	ldr	r2, [r7, #8]
 800af4e:	9202      	str	r2, [sp, #8]
 800af50:	9301      	str	r3, [sp, #4]
 800af52:	2300      	movs	r3, #0
 800af54:	9300      	str	r3, [sp, #0]
 800af56:	2300      	movs	r3, #0
 800af58:	460a      	mov	r2, r1
 800af5a:	4925      	ldr	r1, [pc, #148]	@ (800aff0 <vTaskStartScheduler+0xc4>)
 800af5c:	4825      	ldr	r0, [pc, #148]	@ (800aff4 <vTaskStartScheduler+0xc8>)
 800af5e:	f7ff fce7 	bl	800a930 <xTaskCreateStatic>
 800af62:	4603      	mov	r3, r0
 800af64:	4a24      	ldr	r2, [pc, #144]	@ (800aff8 <vTaskStartScheduler+0xcc>)
 800af66:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800af68:	4b23      	ldr	r3, [pc, #140]	@ (800aff8 <vTaskStartScheduler+0xcc>)
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d002      	beq.n	800af76 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800af70:	2301      	movs	r3, #1
 800af72:	617b      	str	r3, [r7, #20]
 800af74:	e001      	b.n	800af7a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800af76:	2300      	movs	r3, #0
 800af78:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d102      	bne.n	800af86 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800af80:	f000 fe58 	bl	800bc34 <xTimerCreateTimerTask>
 800af84:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2b01      	cmp	r3, #1
 800af8a:	d11d      	bne.n	800afc8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800af8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af90:	f383 8811 	msr	BASEPRI, r3
 800af94:	f3bf 8f6f 	isb	sy
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	613b      	str	r3, [r7, #16]
}
 800af9e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800afa0:	4b16      	ldr	r3, [pc, #88]	@ (800affc <vTaskStartScheduler+0xd0>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	3358      	adds	r3, #88	@ 0x58
 800afa6:	4a16      	ldr	r2, [pc, #88]	@ (800b000 <vTaskStartScheduler+0xd4>)
 800afa8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800afaa:	4b16      	ldr	r3, [pc, #88]	@ (800b004 <vTaskStartScheduler+0xd8>)
 800afac:	f04f 32ff 	mov.w	r2, #4294967295
 800afb0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800afb2:	4b15      	ldr	r3, [pc, #84]	@ (800b008 <vTaskStartScheduler+0xdc>)
 800afb4:	2201      	movs	r2, #1
 800afb6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800afb8:	4b14      	ldr	r3, [pc, #80]	@ (800b00c <vTaskStartScheduler+0xe0>)
 800afba:	2200      	movs	r2, #0
 800afbc:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800afbe:	f7f6 fb01 	bl	80015c4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800afc2:	f001 fa1d 	bl	800c400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800afc6:	e00f      	b.n	800afe8 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afce:	d10b      	bne.n	800afe8 <vTaskStartScheduler+0xbc>
	__asm volatile
 800afd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afd4:	f383 8811 	msr	BASEPRI, r3
 800afd8:	f3bf 8f6f 	isb	sy
 800afdc:	f3bf 8f4f 	dsb	sy
 800afe0:	60fb      	str	r3, [r7, #12]
}
 800afe2:	bf00      	nop
 800afe4:	bf00      	nop
 800afe6:	e7fd      	b.n	800afe4 <vTaskStartScheduler+0xb8>
}
 800afe8:	bf00      	nop
 800afea:	3718      	adds	r7, #24
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}
 800aff0:	08021cc0 	.word	0x08021cc0
 800aff4:	0800b699 	.word	0x0800b699
 800aff8:	2000a8f0 	.word	0x2000a8f0
 800affc:	2000a3f8 	.word	0x2000a3f8
 800b000:	20000060 	.word	0x20000060
 800b004:	2000a8ec 	.word	0x2000a8ec
 800b008:	2000a8d8 	.word	0x2000a8d8
 800b00c:	2000a8d0 	.word	0x2000a8d0

0800b010 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b010:	b480      	push	{r7}
 800b012:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b014:	4b04      	ldr	r3, [pc, #16]	@ (800b028 <vTaskSuspendAll+0x18>)
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	3301      	adds	r3, #1
 800b01a:	4a03      	ldr	r2, [pc, #12]	@ (800b028 <vTaskSuspendAll+0x18>)
 800b01c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b01e:	bf00      	nop
 800b020:	46bd      	mov	sp, r7
 800b022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b026:	4770      	bx	lr
 800b028:	2000a8f4 	.word	0x2000a8f4

0800b02c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b084      	sub	sp, #16
 800b030:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b032:	2300      	movs	r3, #0
 800b034:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b036:	2300      	movs	r3, #0
 800b038:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b03a:	4b42      	ldr	r3, [pc, #264]	@ (800b144 <xTaskResumeAll+0x118>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d10b      	bne.n	800b05a <xTaskResumeAll+0x2e>
	__asm volatile
 800b042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b046:	f383 8811 	msr	BASEPRI, r3
 800b04a:	f3bf 8f6f 	isb	sy
 800b04e:	f3bf 8f4f 	dsb	sy
 800b052:	603b      	str	r3, [r7, #0]
}
 800b054:	bf00      	nop
 800b056:	bf00      	nop
 800b058:	e7fd      	b.n	800b056 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b05a:	f001 fa75 	bl	800c548 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b05e:	4b39      	ldr	r3, [pc, #228]	@ (800b144 <xTaskResumeAll+0x118>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	3b01      	subs	r3, #1
 800b064:	4a37      	ldr	r2, [pc, #220]	@ (800b144 <xTaskResumeAll+0x118>)
 800b066:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b068:	4b36      	ldr	r3, [pc, #216]	@ (800b144 <xTaskResumeAll+0x118>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d162      	bne.n	800b136 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b070:	4b35      	ldr	r3, [pc, #212]	@ (800b148 <xTaskResumeAll+0x11c>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d05e      	beq.n	800b136 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b078:	e02f      	b.n	800b0da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b07a:	4b34      	ldr	r3, [pc, #208]	@ (800b14c <xTaskResumeAll+0x120>)
 800b07c:	68db      	ldr	r3, [r3, #12]
 800b07e:	68db      	ldr	r3, [r3, #12]
 800b080:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	3318      	adds	r3, #24
 800b086:	4618      	mov	r0, r3
 800b088:	f7fe fb06 	bl	8009698 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	3304      	adds	r3, #4
 800b090:	4618      	mov	r0, r3
 800b092:	f7fe fb01 	bl	8009698 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b09a:	4b2d      	ldr	r3, [pc, #180]	@ (800b150 <xTaskResumeAll+0x124>)
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	429a      	cmp	r2, r3
 800b0a0:	d903      	bls.n	800b0aa <xTaskResumeAll+0x7e>
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0a6:	4a2a      	ldr	r2, [pc, #168]	@ (800b150 <xTaskResumeAll+0x124>)
 800b0a8:	6013      	str	r3, [r2, #0]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	009b      	lsls	r3, r3, #2
 800b0b2:	4413      	add	r3, r2
 800b0b4:	009b      	lsls	r3, r3, #2
 800b0b6:	4a27      	ldr	r2, [pc, #156]	@ (800b154 <xTaskResumeAll+0x128>)
 800b0b8:	441a      	add	r2, r3
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	3304      	adds	r3, #4
 800b0be:	4619      	mov	r1, r3
 800b0c0:	4610      	mov	r0, r2
 800b0c2:	f7fe fa8c 	bl	80095de <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0ca:	4b23      	ldr	r3, [pc, #140]	@ (800b158 <xTaskResumeAll+0x12c>)
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0d0:	429a      	cmp	r2, r3
 800b0d2:	d302      	bcc.n	800b0da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b0d4:	4b21      	ldr	r3, [pc, #132]	@ (800b15c <xTaskResumeAll+0x130>)
 800b0d6:	2201      	movs	r2, #1
 800b0d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b0da:	4b1c      	ldr	r3, [pc, #112]	@ (800b14c <xTaskResumeAll+0x120>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d1cb      	bne.n	800b07a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	d001      	beq.n	800b0ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b0e8:	f000 fb92 	bl	800b810 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b0ec:	4b1c      	ldr	r3, [pc, #112]	@ (800b160 <xTaskResumeAll+0x134>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d010      	beq.n	800b11a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b0f8:	f000 f858 	bl	800b1ac <xTaskIncrementTick>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d002      	beq.n	800b108 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b102:	4b16      	ldr	r3, [pc, #88]	@ (800b15c <xTaskResumeAll+0x130>)
 800b104:	2201      	movs	r2, #1
 800b106:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	3b01      	subs	r3, #1
 800b10c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d1f1      	bne.n	800b0f8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b114:	4b12      	ldr	r3, [pc, #72]	@ (800b160 <xTaskResumeAll+0x134>)
 800b116:	2200      	movs	r2, #0
 800b118:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b11a:	4b10      	ldr	r3, [pc, #64]	@ (800b15c <xTaskResumeAll+0x130>)
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d009      	beq.n	800b136 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b122:	2301      	movs	r3, #1
 800b124:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b126:	4b0f      	ldr	r3, [pc, #60]	@ (800b164 <xTaskResumeAll+0x138>)
 800b128:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b12c:	601a      	str	r2, [r3, #0]
 800b12e:	f3bf 8f4f 	dsb	sy
 800b132:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b136:	f001 fa39 	bl	800c5ac <vPortExitCritical>

	return xAlreadyYielded;
 800b13a:	68bb      	ldr	r3, [r7, #8]
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3710      	adds	r7, #16
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}
 800b144:	2000a8f4 	.word	0x2000a8f4
 800b148:	2000a8cc 	.word	0x2000a8cc
 800b14c:	2000a88c 	.word	0x2000a88c
 800b150:	2000a8d4 	.word	0x2000a8d4
 800b154:	2000a3fc 	.word	0x2000a3fc
 800b158:	2000a3f8 	.word	0x2000a3f8
 800b15c:	2000a8e0 	.word	0x2000a8e0
 800b160:	2000a8dc 	.word	0x2000a8dc
 800b164:	e000ed04 	.word	0xe000ed04

0800b168 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b168:	b480      	push	{r7}
 800b16a:	b083      	sub	sp, #12
 800b16c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b16e:	4b05      	ldr	r3, [pc, #20]	@ (800b184 <xTaskGetTickCount+0x1c>)
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b174:	687b      	ldr	r3, [r7, #4]
}
 800b176:	4618      	mov	r0, r3
 800b178:	370c      	adds	r7, #12
 800b17a:	46bd      	mov	sp, r7
 800b17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b180:	4770      	bx	lr
 800b182:	bf00      	nop
 800b184:	2000a8d0 	.word	0x2000a8d0

0800b188 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b18e:	f001 fabb 	bl	800c708 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800b192:	2300      	movs	r3, #0
 800b194:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800b196:	4b04      	ldr	r3, [pc, #16]	@ (800b1a8 <xTaskGetTickCountFromISR+0x20>)
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b19c:	683b      	ldr	r3, [r7, #0]
}
 800b19e:	4618      	mov	r0, r3
 800b1a0:	3708      	adds	r7, #8
 800b1a2:	46bd      	mov	sp, r7
 800b1a4:	bd80      	pop	{r7, pc}
 800b1a6:	bf00      	nop
 800b1a8:	2000a8d0 	.word	0x2000a8d0

0800b1ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	b086      	sub	sp, #24
 800b1b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b1b6:	4b4f      	ldr	r3, [pc, #316]	@ (800b2f4 <xTaskIncrementTick+0x148>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	f040 8090 	bne.w	800b2e0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b1c0:	4b4d      	ldr	r3, [pc, #308]	@ (800b2f8 <xTaskIncrementTick+0x14c>)
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b1c8:	4a4b      	ldr	r2, [pc, #300]	@ (800b2f8 <xTaskIncrementTick+0x14c>)
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d121      	bne.n	800b218 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b1d4:	4b49      	ldr	r3, [pc, #292]	@ (800b2fc <xTaskIncrementTick+0x150>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00b      	beq.n	800b1f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	603b      	str	r3, [r7, #0]
}
 800b1f0:	bf00      	nop
 800b1f2:	bf00      	nop
 800b1f4:	e7fd      	b.n	800b1f2 <xTaskIncrementTick+0x46>
 800b1f6:	4b41      	ldr	r3, [pc, #260]	@ (800b2fc <xTaskIncrementTick+0x150>)
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	60fb      	str	r3, [r7, #12]
 800b1fc:	4b40      	ldr	r3, [pc, #256]	@ (800b300 <xTaskIncrementTick+0x154>)
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	4a3e      	ldr	r2, [pc, #248]	@ (800b2fc <xTaskIncrementTick+0x150>)
 800b202:	6013      	str	r3, [r2, #0]
 800b204:	4a3e      	ldr	r2, [pc, #248]	@ (800b300 <xTaskIncrementTick+0x154>)
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	6013      	str	r3, [r2, #0]
 800b20a:	4b3e      	ldr	r3, [pc, #248]	@ (800b304 <xTaskIncrementTick+0x158>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	3301      	adds	r3, #1
 800b210:	4a3c      	ldr	r2, [pc, #240]	@ (800b304 <xTaskIncrementTick+0x158>)
 800b212:	6013      	str	r3, [r2, #0]
 800b214:	f000 fafc 	bl	800b810 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b218:	4b3b      	ldr	r3, [pc, #236]	@ (800b308 <xTaskIncrementTick+0x15c>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	693a      	ldr	r2, [r7, #16]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d349      	bcc.n	800b2b6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b222:	4b36      	ldr	r3, [pc, #216]	@ (800b2fc <xTaskIncrementTick+0x150>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d104      	bne.n	800b236 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b22c:	4b36      	ldr	r3, [pc, #216]	@ (800b308 <xTaskIncrementTick+0x15c>)
 800b22e:	f04f 32ff 	mov.w	r2, #4294967295
 800b232:	601a      	str	r2, [r3, #0]
					break;
 800b234:	e03f      	b.n	800b2b6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b236:	4b31      	ldr	r3, [pc, #196]	@ (800b2fc <xTaskIncrementTick+0x150>)
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	68db      	ldr	r3, [r3, #12]
 800b23c:	68db      	ldr	r3, [r3, #12]
 800b23e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b246:	693a      	ldr	r2, [r7, #16]
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d203      	bcs.n	800b256 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b24e:	4a2e      	ldr	r2, [pc, #184]	@ (800b308 <xTaskIncrementTick+0x15c>)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b254:	e02f      	b.n	800b2b6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	3304      	adds	r3, #4
 800b25a:	4618      	mov	r0, r3
 800b25c:	f7fe fa1c 	bl	8009698 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b264:	2b00      	cmp	r3, #0
 800b266:	d004      	beq.n	800b272 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	3318      	adds	r3, #24
 800b26c:	4618      	mov	r0, r3
 800b26e:	f7fe fa13 	bl	8009698 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b276:	4b25      	ldr	r3, [pc, #148]	@ (800b30c <xTaskIncrementTick+0x160>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	429a      	cmp	r2, r3
 800b27c:	d903      	bls.n	800b286 <xTaskIncrementTick+0xda>
 800b27e:	68bb      	ldr	r3, [r7, #8]
 800b280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b282:	4a22      	ldr	r2, [pc, #136]	@ (800b30c <xTaskIncrementTick+0x160>)
 800b284:	6013      	str	r3, [r2, #0]
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b28a:	4613      	mov	r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	4413      	add	r3, r2
 800b290:	009b      	lsls	r3, r3, #2
 800b292:	4a1f      	ldr	r2, [pc, #124]	@ (800b310 <xTaskIncrementTick+0x164>)
 800b294:	441a      	add	r2, r3
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	3304      	adds	r3, #4
 800b29a:	4619      	mov	r1, r3
 800b29c:	4610      	mov	r0, r2
 800b29e:	f7fe f99e 	bl	80095de <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2a6:	4b1b      	ldr	r3, [pc, #108]	@ (800b314 <xTaskIncrementTick+0x168>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d3b8      	bcc.n	800b222 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b2b4:	e7b5      	b.n	800b222 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b2b6:	4b17      	ldr	r3, [pc, #92]	@ (800b314 <xTaskIncrementTick+0x168>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b2bc:	4914      	ldr	r1, [pc, #80]	@ (800b310 <xTaskIncrementTick+0x164>)
 800b2be:	4613      	mov	r3, r2
 800b2c0:	009b      	lsls	r3, r3, #2
 800b2c2:	4413      	add	r3, r2
 800b2c4:	009b      	lsls	r3, r3, #2
 800b2c6:	440b      	add	r3, r1
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	2b01      	cmp	r3, #1
 800b2cc:	d901      	bls.n	800b2d2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b2d2:	4b11      	ldr	r3, [pc, #68]	@ (800b318 <xTaskIncrementTick+0x16c>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d007      	beq.n	800b2ea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b2da:	2301      	movs	r3, #1
 800b2dc:	617b      	str	r3, [r7, #20]
 800b2de:	e004      	b.n	800b2ea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b2e0:	4b0e      	ldr	r3, [pc, #56]	@ (800b31c <xTaskIncrementTick+0x170>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	4a0d      	ldr	r2, [pc, #52]	@ (800b31c <xTaskIncrementTick+0x170>)
 800b2e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b2ea:	697b      	ldr	r3, [r7, #20]
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3718      	adds	r7, #24
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	bd80      	pop	{r7, pc}
 800b2f4:	2000a8f4 	.word	0x2000a8f4
 800b2f8:	2000a8d0 	.word	0x2000a8d0
 800b2fc:	2000a884 	.word	0x2000a884
 800b300:	2000a888 	.word	0x2000a888
 800b304:	2000a8e4 	.word	0x2000a8e4
 800b308:	2000a8ec 	.word	0x2000a8ec
 800b30c:	2000a8d4 	.word	0x2000a8d4
 800b310:	2000a3fc 	.word	0x2000a3fc
 800b314:	2000a3f8 	.word	0x2000a3f8
 800b318:	2000a8e0 	.word	0x2000a8e0
 800b31c:	2000a8dc 	.word	0x2000a8dc

0800b320 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b326:	4b36      	ldr	r3, [pc, #216]	@ (800b400 <vTaskSwitchContext+0xe0>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d003      	beq.n	800b336 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b32e:	4b35      	ldr	r3, [pc, #212]	@ (800b404 <vTaskSwitchContext+0xe4>)
 800b330:	2201      	movs	r2, #1
 800b332:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b334:	e060      	b.n	800b3f8 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 800b336:	4b33      	ldr	r3, [pc, #204]	@ (800b404 <vTaskSwitchContext+0xe4>)
 800b338:	2200      	movs	r2, #0
 800b33a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800b33c:	f7f6 f949 	bl	80015d2 <getRunTimeCounterValue>
 800b340:	4603      	mov	r3, r0
 800b342:	4a31      	ldr	r2, [pc, #196]	@ (800b408 <vTaskSwitchContext+0xe8>)
 800b344:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800b346:	4b30      	ldr	r3, [pc, #192]	@ (800b408 <vTaskSwitchContext+0xe8>)
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	4b30      	ldr	r3, [pc, #192]	@ (800b40c <vTaskSwitchContext+0xec>)
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d909      	bls.n	800b366 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800b352:	4b2f      	ldr	r3, [pc, #188]	@ (800b410 <vTaskSwitchContext+0xf0>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800b358:	4a2b      	ldr	r2, [pc, #172]	@ (800b408 <vTaskSwitchContext+0xe8>)
 800b35a:	6810      	ldr	r0, [r2, #0]
 800b35c:	4a2b      	ldr	r2, [pc, #172]	@ (800b40c <vTaskSwitchContext+0xec>)
 800b35e:	6812      	ldr	r2, [r2, #0]
 800b360:	1a82      	subs	r2, r0, r2
 800b362:	440a      	add	r2, r1
 800b364:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800b366:	4b28      	ldr	r3, [pc, #160]	@ (800b408 <vTaskSwitchContext+0xe8>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4a28      	ldr	r2, [pc, #160]	@ (800b40c <vTaskSwitchContext+0xec>)
 800b36c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b36e:	4b29      	ldr	r3, [pc, #164]	@ (800b414 <vTaskSwitchContext+0xf4>)
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	60fb      	str	r3, [r7, #12]
 800b374:	e011      	b.n	800b39a <vTaskSwitchContext+0x7a>
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d10b      	bne.n	800b394 <vTaskSwitchContext+0x74>
	__asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	607b      	str	r3, [r7, #4]
}
 800b38e:	bf00      	nop
 800b390:	bf00      	nop
 800b392:	e7fd      	b.n	800b390 <vTaskSwitchContext+0x70>
 800b394:	68fb      	ldr	r3, [r7, #12]
 800b396:	3b01      	subs	r3, #1
 800b398:	60fb      	str	r3, [r7, #12]
 800b39a:	491f      	ldr	r1, [pc, #124]	@ (800b418 <vTaskSwitchContext+0xf8>)
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	4613      	mov	r3, r2
 800b3a0:	009b      	lsls	r3, r3, #2
 800b3a2:	4413      	add	r3, r2
 800b3a4:	009b      	lsls	r3, r3, #2
 800b3a6:	440b      	add	r3, r1
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d0e3      	beq.n	800b376 <vTaskSwitchContext+0x56>
 800b3ae:	68fa      	ldr	r2, [r7, #12]
 800b3b0:	4613      	mov	r3, r2
 800b3b2:	009b      	lsls	r3, r3, #2
 800b3b4:	4413      	add	r3, r2
 800b3b6:	009b      	lsls	r3, r3, #2
 800b3b8:	4a17      	ldr	r2, [pc, #92]	@ (800b418 <vTaskSwitchContext+0xf8>)
 800b3ba:	4413      	add	r3, r2
 800b3bc:	60bb      	str	r3, [r7, #8]
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	685a      	ldr	r2, [r3, #4]
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	605a      	str	r2, [r3, #4]
 800b3c8:	68bb      	ldr	r3, [r7, #8]
 800b3ca:	685a      	ldr	r2, [r3, #4]
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	3308      	adds	r3, #8
 800b3d0:	429a      	cmp	r2, r3
 800b3d2:	d104      	bne.n	800b3de <vTaskSwitchContext+0xbe>
 800b3d4:	68bb      	ldr	r3, [r7, #8]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	685a      	ldr	r2, [r3, #4]
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	605a      	str	r2, [r3, #4]
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	685b      	ldr	r3, [r3, #4]
 800b3e2:	68db      	ldr	r3, [r3, #12]
 800b3e4:	4a0a      	ldr	r2, [pc, #40]	@ (800b410 <vTaskSwitchContext+0xf0>)
 800b3e6:	6013      	str	r3, [r2, #0]
 800b3e8:	4a0a      	ldr	r2, [pc, #40]	@ (800b414 <vTaskSwitchContext+0xf4>)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b3ee:	4b08      	ldr	r3, [pc, #32]	@ (800b410 <vTaskSwitchContext+0xf0>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	3358      	adds	r3, #88	@ 0x58
 800b3f4:	4a09      	ldr	r2, [pc, #36]	@ (800b41c <vTaskSwitchContext+0xfc>)
 800b3f6:	6013      	str	r3, [r2, #0]
}
 800b3f8:	bf00      	nop
 800b3fa:	3710      	adds	r7, #16
 800b3fc:	46bd      	mov	sp, r7
 800b3fe:	bd80      	pop	{r7, pc}
 800b400:	2000a8f4 	.word	0x2000a8f4
 800b404:	2000a8e0 	.word	0x2000a8e0
 800b408:	2000a8fc 	.word	0x2000a8fc
 800b40c:	2000a8f8 	.word	0x2000a8f8
 800b410:	2000a3f8 	.word	0x2000a3f8
 800b414:	2000a8d4 	.word	0x2000a8d4
 800b418:	2000a3fc 	.word	0x2000a3fc
 800b41c:	20000060 	.word	0x20000060

0800b420 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b420:	b580      	push	{r7, lr}
 800b422:	b084      	sub	sp, #16
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
 800b428:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d10b      	bne.n	800b448 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b434:	f383 8811 	msr	BASEPRI, r3
 800b438:	f3bf 8f6f 	isb	sy
 800b43c:	f3bf 8f4f 	dsb	sy
 800b440:	60fb      	str	r3, [r7, #12]
}
 800b442:	bf00      	nop
 800b444:	bf00      	nop
 800b446:	e7fd      	b.n	800b444 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b448:	4b07      	ldr	r3, [pc, #28]	@ (800b468 <vTaskPlaceOnEventList+0x48>)
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	3318      	adds	r3, #24
 800b44e:	4619      	mov	r1, r3
 800b450:	6878      	ldr	r0, [r7, #4]
 800b452:	f7fe f8e8 	bl	8009626 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b456:	2101      	movs	r1, #1
 800b458:	6838      	ldr	r0, [r7, #0]
 800b45a:	f000 fb97 	bl	800bb8c <prvAddCurrentTaskToDelayedList>
}
 800b45e:	bf00      	nop
 800b460:	3710      	adds	r7, #16
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	2000a3f8 	.word	0x2000a3f8

0800b46c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b086      	sub	sp, #24
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	d10b      	bne.n	800b496 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b482:	f383 8811 	msr	BASEPRI, r3
 800b486:	f3bf 8f6f 	isb	sy
 800b48a:	f3bf 8f4f 	dsb	sy
 800b48e:	617b      	str	r3, [r7, #20]
}
 800b490:	bf00      	nop
 800b492:	bf00      	nop
 800b494:	e7fd      	b.n	800b492 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b496:	4b0a      	ldr	r3, [pc, #40]	@ (800b4c0 <vTaskPlaceOnEventListRestricted+0x54>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	3318      	adds	r3, #24
 800b49c:	4619      	mov	r1, r3
 800b49e:	68f8      	ldr	r0, [r7, #12]
 800b4a0:	f7fe f89d 	bl	80095de <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d002      	beq.n	800b4b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b4aa:	f04f 33ff 	mov.w	r3, #4294967295
 800b4ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b4b0:	6879      	ldr	r1, [r7, #4]
 800b4b2:	68b8      	ldr	r0, [r7, #8]
 800b4b4:	f000 fb6a 	bl	800bb8c <prvAddCurrentTaskToDelayedList>
	}
 800b4b8:	bf00      	nop
 800b4ba:	3718      	adds	r7, #24
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}
 800b4c0:	2000a3f8 	.word	0x2000a3f8

0800b4c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b086      	sub	sp, #24
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	68db      	ldr	r3, [r3, #12]
 800b4d0:	68db      	ldr	r3, [r3, #12]
 800b4d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d10b      	bne.n	800b4f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b4da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4de:	f383 8811 	msr	BASEPRI, r3
 800b4e2:	f3bf 8f6f 	isb	sy
 800b4e6:	f3bf 8f4f 	dsb	sy
 800b4ea:	60fb      	str	r3, [r7, #12]
}
 800b4ec:	bf00      	nop
 800b4ee:	bf00      	nop
 800b4f0:	e7fd      	b.n	800b4ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b4f2:	693b      	ldr	r3, [r7, #16]
 800b4f4:	3318      	adds	r3, #24
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f7fe f8ce 	bl	8009698 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b4fc:	4b1d      	ldr	r3, [pc, #116]	@ (800b574 <xTaskRemoveFromEventList+0xb0>)
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	2b00      	cmp	r3, #0
 800b502:	d11d      	bne.n	800b540 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b504:	693b      	ldr	r3, [r7, #16]
 800b506:	3304      	adds	r3, #4
 800b508:	4618      	mov	r0, r3
 800b50a:	f7fe f8c5 	bl	8009698 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b512:	4b19      	ldr	r3, [pc, #100]	@ (800b578 <xTaskRemoveFromEventList+0xb4>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	429a      	cmp	r2, r3
 800b518:	d903      	bls.n	800b522 <xTaskRemoveFromEventList+0x5e>
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b51e:	4a16      	ldr	r2, [pc, #88]	@ (800b578 <xTaskRemoveFromEventList+0xb4>)
 800b520:	6013      	str	r3, [r2, #0]
 800b522:	693b      	ldr	r3, [r7, #16]
 800b524:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b526:	4613      	mov	r3, r2
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	4413      	add	r3, r2
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	4a13      	ldr	r2, [pc, #76]	@ (800b57c <xTaskRemoveFromEventList+0xb8>)
 800b530:	441a      	add	r2, r3
 800b532:	693b      	ldr	r3, [r7, #16]
 800b534:	3304      	adds	r3, #4
 800b536:	4619      	mov	r1, r3
 800b538:	4610      	mov	r0, r2
 800b53a:	f7fe f850 	bl	80095de <vListInsertEnd>
 800b53e:	e005      	b.n	800b54c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	3318      	adds	r3, #24
 800b544:	4619      	mov	r1, r3
 800b546:	480e      	ldr	r0, [pc, #56]	@ (800b580 <xTaskRemoveFromEventList+0xbc>)
 800b548:	f7fe f849 	bl	80095de <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b550:	4b0c      	ldr	r3, [pc, #48]	@ (800b584 <xTaskRemoveFromEventList+0xc0>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b556:	429a      	cmp	r2, r3
 800b558:	d905      	bls.n	800b566 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b55a:	2301      	movs	r3, #1
 800b55c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b55e:	4b0a      	ldr	r3, [pc, #40]	@ (800b588 <xTaskRemoveFromEventList+0xc4>)
 800b560:	2201      	movs	r2, #1
 800b562:	601a      	str	r2, [r3, #0]
 800b564:	e001      	b.n	800b56a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b566:	2300      	movs	r3, #0
 800b568:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b56a:	697b      	ldr	r3, [r7, #20]
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	3718      	adds	r7, #24
 800b570:	46bd      	mov	sp, r7
 800b572:	bd80      	pop	{r7, pc}
 800b574:	2000a8f4 	.word	0x2000a8f4
 800b578:	2000a8d4 	.word	0x2000a8d4
 800b57c:	2000a3fc 	.word	0x2000a3fc
 800b580:	2000a88c 	.word	0x2000a88c
 800b584:	2000a3f8 	.word	0x2000a3f8
 800b588:	2000a8e0 	.word	0x2000a8e0

0800b58c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b58c:	b480      	push	{r7}
 800b58e:	b083      	sub	sp, #12
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b594:	4b06      	ldr	r3, [pc, #24]	@ (800b5b0 <vTaskInternalSetTimeOutState+0x24>)
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b59c:	4b05      	ldr	r3, [pc, #20]	@ (800b5b4 <vTaskInternalSetTimeOutState+0x28>)
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	605a      	str	r2, [r3, #4]
}
 800b5a4:	bf00      	nop
 800b5a6:	370c      	adds	r7, #12
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ae:	4770      	bx	lr
 800b5b0:	2000a8e4 	.word	0x2000a8e4
 800b5b4:	2000a8d0 	.word	0x2000a8d0

0800b5b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b088      	sub	sp, #32
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d10b      	bne.n	800b5e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b5c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5cc:	f383 8811 	msr	BASEPRI, r3
 800b5d0:	f3bf 8f6f 	isb	sy
 800b5d4:	f3bf 8f4f 	dsb	sy
 800b5d8:	613b      	str	r3, [r7, #16]
}
 800b5da:	bf00      	nop
 800b5dc:	bf00      	nop
 800b5de:	e7fd      	b.n	800b5dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10b      	bne.n	800b5fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ea:	f383 8811 	msr	BASEPRI, r3
 800b5ee:	f3bf 8f6f 	isb	sy
 800b5f2:	f3bf 8f4f 	dsb	sy
 800b5f6:	60fb      	str	r3, [r7, #12]
}
 800b5f8:	bf00      	nop
 800b5fa:	bf00      	nop
 800b5fc:	e7fd      	b.n	800b5fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b5fe:	f000 ffa3 	bl	800c548 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b602:	4b1d      	ldr	r3, [pc, #116]	@ (800b678 <xTaskCheckForTimeOut+0xc0>)
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	69ba      	ldr	r2, [r7, #24]
 800b60e:	1ad3      	subs	r3, r2, r3
 800b610:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b61a:	d102      	bne.n	800b622 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b61c:	2300      	movs	r3, #0
 800b61e:	61fb      	str	r3, [r7, #28]
 800b620:	e023      	b.n	800b66a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681a      	ldr	r2, [r3, #0]
 800b626:	4b15      	ldr	r3, [pc, #84]	@ (800b67c <xTaskCheckForTimeOut+0xc4>)
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d007      	beq.n	800b63e <xTaskCheckForTimeOut+0x86>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	69ba      	ldr	r2, [r7, #24]
 800b634:	429a      	cmp	r2, r3
 800b636:	d302      	bcc.n	800b63e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b638:	2301      	movs	r3, #1
 800b63a:	61fb      	str	r3, [r7, #28]
 800b63c:	e015      	b.n	800b66a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b63e:	683b      	ldr	r3, [r7, #0]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	697a      	ldr	r2, [r7, #20]
 800b644:	429a      	cmp	r2, r3
 800b646:	d20b      	bcs.n	800b660 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	681a      	ldr	r2, [r3, #0]
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	1ad2      	subs	r2, r2, r3
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f7ff ff99 	bl	800b58c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b65a:	2300      	movs	r3, #0
 800b65c:	61fb      	str	r3, [r7, #28]
 800b65e:	e004      	b.n	800b66a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	2200      	movs	r2, #0
 800b664:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b666:	2301      	movs	r3, #1
 800b668:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b66a:	f000 ff9f 	bl	800c5ac <vPortExitCritical>

	return xReturn;
 800b66e:	69fb      	ldr	r3, [r7, #28]
}
 800b670:	4618      	mov	r0, r3
 800b672:	3720      	adds	r7, #32
 800b674:	46bd      	mov	sp, r7
 800b676:	bd80      	pop	{r7, pc}
 800b678:	2000a8d0 	.word	0x2000a8d0
 800b67c:	2000a8e4 	.word	0x2000a8e4

0800b680 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b680:	b480      	push	{r7}
 800b682:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b684:	4b03      	ldr	r3, [pc, #12]	@ (800b694 <vTaskMissedYield+0x14>)
 800b686:	2201      	movs	r2, #1
 800b688:	601a      	str	r2, [r3, #0]
}
 800b68a:	bf00      	nop
 800b68c:	46bd      	mov	sp, r7
 800b68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b692:	4770      	bx	lr
 800b694:	2000a8e0 	.word	0x2000a8e0

0800b698 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b082      	sub	sp, #8
 800b69c:	af00      	add	r7, sp, #0
 800b69e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b6a0:	f000 f852 	bl	800b748 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b6a4:	4b06      	ldr	r3, [pc, #24]	@ (800b6c0 <prvIdleTask+0x28>)
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d9f9      	bls.n	800b6a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b6ac:	4b05      	ldr	r3, [pc, #20]	@ (800b6c4 <prvIdleTask+0x2c>)
 800b6ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b6b2:	601a      	str	r2, [r3, #0]
 800b6b4:	f3bf 8f4f 	dsb	sy
 800b6b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b6bc:	e7f0      	b.n	800b6a0 <prvIdleTask+0x8>
 800b6be:	bf00      	nop
 800b6c0:	2000a3fc 	.word	0x2000a3fc
 800b6c4:	e000ed04 	.word	0xe000ed04

0800b6c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	607b      	str	r3, [r7, #4]
 800b6d2:	e00c      	b.n	800b6ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b6d4:	687a      	ldr	r2, [r7, #4]
 800b6d6:	4613      	mov	r3, r2
 800b6d8:	009b      	lsls	r3, r3, #2
 800b6da:	4413      	add	r3, r2
 800b6dc:	009b      	lsls	r3, r3, #2
 800b6de:	4a12      	ldr	r2, [pc, #72]	@ (800b728 <prvInitialiseTaskLists+0x60>)
 800b6e0:	4413      	add	r3, r2
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	f7fd ff4e 	bl	8009584 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	607b      	str	r3, [r7, #4]
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2b37      	cmp	r3, #55	@ 0x37
 800b6f2:	d9ef      	bls.n	800b6d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b6f4:	480d      	ldr	r0, [pc, #52]	@ (800b72c <prvInitialiseTaskLists+0x64>)
 800b6f6:	f7fd ff45 	bl	8009584 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b6fa:	480d      	ldr	r0, [pc, #52]	@ (800b730 <prvInitialiseTaskLists+0x68>)
 800b6fc:	f7fd ff42 	bl	8009584 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b700:	480c      	ldr	r0, [pc, #48]	@ (800b734 <prvInitialiseTaskLists+0x6c>)
 800b702:	f7fd ff3f 	bl	8009584 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b706:	480c      	ldr	r0, [pc, #48]	@ (800b738 <prvInitialiseTaskLists+0x70>)
 800b708:	f7fd ff3c 	bl	8009584 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b70c:	480b      	ldr	r0, [pc, #44]	@ (800b73c <prvInitialiseTaskLists+0x74>)
 800b70e:	f7fd ff39 	bl	8009584 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b712:	4b0b      	ldr	r3, [pc, #44]	@ (800b740 <prvInitialiseTaskLists+0x78>)
 800b714:	4a05      	ldr	r2, [pc, #20]	@ (800b72c <prvInitialiseTaskLists+0x64>)
 800b716:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b718:	4b0a      	ldr	r3, [pc, #40]	@ (800b744 <prvInitialiseTaskLists+0x7c>)
 800b71a:	4a05      	ldr	r2, [pc, #20]	@ (800b730 <prvInitialiseTaskLists+0x68>)
 800b71c:	601a      	str	r2, [r3, #0]
}
 800b71e:	bf00      	nop
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}
 800b726:	bf00      	nop
 800b728:	2000a3fc 	.word	0x2000a3fc
 800b72c:	2000a85c 	.word	0x2000a85c
 800b730:	2000a870 	.word	0x2000a870
 800b734:	2000a88c 	.word	0x2000a88c
 800b738:	2000a8a0 	.word	0x2000a8a0
 800b73c:	2000a8b8 	.word	0x2000a8b8
 800b740:	2000a884 	.word	0x2000a884
 800b744:	2000a888 	.word	0x2000a888

0800b748 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b748:	b580      	push	{r7, lr}
 800b74a:	b082      	sub	sp, #8
 800b74c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b74e:	e019      	b.n	800b784 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b750:	f000 fefa 	bl	800c548 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b754:	4b10      	ldr	r3, [pc, #64]	@ (800b798 <prvCheckTasksWaitingTermination+0x50>)
 800b756:	68db      	ldr	r3, [r3, #12]
 800b758:	68db      	ldr	r3, [r3, #12]
 800b75a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	3304      	adds	r3, #4
 800b760:	4618      	mov	r0, r3
 800b762:	f7fd ff99 	bl	8009698 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b766:	4b0d      	ldr	r3, [pc, #52]	@ (800b79c <prvCheckTasksWaitingTermination+0x54>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	3b01      	subs	r3, #1
 800b76c:	4a0b      	ldr	r2, [pc, #44]	@ (800b79c <prvCheckTasksWaitingTermination+0x54>)
 800b76e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b770:	4b0b      	ldr	r3, [pc, #44]	@ (800b7a0 <prvCheckTasksWaitingTermination+0x58>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	3b01      	subs	r3, #1
 800b776:	4a0a      	ldr	r2, [pc, #40]	@ (800b7a0 <prvCheckTasksWaitingTermination+0x58>)
 800b778:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b77a:	f000 ff17 	bl	800c5ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b77e:	6878      	ldr	r0, [r7, #4]
 800b780:	f000 f810 	bl	800b7a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b784:	4b06      	ldr	r3, [pc, #24]	@ (800b7a0 <prvCheckTasksWaitingTermination+0x58>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	2b00      	cmp	r3, #0
 800b78a:	d1e1      	bne.n	800b750 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b78c:	bf00      	nop
 800b78e:	bf00      	nop
 800b790:	3708      	adds	r7, #8
 800b792:	46bd      	mov	sp, r7
 800b794:	bd80      	pop	{r7, pc}
 800b796:	bf00      	nop
 800b798:	2000a8a0 	.word	0x2000a8a0
 800b79c:	2000a8cc 	.word	0x2000a8cc
 800b7a0:	2000a8b4 	.word	0x2000a8b4

0800b7a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b084      	sub	sp, #16
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	3358      	adds	r3, #88	@ 0x58
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f012 fe73 	bl	801e49c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d108      	bne.n	800b7d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	f001 f8af 	bl	800c928 <vPortFree>
				vPortFree( pxTCB );
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f001 f8ac 	bl	800c928 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b7d0:	e019      	b.n	800b806 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d103      	bne.n	800b7e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b7dc:	6878      	ldr	r0, [r7, #4]
 800b7de:	f001 f8a3 	bl	800c928 <vPortFree>
	}
 800b7e2:	e010      	b.n	800b806 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d00b      	beq.n	800b806 <prvDeleteTCB+0x62>
	__asm volatile
 800b7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7f2:	f383 8811 	msr	BASEPRI, r3
 800b7f6:	f3bf 8f6f 	isb	sy
 800b7fa:	f3bf 8f4f 	dsb	sy
 800b7fe:	60fb      	str	r3, [r7, #12]
}
 800b800:	bf00      	nop
 800b802:	bf00      	nop
 800b804:	e7fd      	b.n	800b802 <prvDeleteTCB+0x5e>
	}
 800b806:	bf00      	nop
 800b808:	3710      	adds	r7, #16
 800b80a:	46bd      	mov	sp, r7
 800b80c:	bd80      	pop	{r7, pc}
	...

0800b810 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b810:	b480      	push	{r7}
 800b812:	b083      	sub	sp, #12
 800b814:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b816:	4b0c      	ldr	r3, [pc, #48]	@ (800b848 <prvResetNextTaskUnblockTime+0x38>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d104      	bne.n	800b82a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b820:	4b0a      	ldr	r3, [pc, #40]	@ (800b84c <prvResetNextTaskUnblockTime+0x3c>)
 800b822:	f04f 32ff 	mov.w	r2, #4294967295
 800b826:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b828:	e008      	b.n	800b83c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b82a:	4b07      	ldr	r3, [pc, #28]	@ (800b848 <prvResetNextTaskUnblockTime+0x38>)
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68db      	ldr	r3, [r3, #12]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	685b      	ldr	r3, [r3, #4]
 800b838:	4a04      	ldr	r2, [pc, #16]	@ (800b84c <prvResetNextTaskUnblockTime+0x3c>)
 800b83a:	6013      	str	r3, [r2, #0]
}
 800b83c:	bf00      	nop
 800b83e:	370c      	adds	r7, #12
 800b840:	46bd      	mov	sp, r7
 800b842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b846:	4770      	bx	lr
 800b848:	2000a884 	.word	0x2000a884
 800b84c:	2000a8ec 	.word	0x2000a8ec

0800b850 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800b850:	b480      	push	{r7}
 800b852:	b083      	sub	sp, #12
 800b854:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800b856:	4b05      	ldr	r3, [pc, #20]	@ (800b86c <xTaskGetCurrentTaskHandle+0x1c>)
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800b85c:	687b      	ldr	r3, [r7, #4]
	}
 800b85e:	4618      	mov	r0, r3
 800b860:	370c      	adds	r7, #12
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr
 800b86a:	bf00      	nop
 800b86c:	2000a3f8 	.word	0x2000a3f8

0800b870 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b870:	b480      	push	{r7}
 800b872:	b083      	sub	sp, #12
 800b874:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b876:	4b0b      	ldr	r3, [pc, #44]	@ (800b8a4 <xTaskGetSchedulerState+0x34>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d102      	bne.n	800b884 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b87e:	2301      	movs	r3, #1
 800b880:	607b      	str	r3, [r7, #4]
 800b882:	e008      	b.n	800b896 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b884:	4b08      	ldr	r3, [pc, #32]	@ (800b8a8 <xTaskGetSchedulerState+0x38>)
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d102      	bne.n	800b892 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b88c:	2302      	movs	r3, #2
 800b88e:	607b      	str	r3, [r7, #4]
 800b890:	e001      	b.n	800b896 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b892:	2300      	movs	r3, #0
 800b894:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b896:	687b      	ldr	r3, [r7, #4]
	}
 800b898:	4618      	mov	r0, r3
 800b89a:	370c      	adds	r7, #12
 800b89c:	46bd      	mov	sp, r7
 800b89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a2:	4770      	bx	lr
 800b8a4:	2000a8d8 	.word	0x2000a8d8
 800b8a8:	2000a8f4 	.word	0x2000a8f4

0800b8ac <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d051      	beq.n	800b966 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b8c2:	68bb      	ldr	r3, [r7, #8]
 800b8c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8c6:	4b2a      	ldr	r3, [pc, #168]	@ (800b970 <xTaskPriorityInherit+0xc4>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d241      	bcs.n	800b954 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	699b      	ldr	r3, [r3, #24]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	db06      	blt.n	800b8e6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8d8:	4b25      	ldr	r3, [pc, #148]	@ (800b970 <xTaskPriorityInherit+0xc4>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b8de:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b8e2:	68bb      	ldr	r3, [r7, #8]
 800b8e4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b8e6:	68bb      	ldr	r3, [r7, #8]
 800b8e8:	6959      	ldr	r1, [r3, #20]
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b8ee:	4613      	mov	r3, r2
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	4413      	add	r3, r2
 800b8f4:	009b      	lsls	r3, r3, #2
 800b8f6:	4a1f      	ldr	r2, [pc, #124]	@ (800b974 <xTaskPriorityInherit+0xc8>)
 800b8f8:	4413      	add	r3, r2
 800b8fa:	4299      	cmp	r1, r3
 800b8fc:	d122      	bne.n	800b944 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b8fe:	68bb      	ldr	r3, [r7, #8]
 800b900:	3304      	adds	r3, #4
 800b902:	4618      	mov	r0, r3
 800b904:	f7fd fec8 	bl	8009698 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b908:	4b19      	ldr	r3, [pc, #100]	@ (800b970 <xTaskPriorityInherit+0xc4>)
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b916:	4b18      	ldr	r3, [pc, #96]	@ (800b978 <xTaskPriorityInherit+0xcc>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	429a      	cmp	r2, r3
 800b91c:	d903      	bls.n	800b926 <xTaskPriorityInherit+0x7a>
 800b91e:	68bb      	ldr	r3, [r7, #8]
 800b920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b922:	4a15      	ldr	r2, [pc, #84]	@ (800b978 <xTaskPriorityInherit+0xcc>)
 800b924:	6013      	str	r3, [r2, #0]
 800b926:	68bb      	ldr	r3, [r7, #8]
 800b928:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b92a:	4613      	mov	r3, r2
 800b92c:	009b      	lsls	r3, r3, #2
 800b92e:	4413      	add	r3, r2
 800b930:	009b      	lsls	r3, r3, #2
 800b932:	4a10      	ldr	r2, [pc, #64]	@ (800b974 <xTaskPriorityInherit+0xc8>)
 800b934:	441a      	add	r2, r3
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	3304      	adds	r3, #4
 800b93a:	4619      	mov	r1, r3
 800b93c:	4610      	mov	r0, r2
 800b93e:	f7fd fe4e 	bl	80095de <vListInsertEnd>
 800b942:	e004      	b.n	800b94e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b944:	4b0a      	ldr	r3, [pc, #40]	@ (800b970 <xTaskPriorityInherit+0xc4>)
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b94e:	2301      	movs	r3, #1
 800b950:	60fb      	str	r3, [r7, #12]
 800b952:	e008      	b.n	800b966 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b954:	68bb      	ldr	r3, [r7, #8]
 800b956:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b958:	4b05      	ldr	r3, [pc, #20]	@ (800b970 <xTaskPriorityInherit+0xc4>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b95e:	429a      	cmp	r2, r3
 800b960:	d201      	bcs.n	800b966 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b962:	2301      	movs	r3, #1
 800b964:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b966:	68fb      	ldr	r3, [r7, #12]
	}
 800b968:	4618      	mov	r0, r3
 800b96a:	3710      	adds	r7, #16
 800b96c:	46bd      	mov	sp, r7
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	2000a3f8 	.word	0x2000a3f8
 800b974:	2000a3fc 	.word	0x2000a3fc
 800b978:	2000a8d4 	.word	0x2000a8d4

0800b97c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b988:	2300      	movs	r3, #0
 800b98a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d058      	beq.n	800ba44 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b992:	4b2f      	ldr	r3, [pc, #188]	@ (800ba50 <xTaskPriorityDisinherit+0xd4>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	693a      	ldr	r2, [r7, #16]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d00b      	beq.n	800b9b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800b99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9a0:	f383 8811 	msr	BASEPRI, r3
 800b9a4:	f3bf 8f6f 	isb	sy
 800b9a8:	f3bf 8f4f 	dsb	sy
 800b9ac:	60fb      	str	r3, [r7, #12]
}
 800b9ae:	bf00      	nop
 800b9b0:	bf00      	nop
 800b9b2:	e7fd      	b.n	800b9b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10b      	bne.n	800b9d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	60bb      	str	r3, [r7, #8]
}
 800b9ce:	bf00      	nop
 800b9d0:	bf00      	nop
 800b9d2:	e7fd      	b.n	800b9d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800b9d4:	693b      	ldr	r3, [r7, #16]
 800b9d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9d8:	1e5a      	subs	r2, r3, #1
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d02c      	beq.n	800ba44 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d128      	bne.n	800ba44 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9f2:	693b      	ldr	r3, [r7, #16]
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7fd fe4e 	bl	8009698 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba00:	693b      	ldr	r3, [r7, #16]
 800ba02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba04:	693b      	ldr	r3, [r7, #16]
 800ba06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ba0c:	693b      	ldr	r3, [r7, #16]
 800ba0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ba10:	693b      	ldr	r3, [r7, #16]
 800ba12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba14:	4b0f      	ldr	r3, [pc, #60]	@ (800ba54 <xTaskPriorityDisinherit+0xd8>)
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	429a      	cmp	r2, r3
 800ba1a:	d903      	bls.n	800ba24 <xTaskPriorityDisinherit+0xa8>
 800ba1c:	693b      	ldr	r3, [r7, #16]
 800ba1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba20:	4a0c      	ldr	r2, [pc, #48]	@ (800ba54 <xTaskPriorityDisinherit+0xd8>)
 800ba22:	6013      	str	r3, [r2, #0]
 800ba24:	693b      	ldr	r3, [r7, #16]
 800ba26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba28:	4613      	mov	r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	4413      	add	r3, r2
 800ba2e:	009b      	lsls	r3, r3, #2
 800ba30:	4a09      	ldr	r2, [pc, #36]	@ (800ba58 <xTaskPriorityDisinherit+0xdc>)
 800ba32:	441a      	add	r2, r3
 800ba34:	693b      	ldr	r3, [r7, #16]
 800ba36:	3304      	adds	r3, #4
 800ba38:	4619      	mov	r1, r3
 800ba3a:	4610      	mov	r0, r2
 800ba3c:	f7fd fdcf 	bl	80095de <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ba40:	2301      	movs	r3, #1
 800ba42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba44:	697b      	ldr	r3, [r7, #20]
	}
 800ba46:	4618      	mov	r0, r3
 800ba48:	3718      	adds	r7, #24
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop
 800ba50:	2000a3f8 	.word	0x2000a3f8
 800ba54:	2000a8d4 	.word	0x2000a8d4
 800ba58:	2000a3fc 	.word	0x2000a3fc

0800ba5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b088      	sub	sp, #32
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ba6a:	2301      	movs	r3, #1
 800ba6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d06c      	beq.n	800bb4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d10b      	bne.n	800ba94 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800ba7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba80:	f383 8811 	msr	BASEPRI, r3
 800ba84:	f3bf 8f6f 	isb	sy
 800ba88:	f3bf 8f4f 	dsb	sy
 800ba8c:	60fb      	str	r3, [r7, #12]
}
 800ba8e:	bf00      	nop
 800ba90:	bf00      	nop
 800ba92:	e7fd      	b.n	800ba90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ba94:	69bb      	ldr	r3, [r7, #24]
 800ba96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba98:	683a      	ldr	r2, [r7, #0]
 800ba9a:	429a      	cmp	r2, r3
 800ba9c:	d902      	bls.n	800baa4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	61fb      	str	r3, [r7, #28]
 800baa2:	e002      	b.n	800baaa <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800baa4:	69bb      	ldr	r3, [r7, #24]
 800baa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800baa8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800baaa:	69bb      	ldr	r3, [r7, #24]
 800baac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800baae:	69fa      	ldr	r2, [r7, #28]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d04c      	beq.n	800bb4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bab8:	697a      	ldr	r2, [r7, #20]
 800baba:	429a      	cmp	r2, r3
 800babc:	d147      	bne.n	800bb4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800babe:	4b26      	ldr	r3, [pc, #152]	@ (800bb58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	69ba      	ldr	r2, [r7, #24]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d10b      	bne.n	800bae0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bacc:	f383 8811 	msr	BASEPRI, r3
 800bad0:	f3bf 8f6f 	isb	sy
 800bad4:	f3bf 8f4f 	dsb	sy
 800bad8:	60bb      	str	r3, [r7, #8]
}
 800bada:	bf00      	nop
 800badc:	bf00      	nop
 800bade:	e7fd      	b.n	800badc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bae0:	69bb      	ldr	r3, [r7, #24]
 800bae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bae4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bae6:	69bb      	ldr	r3, [r7, #24]
 800bae8:	69fa      	ldr	r2, [r7, #28]
 800baea:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800baec:	69bb      	ldr	r3, [r7, #24]
 800baee:	699b      	ldr	r3, [r3, #24]
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	db04      	blt.n	800bafe <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800baf4:	69fb      	ldr	r3, [r7, #28]
 800baf6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bafa:	69bb      	ldr	r3, [r7, #24]
 800bafc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	6959      	ldr	r1, [r3, #20]
 800bb02:	693a      	ldr	r2, [r7, #16]
 800bb04:	4613      	mov	r3, r2
 800bb06:	009b      	lsls	r3, r3, #2
 800bb08:	4413      	add	r3, r2
 800bb0a:	009b      	lsls	r3, r3, #2
 800bb0c:	4a13      	ldr	r2, [pc, #76]	@ (800bb5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bb0e:	4413      	add	r3, r2
 800bb10:	4299      	cmp	r1, r3
 800bb12:	d11c      	bne.n	800bb4e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb14:	69bb      	ldr	r3, [r7, #24]
 800bb16:	3304      	adds	r3, #4
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7fd fdbd 	bl	8009698 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bb1e:	69bb      	ldr	r3, [r7, #24]
 800bb20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb22:	4b0f      	ldr	r3, [pc, #60]	@ (800bb60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	429a      	cmp	r2, r3
 800bb28:	d903      	bls.n	800bb32 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800bb2a:	69bb      	ldr	r3, [r7, #24]
 800bb2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb2e:	4a0c      	ldr	r2, [pc, #48]	@ (800bb60 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bb30:	6013      	str	r3, [r2, #0]
 800bb32:	69bb      	ldr	r3, [r7, #24]
 800bb34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb36:	4613      	mov	r3, r2
 800bb38:	009b      	lsls	r3, r3, #2
 800bb3a:	4413      	add	r3, r2
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	4a07      	ldr	r2, [pc, #28]	@ (800bb5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bb40:	441a      	add	r2, r3
 800bb42:	69bb      	ldr	r3, [r7, #24]
 800bb44:	3304      	adds	r3, #4
 800bb46:	4619      	mov	r1, r3
 800bb48:	4610      	mov	r0, r2
 800bb4a:	f7fd fd48 	bl	80095de <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb4e:	bf00      	nop
 800bb50:	3720      	adds	r7, #32
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	2000a3f8 	.word	0x2000a3f8
 800bb5c:	2000a3fc 	.word	0x2000a3fc
 800bb60:	2000a8d4 	.word	0x2000a8d4

0800bb64 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bb64:	b480      	push	{r7}
 800bb66:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bb68:	4b07      	ldr	r3, [pc, #28]	@ (800bb88 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d004      	beq.n	800bb7a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bb70:	4b05      	ldr	r3, [pc, #20]	@ (800bb88 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bb76:	3201      	adds	r2, #1
 800bb78:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bb7a:	4b03      	ldr	r3, [pc, #12]	@ (800bb88 <pvTaskIncrementMutexHeldCount+0x24>)
 800bb7c:	681b      	ldr	r3, [r3, #0]
	}
 800bb7e:	4618      	mov	r0, r3
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr
 800bb88:	2000a3f8 	.word	0x2000a3f8

0800bb8c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b084      	sub	sp, #16
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bb96:	4b21      	ldr	r3, [pc, #132]	@ (800bc1c <prvAddCurrentTaskToDelayedList+0x90>)
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb9c:	4b20      	ldr	r3, [pc, #128]	@ (800bc20 <prvAddCurrentTaskToDelayedList+0x94>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	3304      	adds	r3, #4
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7fd fd78 	bl	8009698 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbae:	d10a      	bne.n	800bbc6 <prvAddCurrentTaskToDelayedList+0x3a>
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d007      	beq.n	800bbc6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbb6:	4b1a      	ldr	r3, [pc, #104]	@ (800bc20 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	3304      	adds	r3, #4
 800bbbc:	4619      	mov	r1, r3
 800bbbe:	4819      	ldr	r0, [pc, #100]	@ (800bc24 <prvAddCurrentTaskToDelayedList+0x98>)
 800bbc0:	f7fd fd0d 	bl	80095de <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bbc4:	e026      	b.n	800bc14 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bbc6:	68fa      	ldr	r2, [r7, #12]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	4413      	add	r3, r2
 800bbcc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bbce:	4b14      	ldr	r3, [pc, #80]	@ (800bc20 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bbd6:	68ba      	ldr	r2, [r7, #8]
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d209      	bcs.n	800bbf2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbde:	4b12      	ldr	r3, [pc, #72]	@ (800bc28 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	4b0f      	ldr	r3, [pc, #60]	@ (800bc20 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	4619      	mov	r1, r3
 800bbea:	4610      	mov	r0, r2
 800bbec:	f7fd fd1b 	bl	8009626 <vListInsert>
}
 800bbf0:	e010      	b.n	800bc14 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bbf2:	4b0e      	ldr	r3, [pc, #56]	@ (800bc2c <prvAddCurrentTaskToDelayedList+0xa0>)
 800bbf4:	681a      	ldr	r2, [r3, #0]
 800bbf6:	4b0a      	ldr	r3, [pc, #40]	@ (800bc20 <prvAddCurrentTaskToDelayedList+0x94>)
 800bbf8:	681b      	ldr	r3, [r3, #0]
 800bbfa:	3304      	adds	r3, #4
 800bbfc:	4619      	mov	r1, r3
 800bbfe:	4610      	mov	r0, r2
 800bc00:	f7fd fd11 	bl	8009626 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc04:	4b0a      	ldr	r3, [pc, #40]	@ (800bc30 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68ba      	ldr	r2, [r7, #8]
 800bc0a:	429a      	cmp	r2, r3
 800bc0c:	d202      	bcs.n	800bc14 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc0e:	4a08      	ldr	r2, [pc, #32]	@ (800bc30 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	6013      	str	r3, [r2, #0]
}
 800bc14:	bf00      	nop
 800bc16:	3710      	adds	r7, #16
 800bc18:	46bd      	mov	sp, r7
 800bc1a:	bd80      	pop	{r7, pc}
 800bc1c:	2000a8d0 	.word	0x2000a8d0
 800bc20:	2000a3f8 	.word	0x2000a3f8
 800bc24:	2000a8b8 	.word	0x2000a8b8
 800bc28:	2000a888 	.word	0x2000a888
 800bc2c:	2000a884 	.word	0x2000a884
 800bc30:	2000a8ec 	.word	0x2000a8ec

0800bc34 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bc34:	b580      	push	{r7, lr}
 800bc36:	b08a      	sub	sp, #40	@ 0x28
 800bc38:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bc3e:	f000 fb13 	bl	800c268 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bc42:	4b1d      	ldr	r3, [pc, #116]	@ (800bcb8 <xTimerCreateTimerTask+0x84>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d021      	beq.n	800bc8e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bc52:	1d3a      	adds	r2, r7, #4
 800bc54:	f107 0108 	add.w	r1, r7, #8
 800bc58:	f107 030c 	add.w	r3, r7, #12
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f7fd fc77 	bl	8009550 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bc62:	6879      	ldr	r1, [r7, #4]
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	9202      	str	r2, [sp, #8]
 800bc6a:	9301      	str	r3, [sp, #4]
 800bc6c:	2302      	movs	r3, #2
 800bc6e:	9300      	str	r3, [sp, #0]
 800bc70:	2300      	movs	r3, #0
 800bc72:	460a      	mov	r2, r1
 800bc74:	4911      	ldr	r1, [pc, #68]	@ (800bcbc <xTimerCreateTimerTask+0x88>)
 800bc76:	4812      	ldr	r0, [pc, #72]	@ (800bcc0 <xTimerCreateTimerTask+0x8c>)
 800bc78:	f7fe fe5a 	bl	800a930 <xTaskCreateStatic>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	4a11      	ldr	r2, [pc, #68]	@ (800bcc4 <xTimerCreateTimerTask+0x90>)
 800bc80:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bc82:	4b10      	ldr	r3, [pc, #64]	@ (800bcc4 <xTimerCreateTimerTask+0x90>)
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d001      	beq.n	800bc8e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bc8e:	697b      	ldr	r3, [r7, #20]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d10b      	bne.n	800bcac <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bc94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc98:	f383 8811 	msr	BASEPRI, r3
 800bc9c:	f3bf 8f6f 	isb	sy
 800bca0:	f3bf 8f4f 	dsb	sy
 800bca4:	613b      	str	r3, [r7, #16]
}
 800bca6:	bf00      	nop
 800bca8:	bf00      	nop
 800bcaa:	e7fd      	b.n	800bca8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bcac:	697b      	ldr	r3, [r7, #20]
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3718      	adds	r7, #24
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	2000a930 	.word	0x2000a930
 800bcbc:	08021cf0 	.word	0x08021cf0
 800bcc0:	0800be01 	.word	0x0800be01
 800bcc4:	2000a934 	.word	0x2000a934

0800bcc8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b08a      	sub	sp, #40	@ 0x28
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
 800bcd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d10b      	bne.n	800bcf8 <xTimerGenericCommand+0x30>
	__asm volatile
 800bce0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce4:	f383 8811 	msr	BASEPRI, r3
 800bce8:	f3bf 8f6f 	isb	sy
 800bcec:	f3bf 8f4f 	dsb	sy
 800bcf0:	623b      	str	r3, [r7, #32]
}
 800bcf2:	bf00      	nop
 800bcf4:	bf00      	nop
 800bcf6:	e7fd      	b.n	800bcf4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bcf8:	4b19      	ldr	r3, [pc, #100]	@ (800bd60 <xTimerGenericCommand+0x98>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d02a      	beq.n	800bd56 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	2b05      	cmp	r3, #5
 800bd10:	dc18      	bgt.n	800bd44 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd12:	f7ff fdad 	bl	800b870 <xTaskGetSchedulerState>
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b02      	cmp	r3, #2
 800bd1a:	d109      	bne.n	800bd30 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd1c:	4b10      	ldr	r3, [pc, #64]	@ (800bd60 <xTimerGenericCommand+0x98>)
 800bd1e:	6818      	ldr	r0, [r3, #0]
 800bd20:	f107 0110 	add.w	r1, r7, #16
 800bd24:	2300      	movs	r3, #0
 800bd26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd28:	f7fd ff4c 	bl	8009bc4 <xQueueGenericSend>
 800bd2c:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd2e:	e012      	b.n	800bd56 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd30:	4b0b      	ldr	r3, [pc, #44]	@ (800bd60 <xTimerGenericCommand+0x98>)
 800bd32:	6818      	ldr	r0, [r3, #0]
 800bd34:	f107 0110 	add.w	r1, r7, #16
 800bd38:	2300      	movs	r3, #0
 800bd3a:	2200      	movs	r2, #0
 800bd3c:	f7fd ff42 	bl	8009bc4 <xQueueGenericSend>
 800bd40:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd42:	e008      	b.n	800bd56 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bd44:	4b06      	ldr	r3, [pc, #24]	@ (800bd60 <xTimerGenericCommand+0x98>)
 800bd46:	6818      	ldr	r0, [r3, #0]
 800bd48:	f107 0110 	add.w	r1, r7, #16
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	683a      	ldr	r2, [r7, #0]
 800bd50:	f7fe f83a 	bl	8009dc8 <xQueueGenericSendFromISR>
 800bd54:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3728      	adds	r7, #40	@ 0x28
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	2000a930 	.word	0x2000a930

0800bd64 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b088      	sub	sp, #32
 800bd68:	af02      	add	r7, sp, #8
 800bd6a:	6078      	str	r0, [r7, #4]
 800bd6c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd6e:	4b23      	ldr	r3, [pc, #140]	@ (800bdfc <prvProcessExpiredTimer+0x98>)
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	68db      	ldr	r3, [r3, #12]
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd78:	697b      	ldr	r3, [r7, #20]
 800bd7a:	3304      	adds	r3, #4
 800bd7c:	4618      	mov	r0, r3
 800bd7e:	f7fd fc8b 	bl	8009698 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd82:	697b      	ldr	r3, [r7, #20]
 800bd84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bd88:	f003 0304 	and.w	r3, r3, #4
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d023      	beq.n	800bdd8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	699a      	ldr	r2, [r3, #24]
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	18d1      	adds	r1, r2, r3
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	683a      	ldr	r2, [r7, #0]
 800bd9c:	6978      	ldr	r0, [r7, #20]
 800bd9e:	f000 f8d5 	bl	800bf4c <prvInsertTimerInActiveList>
 800bda2:	4603      	mov	r3, r0
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d020      	beq.n	800bdea <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bda8:	2300      	movs	r3, #0
 800bdaa:	9300      	str	r3, [sp, #0]
 800bdac:	2300      	movs	r3, #0
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	2100      	movs	r1, #0
 800bdb2:	6978      	ldr	r0, [r7, #20]
 800bdb4:	f7ff ff88 	bl	800bcc8 <xTimerGenericCommand>
 800bdb8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d114      	bne.n	800bdea <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bdc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bdc4:	f383 8811 	msr	BASEPRI, r3
 800bdc8:	f3bf 8f6f 	isb	sy
 800bdcc:	f3bf 8f4f 	dsb	sy
 800bdd0:	60fb      	str	r3, [r7, #12]
}
 800bdd2:	bf00      	nop
 800bdd4:	bf00      	nop
 800bdd6:	e7fd      	b.n	800bdd4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdde:	f023 0301 	bic.w	r3, r3, #1
 800bde2:	b2da      	uxtb	r2, r3
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bdea:	697b      	ldr	r3, [r7, #20]
 800bdec:	6a1b      	ldr	r3, [r3, #32]
 800bdee:	6978      	ldr	r0, [r7, #20]
 800bdf0:	4798      	blx	r3
}
 800bdf2:	bf00      	nop
 800bdf4:	3718      	adds	r7, #24
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	bf00      	nop
 800bdfc:	2000a928 	.word	0x2000a928

0800be00 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b084      	sub	sp, #16
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be08:	f107 0308 	add.w	r3, r7, #8
 800be0c:	4618      	mov	r0, r3
 800be0e:	f000 f859 	bl	800bec4 <prvGetNextExpireTime>
 800be12:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	4619      	mov	r1, r3
 800be18:	68f8      	ldr	r0, [r7, #12]
 800be1a:	f000 f805 	bl	800be28 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be1e:	f000 f8d7 	bl	800bfd0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be22:	bf00      	nop
 800be24:	e7f0      	b.n	800be08 <prvTimerTask+0x8>
	...

0800be28 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b084      	sub	sp, #16
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be32:	f7ff f8ed 	bl	800b010 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be36:	f107 0308 	add.w	r3, r7, #8
 800be3a:	4618      	mov	r0, r3
 800be3c:	f000 f866 	bl	800bf0c <prvSampleTimeNow>
 800be40:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800be42:	68bb      	ldr	r3, [r7, #8]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d130      	bne.n	800beaa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d10a      	bne.n	800be64 <prvProcessTimerOrBlockTask+0x3c>
 800be4e:	687a      	ldr	r2, [r7, #4]
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	429a      	cmp	r2, r3
 800be54:	d806      	bhi.n	800be64 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800be56:	f7ff f8e9 	bl	800b02c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800be5a:	68f9      	ldr	r1, [r7, #12]
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f7ff ff81 	bl	800bd64 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800be62:	e024      	b.n	800beae <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d008      	beq.n	800be7c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800be6a:	4b13      	ldr	r3, [pc, #76]	@ (800beb8 <prvProcessTimerOrBlockTask+0x90>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2b00      	cmp	r3, #0
 800be72:	d101      	bne.n	800be78 <prvProcessTimerOrBlockTask+0x50>
 800be74:	2301      	movs	r3, #1
 800be76:	e000      	b.n	800be7a <prvProcessTimerOrBlockTask+0x52>
 800be78:	2300      	movs	r3, #0
 800be7a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800be7c:	4b0f      	ldr	r3, [pc, #60]	@ (800bebc <prvProcessTimerOrBlockTask+0x94>)
 800be7e:	6818      	ldr	r0, [r3, #0]
 800be80:	687a      	ldr	r2, [r7, #4]
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	1ad3      	subs	r3, r2, r3
 800be86:	683a      	ldr	r2, [r7, #0]
 800be88:	4619      	mov	r1, r3
 800be8a:	f7fe fd1d 	bl	800a8c8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800be8e:	f7ff f8cd 	bl	800b02c <xTaskResumeAll>
 800be92:	4603      	mov	r3, r0
 800be94:	2b00      	cmp	r3, #0
 800be96:	d10a      	bne.n	800beae <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800be98:	4b09      	ldr	r3, [pc, #36]	@ (800bec0 <prvProcessTimerOrBlockTask+0x98>)
 800be9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800be9e:	601a      	str	r2, [r3, #0]
 800bea0:	f3bf 8f4f 	dsb	sy
 800bea4:	f3bf 8f6f 	isb	sy
}
 800bea8:	e001      	b.n	800beae <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800beaa:	f7ff f8bf 	bl	800b02c <xTaskResumeAll>
}
 800beae:	bf00      	nop
 800beb0:	3710      	adds	r7, #16
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
 800beb6:	bf00      	nop
 800beb8:	2000a92c 	.word	0x2000a92c
 800bebc:	2000a930 	.word	0x2000a930
 800bec0:	e000ed04 	.word	0xe000ed04

0800bec4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bec4:	b480      	push	{r7}
 800bec6:	b085      	sub	sp, #20
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800becc:	4b0e      	ldr	r3, [pc, #56]	@ (800bf08 <prvGetNextExpireTime+0x44>)
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d101      	bne.n	800beda <prvGetNextExpireTime+0x16>
 800bed6:	2201      	movs	r2, #1
 800bed8:	e000      	b.n	800bedc <prvGetNextExpireTime+0x18>
 800beda:	2200      	movs	r2, #0
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d105      	bne.n	800bef4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bee8:	4b07      	ldr	r3, [pc, #28]	@ (800bf08 <prvGetNextExpireTime+0x44>)
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	68db      	ldr	r3, [r3, #12]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	60fb      	str	r3, [r7, #12]
 800bef2:	e001      	b.n	800bef8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bef4:	2300      	movs	r3, #0
 800bef6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bef8:	68fb      	ldr	r3, [r7, #12]
}
 800befa:	4618      	mov	r0, r3
 800befc:	3714      	adds	r7, #20
 800befe:	46bd      	mov	sp, r7
 800bf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf04:	4770      	bx	lr
 800bf06:	bf00      	nop
 800bf08:	2000a928 	.word	0x2000a928

0800bf0c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf14:	f7ff f928 	bl	800b168 <xTaskGetTickCount>
 800bf18:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf1a:	4b0b      	ldr	r3, [pc, #44]	@ (800bf48 <prvSampleTimeNow+0x3c>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	429a      	cmp	r2, r3
 800bf22:	d205      	bcs.n	800bf30 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf24:	f000 f93a 	bl	800c19c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	601a      	str	r2, [r3, #0]
 800bf2e:	e002      	b.n	800bf36 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2200      	movs	r2, #0
 800bf34:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bf36:	4a04      	ldr	r2, [pc, #16]	@ (800bf48 <prvSampleTimeNow+0x3c>)
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bf3c:	68fb      	ldr	r3, [r7, #12]
}
 800bf3e:	4618      	mov	r0, r3
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop
 800bf48:	2000a938 	.word	0x2000a938

0800bf4c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b086      	sub	sp, #24
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	60f8      	str	r0, [r7, #12]
 800bf54:	60b9      	str	r1, [r7, #8]
 800bf56:	607a      	str	r2, [r7, #4]
 800bf58:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	68fa      	ldr	r2, [r7, #12]
 800bf68:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bf6a:	68ba      	ldr	r2, [r7, #8]
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	429a      	cmp	r2, r3
 800bf70:	d812      	bhi.n	800bf98 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	1ad2      	subs	r2, r2, r3
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	699b      	ldr	r3, [r3, #24]
 800bf7c:	429a      	cmp	r2, r3
 800bf7e:	d302      	bcc.n	800bf86 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bf80:	2301      	movs	r3, #1
 800bf82:	617b      	str	r3, [r7, #20]
 800bf84:	e01b      	b.n	800bfbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bf86:	4b10      	ldr	r3, [pc, #64]	@ (800bfc8 <prvInsertTimerInActiveList+0x7c>)
 800bf88:	681a      	ldr	r2, [r3, #0]
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	3304      	adds	r3, #4
 800bf8e:	4619      	mov	r1, r3
 800bf90:	4610      	mov	r0, r2
 800bf92:	f7fd fb48 	bl	8009626 <vListInsert>
 800bf96:	e012      	b.n	800bfbe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bf98:	687a      	ldr	r2, [r7, #4]
 800bf9a:	683b      	ldr	r3, [r7, #0]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	d206      	bcs.n	800bfae <prvInsertTimerInActiveList+0x62>
 800bfa0:	68ba      	ldr	r2, [r7, #8]
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	429a      	cmp	r2, r3
 800bfa6:	d302      	bcc.n	800bfae <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bfa8:	2301      	movs	r3, #1
 800bfaa:	617b      	str	r3, [r7, #20]
 800bfac:	e007      	b.n	800bfbe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfae:	4b07      	ldr	r3, [pc, #28]	@ (800bfcc <prvInsertTimerInActiveList+0x80>)
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	3304      	adds	r3, #4
 800bfb6:	4619      	mov	r1, r3
 800bfb8:	4610      	mov	r0, r2
 800bfba:	f7fd fb34 	bl	8009626 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bfbe:	697b      	ldr	r3, [r7, #20]
}
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	3718      	adds	r7, #24
 800bfc4:	46bd      	mov	sp, r7
 800bfc6:	bd80      	pop	{r7, pc}
 800bfc8:	2000a92c 	.word	0x2000a92c
 800bfcc:	2000a928 	.word	0x2000a928

0800bfd0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b08e      	sub	sp, #56	@ 0x38
 800bfd4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bfd6:	e0ce      	b.n	800c176 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	da19      	bge.n	800c012 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bfde:	1d3b      	adds	r3, r7, #4
 800bfe0:	3304      	adds	r3, #4
 800bfe2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bfe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d10b      	bne.n	800c002 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800bfea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfee:	f383 8811 	msr	BASEPRI, r3
 800bff2:	f3bf 8f6f 	isb	sy
 800bff6:	f3bf 8f4f 	dsb	sy
 800bffa:	61fb      	str	r3, [r7, #28]
}
 800bffc:	bf00      	nop
 800bffe:	bf00      	nop
 800c000:	e7fd      	b.n	800bffe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c008:	6850      	ldr	r0, [r2, #4]
 800c00a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c00c:	6892      	ldr	r2, [r2, #8]
 800c00e:	4611      	mov	r1, r2
 800c010:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	2b00      	cmp	r3, #0
 800c016:	f2c0 80ae 	blt.w	800c176 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c01e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c020:	695b      	ldr	r3, [r3, #20]
 800c022:	2b00      	cmp	r3, #0
 800c024:	d004      	beq.n	800c030 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c028:	3304      	adds	r3, #4
 800c02a:	4618      	mov	r0, r3
 800c02c:	f7fd fb34 	bl	8009698 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c030:	463b      	mov	r3, r7
 800c032:	4618      	mov	r0, r3
 800c034:	f7ff ff6a 	bl	800bf0c <prvSampleTimeNow>
 800c038:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	2b09      	cmp	r3, #9
 800c03e:	f200 8097 	bhi.w	800c170 <prvProcessReceivedCommands+0x1a0>
 800c042:	a201      	add	r2, pc, #4	@ (adr r2, 800c048 <prvProcessReceivedCommands+0x78>)
 800c044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c048:	0800c071 	.word	0x0800c071
 800c04c:	0800c071 	.word	0x0800c071
 800c050:	0800c071 	.word	0x0800c071
 800c054:	0800c0e7 	.word	0x0800c0e7
 800c058:	0800c0fb 	.word	0x0800c0fb
 800c05c:	0800c147 	.word	0x0800c147
 800c060:	0800c071 	.word	0x0800c071
 800c064:	0800c071 	.word	0x0800c071
 800c068:	0800c0e7 	.word	0x0800c0e7
 800c06c:	0800c0fb 	.word	0x0800c0fb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c072:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c076:	f043 0301 	orr.w	r3, r3, #1
 800c07a:	b2da      	uxtb	r2, r3
 800c07c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c07e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c082:	68ba      	ldr	r2, [r7, #8]
 800c084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c086:	699b      	ldr	r3, [r3, #24]
 800c088:	18d1      	adds	r1, r2, r3
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c08e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c090:	f7ff ff5c 	bl	800bf4c <prvInsertTimerInActiveList>
 800c094:	4603      	mov	r3, r0
 800c096:	2b00      	cmp	r3, #0
 800c098:	d06c      	beq.n	800c174 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c09a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c09c:	6a1b      	ldr	r3, [r3, #32]
 800c09e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0a0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c0a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0a8:	f003 0304 	and.w	r3, r3, #4
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d061      	beq.n	800c174 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c0b0:	68ba      	ldr	r2, [r7, #8]
 800c0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b4:	699b      	ldr	r3, [r3, #24]
 800c0b6:	441a      	add	r2, r3
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	9300      	str	r3, [sp, #0]
 800c0bc:	2300      	movs	r3, #0
 800c0be:	2100      	movs	r1, #0
 800c0c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0c2:	f7ff fe01 	bl	800bcc8 <xTimerGenericCommand>
 800c0c6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c0c8:	6a3b      	ldr	r3, [r7, #32]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d152      	bne.n	800c174 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c0ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0d2:	f383 8811 	msr	BASEPRI, r3
 800c0d6:	f3bf 8f6f 	isb	sy
 800c0da:	f3bf 8f4f 	dsb	sy
 800c0de:	61bb      	str	r3, [r7, #24]
}
 800c0e0:	bf00      	nop
 800c0e2:	bf00      	nop
 800c0e4:	e7fd      	b.n	800c0e2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c0e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0ec:	f023 0301 	bic.w	r3, r3, #1
 800c0f0:	b2da      	uxtb	r2, r3
 800c0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c0f8:	e03d      	b.n	800c176 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0fc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c100:	f043 0301 	orr.w	r3, r3, #1
 800c104:	b2da      	uxtb	r2, r3
 800c106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c108:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c10c:	68ba      	ldr	r2, [r7, #8]
 800c10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c110:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c114:	699b      	ldr	r3, [r3, #24]
 800c116:	2b00      	cmp	r3, #0
 800c118:	d10b      	bne.n	800c132 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c11a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c11e:	f383 8811 	msr	BASEPRI, r3
 800c122:	f3bf 8f6f 	isb	sy
 800c126:	f3bf 8f4f 	dsb	sy
 800c12a:	617b      	str	r3, [r7, #20]
}
 800c12c:	bf00      	nop
 800c12e:	bf00      	nop
 800c130:	e7fd      	b.n	800c12e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c134:	699a      	ldr	r2, [r3, #24]
 800c136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c138:	18d1      	adds	r1, r2, r3
 800c13a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c13c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c13e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c140:	f7ff ff04 	bl	800bf4c <prvInsertTimerInActiveList>
					break;
 800c144:	e017      	b.n	800c176 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c146:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c148:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c14c:	f003 0302 	and.w	r3, r3, #2
 800c150:	2b00      	cmp	r3, #0
 800c152:	d103      	bne.n	800c15c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c154:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c156:	f000 fbe7 	bl	800c928 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c15a:	e00c      	b.n	800c176 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c15e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c162:	f023 0301 	bic.w	r3, r3, #1
 800c166:	b2da      	uxtb	r2, r3
 800c168:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c16a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c16e:	e002      	b.n	800c176 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c170:	bf00      	nop
 800c172:	e000      	b.n	800c176 <prvProcessReceivedCommands+0x1a6>
					break;
 800c174:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c176:	4b08      	ldr	r3, [pc, #32]	@ (800c198 <prvProcessReceivedCommands+0x1c8>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	1d39      	adds	r1, r7, #4
 800c17c:	2200      	movs	r2, #0
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fd ff50 	bl	800a024 <xQueueReceive>
 800c184:	4603      	mov	r3, r0
 800c186:	2b00      	cmp	r3, #0
 800c188:	f47f af26 	bne.w	800bfd8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c18c:	bf00      	nop
 800c18e:	bf00      	nop
 800c190:	3730      	adds	r7, #48	@ 0x30
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
 800c196:	bf00      	nop
 800c198:	2000a930 	.word	0x2000a930

0800c19c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b088      	sub	sp, #32
 800c1a0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c1a2:	e049      	b.n	800c238 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c1a4:	4b2e      	ldr	r3, [pc, #184]	@ (800c260 <prvSwitchTimerLists+0xc4>)
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	68db      	ldr	r3, [r3, #12]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c1ae:	4b2c      	ldr	r3, [pc, #176]	@ (800c260 <prvSwitchTimerLists+0xc4>)
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	68db      	ldr	r3, [r3, #12]
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	3304      	adds	r3, #4
 800c1bc:	4618      	mov	r0, r3
 800c1be:	f7fd fa6b 	bl	8009698 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	6a1b      	ldr	r3, [r3, #32]
 800c1c6:	68f8      	ldr	r0, [r7, #12]
 800c1c8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1d0:	f003 0304 	and.w	r3, r3, #4
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d02f      	beq.n	800c238 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c1d8:	68fb      	ldr	r3, [r7, #12]
 800c1da:	699b      	ldr	r3, [r3, #24]
 800c1dc:	693a      	ldr	r2, [r7, #16]
 800c1de:	4413      	add	r3, r2
 800c1e0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c1e2:	68ba      	ldr	r2, [r7, #8]
 800c1e4:	693b      	ldr	r3, [r7, #16]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d90e      	bls.n	800c208 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c1ea:	68fb      	ldr	r3, [r7, #12]
 800c1ec:	68ba      	ldr	r2, [r7, #8]
 800c1ee:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	68fa      	ldr	r2, [r7, #12]
 800c1f4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1f6:	4b1a      	ldr	r3, [pc, #104]	@ (800c260 <prvSwitchTimerLists+0xc4>)
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	3304      	adds	r3, #4
 800c1fe:	4619      	mov	r1, r3
 800c200:	4610      	mov	r0, r2
 800c202:	f7fd fa10 	bl	8009626 <vListInsert>
 800c206:	e017      	b.n	800c238 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c208:	2300      	movs	r3, #0
 800c20a:	9300      	str	r3, [sp, #0]
 800c20c:	2300      	movs	r3, #0
 800c20e:	693a      	ldr	r2, [r7, #16]
 800c210:	2100      	movs	r1, #0
 800c212:	68f8      	ldr	r0, [r7, #12]
 800c214:	f7ff fd58 	bl	800bcc8 <xTimerGenericCommand>
 800c218:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d10b      	bne.n	800c238 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c224:	f383 8811 	msr	BASEPRI, r3
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	603b      	str	r3, [r7, #0]
}
 800c232:	bf00      	nop
 800c234:	bf00      	nop
 800c236:	e7fd      	b.n	800c234 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c238:	4b09      	ldr	r3, [pc, #36]	@ (800c260 <prvSwitchTimerLists+0xc4>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d1b0      	bne.n	800c1a4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c242:	4b07      	ldr	r3, [pc, #28]	@ (800c260 <prvSwitchTimerLists+0xc4>)
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c248:	4b06      	ldr	r3, [pc, #24]	@ (800c264 <prvSwitchTimerLists+0xc8>)
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	4a04      	ldr	r2, [pc, #16]	@ (800c260 <prvSwitchTimerLists+0xc4>)
 800c24e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c250:	4a04      	ldr	r2, [pc, #16]	@ (800c264 <prvSwitchTimerLists+0xc8>)
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	6013      	str	r3, [r2, #0]
}
 800c256:	bf00      	nop
 800c258:	3718      	adds	r7, #24
 800c25a:	46bd      	mov	sp, r7
 800c25c:	bd80      	pop	{r7, pc}
 800c25e:	bf00      	nop
 800c260:	2000a928 	.word	0x2000a928
 800c264:	2000a92c 	.word	0x2000a92c

0800c268 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c26e:	f000 f96b 	bl	800c548 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c272:	4b15      	ldr	r3, [pc, #84]	@ (800c2c8 <prvCheckForValidListAndQueue+0x60>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	2b00      	cmp	r3, #0
 800c278:	d120      	bne.n	800c2bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c27a:	4814      	ldr	r0, [pc, #80]	@ (800c2cc <prvCheckForValidListAndQueue+0x64>)
 800c27c:	f7fd f982 	bl	8009584 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c280:	4813      	ldr	r0, [pc, #76]	@ (800c2d0 <prvCheckForValidListAndQueue+0x68>)
 800c282:	f7fd f97f 	bl	8009584 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c286:	4b13      	ldr	r3, [pc, #76]	@ (800c2d4 <prvCheckForValidListAndQueue+0x6c>)
 800c288:	4a10      	ldr	r2, [pc, #64]	@ (800c2cc <prvCheckForValidListAndQueue+0x64>)
 800c28a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c28c:	4b12      	ldr	r3, [pc, #72]	@ (800c2d8 <prvCheckForValidListAndQueue+0x70>)
 800c28e:	4a10      	ldr	r2, [pc, #64]	@ (800c2d0 <prvCheckForValidListAndQueue+0x68>)
 800c290:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c292:	2300      	movs	r3, #0
 800c294:	9300      	str	r3, [sp, #0]
 800c296:	4b11      	ldr	r3, [pc, #68]	@ (800c2dc <prvCheckForValidListAndQueue+0x74>)
 800c298:	4a11      	ldr	r2, [pc, #68]	@ (800c2e0 <prvCheckForValidListAndQueue+0x78>)
 800c29a:	2110      	movs	r1, #16
 800c29c:	200a      	movs	r0, #10
 800c29e:	f7fd fa8f 	bl	80097c0 <xQueueGenericCreateStatic>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	4a08      	ldr	r2, [pc, #32]	@ (800c2c8 <prvCheckForValidListAndQueue+0x60>)
 800c2a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c2a8:	4b07      	ldr	r3, [pc, #28]	@ (800c2c8 <prvCheckForValidListAndQueue+0x60>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d005      	beq.n	800c2bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c2b0:	4b05      	ldr	r3, [pc, #20]	@ (800c2c8 <prvCheckForValidListAndQueue+0x60>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	490b      	ldr	r1, [pc, #44]	@ (800c2e4 <prvCheckForValidListAndQueue+0x7c>)
 800c2b6:	4618      	mov	r0, r3
 800c2b8:	f7fe fab2 	bl	800a820 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c2bc:	f000 f976 	bl	800c5ac <vPortExitCritical>
}
 800c2c0:	bf00      	nop
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	bd80      	pop	{r7, pc}
 800c2c6:	bf00      	nop
 800c2c8:	2000a930 	.word	0x2000a930
 800c2cc:	2000a900 	.word	0x2000a900
 800c2d0:	2000a914 	.word	0x2000a914
 800c2d4:	2000a928 	.word	0x2000a928
 800c2d8:	2000a92c 	.word	0x2000a92c
 800c2dc:	2000a9dc 	.word	0x2000a9dc
 800c2e0:	2000a93c 	.word	0x2000a93c
 800c2e4:	08021cf8 	.word	0x08021cf8

0800c2e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b085      	sub	sp, #20
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	60f8      	str	r0, [r7, #12]
 800c2f0:	60b9      	str	r1, [r7, #8]
 800c2f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c2f4:	68fb      	ldr	r3, [r7, #12]
 800c2f6:	3b04      	subs	r3, #4
 800c2f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c300:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	3b04      	subs	r3, #4
 800c306:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	f023 0201 	bic.w	r2, r3, #1
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	3b04      	subs	r3, #4
 800c316:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c318:	4a0c      	ldr	r2, [pc, #48]	@ (800c34c <pxPortInitialiseStack+0x64>)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	3b14      	subs	r3, #20
 800c322:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	3b04      	subs	r3, #4
 800c32e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	f06f 0202 	mvn.w	r2, #2
 800c336:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	3b20      	subs	r3, #32
 800c33c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c33e:	68fb      	ldr	r3, [r7, #12]
}
 800c340:	4618      	mov	r0, r3
 800c342:	3714      	adds	r7, #20
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr
 800c34c:	0800c351 	.word	0x0800c351

0800c350 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c356:	2300      	movs	r3, #0
 800c358:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c35a:	4b13      	ldr	r3, [pc, #76]	@ (800c3a8 <prvTaskExitError+0x58>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c362:	d00b      	beq.n	800c37c <prvTaskExitError+0x2c>
	__asm volatile
 800c364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c368:	f383 8811 	msr	BASEPRI, r3
 800c36c:	f3bf 8f6f 	isb	sy
 800c370:	f3bf 8f4f 	dsb	sy
 800c374:	60fb      	str	r3, [r7, #12]
}
 800c376:	bf00      	nop
 800c378:	bf00      	nop
 800c37a:	e7fd      	b.n	800c378 <prvTaskExitError+0x28>
	__asm volatile
 800c37c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c380:	f383 8811 	msr	BASEPRI, r3
 800c384:	f3bf 8f6f 	isb	sy
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	60bb      	str	r3, [r7, #8]
}
 800c38e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c390:	bf00      	nop
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b00      	cmp	r3, #0
 800c396:	d0fc      	beq.n	800c392 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c398:	bf00      	nop
 800c39a:	bf00      	nop
 800c39c:	3714      	adds	r7, #20
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a4:	4770      	bx	lr
 800c3a6:	bf00      	nop
 800c3a8:	20000040 	.word	0x20000040
 800c3ac:	00000000 	.word	0x00000000

0800c3b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c3b0:	4b07      	ldr	r3, [pc, #28]	@ (800c3d0 <pxCurrentTCBConst2>)
 800c3b2:	6819      	ldr	r1, [r3, #0]
 800c3b4:	6808      	ldr	r0, [r1, #0]
 800c3b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3ba:	f380 8809 	msr	PSP, r0
 800c3be:	f3bf 8f6f 	isb	sy
 800c3c2:	f04f 0000 	mov.w	r0, #0
 800c3c6:	f380 8811 	msr	BASEPRI, r0
 800c3ca:	4770      	bx	lr
 800c3cc:	f3af 8000 	nop.w

0800c3d0 <pxCurrentTCBConst2>:
 800c3d0:	2000a3f8 	.word	0x2000a3f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c3d4:	bf00      	nop
 800c3d6:	bf00      	nop

0800c3d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c3d8:	4808      	ldr	r0, [pc, #32]	@ (800c3fc <prvPortStartFirstTask+0x24>)
 800c3da:	6800      	ldr	r0, [r0, #0]
 800c3dc:	6800      	ldr	r0, [r0, #0]
 800c3de:	f380 8808 	msr	MSP, r0
 800c3e2:	f04f 0000 	mov.w	r0, #0
 800c3e6:	f380 8814 	msr	CONTROL, r0
 800c3ea:	b662      	cpsie	i
 800c3ec:	b661      	cpsie	f
 800c3ee:	f3bf 8f4f 	dsb	sy
 800c3f2:	f3bf 8f6f 	isb	sy
 800c3f6:	df00      	svc	0
 800c3f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c3fa:	bf00      	nop
 800c3fc:	e000ed08 	.word	0xe000ed08

0800c400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c400:	b580      	push	{r7, lr}
 800c402:	b086      	sub	sp, #24
 800c404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c406:	4b47      	ldr	r3, [pc, #284]	@ (800c524 <xPortStartScheduler+0x124>)
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	4a47      	ldr	r2, [pc, #284]	@ (800c528 <xPortStartScheduler+0x128>)
 800c40c:	4293      	cmp	r3, r2
 800c40e:	d10b      	bne.n	800c428 <xPortStartScheduler+0x28>
	__asm volatile
 800c410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c414:	f383 8811 	msr	BASEPRI, r3
 800c418:	f3bf 8f6f 	isb	sy
 800c41c:	f3bf 8f4f 	dsb	sy
 800c420:	613b      	str	r3, [r7, #16]
}
 800c422:	bf00      	nop
 800c424:	bf00      	nop
 800c426:	e7fd      	b.n	800c424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c428:	4b3e      	ldr	r3, [pc, #248]	@ (800c524 <xPortStartScheduler+0x124>)
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a3f      	ldr	r2, [pc, #252]	@ (800c52c <xPortStartScheduler+0x12c>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d10b      	bne.n	800c44a <xPortStartScheduler+0x4a>
	__asm volatile
 800c432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c436:	f383 8811 	msr	BASEPRI, r3
 800c43a:	f3bf 8f6f 	isb	sy
 800c43e:	f3bf 8f4f 	dsb	sy
 800c442:	60fb      	str	r3, [r7, #12]
}
 800c444:	bf00      	nop
 800c446:	bf00      	nop
 800c448:	e7fd      	b.n	800c446 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c44a:	4b39      	ldr	r3, [pc, #228]	@ (800c530 <xPortStartScheduler+0x130>)
 800c44c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c44e:	697b      	ldr	r3, [r7, #20]
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	b2db      	uxtb	r3, r3
 800c454:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	22ff      	movs	r2, #255	@ 0xff
 800c45a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	781b      	ldrb	r3, [r3, #0]
 800c460:	b2db      	uxtb	r3, r3
 800c462:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c464:	78fb      	ldrb	r3, [r7, #3]
 800c466:	b2db      	uxtb	r3, r3
 800c468:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c46c:	b2da      	uxtb	r2, r3
 800c46e:	4b31      	ldr	r3, [pc, #196]	@ (800c534 <xPortStartScheduler+0x134>)
 800c470:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c472:	4b31      	ldr	r3, [pc, #196]	@ (800c538 <xPortStartScheduler+0x138>)
 800c474:	2207      	movs	r2, #7
 800c476:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c478:	e009      	b.n	800c48e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c47a:	4b2f      	ldr	r3, [pc, #188]	@ (800c538 <xPortStartScheduler+0x138>)
 800c47c:	681b      	ldr	r3, [r3, #0]
 800c47e:	3b01      	subs	r3, #1
 800c480:	4a2d      	ldr	r2, [pc, #180]	@ (800c538 <xPortStartScheduler+0x138>)
 800c482:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c484:	78fb      	ldrb	r3, [r7, #3]
 800c486:	b2db      	uxtb	r3, r3
 800c488:	005b      	lsls	r3, r3, #1
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c48e:	78fb      	ldrb	r3, [r7, #3]
 800c490:	b2db      	uxtb	r3, r3
 800c492:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c496:	2b80      	cmp	r3, #128	@ 0x80
 800c498:	d0ef      	beq.n	800c47a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c49a:	4b27      	ldr	r3, [pc, #156]	@ (800c538 <xPortStartScheduler+0x138>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f1c3 0307 	rsb	r3, r3, #7
 800c4a2:	2b04      	cmp	r3, #4
 800c4a4:	d00b      	beq.n	800c4be <xPortStartScheduler+0xbe>
	__asm volatile
 800c4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4aa:	f383 8811 	msr	BASEPRI, r3
 800c4ae:	f3bf 8f6f 	isb	sy
 800c4b2:	f3bf 8f4f 	dsb	sy
 800c4b6:	60bb      	str	r3, [r7, #8]
}
 800c4b8:	bf00      	nop
 800c4ba:	bf00      	nop
 800c4bc:	e7fd      	b.n	800c4ba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c4be:	4b1e      	ldr	r3, [pc, #120]	@ (800c538 <xPortStartScheduler+0x138>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	021b      	lsls	r3, r3, #8
 800c4c4:	4a1c      	ldr	r2, [pc, #112]	@ (800c538 <xPortStartScheduler+0x138>)
 800c4c6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c4c8:	4b1b      	ldr	r3, [pc, #108]	@ (800c538 <xPortStartScheduler+0x138>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c4d0:	4a19      	ldr	r2, [pc, #100]	@ (800c538 <xPortStartScheduler+0x138>)
 800c4d2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	b2da      	uxtb	r2, r3
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c4dc:	4b17      	ldr	r3, [pc, #92]	@ (800c53c <xPortStartScheduler+0x13c>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	4a16      	ldr	r2, [pc, #88]	@ (800c53c <xPortStartScheduler+0x13c>)
 800c4e2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c4e6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c4e8:	4b14      	ldr	r3, [pc, #80]	@ (800c53c <xPortStartScheduler+0x13c>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	4a13      	ldr	r2, [pc, #76]	@ (800c53c <xPortStartScheduler+0x13c>)
 800c4ee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c4f2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c4f4:	f000 f8da 	bl	800c6ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c4f8:	4b11      	ldr	r3, [pc, #68]	@ (800c540 <xPortStartScheduler+0x140>)
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c4fe:	f000 f8f9 	bl	800c6f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c502:	4b10      	ldr	r3, [pc, #64]	@ (800c544 <xPortStartScheduler+0x144>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	4a0f      	ldr	r2, [pc, #60]	@ (800c544 <xPortStartScheduler+0x144>)
 800c508:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c50c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c50e:	f7ff ff63 	bl	800c3d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c512:	f7fe ff05 	bl	800b320 <vTaskSwitchContext>
	prvTaskExitError();
 800c516:	f7ff ff1b 	bl	800c350 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3718      	adds	r7, #24
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}
 800c524:	e000ed00 	.word	0xe000ed00
 800c528:	410fc271 	.word	0x410fc271
 800c52c:	410fc270 	.word	0x410fc270
 800c530:	e000e400 	.word	0xe000e400
 800c534:	2000aa2c 	.word	0x2000aa2c
 800c538:	2000aa30 	.word	0x2000aa30
 800c53c:	e000ed20 	.word	0xe000ed20
 800c540:	20000040 	.word	0x20000040
 800c544:	e000ef34 	.word	0xe000ef34

0800c548 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c548:	b480      	push	{r7}
 800c54a:	b083      	sub	sp, #12
 800c54c:	af00      	add	r7, sp, #0
	__asm volatile
 800c54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c552:	f383 8811 	msr	BASEPRI, r3
 800c556:	f3bf 8f6f 	isb	sy
 800c55a:	f3bf 8f4f 	dsb	sy
 800c55e:	607b      	str	r3, [r7, #4]
}
 800c560:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c562:	4b10      	ldr	r3, [pc, #64]	@ (800c5a4 <vPortEnterCritical+0x5c>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	3301      	adds	r3, #1
 800c568:	4a0e      	ldr	r2, [pc, #56]	@ (800c5a4 <vPortEnterCritical+0x5c>)
 800c56a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c56c:	4b0d      	ldr	r3, [pc, #52]	@ (800c5a4 <vPortEnterCritical+0x5c>)
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	2b01      	cmp	r3, #1
 800c572:	d110      	bne.n	800c596 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c574:	4b0c      	ldr	r3, [pc, #48]	@ (800c5a8 <vPortEnterCritical+0x60>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	b2db      	uxtb	r3, r3
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00b      	beq.n	800c596 <vPortEnterCritical+0x4e>
	__asm volatile
 800c57e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c582:	f383 8811 	msr	BASEPRI, r3
 800c586:	f3bf 8f6f 	isb	sy
 800c58a:	f3bf 8f4f 	dsb	sy
 800c58e:	603b      	str	r3, [r7, #0]
}
 800c590:	bf00      	nop
 800c592:	bf00      	nop
 800c594:	e7fd      	b.n	800c592 <vPortEnterCritical+0x4a>
	}
}
 800c596:	bf00      	nop
 800c598:	370c      	adds	r7, #12
 800c59a:	46bd      	mov	sp, r7
 800c59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5a0:	4770      	bx	lr
 800c5a2:	bf00      	nop
 800c5a4:	20000040 	.word	0x20000040
 800c5a8:	e000ed04 	.word	0xe000ed04

0800c5ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c5ac:	b480      	push	{r7}
 800c5ae:	b083      	sub	sp, #12
 800c5b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c5b2:	4b12      	ldr	r3, [pc, #72]	@ (800c5fc <vPortExitCritical+0x50>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d10b      	bne.n	800c5d2 <vPortExitCritical+0x26>
	__asm volatile
 800c5ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5be:	f383 8811 	msr	BASEPRI, r3
 800c5c2:	f3bf 8f6f 	isb	sy
 800c5c6:	f3bf 8f4f 	dsb	sy
 800c5ca:	607b      	str	r3, [r7, #4]
}
 800c5cc:	bf00      	nop
 800c5ce:	bf00      	nop
 800c5d0:	e7fd      	b.n	800c5ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c5d2:	4b0a      	ldr	r3, [pc, #40]	@ (800c5fc <vPortExitCritical+0x50>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	3b01      	subs	r3, #1
 800c5d8:	4a08      	ldr	r2, [pc, #32]	@ (800c5fc <vPortExitCritical+0x50>)
 800c5da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c5dc:	4b07      	ldr	r3, [pc, #28]	@ (800c5fc <vPortExitCritical+0x50>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d105      	bne.n	800c5f0 <vPortExitCritical+0x44>
 800c5e4:	2300      	movs	r3, #0
 800c5e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	f383 8811 	msr	BASEPRI, r3
}
 800c5ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c5f0:	bf00      	nop
 800c5f2:	370c      	adds	r7, #12
 800c5f4:	46bd      	mov	sp, r7
 800c5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fa:	4770      	bx	lr
 800c5fc:	20000040 	.word	0x20000040

0800c600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c600:	f3ef 8009 	mrs	r0, PSP
 800c604:	f3bf 8f6f 	isb	sy
 800c608:	4b15      	ldr	r3, [pc, #84]	@ (800c660 <pxCurrentTCBConst>)
 800c60a:	681a      	ldr	r2, [r3, #0]
 800c60c:	f01e 0f10 	tst.w	lr, #16
 800c610:	bf08      	it	eq
 800c612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c61a:	6010      	str	r0, [r2, #0]
 800c61c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c620:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c624:	f380 8811 	msr	BASEPRI, r0
 800c628:	f3bf 8f4f 	dsb	sy
 800c62c:	f3bf 8f6f 	isb	sy
 800c630:	f7fe fe76 	bl	800b320 <vTaskSwitchContext>
 800c634:	f04f 0000 	mov.w	r0, #0
 800c638:	f380 8811 	msr	BASEPRI, r0
 800c63c:	bc09      	pop	{r0, r3}
 800c63e:	6819      	ldr	r1, [r3, #0]
 800c640:	6808      	ldr	r0, [r1, #0]
 800c642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c646:	f01e 0f10 	tst.w	lr, #16
 800c64a:	bf08      	it	eq
 800c64c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c650:	f380 8809 	msr	PSP, r0
 800c654:	f3bf 8f6f 	isb	sy
 800c658:	4770      	bx	lr
 800c65a:	bf00      	nop
 800c65c:	f3af 8000 	nop.w

0800c660 <pxCurrentTCBConst>:
 800c660:	2000a3f8 	.word	0x2000a3f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c664:	bf00      	nop
 800c666:	bf00      	nop

0800c668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
	__asm volatile
 800c66e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c672:	f383 8811 	msr	BASEPRI, r3
 800c676:	f3bf 8f6f 	isb	sy
 800c67a:	f3bf 8f4f 	dsb	sy
 800c67e:	607b      	str	r3, [r7, #4]
}
 800c680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c682:	f7fe fd93 	bl	800b1ac <xTaskIncrementTick>
 800c686:	4603      	mov	r3, r0
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d003      	beq.n	800c694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c68c:	4b06      	ldr	r3, [pc, #24]	@ (800c6a8 <xPortSysTickHandler+0x40>)
 800c68e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c692:	601a      	str	r2, [r3, #0]
 800c694:	2300      	movs	r3, #0
 800c696:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	f383 8811 	msr	BASEPRI, r3
}
 800c69e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c6a0:	bf00      	nop
 800c6a2:	3708      	adds	r7, #8
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}
 800c6a8:	e000ed04 	.word	0xe000ed04

0800c6ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c6b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c6e0 <vPortSetupTimerInterrupt+0x34>)
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c6b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c6e4 <vPortSetupTimerInterrupt+0x38>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c6bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c6e8 <vPortSetupTimerInterrupt+0x3c>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a0a      	ldr	r2, [pc, #40]	@ (800c6ec <vPortSetupTimerInterrupt+0x40>)
 800c6c2:	fba2 2303 	umull	r2, r3, r2, r3
 800c6c6:	099b      	lsrs	r3, r3, #6
 800c6c8:	4a09      	ldr	r2, [pc, #36]	@ (800c6f0 <vPortSetupTimerInterrupt+0x44>)
 800c6ca:	3b01      	subs	r3, #1
 800c6cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c6ce:	4b04      	ldr	r3, [pc, #16]	@ (800c6e0 <vPortSetupTimerInterrupt+0x34>)
 800c6d0:	2207      	movs	r2, #7
 800c6d2:	601a      	str	r2, [r3, #0]
}
 800c6d4:	bf00      	nop
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr
 800c6de:	bf00      	nop
 800c6e0:	e000e010 	.word	0xe000e010
 800c6e4:	e000e018 	.word	0xe000e018
 800c6e8:	2000001c 	.word	0x2000001c
 800c6ec:	10624dd3 	.word	0x10624dd3
 800c6f0:	e000e014 	.word	0xe000e014

0800c6f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c6f4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c704 <vPortEnableVFP+0x10>
 800c6f8:	6801      	ldr	r1, [r0, #0]
 800c6fa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c6fe:	6001      	str	r1, [r0, #0]
 800c700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c702:	bf00      	nop
 800c704:	e000ed88 	.word	0xe000ed88

0800c708 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c708:	b480      	push	{r7}
 800c70a:	b085      	sub	sp, #20
 800c70c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c70e:	f3ef 8305 	mrs	r3, IPSR
 800c712:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	2b0f      	cmp	r3, #15
 800c718:	d915      	bls.n	800c746 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c71a:	4a18      	ldr	r2, [pc, #96]	@ (800c77c <vPortValidateInterruptPriority+0x74>)
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	4413      	add	r3, r2
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c724:	4b16      	ldr	r3, [pc, #88]	@ (800c780 <vPortValidateInterruptPriority+0x78>)
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	7afa      	ldrb	r2, [r7, #11]
 800c72a:	429a      	cmp	r2, r3
 800c72c:	d20b      	bcs.n	800c746 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c732:	f383 8811 	msr	BASEPRI, r3
 800c736:	f3bf 8f6f 	isb	sy
 800c73a:	f3bf 8f4f 	dsb	sy
 800c73e:	607b      	str	r3, [r7, #4]
}
 800c740:	bf00      	nop
 800c742:	bf00      	nop
 800c744:	e7fd      	b.n	800c742 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c746:	4b0f      	ldr	r3, [pc, #60]	@ (800c784 <vPortValidateInterruptPriority+0x7c>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c74e:	4b0e      	ldr	r3, [pc, #56]	@ (800c788 <vPortValidateInterruptPriority+0x80>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	429a      	cmp	r2, r3
 800c754:	d90b      	bls.n	800c76e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c75a:	f383 8811 	msr	BASEPRI, r3
 800c75e:	f3bf 8f6f 	isb	sy
 800c762:	f3bf 8f4f 	dsb	sy
 800c766:	603b      	str	r3, [r7, #0]
}
 800c768:	bf00      	nop
 800c76a:	bf00      	nop
 800c76c:	e7fd      	b.n	800c76a <vPortValidateInterruptPriority+0x62>
	}
 800c76e:	bf00      	nop
 800c770:	3714      	adds	r7, #20
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	e000e3f0 	.word	0xe000e3f0
 800c780:	2000aa2c 	.word	0x2000aa2c
 800c784:	e000ed0c 	.word	0xe000ed0c
 800c788:	2000aa30 	.word	0x2000aa30

0800c78c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	b08a      	sub	sp, #40	@ 0x28
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c794:	2300      	movs	r3, #0
 800c796:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c798:	f7fe fc3a 	bl	800b010 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c79c:	4b5c      	ldr	r3, [pc, #368]	@ (800c910 <pvPortMalloc+0x184>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	d101      	bne.n	800c7a8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c7a4:	f000 f924 	bl	800c9f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c7a8:	4b5a      	ldr	r3, [pc, #360]	@ (800c914 <pvPortMalloc+0x188>)
 800c7aa:	681a      	ldr	r2, [r3, #0]
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	4013      	ands	r3, r2
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f040 8095 	bne.w	800c8e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d01e      	beq.n	800c7fa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c7bc:	2208      	movs	r2, #8
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	4413      	add	r3, r2
 800c7c2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	f003 0307 	and.w	r3, r3, #7
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d015      	beq.n	800c7fa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	f023 0307 	bic.w	r3, r3, #7
 800c7d4:	3308      	adds	r3, #8
 800c7d6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	f003 0307 	and.w	r3, r3, #7
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d00b      	beq.n	800c7fa <pvPortMalloc+0x6e>
	__asm volatile
 800c7e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e6:	f383 8811 	msr	BASEPRI, r3
 800c7ea:	f3bf 8f6f 	isb	sy
 800c7ee:	f3bf 8f4f 	dsb	sy
 800c7f2:	617b      	str	r3, [r7, #20]
}
 800c7f4:	bf00      	nop
 800c7f6:	bf00      	nop
 800c7f8:	e7fd      	b.n	800c7f6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d06f      	beq.n	800c8e0 <pvPortMalloc+0x154>
 800c800:	4b45      	ldr	r3, [pc, #276]	@ (800c918 <pvPortMalloc+0x18c>)
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	429a      	cmp	r2, r3
 800c808:	d86a      	bhi.n	800c8e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c80a:	4b44      	ldr	r3, [pc, #272]	@ (800c91c <pvPortMalloc+0x190>)
 800c80c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c80e:	4b43      	ldr	r3, [pc, #268]	@ (800c91c <pvPortMalloc+0x190>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c814:	e004      	b.n	800c820 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c818:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c81a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c822:	685b      	ldr	r3, [r3, #4]
 800c824:	687a      	ldr	r2, [r7, #4]
 800c826:	429a      	cmp	r2, r3
 800c828:	d903      	bls.n	800c832 <pvPortMalloc+0xa6>
 800c82a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d1f1      	bne.n	800c816 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c832:	4b37      	ldr	r3, [pc, #220]	@ (800c910 <pvPortMalloc+0x184>)
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c838:	429a      	cmp	r2, r3
 800c83a:	d051      	beq.n	800c8e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c83c:	6a3b      	ldr	r3, [r7, #32]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	2208      	movs	r2, #8
 800c842:	4413      	add	r3, r2
 800c844:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c848:	681a      	ldr	r2, [r3, #0]
 800c84a:	6a3b      	ldr	r3, [r7, #32]
 800c84c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c84e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c850:	685a      	ldr	r2, [r3, #4]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	1ad2      	subs	r2, r2, r3
 800c856:	2308      	movs	r3, #8
 800c858:	005b      	lsls	r3, r3, #1
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d920      	bls.n	800c8a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c85e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	4413      	add	r3, r2
 800c864:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	f003 0307 	and.w	r3, r3, #7
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d00b      	beq.n	800c888 <pvPortMalloc+0xfc>
	__asm volatile
 800c870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c874:	f383 8811 	msr	BASEPRI, r3
 800c878:	f3bf 8f6f 	isb	sy
 800c87c:	f3bf 8f4f 	dsb	sy
 800c880:	613b      	str	r3, [r7, #16]
}
 800c882:	bf00      	nop
 800c884:	bf00      	nop
 800c886:	e7fd      	b.n	800c884 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c888:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88a:	685a      	ldr	r2, [r3, #4]
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	1ad2      	subs	r2, r2, r3
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c894:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c896:	687a      	ldr	r2, [r7, #4]
 800c898:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c89a:	69b8      	ldr	r0, [r7, #24]
 800c89c:	f000 f90a 	bl	800cab4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c8a0:	4b1d      	ldr	r3, [pc, #116]	@ (800c918 <pvPortMalloc+0x18c>)
 800c8a2:	681a      	ldr	r2, [r3, #0]
 800c8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8a6:	685b      	ldr	r3, [r3, #4]
 800c8a8:	1ad3      	subs	r3, r2, r3
 800c8aa:	4a1b      	ldr	r2, [pc, #108]	@ (800c918 <pvPortMalloc+0x18c>)
 800c8ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c8ae:	4b1a      	ldr	r3, [pc, #104]	@ (800c918 <pvPortMalloc+0x18c>)
 800c8b0:	681a      	ldr	r2, [r3, #0]
 800c8b2:	4b1b      	ldr	r3, [pc, #108]	@ (800c920 <pvPortMalloc+0x194>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d203      	bcs.n	800c8c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c8ba:	4b17      	ldr	r3, [pc, #92]	@ (800c918 <pvPortMalloc+0x18c>)
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	4a18      	ldr	r2, [pc, #96]	@ (800c920 <pvPortMalloc+0x194>)
 800c8c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c4:	685a      	ldr	r2, [r3, #4]
 800c8c6:	4b13      	ldr	r3, [pc, #76]	@ (800c914 <pvPortMalloc+0x188>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	431a      	orrs	r2, r3
 800c8cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d2:	2200      	movs	r2, #0
 800c8d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c8d6:	4b13      	ldr	r3, [pc, #76]	@ (800c924 <pvPortMalloc+0x198>)
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	3301      	adds	r3, #1
 800c8dc:	4a11      	ldr	r2, [pc, #68]	@ (800c924 <pvPortMalloc+0x198>)
 800c8de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c8e0:	f7fe fba4 	bl	800b02c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8e4:	69fb      	ldr	r3, [r7, #28]
 800c8e6:	f003 0307 	and.w	r3, r3, #7
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d00b      	beq.n	800c906 <pvPortMalloc+0x17a>
	__asm volatile
 800c8ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8f2:	f383 8811 	msr	BASEPRI, r3
 800c8f6:	f3bf 8f6f 	isb	sy
 800c8fa:	f3bf 8f4f 	dsb	sy
 800c8fe:	60fb      	str	r3, [r7, #12]
}
 800c900:	bf00      	nop
 800c902:	bf00      	nop
 800c904:	e7fd      	b.n	800c902 <pvPortMalloc+0x176>
	return pvReturn;
 800c906:	69fb      	ldr	r3, [r7, #28]
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3728      	adds	r7, #40	@ 0x28
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	2000e8bc 	.word	0x2000e8bc
 800c914:	2000e8d0 	.word	0x2000e8d0
 800c918:	2000e8c0 	.word	0x2000e8c0
 800c91c:	2000e8b4 	.word	0x2000e8b4
 800c920:	2000e8c4 	.word	0x2000e8c4
 800c924:	2000e8c8 	.word	0x2000e8c8

0800c928 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b086      	sub	sp, #24
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d04f      	beq.n	800c9da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c93a:	2308      	movs	r3, #8
 800c93c:	425b      	negs	r3, r3
 800c93e:	697a      	ldr	r2, [r7, #20]
 800c940:	4413      	add	r3, r2
 800c942:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c948:	693b      	ldr	r3, [r7, #16]
 800c94a:	685a      	ldr	r2, [r3, #4]
 800c94c:	4b25      	ldr	r3, [pc, #148]	@ (800c9e4 <vPortFree+0xbc>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	4013      	ands	r3, r2
 800c952:	2b00      	cmp	r3, #0
 800c954:	d10b      	bne.n	800c96e <vPortFree+0x46>
	__asm volatile
 800c956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c95a:	f383 8811 	msr	BASEPRI, r3
 800c95e:	f3bf 8f6f 	isb	sy
 800c962:	f3bf 8f4f 	dsb	sy
 800c966:	60fb      	str	r3, [r7, #12]
}
 800c968:	bf00      	nop
 800c96a:	bf00      	nop
 800c96c:	e7fd      	b.n	800c96a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c96e:	693b      	ldr	r3, [r7, #16]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00b      	beq.n	800c98e <vPortFree+0x66>
	__asm volatile
 800c976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c97a:	f383 8811 	msr	BASEPRI, r3
 800c97e:	f3bf 8f6f 	isb	sy
 800c982:	f3bf 8f4f 	dsb	sy
 800c986:	60bb      	str	r3, [r7, #8]
}
 800c988:	bf00      	nop
 800c98a:	bf00      	nop
 800c98c:	e7fd      	b.n	800c98a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	685a      	ldr	r2, [r3, #4]
 800c992:	4b14      	ldr	r3, [pc, #80]	@ (800c9e4 <vPortFree+0xbc>)
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	4013      	ands	r3, r2
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d01e      	beq.n	800c9da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c99c:	693b      	ldr	r3, [r7, #16]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d11a      	bne.n	800c9da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	685a      	ldr	r2, [r3, #4]
 800c9a8:	4b0e      	ldr	r3, [pc, #56]	@ (800c9e4 <vPortFree+0xbc>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	43db      	mvns	r3, r3
 800c9ae:	401a      	ands	r2, r3
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c9b4:	f7fe fb2c 	bl	800b010 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c9e8 <vPortFree+0xc0>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	4a09      	ldr	r2, [pc, #36]	@ (800c9e8 <vPortFree+0xc0>)
 800c9c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c9c6:	6938      	ldr	r0, [r7, #16]
 800c9c8:	f000 f874 	bl	800cab4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c9cc:	4b07      	ldr	r3, [pc, #28]	@ (800c9ec <vPortFree+0xc4>)
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	4a06      	ldr	r2, [pc, #24]	@ (800c9ec <vPortFree+0xc4>)
 800c9d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c9d6:	f7fe fb29 	bl	800b02c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c9da:	bf00      	nop
 800c9dc:	3718      	adds	r7, #24
 800c9de:	46bd      	mov	sp, r7
 800c9e0:	bd80      	pop	{r7, pc}
 800c9e2:	bf00      	nop
 800c9e4:	2000e8d0 	.word	0x2000e8d0
 800c9e8:	2000e8c0 	.word	0x2000e8c0
 800c9ec:	2000e8cc 	.word	0x2000e8cc

0800c9f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c9f0:	b480      	push	{r7}
 800c9f2:	b085      	sub	sp, #20
 800c9f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c9f6:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 800c9fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c9fc:	4b27      	ldr	r3, [pc, #156]	@ (800ca9c <prvHeapInit+0xac>)
 800c9fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	f003 0307 	and.w	r3, r3, #7
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d00c      	beq.n	800ca24 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	3307      	adds	r3, #7
 800ca0e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca10:	68fb      	ldr	r3, [r7, #12]
 800ca12:	f023 0307 	bic.w	r3, r3, #7
 800ca16:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca18:	68ba      	ldr	r2, [r7, #8]
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	1ad3      	subs	r3, r2, r3
 800ca1e:	4a1f      	ldr	r2, [pc, #124]	@ (800ca9c <prvHeapInit+0xac>)
 800ca20:	4413      	add	r3, r2
 800ca22:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca28:	4a1d      	ldr	r2, [pc, #116]	@ (800caa0 <prvHeapInit+0xb0>)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca2e:	4b1c      	ldr	r3, [pc, #112]	@ (800caa0 <prvHeapInit+0xb0>)
 800ca30:	2200      	movs	r2, #0
 800ca32:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	68ba      	ldr	r2, [r7, #8]
 800ca38:	4413      	add	r3, r2
 800ca3a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ca3c:	2208      	movs	r2, #8
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	1a9b      	subs	r3, r3, r2
 800ca42:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	f023 0307 	bic.w	r3, r3, #7
 800ca4a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	4a15      	ldr	r2, [pc, #84]	@ (800caa4 <prvHeapInit+0xb4>)
 800ca50:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ca52:	4b14      	ldr	r3, [pc, #80]	@ (800caa4 <prvHeapInit+0xb4>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	2200      	movs	r2, #0
 800ca58:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ca5a:	4b12      	ldr	r3, [pc, #72]	@ (800caa4 <prvHeapInit+0xb4>)
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	2200      	movs	r2, #0
 800ca60:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	68fa      	ldr	r2, [r7, #12]
 800ca6a:	1ad2      	subs	r2, r2, r3
 800ca6c:	683b      	ldr	r3, [r7, #0]
 800ca6e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ca70:	4b0c      	ldr	r3, [pc, #48]	@ (800caa4 <prvHeapInit+0xb4>)
 800ca72:	681a      	ldr	r2, [r3, #0]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	4a0a      	ldr	r2, [pc, #40]	@ (800caa8 <prvHeapInit+0xb8>)
 800ca7e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	4a09      	ldr	r2, [pc, #36]	@ (800caac <prvHeapInit+0xbc>)
 800ca86:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ca88:	4b09      	ldr	r3, [pc, #36]	@ (800cab0 <prvHeapInit+0xc0>)
 800ca8a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ca8e:	601a      	str	r2, [r3, #0]
}
 800ca90:	bf00      	nop
 800ca92:	3714      	adds	r7, #20
 800ca94:	46bd      	mov	sp, r7
 800ca96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca9a:	4770      	bx	lr
 800ca9c:	2000aa34 	.word	0x2000aa34
 800caa0:	2000e8b4 	.word	0x2000e8b4
 800caa4:	2000e8bc 	.word	0x2000e8bc
 800caa8:	2000e8c4 	.word	0x2000e8c4
 800caac:	2000e8c0 	.word	0x2000e8c0
 800cab0:	2000e8d0 	.word	0x2000e8d0

0800cab4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cab4:	b480      	push	{r7}
 800cab6:	b085      	sub	sp, #20
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cabc:	4b28      	ldr	r3, [pc, #160]	@ (800cb60 <prvInsertBlockIntoFreeList+0xac>)
 800cabe:	60fb      	str	r3, [r7, #12]
 800cac0:	e002      	b.n	800cac8 <prvInsertBlockIntoFreeList+0x14>
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	60fb      	str	r3, [r7, #12]
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	429a      	cmp	r2, r3
 800cad0:	d8f7      	bhi.n	800cac2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	685b      	ldr	r3, [r3, #4]
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	4413      	add	r3, r2
 800cade:	687a      	ldr	r2, [r7, #4]
 800cae0:	429a      	cmp	r2, r3
 800cae2:	d108      	bne.n	800caf6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	685a      	ldr	r2, [r3, #4]
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	441a      	add	r2, r3
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	68ba      	ldr	r2, [r7, #8]
 800cb00:	441a      	add	r2, r3
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	429a      	cmp	r2, r3
 800cb08:	d118      	bne.n	800cb3c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	681a      	ldr	r2, [r3, #0]
 800cb0e:	4b15      	ldr	r3, [pc, #84]	@ (800cb64 <prvInsertBlockIntoFreeList+0xb0>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	429a      	cmp	r2, r3
 800cb14:	d00d      	beq.n	800cb32 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	685a      	ldr	r2, [r3, #4]
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	441a      	add	r2, r3
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	601a      	str	r2, [r3, #0]
 800cb30:	e008      	b.n	800cb44 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cb32:	4b0c      	ldr	r3, [pc, #48]	@ (800cb64 <prvInsertBlockIntoFreeList+0xb0>)
 800cb34:	681a      	ldr	r2, [r3, #0]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	601a      	str	r2, [r3, #0]
 800cb3a:	e003      	b.n	800cb44 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cb44:	68fa      	ldr	r2, [r7, #12]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d002      	beq.n	800cb52 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cb52:	bf00      	nop
 800cb54:	3714      	adds	r7, #20
 800cb56:	46bd      	mov	sp, r7
 800cb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb5c:	4770      	bx	lr
 800cb5e:	bf00      	nop
 800cb60:	2000e8b4 	.word	0x2000e8b4
 800cb64:	2000e8bc 	.word	0x2000e8bc

0800cb68 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b084      	sub	sp, #16
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
 800cb70:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	330c      	adds	r3, #12
 800cb78:	461a      	mov	r2, r3
 800cb7a:	6839      	ldr	r1, [r7, #0]
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	f002 fbdf 	bl	800f340 <tcpip_send_msg_wait_sem>
 800cb82:	4603      	mov	r3, r0
 800cb84:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800cb86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d103      	bne.n	800cb96 <netconn_apimsg+0x2e>
    return apimsg->err;
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800cb94:	e001      	b.n	800cb9a <netconn_apimsg+0x32>
  }
  return err;
 800cb96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cb9a:	4618      	mov	r0, r3
 800cb9c:	3710      	adds	r7, #16
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	bd80      	pop	{r7, pc}
	...

0800cba4 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b08c      	sub	sp, #48	@ 0x30
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	4603      	mov	r3, r0
 800cbac:	603a      	str	r2, [r7, #0]
 800cbae:	71fb      	strb	r3, [r7, #7]
 800cbb0:	460b      	mov	r3, r1
 800cbb2:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800cbb4:	79fb      	ldrb	r3, [r7, #7]
 800cbb6:	6839      	ldr	r1, [r7, #0]
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f000 fdd5 	bl	800d768 <netconn_alloc>
 800cbbe:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800cbc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d054      	beq.n	800cc70 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800cbc6:	79bb      	ldrb	r3, [r7, #6]
 800cbc8:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800cbca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbcc:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800cbce:	f107 0308 	add.w	r3, r7, #8
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	4829      	ldr	r0, [pc, #164]	@ (800cc7c <netconn_new_with_proto_and_callback+0xd8>)
 800cbd6:	f7ff ffc7 	bl	800cb68 <netconn_apimsg>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800cbe0:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800cbe4:	2b00      	cmp	r3, #0
 800cbe6:	d043      	beq.n	800cc70 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800cbe8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbea:	685b      	ldr	r3, [r3, #4]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d005      	beq.n	800cbfc <netconn_new_with_proto_and_callback+0x58>
 800cbf0:	4b23      	ldr	r3, [pc, #140]	@ (800cc80 <netconn_new_with_proto_and_callback+0xdc>)
 800cbf2:	22a3      	movs	r2, #163	@ 0xa3
 800cbf4:	4923      	ldr	r1, [pc, #140]	@ (800cc84 <netconn_new_with_proto_and_callback+0xe0>)
 800cbf6:	4824      	ldr	r0, [pc, #144]	@ (800cc88 <netconn_new_with_proto_and_callback+0xe4>)
 800cbf8:	f011 fb70 	bl	801e2dc <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800cbfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cbfe:	3310      	adds	r3, #16
 800cc00:	4618      	mov	r0, r3
 800cc02:	f010 f99b 	bl	801cf3c <sys_mbox_valid>
 800cc06:	4603      	mov	r3, r0
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d105      	bne.n	800cc18 <netconn_new_with_proto_and_callback+0x74>
 800cc0c:	4b1c      	ldr	r3, [pc, #112]	@ (800cc80 <netconn_new_with_proto_and_callback+0xdc>)
 800cc0e:	22a4      	movs	r2, #164	@ 0xa4
 800cc10:	491e      	ldr	r1, [pc, #120]	@ (800cc8c <netconn_new_with_proto_and_callback+0xe8>)
 800cc12:	481d      	ldr	r0, [pc, #116]	@ (800cc88 <netconn_new_with_proto_and_callback+0xe4>)
 800cc14:	f011 fb62 	bl	801e2dc <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800cc18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc1a:	3314      	adds	r3, #20
 800cc1c:	4618      	mov	r0, r3
 800cc1e:	f010 f98d 	bl	801cf3c <sys_mbox_valid>
 800cc22:	4603      	mov	r3, r0
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d005      	beq.n	800cc34 <netconn_new_with_proto_and_callback+0x90>
 800cc28:	4b15      	ldr	r3, [pc, #84]	@ (800cc80 <netconn_new_with_proto_and_callback+0xdc>)
 800cc2a:	22a6      	movs	r2, #166	@ 0xa6
 800cc2c:	4918      	ldr	r1, [pc, #96]	@ (800cc90 <netconn_new_with_proto_and_callback+0xec>)
 800cc2e:	4816      	ldr	r0, [pc, #88]	@ (800cc88 <netconn_new_with_proto_and_callback+0xe4>)
 800cc30:	f011 fb54 	bl	801e2dc <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800cc34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc36:	330c      	adds	r3, #12
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f010 fa0d 	bl	801d058 <sys_sem_valid>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d105      	bne.n	800cc50 <netconn_new_with_proto_and_callback+0xac>
 800cc44:	4b0e      	ldr	r3, [pc, #56]	@ (800cc80 <netconn_new_with_proto_and_callback+0xdc>)
 800cc46:	22a9      	movs	r2, #169	@ 0xa9
 800cc48:	4912      	ldr	r1, [pc, #72]	@ (800cc94 <netconn_new_with_proto_and_callback+0xf0>)
 800cc4a:	480f      	ldr	r0, [pc, #60]	@ (800cc88 <netconn_new_with_proto_and_callback+0xe4>)
 800cc4c:	f011 fb46 	bl	801e2dc <iprintf>
      sys_sem_free(&conn->op_completed);
 800cc50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc52:	330c      	adds	r3, #12
 800cc54:	4618      	mov	r0, r3
 800cc56:	f010 f9f2 	bl	801d03e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800cc5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc5c:	3310      	adds	r3, #16
 800cc5e:	4618      	mov	r0, r3
 800cc60:	f010 f8f8 	bl	801ce54 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800cc64:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cc66:	2007      	movs	r0, #7
 800cc68:	f003 fc06 	bl	8010478 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	e000      	b.n	800cc72 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800cc70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3730      	adds	r7, #48	@ 0x30
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
 800cc7a:	bf00      	nop
 800cc7c:	0800d73d 	.word	0x0800d73d
 800cc80:	08021d00 	.word	0x08021d00
 800cc84:	08021d34 	.word	0x08021d34
 800cc88:	08021d58 	.word	0x08021d58
 800cc8c:	08021d80 	.word	0x08021d80
 800cc90:	08021d98 	.word	0x08021d98
 800cc94:	08021dbc 	.word	0x08021dbc

0800cc98 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b08c      	sub	sp, #48	@ 0x30
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	d101      	bne.n	800ccaa <netconn_prepare_delete+0x12>
    return ERR_OK;
 800cca6:	2300      	movs	r3, #0
 800cca8:	e014      	b.n	800ccd4 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ccae:	2329      	movs	r3, #41	@ 0x29
 800ccb0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800ccb2:	f107 030c 	add.w	r3, r7, #12
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	4808      	ldr	r0, [pc, #32]	@ (800ccdc <netconn_prepare_delete+0x44>)
 800ccba:	f7ff ff55 	bl	800cb68 <netconn_apimsg>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800ccc4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d002      	beq.n	800ccd2 <netconn_prepare_delete+0x3a>
    return err;
 800cccc:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ccd0:	e000      	b.n	800ccd4 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800ccd2:	2300      	movs	r3, #0
}
 800ccd4:	4618      	mov	r0, r3
 800ccd6:	3730      	adds	r7, #48	@ 0x30
 800ccd8:	46bd      	mov	sp, r7
 800ccda:	bd80      	pop	{r7, pc}
 800ccdc:	0800dca9 	.word	0x0800dca9

0800cce0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800cce0:	b580      	push	{r7, lr}
 800cce2:	b084      	sub	sp, #16
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d101      	bne.n	800ccf2 <netconn_delete+0x12>
    return ERR_OK;
 800ccee:	2300      	movs	r3, #0
 800ccf0:	e00d      	b.n	800cd0e <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800ccf2:	6878      	ldr	r0, [r7, #4]
 800ccf4:	f7ff ffd0 	bl	800cc98 <netconn_prepare_delete>
 800ccf8:	4603      	mov	r3, r0
 800ccfa:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800ccfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d102      	bne.n	800cd0a <netconn_delete+0x2a>
    netconn_free(conn);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 fd9d 	bl	800d844 <netconn_free>
  }
  return err;
 800cd0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3710      	adds	r7, #16
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
	...

0800cd18 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800cd18:	b580      	push	{r7, lr}
 800cd1a:	b08e      	sub	sp, #56	@ 0x38
 800cd1c:	af00      	add	r7, sp, #0
 800cd1e:	60f8      	str	r0, [r7, #12]
 800cd20:	60b9      	str	r1, [r7, #8]
 800cd22:	4613      	mov	r3, r2
 800cd24:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	2b00      	cmp	r3, #0
 800cd2a:	d109      	bne.n	800cd40 <netconn_connect+0x28>
 800cd2c:	4b11      	ldr	r3, [pc, #68]	@ (800cd74 <netconn_connect+0x5c>)
 800cd2e:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 800cd32:	4911      	ldr	r1, [pc, #68]	@ (800cd78 <netconn_connect+0x60>)
 800cd34:	4811      	ldr	r0, [pc, #68]	@ (800cd7c <netconn_connect+0x64>)
 800cd36:	f011 fad1 	bl	801e2dc <iprintf>
 800cd3a:	f06f 030f 	mvn.w	r3, #15
 800cd3e:	e015      	b.n	800cd6c <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d101      	bne.n	800cd4a <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800cd46:	4b0e      	ldr	r3, [pc, #56]	@ (800cd80 <netconn_connect+0x68>)
 800cd48:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800cd52:	88fb      	ldrh	r3, [r7, #6]
 800cd54:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800cd56:	f107 0314 	add.w	r3, r7, #20
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	4809      	ldr	r0, [pc, #36]	@ (800cd84 <netconn_connect+0x6c>)
 800cd5e:	f7ff ff03 	bl	800cb68 <netconn_apimsg>
 800cd62:	4603      	mov	r3, r0
 800cd64:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800cd68:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800cd6c:	4618      	mov	r0, r3
 800cd6e:	3738      	adds	r7, #56	@ 0x38
 800cd70:	46bd      	mov	sp, r7
 800cd72:	bd80      	pop	{r7, pc}
 800cd74:	08021d00 	.word	0x08021d00
 800cd78:	08021e74 	.word	0x08021e74
 800cd7c:	08021d58 	.word	0x08021d58
 800cd80:	08025d70 	.word	0x08025d70
 800cd84:	0800df91 	.word	0x0800df91

0800cd88 <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800cd88:	b580      	push	{r7, lr}
 800cd8a:	b08c      	sub	sp, #48	@ 0x30
 800cd8c:	af00      	add	r7, sp, #0
 800cd8e:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d109      	bne.n	800cdaa <netconn_disconnect+0x22>
 800cd96:	4b0d      	ldr	r3, [pc, #52]	@ (800cdcc <netconn_disconnect+0x44>)
 800cd98:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800cd9c:	490c      	ldr	r1, [pc, #48]	@ (800cdd0 <netconn_disconnect+0x48>)
 800cd9e:	480d      	ldr	r0, [pc, #52]	@ (800cdd4 <netconn_disconnect+0x4c>)
 800cda0:	f011 fa9c 	bl	801e2dc <iprintf>
 800cda4:	f06f 030f 	mvn.w	r3, #15
 800cda8:	e00c      	b.n	800cdc4 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 800cdae:	f107 030c 	add.w	r3, r7, #12
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	4808      	ldr	r0, [pc, #32]	@ (800cdd8 <netconn_disconnect+0x50>)
 800cdb6:	f7ff fed7 	bl	800cb68 <netconn_apimsg>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800cdc0:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3730      	adds	r7, #48	@ 0x30
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd80      	pop	{r7, pc}
 800cdcc:	08021d00 	.word	0x08021d00
 800cdd0:	08021e94 	.word	0x08021e94
 800cdd4:	08021d58 	.word	0x08021d58
 800cdd8:	0800e10d 	.word	0x0800e10d

0800cddc <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800cddc:	b580      	push	{r7, lr}
 800cdde:	b08c      	sub	sp, #48	@ 0x30
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
 800cde4:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d109      	bne.n	800ce00 <netconn_send+0x24>
 800cdec:	4b0e      	ldr	r3, [pc, #56]	@ (800ce28 <netconn_send+0x4c>)
 800cdee:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800cdf2:	490e      	ldr	r1, [pc, #56]	@ (800ce2c <netconn_send+0x50>)
 800cdf4:	480e      	ldr	r0, [pc, #56]	@ (800ce30 <netconn_send+0x54>)
 800cdf6:	f011 fa71 	bl	801e2dc <iprintf>
 800cdfa:	f06f 030f 	mvn.w	r3, #15
 800cdfe:	e00e      	b.n	800ce1e <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800ce04:	683b      	ldr	r3, [r7, #0]
 800ce06:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800ce08:	f107 030c 	add.w	r3, r7, #12
 800ce0c:	4619      	mov	r1, r3
 800ce0e:	4809      	ldr	r0, [pc, #36]	@ (800ce34 <netconn_send+0x58>)
 800ce10:	f7ff feaa 	bl	800cb68 <netconn_apimsg>
 800ce14:	4603      	mov	r3, r0
 800ce16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800ce1a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3730      	adds	r7, #48	@ 0x30
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	08021d00 	.word	0x08021d00
 800ce2c:	08021fbc 	.word	0x08021fbc
 800ce30:	08021d58 	.word	0x08021d58
 800ce34:	0800e149 	.word	0x0800e149

0800ce38 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b088      	sub	sp, #32
 800ce3c:	af02      	add	r7, sp, #8
 800ce3e:	60f8      	str	r0, [r7, #12]
 800ce40:	60b9      	str	r1, [r7, #8]
 800ce42:	607a      	str	r2, [r7, #4]
 800ce44:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800ce4e:	78fa      	ldrb	r2, [r7, #3]
 800ce50:	f107 0110 	add.w	r1, r7, #16
 800ce54:	6a3b      	ldr	r3, [r7, #32]
 800ce56:	9300      	str	r3, [sp, #0]
 800ce58:	4613      	mov	r3, r2
 800ce5a:	2201      	movs	r2, #1
 800ce5c:	68f8      	ldr	r0, [r7, #12]
 800ce5e:	f000 f805 	bl	800ce6c <netconn_write_vectors_partly>
 800ce62:	4603      	mov	r3, r0
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3718      	adds	r7, #24
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b092      	sub	sp, #72	@ 0x48
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	4611      	mov	r1, r2
 800ce78:	461a      	mov	r2, r3
 800ce7a:	460b      	mov	r3, r1
 800ce7c:	80fb      	strh	r3, [r7, #6]
 800ce7e:	4613      	mov	r3, r2
 800ce80:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d109      	bne.n	800ce9c <netconn_write_vectors_partly+0x30>
 800ce88:	4b4e      	ldr	r3, [pc, #312]	@ (800cfc4 <netconn_write_vectors_partly+0x158>)
 800ce8a:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800ce8e:	494e      	ldr	r1, [pc, #312]	@ (800cfc8 <netconn_write_vectors_partly+0x15c>)
 800ce90:	484e      	ldr	r0, [pc, #312]	@ (800cfcc <netconn_write_vectors_partly+0x160>)
 800ce92:	f011 fa23 	bl	801e2dc <iprintf>
 800ce96:	f06f 030f 	mvn.w	r3, #15
 800ce9a:	e08e      	b.n	800cfba <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	781b      	ldrb	r3, [r3, #0]
 800cea0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cea4:	2b10      	cmp	r3, #16
 800cea6:	d009      	beq.n	800cebc <netconn_write_vectors_partly+0x50>
 800cea8:	4b46      	ldr	r3, [pc, #280]	@ (800cfc4 <netconn_write_vectors_partly+0x158>)
 800ceaa:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800ceae:	4948      	ldr	r1, [pc, #288]	@ (800cfd0 <netconn_write_vectors_partly+0x164>)
 800ceb0:	4846      	ldr	r0, [pc, #280]	@ (800cfcc <netconn_write_vectors_partly+0x160>)
 800ceb2:	f011 fa13 	bl	801e2dc <iprintf>
 800ceb6:	f06f 0305 	mvn.w	r3, #5
 800ceba:	e07e      	b.n	800cfba <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	7f1b      	ldrb	r3, [r3, #28]
 800cec0:	f003 0302 	and.w	r3, r3, #2
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d104      	bne.n	800ced2 <netconn_write_vectors_partly+0x66>
 800cec8:	797b      	ldrb	r3, [r7, #5]
 800ceca:	f003 0304 	and.w	r3, r3, #4
 800cece:	2b00      	cmp	r3, #0
 800ced0:	d001      	beq.n	800ced6 <netconn_write_vectors_partly+0x6a>
 800ced2:	2301      	movs	r3, #1
 800ced4:	e000      	b.n	800ced8 <netconn_write_vectors_partly+0x6c>
 800ced6:	2300      	movs	r3, #0
 800ced8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800cedc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d005      	beq.n	800cef0 <netconn_write_vectors_partly+0x84>
 800cee4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d102      	bne.n	800cef0 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800ceea:	f06f 0305 	mvn.w	r3, #5
 800ceee:	e064      	b.n	800cfba <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800cef0:	2300      	movs	r3, #0
 800cef2:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800cef4:	2300      	movs	r3, #0
 800cef6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cef8:	e015      	b.n	800cf26 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800cefa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cefc:	00db      	lsls	r3, r3, #3
 800cefe:	68ba      	ldr	r2, [r7, #8]
 800cf00:	4413      	add	r3, r2
 800cf02:	685b      	ldr	r3, [r3, #4]
 800cf04:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf06:	4413      	add	r3, r2
 800cf08:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800cf0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf0c:	00db      	lsls	r3, r3, #3
 800cf0e:	68ba      	ldr	r2, [r7, #8]
 800cf10:	4413      	add	r3, r2
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cf16:	429a      	cmp	r2, r3
 800cf18:	d202      	bcs.n	800cf20 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800cf1a:	f06f 0305 	mvn.w	r3, #5
 800cf1e:	e04c      	b.n	800cfba <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800cf20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cf22:	3301      	adds	r3, #1
 800cf24:	643b      	str	r3, [r7, #64]	@ 0x40
 800cf26:	88fb      	ldrh	r3, [r7, #6]
 800cf28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	dbe5      	blt.n	800cefa <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800cf2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d101      	bne.n	800cf38 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800cf34:	2300      	movs	r3, #0
 800cf36:	e040      	b.n	800cfba <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800cf38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	da0a      	bge.n	800cf54 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800cf3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d102      	bne.n	800cf4a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800cf44:	f06f 0305 	mvn.w	r3, #5
 800cf48:	e037      	b.n	800cfba <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800cf4a:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800cf4e:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800cf50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cf52:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800cf5c:	88fb      	ldrh	r3, [r7, #6]
 800cf5e:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800cf60:	2300      	movs	r3, #0
 800cf62:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800cf64:	797b      	ldrb	r3, [r7, #5]
 800cf66:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800cf6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cf6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800cf72:	f107 0314 	add.w	r3, r7, #20
 800cf76:	4619      	mov	r1, r3
 800cf78:	4816      	ldr	r0, [pc, #88]	@ (800cfd4 <netconn_write_vectors_partly+0x168>)
 800cf7a:	f7ff fdf5 	bl	800cb68 <netconn_apimsg>
 800cf7e:	4603      	mov	r3, r0
 800cf80:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800cf84:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d114      	bne.n	800cfb6 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800cf8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d002      	beq.n	800cf98 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800cf92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cf94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cf96:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800cf98:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d10a      	bne.n	800cfb6 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800cfa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cfa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d006      	beq.n	800cfb6 <netconn_write_vectors_partly+0x14a>
 800cfa8:	4b06      	ldr	r3, [pc, #24]	@ (800cfc4 <netconn_write_vectors_partly+0x158>)
 800cfaa:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800cfae:	490a      	ldr	r1, [pc, #40]	@ (800cfd8 <netconn_write_vectors_partly+0x16c>)
 800cfb0:	4806      	ldr	r0, [pc, #24]	@ (800cfcc <netconn_write_vectors_partly+0x160>)
 800cfb2:	f011 f993 	bl	801e2dc <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800cfb6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3748      	adds	r7, #72	@ 0x48
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	08021d00 	.word	0x08021d00
 800cfc8:	08021fd8 	.word	0x08021fd8
 800cfcc:	08021d58 	.word	0x08021d58
 800cfd0:	08021ff4 	.word	0x08021ff4
 800cfd4:	0800e57d 	.word	0x0800e57d
 800cfd8:	08022018 	.word	0x08022018

0800cfdc <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b084      	sub	sp, #16
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d101      	bne.n	800cfee <netconn_err+0x12>
    return ERR_OK;
 800cfea:	2300      	movs	r3, #0
 800cfec:	e00d      	b.n	800d00a <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800cfee:	f010 f8af 	bl	801d150 <sys_arch_protect>
 800cff2:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	7a1b      	ldrb	r3, [r3, #8]
 800cff8:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2200      	movs	r2, #0
 800cffe:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800d000:	68f8      	ldr	r0, [r7, #12]
 800d002:	f010 f8b3 	bl	801d16c <sys_arch_unprotect>
  return err;
 800d006:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d00a:	4618      	mov	r0, r3
 800d00c:	3710      	adds	r7, #16
 800d00e:	46bd      	mov	sp, r7
 800d010:	bd80      	pop	{r7, pc}
	...

0800d014 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800d014:	b580      	push	{r7, lr}
 800d016:	b082      	sub	sp, #8
 800d018:	af00      	add	r7, sp, #0
 800d01a:	4603      	mov	r3, r0
 800d01c:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800d01e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d022:	f113 0f0d 	cmn.w	r3, #13
 800d026:	d009      	beq.n	800d03c <lwip_netconn_err_to_msg+0x28>
 800d028:	f113 0f0d 	cmn.w	r3, #13
 800d02c:	dc0c      	bgt.n	800d048 <lwip_netconn_err_to_msg+0x34>
 800d02e:	f113 0f0f 	cmn.w	r3, #15
 800d032:	d007      	beq.n	800d044 <lwip_netconn_err_to_msg+0x30>
 800d034:	f113 0f0e 	cmn.w	r3, #14
 800d038:	d002      	beq.n	800d040 <lwip_netconn_err_to_msg+0x2c>
 800d03a:	e005      	b.n	800d048 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800d03c:	4b0a      	ldr	r3, [pc, #40]	@ (800d068 <lwip_netconn_err_to_msg+0x54>)
 800d03e:	e00e      	b.n	800d05e <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800d040:	4b0a      	ldr	r3, [pc, #40]	@ (800d06c <lwip_netconn_err_to_msg+0x58>)
 800d042:	e00c      	b.n	800d05e <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800d044:	4b0a      	ldr	r3, [pc, #40]	@ (800d070 <lwip_netconn_err_to_msg+0x5c>)
 800d046:	e00a      	b.n	800d05e <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800d048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d005      	beq.n	800d05c <lwip_netconn_err_to_msg+0x48>
 800d050:	4b08      	ldr	r3, [pc, #32]	@ (800d074 <lwip_netconn_err_to_msg+0x60>)
 800d052:	227d      	movs	r2, #125	@ 0x7d
 800d054:	4908      	ldr	r1, [pc, #32]	@ (800d078 <lwip_netconn_err_to_msg+0x64>)
 800d056:	4809      	ldr	r0, [pc, #36]	@ (800d07c <lwip_netconn_err_to_msg+0x68>)
 800d058:	f011 f940 	bl	801e2dc <iprintf>
      return NULL;
 800d05c:	2300      	movs	r3, #0
  }
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3708      	adds	r7, #8
 800d062:	46bd      	mov	sp, r7
 800d064:	bd80      	pop	{r7, pc}
 800d066:	bf00      	nop
 800d068:	08025bf0 	.word	0x08025bf0
 800d06c:	08025bf1 	.word	0x08025bf1
 800d070:	08025bf2 	.word	0x08025bf2
 800d074:	080220a0 	.word	0x080220a0
 800d078:	080220d4 	.word	0x080220d4
 800d07c:	080220e4 	.word	0x080220e4

0800d080 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800d080:	b580      	push	{r7, lr}
 800d082:	b082      	sub	sp, #8
 800d084:	af00      	add	r7, sp, #0
 800d086:	6078      	str	r0, [r7, #4]
 800d088:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d105      	bne.n	800d09c <lwip_netconn_is_err_msg+0x1c>
 800d090:	4b12      	ldr	r3, [pc, #72]	@ (800d0dc <lwip_netconn_is_err_msg+0x5c>)
 800d092:	2285      	movs	r2, #133	@ 0x85
 800d094:	4912      	ldr	r1, [pc, #72]	@ (800d0e0 <lwip_netconn_is_err_msg+0x60>)
 800d096:	4813      	ldr	r0, [pc, #76]	@ (800d0e4 <lwip_netconn_is_err_msg+0x64>)
 800d098:	f011 f920 	bl	801e2dc <iprintf>

  if (msg == &netconn_aborted) {
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	4a12      	ldr	r2, [pc, #72]	@ (800d0e8 <lwip_netconn_is_err_msg+0x68>)
 800d0a0:	4293      	cmp	r3, r2
 800d0a2:	d104      	bne.n	800d0ae <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800d0a4:	683b      	ldr	r3, [r7, #0]
 800d0a6:	22f3      	movs	r2, #243	@ 0xf3
 800d0a8:	701a      	strb	r2, [r3, #0]
    return 1;
 800d0aa:	2301      	movs	r3, #1
 800d0ac:	e012      	b.n	800d0d4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	4a0e      	ldr	r2, [pc, #56]	@ (800d0ec <lwip_netconn_is_err_msg+0x6c>)
 800d0b2:	4293      	cmp	r3, r2
 800d0b4:	d104      	bne.n	800d0c0 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	22f2      	movs	r2, #242	@ 0xf2
 800d0ba:	701a      	strb	r2, [r3, #0]
    return 1;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e009      	b.n	800d0d4 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	4a0b      	ldr	r2, [pc, #44]	@ (800d0f0 <lwip_netconn_is_err_msg+0x70>)
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d104      	bne.n	800d0d2 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	22f1      	movs	r2, #241	@ 0xf1
 800d0cc:	701a      	strb	r2, [r3, #0]
    return 1;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	e000      	b.n	800d0d4 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800d0d2:	2300      	movs	r3, #0
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3708      	adds	r7, #8
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}
 800d0dc:	080220a0 	.word	0x080220a0
 800d0e0:	0802210c 	.word	0x0802210c
 800d0e4:	080220e4 	.word	0x080220e4
 800d0e8:	08025bf0 	.word	0x08025bf0
 800d0ec:	08025bf1 	.word	0x08025bf1
 800d0f0:	08025bf2 	.word	0x08025bf2

0800d0f4 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800d0f4:	b580      	push	{r7, lr}
 800d0f6:	b088      	sub	sp, #32
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	60f8      	str	r0, [r7, #12]
 800d0fc:	60b9      	str	r1, [r7, #8]
 800d0fe:	607a      	str	r2, [r7, #4]
 800d100:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d105      	bne.n	800d114 <recv_udp+0x20>
 800d108:	4b34      	ldr	r3, [pc, #208]	@ (800d1dc <recv_udp+0xe8>)
 800d10a:	22e5      	movs	r2, #229	@ 0xe5
 800d10c:	4934      	ldr	r1, [pc, #208]	@ (800d1e0 <recv_udp+0xec>)
 800d10e:	4835      	ldr	r0, [pc, #212]	@ (800d1e4 <recv_udp+0xf0>)
 800d110:	f011 f8e4 	bl	801e2dc <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d105      	bne.n	800d126 <recv_udp+0x32>
 800d11a:	4b30      	ldr	r3, [pc, #192]	@ (800d1dc <recv_udp+0xe8>)
 800d11c:	22e6      	movs	r2, #230	@ 0xe6
 800d11e:	4932      	ldr	r1, [pc, #200]	@ (800d1e8 <recv_udp+0xf4>)
 800d120:	4830      	ldr	r0, [pc, #192]	@ (800d1e4 <recv_udp+0xf0>)
 800d122:	f011 f8db 	bl	801e2dc <iprintf>
  conn = (struct netconn *)arg;
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d12a:	69fb      	ldr	r3, [r7, #28]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d103      	bne.n	800d138 <recv_udp+0x44>
    pbuf_free(p);
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f004 f851 	bl	80111d8 <pbuf_free>
    return;
 800d136:	e04d      	b.n	800d1d4 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	685b      	ldr	r3, [r3, #4]
 800d13c:	68ba      	ldr	r2, [r7, #8]
 800d13e:	429a      	cmp	r2, r3
 800d140:	d005      	beq.n	800d14e <recv_udp+0x5a>
 800d142:	4b26      	ldr	r3, [pc, #152]	@ (800d1dc <recv_udp+0xe8>)
 800d144:	22ee      	movs	r2, #238	@ 0xee
 800d146:	4929      	ldr	r1, [pc, #164]	@ (800d1ec <recv_udp+0xf8>)
 800d148:	4826      	ldr	r0, [pc, #152]	@ (800d1e4 <recv_udp+0xf0>)
 800d14a:	f011 f8c7 	bl	801e2dc <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d14e:	69fb      	ldr	r3, [r7, #28]
 800d150:	3310      	adds	r3, #16
 800d152:	4618      	mov	r0, r3
 800d154:	f00f fef2 	bl	801cf3c <sys_mbox_valid>
 800d158:	4603      	mov	r3, r0
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	d103      	bne.n	800d166 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f004 f83a 	bl	80111d8 <pbuf_free>
    return;
 800d164:	e036      	b.n	800d1d4 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d166:	2006      	movs	r0, #6
 800d168:	f003 f910 	bl	801038c <memp_malloc>
 800d16c:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800d16e:	69bb      	ldr	r3, [r7, #24]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d103      	bne.n	800d17c <recv_udp+0x88>
    pbuf_free(p);
 800d174:	6878      	ldr	r0, [r7, #4]
 800d176:	f004 f82f 	bl	80111d8 <pbuf_free>
    return;
 800d17a:	e02b      	b.n	800d1d4 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	687a      	ldr	r2, [r7, #4]
 800d180:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d182:	69bb      	ldr	r3, [r7, #24]
 800d184:	687a      	ldr	r2, [r7, #4]
 800d186:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d002      	beq.n	800d194 <recv_udp+0xa0>
 800d18e:	683b      	ldr	r3, [r7, #0]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	e000      	b.n	800d196 <recv_udp+0xa2>
 800d194:	2300      	movs	r3, #0
 800d196:	69ba      	ldr	r2, [r7, #24]
 800d198:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800d19e:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	891b      	ldrh	r3, [r3, #8]
 800d1a4:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800d1a6:	69fb      	ldr	r3, [r7, #28]
 800d1a8:	3310      	adds	r3, #16
 800d1aa:	69b9      	ldr	r1, [r7, #24]
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f00f fe63 	bl	801ce78 <sys_mbox_trypost>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d003      	beq.n	800d1c0 <recv_udp+0xcc>
    netbuf_delete(buf);
 800d1b8:	69b8      	ldr	r0, [r7, #24]
 800d1ba:	f001 fa89 	bl	800e6d0 <netbuf_delete>
    return;
 800d1be:	e009      	b.n	800d1d4 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d1c0:	69fb      	ldr	r3, [r7, #28]
 800d1c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d005      	beq.n	800d1d4 <recv_udp+0xe0>
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1cc:	8afa      	ldrh	r2, [r7, #22]
 800d1ce:	2100      	movs	r1, #0
 800d1d0:	69f8      	ldr	r0, [r7, #28]
 800d1d2:	4798      	blx	r3
  }
}
 800d1d4:	3720      	adds	r7, #32
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	080220a0 	.word	0x080220a0
 800d1e0:	08022118 	.word	0x08022118
 800d1e4:	080220e4 	.word	0x080220e4
 800d1e8:	0802213c 	.word	0x0802213c
 800d1ec:	0802215c 	.word	0x0802215c

0800d1f0 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b088      	sub	sp, #32
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
 800d1fc:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800d1fe:	68bb      	ldr	r3, [r7, #8]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d106      	bne.n	800d212 <recv_tcp+0x22>
 800d204:	4b36      	ldr	r3, [pc, #216]	@ (800d2e0 <recv_tcp+0xf0>)
 800d206:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800d20a:	4936      	ldr	r1, [pc, #216]	@ (800d2e4 <recv_tcp+0xf4>)
 800d20c:	4836      	ldr	r0, [pc, #216]	@ (800d2e8 <recv_tcp+0xf8>)
 800d20e:	f011 f865 	bl	801e2dc <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d106      	bne.n	800d226 <recv_tcp+0x36>
 800d218:	4b31      	ldr	r3, [pc, #196]	@ (800d2e0 <recv_tcp+0xf0>)
 800d21a:	f240 122d 	movw	r2, #301	@ 0x12d
 800d21e:	4933      	ldr	r1, [pc, #204]	@ (800d2ec <recv_tcp+0xfc>)
 800d220:	4831      	ldr	r0, [pc, #196]	@ (800d2e8 <recv_tcp+0xf8>)
 800d222:	f011 f85b 	bl	801e2dc <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800d226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d006      	beq.n	800d23c <recv_tcp+0x4c>
 800d22e:	4b2c      	ldr	r3, [pc, #176]	@ (800d2e0 <recv_tcp+0xf0>)
 800d230:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800d234:	492e      	ldr	r1, [pc, #184]	@ (800d2f0 <recv_tcp+0x100>)
 800d236:	482c      	ldr	r0, [pc, #176]	@ (800d2e8 <recv_tcp+0xf8>)
 800d238:	f011 f850 	bl	801e2dc <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800d240:	697b      	ldr	r3, [r7, #20]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d102      	bne.n	800d24c <recv_tcp+0x5c>
    return ERR_VAL;
 800d246:	f06f 0305 	mvn.w	r3, #5
 800d24a:	e045      	b.n	800d2d8 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800d24c:	697b      	ldr	r3, [r7, #20]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	68ba      	ldr	r2, [r7, #8]
 800d252:	429a      	cmp	r2, r3
 800d254:	d006      	beq.n	800d264 <recv_tcp+0x74>
 800d256:	4b22      	ldr	r3, [pc, #136]	@ (800d2e0 <recv_tcp+0xf0>)
 800d258:	f240 1235 	movw	r2, #309	@ 0x135
 800d25c:	4925      	ldr	r1, [pc, #148]	@ (800d2f4 <recv_tcp+0x104>)
 800d25e:	4822      	ldr	r0, [pc, #136]	@ (800d2e8 <recv_tcp+0xf8>)
 800d260:	f011 f83c 	bl	801e2dc <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d264:	697b      	ldr	r3, [r7, #20]
 800d266:	3310      	adds	r3, #16
 800d268:	4618      	mov	r0, r3
 800d26a:	f00f fe67 	bl	801cf3c <sys_mbox_valid>
 800d26e:	4603      	mov	r3, r0
 800d270:	2b00      	cmp	r3, #0
 800d272:	d10d      	bne.n	800d290 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d008      	beq.n	800d28c <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	891b      	ldrh	r3, [r3, #8]
 800d27e:	4619      	mov	r1, r3
 800d280:	68b8      	ldr	r0, [r7, #8]
 800d282:	f004 ff69 	bl	8012158 <tcp_recved>
      pbuf_free(p);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f003 ffa6 	bl	80111d8 <pbuf_free>
    }
    return ERR_OK;
 800d28c:	2300      	movs	r3, #0
 800d28e:	e023      	b.n	800d2d8 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d005      	beq.n	800d2a2 <recv_tcp+0xb2>
    msg = p;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	891b      	ldrh	r3, [r3, #8]
 800d29e:	83fb      	strh	r3, [r7, #30]
 800d2a0:	e003      	b.n	800d2aa <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800d2a2:	4b15      	ldr	r3, [pc, #84]	@ (800d2f8 <recv_tcp+0x108>)
 800d2a4:	61bb      	str	r3, [r7, #24]
    len = 0;
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800d2aa:	697b      	ldr	r3, [r7, #20]
 800d2ac:	3310      	adds	r3, #16
 800d2ae:	69b9      	ldr	r1, [r7, #24]
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	f00f fde1 	bl	801ce78 <sys_mbox_trypost>
 800d2b6:	4603      	mov	r3, r0
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d002      	beq.n	800d2c2 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800d2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d2c0:	e00a      	b.n	800d2d8 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d2c2:	697b      	ldr	r3, [r7, #20]
 800d2c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d005      	beq.n	800d2d6 <recv_tcp+0xe6>
 800d2ca:	697b      	ldr	r3, [r7, #20]
 800d2cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2ce:	8bfa      	ldrh	r2, [r7, #30]
 800d2d0:	2100      	movs	r1, #0
 800d2d2:	6978      	ldr	r0, [r7, #20]
 800d2d4:	4798      	blx	r3
  }

  return ERR_OK;
 800d2d6:	2300      	movs	r3, #0
}
 800d2d8:	4618      	mov	r0, r3
 800d2da:	3720      	adds	r7, #32
 800d2dc:	46bd      	mov	sp, r7
 800d2de:	bd80      	pop	{r7, pc}
 800d2e0:	080220a0 	.word	0x080220a0
 800d2e4:	0802217c 	.word	0x0802217c
 800d2e8:	080220e4 	.word	0x080220e4
 800d2ec:	080221a0 	.word	0x080221a0
 800d2f0:	080221c0 	.word	0x080221c0
 800d2f4:	080221d8 	.word	0x080221d8
 800d2f8:	08025bf2 	.word	0x08025bf2

0800d2fc <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
 800d304:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d106      	bne.n	800d31e <poll_tcp+0x22>
 800d310:	4b29      	ldr	r3, [pc, #164]	@ (800d3b8 <poll_tcp+0xbc>)
 800d312:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800d316:	4929      	ldr	r1, [pc, #164]	@ (800d3bc <poll_tcp+0xc0>)
 800d318:	4829      	ldr	r0, [pc, #164]	@ (800d3c0 <poll_tcp+0xc4>)
 800d31a:	f010 ffdf 	bl	801e2dc <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	785b      	ldrb	r3, [r3, #1]
 800d322:	2b01      	cmp	r3, #1
 800d324:	d104      	bne.n	800d330 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d326:	2101      	movs	r1, #1
 800d328:	68f8      	ldr	r0, [r7, #12]
 800d32a:	f000 ff5b 	bl	800e1e4 <lwip_netconn_do_writemore>
 800d32e:	e016      	b.n	800d35e <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	785b      	ldrb	r3, [r3, #1]
 800d334:	2b04      	cmp	r3, #4
 800d336:	d112      	bne.n	800d35e <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	6a1b      	ldr	r3, [r3, #32]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d00a      	beq.n	800d356 <poll_tcp+0x5a>
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	6a1b      	ldr	r3, [r3, #32]
 800d344:	7a5b      	ldrb	r3, [r3, #9]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d005      	beq.n	800d356 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	6a1b      	ldr	r3, [r3, #32]
 800d34e:	7a5a      	ldrb	r2, [r3, #9]
 800d350:	3a01      	subs	r2, #1
 800d352:	b2d2      	uxtb	r2, r2
 800d354:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d356:	2101      	movs	r1, #1
 800d358:	68f8      	ldr	r0, [r7, #12]
 800d35a:	f000 fb3b 	bl	800d9d4 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	7f1b      	ldrb	r3, [r3, #28]
 800d362:	f003 0310 	and.w	r3, r3, #16
 800d366:	2b00      	cmp	r3, #0
 800d368:	d021      	beq.n	800d3ae <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	685b      	ldr	r3, [r3, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d01d      	beq.n	800d3ae <poll_tcp+0xb2>
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	685b      	ldr	r3, [r3, #4]
 800d376:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d37a:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800d37e:	d316      	bcc.n	800d3ae <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d388:	2b04      	cmp	r3, #4
 800d38a:	d810      	bhi.n	800d3ae <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	7f1b      	ldrb	r3, [r3, #28]
 800d390:	f023 0310 	bic.w	r3, r3, #16
 800d394:	b2da      	uxtb	r2, r3
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d005      	beq.n	800d3ae <poll_tcp+0xb2>
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	2102      	movs	r1, #2
 800d3aa:	68f8      	ldr	r0, [r7, #12]
 800d3ac:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d3ae:	2300      	movs	r3, #0
}
 800d3b0:	4618      	mov	r0, r3
 800d3b2:	3710      	adds	r7, #16
 800d3b4:	46bd      	mov	sp, r7
 800d3b6:	bd80      	pop	{r7, pc}
 800d3b8:	080220a0 	.word	0x080220a0
 800d3bc:	080221f8 	.word	0x080221f8
 800d3c0:	080220e4 	.word	0x080220e4

0800d3c4 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800d3c4:	b580      	push	{r7, lr}
 800d3c6:	b086      	sub	sp, #24
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	60f8      	str	r0, [r7, #12]
 800d3cc:	60b9      	str	r1, [r7, #8]
 800d3ce:	4613      	mov	r3, r2
 800d3d0:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800d3d2:	68fb      	ldr	r3, [r7, #12]
 800d3d4:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	2b00      	cmp	r3, #0
 800d3da:	d106      	bne.n	800d3ea <sent_tcp+0x26>
 800d3dc:	4b20      	ldr	r3, [pc, #128]	@ (800d460 <sent_tcp+0x9c>)
 800d3de:	f240 1293 	movw	r2, #403	@ 0x193
 800d3e2:	4920      	ldr	r1, [pc, #128]	@ (800d464 <sent_tcp+0xa0>)
 800d3e4:	4820      	ldr	r0, [pc, #128]	@ (800d468 <sent_tcp+0xa4>)
 800d3e6:	f010 ff79 	bl	801e2dc <iprintf>

  if (conn) {
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d032      	beq.n	800d456 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800d3f0:	697b      	ldr	r3, [r7, #20]
 800d3f2:	785b      	ldrb	r3, [r3, #1]
 800d3f4:	2b01      	cmp	r3, #1
 800d3f6:	d104      	bne.n	800d402 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800d3f8:	2101      	movs	r1, #1
 800d3fa:	6978      	ldr	r0, [r7, #20]
 800d3fc:	f000 fef2 	bl	800e1e4 <lwip_netconn_do_writemore>
 800d400:	e007      	b.n	800d412 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	785b      	ldrb	r3, [r3, #1]
 800d406:	2b04      	cmp	r3, #4
 800d408:	d103      	bne.n	800d412 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800d40a:	2101      	movs	r1, #1
 800d40c:	6978      	ldr	r0, [r7, #20]
 800d40e:	f000 fae1 	bl	800d9d4 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	685b      	ldr	r3, [r3, #4]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d01d      	beq.n	800d456 <sent_tcp+0x92>
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	685b      	ldr	r3, [r3, #4]
 800d41e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d422:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800d426:	d316      	bcc.n	800d456 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800d430:	2b04      	cmp	r3, #4
 800d432:	d810      	bhi.n	800d456 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800d434:	697b      	ldr	r3, [r7, #20]
 800d436:	7f1b      	ldrb	r3, [r3, #28]
 800d438:	f023 0310 	bic.w	r3, r3, #16
 800d43c:	b2da      	uxtb	r2, r3
 800d43e:	697b      	ldr	r3, [r7, #20]
 800d440:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800d442:	697b      	ldr	r3, [r7, #20]
 800d444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d446:	2b00      	cmp	r3, #0
 800d448:	d005      	beq.n	800d456 <sent_tcp+0x92>
 800d44a:	697b      	ldr	r3, [r7, #20]
 800d44c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d44e:	88fa      	ldrh	r2, [r7, #6]
 800d450:	2102      	movs	r1, #2
 800d452:	6978      	ldr	r0, [r7, #20]
 800d454:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800d456:	2300      	movs	r3, #0
}
 800d458:	4618      	mov	r0, r3
 800d45a:	3718      	adds	r7, #24
 800d45c:	46bd      	mov	sp, r7
 800d45e:	bd80      	pop	{r7, pc}
 800d460:	080220a0 	.word	0x080220a0
 800d464:	080221f8 	.word	0x080221f8
 800d468:	080220e4 	.word	0x080220e4

0800d46c <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b088      	sub	sp, #32
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	460b      	mov	r3, r1
 800d476:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800d47c:	69fb      	ldr	r3, [r7, #28]
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d106      	bne.n	800d490 <err_tcp+0x24>
 800d482:	4b5f      	ldr	r3, [pc, #380]	@ (800d600 <err_tcp+0x194>)
 800d484:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800d488:	495e      	ldr	r1, [pc, #376]	@ (800d604 <err_tcp+0x198>)
 800d48a:	485f      	ldr	r0, [pc, #380]	@ (800d608 <err_tcp+0x19c>)
 800d48c:	f010 ff26 	bl	801e2dc <iprintf>

  SYS_ARCH_PROTECT(lev);
 800d490:	f00f fe5e 	bl	801d150 <sys_arch_protect>
 800d494:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800d496:	69fb      	ldr	r3, [r7, #28]
 800d498:	2200      	movs	r2, #0
 800d49a:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	78fa      	ldrb	r2, [r7, #3]
 800d4a0:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800d4a2:	69fb      	ldr	r3, [r7, #28]
 800d4a4:	7f1b      	ldrb	r3, [r3, #28]
 800d4a6:	f043 0301 	orr.w	r3, r3, #1
 800d4aa:	b2da      	uxtb	r2, r3
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800d4b0:	69fb      	ldr	r3, [r7, #28]
 800d4b2:	785b      	ldrb	r3, [r3, #1]
 800d4b4:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800d4b6:	69fb      	ldr	r3, [r7, #28]
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800d4bc:	69b8      	ldr	r0, [r7, #24]
 800d4be:	f00f fe55 	bl	801d16c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800d4c2:	69fb      	ldr	r3, [r7, #28]
 800d4c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d005      	beq.n	800d4d6 <err_tcp+0x6a>
 800d4ca:	69fb      	ldr	r3, [r7, #28]
 800d4cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	2104      	movs	r1, #4
 800d4d2:	69f8      	ldr	r0, [r7, #28]
 800d4d4:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800d4d6:	69fb      	ldr	r3, [r7, #28]
 800d4d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d005      	beq.n	800d4ea <err_tcp+0x7e>
 800d4de:	69fb      	ldr	r3, [r7, #28]
 800d4e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4e2:	2200      	movs	r2, #0
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	69f8      	ldr	r0, [r7, #28]
 800d4e8:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d4ea:	69fb      	ldr	r3, [r7, #28]
 800d4ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d005      	beq.n	800d4fe <err_tcp+0x92>
 800d4f2:	69fb      	ldr	r3, [r7, #28]
 800d4f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	2102      	movs	r1, #2
 800d4fa:	69f8      	ldr	r0, [r7, #28]
 800d4fc:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800d4fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d502:	4618      	mov	r0, r3
 800d504:	f7ff fd86 	bl	800d014 <lwip_netconn_err_to_msg>
 800d508:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d50a:	69fb      	ldr	r3, [r7, #28]
 800d50c:	3310      	adds	r3, #16
 800d50e:	4618      	mov	r0, r3
 800d510:	f00f fd14 	bl	801cf3c <sys_mbox_valid>
 800d514:	4603      	mov	r3, r0
 800d516:	2b00      	cmp	r3, #0
 800d518:	d005      	beq.n	800d526 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800d51a:	69fb      	ldr	r3, [r7, #28]
 800d51c:	3310      	adds	r3, #16
 800d51e:	6939      	ldr	r1, [r7, #16]
 800d520:	4618      	mov	r0, r3
 800d522:	f00f fca9 	bl	801ce78 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800d526:	69fb      	ldr	r3, [r7, #28]
 800d528:	3314      	adds	r3, #20
 800d52a:	4618      	mov	r0, r3
 800d52c:	f00f fd06 	bl	801cf3c <sys_mbox_valid>
 800d530:	4603      	mov	r3, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d005      	beq.n	800d542 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800d536:	69fb      	ldr	r3, [r7, #28]
 800d538:	3314      	adds	r3, #20
 800d53a:	6939      	ldr	r1, [r7, #16]
 800d53c:	4618      	mov	r0, r3
 800d53e:	f00f fc9b 	bl	801ce78 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800d542:	7dfb      	ldrb	r3, [r7, #23]
 800d544:	2b01      	cmp	r3, #1
 800d546:	d005      	beq.n	800d554 <err_tcp+0xe8>
 800d548:	7dfb      	ldrb	r3, [r7, #23]
 800d54a:	2b04      	cmp	r3, #4
 800d54c:	d002      	beq.n	800d554 <err_tcp+0xe8>
 800d54e:	7dfb      	ldrb	r3, [r7, #23]
 800d550:	2b03      	cmp	r3, #3
 800d552:	d143      	bne.n	800d5dc <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800d554:	69fb      	ldr	r3, [r7, #28]
 800d556:	7f1b      	ldrb	r3, [r3, #28]
 800d558:	f003 0304 	and.w	r3, r3, #4
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	bf14      	ite	ne
 800d560:	2301      	movne	r3, #1
 800d562:	2300      	moveq	r3, #0
 800d564:	b2db      	uxtb	r3, r3
 800d566:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800d568:	69fb      	ldr	r3, [r7, #28]
 800d56a:	7f1b      	ldrb	r3, [r3, #28]
 800d56c:	f023 0304 	bic.w	r3, r3, #4
 800d570:	b2da      	uxtb	r2, r3
 800d572:	69fb      	ldr	r3, [r7, #28]
 800d574:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	2b00      	cmp	r3, #0
 800d57a:	d13b      	bne.n	800d5f4 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d57c:	69fb      	ldr	r3, [r7, #28]
 800d57e:	6a1b      	ldr	r3, [r3, #32]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d106      	bne.n	800d592 <err_tcp+0x126>
 800d584:	4b1e      	ldr	r3, [pc, #120]	@ (800d600 <err_tcp+0x194>)
 800d586:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800d58a:	4920      	ldr	r1, [pc, #128]	@ (800d60c <err_tcp+0x1a0>)
 800d58c:	481e      	ldr	r0, [pc, #120]	@ (800d608 <err_tcp+0x19c>)
 800d58e:	f010 fea5 	bl	801e2dc <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800d592:	7dfb      	ldrb	r3, [r7, #23]
 800d594:	2b04      	cmp	r3, #4
 800d596:	d104      	bne.n	800d5a2 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800d598:	69fb      	ldr	r3, [r7, #28]
 800d59a:	6a1b      	ldr	r3, [r3, #32]
 800d59c:	2200      	movs	r2, #0
 800d59e:	711a      	strb	r2, [r3, #4]
 800d5a0:	e003      	b.n	800d5aa <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800d5a2:	69fb      	ldr	r3, [r7, #28]
 800d5a4:	6a1b      	ldr	r3, [r3, #32]
 800d5a6:	78fa      	ldrb	r2, [r7, #3]
 800d5a8:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d5aa:	69fb      	ldr	r3, [r7, #28]
 800d5ac:	6a1b      	ldr	r3, [r3, #32]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	330c      	adds	r3, #12
 800d5b2:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800d5b4:	68b8      	ldr	r0, [r7, #8]
 800d5b6:	f00f fd4f 	bl	801d058 <sys_sem_valid>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d106      	bne.n	800d5ce <err_tcp+0x162>
 800d5c0:	4b0f      	ldr	r3, [pc, #60]	@ (800d600 <err_tcp+0x194>)
 800d5c2:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800d5c6:	4912      	ldr	r1, [pc, #72]	@ (800d610 <err_tcp+0x1a4>)
 800d5c8:	480f      	ldr	r0, [pc, #60]	@ (800d608 <err_tcp+0x19c>)
 800d5ca:	f010 fe87 	bl	801e2dc <iprintf>
      conn->current_msg = NULL;
 800d5ce:	69fb      	ldr	r3, [r7, #28]
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800d5d4:	68b8      	ldr	r0, [r7, #8]
 800d5d6:	f00f fd25 	bl	801d024 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800d5da:	e00b      	b.n	800d5f4 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800d5dc:	69fb      	ldr	r3, [r7, #28]
 800d5de:	6a1b      	ldr	r3, [r3, #32]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d008      	beq.n	800d5f6 <err_tcp+0x18a>
 800d5e4:	4b06      	ldr	r3, [pc, #24]	@ (800d600 <err_tcp+0x194>)
 800d5e6:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800d5ea:	490a      	ldr	r1, [pc, #40]	@ (800d614 <err_tcp+0x1a8>)
 800d5ec:	4806      	ldr	r0, [pc, #24]	@ (800d608 <err_tcp+0x19c>)
 800d5ee:	f010 fe75 	bl	801e2dc <iprintf>
  }
}
 800d5f2:	e000      	b.n	800d5f6 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800d5f4:	bf00      	nop
}
 800d5f6:	bf00      	nop
 800d5f8:	3720      	adds	r7, #32
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd80      	pop	{r7, pc}
 800d5fe:	bf00      	nop
 800d600:	080220a0 	.word	0x080220a0
 800d604:	080221f8 	.word	0x080221f8
 800d608:	080220e4 	.word	0x080220e4
 800d60c:	08022208 	.word	0x08022208
 800d610:	08022224 	.word	0x08022224
 800d614:	08022240 	.word	0x08022240

0800d618 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800d618:	b580      	push	{r7, lr}
 800d61a:	b084      	sub	sp, #16
 800d61c:	af00      	add	r7, sp, #0
 800d61e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	685b      	ldr	r3, [r3, #4]
 800d624:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800d626:	6879      	ldr	r1, [r7, #4]
 800d628:	68f8      	ldr	r0, [r7, #12]
 800d62a:	f005 fd75 	bl	8013118 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800d62e:	490a      	ldr	r1, [pc, #40]	@ (800d658 <setup_tcp+0x40>)
 800d630:	68f8      	ldr	r0, [r7, #12]
 800d632:	f005 fd83 	bl	801313c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800d636:	4909      	ldr	r1, [pc, #36]	@ (800d65c <setup_tcp+0x44>)
 800d638:	68f8      	ldr	r0, [r7, #12]
 800d63a:	f005 fda1 	bl	8013180 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800d63e:	2202      	movs	r2, #2
 800d640:	4907      	ldr	r1, [pc, #28]	@ (800d660 <setup_tcp+0x48>)
 800d642:	68f8      	ldr	r0, [r7, #12]
 800d644:	f005 fdf8 	bl	8013238 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800d648:	4906      	ldr	r1, [pc, #24]	@ (800d664 <setup_tcp+0x4c>)
 800d64a:	68f8      	ldr	r0, [r7, #12]
 800d64c:	f005 fdba 	bl	80131c4 <tcp_err>
}
 800d650:	bf00      	nop
 800d652:	3710      	adds	r7, #16
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}
 800d658:	0800d1f1 	.word	0x0800d1f1
 800d65c:	0800d3c5 	.word	0x0800d3c5
 800d660:	0800d2fd 	.word	0x0800d2fd
 800d664:	0800d46d 	.word	0x0800d46d

0800d668 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800d668:	b590      	push	{r4, r7, lr}
 800d66a:	b085      	sub	sp, #20
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800d670:	2300      	movs	r3, #0
 800d672:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	681b      	ldr	r3, [r3, #0]
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d006      	beq.n	800d68c <pcb_new+0x24>
 800d67e:	4b2b      	ldr	r3, [pc, #172]	@ (800d72c <pcb_new+0xc4>)
 800d680:	f240 2265 	movw	r2, #613	@ 0x265
 800d684:	492a      	ldr	r1, [pc, #168]	@ (800d730 <pcb_new+0xc8>)
 800d686:	482b      	ldr	r0, [pc, #172]	@ (800d734 <pcb_new+0xcc>)
 800d688:	f010 fe28 	bl	801e2dc <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d696:	2b10      	cmp	r3, #16
 800d698:	d022      	beq.n	800d6e0 <pcb_new+0x78>
 800d69a:	2b20      	cmp	r3, #32
 800d69c:	d133      	bne.n	800d706 <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681c      	ldr	r4, [r3, #0]
 800d6a2:	7bfb      	ldrb	r3, [r7, #15]
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f00b f890 	bl	80187ca <udp_new_ip_type>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d02a      	beq.n	800d70e <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	2b22      	cmp	r3, #34	@ 0x22
 800d6c0:	d104      	bne.n	800d6cc <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	2201      	movs	r2, #1
 800d6ca:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	6858      	ldr	r0, [r3, #4]
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	681b      	ldr	r3, [r3, #0]
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	4917      	ldr	r1, [pc, #92]	@ (800d738 <pcb_new+0xd0>)
 800d6da:	f00a fffd 	bl	80186d8 <udp_recv>
      }
      break;
 800d6de:	e016      	b.n	800d70e <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	681c      	ldr	r4, [r3, #0]
 800d6e4:	7bfb      	ldrb	r3, [r7, #15]
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	f005 fd08 	bl	80130fc <tcp_new_ip_type>
 800d6ec:	4603      	mov	r3, r0
 800d6ee:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	685b      	ldr	r3, [r3, #4]
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	d00b      	beq.n	800d712 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	681b      	ldr	r3, [r3, #0]
 800d6fe:	4618      	mov	r0, r3
 800d700:	f7ff ff8a 	bl	800d618 <setup_tcp>
      }
      break;
 800d704:	e005      	b.n	800d712 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	22fa      	movs	r2, #250	@ 0xfa
 800d70a:	711a      	strb	r2, [r3, #4]
      return;
 800d70c:	e00a      	b.n	800d724 <pcb_new+0xbc>
      break;
 800d70e:	bf00      	nop
 800d710:	e000      	b.n	800d714 <pcb_new+0xac>
      break;
 800d712:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d102      	bne.n	800d724 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	22ff      	movs	r2, #255	@ 0xff
 800d722:	711a      	strb	r2, [r3, #4]
  }
}
 800d724:	3714      	adds	r7, #20
 800d726:	46bd      	mov	sp, r7
 800d728:	bd90      	pop	{r4, r7, pc}
 800d72a:	bf00      	nop
 800d72c:	080220a0 	.word	0x080220a0
 800d730:	08022284 	.word	0x08022284
 800d734:	080220e4 	.word	0x080220e4
 800d738:	0800d0f5 	.word	0x0800d0f5

0800d73c <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b084      	sub	sp, #16
 800d740:	af00      	add	r7, sp, #0
 800d742:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	2200      	movs	r2, #0
 800d74c:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800d74e:	68fb      	ldr	r3, [r7, #12]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	685b      	ldr	r3, [r3, #4]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d102      	bne.n	800d75e <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800d758:	68f8      	ldr	r0, [r7, #12]
 800d75a:	f7ff ff85 	bl	800d668 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800d75e:	bf00      	nop
 800d760:	3710      	adds	r7, #16
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}
	...

0800d768 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b086      	sub	sp, #24
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	4603      	mov	r3, r0
 800d770:	6039      	str	r1, [r7, #0]
 800d772:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800d774:	2300      	movs	r3, #0
 800d776:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800d778:	2007      	movs	r0, #7
 800d77a:	f002 fe07 	bl	801038c <memp_malloc>
 800d77e:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d101      	bne.n	800d78a <netconn_alloc+0x22>
    return NULL;
 800d786:	2300      	movs	r3, #0
 800d788:	e052      	b.n	800d830 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	2200      	movs	r2, #0
 800d78e:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	79fa      	ldrb	r2, [r7, #7]
 800d794:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	2200      	movs	r2, #0
 800d79a:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800d79c:	79fb      	ldrb	r3, [r7, #7]
 800d79e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d7a2:	2b10      	cmp	r3, #16
 800d7a4:	d004      	beq.n	800d7b0 <netconn_alloc+0x48>
 800d7a6:	2b20      	cmp	r3, #32
 800d7a8:	d105      	bne.n	800d7b6 <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800d7aa:	2306      	movs	r3, #6
 800d7ac:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800d7ae:	e00a      	b.n	800d7c6 <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800d7b0:	2306      	movs	r3, #6
 800d7b2:	617b      	str	r3, [r7, #20]
      break;
 800d7b4:	e007      	b.n	800d7c6 <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800d7b6:	4b20      	ldr	r3, [pc, #128]	@ (800d838 <netconn_alloc+0xd0>)
 800d7b8:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800d7bc:	491f      	ldr	r1, [pc, #124]	@ (800d83c <netconn_alloc+0xd4>)
 800d7be:	4820      	ldr	r0, [pc, #128]	@ (800d840 <netconn_alloc+0xd8>)
 800d7c0:	f010 fd8c 	bl	801e2dc <iprintf>
      goto free_and_return;
 800d7c4:	e02f      	b.n	800d826 <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	3310      	adds	r3, #16
 800d7ca:	6979      	ldr	r1, [r7, #20]
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f00f fb27 	bl	801ce20 <sys_mbox_new>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d125      	bne.n	800d824 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	330c      	adds	r3, #12
 800d7dc:	2100      	movs	r1, #0
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f00f fbca 	bl	801cf78 <sys_sem_new>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d005      	beq.n	800d7f6 <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	3310      	adds	r3, #16
 800d7ee:	4618      	mov	r0, r3
 800d7f0:	f00f fb30 	bl	801ce54 <sys_mbox_free>
    goto free_and_return;
 800d7f4:	e017      	b.n	800d826 <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	3314      	adds	r3, #20
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f00f fbaf 	bl	801cf5e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	2200      	movs	r2, #0
 800d804:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	f04f 32ff 	mov.w	r2, #4294967295
 800d80c:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	683a      	ldr	r2, [r7, #0]
 800d812:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2200      	movs	r2, #0
 800d818:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	7cfa      	ldrb	r2, [r7, #19]
 800d81e:	771a      	strb	r2, [r3, #28]
  return conn;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	e005      	b.n	800d830 <netconn_alloc+0xc8>
    goto free_and_return;
 800d824:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800d826:	68f9      	ldr	r1, [r7, #12]
 800d828:	2007      	movs	r0, #7
 800d82a:	f002 fe25 	bl	8010478 <memp_free>
  return NULL;
 800d82e:	2300      	movs	r3, #0
}
 800d830:	4618      	mov	r0, r3
 800d832:	3718      	adds	r7, #24
 800d834:	46bd      	mov	sp, r7
 800d836:	bd80      	pop	{r7, pc}
 800d838:	080220a0 	.word	0x080220a0
 800d83c:	080222a4 	.word	0x080222a4
 800d840:	080220e4 	.word	0x080220e4

0800d844 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	685b      	ldr	r3, [r3, #4]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d006      	beq.n	800d862 <netconn_free+0x1e>
 800d854:	4b1b      	ldr	r3, [pc, #108]	@ (800d8c4 <netconn_free+0x80>)
 800d856:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800d85a:	491b      	ldr	r1, [pc, #108]	@ (800d8c8 <netconn_free+0x84>)
 800d85c:	481b      	ldr	r0, [pc, #108]	@ (800d8cc <netconn_free+0x88>)
 800d85e:	f010 fd3d 	bl	801e2dc <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	3310      	adds	r3, #16
 800d866:	4618      	mov	r0, r3
 800d868:	f00f fb68 	bl	801cf3c <sys_mbox_valid>
 800d86c:	4603      	mov	r3, r0
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d006      	beq.n	800d880 <netconn_free+0x3c>
 800d872:	4b14      	ldr	r3, [pc, #80]	@ (800d8c4 <netconn_free+0x80>)
 800d874:	f240 3223 	movw	r2, #803	@ 0x323
 800d878:	4915      	ldr	r1, [pc, #84]	@ (800d8d0 <netconn_free+0x8c>)
 800d87a:	4814      	ldr	r0, [pc, #80]	@ (800d8cc <netconn_free+0x88>)
 800d87c:	f010 fd2e 	bl	801e2dc <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	3314      	adds	r3, #20
 800d884:	4618      	mov	r0, r3
 800d886:	f00f fb59 	bl	801cf3c <sys_mbox_valid>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d006      	beq.n	800d89e <netconn_free+0x5a>
 800d890:	4b0c      	ldr	r3, [pc, #48]	@ (800d8c4 <netconn_free+0x80>)
 800d892:	f240 3226 	movw	r2, #806	@ 0x326
 800d896:	490f      	ldr	r1, [pc, #60]	@ (800d8d4 <netconn_free+0x90>)
 800d898:	480c      	ldr	r0, [pc, #48]	@ (800d8cc <netconn_free+0x88>)
 800d89a:	f010 fd1f 	bl	801e2dc <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	330c      	adds	r3, #12
 800d8a2:	4618      	mov	r0, r3
 800d8a4:	f00f fbcb 	bl	801d03e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	330c      	adds	r3, #12
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f00f fbe4 	bl	801d07a <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800d8b2:	6879      	ldr	r1, [r7, #4]
 800d8b4:	2007      	movs	r0, #7
 800d8b6:	f002 fddf 	bl	8010478 <memp_free>
}
 800d8ba:	bf00      	nop
 800d8bc:	3708      	adds	r7, #8
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	bd80      	pop	{r7, pc}
 800d8c2:	bf00      	nop
 800d8c4:	080220a0 	.word	0x080220a0
 800d8c8:	080222cc 	.word	0x080222cc
 800d8cc:	080220e4 	.word	0x080220e4
 800d8d0:	080222fc 	.word	0x080222fc
 800d8d4:	08022338 	.word	0x08022338

0800d8d8 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b086      	sub	sp, #24
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	3310      	adds	r3, #16
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	f00f fb29 	bl	801cf3c <sys_mbox_valid>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d02f      	beq.n	800d950 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d8f0:	e018      	b.n	800d924 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	781b      	ldrb	r3, [r3, #0]
 800d8f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d8fa:	2b10      	cmp	r3, #16
 800d8fc:	d10e      	bne.n	800d91c <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	f107 020f 	add.w	r2, r7, #15
 800d904:	4611      	mov	r1, r2
 800d906:	4618      	mov	r0, r3
 800d908:	f7ff fbba 	bl	800d080 <lwip_netconn_is_err_msg>
 800d90c:	4603      	mov	r3, r0
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d108      	bne.n	800d924 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	4618      	mov	r0, r3
 800d916:	f003 fc5f 	bl	80111d8 <pbuf_free>
 800d91a:	e003      	b.n	800d924 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800d91c:	693b      	ldr	r3, [r7, #16]
 800d91e:	4618      	mov	r0, r3
 800d920:	f000 fed6 	bl	800e6d0 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	3310      	adds	r3, #16
 800d928:	f107 0210 	add.w	r2, r7, #16
 800d92c:	4611      	mov	r1, r2
 800d92e:	4618      	mov	r0, r3
 800d930:	f00f faed 	bl	801cf0e <sys_arch_mbox_tryfetch>
 800d934:	4603      	mov	r3, r0
 800d936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d93a:	d1da      	bne.n	800d8f2 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	3310      	adds	r3, #16
 800d940:	4618      	mov	r0, r3
 800d942:	f00f fa87 	bl	801ce54 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	3310      	adds	r3, #16
 800d94a:	4618      	mov	r0, r3
 800d94c:	f00f fb07 	bl	801cf5e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	3314      	adds	r3, #20
 800d954:	4618      	mov	r0, r3
 800d956:	f00f faf1 	bl	801cf3c <sys_mbox_valid>
 800d95a:	4603      	mov	r3, r0
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d034      	beq.n	800d9ca <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d960:	e01d      	b.n	800d99e <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800d962:	693b      	ldr	r3, [r7, #16]
 800d964:	f107 020e 	add.w	r2, r7, #14
 800d968:	4611      	mov	r1, r2
 800d96a:	4618      	mov	r0, r3
 800d96c:	f7ff fb88 	bl	800d080 <lwip_netconn_is_err_msg>
 800d970:	4603      	mov	r3, r0
 800d972:	2b00      	cmp	r3, #0
 800d974:	d113      	bne.n	800d99e <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800d97a:	6978      	ldr	r0, [r7, #20]
 800d97c:	f7ff ffac 	bl	800d8d8 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800d980:	697b      	ldr	r3, [r7, #20]
 800d982:	685b      	ldr	r3, [r3, #4]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d007      	beq.n	800d998 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	4618      	mov	r0, r3
 800d98e:	f004 fb7d 	bl	801208c <tcp_abort>
            newconn->pcb.tcp = NULL;
 800d992:	697b      	ldr	r3, [r7, #20]
 800d994:	2200      	movs	r2, #0
 800d996:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800d998:	6978      	ldr	r0, [r7, #20]
 800d99a:	f7ff ff53 	bl	800d844 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	3314      	adds	r3, #20
 800d9a2:	f107 0210 	add.w	r2, r7, #16
 800d9a6:	4611      	mov	r1, r2
 800d9a8:	4618      	mov	r0, r3
 800d9aa:	f00f fab0 	bl	801cf0e <sys_arch_mbox_tryfetch>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9b4:	d1d5      	bne.n	800d962 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	3314      	adds	r3, #20
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	f00f fa4a 	bl	801ce54 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	3314      	adds	r3, #20
 800d9c4:	4618      	mov	r0, r3
 800d9c6:	f00f faca 	bl	801cf5e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800d9ca:	bf00      	nop
 800d9cc:	3718      	adds	r7, #24
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bd80      	pop	{r7, pc}
	...

0800d9d4 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b086      	sub	sp, #24
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
 800d9dc:	460b      	mov	r3, r1
 800d9de:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800d9e0:	2300      	movs	r3, #0
 800d9e2:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d106      	bne.n	800d9f8 <lwip_netconn_do_close_internal+0x24>
 800d9ea:	4b87      	ldr	r3, [pc, #540]	@ (800dc08 <lwip_netconn_do_close_internal+0x234>)
 800d9ec:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800d9f0:	4986      	ldr	r1, [pc, #536]	@ (800dc0c <lwip_netconn_do_close_internal+0x238>)
 800d9f2:	4887      	ldr	r0, [pc, #540]	@ (800dc10 <lwip_netconn_do_close_internal+0x23c>)
 800d9f4:	f010 fc72 	bl	801e2dc <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	781b      	ldrb	r3, [r3, #0]
 800d9fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800da00:	2b10      	cmp	r3, #16
 800da02:	d006      	beq.n	800da12 <lwip_netconn_do_close_internal+0x3e>
 800da04:	4b80      	ldr	r3, [pc, #512]	@ (800dc08 <lwip_netconn_do_close_internal+0x234>)
 800da06:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800da0a:	4982      	ldr	r1, [pc, #520]	@ (800dc14 <lwip_netconn_do_close_internal+0x240>)
 800da0c:	4880      	ldr	r0, [pc, #512]	@ (800dc10 <lwip_netconn_do_close_internal+0x23c>)
 800da0e:	f010 fc65 	bl	801e2dc <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	785b      	ldrb	r3, [r3, #1]
 800da16:	2b04      	cmp	r3, #4
 800da18:	d006      	beq.n	800da28 <lwip_netconn_do_close_internal+0x54>
 800da1a:	4b7b      	ldr	r3, [pc, #492]	@ (800dc08 <lwip_netconn_do_close_internal+0x234>)
 800da1c:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800da20:	497d      	ldr	r1, [pc, #500]	@ (800dc18 <lwip_netconn_do_close_internal+0x244>)
 800da22:	487b      	ldr	r0, [pc, #492]	@ (800dc10 <lwip_netconn_do_close_internal+0x23c>)
 800da24:	f010 fc5a 	bl	801e2dc <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d106      	bne.n	800da3e <lwip_netconn_do_close_internal+0x6a>
 800da30:	4b75      	ldr	r3, [pc, #468]	@ (800dc08 <lwip_netconn_do_close_internal+0x234>)
 800da32:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800da36:	4979      	ldr	r1, [pc, #484]	@ (800dc1c <lwip_netconn_do_close_internal+0x248>)
 800da38:	4875      	ldr	r0, [pc, #468]	@ (800dc10 <lwip_netconn_do_close_internal+0x23c>)
 800da3a:	f010 fc4f 	bl	801e2dc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	6a1b      	ldr	r3, [r3, #32]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d106      	bne.n	800da54 <lwip_netconn_do_close_internal+0x80>
 800da46:	4b70      	ldr	r3, [pc, #448]	@ (800dc08 <lwip_netconn_do_close_internal+0x234>)
 800da48:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800da4c:	4974      	ldr	r1, [pc, #464]	@ (800dc20 <lwip_netconn_do_close_internal+0x24c>)
 800da4e:	4870      	ldr	r0, [pc, #448]	@ (800dc10 <lwip_netconn_do_close_internal+0x23c>)
 800da50:	f010 fc44 	bl	801e2dc <iprintf>

  tpcb = conn->pcb.tcp;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	685b      	ldr	r3, [r3, #4]
 800da58:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	6a1b      	ldr	r3, [r3, #32]
 800da5e:	7a1b      	ldrb	r3, [r3, #8]
 800da60:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800da62:	7bfb      	ldrb	r3, [r7, #15]
 800da64:	f003 0301 	and.w	r3, r3, #1
 800da68:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800da6a:	7bfb      	ldrb	r3, [r7, #15]
 800da6c:	f003 0302 	and.w	r3, r3, #2
 800da70:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800da72:	7bfb      	ldrb	r3, [r7, #15]
 800da74:	2b03      	cmp	r3, #3
 800da76:	d102      	bne.n	800da7e <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800da78:	2301      	movs	r3, #1
 800da7a:	75bb      	strb	r3, [r7, #22]
 800da7c:	e01f      	b.n	800dabe <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800da7e:	7bbb      	ldrb	r3, [r7, #14]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d00e      	beq.n	800daa2 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800da84:	693b      	ldr	r3, [r7, #16]
 800da86:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800da88:	2b05      	cmp	r3, #5
 800da8a:	d007      	beq.n	800da9c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800da90:	2b06      	cmp	r3, #6
 800da92:	d003      	beq.n	800da9c <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800da94:	693b      	ldr	r3, [r7, #16]
 800da96:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800da98:	2b08      	cmp	r3, #8
 800da9a:	d102      	bne.n	800daa2 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800da9c:	2301      	movs	r3, #1
 800da9e:	75bb      	strb	r3, [r7, #22]
 800daa0:	e00d      	b.n	800dabe <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800daa2:	7b7b      	ldrb	r3, [r7, #13]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d008      	beq.n	800daba <lwip_netconn_do_close_internal+0xe6>
 800daa8:	693b      	ldr	r3, [r7, #16]
 800daaa:	8b5b      	ldrh	r3, [r3, #26]
 800daac:	f003 0310 	and.w	r3, r3, #16
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d002      	beq.n	800daba <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800dab4:	2301      	movs	r3, #1
 800dab6:	75bb      	strb	r3, [r7, #22]
 800dab8:	e001      	b.n	800dabe <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800daba:	2300      	movs	r3, #0
 800dabc:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800dabe:	7dbb      	ldrb	r3, [r7, #22]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d003      	beq.n	800dacc <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800dac4:	2100      	movs	r1, #0
 800dac6:	6938      	ldr	r0, [r7, #16]
 800dac8:	f005 fb26 	bl	8013118 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800dacc:	693b      	ldr	r3, [r7, #16]
 800dace:	7d1b      	ldrb	r3, [r3, #20]
 800dad0:	2b01      	cmp	r3, #1
 800dad2:	d104      	bne.n	800dade <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800dad4:	2100      	movs	r1, #0
 800dad6:	6938      	ldr	r0, [r7, #16]
 800dad8:	f005 fb96 	bl	8013208 <tcp_accept>
 800dadc:	e01d      	b.n	800db1a <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800dade:	7bbb      	ldrb	r3, [r7, #14]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d007      	beq.n	800daf4 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800dae4:	2100      	movs	r1, #0
 800dae6:	6938      	ldr	r0, [r7, #16]
 800dae8:	f005 fb28 	bl	801313c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800daec:	2100      	movs	r1, #0
 800daee:	6938      	ldr	r0, [r7, #16]
 800daf0:	f005 fb8a 	bl	8013208 <tcp_accept>
    }
    if (shut_tx) {
 800daf4:	7b7b      	ldrb	r3, [r7, #13]
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	d003      	beq.n	800db02 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800dafa:	2100      	movs	r1, #0
 800dafc:	6938      	ldr	r0, [r7, #16]
 800dafe:	f005 fb3f 	bl	8013180 <tcp_sent>
    }
    if (shut_close) {
 800db02:	7dbb      	ldrb	r3, [r7, #22]
 800db04:	2b00      	cmp	r3, #0
 800db06:	d008      	beq.n	800db1a <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800db08:	2200      	movs	r2, #0
 800db0a:	2100      	movs	r1, #0
 800db0c:	6938      	ldr	r0, [r7, #16]
 800db0e:	f005 fb93 	bl	8013238 <tcp_poll>
      tcp_err(tpcb, NULL);
 800db12:	2100      	movs	r1, #0
 800db14:	6938      	ldr	r0, [r7, #16]
 800db16:	f005 fb55 	bl	80131c4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800db1a:	7dbb      	ldrb	r3, [r7, #22]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d005      	beq.n	800db2c <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800db20:	6938      	ldr	r0, [r7, #16]
 800db22:	f004 f96d 	bl	8011e00 <tcp_close>
 800db26:	4603      	mov	r3, r0
 800db28:	75fb      	strb	r3, [r7, #23]
 800db2a:	e007      	b.n	800db3c <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800db2c:	7bbb      	ldrb	r3, [r7, #14]
 800db2e:	7b7a      	ldrb	r2, [r7, #13]
 800db30:	4619      	mov	r1, r3
 800db32:	6938      	ldr	r0, [r7, #16]
 800db34:	f004 f990 	bl	8011e58 <tcp_shutdown>
 800db38:	4603      	mov	r3, r0
 800db3a:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800db3c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d102      	bne.n	800db4a <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800db44:	2301      	movs	r3, #1
 800db46:	757b      	strb	r3, [r7, #21]
 800db48:	e016      	b.n	800db78 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800db4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800db4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db52:	d10f      	bne.n	800db74 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6a1b      	ldr	r3, [r3, #32]
 800db58:	7a5b      	ldrb	r3, [r3, #9]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d10c      	bne.n	800db78 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800db5e:	2301      	movs	r3, #1
 800db60:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800db62:	7dbb      	ldrb	r3, [r7, #22]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d007      	beq.n	800db78 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800db68:	6938      	ldr	r0, [r7, #16]
 800db6a:	f004 fa8f 	bl	801208c <tcp_abort>
          err = ERR_OK;
 800db6e:	2300      	movs	r3, #0
 800db70:	75fb      	strb	r3, [r7, #23]
 800db72:	e001      	b.n	800db78 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800db74:	2301      	movs	r3, #1
 800db76:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800db78:	7d7b      	ldrb	r3, [r7, #21]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d052      	beq.n	800dc24 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6a1b      	ldr	r3, [r3, #32]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	330c      	adds	r3, #12
 800db86:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6a1b      	ldr	r3, [r3, #32]
 800db8c:	7dfa      	ldrb	r2, [r7, #23]
 800db8e:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2200      	movs	r2, #0
 800db94:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2200      	movs	r2, #0
 800db9a:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800db9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d129      	bne.n	800dbf8 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800dba4:	7dbb      	ldrb	r3, [r7, #22]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d00c      	beq.n	800dbc4 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2200      	movs	r2, #0
 800dbae:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d005      	beq.n	800dbc4 <lwip_netconn_do_close_internal+0x1f0>
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbbc:	2200      	movs	r2, #0
 800dbbe:	2104      	movs	r1, #4
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	4798      	blx	r3
      }
      if (shut_rx) {
 800dbc4:	7bbb      	ldrb	r3, [r7, #14]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d009      	beq.n	800dbde <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d005      	beq.n	800dbde <lwip_netconn_do_close_internal+0x20a>
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	2100      	movs	r1, #0
 800dbda:	6878      	ldr	r0, [r7, #4]
 800dbdc:	4798      	blx	r3
      }
      if (shut_tx) {
 800dbde:	7b7b      	ldrb	r3, [r7, #13]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	d009      	beq.n	800dbf8 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d005      	beq.n	800dbf8 <lwip_netconn_do_close_internal+0x224>
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	2102      	movs	r1, #2
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800dbf8:	78fb      	ldrb	r3, [r7, #3]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d002      	beq.n	800dc04 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800dbfe:	68b8      	ldr	r0, [r7, #8]
 800dc00:	f00f fa10 	bl	801d024 <sys_sem_signal>
    }
    return ERR_OK;
 800dc04:	2300      	movs	r3, #0
 800dc06:	e03c      	b.n	800dc82 <lwip_netconn_do_close_internal+0x2ae>
 800dc08:	080220a0 	.word	0x080220a0
 800dc0c:	08022374 	.word	0x08022374
 800dc10:	080220e4 	.word	0x080220e4
 800dc14:	08022384 	.word	0x08022384
 800dc18:	080223a4 	.word	0x080223a4
 800dc1c:	080223c8 	.word	0x080223c8
 800dc20:	08022208 	.word	0x08022208
  }
  if (!close_finished) {
 800dc24:	7d7b      	ldrb	r3, [r7, #21]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d11e      	bne.n	800dc68 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800dc2a:	693b      	ldr	r3, [r7, #16]
 800dc2c:	7d1b      	ldrb	r3, [r3, #20]
 800dc2e:	2b01      	cmp	r3, #1
 800dc30:	d106      	bne.n	800dc40 <lwip_netconn_do_close_internal+0x26c>
 800dc32:	4b16      	ldr	r3, [pc, #88]	@ (800dc8c <lwip_netconn_do_close_internal+0x2b8>)
 800dc34:	f240 4241 	movw	r2, #1089	@ 0x441
 800dc38:	4915      	ldr	r1, [pc, #84]	@ (800dc90 <lwip_netconn_do_close_internal+0x2bc>)
 800dc3a:	4816      	ldr	r0, [pc, #88]	@ (800dc94 <lwip_netconn_do_close_internal+0x2c0>)
 800dc3c:	f010 fb4e 	bl	801e2dc <iprintf>
    if (shut_tx) {
 800dc40:	7b7b      	ldrb	r3, [r7, #13]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d003      	beq.n	800dc4e <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800dc46:	4914      	ldr	r1, [pc, #80]	@ (800dc98 <lwip_netconn_do_close_internal+0x2c4>)
 800dc48:	6938      	ldr	r0, [r7, #16]
 800dc4a:	f005 fa99 	bl	8013180 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800dc4e:	2201      	movs	r2, #1
 800dc50:	4912      	ldr	r1, [pc, #72]	@ (800dc9c <lwip_netconn_do_close_internal+0x2c8>)
 800dc52:	6938      	ldr	r0, [r7, #16]
 800dc54:	f005 faf0 	bl	8013238 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800dc58:	4911      	ldr	r1, [pc, #68]	@ (800dca0 <lwip_netconn_do_close_internal+0x2cc>)
 800dc5a:	6938      	ldr	r0, [r7, #16]
 800dc5c:	f005 fab2 	bl	80131c4 <tcp_err>
    tcp_arg(tpcb, conn);
 800dc60:	6879      	ldr	r1, [r7, #4]
 800dc62:	6938      	ldr	r0, [r7, #16]
 800dc64:	f005 fa58 	bl	8013118 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800dc68:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d106      	bne.n	800dc7e <lwip_netconn_do_close_internal+0x2aa>
 800dc70:	4b06      	ldr	r3, [pc, #24]	@ (800dc8c <lwip_netconn_do_close_internal+0x2b8>)
 800dc72:	f240 424d 	movw	r2, #1101	@ 0x44d
 800dc76:	490b      	ldr	r1, [pc, #44]	@ (800dca4 <lwip_netconn_do_close_internal+0x2d0>)
 800dc78:	4806      	ldr	r0, [pc, #24]	@ (800dc94 <lwip_netconn_do_close_internal+0x2c0>)
 800dc7a:	f010 fb2f 	bl	801e2dc <iprintf>
  return err;
 800dc7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc82:	4618      	mov	r0, r3
 800dc84:	3718      	adds	r7, #24
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}
 800dc8a:	bf00      	nop
 800dc8c:	080220a0 	.word	0x080220a0
 800dc90:	080223dc 	.word	0x080223dc
 800dc94:	080220e4 	.word	0x080220e4
 800dc98:	0800d3c5 	.word	0x0800d3c5
 800dc9c:	0800d2fd 	.word	0x0800d2fd
 800dca0:	0800d46d 	.word	0x0800d46d
 800dca4:	08022400 	.word	0x08022400

0800dca8 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800dcb4:	68fb      	ldr	r3, [r7, #12]
 800dcb6:	681b      	ldr	r3, [r3, #0]
 800dcb8:	785b      	ldrb	r3, [r3, #1]
 800dcba:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800dcbc:	7afb      	ldrb	r3, [r7, #11]
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d00d      	beq.n	800dcde <lwip_netconn_do_delconn+0x36>
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	681b      	ldr	r3, [r3, #0]
 800dcc6:	781b      	ldrb	r3, [r3, #0]
 800dcc8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dccc:	2b10      	cmp	r3, #16
 800dcce:	d006      	beq.n	800dcde <lwip_netconn_do_delconn+0x36>
 800dcd0:	4b60      	ldr	r3, [pc, #384]	@ (800de54 <lwip_netconn_do_delconn+0x1ac>)
 800dcd2:	f240 425e 	movw	r2, #1118	@ 0x45e
 800dcd6:	4960      	ldr	r1, [pc, #384]	@ (800de58 <lwip_netconn_do_delconn+0x1b0>)
 800dcd8:	4860      	ldr	r0, [pc, #384]	@ (800de5c <lwip_netconn_do_delconn+0x1b4>)
 800dcda:	f010 faff 	bl	801e2dc <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800dcde:	7afb      	ldrb	r3, [r7, #11]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d005      	beq.n	800dcf0 <lwip_netconn_do_delconn+0x48>
 800dce4:	7afb      	ldrb	r3, [r7, #11]
 800dce6:	2b02      	cmp	r3, #2
 800dce8:	d002      	beq.n	800dcf0 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800dcea:	7afb      	ldrb	r3, [r7, #11]
 800dcec:	2b03      	cmp	r3, #3
 800dcee:	d109      	bne.n	800dd04 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800dcf0:	7afb      	ldrb	r3, [r7, #11]
 800dcf2:	2b03      	cmp	r3, #3
 800dcf4:	d10a      	bne.n	800dd0c <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	7f1b      	ldrb	r3, [r3, #28]
 800dcfc:	f003 0304 	and.w	r3, r3, #4
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d103      	bne.n	800dd0c <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	22fb      	movs	r2, #251	@ 0xfb
 800dd08:	711a      	strb	r2, [r3, #4]
 800dd0a:	e097      	b.n	800de3c <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800dd0c:	7afb      	ldrb	r3, [r7, #11]
 800dd0e:	2b03      	cmp	r3, #3
 800dd10:	d10d      	bne.n	800dd2e <lwip_netconn_do_delconn+0x86>
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	7f1b      	ldrb	r3, [r3, #28]
 800dd18:	f003 0304 	and.w	r3, r3, #4
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d106      	bne.n	800dd2e <lwip_netconn_do_delconn+0x86>
 800dd20:	4b4c      	ldr	r3, [pc, #304]	@ (800de54 <lwip_netconn_do_delconn+0x1ac>)
 800dd22:	f240 427a 	movw	r2, #1146	@ 0x47a
 800dd26:	494e      	ldr	r1, [pc, #312]	@ (800de60 <lwip_netconn_do_delconn+0x1b8>)
 800dd28:	484c      	ldr	r0, [pc, #304]	@ (800de5c <lwip_netconn_do_delconn+0x1b4>)
 800dd2a:	f010 fad7 	bl	801e2dc <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2200      	movs	r2, #0
 800dd32:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	681b      	ldr	r3, [r3, #0]
 800dd38:	4618      	mov	r0, r3
 800dd3a:	f7ff fdcd 	bl	800d8d8 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d05f      	beq.n	800de08 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681b      	ldr	r3, [r3, #0]
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dd52:	2b10      	cmp	r3, #16
 800dd54:	d00d      	beq.n	800dd72 <lwip_netconn_do_delconn+0xca>
 800dd56:	2b20      	cmp	r3, #32
 800dd58:	d151      	bne.n	800ddfe <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800dd5a:	68fb      	ldr	r3, [r7, #12]
 800dd5c:	681b      	ldr	r3, [r3, #0]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	2200      	movs	r2, #0
 800dd62:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	685b      	ldr	r3, [r3, #4]
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	f00a fcd4 	bl	8018718 <udp_remove>
          break;
 800dd70:	e046      	b.n	800de00 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	681b      	ldr	r3, [r3, #0]
 800dd76:	6a1b      	ldr	r3, [r3, #32]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d006      	beq.n	800dd8a <lwip_netconn_do_delconn+0xe2>
 800dd7c:	4b35      	ldr	r3, [pc, #212]	@ (800de54 <lwip_netconn_do_delconn+0x1ac>)
 800dd7e:	f240 4294 	movw	r2, #1172	@ 0x494
 800dd82:	4938      	ldr	r1, [pc, #224]	@ (800de64 <lwip_netconn_do_delconn+0x1bc>)
 800dd84:	4835      	ldr	r0, [pc, #212]	@ (800de5c <lwip_netconn_do_delconn+0x1b4>)
 800dd86:	f010 faa9 	bl	801e2dc <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	2204      	movs	r2, #4
 800dd90:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	2203      	movs	r2, #3
 800dd96:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	68fa      	ldr	r2, [r7, #12]
 800dd9e:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	2100      	movs	r1, #0
 800dda6:	4618      	mov	r0, r3
 800dda8:	f7ff fe14 	bl	800d9d4 <lwip_netconn_do_close_internal>
 800ddac:	4603      	mov	r3, r0
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d04b      	beq.n	800de4a <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	785b      	ldrb	r3, [r3, #1]
 800ddb8:	2b04      	cmp	r3, #4
 800ddba:	d006      	beq.n	800ddca <lwip_netconn_do_delconn+0x122>
 800ddbc:	4b25      	ldr	r3, [pc, #148]	@ (800de54 <lwip_netconn_do_delconn+0x1ac>)
 800ddbe:	f240 429a 	movw	r2, #1178	@ 0x49a
 800ddc2:	4929      	ldr	r1, [pc, #164]	@ (800de68 <lwip_netconn_do_delconn+0x1c0>)
 800ddc4:	4825      	ldr	r0, [pc, #148]	@ (800de5c <lwip_netconn_do_delconn+0x1b4>)
 800ddc6:	f010 fa89 	bl	801e2dc <iprintf>
            UNLOCK_TCPIP_CORE();
 800ddca:	4828      	ldr	r0, [pc, #160]	@ (800de6c <lwip_netconn_do_delconn+0x1c4>)
 800ddcc:	f00f f993 	bl	801d0f6 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	330c      	adds	r3, #12
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	4618      	mov	r0, r3
 800ddda:	f00f f8f2 	bl	801cfc2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800ddde:	4823      	ldr	r0, [pc, #140]	@ (800de6c <lwip_netconn_do_delconn+0x1c4>)
 800dde0:	f00f f97a 	bl	801d0d8 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	785b      	ldrb	r3, [r3, #1]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d02d      	beq.n	800de4a <lwip_netconn_do_delconn+0x1a2>
 800ddee:	4b19      	ldr	r3, [pc, #100]	@ (800de54 <lwip_netconn_do_delconn+0x1ac>)
 800ddf0:	f240 429e 	movw	r2, #1182	@ 0x49e
 800ddf4:	491c      	ldr	r1, [pc, #112]	@ (800de68 <lwip_netconn_do_delconn+0x1c0>)
 800ddf6:	4819      	ldr	r0, [pc, #100]	@ (800de5c <lwip_netconn_do_delconn+0x1b4>)
 800ddf8:	f010 fa70 	bl	801e2dc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800ddfc:	e025      	b.n	800de4a <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800ddfe:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	2200      	movs	r2, #0
 800de06:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d007      	beq.n	800de22 <lwip_netconn_do_delconn+0x17a>
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	6810      	ldr	r0, [r2, #0]
 800de1c:	2200      	movs	r2, #0
 800de1e:	2100      	movs	r1, #0
 800de20:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d007      	beq.n	800de3c <lwip_netconn_do_delconn+0x194>
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de32:	68fa      	ldr	r2, [r7, #12]
 800de34:	6810      	ldr	r0, [r2, #0]
 800de36:	2200      	movs	r2, #0
 800de38:	2102      	movs	r1, #2
 800de3a:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	330c      	adds	r3, #12
 800de42:	4618      	mov	r0, r3
 800de44:	f00f f908 	bl	801d058 <sys_sem_valid>
 800de48:	e000      	b.n	800de4c <lwip_netconn_do_delconn+0x1a4>
          return;
 800de4a:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800de4c:	3710      	adds	r7, #16
 800de4e:	46bd      	mov	sp, r7
 800de50:	bd80      	pop	{r7, pc}
 800de52:	bf00      	nop
 800de54:	080220a0 	.word	0x080220a0
 800de58:	08022410 	.word	0x08022410
 800de5c:	080220e4 	.word	0x080220e4
 800de60:	08022424 	.word	0x08022424
 800de64:	08022444 	.word	0x08022444
 800de68:	08022460 	.word	0x08022460
 800de6c:	2000e924 	.word	0x2000e924

0800de70 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b088      	sub	sp, #32
 800de74:	af00      	add	r7, sp, #0
 800de76:	60f8      	str	r0, [r7, #12]
 800de78:	60b9      	str	r1, [r7, #8]
 800de7a:	4613      	mov	r3, r2
 800de7c:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800de7e:	2300      	movs	r3, #0
 800de80:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800de86:	69bb      	ldr	r3, [r7, #24]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d102      	bne.n	800de92 <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800de8c:	f06f 0305 	mvn.w	r3, #5
 800de90:	e070      	b.n	800df74 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800de92:	69bb      	ldr	r3, [r7, #24]
 800de94:	785b      	ldrb	r3, [r3, #1]
 800de96:	2b03      	cmp	r3, #3
 800de98:	d006      	beq.n	800dea8 <lwip_netconn_do_connected+0x38>
 800de9a:	4b38      	ldr	r3, [pc, #224]	@ (800df7c <lwip_netconn_do_connected+0x10c>)
 800de9c:	f240 5223 	movw	r2, #1315	@ 0x523
 800dea0:	4937      	ldr	r1, [pc, #220]	@ (800df80 <lwip_netconn_do_connected+0x110>)
 800dea2:	4838      	ldr	r0, [pc, #224]	@ (800df84 <lwip_netconn_do_connected+0x114>)
 800dea4:	f010 fa1a 	bl	801e2dc <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800dea8:	69bb      	ldr	r3, [r7, #24]
 800deaa:	6a1b      	ldr	r3, [r3, #32]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d10c      	bne.n	800deca <lwip_netconn_do_connected+0x5a>
 800deb0:	69bb      	ldr	r3, [r7, #24]
 800deb2:	7f1b      	ldrb	r3, [r3, #28]
 800deb4:	f003 0304 	and.w	r3, r3, #4
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d106      	bne.n	800deca <lwip_netconn_do_connected+0x5a>
 800debc:	4b2f      	ldr	r3, [pc, #188]	@ (800df7c <lwip_netconn_do_connected+0x10c>)
 800debe:	f240 5224 	movw	r2, #1316	@ 0x524
 800dec2:	4931      	ldr	r1, [pc, #196]	@ (800df88 <lwip_netconn_do_connected+0x118>)
 800dec4:	482f      	ldr	r0, [pc, #188]	@ (800df84 <lwip_netconn_do_connected+0x114>)
 800dec6:	f010 fa09 	bl	801e2dc <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800deca:	69bb      	ldr	r3, [r7, #24]
 800decc:	6a1b      	ldr	r3, [r3, #32]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d008      	beq.n	800dee4 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800ded2:	69bb      	ldr	r3, [r7, #24]
 800ded4:	6a1b      	ldr	r3, [r3, #32]
 800ded6:	79fa      	ldrb	r2, [r7, #7]
 800ded8:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800deda:	69bb      	ldr	r3, [r7, #24]
 800dedc:	6a1b      	ldr	r3, [r3, #32]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	330c      	adds	r3, #12
 800dee2:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800dee4:	69bb      	ldr	r3, [r7, #24]
 800dee6:	781b      	ldrb	r3, [r3, #0]
 800dee8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800deec:	2b10      	cmp	r3, #16
 800deee:	d106      	bne.n	800defe <lwip_netconn_do_connected+0x8e>
 800def0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800def4:	2b00      	cmp	r3, #0
 800def6:	d102      	bne.n	800defe <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800def8:	69b8      	ldr	r0, [r7, #24]
 800defa:	f7ff fb8d 	bl	800d618 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800defe:	69bb      	ldr	r3, [r7, #24]
 800df00:	7f1b      	ldrb	r3, [r3, #28]
 800df02:	f003 0304 	and.w	r3, r3, #4
 800df06:	2b00      	cmp	r3, #0
 800df08:	bf0c      	ite	eq
 800df0a:	2301      	moveq	r3, #1
 800df0c:	2300      	movne	r3, #0
 800df0e:	b2db      	uxtb	r3, r3
 800df10:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800df12:	69bb      	ldr	r3, [r7, #24]
 800df14:	7f1b      	ldrb	r3, [r3, #28]
 800df16:	f023 0304 	bic.w	r3, r3, #4
 800df1a:	b2da      	uxtb	r2, r3
 800df1c:	69bb      	ldr	r3, [r7, #24]
 800df1e:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d002      	beq.n	800df2c <lwip_netconn_do_connected+0xbc>
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d10c      	bne.n	800df46 <lwip_netconn_do_connected+0xd6>
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d102      	bne.n	800df38 <lwip_netconn_do_connected+0xc8>
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d006      	beq.n	800df46 <lwip_netconn_do_connected+0xd6>
 800df38:	4b10      	ldr	r3, [pc, #64]	@ (800df7c <lwip_netconn_do_connected+0x10c>)
 800df3a:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 800df3e:	4913      	ldr	r1, [pc, #76]	@ (800df8c <lwip_netconn_do_connected+0x11c>)
 800df40:	4810      	ldr	r0, [pc, #64]	@ (800df84 <lwip_netconn_do_connected+0x114>)
 800df42:	f010 f9cb 	bl	801e2dc <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800df46:	69bb      	ldr	r3, [r7, #24]
 800df48:	2200      	movs	r2, #0
 800df4a:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800df4c:	69bb      	ldr	r3, [r7, #24]
 800df4e:	2200      	movs	r2, #0
 800df50:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800df52:	69bb      	ldr	r3, [r7, #24]
 800df54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df56:	2b00      	cmp	r3, #0
 800df58:	d005      	beq.n	800df66 <lwip_netconn_do_connected+0xf6>
 800df5a:	69bb      	ldr	r3, [r7, #24]
 800df5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df5e:	2200      	movs	r2, #0
 800df60:	2102      	movs	r1, #2
 800df62:	69b8      	ldr	r0, [r7, #24]
 800df64:	4798      	blx	r3

  if (was_blocking) {
 800df66:	697b      	ldr	r3, [r7, #20]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d002      	beq.n	800df72 <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800df6c:	69f8      	ldr	r0, [r7, #28]
 800df6e:	f00f f859 	bl	801d024 <sys_sem_signal>
  }
  return ERR_OK;
 800df72:	2300      	movs	r3, #0
}
 800df74:	4618      	mov	r0, r3
 800df76:	3720      	adds	r7, #32
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	080220a0 	.word	0x080220a0
 800df80:	08022468 	.word	0x08022468
 800df84:	080220e4 	.word	0x080220e4
 800df88:	08022488 	.word	0x08022488
 800df8c:	080224c8 	.word	0x080224c8

0800df90 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800df90:	b580      	push	{r7, lr}
 800df92:	b086      	sub	sp, #24
 800df94:	af00      	add	r7, sp, #0
 800df96:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800df9c:	693b      	ldr	r3, [r7, #16]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	685b      	ldr	r3, [r3, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d102      	bne.n	800dfac <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800dfa6:	23f1      	movs	r3, #241	@ 0xf1
 800dfa8:	75fb      	strb	r3, [r7, #23]
 800dfaa:	e09b      	b.n	800e0e4 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800dfac:	693b      	ldr	r3, [r7, #16]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	781b      	ldrb	r3, [r3, #0]
 800dfb2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800dfb6:	2b10      	cmp	r3, #16
 800dfb8:	d00f      	beq.n	800dfda <lwip_netconn_do_connect+0x4a>
 800dfba:	2b20      	cmp	r3, #32
 800dfbc:	f040 8087 	bne.w	800e0ce <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	6858      	ldr	r0, [r3, #4]
 800dfc6:	693b      	ldr	r3, [r7, #16]
 800dfc8:	6899      	ldr	r1, [r3, #8]
 800dfca:	693b      	ldr	r3, [r7, #16]
 800dfcc:	899b      	ldrh	r3, [r3, #12]
 800dfce:	461a      	mov	r2, r3
 800dfd0:	f00a faec 	bl	80185ac <udp_connect>
 800dfd4:	4603      	mov	r3, r0
 800dfd6:	75fb      	strb	r3, [r7, #23]
        break;
 800dfd8:	e084      	b.n	800e0e4 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800dfda:	693b      	ldr	r3, [r7, #16]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	785b      	ldrb	r3, [r3, #1]
 800dfe0:	2b03      	cmp	r3, #3
 800dfe2:	d102      	bne.n	800dfea <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800dfe4:	23f7      	movs	r3, #247	@ 0xf7
 800dfe6:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800dfe8:	e07b      	b.n	800e0e2 <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800dfea:	693b      	ldr	r3, [r7, #16]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	785b      	ldrb	r3, [r3, #1]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d002      	beq.n	800dffa <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800dff4:	23f6      	movs	r3, #246	@ 0xf6
 800dff6:	75fb      	strb	r3, [r7, #23]
        break;
 800dff8:	e073      	b.n	800e0e2 <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800dffa:	693b      	ldr	r3, [r7, #16]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	4618      	mov	r0, r3
 800e000:	f7ff fb0a 	bl	800d618 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800e004:	693b      	ldr	r3, [r7, #16]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	6858      	ldr	r0, [r3, #4]
 800e00a:	693b      	ldr	r3, [r7, #16]
 800e00c:	6899      	ldr	r1, [r3, #8]
 800e00e:	693b      	ldr	r3, [r7, #16]
 800e010:	899a      	ldrh	r2, [r3, #12]
 800e012:	4b38      	ldr	r3, [pc, #224]	@ (800e0f4 <lwip_netconn_do_connect+0x164>)
 800e014:	f004 f936 	bl	8012284 <tcp_connect>
 800e018:	4603      	mov	r3, r0
 800e01a:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800e01c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d15e      	bne.n	800e0e2 <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	7f1b      	ldrb	r3, [r3, #28]
 800e02a:	f003 0302 	and.w	r3, r3, #2
 800e02e:	2b00      	cmp	r3, #0
 800e030:	bf14      	ite	ne
 800e032:	2301      	movne	r3, #1
 800e034:	2300      	moveq	r3, #0
 800e036:	b2db      	uxtb	r3, r3
 800e038:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	2203      	movs	r2, #3
 800e040:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800e042:	7bfb      	ldrb	r3, [r7, #15]
 800e044:	2b00      	cmp	r3, #0
 800e046:	d009      	beq.n	800e05c <lwip_netconn_do_connect+0xcc>
 800e048:	693b      	ldr	r3, [r7, #16]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	7f1a      	ldrb	r2, [r3, #28]
 800e04e:	693b      	ldr	r3, [r7, #16]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f042 0204 	orr.w	r2, r2, #4
 800e056:	b2d2      	uxtb	r2, r2
 800e058:	771a      	strb	r2, [r3, #28]
 800e05a:	e008      	b.n	800e06e <lwip_netconn_do_connect+0xde>
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	7f1a      	ldrb	r2, [r3, #28]
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	681b      	ldr	r3, [r3, #0]
 800e066:	f022 0204 	bic.w	r2, r2, #4
 800e06a:	b2d2      	uxtb	r2, r2
 800e06c:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800e06e:	7bfb      	ldrb	r3, [r7, #15]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d002      	beq.n	800e07a <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800e074:	23fb      	movs	r3, #251	@ 0xfb
 800e076:	75fb      	strb	r3, [r7, #23]
        break;
 800e078:	e033      	b.n	800e0e2 <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800e07a:	693b      	ldr	r3, [r7, #16]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	693a      	ldr	r2, [r7, #16]
 800e080:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800e082:	693b      	ldr	r3, [r7, #16]
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	785b      	ldrb	r3, [r3, #1]
 800e088:	2b03      	cmp	r3, #3
 800e08a:	d006      	beq.n	800e09a <lwip_netconn_do_connect+0x10a>
 800e08c:	4b1a      	ldr	r3, [pc, #104]	@ (800e0f8 <lwip_netconn_do_connect+0x168>)
 800e08e:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 800e092:	491a      	ldr	r1, [pc, #104]	@ (800e0fc <lwip_netconn_do_connect+0x16c>)
 800e094:	481a      	ldr	r0, [pc, #104]	@ (800e100 <lwip_netconn_do_connect+0x170>)
 800e096:	f010 f921 	bl	801e2dc <iprintf>
              UNLOCK_TCPIP_CORE();
 800e09a:	481a      	ldr	r0, [pc, #104]	@ (800e104 <lwip_netconn_do_connect+0x174>)
 800e09c:	f00f f82b 	bl	801d0f6 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	330c      	adds	r3, #12
 800e0a6:	2100      	movs	r1, #0
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f00e ff8a 	bl	801cfc2 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800e0ae:	4815      	ldr	r0, [pc, #84]	@ (800e104 <lwip_netconn_do_connect+0x174>)
 800e0b0:	f00f f812 	bl	801d0d8 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800e0b4:	693b      	ldr	r3, [r7, #16]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	785b      	ldrb	r3, [r3, #1]
 800e0ba:	2b03      	cmp	r3, #3
 800e0bc:	d116      	bne.n	800e0ec <lwip_netconn_do_connect+0x15c>
 800e0be:	4b0e      	ldr	r3, [pc, #56]	@ (800e0f8 <lwip_netconn_do_connect+0x168>)
 800e0c0:	f240 5274 	movw	r2, #1396	@ 0x574
 800e0c4:	490d      	ldr	r1, [pc, #52]	@ (800e0fc <lwip_netconn_do_connect+0x16c>)
 800e0c6:	480e      	ldr	r0, [pc, #56]	@ (800e100 <lwip_netconn_do_connect+0x170>)
 800e0c8:	f010 f908 	bl	801e2dc <iprintf>
              return;
 800e0cc:	e00e      	b.n	800e0ec <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800e0ce:	4b0a      	ldr	r3, [pc, #40]	@ (800e0f8 <lwip_netconn_do_connect+0x168>)
 800e0d0:	f240 527d 	movw	r2, #1405	@ 0x57d
 800e0d4:	490c      	ldr	r1, [pc, #48]	@ (800e108 <lwip_netconn_do_connect+0x178>)
 800e0d6:	480a      	ldr	r0, [pc, #40]	@ (800e100 <lwip_netconn_do_connect+0x170>)
 800e0d8:	f010 f900 	bl	801e2dc <iprintf>
 800e0dc:	23fa      	movs	r3, #250	@ 0xfa
 800e0de:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800e0e0:	e000      	b.n	800e0e4 <lwip_netconn_do_connect+0x154>
        break;
 800e0e2:	bf00      	nop
    }
  }
  msg->err = err;
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	7dfa      	ldrb	r2, [r7, #23]
 800e0e8:	711a      	strb	r2, [r3, #4]
 800e0ea:	e000      	b.n	800e0ee <lwip_netconn_do_connect+0x15e>
              return;
 800e0ec:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800e0ee:	3718      	adds	r7, #24
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	0800de71 	.word	0x0800de71
 800e0f8:	080220a0 	.word	0x080220a0
 800e0fc:	08022460 	.word	0x08022460
 800e100:	080220e4 	.word	0x080220e4
 800e104:	2000e924 	.word	0x2000e924
 800e108:	080224e8 	.word	0x080224e8

0800e10c <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 800e10c:	b580      	push	{r7, lr}
 800e10e:	b084      	sub	sp, #16
 800e110:	af00      	add	r7, sp, #0
 800e112:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	781b      	ldrb	r3, [r3, #0]
 800e11e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e122:	2b20      	cmp	r3, #32
 800e124:	d109      	bne.n	800e13a <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	685b      	ldr	r3, [r3, #4]
 800e12c:	4618      	mov	r0, r3
 800e12e:	f00a faab 	bl	8018688 <udp_disconnect>
    msg->err = ERR_OK;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2200      	movs	r2, #0
 800e136:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e138:	e002      	b.n	800e140 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	22fa      	movs	r2, #250	@ 0xfa
 800e13e:	711a      	strb	r2, [r3, #4]
}
 800e140:	bf00      	nop
 800e142:	3710      	adds	r7, #16
 800e144:	46bd      	mov	sp, r7
 800e146:	bd80      	pop	{r7, pc}

0800e148 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b084      	sub	sp, #16
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	4618      	mov	r0, r3
 800e15a:	f7fe ff3f 	bl	800cfdc <netconn_err>
 800e15e:	4603      	mov	r3, r0
 800e160:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d134      	bne.n	800e1d4 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800e16a:	68bb      	ldr	r3, [r7, #8]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	685b      	ldr	r3, [r3, #4]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d02d      	beq.n	800e1d0 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	781b      	ldrb	r3, [r3, #0]
 800e17a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e17e:	2b20      	cmp	r3, #32
 800e180:	d123      	bne.n	800e1ca <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800e182:	68bb      	ldr	r3, [r7, #8]
 800e184:	689b      	ldr	r3, [r3, #8]
 800e186:	689b      	ldr	r3, [r3, #8]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	d10c      	bne.n	800e1a6 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800e18c:	68bb      	ldr	r3, [r7, #8]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	685a      	ldr	r2, [r3, #4]
 800e192:	68bb      	ldr	r3, [r7, #8]
 800e194:	689b      	ldr	r3, [r3, #8]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4619      	mov	r1, r3
 800e19a:	4610      	mov	r0, r2
 800e19c:	f009 ff94 	bl	80180c8 <udp_send>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800e1a4:	e016      	b.n	800e1d4 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	681b      	ldr	r3, [r3, #0]
 800e1aa:	6858      	ldr	r0, [r3, #4]
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	689b      	ldr	r3, [r3, #8]
 800e1b0:	6819      	ldr	r1, [r3, #0]
 800e1b2:	68bb      	ldr	r3, [r7, #8]
 800e1b4:	689b      	ldr	r3, [r3, #8]
 800e1b6:	f103 0208 	add.w	r2, r3, #8
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	689b      	ldr	r3, [r3, #8]
 800e1be:	899b      	ldrh	r3, [r3, #12]
 800e1c0:	f009 ffb6 	bl	8018130 <udp_sendto>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	73fb      	strb	r3, [r7, #15]
          break;
 800e1c8:	e004      	b.n	800e1d4 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800e1ca:	23f5      	movs	r3, #245	@ 0xf5
 800e1cc:	73fb      	strb	r3, [r7, #15]
          break;
 800e1ce:	e001      	b.n	800e1d4 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800e1d0:	23f5      	movs	r3, #245	@ 0xf5
 800e1d2:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	7bfa      	ldrb	r2, [r7, #15]
 800e1d8:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e1da:	bf00      	nop
 800e1dc:	3710      	adds	r7, #16
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}
	...

0800e1e4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e1e4:	b580      	push	{r7, lr}
 800e1e6:	b088      	sub	sp, #32
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	6078      	str	r0, [r7, #4]
 800e1ec:	460b      	mov	r3, r1
 800e1ee:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d106      	bne.n	800e208 <lwip_netconn_do_writemore+0x24>
 800e1fa:	4b96      	ldr	r3, [pc, #600]	@ (800e454 <lwip_netconn_do_writemore+0x270>)
 800e1fc:	f240 6273 	movw	r2, #1651	@ 0x673
 800e200:	4995      	ldr	r1, [pc, #596]	@ (800e458 <lwip_netconn_do_writemore+0x274>)
 800e202:	4896      	ldr	r0, [pc, #600]	@ (800e45c <lwip_netconn_do_writemore+0x278>)
 800e204:	f010 f86a 	bl	801e2dc <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	785b      	ldrb	r3, [r3, #1]
 800e20c:	2b01      	cmp	r3, #1
 800e20e:	d006      	beq.n	800e21e <lwip_netconn_do_writemore+0x3a>
 800e210:	4b90      	ldr	r3, [pc, #576]	@ (800e454 <lwip_netconn_do_writemore+0x270>)
 800e212:	f240 6274 	movw	r2, #1652	@ 0x674
 800e216:	4992      	ldr	r1, [pc, #584]	@ (800e460 <lwip_netconn_do_writemore+0x27c>)
 800e218:	4890      	ldr	r0, [pc, #576]	@ (800e45c <lwip_netconn_do_writemore+0x278>)
 800e21a:	f010 f85f 	bl	801e2dc <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6a1b      	ldr	r3, [r3, #32]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d106      	bne.n	800e234 <lwip_netconn_do_writemore+0x50>
 800e226:	4b8b      	ldr	r3, [pc, #556]	@ (800e454 <lwip_netconn_do_writemore+0x270>)
 800e228:	f240 6275 	movw	r2, #1653	@ 0x675
 800e22c:	498d      	ldr	r1, [pc, #564]	@ (800e464 <lwip_netconn_do_writemore+0x280>)
 800e22e:	488b      	ldr	r0, [pc, #556]	@ (800e45c <lwip_netconn_do_writemore+0x278>)
 800e230:	f010 f854 	bl	801e2dc <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	685b      	ldr	r3, [r3, #4]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d106      	bne.n	800e24a <lwip_netconn_do_writemore+0x66>
 800e23c:	4b85      	ldr	r3, [pc, #532]	@ (800e454 <lwip_netconn_do_writemore+0x270>)
 800e23e:	f240 6276 	movw	r2, #1654	@ 0x676
 800e242:	4989      	ldr	r1, [pc, #548]	@ (800e468 <lwip_netconn_do_writemore+0x284>)
 800e244:	4885      	ldr	r0, [pc, #532]	@ (800e45c <lwip_netconn_do_writemore+0x278>)
 800e246:	f010 f849 	bl	801e2dc <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	6a1b      	ldr	r3, [r3, #32]
 800e24e:	699a      	ldr	r2, [r3, #24]
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	6a1b      	ldr	r3, [r3, #32]
 800e254:	695b      	ldr	r3, [r3, #20]
 800e256:	429a      	cmp	r2, r3
 800e258:	d306      	bcc.n	800e268 <lwip_netconn_do_writemore+0x84>
 800e25a:	4b7e      	ldr	r3, [pc, #504]	@ (800e454 <lwip_netconn_do_writemore+0x270>)
 800e25c:	f240 6277 	movw	r2, #1655	@ 0x677
 800e260:	4982      	ldr	r1, [pc, #520]	@ (800e46c <lwip_netconn_do_writemore+0x288>)
 800e262:	487e      	ldr	r0, [pc, #504]	@ (800e45c <lwip_netconn_do_writemore+0x278>)
 800e264:	f010 f83a 	bl	801e2dc <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	6a1b      	ldr	r3, [r3, #32]
 800e26c:	899b      	ldrh	r3, [r3, #12]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d106      	bne.n	800e280 <lwip_netconn_do_writemore+0x9c>
 800e272:	4b78      	ldr	r3, [pc, #480]	@ (800e454 <lwip_netconn_do_writemore+0x270>)
 800e274:	f240 6279 	movw	r2, #1657	@ 0x679
 800e278:	497d      	ldr	r1, [pc, #500]	@ (800e470 <lwip_netconn_do_writemore+0x28c>)
 800e27a:	4878      	ldr	r0, [pc, #480]	@ (800e45c <lwip_netconn_do_writemore+0x278>)
 800e27c:	f010 f82e 	bl	801e2dc <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6a1b      	ldr	r3, [r3, #32]
 800e284:	7f1b      	ldrb	r3, [r3, #28]
 800e286:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	7f1b      	ldrb	r3, [r3, #28]
 800e28c:	f003 0302 	and.w	r3, r3, #2
 800e290:	2b00      	cmp	r3, #0
 800e292:	d104      	bne.n	800e29e <lwip_netconn_do_writemore+0xba>
 800e294:	7ebb      	ldrb	r3, [r7, #26]
 800e296:	f003 0304 	and.w	r3, r3, #4
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d001      	beq.n	800e2a2 <lwip_netconn_do_writemore+0xbe>
 800e29e:	2301      	movs	r3, #1
 800e2a0:	e000      	b.n	800e2a4 <lwip_netconn_do_writemore+0xc0>
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6a1b      	ldr	r3, [r3, #32]
 800e2aa:	689b      	ldr	r3, [r3, #8]
 800e2ac:	681a      	ldr	r2, [r3, #0]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	6a1b      	ldr	r3, [r3, #32]
 800e2b2:	691b      	ldr	r3, [r3, #16]
 800e2b4:	4413      	add	r3, r2
 800e2b6:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800e2b8:	687b      	ldr	r3, [r7, #4]
 800e2ba:	6a1b      	ldr	r3, [r3, #32]
 800e2bc:	689b      	ldr	r3, [r3, #8]
 800e2be:	685a      	ldr	r2, [r3, #4]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	6a1b      	ldr	r3, [r3, #32]
 800e2c4:	691b      	ldr	r3, [r3, #16]
 800e2c6:	1ad3      	subs	r3, r2, r3
 800e2c8:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800e2ca:	693b      	ldr	r3, [r7, #16]
 800e2cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e2d0:	d307      	bcc.n	800e2e2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800e2d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e2d6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e2d8:	7ebb      	ldrb	r3, [r7, #26]
 800e2da:	f043 0302 	orr.w	r3, r3, #2
 800e2de:	76bb      	strb	r3, [r7, #26]
 800e2e0:	e001      	b.n	800e2e6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800e2e2:	693b      	ldr	r3, [r7, #16]
 800e2e4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	685b      	ldr	r3, [r3, #4]
 800e2ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e2ee:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800e2f0:	89fa      	ldrh	r2, [r7, #14]
 800e2f2:	8bbb      	ldrh	r3, [r7, #28]
 800e2f4:	429a      	cmp	r2, r3
 800e2f6:	d216      	bcs.n	800e326 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800e2f8:	89fb      	ldrh	r3, [r7, #14]
 800e2fa:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800e2fc:	7e3b      	ldrb	r3, [r7, #24]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d00d      	beq.n	800e31e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800e302:	8bbb      	ldrh	r3, [r7, #28]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d10e      	bne.n	800e326 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	6a1b      	ldr	r3, [r3, #32]
 800e30c:	699b      	ldr	r3, [r3, #24]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d102      	bne.n	800e318 <lwip_netconn_do_writemore+0x134>
 800e312:	f06f 0306 	mvn.w	r3, #6
 800e316:	e000      	b.n	800e31a <lwip_netconn_do_writemore+0x136>
 800e318:	2300      	movs	r3, #0
 800e31a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800e31c:	e07d      	b.n	800e41a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800e31e:	7ebb      	ldrb	r3, [r7, #26]
 800e320:	f043 0302 	orr.w	r3, r3, #2
 800e324:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	6a1b      	ldr	r3, [r3, #32]
 800e32a:	691a      	ldr	r2, [r3, #16]
 800e32c:	8bbb      	ldrh	r3, [r7, #28]
 800e32e:	441a      	add	r2, r3
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	6a1b      	ldr	r3, [r3, #32]
 800e334:	689b      	ldr	r3, [r3, #8]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	429a      	cmp	r2, r3
 800e33a:	d906      	bls.n	800e34a <lwip_netconn_do_writemore+0x166>
 800e33c:	4b45      	ldr	r3, [pc, #276]	@ (800e454 <lwip_netconn_do_writemore+0x270>)
 800e33e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800e342:	494c      	ldr	r1, [pc, #304]	@ (800e474 <lwip_netconn_do_writemore+0x290>)
 800e344:	4845      	ldr	r0, [pc, #276]	@ (800e45c <lwip_netconn_do_writemore+0x278>)
 800e346:	f00f ffc9 	bl	801e2dc <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e34a:	8bbb      	ldrh	r3, [r7, #28]
 800e34c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e350:	4293      	cmp	r3, r2
 800e352:	d103      	bne.n	800e35c <lwip_netconn_do_writemore+0x178>
 800e354:	693b      	ldr	r3, [r7, #16]
 800e356:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e35a:	d209      	bcs.n	800e370 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e35c:	693b      	ldr	r3, [r7, #16]
 800e35e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e360:	8bba      	ldrh	r2, [r7, #28]
 800e362:	429a      	cmp	r2, r3
 800e364:	d10b      	bne.n	800e37e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	6a1b      	ldr	r3, [r3, #32]
 800e36a:	899b      	ldrh	r3, [r3, #12]
 800e36c:	2b01      	cmp	r3, #1
 800e36e:	d906      	bls.n	800e37e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800e370:	2301      	movs	r3, #1
 800e372:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e374:	7ebb      	ldrb	r3, [r7, #26]
 800e376:	f043 0302 	orr.w	r3, r3, #2
 800e37a:	76bb      	strb	r3, [r7, #26]
 800e37c:	e001      	b.n	800e382 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800e37e:	2300      	movs	r3, #0
 800e380:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6858      	ldr	r0, [r3, #4]
 800e386:	7ebb      	ldrb	r3, [r7, #26]
 800e388:	8bba      	ldrh	r2, [r7, #28]
 800e38a:	6979      	ldr	r1, [r7, #20]
 800e38c:	f007 fe00 	bl	8015f90 <tcp_write>
 800e390:	4603      	mov	r3, r0
 800e392:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800e394:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d12c      	bne.n	800e3f6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6a1b      	ldr	r3, [r3, #32]
 800e3a0:	6999      	ldr	r1, [r3, #24]
 800e3a2:	8bba      	ldrh	r2, [r7, #28]
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6a1b      	ldr	r3, [r3, #32]
 800e3a8:	440a      	add	r2, r1
 800e3aa:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6a1b      	ldr	r3, [r3, #32]
 800e3b0:	6919      	ldr	r1, [r3, #16]
 800e3b2:	8bba      	ldrh	r2, [r7, #28]
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	6a1b      	ldr	r3, [r3, #32]
 800e3b8:	440a      	add	r2, r1
 800e3ba:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	6a1b      	ldr	r3, [r3, #32]
 800e3c0:	691a      	ldr	r2, [r3, #16]
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6a1b      	ldr	r3, [r3, #32]
 800e3c6:	689b      	ldr	r3, [r3, #8]
 800e3c8:	685b      	ldr	r3, [r3, #4]
 800e3ca:	429a      	cmp	r2, r3
 800e3cc:	d113      	bne.n	800e3f6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	6a1b      	ldr	r3, [r3, #32]
 800e3d2:	899a      	ldrh	r2, [r3, #12]
 800e3d4:	3a01      	subs	r2, #1
 800e3d6:	b292      	uxth	r2, r2
 800e3d8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	6a1b      	ldr	r3, [r3, #32]
 800e3de:	899b      	ldrh	r3, [r3, #12]
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d008      	beq.n	800e3f6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	6a1b      	ldr	r3, [r3, #32]
 800e3e8:	689a      	ldr	r2, [r3, #8]
 800e3ea:	3208      	adds	r2, #8
 800e3ec:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800e3ee:	687b      	ldr	r3, [r7, #4]
 800e3f0:	6a1b      	ldr	r3, [r3, #32]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800e3f6:	7e7b      	ldrb	r3, [r7, #25]
 800e3f8:	2b00      	cmp	r3, #0
 800e3fa:	d004      	beq.n	800e406 <lwip_netconn_do_writemore+0x222>
 800e3fc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e400:	2b00      	cmp	r3, #0
 800e402:	f43f af50 	beq.w	800e2a6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800e406:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d004      	beq.n	800e418 <lwip_netconn_do_writemore+0x234>
 800e40e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e412:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e416:	d146      	bne.n	800e4a6 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800e418:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800e41a:	7e3b      	ldrb	r3, [r7, #24]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d02b      	beq.n	800e478 <lwip_netconn_do_writemore+0x294>
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6a1b      	ldr	r3, [r3, #32]
 800e424:	699a      	ldr	r2, [r3, #24]
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	6a1b      	ldr	r3, [r3, #32]
 800e42a:	695b      	ldr	r3, [r3, #20]
 800e42c:	429a      	cmp	r2, r3
 800e42e:	d223      	bcs.n	800e478 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e434:	2b00      	cmp	r3, #0
 800e436:	d005      	beq.n	800e444 <lwip_netconn_do_writemore+0x260>
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e43c:	2200      	movs	r2, #0
 800e43e:	2103      	movs	r1, #3
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	7f1b      	ldrb	r3, [r3, #28]
 800e448:	f043 0310 	orr.w	r3, r3, #16
 800e44c:	b2da      	uxtb	r2, r3
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	771a      	strb	r2, [r3, #28]
 800e452:	e028      	b.n	800e4a6 <lwip_netconn_do_writemore+0x2c2>
 800e454:	080220a0 	.word	0x080220a0
 800e458:	080221f8 	.word	0x080221f8
 800e45c:	080220e4 	.word	0x080220e4
 800e460:	08022500 	.word	0x08022500
 800e464:	08022208 	.word	0x08022208
 800e468:	08022520 	.word	0x08022520
 800e46c:	08022538 	.word	0x08022538
 800e470:	08022578 	.word	0x08022578
 800e474:	080225a0 	.word	0x080225a0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	685b      	ldr	r3, [r3, #4]
 800e47c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800e480:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800e484:	d305      	bcc.n	800e492 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	685b      	ldr	r3, [r3, #4]
 800e48a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800e48e:	2b04      	cmp	r3, #4
 800e490:	d909      	bls.n	800e4a6 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e496:	2b00      	cmp	r3, #0
 800e498:	d005      	beq.n	800e4a6 <lwip_netconn_do_writemore+0x2c2>
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e49e:	2200      	movs	r2, #0
 800e4a0:	2103      	movs	r1, #3
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800e4a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d11d      	bne.n	800e4ea <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	6a1b      	ldr	r3, [r3, #32]
 800e4b2:	699a      	ldr	r2, [r3, #24]
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	6a1b      	ldr	r3, [r3, #32]
 800e4b8:	695b      	ldr	r3, [r3, #20]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	d002      	beq.n	800e4c4 <lwip_netconn_do_writemore+0x2e0>
 800e4be:	7e3b      	ldrb	r3, [r7, #24]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d001      	beq.n	800e4c8 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800e4c4:	2301      	movs	r3, #1
 800e4c6:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	685b      	ldr	r3, [r3, #4]
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f008 fb49 	bl	8016b64 <tcp_output>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800e4d6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800e4da:	f113 0f04 	cmn.w	r3, #4
 800e4de:	d12c      	bne.n	800e53a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e4e0:	7b3b      	ldrb	r3, [r7, #12]
 800e4e2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e4e4:	2301      	movs	r3, #1
 800e4e6:	76fb      	strb	r3, [r7, #27]
 800e4e8:	e027      	b.n	800e53a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800e4ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4f2:	d120      	bne.n	800e536 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	685b      	ldr	r3, [r3, #4]
 800e4f8:	4618      	mov	r0, r3
 800e4fa:	f008 fb33 	bl	8016b64 <tcp_output>
 800e4fe:	4603      	mov	r3, r0
 800e500:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800e502:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800e506:	f113 0f04 	cmn.w	r3, #4
 800e50a:	d104      	bne.n	800e516 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800e50c:	7b7b      	ldrb	r3, [r7, #13]
 800e50e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e510:	2301      	movs	r3, #1
 800e512:	76fb      	strb	r3, [r7, #27]
 800e514:	e011      	b.n	800e53a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800e516:	7e3b      	ldrb	r3, [r7, #24]
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d00e      	beq.n	800e53a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	6a1b      	ldr	r3, [r3, #32]
 800e520:	699b      	ldr	r3, [r3, #24]
 800e522:	2b00      	cmp	r3, #0
 800e524:	d102      	bne.n	800e52c <lwip_netconn_do_writemore+0x348>
 800e526:	f06f 0306 	mvn.w	r3, #6
 800e52a:	e000      	b.n	800e52e <lwip_netconn_do_writemore+0x34a>
 800e52c:	2300      	movs	r3, #0
 800e52e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800e530:	2301      	movs	r3, #1
 800e532:	76fb      	strb	r3, [r7, #27]
 800e534:	e001      	b.n	800e53a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800e536:	2301      	movs	r3, #1
 800e538:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800e53a:	7efb      	ldrb	r3, [r7, #27]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d015      	beq.n	800e56c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6a1b      	ldr	r3, [r3, #32]
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	330c      	adds	r3, #12
 800e548:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	6a1b      	ldr	r3, [r3, #32]
 800e54e:	7ffa      	ldrb	r2, [r7, #31]
 800e550:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2200      	movs	r2, #0
 800e556:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	2200      	movs	r2, #0
 800e55c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e55e:	78fb      	ldrb	r3, [r7, #3]
 800e560:	2b00      	cmp	r3, #0
 800e562:	d006      	beq.n	800e572 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800e564:	68b8      	ldr	r0, [r7, #8]
 800e566:	f00e fd5d 	bl	801d024 <sys_sem_signal>
 800e56a:	e002      	b.n	800e572 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800e56c:	f04f 33ff 	mov.w	r3, #4294967295
 800e570:	e000      	b.n	800e574 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800e572:	2300      	movs	r3, #0
}
 800e574:	4618      	mov	r0, r3
 800e576:	3720      	adds	r7, #32
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}

0800e57c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800e57c:	b580      	push	{r7, lr}
 800e57e:	b084      	sub	sp, #16
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7fe fd25 	bl	800cfdc <netconn_err>
 800e592:	4603      	mov	r3, r0
 800e594:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e596:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d166      	bne.n	800e66c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e59e:	68bb      	ldr	r3, [r7, #8]
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	781b      	ldrb	r3, [r3, #0]
 800e5a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e5a8:	2b10      	cmp	r3, #16
 800e5aa:	d15d      	bne.n	800e668 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	785b      	ldrb	r3, [r3, #1]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d002      	beq.n	800e5bc <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800e5b6:	23fb      	movs	r3, #251	@ 0xfb
 800e5b8:	73fb      	strb	r3, [r7, #15]
 800e5ba:	e057      	b.n	800e66c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d04d      	beq.n	800e662 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800e5c6:	68bb      	ldr	r3, [r7, #8]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2201      	movs	r2, #1
 800e5cc:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e5ce:	68bb      	ldr	r3, [r7, #8]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	6a1b      	ldr	r3, [r3, #32]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d006      	beq.n	800e5e6 <lwip_netconn_do_write+0x6a>
 800e5d8:	4b28      	ldr	r3, [pc, #160]	@ (800e67c <lwip_netconn_do_write+0x100>)
 800e5da:	f240 7223 	movw	r2, #1827	@ 0x723
 800e5de:	4928      	ldr	r1, [pc, #160]	@ (800e680 <lwip_netconn_do_write+0x104>)
 800e5e0:	4828      	ldr	r0, [pc, #160]	@ (800e684 <lwip_netconn_do_write+0x108>)
 800e5e2:	f00f fe7b 	bl	801e2dc <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800e5e6:	68bb      	ldr	r3, [r7, #8]
 800e5e8:	695b      	ldr	r3, [r3, #20]
 800e5ea:	2b00      	cmp	r3, #0
 800e5ec:	d106      	bne.n	800e5fc <lwip_netconn_do_write+0x80>
 800e5ee:	4b23      	ldr	r3, [pc, #140]	@ (800e67c <lwip_netconn_do_write+0x100>)
 800e5f0:	f240 7224 	movw	r2, #1828	@ 0x724
 800e5f4:	4924      	ldr	r1, [pc, #144]	@ (800e688 <lwip_netconn_do_write+0x10c>)
 800e5f6:	4823      	ldr	r0, [pc, #140]	@ (800e684 <lwip_netconn_do_write+0x108>)
 800e5f8:	f00f fe70 	bl	801e2dc <iprintf>
        msg->conn->current_msg = msg;
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	68ba      	ldr	r2, [r7, #8]
 800e602:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	2100      	movs	r1, #0
 800e60a:	4618      	mov	r0, r3
 800e60c:	f7ff fdea 	bl	800e1e4 <lwip_netconn_do_writemore>
 800e610:	4603      	mov	r3, r0
 800e612:	2b00      	cmp	r3, #0
 800e614:	d02e      	beq.n	800e674 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800e616:	68bb      	ldr	r3, [r7, #8]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	785b      	ldrb	r3, [r3, #1]
 800e61c:	2b01      	cmp	r3, #1
 800e61e:	d006      	beq.n	800e62e <lwip_netconn_do_write+0xb2>
 800e620:	4b16      	ldr	r3, [pc, #88]	@ (800e67c <lwip_netconn_do_write+0x100>)
 800e622:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800e626:	4919      	ldr	r1, [pc, #100]	@ (800e68c <lwip_netconn_do_write+0x110>)
 800e628:	4816      	ldr	r0, [pc, #88]	@ (800e684 <lwip_netconn_do_write+0x108>)
 800e62a:	f00f fe57 	bl	801e2dc <iprintf>
          UNLOCK_TCPIP_CORE();
 800e62e:	4818      	ldr	r0, [pc, #96]	@ (800e690 <lwip_netconn_do_write+0x114>)
 800e630:	f00e fd61 	bl	801d0f6 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e634:	68bb      	ldr	r3, [r7, #8]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	330c      	adds	r3, #12
 800e63a:	2100      	movs	r1, #0
 800e63c:	4618      	mov	r0, r3
 800e63e:	f00e fcc0 	bl	801cfc2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800e642:	4813      	ldr	r0, [pc, #76]	@ (800e690 <lwip_netconn_do_write+0x114>)
 800e644:	f00e fd48 	bl	801d0d8 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	785b      	ldrb	r3, [r3, #1]
 800e64e:	2b01      	cmp	r3, #1
 800e650:	d110      	bne.n	800e674 <lwip_netconn_do_write+0xf8>
 800e652:	4b0a      	ldr	r3, [pc, #40]	@ (800e67c <lwip_netconn_do_write+0x100>)
 800e654:	f240 722c 	movw	r2, #1836	@ 0x72c
 800e658:	490c      	ldr	r1, [pc, #48]	@ (800e68c <lwip_netconn_do_write+0x110>)
 800e65a:	480a      	ldr	r0, [pc, #40]	@ (800e684 <lwip_netconn_do_write+0x108>)
 800e65c:	f00f fe3e 	bl	801e2dc <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800e660:	e008      	b.n	800e674 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800e662:	23f5      	movs	r3, #245	@ 0xf5
 800e664:	73fb      	strb	r3, [r7, #15]
 800e666:	e001      	b.n	800e66c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800e668:	23fa      	movs	r3, #250	@ 0xfa
 800e66a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800e66c:	68bb      	ldr	r3, [r7, #8]
 800e66e:	7bfa      	ldrb	r2, [r7, #15]
 800e670:	711a      	strb	r2, [r3, #4]
 800e672:	e000      	b.n	800e676 <lwip_netconn_do_write+0xfa>
        return;
 800e674:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800e676:	3710      	adds	r7, #16
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}
 800e67c:	080220a0 	.word	0x080220a0
 800e680:	08022444 	.word	0x08022444
 800e684:	080220e4 	.word	0x080220e4
 800e688:	080225cc 	.word	0x080225cc
 800e68c:	08022460 	.word	0x08022460
 800e690:	2000e924 	.word	0x2000e924

0800e694 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800e694:	b480      	push	{r7}
 800e696:	b083      	sub	sp, #12
 800e698:	af00      	add	r7, sp, #0
 800e69a:	4603      	mov	r3, r0
 800e69c:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800e69e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	dc04      	bgt.n	800e6b0 <err_to_errno+0x1c>
 800e6a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6aa:	f113 0f10 	cmn.w	r3, #16
 800e6ae:	da01      	bge.n	800e6b4 <err_to_errno+0x20>
    return EIO;
 800e6b0:	2305      	movs	r3, #5
 800e6b2:	e005      	b.n	800e6c0 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800e6b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e6b8:	425b      	negs	r3, r3
 800e6ba:	4a04      	ldr	r2, [pc, #16]	@ (800e6cc <err_to_errno+0x38>)
 800e6bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	370c      	adds	r7, #12
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ca:	4770      	bx	lr
 800e6cc:	08025bf4 	.word	0x08025bf4

0800e6d0 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800e6d0:	b580      	push	{r7, lr}
 800e6d2:	b082      	sub	sp, #8
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d013      	beq.n	800e706 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d00b      	beq.n	800e6fe <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	f002 fd74 	bl	80111d8 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	605a      	str	r2, [r3, #4]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	685a      	ldr	r2, [r3, #4]
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800e6fe:	6879      	ldr	r1, [r7, #4]
 800e700:	2006      	movs	r0, #6
 800e702:	f001 feb9 	bl	8010478 <memp_free>
  }
}
 800e706:	bf00      	nop
 800e708:	3708      	adds	r7, #8
 800e70a:	46bd      	mov	sp, r7
 800e70c:	bd80      	pop	{r7, pc}
	...

0800e710 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b082      	sub	sp, #8
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d106      	bne.n	800e72c <netbuf_free+0x1c>
 800e71e:	4b0d      	ldr	r3, [pc, #52]	@ (800e754 <netbuf_free+0x44>)
 800e720:	2281      	movs	r2, #129	@ 0x81
 800e722:	490d      	ldr	r1, [pc, #52]	@ (800e758 <netbuf_free+0x48>)
 800e724:	480d      	ldr	r0, [pc, #52]	@ (800e75c <netbuf_free+0x4c>)
 800e726:	f00f fdd9 	bl	801e2dc <iprintf>
 800e72a:	e00f      	b.n	800e74c <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	2b00      	cmp	r3, #0
 800e732:	d004      	beq.n	800e73e <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	681b      	ldr	r3, [r3, #0]
 800e738:	4618      	mov	r0, r3
 800e73a:	f002 fd4d 	bl	80111d8 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2200      	movs	r2, #0
 800e742:	605a      	str	r2, [r3, #4]
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	685a      	ldr	r2, [r3, #4]
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800e74c:	3708      	adds	r7, #8
 800e74e:	46bd      	mov	sp, r7
 800e750:	bd80      	pop	{r7, pc}
 800e752:	bf00      	nop
 800e754:	08022620 	.word	0x08022620
 800e758:	080226bc 	.word	0x080226bc
 800e75c:	08022670 	.word	0x08022670

0800e760 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b084      	sub	sp, #16
 800e764:	af00      	add	r7, sp, #0
 800e766:	60f8      	str	r0, [r7, #12]
 800e768:	60b9      	str	r1, [r7, #8]
 800e76a:	4613      	mov	r3, r2
 800e76c:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d108      	bne.n	800e786 <netbuf_ref+0x26>
 800e774:	4b1c      	ldr	r3, [pc, #112]	@ (800e7e8 <netbuf_ref+0x88>)
 800e776:	2299      	movs	r2, #153	@ 0x99
 800e778:	491c      	ldr	r1, [pc, #112]	@ (800e7ec <netbuf_ref+0x8c>)
 800e77a:	481d      	ldr	r0, [pc, #116]	@ (800e7f0 <netbuf_ref+0x90>)
 800e77c:	f00f fdae 	bl	801e2dc <iprintf>
 800e780:	f06f 030f 	mvn.w	r3, #15
 800e784:	e02b      	b.n	800e7de <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800e786:	68fb      	ldr	r3, [r7, #12]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d004      	beq.n	800e798 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800e78e:	68fb      	ldr	r3, [r7, #12]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	4618      	mov	r0, r3
 800e794:	f002 fd20 	bl	80111d8 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800e798:	2241      	movs	r2, #65	@ 0x41
 800e79a:	2100      	movs	r1, #0
 800e79c:	2036      	movs	r0, #54	@ 0x36
 800e79e:	f002 fa37 	bl	8010c10 <pbuf_alloc>
 800e7a2:	4602      	mov	r2, r0
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800e7a8:	68fb      	ldr	r3, [r7, #12]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d105      	bne.n	800e7bc <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800e7b0:	68fb      	ldr	r3, [r7, #12]
 800e7b2:	2200      	movs	r2, #0
 800e7b4:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800e7b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e7ba:	e010      	b.n	800e7de <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800e7bc:	68fb      	ldr	r3, [r7, #12]
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	68ba      	ldr	r2, [r7, #8]
 800e7c2:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	88fa      	ldrh	r2, [r7, #6]
 800e7ca:	811a      	strh	r2, [r3, #8]
 800e7cc:	68fa      	ldr	r2, [r7, #12]
 800e7ce:	6812      	ldr	r2, [r2, #0]
 800e7d0:	891b      	ldrh	r3, [r3, #8]
 800e7d2:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681a      	ldr	r2, [r3, #0]
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800e7dc:	2300      	movs	r3, #0
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3710      	adds	r7, #16
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	08022620 	.word	0x08022620
 800e7ec:	080226d8 	.word	0x080226d8
 800e7f0:	08022670 	.word	0x08022670

0800e7f4 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b085      	sub	sp, #20
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2b00      	cmp	r3, #0
 800e804:	db02      	blt.n	800e80c <tryget_socket_unconn_nouse+0x18>
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	2b03      	cmp	r3, #3
 800e80a:	dd01      	ble.n	800e810 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800e80c:	2300      	movs	r3, #0
 800e80e:	e003      	b.n	800e818 <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800e810:	68fb      	ldr	r3, [r7, #12]
 800e812:	011b      	lsls	r3, r3, #4
 800e814:	4a03      	ldr	r2, [pc, #12]	@ (800e824 <tryget_socket_unconn_nouse+0x30>)
 800e816:	4413      	add	r3, r2
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3714      	adds	r7, #20
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr
 800e824:	2000e8d4 	.word	0x2000e8d4

0800e828 <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b084      	sub	sp, #16
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	f7ff ffdf 	bl	800e7f4 <tryget_socket_unconn_nouse>
 800e836:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800e838:	68fb      	ldr	r3, [r7, #12]
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}

0800e842 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800e842:	b580      	push	{r7, lr}
 800e844:	b084      	sub	sp, #16
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f7ff ffec 	bl	800e828 <tryget_socket_unconn>
 800e850:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	2b00      	cmp	r3, #0
 800e856:	d005      	beq.n	800e864 <tryget_socket+0x22>
    if (sock->conn) {
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d001      	beq.n	800e864 <tryget_socket+0x22>
      return sock;
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	e000      	b.n	800e866 <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800e864:	2300      	movs	r3, #0
}
 800e866:	4618      	mov	r0, r3
 800e868:	3710      	adds	r7, #16
 800e86a:	46bd      	mov	sp, r7
 800e86c:	bd80      	pop	{r7, pc}
	...

0800e870 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800e870:	b580      	push	{r7, lr}
 800e872:	b084      	sub	sp, #16
 800e874:	af00      	add	r7, sp, #0
 800e876:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800e878:	6878      	ldr	r0, [r7, #4]
 800e87a:	f7ff ffe2 	bl	800e842 <tryget_socket>
 800e87e:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800e880:	68fb      	ldr	r3, [r7, #12]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d104      	bne.n	800e890 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800e886:	4b05      	ldr	r3, [pc, #20]	@ (800e89c <get_socket+0x2c>)
 800e888:	2209      	movs	r2, #9
 800e88a:	601a      	str	r2, [r3, #0]
    return NULL;
 800e88c:	2300      	movs	r3, #0
 800e88e:	e000      	b.n	800e892 <get_socket+0x22>
  }
  return sock;
 800e890:	68fb      	ldr	r3, [r7, #12]
}
 800e892:	4618      	mov	r0, r3
 800e894:	3710      	adds	r7, #16
 800e896:	46bd      	mov	sp, r7
 800e898:	bd80      	pop	{r7, pc}
 800e89a:	bf00      	nop
 800e89c:	2001294c 	.word	0x2001294c

0800e8a0 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800e8a0:	b580      	push	{r7, lr}
 800e8a2:	b084      	sub	sp, #16
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
 800e8a8:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800e8aa:	2300      	movs	r3, #0
 800e8ac:	60fb      	str	r3, [r7, #12]
 800e8ae:	e052      	b.n	800e956 <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800e8b0:	f00e fc4e 	bl	801d150 <sys_arch_protect>
 800e8b4:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800e8b6:	4a2c      	ldr	r2, [pc, #176]	@ (800e968 <alloc_socket+0xc8>)
 800e8b8:	68fb      	ldr	r3, [r7, #12]
 800e8ba:	011b      	lsls	r3, r3, #4
 800e8bc:	4413      	add	r3, r2
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	2b00      	cmp	r3, #0
 800e8c2:	d142      	bne.n	800e94a <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800e8c4:	4a28      	ldr	r2, [pc, #160]	@ (800e968 <alloc_socket+0xc8>)
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	011b      	lsls	r3, r3, #4
 800e8ca:	4413      	add	r3, r2
 800e8cc:	687a      	ldr	r2, [r7, #4]
 800e8ce:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800e8d0:	68b8      	ldr	r0, [r7, #8]
 800e8d2:	f00e fc4b 	bl	801d16c <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800e8d6:	4a24      	ldr	r2, [pc, #144]	@ (800e968 <alloc_socket+0xc8>)
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	011b      	lsls	r3, r3, #4
 800e8dc:	4413      	add	r3, r2
 800e8de:	3304      	adds	r3, #4
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800e8e4:	4a20      	ldr	r2, [pc, #128]	@ (800e968 <alloc_socket+0xc8>)
 800e8e6:	68fb      	ldr	r3, [r7, #12]
 800e8e8:	011b      	lsls	r3, r3, #4
 800e8ea:	4413      	add	r3, r2
 800e8ec:	330e      	adds	r3, #14
 800e8ee:	781b      	ldrb	r3, [r3, #0]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d006      	beq.n	800e902 <alloc_socket+0x62>
 800e8f4:	4b1d      	ldr	r3, [pc, #116]	@ (800e96c <alloc_socket+0xcc>)
 800e8f6:	f240 220e 	movw	r2, #526	@ 0x20e
 800e8fa:	491d      	ldr	r1, [pc, #116]	@ (800e970 <alloc_socket+0xd0>)
 800e8fc:	481d      	ldr	r0, [pc, #116]	@ (800e974 <alloc_socket+0xd4>)
 800e8fe:	f00f fced 	bl	801e2dc <iprintf>
      sockets[i].rcvevent   = 0;
 800e902:	4a19      	ldr	r2, [pc, #100]	@ (800e968 <alloc_socket+0xc8>)
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	011b      	lsls	r3, r3, #4
 800e908:	4413      	add	r3, r2
 800e90a:	3308      	adds	r3, #8
 800e90c:	2200      	movs	r2, #0
 800e90e:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	781b      	ldrb	r3, [r3, #0]
 800e914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e918:	2b10      	cmp	r3, #16
 800e91a:	d102      	bne.n	800e922 <alloc_socket+0x82>
 800e91c:	683b      	ldr	r3, [r7, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d001      	beq.n	800e926 <alloc_socket+0x86>
 800e922:	2301      	movs	r3, #1
 800e924:	e000      	b.n	800e928 <alloc_socket+0x88>
 800e926:	2300      	movs	r3, #0
 800e928:	b299      	uxth	r1, r3
 800e92a:	4a0f      	ldr	r2, [pc, #60]	@ (800e968 <alloc_socket+0xc8>)
 800e92c:	68fb      	ldr	r3, [r7, #12]
 800e92e:	011b      	lsls	r3, r3, #4
 800e930:	4413      	add	r3, r2
 800e932:	330a      	adds	r3, #10
 800e934:	460a      	mov	r2, r1
 800e936:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800e938:	4a0b      	ldr	r2, [pc, #44]	@ (800e968 <alloc_socket+0xc8>)
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	011b      	lsls	r3, r3, #4
 800e93e:	4413      	add	r3, r2
 800e940:	330c      	adds	r3, #12
 800e942:	2200      	movs	r2, #0
 800e944:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800e946:	68fb      	ldr	r3, [r7, #12]
 800e948:	e00a      	b.n	800e960 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800e94a:	68b8      	ldr	r0, [r7, #8]
 800e94c:	f00e fc0e 	bl	801d16c <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	3301      	adds	r3, #1
 800e954:	60fb      	str	r3, [r7, #12]
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	2b03      	cmp	r3, #3
 800e95a:	dda9      	ble.n	800e8b0 <alloc_socket+0x10>
  }
  return -1;
 800e95c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e960:	4618      	mov	r0, r3
 800e962:	3710      	adds	r7, #16
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	2000e8d4 	.word	0x2000e8d4
 800e96c:	080227b8 	.word	0x080227b8
 800e970:	080227ec 	.word	0x080227ec
 800e974:	0802280c 	.word	0x0802280c

0800e978 <lwip_connect>:
  return 0;
}

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 800e978:	b580      	push	{r7, lr}
 800e97a:	b08c      	sub	sp, #48	@ 0x30
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	60f8      	str	r0, [r7, #12]
 800e980:	60b9      	str	r1, [r7, #8]
 800e982:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 800e984:	68f8      	ldr	r0, [r7, #12]
 800e986:	f7ff ff73 	bl	800e870 <get_socket>
 800e98a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (!sock) {
 800e98c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d102      	bne.n	800e998 <lwip_connect+0x20>
    return -1;
 800e992:	f04f 33ff 	mov.w	r3, #4294967295
 800e996:	e062      	b.n	800ea5e <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 800e998:	68bb      	ldr	r3, [r7, #8]
 800e99a:	785b      	ldrb	r3, [r3, #1]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d108      	bne.n	800e9b2 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 800e9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9a2:	681b      	ldr	r3, [r3, #0]
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	f7fe f9ef 	bl	800cd88 <netconn_disconnect>
 800e9aa:	4603      	mov	r3, r0
 800e9ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800e9b0:	e039      	b.n	800ea26 <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2b10      	cmp	r3, #16
 800e9b6:	d10c      	bne.n	800e9d2 <lwip_connect+0x5a>
 800e9b8:	68bb      	ldr	r3, [r7, #8]
 800e9ba:	785b      	ldrb	r3, [r3, #1]
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d003      	beq.n	800e9c8 <lwip_connect+0x50>
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	785b      	ldrb	r3, [r3, #1]
 800e9c4:	2b02      	cmp	r3, #2
 800e9c6:	d104      	bne.n	800e9d2 <lwip_connect+0x5a>
 800e9c8:	68bb      	ldr	r3, [r7, #8]
 800e9ca:	f003 0303 	and.w	r3, r3, #3
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d014      	beq.n	800e9fc <lwip_connect+0x84>
 800e9d2:	4b25      	ldr	r3, [pc, #148]	@ (800ea68 <lwip_connect+0xf0>)
 800e9d4:	f240 3247 	movw	r2, #839	@ 0x347
 800e9d8:	4924      	ldr	r1, [pc, #144]	@ (800ea6c <lwip_connect+0xf4>)
 800e9da:	4825      	ldr	r0, [pc, #148]	@ (800ea70 <lwip_connect+0xf8>)
 800e9dc:	f00f fc7e 	bl	801e2dc <iprintf>
 800e9e0:	f06f 000f 	mvn.w	r0, #15
 800e9e4:	f7ff fe56 	bl	800e694 <err_to_errno>
 800e9e8:	6238      	str	r0, [r7, #32]
 800e9ea:	6a3b      	ldr	r3, [r7, #32]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d002      	beq.n	800e9f6 <lwip_connect+0x7e>
 800e9f0:	4a20      	ldr	r2, [pc, #128]	@ (800ea74 <lwip_connect+0xfc>)
 800e9f2:	6a3b      	ldr	r3, [r7, #32]
 800e9f4:	6013      	str	r3, [r2, #0]
 800e9f6:	f04f 33ff 	mov.w	r3, #4294967295
 800e9fa:	e030      	b.n	800ea5e <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800e9fc:	68bb      	ldr	r3, [r7, #8]
 800e9fe:	685b      	ldr	r3, [r3, #4]
 800ea00:	617b      	str	r3, [r7, #20]
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	885b      	ldrh	r3, [r3, #2]
 800ea06:	4618      	mov	r0, r3
 800ea08:	f000 fcfa 	bl	800f400 <lwip_htons>
 800ea0c:	4603      	mov	r3, r0
 800ea0e:	84fb      	strh	r3, [r7, #38]	@ 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800ea10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800ea16:	f107 0114 	add.w	r1, r7, #20
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7fe f97c 	bl	800cd18 <netconn_connect>
 800ea20:	4603      	mov	r3, r0
 800ea22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  if (err != ERR_OK) {
 800ea26:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d00e      	beq.n	800ea4c <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800ea2e:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7ff fe2e 	bl	800e694 <err_to_errno>
 800ea38:	61b8      	str	r0, [r7, #24]
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d002      	beq.n	800ea46 <lwip_connect+0xce>
 800ea40:	4a0c      	ldr	r2, [pc, #48]	@ (800ea74 <lwip_connect+0xfc>)
 800ea42:	69bb      	ldr	r3, [r7, #24]
 800ea44:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800ea46:	f04f 33ff 	mov.w	r3, #4294967295
 800ea4a:	e008      	b.n	800ea5e <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	61fb      	str	r3, [r7, #28]
 800ea50:	69fb      	ldr	r3, [r7, #28]
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d002      	beq.n	800ea5c <lwip_connect+0xe4>
 800ea56:	4a07      	ldr	r2, [pc, #28]	@ (800ea74 <lwip_connect+0xfc>)
 800ea58:	69fb      	ldr	r3, [r7, #28]
 800ea5a:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800ea5c:	2300      	movs	r3, #0
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3730      	adds	r7, #48	@ 0x30
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	080227b8 	.word	0x080227b8
 800ea6c:	08022890 	.word	0x08022890
 800ea70:	0802280c 	.word	0x0802280c
 800ea74:	2001294c 	.word	0x2001294c

0800ea78 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b08a      	sub	sp, #40	@ 0x28
 800ea7c:	af02      	add	r7, sp, #8
 800ea7e:	60f8      	str	r0, [r7, #12]
 800ea80:	60b9      	str	r1, [r7, #8]
 800ea82:	607a      	str	r2, [r7, #4]
 800ea84:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800ea86:	68f8      	ldr	r0, [r7, #12]
 800ea88:	f7ff fef2 	bl	800e870 <get_socket>
 800ea8c:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800ea8e:	69fb      	ldr	r3, [r7, #28]
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d102      	bne.n	800ea9a <lwip_send+0x22>
    return -1;
 800ea94:	f04f 33ff 	mov.w	r3, #4294967295
 800ea98:	e046      	b.n	800eb28 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800ea9a:	69fb      	ldr	r3, [r7, #28]
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	781b      	ldrb	r3, [r3, #0]
 800eaa0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800eaa4:	2b10      	cmp	r3, #16
 800eaa6:	d00b      	beq.n	800eac0 <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	9301      	str	r3, [sp, #4]
 800eaac:	2300      	movs	r3, #0
 800eaae:	9300      	str	r3, [sp, #0]
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	687a      	ldr	r2, [r7, #4]
 800eab4:	68b9      	ldr	r1, [r7, #8]
 800eab6:	68f8      	ldr	r0, [r7, #12]
 800eab8:	f000 f83c 	bl	800eb34 <lwip_sendto>
 800eabc:	4603      	mov	r3, r0
 800eabe:	e033      	b.n	800eb28 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d001      	beq.n	800eace <lwip_send+0x56>
 800eaca:	2203      	movs	r2, #3
 800eacc:	e000      	b.n	800ead0 <lwip_send+0x58>
 800eace:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	105b      	asrs	r3, r3, #1
 800ead4:	b25b      	sxtb	r3, r3
 800ead6:	f003 0304 	and.w	r3, r3, #4
 800eada:	b25b      	sxtb	r3, r3
 800eadc:	4313      	orrs	r3, r2
 800eade:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800eae0:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800eae2:	2300      	movs	r3, #0
 800eae4:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800eae6:	69fb      	ldr	r3, [r7, #28]
 800eae8:	6818      	ldr	r0, [r3, #0]
 800eaea:	7efa      	ldrb	r2, [r7, #27]
 800eaec:	f107 0310 	add.w	r3, r7, #16
 800eaf0:	9300      	str	r3, [sp, #0]
 800eaf2:	4613      	mov	r3, r2
 800eaf4:	687a      	ldr	r2, [r7, #4]
 800eaf6:	68b9      	ldr	r1, [r7, #8]
 800eaf8:	f7fe f99e 	bl	800ce38 <netconn_write_partly>
 800eafc:	4603      	mov	r3, r0
 800eafe:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800eb00:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eb04:	4618      	mov	r0, r3
 800eb06:	f7ff fdc5 	bl	800e694 <err_to_errno>
 800eb0a:	6178      	str	r0, [r7, #20]
 800eb0c:	697b      	ldr	r3, [r7, #20]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d002      	beq.n	800eb18 <lwip_send+0xa0>
 800eb12:	4a07      	ldr	r2, [pc, #28]	@ (800eb30 <lwip_send+0xb8>)
 800eb14:	697b      	ldr	r3, [r7, #20]
 800eb16:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800eb18:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d101      	bne.n	800eb24 <lwip_send+0xac>
 800eb20:	693b      	ldr	r3, [r7, #16]
 800eb22:	e001      	b.n	800eb28 <lwip_send+0xb0>
 800eb24:	f04f 33ff 	mov.w	r3, #4294967295
}
 800eb28:	4618      	mov	r0, r3
 800eb2a:	3720      	adds	r7, #32
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	bd80      	pop	{r7, pc}
 800eb30:	2001294c 	.word	0x2001294c

0800eb34 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b08e      	sub	sp, #56	@ 0x38
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	607a      	str	r2, [r7, #4]
 800eb40:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800eb42:	68f8      	ldr	r0, [r7, #12]
 800eb44:	f7ff fe94 	bl	800e870 <get_socket>
 800eb48:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 800eb4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d102      	bne.n	800eb56 <lwip_sendto+0x22>
    return -1;
 800eb50:	f04f 33ff 	mov.w	r3, #4294967295
 800eb54:	e093      	b.n	800ec7e <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800eb56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	781b      	ldrb	r3, [r3, #0]
 800eb5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800eb60:	2b10      	cmp	r3, #16
 800eb62:	d107      	bne.n	800eb74 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	687a      	ldr	r2, [r7, #4]
 800eb68:	68b9      	ldr	r1, [r7, #8]
 800eb6a:	68f8      	ldr	r0, [r7, #12]
 800eb6c:	f7ff ff84 	bl	800ea78 <lwip_send>
 800eb70:	4603      	mov	r3, r0
 800eb72:	e084      	b.n	800ec7e <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eb7a:	d30a      	bcc.n	800eb92 <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800eb7c:	235a      	movs	r3, #90	@ 0x5a
 800eb7e:	623b      	str	r3, [r7, #32]
 800eb80:	6a3b      	ldr	r3, [r7, #32]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d002      	beq.n	800eb8c <lwip_sendto+0x58>
 800eb86:	4a40      	ldr	r2, [pc, #256]	@ (800ec88 <lwip_sendto+0x154>)
 800eb88:	6a3b      	ldr	r3, [r7, #32]
 800eb8a:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800eb8c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb90:	e075      	b.n	800ec7e <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800eb96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d102      	bne.n	800eba2 <lwip_sendto+0x6e>
 800eb9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d023      	beq.n	800ebea <lwip_sendto+0xb6>
 800eba2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800eba4:	2b10      	cmp	r3, #16
 800eba6:	d10b      	bne.n	800ebc0 <lwip_sendto+0x8c>
 800eba8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d008      	beq.n	800ebc0 <lwip_sendto+0x8c>
 800ebae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ebb0:	785b      	ldrb	r3, [r3, #1]
 800ebb2:	2b02      	cmp	r3, #2
 800ebb4:	d104      	bne.n	800ebc0 <lwip_sendto+0x8c>
 800ebb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ebb8:	f003 0303 	and.w	r3, r3, #3
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d014      	beq.n	800ebea <lwip_sendto+0xb6>
 800ebc0:	4b32      	ldr	r3, [pc, #200]	@ (800ec8c <lwip_sendto+0x158>)
 800ebc2:	f240 6252 	movw	r2, #1618	@ 0x652
 800ebc6:	4932      	ldr	r1, [pc, #200]	@ (800ec90 <lwip_sendto+0x15c>)
 800ebc8:	4832      	ldr	r0, [pc, #200]	@ (800ec94 <lwip_sendto+0x160>)
 800ebca:	f00f fb87 	bl	801e2dc <iprintf>
 800ebce:	f06f 000f 	mvn.w	r0, #15
 800ebd2:	f7ff fd5f 	bl	800e694 <err_to_errno>
 800ebd6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800ebd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d002      	beq.n	800ebe4 <lwip_sendto+0xb0>
 800ebde:	4a2a      	ldr	r2, [pc, #168]	@ (800ec88 <lwip_sendto+0x154>)
 800ebe0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ebe2:	6013      	str	r3, [r2, #0]
 800ebe4:	f04f 33ff 	mov.w	r3, #4294967295
 800ebe8:	e049      	b.n	800ec7e <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800ebea:	2300      	movs	r3, #0
 800ebec:	617b      	str	r3, [r7, #20]
 800ebee:	697b      	ldr	r3, [r7, #20]
 800ebf0:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800ebf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d00a      	beq.n	800ec0e <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800ebf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	61bb      	str	r3, [r7, #24]
 800ebfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ec00:	885b      	ldrh	r3, [r3, #2]
 800ec02:	4618      	mov	r0, r3
 800ec04:	f000 fbfc 	bl	800f400 <lwip_htons>
 800ec08:	4603      	mov	r3, r0
 800ec0a:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800ec0c:	e003      	b.n	800ec16 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800ec0e:	2300      	movs	r3, #0
 800ec10:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800ec12:	2300      	movs	r3, #0
 800ec14:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800ec16:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800ec18:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800ec1a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ec1c:	f107 0310 	add.w	r3, r7, #16
 800ec20:	68b9      	ldr	r1, [r7, #8]
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7ff fd9c 	bl	800e760 <netbuf_ref>
 800ec28:	4603      	mov	r3, r0
 800ec2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800ec2e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ec32:	2b00      	cmp	r3, #0
 800ec34:	d10a      	bne.n	800ec4c <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800ec36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	f107 0210 	add.w	r2, r7, #16
 800ec3e:	4611      	mov	r1, r2
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7fe f8cb 	bl	800cddc <netconn_send>
 800ec46:	4603      	mov	r3, r0
 800ec48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800ec4c:	f107 0310 	add.w	r3, r7, #16
 800ec50:	4618      	mov	r0, r3
 800ec52:	f7ff fd5d 	bl	800e710 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800ec56:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7ff fd1a 	bl	800e694 <err_to_errno>
 800ec60:	6278      	str	r0, [r7, #36]	@ 0x24
 800ec62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d002      	beq.n	800ec6e <lwip_sendto+0x13a>
 800ec68:	4a07      	ldr	r2, [pc, #28]	@ (800ec88 <lwip_sendto+0x154>)
 800ec6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec6c:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800ec6e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	d101      	bne.n	800ec7a <lwip_sendto+0x146>
 800ec76:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ec78:	e001      	b.n	800ec7e <lwip_sendto+0x14a>
 800ec7a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3738      	adds	r7, #56	@ 0x38
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}
 800ec86:	bf00      	nop
 800ec88:	2001294c 	.word	0x2001294c
 800ec8c:	080227b8 	.word	0x080227b8
 800ec90:	08022a98 	.word	0x08022a98
 800ec94:	0802280c 	.word	0x0802280c

0800ec98 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800ec98:	b580      	push	{r7, lr}
 800ec9a:	b086      	sub	sp, #24
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	60f8      	str	r0, [r7, #12]
 800eca0:	60b9      	str	r1, [r7, #8]
 800eca2:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800eca4:	68bb      	ldr	r3, [r7, #8]
 800eca6:	2b03      	cmp	r3, #3
 800eca8:	d009      	beq.n	800ecbe <lwip_socket+0x26>
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	2b03      	cmp	r3, #3
 800ecae:	dc23      	bgt.n	800ecf8 <lwip_socket+0x60>
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	2b01      	cmp	r3, #1
 800ecb4:	d019      	beq.n	800ecea <lwip_socket+0x52>
 800ecb6:	68bb      	ldr	r3, [r7, #8]
 800ecb8:	2b02      	cmp	r3, #2
 800ecba:	d009      	beq.n	800ecd0 <lwip_socket+0x38>
 800ecbc:	e01c      	b.n	800ecf8 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	b2db      	uxtb	r3, r3
 800ecc2:	4a22      	ldr	r2, [pc, #136]	@ (800ed4c <lwip_socket+0xb4>)
 800ecc4:	4619      	mov	r1, r3
 800ecc6:	2040      	movs	r0, #64	@ 0x40
 800ecc8:	f7fd ff6c 	bl	800cba4 <netconn_new_with_proto_and_callback>
 800eccc:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800ecce:	e019      	b.n	800ed04 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	2b88      	cmp	r3, #136	@ 0x88
 800ecd4:	d101      	bne.n	800ecda <lwip_socket+0x42>
 800ecd6:	2321      	movs	r3, #33	@ 0x21
 800ecd8:	e000      	b.n	800ecdc <lwip_socket+0x44>
 800ecda:	2320      	movs	r3, #32
 800ecdc:	4a1b      	ldr	r2, [pc, #108]	@ (800ed4c <lwip_socket+0xb4>)
 800ecde:	2100      	movs	r1, #0
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7fd ff5f 	bl	800cba4 <netconn_new_with_proto_and_callback>
 800ece6:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ece8:	e00c      	b.n	800ed04 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800ecea:	4a18      	ldr	r2, [pc, #96]	@ (800ed4c <lwip_socket+0xb4>)
 800ecec:	2100      	movs	r1, #0
 800ecee:	2010      	movs	r0, #16
 800ecf0:	f7fd ff58 	bl	800cba4 <netconn_new_with_proto_and_callback>
 800ecf4:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800ecf6:	e005      	b.n	800ed04 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800ecf8:	4b15      	ldr	r3, [pc, #84]	@ (800ed50 <lwip_socket+0xb8>)
 800ecfa:	2216      	movs	r2, #22
 800ecfc:	601a      	str	r2, [r3, #0]
      return -1;
 800ecfe:	f04f 33ff 	mov.w	r3, #4294967295
 800ed02:	e01e      	b.n	800ed42 <lwip_socket+0xaa>
  }

  if (!conn) {
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	2b00      	cmp	r3, #0
 800ed08:	d105      	bne.n	800ed16 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800ed0a:	4b11      	ldr	r3, [pc, #68]	@ (800ed50 <lwip_socket+0xb8>)
 800ed0c:	2269      	movs	r2, #105	@ 0x69
 800ed0e:	601a      	str	r2, [r3, #0]
    return -1;
 800ed10:	f04f 33ff 	mov.w	r3, #4294967295
 800ed14:	e015      	b.n	800ed42 <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800ed16:	2100      	movs	r1, #0
 800ed18:	6978      	ldr	r0, [r7, #20]
 800ed1a:	f7ff fdc1 	bl	800e8a0 <alloc_socket>
 800ed1e:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800ed20:	693b      	ldr	r3, [r7, #16]
 800ed22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed26:	d108      	bne.n	800ed3a <lwip_socket+0xa2>
    netconn_delete(conn);
 800ed28:	6978      	ldr	r0, [r7, #20]
 800ed2a:	f7fd ffd9 	bl	800cce0 <netconn_delete>
    set_errno(ENFILE);
 800ed2e:	4b08      	ldr	r3, [pc, #32]	@ (800ed50 <lwip_socket+0xb8>)
 800ed30:	2217      	movs	r2, #23
 800ed32:	601a      	str	r2, [r3, #0]
    return -1;
 800ed34:	f04f 33ff 	mov.w	r3, #4294967295
 800ed38:	e003      	b.n	800ed42 <lwip_socket+0xaa>
  }
  conn->socket = i;
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	693a      	ldr	r2, [r7, #16]
 800ed3e:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800ed40:	693b      	ldr	r3, [r7, #16]
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3718      	adds	r7, #24
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}
 800ed4a:	bf00      	nop
 800ed4c:	0800edfd 	.word	0x0800edfd
 800ed50:	2001294c 	.word	0x2001294c

0800ed54 <lwip_write>:

ssize_t
lwip_write(int s, const void *data, size_t size)
{
 800ed54:	b580      	push	{r7, lr}
 800ed56:	b084      	sub	sp, #16
 800ed58:	af00      	add	r7, sp, #0
 800ed5a:	60f8      	str	r0, [r7, #12]
 800ed5c:	60b9      	str	r1, [r7, #8]
 800ed5e:	607a      	str	r2, [r7, #4]
  return lwip_send(s, data, size, 0);
 800ed60:	2300      	movs	r3, #0
 800ed62:	687a      	ldr	r2, [r7, #4]
 800ed64:	68b9      	ldr	r1, [r7, #8]
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	f7ff fe86 	bl	800ea78 <lwip_send>
 800ed6c:	4603      	mov	r3, r0
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3710      	adds	r7, #16
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}

0800ed76 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800ed76:	b480      	push	{r7}
 800ed78:	b087      	sub	sp, #28
 800ed7a:	af00      	add	r7, sp, #0
 800ed7c:	60f8      	str	r0, [r7, #12]
 800ed7e:	60b9      	str	r1, [r7, #8]
 800ed80:	607a      	str	r2, [r7, #4]
 800ed82:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800ed84:	2300      	movs	r3, #0
 800ed86:	617b      	str	r3, [r7, #20]
 800ed88:	e02c      	b.n	800ede4 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800ed8a:	68fb      	ldr	r3, [r7, #12]
 800ed8c:	695a      	ldr	r2, [r3, #20]
 800ed8e:	697b      	ldr	r3, [r7, #20]
 800ed90:	00db      	lsls	r3, r3, #3
 800ed92:	4413      	add	r3, r2
 800ed94:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	68ba      	ldr	r2, [r7, #8]
 800ed9c:	429a      	cmp	r2, r3
 800ed9e:	d11e      	bne.n	800edde <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d009      	beq.n	800edba <lwip_poll_should_wake+0x44>
 800eda6:	693b      	ldr	r3, [r7, #16]
 800eda8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800edac:	b29b      	uxth	r3, r3
 800edae:	f003 0301 	and.w	r3, r3, #1
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d001      	beq.n	800edba <lwip_poll_should_wake+0x44>
        return 1;
 800edb6:	2301      	movs	r3, #1
 800edb8:	e01a      	b.n	800edf0 <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	d009      	beq.n	800edd4 <lwip_poll_should_wake+0x5e>
 800edc0:	693b      	ldr	r3, [r7, #16]
 800edc2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800edc6:	b29b      	uxth	r3, r3
 800edc8:	f003 0302 	and.w	r3, r3, #2
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d001      	beq.n	800edd4 <lwip_poll_should_wake+0x5e>
        return 1;
 800edd0:	2301      	movs	r3, #1
 800edd2:	e00d      	b.n	800edf0 <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800edd4:	6a3b      	ldr	r3, [r7, #32]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d001      	beq.n	800edde <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800edda:	2301      	movs	r3, #1
 800eddc:	e008      	b.n	800edf0 <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800edde:	697b      	ldr	r3, [r7, #20]
 800ede0:	3301      	adds	r3, #1
 800ede2:	617b      	str	r3, [r7, #20]
 800ede4:	68fb      	ldr	r3, [r7, #12]
 800ede6:	699b      	ldr	r3, [r3, #24]
 800ede8:	697a      	ldr	r2, [r7, #20]
 800edea:	429a      	cmp	r2, r3
 800edec:	d3cd      	bcc.n	800ed8a <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800edee:	2300      	movs	r3, #0
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	371c      	adds	r7, #28
 800edf4:	46bd      	mov	sp, r7
 800edf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edfa:	4770      	bx	lr

0800edfc <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	b08a      	sub	sp, #40	@ 0x28
 800ee00:	af00      	add	r7, sp, #0
 800ee02:	6078      	str	r0, [r7, #4]
 800ee04:	460b      	mov	r3, r1
 800ee06:	70fb      	strb	r3, [r7, #3]
 800ee08:	4613      	mov	r3, r2
 800ee0a:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	f000 80a4 	beq.w	800ef5c <event_callback+0x160>
    s = conn->socket;
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	699b      	ldr	r3, [r3, #24]
 800ee18:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 800ee1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	da18      	bge.n	800ee52 <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800ee20:	f00e f996 	bl	801d150 <sys_arch_protect>
 800ee24:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	699b      	ldr	r3, [r3, #24]
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	da0b      	bge.n	800ee46 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800ee2e:	78fb      	ldrb	r3, [r7, #3]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d104      	bne.n	800ee3e <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	699b      	ldr	r3, [r3, #24]
 800ee38:	1e5a      	subs	r2, r3, #1
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800ee3e:	69f8      	ldr	r0, [r7, #28]
 800ee40:	f00e f994 	bl	801d16c <sys_arch_unprotect>
        return;
 800ee44:	e08d      	b.n	800ef62 <event_callback+0x166>
      }
      s = conn->socket;
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	699b      	ldr	r3, [r3, #24]
 800ee4a:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 800ee4c:	69f8      	ldr	r0, [r7, #28]
 800ee4e:	f00e f98d 	bl	801d16c <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800ee52:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ee54:	f7ff fd0c 	bl	800e870 <get_socket>
 800ee58:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800ee5a:	69bb      	ldr	r3, [r7, #24]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d07f      	beq.n	800ef60 <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800ee60:	2301      	movs	r3, #1
 800ee62:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800ee64:	f00e f974 	bl	801d150 <sys_arch_protect>
 800ee68:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800ee6a:	78fb      	ldrb	r3, [r7, #3]
 800ee6c:	2b04      	cmp	r3, #4
 800ee6e:	d83e      	bhi.n	800eeee <event_callback+0xf2>
 800ee70:	a201      	add	r2, pc, #4	@ (adr r2, 800ee78 <event_callback+0x7c>)
 800ee72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee76:	bf00      	nop
 800ee78:	0800ee8d 	.word	0x0800ee8d
 800ee7c:	0800eeaf 	.word	0x0800eeaf
 800ee80:	0800eec7 	.word	0x0800eec7
 800ee84:	0800eedb 	.word	0x0800eedb
 800ee88:	0800eee7 	.word	0x0800eee7
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800ee8c:	69bb      	ldr	r3, [r7, #24]
 800ee8e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ee92:	b29b      	uxth	r3, r3
 800ee94:	3301      	adds	r3, #1
 800ee96:	b29b      	uxth	r3, r3
 800ee98:	b21a      	sxth	r2, r3
 800ee9a:	69bb      	ldr	r3, [r7, #24]
 800ee9c:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800ee9e:	69bb      	ldr	r3, [r7, #24]
 800eea0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eea4:	2b01      	cmp	r3, #1
 800eea6:	dd2a      	ble.n	800eefe <event_callback+0x102>
        check_waiters = 0;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	623b      	str	r3, [r7, #32]
      }
      break;
 800eeac:	e027      	b.n	800eefe <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800eeae:	69bb      	ldr	r3, [r7, #24]
 800eeb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eeb4:	b29b      	uxth	r3, r3
 800eeb6:	3b01      	subs	r3, #1
 800eeb8:	b29b      	uxth	r3, r3
 800eeba:	b21a      	sxth	r2, r3
 800eebc:	69bb      	ldr	r3, [r7, #24]
 800eebe:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800eec0:	2300      	movs	r3, #0
 800eec2:	623b      	str	r3, [r7, #32]
      break;
 800eec4:	e01c      	b.n	800ef00 <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800eec6:	69bb      	ldr	r3, [r7, #24]
 800eec8:	895b      	ldrh	r3, [r3, #10]
 800eeca:	2b00      	cmp	r3, #0
 800eecc:	d001      	beq.n	800eed2 <event_callback+0xd6>
        check_waiters = 0;
 800eece:	2300      	movs	r3, #0
 800eed0:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800eed2:	69bb      	ldr	r3, [r7, #24]
 800eed4:	2201      	movs	r2, #1
 800eed6:	815a      	strh	r2, [r3, #10]
      break;
 800eed8:	e012      	b.n	800ef00 <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800eeda:	69bb      	ldr	r3, [r7, #24]
 800eedc:	2200      	movs	r2, #0
 800eede:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800eee0:	2300      	movs	r3, #0
 800eee2:	623b      	str	r3, [r7, #32]
      break;
 800eee4:	e00c      	b.n	800ef00 <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800eee6:	69bb      	ldr	r3, [r7, #24]
 800eee8:	2201      	movs	r2, #1
 800eeea:	819a      	strh	r2, [r3, #12]
      break;
 800eeec:	e008      	b.n	800ef00 <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800eeee:	4b1e      	ldr	r3, [pc, #120]	@ (800ef68 <event_callback+0x16c>)
 800eef0:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 800eef4:	491d      	ldr	r1, [pc, #116]	@ (800ef6c <event_callback+0x170>)
 800eef6:	481e      	ldr	r0, [pc, #120]	@ (800ef70 <event_callback+0x174>)
 800eef8:	f00f f9f0 	bl	801e2dc <iprintf>
      break;
 800eefc:	e000      	b.n	800ef00 <event_callback+0x104>
      break;
 800eefe:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	7b9b      	ldrb	r3, [r3, #14]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d025      	beq.n	800ef54 <event_callback+0x158>
 800ef08:	6a3b      	ldr	r3, [r7, #32]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d022      	beq.n	800ef54 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800ef0e:	69bb      	ldr	r3, [r7, #24]
 800ef10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	bfcc      	ite	gt
 800ef18:	2301      	movgt	r3, #1
 800ef1a:	2300      	movle	r3, #0
 800ef1c:	b2db      	uxtb	r3, r3
 800ef1e:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800ef20:	69bb      	ldr	r3, [r7, #24]
 800ef22:	895b      	ldrh	r3, [r3, #10]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	bf14      	ite	ne
 800ef28:	2301      	movne	r3, #1
 800ef2a:	2300      	moveq	r3, #0
 800ef2c:	b2db      	uxtb	r3, r3
 800ef2e:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800ef30:	69bb      	ldr	r3, [r7, #24]
 800ef32:	899b      	ldrh	r3, [r3, #12]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	bf14      	ite	ne
 800ef38:	2301      	movne	r3, #1
 800ef3a:	2300      	moveq	r3, #0
 800ef3c:	b2db      	uxtb	r3, r3
 800ef3e:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800ef40:	69f8      	ldr	r0, [r7, #28]
 800ef42:	f00e f913 	bl	801d16c <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	693a      	ldr	r2, [r7, #16]
 800ef4a:	6979      	ldr	r1, [r7, #20]
 800ef4c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ef4e:	f000 f811 	bl	800ef74 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800ef52:	e006      	b.n	800ef62 <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800ef54:	69f8      	ldr	r0, [r7, #28]
 800ef56:	f00e f909 	bl	801d16c <sys_arch_unprotect>
 800ef5a:	e002      	b.n	800ef62 <event_callback+0x166>
    return;
 800ef5c:	bf00      	nop
 800ef5e:	e000      	b.n	800ef62 <event_callback+0x166>
      return;
 800ef60:	bf00      	nop
  }
  done_socket(sock);
}
 800ef62:	3728      	adds	r7, #40	@ 0x28
 800ef64:	46bd      	mov	sp, r7
 800ef66:	bd80      	pop	{r7, pc}
 800ef68:	080227b8 	.word	0x080227b8
 800ef6c:	08022b34 	.word	0x08022b34
 800ef70:	0802280c 	.word	0x0802280c

0800ef74 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b088      	sub	sp, #32
 800ef78:	af02      	add	r7, sp, #8
 800ef7a:	60f8      	str	r0, [r7, #12]
 800ef7c:	60b9      	str	r1, [r7, #8]
 800ef7e:	607a      	str	r2, [r7, #4]
 800ef80:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800ef82:	4b42      	ldr	r3, [pc, #264]	@ (800f08c <select_check_waiters+0x118>)
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	617b      	str	r3, [r7, #20]
 800ef88:	e078      	b.n	800f07c <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 800ef8a:	697b      	ldr	r3, [r7, #20]
 800ef8c:	69db      	ldr	r3, [r3, #28]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d171      	bne.n	800f076 <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800ef92:	2300      	movs	r3, #0
 800ef94:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800ef96:	697b      	ldr	r3, [r7, #20]
 800ef98:	695b      	ldr	r3, [r3, #20]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d009      	beq.n	800efb2 <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	9300      	str	r3, [sp, #0]
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	68ba      	ldr	r2, [r7, #8]
 800efa6:	68f9      	ldr	r1, [r7, #12]
 800efa8:	6978      	ldr	r0, [r7, #20]
 800efaa:	f7ff fee4 	bl	800ed76 <lwip_poll_should_wake>
 800efae:	6138      	str	r0, [r7, #16]
 800efb0:	e056      	b.n	800f060 <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800efb2:	68bb      	ldr	r3, [r7, #8]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	d017      	beq.n	800efe8 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800efb8:	697b      	ldr	r3, [r7, #20]
 800efba:	689b      	ldr	r3, [r3, #8]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d013      	beq.n	800efe8 <select_check_waiters+0x74>
 800efc0:	697b      	ldr	r3, [r7, #20]
 800efc2:	689a      	ldr	r2, [r3, #8]
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	da00      	bge.n	800efcc <select_check_waiters+0x58>
 800efca:	331f      	adds	r3, #31
 800efcc:	115b      	asrs	r3, r3, #5
 800efce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	f003 031f 	and.w	r3, r3, #31
 800efd8:	fa22 f303 	lsr.w	r3, r2, r3
 800efdc:	f003 0301 	and.w	r3, r3, #1
 800efe0:	2b00      	cmp	r3, #0
 800efe2:	d001      	beq.n	800efe8 <select_check_waiters+0x74>
            do_signal = 1;
 800efe4:	2301      	movs	r3, #1
 800efe6:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	2b00      	cmp	r3, #0
 800efec:	d01a      	beq.n	800f024 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800efee:	693b      	ldr	r3, [r7, #16]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d117      	bne.n	800f024 <select_check_waiters+0xb0>
 800eff4:	697b      	ldr	r3, [r7, #20]
 800eff6:	68db      	ldr	r3, [r3, #12]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d013      	beq.n	800f024 <select_check_waiters+0xb0>
 800effc:	697b      	ldr	r3, [r7, #20]
 800effe:	68da      	ldr	r2, [r3, #12]
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	2b00      	cmp	r3, #0
 800f004:	da00      	bge.n	800f008 <select_check_waiters+0x94>
 800f006:	331f      	adds	r3, #31
 800f008:	115b      	asrs	r3, r3, #5
 800f00a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	f003 031f 	and.w	r3, r3, #31
 800f014:	fa22 f303 	lsr.w	r3, r2, r3
 800f018:	f003 0301 	and.w	r3, r3, #1
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d001      	beq.n	800f024 <select_check_waiters+0xb0>
            do_signal = 1;
 800f020:	2301      	movs	r3, #1
 800f022:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800f024:	683b      	ldr	r3, [r7, #0]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d01a      	beq.n	800f060 <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800f02a:	693b      	ldr	r3, [r7, #16]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d117      	bne.n	800f060 <select_check_waiters+0xec>
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	691b      	ldr	r3, [r3, #16]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d013      	beq.n	800f060 <select_check_waiters+0xec>
 800f038:	697b      	ldr	r3, [r7, #20]
 800f03a:	691a      	ldr	r2, [r3, #16]
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	2b00      	cmp	r3, #0
 800f040:	da00      	bge.n	800f044 <select_check_waiters+0xd0>
 800f042:	331f      	adds	r3, #31
 800f044:	115b      	asrs	r3, r3, #5
 800f046:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	f003 031f 	and.w	r3, r3, #31
 800f050:	fa22 f303 	lsr.w	r3, r2, r3
 800f054:	f003 0301 	and.w	r3, r3, #1
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d001      	beq.n	800f060 <select_check_waiters+0xec>
            do_signal = 1;
 800f05c:	2301      	movs	r3, #1
 800f05e:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800f060:	693b      	ldr	r3, [r7, #16]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d007      	beq.n	800f076 <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	2201      	movs	r2, #1
 800f06a:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800f06c:	697b      	ldr	r3, [r7, #20]
 800f06e:	3320      	adds	r3, #32
 800f070:	4618      	mov	r0, r3
 800f072:	f00d ffd7 	bl	801d024 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	617b      	str	r3, [r7, #20]
 800f07c:	697b      	ldr	r3, [r7, #20]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d183      	bne.n	800ef8a <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800f082:	bf00      	nop
 800f084:	bf00      	nop
 800f086:	3718      	adds	r7, #24
 800f088:	46bd      	mov	sp, r7
 800f08a:	bd80      	pop	{r7, pc}
 800f08c:	2000e914 	.word	0x2000e914

0800f090 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800f09a:	f008 fe1b 	bl	8017cd4 <sys_timeouts_sleeptime>
 800f09e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800f0a0:	68fb      	ldr	r3, [r7, #12]
 800f0a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0a6:	d10b      	bne.n	800f0c0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800f0a8:	4813      	ldr	r0, [pc, #76]	@ (800f0f8 <tcpip_timeouts_mbox_fetch+0x68>)
 800f0aa:	f00e f824 	bl	801d0f6 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	6839      	ldr	r1, [r7, #0]
 800f0b2:	6878      	ldr	r0, [r7, #4]
 800f0b4:	f00d fefa 	bl	801ceac <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800f0b8:	480f      	ldr	r0, [pc, #60]	@ (800f0f8 <tcpip_timeouts_mbox_fetch+0x68>)
 800f0ba:	f00e f80d 	bl	801d0d8 <sys_mutex_lock>
    return;
 800f0be:	e018      	b.n	800f0f2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d102      	bne.n	800f0cc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800f0c6:	f008 fdcb 	bl	8017c60 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f0ca:	e7e6      	b.n	800f09a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800f0cc:	480a      	ldr	r0, [pc, #40]	@ (800f0f8 <tcpip_timeouts_mbox_fetch+0x68>)
 800f0ce:	f00e f812 	bl	801d0f6 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800f0d2:	68fa      	ldr	r2, [r7, #12]
 800f0d4:	6839      	ldr	r1, [r7, #0]
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f00d fee8 	bl	801ceac <sys_arch_mbox_fetch>
 800f0dc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800f0de:	4806      	ldr	r0, [pc, #24]	@ (800f0f8 <tcpip_timeouts_mbox_fetch+0x68>)
 800f0e0:	f00d fffa 	bl	801d0d8 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800f0e4:	68bb      	ldr	r3, [r7, #8]
 800f0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ea:	d102      	bne.n	800f0f2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800f0ec:	f008 fdb8 	bl	8017c60 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800f0f0:	e7d3      	b.n	800f09a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800f0f2:	3710      	adds	r7, #16
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}
 800f0f8:	2000e924 	.word	0x2000e924

0800f0fc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b084      	sub	sp, #16
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800f104:	4810      	ldr	r0, [pc, #64]	@ (800f148 <tcpip_thread+0x4c>)
 800f106:	f00d ffe7 	bl	801d0d8 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800f10a:	4b10      	ldr	r3, [pc, #64]	@ (800f14c <tcpip_thread+0x50>)
 800f10c:	681b      	ldr	r3, [r3, #0]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d005      	beq.n	800f11e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800f112:	4b0e      	ldr	r3, [pc, #56]	@ (800f14c <tcpip_thread+0x50>)
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	4a0e      	ldr	r2, [pc, #56]	@ (800f150 <tcpip_thread+0x54>)
 800f118:	6812      	ldr	r2, [r2, #0]
 800f11a:	4610      	mov	r0, r2
 800f11c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f11e:	f107 030c 	add.w	r3, r7, #12
 800f122:	4619      	mov	r1, r3
 800f124:	480b      	ldr	r0, [pc, #44]	@ (800f154 <tcpip_thread+0x58>)
 800f126:	f7ff ffb3 	bl	800f090 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d106      	bne.n	800f13e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f130:	4b09      	ldr	r3, [pc, #36]	@ (800f158 <tcpip_thread+0x5c>)
 800f132:	2291      	movs	r2, #145	@ 0x91
 800f134:	4909      	ldr	r1, [pc, #36]	@ (800f15c <tcpip_thread+0x60>)
 800f136:	480a      	ldr	r0, [pc, #40]	@ (800f160 <tcpip_thread+0x64>)
 800f138:	f00f f8d0 	bl	801e2dc <iprintf>
      continue;
 800f13c:	e003      	b.n	800f146 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	4618      	mov	r0, r3
 800f142:	f000 f80f 	bl	800f164 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800f146:	e7ea      	b.n	800f11e <tcpip_thread+0x22>
 800f148:	2000e924 	.word	0x2000e924
 800f14c:	2000e918 	.word	0x2000e918
 800f150:	2000e91c 	.word	0x2000e91c
 800f154:	2000e920 	.word	0x2000e920
 800f158:	08022b88 	.word	0x08022b88
 800f15c:	08022bb8 	.word	0x08022bb8
 800f160:	08022bd8 	.word	0x08022bd8

0800f164 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800f164:	b580      	push	{r7, lr}
 800f166:	b082      	sub	sp, #8
 800f168:	af00      	add	r7, sp, #0
 800f16a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	781b      	ldrb	r3, [r3, #0]
 800f170:	2b02      	cmp	r3, #2
 800f172:	d026      	beq.n	800f1c2 <tcpip_thread_handle_msg+0x5e>
 800f174:	2b02      	cmp	r3, #2
 800f176:	dc2b      	bgt.n	800f1d0 <tcpip_thread_handle_msg+0x6c>
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d002      	beq.n	800f182 <tcpip_thread_handle_msg+0x1e>
 800f17c:	2b01      	cmp	r3, #1
 800f17e:	d015      	beq.n	800f1ac <tcpip_thread_handle_msg+0x48>
 800f180:	e026      	b.n	800f1d0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	68db      	ldr	r3, [r3, #12]
 800f186:	687a      	ldr	r2, [r7, #4]
 800f188:	6850      	ldr	r0, [r2, #4]
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	6892      	ldr	r2, [r2, #8]
 800f18e:	4611      	mov	r1, r2
 800f190:	4798      	blx	r3
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d004      	beq.n	800f1a2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	685b      	ldr	r3, [r3, #4]
 800f19c:	4618      	mov	r0, r3
 800f19e:	f002 f81b 	bl	80111d8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f1a2:	6879      	ldr	r1, [r7, #4]
 800f1a4:	2009      	movs	r0, #9
 800f1a6:	f001 f967 	bl	8010478 <memp_free>
      break;
 800f1aa:	e018      	b.n	800f1de <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	685b      	ldr	r3, [r3, #4]
 800f1b0:	687a      	ldr	r2, [r7, #4]
 800f1b2:	6892      	ldr	r2, [r2, #8]
 800f1b4:	4610      	mov	r0, r2
 800f1b6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800f1b8:	6879      	ldr	r1, [r7, #4]
 800f1ba:	2008      	movs	r0, #8
 800f1bc:	f001 f95c 	bl	8010478 <memp_free>
      break;
 800f1c0:	e00d      	b.n	800f1de <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	685b      	ldr	r3, [r3, #4]
 800f1c6:	687a      	ldr	r2, [r7, #4]
 800f1c8:	6892      	ldr	r2, [r2, #8]
 800f1ca:	4610      	mov	r0, r2
 800f1cc:	4798      	blx	r3
      break;
 800f1ce:	e006      	b.n	800f1de <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800f1d0:	4b05      	ldr	r3, [pc, #20]	@ (800f1e8 <tcpip_thread_handle_msg+0x84>)
 800f1d2:	22cf      	movs	r2, #207	@ 0xcf
 800f1d4:	4905      	ldr	r1, [pc, #20]	@ (800f1ec <tcpip_thread_handle_msg+0x88>)
 800f1d6:	4806      	ldr	r0, [pc, #24]	@ (800f1f0 <tcpip_thread_handle_msg+0x8c>)
 800f1d8:	f00f f880 	bl	801e2dc <iprintf>
      break;
 800f1dc:	bf00      	nop
  }
}
 800f1de:	bf00      	nop
 800f1e0:	3708      	adds	r7, #8
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	08022b88 	.word	0x08022b88
 800f1ec:	08022bb8 	.word	0x08022bb8
 800f1f0:	08022bd8 	.word	0x08022bd8

0800f1f4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800f1f4:	b580      	push	{r7, lr}
 800f1f6:	b086      	sub	sp, #24
 800f1f8:	af00      	add	r7, sp, #0
 800f1fa:	60f8      	str	r0, [r7, #12]
 800f1fc:	60b9      	str	r1, [r7, #8]
 800f1fe:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f200:	481a      	ldr	r0, [pc, #104]	@ (800f26c <tcpip_inpkt+0x78>)
 800f202:	f00d fe9b 	bl	801cf3c <sys_mbox_valid>
 800f206:	4603      	mov	r3, r0
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d105      	bne.n	800f218 <tcpip_inpkt+0x24>
 800f20c:	4b18      	ldr	r3, [pc, #96]	@ (800f270 <tcpip_inpkt+0x7c>)
 800f20e:	22fc      	movs	r2, #252	@ 0xfc
 800f210:	4918      	ldr	r1, [pc, #96]	@ (800f274 <tcpip_inpkt+0x80>)
 800f212:	4819      	ldr	r0, [pc, #100]	@ (800f278 <tcpip_inpkt+0x84>)
 800f214:	f00f f862 	bl	801e2dc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800f218:	2009      	movs	r0, #9
 800f21a:	f001 f8b7 	bl	801038c <memp_malloc>
 800f21e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800f220:	697b      	ldr	r3, [r7, #20]
 800f222:	2b00      	cmp	r3, #0
 800f224:	d102      	bne.n	800f22c <tcpip_inpkt+0x38>
    return ERR_MEM;
 800f226:	f04f 33ff 	mov.w	r3, #4294967295
 800f22a:	e01a      	b.n	800f262 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800f22c:	697b      	ldr	r3, [r7, #20]
 800f22e:	2200      	movs	r2, #0
 800f230:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800f232:	697b      	ldr	r3, [r7, #20]
 800f234:	68fa      	ldr	r2, [r7, #12]
 800f236:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	68ba      	ldr	r2, [r7, #8]
 800f23c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800f23e:	697b      	ldr	r3, [r7, #20]
 800f240:	687a      	ldr	r2, [r7, #4]
 800f242:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f244:	6979      	ldr	r1, [r7, #20]
 800f246:	4809      	ldr	r0, [pc, #36]	@ (800f26c <tcpip_inpkt+0x78>)
 800f248:	f00d fe16 	bl	801ce78 <sys_mbox_trypost>
 800f24c:	4603      	mov	r3, r0
 800f24e:	2b00      	cmp	r3, #0
 800f250:	d006      	beq.n	800f260 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800f252:	6979      	ldr	r1, [r7, #20]
 800f254:	2009      	movs	r0, #9
 800f256:	f001 f90f 	bl	8010478 <memp_free>
    return ERR_MEM;
 800f25a:	f04f 33ff 	mov.w	r3, #4294967295
 800f25e:	e000      	b.n	800f262 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800f260:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800f262:	4618      	mov	r0, r3
 800f264:	3718      	adds	r7, #24
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
 800f26a:	bf00      	nop
 800f26c:	2000e920 	.word	0x2000e920
 800f270:	08022b88 	.word	0x08022b88
 800f274:	08022c00 	.word	0x08022c00
 800f278:	08022bd8 	.word	0x08022bd8

0800f27c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800f28c:	f003 0318 	and.w	r3, r3, #24
 800f290:	2b00      	cmp	r3, #0
 800f292:	d006      	beq.n	800f2a2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800f294:	4a08      	ldr	r2, [pc, #32]	@ (800f2b8 <tcpip_input+0x3c>)
 800f296:	6839      	ldr	r1, [r7, #0]
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f7ff ffab 	bl	800f1f4 <tcpip_inpkt>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	e005      	b.n	800f2ae <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800f2a2:	4a06      	ldr	r2, [pc, #24]	@ (800f2bc <tcpip_input+0x40>)
 800f2a4:	6839      	ldr	r1, [r7, #0]
 800f2a6:	6878      	ldr	r0, [r7, #4]
 800f2a8:	f7ff ffa4 	bl	800f1f4 <tcpip_inpkt>
 800f2ac:	4603      	mov	r3, r0
}
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	3708      	adds	r7, #8
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	0801cc75 	.word	0x0801cc75
 800f2bc:	0801b8ed 	.word	0x0801b8ed

0800f2c0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b084      	sub	sp, #16
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	6078      	str	r0, [r7, #4]
 800f2c8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f2ca:	4819      	ldr	r0, [pc, #100]	@ (800f330 <tcpip_try_callback+0x70>)
 800f2cc:	f00d fe36 	bl	801cf3c <sys_mbox_valid>
 800f2d0:	4603      	mov	r3, r0
 800f2d2:	2b00      	cmp	r3, #0
 800f2d4:	d106      	bne.n	800f2e4 <tcpip_try_callback+0x24>
 800f2d6:	4b17      	ldr	r3, [pc, #92]	@ (800f334 <tcpip_try_callback+0x74>)
 800f2d8:	f240 125d 	movw	r2, #349	@ 0x15d
 800f2dc:	4916      	ldr	r1, [pc, #88]	@ (800f338 <tcpip_try_callback+0x78>)
 800f2de:	4817      	ldr	r0, [pc, #92]	@ (800f33c <tcpip_try_callback+0x7c>)
 800f2e0:	f00e fffc 	bl	801e2dc <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f2e4:	2008      	movs	r0, #8
 800f2e6:	f001 f851 	bl	801038c <memp_malloc>
 800f2ea:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800f2ec:	68fb      	ldr	r3, [r7, #12]
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	d102      	bne.n	800f2f8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800f2f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f2f6:	e017      	b.n	800f328 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f2f8:	68fb      	ldr	r3, [r7, #12]
 800f2fa:	2201      	movs	r2, #1
 800f2fc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	687a      	ldr	r2, [r7, #4]
 800f302:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	683a      	ldr	r2, [r7, #0]
 800f308:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f30a:	68f9      	ldr	r1, [r7, #12]
 800f30c:	4808      	ldr	r0, [pc, #32]	@ (800f330 <tcpip_try_callback+0x70>)
 800f30e:	f00d fdb3 	bl	801ce78 <sys_mbox_trypost>
 800f312:	4603      	mov	r3, r0
 800f314:	2b00      	cmp	r3, #0
 800f316:	d006      	beq.n	800f326 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800f318:	68f9      	ldr	r1, [r7, #12]
 800f31a:	2008      	movs	r0, #8
 800f31c:	f001 f8ac 	bl	8010478 <memp_free>
    return ERR_MEM;
 800f320:	f04f 33ff 	mov.w	r3, #4294967295
 800f324:	e000      	b.n	800f328 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800f326:	2300      	movs	r3, #0
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3710      	adds	r7, #16
 800f32c:	46bd      	mov	sp, r7
 800f32e:	bd80      	pop	{r7, pc}
 800f330:	2000e920 	.word	0x2000e920
 800f334:	08022b88 	.word	0x08022b88
 800f338:	08022c00 	.word	0x08022c00
 800f33c:	08022bd8 	.word	0x08022bd8

0800f340 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b084      	sub	sp, #16
 800f344:	af00      	add	r7, sp, #0
 800f346:	60f8      	str	r0, [r7, #12]
 800f348:	60b9      	str	r1, [r7, #8]
 800f34a:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800f34c:	4806      	ldr	r0, [pc, #24]	@ (800f368 <tcpip_send_msg_wait_sem+0x28>)
 800f34e:	f00d fec3 	bl	801d0d8 <sys_mutex_lock>
  fn(apimsg);
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	68b8      	ldr	r0, [r7, #8]
 800f356:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800f358:	4803      	ldr	r0, [pc, #12]	@ (800f368 <tcpip_send_msg_wait_sem+0x28>)
 800f35a:	f00d fecc 	bl	801d0f6 <sys_mutex_unlock>
  return ERR_OK;
 800f35e:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f360:	4618      	mov	r0, r3
 800f362:	3710      	adds	r7, #16
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	2000e924 	.word	0x2000e924

0800f36c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b084      	sub	sp, #16
 800f370:	af02      	add	r7, sp, #8
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f376:	f000 fb5e 	bl	800fa36 <lwip_init>

  tcpip_init_done = initfunc;
 800f37a:	4a17      	ldr	r2, [pc, #92]	@ (800f3d8 <tcpip_init+0x6c>)
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f380:	4a16      	ldr	r2, [pc, #88]	@ (800f3dc <tcpip_init+0x70>)
 800f382:	683b      	ldr	r3, [r7, #0]
 800f384:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f386:	2106      	movs	r1, #6
 800f388:	4815      	ldr	r0, [pc, #84]	@ (800f3e0 <tcpip_init+0x74>)
 800f38a:	f00d fd49 	bl	801ce20 <sys_mbox_new>
 800f38e:	4603      	mov	r3, r0
 800f390:	2b00      	cmp	r3, #0
 800f392:	d006      	beq.n	800f3a2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f394:	4b13      	ldr	r3, [pc, #76]	@ (800f3e4 <tcpip_init+0x78>)
 800f396:	f240 2261 	movw	r2, #609	@ 0x261
 800f39a:	4913      	ldr	r1, [pc, #76]	@ (800f3e8 <tcpip_init+0x7c>)
 800f39c:	4813      	ldr	r0, [pc, #76]	@ (800f3ec <tcpip_init+0x80>)
 800f39e:	f00e ff9d 	bl	801e2dc <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f3a2:	4813      	ldr	r0, [pc, #76]	@ (800f3f0 <tcpip_init+0x84>)
 800f3a4:	f00d fe82 	bl	801d0ac <sys_mutex_new>
 800f3a8:	4603      	mov	r3, r0
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d006      	beq.n	800f3bc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f3ae:	4b0d      	ldr	r3, [pc, #52]	@ (800f3e4 <tcpip_init+0x78>)
 800f3b0:	f240 2265 	movw	r2, #613	@ 0x265
 800f3b4:	490f      	ldr	r1, [pc, #60]	@ (800f3f4 <tcpip_init+0x88>)
 800f3b6:	480d      	ldr	r0, [pc, #52]	@ (800f3ec <tcpip_init+0x80>)
 800f3b8:	f00e ff90 	bl	801e2dc <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f3bc:	2301      	movs	r3, #1
 800f3be:	9300      	str	r3, [sp, #0]
 800f3c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	490c      	ldr	r1, [pc, #48]	@ (800f3f8 <tcpip_init+0x8c>)
 800f3c8:	480c      	ldr	r0, [pc, #48]	@ (800f3fc <tcpip_init+0x90>)
 800f3ca:	f00d fea1 	bl	801d110 <sys_thread_new>
}
 800f3ce:	bf00      	nop
 800f3d0:	3708      	adds	r7, #8
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	bd80      	pop	{r7, pc}
 800f3d6:	bf00      	nop
 800f3d8:	2000e918 	.word	0x2000e918
 800f3dc:	2000e91c 	.word	0x2000e91c
 800f3e0:	2000e920 	.word	0x2000e920
 800f3e4:	08022b88 	.word	0x08022b88
 800f3e8:	08022c10 	.word	0x08022c10
 800f3ec:	08022bd8 	.word	0x08022bd8
 800f3f0:	2000e924 	.word	0x2000e924
 800f3f4:	08022c34 	.word	0x08022c34
 800f3f8:	0800f0fd 	.word	0x0800f0fd
 800f3fc:	08022c58 	.word	0x08022c58

0800f400 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f400:	b480      	push	{r7}
 800f402:	b083      	sub	sp, #12
 800f404:	af00      	add	r7, sp, #0
 800f406:	4603      	mov	r3, r0
 800f408:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f40a:	88fb      	ldrh	r3, [r7, #6]
 800f40c:	021b      	lsls	r3, r3, #8
 800f40e:	b21a      	sxth	r2, r3
 800f410:	88fb      	ldrh	r3, [r7, #6]
 800f412:	0a1b      	lsrs	r3, r3, #8
 800f414:	b29b      	uxth	r3, r3
 800f416:	b21b      	sxth	r3, r3
 800f418:	4313      	orrs	r3, r2
 800f41a:	b21b      	sxth	r3, r3
 800f41c:	b29b      	uxth	r3, r3
}
 800f41e:	4618      	mov	r0, r3
 800f420:	370c      	adds	r7, #12
 800f422:	46bd      	mov	sp, r7
 800f424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f428:	4770      	bx	lr

0800f42a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f42a:	b480      	push	{r7}
 800f42c:	b083      	sub	sp, #12
 800f42e:	af00      	add	r7, sp, #0
 800f430:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	061a      	lsls	r2, r3, #24
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	021b      	lsls	r3, r3, #8
 800f43a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f43e:	431a      	orrs	r2, r3
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	0a1b      	lsrs	r3, r3, #8
 800f444:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f448:	431a      	orrs	r2, r3
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	0e1b      	lsrs	r3, r3, #24
 800f44e:	4313      	orrs	r3, r2
}
 800f450:	4618      	mov	r0, r3
 800f452:	370c      	adds	r7, #12
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr

0800f45c <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800f45c:	b480      	push	{r7}
 800f45e:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800f460:	bf00      	nop
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr
	...

0800f46c <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800f46c:	b480      	push	{r7}
 800f46e:	b083      	sub	sp, #12
 800f470:	af00      	add	r7, sp, #0
 800f472:	4603      	mov	r3, r0
 800f474:	6039      	str	r1, [r7, #0]
 800f476:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 800f478:	79fb      	ldrb	r3, [r7, #7]
 800f47a:	2b01      	cmp	r3, #1
 800f47c:	d80f      	bhi.n	800f49e <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800f47e:	683b      	ldr	r3, [r7, #0]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d006      	beq.n	800f492 <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800f484:	79fb      	ldrb	r3, [r7, #7]
 800f486:	4909      	ldr	r1, [pc, #36]	@ (800f4ac <dns_setserver+0x40>)
 800f488:	683a      	ldr	r2, [r7, #0]
 800f48a:	6812      	ldr	r2, [r2, #0]
 800f48c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800f490:	e005      	b.n	800f49e <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800f492:	79fb      	ldrb	r3, [r7, #7]
 800f494:	4905      	ldr	r1, [pc, #20]	@ (800f4ac <dns_setserver+0x40>)
 800f496:	4a06      	ldr	r2, [pc, #24]	@ (800f4b0 <dns_setserver+0x44>)
 800f498:	6812      	ldr	r2, [r2, #0]
 800f49a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f49e:	bf00      	nop
 800f4a0:	370c      	adds	r7, #12
 800f4a2:	46bd      	mov	sp, r7
 800f4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4a8:	4770      	bx	lr
 800f4aa:	bf00      	nop
 800f4ac:	2000eda8 	.word	0x2000eda8
 800f4b0:	08025d70 	.word	0x08025d70

0800f4b4 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800f4b8:	f000 faa8 	bl	800fa0c <dns_check_entries>
}
 800f4bc:	bf00      	nop
 800f4be:	bd80      	pop	{r7, pc}

0800f4c0 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800f4c0:	b580      	push	{r7, lr}
 800f4c2:	b090      	sub	sp, #64	@ 0x40
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	4603      	mov	r3, r0
 800f4c8:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800f4ca:	79fa      	ldrb	r2, [r7, #7]
 800f4cc:	4613      	mov	r3, r2
 800f4ce:	011b      	lsls	r3, r3, #4
 800f4d0:	4413      	add	r3, r2
 800f4d2:	011b      	lsls	r3, r3, #4
 800f4d4:	4a6c      	ldr	r2, [pc, #432]	@ (800f688 <dns_send+0x1c8>)
 800f4d6:	4413      	add	r3, r2
 800f4d8:	633b      	str	r3, [r7, #48]	@ 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800f4da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4dc:	7adb      	ldrb	r3, [r3, #11]
 800f4de:	2b01      	cmp	r3, #1
 800f4e0:	d906      	bls.n	800f4f0 <dns_send+0x30>
 800f4e2:	4b6a      	ldr	r3, [pc, #424]	@ (800f68c <dns_send+0x1cc>)
 800f4e4:	f240 22fa 	movw	r2, #762	@ 0x2fa
 800f4e8:	4969      	ldr	r1, [pc, #420]	@ (800f690 <dns_send+0x1d0>)
 800f4ea:	486a      	ldr	r0, [pc, #424]	@ (800f694 <dns_send+0x1d4>)
 800f4ec:	f00e fef6 	bl	801e2dc <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800f4f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f4f2:	7adb      	ldrb	r3, [r3, #11]
 800f4f4:	461a      	mov	r2, r3
 800f4f6:	4b68      	ldr	r3, [pc, #416]	@ (800f698 <dns_send+0x1d8>)
 800f4f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d109      	bne.n	800f514 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800f500:	79fb      	ldrb	r3, [r7, #7]
 800f502:	2100      	movs	r1, #0
 800f504:	4618      	mov	r0, r3
 800f506:	f000 f8cb 	bl	800f6a0 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800f50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f50c:	2200      	movs	r2, #0
 800f50e:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800f510:	2300      	movs	r3, #0
 800f512:	e0b4      	b.n	800f67e <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800f514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f516:	3310      	adds	r3, #16
 800f518:	4618      	mov	r0, r3
 800f51a:	f7f0 fea9 	bl	8000270 <strlen>
 800f51e:	4603      	mov	r3, r0
 800f520:	b29b      	uxth	r3, r3
 800f522:	3312      	adds	r3, #18
 800f524:	b29b      	uxth	r3, r3
 800f526:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f52a:	4619      	mov	r1, r3
 800f52c:	2036      	movs	r0, #54	@ 0x36
 800f52e:	f001 fb6f 	bl	8010c10 <pbuf_alloc>
 800f532:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800f534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f536:	2b00      	cmp	r3, #0
 800f538:	f000 8095 	beq.w	800f666 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800f53c:	f107 0310 	add.w	r3, r7, #16
 800f540:	220c      	movs	r2, #12
 800f542:	2100      	movs	r1, #0
 800f544:	4618      	mov	r0, r3
 800f546:	f00e ff68 	bl	801e41a <memset>
    hdr.id = lwip_htons(entry->txid);
 800f54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f54c:	891b      	ldrh	r3, [r3, #8]
 800f54e:	4618      	mov	r0, r3
 800f550:	f7ff ff56 	bl	800f400 <lwip_htons>
 800f554:	4603      	mov	r3, r0
 800f556:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800f558:	2301      	movs	r3, #1
 800f55a:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800f55c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f560:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800f562:	f107 0310 	add.w	r3, r7, #16
 800f566:	220c      	movs	r2, #12
 800f568:	4619      	mov	r1, r3
 800f56a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f56c:	f002 f8e8 	bl	8011740 <pbuf_take>
    hostname = entry->name;
 800f570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f572:	3310      	adds	r3, #16
 800f574:	63bb      	str	r3, [r7, #56]	@ 0x38
    --hostname;
 800f576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f578:	3b01      	subs	r3, #1
 800f57a:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800f57c:	230c      	movs	r3, #12
 800f57e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    do {
      ++hostname;
 800f580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f582:	3301      	adds	r3, #1
 800f584:	63bb      	str	r3, [r7, #56]	@ 0x38
      hostname_part = hostname;
 800f586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f588:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800f58a:	2300      	movs	r3, #0
 800f58c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f590:	e007      	b.n	800f5a2 <dns_send+0xe2>
        ++n;
 800f592:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f596:	3301      	adds	r3, #1
 800f598:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800f59c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f59e:	3301      	adds	r3, #1
 800f5a0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f5a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5a4:	781b      	ldrb	r3, [r3, #0]
 800f5a6:	2b2e      	cmp	r3, #46	@ 0x2e
 800f5a8:	d003      	beq.n	800f5b2 <dns_send+0xf2>
 800f5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5ac:	781b      	ldrb	r3, [r3, #0]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d1ef      	bne.n	800f592 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800f5b2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f5b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5b6:	1ad3      	subs	r3, r2, r3
 800f5b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800f5ba:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800f5bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f5c0:	4413      	add	r3, r2
 800f5c2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	dc53      	bgt.n	800f672 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800f5ca:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800f5ce:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f5d4:	f002 f9e2 	bl	801199c <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800f5d8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f5da:	3301      	adds	r3, #1
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f5e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f5e2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f5e4:	f002 f93e 	bl	8011864 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800f5e8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f5ec:	b29a      	uxth	r2, r3
 800f5ee:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f5f0:	4413      	add	r3, r2
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    } while (*hostname != 0);
 800f5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f5fa:	781b      	ldrb	r3, [r3, #0]
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d1bf      	bne.n	800f580 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800f600:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f602:	2200      	movs	r2, #0
 800f604:	4619      	mov	r1, r3
 800f606:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f608:	f002 f9c8 	bl	801199c <pbuf_put_at>
    query_idx++;
 800f60c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f60e:	3301      	adds	r3, #1
 800f610:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800f612:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f616:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800f618:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f61c:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800f61e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f620:	f107 010c 	add.w	r1, r7, #12
 800f624:	2204      	movs	r2, #4
 800f626:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f628:	f002 f91c 	bl	8011864 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800f62c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f62e:	7bdb      	ldrb	r3, [r3, #15]
 800f630:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800f634:	2335      	movs	r3, #53	@ 0x35
 800f636:	847b      	strh	r3, [r7, #34]	@ 0x22
      dst = &dns_servers[entry->server_idx];
 800f638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f63a:	7adb      	ldrb	r3, [r3, #11]
 800f63c:	009b      	lsls	r3, r3, #2
 800f63e:	4a16      	ldr	r2, [pc, #88]	@ (800f698 <dns_send+0x1d8>)
 800f640:	4413      	add	r3, r2
 800f642:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800f644:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f648:	4a14      	ldr	r2, [pc, #80]	@ (800f69c <dns_send+0x1dc>)
 800f64a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f64e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f650:	69fa      	ldr	r2, [r7, #28]
 800f652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f654:	f008 fd6c 	bl	8018130 <udp_sendto>
 800f658:	4603      	mov	r3, r0
 800f65a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* free pbuf */
    pbuf_free(p);
 800f65e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f660:	f001 fdba 	bl	80111d8 <pbuf_free>
 800f664:	e002      	b.n	800f66c <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800f666:	23ff      	movs	r3, #255	@ 0xff
 800f668:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return err;
 800f66c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f670:	e005      	b.n	800f67e <dns_send+0x1be>
        goto overflow_return;
 800f672:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800f674:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f676:	f001 fdaf 	bl	80111d8 <pbuf_free>
  return ERR_VAL;
 800f67a:	f06f 0305 	mvn.w	r3, #5
}
 800f67e:	4618      	mov	r0, r3
 800f680:	3740      	adds	r7, #64	@ 0x40
 800f682:	46bd      	mov	sp, r7
 800f684:	bd80      	pop	{r7, pc}
 800f686:	bf00      	nop
 800f688:	2000e938 	.word	0x2000e938
 800f68c:	08022c68 	.word	0x08022c68
 800f690:	08022c98 	.word	0x08022c98
 800f694:	08022cb0 	.word	0x08022cb0
 800f698:	2000eda8 	.word	0x2000eda8
 800f69c:	2000e928 	.word	0x2000e928

0800f6a0 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800f6a0:	b590      	push	{r4, r7, lr}
 800f6a2:	b085      	sub	sp, #20
 800f6a4:	af00      	add	r7, sp, #0
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	6039      	str	r1, [r7, #0]
 800f6aa:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	73fb      	strb	r3, [r7, #15]
 800f6b0:	e03d      	b.n	800f72e <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800f6b2:	7bfa      	ldrb	r2, [r7, #15]
 800f6b4:	4957      	ldr	r1, [pc, #348]	@ (800f814 <dns_call_found+0x174>)
 800f6b6:	4613      	mov	r3, r2
 800f6b8:	005b      	lsls	r3, r3, #1
 800f6ba:	4413      	add	r3, r2
 800f6bc:	009b      	lsls	r3, r3, #2
 800f6be:	440b      	add	r3, r1
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d030      	beq.n	800f728 <dns_call_found+0x88>
 800f6c6:	7bfa      	ldrb	r2, [r7, #15]
 800f6c8:	4952      	ldr	r1, [pc, #328]	@ (800f814 <dns_call_found+0x174>)
 800f6ca:	4613      	mov	r3, r2
 800f6cc:	005b      	lsls	r3, r3, #1
 800f6ce:	4413      	add	r3, r2
 800f6d0:	009b      	lsls	r3, r3, #2
 800f6d2:	440b      	add	r3, r1
 800f6d4:	3308      	adds	r3, #8
 800f6d6:	781b      	ldrb	r3, [r3, #0]
 800f6d8:	79fa      	ldrb	r2, [r7, #7]
 800f6da:	429a      	cmp	r2, r3
 800f6dc:	d124      	bne.n	800f728 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800f6de:	7bfa      	ldrb	r2, [r7, #15]
 800f6e0:	494c      	ldr	r1, [pc, #304]	@ (800f814 <dns_call_found+0x174>)
 800f6e2:	4613      	mov	r3, r2
 800f6e4:	005b      	lsls	r3, r3, #1
 800f6e6:	4413      	add	r3, r2
 800f6e8:	009b      	lsls	r3, r3, #2
 800f6ea:	440b      	add	r3, r1
 800f6ec:	681c      	ldr	r4, [r3, #0]
 800f6ee:	79fa      	ldrb	r2, [r7, #7]
 800f6f0:	4613      	mov	r3, r2
 800f6f2:	011b      	lsls	r3, r3, #4
 800f6f4:	4413      	add	r3, r2
 800f6f6:	011b      	lsls	r3, r3, #4
 800f6f8:	3310      	adds	r3, #16
 800f6fa:	4a47      	ldr	r2, [pc, #284]	@ (800f818 <dns_call_found+0x178>)
 800f6fc:	1898      	adds	r0, r3, r2
 800f6fe:	7bfa      	ldrb	r2, [r7, #15]
 800f700:	4944      	ldr	r1, [pc, #272]	@ (800f814 <dns_call_found+0x174>)
 800f702:	4613      	mov	r3, r2
 800f704:	005b      	lsls	r3, r3, #1
 800f706:	4413      	add	r3, r2
 800f708:	009b      	lsls	r3, r3, #2
 800f70a:	440b      	add	r3, r1
 800f70c:	3304      	adds	r3, #4
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	461a      	mov	r2, r3
 800f712:	6839      	ldr	r1, [r7, #0]
 800f714:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800f716:	7bfa      	ldrb	r2, [r7, #15]
 800f718:	493e      	ldr	r1, [pc, #248]	@ (800f814 <dns_call_found+0x174>)
 800f71a:	4613      	mov	r3, r2
 800f71c:	005b      	lsls	r3, r3, #1
 800f71e:	4413      	add	r3, r2
 800f720:	009b      	lsls	r3, r3, #2
 800f722:	440b      	add	r3, r1
 800f724:	2200      	movs	r2, #0
 800f726:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f728:	7bfb      	ldrb	r3, [r7, #15]
 800f72a:	3301      	adds	r3, #1
 800f72c:	73fb      	strb	r3, [r7, #15]
 800f72e:	7bfb      	ldrb	r3, [r7, #15]
 800f730:	2b03      	cmp	r3, #3
 800f732:	d9be      	bls.n	800f6b2 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f734:	2300      	movs	r3, #0
 800f736:	73fb      	strb	r3, [r7, #15]
 800f738:	e031      	b.n	800f79e <dns_call_found+0xfe>
    if (i == idx) {
 800f73a:	7bfa      	ldrb	r2, [r7, #15]
 800f73c:	79fb      	ldrb	r3, [r7, #7]
 800f73e:	429a      	cmp	r2, r3
 800f740:	d029      	beq.n	800f796 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800f742:	7bfa      	ldrb	r2, [r7, #15]
 800f744:	4934      	ldr	r1, [pc, #208]	@ (800f818 <dns_call_found+0x178>)
 800f746:	4613      	mov	r3, r2
 800f748:	011b      	lsls	r3, r3, #4
 800f74a:	4413      	add	r3, r2
 800f74c:	011b      	lsls	r3, r3, #4
 800f74e:	440b      	add	r3, r1
 800f750:	330a      	adds	r3, #10
 800f752:	781b      	ldrb	r3, [r3, #0]
 800f754:	2b02      	cmp	r3, #2
 800f756:	d11f      	bne.n	800f798 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800f758:	7bfa      	ldrb	r2, [r7, #15]
 800f75a:	492f      	ldr	r1, [pc, #188]	@ (800f818 <dns_call_found+0x178>)
 800f75c:	4613      	mov	r3, r2
 800f75e:	011b      	lsls	r3, r3, #4
 800f760:	4413      	add	r3, r2
 800f762:	011b      	lsls	r3, r3, #4
 800f764:	440b      	add	r3, r1
 800f766:	330f      	adds	r3, #15
 800f768:	7819      	ldrb	r1, [r3, #0]
 800f76a:	79fa      	ldrb	r2, [r7, #7]
 800f76c:	482a      	ldr	r0, [pc, #168]	@ (800f818 <dns_call_found+0x178>)
 800f76e:	4613      	mov	r3, r2
 800f770:	011b      	lsls	r3, r3, #4
 800f772:	4413      	add	r3, r2
 800f774:	011b      	lsls	r3, r3, #4
 800f776:	4403      	add	r3, r0
 800f778:	330f      	adds	r3, #15
 800f77a:	781b      	ldrb	r3, [r3, #0]
 800f77c:	4299      	cmp	r1, r3
 800f77e:	d10b      	bne.n	800f798 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800f780:	79fa      	ldrb	r2, [r7, #7]
 800f782:	4925      	ldr	r1, [pc, #148]	@ (800f818 <dns_call_found+0x178>)
 800f784:	4613      	mov	r3, r2
 800f786:	011b      	lsls	r3, r3, #4
 800f788:	4413      	add	r3, r2
 800f78a:	011b      	lsls	r3, r3, #4
 800f78c:	440b      	add	r3, r1
 800f78e:	330f      	adds	r3, #15
 800f790:	2204      	movs	r2, #4
 800f792:	701a      	strb	r2, [r3, #0]
        break;
 800f794:	e006      	b.n	800f7a4 <dns_call_found+0x104>
      continue; /* only check other requests */
 800f796:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f798:	7bfb      	ldrb	r3, [r7, #15]
 800f79a:	3301      	adds	r3, #1
 800f79c:	73fb      	strb	r3, [r7, #15]
 800f79e:	7bfb      	ldrb	r3, [r7, #15]
 800f7a0:	2b03      	cmp	r3, #3
 800f7a2:	d9ca      	bls.n	800f73a <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800f7a4:	79fa      	ldrb	r2, [r7, #7]
 800f7a6:	491c      	ldr	r1, [pc, #112]	@ (800f818 <dns_call_found+0x178>)
 800f7a8:	4613      	mov	r3, r2
 800f7aa:	011b      	lsls	r3, r3, #4
 800f7ac:	4413      	add	r3, r2
 800f7ae:	011b      	lsls	r3, r3, #4
 800f7b0:	440b      	add	r3, r1
 800f7b2:	330f      	adds	r3, #15
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	2b03      	cmp	r3, #3
 800f7b8:	d827      	bhi.n	800f80a <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800f7ba:	79fa      	ldrb	r2, [r7, #7]
 800f7bc:	4916      	ldr	r1, [pc, #88]	@ (800f818 <dns_call_found+0x178>)
 800f7be:	4613      	mov	r3, r2
 800f7c0:	011b      	lsls	r3, r3, #4
 800f7c2:	4413      	add	r3, r2
 800f7c4:	011b      	lsls	r3, r3, #4
 800f7c6:	440b      	add	r3, r1
 800f7c8:	330f      	adds	r3, #15
 800f7ca:	781b      	ldrb	r3, [r3, #0]
 800f7cc:	461a      	mov	r2, r3
 800f7ce:	4b13      	ldr	r3, [pc, #76]	@ (800f81c <dns_call_found+0x17c>)
 800f7d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f7d4:	4618      	mov	r0, r3
 800f7d6:	f008 ff9f 	bl	8018718 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800f7da:	79fa      	ldrb	r2, [r7, #7]
 800f7dc:	490e      	ldr	r1, [pc, #56]	@ (800f818 <dns_call_found+0x178>)
 800f7de:	4613      	mov	r3, r2
 800f7e0:	011b      	lsls	r3, r3, #4
 800f7e2:	4413      	add	r3, r2
 800f7e4:	011b      	lsls	r3, r3, #4
 800f7e6:	440b      	add	r3, r1
 800f7e8:	330f      	adds	r3, #15
 800f7ea:	781b      	ldrb	r3, [r3, #0]
 800f7ec:	4619      	mov	r1, r3
 800f7ee:	4b0b      	ldr	r3, [pc, #44]	@ (800f81c <dns_call_found+0x17c>)
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800f7f6:	79fa      	ldrb	r2, [r7, #7]
 800f7f8:	4907      	ldr	r1, [pc, #28]	@ (800f818 <dns_call_found+0x178>)
 800f7fa:	4613      	mov	r3, r2
 800f7fc:	011b      	lsls	r3, r3, #4
 800f7fe:	4413      	add	r3, r2
 800f800:	011b      	lsls	r3, r3, #4
 800f802:	440b      	add	r3, r1
 800f804:	330f      	adds	r3, #15
 800f806:	2204      	movs	r2, #4
 800f808:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800f80a:	bf00      	nop
 800f80c:	3714      	adds	r7, #20
 800f80e:	46bd      	mov	sp, r7
 800f810:	bd90      	pop	{r4, r7, pc}
 800f812:	bf00      	nop
 800f814:	2000ed78 	.word	0x2000ed78
 800f818:	2000e938 	.word	0x2000e938
 800f81c:	2000e928 	.word	0x2000e928

0800f820 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800f826:	f00d fcb1 	bl	801d18c <rand>
 800f82a:	4603      	mov	r3, r0
 800f82c:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800f82e:	2300      	movs	r3, #0
 800f830:	71fb      	strb	r3, [r7, #7]
 800f832:	e01a      	b.n	800f86a <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800f834:	79fa      	ldrb	r2, [r7, #7]
 800f836:	4911      	ldr	r1, [pc, #68]	@ (800f87c <dns_create_txid+0x5c>)
 800f838:	4613      	mov	r3, r2
 800f83a:	011b      	lsls	r3, r3, #4
 800f83c:	4413      	add	r3, r2
 800f83e:	011b      	lsls	r3, r3, #4
 800f840:	440b      	add	r3, r1
 800f842:	330a      	adds	r3, #10
 800f844:	781b      	ldrb	r3, [r3, #0]
 800f846:	2b02      	cmp	r3, #2
 800f848:	d10c      	bne.n	800f864 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800f84a:	79fa      	ldrb	r2, [r7, #7]
 800f84c:	490b      	ldr	r1, [pc, #44]	@ (800f87c <dns_create_txid+0x5c>)
 800f84e:	4613      	mov	r3, r2
 800f850:	011b      	lsls	r3, r3, #4
 800f852:	4413      	add	r3, r2
 800f854:	011b      	lsls	r3, r3, #4
 800f856:	440b      	add	r3, r1
 800f858:	3308      	adds	r3, #8
 800f85a:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800f85c:	88ba      	ldrh	r2, [r7, #4]
 800f85e:	429a      	cmp	r2, r3
 800f860:	d100      	bne.n	800f864 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800f862:	e7e0      	b.n	800f826 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800f864:	79fb      	ldrb	r3, [r7, #7]
 800f866:	3301      	adds	r3, #1
 800f868:	71fb      	strb	r3, [r7, #7]
 800f86a:	79fb      	ldrb	r3, [r7, #7]
 800f86c:	2b03      	cmp	r3, #3
 800f86e:	d9e1      	bls.n	800f834 <dns_create_txid+0x14>
    }
  }

  return txid;
 800f870:	88bb      	ldrh	r3, [r7, #4]
}
 800f872:	4618      	mov	r0, r3
 800f874:	3708      	adds	r7, #8
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	2000e938 	.word	0x2000e938

0800f880 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800f880:	b480      	push	{r7}
 800f882:	b085      	sub	sp, #20
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800f888:	2300      	movs	r3, #0
 800f88a:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d00d      	beq.n	800f8ae <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	7adb      	ldrb	r3, [r3, #11]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d109      	bne.n	800f8ae <dns_backupserver_available+0x2e>
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	7adb      	ldrb	r3, [r3, #11]
 800f89e:	3301      	adds	r3, #1
 800f8a0:	4a06      	ldr	r2, [pc, #24]	@ (800f8bc <dns_backupserver_available+0x3c>)
 800f8a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d001      	beq.n	800f8ae <dns_backupserver_available+0x2e>
      ret = 1;
 800f8aa:	2301      	movs	r3, #1
 800f8ac:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800f8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3714      	adds	r7, #20
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ba:	4770      	bx	lr
 800f8bc:	2000eda8 	.word	0x2000eda8

0800f8c0 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800f8c0:	b580      	push	{r7, lr}
 800f8c2:	b084      	sub	sp, #16
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	4603      	mov	r3, r0
 800f8c8:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800f8ca:	79fa      	ldrb	r2, [r7, #7]
 800f8cc:	4613      	mov	r3, r2
 800f8ce:	011b      	lsls	r3, r3, #4
 800f8d0:	4413      	add	r3, r2
 800f8d2:	011b      	lsls	r3, r3, #4
 800f8d4:	4a48      	ldr	r2, [pc, #288]	@ (800f9f8 <dns_check_entry+0x138>)
 800f8d6:	4413      	add	r3, r2
 800f8d8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800f8da:	79fb      	ldrb	r3, [r7, #7]
 800f8dc:	2b03      	cmp	r3, #3
 800f8de:	d906      	bls.n	800f8ee <dns_check_entry+0x2e>
 800f8e0:	4b46      	ldr	r3, [pc, #280]	@ (800f9fc <dns_check_entry+0x13c>)
 800f8e2:	f240 421c 	movw	r2, #1052	@ 0x41c
 800f8e6:	4946      	ldr	r1, [pc, #280]	@ (800fa00 <dns_check_entry+0x140>)
 800f8e8:	4846      	ldr	r0, [pc, #280]	@ (800fa04 <dns_check_entry+0x144>)
 800f8ea:	f00e fcf7 	bl	801e2dc <iprintf>

  switch (entry->state) {
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	7a9b      	ldrb	r3, [r3, #10]
 800f8f2:	2b03      	cmp	r3, #3
 800f8f4:	d86f      	bhi.n	800f9d6 <dns_check_entry+0x116>
 800f8f6:	a201      	add	r2, pc, #4	@ (adr r2, 800f8fc <dns_check_entry+0x3c>)
 800f8f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8fc:	0800f9e7 	.word	0x0800f9e7
 800f900:	0800f90d 	.word	0x0800f90d
 800f904:	0800f93f 	.word	0x0800f93f
 800f908:	0800f9b5 	.word	0x0800f9b5
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800f90c:	f7ff ff88 	bl	800f820 <dns_create_txid>
 800f910:	4603      	mov	r3, r0
 800f912:	461a      	mov	r2, r3
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	2202      	movs	r2, #2
 800f91c:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	2200      	movs	r2, #0
 800f922:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	2201      	movs	r2, #1
 800f928:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	2200      	movs	r2, #0
 800f92e:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800f930:	79fb      	ldrb	r3, [r7, #7]
 800f932:	4618      	mov	r0, r3
 800f934:	f7ff fdc4 	bl	800f4c0 <dns_send>
 800f938:	4603      	mov	r3, r0
 800f93a:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800f93c:	e058      	b.n	800f9f0 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800f93e:	68fb      	ldr	r3, [r7, #12]
 800f940:	7b1b      	ldrb	r3, [r3, #12]
 800f942:	3b01      	subs	r3, #1
 800f944:	b2da      	uxtb	r2, r3
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	731a      	strb	r2, [r3, #12]
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	7b1b      	ldrb	r3, [r3, #12]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d14b      	bne.n	800f9ea <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	7b5b      	ldrb	r3, [r3, #13]
 800f956:	3301      	adds	r3, #1
 800f958:	b2da      	uxtb	r2, r3
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	735a      	strb	r2, [r3, #13]
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	7b5b      	ldrb	r3, [r3, #13]
 800f962:	2b04      	cmp	r3, #4
 800f964:	d11b      	bne.n	800f99e <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800f966:	68f8      	ldr	r0, [r7, #12]
 800f968:	f7ff ff8a 	bl	800f880 <dns_backupserver_available>
 800f96c:	4603      	mov	r3, r0
 800f96e:	2b00      	cmp	r3, #0
 800f970:	d00c      	beq.n	800f98c <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	7adb      	ldrb	r3, [r3, #11]
 800f976:	3301      	adds	r3, #1
 800f978:	b2da      	uxtb	r2, r3
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	2201      	movs	r2, #1
 800f982:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800f984:	68fb      	ldr	r3, [r7, #12]
 800f986:	2200      	movs	r2, #0
 800f988:	735a      	strb	r2, [r3, #13]
 800f98a:	e00c      	b.n	800f9a6 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800f98c:	79fb      	ldrb	r3, [r7, #7]
 800f98e:	2100      	movs	r1, #0
 800f990:	4618      	mov	r0, r3
 800f992:	f7ff fe85 	bl	800f6a0 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	2200      	movs	r2, #0
 800f99a:	729a      	strb	r2, [r3, #10]
            break;
 800f99c:	e028      	b.n	800f9f0 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	7b5a      	ldrb	r2, [r3, #13]
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800f9a6:	79fb      	ldrb	r3, [r7, #7]
 800f9a8:	4618      	mov	r0, r3
 800f9aa:	f7ff fd89 	bl	800f4c0 <dns_send>
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800f9b2:	e01a      	b.n	800f9ea <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800f9b4:	68fb      	ldr	r3, [r7, #12]
 800f9b6:	681b      	ldr	r3, [r3, #0]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d008      	beq.n	800f9ce <dns_check_entry+0x10e>
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	1e5a      	subs	r2, r3, #1
 800f9c2:	68fb      	ldr	r3, [r7, #12]
 800f9c4:	601a      	str	r2, [r3, #0]
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d10f      	bne.n	800f9ee <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	2200      	movs	r2, #0
 800f9d2:	729a      	strb	r2, [r3, #10]
      }
      break;
 800f9d4:	e00b      	b.n	800f9ee <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800f9d6:	4b09      	ldr	r3, [pc, #36]	@ (800f9fc <dns_check_entry+0x13c>)
 800f9d8:	f240 425b 	movw	r2, #1115	@ 0x45b
 800f9dc:	490a      	ldr	r1, [pc, #40]	@ (800fa08 <dns_check_entry+0x148>)
 800f9de:	4809      	ldr	r0, [pc, #36]	@ (800fa04 <dns_check_entry+0x144>)
 800f9e0:	f00e fc7c 	bl	801e2dc <iprintf>
      break;
 800f9e4:	e004      	b.n	800f9f0 <dns_check_entry+0x130>
      break;
 800f9e6:	bf00      	nop
 800f9e8:	e002      	b.n	800f9f0 <dns_check_entry+0x130>
      break;
 800f9ea:	bf00      	nop
 800f9ec:	e000      	b.n	800f9f0 <dns_check_entry+0x130>
      break;
 800f9ee:	bf00      	nop
  }
}
 800f9f0:	bf00      	nop
 800f9f2:	3710      	adds	r7, #16
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	bd80      	pop	{r7, pc}
 800f9f8:	2000e938 	.word	0x2000e938
 800f9fc:	08022c68 	.word	0x08022c68
 800fa00:	08022cd8 	.word	0x08022cd8
 800fa04:	08022cb0 	.word	0x08022cb0
 800fa08:	08022cf4 	.word	0x08022cf4

0800fa0c <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b082      	sub	sp, #8
 800fa10:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800fa12:	2300      	movs	r3, #0
 800fa14:	71fb      	strb	r3, [r7, #7]
 800fa16:	e006      	b.n	800fa26 <dns_check_entries+0x1a>
    dns_check_entry(i);
 800fa18:	79fb      	ldrb	r3, [r7, #7]
 800fa1a:	4618      	mov	r0, r3
 800fa1c:	f7ff ff50 	bl	800f8c0 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800fa20:	79fb      	ldrb	r3, [r7, #7]
 800fa22:	3301      	adds	r3, #1
 800fa24:	71fb      	strb	r3, [r7, #7]
 800fa26:	79fb      	ldrb	r3, [r7, #7]
 800fa28:	2b03      	cmp	r3, #3
 800fa2a:	d9f5      	bls.n	800fa18 <dns_check_entries+0xc>
  }
}
 800fa2c:	bf00      	nop
 800fa2e:	bf00      	nop
 800fa30:	3708      	adds	r7, #8
 800fa32:	46bd      	mov	sp, r7
 800fa34:	bd80      	pop	{r7, pc}

0800fa36 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fa36:	b580      	push	{r7, lr}
 800fa38:	b082      	sub	sp, #8
 800fa3a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800fa40:	f00d fb28 	bl	801d094 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800fa44:	f000 f8d6 	bl	800fbf4 <mem_init>
  memp_init();
 800fa48:	f000 fc32 	bl	80102b0 <memp_init>
  pbuf_init();
  netif_init();
 800fa4c:	f000 fd3e 	bl	80104cc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fa50:	f008 f978 	bl	8017d44 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800fa54:	f001 ffc4 	bl	80119e0 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800fa58:	f7ff fd00 	bl	800f45c <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800fa5c:	f008 f8b8 	bl	8017bd0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fa60:	bf00      	nop
 800fa62:	3708      	adds	r7, #8
 800fa64:	46bd      	mov	sp, r7
 800fa66:	bd80      	pop	{r7, pc}

0800fa68 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fa68:	b480      	push	{r7}
 800fa6a:	b083      	sub	sp, #12
 800fa6c:	af00      	add	r7, sp, #0
 800fa6e:	4603      	mov	r3, r0
 800fa70:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800fa72:	4b05      	ldr	r3, [pc, #20]	@ (800fa88 <ptr_to_mem+0x20>)
 800fa74:	681a      	ldr	r2, [r3, #0]
 800fa76:	88fb      	ldrh	r3, [r7, #6]
 800fa78:	4413      	add	r3, r2
}
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	370c      	adds	r7, #12
 800fa7e:	46bd      	mov	sp, r7
 800fa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa84:	4770      	bx	lr
 800fa86:	bf00      	nop
 800fa88:	2000f41c 	.word	0x2000f41c

0800fa8c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800fa8c:	b480      	push	{r7}
 800fa8e:	b083      	sub	sp, #12
 800fa90:	af00      	add	r7, sp, #0
 800fa92:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800fa94:	4b05      	ldr	r3, [pc, #20]	@ (800faac <mem_to_ptr+0x20>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	687a      	ldr	r2, [r7, #4]
 800fa9a:	1ad3      	subs	r3, r2, r3
 800fa9c:	b29b      	uxth	r3, r3
}
 800fa9e:	4618      	mov	r0, r3
 800faa0:	370c      	adds	r7, #12
 800faa2:	46bd      	mov	sp, r7
 800faa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa8:	4770      	bx	lr
 800faaa:	bf00      	nop
 800faac:	2000f41c 	.word	0x2000f41c

0800fab0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800fab0:	b590      	push	{r4, r7, lr}
 800fab2:	b085      	sub	sp, #20
 800fab4:	af00      	add	r7, sp, #0
 800fab6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fab8:	4b45      	ldr	r3, [pc, #276]	@ (800fbd0 <plug_holes+0x120>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	687a      	ldr	r2, [r7, #4]
 800fabe:	429a      	cmp	r2, r3
 800fac0:	d206      	bcs.n	800fad0 <plug_holes+0x20>
 800fac2:	4b44      	ldr	r3, [pc, #272]	@ (800fbd4 <plug_holes+0x124>)
 800fac4:	f240 12df 	movw	r2, #479	@ 0x1df
 800fac8:	4943      	ldr	r1, [pc, #268]	@ (800fbd8 <plug_holes+0x128>)
 800faca:	4844      	ldr	r0, [pc, #272]	@ (800fbdc <plug_holes+0x12c>)
 800facc:	f00e fc06 	bl	801e2dc <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fad0:	4b43      	ldr	r3, [pc, #268]	@ (800fbe0 <plug_holes+0x130>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	687a      	ldr	r2, [r7, #4]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d306      	bcc.n	800fae8 <plug_holes+0x38>
 800fada:	4b3e      	ldr	r3, [pc, #248]	@ (800fbd4 <plug_holes+0x124>)
 800fadc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800fae0:	4940      	ldr	r1, [pc, #256]	@ (800fbe4 <plug_holes+0x134>)
 800fae2:	483e      	ldr	r0, [pc, #248]	@ (800fbdc <plug_holes+0x12c>)
 800fae4:	f00e fbfa 	bl	801e2dc <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	791b      	ldrb	r3, [r3, #4]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d006      	beq.n	800fafe <plug_holes+0x4e>
 800faf0:	4b38      	ldr	r3, [pc, #224]	@ (800fbd4 <plug_holes+0x124>)
 800faf2:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800faf6:	493c      	ldr	r1, [pc, #240]	@ (800fbe8 <plug_holes+0x138>)
 800faf8:	4838      	ldr	r0, [pc, #224]	@ (800fbdc <plug_holes+0x12c>)
 800fafa:	f00e fbef 	bl	801e2dc <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	881b      	ldrh	r3, [r3, #0]
 800fb02:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fb06:	d906      	bls.n	800fb16 <plug_holes+0x66>
 800fb08:	4b32      	ldr	r3, [pc, #200]	@ (800fbd4 <plug_holes+0x124>)
 800fb0a:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800fb0e:	4937      	ldr	r1, [pc, #220]	@ (800fbec <plug_holes+0x13c>)
 800fb10:	4832      	ldr	r0, [pc, #200]	@ (800fbdc <plug_holes+0x12c>)
 800fb12:	f00e fbe3 	bl	801e2dc <iprintf>

  nmem = ptr_to_mem(mem->next);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	881b      	ldrh	r3, [r3, #0]
 800fb1a:	4618      	mov	r0, r3
 800fb1c:	f7ff ffa4 	bl	800fa68 <ptr_to_mem>
 800fb20:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fb22:	687a      	ldr	r2, [r7, #4]
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	429a      	cmp	r2, r3
 800fb28:	d024      	beq.n	800fb74 <plug_holes+0xc4>
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	791b      	ldrb	r3, [r3, #4]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d120      	bne.n	800fb74 <plug_holes+0xc4>
 800fb32:	4b2b      	ldr	r3, [pc, #172]	@ (800fbe0 <plug_holes+0x130>)
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	68fa      	ldr	r2, [r7, #12]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d01b      	beq.n	800fb74 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800fb3c:	4b2c      	ldr	r3, [pc, #176]	@ (800fbf0 <plug_holes+0x140>)
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	68fa      	ldr	r2, [r7, #12]
 800fb42:	429a      	cmp	r2, r3
 800fb44:	d102      	bne.n	800fb4c <plug_holes+0x9c>
      lfree = mem;
 800fb46:	4a2a      	ldr	r2, [pc, #168]	@ (800fbf0 <plug_holes+0x140>)
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	881a      	ldrh	r2, [r3, #0]
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	881b      	ldrh	r3, [r3, #0]
 800fb58:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fb5c:	d00a      	beq.n	800fb74 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	881b      	ldrh	r3, [r3, #0]
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7ff ff80 	bl	800fa68 <ptr_to_mem>
 800fb68:	4604      	mov	r4, r0
 800fb6a:	6878      	ldr	r0, [r7, #4]
 800fb6c:	f7ff ff8e 	bl	800fa8c <mem_to_ptr>
 800fb70:	4603      	mov	r3, r0
 800fb72:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	885b      	ldrh	r3, [r3, #2]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7ff ff75 	bl	800fa68 <ptr_to_mem>
 800fb7e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fb80:	68ba      	ldr	r2, [r7, #8]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	429a      	cmp	r2, r3
 800fb86:	d01f      	beq.n	800fbc8 <plug_holes+0x118>
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	791b      	ldrb	r3, [r3, #4]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d11b      	bne.n	800fbc8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800fb90:	4b17      	ldr	r3, [pc, #92]	@ (800fbf0 <plug_holes+0x140>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	687a      	ldr	r2, [r7, #4]
 800fb96:	429a      	cmp	r2, r3
 800fb98:	d102      	bne.n	800fba0 <plug_holes+0xf0>
      lfree = pmem;
 800fb9a:	4a15      	ldr	r2, [pc, #84]	@ (800fbf0 <plug_holes+0x140>)
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	881a      	ldrh	r2, [r3, #0]
 800fba4:	68bb      	ldr	r3, [r7, #8]
 800fba6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	881b      	ldrh	r3, [r3, #0]
 800fbac:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fbb0:	d00a      	beq.n	800fbc8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	881b      	ldrh	r3, [r3, #0]
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f7ff ff56 	bl	800fa68 <ptr_to_mem>
 800fbbc:	4604      	mov	r4, r0
 800fbbe:	68b8      	ldr	r0, [r7, #8]
 800fbc0:	f7ff ff64 	bl	800fa8c <mem_to_ptr>
 800fbc4:	4603      	mov	r3, r0
 800fbc6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800fbc8:	bf00      	nop
 800fbca:	3714      	adds	r7, #20
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	bd90      	pop	{r4, r7, pc}
 800fbd0:	2000f41c 	.word	0x2000f41c
 800fbd4:	08022d14 	.word	0x08022d14
 800fbd8:	08022d44 	.word	0x08022d44
 800fbdc:	08022d5c 	.word	0x08022d5c
 800fbe0:	2000f420 	.word	0x2000f420
 800fbe4:	08022d84 	.word	0x08022d84
 800fbe8:	08022da0 	.word	0x08022da0
 800fbec:	08022dbc 	.word	0x08022dbc
 800fbf0:	2000f428 	.word	0x2000f428

0800fbf4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800fbf4:	b580      	push	{r7, lr}
 800fbf6:	b082      	sub	sp, #8
 800fbf8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800fbfa:	4b1f      	ldr	r3, [pc, #124]	@ (800fc78 <mem_init+0x84>)
 800fbfc:	3303      	adds	r3, #3
 800fbfe:	f023 0303 	bic.w	r3, r3, #3
 800fc02:	461a      	mov	r2, r3
 800fc04:	4b1d      	ldr	r3, [pc, #116]	@ (800fc7c <mem_init+0x88>)
 800fc06:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800fc08:	4b1c      	ldr	r3, [pc, #112]	@ (800fc7c <mem_init+0x88>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800fc14:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	2200      	movs	r2, #0
 800fc1a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2200      	movs	r2, #0
 800fc20:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800fc22:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800fc26:	f7ff ff1f 	bl	800fa68 <ptr_to_mem>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	4a14      	ldr	r2, [pc, #80]	@ (800fc80 <mem_init+0x8c>)
 800fc2e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800fc30:	4b13      	ldr	r3, [pc, #76]	@ (800fc80 <mem_init+0x8c>)
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	2201      	movs	r2, #1
 800fc36:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800fc38:	4b11      	ldr	r3, [pc, #68]	@ (800fc80 <mem_init+0x8c>)
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800fc40:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800fc42:	4b0f      	ldr	r3, [pc, #60]	@ (800fc80 <mem_init+0x8c>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800fc4a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800fc4c:	4b0b      	ldr	r3, [pc, #44]	@ (800fc7c <mem_init+0x88>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	4a0c      	ldr	r2, [pc, #48]	@ (800fc84 <mem_init+0x90>)
 800fc52:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800fc54:	480c      	ldr	r0, [pc, #48]	@ (800fc88 <mem_init+0x94>)
 800fc56:	f00d fa29 	bl	801d0ac <sys_mutex_new>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d006      	beq.n	800fc6e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800fc60:	4b0a      	ldr	r3, [pc, #40]	@ (800fc8c <mem_init+0x98>)
 800fc62:	f240 221f 	movw	r2, #543	@ 0x21f
 800fc66:	490a      	ldr	r1, [pc, #40]	@ (800fc90 <mem_init+0x9c>)
 800fc68:	480a      	ldr	r0, [pc, #40]	@ (800fc94 <mem_init+0xa0>)
 800fc6a:	f00e fb37 	bl	801e2dc <iprintf>
  }
}
 800fc6e:	bf00      	nop
 800fc70:	3708      	adds	r7, #8
 800fc72:	46bd      	mov	sp, r7
 800fc74:	bd80      	pop	{r7, pc}
 800fc76:	bf00      	nop
 800fc78:	2000edc8 	.word	0x2000edc8
 800fc7c:	2000f41c 	.word	0x2000f41c
 800fc80:	2000f420 	.word	0x2000f420
 800fc84:	2000f428 	.word	0x2000f428
 800fc88:	2000f424 	.word	0x2000f424
 800fc8c:	08022d14 	.word	0x08022d14
 800fc90:	08022de8 	.word	0x08022de8
 800fc94:	08022d5c 	.word	0x08022d5c

0800fc98 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800fc98:	b580      	push	{r7, lr}
 800fc9a:	b086      	sub	sp, #24
 800fc9c:	af00      	add	r7, sp, #0
 800fc9e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800fca0:	6878      	ldr	r0, [r7, #4]
 800fca2:	f7ff fef3 	bl	800fa8c <mem_to_ptr>
 800fca6:	4603      	mov	r3, r0
 800fca8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	881b      	ldrh	r3, [r3, #0]
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7ff feda 	bl	800fa68 <ptr_to_mem>
 800fcb4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	885b      	ldrh	r3, [r3, #2]
 800fcba:	4618      	mov	r0, r3
 800fcbc:	f7ff fed4 	bl	800fa68 <ptr_to_mem>
 800fcc0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	881b      	ldrh	r3, [r3, #0]
 800fcc6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fcca:	d818      	bhi.n	800fcfe <mem_link_valid+0x66>
 800fccc:	687b      	ldr	r3, [r7, #4]
 800fcce:	885b      	ldrh	r3, [r3, #2]
 800fcd0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fcd4:	d813      	bhi.n	800fcfe <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fcda:	8afa      	ldrh	r2, [r7, #22]
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d004      	beq.n	800fcea <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	881b      	ldrh	r3, [r3, #0]
 800fce4:	8afa      	ldrh	r2, [r7, #22]
 800fce6:	429a      	cmp	r2, r3
 800fce8:	d109      	bne.n	800fcfe <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fcea:	4b08      	ldr	r3, [pc, #32]	@ (800fd0c <mem_link_valid+0x74>)
 800fcec:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fcee:	693a      	ldr	r2, [r7, #16]
 800fcf0:	429a      	cmp	r2, r3
 800fcf2:	d006      	beq.n	800fd02 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fcf4:	693b      	ldr	r3, [r7, #16]
 800fcf6:	885b      	ldrh	r3, [r3, #2]
 800fcf8:	8afa      	ldrh	r2, [r7, #22]
 800fcfa:	429a      	cmp	r2, r3
 800fcfc:	d001      	beq.n	800fd02 <mem_link_valid+0x6a>
    return 0;
 800fcfe:	2300      	movs	r3, #0
 800fd00:	e000      	b.n	800fd04 <mem_link_valid+0x6c>
  }
  return 1;
 800fd02:	2301      	movs	r3, #1
}
 800fd04:	4618      	mov	r0, r3
 800fd06:	3718      	adds	r7, #24
 800fd08:	46bd      	mov	sp, r7
 800fd0a:	bd80      	pop	{r7, pc}
 800fd0c:	2000f420 	.word	0x2000f420

0800fd10 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fd10:	b580      	push	{r7, lr}
 800fd12:	b088      	sub	sp, #32
 800fd14:	af00      	add	r7, sp, #0
 800fd16:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d070      	beq.n	800fe00 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f003 0303 	and.w	r3, r3, #3
 800fd24:	2b00      	cmp	r3, #0
 800fd26:	d00d      	beq.n	800fd44 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800fd28:	4b37      	ldr	r3, [pc, #220]	@ (800fe08 <mem_free+0xf8>)
 800fd2a:	f240 2273 	movw	r2, #627	@ 0x273
 800fd2e:	4937      	ldr	r1, [pc, #220]	@ (800fe0c <mem_free+0xfc>)
 800fd30:	4837      	ldr	r0, [pc, #220]	@ (800fe10 <mem_free+0x100>)
 800fd32:	f00e fad3 	bl	801e2dc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fd36:	f00d fa0b 	bl	801d150 <sys_arch_protect>
 800fd3a:	60f8      	str	r0, [r7, #12]
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	f00d fa15 	bl	801d16c <sys_arch_unprotect>
    return;
 800fd42:	e05e      	b.n	800fe02 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	3b08      	subs	r3, #8
 800fd48:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800fd4a:	4b32      	ldr	r3, [pc, #200]	@ (800fe14 <mem_free+0x104>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	69fa      	ldr	r2, [r7, #28]
 800fd50:	429a      	cmp	r2, r3
 800fd52:	d306      	bcc.n	800fd62 <mem_free+0x52>
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f103 020c 	add.w	r2, r3, #12
 800fd5a:	4b2f      	ldr	r3, [pc, #188]	@ (800fe18 <mem_free+0x108>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d90d      	bls.n	800fd7e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800fd62:	4b29      	ldr	r3, [pc, #164]	@ (800fe08 <mem_free+0xf8>)
 800fd64:	f240 227f 	movw	r2, #639	@ 0x27f
 800fd68:	492c      	ldr	r1, [pc, #176]	@ (800fe1c <mem_free+0x10c>)
 800fd6a:	4829      	ldr	r0, [pc, #164]	@ (800fe10 <mem_free+0x100>)
 800fd6c:	f00e fab6 	bl	801e2dc <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fd70:	f00d f9ee 	bl	801d150 <sys_arch_protect>
 800fd74:	6138      	str	r0, [r7, #16]
 800fd76:	6938      	ldr	r0, [r7, #16]
 800fd78:	f00d f9f8 	bl	801d16c <sys_arch_unprotect>
    return;
 800fd7c:	e041      	b.n	800fe02 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fd7e:	4828      	ldr	r0, [pc, #160]	@ (800fe20 <mem_free+0x110>)
 800fd80:	f00d f9aa 	bl	801d0d8 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800fd84:	69fb      	ldr	r3, [r7, #28]
 800fd86:	791b      	ldrb	r3, [r3, #4]
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d110      	bne.n	800fdae <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800fd8c:	4b1e      	ldr	r3, [pc, #120]	@ (800fe08 <mem_free+0xf8>)
 800fd8e:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800fd92:	4924      	ldr	r1, [pc, #144]	@ (800fe24 <mem_free+0x114>)
 800fd94:	481e      	ldr	r0, [pc, #120]	@ (800fe10 <mem_free+0x100>)
 800fd96:	f00e faa1 	bl	801e2dc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800fd9a:	4821      	ldr	r0, [pc, #132]	@ (800fe20 <mem_free+0x110>)
 800fd9c:	f00d f9ab 	bl	801d0f6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fda0:	f00d f9d6 	bl	801d150 <sys_arch_protect>
 800fda4:	6178      	str	r0, [r7, #20]
 800fda6:	6978      	ldr	r0, [r7, #20]
 800fda8:	f00d f9e0 	bl	801d16c <sys_arch_unprotect>
    return;
 800fdac:	e029      	b.n	800fe02 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800fdae:	69f8      	ldr	r0, [r7, #28]
 800fdb0:	f7ff ff72 	bl	800fc98 <mem_link_valid>
 800fdb4:	4603      	mov	r3, r0
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d110      	bne.n	800fddc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800fdba:	4b13      	ldr	r3, [pc, #76]	@ (800fe08 <mem_free+0xf8>)
 800fdbc:	f240 2295 	movw	r2, #661	@ 0x295
 800fdc0:	4919      	ldr	r1, [pc, #100]	@ (800fe28 <mem_free+0x118>)
 800fdc2:	4813      	ldr	r0, [pc, #76]	@ (800fe10 <mem_free+0x100>)
 800fdc4:	f00e fa8a 	bl	801e2dc <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800fdc8:	4815      	ldr	r0, [pc, #84]	@ (800fe20 <mem_free+0x110>)
 800fdca:	f00d f994 	bl	801d0f6 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fdce:	f00d f9bf 	bl	801d150 <sys_arch_protect>
 800fdd2:	61b8      	str	r0, [r7, #24]
 800fdd4:	69b8      	ldr	r0, [r7, #24]
 800fdd6:	f00d f9c9 	bl	801d16c <sys_arch_unprotect>
    return;
 800fdda:	e012      	b.n	800fe02 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800fddc:	69fb      	ldr	r3, [r7, #28]
 800fdde:	2200      	movs	r2, #0
 800fde0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800fde2:	4b12      	ldr	r3, [pc, #72]	@ (800fe2c <mem_free+0x11c>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	69fa      	ldr	r2, [r7, #28]
 800fde8:	429a      	cmp	r2, r3
 800fdea:	d202      	bcs.n	800fdf2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800fdec:	4a0f      	ldr	r2, [pc, #60]	@ (800fe2c <mem_free+0x11c>)
 800fdee:	69fb      	ldr	r3, [r7, #28]
 800fdf0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800fdf2:	69f8      	ldr	r0, [r7, #28]
 800fdf4:	f7ff fe5c 	bl	800fab0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fdf8:	4809      	ldr	r0, [pc, #36]	@ (800fe20 <mem_free+0x110>)
 800fdfa:	f00d f97c 	bl	801d0f6 <sys_mutex_unlock>
 800fdfe:	e000      	b.n	800fe02 <mem_free+0xf2>
    return;
 800fe00:	bf00      	nop
}
 800fe02:	3720      	adds	r7, #32
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	08022d14 	.word	0x08022d14
 800fe0c:	08022e04 	.word	0x08022e04
 800fe10:	08022d5c 	.word	0x08022d5c
 800fe14:	2000f41c 	.word	0x2000f41c
 800fe18:	2000f420 	.word	0x2000f420
 800fe1c:	08022e28 	.word	0x08022e28
 800fe20:	2000f424 	.word	0x2000f424
 800fe24:	08022e44 	.word	0x08022e44
 800fe28:	08022e6c 	.word	0x08022e6c
 800fe2c:	2000f428 	.word	0x2000f428

0800fe30 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800fe30:	b580      	push	{r7, lr}
 800fe32:	b088      	sub	sp, #32
 800fe34:	af00      	add	r7, sp, #0
 800fe36:	6078      	str	r0, [r7, #4]
 800fe38:	460b      	mov	r3, r1
 800fe3a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fe3c:	887b      	ldrh	r3, [r7, #2]
 800fe3e:	3303      	adds	r3, #3
 800fe40:	b29b      	uxth	r3, r3
 800fe42:	f023 0303 	bic.w	r3, r3, #3
 800fe46:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800fe48:	8bfb      	ldrh	r3, [r7, #30]
 800fe4a:	2b0b      	cmp	r3, #11
 800fe4c:	d801      	bhi.n	800fe52 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fe4e:	230c      	movs	r3, #12
 800fe50:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fe52:	8bfb      	ldrh	r3, [r7, #30]
 800fe54:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fe58:	d803      	bhi.n	800fe62 <mem_trim+0x32>
 800fe5a:	8bfa      	ldrh	r2, [r7, #30]
 800fe5c:	887b      	ldrh	r3, [r7, #2]
 800fe5e:	429a      	cmp	r2, r3
 800fe60:	d201      	bcs.n	800fe66 <mem_trim+0x36>
    return NULL;
 800fe62:	2300      	movs	r3, #0
 800fe64:	e0d8      	b.n	8010018 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fe66:	4b6e      	ldr	r3, [pc, #440]	@ (8010020 <mem_trim+0x1f0>)
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	687a      	ldr	r2, [r7, #4]
 800fe6c:	429a      	cmp	r2, r3
 800fe6e:	d304      	bcc.n	800fe7a <mem_trim+0x4a>
 800fe70:	4b6c      	ldr	r3, [pc, #432]	@ (8010024 <mem_trim+0x1f4>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	687a      	ldr	r2, [r7, #4]
 800fe76:	429a      	cmp	r2, r3
 800fe78:	d306      	bcc.n	800fe88 <mem_trim+0x58>
 800fe7a:	4b6b      	ldr	r3, [pc, #428]	@ (8010028 <mem_trim+0x1f8>)
 800fe7c:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800fe80:	496a      	ldr	r1, [pc, #424]	@ (801002c <mem_trim+0x1fc>)
 800fe82:	486b      	ldr	r0, [pc, #428]	@ (8010030 <mem_trim+0x200>)
 800fe84:	f00e fa2a 	bl	801e2dc <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fe88:	4b65      	ldr	r3, [pc, #404]	@ (8010020 <mem_trim+0x1f0>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	687a      	ldr	r2, [r7, #4]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d304      	bcc.n	800fe9c <mem_trim+0x6c>
 800fe92:	4b64      	ldr	r3, [pc, #400]	@ (8010024 <mem_trim+0x1f4>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	687a      	ldr	r2, [r7, #4]
 800fe98:	429a      	cmp	r2, r3
 800fe9a:	d307      	bcc.n	800feac <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fe9c:	f00d f958 	bl	801d150 <sys_arch_protect>
 800fea0:	60b8      	str	r0, [r7, #8]
 800fea2:	68b8      	ldr	r0, [r7, #8]
 800fea4:	f00d f962 	bl	801d16c <sys_arch_unprotect>
    return rmem;
 800fea8:	687b      	ldr	r3, [r7, #4]
 800feaa:	e0b5      	b.n	8010018 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	3b08      	subs	r3, #8
 800feb0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800feb2:	69b8      	ldr	r0, [r7, #24]
 800feb4:	f7ff fdea 	bl	800fa8c <mem_to_ptr>
 800feb8:	4603      	mov	r3, r0
 800feba:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800febc:	69bb      	ldr	r3, [r7, #24]
 800febe:	881a      	ldrh	r2, [r3, #0]
 800fec0:	8afb      	ldrh	r3, [r7, #22]
 800fec2:	1ad3      	subs	r3, r2, r3
 800fec4:	b29b      	uxth	r3, r3
 800fec6:	3b08      	subs	r3, #8
 800fec8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800feca:	8bfa      	ldrh	r2, [r7, #30]
 800fecc:	8abb      	ldrh	r3, [r7, #20]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d906      	bls.n	800fee0 <mem_trim+0xb0>
 800fed2:	4b55      	ldr	r3, [pc, #340]	@ (8010028 <mem_trim+0x1f8>)
 800fed4:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800fed8:	4956      	ldr	r1, [pc, #344]	@ (8010034 <mem_trim+0x204>)
 800feda:	4855      	ldr	r0, [pc, #340]	@ (8010030 <mem_trim+0x200>)
 800fedc:	f00e f9fe 	bl	801e2dc <iprintf>
  if (newsize > size) {
 800fee0:	8bfa      	ldrh	r2, [r7, #30]
 800fee2:	8abb      	ldrh	r3, [r7, #20]
 800fee4:	429a      	cmp	r2, r3
 800fee6:	d901      	bls.n	800feec <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800fee8:	2300      	movs	r3, #0
 800feea:	e095      	b.n	8010018 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800feec:	8bfa      	ldrh	r2, [r7, #30]
 800feee:	8abb      	ldrh	r3, [r7, #20]
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d101      	bne.n	800fef8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	e08f      	b.n	8010018 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fef8:	484f      	ldr	r0, [pc, #316]	@ (8010038 <mem_trim+0x208>)
 800fefa:	f00d f8ed 	bl	801d0d8 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800fefe:	69bb      	ldr	r3, [r7, #24]
 800ff00:	881b      	ldrh	r3, [r3, #0]
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7ff fdb0 	bl	800fa68 <ptr_to_mem>
 800ff08:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ff0a:	693b      	ldr	r3, [r7, #16]
 800ff0c:	791b      	ldrb	r3, [r3, #4]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d13f      	bne.n	800ff92 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ff12:	69bb      	ldr	r3, [r7, #24]
 800ff14:	881b      	ldrh	r3, [r3, #0]
 800ff16:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ff1a:	d106      	bne.n	800ff2a <mem_trim+0xfa>
 800ff1c:	4b42      	ldr	r3, [pc, #264]	@ (8010028 <mem_trim+0x1f8>)
 800ff1e:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800ff22:	4946      	ldr	r1, [pc, #280]	@ (801003c <mem_trim+0x20c>)
 800ff24:	4842      	ldr	r0, [pc, #264]	@ (8010030 <mem_trim+0x200>)
 800ff26:	f00e f9d9 	bl	801e2dc <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ff2a:	693b      	ldr	r3, [r7, #16]
 800ff2c:	881b      	ldrh	r3, [r3, #0]
 800ff2e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ff30:	8afa      	ldrh	r2, [r7, #22]
 800ff32:	8bfb      	ldrh	r3, [r7, #30]
 800ff34:	4413      	add	r3, r2
 800ff36:	b29b      	uxth	r3, r3
 800ff38:	3308      	adds	r3, #8
 800ff3a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800ff3c:	4b40      	ldr	r3, [pc, #256]	@ (8010040 <mem_trim+0x210>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	693a      	ldr	r2, [r7, #16]
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d106      	bne.n	800ff54 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800ff46:	89fb      	ldrh	r3, [r7, #14]
 800ff48:	4618      	mov	r0, r3
 800ff4a:	f7ff fd8d 	bl	800fa68 <ptr_to_mem>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	4a3b      	ldr	r2, [pc, #236]	@ (8010040 <mem_trim+0x210>)
 800ff52:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ff54:	89fb      	ldrh	r3, [r7, #14]
 800ff56:	4618      	mov	r0, r3
 800ff58:	f7ff fd86 	bl	800fa68 <ptr_to_mem>
 800ff5c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800ff5e:	693b      	ldr	r3, [r7, #16]
 800ff60:	2200      	movs	r2, #0
 800ff62:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	89ba      	ldrh	r2, [r7, #12]
 800ff68:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ff6a:	693b      	ldr	r3, [r7, #16]
 800ff6c:	8afa      	ldrh	r2, [r7, #22]
 800ff6e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ff70:	69bb      	ldr	r3, [r7, #24]
 800ff72:	89fa      	ldrh	r2, [r7, #14]
 800ff74:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ff76:	693b      	ldr	r3, [r7, #16]
 800ff78:	881b      	ldrh	r3, [r3, #0]
 800ff7a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ff7e:	d047      	beq.n	8010010 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	881b      	ldrh	r3, [r3, #0]
 800ff84:	4618      	mov	r0, r3
 800ff86:	f7ff fd6f 	bl	800fa68 <ptr_to_mem>
 800ff8a:	4602      	mov	r2, r0
 800ff8c:	89fb      	ldrh	r3, [r7, #14]
 800ff8e:	8053      	strh	r3, [r2, #2]
 800ff90:	e03e      	b.n	8010010 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ff92:	8bfb      	ldrh	r3, [r7, #30]
 800ff94:	f103 0214 	add.w	r2, r3, #20
 800ff98:	8abb      	ldrh	r3, [r7, #20]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d838      	bhi.n	8010010 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ff9e:	8afa      	ldrh	r2, [r7, #22]
 800ffa0:	8bfb      	ldrh	r3, [r7, #30]
 800ffa2:	4413      	add	r3, r2
 800ffa4:	b29b      	uxth	r3, r3
 800ffa6:	3308      	adds	r3, #8
 800ffa8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ffaa:	69bb      	ldr	r3, [r7, #24]
 800ffac:	881b      	ldrh	r3, [r3, #0]
 800ffae:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800ffb2:	d106      	bne.n	800ffc2 <mem_trim+0x192>
 800ffb4:	4b1c      	ldr	r3, [pc, #112]	@ (8010028 <mem_trim+0x1f8>)
 800ffb6:	f240 3216 	movw	r2, #790	@ 0x316
 800ffba:	4920      	ldr	r1, [pc, #128]	@ (801003c <mem_trim+0x20c>)
 800ffbc:	481c      	ldr	r0, [pc, #112]	@ (8010030 <mem_trim+0x200>)
 800ffbe:	f00e f98d 	bl	801e2dc <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ffc2:	89fb      	ldrh	r3, [r7, #14]
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f7ff fd4f 	bl	800fa68 <ptr_to_mem>
 800ffca:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ffcc:	4b1c      	ldr	r3, [pc, #112]	@ (8010040 <mem_trim+0x210>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	693a      	ldr	r2, [r7, #16]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d202      	bcs.n	800ffdc <mem_trim+0x1ac>
      lfree = mem2;
 800ffd6:	4a1a      	ldr	r2, [pc, #104]	@ (8010040 <mem_trim+0x210>)
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ffdc:	693b      	ldr	r3, [r7, #16]
 800ffde:	2200      	movs	r2, #0
 800ffe0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ffe2:	69bb      	ldr	r3, [r7, #24]
 800ffe4:	881a      	ldrh	r2, [r3, #0]
 800ffe6:	693b      	ldr	r3, [r7, #16]
 800ffe8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ffea:	693b      	ldr	r3, [r7, #16]
 800ffec:	8afa      	ldrh	r2, [r7, #22]
 800ffee:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800fff0:	69bb      	ldr	r3, [r7, #24]
 800fff2:	89fa      	ldrh	r2, [r7, #14]
 800fff4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fff6:	693b      	ldr	r3, [r7, #16]
 800fff8:	881b      	ldrh	r3, [r3, #0]
 800fffa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fffe:	d007      	beq.n	8010010 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010000:	693b      	ldr	r3, [r7, #16]
 8010002:	881b      	ldrh	r3, [r3, #0]
 8010004:	4618      	mov	r0, r3
 8010006:	f7ff fd2f 	bl	800fa68 <ptr_to_mem>
 801000a:	4602      	mov	r2, r0
 801000c:	89fb      	ldrh	r3, [r7, #14]
 801000e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010010:	4809      	ldr	r0, [pc, #36]	@ (8010038 <mem_trim+0x208>)
 8010012:	f00d f870 	bl	801d0f6 <sys_mutex_unlock>
  return rmem;
 8010016:	687b      	ldr	r3, [r7, #4]
}
 8010018:	4618      	mov	r0, r3
 801001a:	3720      	adds	r7, #32
 801001c:	46bd      	mov	sp, r7
 801001e:	bd80      	pop	{r7, pc}
 8010020:	2000f41c 	.word	0x2000f41c
 8010024:	2000f420 	.word	0x2000f420
 8010028:	08022d14 	.word	0x08022d14
 801002c:	08022ea0 	.word	0x08022ea0
 8010030:	08022d5c 	.word	0x08022d5c
 8010034:	08022eb8 	.word	0x08022eb8
 8010038:	2000f424 	.word	0x2000f424
 801003c:	08022ed8 	.word	0x08022ed8
 8010040:	2000f428 	.word	0x2000f428

08010044 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b088      	sub	sp, #32
 8010048:	af00      	add	r7, sp, #0
 801004a:	4603      	mov	r3, r0
 801004c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801004e:	88fb      	ldrh	r3, [r7, #6]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d101      	bne.n	8010058 <mem_malloc+0x14>
    return NULL;
 8010054:	2300      	movs	r3, #0
 8010056:	e0e2      	b.n	801021e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8010058:	88fb      	ldrh	r3, [r7, #6]
 801005a:	3303      	adds	r3, #3
 801005c:	b29b      	uxth	r3, r3
 801005e:	f023 0303 	bic.w	r3, r3, #3
 8010062:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8010064:	8bbb      	ldrh	r3, [r7, #28]
 8010066:	2b0b      	cmp	r3, #11
 8010068:	d801      	bhi.n	801006e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801006a:	230c      	movs	r3, #12
 801006c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801006e:	8bbb      	ldrh	r3, [r7, #28]
 8010070:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010074:	d803      	bhi.n	801007e <mem_malloc+0x3a>
 8010076:	8bba      	ldrh	r2, [r7, #28]
 8010078:	88fb      	ldrh	r3, [r7, #6]
 801007a:	429a      	cmp	r2, r3
 801007c:	d201      	bcs.n	8010082 <mem_malloc+0x3e>
    return NULL;
 801007e:	2300      	movs	r3, #0
 8010080:	e0cd      	b.n	801021e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010082:	4869      	ldr	r0, [pc, #420]	@ (8010228 <mem_malloc+0x1e4>)
 8010084:	f00d f828 	bl	801d0d8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010088:	4b68      	ldr	r3, [pc, #416]	@ (801022c <mem_malloc+0x1e8>)
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	4618      	mov	r0, r3
 801008e:	f7ff fcfd 	bl	800fa8c <mem_to_ptr>
 8010092:	4603      	mov	r3, r0
 8010094:	83fb      	strh	r3, [r7, #30]
 8010096:	e0b7      	b.n	8010208 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8010098:	8bfb      	ldrh	r3, [r7, #30]
 801009a:	4618      	mov	r0, r3
 801009c:	f7ff fce4 	bl	800fa68 <ptr_to_mem>
 80100a0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80100a2:	697b      	ldr	r3, [r7, #20]
 80100a4:	791b      	ldrb	r3, [r3, #4]
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	f040 80a7 	bne.w	80101fa <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80100ac:	697b      	ldr	r3, [r7, #20]
 80100ae:	881b      	ldrh	r3, [r3, #0]
 80100b0:	461a      	mov	r2, r3
 80100b2:	8bfb      	ldrh	r3, [r7, #30]
 80100b4:	1ad3      	subs	r3, r2, r3
 80100b6:	f1a3 0208 	sub.w	r2, r3, #8
 80100ba:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80100bc:	429a      	cmp	r2, r3
 80100be:	f0c0 809c 	bcc.w	80101fa <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	881b      	ldrh	r3, [r3, #0]
 80100c6:	461a      	mov	r2, r3
 80100c8:	8bfb      	ldrh	r3, [r7, #30]
 80100ca:	1ad3      	subs	r3, r2, r3
 80100cc:	f1a3 0208 	sub.w	r2, r3, #8
 80100d0:	8bbb      	ldrh	r3, [r7, #28]
 80100d2:	3314      	adds	r3, #20
 80100d4:	429a      	cmp	r2, r3
 80100d6:	d333      	bcc.n	8010140 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80100d8:	8bfa      	ldrh	r2, [r7, #30]
 80100da:	8bbb      	ldrh	r3, [r7, #28]
 80100dc:	4413      	add	r3, r2
 80100de:	b29b      	uxth	r3, r3
 80100e0:	3308      	adds	r3, #8
 80100e2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80100e4:	8a7b      	ldrh	r3, [r7, #18]
 80100e6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80100ea:	d106      	bne.n	80100fa <mem_malloc+0xb6>
 80100ec:	4b50      	ldr	r3, [pc, #320]	@ (8010230 <mem_malloc+0x1ec>)
 80100ee:	f240 3287 	movw	r2, #903	@ 0x387
 80100f2:	4950      	ldr	r1, [pc, #320]	@ (8010234 <mem_malloc+0x1f0>)
 80100f4:	4850      	ldr	r0, [pc, #320]	@ (8010238 <mem_malloc+0x1f4>)
 80100f6:	f00e f8f1 	bl	801e2dc <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80100fa:	8a7b      	ldrh	r3, [r7, #18]
 80100fc:	4618      	mov	r0, r3
 80100fe:	f7ff fcb3 	bl	800fa68 <ptr_to_mem>
 8010102:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2200      	movs	r2, #0
 8010108:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	881a      	ldrh	r2, [r3, #0]
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	8bfa      	ldrh	r2, [r7, #30]
 8010116:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010118:	697b      	ldr	r3, [r7, #20]
 801011a:	8a7a      	ldrh	r2, [r7, #18]
 801011c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801011e:	697b      	ldr	r3, [r7, #20]
 8010120:	2201      	movs	r2, #1
 8010122:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010124:	68fb      	ldr	r3, [r7, #12]
 8010126:	881b      	ldrh	r3, [r3, #0]
 8010128:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801012c:	d00b      	beq.n	8010146 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	881b      	ldrh	r3, [r3, #0]
 8010132:	4618      	mov	r0, r3
 8010134:	f7ff fc98 	bl	800fa68 <ptr_to_mem>
 8010138:	4602      	mov	r2, r0
 801013a:	8a7b      	ldrh	r3, [r7, #18]
 801013c:	8053      	strh	r3, [r2, #2]
 801013e:	e002      	b.n	8010146 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010140:	697b      	ldr	r3, [r7, #20]
 8010142:	2201      	movs	r2, #1
 8010144:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010146:	4b39      	ldr	r3, [pc, #228]	@ (801022c <mem_malloc+0x1e8>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	697a      	ldr	r2, [r7, #20]
 801014c:	429a      	cmp	r2, r3
 801014e:	d127      	bne.n	80101a0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8010150:	4b36      	ldr	r3, [pc, #216]	@ (801022c <mem_malloc+0x1e8>)
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010156:	e005      	b.n	8010164 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010158:	69bb      	ldr	r3, [r7, #24]
 801015a:	881b      	ldrh	r3, [r3, #0]
 801015c:	4618      	mov	r0, r3
 801015e:	f7ff fc83 	bl	800fa68 <ptr_to_mem>
 8010162:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010164:	69bb      	ldr	r3, [r7, #24]
 8010166:	791b      	ldrb	r3, [r3, #4]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d004      	beq.n	8010176 <mem_malloc+0x132>
 801016c:	4b33      	ldr	r3, [pc, #204]	@ (801023c <mem_malloc+0x1f8>)
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	69ba      	ldr	r2, [r7, #24]
 8010172:	429a      	cmp	r2, r3
 8010174:	d1f0      	bne.n	8010158 <mem_malloc+0x114>
          }
          lfree = cur;
 8010176:	4a2d      	ldr	r2, [pc, #180]	@ (801022c <mem_malloc+0x1e8>)
 8010178:	69bb      	ldr	r3, [r7, #24]
 801017a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801017c:	4b2b      	ldr	r3, [pc, #172]	@ (801022c <mem_malloc+0x1e8>)
 801017e:	681a      	ldr	r2, [r3, #0]
 8010180:	4b2e      	ldr	r3, [pc, #184]	@ (801023c <mem_malloc+0x1f8>)
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	429a      	cmp	r2, r3
 8010186:	d00b      	beq.n	80101a0 <mem_malloc+0x15c>
 8010188:	4b28      	ldr	r3, [pc, #160]	@ (801022c <mem_malloc+0x1e8>)
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	791b      	ldrb	r3, [r3, #4]
 801018e:	2b00      	cmp	r3, #0
 8010190:	d006      	beq.n	80101a0 <mem_malloc+0x15c>
 8010192:	4b27      	ldr	r3, [pc, #156]	@ (8010230 <mem_malloc+0x1ec>)
 8010194:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8010198:	4929      	ldr	r1, [pc, #164]	@ (8010240 <mem_malloc+0x1fc>)
 801019a:	4827      	ldr	r0, [pc, #156]	@ (8010238 <mem_malloc+0x1f4>)
 801019c:	f00e f89e 	bl	801e2dc <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80101a0:	4821      	ldr	r0, [pc, #132]	@ (8010228 <mem_malloc+0x1e4>)
 80101a2:	f00c ffa8 	bl	801d0f6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80101a6:	8bba      	ldrh	r2, [r7, #28]
 80101a8:	697b      	ldr	r3, [r7, #20]
 80101aa:	4413      	add	r3, r2
 80101ac:	3308      	adds	r3, #8
 80101ae:	4a23      	ldr	r2, [pc, #140]	@ (801023c <mem_malloc+0x1f8>)
 80101b0:	6812      	ldr	r2, [r2, #0]
 80101b2:	4293      	cmp	r3, r2
 80101b4:	d906      	bls.n	80101c4 <mem_malloc+0x180>
 80101b6:	4b1e      	ldr	r3, [pc, #120]	@ (8010230 <mem_malloc+0x1ec>)
 80101b8:	f240 32b9 	movw	r2, #953	@ 0x3b9
 80101bc:	4921      	ldr	r1, [pc, #132]	@ (8010244 <mem_malloc+0x200>)
 80101be:	481e      	ldr	r0, [pc, #120]	@ (8010238 <mem_malloc+0x1f4>)
 80101c0:	f00e f88c 	bl	801e2dc <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80101c4:	697b      	ldr	r3, [r7, #20]
 80101c6:	f003 0303 	and.w	r3, r3, #3
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	d006      	beq.n	80101dc <mem_malloc+0x198>
 80101ce:	4b18      	ldr	r3, [pc, #96]	@ (8010230 <mem_malloc+0x1ec>)
 80101d0:	f240 32bb 	movw	r2, #955	@ 0x3bb
 80101d4:	491c      	ldr	r1, [pc, #112]	@ (8010248 <mem_malloc+0x204>)
 80101d6:	4818      	ldr	r0, [pc, #96]	@ (8010238 <mem_malloc+0x1f4>)
 80101d8:	f00e f880 	bl	801e2dc <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	f003 0303 	and.w	r3, r3, #3
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d006      	beq.n	80101f4 <mem_malloc+0x1b0>
 80101e6:	4b12      	ldr	r3, [pc, #72]	@ (8010230 <mem_malloc+0x1ec>)
 80101e8:	f240 32bd 	movw	r2, #957	@ 0x3bd
 80101ec:	4917      	ldr	r1, [pc, #92]	@ (801024c <mem_malloc+0x208>)
 80101ee:	4812      	ldr	r0, [pc, #72]	@ (8010238 <mem_malloc+0x1f4>)
 80101f0:	f00e f874 	bl	801e2dc <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80101f4:	697b      	ldr	r3, [r7, #20]
 80101f6:	3308      	adds	r3, #8
 80101f8:	e011      	b.n	801021e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80101fa:	8bfb      	ldrh	r3, [r7, #30]
 80101fc:	4618      	mov	r0, r3
 80101fe:	f7ff fc33 	bl	800fa68 <ptr_to_mem>
 8010202:	4603      	mov	r3, r0
 8010204:	881b      	ldrh	r3, [r3, #0]
 8010206:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010208:	8bfa      	ldrh	r2, [r7, #30]
 801020a:	8bbb      	ldrh	r3, [r7, #28]
 801020c:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 8010210:	429a      	cmp	r2, r3
 8010212:	f4ff af41 	bcc.w	8010098 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010216:	4804      	ldr	r0, [pc, #16]	@ (8010228 <mem_malloc+0x1e4>)
 8010218:	f00c ff6d 	bl	801d0f6 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801021c:	2300      	movs	r3, #0
}
 801021e:	4618      	mov	r0, r3
 8010220:	3720      	adds	r7, #32
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	2000f424 	.word	0x2000f424
 801022c:	2000f428 	.word	0x2000f428
 8010230:	08022d14 	.word	0x08022d14
 8010234:	08022ed8 	.word	0x08022ed8
 8010238:	08022d5c 	.word	0x08022d5c
 801023c:	2000f420 	.word	0x2000f420
 8010240:	08022eec 	.word	0x08022eec
 8010244:	08022f08 	.word	0x08022f08
 8010248:	08022f38 	.word	0x08022f38
 801024c:	08022f68 	.word	0x08022f68

08010250 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010250:	b480      	push	{r7}
 8010252:	b085      	sub	sp, #20
 8010254:	af00      	add	r7, sp, #0
 8010256:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	689b      	ldr	r3, [r3, #8]
 801025c:	2200      	movs	r2, #0
 801025e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	685b      	ldr	r3, [r3, #4]
 8010264:	3303      	adds	r3, #3
 8010266:	f023 0303 	bic.w	r3, r3, #3
 801026a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801026c:	2300      	movs	r3, #0
 801026e:	60fb      	str	r3, [r7, #12]
 8010270:	e011      	b.n	8010296 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	689b      	ldr	r3, [r3, #8]
 8010276:	681a      	ldr	r2, [r3, #0]
 8010278:	68bb      	ldr	r3, [r7, #8]
 801027a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	689b      	ldr	r3, [r3, #8]
 8010280:	68ba      	ldr	r2, [r7, #8]
 8010282:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	881b      	ldrh	r3, [r3, #0]
 8010288:	461a      	mov	r2, r3
 801028a:	68bb      	ldr	r3, [r7, #8]
 801028c:	4413      	add	r3, r2
 801028e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	3301      	adds	r3, #1
 8010294:	60fb      	str	r3, [r7, #12]
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	885b      	ldrh	r3, [r3, #2]
 801029a:	461a      	mov	r2, r3
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	4293      	cmp	r3, r2
 80102a0:	dbe7      	blt.n	8010272 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80102a2:	bf00      	nop
 80102a4:	bf00      	nop
 80102a6:	3714      	adds	r7, #20
 80102a8:	46bd      	mov	sp, r7
 80102aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ae:	4770      	bx	lr

080102b0 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80102b6:	2300      	movs	r3, #0
 80102b8:	80fb      	strh	r3, [r7, #6]
 80102ba:	e009      	b.n	80102d0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80102bc:	88fb      	ldrh	r3, [r7, #6]
 80102be:	4a08      	ldr	r2, [pc, #32]	@ (80102e0 <memp_init+0x30>)
 80102c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7ff ffc3 	bl	8010250 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80102ca:	88fb      	ldrh	r3, [r7, #6]
 80102cc:	3301      	adds	r3, #1
 80102ce:	80fb      	strh	r3, [r7, #6]
 80102d0:	88fb      	ldrh	r3, [r7, #6]
 80102d2:	2b0d      	cmp	r3, #13
 80102d4:	d9f2      	bls.n	80102bc <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80102d6:	bf00      	nop
 80102d8:	bf00      	nop
 80102da:	3708      	adds	r7, #8
 80102dc:	46bd      	mov	sp, r7
 80102de:	bd80      	pop	{r7, pc}
 80102e0:	08025ce0 	.word	0x08025ce0

080102e4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b084      	sub	sp, #16
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80102ec:	f00c ff30 	bl	801d150 <sys_arch_protect>
 80102f0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	689b      	ldr	r3, [r3, #8]
 80102f6:	681b      	ldr	r3, [r3, #0]
 80102f8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80102fa:	68bb      	ldr	r3, [r7, #8]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d015      	beq.n	801032c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	689b      	ldr	r3, [r3, #8]
 8010304:	68ba      	ldr	r2, [r7, #8]
 8010306:	6812      	ldr	r2, [r2, #0]
 8010308:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	f003 0303 	and.w	r3, r3, #3
 8010310:	2b00      	cmp	r3, #0
 8010312:	d006      	beq.n	8010322 <do_memp_malloc_pool+0x3e>
 8010314:	4b09      	ldr	r3, [pc, #36]	@ (801033c <do_memp_malloc_pool+0x58>)
 8010316:	f44f 728c 	mov.w	r2, #280	@ 0x118
 801031a:	4909      	ldr	r1, [pc, #36]	@ (8010340 <do_memp_malloc_pool+0x5c>)
 801031c:	4809      	ldr	r0, [pc, #36]	@ (8010344 <do_memp_malloc_pool+0x60>)
 801031e:	f00d ffdd 	bl	801e2dc <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010322:	68f8      	ldr	r0, [r7, #12]
 8010324:	f00c ff22 	bl	801d16c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010328:	68bb      	ldr	r3, [r7, #8]
 801032a:	e003      	b.n	8010334 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801032c:	68f8      	ldr	r0, [r7, #12]
 801032e:	f00c ff1d 	bl	801d16c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010332:	2300      	movs	r3, #0
}
 8010334:	4618      	mov	r0, r3
 8010336:	3710      	adds	r7, #16
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}
 801033c:	08022f8c 	.word	0x08022f8c
 8010340:	08022fbc 	.word	0x08022fbc
 8010344:	08022fe0 	.word	0x08022fe0

08010348 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b082      	sub	sp, #8
 801034c:	af00      	add	r7, sp, #0
 801034e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2b00      	cmp	r3, #0
 8010354:	d106      	bne.n	8010364 <memp_malloc_pool+0x1c>
 8010356:	4b0a      	ldr	r3, [pc, #40]	@ (8010380 <memp_malloc_pool+0x38>)
 8010358:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 801035c:	4909      	ldr	r1, [pc, #36]	@ (8010384 <memp_malloc_pool+0x3c>)
 801035e:	480a      	ldr	r0, [pc, #40]	@ (8010388 <memp_malloc_pool+0x40>)
 8010360:	f00d ffbc 	bl	801e2dc <iprintf>
  if (desc == NULL) {
 8010364:	687b      	ldr	r3, [r7, #4]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d101      	bne.n	801036e <memp_malloc_pool+0x26>
    return NULL;
 801036a:	2300      	movs	r3, #0
 801036c:	e003      	b.n	8010376 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f7ff ffb8 	bl	80102e4 <do_memp_malloc_pool>
 8010374:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8010376:	4618      	mov	r0, r3
 8010378:	3708      	adds	r7, #8
 801037a:	46bd      	mov	sp, r7
 801037c:	bd80      	pop	{r7, pc}
 801037e:	bf00      	nop
 8010380:	08022f8c 	.word	0x08022f8c
 8010384:	08023008 	.word	0x08023008
 8010388:	08022fe0 	.word	0x08022fe0

0801038c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b084      	sub	sp, #16
 8010390:	af00      	add	r7, sp, #0
 8010392:	4603      	mov	r3, r0
 8010394:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010396:	79fb      	ldrb	r3, [r7, #7]
 8010398:	2b0d      	cmp	r3, #13
 801039a:	d908      	bls.n	80103ae <memp_malloc+0x22>
 801039c:	4b0a      	ldr	r3, [pc, #40]	@ (80103c8 <memp_malloc+0x3c>)
 801039e:	f240 1257 	movw	r2, #343	@ 0x157
 80103a2:	490a      	ldr	r1, [pc, #40]	@ (80103cc <memp_malloc+0x40>)
 80103a4:	480a      	ldr	r0, [pc, #40]	@ (80103d0 <memp_malloc+0x44>)
 80103a6:	f00d ff99 	bl	801e2dc <iprintf>
 80103aa:	2300      	movs	r3, #0
 80103ac:	e008      	b.n	80103c0 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80103ae:	79fb      	ldrb	r3, [r7, #7]
 80103b0:	4a08      	ldr	r2, [pc, #32]	@ (80103d4 <memp_malloc+0x48>)
 80103b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7ff ff94 	bl	80102e4 <do_memp_malloc_pool>
 80103bc:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80103be:	68fb      	ldr	r3, [r7, #12]
}
 80103c0:	4618      	mov	r0, r3
 80103c2:	3710      	adds	r7, #16
 80103c4:	46bd      	mov	sp, r7
 80103c6:	bd80      	pop	{r7, pc}
 80103c8:	08022f8c 	.word	0x08022f8c
 80103cc:	0802301c 	.word	0x0802301c
 80103d0:	08022fe0 	.word	0x08022fe0
 80103d4:	08025ce0 	.word	0x08025ce0

080103d8 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80103d8:	b580      	push	{r7, lr}
 80103da:	b084      	sub	sp, #16
 80103dc:	af00      	add	r7, sp, #0
 80103de:	6078      	str	r0, [r7, #4]
 80103e0:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	f003 0303 	and.w	r3, r3, #3
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	d006      	beq.n	80103fa <do_memp_free_pool+0x22>
 80103ec:	4b0d      	ldr	r3, [pc, #52]	@ (8010424 <do_memp_free_pool+0x4c>)
 80103ee:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 80103f2:	490d      	ldr	r1, [pc, #52]	@ (8010428 <do_memp_free_pool+0x50>)
 80103f4:	480d      	ldr	r0, [pc, #52]	@ (801042c <do_memp_free_pool+0x54>)
 80103f6:	f00d ff71 	bl	801e2dc <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 80103fe:	f00c fea7 	bl	801d150 <sys_arch_protect>
 8010402:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	689b      	ldr	r3, [r3, #8]
 8010408:	681a      	ldr	r2, [r3, #0]
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	689b      	ldr	r3, [r3, #8]
 8010412:	68fa      	ldr	r2, [r7, #12]
 8010414:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8010416:	68b8      	ldr	r0, [r7, #8]
 8010418:	f00c fea8 	bl	801d16c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801041c:	bf00      	nop
 801041e:	3710      	adds	r7, #16
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}
 8010424:	08022f8c 	.word	0x08022f8c
 8010428:	0802303c 	.word	0x0802303c
 801042c:	08022fe0 	.word	0x08022fe0

08010430 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b082      	sub	sp, #8
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
 8010438:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d106      	bne.n	801044e <memp_free_pool+0x1e>
 8010440:	4b0a      	ldr	r3, [pc, #40]	@ (801046c <memp_free_pool+0x3c>)
 8010442:	f240 1295 	movw	r2, #405	@ 0x195
 8010446:	490a      	ldr	r1, [pc, #40]	@ (8010470 <memp_free_pool+0x40>)
 8010448:	480a      	ldr	r0, [pc, #40]	@ (8010474 <memp_free_pool+0x44>)
 801044a:	f00d ff47 	bl	801e2dc <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2b00      	cmp	r3, #0
 8010452:	d007      	beq.n	8010464 <memp_free_pool+0x34>
 8010454:	683b      	ldr	r3, [r7, #0]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d004      	beq.n	8010464 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801045a:	6839      	ldr	r1, [r7, #0]
 801045c:	6878      	ldr	r0, [r7, #4]
 801045e:	f7ff ffbb 	bl	80103d8 <do_memp_free_pool>
 8010462:	e000      	b.n	8010466 <memp_free_pool+0x36>
    return;
 8010464:	bf00      	nop
}
 8010466:	3708      	adds	r7, #8
 8010468:	46bd      	mov	sp, r7
 801046a:	bd80      	pop	{r7, pc}
 801046c:	08022f8c 	.word	0x08022f8c
 8010470:	08023008 	.word	0x08023008
 8010474:	08022fe0 	.word	0x08022fe0

08010478 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b082      	sub	sp, #8
 801047c:	af00      	add	r7, sp, #0
 801047e:	4603      	mov	r3, r0
 8010480:	6039      	str	r1, [r7, #0]
 8010482:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010484:	79fb      	ldrb	r3, [r7, #7]
 8010486:	2b0d      	cmp	r3, #13
 8010488:	d907      	bls.n	801049a <memp_free+0x22>
 801048a:	4b0c      	ldr	r3, [pc, #48]	@ (80104bc <memp_free+0x44>)
 801048c:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 8010490:	490b      	ldr	r1, [pc, #44]	@ (80104c0 <memp_free+0x48>)
 8010492:	480c      	ldr	r0, [pc, #48]	@ (80104c4 <memp_free+0x4c>)
 8010494:	f00d ff22 	bl	801e2dc <iprintf>
 8010498:	e00c      	b.n	80104b4 <memp_free+0x3c>

  if (mem == NULL) {
 801049a:	683b      	ldr	r3, [r7, #0]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d008      	beq.n	80104b2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80104a0:	79fb      	ldrb	r3, [r7, #7]
 80104a2:	4a09      	ldr	r2, [pc, #36]	@ (80104c8 <memp_free+0x50>)
 80104a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104a8:	6839      	ldr	r1, [r7, #0]
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7ff ff94 	bl	80103d8 <do_memp_free_pool>
 80104b0:	e000      	b.n	80104b4 <memp_free+0x3c>
    return;
 80104b2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80104b4:	3708      	adds	r7, #8
 80104b6:	46bd      	mov	sp, r7
 80104b8:	bd80      	pop	{r7, pc}
 80104ba:	bf00      	nop
 80104bc:	08022f8c 	.word	0x08022f8c
 80104c0:	0802305c 	.word	0x0802305c
 80104c4:	08022fe0 	.word	0x08022fe0
 80104c8:	08025ce0 	.word	0x08025ce0

080104cc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80104cc:	b480      	push	{r7}
 80104ce:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80104d0:	bf00      	nop
 80104d2:	46bd      	mov	sp, r7
 80104d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d8:	4770      	bx	lr
	...

080104dc <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b086      	sub	sp, #24
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	607a      	str	r2, [r7, #4]
 80104e8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d108      	bne.n	8010502 <netif_add+0x26>
 80104f0:	4b5b      	ldr	r3, [pc, #364]	@ (8010660 <netif_add+0x184>)
 80104f2:	f240 1227 	movw	r2, #295	@ 0x127
 80104f6:	495b      	ldr	r1, [pc, #364]	@ (8010664 <netif_add+0x188>)
 80104f8:	485b      	ldr	r0, [pc, #364]	@ (8010668 <netif_add+0x18c>)
 80104fa:	f00d feef 	bl	801e2dc <iprintf>
 80104fe:	2300      	movs	r3, #0
 8010500:	e0a9      	b.n	8010656 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8010502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010504:	2b00      	cmp	r3, #0
 8010506:	d108      	bne.n	801051a <netif_add+0x3e>
 8010508:	4b55      	ldr	r3, [pc, #340]	@ (8010660 <netif_add+0x184>)
 801050a:	f44f 7294 	mov.w	r2, #296	@ 0x128
 801050e:	4957      	ldr	r1, [pc, #348]	@ (801066c <netif_add+0x190>)
 8010510:	4855      	ldr	r0, [pc, #340]	@ (8010668 <netif_add+0x18c>)
 8010512:	f00d fee3 	bl	801e2dc <iprintf>
 8010516:	2300      	movs	r3, #0
 8010518:	e09d      	b.n	8010656 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801051a:	68bb      	ldr	r3, [r7, #8]
 801051c:	2b00      	cmp	r3, #0
 801051e:	d101      	bne.n	8010524 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010520:	4b53      	ldr	r3, [pc, #332]	@ (8010670 <netif_add+0x194>)
 8010522:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	2b00      	cmp	r3, #0
 8010528:	d101      	bne.n	801052e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801052a:	4b51      	ldr	r3, [pc, #324]	@ (8010670 <netif_add+0x194>)
 801052c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d101      	bne.n	8010538 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010534:	4b4e      	ldr	r3, [pc, #312]	@ (8010670 <netif_add+0x194>)
 8010536:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	2200      	movs	r2, #0
 801053c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	2200      	movs	r2, #0
 8010542:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	2200      	movs	r2, #0
 8010548:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	4a49      	ldr	r2, [pc, #292]	@ (8010674 <netif_add+0x198>)
 801054e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	2200      	movs	r2, #0
 8010554:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 8010556:	68fb      	ldr	r3, [r7, #12]
 8010558:	2200      	movs	r2, #0
 801055a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	3324      	adds	r3, #36	@ 0x24
 8010562:	2204      	movs	r2, #4
 8010564:	2100      	movs	r1, #0
 8010566:	4618      	mov	r0, r3
 8010568:	f00d ff57 	bl	801e41a <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2200      	movs	r2, #0
 8010570:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	6a3a      	ldr	r2, [r7, #32]
 8010576:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010578:	4b3f      	ldr	r3, [pc, #252]	@ (8010678 <netif_add+0x19c>)
 801057a:	781a      	ldrb	r2, [r3, #0]
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010586:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	687a      	ldr	r2, [r7, #4]
 801058c:	68b9      	ldr	r1, [r7, #8]
 801058e:	68f8      	ldr	r0, [r7, #12]
 8010590:	f000 f914 	bl	80107bc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010596:	68f8      	ldr	r0, [r7, #12]
 8010598:	4798      	blx	r3
 801059a:	4603      	mov	r3, r0
 801059c:	2b00      	cmp	r3, #0
 801059e:	d001      	beq.n	80105a4 <netif_add+0xc8>
    return NULL;
 80105a0:	2300      	movs	r3, #0
 80105a2:	e058      	b.n	8010656 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80105a4:	68fb      	ldr	r3, [r7, #12]
 80105a6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80105aa:	2bff      	cmp	r3, #255	@ 0xff
 80105ac:	d103      	bne.n	80105b6 <netif_add+0xda>
        netif->num = 0;
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	2200      	movs	r2, #0
 80105b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 80105b6:	2300      	movs	r3, #0
 80105b8:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80105ba:	4b30      	ldr	r3, [pc, #192]	@ (801067c <netif_add+0x1a0>)
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	617b      	str	r3, [r7, #20]
 80105c0:	e02b      	b.n	801061a <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80105c2:	697a      	ldr	r2, [r7, #20]
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	429a      	cmp	r2, r3
 80105c8:	d106      	bne.n	80105d8 <netif_add+0xfc>
 80105ca:	4b25      	ldr	r3, [pc, #148]	@ (8010660 <netif_add+0x184>)
 80105cc:	f240 128b 	movw	r2, #395	@ 0x18b
 80105d0:	492b      	ldr	r1, [pc, #172]	@ (8010680 <netif_add+0x1a4>)
 80105d2:	4825      	ldr	r0, [pc, #148]	@ (8010668 <netif_add+0x18c>)
 80105d4:	f00d fe82 	bl	801e2dc <iprintf>
        num_netifs++;
 80105d8:	693b      	ldr	r3, [r7, #16]
 80105da:	3301      	adds	r3, #1
 80105dc:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	2bff      	cmp	r3, #255	@ 0xff
 80105e2:	dd06      	ble.n	80105f2 <netif_add+0x116>
 80105e4:	4b1e      	ldr	r3, [pc, #120]	@ (8010660 <netif_add+0x184>)
 80105e6:	f240 128d 	movw	r2, #397	@ 0x18d
 80105ea:	4926      	ldr	r1, [pc, #152]	@ (8010684 <netif_add+0x1a8>)
 80105ec:	481e      	ldr	r0, [pc, #120]	@ (8010668 <netif_add+0x18c>)
 80105ee:	f00d fe75 	bl	801e2dc <iprintf>
        if (netif2->num == netif->num) {
 80105f2:	697b      	ldr	r3, [r7, #20]
 80105f4:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80105fe:	429a      	cmp	r2, r3
 8010600:	d108      	bne.n	8010614 <netif_add+0x138>
          netif->num++;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010608:	3301      	adds	r3, #1
 801060a:	b2da      	uxtb	r2, r3
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 8010612:	e005      	b.n	8010620 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010614:	697b      	ldr	r3, [r7, #20]
 8010616:	681b      	ldr	r3, [r3, #0]
 8010618:	617b      	str	r3, [r7, #20]
 801061a:	697b      	ldr	r3, [r7, #20]
 801061c:	2b00      	cmp	r3, #0
 801061e:	d1d0      	bne.n	80105c2 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8010620:	697b      	ldr	r3, [r7, #20]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d1be      	bne.n	80105a4 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801062c:	2bfe      	cmp	r3, #254	@ 0xfe
 801062e:	d103      	bne.n	8010638 <netif_add+0x15c>
    netif_num = 0;
 8010630:	4b11      	ldr	r3, [pc, #68]	@ (8010678 <netif_add+0x19c>)
 8010632:	2200      	movs	r2, #0
 8010634:	701a      	strb	r2, [r3, #0]
 8010636:	e006      	b.n	8010646 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801063e:	3301      	adds	r3, #1
 8010640:	b2da      	uxtb	r2, r3
 8010642:	4b0d      	ldr	r3, [pc, #52]	@ (8010678 <netif_add+0x19c>)
 8010644:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010646:	4b0d      	ldr	r3, [pc, #52]	@ (801067c <netif_add+0x1a0>)
 8010648:	681a      	ldr	r2, [r3, #0]
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801064e:	4a0b      	ldr	r2, [pc, #44]	@ (801067c <netif_add+0x1a0>)
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010654:	68fb      	ldr	r3, [r7, #12]
}
 8010656:	4618      	mov	r0, r3
 8010658:	3718      	adds	r7, #24
 801065a:	46bd      	mov	sp, r7
 801065c:	bd80      	pop	{r7, pc}
 801065e:	bf00      	nop
 8010660:	08023078 	.word	0x08023078
 8010664:	0802310c 	.word	0x0802310c
 8010668:	080230c8 	.word	0x080230c8
 801066c:	08023128 	.word	0x08023128
 8010670:	08025d70 	.word	0x08025d70
 8010674:	08010a9f 	.word	0x08010a9f
 8010678:	2001266c 	.word	0x2001266c
 801067c:	20012664 	.word	0x20012664
 8010680:	0802314c 	.word	0x0802314c
 8010684:	08023160 	.word	0x08023160

08010688 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	b082      	sub	sp, #8
 801068c:	af00      	add	r7, sp, #0
 801068e:	6078      	str	r0, [r7, #4]
 8010690:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010692:	6839      	ldr	r1, [r7, #0]
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f002 ff75 	bl	8013584 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801069a:	6839      	ldr	r1, [r7, #0]
 801069c:	6878      	ldr	r0, [r7, #4]
 801069e:	f008 f8a1 	bl	80187e4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80106a2:	bf00      	nop
 80106a4:	3708      	adds	r7, #8
 80106a6:	46bd      	mov	sp, r7
 80106a8:	bd80      	pop	{r7, pc}
	...

080106ac <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80106ac:	b580      	push	{r7, lr}
 80106ae:	b086      	sub	sp, #24
 80106b0:	af00      	add	r7, sp, #0
 80106b2:	60f8      	str	r0, [r7, #12]
 80106b4:	60b9      	str	r1, [r7, #8]
 80106b6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d106      	bne.n	80106cc <netif_do_set_ipaddr+0x20>
 80106be:	4b1d      	ldr	r3, [pc, #116]	@ (8010734 <netif_do_set_ipaddr+0x88>)
 80106c0:	f240 12cb 	movw	r2, #459	@ 0x1cb
 80106c4:	491c      	ldr	r1, [pc, #112]	@ (8010738 <netif_do_set_ipaddr+0x8c>)
 80106c6:	481d      	ldr	r0, [pc, #116]	@ (801073c <netif_do_set_ipaddr+0x90>)
 80106c8:	f00d fe08 	bl	801e2dc <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d106      	bne.n	80106e0 <netif_do_set_ipaddr+0x34>
 80106d2:	4b18      	ldr	r3, [pc, #96]	@ (8010734 <netif_do_set_ipaddr+0x88>)
 80106d4:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80106d8:	4917      	ldr	r1, [pc, #92]	@ (8010738 <netif_do_set_ipaddr+0x8c>)
 80106da:	4818      	ldr	r0, [pc, #96]	@ (801073c <netif_do_set_ipaddr+0x90>)
 80106dc:	f00d fdfe 	bl	801e2dc <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80106e0:	68bb      	ldr	r3, [r7, #8]
 80106e2:	681a      	ldr	r2, [r3, #0]
 80106e4:	68fb      	ldr	r3, [r7, #12]
 80106e6:	3304      	adds	r3, #4
 80106e8:	681b      	ldr	r3, [r3, #0]
 80106ea:	429a      	cmp	r2, r3
 80106ec:	d01c      	beq.n	8010728 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80106ee:	68bb      	ldr	r3, [r7, #8]
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80106f4:	68fb      	ldr	r3, [r7, #12]
 80106f6:	3304      	adds	r3, #4
 80106f8:	681a      	ldr	r2, [r3, #0]
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80106fe:	f107 0314 	add.w	r3, r7, #20
 8010702:	4619      	mov	r1, r3
 8010704:	6878      	ldr	r0, [r7, #4]
 8010706:	f7ff ffbf 	bl	8010688 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d002      	beq.n	8010716 <netif_do_set_ipaddr+0x6a>
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	681b      	ldr	r3, [r3, #0]
 8010714:	e000      	b.n	8010718 <netif_do_set_ipaddr+0x6c>
 8010716:	2300      	movs	r3, #0
 8010718:	68fa      	ldr	r2, [r7, #12]
 801071a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801071c:	2101      	movs	r1, #1
 801071e:	68f8      	ldr	r0, [r7, #12]
 8010720:	f000 f8d2 	bl	80108c8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010724:	2301      	movs	r3, #1
 8010726:	e000      	b.n	801072a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010728:	2300      	movs	r3, #0
}
 801072a:	4618      	mov	r0, r3
 801072c:	3718      	adds	r7, #24
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}
 8010732:	bf00      	nop
 8010734:	08023078 	.word	0x08023078
 8010738:	08023190 	.word	0x08023190
 801073c:	080230c8 	.word	0x080230c8

08010740 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010740:	b480      	push	{r7}
 8010742:	b085      	sub	sp, #20
 8010744:	af00      	add	r7, sp, #0
 8010746:	60f8      	str	r0, [r7, #12]
 8010748:	60b9      	str	r1, [r7, #8]
 801074a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	681a      	ldr	r2, [r3, #0]
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	3308      	adds	r3, #8
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	429a      	cmp	r2, r3
 8010758:	d00a      	beq.n	8010770 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	2b00      	cmp	r3, #0
 801075e:	d002      	beq.n	8010766 <netif_do_set_netmask+0x26>
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	e000      	b.n	8010768 <netif_do_set_netmask+0x28>
 8010766:	2300      	movs	r3, #0
 8010768:	68fa      	ldr	r2, [r7, #12]
 801076a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801076c:	2301      	movs	r3, #1
 801076e:	e000      	b.n	8010772 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010770:	2300      	movs	r3, #0
}
 8010772:	4618      	mov	r0, r3
 8010774:	3714      	adds	r7, #20
 8010776:	46bd      	mov	sp, r7
 8010778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077c:	4770      	bx	lr

0801077e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801077e:	b480      	push	{r7}
 8010780:	b085      	sub	sp, #20
 8010782:	af00      	add	r7, sp, #0
 8010784:	60f8      	str	r0, [r7, #12]
 8010786:	60b9      	str	r1, [r7, #8]
 8010788:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801078a:	68bb      	ldr	r3, [r7, #8]
 801078c:	681a      	ldr	r2, [r3, #0]
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	330c      	adds	r3, #12
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	429a      	cmp	r2, r3
 8010796:	d00a      	beq.n	80107ae <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	2b00      	cmp	r3, #0
 801079c:	d002      	beq.n	80107a4 <netif_do_set_gw+0x26>
 801079e:	68bb      	ldr	r3, [r7, #8]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	e000      	b.n	80107a6 <netif_do_set_gw+0x28>
 80107a4:	2300      	movs	r3, #0
 80107a6:	68fa      	ldr	r2, [r7, #12]
 80107a8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80107aa:	2301      	movs	r3, #1
 80107ac:	e000      	b.n	80107b0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80107ae:	2300      	movs	r3, #0
}
 80107b0:	4618      	mov	r0, r3
 80107b2:	3714      	adds	r7, #20
 80107b4:	46bd      	mov	sp, r7
 80107b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107ba:	4770      	bx	lr

080107bc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80107bc:	b580      	push	{r7, lr}
 80107be:	b088      	sub	sp, #32
 80107c0:	af00      	add	r7, sp, #0
 80107c2:	60f8      	str	r0, [r7, #12]
 80107c4:	60b9      	str	r1, [r7, #8]
 80107c6:	607a      	str	r2, [r7, #4]
 80107c8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80107ca:	2300      	movs	r3, #0
 80107cc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80107ce:	2300      	movs	r3, #0
 80107d0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80107d2:	68bb      	ldr	r3, [r7, #8]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d101      	bne.n	80107dc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80107d8:	4b1c      	ldr	r3, [pc, #112]	@ (801084c <netif_set_addr+0x90>)
 80107da:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	2b00      	cmp	r3, #0
 80107e0:	d101      	bne.n	80107e6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80107e2:	4b1a      	ldr	r3, [pc, #104]	@ (801084c <netif_set_addr+0x90>)
 80107e4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80107e6:	683b      	ldr	r3, [r7, #0]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d101      	bne.n	80107f0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80107ec:	4b17      	ldr	r3, [pc, #92]	@ (801084c <netif_set_addr+0x90>)
 80107ee:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80107f0:	68bb      	ldr	r3, [r7, #8]
 80107f2:	2b00      	cmp	r3, #0
 80107f4:	d003      	beq.n	80107fe <netif_set_addr+0x42>
 80107f6:	68bb      	ldr	r3, [r7, #8]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	2b00      	cmp	r3, #0
 80107fc:	d101      	bne.n	8010802 <netif_set_addr+0x46>
 80107fe:	2301      	movs	r3, #1
 8010800:	e000      	b.n	8010804 <netif_set_addr+0x48>
 8010802:	2300      	movs	r3, #0
 8010804:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d006      	beq.n	801081a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801080c:	f107 0310 	add.w	r3, r7, #16
 8010810:	461a      	mov	r2, r3
 8010812:	68b9      	ldr	r1, [r7, #8]
 8010814:	68f8      	ldr	r0, [r7, #12]
 8010816:	f7ff ff49 	bl	80106ac <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801081a:	69fa      	ldr	r2, [r7, #28]
 801081c:	6879      	ldr	r1, [r7, #4]
 801081e:	68f8      	ldr	r0, [r7, #12]
 8010820:	f7ff ff8e 	bl	8010740 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010824:	69ba      	ldr	r2, [r7, #24]
 8010826:	6839      	ldr	r1, [r7, #0]
 8010828:	68f8      	ldr	r0, [r7, #12]
 801082a:	f7ff ffa8 	bl	801077e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801082e:	697b      	ldr	r3, [r7, #20]
 8010830:	2b00      	cmp	r3, #0
 8010832:	d106      	bne.n	8010842 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010834:	f107 0310 	add.w	r3, r7, #16
 8010838:	461a      	mov	r2, r3
 801083a:	68b9      	ldr	r1, [r7, #8]
 801083c:	68f8      	ldr	r0, [r7, #12]
 801083e:	f7ff ff35 	bl	80106ac <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010842:	bf00      	nop
 8010844:	3720      	adds	r7, #32
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}
 801084a:	bf00      	nop
 801084c:	08025d70 	.word	0x08025d70

08010850 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010850:	b480      	push	{r7}
 8010852:	b083      	sub	sp, #12
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010858:	4a04      	ldr	r2, [pc, #16]	@ (801086c <netif_set_default+0x1c>)
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801085e:	bf00      	nop
 8010860:	370c      	adds	r7, #12
 8010862:	46bd      	mov	sp, r7
 8010864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010868:	4770      	bx	lr
 801086a:	bf00      	nop
 801086c:	20012668 	.word	0x20012668

08010870 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010870:	b580      	push	{r7, lr}
 8010872:	b082      	sub	sp, #8
 8010874:	af00      	add	r7, sp, #0
 8010876:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d107      	bne.n	801088e <netif_set_up+0x1e>
 801087e:	4b0f      	ldr	r3, [pc, #60]	@ (80108bc <netif_set_up+0x4c>)
 8010880:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8010884:	490e      	ldr	r1, [pc, #56]	@ (80108c0 <netif_set_up+0x50>)
 8010886:	480f      	ldr	r0, [pc, #60]	@ (80108c4 <netif_set_up+0x54>)
 8010888:	f00d fd28 	bl	801e2dc <iprintf>
 801088c:	e013      	b.n	80108b6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010894:	f003 0301 	and.w	r3, r3, #1
 8010898:	2b00      	cmp	r3, #0
 801089a:	d10c      	bne.n	80108b6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801089c:	687b      	ldr	r3, [r7, #4]
 801089e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80108a2:	f043 0301 	orr.w	r3, r3, #1
 80108a6:	b2da      	uxtb	r2, r3
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80108ae:	2103      	movs	r1, #3
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f000 f809 	bl	80108c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80108b6:	3708      	adds	r7, #8
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}
 80108bc:	08023078 	.word	0x08023078
 80108c0:	08023200 	.word	0x08023200
 80108c4:	080230c8 	.word	0x080230c8

080108c8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80108c8:	b580      	push	{r7, lr}
 80108ca:	b082      	sub	sp, #8
 80108cc:	af00      	add	r7, sp, #0
 80108ce:	6078      	str	r0, [r7, #4]
 80108d0:	460b      	mov	r3, r1
 80108d2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	d106      	bne.n	80108e8 <netif_issue_reports+0x20>
 80108da:	4b18      	ldr	r3, [pc, #96]	@ (801093c <netif_issue_reports+0x74>)
 80108dc:	f240 326d 	movw	r2, #877	@ 0x36d
 80108e0:	4917      	ldr	r1, [pc, #92]	@ (8010940 <netif_issue_reports+0x78>)
 80108e2:	4818      	ldr	r0, [pc, #96]	@ (8010944 <netif_issue_reports+0x7c>)
 80108e4:	f00d fcfa 	bl	801e2dc <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80108e8:	687b      	ldr	r3, [r7, #4]
 80108ea:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80108ee:	f003 0304 	and.w	r3, r3, #4
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d01e      	beq.n	8010934 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80108fc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010900:	2b00      	cmp	r3, #0
 8010902:	d017      	beq.n	8010934 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010904:	78fb      	ldrb	r3, [r7, #3]
 8010906:	f003 0301 	and.w	r3, r3, #1
 801090a:	2b00      	cmp	r3, #0
 801090c:	d013      	beq.n	8010936 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	3304      	adds	r3, #4
 8010912:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010914:	2b00      	cmp	r3, #0
 8010916:	d00e      	beq.n	8010936 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010918:	687b      	ldr	r3, [r7, #4]
 801091a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801091e:	f003 0308 	and.w	r3, r3, #8
 8010922:	2b00      	cmp	r3, #0
 8010924:	d007      	beq.n	8010936 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	3304      	adds	r3, #4
 801092a:	4619      	mov	r1, r3
 801092c:	6878      	ldr	r0, [r7, #4]
 801092e:	f00a fda3 	bl	801b478 <etharp_request>
 8010932:	e000      	b.n	8010936 <netif_issue_reports+0x6e>
    return;
 8010934:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010936:	3708      	adds	r7, #8
 8010938:	46bd      	mov	sp, r7
 801093a:	bd80      	pop	{r7, pc}
 801093c:	08023078 	.word	0x08023078
 8010940:	0802321c 	.word	0x0802321c
 8010944:	080230c8 	.word	0x080230c8

08010948 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010948:	b580      	push	{r7, lr}
 801094a:	b082      	sub	sp, #8
 801094c:	af00      	add	r7, sp, #0
 801094e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d107      	bne.n	8010966 <netif_set_down+0x1e>
 8010956:	4b12      	ldr	r3, [pc, #72]	@ (80109a0 <netif_set_down+0x58>)
 8010958:	f240 329b 	movw	r2, #923	@ 0x39b
 801095c:	4911      	ldr	r1, [pc, #68]	@ (80109a4 <netif_set_down+0x5c>)
 801095e:	4812      	ldr	r0, [pc, #72]	@ (80109a8 <netif_set_down+0x60>)
 8010960:	f00d fcbc 	bl	801e2dc <iprintf>
 8010964:	e019      	b.n	801099a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801096c:	f003 0301 	and.w	r3, r3, #1
 8010970:	2b00      	cmp	r3, #0
 8010972:	d012      	beq.n	801099a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801097a:	f023 0301 	bic.w	r3, r3, #1
 801097e:	b2da      	uxtb	r2, r3
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801098c:	f003 0308 	and.w	r3, r3, #8
 8010990:	2b00      	cmp	r3, #0
 8010992:	d002      	beq.n	801099a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010994:	6878      	ldr	r0, [r7, #4]
 8010996:	f00a f929 	bl	801abec <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801099a:	3708      	adds	r7, #8
 801099c:	46bd      	mov	sp, r7
 801099e:	bd80      	pop	{r7, pc}
 80109a0:	08023078 	.word	0x08023078
 80109a4:	08023240 	.word	0x08023240
 80109a8:	080230c8 	.word	0x080230c8

080109ac <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d107      	bne.n	80109ca <netif_set_link_up+0x1e>
 80109ba:	4b15      	ldr	r3, [pc, #84]	@ (8010a10 <netif_set_link_up+0x64>)
 80109bc:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 80109c0:	4914      	ldr	r1, [pc, #80]	@ (8010a14 <netif_set_link_up+0x68>)
 80109c2:	4815      	ldr	r0, [pc, #84]	@ (8010a18 <netif_set_link_up+0x6c>)
 80109c4:	f00d fc8a 	bl	801e2dc <iprintf>
 80109c8:	e01e      	b.n	8010a08 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80109d0:	f003 0304 	and.w	r3, r3, #4
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d117      	bne.n	8010a08 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80109de:	f043 0304 	orr.w	r3, r3, #4
 80109e2:	b2da      	uxtb	r2, r3
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80109ea:	6878      	ldr	r0, [r7, #4]
 80109ec:	f008 fb44 	bl	8019078 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80109f0:	2103      	movs	r1, #3
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f7ff ff68 	bl	80108c8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	69db      	ldr	r3, [r3, #28]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d003      	beq.n	8010a08 <netif_set_link_up+0x5c>
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	69db      	ldr	r3, [r3, #28]
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010a08:	3708      	adds	r7, #8
 8010a0a:	46bd      	mov	sp, r7
 8010a0c:	bd80      	pop	{r7, pc}
 8010a0e:	bf00      	nop
 8010a10:	08023078 	.word	0x08023078
 8010a14:	08023260 	.word	0x08023260
 8010a18:	080230c8 	.word	0x080230c8

08010a1c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b082      	sub	sp, #8
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d107      	bne.n	8010a3a <netif_set_link_down+0x1e>
 8010a2a:	4b11      	ldr	r3, [pc, #68]	@ (8010a70 <netif_set_link_down+0x54>)
 8010a2c:	f240 4206 	movw	r2, #1030	@ 0x406
 8010a30:	4910      	ldr	r1, [pc, #64]	@ (8010a74 <netif_set_link_down+0x58>)
 8010a32:	4811      	ldr	r0, [pc, #68]	@ (8010a78 <netif_set_link_down+0x5c>)
 8010a34:	f00d fc52 	bl	801e2dc <iprintf>
 8010a38:	e017      	b.n	8010a6a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010a3a:	687b      	ldr	r3, [r7, #4]
 8010a3c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010a40:	f003 0304 	and.w	r3, r3, #4
 8010a44:	2b00      	cmp	r3, #0
 8010a46:	d010      	beq.n	8010a6a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010a4e:	f023 0304 	bic.w	r3, r3, #4
 8010a52:	b2da      	uxtb	r2, r3
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	69db      	ldr	r3, [r3, #28]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d003      	beq.n	8010a6a <netif_set_link_down+0x4e>
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	69db      	ldr	r3, [r3, #28]
 8010a66:	6878      	ldr	r0, [r7, #4]
 8010a68:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010a6a:	3708      	adds	r7, #8
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bd80      	pop	{r7, pc}
 8010a70:	08023078 	.word	0x08023078
 8010a74:	08023284 	.word	0x08023284
 8010a78:	080230c8 	.word	0x080230c8

08010a7c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010a7c:	b480      	push	{r7}
 8010a7e:	b083      	sub	sp, #12
 8010a80:	af00      	add	r7, sp, #0
 8010a82:	6078      	str	r0, [r7, #4]
 8010a84:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010a86:	687b      	ldr	r3, [r7, #4]
 8010a88:	2b00      	cmp	r3, #0
 8010a8a:	d002      	beq.n	8010a92 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	683a      	ldr	r2, [r7, #0]
 8010a90:	61da      	str	r2, [r3, #28]
  }
}
 8010a92:	bf00      	nop
 8010a94:	370c      	adds	r7, #12
 8010a96:	46bd      	mov	sp, r7
 8010a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a9c:	4770      	bx	lr

08010a9e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010a9e:	b480      	push	{r7}
 8010aa0:	b085      	sub	sp, #20
 8010aa2:	af00      	add	r7, sp, #0
 8010aa4:	60f8      	str	r0, [r7, #12]
 8010aa6:	60b9      	str	r1, [r7, #8]
 8010aa8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010aaa:	f06f 030b 	mvn.w	r3, #11
}
 8010aae:	4618      	mov	r0, r3
 8010ab0:	3714      	adds	r7, #20
 8010ab2:	46bd      	mov	sp, r7
 8010ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ab8:	4770      	bx	lr
	...

08010abc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010abc:	b480      	push	{r7}
 8010abe:	b085      	sub	sp, #20
 8010ac0:	af00      	add	r7, sp, #0
 8010ac2:	4603      	mov	r3, r0
 8010ac4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010ac6:	79fb      	ldrb	r3, [r7, #7]
 8010ac8:	2b00      	cmp	r3, #0
 8010aca:	d013      	beq.n	8010af4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010acc:	4b0d      	ldr	r3, [pc, #52]	@ (8010b04 <netif_get_by_index+0x48>)
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	60fb      	str	r3, [r7, #12]
 8010ad2:	e00c      	b.n	8010aee <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010ada:	3301      	adds	r3, #1
 8010adc:	b2db      	uxtb	r3, r3
 8010ade:	79fa      	ldrb	r2, [r7, #7]
 8010ae0:	429a      	cmp	r2, r3
 8010ae2:	d101      	bne.n	8010ae8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	e006      	b.n	8010af6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010ae8:	68fb      	ldr	r3, [r7, #12]
 8010aea:	681b      	ldr	r3, [r3, #0]
 8010aec:	60fb      	str	r3, [r7, #12]
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d1ef      	bne.n	8010ad4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010af4:	2300      	movs	r3, #0
}
 8010af6:	4618      	mov	r0, r3
 8010af8:	3714      	adds	r7, #20
 8010afa:	46bd      	mov	sp, r7
 8010afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b00:	4770      	bx	lr
 8010b02:	bf00      	nop
 8010b04:	20012664 	.word	0x20012664

08010b08 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010b08:	b580      	push	{r7, lr}
 8010b0a:	b082      	sub	sp, #8
 8010b0c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010b0e:	f00c fb1f 	bl	801d150 <sys_arch_protect>
 8010b12:	6038      	str	r0, [r7, #0]
 8010b14:	4b0d      	ldr	r3, [pc, #52]	@ (8010b4c <pbuf_free_ooseq+0x44>)
 8010b16:	2200      	movs	r2, #0
 8010b18:	701a      	strb	r2, [r3, #0]
 8010b1a:	6838      	ldr	r0, [r7, #0]
 8010b1c:	f00c fb26 	bl	801d16c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010b20:	4b0b      	ldr	r3, [pc, #44]	@ (8010b50 <pbuf_free_ooseq+0x48>)
 8010b22:	681b      	ldr	r3, [r3, #0]
 8010b24:	607b      	str	r3, [r7, #4]
 8010b26:	e00a      	b.n	8010b3e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010b2c:	2b00      	cmp	r3, #0
 8010b2e:	d003      	beq.n	8010b38 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010b30:	6878      	ldr	r0, [r7, #4]
 8010b32:	f002 fd65 	bl	8013600 <tcp_free_ooseq>
      return;
 8010b36:	e005      	b.n	8010b44 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	68db      	ldr	r3, [r3, #12]
 8010b3c:	607b      	str	r3, [r7, #4]
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d1f1      	bne.n	8010b28 <pbuf_free_ooseq+0x20>
    }
  }
}
 8010b44:	3708      	adds	r7, #8
 8010b46:	46bd      	mov	sp, r7
 8010b48:	bd80      	pop	{r7, pc}
 8010b4a:	bf00      	nop
 8010b4c:	2001266d 	.word	0x2001266d
 8010b50:	2001267c 	.word	0x2001267c

08010b54 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010b54:	b580      	push	{r7, lr}
 8010b56:	b082      	sub	sp, #8
 8010b58:	af00      	add	r7, sp, #0
 8010b5a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010b5c:	f7ff ffd4 	bl	8010b08 <pbuf_free_ooseq>
}
 8010b60:	bf00      	nop
 8010b62:	3708      	adds	r7, #8
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}

08010b68 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010b68:	b580      	push	{r7, lr}
 8010b6a:	b082      	sub	sp, #8
 8010b6c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8010b6e:	f00c faef 	bl	801d150 <sys_arch_protect>
 8010b72:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010b74:	4b0f      	ldr	r3, [pc, #60]	@ (8010bb4 <pbuf_pool_is_empty+0x4c>)
 8010b76:	781b      	ldrb	r3, [r3, #0]
 8010b78:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8010bb4 <pbuf_pool_is_empty+0x4c>)
 8010b7c:	2201      	movs	r2, #1
 8010b7e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8010b80:	6878      	ldr	r0, [r7, #4]
 8010b82:	f00c faf3 	bl	801d16c <sys_arch_unprotect>

  if (!queued) {
 8010b86:	78fb      	ldrb	r3, [r7, #3]
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d10f      	bne.n	8010bac <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010b8c:	2100      	movs	r1, #0
 8010b8e:	480a      	ldr	r0, [pc, #40]	@ (8010bb8 <pbuf_pool_is_empty+0x50>)
 8010b90:	f7fe fb96 	bl	800f2c0 <tcpip_try_callback>
 8010b94:	4603      	mov	r3, r0
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d008      	beq.n	8010bac <pbuf_pool_is_empty+0x44>
 8010b9a:	f00c fad9 	bl	801d150 <sys_arch_protect>
 8010b9e:	6078      	str	r0, [r7, #4]
 8010ba0:	4b04      	ldr	r3, [pc, #16]	@ (8010bb4 <pbuf_pool_is_empty+0x4c>)
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	701a      	strb	r2, [r3, #0]
 8010ba6:	6878      	ldr	r0, [r7, #4]
 8010ba8:	f00c fae0 	bl	801d16c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010bac:	bf00      	nop
 8010bae:	3708      	adds	r7, #8
 8010bb0:	46bd      	mov	sp, r7
 8010bb2:	bd80      	pop	{r7, pc}
 8010bb4:	2001266d 	.word	0x2001266d
 8010bb8:	08010b55 	.word	0x08010b55

08010bbc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010bbc:	b480      	push	{r7}
 8010bbe:	b085      	sub	sp, #20
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	60f8      	str	r0, [r7, #12]
 8010bc4:	60b9      	str	r1, [r7, #8]
 8010bc6:	4611      	mov	r1, r2
 8010bc8:	461a      	mov	r2, r3
 8010bca:	460b      	mov	r3, r1
 8010bcc:	80fb      	strh	r3, [r7, #6]
 8010bce:	4613      	mov	r3, r2
 8010bd0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010bd8:	68fb      	ldr	r3, [r7, #12]
 8010bda:	68ba      	ldr	r2, [r7, #8]
 8010bdc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010bde:	68fb      	ldr	r3, [r7, #12]
 8010be0:	88fa      	ldrh	r2, [r7, #6]
 8010be2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	88ba      	ldrh	r2, [r7, #4]
 8010be8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010bea:	8b3b      	ldrh	r3, [r7, #24]
 8010bec:	b2da      	uxtb	r2, r3
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010bf2:	68fb      	ldr	r3, [r7, #12]
 8010bf4:	7f3a      	ldrb	r2, [r7, #28]
 8010bf6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	2201      	movs	r2, #1
 8010bfc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	2200      	movs	r2, #0
 8010c02:	73da      	strb	r2, [r3, #15]
}
 8010c04:	bf00      	nop
 8010c06:	3714      	adds	r7, #20
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0e:	4770      	bx	lr

08010c10 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b08c      	sub	sp, #48	@ 0x30
 8010c14:	af02      	add	r7, sp, #8
 8010c16:	4603      	mov	r3, r0
 8010c18:	71fb      	strb	r3, [r7, #7]
 8010c1a:	460b      	mov	r3, r1
 8010c1c:	80bb      	strh	r3, [r7, #4]
 8010c1e:	4613      	mov	r3, r2
 8010c20:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010c22:	79fb      	ldrb	r3, [r7, #7]
 8010c24:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010c26:	887b      	ldrh	r3, [r7, #2]
 8010c28:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8010c2c:	d07f      	beq.n	8010d2e <pbuf_alloc+0x11e>
 8010c2e:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8010c32:	f300 80c8 	bgt.w	8010dc6 <pbuf_alloc+0x1b6>
 8010c36:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8010c3a:	d010      	beq.n	8010c5e <pbuf_alloc+0x4e>
 8010c3c:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8010c40:	f300 80c1 	bgt.w	8010dc6 <pbuf_alloc+0x1b6>
 8010c44:	2b01      	cmp	r3, #1
 8010c46:	d002      	beq.n	8010c4e <pbuf_alloc+0x3e>
 8010c48:	2b41      	cmp	r3, #65	@ 0x41
 8010c4a:	f040 80bc 	bne.w	8010dc6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010c4e:	887a      	ldrh	r2, [r7, #2]
 8010c50:	88bb      	ldrh	r3, [r7, #4]
 8010c52:	4619      	mov	r1, r3
 8010c54:	2000      	movs	r0, #0
 8010c56:	f000 f8d1 	bl	8010dfc <pbuf_alloc_reference>
 8010c5a:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8010c5c:	e0bd      	b.n	8010dda <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010c5e:	2300      	movs	r3, #0
 8010c60:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 8010c62:	2300      	movs	r3, #0
 8010c64:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010c66:	88bb      	ldrh	r3, [r7, #4]
 8010c68:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010c6a:	200d      	movs	r0, #13
 8010c6c:	f7ff fb8e 	bl	801038c <memp_malloc>
 8010c70:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010c72:	693b      	ldr	r3, [r7, #16]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d109      	bne.n	8010c8c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010c78:	f7ff ff76 	bl	8010b68 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d002      	beq.n	8010c88 <pbuf_alloc+0x78>
            pbuf_free(p);
 8010c82:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010c84:	f000 faa8 	bl	80111d8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010c88:	2300      	movs	r3, #0
 8010c8a:	e0a7      	b.n	8010ddc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010c8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010c8e:	3303      	adds	r3, #3
 8010c90:	b29b      	uxth	r3, r3
 8010c92:	f023 0303 	bic.w	r3, r3, #3
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8010c9c:	b29b      	uxth	r3, r3
 8010c9e:	8b7a      	ldrh	r2, [r7, #26]
 8010ca0:	4293      	cmp	r3, r2
 8010ca2:	bf28      	it	cs
 8010ca4:	4613      	movcs	r3, r2
 8010ca6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010ca8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010caa:	3310      	adds	r3, #16
 8010cac:	693a      	ldr	r2, [r7, #16]
 8010cae:	4413      	add	r3, r2
 8010cb0:	3303      	adds	r3, #3
 8010cb2:	f023 0303 	bic.w	r3, r3, #3
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	89f9      	ldrh	r1, [r7, #14]
 8010cba:	8b7a      	ldrh	r2, [r7, #26]
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	9301      	str	r3, [sp, #4]
 8010cc0:	887b      	ldrh	r3, [r7, #2]
 8010cc2:	9300      	str	r3, [sp, #0]
 8010cc4:	460b      	mov	r3, r1
 8010cc6:	4601      	mov	r1, r0
 8010cc8:	6938      	ldr	r0, [r7, #16]
 8010cca:	f7ff ff77 	bl	8010bbc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010cce:	693b      	ldr	r3, [r7, #16]
 8010cd0:	685b      	ldr	r3, [r3, #4]
 8010cd2:	f003 0303 	and.w	r3, r3, #3
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d006      	beq.n	8010ce8 <pbuf_alloc+0xd8>
 8010cda:	4b42      	ldr	r3, [pc, #264]	@ (8010de4 <pbuf_alloc+0x1d4>)
 8010cdc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8010ce0:	4941      	ldr	r1, [pc, #260]	@ (8010de8 <pbuf_alloc+0x1d8>)
 8010ce2:	4842      	ldr	r0, [pc, #264]	@ (8010dec <pbuf_alloc+0x1dc>)
 8010ce4:	f00d fafa 	bl	801e2dc <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010ce8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010cea:	3303      	adds	r3, #3
 8010cec:	f023 0303 	bic.w	r3, r3, #3
 8010cf0:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8010cf4:	d106      	bne.n	8010d04 <pbuf_alloc+0xf4>
 8010cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8010de4 <pbuf_alloc+0x1d4>)
 8010cf8:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8010cfc:	493c      	ldr	r1, [pc, #240]	@ (8010df0 <pbuf_alloc+0x1e0>)
 8010cfe:	483b      	ldr	r0, [pc, #236]	@ (8010dec <pbuf_alloc+0x1dc>)
 8010d00:	f00d faec 	bl	801e2dc <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d102      	bne.n	8010d10 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010d0a:	693b      	ldr	r3, [r7, #16]
 8010d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8010d0e:	e002      	b.n	8010d16 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010d10:	69fb      	ldr	r3, [r7, #28]
 8010d12:	693a      	ldr	r2, [r7, #16]
 8010d14:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010d16:	693b      	ldr	r3, [r7, #16]
 8010d18:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010d1a:	8b7a      	ldrh	r2, [r7, #26]
 8010d1c:	89fb      	ldrh	r3, [r7, #14]
 8010d1e:	1ad3      	subs	r3, r2, r3
 8010d20:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010d22:	2300      	movs	r3, #0
 8010d24:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 8010d26:	8b7b      	ldrh	r3, [r7, #26]
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d19e      	bne.n	8010c6a <pbuf_alloc+0x5a>
      break;
 8010d2c:	e055      	b.n	8010dda <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010d2e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010d30:	3303      	adds	r3, #3
 8010d32:	b29b      	uxth	r3, r3
 8010d34:	f023 0303 	bic.w	r3, r3, #3
 8010d38:	b29a      	uxth	r2, r3
 8010d3a:	88bb      	ldrh	r3, [r7, #4]
 8010d3c:	3303      	adds	r3, #3
 8010d3e:	b29b      	uxth	r3, r3
 8010d40:	f023 0303 	bic.w	r3, r3, #3
 8010d44:	b29b      	uxth	r3, r3
 8010d46:	4413      	add	r3, r2
 8010d48:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010d4a:	8b3b      	ldrh	r3, [r7, #24]
 8010d4c:	3310      	adds	r3, #16
 8010d4e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010d50:	8b3a      	ldrh	r2, [r7, #24]
 8010d52:	88bb      	ldrh	r3, [r7, #4]
 8010d54:	3303      	adds	r3, #3
 8010d56:	f023 0303 	bic.w	r3, r3, #3
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d306      	bcc.n	8010d6c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010d5e:	8afa      	ldrh	r2, [r7, #22]
 8010d60:	88bb      	ldrh	r3, [r7, #4]
 8010d62:	3303      	adds	r3, #3
 8010d64:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010d68:	429a      	cmp	r2, r3
 8010d6a:	d201      	bcs.n	8010d70 <pbuf_alloc+0x160>
        return NULL;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	e035      	b.n	8010ddc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010d70:	8afb      	ldrh	r3, [r7, #22]
 8010d72:	4618      	mov	r0, r3
 8010d74:	f7ff f966 	bl	8010044 <mem_malloc>
 8010d78:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8010d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d101      	bne.n	8010d84 <pbuf_alloc+0x174>
        return NULL;
 8010d80:	2300      	movs	r3, #0
 8010d82:	e02b      	b.n	8010ddc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010d84:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010d86:	3310      	adds	r3, #16
 8010d88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010d8a:	4413      	add	r3, r2
 8010d8c:	3303      	adds	r3, #3
 8010d8e:	f023 0303 	bic.w	r3, r3, #3
 8010d92:	4618      	mov	r0, r3
 8010d94:	88b9      	ldrh	r1, [r7, #4]
 8010d96:	88ba      	ldrh	r2, [r7, #4]
 8010d98:	2300      	movs	r3, #0
 8010d9a:	9301      	str	r3, [sp, #4]
 8010d9c:	887b      	ldrh	r3, [r7, #2]
 8010d9e:	9300      	str	r3, [sp, #0]
 8010da0:	460b      	mov	r3, r1
 8010da2:	4601      	mov	r1, r0
 8010da4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010da6:	f7ff ff09 	bl	8010bbc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	f003 0303 	and.w	r3, r3, #3
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	d010      	beq.n	8010dd8 <pbuf_alloc+0x1c8>
 8010db6:	4b0b      	ldr	r3, [pc, #44]	@ (8010de4 <pbuf_alloc+0x1d4>)
 8010db8:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8010dbc:	490d      	ldr	r1, [pc, #52]	@ (8010df4 <pbuf_alloc+0x1e4>)
 8010dbe:	480b      	ldr	r0, [pc, #44]	@ (8010dec <pbuf_alloc+0x1dc>)
 8010dc0:	f00d fa8c 	bl	801e2dc <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010dc4:	e008      	b.n	8010dd8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010dc6:	4b07      	ldr	r3, [pc, #28]	@ (8010de4 <pbuf_alloc+0x1d4>)
 8010dc8:	f240 1227 	movw	r2, #295	@ 0x127
 8010dcc:	490a      	ldr	r1, [pc, #40]	@ (8010df8 <pbuf_alloc+0x1e8>)
 8010dce:	4807      	ldr	r0, [pc, #28]	@ (8010dec <pbuf_alloc+0x1dc>)
 8010dd0:	f00d fa84 	bl	801e2dc <iprintf>
      return NULL;
 8010dd4:	2300      	movs	r3, #0
 8010dd6:	e001      	b.n	8010ddc <pbuf_alloc+0x1cc>
      break;
 8010dd8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010ddc:	4618      	mov	r0, r3
 8010dde:	3728      	adds	r7, #40	@ 0x28
 8010de0:	46bd      	mov	sp, r7
 8010de2:	bd80      	pop	{r7, pc}
 8010de4:	080232a8 	.word	0x080232a8
 8010de8:	080232d8 	.word	0x080232d8
 8010dec:	08023308 	.word	0x08023308
 8010df0:	08023330 	.word	0x08023330
 8010df4:	08023364 	.word	0x08023364
 8010df8:	08023390 	.word	0x08023390

08010dfc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b086      	sub	sp, #24
 8010e00:	af02      	add	r7, sp, #8
 8010e02:	6078      	str	r0, [r7, #4]
 8010e04:	460b      	mov	r3, r1
 8010e06:	807b      	strh	r3, [r7, #2]
 8010e08:	4613      	mov	r3, r2
 8010e0a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010e0c:	883b      	ldrh	r3, [r7, #0]
 8010e0e:	2b41      	cmp	r3, #65	@ 0x41
 8010e10:	d009      	beq.n	8010e26 <pbuf_alloc_reference+0x2a>
 8010e12:	883b      	ldrh	r3, [r7, #0]
 8010e14:	2b01      	cmp	r3, #1
 8010e16:	d006      	beq.n	8010e26 <pbuf_alloc_reference+0x2a>
 8010e18:	4b0f      	ldr	r3, [pc, #60]	@ (8010e58 <pbuf_alloc_reference+0x5c>)
 8010e1a:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 8010e1e:	490f      	ldr	r1, [pc, #60]	@ (8010e5c <pbuf_alloc_reference+0x60>)
 8010e20:	480f      	ldr	r0, [pc, #60]	@ (8010e60 <pbuf_alloc_reference+0x64>)
 8010e22:	f00d fa5b 	bl	801e2dc <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010e26:	200c      	movs	r0, #12
 8010e28:	f7ff fab0 	bl	801038c <memp_malloc>
 8010e2c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	2b00      	cmp	r3, #0
 8010e32:	d101      	bne.n	8010e38 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010e34:	2300      	movs	r3, #0
 8010e36:	e00b      	b.n	8010e50 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010e38:	8879      	ldrh	r1, [r7, #2]
 8010e3a:	887a      	ldrh	r2, [r7, #2]
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	9301      	str	r3, [sp, #4]
 8010e40:	883b      	ldrh	r3, [r7, #0]
 8010e42:	9300      	str	r3, [sp, #0]
 8010e44:	460b      	mov	r3, r1
 8010e46:	6879      	ldr	r1, [r7, #4]
 8010e48:	68f8      	ldr	r0, [r7, #12]
 8010e4a:	f7ff feb7 	bl	8010bbc <pbuf_init_alloced_pbuf>
  return p;
 8010e4e:	68fb      	ldr	r3, [r7, #12]
}
 8010e50:	4618      	mov	r0, r3
 8010e52:	3710      	adds	r7, #16
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}
 8010e58:	080232a8 	.word	0x080232a8
 8010e5c:	080233ac 	.word	0x080233ac
 8010e60:	08023308 	.word	0x08023308

08010e64 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b088      	sub	sp, #32
 8010e68:	af02      	add	r7, sp, #8
 8010e6a:	607b      	str	r3, [r7, #4]
 8010e6c:	4603      	mov	r3, r0
 8010e6e:	73fb      	strb	r3, [r7, #15]
 8010e70:	460b      	mov	r3, r1
 8010e72:	81bb      	strh	r3, [r7, #12]
 8010e74:	4613      	mov	r3, r2
 8010e76:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010e78:	7bfb      	ldrb	r3, [r7, #15]
 8010e7a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010e7c:	8a7b      	ldrh	r3, [r7, #18]
 8010e7e:	3303      	adds	r3, #3
 8010e80:	f023 0203 	bic.w	r2, r3, #3
 8010e84:	89bb      	ldrh	r3, [r7, #12]
 8010e86:	441a      	add	r2, r3
 8010e88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010e8a:	429a      	cmp	r2, r3
 8010e8c:	d901      	bls.n	8010e92 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010e8e:	2300      	movs	r3, #0
 8010e90:	e018      	b.n	8010ec4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010e92:	6a3b      	ldr	r3, [r7, #32]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d007      	beq.n	8010ea8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010e98:	8a7b      	ldrh	r3, [r7, #18]
 8010e9a:	3303      	adds	r3, #3
 8010e9c:	f023 0303 	bic.w	r3, r3, #3
 8010ea0:	6a3a      	ldr	r2, [r7, #32]
 8010ea2:	4413      	add	r3, r2
 8010ea4:	617b      	str	r3, [r7, #20]
 8010ea6:	e001      	b.n	8010eac <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010ea8:	2300      	movs	r3, #0
 8010eaa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010eac:	6878      	ldr	r0, [r7, #4]
 8010eae:	89b9      	ldrh	r1, [r7, #12]
 8010eb0:	89ba      	ldrh	r2, [r7, #12]
 8010eb2:	2302      	movs	r3, #2
 8010eb4:	9301      	str	r3, [sp, #4]
 8010eb6:	897b      	ldrh	r3, [r7, #10]
 8010eb8:	9300      	str	r3, [sp, #0]
 8010eba:	460b      	mov	r3, r1
 8010ebc:	6979      	ldr	r1, [r7, #20]
 8010ebe:	f7ff fe7d 	bl	8010bbc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010ec2:	687b      	ldr	r3, [r7, #4]
}
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	3718      	adds	r7, #24
 8010ec8:	46bd      	mov	sp, r7
 8010eca:	bd80      	pop	{r7, pc}

08010ecc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010ecc:	b580      	push	{r7, lr}
 8010ece:	b084      	sub	sp, #16
 8010ed0:	af00      	add	r7, sp, #0
 8010ed2:	6078      	str	r0, [r7, #4]
 8010ed4:	460b      	mov	r3, r1
 8010ed6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010ed8:	687b      	ldr	r3, [r7, #4]
 8010eda:	2b00      	cmp	r3, #0
 8010edc:	d106      	bne.n	8010eec <pbuf_realloc+0x20>
 8010ede:	4b3a      	ldr	r3, [pc, #232]	@ (8010fc8 <pbuf_realloc+0xfc>)
 8010ee0:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8010ee4:	4939      	ldr	r1, [pc, #228]	@ (8010fcc <pbuf_realloc+0x100>)
 8010ee6:	483a      	ldr	r0, [pc, #232]	@ (8010fd0 <pbuf_realloc+0x104>)
 8010ee8:	f00d f9f8 	bl	801e2dc <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010eec:	687b      	ldr	r3, [r7, #4]
 8010eee:	891b      	ldrh	r3, [r3, #8]
 8010ef0:	887a      	ldrh	r2, [r7, #2]
 8010ef2:	429a      	cmp	r2, r3
 8010ef4:	d263      	bcs.n	8010fbe <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	891a      	ldrh	r2, [r3, #8]
 8010efa:	887b      	ldrh	r3, [r7, #2]
 8010efc:	1ad3      	subs	r3, r2, r3
 8010efe:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010f00:	887b      	ldrh	r3, [r7, #2]
 8010f02:	817b      	strh	r3, [r7, #10]
  q = p;
 8010f04:	687b      	ldr	r3, [r7, #4]
 8010f06:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010f08:	e018      	b.n	8010f3c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	895b      	ldrh	r3, [r3, #10]
 8010f0e:	897a      	ldrh	r2, [r7, #10]
 8010f10:	1ad3      	subs	r3, r2, r3
 8010f12:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	891a      	ldrh	r2, [r3, #8]
 8010f18:	893b      	ldrh	r3, [r7, #8]
 8010f1a:	1ad3      	subs	r3, r2, r3
 8010f1c:	b29a      	uxth	r2, r3
 8010f1e:	68fb      	ldr	r3, [r7, #12]
 8010f20:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d106      	bne.n	8010f3c <pbuf_realloc+0x70>
 8010f2e:	4b26      	ldr	r3, [pc, #152]	@ (8010fc8 <pbuf_realloc+0xfc>)
 8010f30:	f240 12af 	movw	r2, #431	@ 0x1af
 8010f34:	4927      	ldr	r1, [pc, #156]	@ (8010fd4 <pbuf_realloc+0x108>)
 8010f36:	4826      	ldr	r0, [pc, #152]	@ (8010fd0 <pbuf_realloc+0x104>)
 8010f38:	f00d f9d0 	bl	801e2dc <iprintf>
  while (rem_len > q->len) {
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	895b      	ldrh	r3, [r3, #10]
 8010f40:	897a      	ldrh	r2, [r7, #10]
 8010f42:	429a      	cmp	r2, r3
 8010f44:	d8e1      	bhi.n	8010f0a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	7b1b      	ldrb	r3, [r3, #12]
 8010f4a:	f003 030f 	and.w	r3, r3, #15
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d121      	bne.n	8010f96 <pbuf_realloc+0xca>
 8010f52:	68fb      	ldr	r3, [r7, #12]
 8010f54:	895b      	ldrh	r3, [r3, #10]
 8010f56:	897a      	ldrh	r2, [r7, #10]
 8010f58:	429a      	cmp	r2, r3
 8010f5a:	d01c      	beq.n	8010f96 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010f5c:	68fb      	ldr	r3, [r7, #12]
 8010f5e:	7b5b      	ldrb	r3, [r3, #13]
 8010f60:	f003 0302 	and.w	r3, r3, #2
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	d116      	bne.n	8010f96 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010f68:	68fb      	ldr	r3, [r7, #12]
 8010f6a:	685a      	ldr	r2, [r3, #4]
 8010f6c:	68fb      	ldr	r3, [r7, #12]
 8010f6e:	1ad3      	subs	r3, r2, r3
 8010f70:	b29a      	uxth	r2, r3
 8010f72:	897b      	ldrh	r3, [r7, #10]
 8010f74:	4413      	add	r3, r2
 8010f76:	b29b      	uxth	r3, r3
 8010f78:	4619      	mov	r1, r3
 8010f7a:	68f8      	ldr	r0, [r7, #12]
 8010f7c:	f7fe ff58 	bl	800fe30 <mem_trim>
 8010f80:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d106      	bne.n	8010f96 <pbuf_realloc+0xca>
 8010f88:	4b0f      	ldr	r3, [pc, #60]	@ (8010fc8 <pbuf_realloc+0xfc>)
 8010f8a:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8010f8e:	4912      	ldr	r1, [pc, #72]	@ (8010fd8 <pbuf_realloc+0x10c>)
 8010f90:	480f      	ldr	r0, [pc, #60]	@ (8010fd0 <pbuf_realloc+0x104>)
 8010f92:	f00d f9a3 	bl	801e2dc <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	897a      	ldrh	r2, [r7, #10]
 8010f9a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010f9c:	68fb      	ldr	r3, [r7, #12]
 8010f9e:	895a      	ldrh	r2, [r3, #10]
 8010fa0:	68fb      	ldr	r3, [r7, #12]
 8010fa2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	681b      	ldr	r3, [r3, #0]
 8010fa8:	2b00      	cmp	r3, #0
 8010faa:	d004      	beq.n	8010fb6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f000 f911 	bl	80111d8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	2200      	movs	r2, #0
 8010fba:	601a      	str	r2, [r3, #0]
 8010fbc:	e000      	b.n	8010fc0 <pbuf_realloc+0xf4>
    return;
 8010fbe:	bf00      	nop

}
 8010fc0:	3710      	adds	r7, #16
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}
 8010fc6:	bf00      	nop
 8010fc8:	080232a8 	.word	0x080232a8
 8010fcc:	080233c0 	.word	0x080233c0
 8010fd0:	08023308 	.word	0x08023308
 8010fd4:	080233d8 	.word	0x080233d8
 8010fd8:	080233f0 	.word	0x080233f0

08010fdc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010fdc:	b580      	push	{r7, lr}
 8010fde:	b086      	sub	sp, #24
 8010fe0:	af00      	add	r7, sp, #0
 8010fe2:	60f8      	str	r0, [r7, #12]
 8010fe4:	60b9      	str	r1, [r7, #8]
 8010fe6:	4613      	mov	r3, r2
 8010fe8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d106      	bne.n	8010ffe <pbuf_add_header_impl+0x22>
 8010ff0:	4b2b      	ldr	r3, [pc, #172]	@ (80110a0 <pbuf_add_header_impl+0xc4>)
 8010ff2:	f240 12df 	movw	r2, #479	@ 0x1df
 8010ff6:	492b      	ldr	r1, [pc, #172]	@ (80110a4 <pbuf_add_header_impl+0xc8>)
 8010ff8:	482b      	ldr	r0, [pc, #172]	@ (80110a8 <pbuf_add_header_impl+0xcc>)
 8010ffa:	f00d f96f 	bl	801e2dc <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d003      	beq.n	801100c <pbuf_add_header_impl+0x30>
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801100a:	d301      	bcc.n	8011010 <pbuf_add_header_impl+0x34>
    return 1;
 801100c:	2301      	movs	r3, #1
 801100e:	e043      	b.n	8011098 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d101      	bne.n	801101a <pbuf_add_header_impl+0x3e>
    return 0;
 8011016:	2300      	movs	r3, #0
 8011018:	e03e      	b.n	8011098 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801101a:	68bb      	ldr	r3, [r7, #8]
 801101c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	891a      	ldrh	r2, [r3, #8]
 8011022:	8a7b      	ldrh	r3, [r7, #18]
 8011024:	4413      	add	r3, r2
 8011026:	b29b      	uxth	r3, r3
 8011028:	8a7a      	ldrh	r2, [r7, #18]
 801102a:	429a      	cmp	r2, r3
 801102c:	d901      	bls.n	8011032 <pbuf_add_header_impl+0x56>
    return 1;
 801102e:	2301      	movs	r3, #1
 8011030:	e032      	b.n	8011098 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	7b1b      	ldrb	r3, [r3, #12]
 8011036:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8011038:	8a3b      	ldrh	r3, [r7, #16]
 801103a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801103e:	2b00      	cmp	r3, #0
 8011040:	d00c      	beq.n	801105c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	685a      	ldr	r2, [r3, #4]
 8011046:	68bb      	ldr	r3, [r7, #8]
 8011048:	425b      	negs	r3, r3
 801104a:	4413      	add	r3, r2
 801104c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	3310      	adds	r3, #16
 8011052:	697a      	ldr	r2, [r7, #20]
 8011054:	429a      	cmp	r2, r3
 8011056:	d20d      	bcs.n	8011074 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8011058:	2301      	movs	r3, #1
 801105a:	e01d      	b.n	8011098 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801105c:	79fb      	ldrb	r3, [r7, #7]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d006      	beq.n	8011070 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8011062:	68fb      	ldr	r3, [r7, #12]
 8011064:	685a      	ldr	r2, [r3, #4]
 8011066:	68bb      	ldr	r3, [r7, #8]
 8011068:	425b      	negs	r3, r3
 801106a:	4413      	add	r3, r2
 801106c:	617b      	str	r3, [r7, #20]
 801106e:	e001      	b.n	8011074 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8011070:	2301      	movs	r3, #1
 8011072:	e011      	b.n	8011098 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011074:	68fb      	ldr	r3, [r7, #12]
 8011076:	697a      	ldr	r2, [r7, #20]
 8011078:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801107a:	68fb      	ldr	r3, [r7, #12]
 801107c:	895a      	ldrh	r2, [r3, #10]
 801107e:	8a7b      	ldrh	r3, [r7, #18]
 8011080:	4413      	add	r3, r2
 8011082:	b29a      	uxth	r2, r3
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	891a      	ldrh	r2, [r3, #8]
 801108c:	8a7b      	ldrh	r3, [r7, #18]
 801108e:	4413      	add	r3, r2
 8011090:	b29a      	uxth	r2, r3
 8011092:	68fb      	ldr	r3, [r7, #12]
 8011094:	811a      	strh	r2, [r3, #8]


  return 0;
 8011096:	2300      	movs	r3, #0
}
 8011098:	4618      	mov	r0, r3
 801109a:	3718      	adds	r7, #24
 801109c:	46bd      	mov	sp, r7
 801109e:	bd80      	pop	{r7, pc}
 80110a0:	080232a8 	.word	0x080232a8
 80110a4:	0802340c 	.word	0x0802340c
 80110a8:	08023308 	.word	0x08023308

080110ac <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80110ac:	b580      	push	{r7, lr}
 80110ae:	b082      	sub	sp, #8
 80110b0:	af00      	add	r7, sp, #0
 80110b2:	6078      	str	r0, [r7, #4]
 80110b4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80110b6:	2200      	movs	r2, #0
 80110b8:	6839      	ldr	r1, [r7, #0]
 80110ba:	6878      	ldr	r0, [r7, #4]
 80110bc:	f7ff ff8e 	bl	8010fdc <pbuf_add_header_impl>
 80110c0:	4603      	mov	r3, r0
}
 80110c2:	4618      	mov	r0, r3
 80110c4:	3708      	adds	r7, #8
 80110c6:	46bd      	mov	sp, r7
 80110c8:	bd80      	pop	{r7, pc}
	...

080110cc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b084      	sub	sp, #16
 80110d0:	af00      	add	r7, sp, #0
 80110d2:	6078      	str	r0, [r7, #4]
 80110d4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d106      	bne.n	80110ea <pbuf_remove_header+0x1e>
 80110dc:	4b20      	ldr	r3, [pc, #128]	@ (8011160 <pbuf_remove_header+0x94>)
 80110de:	f240 224b 	movw	r2, #587	@ 0x24b
 80110e2:	4920      	ldr	r1, [pc, #128]	@ (8011164 <pbuf_remove_header+0x98>)
 80110e4:	4820      	ldr	r0, [pc, #128]	@ (8011168 <pbuf_remove_header+0x9c>)
 80110e6:	f00d f8f9 	bl	801e2dc <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80110ea:	687b      	ldr	r3, [r7, #4]
 80110ec:	2b00      	cmp	r3, #0
 80110ee:	d003      	beq.n	80110f8 <pbuf_remove_header+0x2c>
 80110f0:	683b      	ldr	r3, [r7, #0]
 80110f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80110f6:	d301      	bcc.n	80110fc <pbuf_remove_header+0x30>
    return 1;
 80110f8:	2301      	movs	r3, #1
 80110fa:	e02c      	b.n	8011156 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80110fc:	683b      	ldr	r3, [r7, #0]
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d101      	bne.n	8011106 <pbuf_remove_header+0x3a>
    return 0;
 8011102:	2300      	movs	r3, #0
 8011104:	e027      	b.n	8011156 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	895b      	ldrh	r3, [r3, #10]
 801110e:	89fa      	ldrh	r2, [r7, #14]
 8011110:	429a      	cmp	r2, r3
 8011112:	d908      	bls.n	8011126 <pbuf_remove_header+0x5a>
 8011114:	4b12      	ldr	r3, [pc, #72]	@ (8011160 <pbuf_remove_header+0x94>)
 8011116:	f240 2255 	movw	r2, #597	@ 0x255
 801111a:	4914      	ldr	r1, [pc, #80]	@ (801116c <pbuf_remove_header+0xa0>)
 801111c:	4812      	ldr	r0, [pc, #72]	@ (8011168 <pbuf_remove_header+0x9c>)
 801111e:	f00d f8dd 	bl	801e2dc <iprintf>
 8011122:	2301      	movs	r3, #1
 8011124:	e017      	b.n	8011156 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	685b      	ldr	r3, [r3, #4]
 801112a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	685a      	ldr	r2, [r3, #4]
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	441a      	add	r2, r3
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	895a      	ldrh	r2, [r3, #10]
 801113c:	89fb      	ldrh	r3, [r7, #14]
 801113e:	1ad3      	subs	r3, r2, r3
 8011140:	b29a      	uxth	r2, r3
 8011142:	687b      	ldr	r3, [r7, #4]
 8011144:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	891a      	ldrh	r2, [r3, #8]
 801114a:	89fb      	ldrh	r3, [r7, #14]
 801114c:	1ad3      	subs	r3, r2, r3
 801114e:	b29a      	uxth	r2, r3
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8011154:	2300      	movs	r3, #0
}
 8011156:	4618      	mov	r0, r3
 8011158:	3710      	adds	r7, #16
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}
 801115e:	bf00      	nop
 8011160:	080232a8 	.word	0x080232a8
 8011164:	0802340c 	.word	0x0802340c
 8011168:	08023308 	.word	0x08023308
 801116c:	08023418 	.word	0x08023418

08011170 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b082      	sub	sp, #8
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	460b      	mov	r3, r1
 801117a:	807b      	strh	r3, [r7, #2]
 801117c:	4613      	mov	r3, r2
 801117e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8011180:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011184:	2b00      	cmp	r3, #0
 8011186:	da08      	bge.n	801119a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011188:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801118c:	425b      	negs	r3, r3
 801118e:	4619      	mov	r1, r3
 8011190:	6878      	ldr	r0, [r7, #4]
 8011192:	f7ff ff9b 	bl	80110cc <pbuf_remove_header>
 8011196:	4603      	mov	r3, r0
 8011198:	e007      	b.n	80111aa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801119a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801119e:	787a      	ldrb	r2, [r7, #1]
 80111a0:	4619      	mov	r1, r3
 80111a2:	6878      	ldr	r0, [r7, #4]
 80111a4:	f7ff ff1a 	bl	8010fdc <pbuf_add_header_impl>
 80111a8:	4603      	mov	r3, r0
  }
}
 80111aa:	4618      	mov	r0, r3
 80111ac:	3708      	adds	r7, #8
 80111ae:	46bd      	mov	sp, r7
 80111b0:	bd80      	pop	{r7, pc}

080111b2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80111b2:	b580      	push	{r7, lr}
 80111b4:	b082      	sub	sp, #8
 80111b6:	af00      	add	r7, sp, #0
 80111b8:	6078      	str	r0, [r7, #4]
 80111ba:	460b      	mov	r3, r1
 80111bc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80111be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80111c2:	2201      	movs	r2, #1
 80111c4:	4619      	mov	r1, r3
 80111c6:	6878      	ldr	r0, [r7, #4]
 80111c8:	f7ff ffd2 	bl	8011170 <pbuf_header_impl>
 80111cc:	4603      	mov	r3, r0
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3708      	adds	r7, #8
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
	...

080111d8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80111d8:	b580      	push	{r7, lr}
 80111da:	b088      	sub	sp, #32
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d10b      	bne.n	80111fe <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d106      	bne.n	80111fa <pbuf_free+0x22>
 80111ec:	4b3b      	ldr	r3, [pc, #236]	@ (80112dc <pbuf_free+0x104>)
 80111ee:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 80111f2:	493b      	ldr	r1, [pc, #236]	@ (80112e0 <pbuf_free+0x108>)
 80111f4:	483b      	ldr	r0, [pc, #236]	@ (80112e4 <pbuf_free+0x10c>)
 80111f6:	f00d f871 	bl	801e2dc <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80111fa:	2300      	movs	r3, #0
 80111fc:	e069      	b.n	80112d2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80111fe:	2300      	movs	r3, #0
 8011200:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011202:	e062      	b.n	80112ca <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011204:	f00b ffa4 	bl	801d150 <sys_arch_protect>
 8011208:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	7b9b      	ldrb	r3, [r3, #14]
 801120e:	2b00      	cmp	r3, #0
 8011210:	d106      	bne.n	8011220 <pbuf_free+0x48>
 8011212:	4b32      	ldr	r3, [pc, #200]	@ (80112dc <pbuf_free+0x104>)
 8011214:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8011218:	4933      	ldr	r1, [pc, #204]	@ (80112e8 <pbuf_free+0x110>)
 801121a:	4832      	ldr	r0, [pc, #200]	@ (80112e4 <pbuf_free+0x10c>)
 801121c:	f00d f85e 	bl	801e2dc <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	7b9b      	ldrb	r3, [r3, #14]
 8011224:	3b01      	subs	r3, #1
 8011226:	b2da      	uxtb	r2, r3
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	739a      	strb	r2, [r3, #14]
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	7b9b      	ldrb	r3, [r3, #14]
 8011230:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8011232:	69b8      	ldr	r0, [r7, #24]
 8011234:	f00b ff9a 	bl	801d16c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8011238:	7dfb      	ldrb	r3, [r7, #23]
 801123a:	2b00      	cmp	r3, #0
 801123c:	d143      	bne.n	80112c6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	681b      	ldr	r3, [r3, #0]
 8011242:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	7b1b      	ldrb	r3, [r3, #12]
 8011248:	f003 030f 	and.w	r3, r3, #15
 801124c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	7b5b      	ldrb	r3, [r3, #13]
 8011252:	f003 0302 	and.w	r3, r3, #2
 8011256:	2b00      	cmp	r3, #0
 8011258:	d011      	beq.n	801127e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801125e:	68bb      	ldr	r3, [r7, #8]
 8011260:	691b      	ldr	r3, [r3, #16]
 8011262:	2b00      	cmp	r3, #0
 8011264:	d106      	bne.n	8011274 <pbuf_free+0x9c>
 8011266:	4b1d      	ldr	r3, [pc, #116]	@ (80112dc <pbuf_free+0x104>)
 8011268:	f240 22ff 	movw	r2, #767	@ 0x2ff
 801126c:	491f      	ldr	r1, [pc, #124]	@ (80112ec <pbuf_free+0x114>)
 801126e:	481d      	ldr	r0, [pc, #116]	@ (80112e4 <pbuf_free+0x10c>)
 8011270:	f00d f834 	bl	801e2dc <iprintf>
        pc->custom_free_function(p);
 8011274:	68bb      	ldr	r3, [r7, #8]
 8011276:	691b      	ldr	r3, [r3, #16]
 8011278:	6878      	ldr	r0, [r7, #4]
 801127a:	4798      	blx	r3
 801127c:	e01d      	b.n	80112ba <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801127e:	7bfb      	ldrb	r3, [r7, #15]
 8011280:	2b02      	cmp	r3, #2
 8011282:	d104      	bne.n	801128e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8011284:	6879      	ldr	r1, [r7, #4]
 8011286:	200d      	movs	r0, #13
 8011288:	f7ff f8f6 	bl	8010478 <memp_free>
 801128c:	e015      	b.n	80112ba <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801128e:	7bfb      	ldrb	r3, [r7, #15]
 8011290:	2b01      	cmp	r3, #1
 8011292:	d104      	bne.n	801129e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8011294:	6879      	ldr	r1, [r7, #4]
 8011296:	200c      	movs	r0, #12
 8011298:	f7ff f8ee 	bl	8010478 <memp_free>
 801129c:	e00d      	b.n	80112ba <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801129e:	7bfb      	ldrb	r3, [r7, #15]
 80112a0:	2b00      	cmp	r3, #0
 80112a2:	d103      	bne.n	80112ac <pbuf_free+0xd4>
          mem_free(p);
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f7fe fd33 	bl	800fd10 <mem_free>
 80112aa:	e006      	b.n	80112ba <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80112ac:	4b0b      	ldr	r3, [pc, #44]	@ (80112dc <pbuf_free+0x104>)
 80112ae:	f240 320f 	movw	r2, #783	@ 0x30f
 80112b2:	490f      	ldr	r1, [pc, #60]	@ (80112f0 <pbuf_free+0x118>)
 80112b4:	480b      	ldr	r0, [pc, #44]	@ (80112e4 <pbuf_free+0x10c>)
 80112b6:	f00d f811 	bl	801e2dc <iprintf>
        }
      }
      count++;
 80112ba:	7ffb      	ldrb	r3, [r7, #31]
 80112bc:	3301      	adds	r3, #1
 80112be:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80112c0:	693b      	ldr	r3, [r7, #16]
 80112c2:	607b      	str	r3, [r7, #4]
 80112c4:	e001      	b.n	80112ca <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80112c6:	2300      	movs	r3, #0
 80112c8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d199      	bne.n	8011204 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80112d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80112d2:	4618      	mov	r0, r3
 80112d4:	3720      	adds	r7, #32
 80112d6:	46bd      	mov	sp, r7
 80112d8:	bd80      	pop	{r7, pc}
 80112da:	bf00      	nop
 80112dc:	080232a8 	.word	0x080232a8
 80112e0:	0802340c 	.word	0x0802340c
 80112e4:	08023308 	.word	0x08023308
 80112e8:	08023438 	.word	0x08023438
 80112ec:	08023450 	.word	0x08023450
 80112f0:	08023474 	.word	0x08023474

080112f4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80112f4:	b480      	push	{r7}
 80112f6:	b085      	sub	sp, #20
 80112f8:	af00      	add	r7, sp, #0
 80112fa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80112fc:	2300      	movs	r3, #0
 80112fe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011300:	e005      	b.n	801130e <pbuf_clen+0x1a>
    ++len;
 8011302:	89fb      	ldrh	r3, [r7, #14]
 8011304:	3301      	adds	r3, #1
 8011306:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801130e:	687b      	ldr	r3, [r7, #4]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d1f6      	bne.n	8011302 <pbuf_clen+0xe>
  }
  return len;
 8011314:	89fb      	ldrh	r3, [r7, #14]
}
 8011316:	4618      	mov	r0, r3
 8011318:	3714      	adds	r7, #20
 801131a:	46bd      	mov	sp, r7
 801131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011320:	4770      	bx	lr
	...

08011324 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011324:	b580      	push	{r7, lr}
 8011326:	b084      	sub	sp, #16
 8011328:	af00      	add	r7, sp, #0
 801132a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d016      	beq.n	8011360 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8011332:	f00b ff0d 	bl	801d150 <sys_arch_protect>
 8011336:	60f8      	str	r0, [r7, #12]
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	7b9b      	ldrb	r3, [r3, #14]
 801133c:	3301      	adds	r3, #1
 801133e:	b2da      	uxtb	r2, r3
 8011340:	687b      	ldr	r3, [r7, #4]
 8011342:	739a      	strb	r2, [r3, #14]
 8011344:	68f8      	ldr	r0, [r7, #12]
 8011346:	f00b ff11 	bl	801d16c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	7b9b      	ldrb	r3, [r3, #14]
 801134e:	2b00      	cmp	r3, #0
 8011350:	d106      	bne.n	8011360 <pbuf_ref+0x3c>
 8011352:	4b05      	ldr	r3, [pc, #20]	@ (8011368 <pbuf_ref+0x44>)
 8011354:	f240 3242 	movw	r2, #834	@ 0x342
 8011358:	4904      	ldr	r1, [pc, #16]	@ (801136c <pbuf_ref+0x48>)
 801135a:	4805      	ldr	r0, [pc, #20]	@ (8011370 <pbuf_ref+0x4c>)
 801135c:	f00c ffbe 	bl	801e2dc <iprintf>
  }
}
 8011360:	bf00      	nop
 8011362:	3710      	adds	r7, #16
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}
 8011368:	080232a8 	.word	0x080232a8
 801136c:	08023488 	.word	0x08023488
 8011370:	08023308 	.word	0x08023308

08011374 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011374:	b580      	push	{r7, lr}
 8011376:	b084      	sub	sp, #16
 8011378:	af00      	add	r7, sp, #0
 801137a:	6078      	str	r0, [r7, #4]
 801137c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	2b00      	cmp	r3, #0
 8011382:	d002      	beq.n	801138a <pbuf_cat+0x16>
 8011384:	683b      	ldr	r3, [r7, #0]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d107      	bne.n	801139a <pbuf_cat+0x26>
 801138a:	4b20      	ldr	r3, [pc, #128]	@ (801140c <pbuf_cat+0x98>)
 801138c:	f240 3259 	movw	r2, #857	@ 0x359
 8011390:	491f      	ldr	r1, [pc, #124]	@ (8011410 <pbuf_cat+0x9c>)
 8011392:	4820      	ldr	r0, [pc, #128]	@ (8011414 <pbuf_cat+0xa0>)
 8011394:	f00c ffa2 	bl	801e2dc <iprintf>
 8011398:	e034      	b.n	8011404 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	60fb      	str	r3, [r7, #12]
 801139e:	e00a      	b.n	80113b6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	891a      	ldrh	r2, [r3, #8]
 80113a4:	683b      	ldr	r3, [r7, #0]
 80113a6:	891b      	ldrh	r3, [r3, #8]
 80113a8:	4413      	add	r3, r2
 80113aa:	b29a      	uxth	r2, r3
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80113b0:	68fb      	ldr	r3, [r7, #12]
 80113b2:	681b      	ldr	r3, [r3, #0]
 80113b4:	60fb      	str	r3, [r7, #12]
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d1f0      	bne.n	80113a0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80113be:	68fb      	ldr	r3, [r7, #12]
 80113c0:	891a      	ldrh	r2, [r3, #8]
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	895b      	ldrh	r3, [r3, #10]
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d006      	beq.n	80113d8 <pbuf_cat+0x64>
 80113ca:	4b10      	ldr	r3, [pc, #64]	@ (801140c <pbuf_cat+0x98>)
 80113cc:	f240 3262 	movw	r2, #866	@ 0x362
 80113d0:	4911      	ldr	r1, [pc, #68]	@ (8011418 <pbuf_cat+0xa4>)
 80113d2:	4810      	ldr	r0, [pc, #64]	@ (8011414 <pbuf_cat+0xa0>)
 80113d4:	f00c ff82 	bl	801e2dc <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d006      	beq.n	80113ee <pbuf_cat+0x7a>
 80113e0:	4b0a      	ldr	r3, [pc, #40]	@ (801140c <pbuf_cat+0x98>)
 80113e2:	f240 3263 	movw	r2, #867	@ 0x363
 80113e6:	490d      	ldr	r1, [pc, #52]	@ (801141c <pbuf_cat+0xa8>)
 80113e8:	480a      	ldr	r0, [pc, #40]	@ (8011414 <pbuf_cat+0xa0>)
 80113ea:	f00c ff77 	bl	801e2dc <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	891a      	ldrh	r2, [r3, #8]
 80113f2:	683b      	ldr	r3, [r7, #0]
 80113f4:	891b      	ldrh	r3, [r3, #8]
 80113f6:	4413      	add	r3, r2
 80113f8:	b29a      	uxth	r2, r3
 80113fa:	68fb      	ldr	r3, [r7, #12]
 80113fc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	683a      	ldr	r2, [r7, #0]
 8011402:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011404:	3710      	adds	r7, #16
 8011406:	46bd      	mov	sp, r7
 8011408:	bd80      	pop	{r7, pc}
 801140a:	bf00      	nop
 801140c:	080232a8 	.word	0x080232a8
 8011410:	0802349c 	.word	0x0802349c
 8011414:	08023308 	.word	0x08023308
 8011418:	080234d4 	.word	0x080234d4
 801141c:	08023504 	.word	0x08023504

08011420 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8011420:	b580      	push	{r7, lr}
 8011422:	b082      	sub	sp, #8
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
 8011428:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801142a:	6839      	ldr	r1, [r7, #0]
 801142c:	6878      	ldr	r0, [r7, #4]
 801142e:	f7ff ffa1 	bl	8011374 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8011432:	6838      	ldr	r0, [r7, #0]
 8011434:	f7ff ff76 	bl	8011324 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8011438:	bf00      	nop
 801143a:	3708      	adds	r7, #8
 801143c:	46bd      	mov	sp, r7
 801143e:	bd80      	pop	{r7, pc}

08011440 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b086      	sub	sp, #24
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801144a:	2300      	movs	r3, #0
 801144c:	617b      	str	r3, [r7, #20]
 801144e:	2300      	movs	r3, #0
 8011450:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011452:	687b      	ldr	r3, [r7, #4]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d008      	beq.n	801146a <pbuf_copy+0x2a>
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	2b00      	cmp	r3, #0
 801145c:	d005      	beq.n	801146a <pbuf_copy+0x2a>
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	891a      	ldrh	r2, [r3, #8]
 8011462:	683b      	ldr	r3, [r7, #0]
 8011464:	891b      	ldrh	r3, [r3, #8]
 8011466:	429a      	cmp	r2, r3
 8011468:	d209      	bcs.n	801147e <pbuf_copy+0x3e>
 801146a:	4b57      	ldr	r3, [pc, #348]	@ (80115c8 <pbuf_copy+0x188>)
 801146c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 8011470:	4956      	ldr	r1, [pc, #344]	@ (80115cc <pbuf_copy+0x18c>)
 8011472:	4857      	ldr	r0, [pc, #348]	@ (80115d0 <pbuf_copy+0x190>)
 8011474:	f00c ff32 	bl	801e2dc <iprintf>
 8011478:	f06f 030f 	mvn.w	r3, #15
 801147c:	e09f      	b.n	80115be <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	895b      	ldrh	r3, [r3, #10]
 8011482:	461a      	mov	r2, r3
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	1ad2      	subs	r2, r2, r3
 8011488:	683b      	ldr	r3, [r7, #0]
 801148a:	895b      	ldrh	r3, [r3, #10]
 801148c:	4619      	mov	r1, r3
 801148e:	693b      	ldr	r3, [r7, #16]
 8011490:	1acb      	subs	r3, r1, r3
 8011492:	429a      	cmp	r2, r3
 8011494:	d306      	bcc.n	80114a4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011496:	683b      	ldr	r3, [r7, #0]
 8011498:	895b      	ldrh	r3, [r3, #10]
 801149a:	461a      	mov	r2, r3
 801149c:	693b      	ldr	r3, [r7, #16]
 801149e:	1ad3      	subs	r3, r2, r3
 80114a0:	60fb      	str	r3, [r7, #12]
 80114a2:	e005      	b.n	80114b0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	895b      	ldrh	r3, [r3, #10]
 80114a8:	461a      	mov	r2, r3
 80114aa:	697b      	ldr	r3, [r7, #20]
 80114ac:	1ad3      	subs	r3, r2, r3
 80114ae:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	685a      	ldr	r2, [r3, #4]
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	18d0      	adds	r0, r2, r3
 80114b8:	683b      	ldr	r3, [r7, #0]
 80114ba:	685a      	ldr	r2, [r3, #4]
 80114bc:	693b      	ldr	r3, [r7, #16]
 80114be:	4413      	add	r3, r2
 80114c0:	68fa      	ldr	r2, [r7, #12]
 80114c2:	4619      	mov	r1, r3
 80114c4:	f00d f8ab 	bl	801e61e <memcpy>
    offset_to += len;
 80114c8:	697a      	ldr	r2, [r7, #20]
 80114ca:	68fb      	ldr	r3, [r7, #12]
 80114cc:	4413      	add	r3, r2
 80114ce:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80114d0:	693a      	ldr	r2, [r7, #16]
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	4413      	add	r3, r2
 80114d6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	895b      	ldrh	r3, [r3, #10]
 80114dc:	461a      	mov	r2, r3
 80114de:	697b      	ldr	r3, [r7, #20]
 80114e0:	4293      	cmp	r3, r2
 80114e2:	d906      	bls.n	80114f2 <pbuf_copy+0xb2>
 80114e4:	4b38      	ldr	r3, [pc, #224]	@ (80115c8 <pbuf_copy+0x188>)
 80114e6:	f240 32d9 	movw	r2, #985	@ 0x3d9
 80114ea:	493a      	ldr	r1, [pc, #232]	@ (80115d4 <pbuf_copy+0x194>)
 80114ec:	4838      	ldr	r0, [pc, #224]	@ (80115d0 <pbuf_copy+0x190>)
 80114ee:	f00c fef5 	bl	801e2dc <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	895b      	ldrh	r3, [r3, #10]
 80114f6:	461a      	mov	r2, r3
 80114f8:	693b      	ldr	r3, [r7, #16]
 80114fa:	4293      	cmp	r3, r2
 80114fc:	d906      	bls.n	801150c <pbuf_copy+0xcc>
 80114fe:	4b32      	ldr	r3, [pc, #200]	@ (80115c8 <pbuf_copy+0x188>)
 8011500:	f240 32da 	movw	r2, #986	@ 0x3da
 8011504:	4934      	ldr	r1, [pc, #208]	@ (80115d8 <pbuf_copy+0x198>)
 8011506:	4832      	ldr	r0, [pc, #200]	@ (80115d0 <pbuf_copy+0x190>)
 8011508:	f00c fee8 	bl	801e2dc <iprintf>
    if (offset_from >= p_from->len) {
 801150c:	683b      	ldr	r3, [r7, #0]
 801150e:	895b      	ldrh	r3, [r3, #10]
 8011510:	461a      	mov	r2, r3
 8011512:	693b      	ldr	r3, [r7, #16]
 8011514:	4293      	cmp	r3, r2
 8011516:	d304      	bcc.n	8011522 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011518:	2300      	movs	r3, #0
 801151a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	681b      	ldr	r3, [r3, #0]
 8011520:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	895b      	ldrh	r3, [r3, #10]
 8011526:	461a      	mov	r2, r3
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	4293      	cmp	r3, r2
 801152c:	d114      	bne.n	8011558 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801152e:	2300      	movs	r3, #0
 8011530:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	681b      	ldr	r3, [r3, #0]
 8011536:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011538:	687b      	ldr	r3, [r7, #4]
 801153a:	2b00      	cmp	r3, #0
 801153c:	d10c      	bne.n	8011558 <pbuf_copy+0x118>
 801153e:	683b      	ldr	r3, [r7, #0]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d009      	beq.n	8011558 <pbuf_copy+0x118>
 8011544:	4b20      	ldr	r3, [pc, #128]	@ (80115c8 <pbuf_copy+0x188>)
 8011546:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801154a:	4924      	ldr	r1, [pc, #144]	@ (80115dc <pbuf_copy+0x19c>)
 801154c:	4820      	ldr	r0, [pc, #128]	@ (80115d0 <pbuf_copy+0x190>)
 801154e:	f00c fec5 	bl	801e2dc <iprintf>
 8011552:	f06f 030f 	mvn.w	r3, #15
 8011556:	e032      	b.n	80115be <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011558:	683b      	ldr	r3, [r7, #0]
 801155a:	2b00      	cmp	r3, #0
 801155c:	d013      	beq.n	8011586 <pbuf_copy+0x146>
 801155e:	683b      	ldr	r3, [r7, #0]
 8011560:	895a      	ldrh	r2, [r3, #10]
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	891b      	ldrh	r3, [r3, #8]
 8011566:	429a      	cmp	r2, r3
 8011568:	d10d      	bne.n	8011586 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	681b      	ldr	r3, [r3, #0]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d009      	beq.n	8011586 <pbuf_copy+0x146>
 8011572:	4b15      	ldr	r3, [pc, #84]	@ (80115c8 <pbuf_copy+0x188>)
 8011574:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8011578:	4919      	ldr	r1, [pc, #100]	@ (80115e0 <pbuf_copy+0x1a0>)
 801157a:	4815      	ldr	r0, [pc, #84]	@ (80115d0 <pbuf_copy+0x190>)
 801157c:	f00c feae 	bl	801e2dc <iprintf>
 8011580:	f06f 0305 	mvn.w	r3, #5
 8011584:	e01b      	b.n	80115be <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d013      	beq.n	80115b4 <pbuf_copy+0x174>
 801158c:	687b      	ldr	r3, [r7, #4]
 801158e:	895a      	ldrh	r2, [r3, #10]
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	891b      	ldrh	r3, [r3, #8]
 8011594:	429a      	cmp	r2, r3
 8011596:	d10d      	bne.n	80115b4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d009      	beq.n	80115b4 <pbuf_copy+0x174>
 80115a0:	4b09      	ldr	r3, [pc, #36]	@ (80115c8 <pbuf_copy+0x188>)
 80115a2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80115a6:	490e      	ldr	r1, [pc, #56]	@ (80115e0 <pbuf_copy+0x1a0>)
 80115a8:	4809      	ldr	r0, [pc, #36]	@ (80115d0 <pbuf_copy+0x190>)
 80115aa:	f00c fe97 	bl	801e2dc <iprintf>
 80115ae:	f06f 0305 	mvn.w	r3, #5
 80115b2:	e004      	b.n	80115be <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80115b4:	683b      	ldr	r3, [r7, #0]
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	f47f af61 	bne.w	801147e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80115bc:	2300      	movs	r3, #0
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3718      	adds	r7, #24
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}
 80115c6:	bf00      	nop
 80115c8:	080232a8 	.word	0x080232a8
 80115cc:	08023550 	.word	0x08023550
 80115d0:	08023308 	.word	0x08023308
 80115d4:	08023580 	.word	0x08023580
 80115d8:	08023598 	.word	0x08023598
 80115dc:	080235b4 	.word	0x080235b4
 80115e0:	080235c4 	.word	0x080235c4

080115e4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b088      	sub	sp, #32
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	60f8      	str	r0, [r7, #12]
 80115ec:	60b9      	str	r1, [r7, #8]
 80115ee:	4611      	mov	r1, r2
 80115f0:	461a      	mov	r2, r3
 80115f2:	460b      	mov	r3, r1
 80115f4:	80fb      	strh	r3, [r7, #6]
 80115f6:	4613      	mov	r3, r2
 80115f8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80115fa:	2300      	movs	r3, #0
 80115fc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80115fe:	2300      	movs	r3, #0
 8011600:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d108      	bne.n	801161a <pbuf_copy_partial+0x36>
 8011608:	4b2b      	ldr	r3, [pc, #172]	@ (80116b8 <pbuf_copy_partial+0xd4>)
 801160a:	f240 420a 	movw	r2, #1034	@ 0x40a
 801160e:	492b      	ldr	r1, [pc, #172]	@ (80116bc <pbuf_copy_partial+0xd8>)
 8011610:	482b      	ldr	r0, [pc, #172]	@ (80116c0 <pbuf_copy_partial+0xdc>)
 8011612:	f00c fe63 	bl	801e2dc <iprintf>
 8011616:	2300      	movs	r3, #0
 8011618:	e04a      	b.n	80116b0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801161a:	68bb      	ldr	r3, [r7, #8]
 801161c:	2b00      	cmp	r3, #0
 801161e:	d108      	bne.n	8011632 <pbuf_copy_partial+0x4e>
 8011620:	4b25      	ldr	r3, [pc, #148]	@ (80116b8 <pbuf_copy_partial+0xd4>)
 8011622:	f240 420b 	movw	r2, #1035	@ 0x40b
 8011626:	4927      	ldr	r1, [pc, #156]	@ (80116c4 <pbuf_copy_partial+0xe0>)
 8011628:	4825      	ldr	r0, [pc, #148]	@ (80116c0 <pbuf_copy_partial+0xdc>)
 801162a:	f00c fe57 	bl	801e2dc <iprintf>
 801162e:	2300      	movs	r3, #0
 8011630:	e03e      	b.n	80116b0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	61fb      	str	r3, [r7, #28]
 8011636:	e034      	b.n	80116a2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011638:	88bb      	ldrh	r3, [r7, #4]
 801163a:	2b00      	cmp	r3, #0
 801163c:	d00a      	beq.n	8011654 <pbuf_copy_partial+0x70>
 801163e:	69fb      	ldr	r3, [r7, #28]
 8011640:	895b      	ldrh	r3, [r3, #10]
 8011642:	88ba      	ldrh	r2, [r7, #4]
 8011644:	429a      	cmp	r2, r3
 8011646:	d305      	bcc.n	8011654 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011648:	69fb      	ldr	r3, [r7, #28]
 801164a:	895b      	ldrh	r3, [r3, #10]
 801164c:	88ba      	ldrh	r2, [r7, #4]
 801164e:	1ad3      	subs	r3, r2, r3
 8011650:	80bb      	strh	r3, [r7, #4]
 8011652:	e023      	b.n	801169c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011654:	69fb      	ldr	r3, [r7, #28]
 8011656:	895a      	ldrh	r2, [r3, #10]
 8011658:	88bb      	ldrh	r3, [r7, #4]
 801165a:	1ad3      	subs	r3, r2, r3
 801165c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801165e:	8b3a      	ldrh	r2, [r7, #24]
 8011660:	88fb      	ldrh	r3, [r7, #6]
 8011662:	429a      	cmp	r2, r3
 8011664:	d901      	bls.n	801166a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011666:	88fb      	ldrh	r3, [r7, #6]
 8011668:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801166a:	8b7b      	ldrh	r3, [r7, #26]
 801166c:	68ba      	ldr	r2, [r7, #8]
 801166e:	18d0      	adds	r0, r2, r3
 8011670:	69fb      	ldr	r3, [r7, #28]
 8011672:	685a      	ldr	r2, [r3, #4]
 8011674:	88bb      	ldrh	r3, [r7, #4]
 8011676:	4413      	add	r3, r2
 8011678:	8b3a      	ldrh	r2, [r7, #24]
 801167a:	4619      	mov	r1, r3
 801167c:	f00c ffcf 	bl	801e61e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8011680:	8afa      	ldrh	r2, [r7, #22]
 8011682:	8b3b      	ldrh	r3, [r7, #24]
 8011684:	4413      	add	r3, r2
 8011686:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8011688:	8b7a      	ldrh	r2, [r7, #26]
 801168a:	8b3b      	ldrh	r3, [r7, #24]
 801168c:	4413      	add	r3, r2
 801168e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8011690:	88fa      	ldrh	r2, [r7, #6]
 8011692:	8b3b      	ldrh	r3, [r7, #24]
 8011694:	1ad3      	subs	r3, r2, r3
 8011696:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011698:	2300      	movs	r3, #0
 801169a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801169c:	69fb      	ldr	r3, [r7, #28]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	61fb      	str	r3, [r7, #28]
 80116a2:	88fb      	ldrh	r3, [r7, #6]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d002      	beq.n	80116ae <pbuf_copy_partial+0xca>
 80116a8:	69fb      	ldr	r3, [r7, #28]
 80116aa:	2b00      	cmp	r3, #0
 80116ac:	d1c4      	bne.n	8011638 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80116ae:	8afb      	ldrh	r3, [r7, #22]
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3720      	adds	r7, #32
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}
 80116b8:	080232a8 	.word	0x080232a8
 80116bc:	080235f0 	.word	0x080235f0
 80116c0:	08023308 	.word	0x08023308
 80116c4:	08023610 	.word	0x08023610

080116c8 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80116c8:	b480      	push	{r7}
 80116ca:	b087      	sub	sp, #28
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	60f8      	str	r0, [r7, #12]
 80116d0:	460b      	mov	r3, r1
 80116d2:	607a      	str	r2, [r7, #4]
 80116d4:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 80116d6:	897b      	ldrh	r3, [r7, #10]
 80116d8:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 80116de:	e007      	b.n	80116f0 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 80116e0:	693b      	ldr	r3, [r7, #16]
 80116e2:	895b      	ldrh	r3, [r3, #10]
 80116e4:	8afa      	ldrh	r2, [r7, #22]
 80116e6:	1ad3      	subs	r3, r2, r3
 80116e8:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 80116ea:	693b      	ldr	r3, [r7, #16]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 80116f0:	693b      	ldr	r3, [r7, #16]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d004      	beq.n	8011700 <pbuf_skip_const+0x38>
 80116f6:	693b      	ldr	r3, [r7, #16]
 80116f8:	895b      	ldrh	r3, [r3, #10]
 80116fa:	8afa      	ldrh	r2, [r7, #22]
 80116fc:	429a      	cmp	r2, r3
 80116fe:	d2ef      	bcs.n	80116e0 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	2b00      	cmp	r3, #0
 8011704:	d002      	beq.n	801170c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	8afa      	ldrh	r2, [r7, #22]
 801170a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 801170c:	693b      	ldr	r3, [r7, #16]
}
 801170e:	4618      	mov	r0, r3
 8011710:	371c      	adds	r7, #28
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr

0801171a <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 801171a:	b580      	push	{r7, lr}
 801171c:	b086      	sub	sp, #24
 801171e:	af00      	add	r7, sp, #0
 8011720:	60f8      	str	r0, [r7, #12]
 8011722:	460b      	mov	r3, r1
 8011724:	607a      	str	r2, [r7, #4]
 8011726:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8011728:	897b      	ldrh	r3, [r7, #10]
 801172a:	687a      	ldr	r2, [r7, #4]
 801172c:	4619      	mov	r1, r3
 801172e:	68f8      	ldr	r0, [r7, #12]
 8011730:	f7ff ffca 	bl	80116c8 <pbuf_skip_const>
 8011734:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8011736:	697b      	ldr	r3, [r7, #20]
}
 8011738:	4618      	mov	r0, r3
 801173a:	3718      	adds	r7, #24
 801173c:	46bd      	mov	sp, r7
 801173e:	bd80      	pop	{r7, pc}

08011740 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b088      	sub	sp, #32
 8011744:	af00      	add	r7, sp, #0
 8011746:	60f8      	str	r0, [r7, #12]
 8011748:	60b9      	str	r1, [r7, #8]
 801174a:	4613      	mov	r3, r2
 801174c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801174e:	88fb      	ldrh	r3, [r7, #6]
 8011750:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8011752:	2300      	movs	r3, #0
 8011754:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	2b00      	cmp	r3, #0
 801175a:	d109      	bne.n	8011770 <pbuf_take+0x30>
 801175c:	4b3a      	ldr	r3, [pc, #232]	@ (8011848 <pbuf_take+0x108>)
 801175e:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8011762:	493a      	ldr	r1, [pc, #232]	@ (801184c <pbuf_take+0x10c>)
 8011764:	483a      	ldr	r0, [pc, #232]	@ (8011850 <pbuf_take+0x110>)
 8011766:	f00c fdb9 	bl	801e2dc <iprintf>
 801176a:	f06f 030f 	mvn.w	r3, #15
 801176e:	e067      	b.n	8011840 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d109      	bne.n	801178a <pbuf_take+0x4a>
 8011776:	4b34      	ldr	r3, [pc, #208]	@ (8011848 <pbuf_take+0x108>)
 8011778:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 801177c:	4935      	ldr	r1, [pc, #212]	@ (8011854 <pbuf_take+0x114>)
 801177e:	4834      	ldr	r0, [pc, #208]	@ (8011850 <pbuf_take+0x110>)
 8011780:	f00c fdac 	bl	801e2dc <iprintf>
 8011784:	f06f 030f 	mvn.w	r3, #15
 8011788:	e05a      	b.n	8011840 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801178a:	68fb      	ldr	r3, [r7, #12]
 801178c:	891b      	ldrh	r3, [r3, #8]
 801178e:	88fa      	ldrh	r2, [r7, #6]
 8011790:	429a      	cmp	r2, r3
 8011792:	d909      	bls.n	80117a8 <pbuf_take+0x68>
 8011794:	4b2c      	ldr	r3, [pc, #176]	@ (8011848 <pbuf_take+0x108>)
 8011796:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 801179a:	492f      	ldr	r1, [pc, #188]	@ (8011858 <pbuf_take+0x118>)
 801179c:	482c      	ldr	r0, [pc, #176]	@ (8011850 <pbuf_take+0x110>)
 801179e:	f00c fd9d 	bl	801e2dc <iprintf>
 80117a2:	f04f 33ff 	mov.w	r3, #4294967295
 80117a6:	e04b      	b.n	8011840 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d007      	beq.n	80117be <pbuf_take+0x7e>
 80117ae:	68bb      	ldr	r3, [r7, #8]
 80117b0:	2b00      	cmp	r3, #0
 80117b2:	d004      	beq.n	80117be <pbuf_take+0x7e>
 80117b4:	68fb      	ldr	r3, [r7, #12]
 80117b6:	891b      	ldrh	r3, [r3, #8]
 80117b8:	88fa      	ldrh	r2, [r7, #6]
 80117ba:	429a      	cmp	r2, r3
 80117bc:	d902      	bls.n	80117c4 <pbuf_take+0x84>
    return ERR_ARG;
 80117be:	f06f 030f 	mvn.w	r3, #15
 80117c2:	e03d      	b.n	8011840 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80117c4:	68fb      	ldr	r3, [r7, #12]
 80117c6:	61fb      	str	r3, [r7, #28]
 80117c8:	e028      	b.n	801181c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80117ca:	69fb      	ldr	r3, [r7, #28]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d106      	bne.n	80117de <pbuf_take+0x9e>
 80117d0:	4b1d      	ldr	r3, [pc, #116]	@ (8011848 <pbuf_take+0x108>)
 80117d2:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 80117d6:	4921      	ldr	r1, [pc, #132]	@ (801185c <pbuf_take+0x11c>)
 80117d8:	481d      	ldr	r0, [pc, #116]	@ (8011850 <pbuf_take+0x110>)
 80117da:	f00c fd7f 	bl	801e2dc <iprintf>
    buf_copy_len = total_copy_len;
 80117de:	697b      	ldr	r3, [r7, #20]
 80117e0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 80117e2:	69fb      	ldr	r3, [r7, #28]
 80117e4:	895b      	ldrh	r3, [r3, #10]
 80117e6:	461a      	mov	r2, r3
 80117e8:	69bb      	ldr	r3, [r7, #24]
 80117ea:	4293      	cmp	r3, r2
 80117ec:	d902      	bls.n	80117f4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 80117ee:	69fb      	ldr	r3, [r7, #28]
 80117f0:	895b      	ldrh	r3, [r3, #10]
 80117f2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 80117f4:	69fb      	ldr	r3, [r7, #28]
 80117f6:	6858      	ldr	r0, [r3, #4]
 80117f8:	68ba      	ldr	r2, [r7, #8]
 80117fa:	693b      	ldr	r3, [r7, #16]
 80117fc:	4413      	add	r3, r2
 80117fe:	69ba      	ldr	r2, [r7, #24]
 8011800:	4619      	mov	r1, r3
 8011802:	f00c ff0c 	bl	801e61e <memcpy>
    total_copy_len -= buf_copy_len;
 8011806:	697a      	ldr	r2, [r7, #20]
 8011808:	69bb      	ldr	r3, [r7, #24]
 801180a:	1ad3      	subs	r3, r2, r3
 801180c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801180e:	693a      	ldr	r2, [r7, #16]
 8011810:	69bb      	ldr	r3, [r7, #24]
 8011812:	4413      	add	r3, r2
 8011814:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011816:	69fb      	ldr	r3, [r7, #28]
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	61fb      	str	r3, [r7, #28]
 801181c:	697b      	ldr	r3, [r7, #20]
 801181e:	2b00      	cmp	r3, #0
 8011820:	d1d3      	bne.n	80117ca <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	2b00      	cmp	r3, #0
 8011826:	d103      	bne.n	8011830 <pbuf_take+0xf0>
 8011828:	88fb      	ldrh	r3, [r7, #6]
 801182a:	693a      	ldr	r2, [r7, #16]
 801182c:	429a      	cmp	r2, r3
 801182e:	d006      	beq.n	801183e <pbuf_take+0xfe>
 8011830:	4b05      	ldr	r3, [pc, #20]	@ (8011848 <pbuf_take+0x108>)
 8011832:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8011836:	490a      	ldr	r1, [pc, #40]	@ (8011860 <pbuf_take+0x120>)
 8011838:	4805      	ldr	r0, [pc, #20]	@ (8011850 <pbuf_take+0x110>)
 801183a:	f00c fd4f 	bl	801e2dc <iprintf>
  return ERR_OK;
 801183e:	2300      	movs	r3, #0
}
 8011840:	4618      	mov	r0, r3
 8011842:	3720      	adds	r7, #32
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}
 8011848:	080232a8 	.word	0x080232a8
 801184c:	08023680 	.word	0x08023680
 8011850:	08023308 	.word	0x08023308
 8011854:	08023698 	.word	0x08023698
 8011858:	080236b4 	.word	0x080236b4
 801185c:	080236d4 	.word	0x080236d4
 8011860:	080236ec 	.word	0x080236ec

08011864 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8011864:	b580      	push	{r7, lr}
 8011866:	b088      	sub	sp, #32
 8011868:	af00      	add	r7, sp, #0
 801186a:	60f8      	str	r0, [r7, #12]
 801186c:	60b9      	str	r1, [r7, #8]
 801186e:	4611      	mov	r1, r2
 8011870:	461a      	mov	r2, r3
 8011872:	460b      	mov	r3, r1
 8011874:	80fb      	strh	r3, [r7, #6]
 8011876:	4613      	mov	r3, r2
 8011878:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 801187a:	f107 0210 	add.w	r2, r7, #16
 801187e:	88bb      	ldrh	r3, [r7, #4]
 8011880:	4619      	mov	r1, r3
 8011882:	68f8      	ldr	r0, [r7, #12]
 8011884:	f7ff ff49 	bl	801171a <pbuf_skip>
 8011888:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 801188a:	69fb      	ldr	r3, [r7, #28]
 801188c:	2b00      	cmp	r3, #0
 801188e:	d047      	beq.n	8011920 <pbuf_take_at+0xbc>
 8011890:	69fb      	ldr	r3, [r7, #28]
 8011892:	891b      	ldrh	r3, [r3, #8]
 8011894:	461a      	mov	r2, r3
 8011896:	8a3b      	ldrh	r3, [r7, #16]
 8011898:	4619      	mov	r1, r3
 801189a:	88fb      	ldrh	r3, [r7, #6]
 801189c:	440b      	add	r3, r1
 801189e:	429a      	cmp	r2, r3
 80118a0:	db3e      	blt.n	8011920 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 80118a2:	88fb      	ldrh	r3, [r7, #6]
 80118a4:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 80118a6:	68bb      	ldr	r3, [r7, #8]
 80118a8:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 80118aa:	69fb      	ldr	r3, [r7, #28]
 80118ac:	895a      	ldrh	r2, [r3, #10]
 80118ae:	8a3b      	ldrh	r3, [r7, #16]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d806      	bhi.n	80118c2 <pbuf_take_at+0x5e>
 80118b4:	4b1d      	ldr	r3, [pc, #116]	@ (801192c <pbuf_take_at+0xc8>)
 80118b6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80118ba:	491d      	ldr	r1, [pc, #116]	@ (8011930 <pbuf_take_at+0xcc>)
 80118bc:	481d      	ldr	r0, [pc, #116]	@ (8011934 <pbuf_take_at+0xd0>)
 80118be:	f00c fd0d 	bl	801e2dc <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 80118c2:	69fb      	ldr	r3, [r7, #28]
 80118c4:	895b      	ldrh	r3, [r3, #10]
 80118c6:	461a      	mov	r2, r3
 80118c8:	8a3b      	ldrh	r3, [r7, #16]
 80118ca:	1ad2      	subs	r2, r2, r3
 80118cc:	88fb      	ldrh	r3, [r7, #6]
 80118ce:	429a      	cmp	r2, r3
 80118d0:	da05      	bge.n	80118de <pbuf_take_at+0x7a>
 80118d2:	69fb      	ldr	r3, [r7, #28]
 80118d4:	895a      	ldrh	r2, [r3, #10]
 80118d6:	8a3b      	ldrh	r3, [r7, #16]
 80118d8:	1ad3      	subs	r3, r2, r3
 80118da:	b29b      	uxth	r3, r3
 80118dc:	e000      	b.n	80118e0 <pbuf_take_at+0x7c>
 80118de:	88fb      	ldrh	r3, [r7, #6]
 80118e0:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 80118e2:	69fb      	ldr	r3, [r7, #28]
 80118e4:	685b      	ldr	r3, [r3, #4]
 80118e6:	8a3a      	ldrh	r2, [r7, #16]
 80118e8:	4413      	add	r3, r2
 80118ea:	8a7a      	ldrh	r2, [r7, #18]
 80118ec:	68b9      	ldr	r1, [r7, #8]
 80118ee:	4618      	mov	r0, r3
 80118f0:	f00c fe95 	bl	801e61e <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 80118f4:	8b7a      	ldrh	r2, [r7, #26]
 80118f6:	8a7b      	ldrh	r3, [r7, #18]
 80118f8:	1ad3      	subs	r3, r2, r3
 80118fa:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 80118fc:	8a7b      	ldrh	r3, [r7, #18]
 80118fe:	697a      	ldr	r2, [r7, #20]
 8011900:	4413      	add	r3, r2
 8011902:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8011904:	8b7b      	ldrh	r3, [r7, #26]
 8011906:	2b00      	cmp	r3, #0
 8011908:	d008      	beq.n	801191c <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801190a:	69fb      	ldr	r3, [r7, #28]
 801190c:	681b      	ldr	r3, [r3, #0]
 801190e:	8b7a      	ldrh	r2, [r7, #26]
 8011910:	6979      	ldr	r1, [r7, #20]
 8011912:	4618      	mov	r0, r3
 8011914:	f7ff ff14 	bl	8011740 <pbuf_take>
 8011918:	4603      	mov	r3, r0
 801191a:	e003      	b.n	8011924 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 801191c:	2300      	movs	r3, #0
 801191e:	e001      	b.n	8011924 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8011920:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011924:	4618      	mov	r0, r3
 8011926:	3720      	adds	r7, #32
 8011928:	46bd      	mov	sp, r7
 801192a:	bd80      	pop	{r7, pc}
 801192c:	080232a8 	.word	0x080232a8
 8011930:	08023704 	.word	0x08023704
 8011934:	08023308 	.word	0x08023308

08011938 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b084      	sub	sp, #16
 801193c:	af00      	add	r7, sp, #0
 801193e:	4603      	mov	r3, r0
 8011940:	603a      	str	r2, [r7, #0]
 8011942:	71fb      	strb	r3, [r7, #7]
 8011944:	460b      	mov	r3, r1
 8011946:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011948:	683b      	ldr	r3, [r7, #0]
 801194a:	8919      	ldrh	r1, [r3, #8]
 801194c:	88ba      	ldrh	r2, [r7, #4]
 801194e:	79fb      	ldrb	r3, [r7, #7]
 8011950:	4618      	mov	r0, r3
 8011952:	f7ff f95d 	bl	8010c10 <pbuf_alloc>
 8011956:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d101      	bne.n	8011962 <pbuf_clone+0x2a>
    return NULL;
 801195e:	2300      	movs	r3, #0
 8011960:	e011      	b.n	8011986 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011962:	6839      	ldr	r1, [r7, #0]
 8011964:	68f8      	ldr	r0, [r7, #12]
 8011966:	f7ff fd6b 	bl	8011440 <pbuf_copy>
 801196a:	4603      	mov	r3, r0
 801196c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801196e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d006      	beq.n	8011984 <pbuf_clone+0x4c>
 8011976:	4b06      	ldr	r3, [pc, #24]	@ (8011990 <pbuf_clone+0x58>)
 8011978:	f240 5224 	movw	r2, #1316	@ 0x524
 801197c:	4905      	ldr	r1, [pc, #20]	@ (8011994 <pbuf_clone+0x5c>)
 801197e:	4806      	ldr	r0, [pc, #24]	@ (8011998 <pbuf_clone+0x60>)
 8011980:	f00c fcac 	bl	801e2dc <iprintf>
  return q;
 8011984:	68fb      	ldr	r3, [r7, #12]
}
 8011986:	4618      	mov	r0, r3
 8011988:	3710      	adds	r7, #16
 801198a:	46bd      	mov	sp, r7
 801198c:	bd80      	pop	{r7, pc}
 801198e:	bf00      	nop
 8011990:	080232a8 	.word	0x080232a8
 8011994:	0802371c 	.word	0x0802371c
 8011998:	08023308 	.word	0x08023308

0801199c <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 801199c:	b580      	push	{r7, lr}
 801199e:	b084      	sub	sp, #16
 80119a0:	af00      	add	r7, sp, #0
 80119a2:	6078      	str	r0, [r7, #4]
 80119a4:	460b      	mov	r3, r1
 80119a6:	807b      	strh	r3, [r7, #2]
 80119a8:	4613      	mov	r3, r2
 80119aa:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 80119ac:	f107 020a 	add.w	r2, r7, #10
 80119b0:	887b      	ldrh	r3, [r7, #2]
 80119b2:	4619      	mov	r1, r3
 80119b4:	6878      	ldr	r0, [r7, #4]
 80119b6:	f7ff feb0 	bl	801171a <pbuf_skip>
 80119ba:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d00a      	beq.n	80119d8 <pbuf_put_at+0x3c>
 80119c2:	68fb      	ldr	r3, [r7, #12]
 80119c4:	895a      	ldrh	r2, [r3, #10]
 80119c6:	897b      	ldrh	r3, [r7, #10]
 80119c8:	429a      	cmp	r2, r3
 80119ca:	d905      	bls.n	80119d8 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 80119cc:	68fb      	ldr	r3, [r7, #12]
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	897a      	ldrh	r2, [r7, #10]
 80119d2:	4413      	add	r3, r2
 80119d4:	787a      	ldrb	r2, [r7, #1]
 80119d6:	701a      	strb	r2, [r3, #0]
  }
}
 80119d8:	bf00      	nop
 80119da:	3710      	adds	r7, #16
 80119dc:	46bd      	mov	sp, r7
 80119de:	bd80      	pop	{r7, pc}

080119e0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80119e0:	b580      	push	{r7, lr}
 80119e2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80119e4:	f00b fbd2 	bl	801d18c <rand>
 80119e8:	4603      	mov	r3, r0
 80119ea:	b29b      	uxth	r3, r3
 80119ec:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80119f0:	b29b      	uxth	r3, r3
 80119f2:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 80119f6:	b29a      	uxth	r2, r3
 80119f8:	4b01      	ldr	r3, [pc, #4]	@ (8011a00 <tcp_init+0x20>)
 80119fa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80119fc:	bf00      	nop
 80119fe:	bd80      	pop	{r7, pc}
 8011a00:	20000044 	.word	0x20000044

08011a04 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011a04:	b580      	push	{r7, lr}
 8011a06:	b082      	sub	sp, #8
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	7d1b      	ldrb	r3, [r3, #20]
 8011a10:	2b01      	cmp	r3, #1
 8011a12:	d105      	bne.n	8011a20 <tcp_free+0x1c>
 8011a14:	4b06      	ldr	r3, [pc, #24]	@ (8011a30 <tcp_free+0x2c>)
 8011a16:	22d4      	movs	r2, #212	@ 0xd4
 8011a18:	4906      	ldr	r1, [pc, #24]	@ (8011a34 <tcp_free+0x30>)
 8011a1a:	4807      	ldr	r0, [pc, #28]	@ (8011a38 <tcp_free+0x34>)
 8011a1c:	f00c fc5e 	bl	801e2dc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011a20:	6879      	ldr	r1, [r7, #4]
 8011a22:	2001      	movs	r0, #1
 8011a24:	f7fe fd28 	bl	8010478 <memp_free>
}
 8011a28:	bf00      	nop
 8011a2a:	3708      	adds	r7, #8
 8011a2c:	46bd      	mov	sp, r7
 8011a2e:	bd80      	pop	{r7, pc}
 8011a30:	080237a8 	.word	0x080237a8
 8011a34:	080237d8 	.word	0x080237d8
 8011a38:	080237ec 	.word	0x080237ec

08011a3c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b082      	sub	sp, #8
 8011a40:	af00      	add	r7, sp, #0
 8011a42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	7d1b      	ldrb	r3, [r3, #20]
 8011a48:	2b01      	cmp	r3, #1
 8011a4a:	d105      	bne.n	8011a58 <tcp_free_listen+0x1c>
 8011a4c:	4b06      	ldr	r3, [pc, #24]	@ (8011a68 <tcp_free_listen+0x2c>)
 8011a4e:	22df      	movs	r2, #223	@ 0xdf
 8011a50:	4906      	ldr	r1, [pc, #24]	@ (8011a6c <tcp_free_listen+0x30>)
 8011a52:	4807      	ldr	r0, [pc, #28]	@ (8011a70 <tcp_free_listen+0x34>)
 8011a54:	f00c fc42 	bl	801e2dc <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011a58:	6879      	ldr	r1, [r7, #4]
 8011a5a:	2002      	movs	r0, #2
 8011a5c:	f7fe fd0c 	bl	8010478 <memp_free>
}
 8011a60:	bf00      	nop
 8011a62:	3708      	adds	r7, #8
 8011a64:	46bd      	mov	sp, r7
 8011a66:	bd80      	pop	{r7, pc}
 8011a68:	080237a8 	.word	0x080237a8
 8011a6c:	08023814 	.word	0x08023814
 8011a70:	080237ec 	.word	0x080237ec

08011a74 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011a74:	b580      	push	{r7, lr}
 8011a76:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011a78:	f001 f85e 	bl	8012b38 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011a7c:	4b07      	ldr	r3, [pc, #28]	@ (8011a9c <tcp_tmr+0x28>)
 8011a7e:	781b      	ldrb	r3, [r3, #0]
 8011a80:	3301      	adds	r3, #1
 8011a82:	b2da      	uxtb	r2, r3
 8011a84:	4b05      	ldr	r3, [pc, #20]	@ (8011a9c <tcp_tmr+0x28>)
 8011a86:	701a      	strb	r2, [r3, #0]
 8011a88:	4b04      	ldr	r3, [pc, #16]	@ (8011a9c <tcp_tmr+0x28>)
 8011a8a:	781b      	ldrb	r3, [r3, #0]
 8011a8c:	f003 0301 	and.w	r3, r3, #1
 8011a90:	2b00      	cmp	r3, #0
 8011a92:	d001      	beq.n	8011a98 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011a94:	f000 fd0e 	bl	80124b4 <tcp_slowtmr>
  }
}
 8011a98:	bf00      	nop
 8011a9a:	bd80      	pop	{r7, pc}
 8011a9c:	20012685 	.word	0x20012685

08011aa0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b084      	sub	sp, #16
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
 8011aa8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011aaa:	683b      	ldr	r3, [r7, #0]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d105      	bne.n	8011abc <tcp_remove_listener+0x1c>
 8011ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8011ae8 <tcp_remove_listener+0x48>)
 8011ab2:	22ff      	movs	r2, #255	@ 0xff
 8011ab4:	490d      	ldr	r1, [pc, #52]	@ (8011aec <tcp_remove_listener+0x4c>)
 8011ab6:	480e      	ldr	r0, [pc, #56]	@ (8011af0 <tcp_remove_listener+0x50>)
 8011ab8:	f00c fc10 	bl	801e2dc <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	60fb      	str	r3, [r7, #12]
 8011ac0:	e00a      	b.n	8011ad8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011ac6:	683a      	ldr	r2, [r7, #0]
 8011ac8:	429a      	cmp	r2, r3
 8011aca:	d102      	bne.n	8011ad2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011ad2:	68fb      	ldr	r3, [r7, #12]
 8011ad4:	68db      	ldr	r3, [r3, #12]
 8011ad6:	60fb      	str	r3, [r7, #12]
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d1f1      	bne.n	8011ac2 <tcp_remove_listener+0x22>
    }
  }
}
 8011ade:	bf00      	nop
 8011ae0:	bf00      	nop
 8011ae2:	3710      	adds	r7, #16
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}
 8011ae8:	080237a8 	.word	0x080237a8
 8011aec:	08023830 	.word	0x08023830
 8011af0:	080237ec 	.word	0x080237ec

08011af4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011af4:	b580      	push	{r7, lr}
 8011af6:	b084      	sub	sp, #16
 8011af8:	af00      	add	r7, sp, #0
 8011afa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	2b00      	cmp	r3, #0
 8011b00:	d106      	bne.n	8011b10 <tcp_listen_closed+0x1c>
 8011b02:	4b14      	ldr	r3, [pc, #80]	@ (8011b54 <tcp_listen_closed+0x60>)
 8011b04:	f240 1211 	movw	r2, #273	@ 0x111
 8011b08:	4913      	ldr	r1, [pc, #76]	@ (8011b58 <tcp_listen_closed+0x64>)
 8011b0a:	4814      	ldr	r0, [pc, #80]	@ (8011b5c <tcp_listen_closed+0x68>)
 8011b0c:	f00c fbe6 	bl	801e2dc <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	7d1b      	ldrb	r3, [r3, #20]
 8011b14:	2b01      	cmp	r3, #1
 8011b16:	d006      	beq.n	8011b26 <tcp_listen_closed+0x32>
 8011b18:	4b0e      	ldr	r3, [pc, #56]	@ (8011b54 <tcp_listen_closed+0x60>)
 8011b1a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8011b1e:	4910      	ldr	r1, [pc, #64]	@ (8011b60 <tcp_listen_closed+0x6c>)
 8011b20:	480e      	ldr	r0, [pc, #56]	@ (8011b5c <tcp_listen_closed+0x68>)
 8011b22:	f00c fbdb 	bl	801e2dc <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011b26:	2301      	movs	r3, #1
 8011b28:	60fb      	str	r3, [r7, #12]
 8011b2a:	e00b      	b.n	8011b44 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011b2c:	4a0d      	ldr	r2, [pc, #52]	@ (8011b64 <tcp_listen_closed+0x70>)
 8011b2e:	68fb      	ldr	r3, [r7, #12]
 8011b30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	6879      	ldr	r1, [r7, #4]
 8011b38:	4618      	mov	r0, r3
 8011b3a:	f7ff ffb1 	bl	8011aa0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	3301      	adds	r3, #1
 8011b42:	60fb      	str	r3, [r7, #12]
 8011b44:	68fb      	ldr	r3, [r7, #12]
 8011b46:	2b03      	cmp	r3, #3
 8011b48:	d9f0      	bls.n	8011b2c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011b4a:	bf00      	nop
 8011b4c:	bf00      	nop
 8011b4e:	3710      	adds	r7, #16
 8011b50:	46bd      	mov	sp, r7
 8011b52:	bd80      	pop	{r7, pc}
 8011b54:	080237a8 	.word	0x080237a8
 8011b58:	08023858 	.word	0x08023858
 8011b5c:	080237ec 	.word	0x080237ec
 8011b60:	08023864 	.word	0x08023864
 8011b64:	08025d30 	.word	0x08025d30

08011b68 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011b68:	b5b0      	push	{r4, r5, r7, lr}
 8011b6a:	b088      	sub	sp, #32
 8011b6c:	af04      	add	r7, sp, #16
 8011b6e:	6078      	str	r0, [r7, #4]
 8011b70:	460b      	mov	r3, r1
 8011b72:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d106      	bne.n	8011b88 <tcp_close_shutdown+0x20>
 8011b7a:	4b63      	ldr	r3, [pc, #396]	@ (8011d08 <tcp_close_shutdown+0x1a0>)
 8011b7c:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 8011b80:	4962      	ldr	r1, [pc, #392]	@ (8011d0c <tcp_close_shutdown+0x1a4>)
 8011b82:	4863      	ldr	r0, [pc, #396]	@ (8011d10 <tcp_close_shutdown+0x1a8>)
 8011b84:	f00c fbaa 	bl	801e2dc <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011b88:	78fb      	ldrb	r3, [r7, #3]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d066      	beq.n	8011c5c <tcp_close_shutdown+0xf4>
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	7d1b      	ldrb	r3, [r3, #20]
 8011b92:	2b04      	cmp	r3, #4
 8011b94:	d003      	beq.n	8011b9e <tcp_close_shutdown+0x36>
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	7d1b      	ldrb	r3, [r3, #20]
 8011b9a:	2b07      	cmp	r3, #7
 8011b9c:	d15e      	bne.n	8011c5c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d104      	bne.n	8011bb0 <tcp_close_shutdown+0x48>
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011baa:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011bae:	d055      	beq.n	8011c5c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	8b5b      	ldrh	r3, [r3, #26]
 8011bb4:	f003 0310 	and.w	r3, r3, #16
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d106      	bne.n	8011bca <tcp_close_shutdown+0x62>
 8011bbc:	4b52      	ldr	r3, [pc, #328]	@ (8011d08 <tcp_close_shutdown+0x1a0>)
 8011bbe:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 8011bc2:	4954      	ldr	r1, [pc, #336]	@ (8011d14 <tcp_close_shutdown+0x1ac>)
 8011bc4:	4852      	ldr	r0, [pc, #328]	@ (8011d10 <tcp_close_shutdown+0x1a8>)
 8011bc6:	f00c fb89 	bl	801e2dc <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011bca:	687b      	ldr	r3, [r7, #4]
 8011bcc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011bd2:	687d      	ldr	r5, [r7, #4]
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	3304      	adds	r3, #4
 8011bd8:	687a      	ldr	r2, [r7, #4]
 8011bda:	8ad2      	ldrh	r2, [r2, #22]
 8011bdc:	6879      	ldr	r1, [r7, #4]
 8011bde:	8b09      	ldrh	r1, [r1, #24]
 8011be0:	9102      	str	r1, [sp, #8]
 8011be2:	9201      	str	r2, [sp, #4]
 8011be4:	9300      	str	r3, [sp, #0]
 8011be6:	462b      	mov	r3, r5
 8011be8:	4622      	mov	r2, r4
 8011bea:	4601      	mov	r1, r0
 8011bec:	6878      	ldr	r0, [r7, #4]
 8011bee:	f005 fd6d 	bl	80176cc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011bf2:	6878      	ldr	r0, [r7, #4]
 8011bf4:	f001 fb50 	bl	8013298 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011bf8:	4b47      	ldr	r3, [pc, #284]	@ (8011d18 <tcp_close_shutdown+0x1b0>)
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	687a      	ldr	r2, [r7, #4]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d105      	bne.n	8011c0e <tcp_close_shutdown+0xa6>
 8011c02:	4b45      	ldr	r3, [pc, #276]	@ (8011d18 <tcp_close_shutdown+0x1b0>)
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	68db      	ldr	r3, [r3, #12]
 8011c08:	4a43      	ldr	r2, [pc, #268]	@ (8011d18 <tcp_close_shutdown+0x1b0>)
 8011c0a:	6013      	str	r3, [r2, #0]
 8011c0c:	e013      	b.n	8011c36 <tcp_close_shutdown+0xce>
 8011c0e:	4b42      	ldr	r3, [pc, #264]	@ (8011d18 <tcp_close_shutdown+0x1b0>)
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	60fb      	str	r3, [r7, #12]
 8011c14:	e00c      	b.n	8011c30 <tcp_close_shutdown+0xc8>
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	68db      	ldr	r3, [r3, #12]
 8011c1a:	687a      	ldr	r2, [r7, #4]
 8011c1c:	429a      	cmp	r2, r3
 8011c1e:	d104      	bne.n	8011c2a <tcp_close_shutdown+0xc2>
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	68da      	ldr	r2, [r3, #12]
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	60da      	str	r2, [r3, #12]
 8011c28:	e005      	b.n	8011c36 <tcp_close_shutdown+0xce>
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	68db      	ldr	r3, [r3, #12]
 8011c2e:	60fb      	str	r3, [r7, #12]
 8011c30:	68fb      	ldr	r3, [r7, #12]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d1ef      	bne.n	8011c16 <tcp_close_shutdown+0xae>
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	2200      	movs	r2, #0
 8011c3a:	60da      	str	r2, [r3, #12]
 8011c3c:	4b37      	ldr	r3, [pc, #220]	@ (8011d1c <tcp_close_shutdown+0x1b4>)
 8011c3e:	2201      	movs	r2, #1
 8011c40:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011c42:	4b37      	ldr	r3, [pc, #220]	@ (8011d20 <tcp_close_shutdown+0x1b8>)
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	687a      	ldr	r2, [r7, #4]
 8011c48:	429a      	cmp	r2, r3
 8011c4a:	d102      	bne.n	8011c52 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011c4c:	f003 ffe4 	bl	8015c18 <tcp_trigger_input_pcb_close>
 8011c50:	e002      	b.n	8011c58 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f7ff fed6 	bl	8011a04 <tcp_free>
      }
      return ERR_OK;
 8011c58:	2300      	movs	r3, #0
 8011c5a:	e050      	b.n	8011cfe <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	7d1b      	ldrb	r3, [r3, #20]
 8011c60:	2b02      	cmp	r3, #2
 8011c62:	d03b      	beq.n	8011cdc <tcp_close_shutdown+0x174>
 8011c64:	2b02      	cmp	r3, #2
 8011c66:	dc44      	bgt.n	8011cf2 <tcp_close_shutdown+0x18a>
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d002      	beq.n	8011c72 <tcp_close_shutdown+0x10a>
 8011c6c:	2b01      	cmp	r3, #1
 8011c6e:	d02a      	beq.n	8011cc6 <tcp_close_shutdown+0x15e>
 8011c70:	e03f      	b.n	8011cf2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	8adb      	ldrh	r3, [r3, #22]
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d021      	beq.n	8011cbe <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8011d24 <tcp_close_shutdown+0x1bc>)
 8011c7c:	681b      	ldr	r3, [r3, #0]
 8011c7e:	687a      	ldr	r2, [r7, #4]
 8011c80:	429a      	cmp	r2, r3
 8011c82:	d105      	bne.n	8011c90 <tcp_close_shutdown+0x128>
 8011c84:	4b27      	ldr	r3, [pc, #156]	@ (8011d24 <tcp_close_shutdown+0x1bc>)
 8011c86:	681b      	ldr	r3, [r3, #0]
 8011c88:	68db      	ldr	r3, [r3, #12]
 8011c8a:	4a26      	ldr	r2, [pc, #152]	@ (8011d24 <tcp_close_shutdown+0x1bc>)
 8011c8c:	6013      	str	r3, [r2, #0]
 8011c8e:	e013      	b.n	8011cb8 <tcp_close_shutdown+0x150>
 8011c90:	4b24      	ldr	r3, [pc, #144]	@ (8011d24 <tcp_close_shutdown+0x1bc>)
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	60bb      	str	r3, [r7, #8]
 8011c96:	e00c      	b.n	8011cb2 <tcp_close_shutdown+0x14a>
 8011c98:	68bb      	ldr	r3, [r7, #8]
 8011c9a:	68db      	ldr	r3, [r3, #12]
 8011c9c:	687a      	ldr	r2, [r7, #4]
 8011c9e:	429a      	cmp	r2, r3
 8011ca0:	d104      	bne.n	8011cac <tcp_close_shutdown+0x144>
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	68da      	ldr	r2, [r3, #12]
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	60da      	str	r2, [r3, #12]
 8011caa:	e005      	b.n	8011cb8 <tcp_close_shutdown+0x150>
 8011cac:	68bb      	ldr	r3, [r7, #8]
 8011cae:	68db      	ldr	r3, [r3, #12]
 8011cb0:	60bb      	str	r3, [r7, #8]
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d1ef      	bne.n	8011c98 <tcp_close_shutdown+0x130>
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	2200      	movs	r2, #0
 8011cbc:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011cbe:	6878      	ldr	r0, [r7, #4]
 8011cc0:	f7ff fea0 	bl	8011a04 <tcp_free>
      break;
 8011cc4:	e01a      	b.n	8011cfc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011cc6:	6878      	ldr	r0, [r7, #4]
 8011cc8:	f7ff ff14 	bl	8011af4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011ccc:	6879      	ldr	r1, [r7, #4]
 8011cce:	4816      	ldr	r0, [pc, #88]	@ (8011d28 <tcp_close_shutdown+0x1c0>)
 8011cd0:	f001 fb32 	bl	8013338 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011cd4:	6878      	ldr	r0, [r7, #4]
 8011cd6:	f7ff feb1 	bl	8011a3c <tcp_free_listen>
      break;
 8011cda:	e00f      	b.n	8011cfc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011cdc:	6879      	ldr	r1, [r7, #4]
 8011cde:	480e      	ldr	r0, [pc, #56]	@ (8011d18 <tcp_close_shutdown+0x1b0>)
 8011ce0:	f001 fb2a 	bl	8013338 <tcp_pcb_remove>
 8011ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8011d1c <tcp_close_shutdown+0x1b4>)
 8011ce6:	2201      	movs	r2, #1
 8011ce8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011cea:	6878      	ldr	r0, [r7, #4]
 8011cec:	f7ff fe8a 	bl	8011a04 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011cf0:	e004      	b.n	8011cfc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011cf2:	6878      	ldr	r0, [r7, #4]
 8011cf4:	f000 f81a 	bl	8011d2c <tcp_close_shutdown_fin>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	e000      	b.n	8011cfe <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011cfc:	2300      	movs	r3, #0
}
 8011cfe:	4618      	mov	r0, r3
 8011d00:	3710      	adds	r7, #16
 8011d02:	46bd      	mov	sp, r7
 8011d04:	bdb0      	pop	{r4, r5, r7, pc}
 8011d06:	bf00      	nop
 8011d08:	080237a8 	.word	0x080237a8
 8011d0c:	0802387c 	.word	0x0802387c
 8011d10:	080237ec 	.word	0x080237ec
 8011d14:	0802389c 	.word	0x0802389c
 8011d18:	2001267c 	.word	0x2001267c
 8011d1c:	20012684 	.word	0x20012684
 8011d20:	200126bc 	.word	0x200126bc
 8011d24:	20012674 	.word	0x20012674
 8011d28:	20012678 	.word	0x20012678

08011d2c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011d2c:	b580      	push	{r7, lr}
 8011d2e:	b084      	sub	sp, #16
 8011d30:	af00      	add	r7, sp, #0
 8011d32:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d106      	bne.n	8011d48 <tcp_close_shutdown_fin+0x1c>
 8011d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8011df4 <tcp_close_shutdown_fin+0xc8>)
 8011d3c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8011d40:	492d      	ldr	r1, [pc, #180]	@ (8011df8 <tcp_close_shutdown_fin+0xcc>)
 8011d42:	482e      	ldr	r0, [pc, #184]	@ (8011dfc <tcp_close_shutdown_fin+0xd0>)
 8011d44:	f00c faca 	bl	801e2dc <iprintf>

  switch (pcb->state) {
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	7d1b      	ldrb	r3, [r3, #20]
 8011d4c:	2b07      	cmp	r3, #7
 8011d4e:	d020      	beq.n	8011d92 <tcp_close_shutdown_fin+0x66>
 8011d50:	2b07      	cmp	r3, #7
 8011d52:	dc2b      	bgt.n	8011dac <tcp_close_shutdown_fin+0x80>
 8011d54:	2b03      	cmp	r3, #3
 8011d56:	d002      	beq.n	8011d5e <tcp_close_shutdown_fin+0x32>
 8011d58:	2b04      	cmp	r3, #4
 8011d5a:	d00d      	beq.n	8011d78 <tcp_close_shutdown_fin+0x4c>
 8011d5c:	e026      	b.n	8011dac <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011d5e:	6878      	ldr	r0, [r7, #4]
 8011d60:	f004 fdc2 	bl	80168e8 <tcp_send_fin>
 8011d64:	4603      	mov	r3, r0
 8011d66:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011d68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d11f      	bne.n	8011db0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2205      	movs	r2, #5
 8011d74:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011d76:	e01b      	b.n	8011db0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011d78:	6878      	ldr	r0, [r7, #4]
 8011d7a:	f004 fdb5 	bl	80168e8 <tcp_send_fin>
 8011d7e:	4603      	mov	r3, r0
 8011d80:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011d82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011d86:	2b00      	cmp	r3, #0
 8011d88:	d114      	bne.n	8011db4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	2205      	movs	r2, #5
 8011d8e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011d90:	e010      	b.n	8011db4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011d92:	6878      	ldr	r0, [r7, #4]
 8011d94:	f004 fda8 	bl	80168e8 <tcp_send_fin>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d109      	bne.n	8011db8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2209      	movs	r2, #9
 8011da8:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011daa:	e005      	b.n	8011db8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011dac:	2300      	movs	r3, #0
 8011dae:	e01c      	b.n	8011dea <tcp_close_shutdown_fin+0xbe>
      break;
 8011db0:	bf00      	nop
 8011db2:	e002      	b.n	8011dba <tcp_close_shutdown_fin+0x8e>
      break;
 8011db4:	bf00      	nop
 8011db6:	e000      	b.n	8011dba <tcp_close_shutdown_fin+0x8e>
      break;
 8011db8:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d103      	bne.n	8011dca <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f004 fece 	bl	8016b64 <tcp_output>
 8011dc8:	e00d      	b.n	8011de6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dd2:	d108      	bne.n	8011de6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	8b5b      	ldrh	r3, [r3, #26]
 8011dd8:	f043 0308 	orr.w	r3, r3, #8
 8011ddc:	b29a      	uxth	r2, r3
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011de2:	2300      	movs	r3, #0
 8011de4:	e001      	b.n	8011dea <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3710      	adds	r7, #16
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}
 8011df2:	bf00      	nop
 8011df4:	080237a8 	.word	0x080237a8
 8011df8:	08023858 	.word	0x08023858
 8011dfc:	080237ec 	.word	0x080237ec

08011e00 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011e00:	b580      	push	{r7, lr}
 8011e02:	b082      	sub	sp, #8
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d109      	bne.n	8011e22 <tcp_close+0x22>
 8011e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8011e4c <tcp_close+0x4c>)
 8011e10:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8011e14:	490e      	ldr	r1, [pc, #56]	@ (8011e50 <tcp_close+0x50>)
 8011e16:	480f      	ldr	r0, [pc, #60]	@ (8011e54 <tcp_close+0x54>)
 8011e18:	f00c fa60 	bl	801e2dc <iprintf>
 8011e1c:	f06f 030f 	mvn.w	r3, #15
 8011e20:	e00f      	b.n	8011e42 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	7d1b      	ldrb	r3, [r3, #20]
 8011e26:	2b01      	cmp	r3, #1
 8011e28:	d006      	beq.n	8011e38 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	8b5b      	ldrh	r3, [r3, #26]
 8011e2e:	f043 0310 	orr.w	r3, r3, #16
 8011e32:	b29a      	uxth	r2, r3
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011e38:	2101      	movs	r1, #1
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f7ff fe94 	bl	8011b68 <tcp_close_shutdown>
 8011e40:	4603      	mov	r3, r0
}
 8011e42:	4618      	mov	r0, r3
 8011e44:	3708      	adds	r7, #8
 8011e46:	46bd      	mov	sp, r7
 8011e48:	bd80      	pop	{r7, pc}
 8011e4a:	bf00      	nop
 8011e4c:	080237a8 	.word	0x080237a8
 8011e50:	080238b8 	.word	0x080238b8
 8011e54:	080237ec 	.word	0x080237ec

08011e58 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8011e58:	b580      	push	{r7, lr}
 8011e5a:	b084      	sub	sp, #16
 8011e5c:	af00      	add	r7, sp, #0
 8011e5e:	60f8      	str	r0, [r7, #12]
 8011e60:	60b9      	str	r1, [r7, #8]
 8011e62:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d109      	bne.n	8011e7e <tcp_shutdown+0x26>
 8011e6a:	4b26      	ldr	r3, [pc, #152]	@ (8011f04 <tcp_shutdown+0xac>)
 8011e6c:	f240 2207 	movw	r2, #519	@ 0x207
 8011e70:	4925      	ldr	r1, [pc, #148]	@ (8011f08 <tcp_shutdown+0xb0>)
 8011e72:	4826      	ldr	r0, [pc, #152]	@ (8011f0c <tcp_shutdown+0xb4>)
 8011e74:	f00c fa32 	bl	801e2dc <iprintf>
 8011e78:	f06f 030f 	mvn.w	r3, #15
 8011e7c:	e03d      	b.n	8011efa <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	7d1b      	ldrb	r3, [r3, #20]
 8011e82:	2b01      	cmp	r3, #1
 8011e84:	d102      	bne.n	8011e8c <tcp_shutdown+0x34>
    return ERR_CONN;
 8011e86:	f06f 030a 	mvn.w	r3, #10
 8011e8a:	e036      	b.n	8011efa <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8011e8c:	68bb      	ldr	r3, [r7, #8]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d01b      	beq.n	8011eca <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011e92:	68fb      	ldr	r3, [r7, #12]
 8011e94:	8b5b      	ldrh	r3, [r3, #26]
 8011e96:	f043 0310 	orr.w	r3, r3, #16
 8011e9a:	b29a      	uxth	r2, r3
 8011e9c:	68fb      	ldr	r3, [r7, #12]
 8011e9e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d005      	beq.n	8011eb2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8011ea6:	2101      	movs	r1, #1
 8011ea8:	68f8      	ldr	r0, [r7, #12]
 8011eaa:	f7ff fe5d 	bl	8011b68 <tcp_close_shutdown>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	e023      	b.n	8011efa <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d007      	beq.n	8011eca <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8011eba:	68fb      	ldr	r3, [r7, #12]
 8011ebc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	f7ff f98a 	bl	80111d8 <pbuf_free>
      pcb->refused_data = NULL;
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	2200      	movs	r2, #0
 8011ec8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8011eca:	687b      	ldr	r3, [r7, #4]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d013      	beq.n	8011ef8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	7d1b      	ldrb	r3, [r3, #20]
 8011ed4:	2b04      	cmp	r3, #4
 8011ed6:	dc02      	bgt.n	8011ede <tcp_shutdown+0x86>
 8011ed8:	2b03      	cmp	r3, #3
 8011eda:	da02      	bge.n	8011ee2 <tcp_shutdown+0x8a>
 8011edc:	e009      	b.n	8011ef2 <tcp_shutdown+0x9a>
 8011ede:	2b07      	cmp	r3, #7
 8011ee0:	d107      	bne.n	8011ef2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	b2db      	uxtb	r3, r3
 8011ee6:	4619      	mov	r1, r3
 8011ee8:	68f8      	ldr	r0, [r7, #12]
 8011eea:	f7ff fe3d 	bl	8011b68 <tcp_close_shutdown>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	e003      	b.n	8011efa <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8011ef2:	f06f 030a 	mvn.w	r3, #10
 8011ef6:	e000      	b.n	8011efa <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8011ef8:	2300      	movs	r3, #0
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	3710      	adds	r7, #16
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}
 8011f02:	bf00      	nop
 8011f04:	080237a8 	.word	0x080237a8
 8011f08:	080238d0 	.word	0x080238d0
 8011f0c:	080237ec 	.word	0x080237ec

08011f10 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b08e      	sub	sp, #56	@ 0x38
 8011f14:	af04      	add	r7, sp, #16
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d107      	bne.n	8011f30 <tcp_abandon+0x20>
 8011f20:	4b52      	ldr	r3, [pc, #328]	@ (801206c <tcp_abandon+0x15c>)
 8011f22:	f240 223d 	movw	r2, #573	@ 0x23d
 8011f26:	4952      	ldr	r1, [pc, #328]	@ (8012070 <tcp_abandon+0x160>)
 8011f28:	4852      	ldr	r0, [pc, #328]	@ (8012074 <tcp_abandon+0x164>)
 8011f2a:	f00c f9d7 	bl	801e2dc <iprintf>
 8011f2e:	e099      	b.n	8012064 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011f30:	687b      	ldr	r3, [r7, #4]
 8011f32:	7d1b      	ldrb	r3, [r3, #20]
 8011f34:	2b01      	cmp	r3, #1
 8011f36:	d106      	bne.n	8011f46 <tcp_abandon+0x36>
 8011f38:	4b4c      	ldr	r3, [pc, #304]	@ (801206c <tcp_abandon+0x15c>)
 8011f3a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8011f3e:	494e      	ldr	r1, [pc, #312]	@ (8012078 <tcp_abandon+0x168>)
 8011f40:	484c      	ldr	r0, [pc, #304]	@ (8012074 <tcp_abandon+0x164>)
 8011f42:	f00c f9cb 	bl	801e2dc <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	7d1b      	ldrb	r3, [r3, #20]
 8011f4a:	2b0a      	cmp	r3, #10
 8011f4c:	d107      	bne.n	8011f5e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011f4e:	6879      	ldr	r1, [r7, #4]
 8011f50:	484a      	ldr	r0, [pc, #296]	@ (801207c <tcp_abandon+0x16c>)
 8011f52:	f001 f9f1 	bl	8013338 <tcp_pcb_remove>
    tcp_free(pcb);
 8011f56:	6878      	ldr	r0, [r7, #4]
 8011f58:	f7ff fd54 	bl	8011a04 <tcp_free>
 8011f5c:	e082      	b.n	8012064 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8011f62:	2300      	movs	r3, #0
 8011f64:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f6a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f70:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011f78:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	691b      	ldr	r3, [r3, #16]
 8011f7e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	7d1b      	ldrb	r3, [r3, #20]
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d126      	bne.n	8011fd6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	8adb      	ldrh	r3, [r3, #22]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d02e      	beq.n	8011fee <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011f90:	4b3b      	ldr	r3, [pc, #236]	@ (8012080 <tcp_abandon+0x170>)
 8011f92:	681b      	ldr	r3, [r3, #0]
 8011f94:	687a      	ldr	r2, [r7, #4]
 8011f96:	429a      	cmp	r2, r3
 8011f98:	d105      	bne.n	8011fa6 <tcp_abandon+0x96>
 8011f9a:	4b39      	ldr	r3, [pc, #228]	@ (8012080 <tcp_abandon+0x170>)
 8011f9c:	681b      	ldr	r3, [r3, #0]
 8011f9e:	68db      	ldr	r3, [r3, #12]
 8011fa0:	4a37      	ldr	r2, [pc, #220]	@ (8012080 <tcp_abandon+0x170>)
 8011fa2:	6013      	str	r3, [r2, #0]
 8011fa4:	e013      	b.n	8011fce <tcp_abandon+0xbe>
 8011fa6:	4b36      	ldr	r3, [pc, #216]	@ (8012080 <tcp_abandon+0x170>)
 8011fa8:	681b      	ldr	r3, [r3, #0]
 8011faa:	61fb      	str	r3, [r7, #28]
 8011fac:	e00c      	b.n	8011fc8 <tcp_abandon+0xb8>
 8011fae:	69fb      	ldr	r3, [r7, #28]
 8011fb0:	68db      	ldr	r3, [r3, #12]
 8011fb2:	687a      	ldr	r2, [r7, #4]
 8011fb4:	429a      	cmp	r2, r3
 8011fb6:	d104      	bne.n	8011fc2 <tcp_abandon+0xb2>
 8011fb8:	687b      	ldr	r3, [r7, #4]
 8011fba:	68da      	ldr	r2, [r3, #12]
 8011fbc:	69fb      	ldr	r3, [r7, #28]
 8011fbe:	60da      	str	r2, [r3, #12]
 8011fc0:	e005      	b.n	8011fce <tcp_abandon+0xbe>
 8011fc2:	69fb      	ldr	r3, [r7, #28]
 8011fc4:	68db      	ldr	r3, [r3, #12]
 8011fc6:	61fb      	str	r3, [r7, #28]
 8011fc8:	69fb      	ldr	r3, [r7, #28]
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d1ef      	bne.n	8011fae <tcp_abandon+0x9e>
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	2200      	movs	r2, #0
 8011fd2:	60da      	str	r2, [r3, #12]
 8011fd4:	e00b      	b.n	8011fee <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	8adb      	ldrh	r3, [r3, #22]
 8011fde:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011fe0:	6879      	ldr	r1, [r7, #4]
 8011fe2:	4828      	ldr	r0, [pc, #160]	@ (8012084 <tcp_abandon+0x174>)
 8011fe4:	f001 f9a8 	bl	8013338 <tcp_pcb_remove>
 8011fe8:	4b27      	ldr	r3, [pc, #156]	@ (8012088 <tcp_abandon+0x178>)
 8011fea:	2201      	movs	r2, #1
 8011fec:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d004      	beq.n	8012000 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ffa:	4618      	mov	r0, r3
 8011ffc:	f000 fe7c 	bl	8012cf8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012004:	2b00      	cmp	r3, #0
 8012006:	d004      	beq.n	8012012 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801200c:	4618      	mov	r0, r3
 801200e:	f000 fe73 	bl	8012cf8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012016:	2b00      	cmp	r3, #0
 8012018:	d004      	beq.n	8012024 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801201e:	4618      	mov	r0, r3
 8012020:	f000 fe6a 	bl	8012cf8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012026:	2b00      	cmp	r3, #0
 8012028:	d00e      	beq.n	8012048 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801202a:	6879      	ldr	r1, [r7, #4]
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	3304      	adds	r3, #4
 8012030:	687a      	ldr	r2, [r7, #4]
 8012032:	8b12      	ldrh	r2, [r2, #24]
 8012034:	9202      	str	r2, [sp, #8]
 8012036:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8012038:	9201      	str	r2, [sp, #4]
 801203a:	9300      	str	r3, [sp, #0]
 801203c:	460b      	mov	r3, r1
 801203e:	697a      	ldr	r2, [r7, #20]
 8012040:	69b9      	ldr	r1, [r7, #24]
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f005 fb42 	bl	80176cc <tcp_rst>
    }
    last_state = pcb->state;
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	7d1b      	ldrb	r3, [r3, #20]
 801204c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801204e:	6878      	ldr	r0, [r7, #4]
 8012050:	f7ff fcd8 	bl	8011a04 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012054:	693b      	ldr	r3, [r7, #16]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d004      	beq.n	8012064 <tcp_abandon+0x154>
 801205a:	693b      	ldr	r3, [r7, #16]
 801205c:	f06f 010c 	mvn.w	r1, #12
 8012060:	68f8      	ldr	r0, [r7, #12]
 8012062:	4798      	blx	r3
  }
}
 8012064:	3728      	adds	r7, #40	@ 0x28
 8012066:	46bd      	mov	sp, r7
 8012068:	bd80      	pop	{r7, pc}
 801206a:	bf00      	nop
 801206c:	080237a8 	.word	0x080237a8
 8012070:	080238ec 	.word	0x080238ec
 8012074:	080237ec 	.word	0x080237ec
 8012078:	08023908 	.word	0x08023908
 801207c:	20012680 	.word	0x20012680
 8012080:	20012674 	.word	0x20012674
 8012084:	2001267c 	.word	0x2001267c
 8012088:	20012684 	.word	0x20012684

0801208c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b082      	sub	sp, #8
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8012094:	2101      	movs	r1, #1
 8012096:	6878      	ldr	r0, [r7, #4]
 8012098:	f7ff ff3a 	bl	8011f10 <tcp_abandon>
}
 801209c:	bf00      	nop
 801209e:	3708      	adds	r7, #8
 80120a0:	46bd      	mov	sp, r7
 80120a2:	bd80      	pop	{r7, pc}

080120a4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b084      	sub	sp, #16
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d106      	bne.n	80120c0 <tcp_update_rcv_ann_wnd+0x1c>
 80120b2:	4b25      	ldr	r3, [pc, #148]	@ (8012148 <tcp_update_rcv_ann_wnd+0xa4>)
 80120b4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 80120b8:	4924      	ldr	r1, [pc, #144]	@ (801214c <tcp_update_rcv_ann_wnd+0xa8>)
 80120ba:	4825      	ldr	r0, [pc, #148]	@ (8012150 <tcp_update_rcv_ann_wnd+0xac>)
 80120bc:	f00c f90e 	bl	801e2dc <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80120c4:	687a      	ldr	r2, [r7, #4]
 80120c6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80120c8:	4413      	add	r3, r2
 80120ca:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80120cc:	687b      	ldr	r3, [r7, #4]
 80120ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120d0:	687a      	ldr	r2, [r7, #4]
 80120d2:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80120d4:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80120d8:	bf28      	it	cs
 80120da:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80120de:	b292      	uxth	r2, r2
 80120e0:	4413      	add	r3, r2
 80120e2:	68fa      	ldr	r2, [r7, #12]
 80120e4:	1ad3      	subs	r3, r2, r3
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	db08      	blt.n	80120fc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80120ee:	687b      	ldr	r3, [r7, #4]
 80120f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80120f6:	68fa      	ldr	r2, [r7, #12]
 80120f8:	1ad3      	subs	r3, r2, r3
 80120fa:	e020      	b.n	801213e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012104:	1ad3      	subs	r3, r2, r3
 8012106:	2b00      	cmp	r3, #0
 8012108:	dd03      	ble.n	8012112 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	2200      	movs	r2, #0
 801210e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012110:	e014      	b.n	801213c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801211a:	1ad3      	subs	r3, r2, r3
 801211c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012124:	d306      	bcc.n	8012134 <tcp_update_rcv_ann_wnd+0x90>
 8012126:	4b08      	ldr	r3, [pc, #32]	@ (8012148 <tcp_update_rcv_ann_wnd+0xa4>)
 8012128:	f240 32b6 	movw	r2, #950	@ 0x3b6
 801212c:	4909      	ldr	r1, [pc, #36]	@ (8012154 <tcp_update_rcv_ann_wnd+0xb0>)
 801212e:	4808      	ldr	r0, [pc, #32]	@ (8012150 <tcp_update_rcv_ann_wnd+0xac>)
 8012130:	f00c f8d4 	bl	801e2dc <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012134:	68bb      	ldr	r3, [r7, #8]
 8012136:	b29a      	uxth	r2, r3
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 801213c:	2300      	movs	r3, #0
  }
}
 801213e:	4618      	mov	r0, r3
 8012140:	3710      	adds	r7, #16
 8012142:	46bd      	mov	sp, r7
 8012144:	bd80      	pop	{r7, pc}
 8012146:	bf00      	nop
 8012148:	080237a8 	.word	0x080237a8
 801214c:	08023a04 	.word	0x08023a04
 8012150:	080237ec 	.word	0x080237ec
 8012154:	08023a28 	.word	0x08023a28

08012158 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012158:	b580      	push	{r7, lr}
 801215a:	b084      	sub	sp, #16
 801215c:	af00      	add	r7, sp, #0
 801215e:	6078      	str	r0, [r7, #4]
 8012160:	460b      	mov	r3, r1
 8012162:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	2b00      	cmp	r3, #0
 8012168:	d107      	bne.n	801217a <tcp_recved+0x22>
 801216a:	4b1f      	ldr	r3, [pc, #124]	@ (80121e8 <tcp_recved+0x90>)
 801216c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8012170:	491e      	ldr	r1, [pc, #120]	@ (80121ec <tcp_recved+0x94>)
 8012172:	481f      	ldr	r0, [pc, #124]	@ (80121f0 <tcp_recved+0x98>)
 8012174:	f00c f8b2 	bl	801e2dc <iprintf>
 8012178:	e032      	b.n	80121e0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801217a:	687b      	ldr	r3, [r7, #4]
 801217c:	7d1b      	ldrb	r3, [r3, #20]
 801217e:	2b01      	cmp	r3, #1
 8012180:	d106      	bne.n	8012190 <tcp_recved+0x38>
 8012182:	4b19      	ldr	r3, [pc, #100]	@ (80121e8 <tcp_recved+0x90>)
 8012184:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8012188:	491a      	ldr	r1, [pc, #104]	@ (80121f4 <tcp_recved+0x9c>)
 801218a:	4819      	ldr	r0, [pc, #100]	@ (80121f0 <tcp_recved+0x98>)
 801218c:	f00c f8a6 	bl	801e2dc <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8012194:	887b      	ldrh	r3, [r7, #2]
 8012196:	4413      	add	r3, r2
 8012198:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801219a:	89fb      	ldrh	r3, [r7, #14]
 801219c:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80121a0:	d804      	bhi.n	80121ac <tcp_recved+0x54>
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80121a6:	89fa      	ldrh	r2, [r7, #14]
 80121a8:	429a      	cmp	r2, r3
 80121aa:	d204      	bcs.n	80121b6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80121b2:	851a      	strh	r2, [r3, #40]	@ 0x28
 80121b4:	e002      	b.n	80121bc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	89fa      	ldrh	r2, [r7, #14]
 80121ba:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80121bc:	6878      	ldr	r0, [r7, #4]
 80121be:	f7ff ff71 	bl	80120a4 <tcp_update_rcv_ann_wnd>
 80121c2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80121c4:	68bb      	ldr	r3, [r7, #8]
 80121c6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80121ca:	d309      	bcc.n	80121e0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	8b5b      	ldrh	r3, [r3, #26]
 80121d0:	f043 0302 	orr.w	r3, r3, #2
 80121d4:	b29a      	uxth	r2, r3
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f004 fcc2 	bl	8016b64 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80121e0:	3710      	adds	r7, #16
 80121e2:	46bd      	mov	sp, r7
 80121e4:	bd80      	pop	{r7, pc}
 80121e6:	bf00      	nop
 80121e8:	080237a8 	.word	0x080237a8
 80121ec:	08023a44 	.word	0x08023a44
 80121f0:	080237ec 	.word	0x080237ec
 80121f4:	08023a5c 	.word	0x08023a5c

080121f8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 80121f8:	b480      	push	{r7}
 80121fa:	b083      	sub	sp, #12
 80121fc:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 80121fe:	2300      	movs	r3, #0
 8012200:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8012202:	4b1e      	ldr	r3, [pc, #120]	@ (801227c <tcp_new_port+0x84>)
 8012204:	881b      	ldrh	r3, [r3, #0]
 8012206:	3301      	adds	r3, #1
 8012208:	b29a      	uxth	r2, r3
 801220a:	4b1c      	ldr	r3, [pc, #112]	@ (801227c <tcp_new_port+0x84>)
 801220c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801220e:	4b1b      	ldr	r3, [pc, #108]	@ (801227c <tcp_new_port+0x84>)
 8012210:	881b      	ldrh	r3, [r3, #0]
 8012212:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012216:	4293      	cmp	r3, r2
 8012218:	d103      	bne.n	8012222 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801221a:	4b18      	ldr	r3, [pc, #96]	@ (801227c <tcp_new_port+0x84>)
 801221c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8012220:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012222:	2300      	movs	r3, #0
 8012224:	71fb      	strb	r3, [r7, #7]
 8012226:	e01e      	b.n	8012266 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012228:	79fb      	ldrb	r3, [r7, #7]
 801222a:	4a15      	ldr	r2, [pc, #84]	@ (8012280 <tcp_new_port+0x88>)
 801222c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012230:	681b      	ldr	r3, [r3, #0]
 8012232:	603b      	str	r3, [r7, #0]
 8012234:	e011      	b.n	801225a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	8ada      	ldrh	r2, [r3, #22]
 801223a:	4b10      	ldr	r3, [pc, #64]	@ (801227c <tcp_new_port+0x84>)
 801223c:	881b      	ldrh	r3, [r3, #0]
 801223e:	429a      	cmp	r2, r3
 8012240:	d108      	bne.n	8012254 <tcp_new_port+0x5c>
        n++;
 8012242:	88bb      	ldrh	r3, [r7, #4]
 8012244:	3301      	adds	r3, #1
 8012246:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012248:	88bb      	ldrh	r3, [r7, #4]
 801224a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801224e:	d3d8      	bcc.n	8012202 <tcp_new_port+0xa>
          return 0;
 8012250:	2300      	movs	r3, #0
 8012252:	e00d      	b.n	8012270 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012254:	683b      	ldr	r3, [r7, #0]
 8012256:	68db      	ldr	r3, [r3, #12]
 8012258:	603b      	str	r3, [r7, #0]
 801225a:	683b      	ldr	r3, [r7, #0]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d1ea      	bne.n	8012236 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012260:	79fb      	ldrb	r3, [r7, #7]
 8012262:	3301      	adds	r3, #1
 8012264:	71fb      	strb	r3, [r7, #7]
 8012266:	79fb      	ldrb	r3, [r7, #7]
 8012268:	2b03      	cmp	r3, #3
 801226a:	d9dd      	bls.n	8012228 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801226c:	4b03      	ldr	r3, [pc, #12]	@ (801227c <tcp_new_port+0x84>)
 801226e:	881b      	ldrh	r3, [r3, #0]
}
 8012270:	4618      	mov	r0, r3
 8012272:	370c      	adds	r7, #12
 8012274:	46bd      	mov	sp, r7
 8012276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801227a:	4770      	bx	lr
 801227c:	20000044 	.word	0x20000044
 8012280:	08025d30 	.word	0x08025d30

08012284 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8012284:	b580      	push	{r7, lr}
 8012286:	b08a      	sub	sp, #40	@ 0x28
 8012288:	af00      	add	r7, sp, #0
 801228a:	60f8      	str	r0, [r7, #12]
 801228c:	60b9      	str	r1, [r7, #8]
 801228e:	603b      	str	r3, [r7, #0]
 8012290:	4613      	mov	r3, r2
 8012292:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8012294:	2300      	movs	r3, #0
 8012296:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d109      	bne.n	80122b2 <tcp_connect+0x2e>
 801229e:	4b7d      	ldr	r3, [pc, #500]	@ (8012494 <tcp_connect+0x210>)
 80122a0:	f240 4235 	movw	r2, #1077	@ 0x435
 80122a4:	497c      	ldr	r1, [pc, #496]	@ (8012498 <tcp_connect+0x214>)
 80122a6:	487d      	ldr	r0, [pc, #500]	@ (801249c <tcp_connect+0x218>)
 80122a8:	f00c f818 	bl	801e2dc <iprintf>
 80122ac:	f06f 030f 	mvn.w	r3, #15
 80122b0:	e0ec      	b.n	801248c <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80122b2:	68bb      	ldr	r3, [r7, #8]
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	d109      	bne.n	80122cc <tcp_connect+0x48>
 80122b8:	4b76      	ldr	r3, [pc, #472]	@ (8012494 <tcp_connect+0x210>)
 80122ba:	f240 4236 	movw	r2, #1078	@ 0x436
 80122be:	4978      	ldr	r1, [pc, #480]	@ (80124a0 <tcp_connect+0x21c>)
 80122c0:	4876      	ldr	r0, [pc, #472]	@ (801249c <tcp_connect+0x218>)
 80122c2:	f00c f80b 	bl	801e2dc <iprintf>
 80122c6:	f06f 030f 	mvn.w	r3, #15
 80122ca:	e0df      	b.n	801248c <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	7d1b      	ldrb	r3, [r3, #20]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d009      	beq.n	80122e8 <tcp_connect+0x64>
 80122d4:	4b6f      	ldr	r3, [pc, #444]	@ (8012494 <tcp_connect+0x210>)
 80122d6:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 80122da:	4972      	ldr	r1, [pc, #456]	@ (80124a4 <tcp_connect+0x220>)
 80122dc:	486f      	ldr	r0, [pc, #444]	@ (801249c <tcp_connect+0x218>)
 80122de:	f00b fffd 	bl	801e2dc <iprintf>
 80122e2:	f06f 0309 	mvn.w	r3, #9
 80122e6:	e0d1      	b.n	801248c <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 80122e8:	68bb      	ldr	r3, [r7, #8]
 80122ea:	2b00      	cmp	r3, #0
 80122ec:	d002      	beq.n	80122f4 <tcp_connect+0x70>
 80122ee:	68bb      	ldr	r3, [r7, #8]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	e000      	b.n	80122f6 <tcp_connect+0x72>
 80122f4:	2300      	movs	r3, #0
 80122f6:	68fa      	ldr	r2, [r7, #12]
 80122f8:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	88fa      	ldrh	r2, [r7, #6]
 80122fe:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	7a1b      	ldrb	r3, [r3, #8]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d006      	beq.n	8012316 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	7a1b      	ldrb	r3, [r3, #8]
 801230c:	4618      	mov	r0, r3
 801230e:	f7fe fbd5 	bl	8010abc <netif_get_by_index>
 8012312:	6278      	str	r0, [r7, #36]	@ 0x24
 8012314:	e005      	b.n	8012322 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	3304      	adds	r3, #4
 801231a:	4618      	mov	r0, r3
 801231c:	f009 fa4c 	bl	801b7b8 <ip4_route>
 8012320:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 8012322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012324:	2b00      	cmp	r3, #0
 8012326:	d102      	bne.n	801232e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8012328:	f06f 0303 	mvn.w	r3, #3
 801232c:	e0ae      	b.n	801248c <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d003      	beq.n	801233c <tcp_connect+0xb8>
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	681b      	ldr	r3, [r3, #0]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d111      	bne.n	8012360 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 801233c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801233e:	2b00      	cmp	r3, #0
 8012340:	d002      	beq.n	8012348 <tcp_connect+0xc4>
 8012342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012344:	3304      	adds	r3, #4
 8012346:	e000      	b.n	801234a <tcp_connect+0xc6>
 8012348:	2300      	movs	r3, #0
 801234a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 801234c:	69fb      	ldr	r3, [r7, #28]
 801234e:	2b00      	cmp	r3, #0
 8012350:	d102      	bne.n	8012358 <tcp_connect+0xd4>
      return ERR_RTE;
 8012352:	f06f 0303 	mvn.w	r3, #3
 8012356:	e099      	b.n	801248c <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012358:	69fb      	ldr	r3, [r7, #28]
 801235a:	681a      	ldr	r2, [r3, #0]
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8012360:	68fb      	ldr	r3, [r7, #12]
 8012362:	8adb      	ldrh	r3, [r3, #22]
 8012364:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	8adb      	ldrh	r3, [r3, #22]
 801236a:	2b00      	cmp	r3, #0
 801236c:	d10c      	bne.n	8012388 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801236e:	f7ff ff43 	bl	80121f8 <tcp_new_port>
 8012372:	4603      	mov	r3, r0
 8012374:	461a      	mov	r2, r3
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	8adb      	ldrh	r3, [r3, #22]
 801237e:	2b00      	cmp	r3, #0
 8012380:	d102      	bne.n	8012388 <tcp_connect+0x104>
      return ERR_BUF;
 8012382:	f06f 0301 	mvn.w	r3, #1
 8012386:	e081      	b.n	801248c <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8012388:	68f8      	ldr	r0, [r7, #12]
 801238a:	f001 f869 	bl	8013460 <tcp_next_iss>
 801238e:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	2200      	movs	r2, #0
 8012394:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	697a      	ldr	r2, [r7, #20]
 801239a:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 801239c:	697b      	ldr	r3, [r7, #20]
 801239e:	1e5a      	subs	r2, r3, #1
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	1e5a      	subs	r2, r3, #1
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 80123ac:	697b      	ldr	r3, [r7, #20]
 80123ae:	1e5a      	subs	r2, r3, #1
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80123ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80123c8:	68fb      	ldr	r3, [r7, #12]
 80123ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 80123cc:	68fb      	ldr	r3, [r7, #12]
 80123ce:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80123d2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80123dc:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	3304      	adds	r3, #4
 80123e6:	461a      	mov	r2, r3
 80123e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80123ea:	f001 f85f 	bl	80134ac <tcp_eff_send_mss_netif>
 80123ee:	4603      	mov	r3, r0
 80123f0:	461a      	mov	r2, r3
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	2201      	movs	r2, #1
 80123fa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	683a      	ldr	r2, [r7, #0]
 8012402:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8012406:	2102      	movs	r1, #2
 8012408:	68f8      	ldr	r0, [r7, #12]
 801240a:	f004 fabd 	bl	8016988 <tcp_enqueue_flags>
 801240e:	4603      	mov	r3, r0
 8012410:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8012412:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d136      	bne.n	8012488 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	2202      	movs	r2, #2
 801241e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8012420:	8b7b      	ldrh	r3, [r7, #26]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d021      	beq.n	801246a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8012426:	4b20      	ldr	r3, [pc, #128]	@ (80124a8 <tcp_connect+0x224>)
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	68fa      	ldr	r2, [r7, #12]
 801242c:	429a      	cmp	r2, r3
 801242e:	d105      	bne.n	801243c <tcp_connect+0x1b8>
 8012430:	4b1d      	ldr	r3, [pc, #116]	@ (80124a8 <tcp_connect+0x224>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	68db      	ldr	r3, [r3, #12]
 8012436:	4a1c      	ldr	r2, [pc, #112]	@ (80124a8 <tcp_connect+0x224>)
 8012438:	6013      	str	r3, [r2, #0]
 801243a:	e013      	b.n	8012464 <tcp_connect+0x1e0>
 801243c:	4b1a      	ldr	r3, [pc, #104]	@ (80124a8 <tcp_connect+0x224>)
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	623b      	str	r3, [r7, #32]
 8012442:	e00c      	b.n	801245e <tcp_connect+0x1da>
 8012444:	6a3b      	ldr	r3, [r7, #32]
 8012446:	68db      	ldr	r3, [r3, #12]
 8012448:	68fa      	ldr	r2, [r7, #12]
 801244a:	429a      	cmp	r2, r3
 801244c:	d104      	bne.n	8012458 <tcp_connect+0x1d4>
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	68da      	ldr	r2, [r3, #12]
 8012452:	6a3b      	ldr	r3, [r7, #32]
 8012454:	60da      	str	r2, [r3, #12]
 8012456:	e005      	b.n	8012464 <tcp_connect+0x1e0>
 8012458:	6a3b      	ldr	r3, [r7, #32]
 801245a:	68db      	ldr	r3, [r3, #12]
 801245c:	623b      	str	r3, [r7, #32]
 801245e:	6a3b      	ldr	r3, [r7, #32]
 8012460:	2b00      	cmp	r3, #0
 8012462:	d1ef      	bne.n	8012444 <tcp_connect+0x1c0>
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	2200      	movs	r2, #0
 8012468:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801246a:	4b10      	ldr	r3, [pc, #64]	@ (80124ac <tcp_connect+0x228>)
 801246c:	681a      	ldr	r2, [r3, #0]
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	60da      	str	r2, [r3, #12]
 8012472:	4a0e      	ldr	r2, [pc, #56]	@ (80124ac <tcp_connect+0x228>)
 8012474:	68fb      	ldr	r3, [r7, #12]
 8012476:	6013      	str	r3, [r2, #0]
 8012478:	f005 faea 	bl	8017a50 <tcp_timer_needed>
 801247c:	4b0c      	ldr	r3, [pc, #48]	@ (80124b0 <tcp_connect+0x22c>)
 801247e:	2201      	movs	r2, #1
 8012480:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 8012482:	68f8      	ldr	r0, [r7, #12]
 8012484:	f004 fb6e 	bl	8016b64 <tcp_output>
  }
  return ret;
 8012488:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801248c:	4618      	mov	r0, r3
 801248e:	3728      	adds	r7, #40	@ 0x28
 8012490:	46bd      	mov	sp, r7
 8012492:	bd80      	pop	{r7, pc}
 8012494:	080237a8 	.word	0x080237a8
 8012498:	08023a84 	.word	0x08023a84
 801249c:	080237ec 	.word	0x080237ec
 80124a0:	08023aa0 	.word	0x08023aa0
 80124a4:	08023abc 	.word	0x08023abc
 80124a8:	20012674 	.word	0x20012674
 80124ac:	2001267c 	.word	0x2001267c
 80124b0:	20012684 	.word	0x20012684

080124b4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80124b4:	b5b0      	push	{r4, r5, r7, lr}
 80124b6:	b090      	sub	sp, #64	@ 0x40
 80124b8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80124ba:	2300      	movs	r3, #0
 80124bc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80124c0:	4b95      	ldr	r3, [pc, #596]	@ (8012718 <tcp_slowtmr+0x264>)
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	3301      	adds	r3, #1
 80124c6:	4a94      	ldr	r2, [pc, #592]	@ (8012718 <tcp_slowtmr+0x264>)
 80124c8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80124ca:	4b94      	ldr	r3, [pc, #592]	@ (801271c <tcp_slowtmr+0x268>)
 80124cc:	781b      	ldrb	r3, [r3, #0]
 80124ce:	3301      	adds	r3, #1
 80124d0:	b2da      	uxtb	r2, r3
 80124d2:	4b92      	ldr	r3, [pc, #584]	@ (801271c <tcp_slowtmr+0x268>)
 80124d4:	701a      	strb	r2, [r3, #0]
 80124d6:	e000      	b.n	80124da <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 80124d8:	bf00      	nop
  prev = NULL;
 80124da:	2300      	movs	r3, #0
 80124dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 80124de:	4b90      	ldr	r3, [pc, #576]	@ (8012720 <tcp_slowtmr+0x26c>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 80124e4:	e29f      	b.n	8012a26 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80124e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124e8:	7d1b      	ldrb	r3, [r3, #20]
 80124ea:	2b00      	cmp	r3, #0
 80124ec:	d106      	bne.n	80124fc <tcp_slowtmr+0x48>
 80124ee:	4b8d      	ldr	r3, [pc, #564]	@ (8012724 <tcp_slowtmr+0x270>)
 80124f0:	f240 42be 	movw	r2, #1214	@ 0x4be
 80124f4:	498c      	ldr	r1, [pc, #560]	@ (8012728 <tcp_slowtmr+0x274>)
 80124f6:	488d      	ldr	r0, [pc, #564]	@ (801272c <tcp_slowtmr+0x278>)
 80124f8:	f00b fef0 	bl	801e2dc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80124fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124fe:	7d1b      	ldrb	r3, [r3, #20]
 8012500:	2b01      	cmp	r3, #1
 8012502:	d106      	bne.n	8012512 <tcp_slowtmr+0x5e>
 8012504:	4b87      	ldr	r3, [pc, #540]	@ (8012724 <tcp_slowtmr+0x270>)
 8012506:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801250a:	4989      	ldr	r1, [pc, #548]	@ (8012730 <tcp_slowtmr+0x27c>)
 801250c:	4887      	ldr	r0, [pc, #540]	@ (801272c <tcp_slowtmr+0x278>)
 801250e:	f00b fee5 	bl	801e2dc <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012514:	7d1b      	ldrb	r3, [r3, #20]
 8012516:	2b0a      	cmp	r3, #10
 8012518:	d106      	bne.n	8012528 <tcp_slowtmr+0x74>
 801251a:	4b82      	ldr	r3, [pc, #520]	@ (8012724 <tcp_slowtmr+0x270>)
 801251c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8012520:	4984      	ldr	r1, [pc, #528]	@ (8012734 <tcp_slowtmr+0x280>)
 8012522:	4882      	ldr	r0, [pc, #520]	@ (801272c <tcp_slowtmr+0x278>)
 8012524:	f00b feda 	bl	801e2dc <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801252a:	7f9a      	ldrb	r2, [r3, #30]
 801252c:	4b7b      	ldr	r3, [pc, #492]	@ (801271c <tcp_slowtmr+0x268>)
 801252e:	781b      	ldrb	r3, [r3, #0]
 8012530:	429a      	cmp	r2, r3
 8012532:	d105      	bne.n	8012540 <tcp_slowtmr+0x8c>
      prev = pcb;
 8012534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012536:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801253a:	68db      	ldr	r3, [r3, #12]
 801253c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801253e:	e272      	b.n	8012a26 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8012540:	4b76      	ldr	r3, [pc, #472]	@ (801271c <tcp_slowtmr+0x268>)
 8012542:	781a      	ldrb	r2, [r3, #0]
 8012544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012546:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8012548:	2300      	movs	r3, #0
 801254a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801254e:	2300      	movs	r3, #0
 8012550:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012556:	7d1b      	ldrb	r3, [r3, #20]
 8012558:	2b02      	cmp	r3, #2
 801255a:	d10a      	bne.n	8012572 <tcp_slowtmr+0xbe>
 801255c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801255e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012562:	2b05      	cmp	r3, #5
 8012564:	d905      	bls.n	8012572 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8012566:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801256a:	3301      	adds	r3, #1
 801256c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012570:	e11e      	b.n	80127b0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8012572:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012574:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012578:	2b0b      	cmp	r3, #11
 801257a:	d905      	bls.n	8012588 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 801257c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012580:	3301      	adds	r3, #1
 8012582:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012586:	e113      	b.n	80127b0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 8012588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801258a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801258e:	2b00      	cmp	r3, #0
 8012590:	d075      	beq.n	801267e <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8012592:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012596:	2b00      	cmp	r3, #0
 8012598:	d006      	beq.n	80125a8 <tcp_slowtmr+0xf4>
 801259a:	4b62      	ldr	r3, [pc, #392]	@ (8012724 <tcp_slowtmr+0x270>)
 801259c:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80125a0:	4965      	ldr	r1, [pc, #404]	@ (8012738 <tcp_slowtmr+0x284>)
 80125a2:	4862      	ldr	r0, [pc, #392]	@ (801272c <tcp_slowtmr+0x278>)
 80125a4:	f00b fe9a 	bl	801e2dc <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80125a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d106      	bne.n	80125be <tcp_slowtmr+0x10a>
 80125b0:	4b5c      	ldr	r3, [pc, #368]	@ (8012724 <tcp_slowtmr+0x270>)
 80125b2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80125b6:	4961      	ldr	r1, [pc, #388]	@ (801273c <tcp_slowtmr+0x288>)
 80125b8:	485c      	ldr	r0, [pc, #368]	@ (801272c <tcp_slowtmr+0x278>)
 80125ba:	f00b fe8f 	bl	801e2dc <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80125be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125c0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80125c4:	2b0b      	cmp	r3, #11
 80125c6:	d905      	bls.n	80125d4 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80125c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80125cc:	3301      	adds	r3, #1
 80125ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80125d2:	e0ed      	b.n	80127b0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80125d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125d6:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80125da:	3b01      	subs	r3, #1
 80125dc:	4a58      	ldr	r2, [pc, #352]	@ (8012740 <tcp_slowtmr+0x28c>)
 80125de:	5cd3      	ldrb	r3, [r2, r3]
 80125e0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80125e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125e4:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80125e8:	7c7a      	ldrb	r2, [r7, #17]
 80125ea:	429a      	cmp	r2, r3
 80125ec:	d907      	bls.n	80125fe <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 80125ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125f0:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 80125f4:	3301      	adds	r3, #1
 80125f6:	b2da      	uxtb	r2, r3
 80125f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125fa:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 80125fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012600:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012604:	7c7a      	ldrb	r2, [r7, #17]
 8012606:	429a      	cmp	r2, r3
 8012608:	f200 80d2 	bhi.w	80127b0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801260c:	2301      	movs	r3, #1
 801260e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8012610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012612:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012616:	2b00      	cmp	r3, #0
 8012618:	d108      	bne.n	801262c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801261a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801261c:	f005 f94a 	bl	80178b4 <tcp_zero_window_probe>
 8012620:	4603      	mov	r3, r0
 8012622:	2b00      	cmp	r3, #0
 8012624:	d014      	beq.n	8012650 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8012626:	2300      	movs	r3, #0
 8012628:	623b      	str	r3, [r7, #32]
 801262a:	e011      	b.n	8012650 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801262c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801262e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012632:	4619      	mov	r1, r3
 8012634:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012636:	f004 f80f 	bl	8016658 <tcp_split_unsent_seg>
 801263a:	4603      	mov	r3, r0
 801263c:	2b00      	cmp	r3, #0
 801263e:	d107      	bne.n	8012650 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8012640:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012642:	f004 fa8f 	bl	8016b64 <tcp_output>
 8012646:	4603      	mov	r3, r0
 8012648:	2b00      	cmp	r3, #0
 801264a:	d101      	bne.n	8012650 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801264c:	2300      	movs	r3, #0
 801264e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8012650:	6a3b      	ldr	r3, [r7, #32]
 8012652:	2b00      	cmp	r3, #0
 8012654:	f000 80ac 	beq.w	80127b0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8012658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801265a:	2200      	movs	r2, #0
 801265c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012662:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012666:	2b06      	cmp	r3, #6
 8012668:	f200 80a2 	bhi.w	80127b0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801266c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801266e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012672:	3301      	adds	r3, #1
 8012674:	b2da      	uxtb	r2, r3
 8012676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012678:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 801267c:	e098      	b.n	80127b0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801267e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012680:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8012684:	2b00      	cmp	r3, #0
 8012686:	db0f      	blt.n	80126a8 <tcp_slowtmr+0x1f4>
 8012688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801268a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801268e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012692:	4293      	cmp	r3, r2
 8012694:	d008      	beq.n	80126a8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 8012696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012698:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801269c:	b29b      	uxth	r3, r3
 801269e:	3301      	adds	r3, #1
 80126a0:	b29b      	uxth	r3, r3
 80126a2:	b21a      	sxth	r2, r3
 80126a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126a6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80126a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126aa:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80126ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126b0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80126b4:	429a      	cmp	r2, r3
 80126b6:	db7b      	blt.n	80127b0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80126b8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80126ba:	f004 fd47 	bl	801714c <tcp_rexmit_rto_prepare>
 80126be:	4603      	mov	r3, r0
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d007      	beq.n	80126d4 <tcp_slowtmr+0x220>
 80126c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d171      	bne.n	80127b0 <tcp_slowtmr+0x2fc>
 80126cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d06d      	beq.n	80127b0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80126d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126d6:	7d1b      	ldrb	r3, [r3, #20]
 80126d8:	2b02      	cmp	r3, #2
 80126da:	d03a      	beq.n	8012752 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80126dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126de:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80126e2:	2b0c      	cmp	r3, #12
 80126e4:	bf28      	it	cs
 80126e6:	230c      	movcs	r3, #12
 80126e8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80126ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126ec:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80126f0:	10db      	asrs	r3, r3, #3
 80126f2:	b21b      	sxth	r3, r3
 80126f4:	461a      	mov	r2, r3
 80126f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126f8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80126fc:	4413      	add	r3, r2
 80126fe:	7efa      	ldrb	r2, [r7, #27]
 8012700:	4910      	ldr	r1, [pc, #64]	@ (8012744 <tcp_slowtmr+0x290>)
 8012702:	5c8a      	ldrb	r2, [r1, r2]
 8012704:	4093      	lsls	r3, r2
 8012706:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012708:	697b      	ldr	r3, [r7, #20]
 801270a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801270e:	4293      	cmp	r3, r2
 8012710:	dc1a      	bgt.n	8012748 <tcp_slowtmr+0x294>
 8012712:	697b      	ldr	r3, [r7, #20]
 8012714:	b21a      	sxth	r2, r3
 8012716:	e019      	b.n	801274c <tcp_slowtmr+0x298>
 8012718:	20012670 	.word	0x20012670
 801271c:	20012686 	.word	0x20012686
 8012720:	2001267c 	.word	0x2001267c
 8012724:	080237a8 	.word	0x080237a8
 8012728:	08023aec 	.word	0x08023aec
 801272c:	080237ec 	.word	0x080237ec
 8012730:	08023b18 	.word	0x08023b18
 8012734:	08023b44 	.word	0x08023b44
 8012738:	08023b74 	.word	0x08023b74
 801273c:	08023ba8 	.word	0x08023ba8
 8012740:	08025d28 	.word	0x08025d28
 8012744:	08025d18 	.word	0x08025d18
 8012748:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801274c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801274e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8012752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012754:	2200      	movs	r2, #0
 8012756:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801275a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801275e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012760:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012764:	4293      	cmp	r3, r2
 8012766:	bf28      	it	cs
 8012768:	4613      	movcs	r3, r2
 801276a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801276c:	8a7b      	ldrh	r3, [r7, #18]
 801276e:	085b      	lsrs	r3, r3, #1
 8012770:	b29a      	uxth	r2, r3
 8012772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012774:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801277a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801277e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012780:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8012782:	005b      	lsls	r3, r3, #1
 8012784:	b29b      	uxth	r3, r3
 8012786:	429a      	cmp	r2, r3
 8012788:	d206      	bcs.n	8012798 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801278a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801278c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801278e:	005b      	lsls	r3, r3, #1
 8012790:	b29a      	uxth	r2, r3
 8012792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012794:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 8012798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801279a:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 801279c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801279e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80127a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127a4:	2200      	movs	r2, #0
 80127a6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80127aa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80127ac:	f004 fd3e 	bl	801722c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80127b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127b2:	7d1b      	ldrb	r3, [r3, #20]
 80127b4:	2b06      	cmp	r3, #6
 80127b6:	d111      	bne.n	80127dc <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80127b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127ba:	8b5b      	ldrh	r3, [r3, #26]
 80127bc:	f003 0310 	and.w	r3, r3, #16
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d00b      	beq.n	80127dc <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80127c4:	4b9d      	ldr	r3, [pc, #628]	@ (8012a3c <tcp_slowtmr+0x588>)
 80127c6:	681a      	ldr	r2, [r3, #0]
 80127c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127ca:	6a1b      	ldr	r3, [r3, #32]
 80127cc:	1ad3      	subs	r3, r2, r3
 80127ce:	2b28      	cmp	r3, #40	@ 0x28
 80127d0:	d904      	bls.n	80127dc <tcp_slowtmr+0x328>
          ++pcb_remove;
 80127d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80127d6:	3301      	adds	r3, #1
 80127d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80127dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127de:	7a5b      	ldrb	r3, [r3, #9]
 80127e0:	f003 0308 	and.w	r3, r3, #8
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d04c      	beq.n	8012882 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 80127e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127ea:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80127ec:	2b04      	cmp	r3, #4
 80127ee:	d003      	beq.n	80127f8 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 80127f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127f2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80127f4:	2b07      	cmp	r3, #7
 80127f6:	d144      	bne.n	8012882 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80127f8:	4b90      	ldr	r3, [pc, #576]	@ (8012a3c <tcp_slowtmr+0x588>)
 80127fa:	681a      	ldr	r2, [r3, #0]
 80127fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80127fe:	6a1b      	ldr	r3, [r3, #32]
 8012800:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012802:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012808:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 801280c:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8012810:	498b      	ldr	r1, [pc, #556]	@ (8012a40 <tcp_slowtmr+0x58c>)
 8012812:	fba1 1303 	umull	r1, r3, r1, r3
 8012816:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012818:	429a      	cmp	r2, r3
 801281a:	d90a      	bls.n	8012832 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 801281c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012820:	3301      	adds	r3, #1
 8012822:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8012826:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801282a:	3301      	adds	r3, #1
 801282c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012830:	e027      	b.n	8012882 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012832:	4b82      	ldr	r3, [pc, #520]	@ (8012a3c <tcp_slowtmr+0x588>)
 8012834:	681a      	ldr	r2, [r3, #0]
 8012836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012838:	6a1b      	ldr	r3, [r3, #32]
 801283a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801283c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801283e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8012842:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012844:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8012848:	4618      	mov	r0, r3
 801284a:	4b7e      	ldr	r3, [pc, #504]	@ (8012a44 <tcp_slowtmr+0x590>)
 801284c:	fb00 f303 	mul.w	r3, r0, r3
 8012850:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012852:	497b      	ldr	r1, [pc, #492]	@ (8012a40 <tcp_slowtmr+0x58c>)
 8012854:	fba1 1303 	umull	r1, r3, r1, r3
 8012858:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801285a:	429a      	cmp	r2, r3
 801285c:	d911      	bls.n	8012882 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 801285e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012860:	f004 ffe8 	bl	8017834 <tcp_keepalive>
 8012864:	4603      	mov	r3, r0
 8012866:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801286a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801286e:	2b00      	cmp	r3, #0
 8012870:	d107      	bne.n	8012882 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 8012872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012874:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8012878:	3301      	adds	r3, #1
 801287a:	b2da      	uxtb	r2, r3
 801287c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801287e:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 8012882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012884:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012886:	2b00      	cmp	r3, #0
 8012888:	d011      	beq.n	80128ae <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801288a:	4b6c      	ldr	r3, [pc, #432]	@ (8012a3c <tcp_slowtmr+0x588>)
 801288c:	681a      	ldr	r2, [r3, #0]
 801288e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012890:	6a1b      	ldr	r3, [r3, #32]
 8012892:	1ad2      	subs	r2, r2, r3
 8012894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012896:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 801289a:	4619      	mov	r1, r3
 801289c:	460b      	mov	r3, r1
 801289e:	005b      	lsls	r3, r3, #1
 80128a0:	440b      	add	r3, r1
 80128a2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80128a4:	429a      	cmp	r2, r3
 80128a6:	d302      	bcc.n	80128ae <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 80128a8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80128aa:	f000 fea9 	bl	8013600 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80128ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128b0:	7d1b      	ldrb	r3, [r3, #20]
 80128b2:	2b03      	cmp	r3, #3
 80128b4:	d10b      	bne.n	80128ce <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80128b6:	4b61      	ldr	r3, [pc, #388]	@ (8012a3c <tcp_slowtmr+0x588>)
 80128b8:	681a      	ldr	r2, [r3, #0]
 80128ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128bc:	6a1b      	ldr	r3, [r3, #32]
 80128be:	1ad3      	subs	r3, r2, r3
 80128c0:	2b28      	cmp	r3, #40	@ 0x28
 80128c2:	d904      	bls.n	80128ce <tcp_slowtmr+0x41a>
        ++pcb_remove;
 80128c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80128c8:	3301      	adds	r3, #1
 80128ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80128ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128d0:	7d1b      	ldrb	r3, [r3, #20]
 80128d2:	2b09      	cmp	r3, #9
 80128d4:	d10b      	bne.n	80128ee <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80128d6:	4b59      	ldr	r3, [pc, #356]	@ (8012a3c <tcp_slowtmr+0x588>)
 80128d8:	681a      	ldr	r2, [r3, #0]
 80128da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128dc:	6a1b      	ldr	r3, [r3, #32]
 80128de:	1ad3      	subs	r3, r2, r3
 80128e0:	2bf0      	cmp	r3, #240	@ 0xf0
 80128e2:	d904      	bls.n	80128ee <tcp_slowtmr+0x43a>
        ++pcb_remove;
 80128e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80128e8:	3301      	adds	r3, #1
 80128ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 80128ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d060      	beq.n	80129b8 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 80128f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80128f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80128fc:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 80128fe:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012900:	f000 fcca 	bl	8013298 <tcp_pcb_purge>
      if (prev != NULL) {
 8012904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012906:	2b00      	cmp	r3, #0
 8012908:	d010      	beq.n	801292c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801290a:	4b4f      	ldr	r3, [pc, #316]	@ (8012a48 <tcp_slowtmr+0x594>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012910:	429a      	cmp	r2, r3
 8012912:	d106      	bne.n	8012922 <tcp_slowtmr+0x46e>
 8012914:	4b4d      	ldr	r3, [pc, #308]	@ (8012a4c <tcp_slowtmr+0x598>)
 8012916:	f240 526d 	movw	r2, #1389	@ 0x56d
 801291a:	494d      	ldr	r1, [pc, #308]	@ (8012a50 <tcp_slowtmr+0x59c>)
 801291c:	484d      	ldr	r0, [pc, #308]	@ (8012a54 <tcp_slowtmr+0x5a0>)
 801291e:	f00b fcdd 	bl	801e2dc <iprintf>
        prev->next = pcb->next;
 8012922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012924:	68da      	ldr	r2, [r3, #12]
 8012926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012928:	60da      	str	r2, [r3, #12]
 801292a:	e00f      	b.n	801294c <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801292c:	4b46      	ldr	r3, [pc, #280]	@ (8012a48 <tcp_slowtmr+0x594>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012932:	429a      	cmp	r2, r3
 8012934:	d006      	beq.n	8012944 <tcp_slowtmr+0x490>
 8012936:	4b45      	ldr	r3, [pc, #276]	@ (8012a4c <tcp_slowtmr+0x598>)
 8012938:	f240 5271 	movw	r2, #1393	@ 0x571
 801293c:	4946      	ldr	r1, [pc, #280]	@ (8012a58 <tcp_slowtmr+0x5a4>)
 801293e:	4845      	ldr	r0, [pc, #276]	@ (8012a54 <tcp_slowtmr+0x5a0>)
 8012940:	f00b fccc 	bl	801e2dc <iprintf>
        tcp_active_pcbs = pcb->next;
 8012944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012946:	68db      	ldr	r3, [r3, #12]
 8012948:	4a3f      	ldr	r2, [pc, #252]	@ (8012a48 <tcp_slowtmr+0x594>)
 801294a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 801294c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012950:	2b00      	cmp	r3, #0
 8012952:	d013      	beq.n	801297c <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012956:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8012958:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801295a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801295c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801295e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012960:	3304      	adds	r3, #4
 8012962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012964:	8ad2      	ldrh	r2, [r2, #22]
 8012966:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012968:	8b09      	ldrh	r1, [r1, #24]
 801296a:	9102      	str	r1, [sp, #8]
 801296c:	9201      	str	r2, [sp, #4]
 801296e:	9300      	str	r3, [sp, #0]
 8012970:	462b      	mov	r3, r5
 8012972:	4622      	mov	r2, r4
 8012974:	4601      	mov	r1, r0
 8012976:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012978:	f004 fea8 	bl	80176cc <tcp_rst>
      err_arg = pcb->callback_arg;
 801297c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801297e:	691b      	ldr	r3, [r3, #16]
 8012980:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012984:	7d1b      	ldrb	r3, [r3, #20]
 8012986:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801298a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801298c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801298e:	68db      	ldr	r3, [r3, #12]
 8012990:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8012992:	6838      	ldr	r0, [r7, #0]
 8012994:	f7ff f836 	bl	8011a04 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8012998:	4b30      	ldr	r3, [pc, #192]	@ (8012a5c <tcp_slowtmr+0x5a8>)
 801299a:	2200      	movs	r2, #0
 801299c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d004      	beq.n	80129ae <tcp_slowtmr+0x4fa>
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	f06f 010c 	mvn.w	r1, #12
 80129aa:	68b8      	ldr	r0, [r7, #8]
 80129ac:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80129ae:	4b2b      	ldr	r3, [pc, #172]	@ (8012a5c <tcp_slowtmr+0x5a8>)
 80129b0:	781b      	ldrb	r3, [r3, #0]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d037      	beq.n	8012a26 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 80129b6:	e590      	b.n	80124da <tcp_slowtmr+0x26>
      prev = pcb;
 80129b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129ba:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80129bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80129be:	68db      	ldr	r3, [r3, #12]
 80129c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80129c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129c4:	7f1b      	ldrb	r3, [r3, #28]
 80129c6:	3301      	adds	r3, #1
 80129c8:	b2da      	uxtb	r2, r3
 80129ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129cc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80129ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129d0:	7f1a      	ldrb	r2, [r3, #28]
 80129d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129d4:	7f5b      	ldrb	r3, [r3, #29]
 80129d6:	429a      	cmp	r2, r3
 80129d8:	d325      	bcc.n	8012a26 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 80129da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129dc:	2200      	movs	r2, #0
 80129de:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 80129e0:	4b1e      	ldr	r3, [pc, #120]	@ (8012a5c <tcp_slowtmr+0x5a8>)
 80129e2:	2200      	movs	r2, #0
 80129e4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80129e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d00b      	beq.n	8012a08 <tcp_slowtmr+0x554>
 80129f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80129f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80129f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80129f8:	6912      	ldr	r2, [r2, #16]
 80129fa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80129fc:	4610      	mov	r0, r2
 80129fe:	4798      	blx	r3
 8012a00:	4603      	mov	r3, r0
 8012a02:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8012a06:	e002      	b.n	8012a0e <tcp_slowtmr+0x55a>
 8012a08:	2300      	movs	r3, #0
 8012a0a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8012a0e:	4b13      	ldr	r3, [pc, #76]	@ (8012a5c <tcp_slowtmr+0x5a8>)
 8012a10:	781b      	ldrb	r3, [r3, #0]
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	f47f ad60 	bne.w	80124d8 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012a18:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8012a1c:	2b00      	cmp	r3, #0
 8012a1e:	d102      	bne.n	8012a26 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8012a20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012a22:	f004 f89f 	bl	8016b64 <tcp_output>
  while (pcb != NULL) {
 8012a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	f47f ad5c 	bne.w	80124e6 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012a2e:	2300      	movs	r3, #0
 8012a30:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8012a32:	4b0b      	ldr	r3, [pc, #44]	@ (8012a60 <tcp_slowtmr+0x5ac>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012a38:	e067      	b.n	8012b0a <tcp_slowtmr+0x656>
 8012a3a:	bf00      	nop
 8012a3c:	20012670 	.word	0x20012670
 8012a40:	10624dd3 	.word	0x10624dd3
 8012a44:	000124f8 	.word	0x000124f8
 8012a48:	2001267c 	.word	0x2001267c
 8012a4c:	080237a8 	.word	0x080237a8
 8012a50:	08023be0 	.word	0x08023be0
 8012a54:	080237ec 	.word	0x080237ec
 8012a58:	08023c0c 	.word	0x08023c0c
 8012a5c:	20012684 	.word	0x20012684
 8012a60:	20012680 	.word	0x20012680
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a66:	7d1b      	ldrb	r3, [r3, #20]
 8012a68:	2b0a      	cmp	r3, #10
 8012a6a:	d006      	beq.n	8012a7a <tcp_slowtmr+0x5c6>
 8012a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8012b1c <tcp_slowtmr+0x668>)
 8012a6e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8012a72:	492b      	ldr	r1, [pc, #172]	@ (8012b20 <tcp_slowtmr+0x66c>)
 8012a74:	482b      	ldr	r0, [pc, #172]	@ (8012b24 <tcp_slowtmr+0x670>)
 8012a76:	f00b fc31 	bl	801e2dc <iprintf>
    pcb_remove = 0;
 8012a7a:	2300      	movs	r3, #0
 8012a7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012a80:	4b29      	ldr	r3, [pc, #164]	@ (8012b28 <tcp_slowtmr+0x674>)
 8012a82:	681a      	ldr	r2, [r3, #0]
 8012a84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012a86:	6a1b      	ldr	r3, [r3, #32]
 8012a88:	1ad3      	subs	r3, r2, r3
 8012a8a:	2bf0      	cmp	r3, #240	@ 0xf0
 8012a8c:	d904      	bls.n	8012a98 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8012a8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012a92:	3301      	adds	r3, #1
 8012a94:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012a98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d02f      	beq.n	8012b00 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012aa0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012aa2:	f000 fbf9 	bl	8013298 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012aa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d010      	beq.n	8012ace <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012aac:	4b1f      	ldr	r3, [pc, #124]	@ (8012b2c <tcp_slowtmr+0x678>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	d106      	bne.n	8012ac4 <tcp_slowtmr+0x610>
 8012ab6:	4b19      	ldr	r3, [pc, #100]	@ (8012b1c <tcp_slowtmr+0x668>)
 8012ab8:	f240 52af 	movw	r2, #1455	@ 0x5af
 8012abc:	491c      	ldr	r1, [pc, #112]	@ (8012b30 <tcp_slowtmr+0x67c>)
 8012abe:	4819      	ldr	r0, [pc, #100]	@ (8012b24 <tcp_slowtmr+0x670>)
 8012ac0:	f00b fc0c 	bl	801e2dc <iprintf>
        prev->next = pcb->next;
 8012ac4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ac6:	68da      	ldr	r2, [r3, #12]
 8012ac8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012aca:	60da      	str	r2, [r3, #12]
 8012acc:	e00f      	b.n	8012aee <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012ace:	4b17      	ldr	r3, [pc, #92]	@ (8012b2c <tcp_slowtmr+0x678>)
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012ad4:	429a      	cmp	r2, r3
 8012ad6:	d006      	beq.n	8012ae6 <tcp_slowtmr+0x632>
 8012ad8:	4b10      	ldr	r3, [pc, #64]	@ (8012b1c <tcp_slowtmr+0x668>)
 8012ada:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8012ade:	4915      	ldr	r1, [pc, #84]	@ (8012b34 <tcp_slowtmr+0x680>)
 8012ae0:	4810      	ldr	r0, [pc, #64]	@ (8012b24 <tcp_slowtmr+0x670>)
 8012ae2:	f00b fbfb 	bl	801e2dc <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012ae6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012ae8:	68db      	ldr	r3, [r3, #12]
 8012aea:	4a10      	ldr	r2, [pc, #64]	@ (8012b2c <tcp_slowtmr+0x678>)
 8012aec:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012aee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012af0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012af4:	68db      	ldr	r3, [r3, #12]
 8012af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8012af8:	69f8      	ldr	r0, [r7, #28]
 8012afa:	f7fe ff83 	bl	8011a04 <tcp_free>
 8012afe:	e004      	b.n	8012b0a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8012b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b02:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b06:	68db      	ldr	r3, [r3, #12]
 8012b08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d1a9      	bne.n	8012a64 <tcp_slowtmr+0x5b0>
    }
  }
}
 8012b10:	bf00      	nop
 8012b12:	bf00      	nop
 8012b14:	3730      	adds	r7, #48	@ 0x30
 8012b16:	46bd      	mov	sp, r7
 8012b18:	bdb0      	pop	{r4, r5, r7, pc}
 8012b1a:	bf00      	nop
 8012b1c:	080237a8 	.word	0x080237a8
 8012b20:	08023c38 	.word	0x08023c38
 8012b24:	080237ec 	.word	0x080237ec
 8012b28:	20012670 	.word	0x20012670
 8012b2c:	20012680 	.word	0x20012680
 8012b30:	08023c68 	.word	0x08023c68
 8012b34:	08023c90 	.word	0x08023c90

08012b38 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012b38:	b580      	push	{r7, lr}
 8012b3a:	b082      	sub	sp, #8
 8012b3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012b3e:	4b2d      	ldr	r3, [pc, #180]	@ (8012bf4 <tcp_fasttmr+0xbc>)
 8012b40:	781b      	ldrb	r3, [r3, #0]
 8012b42:	3301      	adds	r3, #1
 8012b44:	b2da      	uxtb	r2, r3
 8012b46:	4b2b      	ldr	r3, [pc, #172]	@ (8012bf4 <tcp_fasttmr+0xbc>)
 8012b48:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8012bf8 <tcp_fasttmr+0xc0>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012b50:	e048      	b.n	8012be4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	7f9a      	ldrb	r2, [r3, #30]
 8012b56:	4b27      	ldr	r3, [pc, #156]	@ (8012bf4 <tcp_fasttmr+0xbc>)
 8012b58:	781b      	ldrb	r3, [r3, #0]
 8012b5a:	429a      	cmp	r2, r3
 8012b5c:	d03f      	beq.n	8012bde <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012b5e:	4b25      	ldr	r3, [pc, #148]	@ (8012bf4 <tcp_fasttmr+0xbc>)
 8012b60:	781a      	ldrb	r2, [r3, #0]
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	8b5b      	ldrh	r3, [r3, #26]
 8012b6a:	f003 0301 	and.w	r3, r3, #1
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d010      	beq.n	8012b94 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012b72:	687b      	ldr	r3, [r7, #4]
 8012b74:	8b5b      	ldrh	r3, [r3, #26]
 8012b76:	f043 0302 	orr.w	r3, r3, #2
 8012b7a:	b29a      	uxth	r2, r3
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012b80:	6878      	ldr	r0, [r7, #4]
 8012b82:	f003 ffef 	bl	8016b64 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	8b5b      	ldrh	r3, [r3, #26]
 8012b8a:	f023 0303 	bic.w	r3, r3, #3
 8012b8e:	b29a      	uxth	r2, r3
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	8b5b      	ldrh	r3, [r3, #26]
 8012b98:	f003 0308 	and.w	r3, r3, #8
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d009      	beq.n	8012bb4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	8b5b      	ldrh	r3, [r3, #26]
 8012ba4:	f023 0308 	bic.w	r3, r3, #8
 8012ba8:	b29a      	uxth	r2, r3
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012bae:	6878      	ldr	r0, [r7, #4]
 8012bb0:	f7ff f8bc 	bl	8011d2c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	68db      	ldr	r3, [r3, #12]
 8012bb8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012bba:	687b      	ldr	r3, [r7, #4]
 8012bbc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012bbe:	2b00      	cmp	r3, #0
 8012bc0:	d00a      	beq.n	8012bd8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8012bfc <tcp_fasttmr+0xc4>)
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012bc8:	6878      	ldr	r0, [r7, #4]
 8012bca:	f000 f819 	bl	8012c00 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012bce:	4b0b      	ldr	r3, [pc, #44]	@ (8012bfc <tcp_fasttmr+0xc4>)
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d000      	beq.n	8012bd8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012bd6:	e7b8      	b.n	8012b4a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	607b      	str	r3, [r7, #4]
 8012bdc:	e002      	b.n	8012be4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012bde:	687b      	ldr	r3, [r7, #4]
 8012be0:	68db      	ldr	r3, [r3, #12]
 8012be2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d1b3      	bne.n	8012b52 <tcp_fasttmr+0x1a>
    }
  }
}
 8012bea:	bf00      	nop
 8012bec:	bf00      	nop
 8012bee:	3708      	adds	r7, #8
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}
 8012bf4:	20012686 	.word	0x20012686
 8012bf8:	2001267c 	.word	0x2001267c
 8012bfc:	20012684 	.word	0x20012684

08012c00 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012c00:	b590      	push	{r4, r7, lr}
 8012c02:	b085      	sub	sp, #20
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d109      	bne.n	8012c22 <tcp_process_refused_data+0x22>
 8012c0e:	4b37      	ldr	r3, [pc, #220]	@ (8012cec <tcp_process_refused_data+0xec>)
 8012c10:	f240 6209 	movw	r2, #1545	@ 0x609
 8012c14:	4936      	ldr	r1, [pc, #216]	@ (8012cf0 <tcp_process_refused_data+0xf0>)
 8012c16:	4837      	ldr	r0, [pc, #220]	@ (8012cf4 <tcp_process_refused_data+0xf4>)
 8012c18:	f00b fb60 	bl	801e2dc <iprintf>
 8012c1c:	f06f 030f 	mvn.w	r3, #15
 8012c20:	e060      	b.n	8012ce4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012c26:	7b5b      	ldrb	r3, [r3, #13]
 8012c28:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012c2a:	687b      	ldr	r3, [r7, #4]
 8012c2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012c2e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	2200      	movs	r2, #0
 8012c34:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d00b      	beq.n	8012c58 <tcp_process_refused_data+0x58>
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	6918      	ldr	r0, [r3, #16]
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	68ba      	ldr	r2, [r7, #8]
 8012c4e:	6879      	ldr	r1, [r7, #4]
 8012c50:	47a0      	blx	r4
 8012c52:	4603      	mov	r3, r0
 8012c54:	73fb      	strb	r3, [r7, #15]
 8012c56:	e007      	b.n	8012c68 <tcp_process_refused_data+0x68>
 8012c58:	2300      	movs	r3, #0
 8012c5a:	68ba      	ldr	r2, [r7, #8]
 8012c5c:	6879      	ldr	r1, [r7, #4]
 8012c5e:	2000      	movs	r0, #0
 8012c60:	f000 f8a4 	bl	8012dac <tcp_recv_null>
 8012c64:	4603      	mov	r3, r0
 8012c66:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012c68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c6c:	2b00      	cmp	r3, #0
 8012c6e:	d12a      	bne.n	8012cc6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012c70:	7bbb      	ldrb	r3, [r7, #14]
 8012c72:	f003 0320 	and.w	r3, r3, #32
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d033      	beq.n	8012ce2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c7e:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8012c82:	d005      	beq.n	8012c90 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8012c88:	3301      	adds	r3, #1
 8012c8a:	b29a      	uxth	r2, r3
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d00b      	beq.n	8012cb2 <tcp_process_refused_data+0xb2>
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	6918      	ldr	r0, [r3, #16]
 8012ca4:	2300      	movs	r3, #0
 8012ca6:	2200      	movs	r2, #0
 8012ca8:	6879      	ldr	r1, [r7, #4]
 8012caa:	47a0      	blx	r4
 8012cac:	4603      	mov	r3, r0
 8012cae:	73fb      	strb	r3, [r7, #15]
 8012cb0:	e001      	b.n	8012cb6 <tcp_process_refused_data+0xb6>
 8012cb2:	2300      	movs	r3, #0
 8012cb4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cba:	f113 0f0d 	cmn.w	r3, #13
 8012cbe:	d110      	bne.n	8012ce2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8012cc0:	f06f 030c 	mvn.w	r3, #12
 8012cc4:	e00e      	b.n	8012ce4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8012cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012cca:	f113 0f0d 	cmn.w	r3, #13
 8012cce:	d102      	bne.n	8012cd6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012cd0:	f06f 030c 	mvn.w	r3, #12
 8012cd4:	e006      	b.n	8012ce4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	68ba      	ldr	r2, [r7, #8]
 8012cda:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8012cdc:	f06f 0304 	mvn.w	r3, #4
 8012ce0:	e000      	b.n	8012ce4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8012ce2:	2300      	movs	r3, #0
}
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	3714      	adds	r7, #20
 8012ce8:	46bd      	mov	sp, r7
 8012cea:	bd90      	pop	{r4, r7, pc}
 8012cec:	080237a8 	.word	0x080237a8
 8012cf0:	08023cb8 	.word	0x08023cb8
 8012cf4:	080237ec 	.word	0x080237ec

08012cf8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012cf8:	b580      	push	{r7, lr}
 8012cfa:	b084      	sub	sp, #16
 8012cfc:	af00      	add	r7, sp, #0
 8012cfe:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012d00:	e007      	b.n	8012d12 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012d08:	6878      	ldr	r0, [r7, #4]
 8012d0a:	f000 f80a 	bl	8012d22 <tcp_seg_free>
    seg = next;
 8012d0e:	68fb      	ldr	r3, [r7, #12]
 8012d10:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d1f4      	bne.n	8012d02 <tcp_segs_free+0xa>
  }
}
 8012d18:	bf00      	nop
 8012d1a:	bf00      	nop
 8012d1c:	3710      	adds	r7, #16
 8012d1e:	46bd      	mov	sp, r7
 8012d20:	bd80      	pop	{r7, pc}

08012d22 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012d22:	b580      	push	{r7, lr}
 8012d24:	b082      	sub	sp, #8
 8012d26:	af00      	add	r7, sp, #0
 8012d28:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	2b00      	cmp	r3, #0
 8012d2e:	d00c      	beq.n	8012d4a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012d30:	687b      	ldr	r3, [r7, #4]
 8012d32:	685b      	ldr	r3, [r3, #4]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d004      	beq.n	8012d42 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	685b      	ldr	r3, [r3, #4]
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	f7fe fa4b 	bl	80111d8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012d42:	6879      	ldr	r1, [r7, #4]
 8012d44:	2003      	movs	r0, #3
 8012d46:	f7fd fb97 	bl	8010478 <memp_free>
  }
}
 8012d4a:	bf00      	nop
 8012d4c:	3708      	adds	r7, #8
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}
	...

08012d54 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012d54:	b580      	push	{r7, lr}
 8012d56:	b084      	sub	sp, #16
 8012d58:	af00      	add	r7, sp, #0
 8012d5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d106      	bne.n	8012d70 <tcp_seg_copy+0x1c>
 8012d62:	4b0f      	ldr	r3, [pc, #60]	@ (8012da0 <tcp_seg_copy+0x4c>)
 8012d64:	f240 6282 	movw	r2, #1666	@ 0x682
 8012d68:	490e      	ldr	r1, [pc, #56]	@ (8012da4 <tcp_seg_copy+0x50>)
 8012d6a:	480f      	ldr	r0, [pc, #60]	@ (8012da8 <tcp_seg_copy+0x54>)
 8012d6c:	f00b fab6 	bl	801e2dc <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012d70:	2003      	movs	r0, #3
 8012d72:	f7fd fb0b 	bl	801038c <memp_malloc>
 8012d76:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012d78:	68fb      	ldr	r3, [r7, #12]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d101      	bne.n	8012d82 <tcp_seg_copy+0x2e>
    return NULL;
 8012d7e:	2300      	movs	r3, #0
 8012d80:	e00a      	b.n	8012d98 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012d82:	2210      	movs	r2, #16
 8012d84:	6879      	ldr	r1, [r7, #4]
 8012d86:	68f8      	ldr	r0, [r7, #12]
 8012d88:	f00b fc49 	bl	801e61e <memcpy>
  pbuf_ref(cseg->p);
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	685b      	ldr	r3, [r3, #4]
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7fe fac7 	bl	8011324 <pbuf_ref>
  return cseg;
 8012d96:	68fb      	ldr	r3, [r7, #12]
}
 8012d98:	4618      	mov	r0, r3
 8012d9a:	3710      	adds	r7, #16
 8012d9c:	46bd      	mov	sp, r7
 8012d9e:	bd80      	pop	{r7, pc}
 8012da0:	080237a8 	.word	0x080237a8
 8012da4:	08023cfc 	.word	0x08023cfc
 8012da8:	080237ec 	.word	0x080237ec

08012dac <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b084      	sub	sp, #16
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	60f8      	str	r0, [r7, #12]
 8012db4:	60b9      	str	r1, [r7, #8]
 8012db6:	607a      	str	r2, [r7, #4]
 8012db8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012dba:	68bb      	ldr	r3, [r7, #8]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d109      	bne.n	8012dd4 <tcp_recv_null+0x28>
 8012dc0:	4b12      	ldr	r3, [pc, #72]	@ (8012e0c <tcp_recv_null+0x60>)
 8012dc2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8012dc6:	4912      	ldr	r1, [pc, #72]	@ (8012e10 <tcp_recv_null+0x64>)
 8012dc8:	4812      	ldr	r0, [pc, #72]	@ (8012e14 <tcp_recv_null+0x68>)
 8012dca:	f00b fa87 	bl	801e2dc <iprintf>
 8012dce:	f06f 030f 	mvn.w	r3, #15
 8012dd2:	e016      	b.n	8012e02 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d009      	beq.n	8012dee <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	891b      	ldrh	r3, [r3, #8]
 8012dde:	4619      	mov	r1, r3
 8012de0:	68b8      	ldr	r0, [r7, #8]
 8012de2:	f7ff f9b9 	bl	8012158 <tcp_recved>
    pbuf_free(p);
 8012de6:	6878      	ldr	r0, [r7, #4]
 8012de8:	f7fe f9f6 	bl	80111d8 <pbuf_free>
 8012dec:	e008      	b.n	8012e00 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012dee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d104      	bne.n	8012e00 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012df6:	68b8      	ldr	r0, [r7, #8]
 8012df8:	f7ff f802 	bl	8011e00 <tcp_close>
 8012dfc:	4603      	mov	r3, r0
 8012dfe:	e000      	b.n	8012e02 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012e00:	2300      	movs	r3, #0
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3710      	adds	r7, #16
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd80      	pop	{r7, pc}
 8012e0a:	bf00      	nop
 8012e0c:	080237a8 	.word	0x080237a8
 8012e10:	08023d18 	.word	0x08023d18
 8012e14:	080237ec 	.word	0x080237ec

08012e18 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b086      	sub	sp, #24
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	4603      	mov	r3, r0
 8012e20:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	db01      	blt.n	8012e2e <tcp_kill_prio+0x16>
 8012e2a:	79fb      	ldrb	r3, [r7, #7]
 8012e2c:	e000      	b.n	8012e30 <tcp_kill_prio+0x18>
 8012e2e:	237f      	movs	r3, #127	@ 0x7f
 8012e30:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012e32:	7afb      	ldrb	r3, [r7, #11]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d034      	beq.n	8012ea2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012e38:	7afb      	ldrb	r3, [r7, #11]
 8012e3a:	3b01      	subs	r3, #1
 8012e3c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012e3e:	2300      	movs	r3, #0
 8012e40:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012e42:	2300      	movs	r3, #0
 8012e44:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e46:	4b19      	ldr	r3, [pc, #100]	@ (8012eac <tcp_kill_prio+0x94>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	617b      	str	r3, [r7, #20]
 8012e4c:	e01f      	b.n	8012e8e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012e4e:	697b      	ldr	r3, [r7, #20]
 8012e50:	7d5b      	ldrb	r3, [r3, #21]
 8012e52:	7afa      	ldrb	r2, [r7, #11]
 8012e54:	429a      	cmp	r2, r3
 8012e56:	d80c      	bhi.n	8012e72 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012e5c:	7afa      	ldrb	r2, [r7, #11]
 8012e5e:	429a      	cmp	r2, r3
 8012e60:	d112      	bne.n	8012e88 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012e62:	4b13      	ldr	r3, [pc, #76]	@ (8012eb0 <tcp_kill_prio+0x98>)
 8012e64:	681a      	ldr	r2, [r3, #0]
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	6a1b      	ldr	r3, [r3, #32]
 8012e6a:	1ad3      	subs	r3, r2, r3
 8012e6c:	68fa      	ldr	r2, [r7, #12]
 8012e6e:	429a      	cmp	r2, r3
 8012e70:	d80a      	bhi.n	8012e88 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012e72:	4b0f      	ldr	r3, [pc, #60]	@ (8012eb0 <tcp_kill_prio+0x98>)
 8012e74:	681a      	ldr	r2, [r3, #0]
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	6a1b      	ldr	r3, [r3, #32]
 8012e7a:	1ad3      	subs	r3, r2, r3
 8012e7c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012e7e:	697b      	ldr	r3, [r7, #20]
 8012e80:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012e82:	697b      	ldr	r3, [r7, #20]
 8012e84:	7d5b      	ldrb	r3, [r3, #21]
 8012e86:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012e88:	697b      	ldr	r3, [r7, #20]
 8012e8a:	68db      	ldr	r3, [r3, #12]
 8012e8c:	617b      	str	r3, [r7, #20]
 8012e8e:	697b      	ldr	r3, [r7, #20]
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d1dc      	bne.n	8012e4e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012e94:	693b      	ldr	r3, [r7, #16]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d004      	beq.n	8012ea4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012e9a:	6938      	ldr	r0, [r7, #16]
 8012e9c:	f7ff f8f6 	bl	801208c <tcp_abort>
 8012ea0:	e000      	b.n	8012ea4 <tcp_kill_prio+0x8c>
    return;
 8012ea2:	bf00      	nop
  }
}
 8012ea4:	3718      	adds	r7, #24
 8012ea6:	46bd      	mov	sp, r7
 8012ea8:	bd80      	pop	{r7, pc}
 8012eaa:	bf00      	nop
 8012eac:	2001267c 	.word	0x2001267c
 8012eb0:	20012670 	.word	0x20012670

08012eb4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012eb4:	b580      	push	{r7, lr}
 8012eb6:	b086      	sub	sp, #24
 8012eb8:	af00      	add	r7, sp, #0
 8012eba:	4603      	mov	r3, r0
 8012ebc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012ebe:	79fb      	ldrb	r3, [r7, #7]
 8012ec0:	2b08      	cmp	r3, #8
 8012ec2:	d009      	beq.n	8012ed8 <tcp_kill_state+0x24>
 8012ec4:	79fb      	ldrb	r3, [r7, #7]
 8012ec6:	2b09      	cmp	r3, #9
 8012ec8:	d006      	beq.n	8012ed8 <tcp_kill_state+0x24>
 8012eca:	4b1a      	ldr	r3, [pc, #104]	@ (8012f34 <tcp_kill_state+0x80>)
 8012ecc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8012ed0:	4919      	ldr	r1, [pc, #100]	@ (8012f38 <tcp_kill_state+0x84>)
 8012ed2:	481a      	ldr	r0, [pc, #104]	@ (8012f3c <tcp_kill_state+0x88>)
 8012ed4:	f00b fa02 	bl	801e2dc <iprintf>

  inactivity = 0;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012edc:	2300      	movs	r3, #0
 8012ede:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ee0:	4b17      	ldr	r3, [pc, #92]	@ (8012f40 <tcp_kill_state+0x8c>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	617b      	str	r3, [r7, #20]
 8012ee6:	e017      	b.n	8012f18 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012ee8:	697b      	ldr	r3, [r7, #20]
 8012eea:	7d1b      	ldrb	r3, [r3, #20]
 8012eec:	79fa      	ldrb	r2, [r7, #7]
 8012eee:	429a      	cmp	r2, r3
 8012ef0:	d10f      	bne.n	8012f12 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012ef2:	4b14      	ldr	r3, [pc, #80]	@ (8012f44 <tcp_kill_state+0x90>)
 8012ef4:	681a      	ldr	r2, [r3, #0]
 8012ef6:	697b      	ldr	r3, [r7, #20]
 8012ef8:	6a1b      	ldr	r3, [r3, #32]
 8012efa:	1ad3      	subs	r3, r2, r3
 8012efc:	68fa      	ldr	r2, [r7, #12]
 8012efe:	429a      	cmp	r2, r3
 8012f00:	d807      	bhi.n	8012f12 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012f02:	4b10      	ldr	r3, [pc, #64]	@ (8012f44 <tcp_kill_state+0x90>)
 8012f04:	681a      	ldr	r2, [r3, #0]
 8012f06:	697b      	ldr	r3, [r7, #20]
 8012f08:	6a1b      	ldr	r3, [r3, #32]
 8012f0a:	1ad3      	subs	r3, r2, r3
 8012f0c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f12:	697b      	ldr	r3, [r7, #20]
 8012f14:	68db      	ldr	r3, [r3, #12]
 8012f16:	617b      	str	r3, [r7, #20]
 8012f18:	697b      	ldr	r3, [r7, #20]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d1e4      	bne.n	8012ee8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012f1e:	693b      	ldr	r3, [r7, #16]
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d003      	beq.n	8012f2c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012f24:	2100      	movs	r1, #0
 8012f26:	6938      	ldr	r0, [r7, #16]
 8012f28:	f7fe fff2 	bl	8011f10 <tcp_abandon>
  }
}
 8012f2c:	bf00      	nop
 8012f2e:	3718      	adds	r7, #24
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd80      	pop	{r7, pc}
 8012f34:	080237a8 	.word	0x080237a8
 8012f38:	08023d34 	.word	0x08023d34
 8012f3c:	080237ec 	.word	0x080237ec
 8012f40:	2001267c 	.word	0x2001267c
 8012f44:	20012670 	.word	0x20012670

08012f48 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b084      	sub	sp, #16
 8012f4c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012f52:	2300      	movs	r3, #0
 8012f54:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f56:	4b12      	ldr	r3, [pc, #72]	@ (8012fa0 <tcp_kill_timewait+0x58>)
 8012f58:	681b      	ldr	r3, [r3, #0]
 8012f5a:	60fb      	str	r3, [r7, #12]
 8012f5c:	e012      	b.n	8012f84 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012f5e:	4b11      	ldr	r3, [pc, #68]	@ (8012fa4 <tcp_kill_timewait+0x5c>)
 8012f60:	681a      	ldr	r2, [r3, #0]
 8012f62:	68fb      	ldr	r3, [r7, #12]
 8012f64:	6a1b      	ldr	r3, [r3, #32]
 8012f66:	1ad3      	subs	r3, r2, r3
 8012f68:	687a      	ldr	r2, [r7, #4]
 8012f6a:	429a      	cmp	r2, r3
 8012f6c:	d807      	bhi.n	8012f7e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8012fa4 <tcp_kill_timewait+0x5c>)
 8012f70:	681a      	ldr	r2, [r3, #0]
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	6a1b      	ldr	r3, [r3, #32]
 8012f76:	1ad3      	subs	r3, r2, r3
 8012f78:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	68db      	ldr	r3, [r3, #12]
 8012f82:	60fb      	str	r3, [r7, #12]
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d1e9      	bne.n	8012f5e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012f8a:	68bb      	ldr	r3, [r7, #8]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d002      	beq.n	8012f96 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012f90:	68b8      	ldr	r0, [r7, #8]
 8012f92:	f7ff f87b 	bl	801208c <tcp_abort>
  }
}
 8012f96:	bf00      	nop
 8012f98:	3710      	adds	r7, #16
 8012f9a:	46bd      	mov	sp, r7
 8012f9c:	bd80      	pop	{r7, pc}
 8012f9e:	bf00      	nop
 8012fa0:	20012680 	.word	0x20012680
 8012fa4:	20012670 	.word	0x20012670

08012fa8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012fa8:	b580      	push	{r7, lr}
 8012faa:	b082      	sub	sp, #8
 8012fac:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8012fae:	4b10      	ldr	r3, [pc, #64]	@ (8012ff0 <tcp_handle_closepend+0x48>)
 8012fb0:	681b      	ldr	r3, [r3, #0]
 8012fb2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012fb4:	e014      	b.n	8012fe0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	68db      	ldr	r3, [r3, #12]
 8012fba:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	8b5b      	ldrh	r3, [r3, #26]
 8012fc0:	f003 0308 	and.w	r3, r3, #8
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d009      	beq.n	8012fdc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	8b5b      	ldrh	r3, [r3, #26]
 8012fcc:	f023 0308 	bic.w	r3, r3, #8
 8012fd0:	b29a      	uxth	r2, r3
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012fd6:	6878      	ldr	r0, [r7, #4]
 8012fd8:	f7fe fea8 	bl	8011d2c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012fdc:	683b      	ldr	r3, [r7, #0]
 8012fde:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012fe0:	687b      	ldr	r3, [r7, #4]
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d1e7      	bne.n	8012fb6 <tcp_handle_closepend+0xe>
  }
}
 8012fe6:	bf00      	nop
 8012fe8:	bf00      	nop
 8012fea:	3708      	adds	r7, #8
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}
 8012ff0:	2001267c 	.word	0x2001267c

08012ff4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b084      	sub	sp, #16
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	4603      	mov	r3, r0
 8012ffc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012ffe:	2001      	movs	r0, #1
 8013000:	f7fd f9c4 	bl	801038c <memp_malloc>
 8013004:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	2b00      	cmp	r3, #0
 801300a:	d126      	bne.n	801305a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801300c:	f7ff ffcc 	bl	8012fa8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013010:	f7ff ff9a 	bl	8012f48 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013014:	2001      	movs	r0, #1
 8013016:	f7fd f9b9 	bl	801038c <memp_malloc>
 801301a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801301c:	68fb      	ldr	r3, [r7, #12]
 801301e:	2b00      	cmp	r3, #0
 8013020:	d11b      	bne.n	801305a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013022:	2009      	movs	r0, #9
 8013024:	f7ff ff46 	bl	8012eb4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013028:	2001      	movs	r0, #1
 801302a:	f7fd f9af 	bl	801038c <memp_malloc>
 801302e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	2b00      	cmp	r3, #0
 8013034:	d111      	bne.n	801305a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013036:	2008      	movs	r0, #8
 8013038:	f7ff ff3c 	bl	8012eb4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801303c:	2001      	movs	r0, #1
 801303e:	f7fd f9a5 	bl	801038c <memp_malloc>
 8013042:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	2b00      	cmp	r3, #0
 8013048:	d107      	bne.n	801305a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801304a:	79fb      	ldrb	r3, [r7, #7]
 801304c:	4618      	mov	r0, r3
 801304e:	f7ff fee3 	bl	8012e18 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013052:	2001      	movs	r0, #1
 8013054:	f7fd f99a 	bl	801038c <memp_malloc>
 8013058:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	2b00      	cmp	r3, #0
 801305e:	d03f      	beq.n	80130e0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013060:	229c      	movs	r2, #156	@ 0x9c
 8013062:	2100      	movs	r1, #0
 8013064:	68f8      	ldr	r0, [r7, #12]
 8013066:	f00b f9d8 	bl	801e41a <memset>
    pcb->prio = prio;
 801306a:	68fb      	ldr	r3, [r7, #12]
 801306c:	79fa      	ldrb	r2, [r7, #7]
 801306e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8013076:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801307a:	68fb      	ldr	r3, [r7, #12]
 801307c:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8013080:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	22ff      	movs	r2, #255	@ 0xff
 801308e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8013096:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013098:	68fb      	ldr	r3, [r7, #12]
 801309a:	2206      	movs	r2, #6
 801309c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80130a0:	68fb      	ldr	r3, [r7, #12]
 80130a2:	2206      	movs	r2, #6
 80130a4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80130a6:	68fb      	ldr	r3, [r7, #12]
 80130a8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80130ac:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	2201      	movs	r2, #1
 80130b2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80130b6:	4b0d      	ldr	r3, [pc, #52]	@ (80130ec <tcp_alloc+0xf8>)
 80130b8:	681a      	ldr	r2, [r3, #0]
 80130ba:	68fb      	ldr	r3, [r7, #12]
 80130bc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80130be:	4b0c      	ldr	r3, [pc, #48]	@ (80130f0 <tcp_alloc+0xfc>)
 80130c0:	781a      	ldrb	r2, [r3, #0]
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80130cc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	4a08      	ldr	r2, [pc, #32]	@ (80130f4 <tcp_alloc+0x100>)
 80130d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	4a07      	ldr	r2, [pc, #28]	@ (80130f8 <tcp_alloc+0x104>)
 80130dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80130e0:	68fb      	ldr	r3, [r7, #12]
}
 80130e2:	4618      	mov	r0, r3
 80130e4:	3710      	adds	r7, #16
 80130e6:	46bd      	mov	sp, r7
 80130e8:	bd80      	pop	{r7, pc}
 80130ea:	bf00      	nop
 80130ec:	20012670 	.word	0x20012670
 80130f0:	20012686 	.word	0x20012686
 80130f4:	08012dad 	.word	0x08012dad
 80130f8:	006ddd00 	.word	0x006ddd00

080130fc <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	b084      	sub	sp, #16
 8013100:	af00      	add	r7, sp, #0
 8013102:	4603      	mov	r3, r0
 8013104:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8013106:	2040      	movs	r0, #64	@ 0x40
 8013108:	f7ff ff74 	bl	8012ff4 <tcp_alloc>
 801310c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801310e:	68fb      	ldr	r3, [r7, #12]
}
 8013110:	4618      	mov	r0, r3
 8013112:	3710      	adds	r7, #16
 8013114:	46bd      	mov	sp, r7
 8013116:	bd80      	pop	{r7, pc}

08013118 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8013118:	b480      	push	{r7}
 801311a:	b083      	sub	sp, #12
 801311c:	af00      	add	r7, sp, #0
 801311e:	6078      	str	r0, [r7, #4]
 8013120:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	2b00      	cmp	r3, #0
 8013126:	d002      	beq.n	801312e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	683a      	ldr	r2, [r7, #0]
 801312c:	611a      	str	r2, [r3, #16]
  }
}
 801312e:	bf00      	nop
 8013130:	370c      	adds	r7, #12
 8013132:	46bd      	mov	sp, r7
 8013134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013138:	4770      	bx	lr
	...

0801313c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801313c:	b580      	push	{r7, lr}
 801313e:	b082      	sub	sp, #8
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
 8013144:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	2b00      	cmp	r3, #0
 801314a:	d00e      	beq.n	801316a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	7d1b      	ldrb	r3, [r3, #20]
 8013150:	2b01      	cmp	r3, #1
 8013152:	d106      	bne.n	8013162 <tcp_recv+0x26>
 8013154:	4b07      	ldr	r3, [pc, #28]	@ (8013174 <tcp_recv+0x38>)
 8013156:	f240 72df 	movw	r2, #2015	@ 0x7df
 801315a:	4907      	ldr	r1, [pc, #28]	@ (8013178 <tcp_recv+0x3c>)
 801315c:	4807      	ldr	r0, [pc, #28]	@ (801317c <tcp_recv+0x40>)
 801315e:	f00b f8bd 	bl	801e2dc <iprintf>
    pcb->recv = recv;
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	683a      	ldr	r2, [r7, #0]
 8013166:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 801316a:	bf00      	nop
 801316c:	3708      	adds	r7, #8
 801316e:	46bd      	mov	sp, r7
 8013170:	bd80      	pop	{r7, pc}
 8013172:	bf00      	nop
 8013174:	080237a8 	.word	0x080237a8
 8013178:	08023d44 	.word	0x08023d44
 801317c:	080237ec 	.word	0x080237ec

08013180 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013180:	b580      	push	{r7, lr}
 8013182:	b082      	sub	sp, #8
 8013184:	af00      	add	r7, sp, #0
 8013186:	6078      	str	r0, [r7, #4]
 8013188:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d00e      	beq.n	80131ae <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	7d1b      	ldrb	r3, [r3, #20]
 8013194:	2b01      	cmp	r3, #1
 8013196:	d106      	bne.n	80131a6 <tcp_sent+0x26>
 8013198:	4b07      	ldr	r3, [pc, #28]	@ (80131b8 <tcp_sent+0x38>)
 801319a:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 801319e:	4907      	ldr	r1, [pc, #28]	@ (80131bc <tcp_sent+0x3c>)
 80131a0:	4807      	ldr	r0, [pc, #28]	@ (80131c0 <tcp_sent+0x40>)
 80131a2:	f00b f89b 	bl	801e2dc <iprintf>
    pcb->sent = sent;
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	683a      	ldr	r2, [r7, #0]
 80131aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 80131ae:	bf00      	nop
 80131b0:	3708      	adds	r7, #8
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
 80131b6:	bf00      	nop
 80131b8:	080237a8 	.word	0x080237a8
 80131bc:	08023d6c 	.word	0x08023d6c
 80131c0:	080237ec 	.word	0x080237ec

080131c4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80131c4:	b580      	push	{r7, lr}
 80131c6:	b082      	sub	sp, #8
 80131c8:	af00      	add	r7, sp, #0
 80131ca:	6078      	str	r0, [r7, #4]
 80131cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d00e      	beq.n	80131f2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	7d1b      	ldrb	r3, [r3, #20]
 80131d8:	2b01      	cmp	r3, #1
 80131da:	d106      	bne.n	80131ea <tcp_err+0x26>
 80131dc:	4b07      	ldr	r3, [pc, #28]	@ (80131fc <tcp_err+0x38>)
 80131de:	f640 020d 	movw	r2, #2061	@ 0x80d
 80131e2:	4907      	ldr	r1, [pc, #28]	@ (8013200 <tcp_err+0x3c>)
 80131e4:	4807      	ldr	r0, [pc, #28]	@ (8013204 <tcp_err+0x40>)
 80131e6:	f00b f879 	bl	801e2dc <iprintf>
    pcb->errf = err;
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	683a      	ldr	r2, [r7, #0]
 80131ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 80131f2:	bf00      	nop
 80131f4:	3708      	adds	r7, #8
 80131f6:	46bd      	mov	sp, r7
 80131f8:	bd80      	pop	{r7, pc}
 80131fa:	bf00      	nop
 80131fc:	080237a8 	.word	0x080237a8
 8013200:	08023d94 	.word	0x08023d94
 8013204:	080237ec 	.word	0x080237ec

08013208 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8013208:	b480      	push	{r7}
 801320a:	b085      	sub	sp, #20
 801320c:	af00      	add	r7, sp, #0
 801320e:	6078      	str	r0, [r7, #4]
 8013210:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d008      	beq.n	801322a <tcp_accept+0x22>
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	7d1b      	ldrb	r3, [r3, #20]
 801321c:	2b01      	cmp	r3, #1
 801321e:	d104      	bne.n	801322a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8013220:	687b      	ldr	r3, [r7, #4]
 8013222:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	683a      	ldr	r2, [r7, #0]
 8013228:	619a      	str	r2, [r3, #24]
  }
}
 801322a:	bf00      	nop
 801322c:	3714      	adds	r7, #20
 801322e:	46bd      	mov	sp, r7
 8013230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013234:	4770      	bx	lr
	...

08013238 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8013238:	b580      	push	{r7, lr}
 801323a:	b084      	sub	sp, #16
 801323c:	af00      	add	r7, sp, #0
 801323e:	60f8      	str	r0, [r7, #12]
 8013240:	60b9      	str	r1, [r7, #8]
 8013242:	4613      	mov	r3, r2
 8013244:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8013246:	68fb      	ldr	r3, [r7, #12]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d107      	bne.n	801325c <tcp_poll+0x24>
 801324c:	4b0e      	ldr	r3, [pc, #56]	@ (8013288 <tcp_poll+0x50>)
 801324e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8013252:	490e      	ldr	r1, [pc, #56]	@ (801328c <tcp_poll+0x54>)
 8013254:	480e      	ldr	r0, [pc, #56]	@ (8013290 <tcp_poll+0x58>)
 8013256:	f00b f841 	bl	801e2dc <iprintf>
 801325a:	e011      	b.n	8013280 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	7d1b      	ldrb	r3, [r3, #20]
 8013260:	2b01      	cmp	r3, #1
 8013262:	d106      	bne.n	8013272 <tcp_poll+0x3a>
 8013264:	4b08      	ldr	r3, [pc, #32]	@ (8013288 <tcp_poll+0x50>)
 8013266:	f640 023e 	movw	r2, #2110	@ 0x83e
 801326a:	490a      	ldr	r1, [pc, #40]	@ (8013294 <tcp_poll+0x5c>)
 801326c:	4808      	ldr	r0, [pc, #32]	@ (8013290 <tcp_poll+0x58>)
 801326e:	f00b f835 	bl	801e2dc <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	68ba      	ldr	r2, [r7, #8]
 8013276:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801327a:	68fb      	ldr	r3, [r7, #12]
 801327c:	79fa      	ldrb	r2, [r7, #7]
 801327e:	775a      	strb	r2, [r3, #29]
}
 8013280:	3710      	adds	r7, #16
 8013282:	46bd      	mov	sp, r7
 8013284:	bd80      	pop	{r7, pc}
 8013286:	bf00      	nop
 8013288:	080237a8 	.word	0x080237a8
 801328c:	08023dbc 	.word	0x08023dbc
 8013290:	080237ec 	.word	0x080237ec
 8013294:	08023dd4 	.word	0x08023dd4

08013298 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b082      	sub	sp, #8
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d107      	bne.n	80132b6 <tcp_pcb_purge+0x1e>
 80132a6:	4b21      	ldr	r3, [pc, #132]	@ (801332c <tcp_pcb_purge+0x94>)
 80132a8:	f640 0251 	movw	r2, #2129	@ 0x851
 80132ac:	4920      	ldr	r1, [pc, #128]	@ (8013330 <tcp_pcb_purge+0x98>)
 80132ae:	4821      	ldr	r0, [pc, #132]	@ (8013334 <tcp_pcb_purge+0x9c>)
 80132b0:	f00b f814 	bl	801e2dc <iprintf>
 80132b4:	e037      	b.n	8013326 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	7d1b      	ldrb	r3, [r3, #20]
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d033      	beq.n	8013326 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80132c2:	2b0a      	cmp	r3, #10
 80132c4:	d02f      	beq.n	8013326 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80132ca:	2b01      	cmp	r3, #1
 80132cc:	d02b      	beq.n	8013326 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d007      	beq.n	80132e6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80132da:	4618      	mov	r0, r3
 80132dc:	f7fd ff7c 	bl	80111d8 <pbuf_free>
      pcb->refused_data = NULL;
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	2200      	movs	r2, #0
 80132e4:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80132e6:	687b      	ldr	r3, [r7, #4]
 80132e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	d002      	beq.n	80132f4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80132ee:	6878      	ldr	r0, [r7, #4]
 80132f0:	f000 f986 	bl	8013600 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80132fa:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013300:	4618      	mov	r0, r3
 8013302:	f7ff fcf9 	bl	8012cf8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801330a:	4618      	mov	r0, r3
 801330c:	f7ff fcf4 	bl	8012cf8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	2200      	movs	r2, #0
 8013314:	66da      	str	r2, [r3, #108]	@ 0x6c
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	2200      	movs	r2, #0
 8013322:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8013326:	3708      	adds	r7, #8
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}
 801332c:	080237a8 	.word	0x080237a8
 8013330:	08023df4 	.word	0x08023df4
 8013334:	080237ec 	.word	0x080237ec

08013338 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013342:	683b      	ldr	r3, [r7, #0]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d106      	bne.n	8013356 <tcp_pcb_remove+0x1e>
 8013348:	4b3e      	ldr	r3, [pc, #248]	@ (8013444 <tcp_pcb_remove+0x10c>)
 801334a:	f640 0283 	movw	r2, #2179	@ 0x883
 801334e:	493e      	ldr	r1, [pc, #248]	@ (8013448 <tcp_pcb_remove+0x110>)
 8013350:	483e      	ldr	r0, [pc, #248]	@ (801344c <tcp_pcb_remove+0x114>)
 8013352:	f00a ffc3 	bl	801e2dc <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	2b00      	cmp	r3, #0
 801335a:	d106      	bne.n	801336a <tcp_pcb_remove+0x32>
 801335c:	4b39      	ldr	r3, [pc, #228]	@ (8013444 <tcp_pcb_remove+0x10c>)
 801335e:	f640 0284 	movw	r2, #2180	@ 0x884
 8013362:	493b      	ldr	r1, [pc, #236]	@ (8013450 <tcp_pcb_remove+0x118>)
 8013364:	4839      	ldr	r0, [pc, #228]	@ (801344c <tcp_pcb_remove+0x114>)
 8013366:	f00a ffb9 	bl	801e2dc <iprintf>

  TCP_RMV(pcblist, pcb);
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	683a      	ldr	r2, [r7, #0]
 8013370:	429a      	cmp	r2, r3
 8013372:	d105      	bne.n	8013380 <tcp_pcb_remove+0x48>
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	68da      	ldr	r2, [r3, #12]
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	601a      	str	r2, [r3, #0]
 801337e:	e013      	b.n	80133a8 <tcp_pcb_remove+0x70>
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	60fb      	str	r3, [r7, #12]
 8013386:	e00c      	b.n	80133a2 <tcp_pcb_remove+0x6a>
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	68db      	ldr	r3, [r3, #12]
 801338c:	683a      	ldr	r2, [r7, #0]
 801338e:	429a      	cmp	r2, r3
 8013390:	d104      	bne.n	801339c <tcp_pcb_remove+0x64>
 8013392:	683b      	ldr	r3, [r7, #0]
 8013394:	68da      	ldr	r2, [r3, #12]
 8013396:	68fb      	ldr	r3, [r7, #12]
 8013398:	60da      	str	r2, [r3, #12]
 801339a:	e005      	b.n	80133a8 <tcp_pcb_remove+0x70>
 801339c:	68fb      	ldr	r3, [r7, #12]
 801339e:	68db      	ldr	r3, [r3, #12]
 80133a0:	60fb      	str	r3, [r7, #12]
 80133a2:	68fb      	ldr	r3, [r7, #12]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d1ef      	bne.n	8013388 <tcp_pcb_remove+0x50>
 80133a8:	683b      	ldr	r3, [r7, #0]
 80133aa:	2200      	movs	r2, #0
 80133ac:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80133ae:	6838      	ldr	r0, [r7, #0]
 80133b0:	f7ff ff72 	bl	8013298 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80133b4:	683b      	ldr	r3, [r7, #0]
 80133b6:	7d1b      	ldrb	r3, [r3, #20]
 80133b8:	2b0a      	cmp	r3, #10
 80133ba:	d013      	beq.n	80133e4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80133bc:	683b      	ldr	r3, [r7, #0]
 80133be:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80133c0:	2b01      	cmp	r3, #1
 80133c2:	d00f      	beq.n	80133e4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80133c4:	683b      	ldr	r3, [r7, #0]
 80133c6:	8b5b      	ldrh	r3, [r3, #26]
 80133c8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d009      	beq.n	80133e4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	8b5b      	ldrh	r3, [r3, #26]
 80133d4:	f043 0302 	orr.w	r3, r3, #2
 80133d8:	b29a      	uxth	r2, r3
 80133da:	683b      	ldr	r3, [r7, #0]
 80133dc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80133de:	6838      	ldr	r0, [r7, #0]
 80133e0:	f003 fbc0 	bl	8016b64 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	7d1b      	ldrb	r3, [r3, #20]
 80133e8:	2b01      	cmp	r3, #1
 80133ea:	d020      	beq.n	801342e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	d006      	beq.n	8013402 <tcp_pcb_remove+0xca>
 80133f4:	4b13      	ldr	r3, [pc, #76]	@ (8013444 <tcp_pcb_remove+0x10c>)
 80133f6:	f640 0293 	movw	r2, #2195	@ 0x893
 80133fa:	4916      	ldr	r1, [pc, #88]	@ (8013454 <tcp_pcb_remove+0x11c>)
 80133fc:	4813      	ldr	r0, [pc, #76]	@ (801344c <tcp_pcb_remove+0x114>)
 80133fe:	f00a ff6d 	bl	801e2dc <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013402:	683b      	ldr	r3, [r7, #0]
 8013404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013406:	2b00      	cmp	r3, #0
 8013408:	d006      	beq.n	8013418 <tcp_pcb_remove+0xe0>
 801340a:	4b0e      	ldr	r3, [pc, #56]	@ (8013444 <tcp_pcb_remove+0x10c>)
 801340c:	f640 0294 	movw	r2, #2196	@ 0x894
 8013410:	4911      	ldr	r1, [pc, #68]	@ (8013458 <tcp_pcb_remove+0x120>)
 8013412:	480e      	ldr	r0, [pc, #56]	@ (801344c <tcp_pcb_remove+0x114>)
 8013414:	f00a ff62 	bl	801e2dc <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801341c:	2b00      	cmp	r3, #0
 801341e:	d006      	beq.n	801342e <tcp_pcb_remove+0xf6>
 8013420:	4b08      	ldr	r3, [pc, #32]	@ (8013444 <tcp_pcb_remove+0x10c>)
 8013422:	f640 0296 	movw	r2, #2198	@ 0x896
 8013426:	490d      	ldr	r1, [pc, #52]	@ (801345c <tcp_pcb_remove+0x124>)
 8013428:	4808      	ldr	r0, [pc, #32]	@ (801344c <tcp_pcb_remove+0x114>)
 801342a:	f00a ff57 	bl	801e2dc <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	2200      	movs	r2, #0
 8013432:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013434:	683b      	ldr	r3, [r7, #0]
 8013436:	2200      	movs	r2, #0
 8013438:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801343a:	bf00      	nop
 801343c:	3710      	adds	r7, #16
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}
 8013442:	bf00      	nop
 8013444:	080237a8 	.word	0x080237a8
 8013448:	08023e10 	.word	0x08023e10
 801344c:	080237ec 	.word	0x080237ec
 8013450:	08023e2c 	.word	0x08023e2c
 8013454:	08023e4c 	.word	0x08023e4c
 8013458:	08023e64 	.word	0x08023e64
 801345c:	08023e80 	.word	0x08023e80

08013460 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b082      	sub	sp, #8
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013468:	687b      	ldr	r3, [r7, #4]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d106      	bne.n	801347c <tcp_next_iss+0x1c>
 801346e:	4b0a      	ldr	r3, [pc, #40]	@ (8013498 <tcp_next_iss+0x38>)
 8013470:	f640 02af 	movw	r2, #2223	@ 0x8af
 8013474:	4909      	ldr	r1, [pc, #36]	@ (801349c <tcp_next_iss+0x3c>)
 8013476:	480a      	ldr	r0, [pc, #40]	@ (80134a0 <tcp_next_iss+0x40>)
 8013478:	f00a ff30 	bl	801e2dc <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801347c:	4b09      	ldr	r3, [pc, #36]	@ (80134a4 <tcp_next_iss+0x44>)
 801347e:	681a      	ldr	r2, [r3, #0]
 8013480:	4b09      	ldr	r3, [pc, #36]	@ (80134a8 <tcp_next_iss+0x48>)
 8013482:	681b      	ldr	r3, [r3, #0]
 8013484:	4413      	add	r3, r2
 8013486:	4a07      	ldr	r2, [pc, #28]	@ (80134a4 <tcp_next_iss+0x44>)
 8013488:	6013      	str	r3, [r2, #0]
  return iss;
 801348a:	4b06      	ldr	r3, [pc, #24]	@ (80134a4 <tcp_next_iss+0x44>)
 801348c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801348e:	4618      	mov	r0, r3
 8013490:	3708      	adds	r7, #8
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}
 8013496:	bf00      	nop
 8013498:	080237a8 	.word	0x080237a8
 801349c:	08023e98 	.word	0x08023e98
 80134a0:	080237ec 	.word	0x080237ec
 80134a4:	20000048 	.word	0x20000048
 80134a8:	20012670 	.word	0x20012670

080134ac <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b086      	sub	sp, #24
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	4603      	mov	r3, r0
 80134b4:	60b9      	str	r1, [r7, #8]
 80134b6:	607a      	str	r2, [r7, #4]
 80134b8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d106      	bne.n	80134ce <tcp_eff_send_mss_netif+0x22>
 80134c0:	4b14      	ldr	r3, [pc, #80]	@ (8013514 <tcp_eff_send_mss_netif+0x68>)
 80134c2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80134c6:	4914      	ldr	r1, [pc, #80]	@ (8013518 <tcp_eff_send_mss_netif+0x6c>)
 80134c8:	4814      	ldr	r0, [pc, #80]	@ (801351c <tcp_eff_send_mss_netif+0x70>)
 80134ca:	f00a ff07 	bl	801e2dc <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80134ce:	68bb      	ldr	r3, [r7, #8]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d101      	bne.n	80134d8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80134d4:	89fb      	ldrh	r3, [r7, #14]
 80134d6:	e019      	b.n	801350c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80134dc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80134de:	8afb      	ldrh	r3, [r7, #22]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d012      	beq.n	801350a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80134e4:	2328      	movs	r3, #40	@ 0x28
 80134e6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80134e8:	8afa      	ldrh	r2, [r7, #22]
 80134ea:	8abb      	ldrh	r3, [r7, #20]
 80134ec:	429a      	cmp	r2, r3
 80134ee:	d904      	bls.n	80134fa <tcp_eff_send_mss_netif+0x4e>
 80134f0:	8afa      	ldrh	r2, [r7, #22]
 80134f2:	8abb      	ldrh	r3, [r7, #20]
 80134f4:	1ad3      	subs	r3, r2, r3
 80134f6:	b29b      	uxth	r3, r3
 80134f8:	e000      	b.n	80134fc <tcp_eff_send_mss_netif+0x50>
 80134fa:	2300      	movs	r3, #0
 80134fc:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80134fe:	8a7a      	ldrh	r2, [r7, #18]
 8013500:	89fb      	ldrh	r3, [r7, #14]
 8013502:	4293      	cmp	r3, r2
 8013504:	bf28      	it	cs
 8013506:	4613      	movcs	r3, r2
 8013508:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801350a:	89fb      	ldrh	r3, [r7, #14]
}
 801350c:	4618      	mov	r0, r3
 801350e:	3718      	adds	r7, #24
 8013510:	46bd      	mov	sp, r7
 8013512:	bd80      	pop	{r7, pc}
 8013514:	080237a8 	.word	0x080237a8
 8013518:	08023eb4 	.word	0x08023eb4
 801351c:	080237ec 	.word	0x080237ec

08013520 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b084      	sub	sp, #16
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
 8013528:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	2b00      	cmp	r3, #0
 8013532:	d119      	bne.n	8013568 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013534:	4b10      	ldr	r3, [pc, #64]	@ (8013578 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013536:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801353a:	4910      	ldr	r1, [pc, #64]	@ (801357c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801353c:	4810      	ldr	r0, [pc, #64]	@ (8013580 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801353e:	f00a fecd 	bl	801e2dc <iprintf>

  while (pcb != NULL) {
 8013542:	e011      	b.n	8013568 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	681a      	ldr	r2, [r3, #0]
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	429a      	cmp	r2, r3
 801354e:	d108      	bne.n	8013562 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	68db      	ldr	r3, [r3, #12]
 8013554:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8013556:	68f8      	ldr	r0, [r7, #12]
 8013558:	f7fe fd98 	bl	801208c <tcp_abort>
      pcb = next;
 801355c:	68bb      	ldr	r3, [r7, #8]
 801355e:	60fb      	str	r3, [r7, #12]
 8013560:	e002      	b.n	8013568 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013562:	68fb      	ldr	r3, [r7, #12]
 8013564:	68db      	ldr	r3, [r3, #12]
 8013566:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013568:	68fb      	ldr	r3, [r7, #12]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d1ea      	bne.n	8013544 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801356e:	bf00      	nop
 8013570:	bf00      	nop
 8013572:	3710      	adds	r7, #16
 8013574:	46bd      	mov	sp, r7
 8013576:	bd80      	pop	{r7, pc}
 8013578:	080237a8 	.word	0x080237a8
 801357c:	08023edc 	.word	0x08023edc
 8013580:	080237ec 	.word	0x080237ec

08013584 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013584:	b580      	push	{r7, lr}
 8013586:	b084      	sub	sp, #16
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
 801358c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d02a      	beq.n	80135ea <tcp_netif_ip_addr_changed+0x66>
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d026      	beq.n	80135ea <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801359c:	4b15      	ldr	r3, [pc, #84]	@ (80135f4 <tcp_netif_ip_addr_changed+0x70>)
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	4619      	mov	r1, r3
 80135a2:	6878      	ldr	r0, [r7, #4]
 80135a4:	f7ff ffbc 	bl	8013520 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80135a8:	4b13      	ldr	r3, [pc, #76]	@ (80135f8 <tcp_netif_ip_addr_changed+0x74>)
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	4619      	mov	r1, r3
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f7ff ffb6 	bl	8013520 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d017      	beq.n	80135ea <tcp_netif_ip_addr_changed+0x66>
 80135ba:	683b      	ldr	r3, [r7, #0]
 80135bc:	681b      	ldr	r3, [r3, #0]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d013      	beq.n	80135ea <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80135c2:	4b0e      	ldr	r3, [pc, #56]	@ (80135fc <tcp_netif_ip_addr_changed+0x78>)
 80135c4:	681b      	ldr	r3, [r3, #0]
 80135c6:	60fb      	str	r3, [r7, #12]
 80135c8:	e00c      	b.n	80135e4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	681a      	ldr	r2, [r3, #0]
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	429a      	cmp	r2, r3
 80135d4:	d103      	bne.n	80135de <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	681a      	ldr	r2, [r3, #0]
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80135de:	68fb      	ldr	r3, [r7, #12]
 80135e0:	68db      	ldr	r3, [r3, #12]
 80135e2:	60fb      	str	r3, [r7, #12]
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d1ef      	bne.n	80135ca <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80135ea:	bf00      	nop
 80135ec:	3710      	adds	r7, #16
 80135ee:	46bd      	mov	sp, r7
 80135f0:	bd80      	pop	{r7, pc}
 80135f2:	bf00      	nop
 80135f4:	2001267c 	.word	0x2001267c
 80135f8:	20012674 	.word	0x20012674
 80135fc:	20012678 	.word	0x20012678

08013600 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	b082      	sub	sp, #8
 8013604:	af00      	add	r7, sp, #0
 8013606:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013608:	687b      	ldr	r3, [r7, #4]
 801360a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801360c:	2b00      	cmp	r3, #0
 801360e:	d007      	beq.n	8013620 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013614:	4618      	mov	r0, r3
 8013616:	f7ff fb6f 	bl	8012cf8 <tcp_segs_free>
    pcb->ooseq = NULL;
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	2200      	movs	r2, #0
 801361e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013620:	bf00      	nop
 8013622:	3708      	adds	r7, #8
 8013624:	46bd      	mov	sp, r7
 8013626:	bd80      	pop	{r7, pc}

08013628 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013628:	b590      	push	{r4, r7, lr}
 801362a:	b08d      	sub	sp, #52	@ 0x34
 801362c:	af04      	add	r7, sp, #16
 801362e:	6078      	str	r0, [r7, #4]
 8013630:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d105      	bne.n	8013644 <tcp_input+0x1c>
 8013638:	4b9b      	ldr	r3, [pc, #620]	@ (80138a8 <tcp_input+0x280>)
 801363a:	2283      	movs	r2, #131	@ 0x83
 801363c:	499b      	ldr	r1, [pc, #620]	@ (80138ac <tcp_input+0x284>)
 801363e:	489c      	ldr	r0, [pc, #624]	@ (80138b0 <tcp_input+0x288>)
 8013640:	f00a fe4c 	bl	801e2dc <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	685b      	ldr	r3, [r3, #4]
 8013648:	4a9a      	ldr	r2, [pc, #616]	@ (80138b4 <tcp_input+0x28c>)
 801364a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	895b      	ldrh	r3, [r3, #10]
 8013650:	2b13      	cmp	r3, #19
 8013652:	f240 83d1 	bls.w	8013df8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013656:	4b98      	ldr	r3, [pc, #608]	@ (80138b8 <tcp_input+0x290>)
 8013658:	695b      	ldr	r3, [r3, #20]
 801365a:	4a97      	ldr	r2, [pc, #604]	@ (80138b8 <tcp_input+0x290>)
 801365c:	6812      	ldr	r2, [r2, #0]
 801365e:	4611      	mov	r1, r2
 8013660:	4618      	mov	r0, r3
 8013662:	f008 fb5d 	bl	801bd20 <ip4_addr_isbroadcast_u32>
 8013666:	4603      	mov	r3, r0
 8013668:	2b00      	cmp	r3, #0
 801366a:	f040 83c7 	bne.w	8013dfc <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801366e:	4b92      	ldr	r3, [pc, #584]	@ (80138b8 <tcp_input+0x290>)
 8013670:	695b      	ldr	r3, [r3, #20]
 8013672:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013676:	2be0      	cmp	r3, #224	@ 0xe0
 8013678:	f000 83c0 	beq.w	8013dfc <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801367c:	4b8d      	ldr	r3, [pc, #564]	@ (80138b4 <tcp_input+0x28c>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	899b      	ldrh	r3, [r3, #12]
 8013682:	b29b      	uxth	r3, r3
 8013684:	4618      	mov	r0, r3
 8013686:	f7fb febb 	bl	800f400 <lwip_htons>
 801368a:	4603      	mov	r3, r0
 801368c:	0b1b      	lsrs	r3, r3, #12
 801368e:	b29b      	uxth	r3, r3
 8013690:	b2db      	uxtb	r3, r3
 8013692:	009b      	lsls	r3, r3, #2
 8013694:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8013696:	7cbb      	ldrb	r3, [r7, #18]
 8013698:	2b13      	cmp	r3, #19
 801369a:	f240 83b1 	bls.w	8013e00 <tcp_input+0x7d8>
 801369e:	7cbb      	ldrb	r3, [r7, #18]
 80136a0:	b29a      	uxth	r2, r3
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	891b      	ldrh	r3, [r3, #8]
 80136a6:	429a      	cmp	r2, r3
 80136a8:	f200 83aa 	bhi.w	8013e00 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80136ac:	7cbb      	ldrb	r3, [r7, #18]
 80136ae:	b29b      	uxth	r3, r3
 80136b0:	3b14      	subs	r3, #20
 80136b2:	b29a      	uxth	r2, r3
 80136b4:	4b81      	ldr	r3, [pc, #516]	@ (80138bc <tcp_input+0x294>)
 80136b6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80136b8:	4b81      	ldr	r3, [pc, #516]	@ (80138c0 <tcp_input+0x298>)
 80136ba:	2200      	movs	r2, #0
 80136bc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	895a      	ldrh	r2, [r3, #10]
 80136c2:	7cbb      	ldrb	r3, [r7, #18]
 80136c4:	b29b      	uxth	r3, r3
 80136c6:	429a      	cmp	r2, r3
 80136c8:	d309      	bcc.n	80136de <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80136ca:	4b7c      	ldr	r3, [pc, #496]	@ (80138bc <tcp_input+0x294>)
 80136cc:	881a      	ldrh	r2, [r3, #0]
 80136ce:	4b7d      	ldr	r3, [pc, #500]	@ (80138c4 <tcp_input+0x29c>)
 80136d0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80136d2:	7cbb      	ldrb	r3, [r7, #18]
 80136d4:	4619      	mov	r1, r3
 80136d6:	6878      	ldr	r0, [r7, #4]
 80136d8:	f7fd fcf8 	bl	80110cc <pbuf_remove_header>
 80136dc:	e04e      	b.n	801377c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d105      	bne.n	80136f2 <tcp_input+0xca>
 80136e6:	4b70      	ldr	r3, [pc, #448]	@ (80138a8 <tcp_input+0x280>)
 80136e8:	22c2      	movs	r2, #194	@ 0xc2
 80136ea:	4977      	ldr	r1, [pc, #476]	@ (80138c8 <tcp_input+0x2a0>)
 80136ec:	4870      	ldr	r0, [pc, #448]	@ (80138b0 <tcp_input+0x288>)
 80136ee:	f00a fdf5 	bl	801e2dc <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80136f2:	2114      	movs	r1, #20
 80136f4:	6878      	ldr	r0, [r7, #4]
 80136f6:	f7fd fce9 	bl	80110cc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	895a      	ldrh	r2, [r3, #10]
 80136fe:	4b71      	ldr	r3, [pc, #452]	@ (80138c4 <tcp_input+0x29c>)
 8013700:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013702:	4b6e      	ldr	r3, [pc, #440]	@ (80138bc <tcp_input+0x294>)
 8013704:	881a      	ldrh	r2, [r3, #0]
 8013706:	4b6f      	ldr	r3, [pc, #444]	@ (80138c4 <tcp_input+0x29c>)
 8013708:	881b      	ldrh	r3, [r3, #0]
 801370a:	1ad3      	subs	r3, r2, r3
 801370c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801370e:	4b6d      	ldr	r3, [pc, #436]	@ (80138c4 <tcp_input+0x29c>)
 8013710:	881b      	ldrh	r3, [r3, #0]
 8013712:	4619      	mov	r1, r3
 8013714:	6878      	ldr	r0, [r7, #4]
 8013716:	f7fd fcd9 	bl	80110cc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	895b      	ldrh	r3, [r3, #10]
 8013720:	8a3a      	ldrh	r2, [r7, #16]
 8013722:	429a      	cmp	r2, r3
 8013724:	f200 836e 	bhi.w	8013e04 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	4a64      	ldr	r2, [pc, #400]	@ (80138c0 <tcp_input+0x298>)
 8013730:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013732:	687b      	ldr	r3, [r7, #4]
 8013734:	681b      	ldr	r3, [r3, #0]
 8013736:	8a3a      	ldrh	r2, [r7, #16]
 8013738:	4611      	mov	r1, r2
 801373a:	4618      	mov	r0, r3
 801373c:	f7fd fcc6 	bl	80110cc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	891a      	ldrh	r2, [r3, #8]
 8013744:	8a3b      	ldrh	r3, [r7, #16]
 8013746:	1ad3      	subs	r3, r2, r3
 8013748:	b29a      	uxth	r2, r3
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	895b      	ldrh	r3, [r3, #10]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d005      	beq.n	8013762 <tcp_input+0x13a>
 8013756:	4b54      	ldr	r3, [pc, #336]	@ (80138a8 <tcp_input+0x280>)
 8013758:	22df      	movs	r2, #223	@ 0xdf
 801375a:	495c      	ldr	r1, [pc, #368]	@ (80138cc <tcp_input+0x2a4>)
 801375c:	4854      	ldr	r0, [pc, #336]	@ (80138b0 <tcp_input+0x288>)
 801375e:	f00a fdbd 	bl	801e2dc <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013762:	687b      	ldr	r3, [r7, #4]
 8013764:	891a      	ldrh	r2, [r3, #8]
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	891b      	ldrh	r3, [r3, #8]
 801376c:	429a      	cmp	r2, r3
 801376e:	d005      	beq.n	801377c <tcp_input+0x154>
 8013770:	4b4d      	ldr	r3, [pc, #308]	@ (80138a8 <tcp_input+0x280>)
 8013772:	22e0      	movs	r2, #224	@ 0xe0
 8013774:	4956      	ldr	r1, [pc, #344]	@ (80138d0 <tcp_input+0x2a8>)
 8013776:	484e      	ldr	r0, [pc, #312]	@ (80138b0 <tcp_input+0x288>)
 8013778:	f00a fdb0 	bl	801e2dc <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801377c:	4b4d      	ldr	r3, [pc, #308]	@ (80138b4 <tcp_input+0x28c>)
 801377e:	681b      	ldr	r3, [r3, #0]
 8013780:	881b      	ldrh	r3, [r3, #0]
 8013782:	b29b      	uxth	r3, r3
 8013784:	4a4b      	ldr	r2, [pc, #300]	@ (80138b4 <tcp_input+0x28c>)
 8013786:	6814      	ldr	r4, [r2, #0]
 8013788:	4618      	mov	r0, r3
 801378a:	f7fb fe39 	bl	800f400 <lwip_htons>
 801378e:	4603      	mov	r3, r0
 8013790:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013792:	4b48      	ldr	r3, [pc, #288]	@ (80138b4 <tcp_input+0x28c>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	885b      	ldrh	r3, [r3, #2]
 8013798:	b29b      	uxth	r3, r3
 801379a:	4a46      	ldr	r2, [pc, #280]	@ (80138b4 <tcp_input+0x28c>)
 801379c:	6814      	ldr	r4, [r2, #0]
 801379e:	4618      	mov	r0, r3
 80137a0:	f7fb fe2e 	bl	800f400 <lwip_htons>
 80137a4:	4603      	mov	r3, r0
 80137a6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80137a8:	4b42      	ldr	r3, [pc, #264]	@ (80138b4 <tcp_input+0x28c>)
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	685b      	ldr	r3, [r3, #4]
 80137ae:	4a41      	ldr	r2, [pc, #260]	@ (80138b4 <tcp_input+0x28c>)
 80137b0:	6814      	ldr	r4, [r2, #0]
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7fb fe39 	bl	800f42a <lwip_htonl>
 80137b8:	4603      	mov	r3, r0
 80137ba:	6063      	str	r3, [r4, #4]
 80137bc:	6863      	ldr	r3, [r4, #4]
 80137be:	4a45      	ldr	r2, [pc, #276]	@ (80138d4 <tcp_input+0x2ac>)
 80137c0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80137c2:	4b3c      	ldr	r3, [pc, #240]	@ (80138b4 <tcp_input+0x28c>)
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	689b      	ldr	r3, [r3, #8]
 80137c8:	4a3a      	ldr	r2, [pc, #232]	@ (80138b4 <tcp_input+0x28c>)
 80137ca:	6814      	ldr	r4, [r2, #0]
 80137cc:	4618      	mov	r0, r3
 80137ce:	f7fb fe2c 	bl	800f42a <lwip_htonl>
 80137d2:	4603      	mov	r3, r0
 80137d4:	60a3      	str	r3, [r4, #8]
 80137d6:	68a3      	ldr	r3, [r4, #8]
 80137d8:	4a3f      	ldr	r2, [pc, #252]	@ (80138d8 <tcp_input+0x2b0>)
 80137da:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80137dc:	4b35      	ldr	r3, [pc, #212]	@ (80138b4 <tcp_input+0x28c>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	89db      	ldrh	r3, [r3, #14]
 80137e2:	b29b      	uxth	r3, r3
 80137e4:	4a33      	ldr	r2, [pc, #204]	@ (80138b4 <tcp_input+0x28c>)
 80137e6:	6814      	ldr	r4, [r2, #0]
 80137e8:	4618      	mov	r0, r3
 80137ea:	f7fb fe09 	bl	800f400 <lwip_htons>
 80137ee:	4603      	mov	r3, r0
 80137f0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80137f2:	4b30      	ldr	r3, [pc, #192]	@ (80138b4 <tcp_input+0x28c>)
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	899b      	ldrh	r3, [r3, #12]
 80137f8:	b29b      	uxth	r3, r3
 80137fa:	4618      	mov	r0, r3
 80137fc:	f7fb fe00 	bl	800f400 <lwip_htons>
 8013800:	4603      	mov	r3, r0
 8013802:	b2db      	uxtb	r3, r3
 8013804:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013808:	b2da      	uxtb	r2, r3
 801380a:	4b34      	ldr	r3, [pc, #208]	@ (80138dc <tcp_input+0x2b4>)
 801380c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	891a      	ldrh	r2, [r3, #8]
 8013812:	4b33      	ldr	r3, [pc, #204]	@ (80138e0 <tcp_input+0x2b8>)
 8013814:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013816:	4b31      	ldr	r3, [pc, #196]	@ (80138dc <tcp_input+0x2b4>)
 8013818:	781b      	ldrb	r3, [r3, #0]
 801381a:	f003 0303 	and.w	r3, r3, #3
 801381e:	2b00      	cmp	r3, #0
 8013820:	d00c      	beq.n	801383c <tcp_input+0x214>
    tcplen++;
 8013822:	4b2f      	ldr	r3, [pc, #188]	@ (80138e0 <tcp_input+0x2b8>)
 8013824:	881b      	ldrh	r3, [r3, #0]
 8013826:	3301      	adds	r3, #1
 8013828:	b29a      	uxth	r2, r3
 801382a:	4b2d      	ldr	r3, [pc, #180]	@ (80138e0 <tcp_input+0x2b8>)
 801382c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	891a      	ldrh	r2, [r3, #8]
 8013832:	4b2b      	ldr	r3, [pc, #172]	@ (80138e0 <tcp_input+0x2b8>)
 8013834:	881b      	ldrh	r3, [r3, #0]
 8013836:	429a      	cmp	r2, r3
 8013838:	f200 82e6 	bhi.w	8013e08 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801383c:	2300      	movs	r3, #0
 801383e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013840:	4b28      	ldr	r3, [pc, #160]	@ (80138e4 <tcp_input+0x2bc>)
 8013842:	681b      	ldr	r3, [r3, #0]
 8013844:	61fb      	str	r3, [r7, #28]
 8013846:	e09d      	b.n	8013984 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013848:	69fb      	ldr	r3, [r7, #28]
 801384a:	7d1b      	ldrb	r3, [r3, #20]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d105      	bne.n	801385c <tcp_input+0x234>
 8013850:	4b15      	ldr	r3, [pc, #84]	@ (80138a8 <tcp_input+0x280>)
 8013852:	22fb      	movs	r2, #251	@ 0xfb
 8013854:	4924      	ldr	r1, [pc, #144]	@ (80138e8 <tcp_input+0x2c0>)
 8013856:	4816      	ldr	r0, [pc, #88]	@ (80138b0 <tcp_input+0x288>)
 8013858:	f00a fd40 	bl	801e2dc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801385c:	69fb      	ldr	r3, [r7, #28]
 801385e:	7d1b      	ldrb	r3, [r3, #20]
 8013860:	2b0a      	cmp	r3, #10
 8013862:	d105      	bne.n	8013870 <tcp_input+0x248>
 8013864:	4b10      	ldr	r3, [pc, #64]	@ (80138a8 <tcp_input+0x280>)
 8013866:	22fc      	movs	r2, #252	@ 0xfc
 8013868:	4920      	ldr	r1, [pc, #128]	@ (80138ec <tcp_input+0x2c4>)
 801386a:	4811      	ldr	r0, [pc, #68]	@ (80138b0 <tcp_input+0x288>)
 801386c:	f00a fd36 	bl	801e2dc <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013870:	69fb      	ldr	r3, [r7, #28]
 8013872:	7d1b      	ldrb	r3, [r3, #20]
 8013874:	2b01      	cmp	r3, #1
 8013876:	d105      	bne.n	8013884 <tcp_input+0x25c>
 8013878:	4b0b      	ldr	r3, [pc, #44]	@ (80138a8 <tcp_input+0x280>)
 801387a:	22fd      	movs	r2, #253	@ 0xfd
 801387c:	491c      	ldr	r1, [pc, #112]	@ (80138f0 <tcp_input+0x2c8>)
 801387e:	480c      	ldr	r0, [pc, #48]	@ (80138b0 <tcp_input+0x288>)
 8013880:	f00a fd2c 	bl	801e2dc <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013884:	69fb      	ldr	r3, [r7, #28]
 8013886:	7a1b      	ldrb	r3, [r3, #8]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d033      	beq.n	80138f4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801388c:	69fb      	ldr	r3, [r7, #28]
 801388e:	7a1a      	ldrb	r2, [r3, #8]
 8013890:	4b09      	ldr	r3, [pc, #36]	@ (80138b8 <tcp_input+0x290>)
 8013892:	685b      	ldr	r3, [r3, #4]
 8013894:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013898:	3301      	adds	r3, #1
 801389a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801389c:	429a      	cmp	r2, r3
 801389e:	d029      	beq.n	80138f4 <tcp_input+0x2cc>
      prev = pcb;
 80138a0:	69fb      	ldr	r3, [r7, #28]
 80138a2:	61bb      	str	r3, [r7, #24]
      continue;
 80138a4:	e06b      	b.n	801397e <tcp_input+0x356>
 80138a6:	bf00      	nop
 80138a8:	08023f10 	.word	0x08023f10
 80138ac:	08023f44 	.word	0x08023f44
 80138b0:	08023f5c 	.word	0x08023f5c
 80138b4:	20012698 	.word	0x20012698
 80138b8:	2000edb0 	.word	0x2000edb0
 80138bc:	2001269c 	.word	0x2001269c
 80138c0:	200126a0 	.word	0x200126a0
 80138c4:	2001269e 	.word	0x2001269e
 80138c8:	08023f84 	.word	0x08023f84
 80138cc:	08023f94 	.word	0x08023f94
 80138d0:	08023fa0 	.word	0x08023fa0
 80138d4:	200126a8 	.word	0x200126a8
 80138d8:	200126ac 	.word	0x200126ac
 80138dc:	200126b4 	.word	0x200126b4
 80138e0:	200126b2 	.word	0x200126b2
 80138e4:	2001267c 	.word	0x2001267c
 80138e8:	08023fc0 	.word	0x08023fc0
 80138ec:	08023fe8 	.word	0x08023fe8
 80138f0:	08024014 	.word	0x08024014
    }

    if (pcb->remote_port == tcphdr->src &&
 80138f4:	69fb      	ldr	r3, [r7, #28]
 80138f6:	8b1a      	ldrh	r2, [r3, #24]
 80138f8:	4b72      	ldr	r3, [pc, #456]	@ (8013ac4 <tcp_input+0x49c>)
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	881b      	ldrh	r3, [r3, #0]
 80138fe:	b29b      	uxth	r3, r3
 8013900:	429a      	cmp	r2, r3
 8013902:	d13a      	bne.n	801397a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013904:	69fb      	ldr	r3, [r7, #28]
 8013906:	8ada      	ldrh	r2, [r3, #22]
 8013908:	4b6e      	ldr	r3, [pc, #440]	@ (8013ac4 <tcp_input+0x49c>)
 801390a:	681b      	ldr	r3, [r3, #0]
 801390c:	885b      	ldrh	r3, [r3, #2]
 801390e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013910:	429a      	cmp	r2, r3
 8013912:	d132      	bne.n	801397a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013914:	69fb      	ldr	r3, [r7, #28]
 8013916:	685a      	ldr	r2, [r3, #4]
 8013918:	4b6b      	ldr	r3, [pc, #428]	@ (8013ac8 <tcp_input+0x4a0>)
 801391a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801391c:	429a      	cmp	r2, r3
 801391e:	d12c      	bne.n	801397a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013920:	69fb      	ldr	r3, [r7, #28]
 8013922:	681a      	ldr	r2, [r3, #0]
 8013924:	4b68      	ldr	r3, [pc, #416]	@ (8013ac8 <tcp_input+0x4a0>)
 8013926:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013928:	429a      	cmp	r2, r3
 801392a:	d126      	bne.n	801397a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801392c:	69fb      	ldr	r3, [r7, #28]
 801392e:	68db      	ldr	r3, [r3, #12]
 8013930:	69fa      	ldr	r2, [r7, #28]
 8013932:	429a      	cmp	r2, r3
 8013934:	d106      	bne.n	8013944 <tcp_input+0x31c>
 8013936:	4b65      	ldr	r3, [pc, #404]	@ (8013acc <tcp_input+0x4a4>)
 8013938:	f240 120d 	movw	r2, #269	@ 0x10d
 801393c:	4964      	ldr	r1, [pc, #400]	@ (8013ad0 <tcp_input+0x4a8>)
 801393e:	4865      	ldr	r0, [pc, #404]	@ (8013ad4 <tcp_input+0x4ac>)
 8013940:	f00a fccc 	bl	801e2dc <iprintf>
      if (prev != NULL) {
 8013944:	69bb      	ldr	r3, [r7, #24]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d00a      	beq.n	8013960 <tcp_input+0x338>
        prev->next = pcb->next;
 801394a:	69fb      	ldr	r3, [r7, #28]
 801394c:	68da      	ldr	r2, [r3, #12]
 801394e:	69bb      	ldr	r3, [r7, #24]
 8013950:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013952:	4b61      	ldr	r3, [pc, #388]	@ (8013ad8 <tcp_input+0x4b0>)
 8013954:	681a      	ldr	r2, [r3, #0]
 8013956:	69fb      	ldr	r3, [r7, #28]
 8013958:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801395a:	4a5f      	ldr	r2, [pc, #380]	@ (8013ad8 <tcp_input+0x4b0>)
 801395c:	69fb      	ldr	r3, [r7, #28]
 801395e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013960:	69fb      	ldr	r3, [r7, #28]
 8013962:	68db      	ldr	r3, [r3, #12]
 8013964:	69fa      	ldr	r2, [r7, #28]
 8013966:	429a      	cmp	r2, r3
 8013968:	d111      	bne.n	801398e <tcp_input+0x366>
 801396a:	4b58      	ldr	r3, [pc, #352]	@ (8013acc <tcp_input+0x4a4>)
 801396c:	f240 1215 	movw	r2, #277	@ 0x115
 8013970:	495a      	ldr	r1, [pc, #360]	@ (8013adc <tcp_input+0x4b4>)
 8013972:	4858      	ldr	r0, [pc, #352]	@ (8013ad4 <tcp_input+0x4ac>)
 8013974:	f00a fcb2 	bl	801e2dc <iprintf>
      break;
 8013978:	e009      	b.n	801398e <tcp_input+0x366>
    }
    prev = pcb;
 801397a:	69fb      	ldr	r3, [r7, #28]
 801397c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801397e:	69fb      	ldr	r3, [r7, #28]
 8013980:	68db      	ldr	r3, [r3, #12]
 8013982:	61fb      	str	r3, [r7, #28]
 8013984:	69fb      	ldr	r3, [r7, #28]
 8013986:	2b00      	cmp	r3, #0
 8013988:	f47f af5e 	bne.w	8013848 <tcp_input+0x220>
 801398c:	e000      	b.n	8013990 <tcp_input+0x368>
      break;
 801398e:	bf00      	nop
  }

  if (pcb == NULL) {
 8013990:	69fb      	ldr	r3, [r7, #28]
 8013992:	2b00      	cmp	r3, #0
 8013994:	f040 80aa 	bne.w	8013aec <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013998:	4b51      	ldr	r3, [pc, #324]	@ (8013ae0 <tcp_input+0x4b8>)
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	61fb      	str	r3, [r7, #28]
 801399e:	e03f      	b.n	8013a20 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80139a0:	69fb      	ldr	r3, [r7, #28]
 80139a2:	7d1b      	ldrb	r3, [r3, #20]
 80139a4:	2b0a      	cmp	r3, #10
 80139a6:	d006      	beq.n	80139b6 <tcp_input+0x38e>
 80139a8:	4b48      	ldr	r3, [pc, #288]	@ (8013acc <tcp_input+0x4a4>)
 80139aa:	f240 121f 	movw	r2, #287	@ 0x11f
 80139ae:	494d      	ldr	r1, [pc, #308]	@ (8013ae4 <tcp_input+0x4bc>)
 80139b0:	4848      	ldr	r0, [pc, #288]	@ (8013ad4 <tcp_input+0x4ac>)
 80139b2:	f00a fc93 	bl	801e2dc <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80139b6:	69fb      	ldr	r3, [r7, #28]
 80139b8:	7a1b      	ldrb	r3, [r3, #8]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d009      	beq.n	80139d2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80139be:	69fb      	ldr	r3, [r7, #28]
 80139c0:	7a1a      	ldrb	r2, [r3, #8]
 80139c2:	4b41      	ldr	r3, [pc, #260]	@ (8013ac8 <tcp_input+0x4a0>)
 80139c4:	685b      	ldr	r3, [r3, #4]
 80139c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80139ca:	3301      	adds	r3, #1
 80139cc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80139ce:	429a      	cmp	r2, r3
 80139d0:	d122      	bne.n	8013a18 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80139d2:	69fb      	ldr	r3, [r7, #28]
 80139d4:	8b1a      	ldrh	r2, [r3, #24]
 80139d6:	4b3b      	ldr	r3, [pc, #236]	@ (8013ac4 <tcp_input+0x49c>)
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	881b      	ldrh	r3, [r3, #0]
 80139dc:	b29b      	uxth	r3, r3
 80139de:	429a      	cmp	r2, r3
 80139e0:	d11b      	bne.n	8013a1a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 80139e2:	69fb      	ldr	r3, [r7, #28]
 80139e4:	8ada      	ldrh	r2, [r3, #22]
 80139e6:	4b37      	ldr	r3, [pc, #220]	@ (8013ac4 <tcp_input+0x49c>)
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	885b      	ldrh	r3, [r3, #2]
 80139ec:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80139ee:	429a      	cmp	r2, r3
 80139f0:	d113      	bne.n	8013a1a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80139f2:	69fb      	ldr	r3, [r7, #28]
 80139f4:	685a      	ldr	r2, [r3, #4]
 80139f6:	4b34      	ldr	r3, [pc, #208]	@ (8013ac8 <tcp_input+0x4a0>)
 80139f8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80139fa:	429a      	cmp	r2, r3
 80139fc:	d10d      	bne.n	8013a1a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80139fe:	69fb      	ldr	r3, [r7, #28]
 8013a00:	681a      	ldr	r2, [r3, #0]
 8013a02:	4b31      	ldr	r3, [pc, #196]	@ (8013ac8 <tcp_input+0x4a0>)
 8013a04:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013a06:	429a      	cmp	r2, r3
 8013a08:	d107      	bne.n	8013a1a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013a0a:	69f8      	ldr	r0, [r7, #28]
 8013a0c:	f000 fb56 	bl	80140bc <tcp_timewait_input>
        }
        pbuf_free(p);
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	f7fd fbe1 	bl	80111d8 <pbuf_free>
        return;
 8013a16:	e1fd      	b.n	8013e14 <tcp_input+0x7ec>
        continue;
 8013a18:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a1a:	69fb      	ldr	r3, [r7, #28]
 8013a1c:	68db      	ldr	r3, [r3, #12]
 8013a1e:	61fb      	str	r3, [r7, #28]
 8013a20:	69fb      	ldr	r3, [r7, #28]
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d1bc      	bne.n	80139a0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013a26:	2300      	movs	r3, #0
 8013a28:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013a2a:	4b2f      	ldr	r3, [pc, #188]	@ (8013ae8 <tcp_input+0x4c0>)
 8013a2c:	681b      	ldr	r3, [r3, #0]
 8013a2e:	617b      	str	r3, [r7, #20]
 8013a30:	e02a      	b.n	8013a88 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013a32:	697b      	ldr	r3, [r7, #20]
 8013a34:	7a1b      	ldrb	r3, [r3, #8]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d00c      	beq.n	8013a54 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013a3a:	697b      	ldr	r3, [r7, #20]
 8013a3c:	7a1a      	ldrb	r2, [r3, #8]
 8013a3e:	4b22      	ldr	r3, [pc, #136]	@ (8013ac8 <tcp_input+0x4a0>)
 8013a40:	685b      	ldr	r3, [r3, #4]
 8013a42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013a46:	3301      	adds	r3, #1
 8013a48:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	d002      	beq.n	8013a54 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013a4e:	697b      	ldr	r3, [r7, #20]
 8013a50:	61bb      	str	r3, [r7, #24]
        continue;
 8013a52:	e016      	b.n	8013a82 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013a54:	697b      	ldr	r3, [r7, #20]
 8013a56:	8ada      	ldrh	r2, [r3, #22]
 8013a58:	4b1a      	ldr	r3, [pc, #104]	@ (8013ac4 <tcp_input+0x49c>)
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	885b      	ldrh	r3, [r3, #2]
 8013a5e:	b29b      	uxth	r3, r3
 8013a60:	429a      	cmp	r2, r3
 8013a62:	d10c      	bne.n	8013a7e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013a64:	697b      	ldr	r3, [r7, #20]
 8013a66:	681a      	ldr	r2, [r3, #0]
 8013a68:	4b17      	ldr	r3, [pc, #92]	@ (8013ac8 <tcp_input+0x4a0>)
 8013a6a:	695b      	ldr	r3, [r3, #20]
 8013a6c:	429a      	cmp	r2, r3
 8013a6e:	d00f      	beq.n	8013a90 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013a70:	697b      	ldr	r3, [r7, #20]
 8013a72:	2b00      	cmp	r3, #0
 8013a74:	d00d      	beq.n	8013a92 <tcp_input+0x46a>
 8013a76:	697b      	ldr	r3, [r7, #20]
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d009      	beq.n	8013a92 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013a7e:	697b      	ldr	r3, [r7, #20]
 8013a80:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	68db      	ldr	r3, [r3, #12]
 8013a86:	617b      	str	r3, [r7, #20]
 8013a88:	697b      	ldr	r3, [r7, #20]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d1d1      	bne.n	8013a32 <tcp_input+0x40a>
 8013a8e:	e000      	b.n	8013a92 <tcp_input+0x46a>
            break;
 8013a90:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013a92:	697b      	ldr	r3, [r7, #20]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d029      	beq.n	8013aec <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013a98:	69bb      	ldr	r3, [r7, #24]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d00a      	beq.n	8013ab4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013a9e:	697b      	ldr	r3, [r7, #20]
 8013aa0:	68da      	ldr	r2, [r3, #12]
 8013aa2:	69bb      	ldr	r3, [r7, #24]
 8013aa4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013aa6:	4b10      	ldr	r3, [pc, #64]	@ (8013ae8 <tcp_input+0x4c0>)
 8013aa8:	681a      	ldr	r2, [r3, #0]
 8013aaa:	697b      	ldr	r3, [r7, #20]
 8013aac:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013aae:	4a0e      	ldr	r2, [pc, #56]	@ (8013ae8 <tcp_input+0x4c0>)
 8013ab0:	697b      	ldr	r3, [r7, #20]
 8013ab2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013ab4:	6978      	ldr	r0, [r7, #20]
 8013ab6:	f000 fa03 	bl	8013ec0 <tcp_listen_input>
      }
      pbuf_free(p);
 8013aba:	6878      	ldr	r0, [r7, #4]
 8013abc:	f7fd fb8c 	bl	80111d8 <pbuf_free>
      return;
 8013ac0:	e1a8      	b.n	8013e14 <tcp_input+0x7ec>
 8013ac2:	bf00      	nop
 8013ac4:	20012698 	.word	0x20012698
 8013ac8:	2000edb0 	.word	0x2000edb0
 8013acc:	08023f10 	.word	0x08023f10
 8013ad0:	0802403c 	.word	0x0802403c
 8013ad4:	08023f5c 	.word	0x08023f5c
 8013ad8:	2001267c 	.word	0x2001267c
 8013adc:	08024068 	.word	0x08024068
 8013ae0:	20012680 	.word	0x20012680
 8013ae4:	08024094 	.word	0x08024094
 8013ae8:	20012678 	.word	0x20012678
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013aec:	69fb      	ldr	r3, [r7, #28]
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	f000 8158 	beq.w	8013da4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013af4:	4b95      	ldr	r3, [pc, #596]	@ (8013d4c <tcp_input+0x724>)
 8013af6:	2200      	movs	r2, #0
 8013af8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	891a      	ldrh	r2, [r3, #8]
 8013afe:	4b93      	ldr	r3, [pc, #588]	@ (8013d4c <tcp_input+0x724>)
 8013b00:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013b02:	4a92      	ldr	r2, [pc, #584]	@ (8013d4c <tcp_input+0x724>)
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013b08:	4b91      	ldr	r3, [pc, #580]	@ (8013d50 <tcp_input+0x728>)
 8013b0a:	681b      	ldr	r3, [r3, #0]
 8013b0c:	4a8f      	ldr	r2, [pc, #572]	@ (8013d4c <tcp_input+0x724>)
 8013b0e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013b10:	4b90      	ldr	r3, [pc, #576]	@ (8013d54 <tcp_input+0x72c>)
 8013b12:	2200      	movs	r2, #0
 8013b14:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013b16:	4b90      	ldr	r3, [pc, #576]	@ (8013d58 <tcp_input+0x730>)
 8013b18:	2200      	movs	r2, #0
 8013b1a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013b1c:	4b8f      	ldr	r3, [pc, #572]	@ (8013d5c <tcp_input+0x734>)
 8013b1e:	2200      	movs	r2, #0
 8013b20:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013b22:	4b8f      	ldr	r3, [pc, #572]	@ (8013d60 <tcp_input+0x738>)
 8013b24:	781b      	ldrb	r3, [r3, #0]
 8013b26:	f003 0308 	and.w	r3, r3, #8
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d006      	beq.n	8013b3c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	7b5b      	ldrb	r3, [r3, #13]
 8013b32:	f043 0301 	orr.w	r3, r3, #1
 8013b36:	b2da      	uxtb	r2, r3
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013b3c:	69fb      	ldr	r3, [r7, #28]
 8013b3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d017      	beq.n	8013b74 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013b44:	69f8      	ldr	r0, [r7, #28]
 8013b46:	f7ff f85b 	bl	8012c00 <tcp_process_refused_data>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	f113 0f0d 	cmn.w	r3, #13
 8013b50:	d007      	beq.n	8013b62 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013b52:	69fb      	ldr	r3, [r7, #28]
 8013b54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d00c      	beq.n	8013b74 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013b5a:	4b82      	ldr	r3, [pc, #520]	@ (8013d64 <tcp_input+0x73c>)
 8013b5c:	881b      	ldrh	r3, [r3, #0]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d008      	beq.n	8013b74 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013b62:	69fb      	ldr	r3, [r7, #28]
 8013b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	f040 80e3 	bne.w	8013d32 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013b6c:	69f8      	ldr	r0, [r7, #28]
 8013b6e:	f003 fdff 	bl	8017770 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013b72:	e0de      	b.n	8013d32 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8013b74:	4a7c      	ldr	r2, [pc, #496]	@ (8013d68 <tcp_input+0x740>)
 8013b76:	69fb      	ldr	r3, [r7, #28]
 8013b78:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013b7a:	69f8      	ldr	r0, [r7, #28]
 8013b7c:	f000 fb18 	bl	80141b0 <tcp_process>
 8013b80:	4603      	mov	r3, r0
 8013b82:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013b84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013b88:	f113 0f0d 	cmn.w	r3, #13
 8013b8c:	f000 80d3 	beq.w	8013d36 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8013b90:	4b71      	ldr	r3, [pc, #452]	@ (8013d58 <tcp_input+0x730>)
 8013b92:	781b      	ldrb	r3, [r3, #0]
 8013b94:	f003 0308 	and.w	r3, r3, #8
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d015      	beq.n	8013bc8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013b9c:	69fb      	ldr	r3, [r7, #28]
 8013b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d008      	beq.n	8013bb8 <tcp_input+0x590>
 8013ba6:	69fb      	ldr	r3, [r7, #28]
 8013ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013bac:	69fa      	ldr	r2, [r7, #28]
 8013bae:	6912      	ldr	r2, [r2, #16]
 8013bb0:	f06f 010d 	mvn.w	r1, #13
 8013bb4:	4610      	mov	r0, r2
 8013bb6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013bb8:	69f9      	ldr	r1, [r7, #28]
 8013bba:	486c      	ldr	r0, [pc, #432]	@ (8013d6c <tcp_input+0x744>)
 8013bbc:	f7ff fbbc 	bl	8013338 <tcp_pcb_remove>
        tcp_free(pcb);
 8013bc0:	69f8      	ldr	r0, [r7, #28]
 8013bc2:	f7fd ff1f 	bl	8011a04 <tcp_free>
 8013bc6:	e0da      	b.n	8013d7e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8013bc8:	2300      	movs	r3, #0
 8013bca:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013bcc:	4b63      	ldr	r3, [pc, #396]	@ (8013d5c <tcp_input+0x734>)
 8013bce:	881b      	ldrh	r3, [r3, #0]
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d01d      	beq.n	8013c10 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013bd4:	4b61      	ldr	r3, [pc, #388]	@ (8013d5c <tcp_input+0x734>)
 8013bd6:	881b      	ldrh	r3, [r3, #0]
 8013bd8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013bda:	69fb      	ldr	r3, [r7, #28]
 8013bdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	d00a      	beq.n	8013bfa <tcp_input+0x5d2>
 8013be4:	69fb      	ldr	r3, [r7, #28]
 8013be6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013bea:	69fa      	ldr	r2, [r7, #28]
 8013bec:	6910      	ldr	r0, [r2, #16]
 8013bee:	89fa      	ldrh	r2, [r7, #14]
 8013bf0:	69f9      	ldr	r1, [r7, #28]
 8013bf2:	4798      	blx	r3
 8013bf4:	4603      	mov	r3, r0
 8013bf6:	74fb      	strb	r3, [r7, #19]
 8013bf8:	e001      	b.n	8013bfe <tcp_input+0x5d6>
 8013bfa:	2300      	movs	r3, #0
 8013bfc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013bfe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c02:	f113 0f0d 	cmn.w	r3, #13
 8013c06:	f000 8098 	beq.w	8013d3a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013c0a:	4b54      	ldr	r3, [pc, #336]	@ (8013d5c <tcp_input+0x734>)
 8013c0c:	2200      	movs	r2, #0
 8013c0e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013c10:	69f8      	ldr	r0, [r7, #28]
 8013c12:	f000 f915 	bl	8013e40 <tcp_input_delayed_close>
 8013c16:	4603      	mov	r3, r0
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	f040 8090 	bne.w	8013d3e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013c1e:	4b4d      	ldr	r3, [pc, #308]	@ (8013d54 <tcp_input+0x72c>)
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d041      	beq.n	8013caa <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013c26:	69fb      	ldr	r3, [r7, #28]
 8013c28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013c2a:	2b00      	cmp	r3, #0
 8013c2c:	d006      	beq.n	8013c3c <tcp_input+0x614>
 8013c2e:	4b50      	ldr	r3, [pc, #320]	@ (8013d70 <tcp_input+0x748>)
 8013c30:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8013c34:	494f      	ldr	r1, [pc, #316]	@ (8013d74 <tcp_input+0x74c>)
 8013c36:	4850      	ldr	r0, [pc, #320]	@ (8013d78 <tcp_input+0x750>)
 8013c38:	f00a fb50 	bl	801e2dc <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013c3c:	69fb      	ldr	r3, [r7, #28]
 8013c3e:	8b5b      	ldrh	r3, [r3, #26]
 8013c40:	f003 0310 	and.w	r3, r3, #16
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d008      	beq.n	8013c5a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013c48:	4b42      	ldr	r3, [pc, #264]	@ (8013d54 <tcp_input+0x72c>)
 8013c4a:	681b      	ldr	r3, [r3, #0]
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	f7fd fac3 	bl	80111d8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013c52:	69f8      	ldr	r0, [r7, #28]
 8013c54:	f7fe fa1a 	bl	801208c <tcp_abort>
            goto aborted;
 8013c58:	e091      	b.n	8013d7e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013c5a:	69fb      	ldr	r3, [r7, #28]
 8013c5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d00c      	beq.n	8013c7e <tcp_input+0x656>
 8013c64:	69fb      	ldr	r3, [r7, #28]
 8013c66:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013c6a:	69fb      	ldr	r3, [r7, #28]
 8013c6c:	6918      	ldr	r0, [r3, #16]
 8013c6e:	4b39      	ldr	r3, [pc, #228]	@ (8013d54 <tcp_input+0x72c>)
 8013c70:	681a      	ldr	r2, [r3, #0]
 8013c72:	2300      	movs	r3, #0
 8013c74:	69f9      	ldr	r1, [r7, #28]
 8013c76:	47a0      	blx	r4
 8013c78:	4603      	mov	r3, r0
 8013c7a:	74fb      	strb	r3, [r7, #19]
 8013c7c:	e008      	b.n	8013c90 <tcp_input+0x668>
 8013c7e:	4b35      	ldr	r3, [pc, #212]	@ (8013d54 <tcp_input+0x72c>)
 8013c80:	681a      	ldr	r2, [r3, #0]
 8013c82:	2300      	movs	r3, #0
 8013c84:	69f9      	ldr	r1, [r7, #28]
 8013c86:	2000      	movs	r0, #0
 8013c88:	f7ff f890 	bl	8012dac <tcp_recv_null>
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013c90:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c94:	f113 0f0d 	cmn.w	r3, #13
 8013c98:	d053      	beq.n	8013d42 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013c9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d003      	beq.n	8013caa <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013ca2:	4b2c      	ldr	r3, [pc, #176]	@ (8013d54 <tcp_input+0x72c>)
 8013ca4:	681a      	ldr	r2, [r3, #0]
 8013ca6:	69fb      	ldr	r3, [r7, #28]
 8013ca8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013caa:	4b2b      	ldr	r3, [pc, #172]	@ (8013d58 <tcp_input+0x730>)
 8013cac:	781b      	ldrb	r3, [r3, #0]
 8013cae:	f003 0320 	and.w	r3, r3, #32
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d030      	beq.n	8013d18 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8013cb6:	69fb      	ldr	r3, [r7, #28]
 8013cb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013cba:	2b00      	cmp	r3, #0
 8013cbc:	d009      	beq.n	8013cd2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013cbe:	69fb      	ldr	r3, [r7, #28]
 8013cc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013cc2:	7b5a      	ldrb	r2, [r3, #13]
 8013cc4:	69fb      	ldr	r3, [r7, #28]
 8013cc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013cc8:	f042 0220 	orr.w	r2, r2, #32
 8013ccc:	b2d2      	uxtb	r2, r2
 8013cce:	735a      	strb	r2, [r3, #13]
 8013cd0:	e022      	b.n	8013d18 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013cd2:	69fb      	ldr	r3, [r7, #28]
 8013cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013cd6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013cda:	d005      	beq.n	8013ce8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8013cdc:	69fb      	ldr	r3, [r7, #28]
 8013cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013ce0:	3301      	adds	r3, #1
 8013ce2:	b29a      	uxth	r2, r3
 8013ce4:	69fb      	ldr	r3, [r7, #28]
 8013ce6:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013ce8:	69fb      	ldr	r3, [r7, #28]
 8013cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013cee:	2b00      	cmp	r3, #0
 8013cf0:	d00b      	beq.n	8013d0a <tcp_input+0x6e2>
 8013cf2:	69fb      	ldr	r3, [r7, #28]
 8013cf4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013cf8:	69fb      	ldr	r3, [r7, #28]
 8013cfa:	6918      	ldr	r0, [r3, #16]
 8013cfc:	2300      	movs	r3, #0
 8013cfe:	2200      	movs	r2, #0
 8013d00:	69f9      	ldr	r1, [r7, #28]
 8013d02:	47a0      	blx	r4
 8013d04:	4603      	mov	r3, r0
 8013d06:	74fb      	strb	r3, [r7, #19]
 8013d08:	e001      	b.n	8013d0e <tcp_input+0x6e6>
 8013d0a:	2300      	movs	r3, #0
 8013d0c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013d0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d12:	f113 0f0d 	cmn.w	r3, #13
 8013d16:	d016      	beq.n	8013d46 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013d18:	4b13      	ldr	r3, [pc, #76]	@ (8013d68 <tcp_input+0x740>)
 8013d1a:	2200      	movs	r2, #0
 8013d1c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013d1e:	69f8      	ldr	r0, [r7, #28]
 8013d20:	f000 f88e 	bl	8013e40 <tcp_input_delayed_close>
 8013d24:	4603      	mov	r3, r0
 8013d26:	2b00      	cmp	r3, #0
 8013d28:	d128      	bne.n	8013d7c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013d2a:	69f8      	ldr	r0, [r7, #28]
 8013d2c:	f002 ff1a 	bl	8016b64 <tcp_output>
 8013d30:	e025      	b.n	8013d7e <tcp_input+0x756>
        goto aborted;
 8013d32:	bf00      	nop
 8013d34:	e023      	b.n	8013d7e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013d36:	bf00      	nop
 8013d38:	e021      	b.n	8013d7e <tcp_input+0x756>
              goto aborted;
 8013d3a:	bf00      	nop
 8013d3c:	e01f      	b.n	8013d7e <tcp_input+0x756>
          goto aborted;
 8013d3e:	bf00      	nop
 8013d40:	e01d      	b.n	8013d7e <tcp_input+0x756>
            goto aborted;
 8013d42:	bf00      	nop
 8013d44:	e01b      	b.n	8013d7e <tcp_input+0x756>
              goto aborted;
 8013d46:	bf00      	nop
 8013d48:	e019      	b.n	8013d7e <tcp_input+0x756>
 8013d4a:	bf00      	nop
 8013d4c:	20012688 	.word	0x20012688
 8013d50:	20012698 	.word	0x20012698
 8013d54:	200126b8 	.word	0x200126b8
 8013d58:	200126b5 	.word	0x200126b5
 8013d5c:	200126b0 	.word	0x200126b0
 8013d60:	200126b4 	.word	0x200126b4
 8013d64:	200126b2 	.word	0x200126b2
 8013d68:	200126bc 	.word	0x200126bc
 8013d6c:	2001267c 	.word	0x2001267c
 8013d70:	08023f10 	.word	0x08023f10
 8013d74:	080240c4 	.word	0x080240c4
 8013d78:	08023f5c 	.word	0x08023f5c
          goto aborted;
 8013d7c:	bf00      	nop
    tcp_input_pcb = NULL;
 8013d7e:	4b27      	ldr	r3, [pc, #156]	@ (8013e1c <tcp_input+0x7f4>)
 8013d80:	2200      	movs	r2, #0
 8013d82:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013d84:	4b26      	ldr	r3, [pc, #152]	@ (8013e20 <tcp_input+0x7f8>)
 8013d86:	2200      	movs	r2, #0
 8013d88:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013d8a:	4b26      	ldr	r3, [pc, #152]	@ (8013e24 <tcp_input+0x7fc>)
 8013d8c:	685b      	ldr	r3, [r3, #4]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d03f      	beq.n	8013e12 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013d92:	4b24      	ldr	r3, [pc, #144]	@ (8013e24 <tcp_input+0x7fc>)
 8013d94:	685b      	ldr	r3, [r3, #4]
 8013d96:	4618      	mov	r0, r3
 8013d98:	f7fd fa1e 	bl	80111d8 <pbuf_free>
      inseg.p = NULL;
 8013d9c:	4b21      	ldr	r3, [pc, #132]	@ (8013e24 <tcp_input+0x7fc>)
 8013d9e:	2200      	movs	r2, #0
 8013da0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013da2:	e036      	b.n	8013e12 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013da4:	4b20      	ldr	r3, [pc, #128]	@ (8013e28 <tcp_input+0x800>)
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	899b      	ldrh	r3, [r3, #12]
 8013daa:	b29b      	uxth	r3, r3
 8013dac:	4618      	mov	r0, r3
 8013dae:	f7fb fb27 	bl	800f400 <lwip_htons>
 8013db2:	4603      	mov	r3, r0
 8013db4:	b2db      	uxtb	r3, r3
 8013db6:	f003 0304 	and.w	r3, r3, #4
 8013dba:	2b00      	cmp	r3, #0
 8013dbc:	d118      	bne.n	8013df0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013dbe:	4b1b      	ldr	r3, [pc, #108]	@ (8013e2c <tcp_input+0x804>)
 8013dc0:	6819      	ldr	r1, [r3, #0]
 8013dc2:	4b1b      	ldr	r3, [pc, #108]	@ (8013e30 <tcp_input+0x808>)
 8013dc4:	881b      	ldrh	r3, [r3, #0]
 8013dc6:	461a      	mov	r2, r3
 8013dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8013e34 <tcp_input+0x80c>)
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013dce:	4b16      	ldr	r3, [pc, #88]	@ (8013e28 <tcp_input+0x800>)
 8013dd0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013dd2:	885b      	ldrh	r3, [r3, #2]
 8013dd4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013dd6:	4a14      	ldr	r2, [pc, #80]	@ (8013e28 <tcp_input+0x800>)
 8013dd8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013dda:	8812      	ldrh	r2, [r2, #0]
 8013ddc:	b292      	uxth	r2, r2
 8013dde:	9202      	str	r2, [sp, #8]
 8013de0:	9301      	str	r3, [sp, #4]
 8013de2:	4b15      	ldr	r3, [pc, #84]	@ (8013e38 <tcp_input+0x810>)
 8013de4:	9300      	str	r3, [sp, #0]
 8013de6:	4b15      	ldr	r3, [pc, #84]	@ (8013e3c <tcp_input+0x814>)
 8013de8:	4602      	mov	r2, r0
 8013dea:	2000      	movs	r0, #0
 8013dec:	f003 fc6e 	bl	80176cc <tcp_rst>
    pbuf_free(p);
 8013df0:	6878      	ldr	r0, [r7, #4]
 8013df2:	f7fd f9f1 	bl	80111d8 <pbuf_free>
  return;
 8013df6:	e00c      	b.n	8013e12 <tcp_input+0x7ea>
    goto dropped;
 8013df8:	bf00      	nop
 8013dfa:	e006      	b.n	8013e0a <tcp_input+0x7e2>
    goto dropped;
 8013dfc:	bf00      	nop
 8013dfe:	e004      	b.n	8013e0a <tcp_input+0x7e2>
    goto dropped;
 8013e00:	bf00      	nop
 8013e02:	e002      	b.n	8013e0a <tcp_input+0x7e2>
      goto dropped;
 8013e04:	bf00      	nop
 8013e06:	e000      	b.n	8013e0a <tcp_input+0x7e2>
      goto dropped;
 8013e08:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013e0a:	6878      	ldr	r0, [r7, #4]
 8013e0c:	f7fd f9e4 	bl	80111d8 <pbuf_free>
 8013e10:	e000      	b.n	8013e14 <tcp_input+0x7ec>
  return;
 8013e12:	bf00      	nop
}
 8013e14:	3724      	adds	r7, #36	@ 0x24
 8013e16:	46bd      	mov	sp, r7
 8013e18:	bd90      	pop	{r4, r7, pc}
 8013e1a:	bf00      	nop
 8013e1c:	200126bc 	.word	0x200126bc
 8013e20:	200126b8 	.word	0x200126b8
 8013e24:	20012688 	.word	0x20012688
 8013e28:	20012698 	.word	0x20012698
 8013e2c:	200126ac 	.word	0x200126ac
 8013e30:	200126b2 	.word	0x200126b2
 8013e34:	200126a8 	.word	0x200126a8
 8013e38:	2000edc0 	.word	0x2000edc0
 8013e3c:	2000edc4 	.word	0x2000edc4

08013e40 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b082      	sub	sp, #8
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d106      	bne.n	8013e5c <tcp_input_delayed_close+0x1c>
 8013e4e:	4b17      	ldr	r3, [pc, #92]	@ (8013eac <tcp_input_delayed_close+0x6c>)
 8013e50:	f240 225a 	movw	r2, #602	@ 0x25a
 8013e54:	4916      	ldr	r1, [pc, #88]	@ (8013eb0 <tcp_input_delayed_close+0x70>)
 8013e56:	4817      	ldr	r0, [pc, #92]	@ (8013eb4 <tcp_input_delayed_close+0x74>)
 8013e58:	f00a fa40 	bl	801e2dc <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013e5c:	4b16      	ldr	r3, [pc, #88]	@ (8013eb8 <tcp_input_delayed_close+0x78>)
 8013e5e:	781b      	ldrb	r3, [r3, #0]
 8013e60:	f003 0310 	and.w	r3, r3, #16
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d01c      	beq.n	8013ea2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	8b5b      	ldrh	r3, [r3, #26]
 8013e6c:	f003 0310 	and.w	r3, r3, #16
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d10d      	bne.n	8013e90 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013e7a:	2b00      	cmp	r3, #0
 8013e7c:	d008      	beq.n	8013e90 <tcp_input_delayed_close+0x50>
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013e84:	687a      	ldr	r2, [r7, #4]
 8013e86:	6912      	ldr	r2, [r2, #16]
 8013e88:	f06f 010e 	mvn.w	r1, #14
 8013e8c:	4610      	mov	r0, r2
 8013e8e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013e90:	6879      	ldr	r1, [r7, #4]
 8013e92:	480a      	ldr	r0, [pc, #40]	@ (8013ebc <tcp_input_delayed_close+0x7c>)
 8013e94:	f7ff fa50 	bl	8013338 <tcp_pcb_remove>
    tcp_free(pcb);
 8013e98:	6878      	ldr	r0, [r7, #4]
 8013e9a:	f7fd fdb3 	bl	8011a04 <tcp_free>
    return 1;
 8013e9e:	2301      	movs	r3, #1
 8013ea0:	e000      	b.n	8013ea4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013ea2:	2300      	movs	r3, #0
}
 8013ea4:	4618      	mov	r0, r3
 8013ea6:	3708      	adds	r7, #8
 8013ea8:	46bd      	mov	sp, r7
 8013eaa:	bd80      	pop	{r7, pc}
 8013eac:	08023f10 	.word	0x08023f10
 8013eb0:	080240e0 	.word	0x080240e0
 8013eb4:	08023f5c 	.word	0x08023f5c
 8013eb8:	200126b5 	.word	0x200126b5
 8013ebc:	2001267c 	.word	0x2001267c

08013ec0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013ec0:	b590      	push	{r4, r7, lr}
 8013ec2:	b08b      	sub	sp, #44	@ 0x2c
 8013ec4:	af04      	add	r7, sp, #16
 8013ec6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013ec8:	4b6f      	ldr	r3, [pc, #444]	@ (8014088 <tcp_listen_input+0x1c8>)
 8013eca:	781b      	ldrb	r3, [r3, #0]
 8013ecc:	f003 0304 	and.w	r3, r3, #4
 8013ed0:	2b00      	cmp	r3, #0
 8013ed2:	f040 80d2 	bne.w	801407a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013ed6:	687b      	ldr	r3, [r7, #4]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d106      	bne.n	8013eea <tcp_listen_input+0x2a>
 8013edc:	4b6b      	ldr	r3, [pc, #428]	@ (801408c <tcp_listen_input+0x1cc>)
 8013ede:	f240 2281 	movw	r2, #641	@ 0x281
 8013ee2:	496b      	ldr	r1, [pc, #428]	@ (8014090 <tcp_listen_input+0x1d0>)
 8013ee4:	486b      	ldr	r0, [pc, #428]	@ (8014094 <tcp_listen_input+0x1d4>)
 8013ee6:	f00a f9f9 	bl	801e2dc <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013eea:	4b67      	ldr	r3, [pc, #412]	@ (8014088 <tcp_listen_input+0x1c8>)
 8013eec:	781b      	ldrb	r3, [r3, #0]
 8013eee:	f003 0310 	and.w	r3, r3, #16
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d019      	beq.n	8013f2a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ef6:	4b68      	ldr	r3, [pc, #416]	@ (8014098 <tcp_listen_input+0x1d8>)
 8013ef8:	6819      	ldr	r1, [r3, #0]
 8013efa:	4b68      	ldr	r3, [pc, #416]	@ (801409c <tcp_listen_input+0x1dc>)
 8013efc:	881b      	ldrh	r3, [r3, #0]
 8013efe:	461a      	mov	r2, r3
 8013f00:	4b67      	ldr	r3, [pc, #412]	@ (80140a0 <tcp_listen_input+0x1e0>)
 8013f02:	681b      	ldr	r3, [r3, #0]
 8013f04:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013f06:	4b67      	ldr	r3, [pc, #412]	@ (80140a4 <tcp_listen_input+0x1e4>)
 8013f08:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f0a:	885b      	ldrh	r3, [r3, #2]
 8013f0c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013f0e:	4a65      	ldr	r2, [pc, #404]	@ (80140a4 <tcp_listen_input+0x1e4>)
 8013f10:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013f12:	8812      	ldrh	r2, [r2, #0]
 8013f14:	b292      	uxth	r2, r2
 8013f16:	9202      	str	r2, [sp, #8]
 8013f18:	9301      	str	r3, [sp, #4]
 8013f1a:	4b63      	ldr	r3, [pc, #396]	@ (80140a8 <tcp_listen_input+0x1e8>)
 8013f1c:	9300      	str	r3, [sp, #0]
 8013f1e:	4b63      	ldr	r3, [pc, #396]	@ (80140ac <tcp_listen_input+0x1ec>)
 8013f20:	4602      	mov	r2, r0
 8013f22:	6878      	ldr	r0, [r7, #4]
 8013f24:	f003 fbd2 	bl	80176cc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013f28:	e0a9      	b.n	801407e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013f2a:	4b57      	ldr	r3, [pc, #348]	@ (8014088 <tcp_listen_input+0x1c8>)
 8013f2c:	781b      	ldrb	r3, [r3, #0]
 8013f2e:	f003 0302 	and.w	r3, r3, #2
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	f000 80a3 	beq.w	801407e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	7d5b      	ldrb	r3, [r3, #21]
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f7ff f859 	bl	8012ff4 <tcp_alloc>
 8013f42:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013f44:	697b      	ldr	r3, [r7, #20]
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	d111      	bne.n	8013f6e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013f4a:	687b      	ldr	r3, [r7, #4]
 8013f4c:	699b      	ldr	r3, [r3, #24]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d00a      	beq.n	8013f68 <tcp_listen_input+0xa8>
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	699b      	ldr	r3, [r3, #24]
 8013f56:	687a      	ldr	r2, [r7, #4]
 8013f58:	6910      	ldr	r0, [r2, #16]
 8013f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8013f5e:	2100      	movs	r1, #0
 8013f60:	4798      	blx	r3
 8013f62:	4603      	mov	r3, r0
 8013f64:	73bb      	strb	r3, [r7, #14]
      return;
 8013f66:	e08b      	b.n	8014080 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013f68:	23f0      	movs	r3, #240	@ 0xf0
 8013f6a:	73bb      	strb	r3, [r7, #14]
      return;
 8013f6c:	e088      	b.n	8014080 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013f6e:	4b50      	ldr	r3, [pc, #320]	@ (80140b0 <tcp_listen_input+0x1f0>)
 8013f70:	695a      	ldr	r2, [r3, #20]
 8013f72:	697b      	ldr	r3, [r7, #20]
 8013f74:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013f76:	4b4e      	ldr	r3, [pc, #312]	@ (80140b0 <tcp_listen_input+0x1f0>)
 8013f78:	691a      	ldr	r2, [r3, #16]
 8013f7a:	697b      	ldr	r3, [r7, #20]
 8013f7c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	8ada      	ldrh	r2, [r3, #22]
 8013f82:	697b      	ldr	r3, [r7, #20]
 8013f84:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013f86:	4b47      	ldr	r3, [pc, #284]	@ (80140a4 <tcp_listen_input+0x1e4>)
 8013f88:	681b      	ldr	r3, [r3, #0]
 8013f8a:	881b      	ldrh	r3, [r3, #0]
 8013f8c:	b29a      	uxth	r2, r3
 8013f8e:	697b      	ldr	r3, [r7, #20]
 8013f90:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013f92:	697b      	ldr	r3, [r7, #20]
 8013f94:	2203      	movs	r2, #3
 8013f96:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013f98:	4b41      	ldr	r3, [pc, #260]	@ (80140a0 <tcp_listen_input+0x1e0>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	1c5a      	adds	r2, r3, #1
 8013f9e:	697b      	ldr	r3, [r7, #20]
 8013fa0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013fa2:	697b      	ldr	r3, [r7, #20]
 8013fa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013fa6:	697b      	ldr	r3, [r7, #20]
 8013fa8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8013faa:	6978      	ldr	r0, [r7, #20]
 8013fac:	f7ff fa58 	bl	8013460 <tcp_next_iss>
 8013fb0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013fb2:	697b      	ldr	r3, [r7, #20]
 8013fb4:	693a      	ldr	r2, [r7, #16]
 8013fb6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8013fb8:	697b      	ldr	r3, [r7, #20]
 8013fba:	693a      	ldr	r2, [r7, #16]
 8013fbc:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8013fbe:	697b      	ldr	r3, [r7, #20]
 8013fc0:	693a      	ldr	r2, [r7, #16]
 8013fc2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8013fc4:	697b      	ldr	r3, [r7, #20]
 8013fc6:	693a      	ldr	r2, [r7, #16]
 8013fc8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013fca:	4b35      	ldr	r3, [pc, #212]	@ (80140a0 <tcp_listen_input+0x1e0>)
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	1e5a      	subs	r2, r3, #1
 8013fd0:	697b      	ldr	r3, [r7, #20]
 8013fd2:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	691a      	ldr	r2, [r3, #16]
 8013fd8:	697b      	ldr	r3, [r7, #20]
 8013fda:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013fdc:	697b      	ldr	r3, [r7, #20]
 8013fde:	687a      	ldr	r2, [r7, #4]
 8013fe0:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	7a5b      	ldrb	r3, [r3, #9]
 8013fe6:	f003 030c 	and.w	r3, r3, #12
 8013fea:	b2da      	uxtb	r2, r3
 8013fec:	697b      	ldr	r3, [r7, #20]
 8013fee:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	7a1a      	ldrb	r2, [r3, #8]
 8013ff4:	697b      	ldr	r3, [r7, #20]
 8013ff6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013ff8:	4b2e      	ldr	r3, [pc, #184]	@ (80140b4 <tcp_listen_input+0x1f4>)
 8013ffa:	681a      	ldr	r2, [r3, #0]
 8013ffc:	697b      	ldr	r3, [r7, #20]
 8013ffe:	60da      	str	r2, [r3, #12]
 8014000:	4a2c      	ldr	r2, [pc, #176]	@ (80140b4 <tcp_listen_input+0x1f4>)
 8014002:	697b      	ldr	r3, [r7, #20]
 8014004:	6013      	str	r3, [r2, #0]
 8014006:	f003 fd23 	bl	8017a50 <tcp_timer_needed>
 801400a:	4b2b      	ldr	r3, [pc, #172]	@ (80140b8 <tcp_listen_input+0x1f8>)
 801400c:	2201      	movs	r2, #1
 801400e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014010:	6978      	ldr	r0, [r7, #20]
 8014012:	f001 fd8b 	bl	8015b2c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014016:	4b23      	ldr	r3, [pc, #140]	@ (80140a4 <tcp_listen_input+0x1e4>)
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	89db      	ldrh	r3, [r3, #14]
 801401c:	b29a      	uxth	r2, r3
 801401e:	697b      	ldr	r3, [r7, #20]
 8014020:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014024:	697b      	ldr	r3, [r7, #20]
 8014026:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801402a:	697b      	ldr	r3, [r7, #20]
 801402c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014030:	697b      	ldr	r3, [r7, #20]
 8014032:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014034:	697b      	ldr	r3, [r7, #20]
 8014036:	3304      	adds	r3, #4
 8014038:	4618      	mov	r0, r3
 801403a:	f007 fbbd 	bl	801b7b8 <ip4_route>
 801403e:	4601      	mov	r1, r0
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	3304      	adds	r3, #4
 8014044:	461a      	mov	r2, r3
 8014046:	4620      	mov	r0, r4
 8014048:	f7ff fa30 	bl	80134ac <tcp_eff_send_mss_netif>
 801404c:	4603      	mov	r3, r0
 801404e:	461a      	mov	r2, r3
 8014050:	697b      	ldr	r3, [r7, #20]
 8014052:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014054:	2112      	movs	r1, #18
 8014056:	6978      	ldr	r0, [r7, #20]
 8014058:	f002 fc96 	bl	8016988 <tcp_enqueue_flags>
 801405c:	4603      	mov	r3, r0
 801405e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014060:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014064:	2b00      	cmp	r3, #0
 8014066:	d004      	beq.n	8014072 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014068:	2100      	movs	r1, #0
 801406a:	6978      	ldr	r0, [r7, #20]
 801406c:	f7fd ff50 	bl	8011f10 <tcp_abandon>
      return;
 8014070:	e006      	b.n	8014080 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014072:	6978      	ldr	r0, [r7, #20]
 8014074:	f002 fd76 	bl	8016b64 <tcp_output>
  return;
 8014078:	e001      	b.n	801407e <tcp_listen_input+0x1be>
    return;
 801407a:	bf00      	nop
 801407c:	e000      	b.n	8014080 <tcp_listen_input+0x1c0>
  return;
 801407e:	bf00      	nop
}
 8014080:	371c      	adds	r7, #28
 8014082:	46bd      	mov	sp, r7
 8014084:	bd90      	pop	{r4, r7, pc}
 8014086:	bf00      	nop
 8014088:	200126b4 	.word	0x200126b4
 801408c:	08023f10 	.word	0x08023f10
 8014090:	08024108 	.word	0x08024108
 8014094:	08023f5c 	.word	0x08023f5c
 8014098:	200126ac 	.word	0x200126ac
 801409c:	200126b2 	.word	0x200126b2
 80140a0:	200126a8 	.word	0x200126a8
 80140a4:	20012698 	.word	0x20012698
 80140a8:	2000edc0 	.word	0x2000edc0
 80140ac:	2000edc4 	.word	0x2000edc4
 80140b0:	2000edb0 	.word	0x2000edb0
 80140b4:	2001267c 	.word	0x2001267c
 80140b8:	20012684 	.word	0x20012684

080140bc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b086      	sub	sp, #24
 80140c0:	af04      	add	r7, sp, #16
 80140c2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80140c4:	4b2f      	ldr	r3, [pc, #188]	@ (8014184 <tcp_timewait_input+0xc8>)
 80140c6:	781b      	ldrb	r3, [r3, #0]
 80140c8:	f003 0304 	and.w	r3, r3, #4
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d153      	bne.n	8014178 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d106      	bne.n	80140e4 <tcp_timewait_input+0x28>
 80140d6:	4b2c      	ldr	r3, [pc, #176]	@ (8014188 <tcp_timewait_input+0xcc>)
 80140d8:	f240 22ee 	movw	r2, #750	@ 0x2ee
 80140dc:	492b      	ldr	r1, [pc, #172]	@ (801418c <tcp_timewait_input+0xd0>)
 80140de:	482c      	ldr	r0, [pc, #176]	@ (8014190 <tcp_timewait_input+0xd4>)
 80140e0:	f00a f8fc 	bl	801e2dc <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80140e4:	4b27      	ldr	r3, [pc, #156]	@ (8014184 <tcp_timewait_input+0xc8>)
 80140e6:	781b      	ldrb	r3, [r3, #0]
 80140e8:	f003 0302 	and.w	r3, r3, #2
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d02a      	beq.n	8014146 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80140f0:	4b28      	ldr	r3, [pc, #160]	@ (8014194 <tcp_timewait_input+0xd8>)
 80140f2:	681a      	ldr	r2, [r3, #0]
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80140f8:	1ad3      	subs	r3, r2, r3
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	db2d      	blt.n	801415a <tcp_timewait_input+0x9e>
 80140fe:	4b25      	ldr	r3, [pc, #148]	@ (8014194 <tcp_timewait_input+0xd8>)
 8014100:	681a      	ldr	r2, [r3, #0]
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014106:	6879      	ldr	r1, [r7, #4]
 8014108:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801410a:	440b      	add	r3, r1
 801410c:	1ad3      	subs	r3, r2, r3
 801410e:	2b00      	cmp	r3, #0
 8014110:	dc23      	bgt.n	801415a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014112:	4b21      	ldr	r3, [pc, #132]	@ (8014198 <tcp_timewait_input+0xdc>)
 8014114:	6819      	ldr	r1, [r3, #0]
 8014116:	4b21      	ldr	r3, [pc, #132]	@ (801419c <tcp_timewait_input+0xe0>)
 8014118:	881b      	ldrh	r3, [r3, #0]
 801411a:	461a      	mov	r2, r3
 801411c:	4b1d      	ldr	r3, [pc, #116]	@ (8014194 <tcp_timewait_input+0xd8>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014122:	4b1f      	ldr	r3, [pc, #124]	@ (80141a0 <tcp_timewait_input+0xe4>)
 8014124:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014126:	885b      	ldrh	r3, [r3, #2]
 8014128:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801412a:	4a1d      	ldr	r2, [pc, #116]	@ (80141a0 <tcp_timewait_input+0xe4>)
 801412c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801412e:	8812      	ldrh	r2, [r2, #0]
 8014130:	b292      	uxth	r2, r2
 8014132:	9202      	str	r2, [sp, #8]
 8014134:	9301      	str	r3, [sp, #4]
 8014136:	4b1b      	ldr	r3, [pc, #108]	@ (80141a4 <tcp_timewait_input+0xe8>)
 8014138:	9300      	str	r3, [sp, #0]
 801413a:	4b1b      	ldr	r3, [pc, #108]	@ (80141a8 <tcp_timewait_input+0xec>)
 801413c:	4602      	mov	r2, r0
 801413e:	6878      	ldr	r0, [r7, #4]
 8014140:	f003 fac4 	bl	80176cc <tcp_rst>
      return;
 8014144:	e01b      	b.n	801417e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8014146:	4b0f      	ldr	r3, [pc, #60]	@ (8014184 <tcp_timewait_input+0xc8>)
 8014148:	781b      	ldrb	r3, [r3, #0]
 801414a:	f003 0301 	and.w	r3, r3, #1
 801414e:	2b00      	cmp	r3, #0
 8014150:	d003      	beq.n	801415a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014152:	4b16      	ldr	r3, [pc, #88]	@ (80141ac <tcp_timewait_input+0xf0>)
 8014154:	681a      	ldr	r2, [r3, #0]
 8014156:	687b      	ldr	r3, [r7, #4]
 8014158:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801415a:	4b10      	ldr	r3, [pc, #64]	@ (801419c <tcp_timewait_input+0xe0>)
 801415c:	881b      	ldrh	r3, [r3, #0]
 801415e:	2b00      	cmp	r3, #0
 8014160:	d00c      	beq.n	801417c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	8b5b      	ldrh	r3, [r3, #26]
 8014166:	f043 0302 	orr.w	r3, r3, #2
 801416a:	b29a      	uxth	r2, r3
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014170:	6878      	ldr	r0, [r7, #4]
 8014172:	f002 fcf7 	bl	8016b64 <tcp_output>
  }
  return;
 8014176:	e001      	b.n	801417c <tcp_timewait_input+0xc0>
    return;
 8014178:	bf00      	nop
 801417a:	e000      	b.n	801417e <tcp_timewait_input+0xc2>
  return;
 801417c:	bf00      	nop
}
 801417e:	3708      	adds	r7, #8
 8014180:	46bd      	mov	sp, r7
 8014182:	bd80      	pop	{r7, pc}
 8014184:	200126b4 	.word	0x200126b4
 8014188:	08023f10 	.word	0x08023f10
 801418c:	08024128 	.word	0x08024128
 8014190:	08023f5c 	.word	0x08023f5c
 8014194:	200126a8 	.word	0x200126a8
 8014198:	200126ac 	.word	0x200126ac
 801419c:	200126b2 	.word	0x200126b2
 80141a0:	20012698 	.word	0x20012698
 80141a4:	2000edc0 	.word	0x2000edc0
 80141a8:	2000edc4 	.word	0x2000edc4
 80141ac:	20012670 	.word	0x20012670

080141b0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80141b0:	b590      	push	{r4, r7, lr}
 80141b2:	b08d      	sub	sp, #52	@ 0x34
 80141b4:	af04      	add	r7, sp, #16
 80141b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80141b8:	2300      	movs	r3, #0
 80141ba:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80141bc:	2300      	movs	r3, #0
 80141be:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d106      	bne.n	80141d4 <tcp_process+0x24>
 80141c6:	4b9d      	ldr	r3, [pc, #628]	@ (801443c <tcp_process+0x28c>)
 80141c8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 80141cc:	499c      	ldr	r1, [pc, #624]	@ (8014440 <tcp_process+0x290>)
 80141ce:	489d      	ldr	r0, [pc, #628]	@ (8014444 <tcp_process+0x294>)
 80141d0:	f00a f884 	bl	801e2dc <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80141d4:	4b9c      	ldr	r3, [pc, #624]	@ (8014448 <tcp_process+0x298>)
 80141d6:	781b      	ldrb	r3, [r3, #0]
 80141d8:	f003 0304 	and.w	r3, r3, #4
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d04e      	beq.n	801427e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	7d1b      	ldrb	r3, [r3, #20]
 80141e4:	2b02      	cmp	r3, #2
 80141e6:	d108      	bne.n	80141fa <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80141ec:	4b97      	ldr	r3, [pc, #604]	@ (801444c <tcp_process+0x29c>)
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	429a      	cmp	r2, r3
 80141f2:	d123      	bne.n	801423c <tcp_process+0x8c>
        acceptable = 1;
 80141f4:	2301      	movs	r3, #1
 80141f6:	76fb      	strb	r3, [r7, #27]
 80141f8:	e020      	b.n	801423c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80141fe:	4b94      	ldr	r3, [pc, #592]	@ (8014450 <tcp_process+0x2a0>)
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	429a      	cmp	r2, r3
 8014204:	d102      	bne.n	801420c <tcp_process+0x5c>
        acceptable = 1;
 8014206:	2301      	movs	r3, #1
 8014208:	76fb      	strb	r3, [r7, #27]
 801420a:	e017      	b.n	801423c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801420c:	4b90      	ldr	r3, [pc, #576]	@ (8014450 <tcp_process+0x2a0>)
 801420e:	681a      	ldr	r2, [r3, #0]
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014214:	1ad3      	subs	r3, r2, r3
 8014216:	2b00      	cmp	r3, #0
 8014218:	db10      	blt.n	801423c <tcp_process+0x8c>
 801421a:	4b8d      	ldr	r3, [pc, #564]	@ (8014450 <tcp_process+0x2a0>)
 801421c:	681a      	ldr	r2, [r3, #0]
 801421e:	687b      	ldr	r3, [r7, #4]
 8014220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014222:	6879      	ldr	r1, [r7, #4]
 8014224:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014226:	440b      	add	r3, r1
 8014228:	1ad3      	subs	r3, r2, r3
 801422a:	2b00      	cmp	r3, #0
 801422c:	dc06      	bgt.n	801423c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	8b5b      	ldrh	r3, [r3, #26]
 8014232:	f043 0302 	orr.w	r3, r3, #2
 8014236:	b29a      	uxth	r2, r3
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801423c:	7efb      	ldrb	r3, [r7, #27]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d01b      	beq.n	801427a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	7d1b      	ldrb	r3, [r3, #20]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d106      	bne.n	8014258 <tcp_process+0xa8>
 801424a:	4b7c      	ldr	r3, [pc, #496]	@ (801443c <tcp_process+0x28c>)
 801424c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8014250:	4980      	ldr	r1, [pc, #512]	@ (8014454 <tcp_process+0x2a4>)
 8014252:	487c      	ldr	r0, [pc, #496]	@ (8014444 <tcp_process+0x294>)
 8014254:	f00a f842 	bl	801e2dc <iprintf>
      recv_flags |= TF_RESET;
 8014258:	4b7f      	ldr	r3, [pc, #508]	@ (8014458 <tcp_process+0x2a8>)
 801425a:	781b      	ldrb	r3, [r3, #0]
 801425c:	f043 0308 	orr.w	r3, r3, #8
 8014260:	b2da      	uxtb	r2, r3
 8014262:	4b7d      	ldr	r3, [pc, #500]	@ (8014458 <tcp_process+0x2a8>)
 8014264:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	8b5b      	ldrh	r3, [r3, #26]
 801426a:	f023 0301 	bic.w	r3, r3, #1
 801426e:	b29a      	uxth	r2, r3
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014274:	f06f 030d 	mvn.w	r3, #13
 8014278:	e37a      	b.n	8014970 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801427a:	2300      	movs	r3, #0
 801427c:	e378      	b.n	8014970 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801427e:	4b72      	ldr	r3, [pc, #456]	@ (8014448 <tcp_process+0x298>)
 8014280:	781b      	ldrb	r3, [r3, #0]
 8014282:	f003 0302 	and.w	r3, r3, #2
 8014286:	2b00      	cmp	r3, #0
 8014288:	d010      	beq.n	80142ac <tcp_process+0xfc>
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	7d1b      	ldrb	r3, [r3, #20]
 801428e:	2b02      	cmp	r3, #2
 8014290:	d00c      	beq.n	80142ac <tcp_process+0xfc>
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	7d1b      	ldrb	r3, [r3, #20]
 8014296:	2b03      	cmp	r3, #3
 8014298:	d008      	beq.n	80142ac <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	8b5b      	ldrh	r3, [r3, #26]
 801429e:	f043 0302 	orr.w	r3, r3, #2
 80142a2:	b29a      	uxth	r2, r3
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80142a8:	2300      	movs	r3, #0
 80142aa:	e361      	b.n	8014970 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	8b5b      	ldrh	r3, [r3, #26]
 80142b0:	f003 0310 	and.w	r3, r3, #16
 80142b4:	2b00      	cmp	r3, #0
 80142b6:	d103      	bne.n	80142c0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80142b8:	4b68      	ldr	r3, [pc, #416]	@ (801445c <tcp_process+0x2ac>)
 80142ba:	681a      	ldr	r2, [r3, #0]
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80142c0:	687b      	ldr	r3, [r7, #4]
 80142c2:	2200      	movs	r2, #0
 80142c4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	2200      	movs	r2, #0
 80142cc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 80142d0:	6878      	ldr	r0, [r7, #4]
 80142d2:	f001 fc2b 	bl	8015b2c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	7d1b      	ldrb	r3, [r3, #20]
 80142da:	3b02      	subs	r3, #2
 80142dc:	2b07      	cmp	r3, #7
 80142de:	f200 8337 	bhi.w	8014950 <tcp_process+0x7a0>
 80142e2:	a201      	add	r2, pc, #4	@ (adr r2, 80142e8 <tcp_process+0x138>)
 80142e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80142e8:	08014309 	.word	0x08014309
 80142ec:	08014539 	.word	0x08014539
 80142f0:	080146b1 	.word	0x080146b1
 80142f4:	080146db 	.word	0x080146db
 80142f8:	080147ff 	.word	0x080147ff
 80142fc:	080146b1 	.word	0x080146b1
 8014300:	0801488b 	.word	0x0801488b
 8014304:	0801491b 	.word	0x0801491b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014308:	4b4f      	ldr	r3, [pc, #316]	@ (8014448 <tcp_process+0x298>)
 801430a:	781b      	ldrb	r3, [r3, #0]
 801430c:	f003 0310 	and.w	r3, r3, #16
 8014310:	2b00      	cmp	r3, #0
 8014312:	f000 80e4 	beq.w	80144de <tcp_process+0x32e>
 8014316:	4b4c      	ldr	r3, [pc, #304]	@ (8014448 <tcp_process+0x298>)
 8014318:	781b      	ldrb	r3, [r3, #0]
 801431a:	f003 0302 	and.w	r3, r3, #2
 801431e:	2b00      	cmp	r3, #0
 8014320:	f000 80dd 	beq.w	80144de <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014328:	1c5a      	adds	r2, r3, #1
 801432a:	4b48      	ldr	r3, [pc, #288]	@ (801444c <tcp_process+0x29c>)
 801432c:	681b      	ldr	r3, [r3, #0]
 801432e:	429a      	cmp	r2, r3
 8014330:	f040 80d5 	bne.w	80144de <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014334:	4b46      	ldr	r3, [pc, #280]	@ (8014450 <tcp_process+0x2a0>)
 8014336:	681b      	ldr	r3, [r3, #0]
 8014338:	1c5a      	adds	r2, r3, #1
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8014346:	4b41      	ldr	r3, [pc, #260]	@ (801444c <tcp_process+0x29c>)
 8014348:	681a      	ldr	r2, [r3, #0]
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801434e:	4b44      	ldr	r3, [pc, #272]	@ (8014460 <tcp_process+0x2b0>)
 8014350:	681b      	ldr	r3, [r3, #0]
 8014352:	89db      	ldrh	r3, [r3, #14]
 8014354:	b29a      	uxth	r2, r3
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8014368:	4b39      	ldr	r3, [pc, #228]	@ (8014450 <tcp_process+0x2a0>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	1e5a      	subs	r2, r3, #1
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	2204      	movs	r2, #4
 8014376:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 801437c:	687b      	ldr	r3, [r7, #4]
 801437e:	3304      	adds	r3, #4
 8014380:	4618      	mov	r0, r3
 8014382:	f007 fa19 	bl	801b7b8 <ip4_route>
 8014386:	4601      	mov	r1, r0
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	3304      	adds	r3, #4
 801438c:	461a      	mov	r2, r3
 801438e:	4620      	mov	r0, r4
 8014390:	f7ff f88c 	bl	80134ac <tcp_eff_send_mss_netif>
 8014394:	4603      	mov	r3, r0
 8014396:	461a      	mov	r2, r3
 8014398:	687b      	ldr	r3, [r7, #4]
 801439a:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80143a0:	009a      	lsls	r2, r3, #2
 80143a2:	687b      	ldr	r3, [r7, #4]
 80143a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80143a6:	005b      	lsls	r3, r3, #1
 80143a8:	f241 111c 	movw	r1, #4380	@ 0x111c
 80143ac:	428b      	cmp	r3, r1
 80143ae:	bf38      	it	cc
 80143b0:	460b      	movcc	r3, r1
 80143b2:	429a      	cmp	r2, r3
 80143b4:	d204      	bcs.n	80143c0 <tcp_process+0x210>
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80143ba:	009b      	lsls	r3, r3, #2
 80143bc:	b29b      	uxth	r3, r3
 80143be:	e00d      	b.n	80143dc <tcp_process+0x22c>
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80143c4:	005b      	lsls	r3, r3, #1
 80143c6:	f241 121c 	movw	r2, #4380	@ 0x111c
 80143ca:	4293      	cmp	r3, r2
 80143cc:	d904      	bls.n	80143d8 <tcp_process+0x228>
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80143d2:	005b      	lsls	r3, r3, #1
 80143d4:	b29b      	uxth	r3, r3
 80143d6:	e001      	b.n	80143dc <tcp_process+0x22c>
 80143d8:	f241 131c 	movw	r3, #4380	@ 0x111c
 80143dc:	687a      	ldr	r2, [r7, #4]
 80143de:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d106      	bne.n	80143fa <tcp_process+0x24a>
 80143ec:	4b13      	ldr	r3, [pc, #76]	@ (801443c <tcp_process+0x28c>)
 80143ee:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 80143f2:	491c      	ldr	r1, [pc, #112]	@ (8014464 <tcp_process+0x2b4>)
 80143f4:	4813      	ldr	r0, [pc, #76]	@ (8014444 <tcp_process+0x294>)
 80143f6:	f009 ff71 	bl	801e2dc <iprintf>
        --pcb->snd_queuelen;
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014400:	3b01      	subs	r3, #1
 8014402:	b29a      	uxth	r2, r3
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801440a:	687b      	ldr	r3, [r7, #4]
 801440c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801440e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014410:	69fb      	ldr	r3, [r7, #28]
 8014412:	2b00      	cmp	r3, #0
 8014414:	d12a      	bne.n	801446c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801441a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801441c:	69fb      	ldr	r3, [r7, #28]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d106      	bne.n	8014430 <tcp_process+0x280>
 8014422:	4b06      	ldr	r3, [pc, #24]	@ (801443c <tcp_process+0x28c>)
 8014424:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8014428:	490f      	ldr	r1, [pc, #60]	@ (8014468 <tcp_process+0x2b8>)
 801442a:	4806      	ldr	r0, [pc, #24]	@ (8014444 <tcp_process+0x294>)
 801442c:	f009 ff56 	bl	801e2dc <iprintf>
          pcb->unsent = rseg->next;
 8014430:	69fb      	ldr	r3, [r7, #28]
 8014432:	681a      	ldr	r2, [r3, #0]
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014438:	e01c      	b.n	8014474 <tcp_process+0x2c4>
 801443a:	bf00      	nop
 801443c:	08023f10 	.word	0x08023f10
 8014440:	08024148 	.word	0x08024148
 8014444:	08023f5c 	.word	0x08023f5c
 8014448:	200126b4 	.word	0x200126b4
 801444c:	200126ac 	.word	0x200126ac
 8014450:	200126a8 	.word	0x200126a8
 8014454:	08024164 	.word	0x08024164
 8014458:	200126b5 	.word	0x200126b5
 801445c:	20012670 	.word	0x20012670
 8014460:	20012698 	.word	0x20012698
 8014464:	08024184 	.word	0x08024184
 8014468:	0802419c 	.word	0x0802419c
        } else {
          pcb->unacked = rseg->next;
 801446c:	69fb      	ldr	r3, [r7, #28]
 801446e:	681a      	ldr	r2, [r3, #0]
 8014470:	687b      	ldr	r3, [r7, #4]
 8014472:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8014474:	69f8      	ldr	r0, [r7, #28]
 8014476:	f7fe fc54 	bl	8012d22 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801447e:	2b00      	cmp	r3, #0
 8014480:	d104      	bne.n	801448c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014488:	861a      	strh	r2, [r3, #48]	@ 0x30
 801448a:	e006      	b.n	801449a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2200      	movs	r2, #0
 8014490:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	2200      	movs	r2, #0
 8014496:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d00a      	beq.n	80144ba <tcp_process+0x30a>
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80144aa:	687a      	ldr	r2, [r7, #4]
 80144ac:	6910      	ldr	r0, [r2, #16]
 80144ae:	2200      	movs	r2, #0
 80144b0:	6879      	ldr	r1, [r7, #4]
 80144b2:	4798      	blx	r3
 80144b4:	4603      	mov	r3, r0
 80144b6:	76bb      	strb	r3, [r7, #26]
 80144b8:	e001      	b.n	80144be <tcp_process+0x30e>
 80144ba:	2300      	movs	r3, #0
 80144bc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80144be:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80144c2:	f113 0f0d 	cmn.w	r3, #13
 80144c6:	d102      	bne.n	80144ce <tcp_process+0x31e>
          return ERR_ABRT;
 80144c8:	f06f 030c 	mvn.w	r3, #12
 80144cc:	e250      	b.n	8014970 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80144ce:	687b      	ldr	r3, [r7, #4]
 80144d0:	8b5b      	ldrh	r3, [r3, #26]
 80144d2:	f043 0302 	orr.w	r3, r3, #2
 80144d6:	b29a      	uxth	r2, r3
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80144dc:	e23a      	b.n	8014954 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80144de:	4b98      	ldr	r3, [pc, #608]	@ (8014740 <tcp_process+0x590>)
 80144e0:	781b      	ldrb	r3, [r3, #0]
 80144e2:	f003 0310 	and.w	r3, r3, #16
 80144e6:	2b00      	cmp	r3, #0
 80144e8:	f000 8234 	beq.w	8014954 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80144ec:	4b95      	ldr	r3, [pc, #596]	@ (8014744 <tcp_process+0x594>)
 80144ee:	6819      	ldr	r1, [r3, #0]
 80144f0:	4b95      	ldr	r3, [pc, #596]	@ (8014748 <tcp_process+0x598>)
 80144f2:	881b      	ldrh	r3, [r3, #0]
 80144f4:	461a      	mov	r2, r3
 80144f6:	4b95      	ldr	r3, [pc, #596]	@ (801474c <tcp_process+0x59c>)
 80144f8:	681b      	ldr	r3, [r3, #0]
 80144fa:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80144fc:	4b94      	ldr	r3, [pc, #592]	@ (8014750 <tcp_process+0x5a0>)
 80144fe:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014500:	885b      	ldrh	r3, [r3, #2]
 8014502:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014504:	4a92      	ldr	r2, [pc, #584]	@ (8014750 <tcp_process+0x5a0>)
 8014506:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014508:	8812      	ldrh	r2, [r2, #0]
 801450a:	b292      	uxth	r2, r2
 801450c:	9202      	str	r2, [sp, #8]
 801450e:	9301      	str	r3, [sp, #4]
 8014510:	4b90      	ldr	r3, [pc, #576]	@ (8014754 <tcp_process+0x5a4>)
 8014512:	9300      	str	r3, [sp, #0]
 8014514:	4b90      	ldr	r3, [pc, #576]	@ (8014758 <tcp_process+0x5a8>)
 8014516:	4602      	mov	r2, r0
 8014518:	6878      	ldr	r0, [r7, #4]
 801451a:	f003 f8d7 	bl	80176cc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801451e:	687b      	ldr	r3, [r7, #4]
 8014520:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014524:	2b05      	cmp	r3, #5
 8014526:	f200 8215 	bhi.w	8014954 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	2200      	movs	r2, #0
 801452e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8014530:	6878      	ldr	r0, [r7, #4]
 8014532:	f002 fea3 	bl	801727c <tcp_rexmit_rto>
      break;
 8014536:	e20d      	b.n	8014954 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014538:	4b81      	ldr	r3, [pc, #516]	@ (8014740 <tcp_process+0x590>)
 801453a:	781b      	ldrb	r3, [r3, #0]
 801453c:	f003 0310 	and.w	r3, r3, #16
 8014540:	2b00      	cmp	r3, #0
 8014542:	f000 80a1 	beq.w	8014688 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014546:	4b7f      	ldr	r3, [pc, #508]	@ (8014744 <tcp_process+0x594>)
 8014548:	681a      	ldr	r2, [r3, #0]
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801454e:	1ad3      	subs	r3, r2, r3
 8014550:	3b01      	subs	r3, #1
 8014552:	2b00      	cmp	r3, #0
 8014554:	db7e      	blt.n	8014654 <tcp_process+0x4a4>
 8014556:	4b7b      	ldr	r3, [pc, #492]	@ (8014744 <tcp_process+0x594>)
 8014558:	681a      	ldr	r2, [r3, #0]
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801455e:	1ad3      	subs	r3, r2, r3
 8014560:	2b00      	cmp	r3, #0
 8014562:	dc77      	bgt.n	8014654 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014564:	687b      	ldr	r3, [r7, #4]
 8014566:	2204      	movs	r2, #4
 8014568:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801456e:	2b00      	cmp	r3, #0
 8014570:	d102      	bne.n	8014578 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014572:	23fa      	movs	r3, #250	@ 0xfa
 8014574:	76bb      	strb	r3, [r7, #26]
 8014576:	e01d      	b.n	80145b4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8014578:	687b      	ldr	r3, [r7, #4]
 801457a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801457c:	699b      	ldr	r3, [r3, #24]
 801457e:	2b00      	cmp	r3, #0
 8014580:	d106      	bne.n	8014590 <tcp_process+0x3e0>
 8014582:	4b76      	ldr	r3, [pc, #472]	@ (801475c <tcp_process+0x5ac>)
 8014584:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8014588:	4975      	ldr	r1, [pc, #468]	@ (8014760 <tcp_process+0x5b0>)
 801458a:	4876      	ldr	r0, [pc, #472]	@ (8014764 <tcp_process+0x5b4>)
 801458c:	f009 fea6 	bl	801e2dc <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014594:	699b      	ldr	r3, [r3, #24]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d00a      	beq.n	80145b0 <tcp_process+0x400>
 801459a:	687b      	ldr	r3, [r7, #4]
 801459c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801459e:	699b      	ldr	r3, [r3, #24]
 80145a0:	687a      	ldr	r2, [r7, #4]
 80145a2:	6910      	ldr	r0, [r2, #16]
 80145a4:	2200      	movs	r2, #0
 80145a6:	6879      	ldr	r1, [r7, #4]
 80145a8:	4798      	blx	r3
 80145aa:	4603      	mov	r3, r0
 80145ac:	76bb      	strb	r3, [r7, #26]
 80145ae:	e001      	b.n	80145b4 <tcp_process+0x404>
 80145b0:	23f0      	movs	r3, #240	@ 0xf0
 80145b2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80145b4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d00a      	beq.n	80145d2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80145bc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80145c0:	f113 0f0d 	cmn.w	r3, #13
 80145c4:	d002      	beq.n	80145cc <tcp_process+0x41c>
              tcp_abort(pcb);
 80145c6:	6878      	ldr	r0, [r7, #4]
 80145c8:	f7fd fd60 	bl	801208c <tcp_abort>
            }
            return ERR_ABRT;
 80145cc:	f06f 030c 	mvn.w	r3, #12
 80145d0:	e1ce      	b.n	8014970 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80145d2:	6878      	ldr	r0, [r7, #4]
 80145d4:	f000 fae0 	bl	8014b98 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80145d8:	4b63      	ldr	r3, [pc, #396]	@ (8014768 <tcp_process+0x5b8>)
 80145da:	881b      	ldrh	r3, [r3, #0]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d005      	beq.n	80145ec <tcp_process+0x43c>
            recv_acked--;
 80145e0:	4b61      	ldr	r3, [pc, #388]	@ (8014768 <tcp_process+0x5b8>)
 80145e2:	881b      	ldrh	r3, [r3, #0]
 80145e4:	3b01      	subs	r3, #1
 80145e6:	b29a      	uxth	r2, r3
 80145e8:	4b5f      	ldr	r3, [pc, #380]	@ (8014768 <tcp_process+0x5b8>)
 80145ea:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80145f0:	009a      	lsls	r2, r3, #2
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80145f6:	005b      	lsls	r3, r3, #1
 80145f8:	f241 111c 	movw	r1, #4380	@ 0x111c
 80145fc:	428b      	cmp	r3, r1
 80145fe:	bf38      	it	cc
 8014600:	460b      	movcc	r3, r1
 8014602:	429a      	cmp	r2, r3
 8014604:	d204      	bcs.n	8014610 <tcp_process+0x460>
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801460a:	009b      	lsls	r3, r3, #2
 801460c:	b29b      	uxth	r3, r3
 801460e:	e00d      	b.n	801462c <tcp_process+0x47c>
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014614:	005b      	lsls	r3, r3, #1
 8014616:	f241 121c 	movw	r2, #4380	@ 0x111c
 801461a:	4293      	cmp	r3, r2
 801461c:	d904      	bls.n	8014628 <tcp_process+0x478>
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014622:	005b      	lsls	r3, r3, #1
 8014624:	b29b      	uxth	r3, r3
 8014626:	e001      	b.n	801462c <tcp_process+0x47c>
 8014628:	f241 131c 	movw	r3, #4380	@ 0x111c
 801462c:	687a      	ldr	r2, [r7, #4]
 801462e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014632:	4b4e      	ldr	r3, [pc, #312]	@ (801476c <tcp_process+0x5bc>)
 8014634:	781b      	ldrb	r3, [r3, #0]
 8014636:	f003 0320 	and.w	r3, r3, #32
 801463a:	2b00      	cmp	r3, #0
 801463c:	d037      	beq.n	80146ae <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	8b5b      	ldrh	r3, [r3, #26]
 8014642:	f043 0302 	orr.w	r3, r3, #2
 8014646:	b29a      	uxth	r2, r3
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801464c:	687b      	ldr	r3, [r7, #4]
 801464e:	2207      	movs	r2, #7
 8014650:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014652:	e02c      	b.n	80146ae <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014654:	4b3b      	ldr	r3, [pc, #236]	@ (8014744 <tcp_process+0x594>)
 8014656:	6819      	ldr	r1, [r3, #0]
 8014658:	4b3b      	ldr	r3, [pc, #236]	@ (8014748 <tcp_process+0x598>)
 801465a:	881b      	ldrh	r3, [r3, #0]
 801465c:	461a      	mov	r2, r3
 801465e:	4b3b      	ldr	r3, [pc, #236]	@ (801474c <tcp_process+0x59c>)
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014664:	4b3a      	ldr	r3, [pc, #232]	@ (8014750 <tcp_process+0x5a0>)
 8014666:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014668:	885b      	ldrh	r3, [r3, #2]
 801466a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801466c:	4a38      	ldr	r2, [pc, #224]	@ (8014750 <tcp_process+0x5a0>)
 801466e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014670:	8812      	ldrh	r2, [r2, #0]
 8014672:	b292      	uxth	r2, r2
 8014674:	9202      	str	r2, [sp, #8]
 8014676:	9301      	str	r3, [sp, #4]
 8014678:	4b36      	ldr	r3, [pc, #216]	@ (8014754 <tcp_process+0x5a4>)
 801467a:	9300      	str	r3, [sp, #0]
 801467c:	4b36      	ldr	r3, [pc, #216]	@ (8014758 <tcp_process+0x5a8>)
 801467e:	4602      	mov	r2, r0
 8014680:	6878      	ldr	r0, [r7, #4]
 8014682:	f003 f823 	bl	80176cc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8014686:	e167      	b.n	8014958 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014688:	4b2d      	ldr	r3, [pc, #180]	@ (8014740 <tcp_process+0x590>)
 801468a:	781b      	ldrb	r3, [r3, #0]
 801468c:	f003 0302 	and.w	r3, r3, #2
 8014690:	2b00      	cmp	r3, #0
 8014692:	f000 8161 	beq.w	8014958 <tcp_process+0x7a8>
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801469a:	1e5a      	subs	r2, r3, #1
 801469c:	4b2b      	ldr	r3, [pc, #172]	@ (801474c <tcp_process+0x59c>)
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	429a      	cmp	r2, r3
 80146a2:	f040 8159 	bne.w	8014958 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80146a6:	6878      	ldr	r0, [r7, #4]
 80146a8:	f002 fe0a 	bl	80172c0 <tcp_rexmit>
      break;
 80146ac:	e154      	b.n	8014958 <tcp_process+0x7a8>
 80146ae:	e153      	b.n	8014958 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80146b0:	6878      	ldr	r0, [r7, #4]
 80146b2:	f000 fa71 	bl	8014b98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80146b6:	4b2d      	ldr	r3, [pc, #180]	@ (801476c <tcp_process+0x5bc>)
 80146b8:	781b      	ldrb	r3, [r3, #0]
 80146ba:	f003 0320 	and.w	r3, r3, #32
 80146be:	2b00      	cmp	r3, #0
 80146c0:	f000 814c 	beq.w	801495c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	8b5b      	ldrh	r3, [r3, #26]
 80146c8:	f043 0302 	orr.w	r3, r3, #2
 80146cc:	b29a      	uxth	r2, r3
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	2207      	movs	r2, #7
 80146d6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80146d8:	e140      	b.n	801495c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80146da:	6878      	ldr	r0, [r7, #4]
 80146dc:	f000 fa5c 	bl	8014b98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80146e0:	4b22      	ldr	r3, [pc, #136]	@ (801476c <tcp_process+0x5bc>)
 80146e2:	781b      	ldrb	r3, [r3, #0]
 80146e4:	f003 0320 	and.w	r3, r3, #32
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d071      	beq.n	80147d0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80146ec:	4b14      	ldr	r3, [pc, #80]	@ (8014740 <tcp_process+0x590>)
 80146ee:	781b      	ldrb	r3, [r3, #0]
 80146f0:	f003 0310 	and.w	r3, r3, #16
 80146f4:	2b00      	cmp	r3, #0
 80146f6:	d060      	beq.n	80147ba <tcp_process+0x60a>
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80146fc:	4b11      	ldr	r3, [pc, #68]	@ (8014744 <tcp_process+0x594>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	429a      	cmp	r2, r3
 8014702:	d15a      	bne.n	80147ba <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014708:	2b00      	cmp	r3, #0
 801470a:	d156      	bne.n	80147ba <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801470c:	687b      	ldr	r3, [r7, #4]
 801470e:	8b5b      	ldrh	r3, [r3, #26]
 8014710:	f043 0302 	orr.w	r3, r3, #2
 8014714:	b29a      	uxth	r2, r3
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801471a:	6878      	ldr	r0, [r7, #4]
 801471c:	f7fe fdbc 	bl	8013298 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014720:	4b13      	ldr	r3, [pc, #76]	@ (8014770 <tcp_process+0x5c0>)
 8014722:	681b      	ldr	r3, [r3, #0]
 8014724:	687a      	ldr	r2, [r7, #4]
 8014726:	429a      	cmp	r2, r3
 8014728:	d105      	bne.n	8014736 <tcp_process+0x586>
 801472a:	4b11      	ldr	r3, [pc, #68]	@ (8014770 <tcp_process+0x5c0>)
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	68db      	ldr	r3, [r3, #12]
 8014730:	4a0f      	ldr	r2, [pc, #60]	@ (8014770 <tcp_process+0x5c0>)
 8014732:	6013      	str	r3, [r2, #0]
 8014734:	e02e      	b.n	8014794 <tcp_process+0x5e4>
 8014736:	4b0e      	ldr	r3, [pc, #56]	@ (8014770 <tcp_process+0x5c0>)
 8014738:	681b      	ldr	r3, [r3, #0]
 801473a:	617b      	str	r3, [r7, #20]
 801473c:	e027      	b.n	801478e <tcp_process+0x5de>
 801473e:	bf00      	nop
 8014740:	200126b4 	.word	0x200126b4
 8014744:	200126ac 	.word	0x200126ac
 8014748:	200126b2 	.word	0x200126b2
 801474c:	200126a8 	.word	0x200126a8
 8014750:	20012698 	.word	0x20012698
 8014754:	2000edc0 	.word	0x2000edc0
 8014758:	2000edc4 	.word	0x2000edc4
 801475c:	08023f10 	.word	0x08023f10
 8014760:	080241b0 	.word	0x080241b0
 8014764:	08023f5c 	.word	0x08023f5c
 8014768:	200126b0 	.word	0x200126b0
 801476c:	200126b5 	.word	0x200126b5
 8014770:	2001267c 	.word	0x2001267c
 8014774:	697b      	ldr	r3, [r7, #20]
 8014776:	68db      	ldr	r3, [r3, #12]
 8014778:	687a      	ldr	r2, [r7, #4]
 801477a:	429a      	cmp	r2, r3
 801477c:	d104      	bne.n	8014788 <tcp_process+0x5d8>
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	68da      	ldr	r2, [r3, #12]
 8014782:	697b      	ldr	r3, [r7, #20]
 8014784:	60da      	str	r2, [r3, #12]
 8014786:	e005      	b.n	8014794 <tcp_process+0x5e4>
 8014788:	697b      	ldr	r3, [r7, #20]
 801478a:	68db      	ldr	r3, [r3, #12]
 801478c:	617b      	str	r3, [r7, #20]
 801478e:	697b      	ldr	r3, [r7, #20]
 8014790:	2b00      	cmp	r3, #0
 8014792:	d1ef      	bne.n	8014774 <tcp_process+0x5c4>
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2200      	movs	r2, #0
 8014798:	60da      	str	r2, [r3, #12]
 801479a:	4b77      	ldr	r3, [pc, #476]	@ (8014978 <tcp_process+0x7c8>)
 801479c:	2201      	movs	r2, #1
 801479e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	220a      	movs	r2, #10
 80147a4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80147a6:	4b75      	ldr	r3, [pc, #468]	@ (801497c <tcp_process+0x7cc>)
 80147a8:	681a      	ldr	r2, [r3, #0]
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	60da      	str	r2, [r3, #12]
 80147ae:	4a73      	ldr	r2, [pc, #460]	@ (801497c <tcp_process+0x7cc>)
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	6013      	str	r3, [r2, #0]
 80147b4:	f003 f94c 	bl	8017a50 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80147b8:	e0d2      	b.n	8014960 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	8b5b      	ldrh	r3, [r3, #26]
 80147be:	f043 0302 	orr.w	r3, r3, #2
 80147c2:	b29a      	uxth	r2, r3
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	2208      	movs	r2, #8
 80147cc:	751a      	strb	r2, [r3, #20]
      break;
 80147ce:	e0c7      	b.n	8014960 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80147d0:	4b6b      	ldr	r3, [pc, #428]	@ (8014980 <tcp_process+0x7d0>)
 80147d2:	781b      	ldrb	r3, [r3, #0]
 80147d4:	f003 0310 	and.w	r3, r3, #16
 80147d8:	2b00      	cmp	r3, #0
 80147da:	f000 80c1 	beq.w	8014960 <tcp_process+0x7b0>
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80147e2:	4b68      	ldr	r3, [pc, #416]	@ (8014984 <tcp_process+0x7d4>)
 80147e4:	681b      	ldr	r3, [r3, #0]
 80147e6:	429a      	cmp	r2, r3
 80147e8:	f040 80ba 	bne.w	8014960 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	f040 80b5 	bne.w	8014960 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	2206      	movs	r2, #6
 80147fa:	751a      	strb	r2, [r3, #20]
      break;
 80147fc:	e0b0      	b.n	8014960 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80147fe:	6878      	ldr	r0, [r7, #4]
 8014800:	f000 f9ca 	bl	8014b98 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014804:	4b60      	ldr	r3, [pc, #384]	@ (8014988 <tcp_process+0x7d8>)
 8014806:	781b      	ldrb	r3, [r3, #0]
 8014808:	f003 0320 	and.w	r3, r3, #32
 801480c:	2b00      	cmp	r3, #0
 801480e:	f000 80a9 	beq.w	8014964 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014812:	687b      	ldr	r3, [r7, #4]
 8014814:	8b5b      	ldrh	r3, [r3, #26]
 8014816:	f043 0302 	orr.w	r3, r3, #2
 801481a:	b29a      	uxth	r2, r3
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014820:	6878      	ldr	r0, [r7, #4]
 8014822:	f7fe fd39 	bl	8013298 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014826:	4b59      	ldr	r3, [pc, #356]	@ (801498c <tcp_process+0x7dc>)
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	687a      	ldr	r2, [r7, #4]
 801482c:	429a      	cmp	r2, r3
 801482e:	d105      	bne.n	801483c <tcp_process+0x68c>
 8014830:	4b56      	ldr	r3, [pc, #344]	@ (801498c <tcp_process+0x7dc>)
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	68db      	ldr	r3, [r3, #12]
 8014836:	4a55      	ldr	r2, [pc, #340]	@ (801498c <tcp_process+0x7dc>)
 8014838:	6013      	str	r3, [r2, #0]
 801483a:	e013      	b.n	8014864 <tcp_process+0x6b4>
 801483c:	4b53      	ldr	r3, [pc, #332]	@ (801498c <tcp_process+0x7dc>)
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	613b      	str	r3, [r7, #16]
 8014842:	e00c      	b.n	801485e <tcp_process+0x6ae>
 8014844:	693b      	ldr	r3, [r7, #16]
 8014846:	68db      	ldr	r3, [r3, #12]
 8014848:	687a      	ldr	r2, [r7, #4]
 801484a:	429a      	cmp	r2, r3
 801484c:	d104      	bne.n	8014858 <tcp_process+0x6a8>
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	68da      	ldr	r2, [r3, #12]
 8014852:	693b      	ldr	r3, [r7, #16]
 8014854:	60da      	str	r2, [r3, #12]
 8014856:	e005      	b.n	8014864 <tcp_process+0x6b4>
 8014858:	693b      	ldr	r3, [r7, #16]
 801485a:	68db      	ldr	r3, [r3, #12]
 801485c:	613b      	str	r3, [r7, #16]
 801485e:	693b      	ldr	r3, [r7, #16]
 8014860:	2b00      	cmp	r3, #0
 8014862:	d1ef      	bne.n	8014844 <tcp_process+0x694>
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	2200      	movs	r2, #0
 8014868:	60da      	str	r2, [r3, #12]
 801486a:	4b43      	ldr	r3, [pc, #268]	@ (8014978 <tcp_process+0x7c8>)
 801486c:	2201      	movs	r2, #1
 801486e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	220a      	movs	r2, #10
 8014874:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014876:	4b41      	ldr	r3, [pc, #260]	@ (801497c <tcp_process+0x7cc>)
 8014878:	681a      	ldr	r2, [r3, #0]
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	60da      	str	r2, [r3, #12]
 801487e:	4a3f      	ldr	r2, [pc, #252]	@ (801497c <tcp_process+0x7cc>)
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	6013      	str	r3, [r2, #0]
 8014884:	f003 f8e4 	bl	8017a50 <tcp_timer_needed>
      }
      break;
 8014888:	e06c      	b.n	8014964 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801488a:	6878      	ldr	r0, [r7, #4]
 801488c:	f000 f984 	bl	8014b98 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014890:	4b3b      	ldr	r3, [pc, #236]	@ (8014980 <tcp_process+0x7d0>)
 8014892:	781b      	ldrb	r3, [r3, #0]
 8014894:	f003 0310 	and.w	r3, r3, #16
 8014898:	2b00      	cmp	r3, #0
 801489a:	d065      	beq.n	8014968 <tcp_process+0x7b8>
 801489c:	687b      	ldr	r3, [r7, #4]
 801489e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80148a0:	4b38      	ldr	r3, [pc, #224]	@ (8014984 <tcp_process+0x7d4>)
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	429a      	cmp	r2, r3
 80148a6:	d15f      	bne.n	8014968 <tcp_process+0x7b8>
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80148ac:	2b00      	cmp	r3, #0
 80148ae:	d15b      	bne.n	8014968 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80148b0:	6878      	ldr	r0, [r7, #4]
 80148b2:	f7fe fcf1 	bl	8013298 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80148b6:	4b35      	ldr	r3, [pc, #212]	@ (801498c <tcp_process+0x7dc>)
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	687a      	ldr	r2, [r7, #4]
 80148bc:	429a      	cmp	r2, r3
 80148be:	d105      	bne.n	80148cc <tcp_process+0x71c>
 80148c0:	4b32      	ldr	r3, [pc, #200]	@ (801498c <tcp_process+0x7dc>)
 80148c2:	681b      	ldr	r3, [r3, #0]
 80148c4:	68db      	ldr	r3, [r3, #12]
 80148c6:	4a31      	ldr	r2, [pc, #196]	@ (801498c <tcp_process+0x7dc>)
 80148c8:	6013      	str	r3, [r2, #0]
 80148ca:	e013      	b.n	80148f4 <tcp_process+0x744>
 80148cc:	4b2f      	ldr	r3, [pc, #188]	@ (801498c <tcp_process+0x7dc>)
 80148ce:	681b      	ldr	r3, [r3, #0]
 80148d0:	60fb      	str	r3, [r7, #12]
 80148d2:	e00c      	b.n	80148ee <tcp_process+0x73e>
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	68db      	ldr	r3, [r3, #12]
 80148d8:	687a      	ldr	r2, [r7, #4]
 80148da:	429a      	cmp	r2, r3
 80148dc:	d104      	bne.n	80148e8 <tcp_process+0x738>
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	68da      	ldr	r2, [r3, #12]
 80148e2:	68fb      	ldr	r3, [r7, #12]
 80148e4:	60da      	str	r2, [r3, #12]
 80148e6:	e005      	b.n	80148f4 <tcp_process+0x744>
 80148e8:	68fb      	ldr	r3, [r7, #12]
 80148ea:	68db      	ldr	r3, [r3, #12]
 80148ec:	60fb      	str	r3, [r7, #12]
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d1ef      	bne.n	80148d4 <tcp_process+0x724>
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	2200      	movs	r2, #0
 80148f8:	60da      	str	r2, [r3, #12]
 80148fa:	4b1f      	ldr	r3, [pc, #124]	@ (8014978 <tcp_process+0x7c8>)
 80148fc:	2201      	movs	r2, #1
 80148fe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	220a      	movs	r2, #10
 8014904:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014906:	4b1d      	ldr	r3, [pc, #116]	@ (801497c <tcp_process+0x7cc>)
 8014908:	681a      	ldr	r2, [r3, #0]
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	60da      	str	r2, [r3, #12]
 801490e:	4a1b      	ldr	r2, [pc, #108]	@ (801497c <tcp_process+0x7cc>)
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	6013      	str	r3, [r2, #0]
 8014914:	f003 f89c 	bl	8017a50 <tcp_timer_needed>
      }
      break;
 8014918:	e026      	b.n	8014968 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801491a:	6878      	ldr	r0, [r7, #4]
 801491c:	f000 f93c 	bl	8014b98 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014920:	4b17      	ldr	r3, [pc, #92]	@ (8014980 <tcp_process+0x7d0>)
 8014922:	781b      	ldrb	r3, [r3, #0]
 8014924:	f003 0310 	and.w	r3, r3, #16
 8014928:	2b00      	cmp	r3, #0
 801492a:	d01f      	beq.n	801496c <tcp_process+0x7bc>
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014930:	4b14      	ldr	r3, [pc, #80]	@ (8014984 <tcp_process+0x7d4>)
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	429a      	cmp	r2, r3
 8014936:	d119      	bne.n	801496c <tcp_process+0x7bc>
 8014938:	687b      	ldr	r3, [r7, #4]
 801493a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801493c:	2b00      	cmp	r3, #0
 801493e:	d115      	bne.n	801496c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014940:	4b11      	ldr	r3, [pc, #68]	@ (8014988 <tcp_process+0x7d8>)
 8014942:	781b      	ldrb	r3, [r3, #0]
 8014944:	f043 0310 	orr.w	r3, r3, #16
 8014948:	b2da      	uxtb	r2, r3
 801494a:	4b0f      	ldr	r3, [pc, #60]	@ (8014988 <tcp_process+0x7d8>)
 801494c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801494e:	e00d      	b.n	801496c <tcp_process+0x7bc>
    default:
      break;
 8014950:	bf00      	nop
 8014952:	e00c      	b.n	801496e <tcp_process+0x7be>
      break;
 8014954:	bf00      	nop
 8014956:	e00a      	b.n	801496e <tcp_process+0x7be>
      break;
 8014958:	bf00      	nop
 801495a:	e008      	b.n	801496e <tcp_process+0x7be>
      break;
 801495c:	bf00      	nop
 801495e:	e006      	b.n	801496e <tcp_process+0x7be>
      break;
 8014960:	bf00      	nop
 8014962:	e004      	b.n	801496e <tcp_process+0x7be>
      break;
 8014964:	bf00      	nop
 8014966:	e002      	b.n	801496e <tcp_process+0x7be>
      break;
 8014968:	bf00      	nop
 801496a:	e000      	b.n	801496e <tcp_process+0x7be>
      break;
 801496c:	bf00      	nop
  }
  return ERR_OK;
 801496e:	2300      	movs	r3, #0
}
 8014970:	4618      	mov	r0, r3
 8014972:	3724      	adds	r7, #36	@ 0x24
 8014974:	46bd      	mov	sp, r7
 8014976:	bd90      	pop	{r4, r7, pc}
 8014978:	20012684 	.word	0x20012684
 801497c:	20012680 	.word	0x20012680
 8014980:	200126b4 	.word	0x200126b4
 8014984:	200126ac 	.word	0x200126ac
 8014988:	200126b5 	.word	0x200126b5
 801498c:	2001267c 	.word	0x2001267c

08014990 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014990:	b590      	push	{r4, r7, lr}
 8014992:	b085      	sub	sp, #20
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
 8014998:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	2b00      	cmp	r3, #0
 801499e:	d106      	bne.n	80149ae <tcp_oos_insert_segment+0x1e>
 80149a0:	4b3b      	ldr	r3, [pc, #236]	@ (8014a90 <tcp_oos_insert_segment+0x100>)
 80149a2:	f240 421f 	movw	r2, #1055	@ 0x41f
 80149a6:	493b      	ldr	r1, [pc, #236]	@ (8014a94 <tcp_oos_insert_segment+0x104>)
 80149a8:	483b      	ldr	r0, [pc, #236]	@ (8014a98 <tcp_oos_insert_segment+0x108>)
 80149aa:	f009 fc97 	bl	801e2dc <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	68db      	ldr	r3, [r3, #12]
 80149b2:	899b      	ldrh	r3, [r3, #12]
 80149b4:	b29b      	uxth	r3, r3
 80149b6:	4618      	mov	r0, r3
 80149b8:	f7fa fd22 	bl	800f400 <lwip_htons>
 80149bc:	4603      	mov	r3, r0
 80149be:	b2db      	uxtb	r3, r3
 80149c0:	f003 0301 	and.w	r3, r3, #1
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	d028      	beq.n	8014a1a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80149c8:	6838      	ldr	r0, [r7, #0]
 80149ca:	f7fe f995 	bl	8012cf8 <tcp_segs_free>
    next = NULL;
 80149ce:	2300      	movs	r3, #0
 80149d0:	603b      	str	r3, [r7, #0]
 80149d2:	e056      	b.n	8014a82 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80149d4:	683b      	ldr	r3, [r7, #0]
 80149d6:	68db      	ldr	r3, [r3, #12]
 80149d8:	899b      	ldrh	r3, [r3, #12]
 80149da:	b29b      	uxth	r3, r3
 80149dc:	4618      	mov	r0, r3
 80149de:	f7fa fd0f 	bl	800f400 <lwip_htons>
 80149e2:	4603      	mov	r3, r0
 80149e4:	b2db      	uxtb	r3, r3
 80149e6:	f003 0301 	and.w	r3, r3, #1
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d00d      	beq.n	8014a0a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	68db      	ldr	r3, [r3, #12]
 80149f2:	899b      	ldrh	r3, [r3, #12]
 80149f4:	b29c      	uxth	r4, r3
 80149f6:	2001      	movs	r0, #1
 80149f8:	f7fa fd02 	bl	800f400 <lwip_htons>
 80149fc:	4603      	mov	r3, r0
 80149fe:	461a      	mov	r2, r3
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	68db      	ldr	r3, [r3, #12]
 8014a04:	4322      	orrs	r2, r4
 8014a06:	b292      	uxth	r2, r2
 8014a08:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014a0a:	683b      	ldr	r3, [r7, #0]
 8014a0c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014a0e:	683b      	ldr	r3, [r7, #0]
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014a14:	68f8      	ldr	r0, [r7, #12]
 8014a16:	f7fe f984 	bl	8012d22 <tcp_seg_free>
    while (next &&
 8014a1a:	683b      	ldr	r3, [r7, #0]
 8014a1c:	2b00      	cmp	r3, #0
 8014a1e:	d00e      	beq.n	8014a3e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	891b      	ldrh	r3, [r3, #8]
 8014a24:	461a      	mov	r2, r3
 8014a26:	4b1d      	ldr	r3, [pc, #116]	@ (8014a9c <tcp_oos_insert_segment+0x10c>)
 8014a28:	681b      	ldr	r3, [r3, #0]
 8014a2a:	441a      	add	r2, r3
 8014a2c:	683b      	ldr	r3, [r7, #0]
 8014a2e:	68db      	ldr	r3, [r3, #12]
 8014a30:	685b      	ldr	r3, [r3, #4]
 8014a32:	6839      	ldr	r1, [r7, #0]
 8014a34:	8909      	ldrh	r1, [r1, #8]
 8014a36:	440b      	add	r3, r1
 8014a38:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	daca      	bge.n	80149d4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014a3e:	683b      	ldr	r3, [r7, #0]
 8014a40:	2b00      	cmp	r3, #0
 8014a42:	d01e      	beq.n	8014a82 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	891b      	ldrh	r3, [r3, #8]
 8014a48:	461a      	mov	r2, r3
 8014a4a:	4b14      	ldr	r3, [pc, #80]	@ (8014a9c <tcp_oos_insert_segment+0x10c>)
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	441a      	add	r2, r3
 8014a50:	683b      	ldr	r3, [r7, #0]
 8014a52:	68db      	ldr	r3, [r3, #12]
 8014a54:	685b      	ldr	r3, [r3, #4]
 8014a56:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014a58:	2b00      	cmp	r3, #0
 8014a5a:	dd12      	ble.n	8014a82 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014a5c:	683b      	ldr	r3, [r7, #0]
 8014a5e:	68db      	ldr	r3, [r3, #12]
 8014a60:	685b      	ldr	r3, [r3, #4]
 8014a62:	b29a      	uxth	r2, r3
 8014a64:	4b0d      	ldr	r3, [pc, #52]	@ (8014a9c <tcp_oos_insert_segment+0x10c>)
 8014a66:	681b      	ldr	r3, [r3, #0]
 8014a68:	b29b      	uxth	r3, r3
 8014a6a:	1ad3      	subs	r3, r2, r3
 8014a6c:	b29a      	uxth	r2, r3
 8014a6e:	687b      	ldr	r3, [r7, #4]
 8014a70:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	685a      	ldr	r2, [r3, #4]
 8014a76:	687b      	ldr	r3, [r7, #4]
 8014a78:	891b      	ldrh	r3, [r3, #8]
 8014a7a:	4619      	mov	r1, r3
 8014a7c:	4610      	mov	r0, r2
 8014a7e:	f7fc fa25 	bl	8010ecc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	683a      	ldr	r2, [r7, #0]
 8014a86:	601a      	str	r2, [r3, #0]
}
 8014a88:	bf00      	nop
 8014a8a:	3714      	adds	r7, #20
 8014a8c:	46bd      	mov	sp, r7
 8014a8e:	bd90      	pop	{r4, r7, pc}
 8014a90:	08023f10 	.word	0x08023f10
 8014a94:	080241d0 	.word	0x080241d0
 8014a98:	08023f5c 	.word	0x08023f5c
 8014a9c:	200126a8 	.word	0x200126a8

08014aa0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014aa0:	b5b0      	push	{r4, r5, r7, lr}
 8014aa2:	b086      	sub	sp, #24
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	60f8      	str	r0, [r7, #12]
 8014aa8:	60b9      	str	r1, [r7, #8]
 8014aaa:	607a      	str	r2, [r7, #4]
 8014aac:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014aae:	e03e      	b.n	8014b2e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014ab0:	68bb      	ldr	r3, [r7, #8]
 8014ab2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014ab4:	68bb      	ldr	r3, [r7, #8]
 8014ab6:	681b      	ldr	r3, [r3, #0]
 8014ab8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014aba:	697b      	ldr	r3, [r7, #20]
 8014abc:	685b      	ldr	r3, [r3, #4]
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f7fc fc18 	bl	80112f4 <pbuf_clen>
 8014ac4:	4603      	mov	r3, r0
 8014ac6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014ace:	8a7a      	ldrh	r2, [r7, #18]
 8014ad0:	429a      	cmp	r2, r3
 8014ad2:	d906      	bls.n	8014ae2 <tcp_free_acked_segments+0x42>
 8014ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8014b80 <tcp_free_acked_segments+0xe0>)
 8014ad6:	f240 4257 	movw	r2, #1111	@ 0x457
 8014ada:	492a      	ldr	r1, [pc, #168]	@ (8014b84 <tcp_free_acked_segments+0xe4>)
 8014adc:	482a      	ldr	r0, [pc, #168]	@ (8014b88 <tcp_free_acked_segments+0xe8>)
 8014ade:	f009 fbfd 	bl	801e2dc <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8014ae8:	8a7b      	ldrh	r3, [r7, #18]
 8014aea:	1ad3      	subs	r3, r2, r3
 8014aec:	b29a      	uxth	r2, r3
 8014aee:	68fb      	ldr	r3, [r7, #12]
 8014af0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014af4:	697b      	ldr	r3, [r7, #20]
 8014af6:	891a      	ldrh	r2, [r3, #8]
 8014af8:	4b24      	ldr	r3, [pc, #144]	@ (8014b8c <tcp_free_acked_segments+0xec>)
 8014afa:	881b      	ldrh	r3, [r3, #0]
 8014afc:	4413      	add	r3, r2
 8014afe:	b29a      	uxth	r2, r3
 8014b00:	4b22      	ldr	r3, [pc, #136]	@ (8014b8c <tcp_free_acked_segments+0xec>)
 8014b02:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014b04:	6978      	ldr	r0, [r7, #20]
 8014b06:	f7fe f90c 	bl	8012d22 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d00c      	beq.n	8014b2e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014b14:	68bb      	ldr	r3, [r7, #8]
 8014b16:	2b00      	cmp	r3, #0
 8014b18:	d109      	bne.n	8014b2e <tcp_free_acked_segments+0x8e>
 8014b1a:	683b      	ldr	r3, [r7, #0]
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d106      	bne.n	8014b2e <tcp_free_acked_segments+0x8e>
 8014b20:	4b17      	ldr	r3, [pc, #92]	@ (8014b80 <tcp_free_acked_segments+0xe0>)
 8014b22:	f240 4261 	movw	r2, #1121	@ 0x461
 8014b26:	491a      	ldr	r1, [pc, #104]	@ (8014b90 <tcp_free_acked_segments+0xf0>)
 8014b28:	4817      	ldr	r0, [pc, #92]	@ (8014b88 <tcp_free_acked_segments+0xe8>)
 8014b2a:	f009 fbd7 	bl	801e2dc <iprintf>
  while (seg_list != NULL &&
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d020      	beq.n	8014b76 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014b34:	68bb      	ldr	r3, [r7, #8]
 8014b36:	68db      	ldr	r3, [r3, #12]
 8014b38:	685b      	ldr	r3, [r3, #4]
 8014b3a:	4618      	mov	r0, r3
 8014b3c:	f7fa fc75 	bl	800f42a <lwip_htonl>
 8014b40:	4604      	mov	r4, r0
 8014b42:	68bb      	ldr	r3, [r7, #8]
 8014b44:	891b      	ldrh	r3, [r3, #8]
 8014b46:	461d      	mov	r5, r3
 8014b48:	68bb      	ldr	r3, [r7, #8]
 8014b4a:	68db      	ldr	r3, [r3, #12]
 8014b4c:	899b      	ldrh	r3, [r3, #12]
 8014b4e:	b29b      	uxth	r3, r3
 8014b50:	4618      	mov	r0, r3
 8014b52:	f7fa fc55 	bl	800f400 <lwip_htons>
 8014b56:	4603      	mov	r3, r0
 8014b58:	b2db      	uxtb	r3, r3
 8014b5a:	f003 0303 	and.w	r3, r3, #3
 8014b5e:	2b00      	cmp	r3, #0
 8014b60:	d001      	beq.n	8014b66 <tcp_free_acked_segments+0xc6>
 8014b62:	2301      	movs	r3, #1
 8014b64:	e000      	b.n	8014b68 <tcp_free_acked_segments+0xc8>
 8014b66:	2300      	movs	r3, #0
 8014b68:	442b      	add	r3, r5
 8014b6a:	18e2      	adds	r2, r4, r3
 8014b6c:	4b09      	ldr	r3, [pc, #36]	@ (8014b94 <tcp_free_acked_segments+0xf4>)
 8014b6e:	681b      	ldr	r3, [r3, #0]
 8014b70:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014b72:	2b00      	cmp	r3, #0
 8014b74:	dd9c      	ble.n	8014ab0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014b76:	68bb      	ldr	r3, [r7, #8]
}
 8014b78:	4618      	mov	r0, r3
 8014b7a:	3718      	adds	r7, #24
 8014b7c:	46bd      	mov	sp, r7
 8014b7e:	bdb0      	pop	{r4, r5, r7, pc}
 8014b80:	08023f10 	.word	0x08023f10
 8014b84:	080241f8 	.word	0x080241f8
 8014b88:	08023f5c 	.word	0x08023f5c
 8014b8c:	200126b0 	.word	0x200126b0
 8014b90:	08024220 	.word	0x08024220
 8014b94:	200126ac 	.word	0x200126ac

08014b98 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014b98:	b5b0      	push	{r4, r5, r7, lr}
 8014b9a:	b094      	sub	sp, #80	@ 0x50
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d106      	bne.n	8014bb8 <tcp_receive+0x20>
 8014baa:	4b91      	ldr	r3, [pc, #580]	@ (8014df0 <tcp_receive+0x258>)
 8014bac:	f240 427b 	movw	r2, #1147	@ 0x47b
 8014bb0:	4990      	ldr	r1, [pc, #576]	@ (8014df4 <tcp_receive+0x25c>)
 8014bb2:	4891      	ldr	r0, [pc, #580]	@ (8014df8 <tcp_receive+0x260>)
 8014bb4:	f009 fb92 	bl	801e2dc <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	7d1b      	ldrb	r3, [r3, #20]
 8014bbc:	2b03      	cmp	r3, #3
 8014bbe:	d806      	bhi.n	8014bce <tcp_receive+0x36>
 8014bc0:	4b8b      	ldr	r3, [pc, #556]	@ (8014df0 <tcp_receive+0x258>)
 8014bc2:	f240 427c 	movw	r2, #1148	@ 0x47c
 8014bc6:	498d      	ldr	r1, [pc, #564]	@ (8014dfc <tcp_receive+0x264>)
 8014bc8:	488b      	ldr	r0, [pc, #556]	@ (8014df8 <tcp_receive+0x260>)
 8014bca:	f009 fb87 	bl	801e2dc <iprintf>

  if (flags & TCP_ACK) {
 8014bce:	4b8c      	ldr	r3, [pc, #560]	@ (8014e00 <tcp_receive+0x268>)
 8014bd0:	781b      	ldrb	r3, [r3, #0]
 8014bd2:	f003 0310 	and.w	r3, r3, #16
 8014bd6:	2b00      	cmp	r3, #0
 8014bd8:	f000 8264 	beq.w	80150a4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014bdc:	687b      	ldr	r3, [r7, #4]
 8014bde:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014be2:	461a      	mov	r2, r3
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014be8:	4413      	add	r3, r2
 8014bea:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014bf0:	4b84      	ldr	r3, [pc, #528]	@ (8014e04 <tcp_receive+0x26c>)
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	1ad3      	subs	r3, r2, r3
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	db1b      	blt.n	8014c32 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014bfe:	4b81      	ldr	r3, [pc, #516]	@ (8014e04 <tcp_receive+0x26c>)
 8014c00:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014c02:	429a      	cmp	r2, r3
 8014c04:	d106      	bne.n	8014c14 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014c06:	687b      	ldr	r3, [r7, #4]
 8014c08:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014c0a:	4b7f      	ldr	r3, [pc, #508]	@ (8014e08 <tcp_receive+0x270>)
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	1ad3      	subs	r3, r2, r3
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	db0e      	blt.n	8014c32 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014c18:	4b7b      	ldr	r3, [pc, #492]	@ (8014e08 <tcp_receive+0x270>)
 8014c1a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014c1c:	429a      	cmp	r2, r3
 8014c1e:	d125      	bne.n	8014c6c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014c20:	4b7a      	ldr	r3, [pc, #488]	@ (8014e0c <tcp_receive+0x274>)
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	89db      	ldrh	r3, [r3, #14]
 8014c26:	b29a      	uxth	r2, r3
 8014c28:	687b      	ldr	r3, [r7, #4]
 8014c2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	d91c      	bls.n	8014c6c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014c32:	4b76      	ldr	r3, [pc, #472]	@ (8014e0c <tcp_receive+0x274>)
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	89db      	ldrh	r3, [r3, #14]
 8014c38:	b29a      	uxth	r2, r3
 8014c3a:	687b      	ldr	r3, [r7, #4]
 8014c3c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014c40:	687b      	ldr	r3, [r7, #4]
 8014c42:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014c4c:	429a      	cmp	r2, r3
 8014c4e:	d205      	bcs.n	8014c5c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8014c5c:	4b69      	ldr	r3, [pc, #420]	@ (8014e04 <tcp_receive+0x26c>)
 8014c5e:	681a      	ldr	r2, [r3, #0]
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8014c64:	4b68      	ldr	r3, [pc, #416]	@ (8014e08 <tcp_receive+0x270>)
 8014c66:	681a      	ldr	r2, [r3, #0]
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014c6c:	4b66      	ldr	r3, [pc, #408]	@ (8014e08 <tcp_receive+0x270>)
 8014c6e:	681a      	ldr	r2, [r3, #0]
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014c74:	1ad3      	subs	r3, r2, r3
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	dc58      	bgt.n	8014d2c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014c7a:	4b65      	ldr	r3, [pc, #404]	@ (8014e10 <tcp_receive+0x278>)
 8014c7c:	881b      	ldrh	r3, [r3, #0]
 8014c7e:	2b00      	cmp	r3, #0
 8014c80:	d14b      	bne.n	8014d1a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014c82:	687b      	ldr	r3, [r7, #4]
 8014c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014c86:	687a      	ldr	r2, [r7, #4]
 8014c88:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8014c8c:	4413      	add	r3, r2
 8014c8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8014c90:	429a      	cmp	r2, r3
 8014c92:	d142      	bne.n	8014d1a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8014c9a:	2b00      	cmp	r3, #0
 8014c9c:	db3d      	blt.n	8014d1a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8014ca2:	4b59      	ldr	r3, [pc, #356]	@ (8014e08 <tcp_receive+0x270>)
 8014ca4:	681b      	ldr	r3, [r3, #0]
 8014ca6:	429a      	cmp	r2, r3
 8014ca8:	d137      	bne.n	8014d1a <tcp_receive+0x182>
              found_dupack = 1;
 8014caa:	2301      	movs	r3, #1
 8014cac:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014cb4:	2bff      	cmp	r3, #255	@ 0xff
 8014cb6:	d007      	beq.n	8014cc8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014cbe:	3301      	adds	r3, #1
 8014cc0:	b2da      	uxtb	r2, r3
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014cce:	2b03      	cmp	r3, #3
 8014cd0:	d91b      	bls.n	8014d0a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014cd2:	687b      	ldr	r3, [r7, #4]
 8014cd4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014cdc:	4413      	add	r3, r2
 8014cde:	b29a      	uxth	r2, r3
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014ce6:	429a      	cmp	r2, r3
 8014ce8:	d30a      	bcc.n	8014d00 <tcp_receive+0x168>
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014cf4:	4413      	add	r3, r2
 8014cf6:	b29a      	uxth	r2, r3
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014cfe:	e004      	b.n	8014d0a <tcp_receive+0x172>
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014d06:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8014d0a:	687b      	ldr	r3, [r7, #4]
 8014d0c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014d10:	2b02      	cmp	r3, #2
 8014d12:	d902      	bls.n	8014d1a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014d14:	6878      	ldr	r0, [r7, #4]
 8014d16:	f002 fb3f 	bl	8017398 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014d1a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	f040 8161 	bne.w	8014fe4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	2200      	movs	r2, #0
 8014d26:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8014d2a:	e15b      	b.n	8014fe4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014d2c:	4b36      	ldr	r3, [pc, #216]	@ (8014e08 <tcp_receive+0x270>)
 8014d2e:	681a      	ldr	r2, [r3, #0]
 8014d30:	687b      	ldr	r3, [r7, #4]
 8014d32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014d34:	1ad3      	subs	r3, r2, r3
 8014d36:	3b01      	subs	r3, #1
 8014d38:	2b00      	cmp	r3, #0
 8014d3a:	f2c0 814e 	blt.w	8014fda <tcp_receive+0x442>
 8014d3e:	4b32      	ldr	r3, [pc, #200]	@ (8014e08 <tcp_receive+0x270>)
 8014d40:	681a      	ldr	r2, [r3, #0]
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014d46:	1ad3      	subs	r3, r2, r3
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	f300 8146 	bgt.w	8014fda <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014d4e:	687b      	ldr	r3, [r7, #4]
 8014d50:	8b5b      	ldrh	r3, [r3, #26]
 8014d52:	f003 0304 	and.w	r3, r3, #4
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d010      	beq.n	8014d7c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	8b5b      	ldrh	r3, [r3, #26]
 8014d5e:	f023 0304 	bic.w	r3, r3, #4
 8014d62:	b29a      	uxth	r2, r3
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	2200      	movs	r2, #0
 8014d78:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014d7c:	687b      	ldr	r3, [r7, #4]
 8014d7e:	2200      	movs	r2, #0
 8014d80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014d8a:	10db      	asrs	r3, r3, #3
 8014d8c:	b21b      	sxth	r3, r3
 8014d8e:	b29a      	uxth	r2, r3
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014d96:	b29b      	uxth	r3, r3
 8014d98:	4413      	add	r3, r2
 8014d9a:	b29b      	uxth	r3, r3
 8014d9c:	b21a      	sxth	r2, r3
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014da4:	4b18      	ldr	r3, [pc, #96]	@ (8014e08 <tcp_receive+0x270>)
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	b29a      	uxth	r2, r3
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014dae:	b29b      	uxth	r3, r3
 8014db0:	1ad3      	subs	r3, r2, r3
 8014db2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	2200      	movs	r2, #0
 8014db8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8014dbc:	4b12      	ldr	r3, [pc, #72]	@ (8014e08 <tcp_receive+0x270>)
 8014dbe:	681a      	ldr	r2, [r3, #0]
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	7d1b      	ldrb	r3, [r3, #20]
 8014dc8:	2b03      	cmp	r3, #3
 8014dca:	f240 8097 	bls.w	8014efc <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8014dda:	429a      	cmp	r2, r3
 8014ddc:	d245      	bcs.n	8014e6a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	8b5b      	ldrh	r3, [r3, #26]
 8014de2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d014      	beq.n	8014e14 <tcp_receive+0x27c>
 8014dea:	2301      	movs	r3, #1
 8014dec:	e013      	b.n	8014e16 <tcp_receive+0x27e>
 8014dee:	bf00      	nop
 8014df0:	08023f10 	.word	0x08023f10
 8014df4:	08024240 	.word	0x08024240
 8014df8:	08023f5c 	.word	0x08023f5c
 8014dfc:	0802425c 	.word	0x0802425c
 8014e00:	200126b4 	.word	0x200126b4
 8014e04:	200126a8 	.word	0x200126a8
 8014e08:	200126ac 	.word	0x200126ac
 8014e0c:	20012698 	.word	0x20012698
 8014e10:	200126b2 	.word	0x200126b2
 8014e14:	2302      	movs	r3, #2
 8014e16:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014e1a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014e1e:	b29a      	uxth	r2, r3
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014e24:	fb12 f303 	smulbb	r3, r2, r3
 8014e28:	b29b      	uxth	r3, r3
 8014e2a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8014e2c:	4293      	cmp	r3, r2
 8014e2e:	bf28      	it	cs
 8014e30:	4613      	movcs	r3, r2
 8014e32:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014e34:	687b      	ldr	r3, [r7, #4]
 8014e36:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014e3a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014e3c:	4413      	add	r3, r2
 8014e3e:	b29a      	uxth	r2, r3
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014e46:	429a      	cmp	r2, r3
 8014e48:	d309      	bcc.n	8014e5e <tcp_receive+0x2c6>
 8014e4a:	687b      	ldr	r3, [r7, #4]
 8014e4c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014e50:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014e52:	4413      	add	r3, r2
 8014e54:	b29a      	uxth	r2, r3
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014e5c:	e04e      	b.n	8014efc <tcp_receive+0x364>
 8014e5e:	687b      	ldr	r3, [r7, #4]
 8014e60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014e64:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014e68:	e048      	b.n	8014efc <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014e70:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014e72:	4413      	add	r3, r2
 8014e74:	b29a      	uxth	r2, r3
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014e7c:	429a      	cmp	r2, r3
 8014e7e:	d309      	bcc.n	8014e94 <tcp_receive+0x2fc>
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014e86:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014e88:	4413      	add	r3, r2
 8014e8a:	b29a      	uxth	r2, r3
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014e92:	e004      	b.n	8014e9e <tcp_receive+0x306>
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014e9a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	d326      	bcc.n	8014efc <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014eba:	1ad3      	subs	r3, r2, r3
 8014ebc:	b29a      	uxth	r2, r3
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014ece:	4413      	add	r3, r2
 8014ed0:	b29a      	uxth	r2, r3
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014ed8:	429a      	cmp	r2, r3
 8014eda:	d30a      	bcc.n	8014ef2 <tcp_receive+0x35a>
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014ee2:	687b      	ldr	r3, [r7, #4]
 8014ee4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014ee6:	4413      	add	r3, r2
 8014ee8:	b29a      	uxth	r2, r3
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014ef0:	e004      	b.n	8014efc <tcp_receive+0x364>
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014ef8:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014efc:	687b      	ldr	r3, [r7, #4]
 8014efe:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f04:	4a98      	ldr	r2, [pc, #608]	@ (8015168 <tcp_receive+0x5d0>)
 8014f06:	6878      	ldr	r0, [r7, #4]
 8014f08:	f7ff fdca 	bl	8014aa0 <tcp_free_acked_segments>
 8014f0c:	4602      	mov	r2, r0
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f1a:	4a94      	ldr	r2, [pc, #592]	@ (801516c <tcp_receive+0x5d4>)
 8014f1c:	6878      	ldr	r0, [r7, #4]
 8014f1e:	f7ff fdbf 	bl	8014aa0 <tcp_free_acked_segments>
 8014f22:	4602      	mov	r2, r0
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f2c:	2b00      	cmp	r3, #0
 8014f2e:	d104      	bne.n	8014f3a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014f36:	861a      	strh	r2, [r3, #48]	@ 0x30
 8014f38:	e002      	b.n	8014f40 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	2200      	movs	r2, #0
 8014f44:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d103      	bne.n	8014f56 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	2200      	movs	r2, #0
 8014f52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014f56:	687b      	ldr	r3, [r7, #4]
 8014f58:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8014f5c:	4b84      	ldr	r3, [pc, #528]	@ (8015170 <tcp_receive+0x5d8>)
 8014f5e:	881b      	ldrh	r3, [r3, #0]
 8014f60:	4413      	add	r3, r2
 8014f62:	b29a      	uxth	r2, r3
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	8b5b      	ldrh	r3, [r3, #26]
 8014f6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d035      	beq.n	8014fe2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014f7a:	2b00      	cmp	r3, #0
 8014f7c:	d118      	bne.n	8014fb0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8014f7e:	687b      	ldr	r3, [r7, #4]
 8014f80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d00c      	beq.n	8014fa0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014f8e:	68db      	ldr	r3, [r3, #12]
 8014f90:	685b      	ldr	r3, [r3, #4]
 8014f92:	4618      	mov	r0, r3
 8014f94:	f7fa fa49 	bl	800f42a <lwip_htonl>
 8014f98:	4603      	mov	r3, r0
 8014f9a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014f9c:	2b00      	cmp	r3, #0
 8014f9e:	dc20      	bgt.n	8014fe2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014fa0:	687b      	ldr	r3, [r7, #4]
 8014fa2:	8b5b      	ldrh	r3, [r3, #26]
 8014fa4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8014fa8:	b29a      	uxth	r2, r3
 8014faa:	687b      	ldr	r3, [r7, #4]
 8014fac:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014fae:	e018      	b.n	8014fe2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014fb8:	68db      	ldr	r3, [r3, #12]
 8014fba:	685b      	ldr	r3, [r3, #4]
 8014fbc:	4618      	mov	r0, r3
 8014fbe:	f7fa fa34 	bl	800f42a <lwip_htonl>
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	1ae3      	subs	r3, r4, r3
 8014fc6:	2b00      	cmp	r3, #0
 8014fc8:	dc0b      	bgt.n	8014fe2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	8b5b      	ldrh	r3, [r3, #26]
 8014fce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8014fd2:	b29a      	uxth	r2, r3
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014fd8:	e003      	b.n	8014fe2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014fda:	6878      	ldr	r0, [r7, #4]
 8014fdc:	f002 fbc8 	bl	8017770 <tcp_send_empty_ack>
 8014fe0:	e000      	b.n	8014fe4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014fe2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014fe8:	2b00      	cmp	r3, #0
 8014fea:	d05b      	beq.n	80150a4 <tcp_receive+0x50c>
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014ff0:	4b60      	ldr	r3, [pc, #384]	@ (8015174 <tcp_receive+0x5dc>)
 8014ff2:	681b      	ldr	r3, [r3, #0]
 8014ff4:	1ad3      	subs	r3, r2, r3
 8014ff6:	2b00      	cmp	r3, #0
 8014ff8:	da54      	bge.n	80150a4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014ffa:	4b5f      	ldr	r3, [pc, #380]	@ (8015178 <tcp_receive+0x5e0>)
 8014ffc:	681b      	ldr	r3, [r3, #0]
 8014ffe:	b29a      	uxth	r2, r3
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015004:	b29b      	uxth	r3, r3
 8015006:	1ad3      	subs	r3, r2, r3
 8015008:	b29b      	uxth	r3, r3
 801500a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801500e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015018:	10db      	asrs	r3, r3, #3
 801501a:	b21b      	sxth	r3, r3
 801501c:	b29b      	uxth	r3, r3
 801501e:	1ad3      	subs	r3, r2, r3
 8015020:	b29b      	uxth	r3, r3
 8015022:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 801502c:	b29a      	uxth	r2, r3
 801502e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015032:	4413      	add	r3, r2
 8015034:	b29b      	uxth	r3, r3
 8015036:	b21a      	sxth	r2, r3
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 801503c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8015040:	2b00      	cmp	r3, #0
 8015042:	da05      	bge.n	8015050 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015044:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015048:	425b      	negs	r3, r3
 801504a:	b29b      	uxth	r3, r3
 801504c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015050:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801505a:	109b      	asrs	r3, r3, #2
 801505c:	b21b      	sxth	r3, r3
 801505e:	b29b      	uxth	r3, r3
 8015060:	1ad3      	subs	r3, r2, r3
 8015062:	b29b      	uxth	r3, r3
 8015064:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801506e:	b29a      	uxth	r2, r3
 8015070:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015074:	4413      	add	r3, r2
 8015076:	b29b      	uxth	r3, r3
 8015078:	b21a      	sxth	r2, r3
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015084:	10db      	asrs	r3, r3, #3
 8015086:	b21b      	sxth	r3, r3
 8015088:	b29a      	uxth	r2, r3
 801508a:	687b      	ldr	r3, [r7, #4]
 801508c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015090:	b29b      	uxth	r3, r3
 8015092:	4413      	add	r3, r2
 8015094:	b29b      	uxth	r3, r3
 8015096:	b21a      	sxth	r2, r3
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	2200      	movs	r2, #0
 80150a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80150a4:	4b35      	ldr	r3, [pc, #212]	@ (801517c <tcp_receive+0x5e4>)
 80150a6:	881b      	ldrh	r3, [r3, #0]
 80150a8:	2b00      	cmp	r3, #0
 80150aa:	f000 84df 	beq.w	8015a6c <tcp_receive+0xed4>
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	7d1b      	ldrb	r3, [r3, #20]
 80150b2:	2b06      	cmp	r3, #6
 80150b4:	f200 84da 	bhi.w	8015a6c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80150bc:	4b30      	ldr	r3, [pc, #192]	@ (8015180 <tcp_receive+0x5e8>)
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	1ad3      	subs	r3, r2, r3
 80150c2:	3b01      	subs	r3, #1
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	f2c0 808f 	blt.w	80151e8 <tcp_receive+0x650>
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80150ce:	4b2b      	ldr	r3, [pc, #172]	@ (801517c <tcp_receive+0x5e4>)
 80150d0:	881b      	ldrh	r3, [r3, #0]
 80150d2:	4619      	mov	r1, r3
 80150d4:	4b2a      	ldr	r3, [pc, #168]	@ (8015180 <tcp_receive+0x5e8>)
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	440b      	add	r3, r1
 80150da:	1ad3      	subs	r3, r2, r3
 80150dc:	3301      	adds	r3, #1
 80150de:	2b00      	cmp	r3, #0
 80150e0:	f300 8082 	bgt.w	80151e8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80150e4:	4b27      	ldr	r3, [pc, #156]	@ (8015184 <tcp_receive+0x5ec>)
 80150e6:	685b      	ldr	r3, [r3, #4]
 80150e8:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80150ee:	4b24      	ldr	r3, [pc, #144]	@ (8015180 <tcp_receive+0x5e8>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	1ad3      	subs	r3, r2, r3
 80150f4:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80150f6:	4b23      	ldr	r3, [pc, #140]	@ (8015184 <tcp_receive+0x5ec>)
 80150f8:	685b      	ldr	r3, [r3, #4]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d106      	bne.n	801510c <tcp_receive+0x574>
 80150fe:	4b22      	ldr	r3, [pc, #136]	@ (8015188 <tcp_receive+0x5f0>)
 8015100:	f240 5294 	movw	r2, #1428	@ 0x594
 8015104:	4921      	ldr	r1, [pc, #132]	@ (801518c <tcp_receive+0x5f4>)
 8015106:	4822      	ldr	r0, [pc, #136]	@ (8015190 <tcp_receive+0x5f8>)
 8015108:	f009 f8e8 	bl	801e2dc <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801510c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801510e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015112:	4293      	cmp	r3, r2
 8015114:	d906      	bls.n	8015124 <tcp_receive+0x58c>
 8015116:	4b1c      	ldr	r3, [pc, #112]	@ (8015188 <tcp_receive+0x5f0>)
 8015118:	f240 5295 	movw	r2, #1429	@ 0x595
 801511c:	491d      	ldr	r1, [pc, #116]	@ (8015194 <tcp_receive+0x5fc>)
 801511e:	481c      	ldr	r0, [pc, #112]	@ (8015190 <tcp_receive+0x5f8>)
 8015120:	f009 f8dc 	bl	801e2dc <iprintf>
      off = (u16_t)off32;
 8015124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015126:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801512a:	4b16      	ldr	r3, [pc, #88]	@ (8015184 <tcp_receive+0x5ec>)
 801512c:	685b      	ldr	r3, [r3, #4]
 801512e:	891b      	ldrh	r3, [r3, #8]
 8015130:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015134:	429a      	cmp	r2, r3
 8015136:	d906      	bls.n	8015146 <tcp_receive+0x5ae>
 8015138:	4b13      	ldr	r3, [pc, #76]	@ (8015188 <tcp_receive+0x5f0>)
 801513a:	f240 5297 	movw	r2, #1431	@ 0x597
 801513e:	4916      	ldr	r1, [pc, #88]	@ (8015198 <tcp_receive+0x600>)
 8015140:	4813      	ldr	r0, [pc, #76]	@ (8015190 <tcp_receive+0x5f8>)
 8015142:	f009 f8cb 	bl	801e2dc <iprintf>
      inseg.len -= off;
 8015146:	4b0f      	ldr	r3, [pc, #60]	@ (8015184 <tcp_receive+0x5ec>)
 8015148:	891a      	ldrh	r2, [r3, #8]
 801514a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801514e:	1ad3      	subs	r3, r2, r3
 8015150:	b29a      	uxth	r2, r3
 8015152:	4b0c      	ldr	r3, [pc, #48]	@ (8015184 <tcp_receive+0x5ec>)
 8015154:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8015156:	4b0b      	ldr	r3, [pc, #44]	@ (8015184 <tcp_receive+0x5ec>)
 8015158:	685b      	ldr	r3, [r3, #4]
 801515a:	891a      	ldrh	r2, [r3, #8]
 801515c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015160:	1ad3      	subs	r3, r2, r3
 8015162:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8015164:	e02a      	b.n	80151bc <tcp_receive+0x624>
 8015166:	bf00      	nop
 8015168:	08024278 	.word	0x08024278
 801516c:	08024280 	.word	0x08024280
 8015170:	200126b0 	.word	0x200126b0
 8015174:	200126ac 	.word	0x200126ac
 8015178:	20012670 	.word	0x20012670
 801517c:	200126b2 	.word	0x200126b2
 8015180:	200126a8 	.word	0x200126a8
 8015184:	20012688 	.word	0x20012688
 8015188:	08023f10 	.word	0x08023f10
 801518c:	08024288 	.word	0x08024288
 8015190:	08023f5c 	.word	0x08023f5c
 8015194:	08024298 	.word	0x08024298
 8015198:	080242a8 	.word	0x080242a8
        off -= p->len;
 801519c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801519e:	895b      	ldrh	r3, [r3, #10]
 80151a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80151a4:	1ad3      	subs	r3, r2, r3
 80151a6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80151aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80151ac:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 80151ae:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80151b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80151b2:	2200      	movs	r2, #0
 80151b4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80151b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 80151bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80151be:	895b      	ldrh	r3, [r3, #10]
 80151c0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80151c4:	429a      	cmp	r2, r3
 80151c6:	d8e9      	bhi.n	801519c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80151c8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80151cc:	4619      	mov	r1, r3
 80151ce:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80151d0:	f7fb ff7c 	bl	80110cc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80151d4:	687b      	ldr	r3, [r7, #4]
 80151d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151d8:	4a90      	ldr	r2, [pc, #576]	@ (801541c <tcp_receive+0x884>)
 80151da:	6013      	str	r3, [r2, #0]
 80151dc:	4b90      	ldr	r3, [pc, #576]	@ (8015420 <tcp_receive+0x888>)
 80151de:	68db      	ldr	r3, [r3, #12]
 80151e0:	4a8e      	ldr	r2, [pc, #568]	@ (801541c <tcp_receive+0x884>)
 80151e2:	6812      	ldr	r2, [r2, #0]
 80151e4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80151e6:	e00d      	b.n	8015204 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80151e8:	4b8c      	ldr	r3, [pc, #560]	@ (801541c <tcp_receive+0x884>)
 80151ea:	681a      	ldr	r2, [r3, #0]
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151f0:	1ad3      	subs	r3, r2, r3
 80151f2:	2b00      	cmp	r3, #0
 80151f4:	da06      	bge.n	8015204 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80151f6:	687b      	ldr	r3, [r7, #4]
 80151f8:	8b5b      	ldrh	r3, [r3, #26]
 80151fa:	f043 0302 	orr.w	r3, r3, #2
 80151fe:	b29a      	uxth	r2, r3
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015204:	4b85      	ldr	r3, [pc, #532]	@ (801541c <tcp_receive+0x884>)
 8015206:	681a      	ldr	r2, [r3, #0]
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801520c:	1ad3      	subs	r3, r2, r3
 801520e:	2b00      	cmp	r3, #0
 8015210:	f2c0 8427 	blt.w	8015a62 <tcp_receive+0xeca>
 8015214:	4b81      	ldr	r3, [pc, #516]	@ (801541c <tcp_receive+0x884>)
 8015216:	681a      	ldr	r2, [r3, #0]
 8015218:	687b      	ldr	r3, [r7, #4]
 801521a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801521c:	6879      	ldr	r1, [r7, #4]
 801521e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015220:	440b      	add	r3, r1
 8015222:	1ad3      	subs	r3, r2, r3
 8015224:	3301      	adds	r3, #1
 8015226:	2b00      	cmp	r3, #0
 8015228:	f300 841b 	bgt.w	8015a62 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015230:	4b7a      	ldr	r3, [pc, #488]	@ (801541c <tcp_receive+0x884>)
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	429a      	cmp	r2, r3
 8015236:	f040 8298 	bne.w	801576a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801523a:	4b79      	ldr	r3, [pc, #484]	@ (8015420 <tcp_receive+0x888>)
 801523c:	891c      	ldrh	r4, [r3, #8]
 801523e:	4b78      	ldr	r3, [pc, #480]	@ (8015420 <tcp_receive+0x888>)
 8015240:	68db      	ldr	r3, [r3, #12]
 8015242:	899b      	ldrh	r3, [r3, #12]
 8015244:	b29b      	uxth	r3, r3
 8015246:	4618      	mov	r0, r3
 8015248:	f7fa f8da 	bl	800f400 <lwip_htons>
 801524c:	4603      	mov	r3, r0
 801524e:	b2db      	uxtb	r3, r3
 8015250:	f003 0303 	and.w	r3, r3, #3
 8015254:	2b00      	cmp	r3, #0
 8015256:	d001      	beq.n	801525c <tcp_receive+0x6c4>
 8015258:	2301      	movs	r3, #1
 801525a:	e000      	b.n	801525e <tcp_receive+0x6c6>
 801525c:	2300      	movs	r3, #0
 801525e:	4423      	add	r3, r4
 8015260:	b29a      	uxth	r2, r3
 8015262:	4b70      	ldr	r3, [pc, #448]	@ (8015424 <tcp_receive+0x88c>)
 8015264:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801526a:	4b6e      	ldr	r3, [pc, #440]	@ (8015424 <tcp_receive+0x88c>)
 801526c:	881b      	ldrh	r3, [r3, #0]
 801526e:	429a      	cmp	r2, r3
 8015270:	d274      	bcs.n	801535c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015272:	4b6b      	ldr	r3, [pc, #428]	@ (8015420 <tcp_receive+0x888>)
 8015274:	68db      	ldr	r3, [r3, #12]
 8015276:	899b      	ldrh	r3, [r3, #12]
 8015278:	b29b      	uxth	r3, r3
 801527a:	4618      	mov	r0, r3
 801527c:	f7fa f8c0 	bl	800f400 <lwip_htons>
 8015280:	4603      	mov	r3, r0
 8015282:	b2db      	uxtb	r3, r3
 8015284:	f003 0301 	and.w	r3, r3, #1
 8015288:	2b00      	cmp	r3, #0
 801528a:	d01e      	beq.n	80152ca <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801528c:	4b64      	ldr	r3, [pc, #400]	@ (8015420 <tcp_receive+0x888>)
 801528e:	68db      	ldr	r3, [r3, #12]
 8015290:	899b      	ldrh	r3, [r3, #12]
 8015292:	b29b      	uxth	r3, r3
 8015294:	b21b      	sxth	r3, r3
 8015296:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801529a:	b21c      	sxth	r4, r3
 801529c:	4b60      	ldr	r3, [pc, #384]	@ (8015420 <tcp_receive+0x888>)
 801529e:	68db      	ldr	r3, [r3, #12]
 80152a0:	899b      	ldrh	r3, [r3, #12]
 80152a2:	b29b      	uxth	r3, r3
 80152a4:	4618      	mov	r0, r3
 80152a6:	f7fa f8ab 	bl	800f400 <lwip_htons>
 80152aa:	4603      	mov	r3, r0
 80152ac:	b2db      	uxtb	r3, r3
 80152ae:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80152b2:	b29b      	uxth	r3, r3
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7fa f8a3 	bl	800f400 <lwip_htons>
 80152ba:	4603      	mov	r3, r0
 80152bc:	b21b      	sxth	r3, r3
 80152be:	4323      	orrs	r3, r4
 80152c0:	b21a      	sxth	r2, r3
 80152c2:	4b57      	ldr	r3, [pc, #348]	@ (8015420 <tcp_receive+0x888>)
 80152c4:	68db      	ldr	r3, [r3, #12]
 80152c6:	b292      	uxth	r2, r2
 80152c8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80152ce:	4b54      	ldr	r3, [pc, #336]	@ (8015420 <tcp_receive+0x888>)
 80152d0:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80152d2:	4b53      	ldr	r3, [pc, #332]	@ (8015420 <tcp_receive+0x888>)
 80152d4:	68db      	ldr	r3, [r3, #12]
 80152d6:	899b      	ldrh	r3, [r3, #12]
 80152d8:	b29b      	uxth	r3, r3
 80152da:	4618      	mov	r0, r3
 80152dc:	f7fa f890 	bl	800f400 <lwip_htons>
 80152e0:	4603      	mov	r3, r0
 80152e2:	b2db      	uxtb	r3, r3
 80152e4:	f003 0302 	and.w	r3, r3, #2
 80152e8:	2b00      	cmp	r3, #0
 80152ea:	d005      	beq.n	80152f8 <tcp_receive+0x760>
            inseg.len -= 1;
 80152ec:	4b4c      	ldr	r3, [pc, #304]	@ (8015420 <tcp_receive+0x888>)
 80152ee:	891b      	ldrh	r3, [r3, #8]
 80152f0:	3b01      	subs	r3, #1
 80152f2:	b29a      	uxth	r2, r3
 80152f4:	4b4a      	ldr	r3, [pc, #296]	@ (8015420 <tcp_receive+0x888>)
 80152f6:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80152f8:	4b49      	ldr	r3, [pc, #292]	@ (8015420 <tcp_receive+0x888>)
 80152fa:	685b      	ldr	r3, [r3, #4]
 80152fc:	4a48      	ldr	r2, [pc, #288]	@ (8015420 <tcp_receive+0x888>)
 80152fe:	8912      	ldrh	r2, [r2, #8]
 8015300:	4611      	mov	r1, r2
 8015302:	4618      	mov	r0, r3
 8015304:	f7fb fde2 	bl	8010ecc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8015308:	4b45      	ldr	r3, [pc, #276]	@ (8015420 <tcp_receive+0x888>)
 801530a:	891c      	ldrh	r4, [r3, #8]
 801530c:	4b44      	ldr	r3, [pc, #272]	@ (8015420 <tcp_receive+0x888>)
 801530e:	68db      	ldr	r3, [r3, #12]
 8015310:	899b      	ldrh	r3, [r3, #12]
 8015312:	b29b      	uxth	r3, r3
 8015314:	4618      	mov	r0, r3
 8015316:	f7fa f873 	bl	800f400 <lwip_htons>
 801531a:	4603      	mov	r3, r0
 801531c:	b2db      	uxtb	r3, r3
 801531e:	f003 0303 	and.w	r3, r3, #3
 8015322:	2b00      	cmp	r3, #0
 8015324:	d001      	beq.n	801532a <tcp_receive+0x792>
 8015326:	2301      	movs	r3, #1
 8015328:	e000      	b.n	801532c <tcp_receive+0x794>
 801532a:	2300      	movs	r3, #0
 801532c:	4423      	add	r3, r4
 801532e:	b29a      	uxth	r2, r3
 8015330:	4b3c      	ldr	r3, [pc, #240]	@ (8015424 <tcp_receive+0x88c>)
 8015332:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015334:	4b3b      	ldr	r3, [pc, #236]	@ (8015424 <tcp_receive+0x88c>)
 8015336:	881b      	ldrh	r3, [r3, #0]
 8015338:	461a      	mov	r2, r3
 801533a:	4b38      	ldr	r3, [pc, #224]	@ (801541c <tcp_receive+0x884>)
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	441a      	add	r2, r3
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015344:	6879      	ldr	r1, [r7, #4]
 8015346:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015348:	440b      	add	r3, r1
 801534a:	429a      	cmp	r2, r3
 801534c:	d006      	beq.n	801535c <tcp_receive+0x7c4>
 801534e:	4b36      	ldr	r3, [pc, #216]	@ (8015428 <tcp_receive+0x890>)
 8015350:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8015354:	4935      	ldr	r1, [pc, #212]	@ (801542c <tcp_receive+0x894>)
 8015356:	4836      	ldr	r0, [pc, #216]	@ (8015430 <tcp_receive+0x898>)
 8015358:	f008 ffc0 	bl	801e2dc <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801535c:	687b      	ldr	r3, [r7, #4]
 801535e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015360:	2b00      	cmp	r3, #0
 8015362:	f000 80e6 	beq.w	8015532 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015366:	4b2e      	ldr	r3, [pc, #184]	@ (8015420 <tcp_receive+0x888>)
 8015368:	68db      	ldr	r3, [r3, #12]
 801536a:	899b      	ldrh	r3, [r3, #12]
 801536c:	b29b      	uxth	r3, r3
 801536e:	4618      	mov	r0, r3
 8015370:	f7fa f846 	bl	800f400 <lwip_htons>
 8015374:	4603      	mov	r3, r0
 8015376:	b2db      	uxtb	r3, r3
 8015378:	f003 0301 	and.w	r3, r3, #1
 801537c:	2b00      	cmp	r3, #0
 801537e:	d010      	beq.n	80153a2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015380:	e00a      	b.n	8015398 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015386:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801538c:	681a      	ldr	r2, [r3, #0]
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8015392:	68f8      	ldr	r0, [r7, #12]
 8015394:	f7fd fcc5 	bl	8012d22 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801539c:	2b00      	cmp	r3, #0
 801539e:	d1f0      	bne.n	8015382 <tcp_receive+0x7ea>
 80153a0:	e0c7      	b.n	8015532 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80153a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80153a8:	e051      	b.n	801544e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80153aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80153ac:	68db      	ldr	r3, [r3, #12]
 80153ae:	899b      	ldrh	r3, [r3, #12]
 80153b0:	b29b      	uxth	r3, r3
 80153b2:	4618      	mov	r0, r3
 80153b4:	f7fa f824 	bl	800f400 <lwip_htons>
 80153b8:	4603      	mov	r3, r0
 80153ba:	b2db      	uxtb	r3, r3
 80153bc:	f003 0301 	and.w	r3, r3, #1
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d03c      	beq.n	801543e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80153c4:	4b16      	ldr	r3, [pc, #88]	@ (8015420 <tcp_receive+0x888>)
 80153c6:	68db      	ldr	r3, [r3, #12]
 80153c8:	899b      	ldrh	r3, [r3, #12]
 80153ca:	b29b      	uxth	r3, r3
 80153cc:	4618      	mov	r0, r3
 80153ce:	f7fa f817 	bl	800f400 <lwip_htons>
 80153d2:	4603      	mov	r3, r0
 80153d4:	b2db      	uxtb	r3, r3
 80153d6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d12f      	bne.n	801543e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80153de:	4b10      	ldr	r3, [pc, #64]	@ (8015420 <tcp_receive+0x888>)
 80153e0:	68db      	ldr	r3, [r3, #12]
 80153e2:	899b      	ldrh	r3, [r3, #12]
 80153e4:	b29c      	uxth	r4, r3
 80153e6:	2001      	movs	r0, #1
 80153e8:	f7fa f80a 	bl	800f400 <lwip_htons>
 80153ec:	4603      	mov	r3, r0
 80153ee:	461a      	mov	r2, r3
 80153f0:	4b0b      	ldr	r3, [pc, #44]	@ (8015420 <tcp_receive+0x888>)
 80153f2:	68db      	ldr	r3, [r3, #12]
 80153f4:	4322      	orrs	r2, r4
 80153f6:	b292      	uxth	r2, r2
 80153f8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80153fa:	4b09      	ldr	r3, [pc, #36]	@ (8015420 <tcp_receive+0x888>)
 80153fc:	891c      	ldrh	r4, [r3, #8]
 80153fe:	4b08      	ldr	r3, [pc, #32]	@ (8015420 <tcp_receive+0x888>)
 8015400:	68db      	ldr	r3, [r3, #12]
 8015402:	899b      	ldrh	r3, [r3, #12]
 8015404:	b29b      	uxth	r3, r3
 8015406:	4618      	mov	r0, r3
 8015408:	f7f9 fffa 	bl	800f400 <lwip_htons>
 801540c:	4603      	mov	r3, r0
 801540e:	b2db      	uxtb	r3, r3
 8015410:	f003 0303 	and.w	r3, r3, #3
 8015414:	2b00      	cmp	r3, #0
 8015416:	d00d      	beq.n	8015434 <tcp_receive+0x89c>
 8015418:	2301      	movs	r3, #1
 801541a:	e00c      	b.n	8015436 <tcp_receive+0x89e>
 801541c:	200126a8 	.word	0x200126a8
 8015420:	20012688 	.word	0x20012688
 8015424:	200126b2 	.word	0x200126b2
 8015428:	08023f10 	.word	0x08023f10
 801542c:	080242b8 	.word	0x080242b8
 8015430:	08023f5c 	.word	0x08023f5c
 8015434:	2300      	movs	r3, #0
 8015436:	4423      	add	r3, r4
 8015438:	b29a      	uxth	r2, r3
 801543a:	4b98      	ldr	r3, [pc, #608]	@ (801569c <tcp_receive+0xb04>)
 801543c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801543e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015440:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015442:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8015448:	6938      	ldr	r0, [r7, #16]
 801544a:	f7fd fc6a 	bl	8012d22 <tcp_seg_free>
            while (next &&
 801544e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015450:	2b00      	cmp	r3, #0
 8015452:	d00e      	beq.n	8015472 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015454:	4b91      	ldr	r3, [pc, #580]	@ (801569c <tcp_receive+0xb04>)
 8015456:	881b      	ldrh	r3, [r3, #0]
 8015458:	461a      	mov	r2, r3
 801545a:	4b91      	ldr	r3, [pc, #580]	@ (80156a0 <tcp_receive+0xb08>)
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	441a      	add	r2, r3
 8015460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015462:	68db      	ldr	r3, [r3, #12]
 8015464:	685b      	ldr	r3, [r3, #4]
 8015466:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015468:	8909      	ldrh	r1, [r1, #8]
 801546a:	440b      	add	r3, r1
 801546c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801546e:	2b00      	cmp	r3, #0
 8015470:	da9b      	bge.n	80153aa <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015472:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015474:	2b00      	cmp	r3, #0
 8015476:	d059      	beq.n	801552c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8015478:	4b88      	ldr	r3, [pc, #544]	@ (801569c <tcp_receive+0xb04>)
 801547a:	881b      	ldrh	r3, [r3, #0]
 801547c:	461a      	mov	r2, r3
 801547e:	4b88      	ldr	r3, [pc, #544]	@ (80156a0 <tcp_receive+0xb08>)
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	441a      	add	r2, r3
 8015484:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015486:	68db      	ldr	r3, [r3, #12]
 8015488:	685b      	ldr	r3, [r3, #4]
 801548a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801548c:	2b00      	cmp	r3, #0
 801548e:	dd4d      	ble.n	801552c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015492:	68db      	ldr	r3, [r3, #12]
 8015494:	685b      	ldr	r3, [r3, #4]
 8015496:	b29a      	uxth	r2, r3
 8015498:	4b81      	ldr	r3, [pc, #516]	@ (80156a0 <tcp_receive+0xb08>)
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	b29b      	uxth	r3, r3
 801549e:	1ad3      	subs	r3, r2, r3
 80154a0:	b29a      	uxth	r2, r3
 80154a2:	4b80      	ldr	r3, [pc, #512]	@ (80156a4 <tcp_receive+0xb0c>)
 80154a4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80154a6:	4b7f      	ldr	r3, [pc, #508]	@ (80156a4 <tcp_receive+0xb0c>)
 80154a8:	68db      	ldr	r3, [r3, #12]
 80154aa:	899b      	ldrh	r3, [r3, #12]
 80154ac:	b29b      	uxth	r3, r3
 80154ae:	4618      	mov	r0, r3
 80154b0:	f7f9 ffa6 	bl	800f400 <lwip_htons>
 80154b4:	4603      	mov	r3, r0
 80154b6:	b2db      	uxtb	r3, r3
 80154b8:	f003 0302 	and.w	r3, r3, #2
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d005      	beq.n	80154cc <tcp_receive+0x934>
                inseg.len -= 1;
 80154c0:	4b78      	ldr	r3, [pc, #480]	@ (80156a4 <tcp_receive+0xb0c>)
 80154c2:	891b      	ldrh	r3, [r3, #8]
 80154c4:	3b01      	subs	r3, #1
 80154c6:	b29a      	uxth	r2, r3
 80154c8:	4b76      	ldr	r3, [pc, #472]	@ (80156a4 <tcp_receive+0xb0c>)
 80154ca:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80154cc:	4b75      	ldr	r3, [pc, #468]	@ (80156a4 <tcp_receive+0xb0c>)
 80154ce:	685b      	ldr	r3, [r3, #4]
 80154d0:	4a74      	ldr	r2, [pc, #464]	@ (80156a4 <tcp_receive+0xb0c>)
 80154d2:	8912      	ldrh	r2, [r2, #8]
 80154d4:	4611      	mov	r1, r2
 80154d6:	4618      	mov	r0, r3
 80154d8:	f7fb fcf8 	bl	8010ecc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80154dc:	4b71      	ldr	r3, [pc, #452]	@ (80156a4 <tcp_receive+0xb0c>)
 80154de:	891c      	ldrh	r4, [r3, #8]
 80154e0:	4b70      	ldr	r3, [pc, #448]	@ (80156a4 <tcp_receive+0xb0c>)
 80154e2:	68db      	ldr	r3, [r3, #12]
 80154e4:	899b      	ldrh	r3, [r3, #12]
 80154e6:	b29b      	uxth	r3, r3
 80154e8:	4618      	mov	r0, r3
 80154ea:	f7f9 ff89 	bl	800f400 <lwip_htons>
 80154ee:	4603      	mov	r3, r0
 80154f0:	b2db      	uxtb	r3, r3
 80154f2:	f003 0303 	and.w	r3, r3, #3
 80154f6:	2b00      	cmp	r3, #0
 80154f8:	d001      	beq.n	80154fe <tcp_receive+0x966>
 80154fa:	2301      	movs	r3, #1
 80154fc:	e000      	b.n	8015500 <tcp_receive+0x968>
 80154fe:	2300      	movs	r3, #0
 8015500:	4423      	add	r3, r4
 8015502:	b29a      	uxth	r2, r3
 8015504:	4b65      	ldr	r3, [pc, #404]	@ (801569c <tcp_receive+0xb04>)
 8015506:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015508:	4b64      	ldr	r3, [pc, #400]	@ (801569c <tcp_receive+0xb04>)
 801550a:	881b      	ldrh	r3, [r3, #0]
 801550c:	461a      	mov	r2, r3
 801550e:	4b64      	ldr	r3, [pc, #400]	@ (80156a0 <tcp_receive+0xb08>)
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	441a      	add	r2, r3
 8015514:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015516:	68db      	ldr	r3, [r3, #12]
 8015518:	685b      	ldr	r3, [r3, #4]
 801551a:	429a      	cmp	r2, r3
 801551c:	d006      	beq.n	801552c <tcp_receive+0x994>
 801551e:	4b62      	ldr	r3, [pc, #392]	@ (80156a8 <tcp_receive+0xb10>)
 8015520:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8015524:	4961      	ldr	r1, [pc, #388]	@ (80156ac <tcp_receive+0xb14>)
 8015526:	4862      	ldr	r0, [pc, #392]	@ (80156b0 <tcp_receive+0xb18>)
 8015528:	f008 fed8 	bl	801e2dc <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015530:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015532:	4b5a      	ldr	r3, [pc, #360]	@ (801569c <tcp_receive+0xb04>)
 8015534:	881b      	ldrh	r3, [r3, #0]
 8015536:	461a      	mov	r2, r3
 8015538:	4b59      	ldr	r3, [pc, #356]	@ (80156a0 <tcp_receive+0xb08>)
 801553a:	681b      	ldr	r3, [r3, #0]
 801553c:	441a      	add	r2, r3
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015546:	4b55      	ldr	r3, [pc, #340]	@ (801569c <tcp_receive+0xb04>)
 8015548:	881b      	ldrh	r3, [r3, #0]
 801554a:	429a      	cmp	r2, r3
 801554c:	d206      	bcs.n	801555c <tcp_receive+0x9c4>
 801554e:	4b56      	ldr	r3, [pc, #344]	@ (80156a8 <tcp_receive+0xb10>)
 8015550:	f240 6207 	movw	r2, #1543	@ 0x607
 8015554:	4957      	ldr	r1, [pc, #348]	@ (80156b4 <tcp_receive+0xb1c>)
 8015556:	4856      	ldr	r0, [pc, #344]	@ (80156b0 <tcp_receive+0xb18>)
 8015558:	f008 fec0 	bl	801e2dc <iprintf>
        pcb->rcv_wnd -= tcplen;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015560:	4b4e      	ldr	r3, [pc, #312]	@ (801569c <tcp_receive+0xb04>)
 8015562:	881b      	ldrh	r3, [r3, #0]
 8015564:	1ad3      	subs	r3, r2, r3
 8015566:	b29a      	uxth	r2, r3
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801556c:	6878      	ldr	r0, [r7, #4]
 801556e:	f7fc fd99 	bl	80120a4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015572:	4b4c      	ldr	r3, [pc, #304]	@ (80156a4 <tcp_receive+0xb0c>)
 8015574:	685b      	ldr	r3, [r3, #4]
 8015576:	891b      	ldrh	r3, [r3, #8]
 8015578:	2b00      	cmp	r3, #0
 801557a:	d006      	beq.n	801558a <tcp_receive+0x9f2>
          recv_data = inseg.p;
 801557c:	4b49      	ldr	r3, [pc, #292]	@ (80156a4 <tcp_receive+0xb0c>)
 801557e:	685b      	ldr	r3, [r3, #4]
 8015580:	4a4d      	ldr	r2, [pc, #308]	@ (80156b8 <tcp_receive+0xb20>)
 8015582:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015584:	4b47      	ldr	r3, [pc, #284]	@ (80156a4 <tcp_receive+0xb0c>)
 8015586:	2200      	movs	r2, #0
 8015588:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801558a:	4b46      	ldr	r3, [pc, #280]	@ (80156a4 <tcp_receive+0xb0c>)
 801558c:	68db      	ldr	r3, [r3, #12]
 801558e:	899b      	ldrh	r3, [r3, #12]
 8015590:	b29b      	uxth	r3, r3
 8015592:	4618      	mov	r0, r3
 8015594:	f7f9 ff34 	bl	800f400 <lwip_htons>
 8015598:	4603      	mov	r3, r0
 801559a:	b2db      	uxtb	r3, r3
 801559c:	f003 0301 	and.w	r3, r3, #1
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	f000 80b8 	beq.w	8015716 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80155a6:	4b45      	ldr	r3, [pc, #276]	@ (80156bc <tcp_receive+0xb24>)
 80155a8:	781b      	ldrb	r3, [r3, #0]
 80155aa:	f043 0320 	orr.w	r3, r3, #32
 80155ae:	b2da      	uxtb	r2, r3
 80155b0:	4b42      	ldr	r3, [pc, #264]	@ (80156bc <tcp_receive+0xb24>)
 80155b2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80155b4:	e0af      	b.n	8015716 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80155b6:	687b      	ldr	r3, [r7, #4]
 80155b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80155ba:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80155c0:	68db      	ldr	r3, [r3, #12]
 80155c2:	685b      	ldr	r3, [r3, #4]
 80155c4:	4a36      	ldr	r2, [pc, #216]	@ (80156a0 <tcp_receive+0xb08>)
 80155c6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80155c8:	68bb      	ldr	r3, [r7, #8]
 80155ca:	891b      	ldrh	r3, [r3, #8]
 80155cc:	461c      	mov	r4, r3
 80155ce:	68bb      	ldr	r3, [r7, #8]
 80155d0:	68db      	ldr	r3, [r3, #12]
 80155d2:	899b      	ldrh	r3, [r3, #12]
 80155d4:	b29b      	uxth	r3, r3
 80155d6:	4618      	mov	r0, r3
 80155d8:	f7f9 ff12 	bl	800f400 <lwip_htons>
 80155dc:	4603      	mov	r3, r0
 80155de:	b2db      	uxtb	r3, r3
 80155e0:	f003 0303 	and.w	r3, r3, #3
 80155e4:	2b00      	cmp	r3, #0
 80155e6:	d001      	beq.n	80155ec <tcp_receive+0xa54>
 80155e8:	2301      	movs	r3, #1
 80155ea:	e000      	b.n	80155ee <tcp_receive+0xa56>
 80155ec:	2300      	movs	r3, #0
 80155ee:	191a      	adds	r2, r3, r4
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155f4:	441a      	add	r2, r3
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155fe:	461c      	mov	r4, r3
 8015600:	68bb      	ldr	r3, [r7, #8]
 8015602:	891b      	ldrh	r3, [r3, #8]
 8015604:	461d      	mov	r5, r3
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	68db      	ldr	r3, [r3, #12]
 801560a:	899b      	ldrh	r3, [r3, #12]
 801560c:	b29b      	uxth	r3, r3
 801560e:	4618      	mov	r0, r3
 8015610:	f7f9 fef6 	bl	800f400 <lwip_htons>
 8015614:	4603      	mov	r3, r0
 8015616:	b2db      	uxtb	r3, r3
 8015618:	f003 0303 	and.w	r3, r3, #3
 801561c:	2b00      	cmp	r3, #0
 801561e:	d001      	beq.n	8015624 <tcp_receive+0xa8c>
 8015620:	2301      	movs	r3, #1
 8015622:	e000      	b.n	8015626 <tcp_receive+0xa8e>
 8015624:	2300      	movs	r3, #0
 8015626:	442b      	add	r3, r5
 8015628:	429c      	cmp	r4, r3
 801562a:	d206      	bcs.n	801563a <tcp_receive+0xaa2>
 801562c:	4b1e      	ldr	r3, [pc, #120]	@ (80156a8 <tcp_receive+0xb10>)
 801562e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8015632:	4923      	ldr	r1, [pc, #140]	@ (80156c0 <tcp_receive+0xb28>)
 8015634:	481e      	ldr	r0, [pc, #120]	@ (80156b0 <tcp_receive+0xb18>)
 8015636:	f008 fe51 	bl	801e2dc <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801563a:	68bb      	ldr	r3, [r7, #8]
 801563c:	891b      	ldrh	r3, [r3, #8]
 801563e:	461c      	mov	r4, r3
 8015640:	68bb      	ldr	r3, [r7, #8]
 8015642:	68db      	ldr	r3, [r3, #12]
 8015644:	899b      	ldrh	r3, [r3, #12]
 8015646:	b29b      	uxth	r3, r3
 8015648:	4618      	mov	r0, r3
 801564a:	f7f9 fed9 	bl	800f400 <lwip_htons>
 801564e:	4603      	mov	r3, r0
 8015650:	b2db      	uxtb	r3, r3
 8015652:	f003 0303 	and.w	r3, r3, #3
 8015656:	2b00      	cmp	r3, #0
 8015658:	d001      	beq.n	801565e <tcp_receive+0xac6>
 801565a:	2301      	movs	r3, #1
 801565c:	e000      	b.n	8015660 <tcp_receive+0xac8>
 801565e:	2300      	movs	r3, #0
 8015660:	1919      	adds	r1, r3, r4
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015666:	b28b      	uxth	r3, r1
 8015668:	1ad3      	subs	r3, r2, r3
 801566a:	b29a      	uxth	r2, r3
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015670:	6878      	ldr	r0, [r7, #4]
 8015672:	f7fc fd17 	bl	80120a4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8015676:	68bb      	ldr	r3, [r7, #8]
 8015678:	685b      	ldr	r3, [r3, #4]
 801567a:	891b      	ldrh	r3, [r3, #8]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d028      	beq.n	80156d2 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015680:	4b0d      	ldr	r3, [pc, #52]	@ (80156b8 <tcp_receive+0xb20>)
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	2b00      	cmp	r3, #0
 8015686:	d01d      	beq.n	80156c4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8015688:	4b0b      	ldr	r3, [pc, #44]	@ (80156b8 <tcp_receive+0xb20>)
 801568a:	681a      	ldr	r2, [r3, #0]
 801568c:	68bb      	ldr	r3, [r7, #8]
 801568e:	685b      	ldr	r3, [r3, #4]
 8015690:	4619      	mov	r1, r3
 8015692:	4610      	mov	r0, r2
 8015694:	f7fb fe6e 	bl	8011374 <pbuf_cat>
 8015698:	e018      	b.n	80156cc <tcp_receive+0xb34>
 801569a:	bf00      	nop
 801569c:	200126b2 	.word	0x200126b2
 80156a0:	200126a8 	.word	0x200126a8
 80156a4:	20012688 	.word	0x20012688
 80156a8:	08023f10 	.word	0x08023f10
 80156ac:	080242f0 	.word	0x080242f0
 80156b0:	08023f5c 	.word	0x08023f5c
 80156b4:	0802432c 	.word	0x0802432c
 80156b8:	200126b8 	.word	0x200126b8
 80156bc:	200126b5 	.word	0x200126b5
 80156c0:	0802434c 	.word	0x0802434c
            } else {
              recv_data = cseg->p;
 80156c4:	68bb      	ldr	r3, [r7, #8]
 80156c6:	685b      	ldr	r3, [r3, #4]
 80156c8:	4a70      	ldr	r2, [pc, #448]	@ (801588c <tcp_receive+0xcf4>)
 80156ca:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80156cc:	68bb      	ldr	r3, [r7, #8]
 80156ce:	2200      	movs	r2, #0
 80156d0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80156d2:	68bb      	ldr	r3, [r7, #8]
 80156d4:	68db      	ldr	r3, [r3, #12]
 80156d6:	899b      	ldrh	r3, [r3, #12]
 80156d8:	b29b      	uxth	r3, r3
 80156da:	4618      	mov	r0, r3
 80156dc:	f7f9 fe90 	bl	800f400 <lwip_htons>
 80156e0:	4603      	mov	r3, r0
 80156e2:	b2db      	uxtb	r3, r3
 80156e4:	f003 0301 	and.w	r3, r3, #1
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d00d      	beq.n	8015708 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80156ec:	4b68      	ldr	r3, [pc, #416]	@ (8015890 <tcp_receive+0xcf8>)
 80156ee:	781b      	ldrb	r3, [r3, #0]
 80156f0:	f043 0320 	orr.w	r3, r3, #32
 80156f4:	b2da      	uxtb	r2, r3
 80156f6:	4b66      	ldr	r3, [pc, #408]	@ (8015890 <tcp_receive+0xcf8>)
 80156f8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80156fa:	687b      	ldr	r3, [r7, #4]
 80156fc:	7d1b      	ldrb	r3, [r3, #20]
 80156fe:	2b04      	cmp	r3, #4
 8015700:	d102      	bne.n	8015708 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	2207      	movs	r2, #7
 8015706:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015708:	68bb      	ldr	r3, [r7, #8]
 801570a:	681a      	ldr	r2, [r3, #0]
 801570c:	687b      	ldr	r3, [r7, #4]
 801570e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8015710:	68b8      	ldr	r0, [r7, #8]
 8015712:	f7fd fb06 	bl	8012d22 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801571a:	2b00      	cmp	r3, #0
 801571c:	d008      	beq.n	8015730 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015722:	68db      	ldr	r3, [r3, #12]
 8015724:	685a      	ldr	r2, [r3, #4]
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801572a:	429a      	cmp	r2, r3
 801572c:	f43f af43 	beq.w	80155b6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	8b5b      	ldrh	r3, [r3, #26]
 8015734:	f003 0301 	and.w	r3, r3, #1
 8015738:	2b00      	cmp	r3, #0
 801573a:	d00e      	beq.n	801575a <tcp_receive+0xbc2>
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	8b5b      	ldrh	r3, [r3, #26]
 8015740:	f023 0301 	bic.w	r3, r3, #1
 8015744:	b29a      	uxth	r2, r3
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	835a      	strh	r2, [r3, #26]
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	8b5b      	ldrh	r3, [r3, #26]
 801574e:	f043 0302 	orr.w	r3, r3, #2
 8015752:	b29a      	uxth	r2, r3
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015758:	e187      	b.n	8015a6a <tcp_receive+0xed2>
        tcp_ack(pcb);
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	8b5b      	ldrh	r3, [r3, #26]
 801575e:	f043 0301 	orr.w	r3, r3, #1
 8015762:	b29a      	uxth	r2, r3
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015768:	e17f      	b.n	8015a6a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801576e:	2b00      	cmp	r3, #0
 8015770:	d106      	bne.n	8015780 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8015772:	4848      	ldr	r0, [pc, #288]	@ (8015894 <tcp_receive+0xcfc>)
 8015774:	f7fd faee 	bl	8012d54 <tcp_seg_copy>
 8015778:	4602      	mov	r2, r0
 801577a:	687b      	ldr	r3, [r7, #4]
 801577c:	675a      	str	r2, [r3, #116]	@ 0x74
 801577e:	e16c      	b.n	8015a5a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015780:	2300      	movs	r3, #0
 8015782:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015788:	63bb      	str	r3, [r7, #56]	@ 0x38
 801578a:	e156      	b.n	8015a3a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 801578c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801578e:	68db      	ldr	r3, [r3, #12]
 8015790:	685a      	ldr	r2, [r3, #4]
 8015792:	4b41      	ldr	r3, [pc, #260]	@ (8015898 <tcp_receive+0xd00>)
 8015794:	681b      	ldr	r3, [r3, #0]
 8015796:	429a      	cmp	r2, r3
 8015798:	d11d      	bne.n	80157d6 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801579a:	4b3e      	ldr	r3, [pc, #248]	@ (8015894 <tcp_receive+0xcfc>)
 801579c:	891a      	ldrh	r2, [r3, #8]
 801579e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157a0:	891b      	ldrh	r3, [r3, #8]
 80157a2:	429a      	cmp	r2, r3
 80157a4:	f240 814e 	bls.w	8015a44 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80157a8:	483a      	ldr	r0, [pc, #232]	@ (8015894 <tcp_receive+0xcfc>)
 80157aa:	f7fd fad3 	bl	8012d54 <tcp_seg_copy>
 80157ae:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80157b0:	697b      	ldr	r3, [r7, #20]
 80157b2:	2b00      	cmp	r3, #0
 80157b4:	f000 8148 	beq.w	8015a48 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80157b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d003      	beq.n	80157c6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80157be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157c0:	697a      	ldr	r2, [r7, #20]
 80157c2:	601a      	str	r2, [r3, #0]
 80157c4:	e002      	b.n	80157cc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80157c6:	687b      	ldr	r3, [r7, #4]
 80157c8:	697a      	ldr	r2, [r7, #20]
 80157ca:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80157cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80157ce:	6978      	ldr	r0, [r7, #20]
 80157d0:	f7ff f8de 	bl	8014990 <tcp_oos_insert_segment>
                }
                break;
 80157d4:	e138      	b.n	8015a48 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80157d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80157d8:	2b00      	cmp	r3, #0
 80157da:	d117      	bne.n	801580c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80157dc:	4b2e      	ldr	r3, [pc, #184]	@ (8015898 <tcp_receive+0xd00>)
 80157de:	681a      	ldr	r2, [r3, #0]
 80157e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80157e2:	68db      	ldr	r3, [r3, #12]
 80157e4:	685b      	ldr	r3, [r3, #4]
 80157e6:	1ad3      	subs	r3, r2, r3
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	da57      	bge.n	801589c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80157ec:	4829      	ldr	r0, [pc, #164]	@ (8015894 <tcp_receive+0xcfc>)
 80157ee:	f7fd fab1 	bl	8012d54 <tcp_seg_copy>
 80157f2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80157f4:	69bb      	ldr	r3, [r7, #24]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	f000 8128 	beq.w	8015a4c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	69ba      	ldr	r2, [r7, #24]
 8015800:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8015802:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015804:	69b8      	ldr	r0, [r7, #24]
 8015806:	f7ff f8c3 	bl	8014990 <tcp_oos_insert_segment>
                  }
                  break;
 801580a:	e11f      	b.n	8015a4c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801580c:	4b22      	ldr	r3, [pc, #136]	@ (8015898 <tcp_receive+0xd00>)
 801580e:	681a      	ldr	r2, [r3, #0]
 8015810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015812:	68db      	ldr	r3, [r3, #12]
 8015814:	685b      	ldr	r3, [r3, #4]
 8015816:	1ad3      	subs	r3, r2, r3
 8015818:	3b01      	subs	r3, #1
 801581a:	2b00      	cmp	r3, #0
 801581c:	db3e      	blt.n	801589c <tcp_receive+0xd04>
 801581e:	4b1e      	ldr	r3, [pc, #120]	@ (8015898 <tcp_receive+0xd00>)
 8015820:	681a      	ldr	r2, [r3, #0]
 8015822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015824:	68db      	ldr	r3, [r3, #12]
 8015826:	685b      	ldr	r3, [r3, #4]
 8015828:	1ad3      	subs	r3, r2, r3
 801582a:	3301      	adds	r3, #1
 801582c:	2b00      	cmp	r3, #0
 801582e:	dc35      	bgt.n	801589c <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015830:	4818      	ldr	r0, [pc, #96]	@ (8015894 <tcp_receive+0xcfc>)
 8015832:	f7fd fa8f 	bl	8012d54 <tcp_seg_copy>
 8015836:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015838:	69fb      	ldr	r3, [r7, #28]
 801583a:	2b00      	cmp	r3, #0
 801583c:	f000 8108 	beq.w	8015a50 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015842:	68db      	ldr	r3, [r3, #12]
 8015844:	685b      	ldr	r3, [r3, #4]
 8015846:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015848:	8912      	ldrh	r2, [r2, #8]
 801584a:	441a      	add	r2, r3
 801584c:	4b12      	ldr	r3, [pc, #72]	@ (8015898 <tcp_receive+0xd00>)
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	1ad3      	subs	r3, r2, r3
 8015852:	2b00      	cmp	r3, #0
 8015854:	dd12      	ble.n	801587c <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015856:	4b10      	ldr	r3, [pc, #64]	@ (8015898 <tcp_receive+0xd00>)
 8015858:	681b      	ldr	r3, [r3, #0]
 801585a:	b29a      	uxth	r2, r3
 801585c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801585e:	68db      	ldr	r3, [r3, #12]
 8015860:	685b      	ldr	r3, [r3, #4]
 8015862:	b29b      	uxth	r3, r3
 8015864:	1ad3      	subs	r3, r2, r3
 8015866:	b29a      	uxth	r2, r3
 8015868:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801586a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801586c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801586e:	685a      	ldr	r2, [r3, #4]
 8015870:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015872:	891b      	ldrh	r3, [r3, #8]
 8015874:	4619      	mov	r1, r3
 8015876:	4610      	mov	r0, r2
 8015878:	f7fb fb28 	bl	8010ecc <pbuf_realloc>
                    }
                    prev->next = cseg;
 801587c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801587e:	69fa      	ldr	r2, [r7, #28]
 8015880:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015882:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015884:	69f8      	ldr	r0, [r7, #28]
 8015886:	f7ff f883 	bl	8014990 <tcp_oos_insert_segment>
                  }
                  break;
 801588a:	e0e1      	b.n	8015a50 <tcp_receive+0xeb8>
 801588c:	200126b8 	.word	0x200126b8
 8015890:	200126b5 	.word	0x200126b5
 8015894:	20012688 	.word	0x20012688
 8015898:	200126a8 	.word	0x200126a8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801589c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801589e:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80158a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158a2:	681b      	ldr	r3, [r3, #0]
 80158a4:	2b00      	cmp	r3, #0
 80158a6:	f040 80c5 	bne.w	8015a34 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80158aa:	4b7f      	ldr	r3, [pc, #508]	@ (8015aa8 <tcp_receive+0xf10>)
 80158ac:	681a      	ldr	r2, [r3, #0]
 80158ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158b0:	68db      	ldr	r3, [r3, #12]
 80158b2:	685b      	ldr	r3, [r3, #4]
 80158b4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	f340 80bc 	ble.w	8015a34 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80158bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158be:	68db      	ldr	r3, [r3, #12]
 80158c0:	899b      	ldrh	r3, [r3, #12]
 80158c2:	b29b      	uxth	r3, r3
 80158c4:	4618      	mov	r0, r3
 80158c6:	f7f9 fd9b 	bl	800f400 <lwip_htons>
 80158ca:	4603      	mov	r3, r0
 80158cc:	b2db      	uxtb	r3, r3
 80158ce:	f003 0301 	and.w	r3, r3, #1
 80158d2:	2b00      	cmp	r3, #0
 80158d4:	f040 80be 	bne.w	8015a54 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80158d8:	4874      	ldr	r0, [pc, #464]	@ (8015aac <tcp_receive+0xf14>)
 80158da:	f7fd fa3b 	bl	8012d54 <tcp_seg_copy>
 80158de:	4602      	mov	r2, r0
 80158e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158e2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80158e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158e6:	681b      	ldr	r3, [r3, #0]
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	f000 80b5 	beq.w	8015a58 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80158ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158f0:	68db      	ldr	r3, [r3, #12]
 80158f2:	685b      	ldr	r3, [r3, #4]
 80158f4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80158f6:	8912      	ldrh	r2, [r2, #8]
 80158f8:	441a      	add	r2, r3
 80158fa:	4b6b      	ldr	r3, [pc, #428]	@ (8015aa8 <tcp_receive+0xf10>)
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	1ad3      	subs	r3, r2, r3
 8015900:	2b00      	cmp	r3, #0
 8015902:	dd12      	ble.n	801592a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015904:	4b68      	ldr	r3, [pc, #416]	@ (8015aa8 <tcp_receive+0xf10>)
 8015906:	681b      	ldr	r3, [r3, #0]
 8015908:	b29a      	uxth	r2, r3
 801590a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801590c:	68db      	ldr	r3, [r3, #12]
 801590e:	685b      	ldr	r3, [r3, #4]
 8015910:	b29b      	uxth	r3, r3
 8015912:	1ad3      	subs	r3, r2, r3
 8015914:	b29a      	uxth	r2, r3
 8015916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015918:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801591a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801591c:	685a      	ldr	r2, [r3, #4]
 801591e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015920:	891b      	ldrh	r3, [r3, #8]
 8015922:	4619      	mov	r1, r3
 8015924:	4610      	mov	r0, r2
 8015926:	f7fb fad1 	bl	8010ecc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801592a:	4b61      	ldr	r3, [pc, #388]	@ (8015ab0 <tcp_receive+0xf18>)
 801592c:	881b      	ldrh	r3, [r3, #0]
 801592e:	461a      	mov	r2, r3
 8015930:	4b5d      	ldr	r3, [pc, #372]	@ (8015aa8 <tcp_receive+0xf10>)
 8015932:	681b      	ldr	r3, [r3, #0]
 8015934:	441a      	add	r2, r3
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801593a:	6879      	ldr	r1, [r7, #4]
 801593c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801593e:	440b      	add	r3, r1
 8015940:	1ad3      	subs	r3, r2, r3
 8015942:	2b00      	cmp	r3, #0
 8015944:	f340 8088 	ble.w	8015a58 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801594a:	681b      	ldr	r3, [r3, #0]
 801594c:	68db      	ldr	r3, [r3, #12]
 801594e:	899b      	ldrh	r3, [r3, #12]
 8015950:	b29b      	uxth	r3, r3
 8015952:	4618      	mov	r0, r3
 8015954:	f7f9 fd54 	bl	800f400 <lwip_htons>
 8015958:	4603      	mov	r3, r0
 801595a:	b2db      	uxtb	r3, r3
 801595c:	f003 0301 	and.w	r3, r3, #1
 8015960:	2b00      	cmp	r3, #0
 8015962:	d021      	beq.n	80159a8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015964:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	68db      	ldr	r3, [r3, #12]
 801596a:	899b      	ldrh	r3, [r3, #12]
 801596c:	b29b      	uxth	r3, r3
 801596e:	b21b      	sxth	r3, r3
 8015970:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8015974:	b21c      	sxth	r4, r3
 8015976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	68db      	ldr	r3, [r3, #12]
 801597c:	899b      	ldrh	r3, [r3, #12]
 801597e:	b29b      	uxth	r3, r3
 8015980:	4618      	mov	r0, r3
 8015982:	f7f9 fd3d 	bl	800f400 <lwip_htons>
 8015986:	4603      	mov	r3, r0
 8015988:	b2db      	uxtb	r3, r3
 801598a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801598e:	b29b      	uxth	r3, r3
 8015990:	4618      	mov	r0, r3
 8015992:	f7f9 fd35 	bl	800f400 <lwip_htons>
 8015996:	4603      	mov	r3, r0
 8015998:	b21b      	sxth	r3, r3
 801599a:	4323      	orrs	r3, r4
 801599c:	b21a      	sxth	r2, r3
 801599e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	68db      	ldr	r3, [r3, #12]
 80159a4:	b292      	uxth	r2, r2
 80159a6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80159ac:	b29a      	uxth	r2, r3
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80159b2:	4413      	add	r3, r2
 80159b4:	b299      	uxth	r1, r3
 80159b6:	4b3c      	ldr	r3, [pc, #240]	@ (8015aa8 <tcp_receive+0xf10>)
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	b29a      	uxth	r2, r3
 80159bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	1a8a      	subs	r2, r1, r2
 80159c2:	b292      	uxth	r2, r2
 80159c4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80159c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	685a      	ldr	r2, [r3, #4]
 80159cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	891b      	ldrh	r3, [r3, #8]
 80159d2:	4619      	mov	r1, r3
 80159d4:	4610      	mov	r0, r2
 80159d6:	f7fb fa79 	bl	8010ecc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80159da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	891c      	ldrh	r4, [r3, #8]
 80159e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80159e2:	681b      	ldr	r3, [r3, #0]
 80159e4:	68db      	ldr	r3, [r3, #12]
 80159e6:	899b      	ldrh	r3, [r3, #12]
 80159e8:	b29b      	uxth	r3, r3
 80159ea:	4618      	mov	r0, r3
 80159ec:	f7f9 fd08 	bl	800f400 <lwip_htons>
 80159f0:	4603      	mov	r3, r0
 80159f2:	b2db      	uxtb	r3, r3
 80159f4:	f003 0303 	and.w	r3, r3, #3
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	d001      	beq.n	8015a00 <tcp_receive+0xe68>
 80159fc:	2301      	movs	r3, #1
 80159fe:	e000      	b.n	8015a02 <tcp_receive+0xe6a>
 8015a00:	2300      	movs	r3, #0
 8015a02:	4423      	add	r3, r4
 8015a04:	b29a      	uxth	r2, r3
 8015a06:	4b2a      	ldr	r3, [pc, #168]	@ (8015ab0 <tcp_receive+0xf18>)
 8015a08:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015a0a:	4b29      	ldr	r3, [pc, #164]	@ (8015ab0 <tcp_receive+0xf18>)
 8015a0c:	881b      	ldrh	r3, [r3, #0]
 8015a0e:	461a      	mov	r2, r3
 8015a10:	4b25      	ldr	r3, [pc, #148]	@ (8015aa8 <tcp_receive+0xf10>)
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	441a      	add	r2, r3
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a1a:	6879      	ldr	r1, [r7, #4]
 8015a1c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015a1e:	440b      	add	r3, r1
 8015a20:	429a      	cmp	r2, r3
 8015a22:	d019      	beq.n	8015a58 <tcp_receive+0xec0>
 8015a24:	4b23      	ldr	r3, [pc, #140]	@ (8015ab4 <tcp_receive+0xf1c>)
 8015a26:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 8015a2a:	4923      	ldr	r1, [pc, #140]	@ (8015ab8 <tcp_receive+0xf20>)
 8015a2c:	4823      	ldr	r0, [pc, #140]	@ (8015abc <tcp_receive+0xf24>)
 8015a2e:	f008 fc55 	bl	801e2dc <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015a32:	e011      	b.n	8015a58 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a36:	681b      	ldr	r3, [r3, #0]
 8015a38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8015a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015a3c:	2b00      	cmp	r3, #0
 8015a3e:	f47f aea5 	bne.w	801578c <tcp_receive+0xbf4>
 8015a42:	e00a      	b.n	8015a5a <tcp_receive+0xec2>
                break;
 8015a44:	bf00      	nop
 8015a46:	e008      	b.n	8015a5a <tcp_receive+0xec2>
                break;
 8015a48:	bf00      	nop
 8015a4a:	e006      	b.n	8015a5a <tcp_receive+0xec2>
                  break;
 8015a4c:	bf00      	nop
 8015a4e:	e004      	b.n	8015a5a <tcp_receive+0xec2>
                  break;
 8015a50:	bf00      	nop
 8015a52:	e002      	b.n	8015a5a <tcp_receive+0xec2>
                  break;
 8015a54:	bf00      	nop
 8015a56:	e000      	b.n	8015a5a <tcp_receive+0xec2>
                break;
 8015a58:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015a5a:	6878      	ldr	r0, [r7, #4]
 8015a5c:	f001 fe88 	bl	8017770 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015a60:	e003      	b.n	8015a6a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015a62:	6878      	ldr	r0, [r7, #4]
 8015a64:	f001 fe84 	bl	8017770 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015a68:	e01a      	b.n	8015aa0 <tcp_receive+0xf08>
 8015a6a:	e019      	b.n	8015aa0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015a6c:	4b0e      	ldr	r3, [pc, #56]	@ (8015aa8 <tcp_receive+0xf10>)
 8015a6e:	681a      	ldr	r2, [r3, #0]
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a74:	1ad3      	subs	r3, r2, r3
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	db0a      	blt.n	8015a90 <tcp_receive+0xef8>
 8015a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8015aa8 <tcp_receive+0xf10>)
 8015a7c:	681a      	ldr	r2, [r3, #0]
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a82:	6879      	ldr	r1, [r7, #4]
 8015a84:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015a86:	440b      	add	r3, r1
 8015a88:	1ad3      	subs	r3, r2, r3
 8015a8a:	3301      	adds	r3, #1
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	dd07      	ble.n	8015aa0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	8b5b      	ldrh	r3, [r3, #26]
 8015a94:	f043 0302 	orr.w	r3, r3, #2
 8015a98:	b29a      	uxth	r2, r3
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015a9e:	e7ff      	b.n	8015aa0 <tcp_receive+0xf08>
 8015aa0:	bf00      	nop
 8015aa2:	3750      	adds	r7, #80	@ 0x50
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	bdb0      	pop	{r4, r5, r7, pc}
 8015aa8:	200126a8 	.word	0x200126a8
 8015aac:	20012688 	.word	0x20012688
 8015ab0:	200126b2 	.word	0x200126b2
 8015ab4:	08023f10 	.word	0x08023f10
 8015ab8:	080242b8 	.word	0x080242b8
 8015abc:	08023f5c 	.word	0x08023f5c

08015ac0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015ac0:	b480      	push	{r7}
 8015ac2:	b083      	sub	sp, #12
 8015ac4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015ac6:	4b15      	ldr	r3, [pc, #84]	@ (8015b1c <tcp_get_next_optbyte+0x5c>)
 8015ac8:	881b      	ldrh	r3, [r3, #0]
 8015aca:	1c5a      	adds	r2, r3, #1
 8015acc:	b291      	uxth	r1, r2
 8015ace:	4a13      	ldr	r2, [pc, #76]	@ (8015b1c <tcp_get_next_optbyte+0x5c>)
 8015ad0:	8011      	strh	r1, [r2, #0]
 8015ad2:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015ad4:	4b12      	ldr	r3, [pc, #72]	@ (8015b20 <tcp_get_next_optbyte+0x60>)
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	2b00      	cmp	r3, #0
 8015ada:	d004      	beq.n	8015ae6 <tcp_get_next_optbyte+0x26>
 8015adc:	4b11      	ldr	r3, [pc, #68]	@ (8015b24 <tcp_get_next_optbyte+0x64>)
 8015ade:	881b      	ldrh	r3, [r3, #0]
 8015ae0:	88fa      	ldrh	r2, [r7, #6]
 8015ae2:	429a      	cmp	r2, r3
 8015ae4:	d208      	bcs.n	8015af8 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015ae6:	4b10      	ldr	r3, [pc, #64]	@ (8015b28 <tcp_get_next_optbyte+0x68>)
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	3314      	adds	r3, #20
 8015aec:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015aee:	88fb      	ldrh	r3, [r7, #6]
 8015af0:	683a      	ldr	r2, [r7, #0]
 8015af2:	4413      	add	r3, r2
 8015af4:	781b      	ldrb	r3, [r3, #0]
 8015af6:	e00b      	b.n	8015b10 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015af8:	88fb      	ldrh	r3, [r7, #6]
 8015afa:	b2da      	uxtb	r2, r3
 8015afc:	4b09      	ldr	r3, [pc, #36]	@ (8015b24 <tcp_get_next_optbyte+0x64>)
 8015afe:	881b      	ldrh	r3, [r3, #0]
 8015b00:	b2db      	uxtb	r3, r3
 8015b02:	1ad3      	subs	r3, r2, r3
 8015b04:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015b06:	4b06      	ldr	r3, [pc, #24]	@ (8015b20 <tcp_get_next_optbyte+0x60>)
 8015b08:	681a      	ldr	r2, [r3, #0]
 8015b0a:	797b      	ldrb	r3, [r7, #5]
 8015b0c:	4413      	add	r3, r2
 8015b0e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015b10:	4618      	mov	r0, r3
 8015b12:	370c      	adds	r7, #12
 8015b14:	46bd      	mov	sp, r7
 8015b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b1a:	4770      	bx	lr
 8015b1c:	200126a4 	.word	0x200126a4
 8015b20:	200126a0 	.word	0x200126a0
 8015b24:	2001269e 	.word	0x2001269e
 8015b28:	20012698 	.word	0x20012698

08015b2c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015b2c:	b580      	push	{r7, lr}
 8015b2e:	b084      	sub	sp, #16
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d106      	bne.n	8015b48 <tcp_parseopt+0x1c>
 8015b3a:	4b32      	ldr	r3, [pc, #200]	@ (8015c04 <tcp_parseopt+0xd8>)
 8015b3c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8015b40:	4931      	ldr	r1, [pc, #196]	@ (8015c08 <tcp_parseopt+0xdc>)
 8015b42:	4832      	ldr	r0, [pc, #200]	@ (8015c0c <tcp_parseopt+0xe0>)
 8015b44:	f008 fbca 	bl	801e2dc <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015b48:	4b31      	ldr	r3, [pc, #196]	@ (8015c10 <tcp_parseopt+0xe4>)
 8015b4a:	881b      	ldrh	r3, [r3, #0]
 8015b4c:	2b00      	cmp	r3, #0
 8015b4e:	d056      	beq.n	8015bfe <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015b50:	4b30      	ldr	r3, [pc, #192]	@ (8015c14 <tcp_parseopt+0xe8>)
 8015b52:	2200      	movs	r2, #0
 8015b54:	801a      	strh	r2, [r3, #0]
 8015b56:	e046      	b.n	8015be6 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8015b58:	f7ff ffb2 	bl	8015ac0 <tcp_get_next_optbyte>
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015b60:	7bfb      	ldrb	r3, [r7, #15]
 8015b62:	2b02      	cmp	r3, #2
 8015b64:	d006      	beq.n	8015b74 <tcp_parseopt+0x48>
 8015b66:	2b02      	cmp	r3, #2
 8015b68:	dc2a      	bgt.n	8015bc0 <tcp_parseopt+0x94>
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d042      	beq.n	8015bf4 <tcp_parseopt+0xc8>
 8015b6e:	2b01      	cmp	r3, #1
 8015b70:	d038      	beq.n	8015be4 <tcp_parseopt+0xb8>
 8015b72:	e025      	b.n	8015bc0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015b74:	f7ff ffa4 	bl	8015ac0 <tcp_get_next_optbyte>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	2b04      	cmp	r3, #4
 8015b7c:	d13c      	bne.n	8015bf8 <tcp_parseopt+0xcc>
 8015b7e:	4b25      	ldr	r3, [pc, #148]	@ (8015c14 <tcp_parseopt+0xe8>)
 8015b80:	881b      	ldrh	r3, [r3, #0]
 8015b82:	3301      	adds	r3, #1
 8015b84:	4a22      	ldr	r2, [pc, #136]	@ (8015c10 <tcp_parseopt+0xe4>)
 8015b86:	8812      	ldrh	r2, [r2, #0]
 8015b88:	4293      	cmp	r3, r2
 8015b8a:	da35      	bge.n	8015bf8 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015b8c:	f7ff ff98 	bl	8015ac0 <tcp_get_next_optbyte>
 8015b90:	4603      	mov	r3, r0
 8015b92:	021b      	lsls	r3, r3, #8
 8015b94:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015b96:	f7ff ff93 	bl	8015ac0 <tcp_get_next_optbyte>
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	461a      	mov	r2, r3
 8015b9e:	89bb      	ldrh	r3, [r7, #12]
 8015ba0:	4313      	orrs	r3, r2
 8015ba2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015ba4:	89bb      	ldrh	r3, [r7, #12]
 8015ba6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8015baa:	d804      	bhi.n	8015bb6 <tcp_parseopt+0x8a>
 8015bac:	89bb      	ldrh	r3, [r7, #12]
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d001      	beq.n	8015bb6 <tcp_parseopt+0x8a>
 8015bb2:	89ba      	ldrh	r2, [r7, #12]
 8015bb4:	e001      	b.n	8015bba <tcp_parseopt+0x8e>
 8015bb6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8015bbe:	e012      	b.n	8015be6 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015bc0:	f7ff ff7e 	bl	8015ac0 <tcp_get_next_optbyte>
 8015bc4:	4603      	mov	r3, r0
 8015bc6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015bc8:	7afb      	ldrb	r3, [r7, #11]
 8015bca:	2b01      	cmp	r3, #1
 8015bcc:	d916      	bls.n	8015bfc <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015bce:	7afb      	ldrb	r3, [r7, #11]
 8015bd0:	b29a      	uxth	r2, r3
 8015bd2:	4b10      	ldr	r3, [pc, #64]	@ (8015c14 <tcp_parseopt+0xe8>)
 8015bd4:	881b      	ldrh	r3, [r3, #0]
 8015bd6:	4413      	add	r3, r2
 8015bd8:	b29b      	uxth	r3, r3
 8015bda:	3b02      	subs	r3, #2
 8015bdc:	b29a      	uxth	r2, r3
 8015bde:	4b0d      	ldr	r3, [pc, #52]	@ (8015c14 <tcp_parseopt+0xe8>)
 8015be0:	801a      	strh	r2, [r3, #0]
 8015be2:	e000      	b.n	8015be6 <tcp_parseopt+0xba>
          break;
 8015be4:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015be6:	4b0b      	ldr	r3, [pc, #44]	@ (8015c14 <tcp_parseopt+0xe8>)
 8015be8:	881a      	ldrh	r2, [r3, #0]
 8015bea:	4b09      	ldr	r3, [pc, #36]	@ (8015c10 <tcp_parseopt+0xe4>)
 8015bec:	881b      	ldrh	r3, [r3, #0]
 8015bee:	429a      	cmp	r2, r3
 8015bf0:	d3b2      	bcc.n	8015b58 <tcp_parseopt+0x2c>
 8015bf2:	e004      	b.n	8015bfe <tcp_parseopt+0xd2>
          return;
 8015bf4:	bf00      	nop
 8015bf6:	e002      	b.n	8015bfe <tcp_parseopt+0xd2>
            return;
 8015bf8:	bf00      	nop
 8015bfa:	e000      	b.n	8015bfe <tcp_parseopt+0xd2>
            return;
 8015bfc:	bf00      	nop
      }
    }
  }
}
 8015bfe:	3710      	adds	r7, #16
 8015c00:	46bd      	mov	sp, r7
 8015c02:	bd80      	pop	{r7, pc}
 8015c04:	08023f10 	.word	0x08023f10
 8015c08:	08024374 	.word	0x08024374
 8015c0c:	08023f5c 	.word	0x08023f5c
 8015c10:	2001269c 	.word	0x2001269c
 8015c14:	200126a4 	.word	0x200126a4

08015c18 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015c18:	b480      	push	{r7}
 8015c1a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015c1c:	4b05      	ldr	r3, [pc, #20]	@ (8015c34 <tcp_trigger_input_pcb_close+0x1c>)
 8015c1e:	781b      	ldrb	r3, [r3, #0]
 8015c20:	f043 0310 	orr.w	r3, r3, #16
 8015c24:	b2da      	uxtb	r2, r3
 8015c26:	4b03      	ldr	r3, [pc, #12]	@ (8015c34 <tcp_trigger_input_pcb_close+0x1c>)
 8015c28:	701a      	strb	r2, [r3, #0]
}
 8015c2a:	bf00      	nop
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c32:	4770      	bx	lr
 8015c34:	200126b5 	.word	0x200126b5

08015c38 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015c38:	b580      	push	{r7, lr}
 8015c3a:	b084      	sub	sp, #16
 8015c3c:	af00      	add	r7, sp, #0
 8015c3e:	60f8      	str	r0, [r7, #12]
 8015c40:	60b9      	str	r1, [r7, #8]
 8015c42:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	2b00      	cmp	r3, #0
 8015c48:	d00a      	beq.n	8015c60 <tcp_route+0x28>
 8015c4a:	68fb      	ldr	r3, [r7, #12]
 8015c4c:	7a1b      	ldrb	r3, [r3, #8]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d006      	beq.n	8015c60 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	7a1b      	ldrb	r3, [r3, #8]
 8015c56:	4618      	mov	r0, r3
 8015c58:	f7fa ff30 	bl	8010abc <netif_get_by_index>
 8015c5c:	4603      	mov	r3, r0
 8015c5e:	e003      	b.n	8015c68 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015c60:	6878      	ldr	r0, [r7, #4]
 8015c62:	f005 fda9 	bl	801b7b8 <ip4_route>
 8015c66:	4603      	mov	r3, r0
  }
}
 8015c68:	4618      	mov	r0, r3
 8015c6a:	3710      	adds	r7, #16
 8015c6c:	46bd      	mov	sp, r7
 8015c6e:	bd80      	pop	{r7, pc}

08015c70 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015c70:	b590      	push	{r4, r7, lr}
 8015c72:	b087      	sub	sp, #28
 8015c74:	af00      	add	r7, sp, #0
 8015c76:	60f8      	str	r0, [r7, #12]
 8015c78:	60b9      	str	r1, [r7, #8]
 8015c7a:	603b      	str	r3, [r7, #0]
 8015c7c:	4613      	mov	r3, r2
 8015c7e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015c80:	68fb      	ldr	r3, [r7, #12]
 8015c82:	2b00      	cmp	r3, #0
 8015c84:	d105      	bne.n	8015c92 <tcp_create_segment+0x22>
 8015c86:	4b43      	ldr	r3, [pc, #268]	@ (8015d94 <tcp_create_segment+0x124>)
 8015c88:	22a3      	movs	r2, #163	@ 0xa3
 8015c8a:	4943      	ldr	r1, [pc, #268]	@ (8015d98 <tcp_create_segment+0x128>)
 8015c8c:	4843      	ldr	r0, [pc, #268]	@ (8015d9c <tcp_create_segment+0x12c>)
 8015c8e:	f008 fb25 	bl	801e2dc <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015c92:	68bb      	ldr	r3, [r7, #8]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d105      	bne.n	8015ca4 <tcp_create_segment+0x34>
 8015c98:	4b3e      	ldr	r3, [pc, #248]	@ (8015d94 <tcp_create_segment+0x124>)
 8015c9a:	22a4      	movs	r2, #164	@ 0xa4
 8015c9c:	4940      	ldr	r1, [pc, #256]	@ (8015da0 <tcp_create_segment+0x130>)
 8015c9e:	483f      	ldr	r0, [pc, #252]	@ (8015d9c <tcp_create_segment+0x12c>)
 8015ca0:	f008 fb1c 	bl	801e2dc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015ca4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015ca8:	009b      	lsls	r3, r3, #2
 8015caa:	b2db      	uxtb	r3, r3
 8015cac:	f003 0304 	and.w	r3, r3, #4
 8015cb0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015cb2:	2003      	movs	r0, #3
 8015cb4:	f7fa fb6a 	bl	801038c <memp_malloc>
 8015cb8:	6138      	str	r0, [r7, #16]
 8015cba:	693b      	ldr	r3, [r7, #16]
 8015cbc:	2b00      	cmp	r3, #0
 8015cbe:	d104      	bne.n	8015cca <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015cc0:	68b8      	ldr	r0, [r7, #8]
 8015cc2:	f7fb fa89 	bl	80111d8 <pbuf_free>
    return NULL;
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	e060      	b.n	8015d8c <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8015cca:	693b      	ldr	r3, [r7, #16]
 8015ccc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015cd0:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015cd2:	693b      	ldr	r3, [r7, #16]
 8015cd4:	2200      	movs	r2, #0
 8015cd6:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015cd8:	693b      	ldr	r3, [r7, #16]
 8015cda:	68ba      	ldr	r2, [r7, #8]
 8015cdc:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015cde:	68bb      	ldr	r3, [r7, #8]
 8015ce0:	891a      	ldrh	r2, [r3, #8]
 8015ce2:	7dfb      	ldrb	r3, [r7, #23]
 8015ce4:	b29b      	uxth	r3, r3
 8015ce6:	429a      	cmp	r2, r3
 8015ce8:	d205      	bcs.n	8015cf6 <tcp_create_segment+0x86>
 8015cea:	4b2a      	ldr	r3, [pc, #168]	@ (8015d94 <tcp_create_segment+0x124>)
 8015cec:	22b0      	movs	r2, #176	@ 0xb0
 8015cee:	492d      	ldr	r1, [pc, #180]	@ (8015da4 <tcp_create_segment+0x134>)
 8015cf0:	482a      	ldr	r0, [pc, #168]	@ (8015d9c <tcp_create_segment+0x12c>)
 8015cf2:	f008 faf3 	bl	801e2dc <iprintf>
  seg->len = p->tot_len - optlen;
 8015cf6:	68bb      	ldr	r3, [r7, #8]
 8015cf8:	891a      	ldrh	r2, [r3, #8]
 8015cfa:	7dfb      	ldrb	r3, [r7, #23]
 8015cfc:	b29b      	uxth	r3, r3
 8015cfe:	1ad3      	subs	r3, r2, r3
 8015d00:	b29a      	uxth	r2, r3
 8015d02:	693b      	ldr	r3, [r7, #16]
 8015d04:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015d06:	2114      	movs	r1, #20
 8015d08:	68b8      	ldr	r0, [r7, #8]
 8015d0a:	f7fb f9cf 	bl	80110ac <pbuf_add_header>
 8015d0e:	4603      	mov	r3, r0
 8015d10:	2b00      	cmp	r3, #0
 8015d12:	d004      	beq.n	8015d1e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015d14:	6938      	ldr	r0, [r7, #16]
 8015d16:	f7fd f804 	bl	8012d22 <tcp_seg_free>
    return NULL;
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	e036      	b.n	8015d8c <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015d1e:	693b      	ldr	r3, [r7, #16]
 8015d20:	685b      	ldr	r3, [r3, #4]
 8015d22:	685a      	ldr	r2, [r3, #4]
 8015d24:	693b      	ldr	r3, [r7, #16]
 8015d26:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	8ada      	ldrh	r2, [r3, #22]
 8015d2c:	693b      	ldr	r3, [r7, #16]
 8015d2e:	68dc      	ldr	r4, [r3, #12]
 8015d30:	4610      	mov	r0, r2
 8015d32:	f7f9 fb65 	bl	800f400 <lwip_htons>
 8015d36:	4603      	mov	r3, r0
 8015d38:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015d3a:	68fb      	ldr	r3, [r7, #12]
 8015d3c:	8b1a      	ldrh	r2, [r3, #24]
 8015d3e:	693b      	ldr	r3, [r7, #16]
 8015d40:	68dc      	ldr	r4, [r3, #12]
 8015d42:	4610      	mov	r0, r2
 8015d44:	f7f9 fb5c 	bl	800f400 <lwip_htons>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015d4c:	693b      	ldr	r3, [r7, #16]
 8015d4e:	68dc      	ldr	r4, [r3, #12]
 8015d50:	6838      	ldr	r0, [r7, #0]
 8015d52:	f7f9 fb6a 	bl	800f42a <lwip_htonl>
 8015d56:	4603      	mov	r3, r0
 8015d58:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015d5a:	7dfb      	ldrb	r3, [r7, #23]
 8015d5c:	089b      	lsrs	r3, r3, #2
 8015d5e:	b2db      	uxtb	r3, r3
 8015d60:	3305      	adds	r3, #5
 8015d62:	b29b      	uxth	r3, r3
 8015d64:	031b      	lsls	r3, r3, #12
 8015d66:	b29a      	uxth	r2, r3
 8015d68:	79fb      	ldrb	r3, [r7, #7]
 8015d6a:	b29b      	uxth	r3, r3
 8015d6c:	4313      	orrs	r3, r2
 8015d6e:	b29a      	uxth	r2, r3
 8015d70:	693b      	ldr	r3, [r7, #16]
 8015d72:	68dc      	ldr	r4, [r3, #12]
 8015d74:	4610      	mov	r0, r2
 8015d76:	f7f9 fb43 	bl	800f400 <lwip_htons>
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015d7e:	693b      	ldr	r3, [r7, #16]
 8015d80:	68db      	ldr	r3, [r3, #12]
 8015d82:	2200      	movs	r2, #0
 8015d84:	749a      	strb	r2, [r3, #18]
 8015d86:	2200      	movs	r2, #0
 8015d88:	74da      	strb	r2, [r3, #19]
  return seg;
 8015d8a:	693b      	ldr	r3, [r7, #16]
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	371c      	adds	r7, #28
 8015d90:	46bd      	mov	sp, r7
 8015d92:	bd90      	pop	{r4, r7, pc}
 8015d94:	08024390 	.word	0x08024390
 8015d98:	080243c4 	.word	0x080243c4
 8015d9c:	080243e4 	.word	0x080243e4
 8015da0:	0802440c 	.word	0x0802440c
 8015da4:	08024430 	.word	0x08024430

08015da8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015da8:	b580      	push	{r7, lr}
 8015daa:	b086      	sub	sp, #24
 8015dac:	af00      	add	r7, sp, #0
 8015dae:	607b      	str	r3, [r7, #4]
 8015db0:	4603      	mov	r3, r0
 8015db2:	73fb      	strb	r3, [r7, #15]
 8015db4:	460b      	mov	r3, r1
 8015db6:	81bb      	strh	r3, [r7, #12]
 8015db8:	4613      	mov	r3, r2
 8015dba:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015dbc:	89bb      	ldrh	r3, [r7, #12]
 8015dbe:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d105      	bne.n	8015dd2 <tcp_pbuf_prealloc+0x2a>
 8015dc6:	4b30      	ldr	r3, [pc, #192]	@ (8015e88 <tcp_pbuf_prealloc+0xe0>)
 8015dc8:	22e8      	movs	r2, #232	@ 0xe8
 8015dca:	4930      	ldr	r1, [pc, #192]	@ (8015e8c <tcp_pbuf_prealloc+0xe4>)
 8015dcc:	4830      	ldr	r0, [pc, #192]	@ (8015e90 <tcp_pbuf_prealloc+0xe8>)
 8015dce:	f008 fa85 	bl	801e2dc <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015dd2:	6a3b      	ldr	r3, [r7, #32]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d105      	bne.n	8015de4 <tcp_pbuf_prealloc+0x3c>
 8015dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8015e88 <tcp_pbuf_prealloc+0xe0>)
 8015dda:	22e9      	movs	r2, #233	@ 0xe9
 8015ddc:	492d      	ldr	r1, [pc, #180]	@ (8015e94 <tcp_pbuf_prealloc+0xec>)
 8015dde:	482c      	ldr	r0, [pc, #176]	@ (8015e90 <tcp_pbuf_prealloc+0xe8>)
 8015de0:	f008 fa7c 	bl	801e2dc <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015de4:	89ba      	ldrh	r2, [r7, #12]
 8015de6:	897b      	ldrh	r3, [r7, #10]
 8015de8:	429a      	cmp	r2, r3
 8015dea:	d221      	bcs.n	8015e30 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015dec:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015df0:	f003 0302 	and.w	r3, r3, #2
 8015df4:	2b00      	cmp	r3, #0
 8015df6:	d111      	bne.n	8015e1c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015df8:	6a3b      	ldr	r3, [r7, #32]
 8015dfa:	8b5b      	ldrh	r3, [r3, #26]
 8015dfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d115      	bne.n	8015e30 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015e04:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d007      	beq.n	8015e1c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015e0c:	6a3b      	ldr	r3, [r7, #32]
 8015e0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d103      	bne.n	8015e1c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015e14:	6a3b      	ldr	r3, [r7, #32]
 8015e16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8015e18:	2b00      	cmp	r3, #0
 8015e1a:	d009      	beq.n	8015e30 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015e1c:	89bb      	ldrh	r3, [r7, #12]
 8015e1e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8015e22:	f023 0203 	bic.w	r2, r3, #3
 8015e26:	897b      	ldrh	r3, [r7, #10]
 8015e28:	4293      	cmp	r3, r2
 8015e2a:	bf28      	it	cs
 8015e2c:	4613      	movcs	r3, r2
 8015e2e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015e30:	8af9      	ldrh	r1, [r7, #22]
 8015e32:	7bfb      	ldrb	r3, [r7, #15]
 8015e34:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015e38:	4618      	mov	r0, r3
 8015e3a:	f7fa fee9 	bl	8010c10 <pbuf_alloc>
 8015e3e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015e40:	693b      	ldr	r3, [r7, #16]
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d101      	bne.n	8015e4a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015e46:	2300      	movs	r3, #0
 8015e48:	e019      	b.n	8015e7e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015e4a:	693b      	ldr	r3, [r7, #16]
 8015e4c:	681b      	ldr	r3, [r3, #0]
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d006      	beq.n	8015e60 <tcp_pbuf_prealloc+0xb8>
 8015e52:	4b0d      	ldr	r3, [pc, #52]	@ (8015e88 <tcp_pbuf_prealloc+0xe0>)
 8015e54:	f240 120b 	movw	r2, #267	@ 0x10b
 8015e58:	490f      	ldr	r1, [pc, #60]	@ (8015e98 <tcp_pbuf_prealloc+0xf0>)
 8015e5a:	480d      	ldr	r0, [pc, #52]	@ (8015e90 <tcp_pbuf_prealloc+0xe8>)
 8015e5c:	f008 fa3e 	bl	801e2dc <iprintf>
  *oversize = p->len - length;
 8015e60:	693b      	ldr	r3, [r7, #16]
 8015e62:	895a      	ldrh	r2, [r3, #10]
 8015e64:	89bb      	ldrh	r3, [r7, #12]
 8015e66:	1ad3      	subs	r3, r2, r3
 8015e68:	b29a      	uxth	r2, r3
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015e6e:	693b      	ldr	r3, [r7, #16]
 8015e70:	89ba      	ldrh	r2, [r7, #12]
 8015e72:	811a      	strh	r2, [r3, #8]
 8015e74:	693b      	ldr	r3, [r7, #16]
 8015e76:	891a      	ldrh	r2, [r3, #8]
 8015e78:	693b      	ldr	r3, [r7, #16]
 8015e7a:	815a      	strh	r2, [r3, #10]
  return p;
 8015e7c:	693b      	ldr	r3, [r7, #16]
}
 8015e7e:	4618      	mov	r0, r3
 8015e80:	3718      	adds	r7, #24
 8015e82:	46bd      	mov	sp, r7
 8015e84:	bd80      	pop	{r7, pc}
 8015e86:	bf00      	nop
 8015e88:	08024390 	.word	0x08024390
 8015e8c:	08024448 	.word	0x08024448
 8015e90:	080243e4 	.word	0x080243e4
 8015e94:	0802446c 	.word	0x0802446c
 8015e98:	0802448c 	.word	0x0802448c

08015e9c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b082      	sub	sp, #8
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
 8015ea4:	460b      	mov	r3, r1
 8015ea6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015ea8:	687b      	ldr	r3, [r7, #4]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d106      	bne.n	8015ebc <tcp_write_checks+0x20>
 8015eae:	4b33      	ldr	r3, [pc, #204]	@ (8015f7c <tcp_write_checks+0xe0>)
 8015eb0:	f240 1233 	movw	r2, #307	@ 0x133
 8015eb4:	4932      	ldr	r1, [pc, #200]	@ (8015f80 <tcp_write_checks+0xe4>)
 8015eb6:	4833      	ldr	r0, [pc, #204]	@ (8015f84 <tcp_write_checks+0xe8>)
 8015eb8:	f008 fa10 	bl	801e2dc <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	7d1b      	ldrb	r3, [r3, #20]
 8015ec0:	2b04      	cmp	r3, #4
 8015ec2:	d00e      	beq.n	8015ee2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015ec8:	2b07      	cmp	r3, #7
 8015eca:	d00a      	beq.n	8015ee2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015ed0:	2b02      	cmp	r3, #2
 8015ed2:	d006      	beq.n	8015ee2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015ed8:	2b03      	cmp	r3, #3
 8015eda:	d002      	beq.n	8015ee2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015edc:	f06f 030a 	mvn.w	r3, #10
 8015ee0:	e048      	b.n	8015f74 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015ee2:	887b      	ldrh	r3, [r7, #2]
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d101      	bne.n	8015eec <tcp_write_checks+0x50>
    return ERR_OK;
 8015ee8:	2300      	movs	r3, #0
 8015eea:	e043      	b.n	8015f74 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015eec:	687b      	ldr	r3, [r7, #4]
 8015eee:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015ef2:	887a      	ldrh	r2, [r7, #2]
 8015ef4:	429a      	cmp	r2, r3
 8015ef6:	d909      	bls.n	8015f0c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	8b5b      	ldrh	r3, [r3, #26]
 8015efc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015f00:	b29a      	uxth	r2, r3
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015f06:	f04f 33ff 	mov.w	r3, #4294967295
 8015f0a:	e033      	b.n	8015f74 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015f12:	2b08      	cmp	r3, #8
 8015f14:	d909      	bls.n	8015f2a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	8b5b      	ldrh	r3, [r3, #26]
 8015f1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015f1e:	b29a      	uxth	r2, r3
 8015f20:	687b      	ldr	r3, [r7, #4]
 8015f22:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015f24:	f04f 33ff 	mov.w	r3, #4294967295
 8015f28:	e024      	b.n	8015f74 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d00f      	beq.n	8015f54 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d11a      	bne.n	8015f72 <tcp_write_checks+0xd6>
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d116      	bne.n	8015f72 <tcp_write_checks+0xd6>
 8015f44:	4b0d      	ldr	r3, [pc, #52]	@ (8015f7c <tcp_write_checks+0xe0>)
 8015f46:	f240 1255 	movw	r2, #341	@ 0x155
 8015f4a:	490f      	ldr	r1, [pc, #60]	@ (8015f88 <tcp_write_checks+0xec>)
 8015f4c:	480d      	ldr	r0, [pc, #52]	@ (8015f84 <tcp_write_checks+0xe8>)
 8015f4e:	f008 f9c5 	bl	801e2dc <iprintf>
 8015f52:	e00e      	b.n	8015f72 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d103      	bne.n	8015f64 <tcp_write_checks+0xc8>
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d006      	beq.n	8015f72 <tcp_write_checks+0xd6>
 8015f64:	4b05      	ldr	r3, [pc, #20]	@ (8015f7c <tcp_write_checks+0xe0>)
 8015f66:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8015f6a:	4908      	ldr	r1, [pc, #32]	@ (8015f8c <tcp_write_checks+0xf0>)
 8015f6c:	4805      	ldr	r0, [pc, #20]	@ (8015f84 <tcp_write_checks+0xe8>)
 8015f6e:	f008 f9b5 	bl	801e2dc <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8015f72:	2300      	movs	r3, #0
}
 8015f74:	4618      	mov	r0, r3
 8015f76:	3708      	adds	r7, #8
 8015f78:	46bd      	mov	sp, r7
 8015f7a:	bd80      	pop	{r7, pc}
 8015f7c:	08024390 	.word	0x08024390
 8015f80:	080244a0 	.word	0x080244a0
 8015f84:	080243e4 	.word	0x080243e4
 8015f88:	080244c0 	.word	0x080244c0
 8015f8c:	080244fc 	.word	0x080244fc

08015f90 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015f90:	b590      	push	{r4, r7, lr}
 8015f92:	b09b      	sub	sp, #108	@ 0x6c
 8015f94:	af04      	add	r7, sp, #16
 8015f96:	60f8      	str	r0, [r7, #12]
 8015f98:	60b9      	str	r1, [r7, #8]
 8015f9a:	4611      	mov	r1, r2
 8015f9c:	461a      	mov	r2, r3
 8015f9e:	460b      	mov	r3, r1
 8015fa0:	80fb      	strh	r3, [r7, #6]
 8015fa2:	4613      	mov	r3, r2
 8015fa4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8015fa6:	2300      	movs	r3, #0
 8015fa8:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015faa:	2300      	movs	r3, #0
 8015fac:	653b      	str	r3, [r7, #80]	@ 0x50
 8015fae:	2300      	movs	r3, #0
 8015fb0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015fb2:	2300      	movs	r3, #0
 8015fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015fb6:	2300      	movs	r3, #0
 8015fb8:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015fba:	2300      	movs	r3, #0
 8015fbc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8015fc0:	2300      	movs	r3, #0
 8015fc2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015fc6:	2300      	movs	r3, #0
 8015fc8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015fca:	2300      	movs	r3, #0
 8015fcc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015fce:	2300      	movs	r3, #0
 8015fd0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8015fd2:	68fb      	ldr	r3, [r7, #12]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d109      	bne.n	8015fec <tcp_write+0x5c>
 8015fd8:	4ba4      	ldr	r3, [pc, #656]	@ (801626c <tcp_write+0x2dc>)
 8015fda:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8015fde:	49a4      	ldr	r1, [pc, #656]	@ (8016270 <tcp_write+0x2e0>)
 8015fe0:	48a4      	ldr	r0, [pc, #656]	@ (8016274 <tcp_write+0x2e4>)
 8015fe2:	f008 f97b 	bl	801e2dc <iprintf>
 8015fe6:	f06f 030f 	mvn.w	r3, #15
 8015fea:	e32a      	b.n	8016642 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015ff2:	085b      	lsrs	r3, r3, #1
 8015ff4:	b29a      	uxth	r2, r3
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015ffa:	4293      	cmp	r3, r2
 8015ffc:	bf28      	it	cs
 8015ffe:	4613      	movcs	r3, r2
 8016000:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8016002:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016004:	2b00      	cmp	r3, #0
 8016006:	d102      	bne.n	801600e <tcp_write+0x7e>
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801600c:	e000      	b.n	8016010 <tcp_write+0x80>
 801600e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8016010:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8016012:	68bb      	ldr	r3, [r7, #8]
 8016014:	2b00      	cmp	r3, #0
 8016016:	d109      	bne.n	801602c <tcp_write+0x9c>
 8016018:	4b94      	ldr	r3, [pc, #592]	@ (801626c <tcp_write+0x2dc>)
 801601a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 801601e:	4996      	ldr	r1, [pc, #600]	@ (8016278 <tcp_write+0x2e8>)
 8016020:	4894      	ldr	r0, [pc, #592]	@ (8016274 <tcp_write+0x2e4>)
 8016022:	f008 f95b 	bl	801e2dc <iprintf>
 8016026:	f06f 030f 	mvn.w	r3, #15
 801602a:	e30a      	b.n	8016642 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801602c:	88fb      	ldrh	r3, [r7, #6]
 801602e:	4619      	mov	r1, r3
 8016030:	68f8      	ldr	r0, [r7, #12]
 8016032:	f7ff ff33 	bl	8015e9c <tcp_write_checks>
 8016036:	4603      	mov	r3, r0
 8016038:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 801603c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8016040:	2b00      	cmp	r3, #0
 8016042:	d002      	beq.n	801604a <tcp_write+0xba>
    return err;
 8016044:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8016048:	e2fb      	b.n	8016642 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016050:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016054:	2300      	movs	r3, #0
 8016056:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801605a:	68fb      	ldr	r3, [r7, #12]
 801605c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801605e:	2b00      	cmp	r3, #0
 8016060:	f000 80f6 	beq.w	8016250 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016064:	68fb      	ldr	r3, [r7, #12]
 8016066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016068:	653b      	str	r3, [r7, #80]	@ 0x50
 801606a:	e002      	b.n	8016072 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801606c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016072:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d1f8      	bne.n	801606c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801607a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801607c:	7a9b      	ldrb	r3, [r3, #10]
 801607e:	009b      	lsls	r3, r3, #2
 8016080:	b29b      	uxth	r3, r3
 8016082:	f003 0304 	and.w	r3, r3, #4
 8016086:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016088:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801608a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801608c:	891b      	ldrh	r3, [r3, #8]
 801608e:	4619      	mov	r1, r3
 8016090:	8c3b      	ldrh	r3, [r7, #32]
 8016092:	440b      	add	r3, r1
 8016094:	429a      	cmp	r2, r3
 8016096:	da06      	bge.n	80160a6 <tcp_write+0x116>
 8016098:	4b74      	ldr	r3, [pc, #464]	@ (801626c <tcp_write+0x2dc>)
 801609a:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 801609e:	4977      	ldr	r1, [pc, #476]	@ (801627c <tcp_write+0x2ec>)
 80160a0:	4874      	ldr	r0, [pc, #464]	@ (8016274 <tcp_write+0x2e4>)
 80160a2:	f008 f91b 	bl	801e2dc <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80160a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80160a8:	891a      	ldrh	r2, [r3, #8]
 80160aa:	8c3b      	ldrh	r3, [r7, #32]
 80160ac:	4413      	add	r3, r2
 80160ae:	b29b      	uxth	r3, r3
 80160b0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80160b2:	1ad3      	subs	r3, r2, r3
 80160b4:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80160bc:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80160be:	8a7b      	ldrh	r3, [r7, #18]
 80160c0:	2b00      	cmp	r3, #0
 80160c2:	d026      	beq.n	8016112 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80160c4:	8a7b      	ldrh	r3, [r7, #18]
 80160c6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80160c8:	429a      	cmp	r2, r3
 80160ca:	d206      	bcs.n	80160da <tcp_write+0x14a>
 80160cc:	4b67      	ldr	r3, [pc, #412]	@ (801626c <tcp_write+0x2dc>)
 80160ce:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 80160d2:	496b      	ldr	r1, [pc, #428]	@ (8016280 <tcp_write+0x2f0>)
 80160d4:	4867      	ldr	r0, [pc, #412]	@ (8016274 <tcp_write+0x2e4>)
 80160d6:	f008 f901 	bl	801e2dc <iprintf>
      seg = last_unsent;
 80160da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80160dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80160de:	8a7b      	ldrh	r3, [r7, #18]
 80160e0:	88fa      	ldrh	r2, [r7, #6]
 80160e2:	4293      	cmp	r3, r2
 80160e4:	bf28      	it	cs
 80160e6:	4613      	movcs	r3, r2
 80160e8:	b29b      	uxth	r3, r3
 80160ea:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80160ec:	4293      	cmp	r3, r2
 80160ee:	bf28      	it	cs
 80160f0:	4613      	movcs	r3, r2
 80160f2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 80160f4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80160f8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80160fa:	4413      	add	r3, r2
 80160fc:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8016100:	8a7a      	ldrh	r2, [r7, #18]
 8016102:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016104:	1ad3      	subs	r3, r2, r3
 8016106:	b29b      	uxth	r3, r3
 8016108:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801610a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801610c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801610e:	1ad3      	subs	r3, r2, r3
 8016110:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8016112:	8a7b      	ldrh	r3, [r7, #18]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d00b      	beq.n	8016130 <tcp_write+0x1a0>
 8016118:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801611c:	88fb      	ldrh	r3, [r7, #6]
 801611e:	429a      	cmp	r2, r3
 8016120:	d006      	beq.n	8016130 <tcp_write+0x1a0>
 8016122:	4b52      	ldr	r3, [pc, #328]	@ (801626c <tcp_write+0x2dc>)
 8016124:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8016128:	4956      	ldr	r1, [pc, #344]	@ (8016284 <tcp_write+0x2f4>)
 801612a:	4852      	ldr	r0, [pc, #328]	@ (8016274 <tcp_write+0x2e4>)
 801612c:	f008 f8d6 	bl	801e2dc <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8016130:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016134:	88fb      	ldrh	r3, [r7, #6]
 8016136:	429a      	cmp	r2, r3
 8016138:	f080 8167 	bcs.w	801640a <tcp_write+0x47a>
 801613c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801613e:	2b00      	cmp	r3, #0
 8016140:	f000 8163 	beq.w	801640a <tcp_write+0x47a>
 8016144:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016146:	891b      	ldrh	r3, [r3, #8]
 8016148:	2b00      	cmp	r3, #0
 801614a:	f000 815e 	beq.w	801640a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801614e:	88fa      	ldrh	r2, [r7, #6]
 8016150:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016154:	1ad2      	subs	r2, r2, r3
 8016156:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016158:	4293      	cmp	r3, r2
 801615a:	bfa8      	it	ge
 801615c:	4613      	movge	r3, r2
 801615e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8016160:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016162:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016164:	797b      	ldrb	r3, [r7, #5]
 8016166:	f003 0301 	and.w	r3, r3, #1
 801616a:	2b00      	cmp	r3, #0
 801616c:	d027      	beq.n	80161be <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801616e:	f107 0012 	add.w	r0, r7, #18
 8016172:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8016174:	8bf9      	ldrh	r1, [r7, #30]
 8016176:	2301      	movs	r3, #1
 8016178:	9302      	str	r3, [sp, #8]
 801617a:	797b      	ldrb	r3, [r7, #5]
 801617c:	9301      	str	r3, [sp, #4]
 801617e:	68fb      	ldr	r3, [r7, #12]
 8016180:	9300      	str	r3, [sp, #0]
 8016182:	4603      	mov	r3, r0
 8016184:	2000      	movs	r0, #0
 8016186:	f7ff fe0f 	bl	8015da8 <tcp_pbuf_prealloc>
 801618a:	6578      	str	r0, [r7, #84]	@ 0x54
 801618c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801618e:	2b00      	cmp	r3, #0
 8016190:	f000 8225 	beq.w	80165de <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016194:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016196:	6858      	ldr	r0, [r3, #4]
 8016198:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801619c:	68ba      	ldr	r2, [r7, #8]
 801619e:	4413      	add	r3, r2
 80161a0:	8bfa      	ldrh	r2, [r7, #30]
 80161a2:	4619      	mov	r1, r3
 80161a4:	f008 fa3b 	bl	801e61e <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80161a8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80161aa:	f7fb f8a3 	bl	80112f4 <pbuf_clen>
 80161ae:	4603      	mov	r3, r0
 80161b0:	461a      	mov	r2, r3
 80161b2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80161b6:	4413      	add	r3, r2
 80161b8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80161bc:	e041      	b.n	8016242 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80161be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80161c0:	685b      	ldr	r3, [r3, #4]
 80161c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80161c4:	e002      	b.n	80161cc <tcp_write+0x23c>
 80161c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80161cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80161ce:	681b      	ldr	r3, [r3, #0]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d1f8      	bne.n	80161c6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80161d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80161d6:	7b1b      	ldrb	r3, [r3, #12]
 80161d8:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80161dc:	2b00      	cmp	r3, #0
 80161de:	d115      	bne.n	801620c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80161e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80161e2:	685b      	ldr	r3, [r3, #4]
 80161e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80161e6:	8952      	ldrh	r2, [r2, #10]
 80161e8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80161ea:	68ba      	ldr	r2, [r7, #8]
 80161ec:	429a      	cmp	r2, r3
 80161ee:	d10d      	bne.n	801620c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80161f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d006      	beq.n	8016206 <tcp_write+0x276>
 80161f8:	4b1c      	ldr	r3, [pc, #112]	@ (801626c <tcp_write+0x2dc>)
 80161fa:	f240 2231 	movw	r2, #561	@ 0x231
 80161fe:	4922      	ldr	r1, [pc, #136]	@ (8016288 <tcp_write+0x2f8>)
 8016200:	481c      	ldr	r0, [pc, #112]	@ (8016274 <tcp_write+0x2e4>)
 8016202:	f008 f86b 	bl	801e2dc <iprintf>
          extendlen = seglen;
 8016206:	8bfb      	ldrh	r3, [r7, #30]
 8016208:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 801620a:	e01a      	b.n	8016242 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801620c:	8bfb      	ldrh	r3, [r7, #30]
 801620e:	2201      	movs	r2, #1
 8016210:	4619      	mov	r1, r3
 8016212:	2000      	movs	r0, #0
 8016214:	f7fa fcfc 	bl	8010c10 <pbuf_alloc>
 8016218:	6578      	str	r0, [r7, #84]	@ 0x54
 801621a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801621c:	2b00      	cmp	r3, #0
 801621e:	f000 81e0 	beq.w	80165e2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8016222:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016226:	68ba      	ldr	r2, [r7, #8]
 8016228:	441a      	add	r2, r3
 801622a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801622c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801622e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016230:	f7fb f860 	bl	80112f4 <pbuf_clen>
 8016234:	4603      	mov	r3, r0
 8016236:	461a      	mov	r2, r3
 8016238:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801623c:	4413      	add	r3, r2
 801623e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8016242:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016246:	8bfb      	ldrh	r3, [r7, #30]
 8016248:	4413      	add	r3, r2
 801624a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 801624e:	e0dc      	b.n	801640a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8016256:	2b00      	cmp	r3, #0
 8016258:	f000 80d7 	beq.w	801640a <tcp_write+0x47a>
 801625c:	4b03      	ldr	r3, [pc, #12]	@ (801626c <tcp_write+0x2dc>)
 801625e:	f240 224a 	movw	r2, #586	@ 0x24a
 8016262:	490a      	ldr	r1, [pc, #40]	@ (801628c <tcp_write+0x2fc>)
 8016264:	4803      	ldr	r0, [pc, #12]	@ (8016274 <tcp_write+0x2e4>)
 8016266:	f008 f839 	bl	801e2dc <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801626a:	e0ce      	b.n	801640a <tcp_write+0x47a>
 801626c:	08024390 	.word	0x08024390
 8016270:	08024530 	.word	0x08024530
 8016274:	080243e4 	.word	0x080243e4
 8016278:	08024548 	.word	0x08024548
 801627c:	0802457c 	.word	0x0802457c
 8016280:	08024594 	.word	0x08024594
 8016284:	080245b4 	.word	0x080245b4
 8016288:	080245d4 	.word	0x080245d4
 801628c:	08024600 	.word	0x08024600
    struct pbuf *p;
    u16_t left = len - pos;
 8016290:	88fa      	ldrh	r2, [r7, #6]
 8016292:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016296:	1ad3      	subs	r3, r2, r3
 8016298:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801629a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801629e:	b29b      	uxth	r3, r3
 80162a0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80162a2:	1ad3      	subs	r3, r2, r3
 80162a4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80162a6:	8b7a      	ldrh	r2, [r7, #26]
 80162a8:	8bbb      	ldrh	r3, [r7, #28]
 80162aa:	4293      	cmp	r3, r2
 80162ac:	bf28      	it	cs
 80162ae:	4613      	movcs	r3, r2
 80162b0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80162b2:	797b      	ldrb	r3, [r7, #5]
 80162b4:	f003 0301 	and.w	r3, r3, #1
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d036      	beq.n	801632a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80162bc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80162c0:	b29a      	uxth	r2, r3
 80162c2:	8b3b      	ldrh	r3, [r7, #24]
 80162c4:	4413      	add	r3, r2
 80162c6:	b299      	uxth	r1, r3
 80162c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80162ca:	2b00      	cmp	r3, #0
 80162cc:	bf0c      	ite	eq
 80162ce:	2301      	moveq	r3, #1
 80162d0:	2300      	movne	r3, #0
 80162d2:	b2db      	uxtb	r3, r3
 80162d4:	f107 0012 	add.w	r0, r7, #18
 80162d8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80162da:	9302      	str	r3, [sp, #8]
 80162dc:	797b      	ldrb	r3, [r7, #5]
 80162de:	9301      	str	r3, [sp, #4]
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	9300      	str	r3, [sp, #0]
 80162e4:	4603      	mov	r3, r0
 80162e6:	2036      	movs	r0, #54	@ 0x36
 80162e8:	f7ff fd5e 	bl	8015da8 <tcp_pbuf_prealloc>
 80162ec:	6338      	str	r0, [r7, #48]	@ 0x30
 80162ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162f0:	2b00      	cmp	r3, #0
 80162f2:	f000 8178 	beq.w	80165e6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80162f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80162f8:	895b      	ldrh	r3, [r3, #10]
 80162fa:	8b3a      	ldrh	r2, [r7, #24]
 80162fc:	429a      	cmp	r2, r3
 80162fe:	d906      	bls.n	801630e <tcp_write+0x37e>
 8016300:	4b8c      	ldr	r3, [pc, #560]	@ (8016534 <tcp_write+0x5a4>)
 8016302:	f240 2266 	movw	r2, #614	@ 0x266
 8016306:	498c      	ldr	r1, [pc, #560]	@ (8016538 <tcp_write+0x5a8>)
 8016308:	488c      	ldr	r0, [pc, #560]	@ (801653c <tcp_write+0x5ac>)
 801630a:	f007 ffe7 	bl	801e2dc <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801630e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016310:	685a      	ldr	r2, [r3, #4]
 8016312:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8016316:	18d0      	adds	r0, r2, r3
 8016318:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801631c:	68ba      	ldr	r2, [r7, #8]
 801631e:	4413      	add	r3, r2
 8016320:	8b3a      	ldrh	r2, [r7, #24]
 8016322:	4619      	mov	r1, r3
 8016324:	f008 f97b 	bl	801e61e <memcpy>
 8016328:	e02f      	b.n	801638a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801632a:	8a7b      	ldrh	r3, [r7, #18]
 801632c:	2b00      	cmp	r3, #0
 801632e:	d006      	beq.n	801633e <tcp_write+0x3ae>
 8016330:	4b80      	ldr	r3, [pc, #512]	@ (8016534 <tcp_write+0x5a4>)
 8016332:	f240 2271 	movw	r2, #625	@ 0x271
 8016336:	4982      	ldr	r1, [pc, #520]	@ (8016540 <tcp_write+0x5b0>)
 8016338:	4880      	ldr	r0, [pc, #512]	@ (801653c <tcp_write+0x5ac>)
 801633a:	f007 ffcf 	bl	801e2dc <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801633e:	8b3b      	ldrh	r3, [r7, #24]
 8016340:	2201      	movs	r2, #1
 8016342:	4619      	mov	r1, r3
 8016344:	2036      	movs	r0, #54	@ 0x36
 8016346:	f7fa fc63 	bl	8010c10 <pbuf_alloc>
 801634a:	6178      	str	r0, [r7, #20]
 801634c:	697b      	ldr	r3, [r7, #20]
 801634e:	2b00      	cmp	r3, #0
 8016350:	f000 814b 	beq.w	80165ea <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8016354:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016358:	68ba      	ldr	r2, [r7, #8]
 801635a:	441a      	add	r2, r3
 801635c:	697b      	ldr	r3, [r7, #20]
 801635e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016360:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8016364:	b29b      	uxth	r3, r3
 8016366:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801636a:	4619      	mov	r1, r3
 801636c:	2036      	movs	r0, #54	@ 0x36
 801636e:	f7fa fc4f 	bl	8010c10 <pbuf_alloc>
 8016372:	6338      	str	r0, [r7, #48]	@ 0x30
 8016374:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016376:	2b00      	cmp	r3, #0
 8016378:	d103      	bne.n	8016382 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801637a:	6978      	ldr	r0, [r7, #20]
 801637c:	f7fa ff2c 	bl	80111d8 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016380:	e136      	b.n	80165f0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8016382:	6979      	ldr	r1, [r7, #20]
 8016384:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8016386:	f7fa fff5 	bl	8011374 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801638a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801638c:	f7fa ffb2 	bl	80112f4 <pbuf_clen>
 8016390:	4603      	mov	r3, r0
 8016392:	461a      	mov	r2, r3
 8016394:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8016398:	4413      	add	r3, r2
 801639a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801639e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80163a2:	2b09      	cmp	r3, #9
 80163a4:	d903      	bls.n	80163ae <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80163a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80163a8:	f7fa ff16 	bl	80111d8 <pbuf_free>
      goto memerr;
 80163ac:	e120      	b.n	80165f0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80163ae:	68fb      	ldr	r3, [r7, #12]
 80163b0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80163b2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80163b6:	441a      	add	r2, r3
 80163b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80163bc:	9300      	str	r3, [sp, #0]
 80163be:	4613      	mov	r3, r2
 80163c0:	2200      	movs	r2, #0
 80163c2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80163c4:	68f8      	ldr	r0, [r7, #12]
 80163c6:	f7ff fc53 	bl	8015c70 <tcp_create_segment>
 80163ca:	64f8      	str	r0, [r7, #76]	@ 0x4c
 80163cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80163ce:	2b00      	cmp	r3, #0
 80163d0:	f000 810d 	beq.w	80165ee <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80163d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d102      	bne.n	80163e0 <tcp_write+0x450>
      queue = seg;
 80163da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80163dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80163de:	e00c      	b.n	80163fa <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80163e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80163e2:	2b00      	cmp	r3, #0
 80163e4:	d106      	bne.n	80163f4 <tcp_write+0x464>
 80163e6:	4b53      	ldr	r3, [pc, #332]	@ (8016534 <tcp_write+0x5a4>)
 80163e8:	f240 22ab 	movw	r2, #683	@ 0x2ab
 80163ec:	4955      	ldr	r1, [pc, #340]	@ (8016544 <tcp_write+0x5b4>)
 80163ee:	4853      	ldr	r0, [pc, #332]	@ (801653c <tcp_write+0x5ac>)
 80163f0:	f007 ff74 	bl	801e2dc <iprintf>
      prev_seg->next = seg;
 80163f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80163f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80163f8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80163fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80163fc:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80163fe:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016402:	8b3b      	ldrh	r3, [r7, #24]
 8016404:	4413      	add	r3, r2
 8016406:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801640a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801640e:	88fb      	ldrh	r3, [r7, #6]
 8016410:	429a      	cmp	r2, r3
 8016412:	f4ff af3d 	bcc.w	8016290 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016416:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016418:	2b00      	cmp	r3, #0
 801641a:	d02c      	beq.n	8016476 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801641c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801641e:	685b      	ldr	r3, [r3, #4]
 8016420:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016422:	e01e      	b.n	8016462 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8016424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016426:	891a      	ldrh	r2, [r3, #8]
 8016428:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801642a:	4413      	add	r3, r2
 801642c:	b29a      	uxth	r2, r3
 801642e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016430:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d110      	bne.n	801645c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801643a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801643c:	685b      	ldr	r3, [r3, #4]
 801643e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016440:	8952      	ldrh	r2, [r2, #10]
 8016442:	4413      	add	r3, r2
 8016444:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016446:	68b9      	ldr	r1, [r7, #8]
 8016448:	4618      	mov	r0, r3
 801644a:	f008 f8e8 	bl	801e61e <memcpy>
        p->len += oversize_used;
 801644e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016450:	895a      	ldrh	r2, [r3, #10]
 8016452:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016454:	4413      	add	r3, r2
 8016456:	b29a      	uxth	r2, r3
 8016458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801645a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801645c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016464:	2b00      	cmp	r3, #0
 8016466:	d1dd      	bne.n	8016424 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016468:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801646a:	891a      	ldrh	r2, [r3, #8]
 801646c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801646e:	4413      	add	r3, r2
 8016470:	b29a      	uxth	r2, r3
 8016472:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016474:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8016476:	8a7a      	ldrh	r2, [r7, #18]
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801647e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016480:	2b00      	cmp	r3, #0
 8016482:	d018      	beq.n	80164b6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8016484:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016486:	2b00      	cmp	r3, #0
 8016488:	d106      	bne.n	8016498 <tcp_write+0x508>
 801648a:	4b2a      	ldr	r3, [pc, #168]	@ (8016534 <tcp_write+0x5a4>)
 801648c:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 8016490:	492d      	ldr	r1, [pc, #180]	@ (8016548 <tcp_write+0x5b8>)
 8016492:	482a      	ldr	r0, [pc, #168]	@ (801653c <tcp_write+0x5ac>)
 8016494:	f007 ff22 	bl	801e2dc <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016498:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801649a:	685b      	ldr	r3, [r3, #4]
 801649c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801649e:	4618      	mov	r0, r3
 80164a0:	f7fa ff68 	bl	8011374 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80164a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164a6:	891a      	ldrh	r2, [r3, #8]
 80164a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164aa:	891b      	ldrh	r3, [r3, #8]
 80164ac:	4413      	add	r3, r2
 80164ae:	b29a      	uxth	r2, r3
 80164b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164b2:	811a      	strh	r2, [r3, #8]
 80164b4:	e037      	b.n	8016526 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80164b6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d034      	beq.n	8016526 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80164bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164be:	2b00      	cmp	r3, #0
 80164c0:	d003      	beq.n	80164ca <tcp_write+0x53a>
 80164c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d106      	bne.n	80164d8 <tcp_write+0x548>
 80164ca:	4b1a      	ldr	r3, [pc, #104]	@ (8016534 <tcp_write+0x5a4>)
 80164cc:	f240 22e6 	movw	r2, #742	@ 0x2e6
 80164d0:	491e      	ldr	r1, [pc, #120]	@ (801654c <tcp_write+0x5bc>)
 80164d2:	481a      	ldr	r0, [pc, #104]	@ (801653c <tcp_write+0x5ac>)
 80164d4:	f007 ff02 	bl	801e2dc <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80164d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164da:	685b      	ldr	r3, [r3, #4]
 80164dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80164de:	e009      	b.n	80164f4 <tcp_write+0x564>
      p->tot_len += extendlen;
 80164e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164e2:	891a      	ldrh	r2, [r3, #8]
 80164e4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80164e6:	4413      	add	r3, r2
 80164e8:	b29a      	uxth	r2, r3
 80164ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164ec:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80164ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164f0:	681b      	ldr	r3, [r3, #0]
 80164f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80164f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164f6:	681b      	ldr	r3, [r3, #0]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d1f1      	bne.n	80164e0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80164fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80164fe:	891a      	ldrh	r2, [r3, #8]
 8016500:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016502:	4413      	add	r3, r2
 8016504:	b29a      	uxth	r2, r3
 8016506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016508:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801650a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801650c:	895a      	ldrh	r2, [r3, #10]
 801650e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016510:	4413      	add	r3, r2
 8016512:	b29a      	uxth	r2, r3
 8016514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016516:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8016518:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801651a:	891a      	ldrh	r2, [r3, #8]
 801651c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801651e:	4413      	add	r3, r2
 8016520:	b29a      	uxth	r2, r3
 8016522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016524:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8016526:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016528:	2b00      	cmp	r3, #0
 801652a:	d111      	bne.n	8016550 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016530:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016532:	e010      	b.n	8016556 <tcp_write+0x5c6>
 8016534:	08024390 	.word	0x08024390
 8016538:	08024630 	.word	0x08024630
 801653c:	080243e4 	.word	0x080243e4
 8016540:	08024670 	.word	0x08024670
 8016544:	08024680 	.word	0x08024680
 8016548:	08024694 	.word	0x08024694
 801654c:	080246cc 	.word	0x080246cc
  } else {
    last_unsent->next = queue;
 8016550:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016552:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016554:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801655a:	88fb      	ldrh	r3, [r7, #6]
 801655c:	441a      	add	r2, r3
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8016562:	68fb      	ldr	r3, [r7, #12]
 8016564:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8016568:	88fb      	ldrh	r3, [r7, #6]
 801656a:	1ad3      	subs	r3, r2, r3
 801656c:	b29a      	uxth	r2, r3
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801657a:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016584:	2b00      	cmp	r3, #0
 8016586:	d00e      	beq.n	80165a6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801658c:	2b00      	cmp	r3, #0
 801658e:	d10a      	bne.n	80165a6 <tcp_write+0x616>
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016594:	2b00      	cmp	r3, #0
 8016596:	d106      	bne.n	80165a6 <tcp_write+0x616>
 8016598:	4b2c      	ldr	r3, [pc, #176]	@ (801664c <tcp_write+0x6bc>)
 801659a:	f240 3212 	movw	r2, #786	@ 0x312
 801659e:	492c      	ldr	r1, [pc, #176]	@ (8016650 <tcp_write+0x6c0>)
 80165a0:	482c      	ldr	r0, [pc, #176]	@ (8016654 <tcp_write+0x6c4>)
 80165a2:	f007 fe9b 	bl	801e2dc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80165a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d016      	beq.n	80165da <tcp_write+0x64a>
 80165ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80165ae:	68db      	ldr	r3, [r3, #12]
 80165b0:	2b00      	cmp	r3, #0
 80165b2:	d012      	beq.n	80165da <tcp_write+0x64a>
 80165b4:	797b      	ldrb	r3, [r7, #5]
 80165b6:	f003 0302 	and.w	r3, r3, #2
 80165ba:	2b00      	cmp	r3, #0
 80165bc:	d10d      	bne.n	80165da <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80165be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80165c0:	68db      	ldr	r3, [r3, #12]
 80165c2:	899b      	ldrh	r3, [r3, #12]
 80165c4:	b29c      	uxth	r4, r3
 80165c6:	2008      	movs	r0, #8
 80165c8:	f7f8 ff1a 	bl	800f400 <lwip_htons>
 80165cc:	4603      	mov	r3, r0
 80165ce:	461a      	mov	r2, r3
 80165d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80165d2:	68db      	ldr	r3, [r3, #12]
 80165d4:	4322      	orrs	r2, r4
 80165d6:	b292      	uxth	r2, r2
 80165d8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80165da:	2300      	movs	r3, #0
 80165dc:	e031      	b.n	8016642 <tcp_write+0x6b2>
          goto memerr;
 80165de:	bf00      	nop
 80165e0:	e006      	b.n	80165f0 <tcp_write+0x660>
            goto memerr;
 80165e2:	bf00      	nop
 80165e4:	e004      	b.n	80165f0 <tcp_write+0x660>
        goto memerr;
 80165e6:	bf00      	nop
 80165e8:	e002      	b.n	80165f0 <tcp_write+0x660>
        goto memerr;
 80165ea:	bf00      	nop
 80165ec:	e000      	b.n	80165f0 <tcp_write+0x660>
      goto memerr;
 80165ee:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	8b5b      	ldrh	r3, [r3, #26]
 80165f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80165f8:	b29a      	uxth	r2, r3
 80165fa:	68fb      	ldr	r3, [r7, #12]
 80165fc:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80165fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016600:	2b00      	cmp	r3, #0
 8016602:	d002      	beq.n	801660a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8016604:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016606:	f7fa fde7 	bl	80111d8 <pbuf_free>
  }
  if (queue != NULL) {
 801660a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801660c:	2b00      	cmp	r3, #0
 801660e:	d002      	beq.n	8016616 <tcp_write+0x686>
    tcp_segs_free(queue);
 8016610:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8016612:	f7fc fb71 	bl	8012cf8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801661c:	2b00      	cmp	r3, #0
 801661e:	d00e      	beq.n	801663e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016624:	2b00      	cmp	r3, #0
 8016626:	d10a      	bne.n	801663e <tcp_write+0x6ae>
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801662c:	2b00      	cmp	r3, #0
 801662e:	d106      	bne.n	801663e <tcp_write+0x6ae>
 8016630:	4b06      	ldr	r3, [pc, #24]	@ (801664c <tcp_write+0x6bc>)
 8016632:	f240 3227 	movw	r2, #807	@ 0x327
 8016636:	4906      	ldr	r1, [pc, #24]	@ (8016650 <tcp_write+0x6c0>)
 8016638:	4806      	ldr	r0, [pc, #24]	@ (8016654 <tcp_write+0x6c4>)
 801663a:	f007 fe4f 	bl	801e2dc <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801663e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016642:	4618      	mov	r0, r3
 8016644:	375c      	adds	r7, #92	@ 0x5c
 8016646:	46bd      	mov	sp, r7
 8016648:	bd90      	pop	{r4, r7, pc}
 801664a:	bf00      	nop
 801664c:	08024390 	.word	0x08024390
 8016650:	08024704 	.word	0x08024704
 8016654:	080243e4 	.word	0x080243e4

08016658 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016658:	b590      	push	{r4, r7, lr}
 801665a:	b08b      	sub	sp, #44	@ 0x2c
 801665c:	af02      	add	r7, sp, #8
 801665e:	6078      	str	r0, [r7, #4]
 8016660:	460b      	mov	r3, r1
 8016662:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016664:	2300      	movs	r3, #0
 8016666:	61fb      	str	r3, [r7, #28]
 8016668:	2300      	movs	r3, #0
 801666a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801666c:	2300      	movs	r3, #0
 801666e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d106      	bne.n	8016684 <tcp_split_unsent_seg+0x2c>
 8016676:	4b95      	ldr	r3, [pc, #596]	@ (80168cc <tcp_split_unsent_seg+0x274>)
 8016678:	f240 324b 	movw	r2, #843	@ 0x34b
 801667c:	4994      	ldr	r1, [pc, #592]	@ (80168d0 <tcp_split_unsent_seg+0x278>)
 801667e:	4895      	ldr	r0, [pc, #596]	@ (80168d4 <tcp_split_unsent_seg+0x27c>)
 8016680:	f007 fe2c 	bl	801e2dc <iprintf>

  useg = pcb->unsent;
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016688:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801668a:	697b      	ldr	r3, [r7, #20]
 801668c:	2b00      	cmp	r3, #0
 801668e:	d102      	bne.n	8016696 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016690:	f04f 33ff 	mov.w	r3, #4294967295
 8016694:	e116      	b.n	80168c4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016696:	887b      	ldrh	r3, [r7, #2]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d109      	bne.n	80166b0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801669c:	4b8b      	ldr	r3, [pc, #556]	@ (80168cc <tcp_split_unsent_seg+0x274>)
 801669e:	f240 3253 	movw	r2, #851	@ 0x353
 80166a2:	498d      	ldr	r1, [pc, #564]	@ (80168d8 <tcp_split_unsent_seg+0x280>)
 80166a4:	488b      	ldr	r0, [pc, #556]	@ (80168d4 <tcp_split_unsent_seg+0x27c>)
 80166a6:	f007 fe19 	bl	801e2dc <iprintf>
    return ERR_VAL;
 80166aa:	f06f 0305 	mvn.w	r3, #5
 80166ae:	e109      	b.n	80168c4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80166b0:	697b      	ldr	r3, [r7, #20]
 80166b2:	891b      	ldrh	r3, [r3, #8]
 80166b4:	887a      	ldrh	r2, [r7, #2]
 80166b6:	429a      	cmp	r2, r3
 80166b8:	d301      	bcc.n	80166be <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80166ba:	2300      	movs	r3, #0
 80166bc:	e102      	b.n	80168c4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80166be:	687b      	ldr	r3, [r7, #4]
 80166c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80166c2:	887a      	ldrh	r2, [r7, #2]
 80166c4:	429a      	cmp	r2, r3
 80166c6:	d906      	bls.n	80166d6 <tcp_split_unsent_seg+0x7e>
 80166c8:	4b80      	ldr	r3, [pc, #512]	@ (80168cc <tcp_split_unsent_seg+0x274>)
 80166ca:	f240 325b 	movw	r2, #859	@ 0x35b
 80166ce:	4983      	ldr	r1, [pc, #524]	@ (80168dc <tcp_split_unsent_seg+0x284>)
 80166d0:	4880      	ldr	r0, [pc, #512]	@ (80168d4 <tcp_split_unsent_seg+0x27c>)
 80166d2:	f007 fe03 	bl	801e2dc <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80166d6:	697b      	ldr	r3, [r7, #20]
 80166d8:	891b      	ldrh	r3, [r3, #8]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d106      	bne.n	80166ec <tcp_split_unsent_seg+0x94>
 80166de:	4b7b      	ldr	r3, [pc, #492]	@ (80168cc <tcp_split_unsent_seg+0x274>)
 80166e0:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 80166e4:	497e      	ldr	r1, [pc, #504]	@ (80168e0 <tcp_split_unsent_seg+0x288>)
 80166e6:	487b      	ldr	r0, [pc, #492]	@ (80168d4 <tcp_split_unsent_seg+0x27c>)
 80166e8:	f007 fdf8 	bl	801e2dc <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80166ec:	697b      	ldr	r3, [r7, #20]
 80166ee:	7a9b      	ldrb	r3, [r3, #10]
 80166f0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80166f2:	7bfb      	ldrb	r3, [r7, #15]
 80166f4:	009b      	lsls	r3, r3, #2
 80166f6:	b2db      	uxtb	r3, r3
 80166f8:	f003 0304 	and.w	r3, r3, #4
 80166fc:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80166fe:	697b      	ldr	r3, [r7, #20]
 8016700:	891a      	ldrh	r2, [r3, #8]
 8016702:	887b      	ldrh	r3, [r7, #2]
 8016704:	1ad3      	subs	r3, r2, r3
 8016706:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016708:	7bbb      	ldrb	r3, [r7, #14]
 801670a:	b29a      	uxth	r2, r3
 801670c:	89bb      	ldrh	r3, [r7, #12]
 801670e:	4413      	add	r3, r2
 8016710:	b29b      	uxth	r3, r3
 8016712:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016716:	4619      	mov	r1, r3
 8016718:	2036      	movs	r0, #54	@ 0x36
 801671a:	f7fa fa79 	bl	8010c10 <pbuf_alloc>
 801671e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016720:	693b      	ldr	r3, [r7, #16]
 8016722:	2b00      	cmp	r3, #0
 8016724:	f000 80b7 	beq.w	8016896 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016728:	697b      	ldr	r3, [r7, #20]
 801672a:	685b      	ldr	r3, [r3, #4]
 801672c:	891a      	ldrh	r2, [r3, #8]
 801672e:	697b      	ldr	r3, [r7, #20]
 8016730:	891b      	ldrh	r3, [r3, #8]
 8016732:	1ad3      	subs	r3, r2, r3
 8016734:	b29a      	uxth	r2, r3
 8016736:	887b      	ldrh	r3, [r7, #2]
 8016738:	4413      	add	r3, r2
 801673a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801673c:	697b      	ldr	r3, [r7, #20]
 801673e:	6858      	ldr	r0, [r3, #4]
 8016740:	693b      	ldr	r3, [r7, #16]
 8016742:	685a      	ldr	r2, [r3, #4]
 8016744:	7bbb      	ldrb	r3, [r7, #14]
 8016746:	18d1      	adds	r1, r2, r3
 8016748:	897b      	ldrh	r3, [r7, #10]
 801674a:	89ba      	ldrh	r2, [r7, #12]
 801674c:	f7fa ff4a 	bl	80115e4 <pbuf_copy_partial>
 8016750:	4603      	mov	r3, r0
 8016752:	461a      	mov	r2, r3
 8016754:	89bb      	ldrh	r3, [r7, #12]
 8016756:	4293      	cmp	r3, r2
 8016758:	f040 809f 	bne.w	801689a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801675c:	697b      	ldr	r3, [r7, #20]
 801675e:	68db      	ldr	r3, [r3, #12]
 8016760:	899b      	ldrh	r3, [r3, #12]
 8016762:	b29b      	uxth	r3, r3
 8016764:	4618      	mov	r0, r3
 8016766:	f7f8 fe4b 	bl	800f400 <lwip_htons>
 801676a:	4603      	mov	r3, r0
 801676c:	b2db      	uxtb	r3, r3
 801676e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016772:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016774:	2300      	movs	r3, #0
 8016776:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016778:	7efb      	ldrb	r3, [r7, #27]
 801677a:	f003 0308 	and.w	r3, r3, #8
 801677e:	2b00      	cmp	r3, #0
 8016780:	d007      	beq.n	8016792 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016782:	7efb      	ldrb	r3, [r7, #27]
 8016784:	f023 0308 	bic.w	r3, r3, #8
 8016788:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801678a:	7ebb      	ldrb	r3, [r7, #26]
 801678c:	f043 0308 	orr.w	r3, r3, #8
 8016790:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8016792:	7efb      	ldrb	r3, [r7, #27]
 8016794:	f003 0301 	and.w	r3, r3, #1
 8016798:	2b00      	cmp	r3, #0
 801679a:	d007      	beq.n	80167ac <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801679c:	7efb      	ldrb	r3, [r7, #27]
 801679e:	f023 0301 	bic.w	r3, r3, #1
 80167a2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80167a4:	7ebb      	ldrb	r3, [r7, #26]
 80167a6:	f043 0301 	orr.w	r3, r3, #1
 80167aa:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80167ac:	697b      	ldr	r3, [r7, #20]
 80167ae:	68db      	ldr	r3, [r3, #12]
 80167b0:	685b      	ldr	r3, [r3, #4]
 80167b2:	4618      	mov	r0, r3
 80167b4:	f7f8 fe39 	bl	800f42a <lwip_htonl>
 80167b8:	4602      	mov	r2, r0
 80167ba:	887b      	ldrh	r3, [r7, #2]
 80167bc:	18d1      	adds	r1, r2, r3
 80167be:	7eba      	ldrb	r2, [r7, #26]
 80167c0:	7bfb      	ldrb	r3, [r7, #15]
 80167c2:	9300      	str	r3, [sp, #0]
 80167c4:	460b      	mov	r3, r1
 80167c6:	6939      	ldr	r1, [r7, #16]
 80167c8:	6878      	ldr	r0, [r7, #4]
 80167ca:	f7ff fa51 	bl	8015c70 <tcp_create_segment>
 80167ce:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80167d0:	69fb      	ldr	r3, [r7, #28]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d063      	beq.n	801689e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80167d6:	697b      	ldr	r3, [r7, #20]
 80167d8:	685b      	ldr	r3, [r3, #4]
 80167da:	4618      	mov	r0, r3
 80167dc:	f7fa fd8a 	bl	80112f4 <pbuf_clen>
 80167e0:	4603      	mov	r3, r0
 80167e2:	461a      	mov	r2, r3
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80167ea:	1a9b      	subs	r3, r3, r2
 80167ec:	b29a      	uxth	r2, r3
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80167f4:	697b      	ldr	r3, [r7, #20]
 80167f6:	6858      	ldr	r0, [r3, #4]
 80167f8:	697b      	ldr	r3, [r7, #20]
 80167fa:	685b      	ldr	r3, [r3, #4]
 80167fc:	891a      	ldrh	r2, [r3, #8]
 80167fe:	89bb      	ldrh	r3, [r7, #12]
 8016800:	1ad3      	subs	r3, r2, r3
 8016802:	b29b      	uxth	r3, r3
 8016804:	4619      	mov	r1, r3
 8016806:	f7fa fb61 	bl	8010ecc <pbuf_realloc>
  useg->len -= remainder;
 801680a:	697b      	ldr	r3, [r7, #20]
 801680c:	891a      	ldrh	r2, [r3, #8]
 801680e:	89bb      	ldrh	r3, [r7, #12]
 8016810:	1ad3      	subs	r3, r2, r3
 8016812:	b29a      	uxth	r2, r3
 8016814:	697b      	ldr	r3, [r7, #20]
 8016816:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016818:	697b      	ldr	r3, [r7, #20]
 801681a:	68db      	ldr	r3, [r3, #12]
 801681c:	899b      	ldrh	r3, [r3, #12]
 801681e:	b29c      	uxth	r4, r3
 8016820:	7efb      	ldrb	r3, [r7, #27]
 8016822:	b29b      	uxth	r3, r3
 8016824:	4618      	mov	r0, r3
 8016826:	f7f8 fdeb 	bl	800f400 <lwip_htons>
 801682a:	4603      	mov	r3, r0
 801682c:	461a      	mov	r2, r3
 801682e:	697b      	ldr	r3, [r7, #20]
 8016830:	68db      	ldr	r3, [r3, #12]
 8016832:	4322      	orrs	r2, r4
 8016834:	b292      	uxth	r2, r2
 8016836:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016838:	697b      	ldr	r3, [r7, #20]
 801683a:	685b      	ldr	r3, [r3, #4]
 801683c:	4618      	mov	r0, r3
 801683e:	f7fa fd59 	bl	80112f4 <pbuf_clen>
 8016842:	4603      	mov	r3, r0
 8016844:	461a      	mov	r2, r3
 8016846:	687b      	ldr	r3, [r7, #4]
 8016848:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801684c:	4413      	add	r3, r2
 801684e:	b29a      	uxth	r2, r3
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016856:	69fb      	ldr	r3, [r7, #28]
 8016858:	685b      	ldr	r3, [r3, #4]
 801685a:	4618      	mov	r0, r3
 801685c:	f7fa fd4a 	bl	80112f4 <pbuf_clen>
 8016860:	4603      	mov	r3, r0
 8016862:	461a      	mov	r2, r3
 8016864:	687b      	ldr	r3, [r7, #4]
 8016866:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801686a:	4413      	add	r3, r2
 801686c:	b29a      	uxth	r2, r3
 801686e:	687b      	ldr	r3, [r7, #4]
 8016870:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016874:	697b      	ldr	r3, [r7, #20]
 8016876:	681a      	ldr	r2, [r3, #0]
 8016878:	69fb      	ldr	r3, [r7, #28]
 801687a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801687c:	697b      	ldr	r3, [r7, #20]
 801687e:	69fa      	ldr	r2, [r7, #28]
 8016880:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016882:	69fb      	ldr	r3, [r7, #28]
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	2b00      	cmp	r3, #0
 8016888:	d103      	bne.n	8016892 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	2200      	movs	r2, #0
 801688e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016892:	2300      	movs	r3, #0
 8016894:	e016      	b.n	80168c4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016896:	bf00      	nop
 8016898:	e002      	b.n	80168a0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801689a:	bf00      	nop
 801689c:	e000      	b.n	80168a0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801689e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80168a0:	69fb      	ldr	r3, [r7, #28]
 80168a2:	2b00      	cmp	r3, #0
 80168a4:	d006      	beq.n	80168b4 <tcp_split_unsent_seg+0x25c>
 80168a6:	4b09      	ldr	r3, [pc, #36]	@ (80168cc <tcp_split_unsent_seg+0x274>)
 80168a8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80168ac:	490d      	ldr	r1, [pc, #52]	@ (80168e4 <tcp_split_unsent_seg+0x28c>)
 80168ae:	4809      	ldr	r0, [pc, #36]	@ (80168d4 <tcp_split_unsent_seg+0x27c>)
 80168b0:	f007 fd14 	bl	801e2dc <iprintf>
  if (p != NULL) {
 80168b4:	693b      	ldr	r3, [r7, #16]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d002      	beq.n	80168c0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80168ba:	6938      	ldr	r0, [r7, #16]
 80168bc:	f7fa fc8c 	bl	80111d8 <pbuf_free>
  }

  return ERR_MEM;
 80168c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80168c4:	4618      	mov	r0, r3
 80168c6:	3724      	adds	r7, #36	@ 0x24
 80168c8:	46bd      	mov	sp, r7
 80168ca:	bd90      	pop	{r4, r7, pc}
 80168cc:	08024390 	.word	0x08024390
 80168d0:	08024724 	.word	0x08024724
 80168d4:	080243e4 	.word	0x080243e4
 80168d8:	08024748 	.word	0x08024748
 80168dc:	0802476c 	.word	0x0802476c
 80168e0:	0802477c 	.word	0x0802477c
 80168e4:	0802478c 	.word	0x0802478c

080168e8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80168e8:	b590      	push	{r4, r7, lr}
 80168ea:	b085      	sub	sp, #20
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80168f0:	687b      	ldr	r3, [r7, #4]
 80168f2:	2b00      	cmp	r3, #0
 80168f4:	d106      	bne.n	8016904 <tcp_send_fin+0x1c>
 80168f6:	4b21      	ldr	r3, [pc, #132]	@ (801697c <tcp_send_fin+0x94>)
 80168f8:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 80168fc:	4920      	ldr	r1, [pc, #128]	@ (8016980 <tcp_send_fin+0x98>)
 80168fe:	4821      	ldr	r0, [pc, #132]	@ (8016984 <tcp_send_fin+0x9c>)
 8016900:	f007 fcec 	bl	801e2dc <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016908:	2b00      	cmp	r3, #0
 801690a:	d02e      	beq.n	801696a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016910:	60fb      	str	r3, [r7, #12]
 8016912:	e002      	b.n	801691a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016914:	68fb      	ldr	r3, [r7, #12]
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d1f8      	bne.n	8016914 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016922:	68fb      	ldr	r3, [r7, #12]
 8016924:	68db      	ldr	r3, [r3, #12]
 8016926:	899b      	ldrh	r3, [r3, #12]
 8016928:	b29b      	uxth	r3, r3
 801692a:	4618      	mov	r0, r3
 801692c:	f7f8 fd68 	bl	800f400 <lwip_htons>
 8016930:	4603      	mov	r3, r0
 8016932:	b2db      	uxtb	r3, r3
 8016934:	f003 0307 	and.w	r3, r3, #7
 8016938:	2b00      	cmp	r3, #0
 801693a:	d116      	bne.n	801696a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801693c:	68fb      	ldr	r3, [r7, #12]
 801693e:	68db      	ldr	r3, [r3, #12]
 8016940:	899b      	ldrh	r3, [r3, #12]
 8016942:	b29c      	uxth	r4, r3
 8016944:	2001      	movs	r0, #1
 8016946:	f7f8 fd5b 	bl	800f400 <lwip_htons>
 801694a:	4603      	mov	r3, r0
 801694c:	461a      	mov	r2, r3
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	68db      	ldr	r3, [r3, #12]
 8016952:	4322      	orrs	r2, r4
 8016954:	b292      	uxth	r2, r2
 8016956:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016958:	687b      	ldr	r3, [r7, #4]
 801695a:	8b5b      	ldrh	r3, [r3, #26]
 801695c:	f043 0320 	orr.w	r3, r3, #32
 8016960:	b29a      	uxth	r2, r3
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016966:	2300      	movs	r3, #0
 8016968:	e004      	b.n	8016974 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801696a:	2101      	movs	r1, #1
 801696c:	6878      	ldr	r0, [r7, #4]
 801696e:	f000 f80b 	bl	8016988 <tcp_enqueue_flags>
 8016972:	4603      	mov	r3, r0
}
 8016974:	4618      	mov	r0, r3
 8016976:	3714      	adds	r7, #20
 8016978:	46bd      	mov	sp, r7
 801697a:	bd90      	pop	{r4, r7, pc}
 801697c:	08024390 	.word	0x08024390
 8016980:	08024798 	.word	0x08024798
 8016984:	080243e4 	.word	0x080243e4

08016988 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016988:	b580      	push	{r7, lr}
 801698a:	b08a      	sub	sp, #40	@ 0x28
 801698c:	af02      	add	r7, sp, #8
 801698e:	6078      	str	r0, [r7, #4]
 8016990:	460b      	mov	r3, r1
 8016992:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016994:	2300      	movs	r3, #0
 8016996:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016998:	2300      	movs	r3, #0
 801699a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801699c:	78fb      	ldrb	r3, [r7, #3]
 801699e:	f003 0303 	and.w	r3, r3, #3
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d106      	bne.n	80169b4 <tcp_enqueue_flags+0x2c>
 80169a6:	4b67      	ldr	r3, [pc, #412]	@ (8016b44 <tcp_enqueue_flags+0x1bc>)
 80169a8:	f240 4211 	movw	r2, #1041	@ 0x411
 80169ac:	4966      	ldr	r1, [pc, #408]	@ (8016b48 <tcp_enqueue_flags+0x1c0>)
 80169ae:	4867      	ldr	r0, [pc, #412]	@ (8016b4c <tcp_enqueue_flags+0x1c4>)
 80169b0:	f007 fc94 	bl	801e2dc <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	2b00      	cmp	r3, #0
 80169b8:	d106      	bne.n	80169c8 <tcp_enqueue_flags+0x40>
 80169ba:	4b62      	ldr	r3, [pc, #392]	@ (8016b44 <tcp_enqueue_flags+0x1bc>)
 80169bc:	f240 4213 	movw	r2, #1043	@ 0x413
 80169c0:	4963      	ldr	r1, [pc, #396]	@ (8016b50 <tcp_enqueue_flags+0x1c8>)
 80169c2:	4862      	ldr	r0, [pc, #392]	@ (8016b4c <tcp_enqueue_flags+0x1c4>)
 80169c4:	f007 fc8a 	bl	801e2dc <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80169c8:	78fb      	ldrb	r3, [r7, #3]
 80169ca:	f003 0302 	and.w	r3, r3, #2
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d001      	beq.n	80169d6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80169d2:	2301      	movs	r3, #1
 80169d4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80169d6:	7ffb      	ldrb	r3, [r7, #31]
 80169d8:	009b      	lsls	r3, r3, #2
 80169da:	b2db      	uxtb	r3, r3
 80169dc:	f003 0304 	and.w	r3, r3, #4
 80169e0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80169e2:	7dfb      	ldrb	r3, [r7, #23]
 80169e4:	b29b      	uxth	r3, r3
 80169e6:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80169ea:	4619      	mov	r1, r3
 80169ec:	2036      	movs	r0, #54	@ 0x36
 80169ee:	f7fa f90f 	bl	8010c10 <pbuf_alloc>
 80169f2:	6138      	str	r0, [r7, #16]
 80169f4:	693b      	ldr	r3, [r7, #16]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d109      	bne.n	8016a0e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	8b5b      	ldrh	r3, [r3, #26]
 80169fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016a02:	b29a      	uxth	r2, r3
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016a08:	f04f 33ff 	mov.w	r3, #4294967295
 8016a0c:	e095      	b.n	8016b3a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016a0e:	693b      	ldr	r3, [r7, #16]
 8016a10:	895a      	ldrh	r2, [r3, #10]
 8016a12:	7dfb      	ldrb	r3, [r7, #23]
 8016a14:	b29b      	uxth	r3, r3
 8016a16:	429a      	cmp	r2, r3
 8016a18:	d206      	bcs.n	8016a28 <tcp_enqueue_flags+0xa0>
 8016a1a:	4b4a      	ldr	r3, [pc, #296]	@ (8016b44 <tcp_enqueue_flags+0x1bc>)
 8016a1c:	f240 4239 	movw	r2, #1081	@ 0x439
 8016a20:	494c      	ldr	r1, [pc, #304]	@ (8016b54 <tcp_enqueue_flags+0x1cc>)
 8016a22:	484a      	ldr	r0, [pc, #296]	@ (8016b4c <tcp_enqueue_flags+0x1c4>)
 8016a24:	f007 fc5a 	bl	801e2dc <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8016a2c:	78fa      	ldrb	r2, [r7, #3]
 8016a2e:	7ffb      	ldrb	r3, [r7, #31]
 8016a30:	9300      	str	r3, [sp, #0]
 8016a32:	460b      	mov	r3, r1
 8016a34:	6939      	ldr	r1, [r7, #16]
 8016a36:	6878      	ldr	r0, [r7, #4]
 8016a38:	f7ff f91a 	bl	8015c70 <tcp_create_segment>
 8016a3c:	60f8      	str	r0, [r7, #12]
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d109      	bne.n	8016a58 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	8b5b      	ldrh	r3, [r3, #26]
 8016a48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016a4c:	b29a      	uxth	r2, r3
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016a52:	f04f 33ff 	mov.w	r3, #4294967295
 8016a56:	e070      	b.n	8016b3a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	68db      	ldr	r3, [r3, #12]
 8016a5c:	f003 0303 	and.w	r3, r3, #3
 8016a60:	2b00      	cmp	r3, #0
 8016a62:	d006      	beq.n	8016a72 <tcp_enqueue_flags+0xea>
 8016a64:	4b37      	ldr	r3, [pc, #220]	@ (8016b44 <tcp_enqueue_flags+0x1bc>)
 8016a66:	f240 4242 	movw	r2, #1090	@ 0x442
 8016a6a:	493b      	ldr	r1, [pc, #236]	@ (8016b58 <tcp_enqueue_flags+0x1d0>)
 8016a6c:	4837      	ldr	r0, [pc, #220]	@ (8016b4c <tcp_enqueue_flags+0x1c4>)
 8016a6e:	f007 fc35 	bl	801e2dc <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	891b      	ldrh	r3, [r3, #8]
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d006      	beq.n	8016a88 <tcp_enqueue_flags+0x100>
 8016a7a:	4b32      	ldr	r3, [pc, #200]	@ (8016b44 <tcp_enqueue_flags+0x1bc>)
 8016a7c:	f240 4243 	movw	r2, #1091	@ 0x443
 8016a80:	4936      	ldr	r1, [pc, #216]	@ (8016b5c <tcp_enqueue_flags+0x1d4>)
 8016a82:	4832      	ldr	r0, [pc, #200]	@ (8016b4c <tcp_enqueue_flags+0x1c4>)
 8016a84:	f007 fc2a 	bl	801e2dc <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d103      	bne.n	8016a98 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016a90:	687b      	ldr	r3, [r7, #4]
 8016a92:	68fa      	ldr	r2, [r7, #12]
 8016a94:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016a96:	e00d      	b.n	8016ab4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016a9c:	61bb      	str	r3, [r7, #24]
 8016a9e:	e002      	b.n	8016aa6 <tcp_enqueue_flags+0x11e>
 8016aa0:	69bb      	ldr	r3, [r7, #24]
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	61bb      	str	r3, [r7, #24]
 8016aa6:	69bb      	ldr	r3, [r7, #24]
 8016aa8:	681b      	ldr	r3, [r3, #0]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d1f8      	bne.n	8016aa0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016aae:	69bb      	ldr	r3, [r7, #24]
 8016ab0:	68fa      	ldr	r2, [r7, #12]
 8016ab2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	2200      	movs	r2, #0
 8016ab8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016abc:	78fb      	ldrb	r3, [r7, #3]
 8016abe:	f003 0302 	and.w	r3, r3, #2
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d104      	bne.n	8016ad0 <tcp_enqueue_flags+0x148>
 8016ac6:	78fb      	ldrb	r3, [r7, #3]
 8016ac8:	f003 0301 	and.w	r3, r3, #1
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d004      	beq.n	8016ada <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016ad4:	1c5a      	adds	r2, r3, #1
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016ada:	78fb      	ldrb	r3, [r7, #3]
 8016adc:	f003 0301 	and.w	r3, r3, #1
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d006      	beq.n	8016af2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	8b5b      	ldrh	r3, [r3, #26]
 8016ae8:	f043 0320 	orr.w	r3, r3, #32
 8016aec:	b29a      	uxth	r2, r3
 8016aee:	687b      	ldr	r3, [r7, #4]
 8016af0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016af2:	68fb      	ldr	r3, [r7, #12]
 8016af4:	685b      	ldr	r3, [r3, #4]
 8016af6:	4618      	mov	r0, r3
 8016af8:	f7fa fbfc 	bl	80112f4 <pbuf_clen>
 8016afc:	4603      	mov	r3, r0
 8016afe:	461a      	mov	r2, r3
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016b06:	4413      	add	r3, r2
 8016b08:	b29a      	uxth	r2, r3
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016b16:	2b00      	cmp	r3, #0
 8016b18:	d00e      	beq.n	8016b38 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	d10a      	bne.n	8016b38 <tcp_enqueue_flags+0x1b0>
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b26:	2b00      	cmp	r3, #0
 8016b28:	d106      	bne.n	8016b38 <tcp_enqueue_flags+0x1b0>
 8016b2a:	4b06      	ldr	r3, [pc, #24]	@ (8016b44 <tcp_enqueue_flags+0x1bc>)
 8016b2c:	f240 4265 	movw	r2, #1125	@ 0x465
 8016b30:	490b      	ldr	r1, [pc, #44]	@ (8016b60 <tcp_enqueue_flags+0x1d8>)
 8016b32:	4806      	ldr	r0, [pc, #24]	@ (8016b4c <tcp_enqueue_flags+0x1c4>)
 8016b34:	f007 fbd2 	bl	801e2dc <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016b38:	2300      	movs	r3, #0
}
 8016b3a:	4618      	mov	r0, r3
 8016b3c:	3720      	adds	r7, #32
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	bd80      	pop	{r7, pc}
 8016b42:	bf00      	nop
 8016b44:	08024390 	.word	0x08024390
 8016b48:	080247b4 	.word	0x080247b4
 8016b4c:	080243e4 	.word	0x080243e4
 8016b50:	0802480c 	.word	0x0802480c
 8016b54:	0802482c 	.word	0x0802482c
 8016b58:	08024868 	.word	0x08024868
 8016b5c:	08024880 	.word	0x08024880
 8016b60:	080248ac 	.word	0x080248ac

08016b64 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016b64:	b5b0      	push	{r4, r5, r7, lr}
 8016b66:	b08a      	sub	sp, #40	@ 0x28
 8016b68:	af00      	add	r7, sp, #0
 8016b6a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d106      	bne.n	8016b80 <tcp_output+0x1c>
 8016b72:	4b8a      	ldr	r3, [pc, #552]	@ (8016d9c <tcp_output+0x238>)
 8016b74:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8016b78:	4989      	ldr	r1, [pc, #548]	@ (8016da0 <tcp_output+0x23c>)
 8016b7a:	488a      	ldr	r0, [pc, #552]	@ (8016da4 <tcp_output+0x240>)
 8016b7c:	f007 fbae 	bl	801e2dc <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	7d1b      	ldrb	r3, [r3, #20]
 8016b84:	2b01      	cmp	r3, #1
 8016b86:	d106      	bne.n	8016b96 <tcp_output+0x32>
 8016b88:	4b84      	ldr	r3, [pc, #528]	@ (8016d9c <tcp_output+0x238>)
 8016b8a:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8016b8e:	4986      	ldr	r1, [pc, #536]	@ (8016da8 <tcp_output+0x244>)
 8016b90:	4884      	ldr	r0, [pc, #528]	@ (8016da4 <tcp_output+0x240>)
 8016b92:	f007 fba3 	bl	801e2dc <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016b96:	4b85      	ldr	r3, [pc, #532]	@ (8016dac <tcp_output+0x248>)
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	687a      	ldr	r2, [r7, #4]
 8016b9c:	429a      	cmp	r2, r3
 8016b9e:	d101      	bne.n	8016ba4 <tcp_output+0x40>
    return ERR_OK;
 8016ba0:	2300      	movs	r3, #0
 8016ba2:	e1ce      	b.n	8016f42 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016bb0:	4293      	cmp	r3, r2
 8016bb2:	bf28      	it	cs
 8016bb4:	4613      	movcs	r3, r2
 8016bb6:	b29b      	uxth	r3, r3
 8016bb8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016bbe:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 8016bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d10b      	bne.n	8016bde <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	8b5b      	ldrh	r3, [r3, #26]
 8016bca:	f003 0302 	and.w	r3, r3, #2
 8016bce:	2b00      	cmp	r3, #0
 8016bd0:	f000 81aa 	beq.w	8016f28 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016bd4:	6878      	ldr	r0, [r7, #4]
 8016bd6:	f000 fdcb 	bl	8017770 <tcp_send_empty_ack>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	e1b1      	b.n	8016f42 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016bde:	6879      	ldr	r1, [r7, #4]
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	3304      	adds	r3, #4
 8016be4:	461a      	mov	r2, r3
 8016be6:	6878      	ldr	r0, [r7, #4]
 8016be8:	f7ff f826 	bl	8015c38 <tcp_route>
 8016bec:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016bee:	697b      	ldr	r3, [r7, #20]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d102      	bne.n	8016bfa <tcp_output+0x96>
    return ERR_RTE;
 8016bf4:	f06f 0303 	mvn.w	r3, #3
 8016bf8:	e1a3      	b.n	8016f42 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d003      	beq.n	8016c08 <tcp_output+0xa4>
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d111      	bne.n	8016c2c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016c08:	697b      	ldr	r3, [r7, #20]
 8016c0a:	2b00      	cmp	r3, #0
 8016c0c:	d002      	beq.n	8016c14 <tcp_output+0xb0>
 8016c0e:	697b      	ldr	r3, [r7, #20]
 8016c10:	3304      	adds	r3, #4
 8016c12:	e000      	b.n	8016c16 <tcp_output+0xb2>
 8016c14:	2300      	movs	r3, #0
 8016c16:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016c18:	693b      	ldr	r3, [r7, #16]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d102      	bne.n	8016c24 <tcp_output+0xc0>
      return ERR_RTE;
 8016c1e:	f06f 0303 	mvn.w	r3, #3
 8016c22:	e18e      	b.n	8016f42 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016c24:	693b      	ldr	r3, [r7, #16]
 8016c26:	681a      	ldr	r2, [r3, #0]
 8016c28:	687b      	ldr	r3, [r7, #4]
 8016c2a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c2e:	68db      	ldr	r3, [r3, #12]
 8016c30:	685b      	ldr	r3, [r3, #4]
 8016c32:	4618      	mov	r0, r3
 8016c34:	f7f8 fbf9 	bl	800f42a <lwip_htonl>
 8016c38:	4602      	mov	r2, r0
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c3e:	1ad3      	subs	r3, r2, r3
 8016c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016c42:	8912      	ldrh	r2, [r2, #8]
 8016c44:	4413      	add	r3, r2
 8016c46:	69ba      	ldr	r2, [r7, #24]
 8016c48:	429a      	cmp	r2, r3
 8016c4a:	d227      	bcs.n	8016c9c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016c52:	461a      	mov	r2, r3
 8016c54:	69bb      	ldr	r3, [r7, #24]
 8016c56:	4293      	cmp	r3, r2
 8016c58:	d114      	bne.n	8016c84 <tcp_output+0x120>
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d110      	bne.n	8016c84 <tcp_output+0x120>
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d10b      	bne.n	8016c84 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	2200      	movs	r2, #0
 8016c70:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	2201      	movs	r2, #1
 8016c78:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	2200      	movs	r2, #0
 8016c80:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	8b5b      	ldrh	r3, [r3, #26]
 8016c88:	f003 0302 	and.w	r3, r3, #2
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	f000 814d 	beq.w	8016f2c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016c92:	6878      	ldr	r0, [r7, #4]
 8016c94:	f000 fd6c 	bl	8017770 <tcp_send_empty_ack>
 8016c98:	4603      	mov	r3, r0
 8016c9a:	e152      	b.n	8016f42 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	2200      	movs	r2, #0
 8016ca0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016ca4:	687b      	ldr	r3, [r7, #4]
 8016ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016ca8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016caa:	6a3b      	ldr	r3, [r7, #32]
 8016cac:	2b00      	cmp	r3, #0
 8016cae:	f000 811c 	beq.w	8016eea <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016cb2:	e002      	b.n	8016cba <tcp_output+0x156>
 8016cb4:	6a3b      	ldr	r3, [r7, #32]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	623b      	str	r3, [r7, #32]
 8016cba:	6a3b      	ldr	r3, [r7, #32]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d1f8      	bne.n	8016cb4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016cc2:	e112      	b.n	8016eea <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016cc6:	68db      	ldr	r3, [r3, #12]
 8016cc8:	899b      	ldrh	r3, [r3, #12]
 8016cca:	b29b      	uxth	r3, r3
 8016ccc:	4618      	mov	r0, r3
 8016cce:	f7f8 fb97 	bl	800f400 <lwip_htons>
 8016cd2:	4603      	mov	r3, r0
 8016cd4:	b2db      	uxtb	r3, r3
 8016cd6:	f003 0304 	and.w	r3, r3, #4
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d006      	beq.n	8016cec <tcp_output+0x188>
 8016cde:	4b2f      	ldr	r3, [pc, #188]	@ (8016d9c <tcp_output+0x238>)
 8016ce0:	f240 5236 	movw	r2, #1334	@ 0x536
 8016ce4:	4932      	ldr	r1, [pc, #200]	@ (8016db0 <tcp_output+0x24c>)
 8016ce6:	482f      	ldr	r0, [pc, #188]	@ (8016da4 <tcp_output+0x240>)
 8016ce8:	f007 faf8 	bl	801e2dc <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d01f      	beq.n	8016d34 <tcp_output+0x1d0>
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	8b5b      	ldrh	r3, [r3, #26]
 8016cf8:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d119      	bne.n	8016d34 <tcp_output+0x1d0>
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d00b      	beq.n	8016d20 <tcp_output+0x1bc>
 8016d08:	687b      	ldr	r3, [r7, #4]
 8016d0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d0c:	681b      	ldr	r3, [r3, #0]
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d110      	bne.n	8016d34 <tcp_output+0x1d0>
 8016d12:	687b      	ldr	r3, [r7, #4]
 8016d14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d16:	891a      	ldrh	r2, [r3, #8]
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016d1c:	429a      	cmp	r2, r3
 8016d1e:	d209      	bcs.n	8016d34 <tcp_output+0x1d0>
 8016d20:	687b      	ldr	r3, [r7, #4]
 8016d22:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d004      	beq.n	8016d34 <tcp_output+0x1d0>
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016d30:	2b08      	cmp	r3, #8
 8016d32:	d901      	bls.n	8016d38 <tcp_output+0x1d4>
 8016d34:	2301      	movs	r3, #1
 8016d36:	e000      	b.n	8016d3a <tcp_output+0x1d6>
 8016d38:	2300      	movs	r3, #0
 8016d3a:	2b00      	cmp	r3, #0
 8016d3c:	d106      	bne.n	8016d4c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016d3e:	687b      	ldr	r3, [r7, #4]
 8016d40:	8b5b      	ldrh	r3, [r3, #26]
 8016d42:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	f000 80e4 	beq.w	8016f14 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	7d1b      	ldrb	r3, [r3, #20]
 8016d50:	2b02      	cmp	r3, #2
 8016d52:	d00d      	beq.n	8016d70 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d56:	68db      	ldr	r3, [r3, #12]
 8016d58:	899b      	ldrh	r3, [r3, #12]
 8016d5a:	b29c      	uxth	r4, r3
 8016d5c:	2010      	movs	r0, #16
 8016d5e:	f7f8 fb4f 	bl	800f400 <lwip_htons>
 8016d62:	4603      	mov	r3, r0
 8016d64:	461a      	mov	r2, r3
 8016d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016d68:	68db      	ldr	r3, [r3, #12]
 8016d6a:	4322      	orrs	r2, r4
 8016d6c:	b292      	uxth	r2, r2
 8016d6e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016d70:	697a      	ldr	r2, [r7, #20]
 8016d72:	6879      	ldr	r1, [r7, #4]
 8016d74:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016d76:	f000 f909 	bl	8016f8c <tcp_output_segment>
 8016d7a:	4603      	mov	r3, r0
 8016d7c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016d7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d016      	beq.n	8016db4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	8b5b      	ldrh	r3, [r3, #26]
 8016d8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016d8e:	b29a      	uxth	r2, r3
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	835a      	strh	r2, [r3, #26]
      return err;
 8016d94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016d98:	e0d3      	b.n	8016f42 <tcp_output+0x3de>
 8016d9a:	bf00      	nop
 8016d9c:	08024390 	.word	0x08024390
 8016da0:	080248d4 	.word	0x080248d4
 8016da4:	080243e4 	.word	0x080243e4
 8016da8:	080248ec 	.word	0x080248ec
 8016dac:	200126bc 	.word	0x200126bc
 8016db0:	08024914 	.word	0x08024914
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016db6:	681a      	ldr	r2, [r3, #0]
 8016db8:	687b      	ldr	r3, [r7, #4]
 8016dba:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	7d1b      	ldrb	r3, [r3, #20]
 8016dc0:	2b02      	cmp	r3, #2
 8016dc2:	d006      	beq.n	8016dd2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	8b5b      	ldrh	r3, [r3, #26]
 8016dc8:	f023 0303 	bic.w	r3, r3, #3
 8016dcc:	b29a      	uxth	r2, r3
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016dd4:	68db      	ldr	r3, [r3, #12]
 8016dd6:	685b      	ldr	r3, [r3, #4]
 8016dd8:	4618      	mov	r0, r3
 8016dda:	f7f8 fb26 	bl	800f42a <lwip_htonl>
 8016dde:	4604      	mov	r4, r0
 8016de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016de2:	891b      	ldrh	r3, [r3, #8]
 8016de4:	461d      	mov	r5, r3
 8016de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016de8:	68db      	ldr	r3, [r3, #12]
 8016dea:	899b      	ldrh	r3, [r3, #12]
 8016dec:	b29b      	uxth	r3, r3
 8016dee:	4618      	mov	r0, r3
 8016df0:	f7f8 fb06 	bl	800f400 <lwip_htons>
 8016df4:	4603      	mov	r3, r0
 8016df6:	b2db      	uxtb	r3, r3
 8016df8:	f003 0303 	and.w	r3, r3, #3
 8016dfc:	2b00      	cmp	r3, #0
 8016dfe:	d001      	beq.n	8016e04 <tcp_output+0x2a0>
 8016e00:	2301      	movs	r3, #1
 8016e02:	e000      	b.n	8016e06 <tcp_output+0x2a2>
 8016e04:	2300      	movs	r3, #0
 8016e06:	442b      	add	r3, r5
 8016e08:	4423      	add	r3, r4
 8016e0a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016e10:	68bb      	ldr	r3, [r7, #8]
 8016e12:	1ad3      	subs	r3, r2, r3
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	da02      	bge.n	8016e1e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	68ba      	ldr	r2, [r7, #8]
 8016e1c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e20:	891b      	ldrh	r3, [r3, #8]
 8016e22:	461c      	mov	r4, r3
 8016e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e26:	68db      	ldr	r3, [r3, #12]
 8016e28:	899b      	ldrh	r3, [r3, #12]
 8016e2a:	b29b      	uxth	r3, r3
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	f7f8 fae7 	bl	800f400 <lwip_htons>
 8016e32:	4603      	mov	r3, r0
 8016e34:	b2db      	uxtb	r3, r3
 8016e36:	f003 0303 	and.w	r3, r3, #3
 8016e3a:	2b00      	cmp	r3, #0
 8016e3c:	d001      	beq.n	8016e42 <tcp_output+0x2de>
 8016e3e:	2301      	movs	r3, #1
 8016e40:	e000      	b.n	8016e44 <tcp_output+0x2e0>
 8016e42:	2300      	movs	r3, #0
 8016e44:	4423      	add	r3, r4
 8016e46:	2b00      	cmp	r3, #0
 8016e48:	d049      	beq.n	8016ede <tcp_output+0x37a>
      seg->next = NULL;
 8016e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e4c:	2200      	movs	r2, #0
 8016e4e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016e50:	687b      	ldr	r3, [r7, #4]
 8016e52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d105      	bne.n	8016e64 <tcp_output+0x300>
        pcb->unacked = seg;
 8016e58:	687b      	ldr	r3, [r7, #4]
 8016e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016e5c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8016e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e60:	623b      	str	r3, [r7, #32]
 8016e62:	e03f      	b.n	8016ee4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e66:	68db      	ldr	r3, [r3, #12]
 8016e68:	685b      	ldr	r3, [r3, #4]
 8016e6a:	4618      	mov	r0, r3
 8016e6c:	f7f8 fadd 	bl	800f42a <lwip_htonl>
 8016e70:	4604      	mov	r4, r0
 8016e72:	6a3b      	ldr	r3, [r7, #32]
 8016e74:	68db      	ldr	r3, [r3, #12]
 8016e76:	685b      	ldr	r3, [r3, #4]
 8016e78:	4618      	mov	r0, r3
 8016e7a:	f7f8 fad6 	bl	800f42a <lwip_htonl>
 8016e7e:	4603      	mov	r3, r0
 8016e80:	1ae3      	subs	r3, r4, r3
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	da24      	bge.n	8016ed0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	3370      	adds	r3, #112	@ 0x70
 8016e8a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016e8c:	e002      	b.n	8016e94 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016e8e:	69fb      	ldr	r3, [r7, #28]
 8016e90:	681b      	ldr	r3, [r3, #0]
 8016e92:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016e94:	69fb      	ldr	r3, [r7, #28]
 8016e96:	681b      	ldr	r3, [r3, #0]
 8016e98:	2b00      	cmp	r3, #0
 8016e9a:	d011      	beq.n	8016ec0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016e9c:	69fb      	ldr	r3, [r7, #28]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	68db      	ldr	r3, [r3, #12]
 8016ea2:	685b      	ldr	r3, [r3, #4]
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	f7f8 fac0 	bl	800f42a <lwip_htonl>
 8016eaa:	4604      	mov	r4, r0
 8016eac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eae:	68db      	ldr	r3, [r3, #12]
 8016eb0:	685b      	ldr	r3, [r3, #4]
 8016eb2:	4618      	mov	r0, r3
 8016eb4:	f7f8 fab9 	bl	800f42a <lwip_htonl>
 8016eb8:	4603      	mov	r3, r0
 8016eba:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	dbe6      	blt.n	8016e8e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016ec0:	69fb      	ldr	r3, [r7, #28]
 8016ec2:	681a      	ldr	r2, [r3, #0]
 8016ec4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ec6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016ec8:	69fb      	ldr	r3, [r7, #28]
 8016eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ecc:	601a      	str	r2, [r3, #0]
 8016ece:	e009      	b.n	8016ee4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016ed0:	6a3b      	ldr	r3, [r7, #32]
 8016ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016ed4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016ed6:	6a3b      	ldr	r3, [r7, #32]
 8016ed8:	681b      	ldr	r3, [r3, #0]
 8016eda:	623b      	str	r3, [r7, #32]
 8016edc:	e002      	b.n	8016ee4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016ede:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016ee0:	f7fb ff1f 	bl	8012d22 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8016eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d012      	beq.n	8016f16 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ef2:	68db      	ldr	r3, [r3, #12]
 8016ef4:	685b      	ldr	r3, [r3, #4]
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f7f8 fa97 	bl	800f42a <lwip_htonl>
 8016efc:	4602      	mov	r2, r0
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016f02:	1ad3      	subs	r3, r2, r3
 8016f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016f06:	8912      	ldrh	r2, [r2, #8]
 8016f08:	4413      	add	r3, r2
  while (seg != NULL &&
 8016f0a:	69ba      	ldr	r2, [r7, #24]
 8016f0c:	429a      	cmp	r2, r3
 8016f0e:	f4bf aed9 	bcs.w	8016cc4 <tcp_output+0x160>
 8016f12:	e000      	b.n	8016f16 <tcp_output+0x3b2>
      break;
 8016f14:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016f1a:	2b00      	cmp	r3, #0
 8016f1c:	d108      	bne.n	8016f30 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016f1e:	687b      	ldr	r3, [r7, #4]
 8016f20:	2200      	movs	r2, #0
 8016f22:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8016f26:	e004      	b.n	8016f32 <tcp_output+0x3ce>
    goto output_done;
 8016f28:	bf00      	nop
 8016f2a:	e002      	b.n	8016f32 <tcp_output+0x3ce>
    goto output_done;
 8016f2c:	bf00      	nop
 8016f2e:	e000      	b.n	8016f32 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016f30:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	8b5b      	ldrh	r3, [r3, #26]
 8016f36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016f3a:	b29a      	uxth	r2, r3
 8016f3c:	687b      	ldr	r3, [r7, #4]
 8016f3e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016f40:	2300      	movs	r3, #0
}
 8016f42:	4618      	mov	r0, r3
 8016f44:	3728      	adds	r7, #40	@ 0x28
 8016f46:	46bd      	mov	sp, r7
 8016f48:	bdb0      	pop	{r4, r5, r7, pc}
 8016f4a:	bf00      	nop

08016f4c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	b082      	sub	sp, #8
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016f54:	687b      	ldr	r3, [r7, #4]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d106      	bne.n	8016f68 <tcp_output_segment_busy+0x1c>
 8016f5a:	4b09      	ldr	r3, [pc, #36]	@ (8016f80 <tcp_output_segment_busy+0x34>)
 8016f5c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8016f60:	4908      	ldr	r1, [pc, #32]	@ (8016f84 <tcp_output_segment_busy+0x38>)
 8016f62:	4809      	ldr	r0, [pc, #36]	@ (8016f88 <tcp_output_segment_busy+0x3c>)
 8016f64:	f007 f9ba 	bl	801e2dc <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	685b      	ldr	r3, [r3, #4]
 8016f6c:	7b9b      	ldrb	r3, [r3, #14]
 8016f6e:	2b01      	cmp	r3, #1
 8016f70:	d001      	beq.n	8016f76 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016f72:	2301      	movs	r3, #1
 8016f74:	e000      	b.n	8016f78 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016f76:	2300      	movs	r3, #0
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	3708      	adds	r7, #8
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd80      	pop	{r7, pc}
 8016f80:	08024390 	.word	0x08024390
 8016f84:	0802492c 	.word	0x0802492c
 8016f88:	080243e4 	.word	0x080243e4

08016f8c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016f8c:	b5b0      	push	{r4, r5, r7, lr}
 8016f8e:	b08c      	sub	sp, #48	@ 0x30
 8016f90:	af04      	add	r7, sp, #16
 8016f92:	60f8      	str	r0, [r7, #12]
 8016f94:	60b9      	str	r1, [r7, #8]
 8016f96:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016f98:	68fb      	ldr	r3, [r7, #12]
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d106      	bne.n	8016fac <tcp_output_segment+0x20>
 8016f9e:	4b64      	ldr	r3, [pc, #400]	@ (8017130 <tcp_output_segment+0x1a4>)
 8016fa0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8016fa4:	4963      	ldr	r1, [pc, #396]	@ (8017134 <tcp_output_segment+0x1a8>)
 8016fa6:	4864      	ldr	r0, [pc, #400]	@ (8017138 <tcp_output_segment+0x1ac>)
 8016fa8:	f007 f998 	bl	801e2dc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016fac:	68bb      	ldr	r3, [r7, #8]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d106      	bne.n	8016fc0 <tcp_output_segment+0x34>
 8016fb2:	4b5f      	ldr	r3, [pc, #380]	@ (8017130 <tcp_output_segment+0x1a4>)
 8016fb4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8016fb8:	4960      	ldr	r1, [pc, #384]	@ (801713c <tcp_output_segment+0x1b0>)
 8016fba:	485f      	ldr	r0, [pc, #380]	@ (8017138 <tcp_output_segment+0x1ac>)
 8016fbc:	f007 f98e 	bl	801e2dc <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d106      	bne.n	8016fd4 <tcp_output_segment+0x48>
 8016fc6:	4b5a      	ldr	r3, [pc, #360]	@ (8017130 <tcp_output_segment+0x1a4>)
 8016fc8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8016fcc:	495c      	ldr	r1, [pc, #368]	@ (8017140 <tcp_output_segment+0x1b4>)
 8016fce:	485a      	ldr	r0, [pc, #360]	@ (8017138 <tcp_output_segment+0x1ac>)
 8016fd0:	f007 f984 	bl	801e2dc <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016fd4:	68f8      	ldr	r0, [r7, #12]
 8016fd6:	f7ff ffb9 	bl	8016f4c <tcp_output_segment_busy>
 8016fda:	4603      	mov	r3, r0
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d001      	beq.n	8016fe4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	e0a1      	b.n	8017128 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016fe4:	68bb      	ldr	r3, [r7, #8]
 8016fe6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	68dc      	ldr	r4, [r3, #12]
 8016fec:	4610      	mov	r0, r2
 8016fee:	f7f8 fa1c 	bl	800f42a <lwip_htonl>
 8016ff2:	4603      	mov	r3, r0
 8016ff4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016ff6:	68bb      	ldr	r3, [r7, #8]
 8016ff8:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8016ffa:	68fb      	ldr	r3, [r7, #12]
 8016ffc:	68dc      	ldr	r4, [r3, #12]
 8016ffe:	4610      	mov	r0, r2
 8017000:	f7f8 f9fe 	bl	800f400 <lwip_htons>
 8017004:	4603      	mov	r3, r0
 8017006:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017008:	68bb      	ldr	r3, [r7, #8]
 801700a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801700c:	68ba      	ldr	r2, [r7, #8]
 801700e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8017010:	441a      	add	r2, r3
 8017012:	68bb      	ldr	r3, [r7, #8]
 8017014:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017016:	68fb      	ldr	r3, [r7, #12]
 8017018:	68db      	ldr	r3, [r3, #12]
 801701a:	3314      	adds	r3, #20
 801701c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	7a9b      	ldrb	r3, [r3, #10]
 8017022:	f003 0301 	and.w	r3, r3, #1
 8017026:	2b00      	cmp	r3, #0
 8017028:	d015      	beq.n	8017056 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801702a:	68bb      	ldr	r3, [r7, #8]
 801702c:	3304      	adds	r3, #4
 801702e:	461a      	mov	r2, r3
 8017030:	6879      	ldr	r1, [r7, #4]
 8017032:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8017036:	f7fc fa39 	bl	80134ac <tcp_eff_send_mss_netif>
 801703a:	4603      	mov	r3, r0
 801703c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801703e:	8b7b      	ldrh	r3, [r7, #26]
 8017040:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8017044:	4618      	mov	r0, r3
 8017046:	f7f8 f9f0 	bl	800f42a <lwip_htonl>
 801704a:	4602      	mov	r2, r0
 801704c:	69fb      	ldr	r3, [r7, #28]
 801704e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017050:	69fb      	ldr	r3, [r7, #28]
 8017052:	3304      	adds	r3, #4
 8017054:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017056:	68bb      	ldr	r3, [r7, #8]
 8017058:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 801705c:	2b00      	cmp	r3, #0
 801705e:	da02      	bge.n	8017066 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017060:	68bb      	ldr	r3, [r7, #8]
 8017062:	2200      	movs	r2, #0
 8017064:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8017066:	68bb      	ldr	r3, [r7, #8]
 8017068:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801706a:	2b00      	cmp	r3, #0
 801706c:	d10c      	bne.n	8017088 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801706e:	4b35      	ldr	r3, [pc, #212]	@ (8017144 <tcp_output_segment+0x1b8>)
 8017070:	681a      	ldr	r2, [r3, #0]
 8017072:	68bb      	ldr	r3, [r7, #8]
 8017074:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	68db      	ldr	r3, [r3, #12]
 801707a:	685b      	ldr	r3, [r3, #4]
 801707c:	4618      	mov	r0, r3
 801707e:	f7f8 f9d4 	bl	800f42a <lwip_htonl>
 8017082:	4602      	mov	r2, r0
 8017084:	68bb      	ldr	r3, [r7, #8]
 8017086:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	68da      	ldr	r2, [r3, #12]
 801708c:	68fb      	ldr	r3, [r7, #12]
 801708e:	685b      	ldr	r3, [r3, #4]
 8017090:	685b      	ldr	r3, [r3, #4]
 8017092:	1ad3      	subs	r3, r2, r3
 8017094:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017096:	68fb      	ldr	r3, [r7, #12]
 8017098:	685b      	ldr	r3, [r3, #4]
 801709a:	8959      	ldrh	r1, [r3, #10]
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	685b      	ldr	r3, [r3, #4]
 80170a0:	8b3a      	ldrh	r2, [r7, #24]
 80170a2:	1a8a      	subs	r2, r1, r2
 80170a4:	b292      	uxth	r2, r2
 80170a6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80170a8:	68fb      	ldr	r3, [r7, #12]
 80170aa:	685b      	ldr	r3, [r3, #4]
 80170ac:	8919      	ldrh	r1, [r3, #8]
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	685b      	ldr	r3, [r3, #4]
 80170b2:	8b3a      	ldrh	r2, [r7, #24]
 80170b4:	1a8a      	subs	r2, r1, r2
 80170b6:	b292      	uxth	r2, r2
 80170b8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	685b      	ldr	r3, [r3, #4]
 80170be:	68fa      	ldr	r2, [r7, #12]
 80170c0:	68d2      	ldr	r2, [r2, #12]
 80170c2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	68db      	ldr	r3, [r3, #12]
 80170c8:	2200      	movs	r2, #0
 80170ca:	741a      	strb	r2, [r3, #16]
 80170cc:	2200      	movs	r2, #0
 80170ce:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	68da      	ldr	r2, [r3, #12]
 80170d4:	68fb      	ldr	r3, [r7, #12]
 80170d6:	7a9b      	ldrb	r3, [r3, #10]
 80170d8:	f003 0301 	and.w	r3, r3, #1
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d001      	beq.n	80170e4 <tcp_output_segment+0x158>
 80170e0:	2318      	movs	r3, #24
 80170e2:	e000      	b.n	80170e6 <tcp_output_segment+0x15a>
 80170e4:	2314      	movs	r3, #20
 80170e6:	4413      	add	r3, r2
 80170e8:	69fa      	ldr	r2, [r7, #28]
 80170ea:	429a      	cmp	r2, r3
 80170ec:	d006      	beq.n	80170fc <tcp_output_segment+0x170>
 80170ee:	4b10      	ldr	r3, [pc, #64]	@ (8017130 <tcp_output_segment+0x1a4>)
 80170f0:	f240 621c 	movw	r2, #1564	@ 0x61c
 80170f4:	4914      	ldr	r1, [pc, #80]	@ (8017148 <tcp_output_segment+0x1bc>)
 80170f6:	4810      	ldr	r0, [pc, #64]	@ (8017138 <tcp_output_segment+0x1ac>)
 80170f8:	f007 f8f0 	bl	801e2dc <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	6858      	ldr	r0, [r3, #4]
 8017100:	68b9      	ldr	r1, [r7, #8]
 8017102:	68bb      	ldr	r3, [r7, #8]
 8017104:	1d1c      	adds	r4, r3, #4
 8017106:	68bb      	ldr	r3, [r7, #8]
 8017108:	7add      	ldrb	r5, [r3, #11]
 801710a:	68bb      	ldr	r3, [r7, #8]
 801710c:	7a9b      	ldrb	r3, [r3, #10]
 801710e:	687a      	ldr	r2, [r7, #4]
 8017110:	9202      	str	r2, [sp, #8]
 8017112:	2206      	movs	r2, #6
 8017114:	9201      	str	r2, [sp, #4]
 8017116:	9300      	str	r3, [sp, #0]
 8017118:	462b      	mov	r3, r5
 801711a:	4622      	mov	r2, r4
 801711c:	f004 fd28 	bl	801bb70 <ip4_output_if>
 8017120:	4603      	mov	r3, r0
 8017122:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017124:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017128:	4618      	mov	r0, r3
 801712a:	3720      	adds	r7, #32
 801712c:	46bd      	mov	sp, r7
 801712e:	bdb0      	pop	{r4, r5, r7, pc}
 8017130:	08024390 	.word	0x08024390
 8017134:	08024954 	.word	0x08024954
 8017138:	080243e4 	.word	0x080243e4
 801713c:	08024974 	.word	0x08024974
 8017140:	08024994 	.word	0x08024994
 8017144:	20012670 	.word	0x20012670
 8017148:	080249b8 	.word	0x080249b8

0801714c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801714c:	b5b0      	push	{r4, r5, r7, lr}
 801714e:	b084      	sub	sp, #16
 8017150:	af00      	add	r7, sp, #0
 8017152:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d106      	bne.n	8017168 <tcp_rexmit_rto_prepare+0x1c>
 801715a:	4b31      	ldr	r3, [pc, #196]	@ (8017220 <tcp_rexmit_rto_prepare+0xd4>)
 801715c:	f240 6263 	movw	r2, #1635	@ 0x663
 8017160:	4930      	ldr	r1, [pc, #192]	@ (8017224 <tcp_rexmit_rto_prepare+0xd8>)
 8017162:	4831      	ldr	r0, [pc, #196]	@ (8017228 <tcp_rexmit_rto_prepare+0xdc>)
 8017164:	f007 f8ba 	bl	801e2dc <iprintf>

  if (pcb->unacked == NULL) {
 8017168:	687b      	ldr	r3, [r7, #4]
 801716a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801716c:	2b00      	cmp	r3, #0
 801716e:	d102      	bne.n	8017176 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017170:	f06f 0305 	mvn.w	r3, #5
 8017174:	e050      	b.n	8017218 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801717a:	60fb      	str	r3, [r7, #12]
 801717c:	e00b      	b.n	8017196 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801717e:	68f8      	ldr	r0, [r7, #12]
 8017180:	f7ff fee4 	bl	8016f4c <tcp_output_segment_busy>
 8017184:	4603      	mov	r3, r0
 8017186:	2b00      	cmp	r3, #0
 8017188:	d002      	beq.n	8017190 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801718a:	f06f 0305 	mvn.w	r3, #5
 801718e:	e043      	b.n	8017218 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017190:	68fb      	ldr	r3, [r7, #12]
 8017192:	681b      	ldr	r3, [r3, #0]
 8017194:	60fb      	str	r3, [r7, #12]
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d1ef      	bne.n	801717e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801719e:	68f8      	ldr	r0, [r7, #12]
 80171a0:	f7ff fed4 	bl	8016f4c <tcp_output_segment_busy>
 80171a4:	4603      	mov	r3, r0
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d002      	beq.n	80171b0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80171aa:	f06f 0305 	mvn.w	r3, #5
 80171ae:	e033      	b.n	8017218 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	2200      	movs	r2, #0
 80171c4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80171c6:	687b      	ldr	r3, [r7, #4]
 80171c8:	8b5b      	ldrh	r3, [r3, #26]
 80171ca:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80171ce:	b29a      	uxth	r2, r3
 80171d0:	687b      	ldr	r3, [r7, #4]
 80171d2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80171d4:	68fb      	ldr	r3, [r7, #12]
 80171d6:	68db      	ldr	r3, [r3, #12]
 80171d8:	685b      	ldr	r3, [r3, #4]
 80171da:	4618      	mov	r0, r3
 80171dc:	f7f8 f925 	bl	800f42a <lwip_htonl>
 80171e0:	4604      	mov	r4, r0
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	891b      	ldrh	r3, [r3, #8]
 80171e6:	461d      	mov	r5, r3
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	68db      	ldr	r3, [r3, #12]
 80171ec:	899b      	ldrh	r3, [r3, #12]
 80171ee:	b29b      	uxth	r3, r3
 80171f0:	4618      	mov	r0, r3
 80171f2:	f7f8 f905 	bl	800f400 <lwip_htons>
 80171f6:	4603      	mov	r3, r0
 80171f8:	b2db      	uxtb	r3, r3
 80171fa:	f003 0303 	and.w	r3, r3, #3
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d001      	beq.n	8017206 <tcp_rexmit_rto_prepare+0xba>
 8017202:	2301      	movs	r3, #1
 8017204:	e000      	b.n	8017208 <tcp_rexmit_rto_prepare+0xbc>
 8017206:	2300      	movs	r3, #0
 8017208:	442b      	add	r3, r5
 801720a:	18e2      	adds	r2, r4, r3
 801720c:	687b      	ldr	r3, [r7, #4]
 801720e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	2200      	movs	r2, #0
 8017214:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8017216:	2300      	movs	r3, #0
}
 8017218:	4618      	mov	r0, r3
 801721a:	3710      	adds	r7, #16
 801721c:	46bd      	mov	sp, r7
 801721e:	bdb0      	pop	{r4, r5, r7, pc}
 8017220:	08024390 	.word	0x08024390
 8017224:	080249cc 	.word	0x080249cc
 8017228:	080243e4 	.word	0x080243e4

0801722c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801722c:	b580      	push	{r7, lr}
 801722e:	b082      	sub	sp, #8
 8017230:	af00      	add	r7, sp, #0
 8017232:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	2b00      	cmp	r3, #0
 8017238:	d106      	bne.n	8017248 <tcp_rexmit_rto_commit+0x1c>
 801723a:	4b0d      	ldr	r3, [pc, #52]	@ (8017270 <tcp_rexmit_rto_commit+0x44>)
 801723c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8017240:	490c      	ldr	r1, [pc, #48]	@ (8017274 <tcp_rexmit_rto_commit+0x48>)
 8017242:	480d      	ldr	r0, [pc, #52]	@ (8017278 <tcp_rexmit_rto_commit+0x4c>)
 8017244:	f007 f84a 	bl	801e2dc <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801724e:	2bff      	cmp	r3, #255	@ 0xff
 8017250:	d007      	beq.n	8017262 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017258:	3301      	adds	r3, #1
 801725a:	b2da      	uxtb	r2, r3
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017262:	6878      	ldr	r0, [r7, #4]
 8017264:	f7ff fc7e 	bl	8016b64 <tcp_output>
}
 8017268:	bf00      	nop
 801726a:	3708      	adds	r7, #8
 801726c:	46bd      	mov	sp, r7
 801726e:	bd80      	pop	{r7, pc}
 8017270:	08024390 	.word	0x08024390
 8017274:	080249f0 	.word	0x080249f0
 8017278:	080243e4 	.word	0x080243e4

0801727c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801727c:	b580      	push	{r7, lr}
 801727e:	b082      	sub	sp, #8
 8017280:	af00      	add	r7, sp, #0
 8017282:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017284:	687b      	ldr	r3, [r7, #4]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d106      	bne.n	8017298 <tcp_rexmit_rto+0x1c>
 801728a:	4b0a      	ldr	r3, [pc, #40]	@ (80172b4 <tcp_rexmit_rto+0x38>)
 801728c:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8017290:	4909      	ldr	r1, [pc, #36]	@ (80172b8 <tcp_rexmit_rto+0x3c>)
 8017292:	480a      	ldr	r0, [pc, #40]	@ (80172bc <tcp_rexmit_rto+0x40>)
 8017294:	f007 f822 	bl	801e2dc <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017298:	6878      	ldr	r0, [r7, #4]
 801729a:	f7ff ff57 	bl	801714c <tcp_rexmit_rto_prepare>
 801729e:	4603      	mov	r3, r0
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d102      	bne.n	80172aa <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80172a4:	6878      	ldr	r0, [r7, #4]
 80172a6:	f7ff ffc1 	bl	801722c <tcp_rexmit_rto_commit>
  }
}
 80172aa:	bf00      	nop
 80172ac:	3708      	adds	r7, #8
 80172ae:	46bd      	mov	sp, r7
 80172b0:	bd80      	pop	{r7, pc}
 80172b2:	bf00      	nop
 80172b4:	08024390 	.word	0x08024390
 80172b8:	08024a14 	.word	0x08024a14
 80172bc:	080243e4 	.word	0x080243e4

080172c0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80172c0:	b590      	push	{r4, r7, lr}
 80172c2:	b085      	sub	sp, #20
 80172c4:	af00      	add	r7, sp, #0
 80172c6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80172c8:	687b      	ldr	r3, [r7, #4]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d106      	bne.n	80172dc <tcp_rexmit+0x1c>
 80172ce:	4b2f      	ldr	r3, [pc, #188]	@ (801738c <tcp_rexmit+0xcc>)
 80172d0:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80172d4:	492e      	ldr	r1, [pc, #184]	@ (8017390 <tcp_rexmit+0xd0>)
 80172d6:	482f      	ldr	r0, [pc, #188]	@ (8017394 <tcp_rexmit+0xd4>)
 80172d8:	f007 f800 	bl	801e2dc <iprintf>

  if (pcb->unacked == NULL) {
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d102      	bne.n	80172ea <tcp_rexmit+0x2a>
    return ERR_VAL;
 80172e4:	f06f 0305 	mvn.w	r3, #5
 80172e8:	e04c      	b.n	8017384 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80172ea:	687b      	ldr	r3, [r7, #4]
 80172ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80172ee:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80172f0:	68b8      	ldr	r0, [r7, #8]
 80172f2:	f7ff fe2b 	bl	8016f4c <tcp_output_segment_busy>
 80172f6:	4603      	mov	r3, r0
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d002      	beq.n	8017302 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80172fc:	f06f 0305 	mvn.w	r3, #5
 8017300:	e040      	b.n	8017384 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8017302:	68bb      	ldr	r3, [r7, #8]
 8017304:	681a      	ldr	r2, [r3, #0]
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	336c      	adds	r3, #108	@ 0x6c
 801730e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017310:	e002      	b.n	8017318 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017312:	68fb      	ldr	r3, [r7, #12]
 8017314:	681b      	ldr	r3, [r3, #0]
 8017316:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d011      	beq.n	8017344 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017320:	68fb      	ldr	r3, [r7, #12]
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	68db      	ldr	r3, [r3, #12]
 8017326:	685b      	ldr	r3, [r3, #4]
 8017328:	4618      	mov	r0, r3
 801732a:	f7f8 f87e 	bl	800f42a <lwip_htonl>
 801732e:	4604      	mov	r4, r0
 8017330:	68bb      	ldr	r3, [r7, #8]
 8017332:	68db      	ldr	r3, [r3, #12]
 8017334:	685b      	ldr	r3, [r3, #4]
 8017336:	4618      	mov	r0, r3
 8017338:	f7f8 f877 	bl	800f42a <lwip_htonl>
 801733c:	4603      	mov	r3, r0
 801733e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017340:	2b00      	cmp	r3, #0
 8017342:	dbe6      	blt.n	8017312 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	681a      	ldr	r2, [r3, #0]
 8017348:	68bb      	ldr	r3, [r7, #8]
 801734a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	68ba      	ldr	r2, [r7, #8]
 8017350:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017352:	68bb      	ldr	r3, [r7, #8]
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	2b00      	cmp	r3, #0
 8017358:	d103      	bne.n	8017362 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	2200      	movs	r2, #0
 801735e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017368:	2bff      	cmp	r3, #255	@ 0xff
 801736a:	d007      	beq.n	801737c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017372:	3301      	adds	r3, #1
 8017374:	b2da      	uxtb	r2, r3
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	2200      	movs	r2, #0
 8017380:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017382:	2300      	movs	r3, #0
}
 8017384:	4618      	mov	r0, r3
 8017386:	3714      	adds	r7, #20
 8017388:	46bd      	mov	sp, r7
 801738a:	bd90      	pop	{r4, r7, pc}
 801738c:	08024390 	.word	0x08024390
 8017390:	08024a30 	.word	0x08024a30
 8017394:	080243e4 	.word	0x080243e4

08017398 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017398:	b580      	push	{r7, lr}
 801739a:	b082      	sub	sp, #8
 801739c:	af00      	add	r7, sp, #0
 801739e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	2b00      	cmp	r3, #0
 80173a4:	d106      	bne.n	80173b4 <tcp_rexmit_fast+0x1c>
 80173a6:	4b2a      	ldr	r3, [pc, #168]	@ (8017450 <tcp_rexmit_fast+0xb8>)
 80173a8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 80173ac:	4929      	ldr	r1, [pc, #164]	@ (8017454 <tcp_rexmit_fast+0xbc>)
 80173ae:	482a      	ldr	r0, [pc, #168]	@ (8017458 <tcp_rexmit_fast+0xc0>)
 80173b0:	f006 ff94 	bl	801e2dc <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80173b8:	2b00      	cmp	r3, #0
 80173ba:	d044      	beq.n	8017446 <tcp_rexmit_fast+0xae>
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	8b5b      	ldrh	r3, [r3, #26]
 80173c0:	f003 0304 	and.w	r3, r3, #4
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d13e      	bne.n	8017446 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80173c8:	6878      	ldr	r0, [r7, #4]
 80173ca:	f7ff ff79 	bl	80172c0 <tcp_rexmit>
 80173ce:	4603      	mov	r3, r0
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d138      	bne.n	8017446 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 80173e0:	4293      	cmp	r3, r2
 80173e2:	bf28      	it	cs
 80173e4:	4613      	movcs	r3, r2
 80173e6:	b29b      	uxth	r3, r3
 80173e8:	0fda      	lsrs	r2, r3, #31
 80173ea:	4413      	add	r3, r2
 80173ec:	105b      	asrs	r3, r3, #1
 80173ee:	b29a      	uxth	r2, r3
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 80173fc:	461a      	mov	r2, r3
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017402:	005b      	lsls	r3, r3, #1
 8017404:	429a      	cmp	r2, r3
 8017406:	d206      	bcs.n	8017416 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801740c:	005b      	lsls	r3, r3, #1
 801740e:	b29a      	uxth	r2, r3
 8017410:	687b      	ldr	r3, [r7, #4]
 8017412:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017416:	687b      	ldr	r3, [r7, #4]
 8017418:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017420:	4619      	mov	r1, r3
 8017422:	0049      	lsls	r1, r1, #1
 8017424:	440b      	add	r3, r1
 8017426:	b29b      	uxth	r3, r3
 8017428:	4413      	add	r3, r2
 801742a:	b29a      	uxth	r2, r3
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017432:	687b      	ldr	r3, [r7, #4]
 8017434:	8b5b      	ldrh	r3, [r3, #26]
 8017436:	f043 0304 	orr.w	r3, r3, #4
 801743a:	b29a      	uxth	r2, r3
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017440:	687b      	ldr	r3, [r7, #4]
 8017442:	2200      	movs	r2, #0
 8017444:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8017446:	bf00      	nop
 8017448:	3708      	adds	r7, #8
 801744a:	46bd      	mov	sp, r7
 801744c:	bd80      	pop	{r7, pc}
 801744e:	bf00      	nop
 8017450:	08024390 	.word	0x08024390
 8017454:	08024a48 	.word	0x08024a48
 8017458:	080243e4 	.word	0x080243e4

0801745c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801745c:	b580      	push	{r7, lr}
 801745e:	b086      	sub	sp, #24
 8017460:	af00      	add	r7, sp, #0
 8017462:	60f8      	str	r0, [r7, #12]
 8017464:	607b      	str	r3, [r7, #4]
 8017466:	460b      	mov	r3, r1
 8017468:	817b      	strh	r3, [r7, #10]
 801746a:	4613      	mov	r3, r2
 801746c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801746e:	897a      	ldrh	r2, [r7, #10]
 8017470:	893b      	ldrh	r3, [r7, #8]
 8017472:	4413      	add	r3, r2
 8017474:	b29b      	uxth	r3, r3
 8017476:	3314      	adds	r3, #20
 8017478:	b29b      	uxth	r3, r3
 801747a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801747e:	4619      	mov	r1, r3
 8017480:	2022      	movs	r0, #34	@ 0x22
 8017482:	f7f9 fbc5 	bl	8010c10 <pbuf_alloc>
 8017486:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017488:	697b      	ldr	r3, [r7, #20]
 801748a:	2b00      	cmp	r3, #0
 801748c:	d04d      	beq.n	801752a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801748e:	897b      	ldrh	r3, [r7, #10]
 8017490:	3313      	adds	r3, #19
 8017492:	697a      	ldr	r2, [r7, #20]
 8017494:	8952      	ldrh	r2, [r2, #10]
 8017496:	4293      	cmp	r3, r2
 8017498:	db06      	blt.n	80174a8 <tcp_output_alloc_header_common+0x4c>
 801749a:	4b26      	ldr	r3, [pc, #152]	@ (8017534 <tcp_output_alloc_header_common+0xd8>)
 801749c:	f240 7223 	movw	r2, #1827	@ 0x723
 80174a0:	4925      	ldr	r1, [pc, #148]	@ (8017538 <tcp_output_alloc_header_common+0xdc>)
 80174a2:	4826      	ldr	r0, [pc, #152]	@ (801753c <tcp_output_alloc_header_common+0xe0>)
 80174a4:	f006 ff1a 	bl	801e2dc <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80174a8:	697b      	ldr	r3, [r7, #20]
 80174aa:	685b      	ldr	r3, [r3, #4]
 80174ac:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80174ae:	8c3b      	ldrh	r3, [r7, #32]
 80174b0:	4618      	mov	r0, r3
 80174b2:	f7f7 ffa5 	bl	800f400 <lwip_htons>
 80174b6:	4603      	mov	r3, r0
 80174b8:	461a      	mov	r2, r3
 80174ba:	693b      	ldr	r3, [r7, #16]
 80174bc:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80174be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80174c0:	4618      	mov	r0, r3
 80174c2:	f7f7 ff9d 	bl	800f400 <lwip_htons>
 80174c6:	4603      	mov	r3, r0
 80174c8:	461a      	mov	r2, r3
 80174ca:	693b      	ldr	r3, [r7, #16]
 80174cc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80174ce:	693b      	ldr	r3, [r7, #16]
 80174d0:	687a      	ldr	r2, [r7, #4]
 80174d2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80174d4:	68f8      	ldr	r0, [r7, #12]
 80174d6:	f7f7 ffa8 	bl	800f42a <lwip_htonl>
 80174da:	4602      	mov	r2, r0
 80174dc:	693b      	ldr	r3, [r7, #16]
 80174de:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80174e0:	897b      	ldrh	r3, [r7, #10]
 80174e2:	089b      	lsrs	r3, r3, #2
 80174e4:	b29b      	uxth	r3, r3
 80174e6:	3305      	adds	r3, #5
 80174e8:	b29b      	uxth	r3, r3
 80174ea:	031b      	lsls	r3, r3, #12
 80174ec:	b29a      	uxth	r2, r3
 80174ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80174f2:	b29b      	uxth	r3, r3
 80174f4:	4313      	orrs	r3, r2
 80174f6:	b29b      	uxth	r3, r3
 80174f8:	4618      	mov	r0, r3
 80174fa:	f7f7 ff81 	bl	800f400 <lwip_htons>
 80174fe:	4603      	mov	r3, r0
 8017500:	461a      	mov	r2, r3
 8017502:	693b      	ldr	r3, [r7, #16]
 8017504:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017506:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017508:	4618      	mov	r0, r3
 801750a:	f7f7 ff79 	bl	800f400 <lwip_htons>
 801750e:	4603      	mov	r3, r0
 8017510:	461a      	mov	r2, r3
 8017512:	693b      	ldr	r3, [r7, #16]
 8017514:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017516:	693b      	ldr	r3, [r7, #16]
 8017518:	2200      	movs	r2, #0
 801751a:	741a      	strb	r2, [r3, #16]
 801751c:	2200      	movs	r2, #0
 801751e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017520:	693b      	ldr	r3, [r7, #16]
 8017522:	2200      	movs	r2, #0
 8017524:	749a      	strb	r2, [r3, #18]
 8017526:	2200      	movs	r2, #0
 8017528:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801752a:	697b      	ldr	r3, [r7, #20]
}
 801752c:	4618      	mov	r0, r3
 801752e:	3718      	adds	r7, #24
 8017530:	46bd      	mov	sp, r7
 8017532:	bd80      	pop	{r7, pc}
 8017534:	08024390 	.word	0x08024390
 8017538:	08024a68 	.word	0x08024a68
 801753c:	080243e4 	.word	0x080243e4

08017540 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017540:	b5b0      	push	{r4, r5, r7, lr}
 8017542:	b08a      	sub	sp, #40	@ 0x28
 8017544:	af04      	add	r7, sp, #16
 8017546:	60f8      	str	r0, [r7, #12]
 8017548:	607b      	str	r3, [r7, #4]
 801754a:	460b      	mov	r3, r1
 801754c:	817b      	strh	r3, [r7, #10]
 801754e:	4613      	mov	r3, r2
 8017550:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017552:	68fb      	ldr	r3, [r7, #12]
 8017554:	2b00      	cmp	r3, #0
 8017556:	d106      	bne.n	8017566 <tcp_output_alloc_header+0x26>
 8017558:	4b15      	ldr	r3, [pc, #84]	@ (80175b0 <tcp_output_alloc_header+0x70>)
 801755a:	f240 7242 	movw	r2, #1858	@ 0x742
 801755e:	4915      	ldr	r1, [pc, #84]	@ (80175b4 <tcp_output_alloc_header+0x74>)
 8017560:	4815      	ldr	r0, [pc, #84]	@ (80175b8 <tcp_output_alloc_header+0x78>)
 8017562:	f006 febb 	bl	801e2dc <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017566:	68fb      	ldr	r3, [r7, #12]
 8017568:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801756a:	68fb      	ldr	r3, [r7, #12]
 801756c:	8adb      	ldrh	r3, [r3, #22]
 801756e:	68fa      	ldr	r2, [r7, #12]
 8017570:	8b12      	ldrh	r2, [r2, #24]
 8017572:	68f9      	ldr	r1, [r7, #12]
 8017574:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8017576:	893d      	ldrh	r5, [r7, #8]
 8017578:	897c      	ldrh	r4, [r7, #10]
 801757a:	9103      	str	r1, [sp, #12]
 801757c:	2110      	movs	r1, #16
 801757e:	9102      	str	r1, [sp, #8]
 8017580:	9201      	str	r2, [sp, #4]
 8017582:	9300      	str	r3, [sp, #0]
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	462a      	mov	r2, r5
 8017588:	4621      	mov	r1, r4
 801758a:	f7ff ff67 	bl	801745c <tcp_output_alloc_header_common>
 801758e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017590:	697b      	ldr	r3, [r7, #20]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d006      	beq.n	80175a4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017596:	68fb      	ldr	r3, [r7, #12]
 8017598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801759a:	68fa      	ldr	r2, [r7, #12]
 801759c:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 801759e:	441a      	add	r2, r3
 80175a0:	68fb      	ldr	r3, [r7, #12]
 80175a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80175a4:	697b      	ldr	r3, [r7, #20]
}
 80175a6:	4618      	mov	r0, r3
 80175a8:	3718      	adds	r7, #24
 80175aa:	46bd      	mov	sp, r7
 80175ac:	bdb0      	pop	{r4, r5, r7, pc}
 80175ae:	bf00      	nop
 80175b0:	08024390 	.word	0x08024390
 80175b4:	08024a98 	.word	0x08024a98
 80175b8:	080243e4 	.word	0x080243e4

080175bc <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80175bc:	b580      	push	{r7, lr}
 80175be:	b088      	sub	sp, #32
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	60f8      	str	r0, [r7, #12]
 80175c4:	60b9      	str	r1, [r7, #8]
 80175c6:	4611      	mov	r1, r2
 80175c8:	461a      	mov	r2, r3
 80175ca:	460b      	mov	r3, r1
 80175cc:	71fb      	strb	r3, [r7, #7]
 80175ce:	4613      	mov	r3, r2
 80175d0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80175d2:	2300      	movs	r3, #0
 80175d4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80175d6:	68bb      	ldr	r3, [r7, #8]
 80175d8:	2b00      	cmp	r3, #0
 80175da:	d106      	bne.n	80175ea <tcp_output_fill_options+0x2e>
 80175dc:	4b12      	ldr	r3, [pc, #72]	@ (8017628 <tcp_output_fill_options+0x6c>)
 80175de:	f240 7256 	movw	r2, #1878	@ 0x756
 80175e2:	4912      	ldr	r1, [pc, #72]	@ (801762c <tcp_output_fill_options+0x70>)
 80175e4:	4812      	ldr	r0, [pc, #72]	@ (8017630 <tcp_output_fill_options+0x74>)
 80175e6:	f006 fe79 	bl	801e2dc <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80175ea:	68bb      	ldr	r3, [r7, #8]
 80175ec:	685b      	ldr	r3, [r3, #4]
 80175ee:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80175f0:	69bb      	ldr	r3, [r7, #24]
 80175f2:	3314      	adds	r3, #20
 80175f4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80175f6:	8bfb      	ldrh	r3, [r7, #30]
 80175f8:	009b      	lsls	r3, r3, #2
 80175fa:	461a      	mov	r2, r3
 80175fc:	79fb      	ldrb	r3, [r7, #7]
 80175fe:	009b      	lsls	r3, r3, #2
 8017600:	f003 0304 	and.w	r3, r3, #4
 8017604:	4413      	add	r3, r2
 8017606:	3314      	adds	r3, #20
 8017608:	69ba      	ldr	r2, [r7, #24]
 801760a:	4413      	add	r3, r2
 801760c:	697a      	ldr	r2, [r7, #20]
 801760e:	429a      	cmp	r2, r3
 8017610:	d006      	beq.n	8017620 <tcp_output_fill_options+0x64>
 8017612:	4b05      	ldr	r3, [pc, #20]	@ (8017628 <tcp_output_fill_options+0x6c>)
 8017614:	f240 7275 	movw	r2, #1909	@ 0x775
 8017618:	4906      	ldr	r1, [pc, #24]	@ (8017634 <tcp_output_fill_options+0x78>)
 801761a:	4805      	ldr	r0, [pc, #20]	@ (8017630 <tcp_output_fill_options+0x74>)
 801761c:	f006 fe5e 	bl	801e2dc <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017620:	bf00      	nop
 8017622:	3720      	adds	r7, #32
 8017624:	46bd      	mov	sp, r7
 8017626:	bd80      	pop	{r7, pc}
 8017628:	08024390 	.word	0x08024390
 801762c:	08024ac0 	.word	0x08024ac0
 8017630:	080243e4 	.word	0x080243e4
 8017634:	080249b8 	.word	0x080249b8

08017638 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017638:	b580      	push	{r7, lr}
 801763a:	b08a      	sub	sp, #40	@ 0x28
 801763c:	af04      	add	r7, sp, #16
 801763e:	60f8      	str	r0, [r7, #12]
 8017640:	60b9      	str	r1, [r7, #8]
 8017642:	607a      	str	r2, [r7, #4]
 8017644:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017646:	68bb      	ldr	r3, [r7, #8]
 8017648:	2b00      	cmp	r3, #0
 801764a:	d106      	bne.n	801765a <tcp_output_control_segment+0x22>
 801764c:	4b1c      	ldr	r3, [pc, #112]	@ (80176c0 <tcp_output_control_segment+0x88>)
 801764e:	f240 7287 	movw	r2, #1927	@ 0x787
 8017652:	491c      	ldr	r1, [pc, #112]	@ (80176c4 <tcp_output_control_segment+0x8c>)
 8017654:	481c      	ldr	r0, [pc, #112]	@ (80176c8 <tcp_output_control_segment+0x90>)
 8017656:	f006 fe41 	bl	801e2dc <iprintf>

  netif = tcp_route(pcb, src, dst);
 801765a:	683a      	ldr	r2, [r7, #0]
 801765c:	6879      	ldr	r1, [r7, #4]
 801765e:	68f8      	ldr	r0, [r7, #12]
 8017660:	f7fe faea 	bl	8015c38 <tcp_route>
 8017664:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017666:	693b      	ldr	r3, [r7, #16]
 8017668:	2b00      	cmp	r3, #0
 801766a:	d102      	bne.n	8017672 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801766c:	23fc      	movs	r3, #252	@ 0xfc
 801766e:	75fb      	strb	r3, [r7, #23]
 8017670:	e01c      	b.n	80176ac <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	2b00      	cmp	r3, #0
 8017676:	d006      	beq.n	8017686 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017678:	68fb      	ldr	r3, [r7, #12]
 801767a:	7adb      	ldrb	r3, [r3, #11]
 801767c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801767e:	68fb      	ldr	r3, [r7, #12]
 8017680:	7a9b      	ldrb	r3, [r3, #10]
 8017682:	757b      	strb	r3, [r7, #21]
 8017684:	e003      	b.n	801768e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017686:	23ff      	movs	r3, #255	@ 0xff
 8017688:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801768a:	2300      	movs	r3, #0
 801768c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801768e:	7dba      	ldrb	r2, [r7, #22]
 8017690:	693b      	ldr	r3, [r7, #16]
 8017692:	9302      	str	r3, [sp, #8]
 8017694:	2306      	movs	r3, #6
 8017696:	9301      	str	r3, [sp, #4]
 8017698:	7d7b      	ldrb	r3, [r7, #21]
 801769a:	9300      	str	r3, [sp, #0]
 801769c:	4613      	mov	r3, r2
 801769e:	683a      	ldr	r2, [r7, #0]
 80176a0:	6879      	ldr	r1, [r7, #4]
 80176a2:	68b8      	ldr	r0, [r7, #8]
 80176a4:	f004 fa64 	bl	801bb70 <ip4_output_if>
 80176a8:	4603      	mov	r3, r0
 80176aa:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80176ac:	68b8      	ldr	r0, [r7, #8]
 80176ae:	f7f9 fd93 	bl	80111d8 <pbuf_free>
  return err;
 80176b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80176b6:	4618      	mov	r0, r3
 80176b8:	3718      	adds	r7, #24
 80176ba:	46bd      	mov	sp, r7
 80176bc:	bd80      	pop	{r7, pc}
 80176be:	bf00      	nop
 80176c0:	08024390 	.word	0x08024390
 80176c4:	08024ae8 	.word	0x08024ae8
 80176c8:	080243e4 	.word	0x080243e4

080176cc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80176cc:	b590      	push	{r4, r7, lr}
 80176ce:	b08b      	sub	sp, #44	@ 0x2c
 80176d0:	af04      	add	r7, sp, #16
 80176d2:	60f8      	str	r0, [r7, #12]
 80176d4:	60b9      	str	r1, [r7, #8]
 80176d6:	607a      	str	r2, [r7, #4]
 80176d8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80176da:	683b      	ldr	r3, [r7, #0]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d106      	bne.n	80176ee <tcp_rst+0x22>
 80176e0:	4b1f      	ldr	r3, [pc, #124]	@ (8017760 <tcp_rst+0x94>)
 80176e2:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 80176e6:	491f      	ldr	r1, [pc, #124]	@ (8017764 <tcp_rst+0x98>)
 80176e8:	481f      	ldr	r0, [pc, #124]	@ (8017768 <tcp_rst+0x9c>)
 80176ea:	f006 fdf7 	bl	801e2dc <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80176ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80176f0:	2b00      	cmp	r3, #0
 80176f2:	d106      	bne.n	8017702 <tcp_rst+0x36>
 80176f4:	4b1a      	ldr	r3, [pc, #104]	@ (8017760 <tcp_rst+0x94>)
 80176f6:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 80176fa:	491c      	ldr	r1, [pc, #112]	@ (801776c <tcp_rst+0xa0>)
 80176fc:	481a      	ldr	r0, [pc, #104]	@ (8017768 <tcp_rst+0x9c>)
 80176fe:	f006 fded 	bl	801e2dc <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017702:	2300      	movs	r3, #0
 8017704:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017706:	f246 0308 	movw	r3, #24584	@ 0x6008
 801770a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801770c:	7dfb      	ldrb	r3, [r7, #23]
 801770e:	b29c      	uxth	r4, r3
 8017710:	68b8      	ldr	r0, [r7, #8]
 8017712:	f7f7 fe8a 	bl	800f42a <lwip_htonl>
 8017716:	4602      	mov	r2, r0
 8017718:	8abb      	ldrh	r3, [r7, #20]
 801771a:	9303      	str	r3, [sp, #12]
 801771c:	2314      	movs	r3, #20
 801771e:	9302      	str	r3, [sp, #8]
 8017720:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017722:	9301      	str	r3, [sp, #4]
 8017724:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017726:	9300      	str	r3, [sp, #0]
 8017728:	4613      	mov	r3, r2
 801772a:	2200      	movs	r2, #0
 801772c:	4621      	mov	r1, r4
 801772e:	6878      	ldr	r0, [r7, #4]
 8017730:	f7ff fe94 	bl	801745c <tcp_output_alloc_header_common>
 8017734:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017736:	693b      	ldr	r3, [r7, #16]
 8017738:	2b00      	cmp	r3, #0
 801773a:	d00c      	beq.n	8017756 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801773c:	7dfb      	ldrb	r3, [r7, #23]
 801773e:	2200      	movs	r2, #0
 8017740:	6939      	ldr	r1, [r7, #16]
 8017742:	68f8      	ldr	r0, [r7, #12]
 8017744:	f7ff ff3a 	bl	80175bc <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801774a:	683a      	ldr	r2, [r7, #0]
 801774c:	6939      	ldr	r1, [r7, #16]
 801774e:	68f8      	ldr	r0, [r7, #12]
 8017750:	f7ff ff72 	bl	8017638 <tcp_output_control_segment>
 8017754:	e000      	b.n	8017758 <tcp_rst+0x8c>
    return;
 8017756:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017758:	371c      	adds	r7, #28
 801775a:	46bd      	mov	sp, r7
 801775c:	bd90      	pop	{r4, r7, pc}
 801775e:	bf00      	nop
 8017760:	08024390 	.word	0x08024390
 8017764:	08024b14 	.word	0x08024b14
 8017768:	080243e4 	.word	0x080243e4
 801776c:	08024b30 	.word	0x08024b30

08017770 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017770:	b590      	push	{r4, r7, lr}
 8017772:	b087      	sub	sp, #28
 8017774:	af00      	add	r7, sp, #0
 8017776:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017778:	2300      	movs	r3, #0
 801777a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801777c:	2300      	movs	r3, #0
 801777e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	2b00      	cmp	r3, #0
 8017784:	d106      	bne.n	8017794 <tcp_send_empty_ack+0x24>
 8017786:	4b28      	ldr	r3, [pc, #160]	@ (8017828 <tcp_send_empty_ack+0xb8>)
 8017788:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 801778c:	4927      	ldr	r1, [pc, #156]	@ (801782c <tcp_send_empty_ack+0xbc>)
 801778e:	4828      	ldr	r0, [pc, #160]	@ (8017830 <tcp_send_empty_ack+0xc0>)
 8017790:	f006 fda4 	bl	801e2dc <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017794:	7dfb      	ldrb	r3, [r7, #23]
 8017796:	009b      	lsls	r3, r3, #2
 8017798:	b2db      	uxtb	r3, r3
 801779a:	f003 0304 	and.w	r3, r3, #4
 801779e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80177a0:	7d7b      	ldrb	r3, [r7, #21]
 80177a2:	b29c      	uxth	r4, r3
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80177a8:	4618      	mov	r0, r3
 80177aa:	f7f7 fe3e 	bl	800f42a <lwip_htonl>
 80177ae:	4603      	mov	r3, r0
 80177b0:	2200      	movs	r2, #0
 80177b2:	4621      	mov	r1, r4
 80177b4:	6878      	ldr	r0, [r7, #4]
 80177b6:	f7ff fec3 	bl	8017540 <tcp_output_alloc_header>
 80177ba:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80177bc:	693b      	ldr	r3, [r7, #16]
 80177be:	2b00      	cmp	r3, #0
 80177c0:	d109      	bne.n	80177d6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80177c2:	687b      	ldr	r3, [r7, #4]
 80177c4:	8b5b      	ldrh	r3, [r3, #26]
 80177c6:	f043 0303 	orr.w	r3, r3, #3
 80177ca:	b29a      	uxth	r2, r3
 80177cc:	687b      	ldr	r3, [r7, #4]
 80177ce:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80177d0:	f06f 0301 	mvn.w	r3, #1
 80177d4:	e023      	b.n	801781e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80177d6:	7dbb      	ldrb	r3, [r7, #22]
 80177d8:	7dfa      	ldrb	r2, [r7, #23]
 80177da:	6939      	ldr	r1, [r7, #16]
 80177dc:	6878      	ldr	r0, [r7, #4]
 80177de:	f7ff feed 	bl	80175bc <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80177e2:	687a      	ldr	r2, [r7, #4]
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	3304      	adds	r3, #4
 80177e8:	6939      	ldr	r1, [r7, #16]
 80177ea:	6878      	ldr	r0, [r7, #4]
 80177ec:	f7ff ff24 	bl	8017638 <tcp_output_control_segment>
 80177f0:	4603      	mov	r3, r0
 80177f2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80177f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d007      	beq.n	801780c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	8b5b      	ldrh	r3, [r3, #26]
 8017800:	f043 0303 	orr.w	r3, r3, #3
 8017804:	b29a      	uxth	r2, r3
 8017806:	687b      	ldr	r3, [r7, #4]
 8017808:	835a      	strh	r2, [r3, #26]
 801780a:	e006      	b.n	801781a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801780c:	687b      	ldr	r3, [r7, #4]
 801780e:	8b5b      	ldrh	r3, [r3, #26]
 8017810:	f023 0303 	bic.w	r3, r3, #3
 8017814:	b29a      	uxth	r2, r3
 8017816:	687b      	ldr	r3, [r7, #4]
 8017818:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801781a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801781e:	4618      	mov	r0, r3
 8017820:	371c      	adds	r7, #28
 8017822:	46bd      	mov	sp, r7
 8017824:	bd90      	pop	{r4, r7, pc}
 8017826:	bf00      	nop
 8017828:	08024390 	.word	0x08024390
 801782c:	08024b4c 	.word	0x08024b4c
 8017830:	080243e4 	.word	0x080243e4

08017834 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017834:	b590      	push	{r4, r7, lr}
 8017836:	b087      	sub	sp, #28
 8017838:	af00      	add	r7, sp, #0
 801783a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801783c:	2300      	movs	r3, #0
 801783e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017840:	687b      	ldr	r3, [r7, #4]
 8017842:	2b00      	cmp	r3, #0
 8017844:	d106      	bne.n	8017854 <tcp_keepalive+0x20>
 8017846:	4b18      	ldr	r3, [pc, #96]	@ (80178a8 <tcp_keepalive+0x74>)
 8017848:	f640 0224 	movw	r2, #2084	@ 0x824
 801784c:	4917      	ldr	r1, [pc, #92]	@ (80178ac <tcp_keepalive+0x78>)
 801784e:	4818      	ldr	r0, [pc, #96]	@ (80178b0 <tcp_keepalive+0x7c>)
 8017850:	f006 fd44 	bl	801e2dc <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017854:	7dfb      	ldrb	r3, [r7, #23]
 8017856:	b29c      	uxth	r4, r3
 8017858:	687b      	ldr	r3, [r7, #4]
 801785a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801785c:	3b01      	subs	r3, #1
 801785e:	4618      	mov	r0, r3
 8017860:	f7f7 fde3 	bl	800f42a <lwip_htonl>
 8017864:	4603      	mov	r3, r0
 8017866:	2200      	movs	r2, #0
 8017868:	4621      	mov	r1, r4
 801786a:	6878      	ldr	r0, [r7, #4]
 801786c:	f7ff fe68 	bl	8017540 <tcp_output_alloc_header>
 8017870:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017872:	693b      	ldr	r3, [r7, #16]
 8017874:	2b00      	cmp	r3, #0
 8017876:	d102      	bne.n	801787e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017878:	f04f 33ff 	mov.w	r3, #4294967295
 801787c:	e010      	b.n	80178a0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801787e:	7dfb      	ldrb	r3, [r7, #23]
 8017880:	2200      	movs	r2, #0
 8017882:	6939      	ldr	r1, [r7, #16]
 8017884:	6878      	ldr	r0, [r7, #4]
 8017886:	f7ff fe99 	bl	80175bc <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801788a:	687a      	ldr	r2, [r7, #4]
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	3304      	adds	r3, #4
 8017890:	6939      	ldr	r1, [r7, #16]
 8017892:	6878      	ldr	r0, [r7, #4]
 8017894:	f7ff fed0 	bl	8017638 <tcp_output_control_segment>
 8017898:	4603      	mov	r3, r0
 801789a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801789c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80178a0:	4618      	mov	r0, r3
 80178a2:	371c      	adds	r7, #28
 80178a4:	46bd      	mov	sp, r7
 80178a6:	bd90      	pop	{r4, r7, pc}
 80178a8:	08024390 	.word	0x08024390
 80178ac:	08024b6c 	.word	0x08024b6c
 80178b0:	080243e4 	.word	0x080243e4

080178b4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80178b4:	b590      	push	{r4, r7, lr}
 80178b6:	b08b      	sub	sp, #44	@ 0x2c
 80178b8:	af00      	add	r7, sp, #0
 80178ba:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80178bc:	2300      	movs	r3, #0
 80178be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d106      	bne.n	80178d6 <tcp_zero_window_probe+0x22>
 80178c8:	4b4c      	ldr	r3, [pc, #304]	@ (80179fc <tcp_zero_window_probe+0x148>)
 80178ca:	f640 024f 	movw	r2, #2127	@ 0x84f
 80178ce:	494c      	ldr	r1, [pc, #304]	@ (8017a00 <tcp_zero_window_probe+0x14c>)
 80178d0:	484c      	ldr	r0, [pc, #304]	@ (8017a04 <tcp_zero_window_probe+0x150>)
 80178d2:	f006 fd03 	bl	801e2dc <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80178da:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80178dc:	6a3b      	ldr	r3, [r7, #32]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d101      	bne.n	80178e6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80178e2:	2300      	movs	r3, #0
 80178e4:	e086      	b.n	80179f4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80178ec:	2bff      	cmp	r3, #255	@ 0xff
 80178ee:	d007      	beq.n	8017900 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80178f0:	687b      	ldr	r3, [r7, #4]
 80178f2:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80178f6:	3301      	adds	r3, #1
 80178f8:	b2da      	uxtb	r2, r3
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017900:	6a3b      	ldr	r3, [r7, #32]
 8017902:	68db      	ldr	r3, [r3, #12]
 8017904:	899b      	ldrh	r3, [r3, #12]
 8017906:	b29b      	uxth	r3, r3
 8017908:	4618      	mov	r0, r3
 801790a:	f7f7 fd79 	bl	800f400 <lwip_htons>
 801790e:	4603      	mov	r3, r0
 8017910:	b2db      	uxtb	r3, r3
 8017912:	f003 0301 	and.w	r3, r3, #1
 8017916:	2b00      	cmp	r3, #0
 8017918:	d005      	beq.n	8017926 <tcp_zero_window_probe+0x72>
 801791a:	6a3b      	ldr	r3, [r7, #32]
 801791c:	891b      	ldrh	r3, [r3, #8]
 801791e:	2b00      	cmp	r3, #0
 8017920:	d101      	bne.n	8017926 <tcp_zero_window_probe+0x72>
 8017922:	2301      	movs	r3, #1
 8017924:	e000      	b.n	8017928 <tcp_zero_window_probe+0x74>
 8017926:	2300      	movs	r3, #0
 8017928:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801792a:	7ffb      	ldrb	r3, [r7, #31]
 801792c:	2b00      	cmp	r3, #0
 801792e:	bf0c      	ite	eq
 8017930:	2301      	moveq	r3, #1
 8017932:	2300      	movne	r3, #0
 8017934:	b2db      	uxtb	r3, r3
 8017936:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801793c:	b299      	uxth	r1, r3
 801793e:	6a3b      	ldr	r3, [r7, #32]
 8017940:	68db      	ldr	r3, [r3, #12]
 8017942:	685b      	ldr	r3, [r3, #4]
 8017944:	8bba      	ldrh	r2, [r7, #28]
 8017946:	6878      	ldr	r0, [r7, #4]
 8017948:	f7ff fdfa 	bl	8017540 <tcp_output_alloc_header>
 801794c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801794e:	69bb      	ldr	r3, [r7, #24]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d102      	bne.n	801795a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017954:	f04f 33ff 	mov.w	r3, #4294967295
 8017958:	e04c      	b.n	80179f4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801795a:	69bb      	ldr	r3, [r7, #24]
 801795c:	685b      	ldr	r3, [r3, #4]
 801795e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017960:	7ffb      	ldrb	r3, [r7, #31]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d011      	beq.n	801798a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017966:	697b      	ldr	r3, [r7, #20]
 8017968:	899b      	ldrh	r3, [r3, #12]
 801796a:	b29b      	uxth	r3, r3
 801796c:	b21b      	sxth	r3, r3
 801796e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8017972:	b21c      	sxth	r4, r3
 8017974:	2011      	movs	r0, #17
 8017976:	f7f7 fd43 	bl	800f400 <lwip_htons>
 801797a:	4603      	mov	r3, r0
 801797c:	b21b      	sxth	r3, r3
 801797e:	4323      	orrs	r3, r4
 8017980:	b21b      	sxth	r3, r3
 8017982:	b29a      	uxth	r2, r3
 8017984:	697b      	ldr	r3, [r7, #20]
 8017986:	819a      	strh	r2, [r3, #12]
 8017988:	e010      	b.n	80179ac <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801798a:	69bb      	ldr	r3, [r7, #24]
 801798c:	685b      	ldr	r3, [r3, #4]
 801798e:	3314      	adds	r3, #20
 8017990:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017992:	6a3b      	ldr	r3, [r7, #32]
 8017994:	6858      	ldr	r0, [r3, #4]
 8017996:	6a3b      	ldr	r3, [r7, #32]
 8017998:	685b      	ldr	r3, [r3, #4]
 801799a:	891a      	ldrh	r2, [r3, #8]
 801799c:	6a3b      	ldr	r3, [r7, #32]
 801799e:	891b      	ldrh	r3, [r3, #8]
 80179a0:	1ad3      	subs	r3, r2, r3
 80179a2:	b29b      	uxth	r3, r3
 80179a4:	2201      	movs	r2, #1
 80179a6:	6939      	ldr	r1, [r7, #16]
 80179a8:	f7f9 fe1c 	bl	80115e4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80179ac:	6a3b      	ldr	r3, [r7, #32]
 80179ae:	68db      	ldr	r3, [r3, #12]
 80179b0:	685b      	ldr	r3, [r3, #4]
 80179b2:	4618      	mov	r0, r3
 80179b4:	f7f7 fd39 	bl	800f42a <lwip_htonl>
 80179b8:	4603      	mov	r3, r0
 80179ba:	3301      	adds	r3, #1
 80179bc:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80179be:	687b      	ldr	r3, [r7, #4]
 80179c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80179c2:	68fb      	ldr	r3, [r7, #12]
 80179c4:	1ad3      	subs	r3, r2, r3
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	da02      	bge.n	80179d0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80179ca:	687b      	ldr	r3, [r7, #4]
 80179cc:	68fa      	ldr	r2, [r7, #12]
 80179ce:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80179d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80179d4:	2200      	movs	r2, #0
 80179d6:	69b9      	ldr	r1, [r7, #24]
 80179d8:	6878      	ldr	r0, [r7, #4]
 80179da:	f7ff fdef 	bl	80175bc <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80179de:	687a      	ldr	r2, [r7, #4]
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	3304      	adds	r3, #4
 80179e4:	69b9      	ldr	r1, [r7, #24]
 80179e6:	6878      	ldr	r0, [r7, #4]
 80179e8:	f7ff fe26 	bl	8017638 <tcp_output_control_segment>
 80179ec:	4603      	mov	r3, r0
 80179ee:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80179f0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80179f4:	4618      	mov	r0, r3
 80179f6:	372c      	adds	r7, #44	@ 0x2c
 80179f8:	46bd      	mov	sp, r7
 80179fa:	bd90      	pop	{r4, r7, pc}
 80179fc:	08024390 	.word	0x08024390
 8017a00:	08024b88 	.word	0x08024b88
 8017a04:	080243e4 	.word	0x080243e4

08017a08 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b082      	sub	sp, #8
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017a10:	f7fa f830 	bl	8011a74 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017a14:	4b0a      	ldr	r3, [pc, #40]	@ (8017a40 <tcpip_tcp_timer+0x38>)
 8017a16:	681b      	ldr	r3, [r3, #0]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d103      	bne.n	8017a24 <tcpip_tcp_timer+0x1c>
 8017a1c:	4b09      	ldr	r3, [pc, #36]	@ (8017a44 <tcpip_tcp_timer+0x3c>)
 8017a1e:	681b      	ldr	r3, [r3, #0]
 8017a20:	2b00      	cmp	r3, #0
 8017a22:	d005      	beq.n	8017a30 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017a24:	2200      	movs	r2, #0
 8017a26:	4908      	ldr	r1, [pc, #32]	@ (8017a48 <tcpip_tcp_timer+0x40>)
 8017a28:	20fa      	movs	r0, #250	@ 0xfa
 8017a2a:	f000 f8f3 	bl	8017c14 <sys_timeout>
 8017a2e:	e003      	b.n	8017a38 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017a30:	4b06      	ldr	r3, [pc, #24]	@ (8017a4c <tcpip_tcp_timer+0x44>)
 8017a32:	2200      	movs	r2, #0
 8017a34:	601a      	str	r2, [r3, #0]
  }
}
 8017a36:	bf00      	nop
 8017a38:	bf00      	nop
 8017a3a:	3708      	adds	r7, #8
 8017a3c:	46bd      	mov	sp, r7
 8017a3e:	bd80      	pop	{r7, pc}
 8017a40:	2001267c 	.word	0x2001267c
 8017a44:	20012680 	.word	0x20012680
 8017a48:	08017a09 	.word	0x08017a09
 8017a4c:	200126c8 	.word	0x200126c8

08017a50 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017a50:	b580      	push	{r7, lr}
 8017a52:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017a54:	4b0a      	ldr	r3, [pc, #40]	@ (8017a80 <tcp_timer_needed+0x30>)
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d10f      	bne.n	8017a7c <tcp_timer_needed+0x2c>
 8017a5c:	4b09      	ldr	r3, [pc, #36]	@ (8017a84 <tcp_timer_needed+0x34>)
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	2b00      	cmp	r3, #0
 8017a62:	d103      	bne.n	8017a6c <tcp_timer_needed+0x1c>
 8017a64:	4b08      	ldr	r3, [pc, #32]	@ (8017a88 <tcp_timer_needed+0x38>)
 8017a66:	681b      	ldr	r3, [r3, #0]
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d007      	beq.n	8017a7c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017a6c:	4b04      	ldr	r3, [pc, #16]	@ (8017a80 <tcp_timer_needed+0x30>)
 8017a6e:	2201      	movs	r2, #1
 8017a70:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017a72:	2200      	movs	r2, #0
 8017a74:	4905      	ldr	r1, [pc, #20]	@ (8017a8c <tcp_timer_needed+0x3c>)
 8017a76:	20fa      	movs	r0, #250	@ 0xfa
 8017a78:	f000 f8cc 	bl	8017c14 <sys_timeout>
  }
}
 8017a7c:	bf00      	nop
 8017a7e:	bd80      	pop	{r7, pc}
 8017a80:	200126c8 	.word	0x200126c8
 8017a84:	2001267c 	.word	0x2001267c
 8017a88:	20012680 	.word	0x20012680
 8017a8c:	08017a09 	.word	0x08017a09

08017a90 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b086      	sub	sp, #24
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	60f8      	str	r0, [r7, #12]
 8017a98:	60b9      	str	r1, [r7, #8]
 8017a9a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017a9c:	200a      	movs	r0, #10
 8017a9e:	f7f8 fc75 	bl	801038c <memp_malloc>
 8017aa2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017aa4:	693b      	ldr	r3, [r7, #16]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d109      	bne.n	8017abe <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017aaa:	693b      	ldr	r3, [r7, #16]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d151      	bne.n	8017b54 <sys_timeout_abs+0xc4>
 8017ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8017b5c <sys_timeout_abs+0xcc>)
 8017ab2:	22be      	movs	r2, #190	@ 0xbe
 8017ab4:	492a      	ldr	r1, [pc, #168]	@ (8017b60 <sys_timeout_abs+0xd0>)
 8017ab6:	482b      	ldr	r0, [pc, #172]	@ (8017b64 <sys_timeout_abs+0xd4>)
 8017ab8:	f006 fc10 	bl	801e2dc <iprintf>
    return;
 8017abc:	e04a      	b.n	8017b54 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017abe:	693b      	ldr	r3, [r7, #16]
 8017ac0:	2200      	movs	r2, #0
 8017ac2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017ac4:	693b      	ldr	r3, [r7, #16]
 8017ac6:	68ba      	ldr	r2, [r7, #8]
 8017ac8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017aca:	693b      	ldr	r3, [r7, #16]
 8017acc:	687a      	ldr	r2, [r7, #4]
 8017ace:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017ad0:	693b      	ldr	r3, [r7, #16]
 8017ad2:	68fa      	ldr	r2, [r7, #12]
 8017ad4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017ad6:	4b24      	ldr	r3, [pc, #144]	@ (8017b68 <sys_timeout_abs+0xd8>)
 8017ad8:	681b      	ldr	r3, [r3, #0]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d103      	bne.n	8017ae6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017ade:	4a22      	ldr	r2, [pc, #136]	@ (8017b68 <sys_timeout_abs+0xd8>)
 8017ae0:	693b      	ldr	r3, [r7, #16]
 8017ae2:	6013      	str	r3, [r2, #0]
    return;
 8017ae4:	e037      	b.n	8017b56 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017ae6:	693b      	ldr	r3, [r7, #16]
 8017ae8:	685a      	ldr	r2, [r3, #4]
 8017aea:	4b1f      	ldr	r3, [pc, #124]	@ (8017b68 <sys_timeout_abs+0xd8>)
 8017aec:	681b      	ldr	r3, [r3, #0]
 8017aee:	685b      	ldr	r3, [r3, #4]
 8017af0:	1ad3      	subs	r3, r2, r3
 8017af2:	0fdb      	lsrs	r3, r3, #31
 8017af4:	f003 0301 	and.w	r3, r3, #1
 8017af8:	b2db      	uxtb	r3, r3
 8017afa:	2b00      	cmp	r3, #0
 8017afc:	d007      	beq.n	8017b0e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017afe:	4b1a      	ldr	r3, [pc, #104]	@ (8017b68 <sys_timeout_abs+0xd8>)
 8017b00:	681a      	ldr	r2, [r3, #0]
 8017b02:	693b      	ldr	r3, [r7, #16]
 8017b04:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017b06:	4a18      	ldr	r2, [pc, #96]	@ (8017b68 <sys_timeout_abs+0xd8>)
 8017b08:	693b      	ldr	r3, [r7, #16]
 8017b0a:	6013      	str	r3, [r2, #0]
 8017b0c:	e023      	b.n	8017b56 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017b0e:	4b16      	ldr	r3, [pc, #88]	@ (8017b68 <sys_timeout_abs+0xd8>)
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	617b      	str	r3, [r7, #20]
 8017b14:	e01a      	b.n	8017b4c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017b16:	697b      	ldr	r3, [r7, #20]
 8017b18:	681b      	ldr	r3, [r3, #0]
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d00b      	beq.n	8017b36 <sys_timeout_abs+0xa6>
 8017b1e:	693b      	ldr	r3, [r7, #16]
 8017b20:	685a      	ldr	r2, [r3, #4]
 8017b22:	697b      	ldr	r3, [r7, #20]
 8017b24:	681b      	ldr	r3, [r3, #0]
 8017b26:	685b      	ldr	r3, [r3, #4]
 8017b28:	1ad3      	subs	r3, r2, r3
 8017b2a:	0fdb      	lsrs	r3, r3, #31
 8017b2c:	f003 0301 	and.w	r3, r3, #1
 8017b30:	b2db      	uxtb	r3, r3
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d007      	beq.n	8017b46 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017b36:	697b      	ldr	r3, [r7, #20]
 8017b38:	681a      	ldr	r2, [r3, #0]
 8017b3a:	693b      	ldr	r3, [r7, #16]
 8017b3c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017b3e:	697b      	ldr	r3, [r7, #20]
 8017b40:	693a      	ldr	r2, [r7, #16]
 8017b42:	601a      	str	r2, [r3, #0]
        break;
 8017b44:	e007      	b.n	8017b56 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017b46:	697b      	ldr	r3, [r7, #20]
 8017b48:	681b      	ldr	r3, [r3, #0]
 8017b4a:	617b      	str	r3, [r7, #20]
 8017b4c:	697b      	ldr	r3, [r7, #20]
 8017b4e:	2b00      	cmp	r3, #0
 8017b50:	d1e1      	bne.n	8017b16 <sys_timeout_abs+0x86>
 8017b52:	e000      	b.n	8017b56 <sys_timeout_abs+0xc6>
    return;
 8017b54:	bf00      	nop
      }
    }
  }
}
 8017b56:	3718      	adds	r7, #24
 8017b58:	46bd      	mov	sp, r7
 8017b5a:	bd80      	pop	{r7, pc}
 8017b5c:	08024bac 	.word	0x08024bac
 8017b60:	08024be0 	.word	0x08024be0
 8017b64:	08024c20 	.word	0x08024c20
 8017b68:	200126c0 	.word	0x200126c0

08017b6c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017b6c:	b580      	push	{r7, lr}
 8017b6e:	b086      	sub	sp, #24
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017b78:	697b      	ldr	r3, [r7, #20]
 8017b7a:	685b      	ldr	r3, [r3, #4]
 8017b7c:	4798      	blx	r3

  now = sys_now();
 8017b7e:	f7f0 fd21 	bl	80085c4 <sys_now>
 8017b82:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017b84:	697b      	ldr	r3, [r7, #20]
 8017b86:	681a      	ldr	r2, [r3, #0]
 8017b88:	4b0f      	ldr	r3, [pc, #60]	@ (8017bc8 <lwip_cyclic_timer+0x5c>)
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	4413      	add	r3, r2
 8017b8e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017b90:	68fa      	ldr	r2, [r7, #12]
 8017b92:	693b      	ldr	r3, [r7, #16]
 8017b94:	1ad3      	subs	r3, r2, r3
 8017b96:	0fdb      	lsrs	r3, r3, #31
 8017b98:	f003 0301 	and.w	r3, r3, #1
 8017b9c:	b2db      	uxtb	r3, r3
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d009      	beq.n	8017bb6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017ba2:	697b      	ldr	r3, [r7, #20]
 8017ba4:	681a      	ldr	r2, [r3, #0]
 8017ba6:	693b      	ldr	r3, [r7, #16]
 8017ba8:	4413      	add	r3, r2
 8017baa:	687a      	ldr	r2, [r7, #4]
 8017bac:	4907      	ldr	r1, [pc, #28]	@ (8017bcc <lwip_cyclic_timer+0x60>)
 8017bae:	4618      	mov	r0, r3
 8017bb0:	f7ff ff6e 	bl	8017a90 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017bb4:	e004      	b.n	8017bc0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017bb6:	687a      	ldr	r2, [r7, #4]
 8017bb8:	4904      	ldr	r1, [pc, #16]	@ (8017bcc <lwip_cyclic_timer+0x60>)
 8017bba:	68f8      	ldr	r0, [r7, #12]
 8017bbc:	f7ff ff68 	bl	8017a90 <sys_timeout_abs>
}
 8017bc0:	bf00      	nop
 8017bc2:	3718      	adds	r7, #24
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	bd80      	pop	{r7, pc}
 8017bc8:	200126c4 	.word	0x200126c4
 8017bcc:	08017b6d 	.word	0x08017b6d

08017bd0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017bd0:	b580      	push	{r7, lr}
 8017bd2:	b082      	sub	sp, #8
 8017bd4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017bd6:	2301      	movs	r3, #1
 8017bd8:	607b      	str	r3, [r7, #4]
 8017bda:	e00e      	b.n	8017bfa <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017bdc:	4a0b      	ldr	r2, [pc, #44]	@ (8017c0c <sys_timeouts_init+0x3c>)
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	00db      	lsls	r3, r3, #3
 8017be8:	4a08      	ldr	r2, [pc, #32]	@ (8017c0c <sys_timeouts_init+0x3c>)
 8017bea:	4413      	add	r3, r2
 8017bec:	461a      	mov	r2, r3
 8017bee:	4908      	ldr	r1, [pc, #32]	@ (8017c10 <sys_timeouts_init+0x40>)
 8017bf0:	f000 f810 	bl	8017c14 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017bf4:	687b      	ldr	r3, [r7, #4]
 8017bf6:	3301      	adds	r3, #1
 8017bf8:	607b      	str	r3, [r7, #4]
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	2b05      	cmp	r3, #5
 8017bfe:	d9ed      	bls.n	8017bdc <sys_timeouts_init+0xc>
  }
}
 8017c00:	bf00      	nop
 8017c02:	bf00      	nop
 8017c04:	3708      	adds	r7, #8
 8017c06:	46bd      	mov	sp, r7
 8017c08:	bd80      	pop	{r7, pc}
 8017c0a:	bf00      	nop
 8017c0c:	08025d40 	.word	0x08025d40
 8017c10:	08017b6d 	.word	0x08017b6d

08017c14 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017c14:	b580      	push	{r7, lr}
 8017c16:	b086      	sub	sp, #24
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	60f8      	str	r0, [r7, #12]
 8017c1c:	60b9      	str	r1, [r7, #8]
 8017c1e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017c20:	68fb      	ldr	r3, [r7, #12]
 8017c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017c26:	d306      	bcc.n	8017c36 <sys_timeout+0x22>
 8017c28:	4b0a      	ldr	r3, [pc, #40]	@ (8017c54 <sys_timeout+0x40>)
 8017c2a:	f240 1229 	movw	r2, #297	@ 0x129
 8017c2e:	490a      	ldr	r1, [pc, #40]	@ (8017c58 <sys_timeout+0x44>)
 8017c30:	480a      	ldr	r0, [pc, #40]	@ (8017c5c <sys_timeout+0x48>)
 8017c32:	f006 fb53 	bl	801e2dc <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017c36:	f7f0 fcc5 	bl	80085c4 <sys_now>
 8017c3a:	4602      	mov	r2, r0
 8017c3c:	68fb      	ldr	r3, [r7, #12]
 8017c3e:	4413      	add	r3, r2
 8017c40:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017c42:	687a      	ldr	r2, [r7, #4]
 8017c44:	68b9      	ldr	r1, [r7, #8]
 8017c46:	6978      	ldr	r0, [r7, #20]
 8017c48:	f7ff ff22 	bl	8017a90 <sys_timeout_abs>
#endif
}
 8017c4c:	bf00      	nop
 8017c4e:	3718      	adds	r7, #24
 8017c50:	46bd      	mov	sp, r7
 8017c52:	bd80      	pop	{r7, pc}
 8017c54:	08024bac 	.word	0x08024bac
 8017c58:	08024c48 	.word	0x08024c48
 8017c5c:	08024c20 	.word	0x08024c20

08017c60 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	b084      	sub	sp, #16
 8017c64:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017c66:	f7f0 fcad 	bl	80085c4 <sys_now>
 8017c6a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8017c6c:	4b17      	ldr	r3, [pc, #92]	@ (8017ccc <sys_check_timeouts+0x6c>)
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017c72:	68bb      	ldr	r3, [r7, #8]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d022      	beq.n	8017cbe <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017c78:	68bb      	ldr	r3, [r7, #8]
 8017c7a:	685b      	ldr	r3, [r3, #4]
 8017c7c:	68fa      	ldr	r2, [r7, #12]
 8017c7e:	1ad3      	subs	r3, r2, r3
 8017c80:	0fdb      	lsrs	r3, r3, #31
 8017c82:	f003 0301 	and.w	r3, r3, #1
 8017c86:	b2db      	uxtb	r3, r3
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d11a      	bne.n	8017cc2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017c8c:	68bb      	ldr	r3, [r7, #8]
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	4a0e      	ldr	r2, [pc, #56]	@ (8017ccc <sys_check_timeouts+0x6c>)
 8017c92:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017c94:	68bb      	ldr	r3, [r7, #8]
 8017c96:	689b      	ldr	r3, [r3, #8]
 8017c98:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017c9a:	68bb      	ldr	r3, [r7, #8]
 8017c9c:	68db      	ldr	r3, [r3, #12]
 8017c9e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017ca0:	68bb      	ldr	r3, [r7, #8]
 8017ca2:	685b      	ldr	r3, [r3, #4]
 8017ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8017cd0 <sys_check_timeouts+0x70>)
 8017ca6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017ca8:	68b9      	ldr	r1, [r7, #8]
 8017caa:	200a      	movs	r0, #10
 8017cac:	f7f8 fbe4 	bl	8010478 <memp_free>
    if (handler != NULL) {
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d0da      	beq.n	8017c6c <sys_check_timeouts+0xc>
      handler(arg);
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	6838      	ldr	r0, [r7, #0]
 8017cba:	4798      	blx	r3
  do {
 8017cbc:	e7d6      	b.n	8017c6c <sys_check_timeouts+0xc>
      return;
 8017cbe:	bf00      	nop
 8017cc0:	e000      	b.n	8017cc4 <sys_check_timeouts+0x64>
      return;
 8017cc2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017cc4:	3710      	adds	r7, #16
 8017cc6:	46bd      	mov	sp, r7
 8017cc8:	bd80      	pop	{r7, pc}
 8017cca:	bf00      	nop
 8017ccc:	200126c0 	.word	0x200126c0
 8017cd0:	200126c4 	.word	0x200126c4

08017cd4 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017cd4:	b580      	push	{r7, lr}
 8017cd6:	b082      	sub	sp, #8
 8017cd8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8017cda:	4b16      	ldr	r3, [pc, #88]	@ (8017d34 <sys_timeouts_sleeptime+0x60>)
 8017cdc:	681b      	ldr	r3, [r3, #0]
 8017cde:	2b00      	cmp	r3, #0
 8017ce0:	d102      	bne.n	8017ce8 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8017ce6:	e020      	b.n	8017d2a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017ce8:	f7f0 fc6c 	bl	80085c4 <sys_now>
 8017cec:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8017cee:	4b11      	ldr	r3, [pc, #68]	@ (8017d34 <sys_timeouts_sleeptime+0x60>)
 8017cf0:	681b      	ldr	r3, [r3, #0]
 8017cf2:	685a      	ldr	r2, [r3, #4]
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	1ad3      	subs	r3, r2, r3
 8017cf8:	0fdb      	lsrs	r3, r3, #31
 8017cfa:	f003 0301 	and.w	r3, r3, #1
 8017cfe:	b2db      	uxtb	r3, r3
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	d001      	beq.n	8017d08 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017d04:	2300      	movs	r3, #0
 8017d06:	e010      	b.n	8017d2a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017d08:	4b0a      	ldr	r3, [pc, #40]	@ (8017d34 <sys_timeouts_sleeptime+0x60>)
 8017d0a:	681b      	ldr	r3, [r3, #0]
 8017d0c:	685a      	ldr	r2, [r3, #4]
 8017d0e:	687b      	ldr	r3, [r7, #4]
 8017d10:	1ad3      	subs	r3, r2, r3
 8017d12:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017d14:	683b      	ldr	r3, [r7, #0]
 8017d16:	2b00      	cmp	r3, #0
 8017d18:	da06      	bge.n	8017d28 <sys_timeouts_sleeptime+0x54>
 8017d1a:	4b07      	ldr	r3, [pc, #28]	@ (8017d38 <sys_timeouts_sleeptime+0x64>)
 8017d1c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8017d20:	4906      	ldr	r1, [pc, #24]	@ (8017d3c <sys_timeouts_sleeptime+0x68>)
 8017d22:	4807      	ldr	r0, [pc, #28]	@ (8017d40 <sys_timeouts_sleeptime+0x6c>)
 8017d24:	f006 fada 	bl	801e2dc <iprintf>
    return ret;
 8017d28:	683b      	ldr	r3, [r7, #0]
  }
}
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	3708      	adds	r7, #8
 8017d2e:	46bd      	mov	sp, r7
 8017d30:	bd80      	pop	{r7, pc}
 8017d32:	bf00      	nop
 8017d34:	200126c0 	.word	0x200126c0
 8017d38:	08024bac 	.word	0x08024bac
 8017d3c:	08024c80 	.word	0x08024c80
 8017d40:	08024c20 	.word	0x08024c20

08017d44 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017d48:	f005 fa20 	bl	801d18c <rand>
 8017d4c:	4603      	mov	r3, r0
 8017d4e:	b29b      	uxth	r3, r3
 8017d50:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017d54:	b29b      	uxth	r3, r3
 8017d56:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8017d5a:	b29a      	uxth	r2, r3
 8017d5c:	4b01      	ldr	r3, [pc, #4]	@ (8017d64 <udp_init+0x20>)
 8017d5e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017d60:	bf00      	nop
 8017d62:	bd80      	pop	{r7, pc}
 8017d64:	2000004c 	.word	0x2000004c

08017d68 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017d68:	b480      	push	{r7}
 8017d6a:	b083      	sub	sp, #12
 8017d6c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017d6e:	2300      	movs	r3, #0
 8017d70:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017d72:	4b17      	ldr	r3, [pc, #92]	@ (8017dd0 <udp_new_port+0x68>)
 8017d74:	881b      	ldrh	r3, [r3, #0]
 8017d76:	1c5a      	adds	r2, r3, #1
 8017d78:	b291      	uxth	r1, r2
 8017d7a:	4a15      	ldr	r2, [pc, #84]	@ (8017dd0 <udp_new_port+0x68>)
 8017d7c:	8011      	strh	r1, [r2, #0]
 8017d7e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8017d82:	4293      	cmp	r3, r2
 8017d84:	d103      	bne.n	8017d8e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8017d86:	4b12      	ldr	r3, [pc, #72]	@ (8017dd0 <udp_new_port+0x68>)
 8017d88:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8017d8c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017d8e:	4b11      	ldr	r3, [pc, #68]	@ (8017dd4 <udp_new_port+0x6c>)
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	603b      	str	r3, [r7, #0]
 8017d94:	e011      	b.n	8017dba <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8017d96:	683b      	ldr	r3, [r7, #0]
 8017d98:	8a5a      	ldrh	r2, [r3, #18]
 8017d9a:	4b0d      	ldr	r3, [pc, #52]	@ (8017dd0 <udp_new_port+0x68>)
 8017d9c:	881b      	ldrh	r3, [r3, #0]
 8017d9e:	429a      	cmp	r2, r3
 8017da0:	d108      	bne.n	8017db4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8017da2:	88fb      	ldrh	r3, [r7, #6]
 8017da4:	3301      	adds	r3, #1
 8017da6:	80fb      	strh	r3, [r7, #6]
 8017da8:	88fb      	ldrh	r3, [r7, #6]
 8017daa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017dae:	d3e0      	bcc.n	8017d72 <udp_new_port+0xa>
        return 0;
 8017db0:	2300      	movs	r3, #0
 8017db2:	e007      	b.n	8017dc4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017db4:	683b      	ldr	r3, [r7, #0]
 8017db6:	68db      	ldr	r3, [r3, #12]
 8017db8:	603b      	str	r3, [r7, #0]
 8017dba:	683b      	ldr	r3, [r7, #0]
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d1ea      	bne.n	8017d96 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017dc0:	4b03      	ldr	r3, [pc, #12]	@ (8017dd0 <udp_new_port+0x68>)
 8017dc2:	881b      	ldrh	r3, [r3, #0]
}
 8017dc4:	4618      	mov	r0, r3
 8017dc6:	370c      	adds	r7, #12
 8017dc8:	46bd      	mov	sp, r7
 8017dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dce:	4770      	bx	lr
 8017dd0:	2000004c 	.word	0x2000004c
 8017dd4:	200126cc 	.word	0x200126cc

08017dd8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b084      	sub	sp, #16
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	60f8      	str	r0, [r7, #12]
 8017de0:	60b9      	str	r1, [r7, #8]
 8017de2:	4613      	mov	r3, r2
 8017de4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017de6:	68fb      	ldr	r3, [r7, #12]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d105      	bne.n	8017df8 <udp_input_local_match+0x20>
 8017dec:	4b27      	ldr	r3, [pc, #156]	@ (8017e8c <udp_input_local_match+0xb4>)
 8017dee:	2287      	movs	r2, #135	@ 0x87
 8017df0:	4927      	ldr	r1, [pc, #156]	@ (8017e90 <udp_input_local_match+0xb8>)
 8017df2:	4828      	ldr	r0, [pc, #160]	@ (8017e94 <udp_input_local_match+0xbc>)
 8017df4:	f006 fa72 	bl	801e2dc <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	2b00      	cmp	r3, #0
 8017dfc:	d105      	bne.n	8017e0a <udp_input_local_match+0x32>
 8017dfe:	4b23      	ldr	r3, [pc, #140]	@ (8017e8c <udp_input_local_match+0xb4>)
 8017e00:	2288      	movs	r2, #136	@ 0x88
 8017e02:	4925      	ldr	r1, [pc, #148]	@ (8017e98 <udp_input_local_match+0xc0>)
 8017e04:	4823      	ldr	r0, [pc, #140]	@ (8017e94 <udp_input_local_match+0xbc>)
 8017e06:	f006 fa69 	bl	801e2dc <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e0a:	68fb      	ldr	r3, [r7, #12]
 8017e0c:	7a1b      	ldrb	r3, [r3, #8]
 8017e0e:	2b00      	cmp	r3, #0
 8017e10:	d00b      	beq.n	8017e2a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017e12:	68fb      	ldr	r3, [r7, #12]
 8017e14:	7a1a      	ldrb	r2, [r3, #8]
 8017e16:	4b21      	ldr	r3, [pc, #132]	@ (8017e9c <udp_input_local_match+0xc4>)
 8017e18:	685b      	ldr	r3, [r3, #4]
 8017e1a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8017e1e:	3301      	adds	r3, #1
 8017e20:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e22:	429a      	cmp	r2, r3
 8017e24:	d001      	beq.n	8017e2a <udp_input_local_match+0x52>
    return 0;
 8017e26:	2300      	movs	r3, #0
 8017e28:	e02b      	b.n	8017e82 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017e2a:	79fb      	ldrb	r3, [r7, #7]
 8017e2c:	2b00      	cmp	r3, #0
 8017e2e:	d018      	beq.n	8017e62 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e30:	68fb      	ldr	r3, [r7, #12]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d013      	beq.n	8017e5e <udp_input_local_match+0x86>
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	681b      	ldr	r3, [r3, #0]
 8017e3a:	2b00      	cmp	r3, #0
 8017e3c:	d00f      	beq.n	8017e5e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017e3e:	4b17      	ldr	r3, [pc, #92]	@ (8017e9c <udp_input_local_match+0xc4>)
 8017e40:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e46:	d00a      	beq.n	8017e5e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	681a      	ldr	r2, [r3, #0]
 8017e4c:	4b13      	ldr	r3, [pc, #76]	@ (8017e9c <udp_input_local_match+0xc4>)
 8017e4e:	695b      	ldr	r3, [r3, #20]
 8017e50:	405a      	eors	r2, r3
 8017e52:	68bb      	ldr	r3, [r7, #8]
 8017e54:	3308      	adds	r3, #8
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d110      	bne.n	8017e80 <udp_input_local_match+0xa8>
          return 1;
 8017e5e:	2301      	movs	r3, #1
 8017e60:	e00f      	b.n	8017e82 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017e62:	68fb      	ldr	r3, [r7, #12]
 8017e64:	2b00      	cmp	r3, #0
 8017e66:	d009      	beq.n	8017e7c <udp_input_local_match+0xa4>
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	2b00      	cmp	r3, #0
 8017e6e:	d005      	beq.n	8017e7c <udp_input_local_match+0xa4>
 8017e70:	68fb      	ldr	r3, [r7, #12]
 8017e72:	681a      	ldr	r2, [r3, #0]
 8017e74:	4b09      	ldr	r3, [pc, #36]	@ (8017e9c <udp_input_local_match+0xc4>)
 8017e76:	695b      	ldr	r3, [r3, #20]
 8017e78:	429a      	cmp	r2, r3
 8017e7a:	d101      	bne.n	8017e80 <udp_input_local_match+0xa8>
        return 1;
 8017e7c:	2301      	movs	r3, #1
 8017e7e:	e000      	b.n	8017e82 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017e80:	2300      	movs	r3, #0
}
 8017e82:	4618      	mov	r0, r3
 8017e84:	3710      	adds	r7, #16
 8017e86:	46bd      	mov	sp, r7
 8017e88:	bd80      	pop	{r7, pc}
 8017e8a:	bf00      	nop
 8017e8c:	08024c94 	.word	0x08024c94
 8017e90:	08024cc4 	.word	0x08024cc4
 8017e94:	08024ce8 	.word	0x08024ce8
 8017e98:	08024d10 	.word	0x08024d10
 8017e9c:	2000edb0 	.word	0x2000edb0

08017ea0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017ea0:	b590      	push	{r4, r7, lr}
 8017ea2:	b08d      	sub	sp, #52	@ 0x34
 8017ea4:	af02      	add	r7, sp, #8
 8017ea6:	6078      	str	r0, [r7, #4]
 8017ea8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017eaa:	2300      	movs	r3, #0
 8017eac:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017eae:	687b      	ldr	r3, [r7, #4]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d105      	bne.n	8017ec0 <udp_input+0x20>
 8017eb4:	4b7c      	ldr	r3, [pc, #496]	@ (80180a8 <udp_input+0x208>)
 8017eb6:	22cf      	movs	r2, #207	@ 0xcf
 8017eb8:	497c      	ldr	r1, [pc, #496]	@ (80180ac <udp_input+0x20c>)
 8017eba:	487d      	ldr	r0, [pc, #500]	@ (80180b0 <udp_input+0x210>)
 8017ebc:	f006 fa0e 	bl	801e2dc <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017ec0:	683b      	ldr	r3, [r7, #0]
 8017ec2:	2b00      	cmp	r3, #0
 8017ec4:	d105      	bne.n	8017ed2 <udp_input+0x32>
 8017ec6:	4b78      	ldr	r3, [pc, #480]	@ (80180a8 <udp_input+0x208>)
 8017ec8:	22d0      	movs	r2, #208	@ 0xd0
 8017eca:	497a      	ldr	r1, [pc, #488]	@ (80180b4 <udp_input+0x214>)
 8017ecc:	4878      	ldr	r0, [pc, #480]	@ (80180b0 <udp_input+0x210>)
 8017ece:	f006 fa05 	bl	801e2dc <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	895b      	ldrh	r3, [r3, #10]
 8017ed6:	2b07      	cmp	r3, #7
 8017ed8:	d803      	bhi.n	8017ee2 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017eda:	6878      	ldr	r0, [r7, #4]
 8017edc:	f7f9 f97c 	bl	80111d8 <pbuf_free>
    goto end;
 8017ee0:	e0de      	b.n	80180a0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	685b      	ldr	r3, [r3, #4]
 8017ee6:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017ee8:	4b73      	ldr	r3, [pc, #460]	@ (80180b8 <udp_input+0x218>)
 8017eea:	695b      	ldr	r3, [r3, #20]
 8017eec:	4a72      	ldr	r2, [pc, #456]	@ (80180b8 <udp_input+0x218>)
 8017eee:	6812      	ldr	r2, [r2, #0]
 8017ef0:	4611      	mov	r1, r2
 8017ef2:	4618      	mov	r0, r3
 8017ef4:	f003 ff14 	bl	801bd20 <ip4_addr_isbroadcast_u32>
 8017ef8:	4603      	mov	r3, r0
 8017efa:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017efc:	697b      	ldr	r3, [r7, #20]
 8017efe:	881b      	ldrh	r3, [r3, #0]
 8017f00:	b29b      	uxth	r3, r3
 8017f02:	4618      	mov	r0, r3
 8017f04:	f7f7 fa7c 	bl	800f400 <lwip_htons>
 8017f08:	4603      	mov	r3, r0
 8017f0a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017f0c:	697b      	ldr	r3, [r7, #20]
 8017f0e:	885b      	ldrh	r3, [r3, #2]
 8017f10:	b29b      	uxth	r3, r3
 8017f12:	4618      	mov	r0, r3
 8017f14:	f7f7 fa74 	bl	800f400 <lwip_htons>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8017f20:	2300      	movs	r3, #0
 8017f22:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017f24:	2300      	movs	r3, #0
 8017f26:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f28:	4b64      	ldr	r3, [pc, #400]	@ (80180bc <udp_input+0x21c>)
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8017f2e:	e054      	b.n	8017fda <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f32:	8a5b      	ldrh	r3, [r3, #18]
 8017f34:	89fa      	ldrh	r2, [r7, #14]
 8017f36:	429a      	cmp	r2, r3
 8017f38:	d14a      	bne.n	8017fd0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017f3a:	7cfb      	ldrb	r3, [r7, #19]
 8017f3c:	461a      	mov	r2, r3
 8017f3e:	6839      	ldr	r1, [r7, #0]
 8017f40:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017f42:	f7ff ff49 	bl	8017dd8 <udp_input_local_match>
 8017f46:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	d041      	beq.n	8017fd0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f4e:	7c1b      	ldrb	r3, [r3, #16]
 8017f50:	f003 0304 	and.w	r3, r3, #4
 8017f54:	2b00      	cmp	r3, #0
 8017f56:	d11d      	bne.n	8017f94 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017f58:	69fb      	ldr	r3, [r7, #28]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	d102      	bne.n	8017f64 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f60:	61fb      	str	r3, [r7, #28]
 8017f62:	e017      	b.n	8017f94 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017f64:	7cfb      	ldrb	r3, [r7, #19]
 8017f66:	2b00      	cmp	r3, #0
 8017f68:	d014      	beq.n	8017f94 <udp_input+0xf4>
 8017f6a:	4b53      	ldr	r3, [pc, #332]	@ (80180b8 <udp_input+0x218>)
 8017f6c:	695b      	ldr	r3, [r3, #20]
 8017f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f72:	d10f      	bne.n	8017f94 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017f74:	69fb      	ldr	r3, [r7, #28]
 8017f76:	681a      	ldr	r2, [r3, #0]
 8017f78:	683b      	ldr	r3, [r7, #0]
 8017f7a:	3304      	adds	r3, #4
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	429a      	cmp	r2, r3
 8017f80:	d008      	beq.n	8017f94 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f84:	681a      	ldr	r2, [r3, #0]
 8017f86:	683b      	ldr	r3, [r7, #0]
 8017f88:	3304      	adds	r3, #4
 8017f8a:	681b      	ldr	r3, [r3, #0]
 8017f8c:	429a      	cmp	r2, r3
 8017f8e:	d101      	bne.n	8017f94 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017f90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f92:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017f96:	8a9b      	ldrh	r3, [r3, #20]
 8017f98:	8a3a      	ldrh	r2, [r7, #16]
 8017f9a:	429a      	cmp	r2, r3
 8017f9c:	d118      	bne.n	8017fd0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fa0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d005      	beq.n	8017fb2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fa8:	685a      	ldr	r2, [r3, #4]
 8017faa:	4b43      	ldr	r3, [pc, #268]	@ (80180b8 <udp_input+0x218>)
 8017fac:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017fae:	429a      	cmp	r2, r3
 8017fb0:	d10e      	bne.n	8017fd0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017fb2:	6a3b      	ldr	r3, [r7, #32]
 8017fb4:	2b00      	cmp	r3, #0
 8017fb6:	d014      	beq.n	8017fe2 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fba:	68da      	ldr	r2, [r3, #12]
 8017fbc:	6a3b      	ldr	r3, [r7, #32]
 8017fbe:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017fc0:	4b3e      	ldr	r3, [pc, #248]	@ (80180bc <udp_input+0x21c>)
 8017fc2:	681a      	ldr	r2, [r3, #0]
 8017fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fc6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017fc8:	4a3c      	ldr	r2, [pc, #240]	@ (80180bc <udp_input+0x21c>)
 8017fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fcc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017fce:	e008      	b.n	8017fe2 <udp_input+0x142>
      }
    }

    prev = pcb;
 8017fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fd2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fd6:	68db      	ldr	r3, [r3, #12]
 8017fd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8017fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d1a7      	bne.n	8017f30 <udp_input+0x90>
 8017fe0:	e000      	b.n	8017fe4 <udp_input+0x144>
        break;
 8017fe2:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d101      	bne.n	8017fee <udp_input+0x14e>
    pcb = uncon_pcb;
 8017fea:	69fb      	ldr	r3, [r7, #28]
 8017fec:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ff0:	2b00      	cmp	r3, #0
 8017ff2:	d002      	beq.n	8017ffa <udp_input+0x15a>
    for_us = 1;
 8017ff4:	2301      	movs	r3, #1
 8017ff6:	76fb      	strb	r3, [r7, #27]
 8017ff8:	e00a      	b.n	8018010 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017ffa:	683b      	ldr	r3, [r7, #0]
 8017ffc:	3304      	adds	r3, #4
 8017ffe:	681a      	ldr	r2, [r3, #0]
 8018000:	4b2d      	ldr	r3, [pc, #180]	@ (80180b8 <udp_input+0x218>)
 8018002:	695b      	ldr	r3, [r3, #20]
 8018004:	429a      	cmp	r2, r3
 8018006:	bf0c      	ite	eq
 8018008:	2301      	moveq	r3, #1
 801800a:	2300      	movne	r3, #0
 801800c:	b2db      	uxtb	r3, r3
 801800e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018010:	7efb      	ldrb	r3, [r7, #27]
 8018012:	2b00      	cmp	r3, #0
 8018014:	d041      	beq.n	801809a <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8018016:	2108      	movs	r1, #8
 8018018:	6878      	ldr	r0, [r7, #4]
 801801a:	f7f9 f857 	bl	80110cc <pbuf_remove_header>
 801801e:	4603      	mov	r3, r0
 8018020:	2b00      	cmp	r3, #0
 8018022:	d00a      	beq.n	801803a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018024:	4b20      	ldr	r3, [pc, #128]	@ (80180a8 <udp_input+0x208>)
 8018026:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 801802a:	4925      	ldr	r1, [pc, #148]	@ (80180c0 <udp_input+0x220>)
 801802c:	4820      	ldr	r0, [pc, #128]	@ (80180b0 <udp_input+0x210>)
 801802e:	f006 f955 	bl	801e2dc <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018032:	6878      	ldr	r0, [r7, #4]
 8018034:	f7f9 f8d0 	bl	80111d8 <pbuf_free>
      goto end;
 8018038:	e032      	b.n	80180a0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801803a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801803c:	2b00      	cmp	r3, #0
 801803e:	d012      	beq.n	8018066 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018042:	699b      	ldr	r3, [r3, #24]
 8018044:	2b00      	cmp	r3, #0
 8018046:	d00a      	beq.n	801805e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801804a:	699c      	ldr	r4, [r3, #24]
 801804c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801804e:	69d8      	ldr	r0, [r3, #28]
 8018050:	8a3b      	ldrh	r3, [r7, #16]
 8018052:	9300      	str	r3, [sp, #0]
 8018054:	4b1b      	ldr	r3, [pc, #108]	@ (80180c4 <udp_input+0x224>)
 8018056:	687a      	ldr	r2, [r7, #4]
 8018058:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801805a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801805c:	e021      	b.n	80180a2 <udp_input+0x202>
        pbuf_free(p);
 801805e:	6878      	ldr	r0, [r7, #4]
 8018060:	f7f9 f8ba 	bl	80111d8 <pbuf_free>
        goto end;
 8018064:	e01c      	b.n	80180a0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018066:	7cfb      	ldrb	r3, [r7, #19]
 8018068:	2b00      	cmp	r3, #0
 801806a:	d112      	bne.n	8018092 <udp_input+0x1f2>
 801806c:	4b12      	ldr	r3, [pc, #72]	@ (80180b8 <udp_input+0x218>)
 801806e:	695b      	ldr	r3, [r3, #20]
 8018070:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018074:	2be0      	cmp	r3, #224	@ 0xe0
 8018076:	d00c      	beq.n	8018092 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018078:	4b0f      	ldr	r3, [pc, #60]	@ (80180b8 <udp_input+0x218>)
 801807a:	899b      	ldrh	r3, [r3, #12]
 801807c:	3308      	adds	r3, #8
 801807e:	b29b      	uxth	r3, r3
 8018080:	b21b      	sxth	r3, r3
 8018082:	4619      	mov	r1, r3
 8018084:	6878      	ldr	r0, [r7, #4]
 8018086:	f7f9 f894 	bl	80111b2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801808a:	2103      	movs	r1, #3
 801808c:	6878      	ldr	r0, [r7, #4]
 801808e:	f003 fb09 	bl	801b6a4 <icmp_dest_unreach>
      pbuf_free(p);
 8018092:	6878      	ldr	r0, [r7, #4]
 8018094:	f7f9 f8a0 	bl	80111d8 <pbuf_free>
  return;
 8018098:	e003      	b.n	80180a2 <udp_input+0x202>
    pbuf_free(p);
 801809a:	6878      	ldr	r0, [r7, #4]
 801809c:	f7f9 f89c 	bl	80111d8 <pbuf_free>
  return;
 80180a0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80180a2:	372c      	adds	r7, #44	@ 0x2c
 80180a4:	46bd      	mov	sp, r7
 80180a6:	bd90      	pop	{r4, r7, pc}
 80180a8:	08024c94 	.word	0x08024c94
 80180ac:	08024d38 	.word	0x08024d38
 80180b0:	08024ce8 	.word	0x08024ce8
 80180b4:	08024d50 	.word	0x08024d50
 80180b8:	2000edb0 	.word	0x2000edb0
 80180bc:	200126cc 	.word	0x200126cc
 80180c0:	08024d6c 	.word	0x08024d6c
 80180c4:	2000edc0 	.word	0x2000edc0

080180c8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 80180c8:	b580      	push	{r7, lr}
 80180ca:	b082      	sub	sp, #8
 80180cc:	af00      	add	r7, sp, #0
 80180ce:	6078      	str	r0, [r7, #4]
 80180d0:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 80180d2:	687b      	ldr	r3, [r7, #4]
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	d109      	bne.n	80180ec <udp_send+0x24>
 80180d8:	4b11      	ldr	r3, [pc, #68]	@ (8018120 <udp_send+0x58>)
 80180da:	f240 12d5 	movw	r2, #469	@ 0x1d5
 80180de:	4911      	ldr	r1, [pc, #68]	@ (8018124 <udp_send+0x5c>)
 80180e0:	4811      	ldr	r0, [pc, #68]	@ (8018128 <udp_send+0x60>)
 80180e2:	f006 f8fb 	bl	801e2dc <iprintf>
 80180e6:	f06f 030f 	mvn.w	r3, #15
 80180ea:	e015      	b.n	8018118 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 80180ec:	683b      	ldr	r3, [r7, #0]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d109      	bne.n	8018106 <udp_send+0x3e>
 80180f2:	4b0b      	ldr	r3, [pc, #44]	@ (8018120 <udp_send+0x58>)
 80180f4:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 80180f8:	490c      	ldr	r1, [pc, #48]	@ (801812c <udp_send+0x64>)
 80180fa:	480b      	ldr	r0, [pc, #44]	@ (8018128 <udp_send+0x60>)
 80180fc:	f006 f8ee 	bl	801e2dc <iprintf>
 8018100:	f06f 030f 	mvn.w	r3, #15
 8018104:	e008      	b.n	8018118 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	1d1a      	adds	r2, r3, #4
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	8a9b      	ldrh	r3, [r3, #20]
 801810e:	6839      	ldr	r1, [r7, #0]
 8018110:	6878      	ldr	r0, [r7, #4]
 8018112:	f000 f80d 	bl	8018130 <udp_sendto>
 8018116:	4603      	mov	r3, r0
}
 8018118:	4618      	mov	r0, r3
 801811a:	3708      	adds	r7, #8
 801811c:	46bd      	mov	sp, r7
 801811e:	bd80      	pop	{r7, pc}
 8018120:	08024c94 	.word	0x08024c94
 8018124:	08024d88 	.word	0x08024d88
 8018128:	08024ce8 	.word	0x08024ce8
 801812c:	08024da0 	.word	0x08024da0

08018130 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8018130:	b580      	push	{r7, lr}
 8018132:	b088      	sub	sp, #32
 8018134:	af02      	add	r7, sp, #8
 8018136:	60f8      	str	r0, [r7, #12]
 8018138:	60b9      	str	r1, [r7, #8]
 801813a:	607a      	str	r2, [r7, #4]
 801813c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801813e:	68fb      	ldr	r3, [r7, #12]
 8018140:	2b00      	cmp	r3, #0
 8018142:	d109      	bne.n	8018158 <udp_sendto+0x28>
 8018144:	4b23      	ldr	r3, [pc, #140]	@ (80181d4 <udp_sendto+0xa4>)
 8018146:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801814a:	4923      	ldr	r1, [pc, #140]	@ (80181d8 <udp_sendto+0xa8>)
 801814c:	4823      	ldr	r0, [pc, #140]	@ (80181dc <udp_sendto+0xac>)
 801814e:	f006 f8c5 	bl	801e2dc <iprintf>
 8018152:	f06f 030f 	mvn.w	r3, #15
 8018156:	e038      	b.n	80181ca <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8018158:	68bb      	ldr	r3, [r7, #8]
 801815a:	2b00      	cmp	r3, #0
 801815c:	d109      	bne.n	8018172 <udp_sendto+0x42>
 801815e:	4b1d      	ldr	r3, [pc, #116]	@ (80181d4 <udp_sendto+0xa4>)
 8018160:	f240 2219 	movw	r2, #537	@ 0x219
 8018164:	491e      	ldr	r1, [pc, #120]	@ (80181e0 <udp_sendto+0xb0>)
 8018166:	481d      	ldr	r0, [pc, #116]	@ (80181dc <udp_sendto+0xac>)
 8018168:	f006 f8b8 	bl	801e2dc <iprintf>
 801816c:	f06f 030f 	mvn.w	r3, #15
 8018170:	e02b      	b.n	80181ca <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	2b00      	cmp	r3, #0
 8018176:	d109      	bne.n	801818c <udp_sendto+0x5c>
 8018178:	4b16      	ldr	r3, [pc, #88]	@ (80181d4 <udp_sendto+0xa4>)
 801817a:	f240 221a 	movw	r2, #538	@ 0x21a
 801817e:	4919      	ldr	r1, [pc, #100]	@ (80181e4 <udp_sendto+0xb4>)
 8018180:	4816      	ldr	r0, [pc, #88]	@ (80181dc <udp_sendto+0xac>)
 8018182:	f006 f8ab 	bl	801e2dc <iprintf>
 8018186:	f06f 030f 	mvn.w	r3, #15
 801818a:	e01e      	b.n	80181ca <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801818c:	68fb      	ldr	r3, [r7, #12]
 801818e:	7a1b      	ldrb	r3, [r3, #8]
 8018190:	2b00      	cmp	r3, #0
 8018192:	d006      	beq.n	80181a2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8018194:	68fb      	ldr	r3, [r7, #12]
 8018196:	7a1b      	ldrb	r3, [r3, #8]
 8018198:	4618      	mov	r0, r3
 801819a:	f7f8 fc8f 	bl	8010abc <netif_get_by_index>
 801819e:	6178      	str	r0, [r7, #20]
 80181a0:	e003      	b.n	80181aa <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80181a2:	6878      	ldr	r0, [r7, #4]
 80181a4:	f003 fb08 	bl	801b7b8 <ip4_route>
 80181a8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80181aa:	697b      	ldr	r3, [r7, #20]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d102      	bne.n	80181b6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80181b0:	f06f 0303 	mvn.w	r3, #3
 80181b4:	e009      	b.n	80181ca <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80181b6:	887a      	ldrh	r2, [r7, #2]
 80181b8:	697b      	ldr	r3, [r7, #20]
 80181ba:	9300      	str	r3, [sp, #0]
 80181bc:	4613      	mov	r3, r2
 80181be:	687a      	ldr	r2, [r7, #4]
 80181c0:	68b9      	ldr	r1, [r7, #8]
 80181c2:	68f8      	ldr	r0, [r7, #12]
 80181c4:	f000 f810 	bl	80181e8 <udp_sendto_if>
 80181c8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80181ca:	4618      	mov	r0, r3
 80181cc:	3718      	adds	r7, #24
 80181ce:	46bd      	mov	sp, r7
 80181d0:	bd80      	pop	{r7, pc}
 80181d2:	bf00      	nop
 80181d4:	08024c94 	.word	0x08024c94
 80181d8:	08024db8 	.word	0x08024db8
 80181dc:	08024ce8 	.word	0x08024ce8
 80181e0:	08024dd0 	.word	0x08024dd0
 80181e4:	08024dec 	.word	0x08024dec

080181e8 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80181e8:	b580      	push	{r7, lr}
 80181ea:	b088      	sub	sp, #32
 80181ec:	af02      	add	r7, sp, #8
 80181ee:	60f8      	str	r0, [r7, #12]
 80181f0:	60b9      	str	r1, [r7, #8]
 80181f2:	607a      	str	r2, [r7, #4]
 80181f4:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	2b00      	cmp	r3, #0
 80181fa:	d109      	bne.n	8018210 <udp_sendto_if+0x28>
 80181fc:	4b2e      	ldr	r3, [pc, #184]	@ (80182b8 <udp_sendto_if+0xd0>)
 80181fe:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018202:	492e      	ldr	r1, [pc, #184]	@ (80182bc <udp_sendto_if+0xd4>)
 8018204:	482e      	ldr	r0, [pc, #184]	@ (80182c0 <udp_sendto_if+0xd8>)
 8018206:	f006 f869 	bl	801e2dc <iprintf>
 801820a:	f06f 030f 	mvn.w	r3, #15
 801820e:	e04f      	b.n	80182b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018210:	68bb      	ldr	r3, [r7, #8]
 8018212:	2b00      	cmp	r3, #0
 8018214:	d109      	bne.n	801822a <udp_sendto_if+0x42>
 8018216:	4b28      	ldr	r3, [pc, #160]	@ (80182b8 <udp_sendto_if+0xd0>)
 8018218:	f240 2281 	movw	r2, #641	@ 0x281
 801821c:	4929      	ldr	r1, [pc, #164]	@ (80182c4 <udp_sendto_if+0xdc>)
 801821e:	4828      	ldr	r0, [pc, #160]	@ (80182c0 <udp_sendto_if+0xd8>)
 8018220:	f006 f85c 	bl	801e2dc <iprintf>
 8018224:	f06f 030f 	mvn.w	r3, #15
 8018228:	e042      	b.n	80182b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	2b00      	cmp	r3, #0
 801822e:	d109      	bne.n	8018244 <udp_sendto_if+0x5c>
 8018230:	4b21      	ldr	r3, [pc, #132]	@ (80182b8 <udp_sendto_if+0xd0>)
 8018232:	f240 2282 	movw	r2, #642	@ 0x282
 8018236:	4924      	ldr	r1, [pc, #144]	@ (80182c8 <udp_sendto_if+0xe0>)
 8018238:	4821      	ldr	r0, [pc, #132]	@ (80182c0 <udp_sendto_if+0xd8>)
 801823a:	f006 f84f 	bl	801e2dc <iprintf>
 801823e:	f06f 030f 	mvn.w	r3, #15
 8018242:	e035      	b.n	80182b0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8018244:	6a3b      	ldr	r3, [r7, #32]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d109      	bne.n	801825e <udp_sendto_if+0x76>
 801824a:	4b1b      	ldr	r3, [pc, #108]	@ (80182b8 <udp_sendto_if+0xd0>)
 801824c:	f240 2283 	movw	r2, #643	@ 0x283
 8018250:	491e      	ldr	r1, [pc, #120]	@ (80182cc <udp_sendto_if+0xe4>)
 8018252:	481b      	ldr	r0, [pc, #108]	@ (80182c0 <udp_sendto_if+0xd8>)
 8018254:	f006 f842 	bl	801e2dc <iprintf>
 8018258:	f06f 030f 	mvn.w	r3, #15
 801825c:	e028      	b.n	80182b0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d009      	beq.n	8018278 <udp_sendto_if+0x90>
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	2b00      	cmp	r3, #0
 801826a:	d005      	beq.n	8018278 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801826c:	68fb      	ldr	r3, [r7, #12]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8018274:	2be0      	cmp	r3, #224	@ 0xe0
 8018276:	d103      	bne.n	8018280 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8018278:	6a3b      	ldr	r3, [r7, #32]
 801827a:	3304      	adds	r3, #4
 801827c:	617b      	str	r3, [r7, #20]
 801827e:	e00b      	b.n	8018298 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8018280:	68fb      	ldr	r3, [r7, #12]
 8018282:	681a      	ldr	r2, [r3, #0]
 8018284:	6a3b      	ldr	r3, [r7, #32]
 8018286:	3304      	adds	r3, #4
 8018288:	681b      	ldr	r3, [r3, #0]
 801828a:	429a      	cmp	r2, r3
 801828c:	d002      	beq.n	8018294 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801828e:	f06f 0303 	mvn.w	r3, #3
 8018292:	e00d      	b.n	80182b0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8018294:	68fb      	ldr	r3, [r7, #12]
 8018296:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8018298:	887a      	ldrh	r2, [r7, #2]
 801829a:	697b      	ldr	r3, [r7, #20]
 801829c:	9301      	str	r3, [sp, #4]
 801829e:	6a3b      	ldr	r3, [r7, #32]
 80182a0:	9300      	str	r3, [sp, #0]
 80182a2:	4613      	mov	r3, r2
 80182a4:	687a      	ldr	r2, [r7, #4]
 80182a6:	68b9      	ldr	r1, [r7, #8]
 80182a8:	68f8      	ldr	r0, [r7, #12]
 80182aa:	f000 f811 	bl	80182d0 <udp_sendto_if_src>
 80182ae:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80182b0:	4618      	mov	r0, r3
 80182b2:	3718      	adds	r7, #24
 80182b4:	46bd      	mov	sp, r7
 80182b6:	bd80      	pop	{r7, pc}
 80182b8:	08024c94 	.word	0x08024c94
 80182bc:	08024e08 	.word	0x08024e08
 80182c0:	08024ce8 	.word	0x08024ce8
 80182c4:	08024e24 	.word	0x08024e24
 80182c8:	08024e40 	.word	0x08024e40
 80182cc:	08024e60 	.word	0x08024e60

080182d0 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80182d0:	b580      	push	{r7, lr}
 80182d2:	b08c      	sub	sp, #48	@ 0x30
 80182d4:	af04      	add	r7, sp, #16
 80182d6:	60f8      	str	r0, [r7, #12]
 80182d8:	60b9      	str	r1, [r7, #8]
 80182da:	607a      	str	r2, [r7, #4]
 80182dc:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80182de:	68fb      	ldr	r3, [r7, #12]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d109      	bne.n	80182f8 <udp_sendto_if_src+0x28>
 80182e4:	4b65      	ldr	r3, [pc, #404]	@ (801847c <udp_sendto_if_src+0x1ac>)
 80182e6:	f240 22d1 	movw	r2, #721	@ 0x2d1
 80182ea:	4965      	ldr	r1, [pc, #404]	@ (8018480 <udp_sendto_if_src+0x1b0>)
 80182ec:	4865      	ldr	r0, [pc, #404]	@ (8018484 <udp_sendto_if_src+0x1b4>)
 80182ee:	f005 fff5 	bl	801e2dc <iprintf>
 80182f2:	f06f 030f 	mvn.w	r3, #15
 80182f6:	e0bc      	b.n	8018472 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80182f8:	68bb      	ldr	r3, [r7, #8]
 80182fa:	2b00      	cmp	r3, #0
 80182fc:	d109      	bne.n	8018312 <udp_sendto_if_src+0x42>
 80182fe:	4b5f      	ldr	r3, [pc, #380]	@ (801847c <udp_sendto_if_src+0x1ac>)
 8018300:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8018304:	4960      	ldr	r1, [pc, #384]	@ (8018488 <udp_sendto_if_src+0x1b8>)
 8018306:	485f      	ldr	r0, [pc, #380]	@ (8018484 <udp_sendto_if_src+0x1b4>)
 8018308:	f005 ffe8 	bl	801e2dc <iprintf>
 801830c:	f06f 030f 	mvn.w	r3, #15
 8018310:	e0af      	b.n	8018472 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d109      	bne.n	801832c <udp_sendto_if_src+0x5c>
 8018318:	4b58      	ldr	r3, [pc, #352]	@ (801847c <udp_sendto_if_src+0x1ac>)
 801831a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 801831e:	495b      	ldr	r1, [pc, #364]	@ (801848c <udp_sendto_if_src+0x1bc>)
 8018320:	4858      	ldr	r0, [pc, #352]	@ (8018484 <udp_sendto_if_src+0x1b4>)
 8018322:	f005 ffdb 	bl	801e2dc <iprintf>
 8018326:	f06f 030f 	mvn.w	r3, #15
 801832a:	e0a2      	b.n	8018472 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801832c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801832e:	2b00      	cmp	r3, #0
 8018330:	d109      	bne.n	8018346 <udp_sendto_if_src+0x76>
 8018332:	4b52      	ldr	r3, [pc, #328]	@ (801847c <udp_sendto_if_src+0x1ac>)
 8018334:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8018338:	4955      	ldr	r1, [pc, #340]	@ (8018490 <udp_sendto_if_src+0x1c0>)
 801833a:	4852      	ldr	r0, [pc, #328]	@ (8018484 <udp_sendto_if_src+0x1b4>)
 801833c:	f005 ffce 	bl	801e2dc <iprintf>
 8018340:	f06f 030f 	mvn.w	r3, #15
 8018344:	e095      	b.n	8018472 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8018346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018348:	2b00      	cmp	r3, #0
 801834a:	d109      	bne.n	8018360 <udp_sendto_if_src+0x90>
 801834c:	4b4b      	ldr	r3, [pc, #300]	@ (801847c <udp_sendto_if_src+0x1ac>)
 801834e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8018352:	4950      	ldr	r1, [pc, #320]	@ (8018494 <udp_sendto_if_src+0x1c4>)
 8018354:	484b      	ldr	r0, [pc, #300]	@ (8018484 <udp_sendto_if_src+0x1b4>)
 8018356:	f005 ffc1 	bl	801e2dc <iprintf>
 801835a:	f06f 030f 	mvn.w	r3, #15
 801835e:	e088      	b.n	8018472 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8018360:	68fb      	ldr	r3, [r7, #12]
 8018362:	8a5b      	ldrh	r3, [r3, #18]
 8018364:	2b00      	cmp	r3, #0
 8018366:	d10f      	bne.n	8018388 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018368:	68f9      	ldr	r1, [r7, #12]
 801836a:	68fb      	ldr	r3, [r7, #12]
 801836c:	8a5b      	ldrh	r3, [r3, #18]
 801836e:	461a      	mov	r2, r3
 8018370:	68f8      	ldr	r0, [r7, #12]
 8018372:	f000 f893 	bl	801849c <udp_bind>
 8018376:	4603      	mov	r3, r0
 8018378:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801837a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d002      	beq.n	8018388 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8018382:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8018386:	e074      	b.n	8018472 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8018388:	68bb      	ldr	r3, [r7, #8]
 801838a:	891b      	ldrh	r3, [r3, #8]
 801838c:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8018390:	4293      	cmp	r3, r2
 8018392:	d902      	bls.n	801839a <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8018394:	f04f 33ff 	mov.w	r3, #4294967295
 8018398:	e06b      	b.n	8018472 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801839a:	2108      	movs	r1, #8
 801839c:	68b8      	ldr	r0, [r7, #8]
 801839e:	f7f8 fe85 	bl	80110ac <pbuf_add_header>
 80183a2:	4603      	mov	r3, r0
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	d015      	beq.n	80183d4 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80183a8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80183ac:	2108      	movs	r1, #8
 80183ae:	2022      	movs	r0, #34	@ 0x22
 80183b0:	f7f8 fc2e 	bl	8010c10 <pbuf_alloc>
 80183b4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80183b6:	69fb      	ldr	r3, [r7, #28]
 80183b8:	2b00      	cmp	r3, #0
 80183ba:	d102      	bne.n	80183c2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80183bc:	f04f 33ff 	mov.w	r3, #4294967295
 80183c0:	e057      	b.n	8018472 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80183c2:	68bb      	ldr	r3, [r7, #8]
 80183c4:	891b      	ldrh	r3, [r3, #8]
 80183c6:	2b00      	cmp	r3, #0
 80183c8:	d006      	beq.n	80183d8 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80183ca:	68b9      	ldr	r1, [r7, #8]
 80183cc:	69f8      	ldr	r0, [r7, #28]
 80183ce:	f7f9 f827 	bl	8011420 <pbuf_chain>
 80183d2:	e001      	b.n	80183d8 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80183d4:	68bb      	ldr	r3, [r7, #8]
 80183d6:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80183d8:	69fb      	ldr	r3, [r7, #28]
 80183da:	895b      	ldrh	r3, [r3, #10]
 80183dc:	2b07      	cmp	r3, #7
 80183de:	d806      	bhi.n	80183ee <udp_sendto_if_src+0x11e>
 80183e0:	4b26      	ldr	r3, [pc, #152]	@ (801847c <udp_sendto_if_src+0x1ac>)
 80183e2:	f240 320d 	movw	r2, #781	@ 0x30d
 80183e6:	492c      	ldr	r1, [pc, #176]	@ (8018498 <udp_sendto_if_src+0x1c8>)
 80183e8:	4826      	ldr	r0, [pc, #152]	@ (8018484 <udp_sendto_if_src+0x1b4>)
 80183ea:	f005 ff77 	bl	801e2dc <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80183ee:	69fb      	ldr	r3, [r7, #28]
 80183f0:	685b      	ldr	r3, [r3, #4]
 80183f2:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80183f4:	68fb      	ldr	r3, [r7, #12]
 80183f6:	8a5b      	ldrh	r3, [r3, #18]
 80183f8:	4618      	mov	r0, r3
 80183fa:	f7f7 f801 	bl	800f400 <lwip_htons>
 80183fe:	4603      	mov	r3, r0
 8018400:	461a      	mov	r2, r3
 8018402:	697b      	ldr	r3, [r7, #20]
 8018404:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8018406:	887b      	ldrh	r3, [r7, #2]
 8018408:	4618      	mov	r0, r3
 801840a:	f7f6 fff9 	bl	800f400 <lwip_htons>
 801840e:	4603      	mov	r3, r0
 8018410:	461a      	mov	r2, r3
 8018412:	697b      	ldr	r3, [r7, #20]
 8018414:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8018416:	697b      	ldr	r3, [r7, #20]
 8018418:	2200      	movs	r2, #0
 801841a:	719a      	strb	r2, [r3, #6]
 801841c:	2200      	movs	r2, #0
 801841e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8018420:	69fb      	ldr	r3, [r7, #28]
 8018422:	891b      	ldrh	r3, [r3, #8]
 8018424:	4618      	mov	r0, r3
 8018426:	f7f6 ffeb 	bl	800f400 <lwip_htons>
 801842a:	4603      	mov	r3, r0
 801842c:	461a      	mov	r2, r3
 801842e:	697b      	ldr	r3, [r7, #20]
 8018430:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8018432:	2311      	movs	r3, #17
 8018434:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8018436:	68fb      	ldr	r3, [r7, #12]
 8018438:	7adb      	ldrb	r3, [r3, #11]
 801843a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801843c:	68fb      	ldr	r3, [r7, #12]
 801843e:	7a9b      	ldrb	r3, [r3, #10]
 8018440:	7cb9      	ldrb	r1, [r7, #18]
 8018442:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018444:	9202      	str	r2, [sp, #8]
 8018446:	7cfa      	ldrb	r2, [r7, #19]
 8018448:	9201      	str	r2, [sp, #4]
 801844a:	9300      	str	r3, [sp, #0]
 801844c:	460b      	mov	r3, r1
 801844e:	687a      	ldr	r2, [r7, #4]
 8018450:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018452:	69f8      	ldr	r0, [r7, #28]
 8018454:	f003 fbb6 	bl	801bbc4 <ip4_output_if_src>
 8018458:	4603      	mov	r3, r0
 801845a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801845c:	69fa      	ldr	r2, [r7, #28]
 801845e:	68bb      	ldr	r3, [r7, #8]
 8018460:	429a      	cmp	r2, r3
 8018462:	d004      	beq.n	801846e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8018464:	69f8      	ldr	r0, [r7, #28]
 8018466:	f7f8 feb7 	bl	80111d8 <pbuf_free>
    q = NULL;
 801846a:	2300      	movs	r3, #0
 801846c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801846e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8018472:	4618      	mov	r0, r3
 8018474:	3720      	adds	r7, #32
 8018476:	46bd      	mov	sp, r7
 8018478:	bd80      	pop	{r7, pc}
 801847a:	bf00      	nop
 801847c:	08024c94 	.word	0x08024c94
 8018480:	08024e80 	.word	0x08024e80
 8018484:	08024ce8 	.word	0x08024ce8
 8018488:	08024ea0 	.word	0x08024ea0
 801848c:	08024ec0 	.word	0x08024ec0
 8018490:	08024ee4 	.word	0x08024ee4
 8018494:	08024f08 	.word	0x08024f08
 8018498:	08024f2c 	.word	0x08024f2c

0801849c <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801849c:	b580      	push	{r7, lr}
 801849e:	b086      	sub	sp, #24
 80184a0:	af00      	add	r7, sp, #0
 80184a2:	60f8      	str	r0, [r7, #12]
 80184a4:	60b9      	str	r1, [r7, #8]
 80184a6:	4613      	mov	r3, r2
 80184a8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80184aa:	68bb      	ldr	r3, [r7, #8]
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d101      	bne.n	80184b4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80184b0:	4b39      	ldr	r3, [pc, #228]	@ (8018598 <udp_bind+0xfc>)
 80184b2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80184b4:	68fb      	ldr	r3, [r7, #12]
 80184b6:	2b00      	cmp	r3, #0
 80184b8:	d109      	bne.n	80184ce <udp_bind+0x32>
 80184ba:	4b38      	ldr	r3, [pc, #224]	@ (801859c <udp_bind+0x100>)
 80184bc:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80184c0:	4937      	ldr	r1, [pc, #220]	@ (80185a0 <udp_bind+0x104>)
 80184c2:	4838      	ldr	r0, [pc, #224]	@ (80185a4 <udp_bind+0x108>)
 80184c4:	f005 ff0a 	bl	801e2dc <iprintf>
 80184c8:	f06f 030f 	mvn.w	r3, #15
 80184cc:	e060      	b.n	8018590 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80184ce:	2300      	movs	r3, #0
 80184d0:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80184d2:	4b35      	ldr	r3, [pc, #212]	@ (80185a8 <udp_bind+0x10c>)
 80184d4:	681b      	ldr	r3, [r3, #0]
 80184d6:	617b      	str	r3, [r7, #20]
 80184d8:	e009      	b.n	80184ee <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80184da:	68fa      	ldr	r2, [r7, #12]
 80184dc:	697b      	ldr	r3, [r7, #20]
 80184de:	429a      	cmp	r2, r3
 80184e0:	d102      	bne.n	80184e8 <udp_bind+0x4c>
      rebind = 1;
 80184e2:	2301      	movs	r3, #1
 80184e4:	74fb      	strb	r3, [r7, #19]
      break;
 80184e6:	e005      	b.n	80184f4 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80184e8:	697b      	ldr	r3, [r7, #20]
 80184ea:	68db      	ldr	r3, [r3, #12]
 80184ec:	617b      	str	r3, [r7, #20]
 80184ee:	697b      	ldr	r3, [r7, #20]
 80184f0:	2b00      	cmp	r3, #0
 80184f2:	d1f2      	bne.n	80184da <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80184f4:	88fb      	ldrh	r3, [r7, #6]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d109      	bne.n	801850e <udp_bind+0x72>
    port = udp_new_port();
 80184fa:	f7ff fc35 	bl	8017d68 <udp_new_port>
 80184fe:	4603      	mov	r3, r0
 8018500:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8018502:	88fb      	ldrh	r3, [r7, #6]
 8018504:	2b00      	cmp	r3, #0
 8018506:	d12c      	bne.n	8018562 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8018508:	f06f 0307 	mvn.w	r3, #7
 801850c:	e040      	b.n	8018590 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801850e:	4b26      	ldr	r3, [pc, #152]	@ (80185a8 <udp_bind+0x10c>)
 8018510:	681b      	ldr	r3, [r3, #0]
 8018512:	617b      	str	r3, [r7, #20]
 8018514:	e022      	b.n	801855c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8018516:	68fa      	ldr	r2, [r7, #12]
 8018518:	697b      	ldr	r3, [r7, #20]
 801851a:	429a      	cmp	r2, r3
 801851c:	d01b      	beq.n	8018556 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801851e:	697b      	ldr	r3, [r7, #20]
 8018520:	8a5b      	ldrh	r3, [r3, #18]
 8018522:	88fa      	ldrh	r2, [r7, #6]
 8018524:	429a      	cmp	r2, r3
 8018526:	d116      	bne.n	8018556 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018528:	697b      	ldr	r3, [r7, #20]
 801852a:	681a      	ldr	r2, [r3, #0]
 801852c:	68bb      	ldr	r3, [r7, #8]
 801852e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8018530:	429a      	cmp	r2, r3
 8018532:	d00d      	beq.n	8018550 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018534:	68bb      	ldr	r3, [r7, #8]
 8018536:	2b00      	cmp	r3, #0
 8018538:	d00a      	beq.n	8018550 <udp_bind+0xb4>
 801853a:	68bb      	ldr	r3, [r7, #8]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	2b00      	cmp	r3, #0
 8018540:	d006      	beq.n	8018550 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018542:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018544:	2b00      	cmp	r3, #0
 8018546:	d003      	beq.n	8018550 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018548:	697b      	ldr	r3, [r7, #20]
 801854a:	681b      	ldr	r3, [r3, #0]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d102      	bne.n	8018556 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8018550:	f06f 0307 	mvn.w	r3, #7
 8018554:	e01c      	b.n	8018590 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018556:	697b      	ldr	r3, [r7, #20]
 8018558:	68db      	ldr	r3, [r3, #12]
 801855a:	617b      	str	r3, [r7, #20]
 801855c:	697b      	ldr	r3, [r7, #20]
 801855e:	2b00      	cmp	r3, #0
 8018560:	d1d9      	bne.n	8018516 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8018562:	68bb      	ldr	r3, [r7, #8]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d002      	beq.n	801856e <udp_bind+0xd2>
 8018568:	68bb      	ldr	r3, [r7, #8]
 801856a:	681b      	ldr	r3, [r3, #0]
 801856c:	e000      	b.n	8018570 <udp_bind+0xd4>
 801856e:	2300      	movs	r3, #0
 8018570:	68fa      	ldr	r2, [r7, #12]
 8018572:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8018574:	68fb      	ldr	r3, [r7, #12]
 8018576:	88fa      	ldrh	r2, [r7, #6]
 8018578:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801857a:	7cfb      	ldrb	r3, [r7, #19]
 801857c:	2b00      	cmp	r3, #0
 801857e:	d106      	bne.n	801858e <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018580:	4b09      	ldr	r3, [pc, #36]	@ (80185a8 <udp_bind+0x10c>)
 8018582:	681a      	ldr	r2, [r3, #0]
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8018588:	4a07      	ldr	r2, [pc, #28]	@ (80185a8 <udp_bind+0x10c>)
 801858a:	68fb      	ldr	r3, [r7, #12]
 801858c:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801858e:	2300      	movs	r3, #0
}
 8018590:	4618      	mov	r0, r3
 8018592:	3718      	adds	r7, #24
 8018594:	46bd      	mov	sp, r7
 8018596:	bd80      	pop	{r7, pc}
 8018598:	08025d70 	.word	0x08025d70
 801859c:	08024c94 	.word	0x08024c94
 80185a0:	08024f5c 	.word	0x08024f5c
 80185a4:	08024ce8 	.word	0x08024ce8
 80185a8:	200126cc 	.word	0x200126cc

080185ac <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80185ac:	b580      	push	{r7, lr}
 80185ae:	b086      	sub	sp, #24
 80185b0:	af00      	add	r7, sp, #0
 80185b2:	60f8      	str	r0, [r7, #12]
 80185b4:	60b9      	str	r1, [r7, #8]
 80185b6:	4613      	mov	r3, r2
 80185b8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	d109      	bne.n	80185d4 <udp_connect+0x28>
 80185c0:	4b2c      	ldr	r3, [pc, #176]	@ (8018674 <udp_connect+0xc8>)
 80185c2:	f240 4235 	movw	r2, #1077	@ 0x435
 80185c6:	492c      	ldr	r1, [pc, #176]	@ (8018678 <udp_connect+0xcc>)
 80185c8:	482c      	ldr	r0, [pc, #176]	@ (801867c <udp_connect+0xd0>)
 80185ca:	f005 fe87 	bl	801e2dc <iprintf>
 80185ce:	f06f 030f 	mvn.w	r3, #15
 80185d2:	e04b      	b.n	801866c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80185d4:	68bb      	ldr	r3, [r7, #8]
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	d109      	bne.n	80185ee <udp_connect+0x42>
 80185da:	4b26      	ldr	r3, [pc, #152]	@ (8018674 <udp_connect+0xc8>)
 80185dc:	f240 4236 	movw	r2, #1078	@ 0x436
 80185e0:	4927      	ldr	r1, [pc, #156]	@ (8018680 <udp_connect+0xd4>)
 80185e2:	4826      	ldr	r0, [pc, #152]	@ (801867c <udp_connect+0xd0>)
 80185e4:	f005 fe7a 	bl	801e2dc <iprintf>
 80185e8:	f06f 030f 	mvn.w	r3, #15
 80185ec:	e03e      	b.n	801866c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 80185ee:	68fb      	ldr	r3, [r7, #12]
 80185f0:	8a5b      	ldrh	r3, [r3, #18]
 80185f2:	2b00      	cmp	r3, #0
 80185f4:	d10f      	bne.n	8018616 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80185f6:	68f9      	ldr	r1, [r7, #12]
 80185f8:	68fb      	ldr	r3, [r7, #12]
 80185fa:	8a5b      	ldrh	r3, [r3, #18]
 80185fc:	461a      	mov	r2, r3
 80185fe:	68f8      	ldr	r0, [r7, #12]
 8018600:	f7ff ff4c 	bl	801849c <udp_bind>
 8018604:	4603      	mov	r3, r0
 8018606:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8018608:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d002      	beq.n	8018616 <udp_connect+0x6a>
      return err;
 8018610:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018614:	e02a      	b.n	801866c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8018616:	68bb      	ldr	r3, [r7, #8]
 8018618:	2b00      	cmp	r3, #0
 801861a:	d002      	beq.n	8018622 <udp_connect+0x76>
 801861c:	68bb      	ldr	r3, [r7, #8]
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	e000      	b.n	8018624 <udp_connect+0x78>
 8018622:	2300      	movs	r3, #0
 8018624:	68fa      	ldr	r2, [r7, #12]
 8018626:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8018628:	68fb      	ldr	r3, [r7, #12]
 801862a:	88fa      	ldrh	r2, [r7, #6]
 801862c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801862e:	68fb      	ldr	r3, [r7, #12]
 8018630:	7c1b      	ldrb	r3, [r3, #16]
 8018632:	f043 0304 	orr.w	r3, r3, #4
 8018636:	b2da      	uxtb	r2, r3
 8018638:	68fb      	ldr	r3, [r7, #12]
 801863a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801863c:	4b11      	ldr	r3, [pc, #68]	@ (8018684 <udp_connect+0xd8>)
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	617b      	str	r3, [r7, #20]
 8018642:	e008      	b.n	8018656 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8018644:	68fa      	ldr	r2, [r7, #12]
 8018646:	697b      	ldr	r3, [r7, #20]
 8018648:	429a      	cmp	r2, r3
 801864a:	d101      	bne.n	8018650 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801864c:	2300      	movs	r3, #0
 801864e:	e00d      	b.n	801866c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018650:	697b      	ldr	r3, [r7, #20]
 8018652:	68db      	ldr	r3, [r3, #12]
 8018654:	617b      	str	r3, [r7, #20]
 8018656:	697b      	ldr	r3, [r7, #20]
 8018658:	2b00      	cmp	r3, #0
 801865a:	d1f3      	bne.n	8018644 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801865c:	4b09      	ldr	r3, [pc, #36]	@ (8018684 <udp_connect+0xd8>)
 801865e:	681a      	ldr	r2, [r3, #0]
 8018660:	68fb      	ldr	r3, [r7, #12]
 8018662:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8018664:	4a07      	ldr	r2, [pc, #28]	@ (8018684 <udp_connect+0xd8>)
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801866a:	2300      	movs	r3, #0
}
 801866c:	4618      	mov	r0, r3
 801866e:	3718      	adds	r7, #24
 8018670:	46bd      	mov	sp, r7
 8018672:	bd80      	pop	{r7, pc}
 8018674:	08024c94 	.word	0x08024c94
 8018678:	08024f74 	.word	0x08024f74
 801867c:	08024ce8 	.word	0x08024ce8
 8018680:	08024f90 	.word	0x08024f90
 8018684:	200126cc 	.word	0x200126cc

08018688 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8018688:	b580      	push	{r7, lr}
 801868a:	b082      	sub	sp, #8
 801868c:	af00      	add	r7, sp, #0
 801868e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	2b00      	cmp	r3, #0
 8018694:	d107      	bne.n	80186a6 <udp_disconnect+0x1e>
 8018696:	4b0d      	ldr	r3, [pc, #52]	@ (80186cc <udp_disconnect+0x44>)
 8018698:	f240 426a 	movw	r2, #1130	@ 0x46a
 801869c:	490c      	ldr	r1, [pc, #48]	@ (80186d0 <udp_disconnect+0x48>)
 801869e:	480d      	ldr	r0, [pc, #52]	@ (80186d4 <udp_disconnect+0x4c>)
 80186a0:	f005 fe1c 	bl	801e2dc <iprintf>
 80186a4:	e00f      	b.n	80186c6 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	2200      	movs	r2, #0
 80186aa:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	2200      	movs	r2, #0
 80186b0:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	2200      	movs	r2, #0
 80186b6:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	7c1b      	ldrb	r3, [r3, #16]
 80186bc:	f023 0304 	bic.w	r3, r3, #4
 80186c0:	b2da      	uxtb	r2, r3
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	741a      	strb	r2, [r3, #16]
}
 80186c6:	3708      	adds	r7, #8
 80186c8:	46bd      	mov	sp, r7
 80186ca:	bd80      	pop	{r7, pc}
 80186cc:	08024c94 	.word	0x08024c94
 80186d0:	08024fac 	.word	0x08024fac
 80186d4:	08024ce8 	.word	0x08024ce8

080186d8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80186d8:	b580      	push	{r7, lr}
 80186da:	b084      	sub	sp, #16
 80186dc:	af00      	add	r7, sp, #0
 80186de:	60f8      	str	r0, [r7, #12]
 80186e0:	60b9      	str	r1, [r7, #8]
 80186e2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80186e4:	68fb      	ldr	r3, [r7, #12]
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d107      	bne.n	80186fa <udp_recv+0x22>
 80186ea:	4b08      	ldr	r3, [pc, #32]	@ (801870c <udp_recv+0x34>)
 80186ec:	f240 428a 	movw	r2, #1162	@ 0x48a
 80186f0:	4907      	ldr	r1, [pc, #28]	@ (8018710 <udp_recv+0x38>)
 80186f2:	4808      	ldr	r0, [pc, #32]	@ (8018714 <udp_recv+0x3c>)
 80186f4:	f005 fdf2 	bl	801e2dc <iprintf>
 80186f8:	e005      	b.n	8018706 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	68ba      	ldr	r2, [r7, #8]
 80186fe:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	687a      	ldr	r2, [r7, #4]
 8018704:	61da      	str	r2, [r3, #28]
}
 8018706:	3710      	adds	r7, #16
 8018708:	46bd      	mov	sp, r7
 801870a:	bd80      	pop	{r7, pc}
 801870c:	08024c94 	.word	0x08024c94
 8018710:	08024fc8 	.word	0x08024fc8
 8018714:	08024ce8 	.word	0x08024ce8

08018718 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8018718:	b580      	push	{r7, lr}
 801871a:	b084      	sub	sp, #16
 801871c:	af00      	add	r7, sp, #0
 801871e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	2b00      	cmp	r3, #0
 8018724:	d107      	bne.n	8018736 <udp_remove+0x1e>
 8018726:	4b19      	ldr	r3, [pc, #100]	@ (801878c <udp_remove+0x74>)
 8018728:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801872c:	4918      	ldr	r1, [pc, #96]	@ (8018790 <udp_remove+0x78>)
 801872e:	4819      	ldr	r0, [pc, #100]	@ (8018794 <udp_remove+0x7c>)
 8018730:	f005 fdd4 	bl	801e2dc <iprintf>
 8018734:	e026      	b.n	8018784 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8018736:	4b18      	ldr	r3, [pc, #96]	@ (8018798 <udp_remove+0x80>)
 8018738:	681b      	ldr	r3, [r3, #0]
 801873a:	687a      	ldr	r2, [r7, #4]
 801873c:	429a      	cmp	r2, r3
 801873e:	d105      	bne.n	801874c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8018740:	4b15      	ldr	r3, [pc, #84]	@ (8018798 <udp_remove+0x80>)
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	68db      	ldr	r3, [r3, #12]
 8018746:	4a14      	ldr	r2, [pc, #80]	@ (8018798 <udp_remove+0x80>)
 8018748:	6013      	str	r3, [r2, #0]
 801874a:	e017      	b.n	801877c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801874c:	4b12      	ldr	r3, [pc, #72]	@ (8018798 <udp_remove+0x80>)
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	60fb      	str	r3, [r7, #12]
 8018752:	e010      	b.n	8018776 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	68db      	ldr	r3, [r3, #12]
 8018758:	2b00      	cmp	r3, #0
 801875a:	d009      	beq.n	8018770 <udp_remove+0x58>
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	68db      	ldr	r3, [r3, #12]
 8018760:	687a      	ldr	r2, [r7, #4]
 8018762:	429a      	cmp	r2, r3
 8018764:	d104      	bne.n	8018770 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	68da      	ldr	r2, [r3, #12]
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	60da      	str	r2, [r3, #12]
        break;
 801876e:	e005      	b.n	801877c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018770:	68fb      	ldr	r3, [r7, #12]
 8018772:	68db      	ldr	r3, [r3, #12]
 8018774:	60fb      	str	r3, [r7, #12]
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	2b00      	cmp	r3, #0
 801877a:	d1eb      	bne.n	8018754 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801877c:	6879      	ldr	r1, [r7, #4]
 801877e:	2000      	movs	r0, #0
 8018780:	f7f7 fe7a 	bl	8010478 <memp_free>
}
 8018784:	3710      	adds	r7, #16
 8018786:	46bd      	mov	sp, r7
 8018788:	bd80      	pop	{r7, pc}
 801878a:	bf00      	nop
 801878c:	08024c94 	.word	0x08024c94
 8018790:	08024fe0 	.word	0x08024fe0
 8018794:	08024ce8 	.word	0x08024ce8
 8018798:	200126cc 	.word	0x200126cc

0801879c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801879c:	b580      	push	{r7, lr}
 801879e:	b082      	sub	sp, #8
 80187a0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80187a2:	2000      	movs	r0, #0
 80187a4:	f7f7 fdf2 	bl	801038c <memp_malloc>
 80187a8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d007      	beq.n	80187c0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80187b0:	2220      	movs	r2, #32
 80187b2:	2100      	movs	r1, #0
 80187b4:	6878      	ldr	r0, [r7, #4]
 80187b6:	f005 fe30 	bl	801e41a <memset>
    pcb->ttl = UDP_TTL;
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	22ff      	movs	r2, #255	@ 0xff
 80187be:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80187c0:	687b      	ldr	r3, [r7, #4]
}
 80187c2:	4618      	mov	r0, r3
 80187c4:	3708      	adds	r7, #8
 80187c6:	46bd      	mov	sp, r7
 80187c8:	bd80      	pop	{r7, pc}

080187ca <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80187ca:	b580      	push	{r7, lr}
 80187cc:	b084      	sub	sp, #16
 80187ce:	af00      	add	r7, sp, #0
 80187d0:	4603      	mov	r3, r0
 80187d2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80187d4:	f7ff ffe2 	bl	801879c <udp_new>
 80187d8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80187da:	68fb      	ldr	r3, [r7, #12]
}
 80187dc:	4618      	mov	r0, r3
 80187de:	3710      	adds	r7, #16
 80187e0:	46bd      	mov	sp, r7
 80187e2:	bd80      	pop	{r7, pc}

080187e4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80187e4:	b480      	push	{r7}
 80187e6:	b085      	sub	sp, #20
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	6078      	str	r0, [r7, #4]
 80187ec:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80187ee:	687b      	ldr	r3, [r7, #4]
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d01e      	beq.n	8018832 <udp_netif_ip_addr_changed+0x4e>
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d01a      	beq.n	8018832 <udp_netif_ip_addr_changed+0x4e>
 80187fc:	683b      	ldr	r3, [r7, #0]
 80187fe:	2b00      	cmp	r3, #0
 8018800:	d017      	beq.n	8018832 <udp_netif_ip_addr_changed+0x4e>
 8018802:	683b      	ldr	r3, [r7, #0]
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	2b00      	cmp	r3, #0
 8018808:	d013      	beq.n	8018832 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801880a:	4b0d      	ldr	r3, [pc, #52]	@ (8018840 <udp_netif_ip_addr_changed+0x5c>)
 801880c:	681b      	ldr	r3, [r3, #0]
 801880e:	60fb      	str	r3, [r7, #12]
 8018810:	e00c      	b.n	801882c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018812:	68fb      	ldr	r3, [r7, #12]
 8018814:	681a      	ldr	r2, [r3, #0]
 8018816:	687b      	ldr	r3, [r7, #4]
 8018818:	681b      	ldr	r3, [r3, #0]
 801881a:	429a      	cmp	r2, r3
 801881c:	d103      	bne.n	8018826 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801881e:	683b      	ldr	r3, [r7, #0]
 8018820:	681a      	ldr	r2, [r3, #0]
 8018822:	68fb      	ldr	r3, [r7, #12]
 8018824:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	68db      	ldr	r3, [r3, #12]
 801882a:	60fb      	str	r3, [r7, #12]
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	2b00      	cmp	r3, #0
 8018830:	d1ef      	bne.n	8018812 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018832:	bf00      	nop
 8018834:	3714      	adds	r7, #20
 8018836:	46bd      	mov	sp, r7
 8018838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801883c:	4770      	bx	lr
 801883e:	bf00      	nop
 8018840:	200126cc 	.word	0x200126cc

08018844 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8018844:	b580      	push	{r7, lr}
 8018846:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8018848:	4b20      	ldr	r3, [pc, #128]	@ (80188cc <dhcp_inc_pcb_refcount+0x88>)
 801884a:	781b      	ldrb	r3, [r3, #0]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d133      	bne.n	80188b8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8018850:	4b1f      	ldr	r3, [pc, #124]	@ (80188d0 <dhcp_inc_pcb_refcount+0x8c>)
 8018852:	681b      	ldr	r3, [r3, #0]
 8018854:	2b00      	cmp	r3, #0
 8018856:	d005      	beq.n	8018864 <dhcp_inc_pcb_refcount+0x20>
 8018858:	4b1e      	ldr	r3, [pc, #120]	@ (80188d4 <dhcp_inc_pcb_refcount+0x90>)
 801885a:	22e5      	movs	r2, #229	@ 0xe5
 801885c:	491e      	ldr	r1, [pc, #120]	@ (80188d8 <dhcp_inc_pcb_refcount+0x94>)
 801885e:	481f      	ldr	r0, [pc, #124]	@ (80188dc <dhcp_inc_pcb_refcount+0x98>)
 8018860:	f005 fd3c 	bl	801e2dc <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8018864:	f7ff ff9a 	bl	801879c <udp_new>
 8018868:	4603      	mov	r3, r0
 801886a:	4a19      	ldr	r2, [pc, #100]	@ (80188d0 <dhcp_inc_pcb_refcount+0x8c>)
 801886c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801886e:	4b18      	ldr	r3, [pc, #96]	@ (80188d0 <dhcp_inc_pcb_refcount+0x8c>)
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	2b00      	cmp	r3, #0
 8018874:	d102      	bne.n	801887c <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8018876:	f04f 33ff 	mov.w	r3, #4294967295
 801887a:	e024      	b.n	80188c6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 801887c:	4b14      	ldr	r3, [pc, #80]	@ (80188d0 <dhcp_inc_pcb_refcount+0x8c>)
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	7a5a      	ldrb	r2, [r3, #9]
 8018882:	4b13      	ldr	r3, [pc, #76]	@ (80188d0 <dhcp_inc_pcb_refcount+0x8c>)
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	f042 0220 	orr.w	r2, r2, #32
 801888a:	b2d2      	uxtb	r2, r2
 801888c:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 801888e:	4b10      	ldr	r3, [pc, #64]	@ (80188d0 <dhcp_inc_pcb_refcount+0x8c>)
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	2244      	movs	r2, #68	@ 0x44
 8018894:	4912      	ldr	r1, [pc, #72]	@ (80188e0 <dhcp_inc_pcb_refcount+0x9c>)
 8018896:	4618      	mov	r0, r3
 8018898:	f7ff fe00 	bl	801849c <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801889c:	4b0c      	ldr	r3, [pc, #48]	@ (80188d0 <dhcp_inc_pcb_refcount+0x8c>)
 801889e:	681b      	ldr	r3, [r3, #0]
 80188a0:	2243      	movs	r2, #67	@ 0x43
 80188a2:	490f      	ldr	r1, [pc, #60]	@ (80188e0 <dhcp_inc_pcb_refcount+0x9c>)
 80188a4:	4618      	mov	r0, r3
 80188a6:	f7ff fe81 	bl	80185ac <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80188aa:	4b09      	ldr	r3, [pc, #36]	@ (80188d0 <dhcp_inc_pcb_refcount+0x8c>)
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	2200      	movs	r2, #0
 80188b0:	490c      	ldr	r1, [pc, #48]	@ (80188e4 <dhcp_inc_pcb_refcount+0xa0>)
 80188b2:	4618      	mov	r0, r3
 80188b4:	f7ff ff10 	bl	80186d8 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80188b8:	4b04      	ldr	r3, [pc, #16]	@ (80188cc <dhcp_inc_pcb_refcount+0x88>)
 80188ba:	781b      	ldrb	r3, [r3, #0]
 80188bc:	3301      	adds	r3, #1
 80188be:	b2da      	uxtb	r2, r3
 80188c0:	4b02      	ldr	r3, [pc, #8]	@ (80188cc <dhcp_inc_pcb_refcount+0x88>)
 80188c2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80188c4:	2300      	movs	r3, #0
}
 80188c6:	4618      	mov	r0, r3
 80188c8:	bd80      	pop	{r7, pc}
 80188ca:	bf00      	nop
 80188cc:	20012708 	.word	0x20012708
 80188d0:	20012704 	.word	0x20012704
 80188d4:	08024ff8 	.word	0x08024ff8
 80188d8:	08025030 	.word	0x08025030
 80188dc:	08025058 	.word	0x08025058
 80188e0:	08025d70 	.word	0x08025d70
 80188e4:	0801a20d 	.word	0x0801a20d

080188e8 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80188e8:	b580      	push	{r7, lr}
 80188ea:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80188ec:	4b0e      	ldr	r3, [pc, #56]	@ (8018928 <dhcp_dec_pcb_refcount+0x40>)
 80188ee:	781b      	ldrb	r3, [r3, #0]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d105      	bne.n	8018900 <dhcp_dec_pcb_refcount+0x18>
 80188f4:	4b0d      	ldr	r3, [pc, #52]	@ (801892c <dhcp_dec_pcb_refcount+0x44>)
 80188f6:	22ff      	movs	r2, #255	@ 0xff
 80188f8:	490d      	ldr	r1, [pc, #52]	@ (8018930 <dhcp_dec_pcb_refcount+0x48>)
 80188fa:	480e      	ldr	r0, [pc, #56]	@ (8018934 <dhcp_dec_pcb_refcount+0x4c>)
 80188fc:	f005 fcee 	bl	801e2dc <iprintf>
  dhcp_pcb_refcount--;
 8018900:	4b09      	ldr	r3, [pc, #36]	@ (8018928 <dhcp_dec_pcb_refcount+0x40>)
 8018902:	781b      	ldrb	r3, [r3, #0]
 8018904:	3b01      	subs	r3, #1
 8018906:	b2da      	uxtb	r2, r3
 8018908:	4b07      	ldr	r3, [pc, #28]	@ (8018928 <dhcp_dec_pcb_refcount+0x40>)
 801890a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801890c:	4b06      	ldr	r3, [pc, #24]	@ (8018928 <dhcp_dec_pcb_refcount+0x40>)
 801890e:	781b      	ldrb	r3, [r3, #0]
 8018910:	2b00      	cmp	r3, #0
 8018912:	d107      	bne.n	8018924 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8018914:	4b08      	ldr	r3, [pc, #32]	@ (8018938 <dhcp_dec_pcb_refcount+0x50>)
 8018916:	681b      	ldr	r3, [r3, #0]
 8018918:	4618      	mov	r0, r3
 801891a:	f7ff fefd 	bl	8018718 <udp_remove>
    dhcp_pcb = NULL;
 801891e:	4b06      	ldr	r3, [pc, #24]	@ (8018938 <dhcp_dec_pcb_refcount+0x50>)
 8018920:	2200      	movs	r2, #0
 8018922:	601a      	str	r2, [r3, #0]
  }
}
 8018924:	bf00      	nop
 8018926:	bd80      	pop	{r7, pc}
 8018928:	20012708 	.word	0x20012708
 801892c:	08024ff8 	.word	0x08024ff8
 8018930:	08025080 	.word	0x08025080
 8018934:	08025058 	.word	0x08025058
 8018938:	20012704 	.word	0x20012704

0801893c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801893c:	b580      	push	{r7, lr}
 801893e:	b084      	sub	sp, #16
 8018940:	af00      	add	r7, sp, #0
 8018942:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018948:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801894a:	210c      	movs	r1, #12
 801894c:	68f8      	ldr	r0, [r7, #12]
 801894e:	f001 f86f 	bl	8019a30 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8018952:	4b06      	ldr	r3, [pc, #24]	@ (801896c <dhcp_handle_nak+0x30>)
 8018954:	4a05      	ldr	r2, [pc, #20]	@ (801896c <dhcp_handle_nak+0x30>)
 8018956:	4905      	ldr	r1, [pc, #20]	@ (801896c <dhcp_handle_nak+0x30>)
 8018958:	6878      	ldr	r0, [r7, #4]
 801895a:	f7f7 ff2f 	bl	80107bc <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801895e:	6878      	ldr	r0, [r7, #4]
 8018960:	f000 fc68 	bl	8019234 <dhcp_discover>
}
 8018964:	bf00      	nop
 8018966:	3710      	adds	r7, #16
 8018968:	46bd      	mov	sp, r7
 801896a:	bd80      	pop	{r7, pc}
 801896c:	08025d70 	.word	0x08025d70

08018970 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8018970:	b580      	push	{r7, lr}
 8018972:	b084      	sub	sp, #16
 8018974:	af00      	add	r7, sp, #0
 8018976:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801897c:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 801897e:	2108      	movs	r1, #8
 8018980:	68f8      	ldr	r0, [r7, #12]
 8018982:	f001 f855 	bl	8019a30 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	331c      	adds	r3, #28
 801898a:	2200      	movs	r2, #0
 801898c:	4619      	mov	r1, r3
 801898e:	6878      	ldr	r0, [r7, #4]
 8018990:	f002 fb86 	bl	801b0a0 <etharp_query>
 8018994:	4603      	mov	r3, r0
 8018996:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8018998:	68fb      	ldr	r3, [r7, #12]
 801899a:	799b      	ldrb	r3, [r3, #6]
 801899c:	2bff      	cmp	r3, #255	@ 0xff
 801899e:	d005      	beq.n	80189ac <dhcp_check+0x3c>
    dhcp->tries++;
 80189a0:	68fb      	ldr	r3, [r7, #12]
 80189a2:	799b      	ldrb	r3, [r3, #6]
 80189a4:	3301      	adds	r3, #1
 80189a6:	b2da      	uxtb	r2, r3
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80189ac:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80189b0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80189b2:	893b      	ldrh	r3, [r7, #8]
 80189b4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80189b8:	4a06      	ldr	r2, [pc, #24]	@ (80189d4 <dhcp_check+0x64>)
 80189ba:	fb82 1203 	smull	r1, r2, r2, r3
 80189be:	1152      	asrs	r2, r2, #5
 80189c0:	17db      	asrs	r3, r3, #31
 80189c2:	1ad3      	subs	r3, r2, r3
 80189c4:	b29a      	uxth	r2, r3
 80189c6:	68fb      	ldr	r3, [r7, #12]
 80189c8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80189ca:	bf00      	nop
 80189cc:	3710      	adds	r7, #16
 80189ce:	46bd      	mov	sp, r7
 80189d0:	bd80      	pop	{r7, pc}
 80189d2:	bf00      	nop
 80189d4:	10624dd3 	.word	0x10624dd3

080189d8 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80189d8:	b580      	push	{r7, lr}
 80189da:	b084      	sub	sp, #16
 80189dc:	af00      	add	r7, sp, #0
 80189de:	6078      	str	r0, [r7, #4]
 80189e0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80189e6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80189e8:	4b0c      	ldr	r3, [pc, #48]	@ (8018a1c <dhcp_handle_offer+0x44>)
 80189ea:	789b      	ldrb	r3, [r3, #2]
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	d011      	beq.n	8018a14 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	2200      	movs	r2, #0
 80189f4:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80189f6:	4b0a      	ldr	r3, [pc, #40]	@ (8018a20 <dhcp_handle_offer+0x48>)
 80189f8:	689b      	ldr	r3, [r3, #8]
 80189fa:	4618      	mov	r0, r3
 80189fc:	f7f6 fd15 	bl	800f42a <lwip_htonl>
 8018a00:	4602      	mov	r2, r0
 8018a02:	68fb      	ldr	r3, [r7, #12]
 8018a04:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8018a06:	683b      	ldr	r3, [r7, #0]
 8018a08:	691a      	ldr	r2, [r3, #16]
 8018a0a:	68fb      	ldr	r3, [r7, #12]
 8018a0c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8018a0e:	6878      	ldr	r0, [r7, #4]
 8018a10:	f000 f808 	bl	8018a24 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8018a14:	bf00      	nop
 8018a16:	3710      	adds	r7, #16
 8018a18:	46bd      	mov	sp, r7
 8018a1a:	bd80      	pop	{r7, pc}
 8018a1c:	200126f8 	.word	0x200126f8
 8018a20:	200126d0 	.word	0x200126d0

08018a24 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8018a24:	b5b0      	push	{r4, r5, r7, lr}
 8018a26:	b08a      	sub	sp, #40	@ 0x28
 8018a28:	af02      	add	r7, sp, #8
 8018a2a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d109      	bne.n	8018a46 <dhcp_select+0x22>
 8018a32:	4b71      	ldr	r3, [pc, #452]	@ (8018bf8 <dhcp_select+0x1d4>)
 8018a34:	f240 1277 	movw	r2, #375	@ 0x177
 8018a38:	4970      	ldr	r1, [pc, #448]	@ (8018bfc <dhcp_select+0x1d8>)
 8018a3a:	4871      	ldr	r0, [pc, #452]	@ (8018c00 <dhcp_select+0x1dc>)
 8018a3c:	f005 fc4e 	bl	801e2dc <iprintf>
 8018a40:	f06f 030f 	mvn.w	r3, #15
 8018a44:	e0d3      	b.n	8018bee <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a4a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8018a4c:	69bb      	ldr	r3, [r7, #24]
 8018a4e:	2b00      	cmp	r3, #0
 8018a50:	d109      	bne.n	8018a66 <dhcp_select+0x42>
 8018a52:	4b69      	ldr	r3, [pc, #420]	@ (8018bf8 <dhcp_select+0x1d4>)
 8018a54:	f240 1279 	movw	r2, #377	@ 0x179
 8018a58:	496a      	ldr	r1, [pc, #424]	@ (8018c04 <dhcp_select+0x1e0>)
 8018a5a:	4869      	ldr	r0, [pc, #420]	@ (8018c00 <dhcp_select+0x1dc>)
 8018a5c:	f005 fc3e 	bl	801e2dc <iprintf>
 8018a60:	f06f 0305 	mvn.w	r3, #5
 8018a64:	e0c3      	b.n	8018bee <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8018a66:	2101      	movs	r1, #1
 8018a68:	69b8      	ldr	r0, [r7, #24]
 8018a6a:	f000 ffe1 	bl	8019a30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8018a6e:	f107 030c 	add.w	r3, r7, #12
 8018a72:	2203      	movs	r2, #3
 8018a74:	69b9      	ldr	r1, [r7, #24]
 8018a76:	6878      	ldr	r0, [r7, #4]
 8018a78:	f001 fc96 	bl	801a3a8 <dhcp_create_msg>
 8018a7c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018a7e:	697b      	ldr	r3, [r7, #20]
 8018a80:	2b00      	cmp	r3, #0
 8018a82:	f000 8085 	beq.w	8018b90 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018a86:	697b      	ldr	r3, [r7, #20]
 8018a88:	685b      	ldr	r3, [r3, #4]
 8018a8a:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018a8c:	89b8      	ldrh	r0, [r7, #12]
 8018a8e:	693b      	ldr	r3, [r7, #16]
 8018a90:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018a94:	2302      	movs	r3, #2
 8018a96:	2239      	movs	r2, #57	@ 0x39
 8018a98:	f000 ffe4 	bl	8019a64 <dhcp_option>
 8018a9c:	4603      	mov	r3, r0
 8018a9e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018aa0:	89b8      	ldrh	r0, [r7, #12]
 8018aa2:	693b      	ldr	r3, [r7, #16]
 8018aa4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018aac:	461a      	mov	r2, r3
 8018aae:	f001 f833 	bl	8019b18 <dhcp_option_short>
 8018ab2:	4603      	mov	r3, r0
 8018ab4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8018ab6:	89b8      	ldrh	r0, [r7, #12]
 8018ab8:	693b      	ldr	r3, [r7, #16]
 8018aba:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018abe:	2304      	movs	r3, #4
 8018ac0:	2232      	movs	r2, #50	@ 0x32
 8018ac2:	f000 ffcf 	bl	8019a64 <dhcp_option>
 8018ac6:	4603      	mov	r3, r0
 8018ac8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8018aca:	89bc      	ldrh	r4, [r7, #12]
 8018acc:	693b      	ldr	r3, [r7, #16]
 8018ace:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8018ad2:	69bb      	ldr	r3, [r7, #24]
 8018ad4:	69db      	ldr	r3, [r3, #28]
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	f7f6 fca7 	bl	800f42a <lwip_htonl>
 8018adc:	4603      	mov	r3, r0
 8018ade:	461a      	mov	r2, r3
 8018ae0:	4629      	mov	r1, r5
 8018ae2:	4620      	mov	r0, r4
 8018ae4:	f001 f84a 	bl	8019b7c <dhcp_option_long>
 8018ae8:	4603      	mov	r3, r0
 8018aea:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8018aec:	89b8      	ldrh	r0, [r7, #12]
 8018aee:	693b      	ldr	r3, [r7, #16]
 8018af0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018af4:	2304      	movs	r3, #4
 8018af6:	2236      	movs	r2, #54	@ 0x36
 8018af8:	f000 ffb4 	bl	8019a64 <dhcp_option>
 8018afc:	4603      	mov	r3, r0
 8018afe:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8018b00:	89bc      	ldrh	r4, [r7, #12]
 8018b02:	693b      	ldr	r3, [r7, #16]
 8018b04:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8018b08:	69bb      	ldr	r3, [r7, #24]
 8018b0a:	699b      	ldr	r3, [r3, #24]
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	f7f6 fc8c 	bl	800f42a <lwip_htonl>
 8018b12:	4603      	mov	r3, r0
 8018b14:	461a      	mov	r2, r3
 8018b16:	4629      	mov	r1, r5
 8018b18:	4620      	mov	r0, r4
 8018b1a:	f001 f82f 	bl	8019b7c <dhcp_option_long>
 8018b1e:	4603      	mov	r3, r0
 8018b20:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018b22:	89b8      	ldrh	r0, [r7, #12]
 8018b24:	693b      	ldr	r3, [r7, #16]
 8018b26:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018b2a:	2304      	movs	r3, #4
 8018b2c:	2237      	movs	r2, #55	@ 0x37
 8018b2e:	f000 ff99 	bl	8019a64 <dhcp_option>
 8018b32:	4603      	mov	r3, r0
 8018b34:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018b36:	2300      	movs	r3, #0
 8018b38:	77bb      	strb	r3, [r7, #30]
 8018b3a:	e00e      	b.n	8018b5a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018b3c:	89b8      	ldrh	r0, [r7, #12]
 8018b3e:	693b      	ldr	r3, [r7, #16]
 8018b40:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018b44:	7fbb      	ldrb	r3, [r7, #30]
 8018b46:	4a30      	ldr	r2, [pc, #192]	@ (8018c08 <dhcp_select+0x1e4>)
 8018b48:	5cd3      	ldrb	r3, [r2, r3]
 8018b4a:	461a      	mov	r2, r3
 8018b4c:	f000 ffbe 	bl	8019acc <dhcp_option_byte>
 8018b50:	4603      	mov	r3, r0
 8018b52:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018b54:	7fbb      	ldrb	r3, [r7, #30]
 8018b56:	3301      	adds	r3, #1
 8018b58:	77bb      	strb	r3, [r7, #30]
 8018b5a:	7fbb      	ldrb	r3, [r7, #30]
 8018b5c:	2b03      	cmp	r3, #3
 8018b5e:	d9ed      	bls.n	8018b3c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018b60:	89b8      	ldrh	r0, [r7, #12]
 8018b62:	693b      	ldr	r3, [r7, #16]
 8018b64:	33f0      	adds	r3, #240	@ 0xf0
 8018b66:	697a      	ldr	r2, [r7, #20]
 8018b68:	4619      	mov	r1, r3
 8018b6a:	f001 fcf3 	bl	801a554 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8018b6e:	4b27      	ldr	r3, [pc, #156]	@ (8018c0c <dhcp_select+0x1e8>)
 8018b70:	6818      	ldr	r0, [r3, #0]
 8018b72:	4b27      	ldr	r3, [pc, #156]	@ (8018c10 <dhcp_select+0x1ec>)
 8018b74:	9301      	str	r3, [sp, #4]
 8018b76:	687b      	ldr	r3, [r7, #4]
 8018b78:	9300      	str	r3, [sp, #0]
 8018b7a:	2343      	movs	r3, #67	@ 0x43
 8018b7c:	4a25      	ldr	r2, [pc, #148]	@ (8018c14 <dhcp_select+0x1f0>)
 8018b7e:	6979      	ldr	r1, [r7, #20]
 8018b80:	f7ff fba6 	bl	80182d0 <udp_sendto_if_src>
 8018b84:	4603      	mov	r3, r0
 8018b86:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8018b88:	6978      	ldr	r0, [r7, #20]
 8018b8a:	f7f8 fb25 	bl	80111d8 <pbuf_free>
 8018b8e:	e001      	b.n	8018b94 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018b90:	23ff      	movs	r3, #255	@ 0xff
 8018b92:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8018b94:	69bb      	ldr	r3, [r7, #24]
 8018b96:	799b      	ldrb	r3, [r3, #6]
 8018b98:	2bff      	cmp	r3, #255	@ 0xff
 8018b9a:	d005      	beq.n	8018ba8 <dhcp_select+0x184>
    dhcp->tries++;
 8018b9c:	69bb      	ldr	r3, [r7, #24]
 8018b9e:	799b      	ldrb	r3, [r3, #6]
 8018ba0:	3301      	adds	r3, #1
 8018ba2:	b2da      	uxtb	r2, r3
 8018ba4:	69bb      	ldr	r3, [r7, #24]
 8018ba6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8018ba8:	69bb      	ldr	r3, [r7, #24]
 8018baa:	799b      	ldrb	r3, [r3, #6]
 8018bac:	2b05      	cmp	r3, #5
 8018bae:	d80d      	bhi.n	8018bcc <dhcp_select+0x1a8>
 8018bb0:	69bb      	ldr	r3, [r7, #24]
 8018bb2:	799b      	ldrb	r3, [r3, #6]
 8018bb4:	461a      	mov	r2, r3
 8018bb6:	2301      	movs	r3, #1
 8018bb8:	4093      	lsls	r3, r2
 8018bba:	b29b      	uxth	r3, r3
 8018bbc:	461a      	mov	r2, r3
 8018bbe:	0152      	lsls	r2, r2, #5
 8018bc0:	1ad2      	subs	r2, r2, r3
 8018bc2:	0092      	lsls	r2, r2, #2
 8018bc4:	4413      	add	r3, r2
 8018bc6:	00db      	lsls	r3, r3, #3
 8018bc8:	b29b      	uxth	r3, r3
 8018bca:	e001      	b.n	8018bd0 <dhcp_select+0x1ac>
 8018bcc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8018bd0:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018bd2:	89fb      	ldrh	r3, [r7, #14]
 8018bd4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8018bd8:	4a0f      	ldr	r2, [pc, #60]	@ (8018c18 <dhcp_select+0x1f4>)
 8018bda:	fb82 1203 	smull	r1, r2, r2, r3
 8018bde:	1152      	asrs	r2, r2, #5
 8018be0:	17db      	asrs	r3, r3, #31
 8018be2:	1ad3      	subs	r3, r2, r3
 8018be4:	b29a      	uxth	r2, r3
 8018be6:	69bb      	ldr	r3, [r7, #24]
 8018be8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018bea:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018bee:	4618      	mov	r0, r3
 8018bf0:	3720      	adds	r7, #32
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8018bf6:	bf00      	nop
 8018bf8:	08024ff8 	.word	0x08024ff8
 8018bfc:	080250a4 	.word	0x080250a4
 8018c00:	08025058 	.word	0x08025058
 8018c04:	080250c0 	.word	0x080250c0
 8018c08:	20000050 	.word	0x20000050
 8018c0c:	20012704 	.word	0x20012704
 8018c10:	08025d70 	.word	0x08025d70
 8018c14:	08025d74 	.word	0x08025d74
 8018c18:	10624dd3 	.word	0x10624dd3

08018c1c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8018c1c:	b580      	push	{r7, lr}
 8018c1e:	b082      	sub	sp, #8
 8018c20:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8018c22:	4b27      	ldr	r3, [pc, #156]	@ (8018cc0 <dhcp_coarse_tmr+0xa4>)
 8018c24:	681b      	ldr	r3, [r3, #0]
 8018c26:	607b      	str	r3, [r7, #4]
 8018c28:	e042      	b.n	8018cb0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018c2e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8018c30:	683b      	ldr	r3, [r7, #0]
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d039      	beq.n	8018caa <dhcp_coarse_tmr+0x8e>
 8018c36:	683b      	ldr	r3, [r7, #0]
 8018c38:	795b      	ldrb	r3, [r3, #5]
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d035      	beq.n	8018caa <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8018c3e:	683b      	ldr	r3, [r7, #0]
 8018c40:	8a9b      	ldrh	r3, [r3, #20]
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d012      	beq.n	8018c6c <dhcp_coarse_tmr+0x50>
 8018c46:	683b      	ldr	r3, [r7, #0]
 8018c48:	8a5b      	ldrh	r3, [r3, #18]
 8018c4a:	3301      	adds	r3, #1
 8018c4c:	b29a      	uxth	r2, r3
 8018c4e:	683b      	ldr	r3, [r7, #0]
 8018c50:	825a      	strh	r2, [r3, #18]
 8018c52:	683b      	ldr	r3, [r7, #0]
 8018c54:	8a5a      	ldrh	r2, [r3, #18]
 8018c56:	683b      	ldr	r3, [r7, #0]
 8018c58:	8a9b      	ldrh	r3, [r3, #20]
 8018c5a:	429a      	cmp	r2, r3
 8018c5c:	d106      	bne.n	8018c6c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8018c5e:	6878      	ldr	r0, [r7, #4]
 8018c60:	f000 fe4c 	bl	80198fc <dhcp_release_and_stop>
        dhcp_start(netif);
 8018c64:	6878      	ldr	r0, [r7, #4]
 8018c66:	f000 f989 	bl	8018f7c <dhcp_start>
 8018c6a:	e01e      	b.n	8018caa <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8018c6c:	683b      	ldr	r3, [r7, #0]
 8018c6e:	8a1b      	ldrh	r3, [r3, #16]
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d00b      	beq.n	8018c8c <dhcp_coarse_tmr+0x70>
 8018c74:	683b      	ldr	r3, [r7, #0]
 8018c76:	8a1b      	ldrh	r3, [r3, #16]
 8018c78:	1e5a      	subs	r2, r3, #1
 8018c7a:	b291      	uxth	r1, r2
 8018c7c:	683a      	ldr	r2, [r7, #0]
 8018c7e:	8211      	strh	r1, [r2, #16]
 8018c80:	2b01      	cmp	r3, #1
 8018c82:	d103      	bne.n	8018c8c <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8018c84:	6878      	ldr	r0, [r7, #4]
 8018c86:	f000 f8c6 	bl	8018e16 <dhcp_t2_timeout>
 8018c8a:	e00e      	b.n	8018caa <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8018c8c:	683b      	ldr	r3, [r7, #0]
 8018c8e:	89db      	ldrh	r3, [r3, #14]
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d00a      	beq.n	8018caa <dhcp_coarse_tmr+0x8e>
 8018c94:	683b      	ldr	r3, [r7, #0]
 8018c96:	89db      	ldrh	r3, [r3, #14]
 8018c98:	1e5a      	subs	r2, r3, #1
 8018c9a:	b291      	uxth	r1, r2
 8018c9c:	683a      	ldr	r2, [r7, #0]
 8018c9e:	81d1      	strh	r1, [r2, #14]
 8018ca0:	2b01      	cmp	r3, #1
 8018ca2:	d102      	bne.n	8018caa <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8018ca4:	6878      	ldr	r0, [r7, #4]
 8018ca6:	f000 f888 	bl	8018dba <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	681b      	ldr	r3, [r3, #0]
 8018cae:	607b      	str	r3, [r7, #4]
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	2b00      	cmp	r3, #0
 8018cb4:	d1b9      	bne.n	8018c2a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8018cb6:	bf00      	nop
 8018cb8:	bf00      	nop
 8018cba:	3708      	adds	r7, #8
 8018cbc:	46bd      	mov	sp, r7
 8018cbe:	bd80      	pop	{r7, pc}
 8018cc0:	20012664 	.word	0x20012664

08018cc4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8018cc4:	b580      	push	{r7, lr}
 8018cc6:	b082      	sub	sp, #8
 8018cc8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8018cca:	4b16      	ldr	r3, [pc, #88]	@ (8018d24 <dhcp_fine_tmr+0x60>)
 8018ccc:	681b      	ldr	r3, [r3, #0]
 8018cce:	607b      	str	r3, [r7, #4]
 8018cd0:	e020      	b.n	8018d14 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8018cd2:	687b      	ldr	r3, [r7, #4]
 8018cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018cd6:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8018cd8:	683b      	ldr	r3, [r7, #0]
 8018cda:	2b00      	cmp	r3, #0
 8018cdc:	d017      	beq.n	8018d0e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8018cde:	683b      	ldr	r3, [r7, #0]
 8018ce0:	891b      	ldrh	r3, [r3, #8]
 8018ce2:	2b01      	cmp	r3, #1
 8018ce4:	d906      	bls.n	8018cf4 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8018ce6:	683b      	ldr	r3, [r7, #0]
 8018ce8:	891b      	ldrh	r3, [r3, #8]
 8018cea:	3b01      	subs	r3, #1
 8018cec:	b29a      	uxth	r2, r3
 8018cee:	683b      	ldr	r3, [r7, #0]
 8018cf0:	811a      	strh	r2, [r3, #8]
 8018cf2:	e00c      	b.n	8018d0e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8018cf4:	683b      	ldr	r3, [r7, #0]
 8018cf6:	891b      	ldrh	r3, [r3, #8]
 8018cf8:	2b01      	cmp	r3, #1
 8018cfa:	d108      	bne.n	8018d0e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8018cfc:	683b      	ldr	r3, [r7, #0]
 8018cfe:	891b      	ldrh	r3, [r3, #8]
 8018d00:	3b01      	subs	r3, #1
 8018d02:	b29a      	uxth	r2, r3
 8018d04:	683b      	ldr	r3, [r7, #0]
 8018d06:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8018d08:	6878      	ldr	r0, [r7, #4]
 8018d0a:	f000 f80d 	bl	8018d28 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	607b      	str	r3, [r7, #4]
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	2b00      	cmp	r3, #0
 8018d18:	d1db      	bne.n	8018cd2 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8018d1a:	bf00      	nop
 8018d1c:	bf00      	nop
 8018d1e:	3708      	adds	r7, #8
 8018d20:	46bd      	mov	sp, r7
 8018d22:	bd80      	pop	{r7, pc}
 8018d24:	20012664 	.word	0x20012664

08018d28 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8018d28:	b580      	push	{r7, lr}
 8018d2a:	b084      	sub	sp, #16
 8018d2c:	af00      	add	r7, sp, #0
 8018d2e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d34:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8018d36:	68fb      	ldr	r3, [r7, #12]
 8018d38:	795b      	ldrb	r3, [r3, #5]
 8018d3a:	2b0c      	cmp	r3, #12
 8018d3c:	d003      	beq.n	8018d46 <dhcp_timeout+0x1e>
 8018d3e:	68fb      	ldr	r3, [r7, #12]
 8018d40:	795b      	ldrb	r3, [r3, #5]
 8018d42:	2b06      	cmp	r3, #6
 8018d44:	d103      	bne.n	8018d4e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8018d46:	6878      	ldr	r0, [r7, #4]
 8018d48:	f000 fa74 	bl	8019234 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8018d4c:	e031      	b.n	8018db2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8018d4e:	68fb      	ldr	r3, [r7, #12]
 8018d50:	795b      	ldrb	r3, [r3, #5]
 8018d52:	2b01      	cmp	r3, #1
 8018d54:	d10e      	bne.n	8018d74 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8018d56:	68fb      	ldr	r3, [r7, #12]
 8018d58:	799b      	ldrb	r3, [r3, #6]
 8018d5a:	2b05      	cmp	r3, #5
 8018d5c:	d803      	bhi.n	8018d66 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8018d5e:	6878      	ldr	r0, [r7, #4]
 8018d60:	f7ff fe60 	bl	8018a24 <dhcp_select>
}
 8018d64:	e025      	b.n	8018db2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8018d66:	6878      	ldr	r0, [r7, #4]
 8018d68:	f000 fdc8 	bl	80198fc <dhcp_release_and_stop>
      dhcp_start(netif);
 8018d6c:	6878      	ldr	r0, [r7, #4]
 8018d6e:	f000 f905 	bl	8018f7c <dhcp_start>
}
 8018d72:	e01e      	b.n	8018db2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8018d74:	68fb      	ldr	r3, [r7, #12]
 8018d76:	795b      	ldrb	r3, [r3, #5]
 8018d78:	2b08      	cmp	r3, #8
 8018d7a:	d10b      	bne.n	8018d94 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8018d7c:	68fb      	ldr	r3, [r7, #12]
 8018d7e:	799b      	ldrb	r3, [r3, #6]
 8018d80:	2b01      	cmp	r3, #1
 8018d82:	d803      	bhi.n	8018d8c <dhcp_timeout+0x64>
      dhcp_check(netif);
 8018d84:	6878      	ldr	r0, [r7, #4]
 8018d86:	f7ff fdf3 	bl	8018970 <dhcp_check>
}
 8018d8a:	e012      	b.n	8018db2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8018d8c:	6878      	ldr	r0, [r7, #4]
 8018d8e:	f000 faf3 	bl	8019378 <dhcp_bind>
}
 8018d92:	e00e      	b.n	8018db2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	795b      	ldrb	r3, [r3, #5]
 8018d98:	2b03      	cmp	r3, #3
 8018d9a:	d10a      	bne.n	8018db2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8018d9c:	68fb      	ldr	r3, [r7, #12]
 8018d9e:	799b      	ldrb	r3, [r3, #6]
 8018da0:	2b01      	cmp	r3, #1
 8018da2:	d803      	bhi.n	8018dac <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8018da4:	6878      	ldr	r0, [r7, #4]
 8018da6:	f000 fcf5 	bl	8019794 <dhcp_reboot>
}
 8018daa:	e002      	b.n	8018db2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8018dac:	6878      	ldr	r0, [r7, #4]
 8018dae:	f000 fa41 	bl	8019234 <dhcp_discover>
}
 8018db2:	bf00      	nop
 8018db4:	3710      	adds	r7, #16
 8018db6:	46bd      	mov	sp, r7
 8018db8:	bd80      	pop	{r7, pc}

08018dba <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8018dba:	b580      	push	{r7, lr}
 8018dbc:	b084      	sub	sp, #16
 8018dbe:	af00      	add	r7, sp, #0
 8018dc0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018dc2:	687b      	ldr	r3, [r7, #4]
 8018dc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018dc6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	795b      	ldrb	r3, [r3, #5]
 8018dcc:	2b01      	cmp	r3, #1
 8018dce:	d007      	beq.n	8018de0 <dhcp_t1_timeout+0x26>
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	795b      	ldrb	r3, [r3, #5]
 8018dd4:	2b0a      	cmp	r3, #10
 8018dd6:	d003      	beq.n	8018de0 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8018dd8:	68fb      	ldr	r3, [r7, #12]
 8018dda:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018ddc:	2b05      	cmp	r3, #5
 8018dde:	d116      	bne.n	8018e0e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8018de0:	6878      	ldr	r0, [r7, #4]
 8018de2:	f000 fba3 	bl	801952c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8018de6:	68fb      	ldr	r3, [r7, #12]
 8018de8:	899b      	ldrh	r3, [r3, #12]
 8018dea:	461a      	mov	r2, r3
 8018dec:	68fb      	ldr	r3, [r7, #12]
 8018dee:	8a5b      	ldrh	r3, [r3, #18]
 8018df0:	1ad3      	subs	r3, r2, r3
 8018df2:	2b01      	cmp	r3, #1
 8018df4:	dd0b      	ble.n	8018e0e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8018df6:	68fb      	ldr	r3, [r7, #12]
 8018df8:	899b      	ldrh	r3, [r3, #12]
 8018dfa:	461a      	mov	r2, r3
 8018dfc:	68fb      	ldr	r3, [r7, #12]
 8018dfe:	8a5b      	ldrh	r3, [r3, #18]
 8018e00:	1ad3      	subs	r3, r2, r3
 8018e02:	0fda      	lsrs	r2, r3, #31
 8018e04:	4413      	add	r3, r2
 8018e06:	105b      	asrs	r3, r3, #1
 8018e08:	b29a      	uxth	r2, r3
 8018e0a:	68fb      	ldr	r3, [r7, #12]
 8018e0c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8018e0e:	bf00      	nop
 8018e10:	3710      	adds	r7, #16
 8018e12:	46bd      	mov	sp, r7
 8018e14:	bd80      	pop	{r7, pc}

08018e16 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8018e16:	b580      	push	{r7, lr}
 8018e18:	b084      	sub	sp, #16
 8018e1a:	af00      	add	r7, sp, #0
 8018e1c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018e1e:	687b      	ldr	r3, [r7, #4]
 8018e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e22:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018e24:	68fb      	ldr	r3, [r7, #12]
 8018e26:	795b      	ldrb	r3, [r3, #5]
 8018e28:	2b01      	cmp	r3, #1
 8018e2a:	d00b      	beq.n	8018e44 <dhcp_t2_timeout+0x2e>
 8018e2c:	68fb      	ldr	r3, [r7, #12]
 8018e2e:	795b      	ldrb	r3, [r3, #5]
 8018e30:	2b0a      	cmp	r3, #10
 8018e32:	d007      	beq.n	8018e44 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8018e34:	68fb      	ldr	r3, [r7, #12]
 8018e36:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018e38:	2b05      	cmp	r3, #5
 8018e3a:	d003      	beq.n	8018e44 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	795b      	ldrb	r3, [r3, #5]
 8018e40:	2b04      	cmp	r3, #4
 8018e42:	d116      	bne.n	8018e72 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8018e44:	6878      	ldr	r0, [r7, #4]
 8018e46:	f000 fc0b 	bl	8019660 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	8a9b      	ldrh	r3, [r3, #20]
 8018e4e:	461a      	mov	r2, r3
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	8a5b      	ldrh	r3, [r3, #18]
 8018e54:	1ad3      	subs	r3, r2, r3
 8018e56:	2b01      	cmp	r3, #1
 8018e58:	dd0b      	ble.n	8018e72 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	8a9b      	ldrh	r3, [r3, #20]
 8018e5e:	461a      	mov	r2, r3
 8018e60:	68fb      	ldr	r3, [r7, #12]
 8018e62:	8a5b      	ldrh	r3, [r3, #18]
 8018e64:	1ad3      	subs	r3, r2, r3
 8018e66:	0fda      	lsrs	r2, r3, #31
 8018e68:	4413      	add	r3, r2
 8018e6a:	105b      	asrs	r3, r3, #1
 8018e6c:	b29a      	uxth	r2, r3
 8018e6e:	68fb      	ldr	r3, [r7, #12]
 8018e70:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8018e72:	bf00      	nop
 8018e74:	3710      	adds	r7, #16
 8018e76:	46bd      	mov	sp, r7
 8018e78:	bd80      	pop	{r7, pc}
	...

08018e7c <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8018e7c:	b580      	push	{r7, lr}
 8018e7e:	b086      	sub	sp, #24
 8018e80:	af00      	add	r7, sp, #0
 8018e82:	6078      	str	r0, [r7, #4]
 8018e84:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e8a:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8018e8c:	693b      	ldr	r3, [r7, #16]
 8018e8e:	2200      	movs	r2, #0
 8018e90:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8018e92:	693b      	ldr	r3, [r7, #16]
 8018e94:	2200      	movs	r2, #0
 8018e96:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8018e98:	4b36      	ldr	r3, [pc, #216]	@ (8018f74 <dhcp_handle_ack+0xf8>)
 8018e9a:	78db      	ldrb	r3, [r3, #3]
 8018e9c:	2b00      	cmp	r3, #0
 8018e9e:	d003      	beq.n	8018ea8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8018ea0:	4b35      	ldr	r3, [pc, #212]	@ (8018f78 <dhcp_handle_ack+0xfc>)
 8018ea2:	68da      	ldr	r2, [r3, #12]
 8018ea4:	693b      	ldr	r3, [r7, #16]
 8018ea6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8018ea8:	4b32      	ldr	r3, [pc, #200]	@ (8018f74 <dhcp_handle_ack+0xf8>)
 8018eaa:	791b      	ldrb	r3, [r3, #4]
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d004      	beq.n	8018eba <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8018eb0:	4b31      	ldr	r3, [pc, #196]	@ (8018f78 <dhcp_handle_ack+0xfc>)
 8018eb2:	691a      	ldr	r2, [r3, #16]
 8018eb4:	693b      	ldr	r3, [r7, #16]
 8018eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8018eb8:	e004      	b.n	8018ec4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8018eba:	693b      	ldr	r3, [r7, #16]
 8018ebc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ebe:	085a      	lsrs	r2, r3, #1
 8018ec0:	693b      	ldr	r3, [r7, #16]
 8018ec2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8018ec4:	4b2b      	ldr	r3, [pc, #172]	@ (8018f74 <dhcp_handle_ack+0xf8>)
 8018ec6:	795b      	ldrb	r3, [r3, #5]
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d004      	beq.n	8018ed6 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8018ecc:	4b2a      	ldr	r3, [pc, #168]	@ (8018f78 <dhcp_handle_ack+0xfc>)
 8018ece:	695a      	ldr	r2, [r3, #20]
 8018ed0:	693b      	ldr	r3, [r7, #16]
 8018ed2:	631a      	str	r2, [r3, #48]	@ 0x30
 8018ed4:	e007      	b.n	8018ee6 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8018ed6:	693b      	ldr	r3, [r7, #16]
 8018ed8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018eda:	4613      	mov	r3, r2
 8018edc:	00db      	lsls	r3, r3, #3
 8018ede:	1a9b      	subs	r3, r3, r2
 8018ee0:	08da      	lsrs	r2, r3, #3
 8018ee2:	693b      	ldr	r3, [r7, #16]
 8018ee4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8018ee6:	683b      	ldr	r3, [r7, #0]
 8018ee8:	691a      	ldr	r2, [r3, #16]
 8018eea:	693b      	ldr	r3, [r7, #16]
 8018eec:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8018eee:	4b21      	ldr	r3, [pc, #132]	@ (8018f74 <dhcp_handle_ack+0xf8>)
 8018ef0:	799b      	ldrb	r3, [r3, #6]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d00b      	beq.n	8018f0e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8018ef6:	4b20      	ldr	r3, [pc, #128]	@ (8018f78 <dhcp_handle_ack+0xfc>)
 8018ef8:	699b      	ldr	r3, [r3, #24]
 8018efa:	4618      	mov	r0, r3
 8018efc:	f7f6 fa95 	bl	800f42a <lwip_htonl>
 8018f00:	4602      	mov	r2, r0
 8018f02:	693b      	ldr	r3, [r7, #16]
 8018f04:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8018f06:	693b      	ldr	r3, [r7, #16]
 8018f08:	2201      	movs	r2, #1
 8018f0a:	71da      	strb	r2, [r3, #7]
 8018f0c:	e002      	b.n	8018f14 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8018f0e:	693b      	ldr	r3, [r7, #16]
 8018f10:	2200      	movs	r2, #0
 8018f12:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8018f14:	4b17      	ldr	r3, [pc, #92]	@ (8018f74 <dhcp_handle_ack+0xf8>)
 8018f16:	79db      	ldrb	r3, [r3, #7]
 8018f18:	2b00      	cmp	r3, #0
 8018f1a:	d007      	beq.n	8018f2c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8018f1c:	4b16      	ldr	r3, [pc, #88]	@ (8018f78 <dhcp_handle_ack+0xfc>)
 8018f1e:	69db      	ldr	r3, [r3, #28]
 8018f20:	4618      	mov	r0, r3
 8018f22:	f7f6 fa82 	bl	800f42a <lwip_htonl>
 8018f26:	4602      	mov	r2, r0
 8018f28:	693b      	ldr	r3, [r7, #16]
 8018f2a:	625a      	str	r2, [r3, #36]	@ 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8018f2c:	2300      	movs	r3, #0
 8018f2e:	75fb      	strb	r3, [r7, #23]
 8018f30:	e013      	b.n	8018f5a <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8018f32:	7dfb      	ldrb	r3, [r7, #23]
 8018f34:	3308      	adds	r3, #8
 8018f36:	4a10      	ldr	r2, [pc, #64]	@ (8018f78 <dhcp_handle_ack+0xfc>)
 8018f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018f3c:	4618      	mov	r0, r3
 8018f3e:	f7f6 fa74 	bl	800f42a <lwip_htonl>
 8018f42:	4603      	mov	r3, r0
 8018f44:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 8018f46:	f107 020c 	add.w	r2, r7, #12
 8018f4a:	7dfb      	ldrb	r3, [r7, #23]
 8018f4c:	4611      	mov	r1, r2
 8018f4e:	4618      	mov	r0, r3
 8018f50:	f7f6 fa8c 	bl	800f46c <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8018f54:	7dfb      	ldrb	r3, [r7, #23]
 8018f56:	3301      	adds	r3, #1
 8018f58:	75fb      	strb	r3, [r7, #23]
 8018f5a:	7dfb      	ldrb	r3, [r7, #23]
 8018f5c:	2b01      	cmp	r3, #1
 8018f5e:	d805      	bhi.n	8018f6c <dhcp_handle_ack+0xf0>
 8018f60:	7dfb      	ldrb	r3, [r7, #23]
 8018f62:	3308      	adds	r3, #8
 8018f64:	4a03      	ldr	r2, [pc, #12]	@ (8018f74 <dhcp_handle_ack+0xf8>)
 8018f66:	5cd3      	ldrb	r3, [r2, r3]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d1e2      	bne.n	8018f32 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8018f6c:	bf00      	nop
 8018f6e:	3718      	adds	r7, #24
 8018f70:	46bd      	mov	sp, r7
 8018f72:	bd80      	pop	{r7, pc}
 8018f74:	200126f8 	.word	0x200126f8
 8018f78:	200126d0 	.word	0x200126d0

08018f7c <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8018f7c:	b580      	push	{r7, lr}
 8018f7e:	b084      	sub	sp, #16
 8018f80:	af00      	add	r7, sp, #0
 8018f82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	2b00      	cmp	r3, #0
 8018f88:	d109      	bne.n	8018f9e <dhcp_start+0x22>
 8018f8a:	4b37      	ldr	r3, [pc, #220]	@ (8019068 <dhcp_start+0xec>)
 8018f8c:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8018f90:	4936      	ldr	r1, [pc, #216]	@ (801906c <dhcp_start+0xf0>)
 8018f92:	4837      	ldr	r0, [pc, #220]	@ (8019070 <dhcp_start+0xf4>)
 8018f94:	f005 f9a2 	bl	801e2dc <iprintf>
 8018f98:	f06f 030f 	mvn.w	r3, #15
 8018f9c:	e060      	b.n	8019060 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018fa4:	f003 0301 	and.w	r3, r3, #1
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d109      	bne.n	8018fc0 <dhcp_start+0x44>
 8018fac:	4b2e      	ldr	r3, [pc, #184]	@ (8019068 <dhcp_start+0xec>)
 8018fae:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8018fb2:	4930      	ldr	r1, [pc, #192]	@ (8019074 <dhcp_start+0xf8>)
 8018fb4:	482e      	ldr	r0, [pc, #184]	@ (8019070 <dhcp_start+0xf4>)
 8018fb6:	f005 f991 	bl	801e2dc <iprintf>
 8018fba:	f06f 030f 	mvn.w	r3, #15
 8018fbe:	e04f      	b.n	8019060 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018fc4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018fca:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8018fce:	d202      	bcs.n	8018fd6 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8018fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8018fd4:	e044      	b.n	8019060 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8018fd6:	68fb      	ldr	r3, [r7, #12]
 8018fd8:	2b00      	cmp	r3, #0
 8018fda:	d10d      	bne.n	8018ff8 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8018fdc:	2034      	movs	r0, #52	@ 0x34
 8018fde:	f7f7 f831 	bl	8010044 <mem_malloc>
 8018fe2:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8018fe4:	68fb      	ldr	r3, [r7, #12]
 8018fe6:	2b00      	cmp	r3, #0
 8018fe8:	d102      	bne.n	8018ff0 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8018fea:	f04f 33ff 	mov.w	r3, #4294967295
 8018fee:	e037      	b.n	8019060 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	68fa      	ldr	r2, [r7, #12]
 8018ff4:	625a      	str	r2, [r3, #36]	@ 0x24
 8018ff6:	e005      	b.n	8019004 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	791b      	ldrb	r3, [r3, #4]
 8018ffc:	2b00      	cmp	r3, #0
 8018ffe:	d001      	beq.n	8019004 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8019000:	f7ff fc72 	bl	80188e8 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8019004:	2234      	movs	r2, #52	@ 0x34
 8019006:	2100      	movs	r1, #0
 8019008:	68f8      	ldr	r0, [r7, #12]
 801900a:	f005 fa06 	bl	801e41a <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801900e:	f7ff fc19 	bl	8018844 <dhcp_inc_pcb_refcount>
 8019012:	4603      	mov	r3, r0
 8019014:	2b00      	cmp	r3, #0
 8019016:	d002      	beq.n	801901e <dhcp_start+0xa2>
    return ERR_MEM;
 8019018:	f04f 33ff 	mov.w	r3, #4294967295
 801901c:	e020      	b.n	8019060 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801901e:	68fb      	ldr	r3, [r7, #12]
 8019020:	2201      	movs	r2, #1
 8019022:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8019024:	687b      	ldr	r3, [r7, #4]
 8019026:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801902a:	f003 0304 	and.w	r3, r3, #4
 801902e:	2b00      	cmp	r3, #0
 8019030:	d105      	bne.n	801903e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8019032:	2102      	movs	r1, #2
 8019034:	68f8      	ldr	r0, [r7, #12]
 8019036:	f000 fcfb 	bl	8019a30 <dhcp_set_state>
    return ERR_OK;
 801903a:	2300      	movs	r3, #0
 801903c:	e010      	b.n	8019060 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801903e:	6878      	ldr	r0, [r7, #4]
 8019040:	f000 f8f8 	bl	8019234 <dhcp_discover>
 8019044:	4603      	mov	r3, r0
 8019046:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8019048:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801904c:	2b00      	cmp	r3, #0
 801904e:	d005      	beq.n	801905c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8019050:	6878      	ldr	r0, [r7, #4]
 8019052:	f000 fc53 	bl	80198fc <dhcp_release_and_stop>
    return ERR_MEM;
 8019056:	f04f 33ff 	mov.w	r3, #4294967295
 801905a:	e001      	b.n	8019060 <dhcp_start+0xe4>
  }
  return result;
 801905c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019060:	4618      	mov	r0, r3
 8019062:	3710      	adds	r7, #16
 8019064:	46bd      	mov	sp, r7
 8019066:	bd80      	pop	{r7, pc}
 8019068:	08024ff8 	.word	0x08024ff8
 801906c:	080250dc 	.word	0x080250dc
 8019070:	08025058 	.word	0x08025058
 8019074:	08025120 	.word	0x08025120

08019078 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8019078:	b580      	push	{r7, lr}
 801907a:	b084      	sub	sp, #16
 801907c:	af00      	add	r7, sp, #0
 801907e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019080:	687b      	ldr	r3, [r7, #4]
 8019082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019084:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	2b00      	cmp	r3, #0
 801908a:	d025      	beq.n	80190d8 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 801908c:	68fb      	ldr	r3, [r7, #12]
 801908e:	795b      	ldrb	r3, [r3, #5]
 8019090:	2b0a      	cmp	r3, #10
 8019092:	d008      	beq.n	80190a6 <dhcp_network_changed+0x2e>
 8019094:	2b0a      	cmp	r3, #10
 8019096:	dc0d      	bgt.n	80190b4 <dhcp_network_changed+0x3c>
 8019098:	2b00      	cmp	r3, #0
 801909a:	d01f      	beq.n	80190dc <dhcp_network_changed+0x64>
 801909c:	2b00      	cmp	r3, #0
 801909e:	db09      	blt.n	80190b4 <dhcp_network_changed+0x3c>
 80190a0:	3b03      	subs	r3, #3
 80190a2:	2b02      	cmp	r3, #2
 80190a4:	d806      	bhi.n	80190b4 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80190a6:	68fb      	ldr	r3, [r7, #12]
 80190a8:	2200      	movs	r2, #0
 80190aa:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80190ac:	6878      	ldr	r0, [r7, #4]
 80190ae:	f000 fb71 	bl	8019794 <dhcp_reboot>
      break;
 80190b2:	e014      	b.n	80190de <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	795b      	ldrb	r3, [r3, #5]
 80190b8:	2b0c      	cmp	r3, #12
 80190ba:	d906      	bls.n	80190ca <dhcp_network_changed+0x52>
 80190bc:	4b09      	ldr	r3, [pc, #36]	@ (80190e4 <dhcp_network_changed+0x6c>)
 80190be:	f240 326d 	movw	r2, #877	@ 0x36d
 80190c2:	4909      	ldr	r1, [pc, #36]	@ (80190e8 <dhcp_network_changed+0x70>)
 80190c4:	4809      	ldr	r0, [pc, #36]	@ (80190ec <dhcp_network_changed+0x74>)
 80190c6:	f005 f909 	bl	801e2dc <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80190ca:	68fb      	ldr	r3, [r7, #12]
 80190cc:	2200      	movs	r2, #0
 80190ce:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80190d0:	6878      	ldr	r0, [r7, #4]
 80190d2:	f000 f8af 	bl	8019234 <dhcp_discover>
      break;
 80190d6:	e002      	b.n	80190de <dhcp_network_changed+0x66>
    return;
 80190d8:	bf00      	nop
 80190da:	e000      	b.n	80190de <dhcp_network_changed+0x66>
      break;
 80190dc:	bf00      	nop
  }
}
 80190de:	3710      	adds	r7, #16
 80190e0:	46bd      	mov	sp, r7
 80190e2:	bd80      	pop	{r7, pc}
 80190e4:	08024ff8 	.word	0x08024ff8
 80190e8:	08025144 	.word	0x08025144
 80190ec:	08025058 	.word	0x08025058

080190f0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80190f0:	b580      	push	{r7, lr}
 80190f2:	b084      	sub	sp, #16
 80190f4:	af00      	add	r7, sp, #0
 80190f6:	6078      	str	r0, [r7, #4]
 80190f8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d107      	bne.n	8019110 <dhcp_arp_reply+0x20>
 8019100:	4b0e      	ldr	r3, [pc, #56]	@ (801913c <dhcp_arp_reply+0x4c>)
 8019102:	f240 328b 	movw	r2, #907	@ 0x38b
 8019106:	490e      	ldr	r1, [pc, #56]	@ (8019140 <dhcp_arp_reply+0x50>)
 8019108:	480e      	ldr	r0, [pc, #56]	@ (8019144 <dhcp_arp_reply+0x54>)
 801910a:	f005 f8e7 	bl	801e2dc <iprintf>
 801910e:	e012      	b.n	8019136 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8019110:	687b      	ldr	r3, [r7, #4]
 8019112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019114:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	2b00      	cmp	r3, #0
 801911a:	d00c      	beq.n	8019136 <dhcp_arp_reply+0x46>
 801911c:	68fb      	ldr	r3, [r7, #12]
 801911e:	795b      	ldrb	r3, [r3, #5]
 8019120:	2b08      	cmp	r3, #8
 8019122:	d108      	bne.n	8019136 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8019124:	683b      	ldr	r3, [r7, #0]
 8019126:	681a      	ldr	r2, [r3, #0]
 8019128:	68fb      	ldr	r3, [r7, #12]
 801912a:	69db      	ldr	r3, [r3, #28]
 801912c:	429a      	cmp	r2, r3
 801912e:	d102      	bne.n	8019136 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8019130:	6878      	ldr	r0, [r7, #4]
 8019132:	f000 f809 	bl	8019148 <dhcp_decline>
    }
  }
}
 8019136:	3710      	adds	r7, #16
 8019138:	46bd      	mov	sp, r7
 801913a:	bd80      	pop	{r7, pc}
 801913c:	08024ff8 	.word	0x08024ff8
 8019140:	080250dc 	.word	0x080250dc
 8019144:	08025058 	.word	0x08025058

08019148 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8019148:	b5b0      	push	{r4, r5, r7, lr}
 801914a:	b08a      	sub	sp, #40	@ 0x28
 801914c:	af02      	add	r7, sp, #8
 801914e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019150:	687b      	ldr	r3, [r7, #4]
 8019152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019154:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8019156:	210c      	movs	r1, #12
 8019158:	69b8      	ldr	r0, [r7, #24]
 801915a:	f000 fc69 	bl	8019a30 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801915e:	f107 030c 	add.w	r3, r7, #12
 8019162:	2204      	movs	r2, #4
 8019164:	69b9      	ldr	r1, [r7, #24]
 8019166:	6878      	ldr	r0, [r7, #4]
 8019168:	f001 f91e 	bl	801a3a8 <dhcp_create_msg>
 801916c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801916e:	697b      	ldr	r3, [r7, #20]
 8019170:	2b00      	cmp	r3, #0
 8019172:	d035      	beq.n	80191e0 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019174:	697b      	ldr	r3, [r7, #20]
 8019176:	685b      	ldr	r3, [r3, #4]
 8019178:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801917a:	89b8      	ldrh	r0, [r7, #12]
 801917c:	693b      	ldr	r3, [r7, #16]
 801917e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019182:	2304      	movs	r3, #4
 8019184:	2232      	movs	r2, #50	@ 0x32
 8019186:	f000 fc6d 	bl	8019a64 <dhcp_option>
 801918a:	4603      	mov	r3, r0
 801918c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801918e:	89bc      	ldrh	r4, [r7, #12]
 8019190:	693b      	ldr	r3, [r7, #16]
 8019192:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8019196:	69bb      	ldr	r3, [r7, #24]
 8019198:	69db      	ldr	r3, [r3, #28]
 801919a:	4618      	mov	r0, r3
 801919c:	f7f6 f945 	bl	800f42a <lwip_htonl>
 80191a0:	4603      	mov	r3, r0
 80191a2:	461a      	mov	r2, r3
 80191a4:	4629      	mov	r1, r5
 80191a6:	4620      	mov	r0, r4
 80191a8:	f000 fce8 	bl	8019b7c <dhcp_option_long>
 80191ac:	4603      	mov	r3, r0
 80191ae:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80191b0:	89b8      	ldrh	r0, [r7, #12]
 80191b2:	693b      	ldr	r3, [r7, #16]
 80191b4:	33f0      	adds	r3, #240	@ 0xf0
 80191b6:	697a      	ldr	r2, [r7, #20]
 80191b8:	4619      	mov	r1, r3
 80191ba:	f001 f9cb 	bl	801a554 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80191be:	4b19      	ldr	r3, [pc, #100]	@ (8019224 <dhcp_decline+0xdc>)
 80191c0:	6818      	ldr	r0, [r3, #0]
 80191c2:	4b19      	ldr	r3, [pc, #100]	@ (8019228 <dhcp_decline+0xe0>)
 80191c4:	9301      	str	r3, [sp, #4]
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	9300      	str	r3, [sp, #0]
 80191ca:	2343      	movs	r3, #67	@ 0x43
 80191cc:	4a17      	ldr	r2, [pc, #92]	@ (801922c <dhcp_decline+0xe4>)
 80191ce:	6979      	ldr	r1, [r7, #20]
 80191d0:	f7ff f87e 	bl	80182d0 <udp_sendto_if_src>
 80191d4:	4603      	mov	r3, r0
 80191d6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80191d8:	6978      	ldr	r0, [r7, #20]
 80191da:	f7f7 fffd 	bl	80111d8 <pbuf_free>
 80191de:	e001      	b.n	80191e4 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80191e0:	23ff      	movs	r3, #255	@ 0xff
 80191e2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80191e4:	69bb      	ldr	r3, [r7, #24]
 80191e6:	799b      	ldrb	r3, [r3, #6]
 80191e8:	2bff      	cmp	r3, #255	@ 0xff
 80191ea:	d005      	beq.n	80191f8 <dhcp_decline+0xb0>
    dhcp->tries++;
 80191ec:	69bb      	ldr	r3, [r7, #24]
 80191ee:	799b      	ldrb	r3, [r3, #6]
 80191f0:	3301      	adds	r3, #1
 80191f2:	b2da      	uxtb	r2, r3
 80191f4:	69bb      	ldr	r3, [r7, #24]
 80191f6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80191f8:	f242 7310 	movw	r3, #10000	@ 0x2710
 80191fc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80191fe:	89fb      	ldrh	r3, [r7, #14]
 8019200:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019204:	4a0a      	ldr	r2, [pc, #40]	@ (8019230 <dhcp_decline+0xe8>)
 8019206:	fb82 1203 	smull	r1, r2, r2, r3
 801920a:	1152      	asrs	r2, r2, #5
 801920c:	17db      	asrs	r3, r3, #31
 801920e:	1ad3      	subs	r3, r2, r3
 8019210:	b29a      	uxth	r2, r3
 8019212:	69bb      	ldr	r3, [r7, #24]
 8019214:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019216:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801921a:	4618      	mov	r0, r3
 801921c:	3720      	adds	r7, #32
 801921e:	46bd      	mov	sp, r7
 8019220:	bdb0      	pop	{r4, r5, r7, pc}
 8019222:	bf00      	nop
 8019224:	20012704 	.word	0x20012704
 8019228:	08025d70 	.word	0x08025d70
 801922c:	08025d74 	.word	0x08025d74
 8019230:	10624dd3 	.word	0x10624dd3

08019234 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8019234:	b580      	push	{r7, lr}
 8019236:	b08a      	sub	sp, #40	@ 0x28
 8019238:	af02      	add	r7, sp, #8
 801923a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801923c:	687b      	ldr	r3, [r7, #4]
 801923e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019240:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8019242:	2300      	movs	r3, #0
 8019244:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8019246:	69bb      	ldr	r3, [r7, #24]
 8019248:	2200      	movs	r2, #0
 801924a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 801924c:	2106      	movs	r1, #6
 801924e:	69b8      	ldr	r0, [r7, #24]
 8019250:	f000 fbee 	bl	8019a30 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8019254:	f107 0308 	add.w	r3, r7, #8
 8019258:	2201      	movs	r2, #1
 801925a:	69b9      	ldr	r1, [r7, #24]
 801925c:	6878      	ldr	r0, [r7, #4]
 801925e:	f001 f8a3 	bl	801a3a8 <dhcp_create_msg>
 8019262:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8019264:	693b      	ldr	r3, [r7, #16]
 8019266:	2b00      	cmp	r3, #0
 8019268:	d04b      	beq.n	8019302 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801926a:	693b      	ldr	r3, [r7, #16]
 801926c:	685b      	ldr	r3, [r3, #4]
 801926e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019270:	8938      	ldrh	r0, [r7, #8]
 8019272:	68fb      	ldr	r3, [r7, #12]
 8019274:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019278:	2302      	movs	r3, #2
 801927a:	2239      	movs	r2, #57	@ 0x39
 801927c:	f000 fbf2 	bl	8019a64 <dhcp_option>
 8019280:	4603      	mov	r3, r0
 8019282:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019284:	8938      	ldrh	r0, [r7, #8]
 8019286:	68fb      	ldr	r3, [r7, #12]
 8019288:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801928c:	687b      	ldr	r3, [r7, #4]
 801928e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019290:	461a      	mov	r2, r3
 8019292:	f000 fc41 	bl	8019b18 <dhcp_option_short>
 8019296:	4603      	mov	r3, r0
 8019298:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801929a:	8938      	ldrh	r0, [r7, #8]
 801929c:	68fb      	ldr	r3, [r7, #12]
 801929e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80192a2:	2304      	movs	r3, #4
 80192a4:	2237      	movs	r2, #55	@ 0x37
 80192a6:	f000 fbdd 	bl	8019a64 <dhcp_option>
 80192aa:	4603      	mov	r3, r0
 80192ac:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80192ae:	2300      	movs	r3, #0
 80192b0:	77fb      	strb	r3, [r7, #31]
 80192b2:	e00e      	b.n	80192d2 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80192b4:	8938      	ldrh	r0, [r7, #8]
 80192b6:	68fb      	ldr	r3, [r7, #12]
 80192b8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80192bc:	7ffb      	ldrb	r3, [r7, #31]
 80192be:	4a29      	ldr	r2, [pc, #164]	@ (8019364 <dhcp_discover+0x130>)
 80192c0:	5cd3      	ldrb	r3, [r2, r3]
 80192c2:	461a      	mov	r2, r3
 80192c4:	f000 fc02 	bl	8019acc <dhcp_option_byte>
 80192c8:	4603      	mov	r3, r0
 80192ca:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80192cc:	7ffb      	ldrb	r3, [r7, #31]
 80192ce:	3301      	adds	r3, #1
 80192d0:	77fb      	strb	r3, [r7, #31]
 80192d2:	7ffb      	ldrb	r3, [r7, #31]
 80192d4:	2b03      	cmp	r3, #3
 80192d6:	d9ed      	bls.n	80192b4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80192d8:	8938      	ldrh	r0, [r7, #8]
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	33f0      	adds	r3, #240	@ 0xf0
 80192de:	693a      	ldr	r2, [r7, #16]
 80192e0:	4619      	mov	r1, r3
 80192e2:	f001 f937 	bl	801a554 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80192e6:	4b20      	ldr	r3, [pc, #128]	@ (8019368 <dhcp_discover+0x134>)
 80192e8:	6818      	ldr	r0, [r3, #0]
 80192ea:	4b20      	ldr	r3, [pc, #128]	@ (801936c <dhcp_discover+0x138>)
 80192ec:	9301      	str	r3, [sp, #4]
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	9300      	str	r3, [sp, #0]
 80192f2:	2343      	movs	r3, #67	@ 0x43
 80192f4:	4a1e      	ldr	r2, [pc, #120]	@ (8019370 <dhcp_discover+0x13c>)
 80192f6:	6939      	ldr	r1, [r7, #16]
 80192f8:	f7fe ffea 	bl	80182d0 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80192fc:	6938      	ldr	r0, [r7, #16]
 80192fe:	f7f7 ff6b 	bl	80111d8 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8019302:	69bb      	ldr	r3, [r7, #24]
 8019304:	799b      	ldrb	r3, [r3, #6]
 8019306:	2bff      	cmp	r3, #255	@ 0xff
 8019308:	d005      	beq.n	8019316 <dhcp_discover+0xe2>
    dhcp->tries++;
 801930a:	69bb      	ldr	r3, [r7, #24]
 801930c:	799b      	ldrb	r3, [r3, #6]
 801930e:	3301      	adds	r3, #1
 8019310:	b2da      	uxtb	r2, r3
 8019312:	69bb      	ldr	r3, [r7, #24]
 8019314:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8019316:	69bb      	ldr	r3, [r7, #24]
 8019318:	799b      	ldrb	r3, [r3, #6]
 801931a:	2b05      	cmp	r3, #5
 801931c:	d80d      	bhi.n	801933a <dhcp_discover+0x106>
 801931e:	69bb      	ldr	r3, [r7, #24]
 8019320:	799b      	ldrb	r3, [r3, #6]
 8019322:	461a      	mov	r2, r3
 8019324:	2301      	movs	r3, #1
 8019326:	4093      	lsls	r3, r2
 8019328:	b29b      	uxth	r3, r3
 801932a:	461a      	mov	r2, r3
 801932c:	0152      	lsls	r2, r2, #5
 801932e:	1ad2      	subs	r2, r2, r3
 8019330:	0092      	lsls	r2, r2, #2
 8019332:	4413      	add	r3, r2
 8019334:	00db      	lsls	r3, r3, #3
 8019336:	b29b      	uxth	r3, r3
 8019338:	e001      	b.n	801933e <dhcp_discover+0x10a>
 801933a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801933e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019340:	897b      	ldrh	r3, [r7, #10]
 8019342:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019346:	4a0b      	ldr	r2, [pc, #44]	@ (8019374 <dhcp_discover+0x140>)
 8019348:	fb82 1203 	smull	r1, r2, r2, r3
 801934c:	1152      	asrs	r2, r2, #5
 801934e:	17db      	asrs	r3, r3, #31
 8019350:	1ad3      	subs	r3, r2, r3
 8019352:	b29a      	uxth	r2, r3
 8019354:	69bb      	ldr	r3, [r7, #24]
 8019356:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019358:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801935c:	4618      	mov	r0, r3
 801935e:	3720      	adds	r7, #32
 8019360:	46bd      	mov	sp, r7
 8019362:	bd80      	pop	{r7, pc}
 8019364:	20000050 	.word	0x20000050
 8019368:	20012704 	.word	0x20012704
 801936c:	08025d70 	.word	0x08025d70
 8019370:	08025d74 	.word	0x08025d74
 8019374:	10624dd3 	.word	0x10624dd3

08019378 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8019378:	b580      	push	{r7, lr}
 801937a:	b088      	sub	sp, #32
 801937c:	af00      	add	r7, sp, #0
 801937e:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	2b00      	cmp	r3, #0
 8019384:	d107      	bne.n	8019396 <dhcp_bind+0x1e>
 8019386:	4b64      	ldr	r3, [pc, #400]	@ (8019518 <dhcp_bind+0x1a0>)
 8019388:	f240 4215 	movw	r2, #1045	@ 0x415
 801938c:	4963      	ldr	r1, [pc, #396]	@ (801951c <dhcp_bind+0x1a4>)
 801938e:	4864      	ldr	r0, [pc, #400]	@ (8019520 <dhcp_bind+0x1a8>)
 8019390:	f004 ffa4 	bl	801e2dc <iprintf>
 8019394:	e0bc      	b.n	8019510 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8019396:	687b      	ldr	r3, [r7, #4]
 8019398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801939a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 801939c:	69bb      	ldr	r3, [r7, #24]
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d107      	bne.n	80193b2 <dhcp_bind+0x3a>
 80193a2:	4b5d      	ldr	r3, [pc, #372]	@ (8019518 <dhcp_bind+0x1a0>)
 80193a4:	f240 4217 	movw	r2, #1047	@ 0x417
 80193a8:	495e      	ldr	r1, [pc, #376]	@ (8019524 <dhcp_bind+0x1ac>)
 80193aa:	485d      	ldr	r0, [pc, #372]	@ (8019520 <dhcp_bind+0x1a8>)
 80193ac:	f004 ff96 	bl	801e2dc <iprintf>
 80193b0:	e0ae      	b.n	8019510 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80193b2:	69bb      	ldr	r3, [r7, #24]
 80193b4:	2200      	movs	r2, #0
 80193b6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80193b8:	69bb      	ldr	r3, [r7, #24]
 80193ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193c0:	d019      	beq.n	80193f6 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80193c2:	69bb      	ldr	r3, [r7, #24]
 80193c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193c6:	331e      	adds	r3, #30
 80193c8:	4a57      	ldr	r2, [pc, #348]	@ (8019528 <dhcp_bind+0x1b0>)
 80193ca:	fba2 2303 	umull	r2, r3, r2, r3
 80193ce:	095b      	lsrs	r3, r3, #5
 80193d0:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80193d2:	69fb      	ldr	r3, [r7, #28]
 80193d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80193d8:	d302      	bcc.n	80193e0 <dhcp_bind+0x68>
      timeout = 0xffff;
 80193da:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80193de:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80193e0:	69fb      	ldr	r3, [r7, #28]
 80193e2:	b29a      	uxth	r2, r3
 80193e4:	69bb      	ldr	r3, [r7, #24]
 80193e6:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80193e8:	69bb      	ldr	r3, [r7, #24]
 80193ea:	8a9b      	ldrh	r3, [r3, #20]
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d102      	bne.n	80193f6 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80193f0:	69bb      	ldr	r3, [r7, #24]
 80193f2:	2201      	movs	r2, #1
 80193f4:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80193f6:	69bb      	ldr	r3, [r7, #24]
 80193f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80193fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80193fe:	d01d      	beq.n	801943c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019400:	69bb      	ldr	r3, [r7, #24]
 8019402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019404:	331e      	adds	r3, #30
 8019406:	4a48      	ldr	r2, [pc, #288]	@ (8019528 <dhcp_bind+0x1b0>)
 8019408:	fba2 2303 	umull	r2, r3, r2, r3
 801940c:	095b      	lsrs	r3, r3, #5
 801940e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8019410:	69fb      	ldr	r3, [r7, #28]
 8019412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019416:	d302      	bcc.n	801941e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8019418:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801941c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801941e:	69fb      	ldr	r3, [r7, #28]
 8019420:	b29a      	uxth	r2, r3
 8019422:	69bb      	ldr	r3, [r7, #24]
 8019424:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8019426:	69bb      	ldr	r3, [r7, #24]
 8019428:	895b      	ldrh	r3, [r3, #10]
 801942a:	2b00      	cmp	r3, #0
 801942c:	d102      	bne.n	8019434 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801942e:	69bb      	ldr	r3, [r7, #24]
 8019430:	2201      	movs	r2, #1
 8019432:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8019434:	69bb      	ldr	r3, [r7, #24]
 8019436:	895a      	ldrh	r2, [r3, #10]
 8019438:	69bb      	ldr	r3, [r7, #24]
 801943a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801943c:	69bb      	ldr	r3, [r7, #24]
 801943e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019444:	d01d      	beq.n	8019482 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019446:	69bb      	ldr	r3, [r7, #24]
 8019448:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801944a:	331e      	adds	r3, #30
 801944c:	4a36      	ldr	r2, [pc, #216]	@ (8019528 <dhcp_bind+0x1b0>)
 801944e:	fba2 2303 	umull	r2, r3, r2, r3
 8019452:	095b      	lsrs	r3, r3, #5
 8019454:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8019456:	69fb      	ldr	r3, [r7, #28]
 8019458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801945c:	d302      	bcc.n	8019464 <dhcp_bind+0xec>
      timeout = 0xffff;
 801945e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019462:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8019464:	69fb      	ldr	r3, [r7, #28]
 8019466:	b29a      	uxth	r2, r3
 8019468:	69bb      	ldr	r3, [r7, #24]
 801946a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801946c:	69bb      	ldr	r3, [r7, #24]
 801946e:	899b      	ldrh	r3, [r3, #12]
 8019470:	2b00      	cmp	r3, #0
 8019472:	d102      	bne.n	801947a <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8019474:	69bb      	ldr	r3, [r7, #24]
 8019476:	2201      	movs	r2, #1
 8019478:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 801947a:	69bb      	ldr	r3, [r7, #24]
 801947c:	899a      	ldrh	r2, [r3, #12]
 801947e:	69bb      	ldr	r3, [r7, #24]
 8019480:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8019482:	69bb      	ldr	r3, [r7, #24]
 8019484:	895a      	ldrh	r2, [r3, #10]
 8019486:	69bb      	ldr	r3, [r7, #24]
 8019488:	899b      	ldrh	r3, [r3, #12]
 801948a:	429a      	cmp	r2, r3
 801948c:	d306      	bcc.n	801949c <dhcp_bind+0x124>
 801948e:	69bb      	ldr	r3, [r7, #24]
 8019490:	899b      	ldrh	r3, [r3, #12]
 8019492:	2b00      	cmp	r3, #0
 8019494:	d002      	beq.n	801949c <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8019496:	69bb      	ldr	r3, [r7, #24]
 8019498:	2200      	movs	r2, #0
 801949a:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 801949c:	69bb      	ldr	r3, [r7, #24]
 801949e:	79db      	ldrb	r3, [r3, #7]
 80194a0:	2b00      	cmp	r3, #0
 80194a2:	d003      	beq.n	80194ac <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80194a4:	69bb      	ldr	r3, [r7, #24]
 80194a6:	6a1b      	ldr	r3, [r3, #32]
 80194a8:	613b      	str	r3, [r7, #16]
 80194aa:	e014      	b.n	80194d6 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80194ac:	69bb      	ldr	r3, [r7, #24]
 80194ae:	331c      	adds	r3, #28
 80194b0:	781b      	ldrb	r3, [r3, #0]
 80194b2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80194b4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	db02      	blt.n	80194c2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80194bc:	23ff      	movs	r3, #255	@ 0xff
 80194be:	613b      	str	r3, [r7, #16]
 80194c0:	e009      	b.n	80194d6 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80194c2:	7dfb      	ldrb	r3, [r7, #23]
 80194c4:	2bbf      	cmp	r3, #191	@ 0xbf
 80194c6:	d903      	bls.n	80194d0 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80194c8:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80194cc:	613b      	str	r3, [r7, #16]
 80194ce:	e002      	b.n	80194d6 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 80194d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80194d4:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 80194d6:	69bb      	ldr	r3, [r7, #24]
 80194d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80194da:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 80194dc:	68fb      	ldr	r3, [r7, #12]
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d108      	bne.n	80194f4 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 80194e2:	69bb      	ldr	r3, [r7, #24]
 80194e4:	69da      	ldr	r2, [r3, #28]
 80194e6:	693b      	ldr	r3, [r7, #16]
 80194e8:	4013      	ands	r3, r2
 80194ea:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80194ec:	68fb      	ldr	r3, [r7, #12]
 80194ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80194f2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80194f4:	210a      	movs	r1, #10
 80194f6:	69b8      	ldr	r0, [r7, #24]
 80194f8:	f000 fa9a 	bl	8019a30 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80194fc:	69bb      	ldr	r3, [r7, #24]
 80194fe:	f103 011c 	add.w	r1, r3, #28
 8019502:	f107 030c 	add.w	r3, r7, #12
 8019506:	f107 0210 	add.w	r2, r7, #16
 801950a:	6878      	ldr	r0, [r7, #4]
 801950c:	f7f7 f956 	bl	80107bc <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8019510:	3720      	adds	r7, #32
 8019512:	46bd      	mov	sp, r7
 8019514:	bd80      	pop	{r7, pc}
 8019516:	bf00      	nop
 8019518:	08024ff8 	.word	0x08024ff8
 801951c:	08025158 	.word	0x08025158
 8019520:	08025058 	.word	0x08025058
 8019524:	08025174 	.word	0x08025174
 8019528:	88888889 	.word	0x88888889

0801952c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801952c:	b580      	push	{r7, lr}
 801952e:	b08a      	sub	sp, #40	@ 0x28
 8019530:	af02      	add	r7, sp, #8
 8019532:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019538:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801953a:	2105      	movs	r1, #5
 801953c:	69b8      	ldr	r0, [r7, #24]
 801953e:	f000 fa77 	bl	8019a30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019542:	f107 030c 	add.w	r3, r7, #12
 8019546:	2203      	movs	r2, #3
 8019548:	69b9      	ldr	r1, [r7, #24]
 801954a:	6878      	ldr	r0, [r7, #4]
 801954c:	f000 ff2c 	bl	801a3a8 <dhcp_create_msg>
 8019550:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019552:	697b      	ldr	r3, [r7, #20]
 8019554:	2b00      	cmp	r3, #0
 8019556:	d04e      	beq.n	80195f6 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019558:	697b      	ldr	r3, [r7, #20]
 801955a:	685b      	ldr	r3, [r3, #4]
 801955c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801955e:	89b8      	ldrh	r0, [r7, #12]
 8019560:	693b      	ldr	r3, [r7, #16]
 8019562:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019566:	2302      	movs	r3, #2
 8019568:	2239      	movs	r2, #57	@ 0x39
 801956a:	f000 fa7b 	bl	8019a64 <dhcp_option>
 801956e:	4603      	mov	r3, r0
 8019570:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019572:	89b8      	ldrh	r0, [r7, #12]
 8019574:	693b      	ldr	r3, [r7, #16]
 8019576:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801957e:	461a      	mov	r2, r3
 8019580:	f000 faca 	bl	8019b18 <dhcp_option_short>
 8019584:	4603      	mov	r3, r0
 8019586:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019588:	89b8      	ldrh	r0, [r7, #12]
 801958a:	693b      	ldr	r3, [r7, #16]
 801958c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019590:	2304      	movs	r3, #4
 8019592:	2237      	movs	r2, #55	@ 0x37
 8019594:	f000 fa66 	bl	8019a64 <dhcp_option>
 8019598:	4603      	mov	r3, r0
 801959a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801959c:	2300      	movs	r3, #0
 801959e:	77bb      	strb	r3, [r7, #30]
 80195a0:	e00e      	b.n	80195c0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80195a2:	89b8      	ldrh	r0, [r7, #12]
 80195a4:	693b      	ldr	r3, [r7, #16]
 80195a6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80195aa:	7fbb      	ldrb	r3, [r7, #30]
 80195ac:	4a29      	ldr	r2, [pc, #164]	@ (8019654 <dhcp_renew+0x128>)
 80195ae:	5cd3      	ldrb	r3, [r2, r3]
 80195b0:	461a      	mov	r2, r3
 80195b2:	f000 fa8b 	bl	8019acc <dhcp_option_byte>
 80195b6:	4603      	mov	r3, r0
 80195b8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80195ba:	7fbb      	ldrb	r3, [r7, #30]
 80195bc:	3301      	adds	r3, #1
 80195be:	77bb      	strb	r3, [r7, #30]
 80195c0:	7fbb      	ldrb	r3, [r7, #30]
 80195c2:	2b03      	cmp	r3, #3
 80195c4:	d9ed      	bls.n	80195a2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80195c6:	89b8      	ldrh	r0, [r7, #12]
 80195c8:	693b      	ldr	r3, [r7, #16]
 80195ca:	33f0      	adds	r3, #240	@ 0xf0
 80195cc:	697a      	ldr	r2, [r7, #20]
 80195ce:	4619      	mov	r1, r3
 80195d0:	f000 ffc0 	bl	801a554 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80195d4:	4b20      	ldr	r3, [pc, #128]	@ (8019658 <dhcp_renew+0x12c>)
 80195d6:	6818      	ldr	r0, [r3, #0]
 80195d8:	69bb      	ldr	r3, [r7, #24]
 80195da:	f103 0218 	add.w	r2, r3, #24
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	9300      	str	r3, [sp, #0]
 80195e2:	2343      	movs	r3, #67	@ 0x43
 80195e4:	6979      	ldr	r1, [r7, #20]
 80195e6:	f7fe fdff 	bl	80181e8 <udp_sendto_if>
 80195ea:	4603      	mov	r3, r0
 80195ec:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80195ee:	6978      	ldr	r0, [r7, #20]
 80195f0:	f7f7 fdf2 	bl	80111d8 <pbuf_free>
 80195f4:	e001      	b.n	80195fa <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80195f6:	23ff      	movs	r3, #255	@ 0xff
 80195f8:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80195fa:	69bb      	ldr	r3, [r7, #24]
 80195fc:	799b      	ldrb	r3, [r3, #6]
 80195fe:	2bff      	cmp	r3, #255	@ 0xff
 8019600:	d005      	beq.n	801960e <dhcp_renew+0xe2>
    dhcp->tries++;
 8019602:	69bb      	ldr	r3, [r7, #24]
 8019604:	799b      	ldrb	r3, [r3, #6]
 8019606:	3301      	adds	r3, #1
 8019608:	b2da      	uxtb	r2, r3
 801960a:	69bb      	ldr	r3, [r7, #24]
 801960c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801960e:	69bb      	ldr	r3, [r7, #24]
 8019610:	799b      	ldrb	r3, [r3, #6]
 8019612:	2b09      	cmp	r3, #9
 8019614:	d809      	bhi.n	801962a <dhcp_renew+0xfe>
 8019616:	69bb      	ldr	r3, [r7, #24]
 8019618:	799b      	ldrb	r3, [r3, #6]
 801961a:	461a      	mov	r2, r3
 801961c:	0152      	lsls	r2, r2, #5
 801961e:	1ad2      	subs	r2, r2, r3
 8019620:	0092      	lsls	r2, r2, #2
 8019622:	4413      	add	r3, r2
 8019624:	011b      	lsls	r3, r3, #4
 8019626:	b29b      	uxth	r3, r3
 8019628:	e001      	b.n	801962e <dhcp_renew+0x102>
 801962a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801962e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019630:	89fb      	ldrh	r3, [r7, #14]
 8019632:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019636:	4a09      	ldr	r2, [pc, #36]	@ (801965c <dhcp_renew+0x130>)
 8019638:	fb82 1203 	smull	r1, r2, r2, r3
 801963c:	1152      	asrs	r2, r2, #5
 801963e:	17db      	asrs	r3, r3, #31
 8019640:	1ad3      	subs	r3, r2, r3
 8019642:	b29a      	uxth	r2, r3
 8019644:	69bb      	ldr	r3, [r7, #24]
 8019646:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019648:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801964c:	4618      	mov	r0, r3
 801964e:	3720      	adds	r7, #32
 8019650:	46bd      	mov	sp, r7
 8019652:	bd80      	pop	{r7, pc}
 8019654:	20000050 	.word	0x20000050
 8019658:	20012704 	.word	0x20012704
 801965c:	10624dd3 	.word	0x10624dd3

08019660 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8019660:	b580      	push	{r7, lr}
 8019662:	b08a      	sub	sp, #40	@ 0x28
 8019664:	af02      	add	r7, sp, #8
 8019666:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801966c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801966e:	2104      	movs	r1, #4
 8019670:	69b8      	ldr	r0, [r7, #24]
 8019672:	f000 f9dd 	bl	8019a30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019676:	f107 030c 	add.w	r3, r7, #12
 801967a:	2203      	movs	r2, #3
 801967c:	69b9      	ldr	r1, [r7, #24]
 801967e:	6878      	ldr	r0, [r7, #4]
 8019680:	f000 fe92 	bl	801a3a8 <dhcp_create_msg>
 8019684:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019686:	697b      	ldr	r3, [r7, #20]
 8019688:	2b00      	cmp	r3, #0
 801968a:	d04c      	beq.n	8019726 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801968c:	697b      	ldr	r3, [r7, #20]
 801968e:	685b      	ldr	r3, [r3, #4]
 8019690:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019692:	89b8      	ldrh	r0, [r7, #12]
 8019694:	693b      	ldr	r3, [r7, #16]
 8019696:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801969a:	2302      	movs	r3, #2
 801969c:	2239      	movs	r2, #57	@ 0x39
 801969e:	f000 f9e1 	bl	8019a64 <dhcp_option>
 80196a2:	4603      	mov	r3, r0
 80196a4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80196a6:	89b8      	ldrh	r0, [r7, #12]
 80196a8:	693b      	ldr	r3, [r7, #16]
 80196aa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80196b2:	461a      	mov	r2, r3
 80196b4:	f000 fa30 	bl	8019b18 <dhcp_option_short>
 80196b8:	4603      	mov	r3, r0
 80196ba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80196bc:	89b8      	ldrh	r0, [r7, #12]
 80196be:	693b      	ldr	r3, [r7, #16]
 80196c0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80196c4:	2304      	movs	r3, #4
 80196c6:	2237      	movs	r2, #55	@ 0x37
 80196c8:	f000 f9cc 	bl	8019a64 <dhcp_option>
 80196cc:	4603      	mov	r3, r0
 80196ce:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80196d0:	2300      	movs	r3, #0
 80196d2:	77bb      	strb	r3, [r7, #30]
 80196d4:	e00e      	b.n	80196f4 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80196d6:	89b8      	ldrh	r0, [r7, #12]
 80196d8:	693b      	ldr	r3, [r7, #16]
 80196da:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80196de:	7fbb      	ldrb	r3, [r7, #30]
 80196e0:	4a28      	ldr	r2, [pc, #160]	@ (8019784 <dhcp_rebind+0x124>)
 80196e2:	5cd3      	ldrb	r3, [r2, r3]
 80196e4:	461a      	mov	r2, r3
 80196e6:	f000 f9f1 	bl	8019acc <dhcp_option_byte>
 80196ea:	4603      	mov	r3, r0
 80196ec:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80196ee:	7fbb      	ldrb	r3, [r7, #30]
 80196f0:	3301      	adds	r3, #1
 80196f2:	77bb      	strb	r3, [r7, #30]
 80196f4:	7fbb      	ldrb	r3, [r7, #30]
 80196f6:	2b03      	cmp	r3, #3
 80196f8:	d9ed      	bls.n	80196d6 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80196fa:	89b8      	ldrh	r0, [r7, #12]
 80196fc:	693b      	ldr	r3, [r7, #16]
 80196fe:	33f0      	adds	r3, #240	@ 0xf0
 8019700:	697a      	ldr	r2, [r7, #20]
 8019702:	4619      	mov	r1, r3
 8019704:	f000 ff26 	bl	801a554 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019708:	4b1f      	ldr	r3, [pc, #124]	@ (8019788 <dhcp_rebind+0x128>)
 801970a:	6818      	ldr	r0, [r3, #0]
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	9300      	str	r3, [sp, #0]
 8019710:	2343      	movs	r3, #67	@ 0x43
 8019712:	4a1e      	ldr	r2, [pc, #120]	@ (801978c <dhcp_rebind+0x12c>)
 8019714:	6979      	ldr	r1, [r7, #20]
 8019716:	f7fe fd67 	bl	80181e8 <udp_sendto_if>
 801971a:	4603      	mov	r3, r0
 801971c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801971e:	6978      	ldr	r0, [r7, #20]
 8019720:	f7f7 fd5a 	bl	80111d8 <pbuf_free>
 8019724:	e001      	b.n	801972a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019726:	23ff      	movs	r3, #255	@ 0xff
 8019728:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801972a:	69bb      	ldr	r3, [r7, #24]
 801972c:	799b      	ldrb	r3, [r3, #6]
 801972e:	2bff      	cmp	r3, #255	@ 0xff
 8019730:	d005      	beq.n	801973e <dhcp_rebind+0xde>
    dhcp->tries++;
 8019732:	69bb      	ldr	r3, [r7, #24]
 8019734:	799b      	ldrb	r3, [r3, #6]
 8019736:	3301      	adds	r3, #1
 8019738:	b2da      	uxtb	r2, r3
 801973a:	69bb      	ldr	r3, [r7, #24]
 801973c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801973e:	69bb      	ldr	r3, [r7, #24]
 8019740:	799b      	ldrb	r3, [r3, #6]
 8019742:	2b09      	cmp	r3, #9
 8019744:	d809      	bhi.n	801975a <dhcp_rebind+0xfa>
 8019746:	69bb      	ldr	r3, [r7, #24]
 8019748:	799b      	ldrb	r3, [r3, #6]
 801974a:	461a      	mov	r2, r3
 801974c:	0152      	lsls	r2, r2, #5
 801974e:	1ad2      	subs	r2, r2, r3
 8019750:	0092      	lsls	r2, r2, #2
 8019752:	4413      	add	r3, r2
 8019754:	00db      	lsls	r3, r3, #3
 8019756:	b29b      	uxth	r3, r3
 8019758:	e001      	b.n	801975e <dhcp_rebind+0xfe>
 801975a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801975e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019760:	89fb      	ldrh	r3, [r7, #14]
 8019762:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019766:	4a0a      	ldr	r2, [pc, #40]	@ (8019790 <dhcp_rebind+0x130>)
 8019768:	fb82 1203 	smull	r1, r2, r2, r3
 801976c:	1152      	asrs	r2, r2, #5
 801976e:	17db      	asrs	r3, r3, #31
 8019770:	1ad3      	subs	r3, r2, r3
 8019772:	b29a      	uxth	r2, r3
 8019774:	69bb      	ldr	r3, [r7, #24]
 8019776:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019778:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801977c:	4618      	mov	r0, r3
 801977e:	3720      	adds	r7, #32
 8019780:	46bd      	mov	sp, r7
 8019782:	bd80      	pop	{r7, pc}
 8019784:	20000050 	.word	0x20000050
 8019788:	20012704 	.word	0x20012704
 801978c:	08025d74 	.word	0x08025d74
 8019790:	10624dd3 	.word	0x10624dd3

08019794 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8019794:	b5b0      	push	{r4, r5, r7, lr}
 8019796:	b08a      	sub	sp, #40	@ 0x28
 8019798:	af02      	add	r7, sp, #8
 801979a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80197a0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80197a2:	2103      	movs	r1, #3
 80197a4:	69b8      	ldr	r0, [r7, #24]
 80197a6:	f000 f943 	bl	8019a30 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80197aa:	f107 030c 	add.w	r3, r7, #12
 80197ae:	2203      	movs	r2, #3
 80197b0:	69b9      	ldr	r1, [r7, #24]
 80197b2:	6878      	ldr	r0, [r7, #4]
 80197b4:	f000 fdf8 	bl	801a3a8 <dhcp_create_msg>
 80197b8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80197ba:	697b      	ldr	r3, [r7, #20]
 80197bc:	2b00      	cmp	r3, #0
 80197be:	d066      	beq.n	801988e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80197c0:	697b      	ldr	r3, [r7, #20]
 80197c2:	685b      	ldr	r3, [r3, #4]
 80197c4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80197c6:	89b8      	ldrh	r0, [r7, #12]
 80197c8:	693b      	ldr	r3, [r7, #16]
 80197ca:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80197ce:	2302      	movs	r3, #2
 80197d0:	2239      	movs	r2, #57	@ 0x39
 80197d2:	f000 f947 	bl	8019a64 <dhcp_option>
 80197d6:	4603      	mov	r3, r0
 80197d8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 80197da:	89b8      	ldrh	r0, [r7, #12]
 80197dc:	693b      	ldr	r3, [r7, #16]
 80197de:	33f0      	adds	r3, #240	@ 0xf0
 80197e0:	f44f 7210 	mov.w	r2, #576	@ 0x240
 80197e4:	4619      	mov	r1, r3
 80197e6:	f000 f997 	bl	8019b18 <dhcp_option_short>
 80197ea:	4603      	mov	r3, r0
 80197ec:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80197ee:	89b8      	ldrh	r0, [r7, #12]
 80197f0:	693b      	ldr	r3, [r7, #16]
 80197f2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80197f6:	2304      	movs	r3, #4
 80197f8:	2232      	movs	r2, #50	@ 0x32
 80197fa:	f000 f933 	bl	8019a64 <dhcp_option>
 80197fe:	4603      	mov	r3, r0
 8019800:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8019802:	89bc      	ldrh	r4, [r7, #12]
 8019804:	693b      	ldr	r3, [r7, #16]
 8019806:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801980a:	69bb      	ldr	r3, [r7, #24]
 801980c:	69db      	ldr	r3, [r3, #28]
 801980e:	4618      	mov	r0, r3
 8019810:	f7f5 fe0b 	bl	800f42a <lwip_htonl>
 8019814:	4603      	mov	r3, r0
 8019816:	461a      	mov	r2, r3
 8019818:	4629      	mov	r1, r5
 801981a:	4620      	mov	r0, r4
 801981c:	f000 f9ae 	bl	8019b7c <dhcp_option_long>
 8019820:	4603      	mov	r3, r0
 8019822:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019824:	89b8      	ldrh	r0, [r7, #12]
 8019826:	693b      	ldr	r3, [r7, #16]
 8019828:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801982c:	2304      	movs	r3, #4
 801982e:	2237      	movs	r2, #55	@ 0x37
 8019830:	f000 f918 	bl	8019a64 <dhcp_option>
 8019834:	4603      	mov	r3, r0
 8019836:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019838:	2300      	movs	r3, #0
 801983a:	77bb      	strb	r3, [r7, #30]
 801983c:	e00e      	b.n	801985c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801983e:	89b8      	ldrh	r0, [r7, #12]
 8019840:	693b      	ldr	r3, [r7, #16]
 8019842:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019846:	7fbb      	ldrb	r3, [r7, #30]
 8019848:	4a28      	ldr	r2, [pc, #160]	@ (80198ec <dhcp_reboot+0x158>)
 801984a:	5cd3      	ldrb	r3, [r2, r3]
 801984c:	461a      	mov	r2, r3
 801984e:	f000 f93d 	bl	8019acc <dhcp_option_byte>
 8019852:	4603      	mov	r3, r0
 8019854:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019856:	7fbb      	ldrb	r3, [r7, #30]
 8019858:	3301      	adds	r3, #1
 801985a:	77bb      	strb	r3, [r7, #30]
 801985c:	7fbb      	ldrb	r3, [r7, #30]
 801985e:	2b03      	cmp	r3, #3
 8019860:	d9ed      	bls.n	801983e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019862:	89b8      	ldrh	r0, [r7, #12]
 8019864:	693b      	ldr	r3, [r7, #16]
 8019866:	33f0      	adds	r3, #240	@ 0xf0
 8019868:	697a      	ldr	r2, [r7, #20]
 801986a:	4619      	mov	r1, r3
 801986c:	f000 fe72 	bl	801a554 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019870:	4b1f      	ldr	r3, [pc, #124]	@ (80198f0 <dhcp_reboot+0x15c>)
 8019872:	6818      	ldr	r0, [r3, #0]
 8019874:	687b      	ldr	r3, [r7, #4]
 8019876:	9300      	str	r3, [sp, #0]
 8019878:	2343      	movs	r3, #67	@ 0x43
 801987a:	4a1e      	ldr	r2, [pc, #120]	@ (80198f4 <dhcp_reboot+0x160>)
 801987c:	6979      	ldr	r1, [r7, #20]
 801987e:	f7fe fcb3 	bl	80181e8 <udp_sendto_if>
 8019882:	4603      	mov	r3, r0
 8019884:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019886:	6978      	ldr	r0, [r7, #20]
 8019888:	f7f7 fca6 	bl	80111d8 <pbuf_free>
 801988c:	e001      	b.n	8019892 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801988e:	23ff      	movs	r3, #255	@ 0xff
 8019890:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019892:	69bb      	ldr	r3, [r7, #24]
 8019894:	799b      	ldrb	r3, [r3, #6]
 8019896:	2bff      	cmp	r3, #255	@ 0xff
 8019898:	d005      	beq.n	80198a6 <dhcp_reboot+0x112>
    dhcp->tries++;
 801989a:	69bb      	ldr	r3, [r7, #24]
 801989c:	799b      	ldrb	r3, [r3, #6]
 801989e:	3301      	adds	r3, #1
 80198a0:	b2da      	uxtb	r2, r3
 80198a2:	69bb      	ldr	r3, [r7, #24]
 80198a4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80198a6:	69bb      	ldr	r3, [r7, #24]
 80198a8:	799b      	ldrb	r3, [r3, #6]
 80198aa:	2b09      	cmp	r3, #9
 80198ac:	d809      	bhi.n	80198c2 <dhcp_reboot+0x12e>
 80198ae:	69bb      	ldr	r3, [r7, #24]
 80198b0:	799b      	ldrb	r3, [r3, #6]
 80198b2:	461a      	mov	r2, r3
 80198b4:	0152      	lsls	r2, r2, #5
 80198b6:	1ad2      	subs	r2, r2, r3
 80198b8:	0092      	lsls	r2, r2, #2
 80198ba:	4413      	add	r3, r2
 80198bc:	00db      	lsls	r3, r3, #3
 80198be:	b29b      	uxth	r3, r3
 80198c0:	e001      	b.n	80198c6 <dhcp_reboot+0x132>
 80198c2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80198c6:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80198c8:	89fb      	ldrh	r3, [r7, #14]
 80198ca:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80198ce:	4a0a      	ldr	r2, [pc, #40]	@ (80198f8 <dhcp_reboot+0x164>)
 80198d0:	fb82 1203 	smull	r1, r2, r2, r3
 80198d4:	1152      	asrs	r2, r2, #5
 80198d6:	17db      	asrs	r3, r3, #31
 80198d8:	1ad3      	subs	r3, r2, r3
 80198da:	b29a      	uxth	r2, r3
 80198dc:	69bb      	ldr	r3, [r7, #24]
 80198de:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80198e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80198e4:	4618      	mov	r0, r3
 80198e6:	3720      	adds	r7, #32
 80198e8:	46bd      	mov	sp, r7
 80198ea:	bdb0      	pop	{r4, r5, r7, pc}
 80198ec:	20000050 	.word	0x20000050
 80198f0:	20012704 	.word	0x20012704
 80198f4:	08025d74 	.word	0x08025d74
 80198f8:	10624dd3 	.word	0x10624dd3

080198fc <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80198fc:	b5b0      	push	{r4, r5, r7, lr}
 80198fe:	b08a      	sub	sp, #40	@ 0x28
 8019900:	af02      	add	r7, sp, #8
 8019902:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019904:	687b      	ldr	r3, [r7, #4]
 8019906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019908:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801990a:	69fb      	ldr	r3, [r7, #28]
 801990c:	2b00      	cmp	r3, #0
 801990e:	f000 8084 	beq.w	8019a1a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8019912:	69fb      	ldr	r3, [r7, #28]
 8019914:	795b      	ldrb	r3, [r3, #5]
 8019916:	2b00      	cmp	r3, #0
 8019918:	f000 8081 	beq.w	8019a1e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801991c:	69fb      	ldr	r3, [r7, #28]
 801991e:	699b      	ldr	r3, [r3, #24]
 8019920:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8019922:	69fb      	ldr	r3, [r7, #28]
 8019924:	2200      	movs	r2, #0
 8019926:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8019928:	69fb      	ldr	r3, [r7, #28]
 801992a:	2200      	movs	r2, #0
 801992c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801992e:	69fb      	ldr	r3, [r7, #28]
 8019930:	2200      	movs	r2, #0
 8019932:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8019934:	69fb      	ldr	r3, [r7, #28]
 8019936:	2200      	movs	r2, #0
 8019938:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801993a:	69fb      	ldr	r3, [r7, #28]
 801993c:	2200      	movs	r2, #0
 801993e:	631a      	str	r2, [r3, #48]	@ 0x30
 8019940:	69fb      	ldr	r3, [r7, #28]
 8019942:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019944:	69fb      	ldr	r3, [r7, #28]
 8019946:	62da      	str	r2, [r3, #44]	@ 0x2c
 8019948:	69fb      	ldr	r3, [r7, #28]
 801994a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801994c:	69fb      	ldr	r3, [r7, #28]
 801994e:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8019950:	69fb      	ldr	r3, [r7, #28]
 8019952:	2200      	movs	r2, #0
 8019954:	829a      	strh	r2, [r3, #20]
 8019956:	69fb      	ldr	r3, [r7, #28]
 8019958:	8a9a      	ldrh	r2, [r3, #20]
 801995a:	69fb      	ldr	r3, [r7, #28]
 801995c:	825a      	strh	r2, [r3, #18]
 801995e:	69fb      	ldr	r3, [r7, #28]
 8019960:	8a5a      	ldrh	r2, [r3, #18]
 8019962:	69fb      	ldr	r3, [r7, #28]
 8019964:	821a      	strh	r2, [r3, #16]
 8019966:	69fb      	ldr	r3, [r7, #28]
 8019968:	8a1a      	ldrh	r2, [r3, #16]
 801996a:	69fb      	ldr	r3, [r7, #28]
 801996c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801996e:	6878      	ldr	r0, [r7, #4]
 8019970:	f000 fe1e 	bl	801a5b0 <dhcp_supplied_address>
 8019974:	4603      	mov	r3, r0
 8019976:	2b00      	cmp	r3, #0
 8019978:	d03b      	beq.n	80199f2 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801997a:	f107 030e 	add.w	r3, r7, #14
 801997e:	2207      	movs	r2, #7
 8019980:	69f9      	ldr	r1, [r7, #28]
 8019982:	6878      	ldr	r0, [r7, #4]
 8019984:	f000 fd10 	bl	801a3a8 <dhcp_create_msg>
 8019988:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801998a:	69bb      	ldr	r3, [r7, #24]
 801998c:	2b00      	cmp	r3, #0
 801998e:	d030      	beq.n	80199f2 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019990:	69bb      	ldr	r3, [r7, #24]
 8019992:	685b      	ldr	r3, [r3, #4]
 8019994:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8019996:	89f8      	ldrh	r0, [r7, #14]
 8019998:	697b      	ldr	r3, [r7, #20]
 801999a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801999e:	2304      	movs	r3, #4
 80199a0:	2236      	movs	r2, #54	@ 0x36
 80199a2:	f000 f85f 	bl	8019a64 <dhcp_option>
 80199a6:	4603      	mov	r3, r0
 80199a8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80199aa:	89fc      	ldrh	r4, [r7, #14]
 80199ac:	697b      	ldr	r3, [r7, #20]
 80199ae:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80199b2:	693b      	ldr	r3, [r7, #16]
 80199b4:	4618      	mov	r0, r3
 80199b6:	f7f5 fd38 	bl	800f42a <lwip_htonl>
 80199ba:	4603      	mov	r3, r0
 80199bc:	461a      	mov	r2, r3
 80199be:	4629      	mov	r1, r5
 80199c0:	4620      	mov	r0, r4
 80199c2:	f000 f8db 	bl	8019b7c <dhcp_option_long>
 80199c6:	4603      	mov	r3, r0
 80199c8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80199ca:	89f8      	ldrh	r0, [r7, #14]
 80199cc:	697b      	ldr	r3, [r7, #20]
 80199ce:	33f0      	adds	r3, #240	@ 0xf0
 80199d0:	69ba      	ldr	r2, [r7, #24]
 80199d2:	4619      	mov	r1, r3
 80199d4:	f000 fdbe 	bl	801a554 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80199d8:	4b13      	ldr	r3, [pc, #76]	@ (8019a28 <dhcp_release_and_stop+0x12c>)
 80199da:	6818      	ldr	r0, [r3, #0]
 80199dc:	f107 0210 	add.w	r2, r7, #16
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	9300      	str	r3, [sp, #0]
 80199e4:	2343      	movs	r3, #67	@ 0x43
 80199e6:	69b9      	ldr	r1, [r7, #24]
 80199e8:	f7fe fbfe 	bl	80181e8 <udp_sendto_if>
      pbuf_free(p_out);
 80199ec:	69b8      	ldr	r0, [r7, #24]
 80199ee:	f7f7 fbf3 	bl	80111d8 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80199f2:	4b0e      	ldr	r3, [pc, #56]	@ (8019a2c <dhcp_release_and_stop+0x130>)
 80199f4:	4a0d      	ldr	r2, [pc, #52]	@ (8019a2c <dhcp_release_and_stop+0x130>)
 80199f6:	490d      	ldr	r1, [pc, #52]	@ (8019a2c <dhcp_release_and_stop+0x130>)
 80199f8:	6878      	ldr	r0, [r7, #4]
 80199fa:	f7f6 fedf 	bl	80107bc <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80199fe:	2100      	movs	r1, #0
 8019a00:	69f8      	ldr	r0, [r7, #28]
 8019a02:	f000 f815 	bl	8019a30 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8019a06:	69fb      	ldr	r3, [r7, #28]
 8019a08:	791b      	ldrb	r3, [r3, #4]
 8019a0a:	2b00      	cmp	r3, #0
 8019a0c:	d008      	beq.n	8019a20 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8019a0e:	f7fe ff6b 	bl	80188e8 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8019a12:	69fb      	ldr	r3, [r7, #28]
 8019a14:	2200      	movs	r2, #0
 8019a16:	711a      	strb	r2, [r3, #4]
 8019a18:	e002      	b.n	8019a20 <dhcp_release_and_stop+0x124>
    return;
 8019a1a:	bf00      	nop
 8019a1c:	e000      	b.n	8019a20 <dhcp_release_and_stop+0x124>
    return;
 8019a1e:	bf00      	nop
  }
}
 8019a20:	3720      	adds	r7, #32
 8019a22:	46bd      	mov	sp, r7
 8019a24:	bdb0      	pop	{r4, r5, r7, pc}
 8019a26:	bf00      	nop
 8019a28:	20012704 	.word	0x20012704
 8019a2c:	08025d70 	.word	0x08025d70

08019a30 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8019a30:	b480      	push	{r7}
 8019a32:	b083      	sub	sp, #12
 8019a34:	af00      	add	r7, sp, #0
 8019a36:	6078      	str	r0, [r7, #4]
 8019a38:	460b      	mov	r3, r1
 8019a3a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8019a3c:	687b      	ldr	r3, [r7, #4]
 8019a3e:	795b      	ldrb	r3, [r3, #5]
 8019a40:	78fa      	ldrb	r2, [r7, #3]
 8019a42:	429a      	cmp	r2, r3
 8019a44:	d008      	beq.n	8019a58 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8019a46:	687b      	ldr	r3, [r7, #4]
 8019a48:	78fa      	ldrb	r2, [r7, #3]
 8019a4a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	2200      	movs	r2, #0
 8019a50:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	2200      	movs	r2, #0
 8019a56:	811a      	strh	r2, [r3, #8]
  }
}
 8019a58:	bf00      	nop
 8019a5a:	370c      	adds	r7, #12
 8019a5c:	46bd      	mov	sp, r7
 8019a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a62:	4770      	bx	lr

08019a64 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8019a64:	b580      	push	{r7, lr}
 8019a66:	b082      	sub	sp, #8
 8019a68:	af00      	add	r7, sp, #0
 8019a6a:	6039      	str	r1, [r7, #0]
 8019a6c:	4611      	mov	r1, r2
 8019a6e:	461a      	mov	r2, r3
 8019a70:	4603      	mov	r3, r0
 8019a72:	80fb      	strh	r3, [r7, #6]
 8019a74:	460b      	mov	r3, r1
 8019a76:	717b      	strb	r3, [r7, #5]
 8019a78:	4613      	mov	r3, r2
 8019a7a:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8019a7c:	88fa      	ldrh	r2, [r7, #6]
 8019a7e:	793b      	ldrb	r3, [r7, #4]
 8019a80:	4413      	add	r3, r2
 8019a82:	3302      	adds	r3, #2
 8019a84:	2b44      	cmp	r3, #68	@ 0x44
 8019a86:	d906      	bls.n	8019a96 <dhcp_option+0x32>
 8019a88:	4b0d      	ldr	r3, [pc, #52]	@ (8019ac0 <dhcp_option+0x5c>)
 8019a8a:	f240 529a 	movw	r2, #1434	@ 0x59a
 8019a8e:	490d      	ldr	r1, [pc, #52]	@ (8019ac4 <dhcp_option+0x60>)
 8019a90:	480d      	ldr	r0, [pc, #52]	@ (8019ac8 <dhcp_option+0x64>)
 8019a92:	f004 fc23 	bl	801e2dc <iprintf>
  options[options_out_len++] = option_type;
 8019a96:	88fb      	ldrh	r3, [r7, #6]
 8019a98:	1c5a      	adds	r2, r3, #1
 8019a9a:	80fa      	strh	r2, [r7, #6]
 8019a9c:	461a      	mov	r2, r3
 8019a9e:	683b      	ldr	r3, [r7, #0]
 8019aa0:	4413      	add	r3, r2
 8019aa2:	797a      	ldrb	r2, [r7, #5]
 8019aa4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8019aa6:	88fb      	ldrh	r3, [r7, #6]
 8019aa8:	1c5a      	adds	r2, r3, #1
 8019aaa:	80fa      	strh	r2, [r7, #6]
 8019aac:	461a      	mov	r2, r3
 8019aae:	683b      	ldr	r3, [r7, #0]
 8019ab0:	4413      	add	r3, r2
 8019ab2:	793a      	ldrb	r2, [r7, #4]
 8019ab4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019ab6:	88fb      	ldrh	r3, [r7, #6]
}
 8019ab8:	4618      	mov	r0, r3
 8019aba:	3708      	adds	r7, #8
 8019abc:	46bd      	mov	sp, r7
 8019abe:	bd80      	pop	{r7, pc}
 8019ac0:	08024ff8 	.word	0x08024ff8
 8019ac4:	0802518c 	.word	0x0802518c
 8019ac8:	08025058 	.word	0x08025058

08019acc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8019acc:	b580      	push	{r7, lr}
 8019ace:	b082      	sub	sp, #8
 8019ad0:	af00      	add	r7, sp, #0
 8019ad2:	4603      	mov	r3, r0
 8019ad4:	6039      	str	r1, [r7, #0]
 8019ad6:	80fb      	strh	r3, [r7, #6]
 8019ad8:	4613      	mov	r3, r2
 8019ada:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8019adc:	88fb      	ldrh	r3, [r7, #6]
 8019ade:	2b43      	cmp	r3, #67	@ 0x43
 8019ae0:	d906      	bls.n	8019af0 <dhcp_option_byte+0x24>
 8019ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8019b0c <dhcp_option_byte+0x40>)
 8019ae4:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8019ae8:	4909      	ldr	r1, [pc, #36]	@ (8019b10 <dhcp_option_byte+0x44>)
 8019aea:	480a      	ldr	r0, [pc, #40]	@ (8019b14 <dhcp_option_byte+0x48>)
 8019aec:	f004 fbf6 	bl	801e2dc <iprintf>
  options[options_out_len++] = value;
 8019af0:	88fb      	ldrh	r3, [r7, #6]
 8019af2:	1c5a      	adds	r2, r3, #1
 8019af4:	80fa      	strh	r2, [r7, #6]
 8019af6:	461a      	mov	r2, r3
 8019af8:	683b      	ldr	r3, [r7, #0]
 8019afa:	4413      	add	r3, r2
 8019afc:	797a      	ldrb	r2, [r7, #5]
 8019afe:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019b00:	88fb      	ldrh	r3, [r7, #6]
}
 8019b02:	4618      	mov	r0, r3
 8019b04:	3708      	adds	r7, #8
 8019b06:	46bd      	mov	sp, r7
 8019b08:	bd80      	pop	{r7, pc}
 8019b0a:	bf00      	nop
 8019b0c:	08024ff8 	.word	0x08024ff8
 8019b10:	080251d0 	.word	0x080251d0
 8019b14:	08025058 	.word	0x08025058

08019b18 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8019b18:	b580      	push	{r7, lr}
 8019b1a:	b082      	sub	sp, #8
 8019b1c:	af00      	add	r7, sp, #0
 8019b1e:	4603      	mov	r3, r0
 8019b20:	6039      	str	r1, [r7, #0]
 8019b22:	80fb      	strh	r3, [r7, #6]
 8019b24:	4613      	mov	r3, r2
 8019b26:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8019b28:	88fb      	ldrh	r3, [r7, #6]
 8019b2a:	3302      	adds	r3, #2
 8019b2c:	2b44      	cmp	r3, #68	@ 0x44
 8019b2e:	d906      	bls.n	8019b3e <dhcp_option_short+0x26>
 8019b30:	4b0f      	ldr	r3, [pc, #60]	@ (8019b70 <dhcp_option_short+0x58>)
 8019b32:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8019b36:	490f      	ldr	r1, [pc, #60]	@ (8019b74 <dhcp_option_short+0x5c>)
 8019b38:	480f      	ldr	r0, [pc, #60]	@ (8019b78 <dhcp_option_short+0x60>)
 8019b3a:	f004 fbcf 	bl	801e2dc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8019b3e:	88bb      	ldrh	r3, [r7, #4]
 8019b40:	0a1b      	lsrs	r3, r3, #8
 8019b42:	b29a      	uxth	r2, r3
 8019b44:	88fb      	ldrh	r3, [r7, #6]
 8019b46:	1c59      	adds	r1, r3, #1
 8019b48:	80f9      	strh	r1, [r7, #6]
 8019b4a:	4619      	mov	r1, r3
 8019b4c:	683b      	ldr	r3, [r7, #0]
 8019b4e:	440b      	add	r3, r1
 8019b50:	b2d2      	uxtb	r2, r2
 8019b52:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8019b54:	88fb      	ldrh	r3, [r7, #6]
 8019b56:	1c5a      	adds	r2, r3, #1
 8019b58:	80fa      	strh	r2, [r7, #6]
 8019b5a:	461a      	mov	r2, r3
 8019b5c:	683b      	ldr	r3, [r7, #0]
 8019b5e:	4413      	add	r3, r2
 8019b60:	88ba      	ldrh	r2, [r7, #4]
 8019b62:	b2d2      	uxtb	r2, r2
 8019b64:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019b66:	88fb      	ldrh	r3, [r7, #6]
}
 8019b68:	4618      	mov	r0, r3
 8019b6a:	3708      	adds	r7, #8
 8019b6c:	46bd      	mov	sp, r7
 8019b6e:	bd80      	pop	{r7, pc}
 8019b70:	08024ff8 	.word	0x08024ff8
 8019b74:	08025208 	.word	0x08025208
 8019b78:	08025058 	.word	0x08025058

08019b7c <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8019b7c:	b580      	push	{r7, lr}
 8019b7e:	b084      	sub	sp, #16
 8019b80:	af00      	add	r7, sp, #0
 8019b82:	4603      	mov	r3, r0
 8019b84:	60b9      	str	r1, [r7, #8]
 8019b86:	607a      	str	r2, [r7, #4]
 8019b88:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8019b8a:	89fb      	ldrh	r3, [r7, #14]
 8019b8c:	3304      	adds	r3, #4
 8019b8e:	2b44      	cmp	r3, #68	@ 0x44
 8019b90:	d906      	bls.n	8019ba0 <dhcp_option_long+0x24>
 8019b92:	4b19      	ldr	r3, [pc, #100]	@ (8019bf8 <dhcp_option_long+0x7c>)
 8019b94:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 8019b98:	4918      	ldr	r1, [pc, #96]	@ (8019bfc <dhcp_option_long+0x80>)
 8019b9a:	4819      	ldr	r0, [pc, #100]	@ (8019c00 <dhcp_option_long+0x84>)
 8019b9c:	f004 fb9e 	bl	801e2dc <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	0e1a      	lsrs	r2, r3, #24
 8019ba4:	89fb      	ldrh	r3, [r7, #14]
 8019ba6:	1c59      	adds	r1, r3, #1
 8019ba8:	81f9      	strh	r1, [r7, #14]
 8019baa:	4619      	mov	r1, r3
 8019bac:	68bb      	ldr	r3, [r7, #8]
 8019bae:	440b      	add	r3, r1
 8019bb0:	b2d2      	uxtb	r2, r2
 8019bb2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	0c1a      	lsrs	r2, r3, #16
 8019bb8:	89fb      	ldrh	r3, [r7, #14]
 8019bba:	1c59      	adds	r1, r3, #1
 8019bbc:	81f9      	strh	r1, [r7, #14]
 8019bbe:	4619      	mov	r1, r3
 8019bc0:	68bb      	ldr	r3, [r7, #8]
 8019bc2:	440b      	add	r3, r1
 8019bc4:	b2d2      	uxtb	r2, r2
 8019bc6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	0a1a      	lsrs	r2, r3, #8
 8019bcc:	89fb      	ldrh	r3, [r7, #14]
 8019bce:	1c59      	adds	r1, r3, #1
 8019bd0:	81f9      	strh	r1, [r7, #14]
 8019bd2:	4619      	mov	r1, r3
 8019bd4:	68bb      	ldr	r3, [r7, #8]
 8019bd6:	440b      	add	r3, r1
 8019bd8:	b2d2      	uxtb	r2, r2
 8019bda:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8019bdc:	89fb      	ldrh	r3, [r7, #14]
 8019bde:	1c5a      	adds	r2, r3, #1
 8019be0:	81fa      	strh	r2, [r7, #14]
 8019be2:	461a      	mov	r2, r3
 8019be4:	68bb      	ldr	r3, [r7, #8]
 8019be6:	4413      	add	r3, r2
 8019be8:	687a      	ldr	r2, [r7, #4]
 8019bea:	b2d2      	uxtb	r2, r2
 8019bec:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019bee:	89fb      	ldrh	r3, [r7, #14]
}
 8019bf0:	4618      	mov	r0, r3
 8019bf2:	3710      	adds	r7, #16
 8019bf4:	46bd      	mov	sp, r7
 8019bf6:	bd80      	pop	{r7, pc}
 8019bf8:	08024ff8 	.word	0x08024ff8
 8019bfc:	08025244 	.word	0x08025244
 8019c00:	08025058 	.word	0x08025058

08019c04 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8019c04:	b580      	push	{r7, lr}
 8019c06:	b090      	sub	sp, #64	@ 0x40
 8019c08:	af00      	add	r7, sp, #0
 8019c0a:	6078      	str	r0, [r7, #4]
 8019c0c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8019c0e:	2300      	movs	r3, #0
 8019c10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8019c12:	2300      	movs	r3, #0
 8019c14:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8019c16:	220a      	movs	r2, #10
 8019c18:	2100      	movs	r1, #0
 8019c1a:	48ba      	ldr	r0, [pc, #744]	@ (8019f04 <dhcp_parse_reply+0x300>)
 8019c1c:	f004 fbfd 	bl	801e41a <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	895b      	ldrh	r3, [r3, #10]
 8019c24:	2b2b      	cmp	r3, #43	@ 0x2b
 8019c26:	d802      	bhi.n	8019c2e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8019c28:	f06f 0301 	mvn.w	r3, #1
 8019c2c:	e2ea      	b.n	801a204 <dhcp_parse_reply+0x600>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	685b      	ldr	r3, [r3, #4]
 8019c32:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8019c34:	23f0      	movs	r3, #240	@ 0xf0
 8019c36:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	891b      	ldrh	r3, [r3, #8]
 8019c3c:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8019c42:	e00c      	b.n	8019c5e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8019c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c46:	895b      	ldrh	r3, [r3, #10]
 8019c48:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8019c4a:	1ad3      	subs	r3, r2, r3
 8019c4c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8019c4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c50:	895b      	ldrh	r3, [r3, #10]
 8019c52:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8019c54:	1ad3      	subs	r3, r2, r3
 8019c56:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8019c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8019c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d004      	beq.n	8019c6e <dhcp_parse_reply+0x6a>
 8019c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c66:	895b      	ldrh	r3, [r3, #10]
 8019c68:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8019c6a:	429a      	cmp	r2, r3
 8019c6c:	d2ea      	bcs.n	8019c44 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8019c6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d102      	bne.n	8019c7a <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8019c74:	f06f 0301 	mvn.w	r3, #1
 8019c78:	e2c4      	b.n	801a204 <dhcp_parse_reply+0x600>
  }
  offset = options_idx;
 8019c7a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019c7c:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 8019c7e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8019c80:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 8019c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019c84:	685b      	ldr	r3, [r3, #4]
 8019c86:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8019c88:	e267      	b.n	801a15a <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 8019c8a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019c8c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019c8e:	4413      	add	r3, r2
 8019c90:	781b      	ldrb	r3, [r3, #0]
 8019c92:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8019c94:	2300      	movs	r3, #0
 8019c96:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 8019c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8019c9e:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8019ca0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019ca2:	3302      	adds	r3, #2
 8019ca4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8019ca6:	8bfa      	ldrh	r2, [r7, #30]
 8019ca8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019caa:	429a      	cmp	r2, r3
 8019cac:	d202      	bcs.n	8019cb4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8019cae:	f06f 0301 	mvn.w	r3, #1
 8019cb2:	e2a7      	b.n	801a204 <dhcp_parse_reply+0x600>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8019cb4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019cb6:	3301      	adds	r3, #1
 8019cb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019cba:	8952      	ldrh	r2, [r2, #10]
 8019cbc:	4293      	cmp	r3, r2
 8019cbe:	da07      	bge.n	8019cd0 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8019cc0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019cc2:	3301      	adds	r3, #1
 8019cc4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019cc6:	4413      	add	r3, r2
 8019cc8:	781b      	ldrb	r3, [r3, #0]
 8019cca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019cce:	e00b      	b.n	8019ce8 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8019cd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cd2:	681b      	ldr	r3, [r3, #0]
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d004      	beq.n	8019ce2 <dhcp_parse_reply+0xde>
 8019cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019cda:	681b      	ldr	r3, [r3, #0]
 8019cdc:	685b      	ldr	r3, [r3, #4]
 8019cde:	781b      	ldrb	r3, [r3, #0]
 8019ce0:	e000      	b.n	8019ce4 <dhcp_parse_reply+0xe0>
 8019ce2:	2300      	movs	r3, #0
 8019ce4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8019ce8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019cec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8019cf0:	7dfb      	ldrb	r3, [r7, #23]
 8019cf2:	2b3b      	cmp	r3, #59	@ 0x3b
 8019cf4:	f200 815a 	bhi.w	8019fac <dhcp_parse_reply+0x3a8>
 8019cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8019d00 <dhcp_parse_reply+0xfc>)
 8019cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019cfe:	bf00      	nop
 8019d00:	08019df1 	.word	0x08019df1
 8019d04:	08019e01 	.word	0x08019e01
 8019d08:	08019fad 	.word	0x08019fad
 8019d0c:	08019e23 	.word	0x08019e23
 8019d10:	08019fad 	.word	0x08019fad
 8019d14:	08019fad 	.word	0x08019fad
 8019d18:	08019e4f 	.word	0x08019e4f
 8019d1c:	08019fad 	.word	0x08019fad
 8019d20:	08019fad 	.word	0x08019fad
 8019d24:	08019fad 	.word	0x08019fad
 8019d28:	08019fad 	.word	0x08019fad
 8019d2c:	08019fad 	.word	0x08019fad
 8019d30:	08019fad 	.word	0x08019fad
 8019d34:	08019fad 	.word	0x08019fad
 8019d38:	08019fad 	.word	0x08019fad
 8019d3c:	08019fad 	.word	0x08019fad
 8019d40:	08019fad 	.word	0x08019fad
 8019d44:	08019fad 	.word	0x08019fad
 8019d48:	08019fad 	.word	0x08019fad
 8019d4c:	08019fad 	.word	0x08019fad
 8019d50:	08019fad 	.word	0x08019fad
 8019d54:	08019fad 	.word	0x08019fad
 8019d58:	08019fad 	.word	0x08019fad
 8019d5c:	08019fad 	.word	0x08019fad
 8019d60:	08019fad 	.word	0x08019fad
 8019d64:	08019fad 	.word	0x08019fad
 8019d68:	08019fad 	.word	0x08019fad
 8019d6c:	08019fad 	.word	0x08019fad
 8019d70:	08019fad 	.word	0x08019fad
 8019d74:	08019fad 	.word	0x08019fad
 8019d78:	08019fad 	.word	0x08019fad
 8019d7c:	08019fad 	.word	0x08019fad
 8019d80:	08019fad 	.word	0x08019fad
 8019d84:	08019fad 	.word	0x08019fad
 8019d88:	08019fad 	.word	0x08019fad
 8019d8c:	08019fad 	.word	0x08019fad
 8019d90:	08019fad 	.word	0x08019fad
 8019d94:	08019fad 	.word	0x08019fad
 8019d98:	08019fad 	.word	0x08019fad
 8019d9c:	08019fad 	.word	0x08019fad
 8019da0:	08019fad 	.word	0x08019fad
 8019da4:	08019fad 	.word	0x08019fad
 8019da8:	08019fad 	.word	0x08019fad
 8019dac:	08019fad 	.word	0x08019fad
 8019db0:	08019fad 	.word	0x08019fad
 8019db4:	08019fad 	.word	0x08019fad
 8019db8:	08019fad 	.word	0x08019fad
 8019dbc:	08019fad 	.word	0x08019fad
 8019dc0:	08019fad 	.word	0x08019fad
 8019dc4:	08019fad 	.word	0x08019fad
 8019dc8:	08019fad 	.word	0x08019fad
 8019dcc:	08019ea5 	.word	0x08019ea5
 8019dd0:	08019ec7 	.word	0x08019ec7
 8019dd4:	08019f25 	.word	0x08019f25
 8019dd8:	08019f47 	.word	0x08019f47
 8019ddc:	08019fad 	.word	0x08019fad
 8019de0:	08019fad 	.word	0x08019fad
 8019de4:	08019fad 	.word	0x08019fad
 8019de8:	08019f69 	.word	0x08019f69
 8019dec:	08019f8b 	.word	0x08019f8b
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8019df0:	2300      	movs	r3, #0
 8019df2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019df6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019dfa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8019dfe:	e0d9      	b.n	8019fb4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019e00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e04:	2b04      	cmp	r3, #4
 8019e06:	d009      	beq.n	8019e1c <dhcp_parse_reply+0x218>
 8019e08:	4b3f      	ldr	r3, [pc, #252]	@ (8019f08 <dhcp_parse_reply+0x304>)
 8019e0a:	f240 622e 	movw	r2, #1582	@ 0x62e
 8019e0e:	493f      	ldr	r1, [pc, #252]	@ (8019f0c <dhcp_parse_reply+0x308>)
 8019e10:	483f      	ldr	r0, [pc, #252]	@ (8019f10 <dhcp_parse_reply+0x30c>)
 8019e12:	f004 fa63 	bl	801e2dc <iprintf>
 8019e16:	f06f 0305 	mvn.w	r3, #5
 8019e1a:	e1f3      	b.n	801a204 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8019e1c:	2306      	movs	r3, #6
 8019e1e:	623b      	str	r3, [r7, #32]
        break;
 8019e20:	e0c8      	b.n	8019fb4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8019e22:	2304      	movs	r3, #4
 8019e24:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8019e28:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019e2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019e30:	429a      	cmp	r2, r3
 8019e32:	d209      	bcs.n	8019e48 <dhcp_parse_reply+0x244>
 8019e34:	4b34      	ldr	r3, [pc, #208]	@ (8019f08 <dhcp_parse_reply+0x304>)
 8019e36:	f240 6233 	movw	r2, #1587	@ 0x633
 8019e3a:	4936      	ldr	r1, [pc, #216]	@ (8019f14 <dhcp_parse_reply+0x310>)
 8019e3c:	4834      	ldr	r0, [pc, #208]	@ (8019f10 <dhcp_parse_reply+0x30c>)
 8019e3e:	f004 fa4d 	bl	801e2dc <iprintf>
 8019e42:	f06f 0305 	mvn.w	r3, #5
 8019e46:	e1dd      	b.n	801a204 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8019e48:	2307      	movs	r3, #7
 8019e4a:	623b      	str	r3, [r7, #32]
        break;
 8019e4c:	e0b2      	b.n	8019fb4 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8019e4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e52:	f003 0303 	and.w	r3, r3, #3
 8019e56:	b2db      	uxtb	r3, r3
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d009      	beq.n	8019e70 <dhcp_parse_reply+0x26c>
 8019e5c:	4b2a      	ldr	r3, [pc, #168]	@ (8019f08 <dhcp_parse_reply+0x304>)
 8019e5e:	f240 6239 	movw	r2, #1593	@ 0x639
 8019e62:	492d      	ldr	r1, [pc, #180]	@ (8019f18 <dhcp_parse_reply+0x314>)
 8019e64:	482a      	ldr	r0, [pc, #168]	@ (8019f10 <dhcp_parse_reply+0x30c>)
 8019e66:	f004 fa39 	bl	801e2dc <iprintf>
 8019e6a:	f06f 0305 	mvn.w	r3, #5
 8019e6e:	e1c9      	b.n	801a204 <dhcp_parse_reply+0x600>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8019e70:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e74:	2b08      	cmp	r3, #8
 8019e76:	bf28      	it	cs
 8019e78:	2308      	movcs	r3, #8
 8019e7a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8019e7e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019e82:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019e86:	429a      	cmp	r2, r3
 8019e88:	d209      	bcs.n	8019e9e <dhcp_parse_reply+0x29a>
 8019e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8019f08 <dhcp_parse_reply+0x304>)
 8019e8c:	f240 623c 	movw	r2, #1596	@ 0x63c
 8019e90:	4920      	ldr	r1, [pc, #128]	@ (8019f14 <dhcp_parse_reply+0x310>)
 8019e92:	481f      	ldr	r0, [pc, #124]	@ (8019f10 <dhcp_parse_reply+0x30c>)
 8019e94:	f004 fa22 	bl	801e2dc <iprintf>
 8019e98:	f06f 0305 	mvn.w	r3, #5
 8019e9c:	e1b2      	b.n	801a204 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8019e9e:	2308      	movs	r3, #8
 8019ea0:	623b      	str	r3, [r7, #32]
        break;
 8019ea2:	e087      	b.n	8019fb4 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019ea8:	2b04      	cmp	r3, #4
 8019eaa:	d009      	beq.n	8019ec0 <dhcp_parse_reply+0x2bc>
 8019eac:	4b16      	ldr	r3, [pc, #88]	@ (8019f08 <dhcp_parse_reply+0x304>)
 8019eae:	f240 6241 	movw	r2, #1601	@ 0x641
 8019eb2:	4916      	ldr	r1, [pc, #88]	@ (8019f0c <dhcp_parse_reply+0x308>)
 8019eb4:	4816      	ldr	r0, [pc, #88]	@ (8019f10 <dhcp_parse_reply+0x30c>)
 8019eb6:	f004 fa11 	bl	801e2dc <iprintf>
 8019eba:	f06f 0305 	mvn.w	r3, #5
 8019ebe:	e1a1      	b.n	801a204 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8019ec0:	2303      	movs	r3, #3
 8019ec2:	623b      	str	r3, [r7, #32]
        break;
 8019ec4:	e076      	b.n	8019fb4 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8019ec6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019eca:	2b01      	cmp	r3, #1
 8019ecc:	d009      	beq.n	8019ee2 <dhcp_parse_reply+0x2de>
 8019ece:	4b0e      	ldr	r3, [pc, #56]	@ (8019f08 <dhcp_parse_reply+0x304>)
 8019ed0:	f240 624f 	movw	r2, #1615	@ 0x64f
 8019ed4:	4911      	ldr	r1, [pc, #68]	@ (8019f1c <dhcp_parse_reply+0x318>)
 8019ed6:	480e      	ldr	r0, [pc, #56]	@ (8019f10 <dhcp_parse_reply+0x30c>)
 8019ed8:	f004 fa00 	bl	801e2dc <iprintf>
 8019edc:	f06f 0305 	mvn.w	r3, #5
 8019ee0:	e190      	b.n	801a204 <dhcp_parse_reply+0x600>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8019ee2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019ee4:	2bf0      	cmp	r3, #240	@ 0xf0
 8019ee6:	d009      	beq.n	8019efc <dhcp_parse_reply+0x2f8>
 8019ee8:	4b07      	ldr	r3, [pc, #28]	@ (8019f08 <dhcp_parse_reply+0x304>)
 8019eea:	f240 6251 	movw	r2, #1617	@ 0x651
 8019eee:	490c      	ldr	r1, [pc, #48]	@ (8019f20 <dhcp_parse_reply+0x31c>)
 8019ef0:	4807      	ldr	r0, [pc, #28]	@ (8019f10 <dhcp_parse_reply+0x30c>)
 8019ef2:	f004 f9f3 	bl	801e2dc <iprintf>
 8019ef6:	f06f 0305 	mvn.w	r3, #5
 8019efa:	e183      	b.n	801a204 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8019efc:	2300      	movs	r3, #0
 8019efe:	623b      	str	r3, [r7, #32]
        break;
 8019f00:	e058      	b.n	8019fb4 <dhcp_parse_reply+0x3b0>
 8019f02:	bf00      	nop
 8019f04:	200126f8 	.word	0x200126f8
 8019f08:	08024ff8 	.word	0x08024ff8
 8019f0c:	08025280 	.word	0x08025280
 8019f10:	08025058 	.word	0x08025058
 8019f14:	0802528c 	.word	0x0802528c
 8019f18:	080252a0 	.word	0x080252a0
 8019f1c:	080252b0 	.word	0x080252b0
 8019f20:	080252bc 	.word	0x080252bc
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8019f24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019f28:	2b01      	cmp	r3, #1
 8019f2a:	d009      	beq.n	8019f40 <dhcp_parse_reply+0x33c>
 8019f2c:	4b9d      	ldr	r3, [pc, #628]	@ (801a1a4 <dhcp_parse_reply+0x5a0>)
 8019f2e:	f240 6255 	movw	r2, #1621	@ 0x655
 8019f32:	499d      	ldr	r1, [pc, #628]	@ (801a1a8 <dhcp_parse_reply+0x5a4>)
 8019f34:	489d      	ldr	r0, [pc, #628]	@ (801a1ac <dhcp_parse_reply+0x5a8>)
 8019f36:	f004 f9d1 	bl	801e2dc <iprintf>
 8019f3a:	f06f 0305 	mvn.w	r3, #5
 8019f3e:	e161      	b.n	801a204 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8019f40:	2301      	movs	r3, #1
 8019f42:	623b      	str	r3, [r7, #32]
        break;
 8019f44:	e036      	b.n	8019fb4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019f46:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019f4a:	2b04      	cmp	r3, #4
 8019f4c:	d009      	beq.n	8019f62 <dhcp_parse_reply+0x35e>
 8019f4e:	4b95      	ldr	r3, [pc, #596]	@ (801a1a4 <dhcp_parse_reply+0x5a0>)
 8019f50:	f240 6259 	movw	r2, #1625	@ 0x659
 8019f54:	4996      	ldr	r1, [pc, #600]	@ (801a1b0 <dhcp_parse_reply+0x5ac>)
 8019f56:	4895      	ldr	r0, [pc, #596]	@ (801a1ac <dhcp_parse_reply+0x5a8>)
 8019f58:	f004 f9c0 	bl	801e2dc <iprintf>
 8019f5c:	f06f 0305 	mvn.w	r3, #5
 8019f60:	e150      	b.n	801a204 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8019f62:	2302      	movs	r3, #2
 8019f64:	623b      	str	r3, [r7, #32]
        break;
 8019f66:	e025      	b.n	8019fb4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019f68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019f6c:	2b04      	cmp	r3, #4
 8019f6e:	d009      	beq.n	8019f84 <dhcp_parse_reply+0x380>
 8019f70:	4b8c      	ldr	r3, [pc, #560]	@ (801a1a4 <dhcp_parse_reply+0x5a0>)
 8019f72:	f240 625d 	movw	r2, #1629	@ 0x65d
 8019f76:	498e      	ldr	r1, [pc, #568]	@ (801a1b0 <dhcp_parse_reply+0x5ac>)
 8019f78:	488c      	ldr	r0, [pc, #560]	@ (801a1ac <dhcp_parse_reply+0x5a8>)
 8019f7a:	f004 f9af 	bl	801e2dc <iprintf>
 8019f7e:	f06f 0305 	mvn.w	r3, #5
 8019f82:	e13f      	b.n	801a204 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T1;
 8019f84:	2304      	movs	r3, #4
 8019f86:	623b      	str	r3, [r7, #32]
        break;
 8019f88:	e014      	b.n	8019fb4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019f8e:	2b04      	cmp	r3, #4
 8019f90:	d009      	beq.n	8019fa6 <dhcp_parse_reply+0x3a2>
 8019f92:	4b84      	ldr	r3, [pc, #528]	@ (801a1a4 <dhcp_parse_reply+0x5a0>)
 8019f94:	f240 6261 	movw	r2, #1633	@ 0x661
 8019f98:	4985      	ldr	r1, [pc, #532]	@ (801a1b0 <dhcp_parse_reply+0x5ac>)
 8019f9a:	4884      	ldr	r0, [pc, #528]	@ (801a1ac <dhcp_parse_reply+0x5a8>)
 8019f9c:	f004 f99e 	bl	801e2dc <iprintf>
 8019fa0:	f06f 0305 	mvn.w	r3, #5
 8019fa4:	e12e      	b.n	801a204 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T2;
 8019fa6:	2305      	movs	r3, #5
 8019fa8:	623b      	str	r3, [r7, #32]
        break;
 8019faa:	e003      	b.n	8019fb4 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 8019fac:	2300      	movs	r3, #0
 8019fae:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8019fb2:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8019fb4:	7dfb      	ldrb	r3, [r7, #23]
 8019fb6:	2b00      	cmp	r3, #0
 8019fb8:	d103      	bne.n	8019fc2 <dhcp_parse_reply+0x3be>
      offset++;
 8019fba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019fbc:	3301      	adds	r3, #1
 8019fbe:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8019fc0:	e0a1      	b.n	801a106 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8019fc2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019fc8:	4413      	add	r3, r2
 8019fca:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8019fce:	4293      	cmp	r3, r2
 8019fd0:	dd02      	ble.n	8019fd8 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 8019fd2:	f06f 0301 	mvn.w	r3, #1
 8019fd6:	e115      	b.n	801a204 <dhcp_parse_reply+0x600>
      }
      offset = (u16_t)(offset + len + 2);
 8019fd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019fdc:	b29a      	uxth	r2, r3
 8019fde:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019fe0:	4413      	add	r3, r2
 8019fe2:	b29b      	uxth	r3, r3
 8019fe4:	3302      	adds	r3, #2
 8019fe6:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8019fe8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	f000 808a 	beq.w	801a106 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 8019ff2:	2300      	movs	r3, #0
 8019ff4:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8019ff6:	6a3b      	ldr	r3, [r7, #32]
 8019ff8:	2b00      	cmp	r3, #0
 8019ffa:	db02      	blt.n	801a002 <dhcp_parse_reply+0x3fe>
 8019ffc:	6a3b      	ldr	r3, [r7, #32]
 8019ffe:	2b09      	cmp	r3, #9
 801a000:	dd06      	ble.n	801a010 <dhcp_parse_reply+0x40c>
 801a002:	4b68      	ldr	r3, [pc, #416]	@ (801a1a4 <dhcp_parse_reply+0x5a0>)
 801a004:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 801a008:	496a      	ldr	r1, [pc, #424]	@ (801a1b4 <dhcp_parse_reply+0x5b0>)
 801a00a:	4868      	ldr	r0, [pc, #416]	@ (801a1ac <dhcp_parse_reply+0x5a8>)
 801a00c:	f004 f966 	bl	801e2dc <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801a010:	4a69      	ldr	r2, [pc, #420]	@ (801a1b8 <dhcp_parse_reply+0x5b4>)
 801a012:	6a3b      	ldr	r3, [r7, #32]
 801a014:	4413      	add	r3, r2
 801a016:	781b      	ldrb	r3, [r3, #0]
 801a018:	2b00      	cmp	r3, #0
 801a01a:	d174      	bne.n	801a106 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 801a01c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a020:	2b04      	cmp	r3, #4
 801a022:	bf28      	it	cs
 801a024:	2304      	movcs	r3, #4
 801a026:	b2db      	uxtb	r3, r3
 801a028:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801a02a:	8bfb      	ldrh	r3, [r7, #30]
 801a02c:	8aba      	ldrh	r2, [r7, #20]
 801a02e:	f107 0108 	add.w	r1, r7, #8
 801a032:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a034:	f7f7 fad6 	bl	80115e4 <pbuf_copy_partial>
 801a038:	4603      	mov	r3, r0
 801a03a:	461a      	mov	r2, r3
 801a03c:	8abb      	ldrh	r3, [r7, #20]
 801a03e:	4293      	cmp	r3, r2
 801a040:	d002      	beq.n	801a048 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 801a042:	f06f 0301 	mvn.w	r3, #1
 801a046:	e0dd      	b.n	801a204 <dhcp_parse_reply+0x600>
          }
          if (decode_len > 4) {
 801a048:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a04c:	2b04      	cmp	r3, #4
 801a04e:	d933      	bls.n	801a0b8 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801a050:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a054:	f003 0303 	and.w	r3, r3, #3
 801a058:	b2db      	uxtb	r3, r3
 801a05a:	2b00      	cmp	r3, #0
 801a05c:	d009      	beq.n	801a072 <dhcp_parse_reply+0x46e>
 801a05e:	4b51      	ldr	r3, [pc, #324]	@ (801a1a4 <dhcp_parse_reply+0x5a0>)
 801a060:	f240 6281 	movw	r2, #1665	@ 0x681
 801a064:	4955      	ldr	r1, [pc, #340]	@ (801a1bc <dhcp_parse_reply+0x5b8>)
 801a066:	4851      	ldr	r0, [pc, #324]	@ (801a1ac <dhcp_parse_reply+0x5a8>)
 801a068:	f004 f938 	bl	801e2dc <iprintf>
 801a06c:	f06f 0305 	mvn.w	r3, #5
 801a070:	e0c8      	b.n	801a204 <dhcp_parse_reply+0x600>
            dhcp_got_option(dhcp, decode_idx);
 801a072:	4a51      	ldr	r2, [pc, #324]	@ (801a1b8 <dhcp_parse_reply+0x5b4>)
 801a074:	6a3b      	ldr	r3, [r7, #32]
 801a076:	4413      	add	r3, r2
 801a078:	2201      	movs	r2, #1
 801a07a:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801a07c:	68bb      	ldr	r3, [r7, #8]
 801a07e:	4618      	mov	r0, r3
 801a080:	f7f5 f9d3 	bl	800f42a <lwip_htonl>
 801a084:	4602      	mov	r2, r0
 801a086:	494e      	ldr	r1, [pc, #312]	@ (801a1c0 <dhcp_parse_reply+0x5bc>)
 801a088:	6a3b      	ldr	r3, [r7, #32]
 801a08a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801a08e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a092:	3b04      	subs	r3, #4
 801a094:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801a098:	8bfb      	ldrh	r3, [r7, #30]
 801a09a:	3304      	adds	r3, #4
 801a09c:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801a09e:	8a7a      	ldrh	r2, [r7, #18]
 801a0a0:	8bfb      	ldrh	r3, [r7, #30]
 801a0a2:	429a      	cmp	r2, r3
 801a0a4:	d202      	bcs.n	801a0ac <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 801a0a6:	f06f 0301 	mvn.w	r3, #1
 801a0aa:	e0ab      	b.n	801a204 <dhcp_parse_reply+0x600>
            }
            val_offset = next_val_offset;
 801a0ac:	8a7b      	ldrh	r3, [r7, #18]
 801a0ae:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801a0b0:	6a3b      	ldr	r3, [r7, #32]
 801a0b2:	3301      	adds	r3, #1
 801a0b4:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801a0b6:	e79e      	b.n	8019ff6 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 801a0b8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a0bc:	2b04      	cmp	r3, #4
 801a0be:	d106      	bne.n	801a0ce <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 801a0c0:	68bb      	ldr	r3, [r7, #8]
 801a0c2:	4618      	mov	r0, r3
 801a0c4:	f7f5 f9b1 	bl	800f42a <lwip_htonl>
 801a0c8:	4603      	mov	r3, r0
 801a0ca:	60bb      	str	r3, [r7, #8]
 801a0cc:	e011      	b.n	801a0f2 <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801a0ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a0d2:	2b01      	cmp	r3, #1
 801a0d4:	d009      	beq.n	801a0ea <dhcp_parse_reply+0x4e6>
 801a0d6:	4b33      	ldr	r3, [pc, #204]	@ (801a1a4 <dhcp_parse_reply+0x5a0>)
 801a0d8:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 801a0dc:	4939      	ldr	r1, [pc, #228]	@ (801a1c4 <dhcp_parse_reply+0x5c0>)
 801a0de:	4833      	ldr	r0, [pc, #204]	@ (801a1ac <dhcp_parse_reply+0x5a8>)
 801a0e0:	f004 f8fc 	bl	801e2dc <iprintf>
 801a0e4:	f06f 0305 	mvn.w	r3, #5
 801a0e8:	e08c      	b.n	801a204 <dhcp_parse_reply+0x600>
            value = ((u8_t *)&value)[0];
 801a0ea:	f107 0308 	add.w	r3, r7, #8
 801a0ee:	781b      	ldrb	r3, [r3, #0]
 801a0f0:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801a0f2:	4a31      	ldr	r2, [pc, #196]	@ (801a1b8 <dhcp_parse_reply+0x5b4>)
 801a0f4:	6a3b      	ldr	r3, [r7, #32]
 801a0f6:	4413      	add	r3, r2
 801a0f8:	2201      	movs	r2, #1
 801a0fa:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801a0fc:	68ba      	ldr	r2, [r7, #8]
 801a0fe:	4930      	ldr	r1, [pc, #192]	@ (801a1c0 <dhcp_parse_reply+0x5bc>)
 801a100:	6a3b      	ldr	r3, [r7, #32]
 801a102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801a106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a108:	895b      	ldrh	r3, [r3, #10]
 801a10a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a10c:	429a      	cmp	r2, r3
 801a10e:	d324      	bcc.n	801a15a <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 801a110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a112:	895b      	ldrh	r3, [r3, #10]
 801a114:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a116:	1ad3      	subs	r3, r2, r3
 801a118:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801a11a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a11c:	895b      	ldrh	r3, [r3, #10]
 801a11e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801a120:	1ad3      	subs	r3, r2, r3
 801a122:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 801a124:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a126:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a128:	429a      	cmp	r2, r3
 801a12a:	d213      	bcs.n	801a154 <dhcp_parse_reply+0x550>
        q = q->next;
 801a12c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a12e:	681b      	ldr	r3, [r3, #0]
 801a130:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801a132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a134:	2b00      	cmp	r3, #0
 801a136:	d109      	bne.n	801a14c <dhcp_parse_reply+0x548>
 801a138:	4b1a      	ldr	r3, [pc, #104]	@ (801a1a4 <dhcp_parse_reply+0x5a0>)
 801a13a:	f240 629d 	movw	r2, #1693	@ 0x69d
 801a13e:	4922      	ldr	r1, [pc, #136]	@ (801a1c8 <dhcp_parse_reply+0x5c4>)
 801a140:	481a      	ldr	r0, [pc, #104]	@ (801a1ac <dhcp_parse_reply+0x5a8>)
 801a142:	f004 f8cb 	bl	801e2dc <iprintf>
 801a146:	f06f 0305 	mvn.w	r3, #5
 801a14a:	e05b      	b.n	801a204 <dhcp_parse_reply+0x600>
        options = (u8_t *)q->payload;
 801a14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a14e:	685b      	ldr	r3, [r3, #4]
 801a150:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a152:	e002      	b.n	801a15a <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801a154:	f06f 0301 	mvn.w	r3, #1
 801a158:	e054      	b.n	801a204 <dhcp_parse_reply+0x600>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801a15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d00a      	beq.n	801a176 <dhcp_parse_reply+0x572>
 801a160:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a162:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a164:	429a      	cmp	r2, r3
 801a166:	d206      	bcs.n	801a176 <dhcp_parse_reply+0x572>
 801a168:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a16a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a16c:	4413      	add	r3, r2
 801a16e:	781b      	ldrb	r3, [r3, #0]
 801a170:	2bff      	cmp	r3, #255	@ 0xff
 801a172:	f47f ad8a 	bne.w	8019c8a <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801a176:	4b10      	ldr	r3, [pc, #64]	@ (801a1b8 <dhcp_parse_reply+0x5b4>)
 801a178:	781b      	ldrb	r3, [r3, #0]
 801a17a:	2b00      	cmp	r3, #0
 801a17c:	d02d      	beq.n	801a1da <dhcp_parse_reply+0x5d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a17e:	4b10      	ldr	r3, [pc, #64]	@ (801a1c0 <dhcp_parse_reply+0x5bc>)
 801a180:	681b      	ldr	r3, [r3, #0]
 801a182:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a184:	4b0c      	ldr	r3, [pc, #48]	@ (801a1b8 <dhcp_parse_reply+0x5b4>)
 801a186:	2200      	movs	r2, #0
 801a188:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801a18a:	68fb      	ldr	r3, [r7, #12]
 801a18c:	2b01      	cmp	r3, #1
 801a18e:	d102      	bne.n	801a196 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 801a190:	2301      	movs	r3, #1
 801a192:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a194:	e021      	b.n	801a1da <dhcp_parse_reply+0x5d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	2b02      	cmp	r3, #2
 801a19a:	d117      	bne.n	801a1cc <dhcp_parse_reply+0x5c8>
      parse_sname_as_options = 1;
 801a19c:	2301      	movs	r3, #1
 801a19e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a1a0:	e01b      	b.n	801a1da <dhcp_parse_reply+0x5d6>
 801a1a2:	bf00      	nop
 801a1a4:	08024ff8 	.word	0x08024ff8
 801a1a8:	080252b0 	.word	0x080252b0
 801a1ac:	08025058 	.word	0x08025058
 801a1b0:	08025280 	.word	0x08025280
 801a1b4:	080252d4 	.word	0x080252d4
 801a1b8:	200126f8 	.word	0x200126f8
 801a1bc:	080252e8 	.word	0x080252e8
 801a1c0:	200126d0 	.word	0x200126d0
 801a1c4:	08025300 	.word	0x08025300
 801a1c8:	08025314 	.word	0x08025314
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801a1cc:	68fb      	ldr	r3, [r7, #12]
 801a1ce:	2b03      	cmp	r3, #3
 801a1d0:	d103      	bne.n	801a1da <dhcp_parse_reply+0x5d6>
      parse_sname_as_options = 1;
 801a1d2:	2301      	movs	r3, #1
 801a1d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 801a1d6:	2301      	movs	r3, #1
 801a1d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801a1da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a1dc:	2b00      	cmp	r3, #0
 801a1de:	d006      	beq.n	801a1ee <dhcp_parse_reply+0x5ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801a1e0:	2300      	movs	r3, #0
 801a1e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 801a1e4:	236c      	movs	r3, #108	@ 0x6c
 801a1e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801a1e8:	23ec      	movs	r3, #236	@ 0xec
 801a1ea:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801a1ec:	e527      	b.n	8019c3e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801a1ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	d006      	beq.n	801a202 <dhcp_parse_reply+0x5fe>
    parse_sname_as_options = 0;
 801a1f4:	2300      	movs	r3, #0
 801a1f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 801a1f8:	232c      	movs	r3, #44	@ 0x2c
 801a1fa:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801a1fc:	236c      	movs	r3, #108	@ 0x6c
 801a1fe:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 801a200:	e51d      	b.n	8019c3e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801a202:	2300      	movs	r3, #0
}
 801a204:	4618      	mov	r0, r3
 801a206:	3740      	adds	r7, #64	@ 0x40
 801a208:	46bd      	mov	sp, r7
 801a20a:	bd80      	pop	{r7, pc}

0801a20c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801a20c:	b580      	push	{r7, lr}
 801a20e:	b08a      	sub	sp, #40	@ 0x28
 801a210:	af00      	add	r7, sp, #0
 801a212:	60f8      	str	r0, [r7, #12]
 801a214:	60b9      	str	r1, [r7, #8]
 801a216:	607a      	str	r2, [r7, #4]
 801a218:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801a21a:	4b60      	ldr	r3, [pc, #384]	@ (801a39c <dhcp_recv+0x190>)
 801a21c:	685b      	ldr	r3, [r3, #4]
 801a21e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a220:	6a3b      	ldr	r3, [r7, #32]
 801a222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a224:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	685b      	ldr	r3, [r3, #4]
 801a22a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801a22c:	69fb      	ldr	r3, [r7, #28]
 801a22e:	2b00      	cmp	r3, #0
 801a230:	f000 809d 	beq.w	801a36e <dhcp_recv+0x162>
 801a234:	69fb      	ldr	r3, [r7, #28]
 801a236:	791b      	ldrb	r3, [r3, #4]
 801a238:	2b00      	cmp	r3, #0
 801a23a:	f000 8098 	beq.w	801a36e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	895b      	ldrh	r3, [r3, #10]
 801a242:	2b2b      	cmp	r3, #43	@ 0x2b
 801a244:	f240 8095 	bls.w	801a372 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801a248:	69bb      	ldr	r3, [r7, #24]
 801a24a:	781b      	ldrb	r3, [r3, #0]
 801a24c:	2b02      	cmp	r3, #2
 801a24e:	f040 8092 	bne.w	801a376 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a252:	2300      	movs	r3, #0
 801a254:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a258:	e012      	b.n	801a280 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801a25a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a25e:	6a3a      	ldr	r2, [r7, #32]
 801a260:	4413      	add	r3, r2
 801a262:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801a266:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a26a:	69b9      	ldr	r1, [r7, #24]
 801a26c:	440b      	add	r3, r1
 801a26e:	7f1b      	ldrb	r3, [r3, #28]
 801a270:	429a      	cmp	r2, r3
 801a272:	f040 8082 	bne.w	801a37a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a276:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a27a:	3301      	adds	r3, #1
 801a27c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a280:	6a3b      	ldr	r3, [r7, #32]
 801a282:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a286:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a28a:	429a      	cmp	r2, r3
 801a28c:	d203      	bcs.n	801a296 <dhcp_recv+0x8a>
 801a28e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a292:	2b05      	cmp	r3, #5
 801a294:	d9e1      	bls.n	801a25a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801a296:	69bb      	ldr	r3, [r7, #24]
 801a298:	685b      	ldr	r3, [r3, #4]
 801a29a:	4618      	mov	r0, r3
 801a29c:	f7f5 f8c5 	bl	800f42a <lwip_htonl>
 801a2a0:	4602      	mov	r2, r0
 801a2a2:	69fb      	ldr	r3, [r7, #28]
 801a2a4:	681b      	ldr	r3, [r3, #0]
 801a2a6:	429a      	cmp	r2, r3
 801a2a8:	d169      	bne.n	801a37e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801a2aa:	69f9      	ldr	r1, [r7, #28]
 801a2ac:	6878      	ldr	r0, [r7, #4]
 801a2ae:	f7ff fca9 	bl	8019c04 <dhcp_parse_reply>
 801a2b2:	4603      	mov	r3, r0
 801a2b4:	2b00      	cmp	r3, #0
 801a2b6:	d164      	bne.n	801a382 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801a2b8:	4b39      	ldr	r3, [pc, #228]	@ (801a3a0 <dhcp_recv+0x194>)
 801a2ba:	785b      	ldrb	r3, [r3, #1]
 801a2bc:	2b00      	cmp	r3, #0
 801a2be:	d062      	beq.n	801a386 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	685b      	ldr	r3, [r3, #4]
 801a2c4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801a2c6:	4b37      	ldr	r3, [pc, #220]	@ (801a3a4 <dhcp_recv+0x198>)
 801a2c8:	685b      	ldr	r3, [r3, #4]
 801a2ca:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801a2cc:	7cfb      	ldrb	r3, [r7, #19]
 801a2ce:	2b05      	cmp	r3, #5
 801a2d0:	d12a      	bne.n	801a328 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801a2d2:	69fb      	ldr	r3, [r7, #28]
 801a2d4:	795b      	ldrb	r3, [r3, #5]
 801a2d6:	2b01      	cmp	r3, #1
 801a2d8:	d112      	bne.n	801a300 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801a2da:	6979      	ldr	r1, [r7, #20]
 801a2dc:	6a38      	ldr	r0, [r7, #32]
 801a2de:	f7fe fdcd 	bl	8018e7c <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801a2e2:	6a3b      	ldr	r3, [r7, #32]
 801a2e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a2e8:	f003 0308 	and.w	r3, r3, #8
 801a2ec:	2b00      	cmp	r3, #0
 801a2ee:	d003      	beq.n	801a2f8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801a2f0:	6a38      	ldr	r0, [r7, #32]
 801a2f2:	f7fe fb3d 	bl	8018970 <dhcp_check>
 801a2f6:	e049      	b.n	801a38c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801a2f8:	6a38      	ldr	r0, [r7, #32]
 801a2fa:	f7ff f83d 	bl	8019378 <dhcp_bind>
 801a2fe:	e045      	b.n	801a38c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801a300:	69fb      	ldr	r3, [r7, #28]
 801a302:	795b      	ldrb	r3, [r3, #5]
 801a304:	2b03      	cmp	r3, #3
 801a306:	d007      	beq.n	801a318 <dhcp_recv+0x10c>
 801a308:	69fb      	ldr	r3, [r7, #28]
 801a30a:	795b      	ldrb	r3, [r3, #5]
 801a30c:	2b04      	cmp	r3, #4
 801a30e:	d003      	beq.n	801a318 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801a310:	69fb      	ldr	r3, [r7, #28]
 801a312:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801a314:	2b05      	cmp	r3, #5
 801a316:	d139      	bne.n	801a38c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801a318:	6979      	ldr	r1, [r7, #20]
 801a31a:	6a38      	ldr	r0, [r7, #32]
 801a31c:	f7fe fdae 	bl	8018e7c <dhcp_handle_ack>
      dhcp_bind(netif);
 801a320:	6a38      	ldr	r0, [r7, #32]
 801a322:	f7ff f829 	bl	8019378 <dhcp_bind>
 801a326:	e031      	b.n	801a38c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801a328:	7cfb      	ldrb	r3, [r7, #19]
 801a32a:	2b06      	cmp	r3, #6
 801a32c:	d113      	bne.n	801a356 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a32e:	69fb      	ldr	r3, [r7, #28]
 801a330:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801a332:	2b03      	cmp	r3, #3
 801a334:	d00b      	beq.n	801a34e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a336:	69fb      	ldr	r3, [r7, #28]
 801a338:	795b      	ldrb	r3, [r3, #5]
 801a33a:	2b01      	cmp	r3, #1
 801a33c:	d007      	beq.n	801a34e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801a33e:	69fb      	ldr	r3, [r7, #28]
 801a340:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a342:	2b04      	cmp	r3, #4
 801a344:	d003      	beq.n	801a34e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801a346:	69fb      	ldr	r3, [r7, #28]
 801a348:	795b      	ldrb	r3, [r3, #5]
 801a34a:	2b05      	cmp	r3, #5
 801a34c:	d103      	bne.n	801a356 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801a34e:	6a38      	ldr	r0, [r7, #32]
 801a350:	f7fe faf4 	bl	801893c <dhcp_handle_nak>
 801a354:	e01a      	b.n	801a38c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801a356:	7cfb      	ldrb	r3, [r7, #19]
 801a358:	2b02      	cmp	r3, #2
 801a35a:	d116      	bne.n	801a38a <dhcp_recv+0x17e>
 801a35c:	69fb      	ldr	r3, [r7, #28]
 801a35e:	795b      	ldrb	r3, [r3, #5]
 801a360:	2b06      	cmp	r3, #6
 801a362:	d112      	bne.n	801a38a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801a364:	6979      	ldr	r1, [r7, #20]
 801a366:	6a38      	ldr	r0, [r7, #32]
 801a368:	f7fe fb36 	bl	80189d8 <dhcp_handle_offer>
 801a36c:	e00e      	b.n	801a38c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a36e:	bf00      	nop
 801a370:	e00c      	b.n	801a38c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a372:	bf00      	nop
 801a374:	e00a      	b.n	801a38c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a376:	bf00      	nop
 801a378:	e008      	b.n	801a38c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801a37a:	bf00      	nop
 801a37c:	e006      	b.n	801a38c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a37e:	bf00      	nop
 801a380:	e004      	b.n	801a38c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a382:	bf00      	nop
 801a384:	e002      	b.n	801a38c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a386:	bf00      	nop
 801a388:	e000      	b.n	801a38c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801a38a:	bf00      	nop
  pbuf_free(p);
 801a38c:	6878      	ldr	r0, [r7, #4]
 801a38e:	f7f6 ff23 	bl	80111d8 <pbuf_free>
}
 801a392:	bf00      	nop
 801a394:	3728      	adds	r7, #40	@ 0x28
 801a396:	46bd      	mov	sp, r7
 801a398:	bd80      	pop	{r7, pc}
 801a39a:	bf00      	nop
 801a39c:	2000edb0 	.word	0x2000edb0
 801a3a0:	200126f8 	.word	0x200126f8
 801a3a4:	200126d0 	.word	0x200126d0

0801a3a8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801a3a8:	b580      	push	{r7, lr}
 801a3aa:	b088      	sub	sp, #32
 801a3ac:	af00      	add	r7, sp, #0
 801a3ae:	60f8      	str	r0, [r7, #12]
 801a3b0:	60b9      	str	r1, [r7, #8]
 801a3b2:	603b      	str	r3, [r7, #0]
 801a3b4:	4613      	mov	r3, r2
 801a3b6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	2b00      	cmp	r3, #0
 801a3bc:	d108      	bne.n	801a3d0 <dhcp_create_msg+0x28>
 801a3be:	4b5f      	ldr	r3, [pc, #380]	@ (801a53c <dhcp_create_msg+0x194>)
 801a3c0:	f240 7269 	movw	r2, #1897	@ 0x769
 801a3c4:	495e      	ldr	r1, [pc, #376]	@ (801a540 <dhcp_create_msg+0x198>)
 801a3c6:	485f      	ldr	r0, [pc, #380]	@ (801a544 <dhcp_create_msg+0x19c>)
 801a3c8:	f003 ff88 	bl	801e2dc <iprintf>
 801a3cc:	2300      	movs	r3, #0
 801a3ce:	e0b1      	b.n	801a534 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801a3d0:	68bb      	ldr	r3, [r7, #8]
 801a3d2:	2b00      	cmp	r3, #0
 801a3d4:	d108      	bne.n	801a3e8 <dhcp_create_msg+0x40>
 801a3d6:	4b59      	ldr	r3, [pc, #356]	@ (801a53c <dhcp_create_msg+0x194>)
 801a3d8:	f240 726a 	movw	r2, #1898	@ 0x76a
 801a3dc:	495a      	ldr	r1, [pc, #360]	@ (801a548 <dhcp_create_msg+0x1a0>)
 801a3de:	4859      	ldr	r0, [pc, #356]	@ (801a544 <dhcp_create_msg+0x19c>)
 801a3e0:	f003 ff7c 	bl	801e2dc <iprintf>
 801a3e4:	2300      	movs	r3, #0
 801a3e6:	e0a5      	b.n	801a534 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801a3e8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a3ec:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801a3f0:	2036      	movs	r0, #54	@ 0x36
 801a3f2:	f7f6 fc0d 	bl	8010c10 <pbuf_alloc>
 801a3f6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801a3f8:	69bb      	ldr	r3, [r7, #24]
 801a3fa:	2b00      	cmp	r3, #0
 801a3fc:	d101      	bne.n	801a402 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801a3fe:	2300      	movs	r3, #0
 801a400:	e098      	b.n	801a534 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801a402:	69bb      	ldr	r3, [r7, #24]
 801a404:	895b      	ldrh	r3, [r3, #10]
 801a406:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801a40a:	d206      	bcs.n	801a41a <dhcp_create_msg+0x72>
 801a40c:	4b4b      	ldr	r3, [pc, #300]	@ (801a53c <dhcp_create_msg+0x194>)
 801a40e:	f240 7271 	movw	r2, #1905	@ 0x771
 801a412:	494e      	ldr	r1, [pc, #312]	@ (801a54c <dhcp_create_msg+0x1a4>)
 801a414:	484b      	ldr	r0, [pc, #300]	@ (801a544 <dhcp_create_msg+0x19c>)
 801a416:	f003 ff61 	bl	801e2dc <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801a41a:	79fb      	ldrb	r3, [r7, #7]
 801a41c:	2b03      	cmp	r3, #3
 801a41e:	d103      	bne.n	801a428 <dhcp_create_msg+0x80>
 801a420:	68bb      	ldr	r3, [r7, #8]
 801a422:	795b      	ldrb	r3, [r3, #5]
 801a424:	2b03      	cmp	r3, #3
 801a426:	d10d      	bne.n	801a444 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801a428:	68bb      	ldr	r3, [r7, #8]
 801a42a:	799b      	ldrb	r3, [r3, #6]
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	d105      	bne.n	801a43c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801a430:	f002 feac 	bl	801d18c <rand>
 801a434:	4603      	mov	r3, r0
 801a436:	461a      	mov	r2, r3
 801a438:	4b45      	ldr	r3, [pc, #276]	@ (801a550 <dhcp_create_msg+0x1a8>)
 801a43a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801a43c:	4b44      	ldr	r3, [pc, #272]	@ (801a550 <dhcp_create_msg+0x1a8>)
 801a43e:	681a      	ldr	r2, [r3, #0]
 801a440:	68bb      	ldr	r3, [r7, #8]
 801a442:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801a444:	69bb      	ldr	r3, [r7, #24]
 801a446:	685b      	ldr	r3, [r3, #4]
 801a448:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801a44a:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801a44e:	2100      	movs	r1, #0
 801a450:	6978      	ldr	r0, [r7, #20]
 801a452:	f003 ffe2 	bl	801e41a <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801a456:	697b      	ldr	r3, [r7, #20]
 801a458:	2201      	movs	r2, #1
 801a45a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801a45c:	697b      	ldr	r3, [r7, #20]
 801a45e:	2201      	movs	r2, #1
 801a460:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801a462:	68fb      	ldr	r3, [r7, #12]
 801a464:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801a468:	697b      	ldr	r3, [r7, #20]
 801a46a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801a46c:	68bb      	ldr	r3, [r7, #8]
 801a46e:	681b      	ldr	r3, [r3, #0]
 801a470:	4618      	mov	r0, r3
 801a472:	f7f4 ffda 	bl	800f42a <lwip_htonl>
 801a476:	4602      	mov	r2, r0
 801a478:	697b      	ldr	r3, [r7, #20]
 801a47a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801a47c:	79fb      	ldrb	r3, [r7, #7]
 801a47e:	2b08      	cmp	r3, #8
 801a480:	d010      	beq.n	801a4a4 <dhcp_create_msg+0xfc>
 801a482:	79fb      	ldrb	r3, [r7, #7]
 801a484:	2b04      	cmp	r3, #4
 801a486:	d00d      	beq.n	801a4a4 <dhcp_create_msg+0xfc>
 801a488:	79fb      	ldrb	r3, [r7, #7]
 801a48a:	2b07      	cmp	r3, #7
 801a48c:	d00a      	beq.n	801a4a4 <dhcp_create_msg+0xfc>
 801a48e:	79fb      	ldrb	r3, [r7, #7]
 801a490:	2b03      	cmp	r3, #3
 801a492:	d10c      	bne.n	801a4ae <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801a494:	68bb      	ldr	r3, [r7, #8]
 801a496:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801a498:	2b05      	cmp	r3, #5
 801a49a:	d003      	beq.n	801a4a4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801a49c:	68bb      	ldr	r3, [r7, #8]
 801a49e:	795b      	ldrb	r3, [r3, #5]
 801a4a0:	2b04      	cmp	r3, #4
 801a4a2:	d104      	bne.n	801a4ae <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801a4a4:	68fb      	ldr	r3, [r7, #12]
 801a4a6:	3304      	adds	r3, #4
 801a4a8:	681a      	ldr	r2, [r3, #0]
 801a4aa:	697b      	ldr	r3, [r7, #20]
 801a4ac:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a4ae:	2300      	movs	r3, #0
 801a4b0:	83fb      	strh	r3, [r7, #30]
 801a4b2:	e00c      	b.n	801a4ce <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801a4b4:	8bfa      	ldrh	r2, [r7, #30]
 801a4b6:	8bfb      	ldrh	r3, [r7, #30]
 801a4b8:	68f9      	ldr	r1, [r7, #12]
 801a4ba:	440a      	add	r2, r1
 801a4bc:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 801a4c0:	697a      	ldr	r2, [r7, #20]
 801a4c2:	4413      	add	r3, r2
 801a4c4:	460a      	mov	r2, r1
 801a4c6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a4c8:	8bfb      	ldrh	r3, [r7, #30]
 801a4ca:	3301      	adds	r3, #1
 801a4cc:	83fb      	strh	r3, [r7, #30]
 801a4ce:	8bfb      	ldrh	r3, [r7, #30]
 801a4d0:	2b05      	cmp	r3, #5
 801a4d2:	d9ef      	bls.n	801a4b4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801a4d4:	697b      	ldr	r3, [r7, #20]
 801a4d6:	2200      	movs	r2, #0
 801a4d8:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801a4dc:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801a4e0:	2200      	movs	r2, #0
 801a4e2:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801a4e6:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801a4ea:	2200      	movs	r2, #0
 801a4ec:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801a4f0:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801a4f4:	2200      	movs	r2, #0
 801a4f6:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801a4fa:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801a4fe:	697b      	ldr	r3, [r7, #20]
 801a500:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a504:	2301      	movs	r3, #1
 801a506:	2235      	movs	r2, #53	@ 0x35
 801a508:	2000      	movs	r0, #0
 801a50a:	f7ff faab 	bl	8019a64 <dhcp_option>
 801a50e:	4603      	mov	r3, r0
 801a510:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801a512:	697b      	ldr	r3, [r7, #20]
 801a514:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a518:	79fa      	ldrb	r2, [r7, #7]
 801a51a:	8a7b      	ldrh	r3, [r7, #18]
 801a51c:	4618      	mov	r0, r3
 801a51e:	f7ff fad5 	bl	8019acc <dhcp_option_byte>
 801a522:	4603      	mov	r3, r0
 801a524:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801a526:	683b      	ldr	r3, [r7, #0]
 801a528:	2b00      	cmp	r3, #0
 801a52a:	d002      	beq.n	801a532 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801a52c:	683b      	ldr	r3, [r7, #0]
 801a52e:	8a7a      	ldrh	r2, [r7, #18]
 801a530:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801a532:	69bb      	ldr	r3, [r7, #24]
}
 801a534:	4618      	mov	r0, r3
 801a536:	3720      	adds	r7, #32
 801a538:	46bd      	mov	sp, r7
 801a53a:	bd80      	pop	{r7, pc}
 801a53c:	08024ff8 	.word	0x08024ff8
 801a540:	08025328 	.word	0x08025328
 801a544:	08025058 	.word	0x08025058
 801a548:	08025348 	.word	0x08025348
 801a54c:	08025368 	.word	0x08025368
 801a550:	2001270c 	.word	0x2001270c

0801a554 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801a554:	b580      	push	{r7, lr}
 801a556:	b084      	sub	sp, #16
 801a558:	af00      	add	r7, sp, #0
 801a55a:	4603      	mov	r3, r0
 801a55c:	60b9      	str	r1, [r7, #8]
 801a55e:	607a      	str	r2, [r7, #4]
 801a560:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801a562:	89fb      	ldrh	r3, [r7, #14]
 801a564:	1c5a      	adds	r2, r3, #1
 801a566:	81fa      	strh	r2, [r7, #14]
 801a568:	461a      	mov	r2, r3
 801a56a:	68bb      	ldr	r3, [r7, #8]
 801a56c:	4413      	add	r3, r2
 801a56e:	22ff      	movs	r2, #255	@ 0xff
 801a570:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801a572:	e007      	b.n	801a584 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801a574:	89fb      	ldrh	r3, [r7, #14]
 801a576:	1c5a      	adds	r2, r3, #1
 801a578:	81fa      	strh	r2, [r7, #14]
 801a57a:	461a      	mov	r2, r3
 801a57c:	68bb      	ldr	r3, [r7, #8]
 801a57e:	4413      	add	r3, r2
 801a580:	2200      	movs	r2, #0
 801a582:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801a584:	89fb      	ldrh	r3, [r7, #14]
 801a586:	2b43      	cmp	r3, #67	@ 0x43
 801a588:	d904      	bls.n	801a594 <dhcp_option_trailer+0x40>
 801a58a:	89fb      	ldrh	r3, [r7, #14]
 801a58c:	f003 0303 	and.w	r3, r3, #3
 801a590:	2b00      	cmp	r3, #0
 801a592:	d002      	beq.n	801a59a <dhcp_option_trailer+0x46>
 801a594:	89fb      	ldrh	r3, [r7, #14]
 801a596:	2b43      	cmp	r3, #67	@ 0x43
 801a598:	d9ec      	bls.n	801a574 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801a59a:	89fb      	ldrh	r3, [r7, #14]
 801a59c:	33f0      	adds	r3, #240	@ 0xf0
 801a59e:	b29b      	uxth	r3, r3
 801a5a0:	4619      	mov	r1, r3
 801a5a2:	6878      	ldr	r0, [r7, #4]
 801a5a4:	f7f6 fc92 	bl	8010ecc <pbuf_realloc>
}
 801a5a8:	bf00      	nop
 801a5aa:	3710      	adds	r7, #16
 801a5ac:	46bd      	mov	sp, r7
 801a5ae:	bd80      	pop	{r7, pc}

0801a5b0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801a5b0:	b480      	push	{r7}
 801a5b2:	b085      	sub	sp, #20
 801a5b4:	af00      	add	r7, sp, #0
 801a5b6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801a5b8:	687b      	ldr	r3, [r7, #4]
 801a5ba:	2b00      	cmp	r3, #0
 801a5bc:	d017      	beq.n	801a5ee <dhcp_supplied_address+0x3e>
 801a5be:	687b      	ldr	r3, [r7, #4]
 801a5c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d013      	beq.n	801a5ee <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a5ca:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801a5cc:	68fb      	ldr	r3, [r7, #12]
 801a5ce:	795b      	ldrb	r3, [r3, #5]
 801a5d0:	2b0a      	cmp	r3, #10
 801a5d2:	d007      	beq.n	801a5e4 <dhcp_supplied_address+0x34>
 801a5d4:	68fb      	ldr	r3, [r7, #12]
 801a5d6:	795b      	ldrb	r3, [r3, #5]
 801a5d8:	2b05      	cmp	r3, #5
 801a5da:	d003      	beq.n	801a5e4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801a5e0:	2b04      	cmp	r3, #4
 801a5e2:	d101      	bne.n	801a5e8 <dhcp_supplied_address+0x38>
 801a5e4:	2301      	movs	r3, #1
 801a5e6:	e000      	b.n	801a5ea <dhcp_supplied_address+0x3a>
 801a5e8:	2300      	movs	r3, #0
 801a5ea:	b2db      	uxtb	r3, r3
 801a5ec:	e000      	b.n	801a5f0 <dhcp_supplied_address+0x40>
  }
  return 0;
 801a5ee:	2300      	movs	r3, #0
}
 801a5f0:	4618      	mov	r0, r3
 801a5f2:	3714      	adds	r7, #20
 801a5f4:	46bd      	mov	sp, r7
 801a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5fa:	4770      	bx	lr

0801a5fc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a5fc:	b580      	push	{r7, lr}
 801a5fe:	b082      	sub	sp, #8
 801a600:	af00      	add	r7, sp, #0
 801a602:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a604:	4915      	ldr	r1, [pc, #84]	@ (801a65c <etharp_free_entry+0x60>)
 801a606:	687a      	ldr	r2, [r7, #4]
 801a608:	4613      	mov	r3, r2
 801a60a:	005b      	lsls	r3, r3, #1
 801a60c:	4413      	add	r3, r2
 801a60e:	00db      	lsls	r3, r3, #3
 801a610:	440b      	add	r3, r1
 801a612:	681b      	ldr	r3, [r3, #0]
 801a614:	2b00      	cmp	r3, #0
 801a616:	d013      	beq.n	801a640 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a618:	4910      	ldr	r1, [pc, #64]	@ (801a65c <etharp_free_entry+0x60>)
 801a61a:	687a      	ldr	r2, [r7, #4]
 801a61c:	4613      	mov	r3, r2
 801a61e:	005b      	lsls	r3, r3, #1
 801a620:	4413      	add	r3, r2
 801a622:	00db      	lsls	r3, r3, #3
 801a624:	440b      	add	r3, r1
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	4618      	mov	r0, r3
 801a62a:	f7f6 fdd5 	bl	80111d8 <pbuf_free>
    arp_table[i].q = NULL;
 801a62e:	490b      	ldr	r1, [pc, #44]	@ (801a65c <etharp_free_entry+0x60>)
 801a630:	687a      	ldr	r2, [r7, #4]
 801a632:	4613      	mov	r3, r2
 801a634:	005b      	lsls	r3, r3, #1
 801a636:	4413      	add	r3, r2
 801a638:	00db      	lsls	r3, r3, #3
 801a63a:	440b      	add	r3, r1
 801a63c:	2200      	movs	r2, #0
 801a63e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a640:	4906      	ldr	r1, [pc, #24]	@ (801a65c <etharp_free_entry+0x60>)
 801a642:	687a      	ldr	r2, [r7, #4]
 801a644:	4613      	mov	r3, r2
 801a646:	005b      	lsls	r3, r3, #1
 801a648:	4413      	add	r3, r2
 801a64a:	00db      	lsls	r3, r3, #3
 801a64c:	440b      	add	r3, r1
 801a64e:	3314      	adds	r3, #20
 801a650:	2200      	movs	r2, #0
 801a652:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a654:	bf00      	nop
 801a656:	3708      	adds	r7, #8
 801a658:	46bd      	mov	sp, r7
 801a65a:	bd80      	pop	{r7, pc}
 801a65c:	20012710 	.word	0x20012710

0801a660 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a660:	b580      	push	{r7, lr}
 801a662:	b082      	sub	sp, #8
 801a664:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a666:	2300      	movs	r3, #0
 801a668:	607b      	str	r3, [r7, #4]
 801a66a:	e096      	b.n	801a79a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a66c:	494f      	ldr	r1, [pc, #316]	@ (801a7ac <etharp_tmr+0x14c>)
 801a66e:	687a      	ldr	r2, [r7, #4]
 801a670:	4613      	mov	r3, r2
 801a672:	005b      	lsls	r3, r3, #1
 801a674:	4413      	add	r3, r2
 801a676:	00db      	lsls	r3, r3, #3
 801a678:	440b      	add	r3, r1
 801a67a:	3314      	adds	r3, #20
 801a67c:	781b      	ldrb	r3, [r3, #0]
 801a67e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a680:	78fb      	ldrb	r3, [r7, #3]
 801a682:	2b00      	cmp	r3, #0
 801a684:	f000 8086 	beq.w	801a794 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a688:	4948      	ldr	r1, [pc, #288]	@ (801a7ac <etharp_tmr+0x14c>)
 801a68a:	687a      	ldr	r2, [r7, #4]
 801a68c:	4613      	mov	r3, r2
 801a68e:	005b      	lsls	r3, r3, #1
 801a690:	4413      	add	r3, r2
 801a692:	00db      	lsls	r3, r3, #3
 801a694:	440b      	add	r3, r1
 801a696:	3312      	adds	r3, #18
 801a698:	881b      	ldrh	r3, [r3, #0]
 801a69a:	3301      	adds	r3, #1
 801a69c:	b298      	uxth	r0, r3
 801a69e:	4943      	ldr	r1, [pc, #268]	@ (801a7ac <etharp_tmr+0x14c>)
 801a6a0:	687a      	ldr	r2, [r7, #4]
 801a6a2:	4613      	mov	r3, r2
 801a6a4:	005b      	lsls	r3, r3, #1
 801a6a6:	4413      	add	r3, r2
 801a6a8:	00db      	lsls	r3, r3, #3
 801a6aa:	440b      	add	r3, r1
 801a6ac:	3312      	adds	r3, #18
 801a6ae:	4602      	mov	r2, r0
 801a6b0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a6b2:	493e      	ldr	r1, [pc, #248]	@ (801a7ac <etharp_tmr+0x14c>)
 801a6b4:	687a      	ldr	r2, [r7, #4]
 801a6b6:	4613      	mov	r3, r2
 801a6b8:	005b      	lsls	r3, r3, #1
 801a6ba:	4413      	add	r3, r2
 801a6bc:	00db      	lsls	r3, r3, #3
 801a6be:	440b      	add	r3, r1
 801a6c0:	3312      	adds	r3, #18
 801a6c2:	881b      	ldrh	r3, [r3, #0]
 801a6c4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801a6c8:	d215      	bcs.n	801a6f6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a6ca:	4938      	ldr	r1, [pc, #224]	@ (801a7ac <etharp_tmr+0x14c>)
 801a6cc:	687a      	ldr	r2, [r7, #4]
 801a6ce:	4613      	mov	r3, r2
 801a6d0:	005b      	lsls	r3, r3, #1
 801a6d2:	4413      	add	r3, r2
 801a6d4:	00db      	lsls	r3, r3, #3
 801a6d6:	440b      	add	r3, r1
 801a6d8:	3314      	adds	r3, #20
 801a6da:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a6dc:	2b01      	cmp	r3, #1
 801a6de:	d10e      	bne.n	801a6fe <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a6e0:	4932      	ldr	r1, [pc, #200]	@ (801a7ac <etharp_tmr+0x14c>)
 801a6e2:	687a      	ldr	r2, [r7, #4]
 801a6e4:	4613      	mov	r3, r2
 801a6e6:	005b      	lsls	r3, r3, #1
 801a6e8:	4413      	add	r3, r2
 801a6ea:	00db      	lsls	r3, r3, #3
 801a6ec:	440b      	add	r3, r1
 801a6ee:	3312      	adds	r3, #18
 801a6f0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a6f2:	2b04      	cmp	r3, #4
 801a6f4:	d903      	bls.n	801a6fe <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a6f6:	6878      	ldr	r0, [r7, #4]
 801a6f8:	f7ff ff80 	bl	801a5fc <etharp_free_entry>
 801a6fc:	e04a      	b.n	801a794 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a6fe:	492b      	ldr	r1, [pc, #172]	@ (801a7ac <etharp_tmr+0x14c>)
 801a700:	687a      	ldr	r2, [r7, #4]
 801a702:	4613      	mov	r3, r2
 801a704:	005b      	lsls	r3, r3, #1
 801a706:	4413      	add	r3, r2
 801a708:	00db      	lsls	r3, r3, #3
 801a70a:	440b      	add	r3, r1
 801a70c:	3314      	adds	r3, #20
 801a70e:	781b      	ldrb	r3, [r3, #0]
 801a710:	2b03      	cmp	r3, #3
 801a712:	d10a      	bne.n	801a72a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a714:	4925      	ldr	r1, [pc, #148]	@ (801a7ac <etharp_tmr+0x14c>)
 801a716:	687a      	ldr	r2, [r7, #4]
 801a718:	4613      	mov	r3, r2
 801a71a:	005b      	lsls	r3, r3, #1
 801a71c:	4413      	add	r3, r2
 801a71e:	00db      	lsls	r3, r3, #3
 801a720:	440b      	add	r3, r1
 801a722:	3314      	adds	r3, #20
 801a724:	2204      	movs	r2, #4
 801a726:	701a      	strb	r2, [r3, #0]
 801a728:	e034      	b.n	801a794 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a72a:	4920      	ldr	r1, [pc, #128]	@ (801a7ac <etharp_tmr+0x14c>)
 801a72c:	687a      	ldr	r2, [r7, #4]
 801a72e:	4613      	mov	r3, r2
 801a730:	005b      	lsls	r3, r3, #1
 801a732:	4413      	add	r3, r2
 801a734:	00db      	lsls	r3, r3, #3
 801a736:	440b      	add	r3, r1
 801a738:	3314      	adds	r3, #20
 801a73a:	781b      	ldrb	r3, [r3, #0]
 801a73c:	2b04      	cmp	r3, #4
 801a73e:	d10a      	bne.n	801a756 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a740:	491a      	ldr	r1, [pc, #104]	@ (801a7ac <etharp_tmr+0x14c>)
 801a742:	687a      	ldr	r2, [r7, #4]
 801a744:	4613      	mov	r3, r2
 801a746:	005b      	lsls	r3, r3, #1
 801a748:	4413      	add	r3, r2
 801a74a:	00db      	lsls	r3, r3, #3
 801a74c:	440b      	add	r3, r1
 801a74e:	3314      	adds	r3, #20
 801a750:	2202      	movs	r2, #2
 801a752:	701a      	strb	r2, [r3, #0]
 801a754:	e01e      	b.n	801a794 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a756:	4915      	ldr	r1, [pc, #84]	@ (801a7ac <etharp_tmr+0x14c>)
 801a758:	687a      	ldr	r2, [r7, #4]
 801a75a:	4613      	mov	r3, r2
 801a75c:	005b      	lsls	r3, r3, #1
 801a75e:	4413      	add	r3, r2
 801a760:	00db      	lsls	r3, r3, #3
 801a762:	440b      	add	r3, r1
 801a764:	3314      	adds	r3, #20
 801a766:	781b      	ldrb	r3, [r3, #0]
 801a768:	2b01      	cmp	r3, #1
 801a76a:	d113      	bne.n	801a794 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a76c:	490f      	ldr	r1, [pc, #60]	@ (801a7ac <etharp_tmr+0x14c>)
 801a76e:	687a      	ldr	r2, [r7, #4]
 801a770:	4613      	mov	r3, r2
 801a772:	005b      	lsls	r3, r3, #1
 801a774:	4413      	add	r3, r2
 801a776:	00db      	lsls	r3, r3, #3
 801a778:	440b      	add	r3, r1
 801a77a:	3308      	adds	r3, #8
 801a77c:	6818      	ldr	r0, [r3, #0]
 801a77e:	687a      	ldr	r2, [r7, #4]
 801a780:	4613      	mov	r3, r2
 801a782:	005b      	lsls	r3, r3, #1
 801a784:	4413      	add	r3, r2
 801a786:	00db      	lsls	r3, r3, #3
 801a788:	4a08      	ldr	r2, [pc, #32]	@ (801a7ac <etharp_tmr+0x14c>)
 801a78a:	4413      	add	r3, r2
 801a78c:	3304      	adds	r3, #4
 801a78e:	4619      	mov	r1, r3
 801a790:	f000 fe72 	bl	801b478 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a794:	687b      	ldr	r3, [r7, #4]
 801a796:	3301      	adds	r3, #1
 801a798:	607b      	str	r3, [r7, #4]
 801a79a:	687b      	ldr	r3, [r7, #4]
 801a79c:	2b09      	cmp	r3, #9
 801a79e:	f77f af65 	ble.w	801a66c <etharp_tmr+0xc>
      }
    }
  }
}
 801a7a2:	bf00      	nop
 801a7a4:	bf00      	nop
 801a7a6:	3708      	adds	r7, #8
 801a7a8:	46bd      	mov	sp, r7
 801a7aa:	bd80      	pop	{r7, pc}
 801a7ac:	20012710 	.word	0x20012710

0801a7b0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a7b0:	b580      	push	{r7, lr}
 801a7b2:	b08a      	sub	sp, #40	@ 0x28
 801a7b4:	af00      	add	r7, sp, #0
 801a7b6:	60f8      	str	r0, [r7, #12]
 801a7b8:	460b      	mov	r3, r1
 801a7ba:	607a      	str	r2, [r7, #4]
 801a7bc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a7be:	230a      	movs	r3, #10
 801a7c0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801a7c2:	230a      	movs	r3, #10
 801a7c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a7c6:	230a      	movs	r3, #10
 801a7c8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801a7ca:	2300      	movs	r3, #0
 801a7cc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a7ce:	230a      	movs	r3, #10
 801a7d0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a7d2:	2300      	movs	r3, #0
 801a7d4:	83bb      	strh	r3, [r7, #28]
 801a7d6:	2300      	movs	r3, #0
 801a7d8:	837b      	strh	r3, [r7, #26]
 801a7da:	2300      	movs	r3, #0
 801a7dc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a7de:	2300      	movs	r3, #0
 801a7e0:	843b      	strh	r3, [r7, #32]
 801a7e2:	e0ae      	b.n	801a942 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a7e4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a7e8:	49a6      	ldr	r1, [pc, #664]	@ (801aa84 <etharp_find_entry+0x2d4>)
 801a7ea:	4613      	mov	r3, r2
 801a7ec:	005b      	lsls	r3, r3, #1
 801a7ee:	4413      	add	r3, r2
 801a7f0:	00db      	lsls	r3, r3, #3
 801a7f2:	440b      	add	r3, r1
 801a7f4:	3314      	adds	r3, #20
 801a7f6:	781b      	ldrb	r3, [r3, #0]
 801a7f8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a7fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a7fe:	2b0a      	cmp	r3, #10
 801a800:	d105      	bne.n	801a80e <etharp_find_entry+0x5e>
 801a802:	7dfb      	ldrb	r3, [r7, #23]
 801a804:	2b00      	cmp	r3, #0
 801a806:	d102      	bne.n	801a80e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a808:	8c3b      	ldrh	r3, [r7, #32]
 801a80a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801a80c:	e095      	b.n	801a93a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a80e:	7dfb      	ldrb	r3, [r7, #23]
 801a810:	2b00      	cmp	r3, #0
 801a812:	f000 8092 	beq.w	801a93a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a816:	7dfb      	ldrb	r3, [r7, #23]
 801a818:	2b01      	cmp	r3, #1
 801a81a:	d009      	beq.n	801a830 <etharp_find_entry+0x80>
 801a81c:	7dfb      	ldrb	r3, [r7, #23]
 801a81e:	2b01      	cmp	r3, #1
 801a820:	d806      	bhi.n	801a830 <etharp_find_entry+0x80>
 801a822:	4b99      	ldr	r3, [pc, #612]	@ (801aa88 <etharp_find_entry+0x2d8>)
 801a824:	f240 1223 	movw	r2, #291	@ 0x123
 801a828:	4998      	ldr	r1, [pc, #608]	@ (801aa8c <etharp_find_entry+0x2dc>)
 801a82a:	4899      	ldr	r0, [pc, #612]	@ (801aa90 <etharp_find_entry+0x2e0>)
 801a82c:	f003 fd56 	bl	801e2dc <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a830:	68fb      	ldr	r3, [r7, #12]
 801a832:	2b00      	cmp	r3, #0
 801a834:	d020      	beq.n	801a878 <etharp_find_entry+0xc8>
 801a836:	68fb      	ldr	r3, [r7, #12]
 801a838:	6819      	ldr	r1, [r3, #0]
 801a83a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a83e:	4891      	ldr	r0, [pc, #580]	@ (801aa84 <etharp_find_entry+0x2d4>)
 801a840:	4613      	mov	r3, r2
 801a842:	005b      	lsls	r3, r3, #1
 801a844:	4413      	add	r3, r2
 801a846:	00db      	lsls	r3, r3, #3
 801a848:	4403      	add	r3, r0
 801a84a:	3304      	adds	r3, #4
 801a84c:	681b      	ldr	r3, [r3, #0]
 801a84e:	4299      	cmp	r1, r3
 801a850:	d112      	bne.n	801a878 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	2b00      	cmp	r3, #0
 801a856:	d00c      	beq.n	801a872 <etharp_find_entry+0xc2>
 801a858:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a85c:	4989      	ldr	r1, [pc, #548]	@ (801aa84 <etharp_find_entry+0x2d4>)
 801a85e:	4613      	mov	r3, r2
 801a860:	005b      	lsls	r3, r3, #1
 801a862:	4413      	add	r3, r2
 801a864:	00db      	lsls	r3, r3, #3
 801a866:	440b      	add	r3, r1
 801a868:	3308      	adds	r3, #8
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	687a      	ldr	r2, [r7, #4]
 801a86e:	429a      	cmp	r2, r3
 801a870:	d102      	bne.n	801a878 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a872:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a876:	e100      	b.n	801aa7a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a878:	7dfb      	ldrb	r3, [r7, #23]
 801a87a:	2b01      	cmp	r3, #1
 801a87c:	d140      	bne.n	801a900 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a87e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a882:	4980      	ldr	r1, [pc, #512]	@ (801aa84 <etharp_find_entry+0x2d4>)
 801a884:	4613      	mov	r3, r2
 801a886:	005b      	lsls	r3, r3, #1
 801a888:	4413      	add	r3, r2
 801a88a:	00db      	lsls	r3, r3, #3
 801a88c:	440b      	add	r3, r1
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	2b00      	cmp	r3, #0
 801a892:	d01a      	beq.n	801a8ca <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a894:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a898:	497a      	ldr	r1, [pc, #488]	@ (801aa84 <etharp_find_entry+0x2d4>)
 801a89a:	4613      	mov	r3, r2
 801a89c:	005b      	lsls	r3, r3, #1
 801a89e:	4413      	add	r3, r2
 801a8a0:	00db      	lsls	r3, r3, #3
 801a8a2:	440b      	add	r3, r1
 801a8a4:	3312      	adds	r3, #18
 801a8a6:	881b      	ldrh	r3, [r3, #0]
 801a8a8:	8bba      	ldrh	r2, [r7, #28]
 801a8aa:	429a      	cmp	r2, r3
 801a8ac:	d845      	bhi.n	801a93a <etharp_find_entry+0x18a>
            old_queue = i;
 801a8ae:	8c3b      	ldrh	r3, [r7, #32]
 801a8b0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a8b2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a8b6:	4973      	ldr	r1, [pc, #460]	@ (801aa84 <etharp_find_entry+0x2d4>)
 801a8b8:	4613      	mov	r3, r2
 801a8ba:	005b      	lsls	r3, r3, #1
 801a8bc:	4413      	add	r3, r2
 801a8be:	00db      	lsls	r3, r3, #3
 801a8c0:	440b      	add	r3, r1
 801a8c2:	3312      	adds	r3, #18
 801a8c4:	881b      	ldrh	r3, [r3, #0]
 801a8c6:	83bb      	strh	r3, [r7, #28]
 801a8c8:	e037      	b.n	801a93a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a8ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a8ce:	496d      	ldr	r1, [pc, #436]	@ (801aa84 <etharp_find_entry+0x2d4>)
 801a8d0:	4613      	mov	r3, r2
 801a8d2:	005b      	lsls	r3, r3, #1
 801a8d4:	4413      	add	r3, r2
 801a8d6:	00db      	lsls	r3, r3, #3
 801a8d8:	440b      	add	r3, r1
 801a8da:	3312      	adds	r3, #18
 801a8dc:	881b      	ldrh	r3, [r3, #0]
 801a8de:	8b7a      	ldrh	r2, [r7, #26]
 801a8e0:	429a      	cmp	r2, r3
 801a8e2:	d82a      	bhi.n	801a93a <etharp_find_entry+0x18a>
            old_pending = i;
 801a8e4:	8c3b      	ldrh	r3, [r7, #32]
 801a8e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801a8e8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a8ec:	4965      	ldr	r1, [pc, #404]	@ (801aa84 <etharp_find_entry+0x2d4>)
 801a8ee:	4613      	mov	r3, r2
 801a8f0:	005b      	lsls	r3, r3, #1
 801a8f2:	4413      	add	r3, r2
 801a8f4:	00db      	lsls	r3, r3, #3
 801a8f6:	440b      	add	r3, r1
 801a8f8:	3312      	adds	r3, #18
 801a8fa:	881b      	ldrh	r3, [r3, #0]
 801a8fc:	837b      	strh	r3, [r7, #26]
 801a8fe:	e01c      	b.n	801a93a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a900:	7dfb      	ldrb	r3, [r7, #23]
 801a902:	2b01      	cmp	r3, #1
 801a904:	d919      	bls.n	801a93a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a906:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a90a:	495e      	ldr	r1, [pc, #376]	@ (801aa84 <etharp_find_entry+0x2d4>)
 801a90c:	4613      	mov	r3, r2
 801a90e:	005b      	lsls	r3, r3, #1
 801a910:	4413      	add	r3, r2
 801a912:	00db      	lsls	r3, r3, #3
 801a914:	440b      	add	r3, r1
 801a916:	3312      	adds	r3, #18
 801a918:	881b      	ldrh	r3, [r3, #0]
 801a91a:	8b3a      	ldrh	r2, [r7, #24]
 801a91c:	429a      	cmp	r2, r3
 801a91e:	d80c      	bhi.n	801a93a <etharp_find_entry+0x18a>
            old_stable = i;
 801a920:	8c3b      	ldrh	r3, [r7, #32]
 801a922:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801a924:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a928:	4956      	ldr	r1, [pc, #344]	@ (801aa84 <etharp_find_entry+0x2d4>)
 801a92a:	4613      	mov	r3, r2
 801a92c:	005b      	lsls	r3, r3, #1
 801a92e:	4413      	add	r3, r2
 801a930:	00db      	lsls	r3, r3, #3
 801a932:	440b      	add	r3, r1
 801a934:	3312      	adds	r3, #18
 801a936:	881b      	ldrh	r3, [r3, #0]
 801a938:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a93a:	8c3b      	ldrh	r3, [r7, #32]
 801a93c:	3301      	adds	r3, #1
 801a93e:	b29b      	uxth	r3, r3
 801a940:	843b      	strh	r3, [r7, #32]
 801a942:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a946:	2b09      	cmp	r3, #9
 801a948:	f77f af4c 	ble.w	801a7e4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a94c:	7afb      	ldrb	r3, [r7, #11]
 801a94e:	f003 0302 	and.w	r3, r3, #2
 801a952:	2b00      	cmp	r3, #0
 801a954:	d108      	bne.n	801a968 <etharp_find_entry+0x1b8>
 801a956:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a95a:	2b0a      	cmp	r3, #10
 801a95c:	d107      	bne.n	801a96e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a95e:	7afb      	ldrb	r3, [r7, #11]
 801a960:	f003 0301 	and.w	r3, r3, #1
 801a964:	2b00      	cmp	r3, #0
 801a966:	d102      	bne.n	801a96e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a968:	f04f 33ff 	mov.w	r3, #4294967295
 801a96c:	e085      	b.n	801aa7a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a96e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a972:	2b09      	cmp	r3, #9
 801a974:	dc02      	bgt.n	801a97c <etharp_find_entry+0x1cc>
    i = empty;
 801a976:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a978:	843b      	strh	r3, [r7, #32]
 801a97a:	e039      	b.n	801a9f0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a97c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801a980:	2b09      	cmp	r3, #9
 801a982:	dc14      	bgt.n	801a9ae <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a984:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a986:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a988:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a98c:	493d      	ldr	r1, [pc, #244]	@ (801aa84 <etharp_find_entry+0x2d4>)
 801a98e:	4613      	mov	r3, r2
 801a990:	005b      	lsls	r3, r3, #1
 801a992:	4413      	add	r3, r2
 801a994:	00db      	lsls	r3, r3, #3
 801a996:	440b      	add	r3, r1
 801a998:	681b      	ldr	r3, [r3, #0]
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d018      	beq.n	801a9d0 <etharp_find_entry+0x220>
 801a99e:	4b3a      	ldr	r3, [pc, #232]	@ (801aa88 <etharp_find_entry+0x2d8>)
 801a9a0:	f240 126d 	movw	r2, #365	@ 0x16d
 801a9a4:	493b      	ldr	r1, [pc, #236]	@ (801aa94 <etharp_find_entry+0x2e4>)
 801a9a6:	483a      	ldr	r0, [pc, #232]	@ (801aa90 <etharp_find_entry+0x2e0>)
 801a9a8:	f003 fc98 	bl	801e2dc <iprintf>
 801a9ac:	e010      	b.n	801a9d0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a9ae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801a9b2:	2b09      	cmp	r3, #9
 801a9b4:	dc02      	bgt.n	801a9bc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a9b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a9b8:	843b      	strh	r3, [r7, #32]
 801a9ba:	e009      	b.n	801a9d0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a9bc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a9c0:	2b09      	cmp	r3, #9
 801a9c2:	dc02      	bgt.n	801a9ca <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a9c4:	8bfb      	ldrh	r3, [r7, #30]
 801a9c6:	843b      	strh	r3, [r7, #32]
 801a9c8:	e002      	b.n	801a9d0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a9ca:	f04f 33ff 	mov.w	r3, #4294967295
 801a9ce:	e054      	b.n	801aa7a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a9d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a9d4:	2b09      	cmp	r3, #9
 801a9d6:	dd06      	ble.n	801a9e6 <etharp_find_entry+0x236>
 801a9d8:	4b2b      	ldr	r3, [pc, #172]	@ (801aa88 <etharp_find_entry+0x2d8>)
 801a9da:	f240 127f 	movw	r2, #383	@ 0x17f
 801a9de:	492e      	ldr	r1, [pc, #184]	@ (801aa98 <etharp_find_entry+0x2e8>)
 801a9e0:	482b      	ldr	r0, [pc, #172]	@ (801aa90 <etharp_find_entry+0x2e0>)
 801a9e2:	f003 fc7b 	bl	801e2dc <iprintf>
    etharp_free_entry(i);
 801a9e6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a9ea:	4618      	mov	r0, r3
 801a9ec:	f7ff fe06 	bl	801a5fc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a9f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a9f4:	2b09      	cmp	r3, #9
 801a9f6:	dd06      	ble.n	801aa06 <etharp_find_entry+0x256>
 801a9f8:	4b23      	ldr	r3, [pc, #140]	@ (801aa88 <etharp_find_entry+0x2d8>)
 801a9fa:	f240 1283 	movw	r2, #387	@ 0x183
 801a9fe:	4926      	ldr	r1, [pc, #152]	@ (801aa98 <etharp_find_entry+0x2e8>)
 801aa00:	4823      	ldr	r0, [pc, #140]	@ (801aa90 <etharp_find_entry+0x2e0>)
 801aa02:	f003 fc6b 	bl	801e2dc <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801aa06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aa0a:	491e      	ldr	r1, [pc, #120]	@ (801aa84 <etharp_find_entry+0x2d4>)
 801aa0c:	4613      	mov	r3, r2
 801aa0e:	005b      	lsls	r3, r3, #1
 801aa10:	4413      	add	r3, r2
 801aa12:	00db      	lsls	r3, r3, #3
 801aa14:	440b      	add	r3, r1
 801aa16:	3314      	adds	r3, #20
 801aa18:	781b      	ldrb	r3, [r3, #0]
 801aa1a:	2b00      	cmp	r3, #0
 801aa1c:	d006      	beq.n	801aa2c <etharp_find_entry+0x27c>
 801aa1e:	4b1a      	ldr	r3, [pc, #104]	@ (801aa88 <etharp_find_entry+0x2d8>)
 801aa20:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801aa24:	491d      	ldr	r1, [pc, #116]	@ (801aa9c <etharp_find_entry+0x2ec>)
 801aa26:	481a      	ldr	r0, [pc, #104]	@ (801aa90 <etharp_find_entry+0x2e0>)
 801aa28:	f003 fc58 	bl	801e2dc <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	2b00      	cmp	r3, #0
 801aa30:	d00b      	beq.n	801aa4a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801aa32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aa36:	68fb      	ldr	r3, [r7, #12]
 801aa38:	6819      	ldr	r1, [r3, #0]
 801aa3a:	4812      	ldr	r0, [pc, #72]	@ (801aa84 <etharp_find_entry+0x2d4>)
 801aa3c:	4613      	mov	r3, r2
 801aa3e:	005b      	lsls	r3, r3, #1
 801aa40:	4413      	add	r3, r2
 801aa42:	00db      	lsls	r3, r3, #3
 801aa44:	4403      	add	r3, r0
 801aa46:	3304      	adds	r3, #4
 801aa48:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801aa4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aa4e:	490d      	ldr	r1, [pc, #52]	@ (801aa84 <etharp_find_entry+0x2d4>)
 801aa50:	4613      	mov	r3, r2
 801aa52:	005b      	lsls	r3, r3, #1
 801aa54:	4413      	add	r3, r2
 801aa56:	00db      	lsls	r3, r3, #3
 801aa58:	440b      	add	r3, r1
 801aa5a:	3312      	adds	r3, #18
 801aa5c:	2200      	movs	r2, #0
 801aa5e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801aa60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aa64:	4907      	ldr	r1, [pc, #28]	@ (801aa84 <etharp_find_entry+0x2d4>)
 801aa66:	4613      	mov	r3, r2
 801aa68:	005b      	lsls	r3, r3, #1
 801aa6a:	4413      	add	r3, r2
 801aa6c:	00db      	lsls	r3, r3, #3
 801aa6e:	440b      	add	r3, r1
 801aa70:	3308      	adds	r3, #8
 801aa72:	687a      	ldr	r2, [r7, #4]
 801aa74:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801aa76:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801aa7a:	4618      	mov	r0, r3
 801aa7c:	3728      	adds	r7, #40	@ 0x28
 801aa7e:	46bd      	mov	sp, r7
 801aa80:	bd80      	pop	{r7, pc}
 801aa82:	bf00      	nop
 801aa84:	20012710 	.word	0x20012710
 801aa88:	080253a8 	.word	0x080253a8
 801aa8c:	080253e0 	.word	0x080253e0
 801aa90:	08025420 	.word	0x08025420
 801aa94:	08025448 	.word	0x08025448
 801aa98:	08025460 	.word	0x08025460
 801aa9c:	08025474 	.word	0x08025474

0801aaa0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801aaa0:	b580      	push	{r7, lr}
 801aaa2:	b088      	sub	sp, #32
 801aaa4:	af02      	add	r7, sp, #8
 801aaa6:	60f8      	str	r0, [r7, #12]
 801aaa8:	60b9      	str	r1, [r7, #8]
 801aaaa:	607a      	str	r2, [r7, #4]
 801aaac:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801aaae:	68fb      	ldr	r3, [r7, #12]
 801aab0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801aab4:	2b06      	cmp	r3, #6
 801aab6:	d006      	beq.n	801aac6 <etharp_update_arp_entry+0x26>
 801aab8:	4b48      	ldr	r3, [pc, #288]	@ (801abdc <etharp_update_arp_entry+0x13c>)
 801aaba:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801aabe:	4948      	ldr	r1, [pc, #288]	@ (801abe0 <etharp_update_arp_entry+0x140>)
 801aac0:	4848      	ldr	r0, [pc, #288]	@ (801abe4 <etharp_update_arp_entry+0x144>)
 801aac2:	f003 fc0b 	bl	801e2dc <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801aac6:	68bb      	ldr	r3, [r7, #8]
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	d012      	beq.n	801aaf2 <etharp_update_arp_entry+0x52>
 801aacc:	68bb      	ldr	r3, [r7, #8]
 801aace:	681b      	ldr	r3, [r3, #0]
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	d00e      	beq.n	801aaf2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801aad4:	68bb      	ldr	r3, [r7, #8]
 801aad6:	681b      	ldr	r3, [r3, #0]
 801aad8:	68f9      	ldr	r1, [r7, #12]
 801aada:	4618      	mov	r0, r3
 801aadc:	f001 f920 	bl	801bd20 <ip4_addr_isbroadcast_u32>
 801aae0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801aae2:	2b00      	cmp	r3, #0
 801aae4:	d105      	bne.n	801aaf2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801aae6:	68bb      	ldr	r3, [r7, #8]
 801aae8:	681b      	ldr	r3, [r3, #0]
 801aaea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801aaee:	2be0      	cmp	r3, #224	@ 0xe0
 801aaf0:	d102      	bne.n	801aaf8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801aaf2:	f06f 030f 	mvn.w	r3, #15
 801aaf6:	e06c      	b.n	801abd2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801aaf8:	78fb      	ldrb	r3, [r7, #3]
 801aafa:	68fa      	ldr	r2, [r7, #12]
 801aafc:	4619      	mov	r1, r3
 801aafe:	68b8      	ldr	r0, [r7, #8]
 801ab00:	f7ff fe56 	bl	801a7b0 <etharp_find_entry>
 801ab04:	4603      	mov	r3, r0
 801ab06:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801ab08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801ab0c:	2b00      	cmp	r3, #0
 801ab0e:	da02      	bge.n	801ab16 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801ab10:	8afb      	ldrh	r3, [r7, #22]
 801ab12:	b25b      	sxtb	r3, r3
 801ab14:	e05d      	b.n	801abd2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801ab16:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ab1a:	4933      	ldr	r1, [pc, #204]	@ (801abe8 <etharp_update_arp_entry+0x148>)
 801ab1c:	4613      	mov	r3, r2
 801ab1e:	005b      	lsls	r3, r3, #1
 801ab20:	4413      	add	r3, r2
 801ab22:	00db      	lsls	r3, r3, #3
 801ab24:	440b      	add	r3, r1
 801ab26:	3314      	adds	r3, #20
 801ab28:	2202      	movs	r2, #2
 801ab2a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801ab2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ab30:	492d      	ldr	r1, [pc, #180]	@ (801abe8 <etharp_update_arp_entry+0x148>)
 801ab32:	4613      	mov	r3, r2
 801ab34:	005b      	lsls	r3, r3, #1
 801ab36:	4413      	add	r3, r2
 801ab38:	00db      	lsls	r3, r3, #3
 801ab3a:	440b      	add	r3, r1
 801ab3c:	3308      	adds	r3, #8
 801ab3e:	68fa      	ldr	r2, [r7, #12]
 801ab40:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801ab42:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ab46:	4613      	mov	r3, r2
 801ab48:	005b      	lsls	r3, r3, #1
 801ab4a:	4413      	add	r3, r2
 801ab4c:	00db      	lsls	r3, r3, #3
 801ab4e:	3308      	adds	r3, #8
 801ab50:	4a25      	ldr	r2, [pc, #148]	@ (801abe8 <etharp_update_arp_entry+0x148>)
 801ab52:	4413      	add	r3, r2
 801ab54:	3304      	adds	r3, #4
 801ab56:	2206      	movs	r2, #6
 801ab58:	6879      	ldr	r1, [r7, #4]
 801ab5a:	4618      	mov	r0, r3
 801ab5c:	f003 fd5f 	bl	801e61e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801ab60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ab64:	4920      	ldr	r1, [pc, #128]	@ (801abe8 <etharp_update_arp_entry+0x148>)
 801ab66:	4613      	mov	r3, r2
 801ab68:	005b      	lsls	r3, r3, #1
 801ab6a:	4413      	add	r3, r2
 801ab6c:	00db      	lsls	r3, r3, #3
 801ab6e:	440b      	add	r3, r1
 801ab70:	3312      	adds	r3, #18
 801ab72:	2200      	movs	r2, #0
 801ab74:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801ab76:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ab7a:	491b      	ldr	r1, [pc, #108]	@ (801abe8 <etharp_update_arp_entry+0x148>)
 801ab7c:	4613      	mov	r3, r2
 801ab7e:	005b      	lsls	r3, r3, #1
 801ab80:	4413      	add	r3, r2
 801ab82:	00db      	lsls	r3, r3, #3
 801ab84:	440b      	add	r3, r1
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	2b00      	cmp	r3, #0
 801ab8a:	d021      	beq.n	801abd0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801ab8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801ab90:	4915      	ldr	r1, [pc, #84]	@ (801abe8 <etharp_update_arp_entry+0x148>)
 801ab92:	4613      	mov	r3, r2
 801ab94:	005b      	lsls	r3, r3, #1
 801ab96:	4413      	add	r3, r2
 801ab98:	00db      	lsls	r3, r3, #3
 801ab9a:	440b      	add	r3, r1
 801ab9c:	681b      	ldr	r3, [r3, #0]
 801ab9e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801aba0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801aba4:	4910      	ldr	r1, [pc, #64]	@ (801abe8 <etharp_update_arp_entry+0x148>)
 801aba6:	4613      	mov	r3, r2
 801aba8:	005b      	lsls	r3, r3, #1
 801abaa:	4413      	add	r3, r2
 801abac:	00db      	lsls	r3, r3, #3
 801abae:	440b      	add	r3, r1
 801abb0:	2200      	movs	r2, #0
 801abb2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801abb4:	68fb      	ldr	r3, [r7, #12]
 801abb6:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801abba:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801abbe:	9300      	str	r3, [sp, #0]
 801abc0:	687b      	ldr	r3, [r7, #4]
 801abc2:	6939      	ldr	r1, [r7, #16]
 801abc4:	68f8      	ldr	r0, [r7, #12]
 801abc6:	f002 f8e3 	bl	801cd90 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801abca:	6938      	ldr	r0, [r7, #16]
 801abcc:	f7f6 fb04 	bl	80111d8 <pbuf_free>
  }
  return ERR_OK;
 801abd0:	2300      	movs	r3, #0
}
 801abd2:	4618      	mov	r0, r3
 801abd4:	3718      	adds	r7, #24
 801abd6:	46bd      	mov	sp, r7
 801abd8:	bd80      	pop	{r7, pc}
 801abda:	bf00      	nop
 801abdc:	080253a8 	.word	0x080253a8
 801abe0:	080254a0 	.word	0x080254a0
 801abe4:	08025420 	.word	0x08025420
 801abe8:	20012710 	.word	0x20012710

0801abec <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801abec:	b580      	push	{r7, lr}
 801abee:	b084      	sub	sp, #16
 801abf0:	af00      	add	r7, sp, #0
 801abf2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801abf4:	2300      	movs	r3, #0
 801abf6:	60fb      	str	r3, [r7, #12]
 801abf8:	e01e      	b.n	801ac38 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801abfa:	4913      	ldr	r1, [pc, #76]	@ (801ac48 <etharp_cleanup_netif+0x5c>)
 801abfc:	68fa      	ldr	r2, [r7, #12]
 801abfe:	4613      	mov	r3, r2
 801ac00:	005b      	lsls	r3, r3, #1
 801ac02:	4413      	add	r3, r2
 801ac04:	00db      	lsls	r3, r3, #3
 801ac06:	440b      	add	r3, r1
 801ac08:	3314      	adds	r3, #20
 801ac0a:	781b      	ldrb	r3, [r3, #0]
 801ac0c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801ac0e:	7afb      	ldrb	r3, [r7, #11]
 801ac10:	2b00      	cmp	r3, #0
 801ac12:	d00e      	beq.n	801ac32 <etharp_cleanup_netif+0x46>
 801ac14:	490c      	ldr	r1, [pc, #48]	@ (801ac48 <etharp_cleanup_netif+0x5c>)
 801ac16:	68fa      	ldr	r2, [r7, #12]
 801ac18:	4613      	mov	r3, r2
 801ac1a:	005b      	lsls	r3, r3, #1
 801ac1c:	4413      	add	r3, r2
 801ac1e:	00db      	lsls	r3, r3, #3
 801ac20:	440b      	add	r3, r1
 801ac22:	3308      	adds	r3, #8
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	687a      	ldr	r2, [r7, #4]
 801ac28:	429a      	cmp	r2, r3
 801ac2a:	d102      	bne.n	801ac32 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801ac2c:	68f8      	ldr	r0, [r7, #12]
 801ac2e:	f7ff fce5 	bl	801a5fc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ac32:	68fb      	ldr	r3, [r7, #12]
 801ac34:	3301      	adds	r3, #1
 801ac36:	60fb      	str	r3, [r7, #12]
 801ac38:	68fb      	ldr	r3, [r7, #12]
 801ac3a:	2b09      	cmp	r3, #9
 801ac3c:	dddd      	ble.n	801abfa <etharp_cleanup_netif+0xe>
    }
  }
}
 801ac3e:	bf00      	nop
 801ac40:	bf00      	nop
 801ac42:	3710      	adds	r7, #16
 801ac44:	46bd      	mov	sp, r7
 801ac46:	bd80      	pop	{r7, pc}
 801ac48:	20012710 	.word	0x20012710

0801ac4c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801ac4c:	b5b0      	push	{r4, r5, r7, lr}
 801ac4e:	b08a      	sub	sp, #40	@ 0x28
 801ac50:	af04      	add	r7, sp, #16
 801ac52:	6078      	str	r0, [r7, #4]
 801ac54:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801ac56:	683b      	ldr	r3, [r7, #0]
 801ac58:	2b00      	cmp	r3, #0
 801ac5a:	d107      	bne.n	801ac6c <etharp_input+0x20>
 801ac5c:	4b3f      	ldr	r3, [pc, #252]	@ (801ad5c <etharp_input+0x110>)
 801ac5e:	f240 228a 	movw	r2, #650	@ 0x28a
 801ac62:	493f      	ldr	r1, [pc, #252]	@ (801ad60 <etharp_input+0x114>)
 801ac64:	483f      	ldr	r0, [pc, #252]	@ (801ad64 <etharp_input+0x118>)
 801ac66:	f003 fb39 	bl	801e2dc <iprintf>
 801ac6a:	e074      	b.n	801ad56 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801ac6c:	687b      	ldr	r3, [r7, #4]
 801ac6e:	685b      	ldr	r3, [r3, #4]
 801ac70:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801ac72:	693b      	ldr	r3, [r7, #16]
 801ac74:	881b      	ldrh	r3, [r3, #0]
 801ac76:	b29b      	uxth	r3, r3
 801ac78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ac7c:	d10c      	bne.n	801ac98 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ac7e:	693b      	ldr	r3, [r7, #16]
 801ac80:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801ac82:	2b06      	cmp	r3, #6
 801ac84:	d108      	bne.n	801ac98 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ac86:	693b      	ldr	r3, [r7, #16]
 801ac88:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ac8a:	2b04      	cmp	r3, #4
 801ac8c:	d104      	bne.n	801ac98 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801ac8e:	693b      	ldr	r3, [r7, #16]
 801ac90:	885b      	ldrh	r3, [r3, #2]
 801ac92:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ac94:	2b08      	cmp	r3, #8
 801ac96:	d003      	beq.n	801aca0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801ac98:	6878      	ldr	r0, [r7, #4]
 801ac9a:	f7f6 fa9d 	bl	80111d8 <pbuf_free>
    return;
 801ac9e:	e05a      	b.n	801ad56 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801aca0:	693b      	ldr	r3, [r7, #16]
 801aca2:	330e      	adds	r3, #14
 801aca4:	681b      	ldr	r3, [r3, #0]
 801aca6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801aca8:	693b      	ldr	r3, [r7, #16]
 801acaa:	3318      	adds	r3, #24
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801acb0:	683b      	ldr	r3, [r7, #0]
 801acb2:	3304      	adds	r3, #4
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d102      	bne.n	801acc0 <etharp_input+0x74>
    for_us = 0;
 801acba:	2300      	movs	r3, #0
 801acbc:	75fb      	strb	r3, [r7, #23]
 801acbe:	e009      	b.n	801acd4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801acc0:	68ba      	ldr	r2, [r7, #8]
 801acc2:	683b      	ldr	r3, [r7, #0]
 801acc4:	3304      	adds	r3, #4
 801acc6:	681b      	ldr	r3, [r3, #0]
 801acc8:	429a      	cmp	r2, r3
 801acca:	bf0c      	ite	eq
 801accc:	2301      	moveq	r3, #1
 801acce:	2300      	movne	r3, #0
 801acd0:	b2db      	uxtb	r3, r3
 801acd2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801acd4:	693b      	ldr	r3, [r7, #16]
 801acd6:	f103 0208 	add.w	r2, r3, #8
 801acda:	7dfb      	ldrb	r3, [r7, #23]
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d001      	beq.n	801ace4 <etharp_input+0x98>
 801ace0:	2301      	movs	r3, #1
 801ace2:	e000      	b.n	801ace6 <etharp_input+0x9a>
 801ace4:	2302      	movs	r3, #2
 801ace6:	f107 010c 	add.w	r1, r7, #12
 801acea:	6838      	ldr	r0, [r7, #0]
 801acec:	f7ff fed8 	bl	801aaa0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801acf0:	693b      	ldr	r3, [r7, #16]
 801acf2:	88db      	ldrh	r3, [r3, #6]
 801acf4:	b29b      	uxth	r3, r3
 801acf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801acfa:	d003      	beq.n	801ad04 <etharp_input+0xb8>
 801acfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ad00:	d01e      	beq.n	801ad40 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801ad02:	e025      	b.n	801ad50 <etharp_input+0x104>
      if (for_us) {
 801ad04:	7dfb      	ldrb	r3, [r7, #23]
 801ad06:	2b00      	cmp	r3, #0
 801ad08:	d021      	beq.n	801ad4e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801ad0a:	683b      	ldr	r3, [r7, #0]
 801ad0c:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801ad10:	693b      	ldr	r3, [r7, #16]
 801ad12:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801ad16:	683b      	ldr	r3, [r7, #0]
 801ad18:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 801ad1c:	683b      	ldr	r3, [r7, #0]
 801ad1e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801ad20:	693a      	ldr	r2, [r7, #16]
 801ad22:	3208      	adds	r2, #8
        etharp_raw(netif,
 801ad24:	2102      	movs	r1, #2
 801ad26:	9103      	str	r1, [sp, #12]
 801ad28:	f107 010c 	add.w	r1, r7, #12
 801ad2c:	9102      	str	r1, [sp, #8]
 801ad2e:	9201      	str	r2, [sp, #4]
 801ad30:	9300      	str	r3, [sp, #0]
 801ad32:	462b      	mov	r3, r5
 801ad34:	4622      	mov	r2, r4
 801ad36:	4601      	mov	r1, r0
 801ad38:	6838      	ldr	r0, [r7, #0]
 801ad3a:	f000 faef 	bl	801b31c <etharp_raw>
      break;
 801ad3e:	e006      	b.n	801ad4e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801ad40:	f107 030c 	add.w	r3, r7, #12
 801ad44:	4619      	mov	r1, r3
 801ad46:	6838      	ldr	r0, [r7, #0]
 801ad48:	f7fe f9d2 	bl	80190f0 <dhcp_arp_reply>
      break;
 801ad4c:	e000      	b.n	801ad50 <etharp_input+0x104>
      break;
 801ad4e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801ad50:	6878      	ldr	r0, [r7, #4]
 801ad52:	f7f6 fa41 	bl	80111d8 <pbuf_free>
}
 801ad56:	3718      	adds	r7, #24
 801ad58:	46bd      	mov	sp, r7
 801ad5a:	bdb0      	pop	{r4, r5, r7, pc}
 801ad5c:	080253a8 	.word	0x080253a8
 801ad60:	080254f8 	.word	0x080254f8
 801ad64:	08025420 	.word	0x08025420

0801ad68 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801ad68:	b580      	push	{r7, lr}
 801ad6a:	b086      	sub	sp, #24
 801ad6c:	af02      	add	r7, sp, #8
 801ad6e:	60f8      	str	r0, [r7, #12]
 801ad70:	60b9      	str	r1, [r7, #8]
 801ad72:	4613      	mov	r3, r2
 801ad74:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801ad76:	79fa      	ldrb	r2, [r7, #7]
 801ad78:	4944      	ldr	r1, [pc, #272]	@ (801ae8c <etharp_output_to_arp_index+0x124>)
 801ad7a:	4613      	mov	r3, r2
 801ad7c:	005b      	lsls	r3, r3, #1
 801ad7e:	4413      	add	r3, r2
 801ad80:	00db      	lsls	r3, r3, #3
 801ad82:	440b      	add	r3, r1
 801ad84:	3314      	adds	r3, #20
 801ad86:	781b      	ldrb	r3, [r3, #0]
 801ad88:	2b01      	cmp	r3, #1
 801ad8a:	d806      	bhi.n	801ad9a <etharp_output_to_arp_index+0x32>
 801ad8c:	4b40      	ldr	r3, [pc, #256]	@ (801ae90 <etharp_output_to_arp_index+0x128>)
 801ad8e:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801ad92:	4940      	ldr	r1, [pc, #256]	@ (801ae94 <etharp_output_to_arp_index+0x12c>)
 801ad94:	4840      	ldr	r0, [pc, #256]	@ (801ae98 <etharp_output_to_arp_index+0x130>)
 801ad96:	f003 faa1 	bl	801e2dc <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801ad9a:	79fa      	ldrb	r2, [r7, #7]
 801ad9c:	493b      	ldr	r1, [pc, #236]	@ (801ae8c <etharp_output_to_arp_index+0x124>)
 801ad9e:	4613      	mov	r3, r2
 801ada0:	005b      	lsls	r3, r3, #1
 801ada2:	4413      	add	r3, r2
 801ada4:	00db      	lsls	r3, r3, #3
 801ada6:	440b      	add	r3, r1
 801ada8:	3314      	adds	r3, #20
 801adaa:	781b      	ldrb	r3, [r3, #0]
 801adac:	2b02      	cmp	r3, #2
 801adae:	d153      	bne.n	801ae58 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801adb0:	79fa      	ldrb	r2, [r7, #7]
 801adb2:	4936      	ldr	r1, [pc, #216]	@ (801ae8c <etharp_output_to_arp_index+0x124>)
 801adb4:	4613      	mov	r3, r2
 801adb6:	005b      	lsls	r3, r3, #1
 801adb8:	4413      	add	r3, r2
 801adba:	00db      	lsls	r3, r3, #3
 801adbc:	440b      	add	r3, r1
 801adbe:	3312      	adds	r3, #18
 801adc0:	881b      	ldrh	r3, [r3, #0]
 801adc2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801adc6:	d919      	bls.n	801adfc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801adc8:	79fa      	ldrb	r2, [r7, #7]
 801adca:	4613      	mov	r3, r2
 801adcc:	005b      	lsls	r3, r3, #1
 801adce:	4413      	add	r3, r2
 801add0:	00db      	lsls	r3, r3, #3
 801add2:	4a2e      	ldr	r2, [pc, #184]	@ (801ae8c <etharp_output_to_arp_index+0x124>)
 801add4:	4413      	add	r3, r2
 801add6:	3304      	adds	r3, #4
 801add8:	4619      	mov	r1, r3
 801adda:	68f8      	ldr	r0, [r7, #12]
 801addc:	f000 fb4c 	bl	801b478 <etharp_request>
 801ade0:	4603      	mov	r3, r0
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	d138      	bne.n	801ae58 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801ade6:	79fa      	ldrb	r2, [r7, #7]
 801ade8:	4928      	ldr	r1, [pc, #160]	@ (801ae8c <etharp_output_to_arp_index+0x124>)
 801adea:	4613      	mov	r3, r2
 801adec:	005b      	lsls	r3, r3, #1
 801adee:	4413      	add	r3, r2
 801adf0:	00db      	lsls	r3, r3, #3
 801adf2:	440b      	add	r3, r1
 801adf4:	3314      	adds	r3, #20
 801adf6:	2203      	movs	r2, #3
 801adf8:	701a      	strb	r2, [r3, #0]
 801adfa:	e02d      	b.n	801ae58 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801adfc:	79fa      	ldrb	r2, [r7, #7]
 801adfe:	4923      	ldr	r1, [pc, #140]	@ (801ae8c <etharp_output_to_arp_index+0x124>)
 801ae00:	4613      	mov	r3, r2
 801ae02:	005b      	lsls	r3, r3, #1
 801ae04:	4413      	add	r3, r2
 801ae06:	00db      	lsls	r3, r3, #3
 801ae08:	440b      	add	r3, r1
 801ae0a:	3312      	adds	r3, #18
 801ae0c:	881b      	ldrh	r3, [r3, #0]
 801ae0e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801ae12:	d321      	bcc.n	801ae58 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801ae14:	79fa      	ldrb	r2, [r7, #7]
 801ae16:	4613      	mov	r3, r2
 801ae18:	005b      	lsls	r3, r3, #1
 801ae1a:	4413      	add	r3, r2
 801ae1c:	00db      	lsls	r3, r3, #3
 801ae1e:	4a1b      	ldr	r2, [pc, #108]	@ (801ae8c <etharp_output_to_arp_index+0x124>)
 801ae20:	4413      	add	r3, r2
 801ae22:	1d19      	adds	r1, r3, #4
 801ae24:	79fa      	ldrb	r2, [r7, #7]
 801ae26:	4613      	mov	r3, r2
 801ae28:	005b      	lsls	r3, r3, #1
 801ae2a:	4413      	add	r3, r2
 801ae2c:	00db      	lsls	r3, r3, #3
 801ae2e:	3308      	adds	r3, #8
 801ae30:	4a16      	ldr	r2, [pc, #88]	@ (801ae8c <etharp_output_to_arp_index+0x124>)
 801ae32:	4413      	add	r3, r2
 801ae34:	3304      	adds	r3, #4
 801ae36:	461a      	mov	r2, r3
 801ae38:	68f8      	ldr	r0, [r7, #12]
 801ae3a:	f000 fafb 	bl	801b434 <etharp_request_dst>
 801ae3e:	4603      	mov	r3, r0
 801ae40:	2b00      	cmp	r3, #0
 801ae42:	d109      	bne.n	801ae58 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801ae44:	79fa      	ldrb	r2, [r7, #7]
 801ae46:	4911      	ldr	r1, [pc, #68]	@ (801ae8c <etharp_output_to_arp_index+0x124>)
 801ae48:	4613      	mov	r3, r2
 801ae4a:	005b      	lsls	r3, r3, #1
 801ae4c:	4413      	add	r3, r2
 801ae4e:	00db      	lsls	r3, r3, #3
 801ae50:	440b      	add	r3, r1
 801ae52:	3314      	adds	r3, #20
 801ae54:	2203      	movs	r2, #3
 801ae56:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801ae58:	68fb      	ldr	r3, [r7, #12]
 801ae5a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 801ae5e:	79fa      	ldrb	r2, [r7, #7]
 801ae60:	4613      	mov	r3, r2
 801ae62:	005b      	lsls	r3, r3, #1
 801ae64:	4413      	add	r3, r2
 801ae66:	00db      	lsls	r3, r3, #3
 801ae68:	3308      	adds	r3, #8
 801ae6a:	4a08      	ldr	r2, [pc, #32]	@ (801ae8c <etharp_output_to_arp_index+0x124>)
 801ae6c:	4413      	add	r3, r2
 801ae6e:	3304      	adds	r3, #4
 801ae70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801ae74:	9200      	str	r2, [sp, #0]
 801ae76:	460a      	mov	r2, r1
 801ae78:	68b9      	ldr	r1, [r7, #8]
 801ae7a:	68f8      	ldr	r0, [r7, #12]
 801ae7c:	f001 ff88 	bl	801cd90 <ethernet_output>
 801ae80:	4603      	mov	r3, r0
}
 801ae82:	4618      	mov	r0, r3
 801ae84:	3710      	adds	r7, #16
 801ae86:	46bd      	mov	sp, r7
 801ae88:	bd80      	pop	{r7, pc}
 801ae8a:	bf00      	nop
 801ae8c:	20012710 	.word	0x20012710
 801ae90:	080253a8 	.word	0x080253a8
 801ae94:	08025518 	.word	0x08025518
 801ae98:	08025420 	.word	0x08025420

0801ae9c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801ae9c:	b580      	push	{r7, lr}
 801ae9e:	b08a      	sub	sp, #40	@ 0x28
 801aea0:	af02      	add	r7, sp, #8
 801aea2:	60f8      	str	r0, [r7, #12]
 801aea4:	60b9      	str	r1, [r7, #8]
 801aea6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801aea8:	687b      	ldr	r3, [r7, #4]
 801aeaa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	2b00      	cmp	r3, #0
 801aeb0:	d106      	bne.n	801aec0 <etharp_output+0x24>
 801aeb2:	4b73      	ldr	r3, [pc, #460]	@ (801b080 <etharp_output+0x1e4>)
 801aeb4:	f240 321e 	movw	r2, #798	@ 0x31e
 801aeb8:	4972      	ldr	r1, [pc, #456]	@ (801b084 <etharp_output+0x1e8>)
 801aeba:	4873      	ldr	r0, [pc, #460]	@ (801b088 <etharp_output+0x1ec>)
 801aebc:	f003 fa0e 	bl	801e2dc <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801aec0:	68bb      	ldr	r3, [r7, #8]
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d106      	bne.n	801aed4 <etharp_output+0x38>
 801aec6:	4b6e      	ldr	r3, [pc, #440]	@ (801b080 <etharp_output+0x1e4>)
 801aec8:	f240 321f 	movw	r2, #799	@ 0x31f
 801aecc:	496f      	ldr	r1, [pc, #444]	@ (801b08c <etharp_output+0x1f0>)
 801aece:	486e      	ldr	r0, [pc, #440]	@ (801b088 <etharp_output+0x1ec>)
 801aed0:	f003 fa04 	bl	801e2dc <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	2b00      	cmp	r3, #0
 801aed8:	d106      	bne.n	801aee8 <etharp_output+0x4c>
 801aeda:	4b69      	ldr	r3, [pc, #420]	@ (801b080 <etharp_output+0x1e4>)
 801aedc:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801aee0:	496b      	ldr	r1, [pc, #428]	@ (801b090 <etharp_output+0x1f4>)
 801aee2:	4869      	ldr	r0, [pc, #420]	@ (801b088 <etharp_output+0x1ec>)
 801aee4:	f003 f9fa 	bl	801e2dc <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	681b      	ldr	r3, [r3, #0]
 801aeec:	68f9      	ldr	r1, [r7, #12]
 801aeee:	4618      	mov	r0, r3
 801aef0:	f000 ff16 	bl	801bd20 <ip4_addr_isbroadcast_u32>
 801aef4:	4603      	mov	r3, r0
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d002      	beq.n	801af00 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801aefa:	4b66      	ldr	r3, [pc, #408]	@ (801b094 <etharp_output+0x1f8>)
 801aefc:	61fb      	str	r3, [r7, #28]
 801aefe:	e0af      	b.n	801b060 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801af00:	687b      	ldr	r3, [r7, #4]
 801af02:	681b      	ldr	r3, [r3, #0]
 801af04:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801af08:	2be0      	cmp	r3, #224	@ 0xe0
 801af0a:	d118      	bne.n	801af3e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801af0c:	2301      	movs	r3, #1
 801af0e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801af10:	2300      	movs	r3, #0
 801af12:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801af14:	235e      	movs	r3, #94	@ 0x5e
 801af16:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801af18:	687b      	ldr	r3, [r7, #4]
 801af1a:	3301      	adds	r3, #1
 801af1c:	781b      	ldrb	r3, [r3, #0]
 801af1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801af22:	b2db      	uxtb	r3, r3
 801af24:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	3302      	adds	r3, #2
 801af2a:	781b      	ldrb	r3, [r3, #0]
 801af2c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801af2e:	687b      	ldr	r3, [r7, #4]
 801af30:	3303      	adds	r3, #3
 801af32:	781b      	ldrb	r3, [r3, #0]
 801af34:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801af36:	f107 0310 	add.w	r3, r7, #16
 801af3a:	61fb      	str	r3, [r7, #28]
 801af3c:	e090      	b.n	801b060 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801af3e:	687b      	ldr	r3, [r7, #4]
 801af40:	681a      	ldr	r2, [r3, #0]
 801af42:	68fb      	ldr	r3, [r7, #12]
 801af44:	3304      	adds	r3, #4
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	405a      	eors	r2, r3
 801af4a:	68fb      	ldr	r3, [r7, #12]
 801af4c:	3308      	adds	r3, #8
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	4013      	ands	r3, r2
 801af52:	2b00      	cmp	r3, #0
 801af54:	d012      	beq.n	801af7c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	681b      	ldr	r3, [r3, #0]
 801af5a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801af5c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801af60:	4293      	cmp	r3, r2
 801af62:	d00b      	beq.n	801af7c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801af64:	68fb      	ldr	r3, [r7, #12]
 801af66:	330c      	adds	r3, #12
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d003      	beq.n	801af76 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801af6e:	68fb      	ldr	r3, [r7, #12]
 801af70:	330c      	adds	r3, #12
 801af72:	61bb      	str	r3, [r7, #24]
 801af74:	e002      	b.n	801af7c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801af76:	f06f 0303 	mvn.w	r3, #3
 801af7a:	e07d      	b.n	801b078 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801af7c:	4b46      	ldr	r3, [pc, #280]	@ (801b098 <etharp_output+0x1fc>)
 801af7e:	781b      	ldrb	r3, [r3, #0]
 801af80:	4619      	mov	r1, r3
 801af82:	4a46      	ldr	r2, [pc, #280]	@ (801b09c <etharp_output+0x200>)
 801af84:	460b      	mov	r3, r1
 801af86:	005b      	lsls	r3, r3, #1
 801af88:	440b      	add	r3, r1
 801af8a:	00db      	lsls	r3, r3, #3
 801af8c:	4413      	add	r3, r2
 801af8e:	3314      	adds	r3, #20
 801af90:	781b      	ldrb	r3, [r3, #0]
 801af92:	2b01      	cmp	r3, #1
 801af94:	d925      	bls.n	801afe2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801af96:	4b40      	ldr	r3, [pc, #256]	@ (801b098 <etharp_output+0x1fc>)
 801af98:	781b      	ldrb	r3, [r3, #0]
 801af9a:	4619      	mov	r1, r3
 801af9c:	4a3f      	ldr	r2, [pc, #252]	@ (801b09c <etharp_output+0x200>)
 801af9e:	460b      	mov	r3, r1
 801afa0:	005b      	lsls	r3, r3, #1
 801afa2:	440b      	add	r3, r1
 801afa4:	00db      	lsls	r3, r3, #3
 801afa6:	4413      	add	r3, r2
 801afa8:	3308      	adds	r3, #8
 801afaa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801afac:	68fa      	ldr	r2, [r7, #12]
 801afae:	429a      	cmp	r2, r3
 801afb0:	d117      	bne.n	801afe2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801afb2:	69bb      	ldr	r3, [r7, #24]
 801afb4:	681a      	ldr	r2, [r3, #0]
 801afb6:	4b38      	ldr	r3, [pc, #224]	@ (801b098 <etharp_output+0x1fc>)
 801afb8:	781b      	ldrb	r3, [r3, #0]
 801afba:	4618      	mov	r0, r3
 801afbc:	4937      	ldr	r1, [pc, #220]	@ (801b09c <etharp_output+0x200>)
 801afbe:	4603      	mov	r3, r0
 801afc0:	005b      	lsls	r3, r3, #1
 801afc2:	4403      	add	r3, r0
 801afc4:	00db      	lsls	r3, r3, #3
 801afc6:	440b      	add	r3, r1
 801afc8:	3304      	adds	r3, #4
 801afca:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801afcc:	429a      	cmp	r2, r3
 801afce:	d108      	bne.n	801afe2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801afd0:	4b31      	ldr	r3, [pc, #196]	@ (801b098 <etharp_output+0x1fc>)
 801afd2:	781b      	ldrb	r3, [r3, #0]
 801afd4:	461a      	mov	r2, r3
 801afd6:	68b9      	ldr	r1, [r7, #8]
 801afd8:	68f8      	ldr	r0, [r7, #12]
 801afda:	f7ff fec5 	bl	801ad68 <etharp_output_to_arp_index>
 801afde:	4603      	mov	r3, r0
 801afe0:	e04a      	b.n	801b078 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801afe2:	2300      	movs	r3, #0
 801afe4:	75fb      	strb	r3, [r7, #23]
 801afe6:	e031      	b.n	801b04c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801afe8:	7dfa      	ldrb	r2, [r7, #23]
 801afea:	492c      	ldr	r1, [pc, #176]	@ (801b09c <etharp_output+0x200>)
 801afec:	4613      	mov	r3, r2
 801afee:	005b      	lsls	r3, r3, #1
 801aff0:	4413      	add	r3, r2
 801aff2:	00db      	lsls	r3, r3, #3
 801aff4:	440b      	add	r3, r1
 801aff6:	3314      	adds	r3, #20
 801aff8:	781b      	ldrb	r3, [r3, #0]
 801affa:	2b01      	cmp	r3, #1
 801affc:	d923      	bls.n	801b046 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801affe:	7dfa      	ldrb	r2, [r7, #23]
 801b000:	4926      	ldr	r1, [pc, #152]	@ (801b09c <etharp_output+0x200>)
 801b002:	4613      	mov	r3, r2
 801b004:	005b      	lsls	r3, r3, #1
 801b006:	4413      	add	r3, r2
 801b008:	00db      	lsls	r3, r3, #3
 801b00a:	440b      	add	r3, r1
 801b00c:	3308      	adds	r3, #8
 801b00e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b010:	68fa      	ldr	r2, [r7, #12]
 801b012:	429a      	cmp	r2, r3
 801b014:	d117      	bne.n	801b046 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801b016:	69bb      	ldr	r3, [r7, #24]
 801b018:	6819      	ldr	r1, [r3, #0]
 801b01a:	7dfa      	ldrb	r2, [r7, #23]
 801b01c:	481f      	ldr	r0, [pc, #124]	@ (801b09c <etharp_output+0x200>)
 801b01e:	4613      	mov	r3, r2
 801b020:	005b      	lsls	r3, r3, #1
 801b022:	4413      	add	r3, r2
 801b024:	00db      	lsls	r3, r3, #3
 801b026:	4403      	add	r3, r0
 801b028:	3304      	adds	r3, #4
 801b02a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801b02c:	4299      	cmp	r1, r3
 801b02e:	d10a      	bne.n	801b046 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801b030:	4a19      	ldr	r2, [pc, #100]	@ (801b098 <etharp_output+0x1fc>)
 801b032:	7dfb      	ldrb	r3, [r7, #23]
 801b034:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801b036:	7dfb      	ldrb	r3, [r7, #23]
 801b038:	461a      	mov	r2, r3
 801b03a:	68b9      	ldr	r1, [r7, #8]
 801b03c:	68f8      	ldr	r0, [r7, #12]
 801b03e:	f7ff fe93 	bl	801ad68 <etharp_output_to_arp_index>
 801b042:	4603      	mov	r3, r0
 801b044:	e018      	b.n	801b078 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b046:	7dfb      	ldrb	r3, [r7, #23]
 801b048:	3301      	adds	r3, #1
 801b04a:	75fb      	strb	r3, [r7, #23]
 801b04c:	7dfb      	ldrb	r3, [r7, #23]
 801b04e:	2b09      	cmp	r3, #9
 801b050:	d9ca      	bls.n	801afe8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801b052:	68ba      	ldr	r2, [r7, #8]
 801b054:	69b9      	ldr	r1, [r7, #24]
 801b056:	68f8      	ldr	r0, [r7, #12]
 801b058:	f000 f822 	bl	801b0a0 <etharp_query>
 801b05c:	4603      	mov	r3, r0
 801b05e:	e00b      	b.n	801b078 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801b060:	68fb      	ldr	r3, [r7, #12]
 801b062:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801b066:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b06a:	9300      	str	r3, [sp, #0]
 801b06c:	69fb      	ldr	r3, [r7, #28]
 801b06e:	68b9      	ldr	r1, [r7, #8]
 801b070:	68f8      	ldr	r0, [r7, #12]
 801b072:	f001 fe8d 	bl	801cd90 <ethernet_output>
 801b076:	4603      	mov	r3, r0
}
 801b078:	4618      	mov	r0, r3
 801b07a:	3720      	adds	r7, #32
 801b07c:	46bd      	mov	sp, r7
 801b07e:	bd80      	pop	{r7, pc}
 801b080:	080253a8 	.word	0x080253a8
 801b084:	080254f8 	.word	0x080254f8
 801b088:	08025420 	.word	0x08025420
 801b08c:	08025548 	.word	0x08025548
 801b090:	080254e8 	.word	0x080254e8
 801b094:	08025d78 	.word	0x08025d78
 801b098:	20012800 	.word	0x20012800
 801b09c:	20012710 	.word	0x20012710

0801b0a0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801b0a0:	b580      	push	{r7, lr}
 801b0a2:	b08c      	sub	sp, #48	@ 0x30
 801b0a4:	af02      	add	r7, sp, #8
 801b0a6:	60f8      	str	r0, [r7, #12]
 801b0a8:	60b9      	str	r1, [r7, #8]
 801b0aa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801b0ac:	68fb      	ldr	r3, [r7, #12]
 801b0ae:	332a      	adds	r3, #42	@ 0x2a
 801b0b0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801b0b2:	23ff      	movs	r3, #255	@ 0xff
 801b0b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801b0b8:	2300      	movs	r3, #0
 801b0ba:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b0bc:	68bb      	ldr	r3, [r7, #8]
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	68f9      	ldr	r1, [r7, #12]
 801b0c2:	4618      	mov	r0, r3
 801b0c4:	f000 fe2c 	bl	801bd20 <ip4_addr_isbroadcast_u32>
 801b0c8:	4603      	mov	r3, r0
 801b0ca:	2b00      	cmp	r3, #0
 801b0cc:	d10c      	bne.n	801b0e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b0ce:	68bb      	ldr	r3, [r7, #8]
 801b0d0:	681b      	ldr	r3, [r3, #0]
 801b0d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b0d6:	2be0      	cmp	r3, #224	@ 0xe0
 801b0d8:	d006      	beq.n	801b0e8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b0da:	68bb      	ldr	r3, [r7, #8]
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	d003      	beq.n	801b0e8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801b0e0:	68bb      	ldr	r3, [r7, #8]
 801b0e2:	681b      	ldr	r3, [r3, #0]
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	d102      	bne.n	801b0ee <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b0e8:	f06f 030f 	mvn.w	r3, #15
 801b0ec:	e101      	b.n	801b2f2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801b0ee:	68fa      	ldr	r2, [r7, #12]
 801b0f0:	2101      	movs	r1, #1
 801b0f2:	68b8      	ldr	r0, [r7, #8]
 801b0f4:	f7ff fb5c 	bl	801a7b0 <etharp_find_entry>
 801b0f8:	4603      	mov	r3, r0
 801b0fa:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801b0fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b100:	2b00      	cmp	r3, #0
 801b102:	da02      	bge.n	801b10a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801b104:	8a7b      	ldrh	r3, [r7, #18]
 801b106:	b25b      	sxtb	r3, r3
 801b108:	e0f3      	b.n	801b2f2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801b10a:	8a7b      	ldrh	r3, [r7, #18]
 801b10c:	2b7e      	cmp	r3, #126	@ 0x7e
 801b10e:	d906      	bls.n	801b11e <etharp_query+0x7e>
 801b110:	4b7a      	ldr	r3, [pc, #488]	@ (801b2fc <etharp_query+0x25c>)
 801b112:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801b116:	497a      	ldr	r1, [pc, #488]	@ (801b300 <etharp_query+0x260>)
 801b118:	487a      	ldr	r0, [pc, #488]	@ (801b304 <etharp_query+0x264>)
 801b11a:	f003 f8df 	bl	801e2dc <iprintf>
  i = (netif_addr_idx_t)i_err;
 801b11e:	8a7b      	ldrh	r3, [r7, #18]
 801b120:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801b122:	7c7a      	ldrb	r2, [r7, #17]
 801b124:	4978      	ldr	r1, [pc, #480]	@ (801b308 <etharp_query+0x268>)
 801b126:	4613      	mov	r3, r2
 801b128:	005b      	lsls	r3, r3, #1
 801b12a:	4413      	add	r3, r2
 801b12c:	00db      	lsls	r3, r3, #3
 801b12e:	440b      	add	r3, r1
 801b130:	3314      	adds	r3, #20
 801b132:	781b      	ldrb	r3, [r3, #0]
 801b134:	2b00      	cmp	r3, #0
 801b136:	d115      	bne.n	801b164 <etharp_query+0xc4>
    is_new_entry = 1;
 801b138:	2301      	movs	r3, #1
 801b13a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b13c:	7c7a      	ldrb	r2, [r7, #17]
 801b13e:	4972      	ldr	r1, [pc, #456]	@ (801b308 <etharp_query+0x268>)
 801b140:	4613      	mov	r3, r2
 801b142:	005b      	lsls	r3, r3, #1
 801b144:	4413      	add	r3, r2
 801b146:	00db      	lsls	r3, r3, #3
 801b148:	440b      	add	r3, r1
 801b14a:	3314      	adds	r3, #20
 801b14c:	2201      	movs	r2, #1
 801b14e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801b150:	7c7a      	ldrb	r2, [r7, #17]
 801b152:	496d      	ldr	r1, [pc, #436]	@ (801b308 <etharp_query+0x268>)
 801b154:	4613      	mov	r3, r2
 801b156:	005b      	lsls	r3, r3, #1
 801b158:	4413      	add	r3, r2
 801b15a:	00db      	lsls	r3, r3, #3
 801b15c:	440b      	add	r3, r1
 801b15e:	3308      	adds	r3, #8
 801b160:	68fa      	ldr	r2, [r7, #12]
 801b162:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801b164:	7c7a      	ldrb	r2, [r7, #17]
 801b166:	4968      	ldr	r1, [pc, #416]	@ (801b308 <etharp_query+0x268>)
 801b168:	4613      	mov	r3, r2
 801b16a:	005b      	lsls	r3, r3, #1
 801b16c:	4413      	add	r3, r2
 801b16e:	00db      	lsls	r3, r3, #3
 801b170:	440b      	add	r3, r1
 801b172:	3314      	adds	r3, #20
 801b174:	781b      	ldrb	r3, [r3, #0]
 801b176:	2b01      	cmp	r3, #1
 801b178:	d011      	beq.n	801b19e <etharp_query+0xfe>
 801b17a:	7c7a      	ldrb	r2, [r7, #17]
 801b17c:	4962      	ldr	r1, [pc, #392]	@ (801b308 <etharp_query+0x268>)
 801b17e:	4613      	mov	r3, r2
 801b180:	005b      	lsls	r3, r3, #1
 801b182:	4413      	add	r3, r2
 801b184:	00db      	lsls	r3, r3, #3
 801b186:	440b      	add	r3, r1
 801b188:	3314      	adds	r3, #20
 801b18a:	781b      	ldrb	r3, [r3, #0]
 801b18c:	2b01      	cmp	r3, #1
 801b18e:	d806      	bhi.n	801b19e <etharp_query+0xfe>
 801b190:	4b5a      	ldr	r3, [pc, #360]	@ (801b2fc <etharp_query+0x25c>)
 801b192:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801b196:	495d      	ldr	r1, [pc, #372]	@ (801b30c <etharp_query+0x26c>)
 801b198:	485a      	ldr	r0, [pc, #360]	@ (801b304 <etharp_query+0x264>)
 801b19a:	f003 f89f 	bl	801e2dc <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801b19e:	6a3b      	ldr	r3, [r7, #32]
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d102      	bne.n	801b1aa <etharp_query+0x10a>
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	2b00      	cmp	r3, #0
 801b1a8:	d10c      	bne.n	801b1c4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801b1aa:	68b9      	ldr	r1, [r7, #8]
 801b1ac:	68f8      	ldr	r0, [r7, #12]
 801b1ae:	f000 f963 	bl	801b478 <etharp_request>
 801b1b2:	4603      	mov	r3, r0
 801b1b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d102      	bne.n	801b1c4 <etharp_query+0x124>
      return result;
 801b1be:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801b1c2:	e096      	b.n	801b2f2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	2b00      	cmp	r3, #0
 801b1c8:	d106      	bne.n	801b1d8 <etharp_query+0x138>
 801b1ca:	4b4c      	ldr	r3, [pc, #304]	@ (801b2fc <etharp_query+0x25c>)
 801b1cc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801b1d0:	494f      	ldr	r1, [pc, #316]	@ (801b310 <etharp_query+0x270>)
 801b1d2:	484c      	ldr	r0, [pc, #304]	@ (801b304 <etharp_query+0x264>)
 801b1d4:	f003 f882 	bl	801e2dc <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801b1d8:	7c7a      	ldrb	r2, [r7, #17]
 801b1da:	494b      	ldr	r1, [pc, #300]	@ (801b308 <etharp_query+0x268>)
 801b1dc:	4613      	mov	r3, r2
 801b1de:	005b      	lsls	r3, r3, #1
 801b1e0:	4413      	add	r3, r2
 801b1e2:	00db      	lsls	r3, r3, #3
 801b1e4:	440b      	add	r3, r1
 801b1e6:	3314      	adds	r3, #20
 801b1e8:	781b      	ldrb	r3, [r3, #0]
 801b1ea:	2b01      	cmp	r3, #1
 801b1ec:	d917      	bls.n	801b21e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801b1ee:	4a49      	ldr	r2, [pc, #292]	@ (801b314 <etharp_query+0x274>)
 801b1f0:	7c7b      	ldrb	r3, [r7, #17]
 801b1f2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b1f4:	7c7a      	ldrb	r2, [r7, #17]
 801b1f6:	4613      	mov	r3, r2
 801b1f8:	005b      	lsls	r3, r3, #1
 801b1fa:	4413      	add	r3, r2
 801b1fc:	00db      	lsls	r3, r3, #3
 801b1fe:	3308      	adds	r3, #8
 801b200:	4a41      	ldr	r2, [pc, #260]	@ (801b308 <etharp_query+0x268>)
 801b202:	4413      	add	r3, r2
 801b204:	3304      	adds	r3, #4
 801b206:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b20a:	9200      	str	r2, [sp, #0]
 801b20c:	697a      	ldr	r2, [r7, #20]
 801b20e:	6879      	ldr	r1, [r7, #4]
 801b210:	68f8      	ldr	r0, [r7, #12]
 801b212:	f001 fdbd 	bl	801cd90 <ethernet_output>
 801b216:	4603      	mov	r3, r0
 801b218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b21c:	e067      	b.n	801b2ee <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b21e:	7c7a      	ldrb	r2, [r7, #17]
 801b220:	4939      	ldr	r1, [pc, #228]	@ (801b308 <etharp_query+0x268>)
 801b222:	4613      	mov	r3, r2
 801b224:	005b      	lsls	r3, r3, #1
 801b226:	4413      	add	r3, r2
 801b228:	00db      	lsls	r3, r3, #3
 801b22a:	440b      	add	r3, r1
 801b22c:	3314      	adds	r3, #20
 801b22e:	781b      	ldrb	r3, [r3, #0]
 801b230:	2b01      	cmp	r3, #1
 801b232:	d15c      	bne.n	801b2ee <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801b234:	2300      	movs	r3, #0
 801b236:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b23c:	e01c      	b.n	801b278 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b23e:	69fb      	ldr	r3, [r7, #28]
 801b240:	895a      	ldrh	r2, [r3, #10]
 801b242:	69fb      	ldr	r3, [r7, #28]
 801b244:	891b      	ldrh	r3, [r3, #8]
 801b246:	429a      	cmp	r2, r3
 801b248:	d10a      	bne.n	801b260 <etharp_query+0x1c0>
 801b24a:	69fb      	ldr	r3, [r7, #28]
 801b24c:	681b      	ldr	r3, [r3, #0]
 801b24e:	2b00      	cmp	r3, #0
 801b250:	d006      	beq.n	801b260 <etharp_query+0x1c0>
 801b252:	4b2a      	ldr	r3, [pc, #168]	@ (801b2fc <etharp_query+0x25c>)
 801b254:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801b258:	492f      	ldr	r1, [pc, #188]	@ (801b318 <etharp_query+0x278>)
 801b25a:	482a      	ldr	r0, [pc, #168]	@ (801b304 <etharp_query+0x264>)
 801b25c:	f003 f83e 	bl	801e2dc <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801b260:	69fb      	ldr	r3, [r7, #28]
 801b262:	7b1b      	ldrb	r3, [r3, #12]
 801b264:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d002      	beq.n	801b272 <etharp_query+0x1d2>
        copy_needed = 1;
 801b26c:	2301      	movs	r3, #1
 801b26e:	61bb      	str	r3, [r7, #24]
        break;
 801b270:	e005      	b.n	801b27e <etharp_query+0x1de>
      }
      p = p->next;
 801b272:	69fb      	ldr	r3, [r7, #28]
 801b274:	681b      	ldr	r3, [r3, #0]
 801b276:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b278:	69fb      	ldr	r3, [r7, #28]
 801b27a:	2b00      	cmp	r3, #0
 801b27c:	d1df      	bne.n	801b23e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801b27e:	69bb      	ldr	r3, [r7, #24]
 801b280:	2b00      	cmp	r3, #0
 801b282:	d007      	beq.n	801b294 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801b284:	687a      	ldr	r2, [r7, #4]
 801b286:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801b28a:	200e      	movs	r0, #14
 801b28c:	f7f6 fb54 	bl	8011938 <pbuf_clone>
 801b290:	61f8      	str	r0, [r7, #28]
 801b292:	e004      	b.n	801b29e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801b294:	687b      	ldr	r3, [r7, #4]
 801b296:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801b298:	69f8      	ldr	r0, [r7, #28]
 801b29a:	f7f6 f843 	bl	8011324 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801b29e:	69fb      	ldr	r3, [r7, #28]
 801b2a0:	2b00      	cmp	r3, #0
 801b2a2:	d021      	beq.n	801b2e8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801b2a4:	7c7a      	ldrb	r2, [r7, #17]
 801b2a6:	4918      	ldr	r1, [pc, #96]	@ (801b308 <etharp_query+0x268>)
 801b2a8:	4613      	mov	r3, r2
 801b2aa:	005b      	lsls	r3, r3, #1
 801b2ac:	4413      	add	r3, r2
 801b2ae:	00db      	lsls	r3, r3, #3
 801b2b0:	440b      	add	r3, r1
 801b2b2:	681b      	ldr	r3, [r3, #0]
 801b2b4:	2b00      	cmp	r3, #0
 801b2b6:	d00a      	beq.n	801b2ce <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801b2b8:	7c7a      	ldrb	r2, [r7, #17]
 801b2ba:	4913      	ldr	r1, [pc, #76]	@ (801b308 <etharp_query+0x268>)
 801b2bc:	4613      	mov	r3, r2
 801b2be:	005b      	lsls	r3, r3, #1
 801b2c0:	4413      	add	r3, r2
 801b2c2:	00db      	lsls	r3, r3, #3
 801b2c4:	440b      	add	r3, r1
 801b2c6:	681b      	ldr	r3, [r3, #0]
 801b2c8:	4618      	mov	r0, r3
 801b2ca:	f7f5 ff85 	bl	80111d8 <pbuf_free>
      }
      arp_table[i].q = p;
 801b2ce:	7c7a      	ldrb	r2, [r7, #17]
 801b2d0:	490d      	ldr	r1, [pc, #52]	@ (801b308 <etharp_query+0x268>)
 801b2d2:	4613      	mov	r3, r2
 801b2d4:	005b      	lsls	r3, r3, #1
 801b2d6:	4413      	add	r3, r2
 801b2d8:	00db      	lsls	r3, r3, #3
 801b2da:	440b      	add	r3, r1
 801b2dc:	69fa      	ldr	r2, [r7, #28]
 801b2de:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801b2e0:	2300      	movs	r3, #0
 801b2e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b2e6:	e002      	b.n	801b2ee <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801b2e8:	23ff      	movs	r3, #255	@ 0xff
 801b2ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801b2ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801b2f2:	4618      	mov	r0, r3
 801b2f4:	3728      	adds	r7, #40	@ 0x28
 801b2f6:	46bd      	mov	sp, r7
 801b2f8:	bd80      	pop	{r7, pc}
 801b2fa:	bf00      	nop
 801b2fc:	080253a8 	.word	0x080253a8
 801b300:	08025554 	.word	0x08025554
 801b304:	08025420 	.word	0x08025420
 801b308:	20012710 	.word	0x20012710
 801b30c:	08025564 	.word	0x08025564
 801b310:	08025548 	.word	0x08025548
 801b314:	20012800 	.word	0x20012800
 801b318:	0802558c 	.word	0x0802558c

0801b31c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801b31c:	b580      	push	{r7, lr}
 801b31e:	b08a      	sub	sp, #40	@ 0x28
 801b320:	af02      	add	r7, sp, #8
 801b322:	60f8      	str	r0, [r7, #12]
 801b324:	60b9      	str	r1, [r7, #8]
 801b326:	607a      	str	r2, [r7, #4]
 801b328:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801b32a:	2300      	movs	r3, #0
 801b32c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b32e:	68fb      	ldr	r3, [r7, #12]
 801b330:	2b00      	cmp	r3, #0
 801b332:	d106      	bne.n	801b342 <etharp_raw+0x26>
 801b334:	4b3a      	ldr	r3, [pc, #232]	@ (801b420 <etharp_raw+0x104>)
 801b336:	f240 4257 	movw	r2, #1111	@ 0x457
 801b33a:	493a      	ldr	r1, [pc, #232]	@ (801b424 <etharp_raw+0x108>)
 801b33c:	483a      	ldr	r0, [pc, #232]	@ (801b428 <etharp_raw+0x10c>)
 801b33e:	f002 ffcd 	bl	801e2dc <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801b342:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b346:	211c      	movs	r1, #28
 801b348:	200e      	movs	r0, #14
 801b34a:	f7f5 fc61 	bl	8010c10 <pbuf_alloc>
 801b34e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801b350:	69bb      	ldr	r3, [r7, #24]
 801b352:	2b00      	cmp	r3, #0
 801b354:	d102      	bne.n	801b35c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801b356:	f04f 33ff 	mov.w	r3, #4294967295
 801b35a:	e05d      	b.n	801b418 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801b35c:	69bb      	ldr	r3, [r7, #24]
 801b35e:	895b      	ldrh	r3, [r3, #10]
 801b360:	2b1b      	cmp	r3, #27
 801b362:	d806      	bhi.n	801b372 <etharp_raw+0x56>
 801b364:	4b2e      	ldr	r3, [pc, #184]	@ (801b420 <etharp_raw+0x104>)
 801b366:	f240 4262 	movw	r2, #1122	@ 0x462
 801b36a:	4930      	ldr	r1, [pc, #192]	@ (801b42c <etharp_raw+0x110>)
 801b36c:	482e      	ldr	r0, [pc, #184]	@ (801b428 <etharp_raw+0x10c>)
 801b36e:	f002 ffb5 	bl	801e2dc <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801b372:	69bb      	ldr	r3, [r7, #24]
 801b374:	685b      	ldr	r3, [r3, #4]
 801b376:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801b378:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801b37a:	4618      	mov	r0, r3
 801b37c:	f7f4 f840 	bl	800f400 <lwip_htons>
 801b380:	4603      	mov	r3, r0
 801b382:	461a      	mov	r2, r3
 801b384:	697b      	ldr	r3, [r7, #20]
 801b386:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801b388:	68fb      	ldr	r3, [r7, #12]
 801b38a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b38e:	2b06      	cmp	r3, #6
 801b390:	d006      	beq.n	801b3a0 <etharp_raw+0x84>
 801b392:	4b23      	ldr	r3, [pc, #140]	@ (801b420 <etharp_raw+0x104>)
 801b394:	f240 4269 	movw	r2, #1129	@ 0x469
 801b398:	4925      	ldr	r1, [pc, #148]	@ (801b430 <etharp_raw+0x114>)
 801b39a:	4823      	ldr	r0, [pc, #140]	@ (801b428 <etharp_raw+0x10c>)
 801b39c:	f002 ff9e 	bl	801e2dc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801b3a0:	697b      	ldr	r3, [r7, #20]
 801b3a2:	3308      	adds	r3, #8
 801b3a4:	2206      	movs	r2, #6
 801b3a6:	6839      	ldr	r1, [r7, #0]
 801b3a8:	4618      	mov	r0, r3
 801b3aa:	f003 f938 	bl	801e61e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801b3ae:	697b      	ldr	r3, [r7, #20]
 801b3b0:	3312      	adds	r3, #18
 801b3b2:	2206      	movs	r2, #6
 801b3b4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b3b6:	4618      	mov	r0, r3
 801b3b8:	f003 f931 	bl	801e61e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801b3bc:	697b      	ldr	r3, [r7, #20]
 801b3be:	330e      	adds	r3, #14
 801b3c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b3c2:	6812      	ldr	r2, [r2, #0]
 801b3c4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801b3c6:	697b      	ldr	r3, [r7, #20]
 801b3c8:	3318      	adds	r3, #24
 801b3ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b3cc:	6812      	ldr	r2, [r2, #0]
 801b3ce:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801b3d0:	697b      	ldr	r3, [r7, #20]
 801b3d2:	2200      	movs	r2, #0
 801b3d4:	701a      	strb	r2, [r3, #0]
 801b3d6:	2200      	movs	r2, #0
 801b3d8:	f042 0201 	orr.w	r2, r2, #1
 801b3dc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b3de:	697b      	ldr	r3, [r7, #20]
 801b3e0:	2200      	movs	r2, #0
 801b3e2:	f042 0208 	orr.w	r2, r2, #8
 801b3e6:	709a      	strb	r2, [r3, #2]
 801b3e8:	2200      	movs	r2, #0
 801b3ea:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801b3ec:	697b      	ldr	r3, [r7, #20]
 801b3ee:	2206      	movs	r2, #6
 801b3f0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801b3f2:	697b      	ldr	r3, [r7, #20]
 801b3f4:	2204      	movs	r2, #4
 801b3f6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b3f8:	f640 0306 	movw	r3, #2054	@ 0x806
 801b3fc:	9300      	str	r3, [sp, #0]
 801b3fe:	687b      	ldr	r3, [r7, #4]
 801b400:	68ba      	ldr	r2, [r7, #8]
 801b402:	69b9      	ldr	r1, [r7, #24]
 801b404:	68f8      	ldr	r0, [r7, #12]
 801b406:	f001 fcc3 	bl	801cd90 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801b40a:	69b8      	ldr	r0, [r7, #24]
 801b40c:	f7f5 fee4 	bl	80111d8 <pbuf_free>
  p = NULL;
 801b410:	2300      	movs	r3, #0
 801b412:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801b414:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b418:	4618      	mov	r0, r3
 801b41a:	3720      	adds	r7, #32
 801b41c:	46bd      	mov	sp, r7
 801b41e:	bd80      	pop	{r7, pc}
 801b420:	080253a8 	.word	0x080253a8
 801b424:	080254f8 	.word	0x080254f8
 801b428:	08025420 	.word	0x08025420
 801b42c:	080255a8 	.word	0x080255a8
 801b430:	080255dc 	.word	0x080255dc

0801b434 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801b434:	b580      	push	{r7, lr}
 801b436:	b088      	sub	sp, #32
 801b438:	af04      	add	r7, sp, #16
 801b43a:	60f8      	str	r0, [r7, #12]
 801b43c:	60b9      	str	r1, [r7, #8]
 801b43e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b440:	68fb      	ldr	r3, [r7, #12]
 801b442:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801b44c:	68fb      	ldr	r3, [r7, #12]
 801b44e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b450:	2201      	movs	r2, #1
 801b452:	9203      	str	r2, [sp, #12]
 801b454:	68ba      	ldr	r2, [r7, #8]
 801b456:	9202      	str	r2, [sp, #8]
 801b458:	4a06      	ldr	r2, [pc, #24]	@ (801b474 <etharp_request_dst+0x40>)
 801b45a:	9201      	str	r2, [sp, #4]
 801b45c:	9300      	str	r3, [sp, #0]
 801b45e:	4603      	mov	r3, r0
 801b460:	687a      	ldr	r2, [r7, #4]
 801b462:	68f8      	ldr	r0, [r7, #12]
 801b464:	f7ff ff5a 	bl	801b31c <etharp_raw>
 801b468:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801b46a:	4618      	mov	r0, r3
 801b46c:	3710      	adds	r7, #16
 801b46e:	46bd      	mov	sp, r7
 801b470:	bd80      	pop	{r7, pc}
 801b472:	bf00      	nop
 801b474:	08025d80 	.word	0x08025d80

0801b478 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b478:	b580      	push	{r7, lr}
 801b47a:	b082      	sub	sp, #8
 801b47c:	af00      	add	r7, sp, #0
 801b47e:	6078      	str	r0, [r7, #4]
 801b480:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801b482:	4a05      	ldr	r2, [pc, #20]	@ (801b498 <etharp_request+0x20>)
 801b484:	6839      	ldr	r1, [r7, #0]
 801b486:	6878      	ldr	r0, [r7, #4]
 801b488:	f7ff ffd4 	bl	801b434 <etharp_request_dst>
 801b48c:	4603      	mov	r3, r0
}
 801b48e:	4618      	mov	r0, r3
 801b490:	3708      	adds	r7, #8
 801b492:	46bd      	mov	sp, r7
 801b494:	bd80      	pop	{r7, pc}
 801b496:	bf00      	nop
 801b498:	08025d78 	.word	0x08025d78

0801b49c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801b49c:	b580      	push	{r7, lr}
 801b49e:	b08e      	sub	sp, #56	@ 0x38
 801b4a0:	af04      	add	r7, sp, #16
 801b4a2:	6078      	str	r0, [r7, #4]
 801b4a4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801b4a6:	4b79      	ldr	r3, [pc, #484]	@ (801b68c <icmp_input+0x1f0>)
 801b4a8:	689b      	ldr	r3, [r3, #8]
 801b4aa:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801b4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b4ae:	781b      	ldrb	r3, [r3, #0]
 801b4b0:	f003 030f 	and.w	r3, r3, #15
 801b4b4:	b2db      	uxtb	r3, r3
 801b4b6:	009b      	lsls	r3, r3, #2
 801b4b8:	b2db      	uxtb	r3, r3
 801b4ba:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801b4bc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b4be:	2b13      	cmp	r3, #19
 801b4c0:	f240 80cd 	bls.w	801b65e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	895b      	ldrh	r3, [r3, #10]
 801b4c8:	2b03      	cmp	r3, #3
 801b4ca:	f240 80ca 	bls.w	801b662 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	685b      	ldr	r3, [r3, #4]
 801b4d2:	781b      	ldrb	r3, [r3, #0]
 801b4d4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801b4d8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	f000 80b7 	beq.w	801b650 <icmp_input+0x1b4>
 801b4e2:	2b08      	cmp	r3, #8
 801b4e4:	f040 80b7 	bne.w	801b656 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b4e8:	4b69      	ldr	r3, [pc, #420]	@ (801b690 <icmp_input+0x1f4>)
 801b4ea:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b4ec:	4b67      	ldr	r3, [pc, #412]	@ (801b68c <icmp_input+0x1f0>)
 801b4ee:	695b      	ldr	r3, [r3, #20]
 801b4f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b4f4:	2be0      	cmp	r3, #224	@ 0xe0
 801b4f6:	f000 80bb 	beq.w	801b670 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b4fa:	4b64      	ldr	r3, [pc, #400]	@ (801b68c <icmp_input+0x1f0>)
 801b4fc:	695b      	ldr	r3, [r3, #20]
 801b4fe:	4a63      	ldr	r2, [pc, #396]	@ (801b68c <icmp_input+0x1f0>)
 801b500:	6812      	ldr	r2, [r2, #0]
 801b502:	4611      	mov	r1, r2
 801b504:	4618      	mov	r0, r3
 801b506:	f000 fc0b 	bl	801bd20 <ip4_addr_isbroadcast_u32>
 801b50a:	4603      	mov	r3, r0
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	f040 80b1 	bne.w	801b674 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b512:	687b      	ldr	r3, [r7, #4]
 801b514:	891b      	ldrh	r3, [r3, #8]
 801b516:	2b07      	cmp	r3, #7
 801b518:	f240 80a5 	bls.w	801b666 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b51c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b51e:	330e      	adds	r3, #14
 801b520:	4619      	mov	r1, r3
 801b522:	6878      	ldr	r0, [r7, #4]
 801b524:	f7f5 fdc2 	bl	80110ac <pbuf_add_header>
 801b528:	4603      	mov	r3, r0
 801b52a:	2b00      	cmp	r3, #0
 801b52c:	d04b      	beq.n	801b5c6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	891a      	ldrh	r2, [r3, #8]
 801b532:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b534:	4413      	add	r3, r2
 801b536:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b538:	687b      	ldr	r3, [r7, #4]
 801b53a:	891b      	ldrh	r3, [r3, #8]
 801b53c:	8b7a      	ldrh	r2, [r7, #26]
 801b53e:	429a      	cmp	r2, r3
 801b540:	f0c0 809a 	bcc.w	801b678 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b544:	8b7b      	ldrh	r3, [r7, #26]
 801b546:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b54a:	4619      	mov	r1, r3
 801b54c:	200e      	movs	r0, #14
 801b54e:	f7f5 fb5f 	bl	8010c10 <pbuf_alloc>
 801b552:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b554:	697b      	ldr	r3, [r7, #20]
 801b556:	2b00      	cmp	r3, #0
 801b558:	f000 8090 	beq.w	801b67c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b55c:	697b      	ldr	r3, [r7, #20]
 801b55e:	895b      	ldrh	r3, [r3, #10]
 801b560:	461a      	mov	r2, r3
 801b562:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b564:	3308      	adds	r3, #8
 801b566:	429a      	cmp	r2, r3
 801b568:	d203      	bcs.n	801b572 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b56a:	6978      	ldr	r0, [r7, #20]
 801b56c:	f7f5 fe34 	bl	80111d8 <pbuf_free>
          goto icmperr;
 801b570:	e085      	b.n	801b67e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b572:	697b      	ldr	r3, [r7, #20]
 801b574:	685b      	ldr	r3, [r3, #4]
 801b576:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b578:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b57a:	4618      	mov	r0, r3
 801b57c:	f003 f84f 	bl	801e61e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b580:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b582:	4619      	mov	r1, r3
 801b584:	6978      	ldr	r0, [r7, #20]
 801b586:	f7f5 fda1 	bl	80110cc <pbuf_remove_header>
 801b58a:	4603      	mov	r3, r0
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d009      	beq.n	801b5a4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b590:	4b40      	ldr	r3, [pc, #256]	@ (801b694 <icmp_input+0x1f8>)
 801b592:	22b6      	movs	r2, #182	@ 0xb6
 801b594:	4940      	ldr	r1, [pc, #256]	@ (801b698 <icmp_input+0x1fc>)
 801b596:	4841      	ldr	r0, [pc, #260]	@ (801b69c <icmp_input+0x200>)
 801b598:	f002 fea0 	bl	801e2dc <iprintf>
          pbuf_free(r);
 801b59c:	6978      	ldr	r0, [r7, #20]
 801b59e:	f7f5 fe1b 	bl	80111d8 <pbuf_free>
          goto icmperr;
 801b5a2:	e06c      	b.n	801b67e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b5a4:	6879      	ldr	r1, [r7, #4]
 801b5a6:	6978      	ldr	r0, [r7, #20]
 801b5a8:	f7f5 ff4a 	bl	8011440 <pbuf_copy>
 801b5ac:	4603      	mov	r3, r0
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d003      	beq.n	801b5ba <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b5b2:	6978      	ldr	r0, [r7, #20]
 801b5b4:	f7f5 fe10 	bl	80111d8 <pbuf_free>
          goto icmperr;
 801b5b8:	e061      	b.n	801b67e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801b5ba:	6878      	ldr	r0, [r7, #4]
 801b5bc:	f7f5 fe0c 	bl	80111d8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b5c0:	697b      	ldr	r3, [r7, #20]
 801b5c2:	607b      	str	r3, [r7, #4]
 801b5c4:	e00f      	b.n	801b5e6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b5c6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b5c8:	330e      	adds	r3, #14
 801b5ca:	4619      	mov	r1, r3
 801b5cc:	6878      	ldr	r0, [r7, #4]
 801b5ce:	f7f5 fd7d 	bl	80110cc <pbuf_remove_header>
 801b5d2:	4603      	mov	r3, r0
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d006      	beq.n	801b5e6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b5d8:	4b2e      	ldr	r3, [pc, #184]	@ (801b694 <icmp_input+0x1f8>)
 801b5da:	22c7      	movs	r2, #199	@ 0xc7
 801b5dc:	4930      	ldr	r1, [pc, #192]	@ (801b6a0 <icmp_input+0x204>)
 801b5de:	482f      	ldr	r0, [pc, #188]	@ (801b69c <icmp_input+0x200>)
 801b5e0:	f002 fe7c 	bl	801e2dc <iprintf>
          goto icmperr;
 801b5e4:	e04b      	b.n	801b67e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b5e6:	687b      	ldr	r3, [r7, #4]
 801b5e8:	685b      	ldr	r3, [r3, #4]
 801b5ea:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b5ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b5ee:	4619      	mov	r1, r3
 801b5f0:	6878      	ldr	r0, [r7, #4]
 801b5f2:	f7f5 fd5b 	bl	80110ac <pbuf_add_header>
 801b5f6:	4603      	mov	r3, r0
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	d12b      	bne.n	801b654 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	685b      	ldr	r3, [r3, #4]
 801b600:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b602:	69fb      	ldr	r3, [r7, #28]
 801b604:	681a      	ldr	r2, [r3, #0]
 801b606:	68fb      	ldr	r3, [r7, #12]
 801b608:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b60a:	4b20      	ldr	r3, [pc, #128]	@ (801b68c <icmp_input+0x1f0>)
 801b60c:	691a      	ldr	r2, [r3, #16]
 801b60e:	68fb      	ldr	r3, [r7, #12]
 801b610:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b612:	693b      	ldr	r3, [r7, #16]
 801b614:	2200      	movs	r2, #0
 801b616:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801b618:	693b      	ldr	r3, [r7, #16]
 801b61a:	2200      	movs	r2, #0
 801b61c:	709a      	strb	r2, [r3, #2]
 801b61e:	2200      	movs	r2, #0
 801b620:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b622:	68fb      	ldr	r3, [r7, #12]
 801b624:	22ff      	movs	r2, #255	@ 0xff
 801b626:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b628:	68fb      	ldr	r3, [r7, #12]
 801b62a:	2200      	movs	r2, #0
 801b62c:	729a      	strb	r2, [r3, #10]
 801b62e:	2200      	movs	r2, #0
 801b630:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b632:	683b      	ldr	r3, [r7, #0]
 801b634:	9302      	str	r3, [sp, #8]
 801b636:	2301      	movs	r3, #1
 801b638:	9301      	str	r3, [sp, #4]
 801b63a:	2300      	movs	r3, #0
 801b63c:	9300      	str	r3, [sp, #0]
 801b63e:	23ff      	movs	r3, #255	@ 0xff
 801b640:	2200      	movs	r2, #0
 801b642:	69f9      	ldr	r1, [r7, #28]
 801b644:	6878      	ldr	r0, [r7, #4]
 801b646:	f000 fa93 	bl	801bb70 <ip4_output_if>
 801b64a:	4603      	mov	r3, r0
 801b64c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b64e:	e001      	b.n	801b654 <icmp_input+0x1b8>
      break;
 801b650:	bf00      	nop
 801b652:	e000      	b.n	801b656 <icmp_input+0x1ba>
      break;
 801b654:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b656:	6878      	ldr	r0, [r7, #4]
 801b658:	f7f5 fdbe 	bl	80111d8 <pbuf_free>
  return;
 801b65c:	e013      	b.n	801b686 <icmp_input+0x1ea>
    goto lenerr;
 801b65e:	bf00      	nop
 801b660:	e002      	b.n	801b668 <icmp_input+0x1cc>
    goto lenerr;
 801b662:	bf00      	nop
 801b664:	e000      	b.n	801b668 <icmp_input+0x1cc>
        goto lenerr;
 801b666:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b668:	6878      	ldr	r0, [r7, #4]
 801b66a:	f7f5 fdb5 	bl	80111d8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b66e:	e00a      	b.n	801b686 <icmp_input+0x1ea>
        goto icmperr;
 801b670:	bf00      	nop
 801b672:	e004      	b.n	801b67e <icmp_input+0x1e2>
        goto icmperr;
 801b674:	bf00      	nop
 801b676:	e002      	b.n	801b67e <icmp_input+0x1e2>
          goto icmperr;
 801b678:	bf00      	nop
 801b67a:	e000      	b.n	801b67e <icmp_input+0x1e2>
          goto icmperr;
 801b67c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b67e:	6878      	ldr	r0, [r7, #4]
 801b680:	f7f5 fdaa 	bl	80111d8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b684:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b686:	3728      	adds	r7, #40	@ 0x28
 801b688:	46bd      	mov	sp, r7
 801b68a:	bd80      	pop	{r7, pc}
 801b68c:	2000edb0 	.word	0x2000edb0
 801b690:	2000edc4 	.word	0x2000edc4
 801b694:	08025620 	.word	0x08025620
 801b698:	08025658 	.word	0x08025658
 801b69c:	08025690 	.word	0x08025690
 801b6a0:	080256b8 	.word	0x080256b8

0801b6a4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b6a4:	b580      	push	{r7, lr}
 801b6a6:	b082      	sub	sp, #8
 801b6a8:	af00      	add	r7, sp, #0
 801b6aa:	6078      	str	r0, [r7, #4]
 801b6ac:	460b      	mov	r3, r1
 801b6ae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b6b0:	78fb      	ldrb	r3, [r7, #3]
 801b6b2:	461a      	mov	r2, r3
 801b6b4:	2103      	movs	r1, #3
 801b6b6:	6878      	ldr	r0, [r7, #4]
 801b6b8:	f000 f814 	bl	801b6e4 <icmp_send_response>
}
 801b6bc:	bf00      	nop
 801b6be:	3708      	adds	r7, #8
 801b6c0:	46bd      	mov	sp, r7
 801b6c2:	bd80      	pop	{r7, pc}

0801b6c4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b6c4:	b580      	push	{r7, lr}
 801b6c6:	b082      	sub	sp, #8
 801b6c8:	af00      	add	r7, sp, #0
 801b6ca:	6078      	str	r0, [r7, #4]
 801b6cc:	460b      	mov	r3, r1
 801b6ce:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b6d0:	78fb      	ldrb	r3, [r7, #3]
 801b6d2:	461a      	mov	r2, r3
 801b6d4:	210b      	movs	r1, #11
 801b6d6:	6878      	ldr	r0, [r7, #4]
 801b6d8:	f000 f804 	bl	801b6e4 <icmp_send_response>
}
 801b6dc:	bf00      	nop
 801b6de:	3708      	adds	r7, #8
 801b6e0:	46bd      	mov	sp, r7
 801b6e2:	bd80      	pop	{r7, pc}

0801b6e4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b6e4:	b580      	push	{r7, lr}
 801b6e6:	b08c      	sub	sp, #48	@ 0x30
 801b6e8:	af04      	add	r7, sp, #16
 801b6ea:	6078      	str	r0, [r7, #4]
 801b6ec:	460b      	mov	r3, r1
 801b6ee:	70fb      	strb	r3, [r7, #3]
 801b6f0:	4613      	mov	r3, r2
 801b6f2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b6f4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b6f8:	2124      	movs	r1, #36	@ 0x24
 801b6fa:	2022      	movs	r0, #34	@ 0x22
 801b6fc:	f7f5 fa88 	bl	8010c10 <pbuf_alloc>
 801b700:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b702:	69fb      	ldr	r3, [r7, #28]
 801b704:	2b00      	cmp	r3, #0
 801b706:	d04c      	beq.n	801b7a2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b708:	69fb      	ldr	r3, [r7, #28]
 801b70a:	895b      	ldrh	r3, [r3, #10]
 801b70c:	2b23      	cmp	r3, #35	@ 0x23
 801b70e:	d806      	bhi.n	801b71e <icmp_send_response+0x3a>
 801b710:	4b26      	ldr	r3, [pc, #152]	@ (801b7ac <icmp_send_response+0xc8>)
 801b712:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801b716:	4926      	ldr	r1, [pc, #152]	@ (801b7b0 <icmp_send_response+0xcc>)
 801b718:	4826      	ldr	r0, [pc, #152]	@ (801b7b4 <icmp_send_response+0xd0>)
 801b71a:	f002 fddf 	bl	801e2dc <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	685b      	ldr	r3, [r3, #4]
 801b722:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b724:	69fb      	ldr	r3, [r7, #28]
 801b726:	685b      	ldr	r3, [r3, #4]
 801b728:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b72a:	697b      	ldr	r3, [r7, #20]
 801b72c:	78fa      	ldrb	r2, [r7, #3]
 801b72e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b730:	697b      	ldr	r3, [r7, #20]
 801b732:	78ba      	ldrb	r2, [r7, #2]
 801b734:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b736:	697b      	ldr	r3, [r7, #20]
 801b738:	2200      	movs	r2, #0
 801b73a:	711a      	strb	r2, [r3, #4]
 801b73c:	2200      	movs	r2, #0
 801b73e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b740:	697b      	ldr	r3, [r7, #20]
 801b742:	2200      	movs	r2, #0
 801b744:	719a      	strb	r2, [r3, #6]
 801b746:	2200      	movs	r2, #0
 801b748:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b74a:	69fb      	ldr	r3, [r7, #28]
 801b74c:	685b      	ldr	r3, [r3, #4]
 801b74e:	f103 0008 	add.w	r0, r3, #8
 801b752:	687b      	ldr	r3, [r7, #4]
 801b754:	685b      	ldr	r3, [r3, #4]
 801b756:	221c      	movs	r2, #28
 801b758:	4619      	mov	r1, r3
 801b75a:	f002 ff60 	bl	801e61e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b75e:	69bb      	ldr	r3, [r7, #24]
 801b760:	68db      	ldr	r3, [r3, #12]
 801b762:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b764:	f107 030c 	add.w	r3, r7, #12
 801b768:	4618      	mov	r0, r3
 801b76a:	f000 f825 	bl	801b7b8 <ip4_route>
 801b76e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b770:	693b      	ldr	r3, [r7, #16]
 801b772:	2b00      	cmp	r3, #0
 801b774:	d011      	beq.n	801b79a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b776:	697b      	ldr	r3, [r7, #20]
 801b778:	2200      	movs	r2, #0
 801b77a:	709a      	strb	r2, [r3, #2]
 801b77c:	2200      	movs	r2, #0
 801b77e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b780:	f107 020c 	add.w	r2, r7, #12
 801b784:	693b      	ldr	r3, [r7, #16]
 801b786:	9302      	str	r3, [sp, #8]
 801b788:	2301      	movs	r3, #1
 801b78a:	9301      	str	r3, [sp, #4]
 801b78c:	2300      	movs	r3, #0
 801b78e:	9300      	str	r3, [sp, #0]
 801b790:	23ff      	movs	r3, #255	@ 0xff
 801b792:	2100      	movs	r1, #0
 801b794:	69f8      	ldr	r0, [r7, #28]
 801b796:	f000 f9eb 	bl	801bb70 <ip4_output_if>
  }
  pbuf_free(q);
 801b79a:	69f8      	ldr	r0, [r7, #28]
 801b79c:	f7f5 fd1c 	bl	80111d8 <pbuf_free>
 801b7a0:	e000      	b.n	801b7a4 <icmp_send_response+0xc0>
    return;
 801b7a2:	bf00      	nop
}
 801b7a4:	3720      	adds	r7, #32
 801b7a6:	46bd      	mov	sp, r7
 801b7a8:	bd80      	pop	{r7, pc}
 801b7aa:	bf00      	nop
 801b7ac:	08025620 	.word	0x08025620
 801b7b0:	080256ec 	.word	0x080256ec
 801b7b4:	08025690 	.word	0x08025690

0801b7b8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b7b8:	b480      	push	{r7}
 801b7ba:	b085      	sub	sp, #20
 801b7bc:	af00      	add	r7, sp, #0
 801b7be:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b7c0:	4b33      	ldr	r3, [pc, #204]	@ (801b890 <ip4_route+0xd8>)
 801b7c2:	681b      	ldr	r3, [r3, #0]
 801b7c4:	60fb      	str	r3, [r7, #12]
 801b7c6:	e036      	b.n	801b836 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b7c8:	68fb      	ldr	r3, [r7, #12]
 801b7ca:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b7ce:	f003 0301 	and.w	r3, r3, #1
 801b7d2:	b2db      	uxtb	r3, r3
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	d02b      	beq.n	801b830 <ip4_route+0x78>
 801b7d8:	68fb      	ldr	r3, [r7, #12]
 801b7da:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b7de:	089b      	lsrs	r3, r3, #2
 801b7e0:	f003 0301 	and.w	r3, r3, #1
 801b7e4:	b2db      	uxtb	r3, r3
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d022      	beq.n	801b830 <ip4_route+0x78>
 801b7ea:	68fb      	ldr	r3, [r7, #12]
 801b7ec:	3304      	adds	r3, #4
 801b7ee:	681b      	ldr	r3, [r3, #0]
 801b7f0:	2b00      	cmp	r3, #0
 801b7f2:	d01d      	beq.n	801b830 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b7f4:	687b      	ldr	r3, [r7, #4]
 801b7f6:	681a      	ldr	r2, [r3, #0]
 801b7f8:	68fb      	ldr	r3, [r7, #12]
 801b7fa:	3304      	adds	r3, #4
 801b7fc:	681b      	ldr	r3, [r3, #0]
 801b7fe:	405a      	eors	r2, r3
 801b800:	68fb      	ldr	r3, [r7, #12]
 801b802:	3308      	adds	r3, #8
 801b804:	681b      	ldr	r3, [r3, #0]
 801b806:	4013      	ands	r3, r2
 801b808:	2b00      	cmp	r3, #0
 801b80a:	d101      	bne.n	801b810 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b80c:	68fb      	ldr	r3, [r7, #12]
 801b80e:	e038      	b.n	801b882 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b810:	68fb      	ldr	r3, [r7, #12]
 801b812:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b816:	f003 0302 	and.w	r3, r3, #2
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d108      	bne.n	801b830 <ip4_route+0x78>
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	681a      	ldr	r2, [r3, #0]
 801b822:	68fb      	ldr	r3, [r7, #12]
 801b824:	330c      	adds	r3, #12
 801b826:	681b      	ldr	r3, [r3, #0]
 801b828:	429a      	cmp	r2, r3
 801b82a:	d101      	bne.n	801b830 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b82c:	68fb      	ldr	r3, [r7, #12]
 801b82e:	e028      	b.n	801b882 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b830:	68fb      	ldr	r3, [r7, #12]
 801b832:	681b      	ldr	r3, [r3, #0]
 801b834:	60fb      	str	r3, [r7, #12]
 801b836:	68fb      	ldr	r3, [r7, #12]
 801b838:	2b00      	cmp	r3, #0
 801b83a:	d1c5      	bne.n	801b7c8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b83c:	4b15      	ldr	r3, [pc, #84]	@ (801b894 <ip4_route+0xdc>)
 801b83e:	681b      	ldr	r3, [r3, #0]
 801b840:	2b00      	cmp	r3, #0
 801b842:	d01a      	beq.n	801b87a <ip4_route+0xc2>
 801b844:	4b13      	ldr	r3, [pc, #76]	@ (801b894 <ip4_route+0xdc>)
 801b846:	681b      	ldr	r3, [r3, #0]
 801b848:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b84c:	f003 0301 	and.w	r3, r3, #1
 801b850:	2b00      	cmp	r3, #0
 801b852:	d012      	beq.n	801b87a <ip4_route+0xc2>
 801b854:	4b0f      	ldr	r3, [pc, #60]	@ (801b894 <ip4_route+0xdc>)
 801b856:	681b      	ldr	r3, [r3, #0]
 801b858:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b85c:	f003 0304 	and.w	r3, r3, #4
 801b860:	2b00      	cmp	r3, #0
 801b862:	d00a      	beq.n	801b87a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b864:	4b0b      	ldr	r3, [pc, #44]	@ (801b894 <ip4_route+0xdc>)
 801b866:	681b      	ldr	r3, [r3, #0]
 801b868:	3304      	adds	r3, #4
 801b86a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	d004      	beq.n	801b87a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b870:	687b      	ldr	r3, [r7, #4]
 801b872:	681b      	ldr	r3, [r3, #0]
 801b874:	b2db      	uxtb	r3, r3
 801b876:	2b7f      	cmp	r3, #127	@ 0x7f
 801b878:	d101      	bne.n	801b87e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b87a:	2300      	movs	r3, #0
 801b87c:	e001      	b.n	801b882 <ip4_route+0xca>
  }

  return netif_default;
 801b87e:	4b05      	ldr	r3, [pc, #20]	@ (801b894 <ip4_route+0xdc>)
 801b880:	681b      	ldr	r3, [r3, #0]
}
 801b882:	4618      	mov	r0, r3
 801b884:	3714      	adds	r7, #20
 801b886:	46bd      	mov	sp, r7
 801b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b88c:	4770      	bx	lr
 801b88e:	bf00      	nop
 801b890:	20012664 	.word	0x20012664
 801b894:	20012668 	.word	0x20012668

0801b898 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b898:	b580      	push	{r7, lr}
 801b89a:	b082      	sub	sp, #8
 801b89c:	af00      	add	r7, sp, #0
 801b89e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b8a6:	f003 0301 	and.w	r3, r3, #1
 801b8aa:	b2db      	uxtb	r3, r3
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d016      	beq.n	801b8de <ip4_input_accept+0x46>
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	3304      	adds	r3, #4
 801b8b4:	681b      	ldr	r3, [r3, #0]
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	d011      	beq.n	801b8de <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b8ba:	4b0b      	ldr	r3, [pc, #44]	@ (801b8e8 <ip4_input_accept+0x50>)
 801b8bc:	695a      	ldr	r2, [r3, #20]
 801b8be:	687b      	ldr	r3, [r7, #4]
 801b8c0:	3304      	adds	r3, #4
 801b8c2:	681b      	ldr	r3, [r3, #0]
 801b8c4:	429a      	cmp	r2, r3
 801b8c6:	d008      	beq.n	801b8da <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b8c8:	4b07      	ldr	r3, [pc, #28]	@ (801b8e8 <ip4_input_accept+0x50>)
 801b8ca:	695b      	ldr	r3, [r3, #20]
 801b8cc:	6879      	ldr	r1, [r7, #4]
 801b8ce:	4618      	mov	r0, r3
 801b8d0:	f000 fa26 	bl	801bd20 <ip4_addr_isbroadcast_u32>
 801b8d4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d001      	beq.n	801b8de <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b8da:	2301      	movs	r3, #1
 801b8dc:	e000      	b.n	801b8e0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b8de:	2300      	movs	r3, #0
}
 801b8e0:	4618      	mov	r0, r3
 801b8e2:	3708      	adds	r7, #8
 801b8e4:	46bd      	mov	sp, r7
 801b8e6:	bd80      	pop	{r7, pc}
 801b8e8:	2000edb0 	.word	0x2000edb0

0801b8ec <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b8ec:	b580      	push	{r7, lr}
 801b8ee:	b088      	sub	sp, #32
 801b8f0:	af00      	add	r7, sp, #0
 801b8f2:	6078      	str	r0, [r7, #4]
 801b8f4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801b8f6:	2301      	movs	r3, #1
 801b8f8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	685b      	ldr	r3, [r3, #4]
 801b8fe:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801b900:	69fb      	ldr	r3, [r7, #28]
 801b902:	781b      	ldrb	r3, [r3, #0]
 801b904:	091b      	lsrs	r3, r3, #4
 801b906:	b2db      	uxtb	r3, r3
 801b908:	2b04      	cmp	r3, #4
 801b90a:	d004      	beq.n	801b916 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b90c:	6878      	ldr	r0, [r7, #4]
 801b90e:	f7f5 fc63 	bl	80111d8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b912:	2300      	movs	r3, #0
 801b914:	e123      	b.n	801bb5e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b916:	69fb      	ldr	r3, [r7, #28]
 801b918:	781b      	ldrb	r3, [r3, #0]
 801b91a:	f003 030f 	and.w	r3, r3, #15
 801b91e:	b2db      	uxtb	r3, r3
 801b920:	009b      	lsls	r3, r3, #2
 801b922:	b2db      	uxtb	r3, r3
 801b924:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b926:	69fb      	ldr	r3, [r7, #28]
 801b928:	885b      	ldrh	r3, [r3, #2]
 801b92a:	b29b      	uxth	r3, r3
 801b92c:	4618      	mov	r0, r3
 801b92e:	f7f3 fd67 	bl	800f400 <lwip_htons>
 801b932:	4603      	mov	r3, r0
 801b934:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	891b      	ldrh	r3, [r3, #8]
 801b93a:	8a3a      	ldrh	r2, [r7, #16]
 801b93c:	429a      	cmp	r2, r3
 801b93e:	d204      	bcs.n	801b94a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801b940:	8a3b      	ldrh	r3, [r7, #16]
 801b942:	4619      	mov	r1, r3
 801b944:	6878      	ldr	r0, [r7, #4]
 801b946:	f7f5 fac1 	bl	8010ecc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	895b      	ldrh	r3, [r3, #10]
 801b94e:	8a7a      	ldrh	r2, [r7, #18]
 801b950:	429a      	cmp	r2, r3
 801b952:	d807      	bhi.n	801b964 <ip4_input+0x78>
 801b954:	687b      	ldr	r3, [r7, #4]
 801b956:	891b      	ldrh	r3, [r3, #8]
 801b958:	8a3a      	ldrh	r2, [r7, #16]
 801b95a:	429a      	cmp	r2, r3
 801b95c:	d802      	bhi.n	801b964 <ip4_input+0x78>
 801b95e:	8a7b      	ldrh	r3, [r7, #18]
 801b960:	2b13      	cmp	r3, #19
 801b962:	d804      	bhi.n	801b96e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b964:	6878      	ldr	r0, [r7, #4]
 801b966:	f7f5 fc37 	bl	80111d8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b96a:	2300      	movs	r3, #0
 801b96c:	e0f7      	b.n	801bb5e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b96e:	69fb      	ldr	r3, [r7, #28]
 801b970:	691b      	ldr	r3, [r3, #16]
 801b972:	4a7d      	ldr	r2, [pc, #500]	@ (801bb68 <ip4_input+0x27c>)
 801b974:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b976:	69fb      	ldr	r3, [r7, #28]
 801b978:	68db      	ldr	r3, [r3, #12]
 801b97a:	4a7b      	ldr	r2, [pc, #492]	@ (801bb68 <ip4_input+0x27c>)
 801b97c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b97e:	4b7a      	ldr	r3, [pc, #488]	@ (801bb68 <ip4_input+0x27c>)
 801b980:	695b      	ldr	r3, [r3, #20]
 801b982:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b986:	2be0      	cmp	r3, #224	@ 0xe0
 801b988:	d112      	bne.n	801b9b0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b98a:	683b      	ldr	r3, [r7, #0]
 801b98c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b990:	f003 0301 	and.w	r3, r3, #1
 801b994:	b2db      	uxtb	r3, r3
 801b996:	2b00      	cmp	r3, #0
 801b998:	d007      	beq.n	801b9aa <ip4_input+0xbe>
 801b99a:	683b      	ldr	r3, [r7, #0]
 801b99c:	3304      	adds	r3, #4
 801b99e:	681b      	ldr	r3, [r3, #0]
 801b9a0:	2b00      	cmp	r3, #0
 801b9a2:	d002      	beq.n	801b9aa <ip4_input+0xbe>
      netif = inp;
 801b9a4:	683b      	ldr	r3, [r7, #0]
 801b9a6:	61bb      	str	r3, [r7, #24]
 801b9a8:	e02a      	b.n	801ba00 <ip4_input+0x114>
    } else {
      netif = NULL;
 801b9aa:	2300      	movs	r3, #0
 801b9ac:	61bb      	str	r3, [r7, #24]
 801b9ae:	e027      	b.n	801ba00 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b9b0:	6838      	ldr	r0, [r7, #0]
 801b9b2:	f7ff ff71 	bl	801b898 <ip4_input_accept>
 801b9b6:	4603      	mov	r3, r0
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d002      	beq.n	801b9c2 <ip4_input+0xd6>
      netif = inp;
 801b9bc:	683b      	ldr	r3, [r7, #0]
 801b9be:	61bb      	str	r3, [r7, #24]
 801b9c0:	e01e      	b.n	801ba00 <ip4_input+0x114>
    } else {
      netif = NULL;
 801b9c2:	2300      	movs	r3, #0
 801b9c4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b9c6:	4b68      	ldr	r3, [pc, #416]	@ (801bb68 <ip4_input+0x27c>)
 801b9c8:	695b      	ldr	r3, [r3, #20]
 801b9ca:	b2db      	uxtb	r3, r3
 801b9cc:	2b7f      	cmp	r3, #127	@ 0x7f
 801b9ce:	d017      	beq.n	801ba00 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b9d0:	4b66      	ldr	r3, [pc, #408]	@ (801bb6c <ip4_input+0x280>)
 801b9d2:	681b      	ldr	r3, [r3, #0]
 801b9d4:	61bb      	str	r3, [r7, #24]
 801b9d6:	e00e      	b.n	801b9f6 <ip4_input+0x10a>
          if (netif == inp) {
 801b9d8:	69ba      	ldr	r2, [r7, #24]
 801b9da:	683b      	ldr	r3, [r7, #0]
 801b9dc:	429a      	cmp	r2, r3
 801b9de:	d006      	beq.n	801b9ee <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b9e0:	69b8      	ldr	r0, [r7, #24]
 801b9e2:	f7ff ff59 	bl	801b898 <ip4_input_accept>
 801b9e6:	4603      	mov	r3, r0
 801b9e8:	2b00      	cmp	r3, #0
 801b9ea:	d108      	bne.n	801b9fe <ip4_input+0x112>
 801b9ec:	e000      	b.n	801b9f0 <ip4_input+0x104>
            continue;
 801b9ee:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b9f0:	69bb      	ldr	r3, [r7, #24]
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	61bb      	str	r3, [r7, #24]
 801b9f6:	69bb      	ldr	r3, [r7, #24]
 801b9f8:	2b00      	cmp	r3, #0
 801b9fa:	d1ed      	bne.n	801b9d8 <ip4_input+0xec>
 801b9fc:	e000      	b.n	801ba00 <ip4_input+0x114>
            break;
 801b9fe:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801ba00:	69bb      	ldr	r3, [r7, #24]
 801ba02:	2b00      	cmp	r3, #0
 801ba04:	d111      	bne.n	801ba2a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801ba06:	69fb      	ldr	r3, [r7, #28]
 801ba08:	7a5b      	ldrb	r3, [r3, #9]
 801ba0a:	2b11      	cmp	r3, #17
 801ba0c:	d10d      	bne.n	801ba2a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801ba0e:	8a7b      	ldrh	r3, [r7, #18]
 801ba10:	69fa      	ldr	r2, [r7, #28]
 801ba12:	4413      	add	r3, r2
 801ba14:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801ba16:	68fb      	ldr	r3, [r7, #12]
 801ba18:	885b      	ldrh	r3, [r3, #2]
 801ba1a:	b29b      	uxth	r3, r3
 801ba1c:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801ba20:	d103      	bne.n	801ba2a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801ba22:	683b      	ldr	r3, [r7, #0]
 801ba24:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801ba26:	2300      	movs	r3, #0
 801ba28:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801ba2a:	697b      	ldr	r3, [r7, #20]
 801ba2c:	2b00      	cmp	r3, #0
 801ba2e:	d017      	beq.n	801ba60 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801ba30:	4b4d      	ldr	r3, [pc, #308]	@ (801bb68 <ip4_input+0x27c>)
 801ba32:	691b      	ldr	r3, [r3, #16]
 801ba34:	2b00      	cmp	r3, #0
 801ba36:	d013      	beq.n	801ba60 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ba38:	4b4b      	ldr	r3, [pc, #300]	@ (801bb68 <ip4_input+0x27c>)
 801ba3a:	691b      	ldr	r3, [r3, #16]
 801ba3c:	6839      	ldr	r1, [r7, #0]
 801ba3e:	4618      	mov	r0, r3
 801ba40:	f000 f96e 	bl	801bd20 <ip4_addr_isbroadcast_u32>
 801ba44:	4603      	mov	r3, r0
 801ba46:	2b00      	cmp	r3, #0
 801ba48:	d105      	bne.n	801ba56 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801ba4a:	4b47      	ldr	r3, [pc, #284]	@ (801bb68 <ip4_input+0x27c>)
 801ba4c:	691b      	ldr	r3, [r3, #16]
 801ba4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ba52:	2be0      	cmp	r3, #224	@ 0xe0
 801ba54:	d104      	bne.n	801ba60 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801ba56:	6878      	ldr	r0, [r7, #4]
 801ba58:	f7f5 fbbe 	bl	80111d8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801ba5c:	2300      	movs	r3, #0
 801ba5e:	e07e      	b.n	801bb5e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801ba60:	69bb      	ldr	r3, [r7, #24]
 801ba62:	2b00      	cmp	r3, #0
 801ba64:	d104      	bne.n	801ba70 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801ba66:	6878      	ldr	r0, [r7, #4]
 801ba68:	f7f5 fbb6 	bl	80111d8 <pbuf_free>
    return ERR_OK;
 801ba6c:	2300      	movs	r3, #0
 801ba6e:	e076      	b.n	801bb5e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801ba70:	69fb      	ldr	r3, [r7, #28]
 801ba72:	88db      	ldrh	r3, [r3, #6]
 801ba74:	b29b      	uxth	r3, r3
 801ba76:	461a      	mov	r2, r3
 801ba78:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801ba7c:	4013      	ands	r3, r2
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	d00b      	beq.n	801ba9a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801ba82:	6878      	ldr	r0, [r7, #4]
 801ba84:	f000 fdbc 	bl	801c600 <ip4_reass>
 801ba88:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801ba8a:	687b      	ldr	r3, [r7, #4]
 801ba8c:	2b00      	cmp	r3, #0
 801ba8e:	d101      	bne.n	801ba94 <ip4_input+0x1a8>
      return ERR_OK;
 801ba90:	2300      	movs	r3, #0
 801ba92:	e064      	b.n	801bb5e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	685b      	ldr	r3, [r3, #4]
 801ba98:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801ba9a:	4a33      	ldr	r2, [pc, #204]	@ (801bb68 <ip4_input+0x27c>)
 801ba9c:	69bb      	ldr	r3, [r7, #24]
 801ba9e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801baa0:	4a31      	ldr	r2, [pc, #196]	@ (801bb68 <ip4_input+0x27c>)
 801baa2:	683b      	ldr	r3, [r7, #0]
 801baa4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801baa6:	4a30      	ldr	r2, [pc, #192]	@ (801bb68 <ip4_input+0x27c>)
 801baa8:	69fb      	ldr	r3, [r7, #28]
 801baaa:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801baac:	69fb      	ldr	r3, [r7, #28]
 801baae:	781b      	ldrb	r3, [r3, #0]
 801bab0:	f003 030f 	and.w	r3, r3, #15
 801bab4:	b2db      	uxtb	r3, r3
 801bab6:	009b      	lsls	r3, r3, #2
 801bab8:	b2db      	uxtb	r3, r3
 801baba:	461a      	mov	r2, r3
 801babc:	4b2a      	ldr	r3, [pc, #168]	@ (801bb68 <ip4_input+0x27c>)
 801babe:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801bac0:	8a7b      	ldrh	r3, [r7, #18]
 801bac2:	4619      	mov	r1, r3
 801bac4:	6878      	ldr	r0, [r7, #4]
 801bac6:	f7f5 fb01 	bl	80110cc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801baca:	69fb      	ldr	r3, [r7, #28]
 801bacc:	7a5b      	ldrb	r3, [r3, #9]
 801bace:	2b11      	cmp	r3, #17
 801bad0:	d006      	beq.n	801bae0 <ip4_input+0x1f4>
 801bad2:	2b11      	cmp	r3, #17
 801bad4:	dc13      	bgt.n	801bafe <ip4_input+0x212>
 801bad6:	2b01      	cmp	r3, #1
 801bad8:	d00c      	beq.n	801baf4 <ip4_input+0x208>
 801bada:	2b06      	cmp	r3, #6
 801badc:	d005      	beq.n	801baea <ip4_input+0x1fe>
 801bade:	e00e      	b.n	801bafe <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801bae0:	6839      	ldr	r1, [r7, #0]
 801bae2:	6878      	ldr	r0, [r7, #4]
 801bae4:	f7fc f9dc 	bl	8017ea0 <udp_input>
        break;
 801bae8:	e026      	b.n	801bb38 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801baea:	6839      	ldr	r1, [r7, #0]
 801baec:	6878      	ldr	r0, [r7, #4]
 801baee:	f7f7 fd9b 	bl	8013628 <tcp_input>
        break;
 801baf2:	e021      	b.n	801bb38 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801baf4:	6839      	ldr	r1, [r7, #0]
 801baf6:	6878      	ldr	r0, [r7, #4]
 801baf8:	f7ff fcd0 	bl	801b49c <icmp_input>
        break;
 801bafc:	e01c      	b.n	801bb38 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bafe:	4b1a      	ldr	r3, [pc, #104]	@ (801bb68 <ip4_input+0x27c>)
 801bb00:	695b      	ldr	r3, [r3, #20]
 801bb02:	69b9      	ldr	r1, [r7, #24]
 801bb04:	4618      	mov	r0, r3
 801bb06:	f000 f90b 	bl	801bd20 <ip4_addr_isbroadcast_u32>
 801bb0a:	4603      	mov	r3, r0
 801bb0c:	2b00      	cmp	r3, #0
 801bb0e:	d10f      	bne.n	801bb30 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bb10:	4b15      	ldr	r3, [pc, #84]	@ (801bb68 <ip4_input+0x27c>)
 801bb12:	695b      	ldr	r3, [r3, #20]
 801bb14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801bb18:	2be0      	cmp	r3, #224	@ 0xe0
 801bb1a:	d009      	beq.n	801bb30 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801bb1c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801bb20:	4619      	mov	r1, r3
 801bb22:	6878      	ldr	r0, [r7, #4]
 801bb24:	f7f5 fb45 	bl	80111b2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801bb28:	2102      	movs	r1, #2
 801bb2a:	6878      	ldr	r0, [r7, #4]
 801bb2c:	f7ff fdba 	bl	801b6a4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801bb30:	6878      	ldr	r0, [r7, #4]
 801bb32:	f7f5 fb51 	bl	80111d8 <pbuf_free>
        break;
 801bb36:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801bb38:	4b0b      	ldr	r3, [pc, #44]	@ (801bb68 <ip4_input+0x27c>)
 801bb3a:	2200      	movs	r2, #0
 801bb3c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801bb3e:	4b0a      	ldr	r3, [pc, #40]	@ (801bb68 <ip4_input+0x27c>)
 801bb40:	2200      	movs	r2, #0
 801bb42:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801bb44:	4b08      	ldr	r3, [pc, #32]	@ (801bb68 <ip4_input+0x27c>)
 801bb46:	2200      	movs	r2, #0
 801bb48:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801bb4a:	4b07      	ldr	r3, [pc, #28]	@ (801bb68 <ip4_input+0x27c>)
 801bb4c:	2200      	movs	r2, #0
 801bb4e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801bb50:	4b05      	ldr	r3, [pc, #20]	@ (801bb68 <ip4_input+0x27c>)
 801bb52:	2200      	movs	r2, #0
 801bb54:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801bb56:	4b04      	ldr	r3, [pc, #16]	@ (801bb68 <ip4_input+0x27c>)
 801bb58:	2200      	movs	r2, #0
 801bb5a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801bb5c:	2300      	movs	r3, #0
}
 801bb5e:	4618      	mov	r0, r3
 801bb60:	3720      	adds	r7, #32
 801bb62:	46bd      	mov	sp, r7
 801bb64:	bd80      	pop	{r7, pc}
 801bb66:	bf00      	nop
 801bb68:	2000edb0 	.word	0x2000edb0
 801bb6c:	20012664 	.word	0x20012664

0801bb70 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801bb70:	b580      	push	{r7, lr}
 801bb72:	b08a      	sub	sp, #40	@ 0x28
 801bb74:	af04      	add	r7, sp, #16
 801bb76:	60f8      	str	r0, [r7, #12]
 801bb78:	60b9      	str	r1, [r7, #8]
 801bb7a:	607a      	str	r2, [r7, #4]
 801bb7c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801bb7e:	68bb      	ldr	r3, [r7, #8]
 801bb80:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	2b00      	cmp	r3, #0
 801bb86:	d009      	beq.n	801bb9c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801bb88:	68bb      	ldr	r3, [r7, #8]
 801bb8a:	2b00      	cmp	r3, #0
 801bb8c:	d003      	beq.n	801bb96 <ip4_output_if+0x26>
 801bb8e:	68bb      	ldr	r3, [r7, #8]
 801bb90:	681b      	ldr	r3, [r3, #0]
 801bb92:	2b00      	cmp	r3, #0
 801bb94:	d102      	bne.n	801bb9c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801bb96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bb98:	3304      	adds	r3, #4
 801bb9a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801bb9c:	78fa      	ldrb	r2, [r7, #3]
 801bb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bba0:	9302      	str	r3, [sp, #8]
 801bba2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801bba6:	9301      	str	r3, [sp, #4]
 801bba8:	f897 3020 	ldrb.w	r3, [r7, #32]
 801bbac:	9300      	str	r3, [sp, #0]
 801bbae:	4613      	mov	r3, r2
 801bbb0:	687a      	ldr	r2, [r7, #4]
 801bbb2:	6979      	ldr	r1, [r7, #20]
 801bbb4:	68f8      	ldr	r0, [r7, #12]
 801bbb6:	f000 f805 	bl	801bbc4 <ip4_output_if_src>
 801bbba:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801bbbc:	4618      	mov	r0, r3
 801bbbe:	3718      	adds	r7, #24
 801bbc0:	46bd      	mov	sp, r7
 801bbc2:	bd80      	pop	{r7, pc}

0801bbc4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801bbc4:	b580      	push	{r7, lr}
 801bbc6:	b088      	sub	sp, #32
 801bbc8:	af00      	add	r7, sp, #0
 801bbca:	60f8      	str	r0, [r7, #12]
 801bbcc:	60b9      	str	r1, [r7, #8]
 801bbce:	607a      	str	r2, [r7, #4]
 801bbd0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801bbd2:	68fb      	ldr	r3, [r7, #12]
 801bbd4:	7b9b      	ldrb	r3, [r3, #14]
 801bbd6:	2b01      	cmp	r3, #1
 801bbd8:	d006      	beq.n	801bbe8 <ip4_output_if_src+0x24>
 801bbda:	4b4b      	ldr	r3, [pc, #300]	@ (801bd08 <ip4_output_if_src+0x144>)
 801bbdc:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801bbe0:	494a      	ldr	r1, [pc, #296]	@ (801bd0c <ip4_output_if_src+0x148>)
 801bbe2:	484b      	ldr	r0, [pc, #300]	@ (801bd10 <ip4_output_if_src+0x14c>)
 801bbe4:	f002 fb7a 	bl	801e2dc <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	2b00      	cmp	r3, #0
 801bbec:	d060      	beq.n	801bcb0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801bbee:	2314      	movs	r3, #20
 801bbf0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801bbf2:	2114      	movs	r1, #20
 801bbf4:	68f8      	ldr	r0, [r7, #12]
 801bbf6:	f7f5 fa59 	bl	80110ac <pbuf_add_header>
 801bbfa:	4603      	mov	r3, r0
 801bbfc:	2b00      	cmp	r3, #0
 801bbfe:	d002      	beq.n	801bc06 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801bc00:	f06f 0301 	mvn.w	r3, #1
 801bc04:	e07c      	b.n	801bd00 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801bc06:	68fb      	ldr	r3, [r7, #12]
 801bc08:	685b      	ldr	r3, [r3, #4]
 801bc0a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801bc0c:	68fb      	ldr	r3, [r7, #12]
 801bc0e:	895b      	ldrh	r3, [r3, #10]
 801bc10:	2b13      	cmp	r3, #19
 801bc12:	d806      	bhi.n	801bc22 <ip4_output_if_src+0x5e>
 801bc14:	4b3c      	ldr	r3, [pc, #240]	@ (801bd08 <ip4_output_if_src+0x144>)
 801bc16:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801bc1a:	493e      	ldr	r1, [pc, #248]	@ (801bd14 <ip4_output_if_src+0x150>)
 801bc1c:	483c      	ldr	r0, [pc, #240]	@ (801bd10 <ip4_output_if_src+0x14c>)
 801bc1e:	f002 fb5d 	bl	801e2dc <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801bc22:	69fb      	ldr	r3, [r7, #28]
 801bc24:	78fa      	ldrb	r2, [r7, #3]
 801bc26:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801bc28:	69fb      	ldr	r3, [r7, #28]
 801bc2a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801bc2e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	681a      	ldr	r2, [r3, #0]
 801bc34:	69fb      	ldr	r3, [r7, #28]
 801bc36:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801bc38:	8b7b      	ldrh	r3, [r7, #26]
 801bc3a:	089b      	lsrs	r3, r3, #2
 801bc3c:	b29b      	uxth	r3, r3
 801bc3e:	b2db      	uxtb	r3, r3
 801bc40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801bc44:	b2da      	uxtb	r2, r3
 801bc46:	69fb      	ldr	r3, [r7, #28]
 801bc48:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801bc4a:	69fb      	ldr	r3, [r7, #28]
 801bc4c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801bc50:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801bc52:	68fb      	ldr	r3, [r7, #12]
 801bc54:	891b      	ldrh	r3, [r3, #8]
 801bc56:	4618      	mov	r0, r3
 801bc58:	f7f3 fbd2 	bl	800f400 <lwip_htons>
 801bc5c:	4603      	mov	r3, r0
 801bc5e:	461a      	mov	r2, r3
 801bc60:	69fb      	ldr	r3, [r7, #28]
 801bc62:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801bc64:	69fb      	ldr	r3, [r7, #28]
 801bc66:	2200      	movs	r2, #0
 801bc68:	719a      	strb	r2, [r3, #6]
 801bc6a:	2200      	movs	r2, #0
 801bc6c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801bc6e:	4b2a      	ldr	r3, [pc, #168]	@ (801bd18 <ip4_output_if_src+0x154>)
 801bc70:	881b      	ldrh	r3, [r3, #0]
 801bc72:	4618      	mov	r0, r3
 801bc74:	f7f3 fbc4 	bl	800f400 <lwip_htons>
 801bc78:	4603      	mov	r3, r0
 801bc7a:	461a      	mov	r2, r3
 801bc7c:	69fb      	ldr	r3, [r7, #28]
 801bc7e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801bc80:	4b25      	ldr	r3, [pc, #148]	@ (801bd18 <ip4_output_if_src+0x154>)
 801bc82:	881b      	ldrh	r3, [r3, #0]
 801bc84:	3301      	adds	r3, #1
 801bc86:	b29a      	uxth	r2, r3
 801bc88:	4b23      	ldr	r3, [pc, #140]	@ (801bd18 <ip4_output_if_src+0x154>)
 801bc8a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801bc8c:	68bb      	ldr	r3, [r7, #8]
 801bc8e:	2b00      	cmp	r3, #0
 801bc90:	d104      	bne.n	801bc9c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801bc92:	4b22      	ldr	r3, [pc, #136]	@ (801bd1c <ip4_output_if_src+0x158>)
 801bc94:	681a      	ldr	r2, [r3, #0]
 801bc96:	69fb      	ldr	r3, [r7, #28]
 801bc98:	60da      	str	r2, [r3, #12]
 801bc9a:	e003      	b.n	801bca4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801bc9c:	68bb      	ldr	r3, [r7, #8]
 801bc9e:	681a      	ldr	r2, [r3, #0]
 801bca0:	69fb      	ldr	r3, [r7, #28]
 801bca2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801bca4:	69fb      	ldr	r3, [r7, #28]
 801bca6:	2200      	movs	r2, #0
 801bca8:	729a      	strb	r2, [r3, #10]
 801bcaa:	2200      	movs	r2, #0
 801bcac:	72da      	strb	r2, [r3, #11]
 801bcae:	e00f      	b.n	801bcd0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801bcb0:	68fb      	ldr	r3, [r7, #12]
 801bcb2:	895b      	ldrh	r3, [r3, #10]
 801bcb4:	2b13      	cmp	r3, #19
 801bcb6:	d802      	bhi.n	801bcbe <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801bcb8:	f06f 0301 	mvn.w	r3, #1
 801bcbc:	e020      	b.n	801bd00 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801bcbe:	68fb      	ldr	r3, [r7, #12]
 801bcc0:	685b      	ldr	r3, [r3, #4]
 801bcc2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801bcc4:	69fb      	ldr	r3, [r7, #28]
 801bcc6:	691b      	ldr	r3, [r3, #16]
 801bcc8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801bcca:	f107 0314 	add.w	r3, r7, #20
 801bcce:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801bcd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bcd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801bcd4:	2b00      	cmp	r3, #0
 801bcd6:	d00c      	beq.n	801bcf2 <ip4_output_if_src+0x12e>
 801bcd8:	68fb      	ldr	r3, [r7, #12]
 801bcda:	891a      	ldrh	r2, [r3, #8]
 801bcdc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bcde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801bce0:	429a      	cmp	r2, r3
 801bce2:	d906      	bls.n	801bcf2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801bce4:	687a      	ldr	r2, [r7, #4]
 801bce6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801bce8:	68f8      	ldr	r0, [r7, #12]
 801bcea:	f000 fe7d 	bl	801c9e8 <ip4_frag>
 801bcee:	4603      	mov	r3, r0
 801bcf0:	e006      	b.n	801bd00 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801bcf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801bcf4:	695b      	ldr	r3, [r3, #20]
 801bcf6:	687a      	ldr	r2, [r7, #4]
 801bcf8:	68f9      	ldr	r1, [r7, #12]
 801bcfa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801bcfc:	4798      	blx	r3
 801bcfe:	4603      	mov	r3, r0
}
 801bd00:	4618      	mov	r0, r3
 801bd02:	3720      	adds	r7, #32
 801bd04:	46bd      	mov	sp, r7
 801bd06:	bd80      	pop	{r7, pc}
 801bd08:	08025718 	.word	0x08025718
 801bd0c:	0802574c 	.word	0x0802574c
 801bd10:	08025758 	.word	0x08025758
 801bd14:	08025780 	.word	0x08025780
 801bd18:	20012802 	.word	0x20012802
 801bd1c:	08025d70 	.word	0x08025d70

0801bd20 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801bd20:	b480      	push	{r7}
 801bd22:	b085      	sub	sp, #20
 801bd24:	af00      	add	r7, sp, #0
 801bd26:	6078      	str	r0, [r7, #4]
 801bd28:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd34:	d002      	beq.n	801bd3c <ip4_addr_isbroadcast_u32+0x1c>
 801bd36:	687b      	ldr	r3, [r7, #4]
 801bd38:	2b00      	cmp	r3, #0
 801bd3a:	d101      	bne.n	801bd40 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801bd3c:	2301      	movs	r3, #1
 801bd3e:	e02a      	b.n	801bd96 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801bd40:	683b      	ldr	r3, [r7, #0]
 801bd42:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bd46:	f003 0302 	and.w	r3, r3, #2
 801bd4a:	2b00      	cmp	r3, #0
 801bd4c:	d101      	bne.n	801bd52 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801bd4e:	2300      	movs	r3, #0
 801bd50:	e021      	b.n	801bd96 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801bd52:	683b      	ldr	r3, [r7, #0]
 801bd54:	3304      	adds	r3, #4
 801bd56:	681b      	ldr	r3, [r3, #0]
 801bd58:	687a      	ldr	r2, [r7, #4]
 801bd5a:	429a      	cmp	r2, r3
 801bd5c:	d101      	bne.n	801bd62 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801bd5e:	2300      	movs	r3, #0
 801bd60:	e019      	b.n	801bd96 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801bd62:	68fa      	ldr	r2, [r7, #12]
 801bd64:	683b      	ldr	r3, [r7, #0]
 801bd66:	3304      	adds	r3, #4
 801bd68:	681b      	ldr	r3, [r3, #0]
 801bd6a:	405a      	eors	r2, r3
 801bd6c:	683b      	ldr	r3, [r7, #0]
 801bd6e:	3308      	adds	r3, #8
 801bd70:	681b      	ldr	r3, [r3, #0]
 801bd72:	4013      	ands	r3, r2
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d10d      	bne.n	801bd94 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801bd78:	683b      	ldr	r3, [r7, #0]
 801bd7a:	3308      	adds	r3, #8
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	43da      	mvns	r2, r3
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801bd84:	683b      	ldr	r3, [r7, #0]
 801bd86:	3308      	adds	r3, #8
 801bd88:	681b      	ldr	r3, [r3, #0]
 801bd8a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801bd8c:	429a      	cmp	r2, r3
 801bd8e:	d101      	bne.n	801bd94 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801bd90:	2301      	movs	r3, #1
 801bd92:	e000      	b.n	801bd96 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801bd94:	2300      	movs	r3, #0
  }
}
 801bd96:	4618      	mov	r0, r3
 801bd98:	3714      	adds	r7, #20
 801bd9a:	46bd      	mov	sp, r7
 801bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bda0:	4770      	bx	lr
	...

0801bda4 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801bda4:	b580      	push	{r7, lr}
 801bda6:	b08a      	sub	sp, #40	@ 0x28
 801bda8:	af00      	add	r7, sp, #0
 801bdaa:	6078      	str	r0, [r7, #4]
 801bdac:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801bdae:	f107 030c 	add.w	r3, r7, #12
 801bdb2:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801bdb4:	687b      	ldr	r3, [r7, #4]
 801bdb6:	781b      	ldrb	r3, [r3, #0]
 801bdb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801bdbc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801bdc0:	3301      	adds	r3, #1
 801bdc2:	4a89      	ldr	r2, [pc, #548]	@ (801bfe8 <ip4addr_aton+0x244>)
 801bdc4:	4413      	add	r3, r2
 801bdc6:	781b      	ldrb	r3, [r3, #0]
 801bdc8:	f003 0304 	and.w	r3, r3, #4
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	d101      	bne.n	801bdd4 <ip4addr_aton+0x30>
      return 0;
 801bdd0:	2300      	movs	r3, #0
 801bdd2:	e105      	b.n	801bfe0 <ip4addr_aton+0x23c>
    }
    val = 0;
 801bdd4:	2300      	movs	r3, #0
 801bdd6:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 801bdd8:	230a      	movs	r3, #10
 801bdda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 801bdde:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801bde2:	2b30      	cmp	r3, #48	@ 0x30
 801bde4:	d11c      	bne.n	801be20 <ip4addr_aton+0x7c>
      c = *++cp;
 801bde6:	687b      	ldr	r3, [r7, #4]
 801bde8:	3301      	adds	r3, #1
 801bdea:	607b      	str	r3, [r7, #4]
 801bdec:	687b      	ldr	r3, [r7, #4]
 801bdee:	781b      	ldrb	r3, [r3, #0]
 801bdf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 801bdf4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801bdf8:	2b78      	cmp	r3, #120	@ 0x78
 801bdfa:	d003      	beq.n	801be04 <ip4addr_aton+0x60>
 801bdfc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801be00:	2b58      	cmp	r3, #88	@ 0x58
 801be02:	d10a      	bne.n	801be1a <ip4addr_aton+0x76>
        base = 16;
 801be04:	2310      	movs	r3, #16
 801be06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	3301      	adds	r3, #1
 801be0e:	607b      	str	r3, [r7, #4]
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	781b      	ldrb	r3, [r3, #0]
 801be14:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801be18:	e002      	b.n	801be20 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801be1a:	2308      	movs	r3, #8
 801be1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801be20:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801be24:	3301      	adds	r3, #1
 801be26:	4a70      	ldr	r2, [pc, #448]	@ (801bfe8 <ip4addr_aton+0x244>)
 801be28:	4413      	add	r3, r2
 801be2a:	781b      	ldrb	r3, [r3, #0]
 801be2c:	f003 0304 	and.w	r3, r3, #4
 801be30:	2b00      	cmp	r3, #0
 801be32:	d011      	beq.n	801be58 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801be34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801be38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801be3a:	fb03 f202 	mul.w	r2, r3, r2
 801be3e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801be42:	4413      	add	r3, r2
 801be44:	3b30      	subs	r3, #48	@ 0x30
 801be46:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801be48:	687b      	ldr	r3, [r7, #4]
 801be4a:	3301      	adds	r3, #1
 801be4c:	607b      	str	r3, [r7, #4]
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	781b      	ldrb	r3, [r3, #0]
 801be52:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801be56:	e7e3      	b.n	801be20 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801be58:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801be5c:	2b10      	cmp	r3, #16
 801be5e:	d127      	bne.n	801beb0 <ip4addr_aton+0x10c>
 801be60:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801be64:	3301      	adds	r3, #1
 801be66:	4a60      	ldr	r2, [pc, #384]	@ (801bfe8 <ip4addr_aton+0x244>)
 801be68:	4413      	add	r3, r2
 801be6a:	781b      	ldrb	r3, [r3, #0]
 801be6c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801be70:	2b00      	cmp	r3, #0
 801be72:	d01d      	beq.n	801beb0 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801be74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be76:	011b      	lsls	r3, r3, #4
 801be78:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801be7c:	f102 010a 	add.w	r1, r2, #10
 801be80:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801be84:	3201      	adds	r2, #1
 801be86:	4858      	ldr	r0, [pc, #352]	@ (801bfe8 <ip4addr_aton+0x244>)
 801be88:	4402      	add	r2, r0
 801be8a:	7812      	ldrb	r2, [r2, #0]
 801be8c:	f002 0203 	and.w	r2, r2, #3
 801be90:	2a02      	cmp	r2, #2
 801be92:	d101      	bne.n	801be98 <ip4addr_aton+0xf4>
 801be94:	2261      	movs	r2, #97	@ 0x61
 801be96:	e000      	b.n	801be9a <ip4addr_aton+0xf6>
 801be98:	2241      	movs	r2, #65	@ 0x41
 801be9a:	1a8a      	subs	r2, r1, r2
 801be9c:	4313      	orrs	r3, r2
 801be9e:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	3301      	adds	r3, #1
 801bea4:	607b      	str	r3, [r7, #4]
 801bea6:	687b      	ldr	r3, [r7, #4]
 801bea8:	781b      	ldrb	r3, [r3, #0]
 801beaa:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 801beae:	e7b7      	b.n	801be20 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801beb0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801beb4:	2b2e      	cmp	r3, #46	@ 0x2e
 801beb6:	d114      	bne.n	801bee2 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801beb8:	f107 030c 	add.w	r3, r7, #12
 801bebc:	330c      	adds	r3, #12
 801bebe:	69fa      	ldr	r2, [r7, #28]
 801bec0:	429a      	cmp	r2, r3
 801bec2:	d301      	bcc.n	801bec8 <ip4addr_aton+0x124>
        return 0;
 801bec4:	2300      	movs	r3, #0
 801bec6:	e08b      	b.n	801bfe0 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801bec8:	69fb      	ldr	r3, [r7, #28]
 801beca:	1d1a      	adds	r2, r3, #4
 801becc:	61fa      	str	r2, [r7, #28]
 801bece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bed0:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	3301      	adds	r3, #1
 801bed6:	607b      	str	r3, [r7, #4]
 801bed8:	687b      	ldr	r3, [r7, #4]
 801beda:	781b      	ldrb	r3, [r3, #0]
 801bedc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 801bee0:	e76c      	b.n	801bdbc <ip4addr_aton+0x18>
    } else {
      break;
 801bee2:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801bee4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801bee8:	2b00      	cmp	r3, #0
 801beea:	d00b      	beq.n	801bf04 <ip4addr_aton+0x160>
 801beec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801bef0:	3301      	adds	r3, #1
 801bef2:	4a3d      	ldr	r2, [pc, #244]	@ (801bfe8 <ip4addr_aton+0x244>)
 801bef4:	4413      	add	r3, r2
 801bef6:	781b      	ldrb	r3, [r3, #0]
 801bef8:	f003 0308 	and.w	r3, r3, #8
 801befc:	2b00      	cmp	r3, #0
 801befe:	d101      	bne.n	801bf04 <ip4addr_aton+0x160>
    return 0;
 801bf00:	2300      	movs	r3, #0
 801bf02:	e06d      	b.n	801bfe0 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801bf04:	f107 030c 	add.w	r3, r7, #12
 801bf08:	69fa      	ldr	r2, [r7, #28]
 801bf0a:	1ad3      	subs	r3, r2, r3
 801bf0c:	109b      	asrs	r3, r3, #2
 801bf0e:	3301      	adds	r3, #1
 801bf10:	2b04      	cmp	r3, #4
 801bf12:	d853      	bhi.n	801bfbc <ip4addr_aton+0x218>
 801bf14:	a201      	add	r2, pc, #4	@ (adr r2, 801bf1c <ip4addr_aton+0x178>)
 801bf16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf1a:	bf00      	nop
 801bf1c:	0801bf31 	.word	0x0801bf31
 801bf20:	0801bfcb 	.word	0x0801bfcb
 801bf24:	0801bf35 	.word	0x0801bf35
 801bf28:	0801bf57 	.word	0x0801bf57
 801bf2c:	0801bf85 	.word	0x0801bf85

    case 0:
      return 0;       /* initial nondigit */
 801bf30:	2300      	movs	r3, #0
 801bf32:	e055      	b.n	801bfe0 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801bf34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801bf3a:	d301      	bcc.n	801bf40 <ip4addr_aton+0x19c>
        return 0;
 801bf3c:	2300      	movs	r3, #0
 801bf3e:	e04f      	b.n	801bfe0 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801bf40:	68fb      	ldr	r3, [r7, #12]
 801bf42:	2bff      	cmp	r3, #255	@ 0xff
 801bf44:	d901      	bls.n	801bf4a <ip4addr_aton+0x1a6>
        return 0;
 801bf46:	2300      	movs	r3, #0
 801bf48:	e04a      	b.n	801bfe0 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801bf4a:	68fb      	ldr	r3, [r7, #12]
 801bf4c:	061b      	lsls	r3, r3, #24
 801bf4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bf50:	4313      	orrs	r3, r2
 801bf52:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801bf54:	e03a      	b.n	801bfcc <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801bf56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bf5c:	d301      	bcc.n	801bf62 <ip4addr_aton+0x1be>
        return 0;
 801bf5e:	2300      	movs	r3, #0
 801bf60:	e03e      	b.n	801bfe0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801bf62:	68fb      	ldr	r3, [r7, #12]
 801bf64:	2bff      	cmp	r3, #255	@ 0xff
 801bf66:	d802      	bhi.n	801bf6e <ip4addr_aton+0x1ca>
 801bf68:	693b      	ldr	r3, [r7, #16]
 801bf6a:	2bff      	cmp	r3, #255	@ 0xff
 801bf6c:	d901      	bls.n	801bf72 <ip4addr_aton+0x1ce>
        return 0;
 801bf6e:	2300      	movs	r3, #0
 801bf70:	e036      	b.n	801bfe0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801bf72:	68fb      	ldr	r3, [r7, #12]
 801bf74:	061a      	lsls	r2, r3, #24
 801bf76:	693b      	ldr	r3, [r7, #16]
 801bf78:	041b      	lsls	r3, r3, #16
 801bf7a:	4313      	orrs	r3, r2
 801bf7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bf7e:	4313      	orrs	r3, r2
 801bf80:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801bf82:	e023      	b.n	801bfcc <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801bf84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf86:	2bff      	cmp	r3, #255	@ 0xff
 801bf88:	d901      	bls.n	801bf8e <ip4addr_aton+0x1ea>
        return 0;
 801bf8a:	2300      	movs	r3, #0
 801bf8c:	e028      	b.n	801bfe0 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801bf8e:	68fb      	ldr	r3, [r7, #12]
 801bf90:	2bff      	cmp	r3, #255	@ 0xff
 801bf92:	d805      	bhi.n	801bfa0 <ip4addr_aton+0x1fc>
 801bf94:	693b      	ldr	r3, [r7, #16]
 801bf96:	2bff      	cmp	r3, #255	@ 0xff
 801bf98:	d802      	bhi.n	801bfa0 <ip4addr_aton+0x1fc>
 801bf9a:	697b      	ldr	r3, [r7, #20]
 801bf9c:	2bff      	cmp	r3, #255	@ 0xff
 801bf9e:	d901      	bls.n	801bfa4 <ip4addr_aton+0x200>
        return 0;
 801bfa0:	2300      	movs	r3, #0
 801bfa2:	e01d      	b.n	801bfe0 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801bfa4:	68fb      	ldr	r3, [r7, #12]
 801bfa6:	061a      	lsls	r2, r3, #24
 801bfa8:	693b      	ldr	r3, [r7, #16]
 801bfaa:	041b      	lsls	r3, r3, #16
 801bfac:	431a      	orrs	r2, r3
 801bfae:	697b      	ldr	r3, [r7, #20]
 801bfb0:	021b      	lsls	r3, r3, #8
 801bfb2:	4313      	orrs	r3, r2
 801bfb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bfb6:	4313      	orrs	r3, r2
 801bfb8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801bfba:	e007      	b.n	801bfcc <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801bfbc:	4b0b      	ldr	r3, [pc, #44]	@ (801bfec <ip4addr_aton+0x248>)
 801bfbe:	22f9      	movs	r2, #249	@ 0xf9
 801bfc0:	490b      	ldr	r1, [pc, #44]	@ (801bff0 <ip4addr_aton+0x24c>)
 801bfc2:	480c      	ldr	r0, [pc, #48]	@ (801bff4 <ip4addr_aton+0x250>)
 801bfc4:	f002 f98a 	bl	801e2dc <iprintf>
      break;
 801bfc8:	e000      	b.n	801bfcc <ip4addr_aton+0x228>
      break;
 801bfca:	bf00      	nop
  }
  if (addr) {
 801bfcc:	683b      	ldr	r3, [r7, #0]
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	d005      	beq.n	801bfde <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801bfd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bfd4:	f7f3 fa29 	bl	800f42a <lwip_htonl>
 801bfd8:	4602      	mov	r2, r0
 801bfda:	683b      	ldr	r3, [r7, #0]
 801bfdc:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801bfde:	2301      	movs	r3, #1
}
 801bfe0:	4618      	mov	r0, r3
 801bfe2:	3728      	adds	r7, #40	@ 0x28
 801bfe4:	46bd      	mov	sp, r7
 801bfe6:	bd80      	pop	{r7, pc}
 801bfe8:	08025df5 	.word	0x08025df5
 801bfec:	080257b0 	.word	0x080257b0
 801bff0:	080257ec 	.word	0x080257ec
 801bff4:	080257f8 	.word	0x080257f8

0801bff8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801bff8:	b580      	push	{r7, lr}
 801bffa:	b084      	sub	sp, #16
 801bffc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801bffe:	2300      	movs	r3, #0
 801c000:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801c002:	4b12      	ldr	r3, [pc, #72]	@ (801c04c <ip_reass_tmr+0x54>)
 801c004:	681b      	ldr	r3, [r3, #0]
 801c006:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801c008:	e018      	b.n	801c03c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801c00a:	68fb      	ldr	r3, [r7, #12]
 801c00c:	7fdb      	ldrb	r3, [r3, #31]
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d00b      	beq.n	801c02a <ip_reass_tmr+0x32>
      r->timer--;
 801c012:	68fb      	ldr	r3, [r7, #12]
 801c014:	7fdb      	ldrb	r3, [r3, #31]
 801c016:	3b01      	subs	r3, #1
 801c018:	b2da      	uxtb	r2, r3
 801c01a:	68fb      	ldr	r3, [r7, #12]
 801c01c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801c01e:	68fb      	ldr	r3, [r7, #12]
 801c020:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801c022:	68fb      	ldr	r3, [r7, #12]
 801c024:	681b      	ldr	r3, [r3, #0]
 801c026:	60fb      	str	r3, [r7, #12]
 801c028:	e008      	b.n	801c03c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801c02a:	68fb      	ldr	r3, [r7, #12]
 801c02c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801c02e:	68fb      	ldr	r3, [r7, #12]
 801c030:	681b      	ldr	r3, [r3, #0]
 801c032:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801c034:	68b9      	ldr	r1, [r7, #8]
 801c036:	6878      	ldr	r0, [r7, #4]
 801c038:	f000 f80a 	bl	801c050 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801c03c:	68fb      	ldr	r3, [r7, #12]
 801c03e:	2b00      	cmp	r3, #0
 801c040:	d1e3      	bne.n	801c00a <ip_reass_tmr+0x12>
    }
  }
}
 801c042:	bf00      	nop
 801c044:	bf00      	nop
 801c046:	3710      	adds	r7, #16
 801c048:	46bd      	mov	sp, r7
 801c04a:	bd80      	pop	{r7, pc}
 801c04c:	20012804 	.word	0x20012804

0801c050 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c050:	b580      	push	{r7, lr}
 801c052:	b088      	sub	sp, #32
 801c054:	af00      	add	r7, sp, #0
 801c056:	6078      	str	r0, [r7, #4]
 801c058:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801c05a:	2300      	movs	r3, #0
 801c05c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801c05e:	683a      	ldr	r2, [r7, #0]
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	429a      	cmp	r2, r3
 801c064:	d105      	bne.n	801c072 <ip_reass_free_complete_datagram+0x22>
 801c066:	4b45      	ldr	r3, [pc, #276]	@ (801c17c <ip_reass_free_complete_datagram+0x12c>)
 801c068:	22ab      	movs	r2, #171	@ 0xab
 801c06a:	4945      	ldr	r1, [pc, #276]	@ (801c180 <ip_reass_free_complete_datagram+0x130>)
 801c06c:	4845      	ldr	r0, [pc, #276]	@ (801c184 <ip_reass_free_complete_datagram+0x134>)
 801c06e:	f002 f935 	bl	801e2dc <iprintf>
  if (prev != NULL) {
 801c072:	683b      	ldr	r3, [r7, #0]
 801c074:	2b00      	cmp	r3, #0
 801c076:	d00a      	beq.n	801c08e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801c078:	683b      	ldr	r3, [r7, #0]
 801c07a:	681b      	ldr	r3, [r3, #0]
 801c07c:	687a      	ldr	r2, [r7, #4]
 801c07e:	429a      	cmp	r2, r3
 801c080:	d005      	beq.n	801c08e <ip_reass_free_complete_datagram+0x3e>
 801c082:	4b3e      	ldr	r3, [pc, #248]	@ (801c17c <ip_reass_free_complete_datagram+0x12c>)
 801c084:	22ad      	movs	r2, #173	@ 0xad
 801c086:	4940      	ldr	r1, [pc, #256]	@ (801c188 <ip_reass_free_complete_datagram+0x138>)
 801c088:	483e      	ldr	r0, [pc, #248]	@ (801c184 <ip_reass_free_complete_datagram+0x134>)
 801c08a:	f002 f927 	bl	801e2dc <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	685b      	ldr	r3, [r3, #4]
 801c092:	685b      	ldr	r3, [r3, #4]
 801c094:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801c096:	697b      	ldr	r3, [r7, #20]
 801c098:	889b      	ldrh	r3, [r3, #4]
 801c09a:	b29b      	uxth	r3, r3
 801c09c:	2b00      	cmp	r3, #0
 801c09e:	d12a      	bne.n	801c0f6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	685b      	ldr	r3, [r3, #4]
 801c0a4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801c0a6:	697b      	ldr	r3, [r7, #20]
 801c0a8:	681a      	ldr	r2, [r3, #0]
 801c0aa:	687b      	ldr	r3, [r7, #4]
 801c0ac:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801c0ae:	69bb      	ldr	r3, [r7, #24]
 801c0b0:	6858      	ldr	r0, [r3, #4]
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	3308      	adds	r3, #8
 801c0b6:	2214      	movs	r2, #20
 801c0b8:	4619      	mov	r1, r3
 801c0ba:	f002 fab0 	bl	801e61e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801c0be:	2101      	movs	r1, #1
 801c0c0:	69b8      	ldr	r0, [r7, #24]
 801c0c2:	f7ff faff 	bl	801b6c4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801c0c6:	69b8      	ldr	r0, [r7, #24]
 801c0c8:	f7f5 f914 	bl	80112f4 <pbuf_clen>
 801c0cc:	4603      	mov	r3, r0
 801c0ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c0d0:	8bfa      	ldrh	r2, [r7, #30]
 801c0d2:	8a7b      	ldrh	r3, [r7, #18]
 801c0d4:	4413      	add	r3, r2
 801c0d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c0da:	db05      	blt.n	801c0e8 <ip_reass_free_complete_datagram+0x98>
 801c0dc:	4b27      	ldr	r3, [pc, #156]	@ (801c17c <ip_reass_free_complete_datagram+0x12c>)
 801c0de:	22bc      	movs	r2, #188	@ 0xbc
 801c0e0:	492a      	ldr	r1, [pc, #168]	@ (801c18c <ip_reass_free_complete_datagram+0x13c>)
 801c0e2:	4828      	ldr	r0, [pc, #160]	@ (801c184 <ip_reass_free_complete_datagram+0x134>)
 801c0e4:	f002 f8fa 	bl	801e2dc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c0e8:	8bfa      	ldrh	r2, [r7, #30]
 801c0ea:	8a7b      	ldrh	r3, [r7, #18]
 801c0ec:	4413      	add	r3, r2
 801c0ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801c0f0:	69b8      	ldr	r0, [r7, #24]
 801c0f2:	f7f5 f871 	bl	80111d8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801c0f6:	687b      	ldr	r3, [r7, #4]
 801c0f8:	685b      	ldr	r3, [r3, #4]
 801c0fa:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801c0fc:	e01f      	b.n	801c13e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801c0fe:	69bb      	ldr	r3, [r7, #24]
 801c100:	685b      	ldr	r3, [r3, #4]
 801c102:	617b      	str	r3, [r7, #20]
    pcur = p;
 801c104:	69bb      	ldr	r3, [r7, #24]
 801c106:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801c108:	697b      	ldr	r3, [r7, #20]
 801c10a:	681b      	ldr	r3, [r3, #0]
 801c10c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801c10e:	68f8      	ldr	r0, [r7, #12]
 801c110:	f7f5 f8f0 	bl	80112f4 <pbuf_clen>
 801c114:	4603      	mov	r3, r0
 801c116:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c118:	8bfa      	ldrh	r2, [r7, #30]
 801c11a:	8a7b      	ldrh	r3, [r7, #18]
 801c11c:	4413      	add	r3, r2
 801c11e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c122:	db05      	blt.n	801c130 <ip_reass_free_complete_datagram+0xe0>
 801c124:	4b15      	ldr	r3, [pc, #84]	@ (801c17c <ip_reass_free_complete_datagram+0x12c>)
 801c126:	22cc      	movs	r2, #204	@ 0xcc
 801c128:	4918      	ldr	r1, [pc, #96]	@ (801c18c <ip_reass_free_complete_datagram+0x13c>)
 801c12a:	4816      	ldr	r0, [pc, #88]	@ (801c184 <ip_reass_free_complete_datagram+0x134>)
 801c12c:	f002 f8d6 	bl	801e2dc <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c130:	8bfa      	ldrh	r2, [r7, #30]
 801c132:	8a7b      	ldrh	r3, [r7, #18]
 801c134:	4413      	add	r3, r2
 801c136:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801c138:	68f8      	ldr	r0, [r7, #12]
 801c13a:	f7f5 f84d 	bl	80111d8 <pbuf_free>
  while (p != NULL) {
 801c13e:	69bb      	ldr	r3, [r7, #24]
 801c140:	2b00      	cmp	r3, #0
 801c142:	d1dc      	bne.n	801c0fe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801c144:	6839      	ldr	r1, [r7, #0]
 801c146:	6878      	ldr	r0, [r7, #4]
 801c148:	f000 f8c2 	bl	801c2d0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801c14c:	4b10      	ldr	r3, [pc, #64]	@ (801c190 <ip_reass_free_complete_datagram+0x140>)
 801c14e:	881b      	ldrh	r3, [r3, #0]
 801c150:	8bfa      	ldrh	r2, [r7, #30]
 801c152:	429a      	cmp	r2, r3
 801c154:	d905      	bls.n	801c162 <ip_reass_free_complete_datagram+0x112>
 801c156:	4b09      	ldr	r3, [pc, #36]	@ (801c17c <ip_reass_free_complete_datagram+0x12c>)
 801c158:	22d2      	movs	r2, #210	@ 0xd2
 801c15a:	490e      	ldr	r1, [pc, #56]	@ (801c194 <ip_reass_free_complete_datagram+0x144>)
 801c15c:	4809      	ldr	r0, [pc, #36]	@ (801c184 <ip_reass_free_complete_datagram+0x134>)
 801c15e:	f002 f8bd 	bl	801e2dc <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801c162:	4b0b      	ldr	r3, [pc, #44]	@ (801c190 <ip_reass_free_complete_datagram+0x140>)
 801c164:	881a      	ldrh	r2, [r3, #0]
 801c166:	8bfb      	ldrh	r3, [r7, #30]
 801c168:	1ad3      	subs	r3, r2, r3
 801c16a:	b29a      	uxth	r2, r3
 801c16c:	4b08      	ldr	r3, [pc, #32]	@ (801c190 <ip_reass_free_complete_datagram+0x140>)
 801c16e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801c170:	8bfb      	ldrh	r3, [r7, #30]
}
 801c172:	4618      	mov	r0, r3
 801c174:	3720      	adds	r7, #32
 801c176:	46bd      	mov	sp, r7
 801c178:	bd80      	pop	{r7, pc}
 801c17a:	bf00      	nop
 801c17c:	08025820 	.word	0x08025820
 801c180:	0802585c 	.word	0x0802585c
 801c184:	08025868 	.word	0x08025868
 801c188:	08025890 	.word	0x08025890
 801c18c:	080258a4 	.word	0x080258a4
 801c190:	20012808 	.word	0x20012808
 801c194:	080258c4 	.word	0x080258c4

0801c198 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801c198:	b580      	push	{r7, lr}
 801c19a:	b08a      	sub	sp, #40	@ 0x28
 801c19c:	af00      	add	r7, sp, #0
 801c19e:	6078      	str	r0, [r7, #4]
 801c1a0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801c1a2:	2300      	movs	r3, #0
 801c1a4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801c1a6:	2300      	movs	r3, #0
 801c1a8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801c1aa:	2300      	movs	r3, #0
 801c1ac:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801c1ae:	2300      	movs	r3, #0
 801c1b0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801c1b2:	2300      	movs	r3, #0
 801c1b4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801c1b6:	4b28      	ldr	r3, [pc, #160]	@ (801c258 <ip_reass_remove_oldest_datagram+0xc0>)
 801c1b8:	681b      	ldr	r3, [r3, #0]
 801c1ba:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c1bc:	e030      	b.n	801c220 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801c1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1c0:	695a      	ldr	r2, [r3, #20]
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	68db      	ldr	r3, [r3, #12]
 801c1c6:	429a      	cmp	r2, r3
 801c1c8:	d10c      	bne.n	801c1e4 <ip_reass_remove_oldest_datagram+0x4c>
 801c1ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1cc:	699a      	ldr	r2, [r3, #24]
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	691b      	ldr	r3, [r3, #16]
 801c1d2:	429a      	cmp	r2, r3
 801c1d4:	d106      	bne.n	801c1e4 <ip_reass_remove_oldest_datagram+0x4c>
 801c1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1d8:	899a      	ldrh	r2, [r3, #12]
 801c1da:	687b      	ldr	r3, [r7, #4]
 801c1dc:	889b      	ldrh	r3, [r3, #4]
 801c1de:	b29b      	uxth	r3, r3
 801c1e0:	429a      	cmp	r2, r3
 801c1e2:	d014      	beq.n	801c20e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801c1e4:	693b      	ldr	r3, [r7, #16]
 801c1e6:	3301      	adds	r3, #1
 801c1e8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801c1ea:	6a3b      	ldr	r3, [r7, #32]
 801c1ec:	2b00      	cmp	r3, #0
 801c1ee:	d104      	bne.n	801c1fa <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801c1f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1f2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c1f4:	69fb      	ldr	r3, [r7, #28]
 801c1f6:	61bb      	str	r3, [r7, #24]
 801c1f8:	e009      	b.n	801c20e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801c1fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1fc:	7fda      	ldrb	r2, [r3, #31]
 801c1fe:	6a3b      	ldr	r3, [r7, #32]
 801c200:	7fdb      	ldrb	r3, [r3, #31]
 801c202:	429a      	cmp	r2, r3
 801c204:	d803      	bhi.n	801c20e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801c206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c208:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c20a:	69fb      	ldr	r3, [r7, #28]
 801c20c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801c20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c210:	681b      	ldr	r3, [r3, #0]
 801c212:	2b00      	cmp	r3, #0
 801c214:	d001      	beq.n	801c21a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801c216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c218:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801c21a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c21c:	681b      	ldr	r3, [r3, #0]
 801c21e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c222:	2b00      	cmp	r3, #0
 801c224:	d1cb      	bne.n	801c1be <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801c226:	6a3b      	ldr	r3, [r7, #32]
 801c228:	2b00      	cmp	r3, #0
 801c22a:	d008      	beq.n	801c23e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801c22c:	69b9      	ldr	r1, [r7, #24]
 801c22e:	6a38      	ldr	r0, [r7, #32]
 801c230:	f7ff ff0e 	bl	801c050 <ip_reass_free_complete_datagram>
 801c234:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801c236:	697a      	ldr	r2, [r7, #20]
 801c238:	68fb      	ldr	r3, [r7, #12]
 801c23a:	4413      	add	r3, r2
 801c23c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801c23e:	697a      	ldr	r2, [r7, #20]
 801c240:	683b      	ldr	r3, [r7, #0]
 801c242:	429a      	cmp	r2, r3
 801c244:	da02      	bge.n	801c24c <ip_reass_remove_oldest_datagram+0xb4>
 801c246:	693b      	ldr	r3, [r7, #16]
 801c248:	2b01      	cmp	r3, #1
 801c24a:	dcac      	bgt.n	801c1a6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801c24c:	697b      	ldr	r3, [r7, #20]
}
 801c24e:	4618      	mov	r0, r3
 801c250:	3728      	adds	r7, #40	@ 0x28
 801c252:	46bd      	mov	sp, r7
 801c254:	bd80      	pop	{r7, pc}
 801c256:	bf00      	nop
 801c258:	20012804 	.word	0x20012804

0801c25c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801c25c:	b580      	push	{r7, lr}
 801c25e:	b084      	sub	sp, #16
 801c260:	af00      	add	r7, sp, #0
 801c262:	6078      	str	r0, [r7, #4]
 801c264:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c266:	2004      	movs	r0, #4
 801c268:	f7f4 f890 	bl	801038c <memp_malloc>
 801c26c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801c26e:	68fb      	ldr	r3, [r7, #12]
 801c270:	2b00      	cmp	r3, #0
 801c272:	d110      	bne.n	801c296 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801c274:	6839      	ldr	r1, [r7, #0]
 801c276:	6878      	ldr	r0, [r7, #4]
 801c278:	f7ff ff8e 	bl	801c198 <ip_reass_remove_oldest_datagram>
 801c27c:	4602      	mov	r2, r0
 801c27e:	683b      	ldr	r3, [r7, #0]
 801c280:	4293      	cmp	r3, r2
 801c282:	dc03      	bgt.n	801c28c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c284:	2004      	movs	r0, #4
 801c286:	f7f4 f881 	bl	801038c <memp_malloc>
 801c28a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801c28c:	68fb      	ldr	r3, [r7, #12]
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d101      	bne.n	801c296 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801c292:	2300      	movs	r3, #0
 801c294:	e016      	b.n	801c2c4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c296:	2220      	movs	r2, #32
 801c298:	2100      	movs	r1, #0
 801c29a:	68f8      	ldr	r0, [r7, #12]
 801c29c:	f002 f8bd 	bl	801e41a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801c2a0:	68fb      	ldr	r3, [r7, #12]
 801c2a2:	220f      	movs	r2, #15
 801c2a4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801c2a6:	4b09      	ldr	r3, [pc, #36]	@ (801c2cc <ip_reass_enqueue_new_datagram+0x70>)
 801c2a8:	681a      	ldr	r2, [r3, #0]
 801c2aa:	68fb      	ldr	r3, [r7, #12]
 801c2ac:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801c2ae:	4a07      	ldr	r2, [pc, #28]	@ (801c2cc <ip_reass_enqueue_new_datagram+0x70>)
 801c2b0:	68fb      	ldr	r3, [r7, #12]
 801c2b2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c2b4:	68fb      	ldr	r3, [r7, #12]
 801c2b6:	3308      	adds	r3, #8
 801c2b8:	2214      	movs	r2, #20
 801c2ba:	6879      	ldr	r1, [r7, #4]
 801c2bc:	4618      	mov	r0, r3
 801c2be:	f002 f9ae 	bl	801e61e <memcpy>
  return ipr;
 801c2c2:	68fb      	ldr	r3, [r7, #12]
}
 801c2c4:	4618      	mov	r0, r3
 801c2c6:	3710      	adds	r7, #16
 801c2c8:	46bd      	mov	sp, r7
 801c2ca:	bd80      	pop	{r7, pc}
 801c2cc:	20012804 	.word	0x20012804

0801c2d0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c2d0:	b580      	push	{r7, lr}
 801c2d2:	b082      	sub	sp, #8
 801c2d4:	af00      	add	r7, sp, #0
 801c2d6:	6078      	str	r0, [r7, #4]
 801c2d8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801c2da:	4b10      	ldr	r3, [pc, #64]	@ (801c31c <ip_reass_dequeue_datagram+0x4c>)
 801c2dc:	681b      	ldr	r3, [r3, #0]
 801c2de:	687a      	ldr	r2, [r7, #4]
 801c2e0:	429a      	cmp	r2, r3
 801c2e2:	d104      	bne.n	801c2ee <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801c2e4:	687b      	ldr	r3, [r7, #4]
 801c2e6:	681b      	ldr	r3, [r3, #0]
 801c2e8:	4a0c      	ldr	r2, [pc, #48]	@ (801c31c <ip_reass_dequeue_datagram+0x4c>)
 801c2ea:	6013      	str	r3, [r2, #0]
 801c2ec:	e00d      	b.n	801c30a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801c2ee:	683b      	ldr	r3, [r7, #0]
 801c2f0:	2b00      	cmp	r3, #0
 801c2f2:	d106      	bne.n	801c302 <ip_reass_dequeue_datagram+0x32>
 801c2f4:	4b0a      	ldr	r3, [pc, #40]	@ (801c320 <ip_reass_dequeue_datagram+0x50>)
 801c2f6:	f240 1245 	movw	r2, #325	@ 0x145
 801c2fa:	490a      	ldr	r1, [pc, #40]	@ (801c324 <ip_reass_dequeue_datagram+0x54>)
 801c2fc:	480a      	ldr	r0, [pc, #40]	@ (801c328 <ip_reass_dequeue_datagram+0x58>)
 801c2fe:	f001 ffed 	bl	801e2dc <iprintf>
    prev->next = ipr->next;
 801c302:	687b      	ldr	r3, [r7, #4]
 801c304:	681a      	ldr	r2, [r3, #0]
 801c306:	683b      	ldr	r3, [r7, #0]
 801c308:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801c30a:	6879      	ldr	r1, [r7, #4]
 801c30c:	2004      	movs	r0, #4
 801c30e:	f7f4 f8b3 	bl	8010478 <memp_free>
}
 801c312:	bf00      	nop
 801c314:	3708      	adds	r7, #8
 801c316:	46bd      	mov	sp, r7
 801c318:	bd80      	pop	{r7, pc}
 801c31a:	bf00      	nop
 801c31c:	20012804 	.word	0x20012804
 801c320:	08025820 	.word	0x08025820
 801c324:	080258e8 	.word	0x080258e8
 801c328:	08025868 	.word	0x08025868

0801c32c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801c32c:	b580      	push	{r7, lr}
 801c32e:	b08c      	sub	sp, #48	@ 0x30
 801c330:	af00      	add	r7, sp, #0
 801c332:	60f8      	str	r0, [r7, #12]
 801c334:	60b9      	str	r1, [r7, #8]
 801c336:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801c338:	2300      	movs	r3, #0
 801c33a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801c33c:	2301      	movs	r3, #1
 801c33e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801c340:	68bb      	ldr	r3, [r7, #8]
 801c342:	685b      	ldr	r3, [r3, #4]
 801c344:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c346:	69fb      	ldr	r3, [r7, #28]
 801c348:	885b      	ldrh	r3, [r3, #2]
 801c34a:	b29b      	uxth	r3, r3
 801c34c:	4618      	mov	r0, r3
 801c34e:	f7f3 f857 	bl	800f400 <lwip_htons>
 801c352:	4603      	mov	r3, r0
 801c354:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801c356:	69fb      	ldr	r3, [r7, #28]
 801c358:	781b      	ldrb	r3, [r3, #0]
 801c35a:	f003 030f 	and.w	r3, r3, #15
 801c35e:	b2db      	uxtb	r3, r3
 801c360:	009b      	lsls	r3, r3, #2
 801c362:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801c364:	7e7b      	ldrb	r3, [r7, #25]
 801c366:	b29b      	uxth	r3, r3
 801c368:	8b7a      	ldrh	r2, [r7, #26]
 801c36a:	429a      	cmp	r2, r3
 801c36c:	d202      	bcs.n	801c374 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c36e:	f04f 33ff 	mov.w	r3, #4294967295
 801c372:	e135      	b.n	801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801c374:	7e7b      	ldrb	r3, [r7, #25]
 801c376:	b29b      	uxth	r3, r3
 801c378:	8b7a      	ldrh	r2, [r7, #26]
 801c37a:	1ad3      	subs	r3, r2, r3
 801c37c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801c37e:	69fb      	ldr	r3, [r7, #28]
 801c380:	88db      	ldrh	r3, [r3, #6]
 801c382:	b29b      	uxth	r3, r3
 801c384:	4618      	mov	r0, r3
 801c386:	f7f3 f83b 	bl	800f400 <lwip_htons>
 801c38a:	4603      	mov	r3, r0
 801c38c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c390:	b29b      	uxth	r3, r3
 801c392:	00db      	lsls	r3, r3, #3
 801c394:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801c396:	68bb      	ldr	r3, [r7, #8]
 801c398:	685b      	ldr	r3, [r3, #4]
 801c39a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801c39c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c39e:	2200      	movs	r2, #0
 801c3a0:	701a      	strb	r2, [r3, #0]
 801c3a2:	2200      	movs	r2, #0
 801c3a4:	705a      	strb	r2, [r3, #1]
 801c3a6:	2200      	movs	r2, #0
 801c3a8:	709a      	strb	r2, [r3, #2]
 801c3aa:	2200      	movs	r2, #0
 801c3ac:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801c3ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3b0:	8afa      	ldrh	r2, [r7, #22]
 801c3b2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801c3b4:	8afa      	ldrh	r2, [r7, #22]
 801c3b6:	8b7b      	ldrh	r3, [r7, #26]
 801c3b8:	4413      	add	r3, r2
 801c3ba:	b29a      	uxth	r2, r3
 801c3bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3be:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801c3c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3c2:	88db      	ldrh	r3, [r3, #6]
 801c3c4:	b29b      	uxth	r3, r3
 801c3c6:	8afa      	ldrh	r2, [r7, #22]
 801c3c8:	429a      	cmp	r2, r3
 801c3ca:	d902      	bls.n	801c3d2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c3cc:	f04f 33ff 	mov.w	r3, #4294967295
 801c3d0:	e106      	b.n	801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801c3d2:	68fb      	ldr	r3, [r7, #12]
 801c3d4:	685b      	ldr	r3, [r3, #4]
 801c3d6:	627b      	str	r3, [r7, #36]	@ 0x24
 801c3d8:	e068      	b.n	801c4ac <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801c3da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3dc:	685b      	ldr	r3, [r3, #4]
 801c3de:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801c3e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3e2:	889b      	ldrh	r3, [r3, #4]
 801c3e4:	b29a      	uxth	r2, r3
 801c3e6:	693b      	ldr	r3, [r7, #16]
 801c3e8:	889b      	ldrh	r3, [r3, #4]
 801c3ea:	b29b      	uxth	r3, r3
 801c3ec:	429a      	cmp	r2, r3
 801c3ee:	d235      	bcs.n	801c45c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801c3f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c3f4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801c3f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c3f8:	2b00      	cmp	r3, #0
 801c3fa:	d020      	beq.n	801c43e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c3fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c3fe:	889b      	ldrh	r3, [r3, #4]
 801c400:	b29a      	uxth	r2, r3
 801c402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c404:	88db      	ldrh	r3, [r3, #6]
 801c406:	b29b      	uxth	r3, r3
 801c408:	429a      	cmp	r2, r3
 801c40a:	d307      	bcc.n	801c41c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801c40c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c40e:	88db      	ldrh	r3, [r3, #6]
 801c410:	b29a      	uxth	r2, r3
 801c412:	693b      	ldr	r3, [r7, #16]
 801c414:	889b      	ldrh	r3, [r3, #4]
 801c416:	b29b      	uxth	r3, r3
 801c418:	429a      	cmp	r2, r3
 801c41a:	d902      	bls.n	801c422 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c41c:	f04f 33ff 	mov.w	r3, #4294967295
 801c420:	e0de      	b.n	801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801c422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c424:	68ba      	ldr	r2, [r7, #8]
 801c426:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801c428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c42a:	88db      	ldrh	r3, [r3, #6]
 801c42c:	b29a      	uxth	r2, r3
 801c42e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c430:	889b      	ldrh	r3, [r3, #4]
 801c432:	b29b      	uxth	r3, r3
 801c434:	429a      	cmp	r2, r3
 801c436:	d03d      	beq.n	801c4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c438:	2300      	movs	r3, #0
 801c43a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801c43c:	e03a      	b.n	801c4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801c43e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c440:	88db      	ldrh	r3, [r3, #6]
 801c442:	b29a      	uxth	r2, r3
 801c444:	693b      	ldr	r3, [r7, #16]
 801c446:	889b      	ldrh	r3, [r3, #4]
 801c448:	b29b      	uxth	r3, r3
 801c44a:	429a      	cmp	r2, r3
 801c44c:	d902      	bls.n	801c454 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c44e:	f04f 33ff 	mov.w	r3, #4294967295
 801c452:	e0c5      	b.n	801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801c454:	68fb      	ldr	r3, [r7, #12]
 801c456:	68ba      	ldr	r2, [r7, #8]
 801c458:	605a      	str	r2, [r3, #4]
      break;
 801c45a:	e02b      	b.n	801c4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801c45c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c45e:	889b      	ldrh	r3, [r3, #4]
 801c460:	b29a      	uxth	r2, r3
 801c462:	693b      	ldr	r3, [r7, #16]
 801c464:	889b      	ldrh	r3, [r3, #4]
 801c466:	b29b      	uxth	r3, r3
 801c468:	429a      	cmp	r2, r3
 801c46a:	d102      	bne.n	801c472 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c46c:	f04f 33ff 	mov.w	r3, #4294967295
 801c470:	e0b6      	b.n	801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801c472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c474:	889b      	ldrh	r3, [r3, #4]
 801c476:	b29a      	uxth	r2, r3
 801c478:	693b      	ldr	r3, [r7, #16]
 801c47a:	88db      	ldrh	r3, [r3, #6]
 801c47c:	b29b      	uxth	r3, r3
 801c47e:	429a      	cmp	r2, r3
 801c480:	d202      	bcs.n	801c488 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c482:	f04f 33ff 	mov.w	r3, #4294967295
 801c486:	e0ab      	b.n	801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801c488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c48a:	2b00      	cmp	r3, #0
 801c48c:	d009      	beq.n	801c4a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801c48e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c490:	88db      	ldrh	r3, [r3, #6]
 801c492:	b29a      	uxth	r2, r3
 801c494:	693b      	ldr	r3, [r7, #16]
 801c496:	889b      	ldrh	r3, [r3, #4]
 801c498:	b29b      	uxth	r3, r3
 801c49a:	429a      	cmp	r2, r3
 801c49c:	d001      	beq.n	801c4a2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c49e:	2300      	movs	r3, #0
 801c4a0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801c4a2:	693b      	ldr	r3, [r7, #16]
 801c4a4:	681b      	ldr	r3, [r3, #0]
 801c4a6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801c4a8:	693b      	ldr	r3, [r7, #16]
 801c4aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801c4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d193      	bne.n	801c3da <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801c4b2:	e000      	b.n	801c4b6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801c4b4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801c4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	d12d      	bne.n	801c518 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801c4bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d01c      	beq.n	801c4fc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c4c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4c4:	88db      	ldrh	r3, [r3, #6]
 801c4c6:	b29a      	uxth	r2, r3
 801c4c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4ca:	889b      	ldrh	r3, [r3, #4]
 801c4cc:	b29b      	uxth	r3, r3
 801c4ce:	429a      	cmp	r2, r3
 801c4d0:	d906      	bls.n	801c4e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801c4d2:	4b45      	ldr	r3, [pc, #276]	@ (801c5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c4d4:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801c4d8:	4944      	ldr	r1, [pc, #272]	@ (801c5ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801c4da:	4845      	ldr	r0, [pc, #276]	@ (801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c4dc:	f001 fefe 	bl	801e2dc <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801c4e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4e2:	68ba      	ldr	r2, [r7, #8]
 801c4e4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801c4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c4e8:	88db      	ldrh	r3, [r3, #6]
 801c4ea:	b29a      	uxth	r2, r3
 801c4ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c4ee:	889b      	ldrh	r3, [r3, #4]
 801c4f0:	b29b      	uxth	r3, r3
 801c4f2:	429a      	cmp	r2, r3
 801c4f4:	d010      	beq.n	801c518 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801c4f6:	2300      	movs	r3, #0
 801c4f8:	623b      	str	r3, [r7, #32]
 801c4fa:	e00d      	b.n	801c518 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801c4fc:	68fb      	ldr	r3, [r7, #12]
 801c4fe:	685b      	ldr	r3, [r3, #4]
 801c500:	2b00      	cmp	r3, #0
 801c502:	d006      	beq.n	801c512 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801c504:	4b38      	ldr	r3, [pc, #224]	@ (801c5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c506:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801c50a:	493a      	ldr	r1, [pc, #232]	@ (801c5f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801c50c:	4838      	ldr	r0, [pc, #224]	@ (801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c50e:	f001 fee5 	bl	801e2dc <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801c512:	68fb      	ldr	r3, [r7, #12]
 801c514:	68ba      	ldr	r2, [r7, #8]
 801c516:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c518:	687b      	ldr	r3, [r7, #4]
 801c51a:	2b00      	cmp	r3, #0
 801c51c:	d105      	bne.n	801c52a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801c51e:	68fb      	ldr	r3, [r7, #12]
 801c520:	7f9b      	ldrb	r3, [r3, #30]
 801c522:	f003 0301 	and.w	r3, r3, #1
 801c526:	2b00      	cmp	r3, #0
 801c528:	d059      	beq.n	801c5de <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801c52a:	6a3b      	ldr	r3, [r7, #32]
 801c52c:	2b00      	cmp	r3, #0
 801c52e:	d04f      	beq.n	801c5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801c530:	68fb      	ldr	r3, [r7, #12]
 801c532:	685b      	ldr	r3, [r3, #4]
 801c534:	2b00      	cmp	r3, #0
 801c536:	d006      	beq.n	801c546 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801c538:	68fb      	ldr	r3, [r7, #12]
 801c53a:	685b      	ldr	r3, [r3, #4]
 801c53c:	685b      	ldr	r3, [r3, #4]
 801c53e:	889b      	ldrh	r3, [r3, #4]
 801c540:	b29b      	uxth	r3, r3
 801c542:	2b00      	cmp	r3, #0
 801c544:	d002      	beq.n	801c54c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801c546:	2300      	movs	r3, #0
 801c548:	623b      	str	r3, [r7, #32]
 801c54a:	e041      	b.n	801c5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801c54c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c54e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801c550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c552:	681b      	ldr	r3, [r3, #0]
 801c554:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c556:	e012      	b.n	801c57e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801c558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c55a:	685b      	ldr	r3, [r3, #4]
 801c55c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801c55e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c560:	88db      	ldrh	r3, [r3, #6]
 801c562:	b29a      	uxth	r2, r3
 801c564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c566:	889b      	ldrh	r3, [r3, #4]
 801c568:	b29b      	uxth	r3, r3
 801c56a:	429a      	cmp	r2, r3
 801c56c:	d002      	beq.n	801c574 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801c56e:	2300      	movs	r3, #0
 801c570:	623b      	str	r3, [r7, #32]
            break;
 801c572:	e007      	b.n	801c584 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801c574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c576:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801c578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c57a:	681b      	ldr	r3, [r3, #0]
 801c57c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c580:	2b00      	cmp	r3, #0
 801c582:	d1e9      	bne.n	801c558 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801c584:	6a3b      	ldr	r3, [r7, #32]
 801c586:	2b00      	cmp	r3, #0
 801c588:	d022      	beq.n	801c5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801c58a:	68fb      	ldr	r3, [r7, #12]
 801c58c:	685b      	ldr	r3, [r3, #4]
 801c58e:	2b00      	cmp	r3, #0
 801c590:	d106      	bne.n	801c5a0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801c592:	4b15      	ldr	r3, [pc, #84]	@ (801c5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c594:	f240 12df 	movw	r2, #479	@ 0x1df
 801c598:	4917      	ldr	r1, [pc, #92]	@ (801c5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c59a:	4815      	ldr	r0, [pc, #84]	@ (801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c59c:	f001 fe9e 	bl	801e2dc <iprintf>
          LWIP_ASSERT("sanity check",
 801c5a0:	68fb      	ldr	r3, [r7, #12]
 801c5a2:	685b      	ldr	r3, [r3, #4]
 801c5a4:	685b      	ldr	r3, [r3, #4]
 801c5a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c5a8:	429a      	cmp	r2, r3
 801c5aa:	d106      	bne.n	801c5ba <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801c5ac:	4b0e      	ldr	r3, [pc, #56]	@ (801c5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c5ae:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801c5b2:	4911      	ldr	r1, [pc, #68]	@ (801c5f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c5b4:	480e      	ldr	r0, [pc, #56]	@ (801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c5b6:	f001 fe91 	bl	801e2dc <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801c5ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5bc:	681b      	ldr	r3, [r3, #0]
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	d006      	beq.n	801c5d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801c5c2:	4b09      	ldr	r3, [pc, #36]	@ (801c5e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c5c4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801c5c8:	490c      	ldr	r1, [pc, #48]	@ (801c5fc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801c5ca:	4809      	ldr	r0, [pc, #36]	@ (801c5f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c5cc:	f001 fe86 	bl	801e2dc <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801c5d0:	6a3b      	ldr	r3, [r7, #32]
 801c5d2:	2b00      	cmp	r3, #0
 801c5d4:	bf14      	ite	ne
 801c5d6:	2301      	movne	r3, #1
 801c5d8:	2300      	moveq	r3, #0
 801c5da:	b2db      	uxtb	r3, r3
 801c5dc:	e000      	b.n	801c5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801c5de:	2300      	movs	r3, #0
}
 801c5e0:	4618      	mov	r0, r3
 801c5e2:	3730      	adds	r7, #48	@ 0x30
 801c5e4:	46bd      	mov	sp, r7
 801c5e6:	bd80      	pop	{r7, pc}
 801c5e8:	08025820 	.word	0x08025820
 801c5ec:	08025904 	.word	0x08025904
 801c5f0:	08025868 	.word	0x08025868
 801c5f4:	08025924 	.word	0x08025924
 801c5f8:	0802595c 	.word	0x0802595c
 801c5fc:	0802596c 	.word	0x0802596c

0801c600 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801c600:	b580      	push	{r7, lr}
 801c602:	b08e      	sub	sp, #56	@ 0x38
 801c604:	af00      	add	r7, sp, #0
 801c606:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801c608:	687b      	ldr	r3, [r7, #4]
 801c60a:	685b      	ldr	r3, [r3, #4]
 801c60c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801c60e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c610:	781b      	ldrb	r3, [r3, #0]
 801c612:	f003 030f 	and.w	r3, r3, #15
 801c616:	b2db      	uxtb	r3, r3
 801c618:	009b      	lsls	r3, r3, #2
 801c61a:	b2db      	uxtb	r3, r3
 801c61c:	2b14      	cmp	r3, #20
 801c61e:	f040 8171 	bne.w	801c904 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801c622:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c624:	88db      	ldrh	r3, [r3, #6]
 801c626:	b29b      	uxth	r3, r3
 801c628:	4618      	mov	r0, r3
 801c62a:	f7f2 fee9 	bl	800f400 <lwip_htons>
 801c62e:	4603      	mov	r3, r0
 801c630:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c634:	b29b      	uxth	r3, r3
 801c636:	00db      	lsls	r3, r3, #3
 801c638:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c63a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c63c:	885b      	ldrh	r3, [r3, #2]
 801c63e:	b29b      	uxth	r3, r3
 801c640:	4618      	mov	r0, r3
 801c642:	f7f2 fedd 	bl	800f400 <lwip_htons>
 801c646:	4603      	mov	r3, r0
 801c648:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801c64a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c64c:	781b      	ldrb	r3, [r3, #0]
 801c64e:	f003 030f 	and.w	r3, r3, #15
 801c652:	b2db      	uxtb	r3, r3
 801c654:	009b      	lsls	r3, r3, #2
 801c656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801c65a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c65e:	b29b      	uxth	r3, r3
 801c660:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c662:	429a      	cmp	r2, r3
 801c664:	f0c0 8150 	bcc.w	801c908 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801c668:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c66c:	b29b      	uxth	r3, r3
 801c66e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c670:	1ad3      	subs	r3, r2, r3
 801c672:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801c674:	6878      	ldr	r0, [r7, #4]
 801c676:	f7f4 fe3d 	bl	80112f4 <pbuf_clen>
 801c67a:	4603      	mov	r3, r0
 801c67c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c67e:	4b8c      	ldr	r3, [pc, #560]	@ (801c8b0 <ip4_reass+0x2b0>)
 801c680:	881b      	ldrh	r3, [r3, #0]
 801c682:	461a      	mov	r2, r3
 801c684:	8c3b      	ldrh	r3, [r7, #32]
 801c686:	4413      	add	r3, r2
 801c688:	2b0a      	cmp	r3, #10
 801c68a:	dd10      	ble.n	801c6ae <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c68c:	8c3b      	ldrh	r3, [r7, #32]
 801c68e:	4619      	mov	r1, r3
 801c690:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c692:	f7ff fd81 	bl	801c198 <ip_reass_remove_oldest_datagram>
 801c696:	4603      	mov	r3, r0
 801c698:	2b00      	cmp	r3, #0
 801c69a:	f000 8137 	beq.w	801c90c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801c69e:	4b84      	ldr	r3, [pc, #528]	@ (801c8b0 <ip4_reass+0x2b0>)
 801c6a0:	881b      	ldrh	r3, [r3, #0]
 801c6a2:	461a      	mov	r2, r3
 801c6a4:	8c3b      	ldrh	r3, [r7, #32]
 801c6a6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c6a8:	2b0a      	cmp	r3, #10
 801c6aa:	f300 812f 	bgt.w	801c90c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c6ae:	4b81      	ldr	r3, [pc, #516]	@ (801c8b4 <ip4_reass+0x2b4>)
 801c6b0:	681b      	ldr	r3, [r3, #0]
 801c6b2:	633b      	str	r3, [r7, #48]	@ 0x30
 801c6b4:	e015      	b.n	801c6e2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6b8:	695a      	ldr	r2, [r3, #20]
 801c6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6bc:	68db      	ldr	r3, [r3, #12]
 801c6be:	429a      	cmp	r2, r3
 801c6c0:	d10c      	bne.n	801c6dc <ip4_reass+0xdc>
 801c6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6c4:	699a      	ldr	r2, [r3, #24]
 801c6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6c8:	691b      	ldr	r3, [r3, #16]
 801c6ca:	429a      	cmp	r2, r3
 801c6cc:	d106      	bne.n	801c6dc <ip4_reass+0xdc>
 801c6ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6d0:	899a      	ldrh	r2, [r3, #12]
 801c6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c6d4:	889b      	ldrh	r3, [r3, #4]
 801c6d6:	b29b      	uxth	r3, r3
 801c6d8:	429a      	cmp	r2, r3
 801c6da:	d006      	beq.n	801c6ea <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6de:	681b      	ldr	r3, [r3, #0]
 801c6e0:	633b      	str	r3, [r7, #48]	@ 0x30
 801c6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6e4:	2b00      	cmp	r3, #0
 801c6e6:	d1e6      	bne.n	801c6b6 <ip4_reass+0xb6>
 801c6e8:	e000      	b.n	801c6ec <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801c6ea:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801c6ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c6ee:	2b00      	cmp	r3, #0
 801c6f0:	d109      	bne.n	801c706 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801c6f2:	8c3b      	ldrh	r3, [r7, #32]
 801c6f4:	4619      	mov	r1, r3
 801c6f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c6f8:	f7ff fdb0 	bl	801c25c <ip_reass_enqueue_new_datagram>
 801c6fc:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801c6fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c700:	2b00      	cmp	r3, #0
 801c702:	d11c      	bne.n	801c73e <ip4_reass+0x13e>
      goto nullreturn;
 801c704:	e105      	b.n	801c912 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c708:	88db      	ldrh	r3, [r3, #6]
 801c70a:	b29b      	uxth	r3, r3
 801c70c:	4618      	mov	r0, r3
 801c70e:	f7f2 fe77 	bl	800f400 <lwip_htons>
 801c712:	4603      	mov	r3, r0
 801c714:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c718:	2b00      	cmp	r3, #0
 801c71a:	d110      	bne.n	801c73e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c71e:	89db      	ldrh	r3, [r3, #14]
 801c720:	4618      	mov	r0, r3
 801c722:	f7f2 fe6d 	bl	800f400 <lwip_htons>
 801c726:	4603      	mov	r3, r0
 801c728:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c72c:	2b00      	cmp	r3, #0
 801c72e:	d006      	beq.n	801c73e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c732:	3308      	adds	r3, #8
 801c734:	2214      	movs	r2, #20
 801c736:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c738:	4618      	mov	r0, r3
 801c73a:	f001 ff70 	bl	801e61e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c740:	88db      	ldrh	r3, [r3, #6]
 801c742:	b29b      	uxth	r3, r3
 801c744:	f003 0320 	and.w	r3, r3, #32
 801c748:	2b00      	cmp	r3, #0
 801c74a:	bf0c      	ite	eq
 801c74c:	2301      	moveq	r3, #1
 801c74e:	2300      	movne	r3, #0
 801c750:	b2db      	uxtb	r3, r3
 801c752:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801c754:	69fb      	ldr	r3, [r7, #28]
 801c756:	2b00      	cmp	r3, #0
 801c758:	d00e      	beq.n	801c778 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801c75a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c75c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c75e:	4413      	add	r3, r2
 801c760:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c762:	8b7a      	ldrh	r2, [r7, #26]
 801c764:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c766:	429a      	cmp	r2, r3
 801c768:	f0c0 80a0 	bcc.w	801c8ac <ip4_reass+0x2ac>
 801c76c:	8b7b      	ldrh	r3, [r7, #26]
 801c76e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801c772:	4293      	cmp	r3, r2
 801c774:	f200 809a 	bhi.w	801c8ac <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c778:	69fa      	ldr	r2, [r7, #28]
 801c77a:	6879      	ldr	r1, [r7, #4]
 801c77c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c77e:	f7ff fdd5 	bl	801c32c <ip_reass_chain_frag_into_datagram_and_validate>
 801c782:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c784:	697b      	ldr	r3, [r7, #20]
 801c786:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c78a:	f000 809b 	beq.w	801c8c4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c78e:	4b48      	ldr	r3, [pc, #288]	@ (801c8b0 <ip4_reass+0x2b0>)
 801c790:	881a      	ldrh	r2, [r3, #0]
 801c792:	8c3b      	ldrh	r3, [r7, #32]
 801c794:	4413      	add	r3, r2
 801c796:	b29a      	uxth	r2, r3
 801c798:	4b45      	ldr	r3, [pc, #276]	@ (801c8b0 <ip4_reass+0x2b0>)
 801c79a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c79c:	69fb      	ldr	r3, [r7, #28]
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d00d      	beq.n	801c7be <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c7a2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c7a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c7a6:	4413      	add	r3, r2
 801c7a8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7ac:	8a7a      	ldrh	r2, [r7, #18]
 801c7ae:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7b2:	7f9b      	ldrb	r3, [r3, #30]
 801c7b4:	f043 0301 	orr.w	r3, r3, #1
 801c7b8:	b2da      	uxtb	r2, r3
 801c7ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7bc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c7be:	697b      	ldr	r3, [r7, #20]
 801c7c0:	2b01      	cmp	r3, #1
 801c7c2:	d171      	bne.n	801c8a8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c7c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7c6:	8b9b      	ldrh	r3, [r3, #28]
 801c7c8:	3314      	adds	r3, #20
 801c7ca:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c7cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7ce:	685b      	ldr	r3, [r3, #4]
 801c7d0:	685b      	ldr	r3, [r3, #4]
 801c7d2:	681b      	ldr	r3, [r3, #0]
 801c7d4:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c7d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7d8:	685b      	ldr	r3, [r3, #4]
 801c7da:	685b      	ldr	r3, [r3, #4]
 801c7dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c7de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c7e0:	3308      	adds	r3, #8
 801c7e2:	2214      	movs	r2, #20
 801c7e4:	4619      	mov	r1, r3
 801c7e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c7e8:	f001 ff19 	bl	801e61e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c7ec:	8a3b      	ldrh	r3, [r7, #16]
 801c7ee:	4618      	mov	r0, r3
 801c7f0:	f7f2 fe06 	bl	800f400 <lwip_htons>
 801c7f4:	4603      	mov	r3, r0
 801c7f6:	461a      	mov	r2, r3
 801c7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7fa:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c7fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7fe:	2200      	movs	r2, #0
 801c800:	719a      	strb	r2, [r3, #6]
 801c802:	2200      	movs	r2, #0
 801c804:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c808:	2200      	movs	r2, #0
 801c80a:	729a      	strb	r2, [r3, #10]
 801c80c:	2200      	movs	r2, #0
 801c80e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c812:	685b      	ldr	r3, [r3, #4]
 801c814:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c816:	e00d      	b.n	801c834 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c818:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c81a:	685b      	ldr	r3, [r3, #4]
 801c81c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c81e:	2114      	movs	r1, #20
 801c820:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801c822:	f7f4 fc53 	bl	80110cc <pbuf_remove_header>
      pbuf_cat(p, r);
 801c826:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c828:	6878      	ldr	r0, [r7, #4]
 801c82a:	f7f4 fda3 	bl	8011374 <pbuf_cat>
      r = iprh->next_pbuf;
 801c82e:	68fb      	ldr	r3, [r7, #12]
 801c830:	681b      	ldr	r3, [r3, #0]
 801c832:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801c834:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c836:	2b00      	cmp	r3, #0
 801c838:	d1ee      	bne.n	801c818 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c83a:	4b1e      	ldr	r3, [pc, #120]	@ (801c8b4 <ip4_reass+0x2b4>)
 801c83c:	681b      	ldr	r3, [r3, #0]
 801c83e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c840:	429a      	cmp	r2, r3
 801c842:	d102      	bne.n	801c84a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c844:	2300      	movs	r3, #0
 801c846:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c848:	e010      	b.n	801c86c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c84a:	4b1a      	ldr	r3, [pc, #104]	@ (801c8b4 <ip4_reass+0x2b4>)
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c850:	e007      	b.n	801c862 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c854:	681b      	ldr	r3, [r3, #0]
 801c856:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c858:	429a      	cmp	r2, r3
 801c85a:	d006      	beq.n	801c86a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c85c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c85e:	681b      	ldr	r3, [r3, #0]
 801c860:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c864:	2b00      	cmp	r3, #0
 801c866:	d1f4      	bne.n	801c852 <ip4_reass+0x252>
 801c868:	e000      	b.n	801c86c <ip4_reass+0x26c>
          break;
 801c86a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c86c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c86e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c870:	f7ff fd2e 	bl	801c2d0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c874:	6878      	ldr	r0, [r7, #4]
 801c876:	f7f4 fd3d 	bl	80112f4 <pbuf_clen>
 801c87a:	4603      	mov	r3, r0
 801c87c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c87e:	4b0c      	ldr	r3, [pc, #48]	@ (801c8b0 <ip4_reass+0x2b0>)
 801c880:	881b      	ldrh	r3, [r3, #0]
 801c882:	8c3a      	ldrh	r2, [r7, #32]
 801c884:	429a      	cmp	r2, r3
 801c886:	d906      	bls.n	801c896 <ip4_reass+0x296>
 801c888:	4b0b      	ldr	r3, [pc, #44]	@ (801c8b8 <ip4_reass+0x2b8>)
 801c88a:	f240 229b 	movw	r2, #667	@ 0x29b
 801c88e:	490b      	ldr	r1, [pc, #44]	@ (801c8bc <ip4_reass+0x2bc>)
 801c890:	480b      	ldr	r0, [pc, #44]	@ (801c8c0 <ip4_reass+0x2c0>)
 801c892:	f001 fd23 	bl	801e2dc <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c896:	4b06      	ldr	r3, [pc, #24]	@ (801c8b0 <ip4_reass+0x2b0>)
 801c898:	881a      	ldrh	r2, [r3, #0]
 801c89a:	8c3b      	ldrh	r3, [r7, #32]
 801c89c:	1ad3      	subs	r3, r2, r3
 801c89e:	b29a      	uxth	r2, r3
 801c8a0:	4b03      	ldr	r3, [pc, #12]	@ (801c8b0 <ip4_reass+0x2b0>)
 801c8a2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	e038      	b.n	801c91a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c8a8:	2300      	movs	r3, #0
 801c8aa:	e036      	b.n	801c91a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c8ac:	bf00      	nop
 801c8ae:	e00a      	b.n	801c8c6 <ip4_reass+0x2c6>
 801c8b0:	20012808 	.word	0x20012808
 801c8b4:	20012804 	.word	0x20012804
 801c8b8:	08025820 	.word	0x08025820
 801c8bc:	08025990 	.word	0x08025990
 801c8c0:	08025868 	.word	0x08025868
    goto nullreturn_ipr;
 801c8c4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8c8:	2b00      	cmp	r3, #0
 801c8ca:	d106      	bne.n	801c8da <ip4_reass+0x2da>
 801c8cc:	4b15      	ldr	r3, [pc, #84]	@ (801c924 <ip4_reass+0x324>)
 801c8ce:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801c8d2:	4915      	ldr	r1, [pc, #84]	@ (801c928 <ip4_reass+0x328>)
 801c8d4:	4815      	ldr	r0, [pc, #84]	@ (801c92c <ip4_reass+0x32c>)
 801c8d6:	f001 fd01 	bl	801e2dc <iprintf>
  if (ipr->p == NULL) {
 801c8da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c8dc:	685b      	ldr	r3, [r3, #4]
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d116      	bne.n	801c910 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c8e2:	4b13      	ldr	r3, [pc, #76]	@ (801c930 <ip4_reass+0x330>)
 801c8e4:	681b      	ldr	r3, [r3, #0]
 801c8e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c8e8:	429a      	cmp	r2, r3
 801c8ea:	d006      	beq.n	801c8fa <ip4_reass+0x2fa>
 801c8ec:	4b0d      	ldr	r3, [pc, #52]	@ (801c924 <ip4_reass+0x324>)
 801c8ee:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801c8f2:	4910      	ldr	r1, [pc, #64]	@ (801c934 <ip4_reass+0x334>)
 801c8f4:	480d      	ldr	r0, [pc, #52]	@ (801c92c <ip4_reass+0x32c>)
 801c8f6:	f001 fcf1 	bl	801e2dc <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c8fa:	2100      	movs	r1, #0
 801c8fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c8fe:	f7ff fce7 	bl	801c2d0 <ip_reass_dequeue_datagram>
 801c902:	e006      	b.n	801c912 <ip4_reass+0x312>
    goto nullreturn;
 801c904:	bf00      	nop
 801c906:	e004      	b.n	801c912 <ip4_reass+0x312>
    goto nullreturn;
 801c908:	bf00      	nop
 801c90a:	e002      	b.n	801c912 <ip4_reass+0x312>
      goto nullreturn;
 801c90c:	bf00      	nop
 801c90e:	e000      	b.n	801c912 <ip4_reass+0x312>
  }

nullreturn:
 801c910:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c912:	6878      	ldr	r0, [r7, #4]
 801c914:	f7f4 fc60 	bl	80111d8 <pbuf_free>
  return NULL;
 801c918:	2300      	movs	r3, #0
}
 801c91a:	4618      	mov	r0, r3
 801c91c:	3738      	adds	r7, #56	@ 0x38
 801c91e:	46bd      	mov	sp, r7
 801c920:	bd80      	pop	{r7, pc}
 801c922:	bf00      	nop
 801c924:	08025820 	.word	0x08025820
 801c928:	080259ac 	.word	0x080259ac
 801c92c:	08025868 	.word	0x08025868
 801c930:	20012804 	.word	0x20012804
 801c934:	080259b8 	.word	0x080259b8

0801c938 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c938:	b580      	push	{r7, lr}
 801c93a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c93c:	2005      	movs	r0, #5
 801c93e:	f7f3 fd25 	bl	801038c <memp_malloc>
 801c942:	4603      	mov	r3, r0
}
 801c944:	4618      	mov	r0, r3
 801c946:	bd80      	pop	{r7, pc}

0801c948 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c948:	b580      	push	{r7, lr}
 801c94a:	b082      	sub	sp, #8
 801c94c:	af00      	add	r7, sp, #0
 801c94e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c950:	687b      	ldr	r3, [r7, #4]
 801c952:	2b00      	cmp	r3, #0
 801c954:	d106      	bne.n	801c964 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c956:	4b07      	ldr	r3, [pc, #28]	@ (801c974 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c958:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801c95c:	4906      	ldr	r1, [pc, #24]	@ (801c978 <ip_frag_free_pbuf_custom_ref+0x30>)
 801c95e:	4807      	ldr	r0, [pc, #28]	@ (801c97c <ip_frag_free_pbuf_custom_ref+0x34>)
 801c960:	f001 fcbc 	bl	801e2dc <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c964:	6879      	ldr	r1, [r7, #4]
 801c966:	2005      	movs	r0, #5
 801c968:	f7f3 fd86 	bl	8010478 <memp_free>
}
 801c96c:	bf00      	nop
 801c96e:	3708      	adds	r7, #8
 801c970:	46bd      	mov	sp, r7
 801c972:	bd80      	pop	{r7, pc}
 801c974:	08025820 	.word	0x08025820
 801c978:	080259d8 	.word	0x080259d8
 801c97c:	08025868 	.word	0x08025868

0801c980 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c980:	b580      	push	{r7, lr}
 801c982:	b084      	sub	sp, #16
 801c984:	af00      	add	r7, sp, #0
 801c986:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c988:	687b      	ldr	r3, [r7, #4]
 801c98a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c98c:	68fb      	ldr	r3, [r7, #12]
 801c98e:	2b00      	cmp	r3, #0
 801c990:	d106      	bne.n	801c9a0 <ipfrag_free_pbuf_custom+0x20>
 801c992:	4b11      	ldr	r3, [pc, #68]	@ (801c9d8 <ipfrag_free_pbuf_custom+0x58>)
 801c994:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801c998:	4910      	ldr	r1, [pc, #64]	@ (801c9dc <ipfrag_free_pbuf_custom+0x5c>)
 801c99a:	4811      	ldr	r0, [pc, #68]	@ (801c9e0 <ipfrag_free_pbuf_custom+0x60>)
 801c99c:	f001 fc9e 	bl	801e2dc <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c9a0:	68fa      	ldr	r2, [r7, #12]
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	429a      	cmp	r2, r3
 801c9a6:	d006      	beq.n	801c9b6 <ipfrag_free_pbuf_custom+0x36>
 801c9a8:	4b0b      	ldr	r3, [pc, #44]	@ (801c9d8 <ipfrag_free_pbuf_custom+0x58>)
 801c9aa:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801c9ae:	490d      	ldr	r1, [pc, #52]	@ (801c9e4 <ipfrag_free_pbuf_custom+0x64>)
 801c9b0:	480b      	ldr	r0, [pc, #44]	@ (801c9e0 <ipfrag_free_pbuf_custom+0x60>)
 801c9b2:	f001 fc93 	bl	801e2dc <iprintf>
  if (pcr->original != NULL) {
 801c9b6:	68fb      	ldr	r3, [r7, #12]
 801c9b8:	695b      	ldr	r3, [r3, #20]
 801c9ba:	2b00      	cmp	r3, #0
 801c9bc:	d004      	beq.n	801c9c8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c9be:	68fb      	ldr	r3, [r7, #12]
 801c9c0:	695b      	ldr	r3, [r3, #20]
 801c9c2:	4618      	mov	r0, r3
 801c9c4:	f7f4 fc08 	bl	80111d8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c9c8:	68f8      	ldr	r0, [r7, #12]
 801c9ca:	f7ff ffbd 	bl	801c948 <ip_frag_free_pbuf_custom_ref>
}
 801c9ce:	bf00      	nop
 801c9d0:	3710      	adds	r7, #16
 801c9d2:	46bd      	mov	sp, r7
 801c9d4:	bd80      	pop	{r7, pc}
 801c9d6:	bf00      	nop
 801c9d8:	08025820 	.word	0x08025820
 801c9dc:	080259e4 	.word	0x080259e4
 801c9e0:	08025868 	.word	0x08025868
 801c9e4:	080259f0 	.word	0x080259f0

0801c9e8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c9e8:	b580      	push	{r7, lr}
 801c9ea:	b094      	sub	sp, #80	@ 0x50
 801c9ec:	af02      	add	r7, sp, #8
 801c9ee:	60f8      	str	r0, [r7, #12]
 801c9f0:	60b9      	str	r1, [r7, #8]
 801c9f2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c9f4:	2300      	movs	r3, #0
 801c9f6:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c9fa:	68bb      	ldr	r3, [r7, #8]
 801c9fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c9fe:	3b14      	subs	r3, #20
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	da00      	bge.n	801ca06 <ip4_frag+0x1e>
 801ca04:	3307      	adds	r3, #7
 801ca06:	10db      	asrs	r3, r3, #3
 801ca08:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801ca0a:	2314      	movs	r3, #20
 801ca0c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801ca0e:	68fb      	ldr	r3, [r7, #12]
 801ca10:	685b      	ldr	r3, [r3, #4]
 801ca12:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801ca14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ca16:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801ca18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca1a:	781b      	ldrb	r3, [r3, #0]
 801ca1c:	f003 030f 	and.w	r3, r3, #15
 801ca20:	b2db      	uxtb	r3, r3
 801ca22:	009b      	lsls	r3, r3, #2
 801ca24:	b2db      	uxtb	r3, r3
 801ca26:	2b14      	cmp	r3, #20
 801ca28:	d002      	beq.n	801ca30 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801ca2a:	f06f 0305 	mvn.w	r3, #5
 801ca2e:	e110      	b.n	801cc52 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801ca30:	68fb      	ldr	r3, [r7, #12]
 801ca32:	895b      	ldrh	r3, [r3, #10]
 801ca34:	2b13      	cmp	r3, #19
 801ca36:	d809      	bhi.n	801ca4c <ip4_frag+0x64>
 801ca38:	4b88      	ldr	r3, [pc, #544]	@ (801cc5c <ip4_frag+0x274>)
 801ca3a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801ca3e:	4988      	ldr	r1, [pc, #544]	@ (801cc60 <ip4_frag+0x278>)
 801ca40:	4888      	ldr	r0, [pc, #544]	@ (801cc64 <ip4_frag+0x27c>)
 801ca42:	f001 fc4b 	bl	801e2dc <iprintf>
 801ca46:	f06f 0305 	mvn.w	r3, #5
 801ca4a:	e102      	b.n	801cc52 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801ca4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca4e:	88db      	ldrh	r3, [r3, #6]
 801ca50:	b29b      	uxth	r3, r3
 801ca52:	4618      	mov	r0, r3
 801ca54:	f7f2 fcd4 	bl	800f400 <lwip_htons>
 801ca58:	4603      	mov	r3, r0
 801ca5a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801ca5c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ca5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ca62:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ca66:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ca68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ca6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ca6e:	68fb      	ldr	r3, [r7, #12]
 801ca70:	891b      	ldrh	r3, [r3, #8]
 801ca72:	3b14      	subs	r3, #20
 801ca74:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801ca78:	e0e1      	b.n	801cc3e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ca7a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ca7c:	00db      	lsls	r3, r3, #3
 801ca7e:	b29b      	uxth	r3, r3
 801ca80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ca84:	4293      	cmp	r3, r2
 801ca86:	bf28      	it	cs
 801ca88:	4613      	movcs	r3, r2
 801ca8a:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ca8c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ca90:	2114      	movs	r1, #20
 801ca92:	200e      	movs	r0, #14
 801ca94:	f7f4 f8bc 	bl	8010c10 <pbuf_alloc>
 801ca98:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801ca9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	f000 80d5 	beq.w	801cc4c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801caa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801caa4:	895b      	ldrh	r3, [r3, #10]
 801caa6:	2b13      	cmp	r3, #19
 801caa8:	d806      	bhi.n	801cab8 <ip4_frag+0xd0>
 801caaa:	4b6c      	ldr	r3, [pc, #432]	@ (801cc5c <ip4_frag+0x274>)
 801caac:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801cab0:	496d      	ldr	r1, [pc, #436]	@ (801cc68 <ip4_frag+0x280>)
 801cab2:	486c      	ldr	r0, [pc, #432]	@ (801cc64 <ip4_frag+0x27c>)
 801cab4:	f001 fc12 	bl	801e2dc <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801cab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801caba:	685b      	ldr	r3, [r3, #4]
 801cabc:	2214      	movs	r2, #20
 801cabe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801cac0:	4618      	mov	r0, r3
 801cac2:	f001 fdac 	bl	801e61e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801cac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801cac8:	685b      	ldr	r3, [r3, #4]
 801caca:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801cacc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cace:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801cad2:	e064      	b.n	801cb9e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801cad4:	68fb      	ldr	r3, [r7, #12]
 801cad6:	895a      	ldrh	r2, [r3, #10]
 801cad8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801cada:	1ad3      	subs	r3, r2, r3
 801cadc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801cade:	68fb      	ldr	r3, [r7, #12]
 801cae0:	895b      	ldrh	r3, [r3, #10]
 801cae2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801cae4:	429a      	cmp	r2, r3
 801cae6:	d906      	bls.n	801caf6 <ip4_frag+0x10e>
 801cae8:	4b5c      	ldr	r3, [pc, #368]	@ (801cc5c <ip4_frag+0x274>)
 801caea:	f240 322d 	movw	r2, #813	@ 0x32d
 801caee:	495f      	ldr	r1, [pc, #380]	@ (801cc6c <ip4_frag+0x284>)
 801caf0:	485c      	ldr	r0, [pc, #368]	@ (801cc64 <ip4_frag+0x27c>)
 801caf2:	f001 fbf3 	bl	801e2dc <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801caf6:	8bfa      	ldrh	r2, [r7, #30]
 801caf8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cafc:	4293      	cmp	r3, r2
 801cafe:	bf28      	it	cs
 801cb00:	4613      	movcs	r3, r2
 801cb02:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801cb06:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d105      	bne.n	801cb1a <ip4_frag+0x132>
        poff = 0;
 801cb0e:	2300      	movs	r3, #0
 801cb10:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801cb12:	68fb      	ldr	r3, [r7, #12]
 801cb14:	681b      	ldr	r3, [r3, #0]
 801cb16:	60fb      	str	r3, [r7, #12]
        continue;
 801cb18:	e041      	b.n	801cb9e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801cb1a:	f7ff ff0d 	bl	801c938 <ip_frag_alloc_pbuf_custom_ref>
 801cb1e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801cb20:	69bb      	ldr	r3, [r7, #24]
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	d103      	bne.n	801cb2e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801cb26:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cb28:	f7f4 fb56 	bl	80111d8 <pbuf_free>
        goto memerr;
 801cb2c:	e08f      	b.n	801cc4e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cb2e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801cb30:	68fb      	ldr	r3, [r7, #12]
 801cb32:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cb34:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801cb36:	4413      	add	r3, r2
 801cb38:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801cb3c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801cb40:	9201      	str	r2, [sp, #4]
 801cb42:	9300      	str	r3, [sp, #0]
 801cb44:	4603      	mov	r3, r0
 801cb46:	2241      	movs	r2, #65	@ 0x41
 801cb48:	2000      	movs	r0, #0
 801cb4a:	f7f4 f98b 	bl	8010e64 <pbuf_alloced_custom>
 801cb4e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801cb50:	697b      	ldr	r3, [r7, #20]
 801cb52:	2b00      	cmp	r3, #0
 801cb54:	d106      	bne.n	801cb64 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801cb56:	69b8      	ldr	r0, [r7, #24]
 801cb58:	f7ff fef6 	bl	801c948 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801cb5c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cb5e:	f7f4 fb3b 	bl	80111d8 <pbuf_free>
        goto memerr;
 801cb62:	e074      	b.n	801cc4e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801cb64:	68f8      	ldr	r0, [r7, #12]
 801cb66:	f7f4 fbdd 	bl	8011324 <pbuf_ref>
      pcr->original = p;
 801cb6a:	69bb      	ldr	r3, [r7, #24]
 801cb6c:	68fa      	ldr	r2, [r7, #12]
 801cb6e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801cb70:	69bb      	ldr	r3, [r7, #24]
 801cb72:	4a3f      	ldr	r2, [pc, #252]	@ (801cc70 <ip4_frag+0x288>)
 801cb74:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801cb76:	6979      	ldr	r1, [r7, #20]
 801cb78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cb7a:	f7f4 fbfb 	bl	8011374 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801cb7e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801cb82:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cb86:	1ad3      	subs	r3, r2, r3
 801cb88:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801cb8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cb90:	2b00      	cmp	r3, #0
 801cb92:	d004      	beq.n	801cb9e <ip4_frag+0x1b6>
        poff = 0;
 801cb94:	2300      	movs	r3, #0
 801cb96:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801cb98:	68fb      	ldr	r3, [r7, #12]
 801cb9a:	681b      	ldr	r3, [r3, #0]
 801cb9c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801cb9e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d196      	bne.n	801cad4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801cba6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801cba8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cbac:	4413      	add	r3, r2
 801cbae:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801cbb0:	68bb      	ldr	r3, [r7, #8]
 801cbb2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801cbb4:	f1a3 0213 	sub.w	r2, r3, #19
 801cbb8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801cbbc:	429a      	cmp	r2, r3
 801cbbe:	bfcc      	ite	gt
 801cbc0:	2301      	movgt	r3, #1
 801cbc2:	2300      	movle	r3, #0
 801cbc4:	b2db      	uxtb	r3, r3
 801cbc6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801cbc8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801cbcc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cbd0:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801cbd2:	6a3b      	ldr	r3, [r7, #32]
 801cbd4:	2b00      	cmp	r3, #0
 801cbd6:	d002      	beq.n	801cbde <ip4_frag+0x1f6>
 801cbd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cbda:	2b00      	cmp	r3, #0
 801cbdc:	d003      	beq.n	801cbe6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801cbde:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cbe0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801cbe4:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801cbe6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cbe8:	4618      	mov	r0, r3
 801cbea:	f7f2 fc09 	bl	800f400 <lwip_htons>
 801cbee:	4603      	mov	r3, r0
 801cbf0:	461a      	mov	r2, r3
 801cbf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbf4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801cbf6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cbf8:	3314      	adds	r3, #20
 801cbfa:	b29b      	uxth	r3, r3
 801cbfc:	4618      	mov	r0, r3
 801cbfe:	f7f2 fbff 	bl	800f400 <lwip_htons>
 801cc02:	4603      	mov	r3, r0
 801cc04:	461a      	mov	r2, r3
 801cc06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc08:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801cc0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc0c:	2200      	movs	r2, #0
 801cc0e:	729a      	strb	r2, [r3, #10]
 801cc10:	2200      	movs	r2, #0
 801cc12:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801cc14:	68bb      	ldr	r3, [r7, #8]
 801cc16:	695b      	ldr	r3, [r3, #20]
 801cc18:	687a      	ldr	r2, [r7, #4]
 801cc1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801cc1c:	68b8      	ldr	r0, [r7, #8]
 801cc1e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801cc20:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cc22:	f7f4 fad9 	bl	80111d8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801cc26:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801cc2a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cc2c:	1ad3      	subs	r3, r2, r3
 801cc2e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801cc32:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801cc36:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cc38:	4413      	add	r3, r2
 801cc3a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801cc3e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801cc42:	2b00      	cmp	r3, #0
 801cc44:	f47f af19 	bne.w	801ca7a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801cc48:	2300      	movs	r3, #0
 801cc4a:	e002      	b.n	801cc52 <ip4_frag+0x26a>
      goto memerr;
 801cc4c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801cc4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801cc52:	4618      	mov	r0, r3
 801cc54:	3748      	adds	r7, #72	@ 0x48
 801cc56:	46bd      	mov	sp, r7
 801cc58:	bd80      	pop	{r7, pc}
 801cc5a:	bf00      	nop
 801cc5c:	08025820 	.word	0x08025820
 801cc60:	080259fc 	.word	0x080259fc
 801cc64:	08025868 	.word	0x08025868
 801cc68:	08025a18 	.word	0x08025a18
 801cc6c:	08025a38 	.word	0x08025a38
 801cc70:	0801c981 	.word	0x0801c981

0801cc74 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801cc74:	b580      	push	{r7, lr}
 801cc76:	b086      	sub	sp, #24
 801cc78:	af00      	add	r7, sp, #0
 801cc7a:	6078      	str	r0, [r7, #4]
 801cc7c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801cc7e:	230e      	movs	r3, #14
 801cc80:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801cc82:	687b      	ldr	r3, [r7, #4]
 801cc84:	895b      	ldrh	r3, [r3, #10]
 801cc86:	2b0e      	cmp	r3, #14
 801cc88:	d96e      	bls.n	801cd68 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801cc8a:	687b      	ldr	r3, [r7, #4]
 801cc8c:	7bdb      	ldrb	r3, [r3, #15]
 801cc8e:	2b00      	cmp	r3, #0
 801cc90:	d106      	bne.n	801cca0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801cc92:	683b      	ldr	r3, [r7, #0]
 801cc94:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801cc98:	3301      	adds	r3, #1
 801cc9a:	b2da      	uxtb	r2, r3
 801cc9c:	687b      	ldr	r3, [r7, #4]
 801cc9e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801cca0:	687b      	ldr	r3, [r7, #4]
 801cca2:	685b      	ldr	r3, [r3, #4]
 801cca4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801cca6:	693b      	ldr	r3, [r7, #16]
 801cca8:	7b1a      	ldrb	r2, [r3, #12]
 801ccaa:	7b5b      	ldrb	r3, [r3, #13]
 801ccac:	021b      	lsls	r3, r3, #8
 801ccae:	4313      	orrs	r3, r2
 801ccb0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801ccb2:	693b      	ldr	r3, [r7, #16]
 801ccb4:	781b      	ldrb	r3, [r3, #0]
 801ccb6:	f003 0301 	and.w	r3, r3, #1
 801ccba:	2b00      	cmp	r3, #0
 801ccbc:	d023      	beq.n	801cd06 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801ccbe:	693b      	ldr	r3, [r7, #16]
 801ccc0:	781b      	ldrb	r3, [r3, #0]
 801ccc2:	2b01      	cmp	r3, #1
 801ccc4:	d10f      	bne.n	801cce6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ccc6:	693b      	ldr	r3, [r7, #16]
 801ccc8:	785b      	ldrb	r3, [r3, #1]
 801ccca:	2b00      	cmp	r3, #0
 801cccc:	d11b      	bne.n	801cd06 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801ccce:	693b      	ldr	r3, [r7, #16]
 801ccd0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801ccd2:	2b5e      	cmp	r3, #94	@ 0x5e
 801ccd4:	d117      	bne.n	801cd06 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801ccd6:	687b      	ldr	r3, [r7, #4]
 801ccd8:	7b5b      	ldrb	r3, [r3, #13]
 801ccda:	f043 0310 	orr.w	r3, r3, #16
 801ccde:	b2da      	uxtb	r2, r3
 801cce0:	687b      	ldr	r3, [r7, #4]
 801cce2:	735a      	strb	r2, [r3, #13]
 801cce4:	e00f      	b.n	801cd06 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801cce6:	693b      	ldr	r3, [r7, #16]
 801cce8:	2206      	movs	r2, #6
 801ccea:	4928      	ldr	r1, [pc, #160]	@ (801cd8c <ethernet_input+0x118>)
 801ccec:	4618      	mov	r0, r3
 801ccee:	f001 fb6a 	bl	801e3c6 <memcmp>
 801ccf2:	4603      	mov	r3, r0
 801ccf4:	2b00      	cmp	r3, #0
 801ccf6:	d106      	bne.n	801cd06 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	7b5b      	ldrb	r3, [r3, #13]
 801ccfc:	f043 0308 	orr.w	r3, r3, #8
 801cd00:	b2da      	uxtb	r2, r3
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801cd06:	89fb      	ldrh	r3, [r7, #14]
 801cd08:	2b08      	cmp	r3, #8
 801cd0a:	d003      	beq.n	801cd14 <ethernet_input+0xa0>
 801cd0c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801cd10:	d014      	beq.n	801cd3c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801cd12:	e032      	b.n	801cd7a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cd14:	683b      	ldr	r3, [r7, #0]
 801cd16:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801cd1a:	f003 0308 	and.w	r3, r3, #8
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	d024      	beq.n	801cd6c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801cd22:	8afb      	ldrh	r3, [r7, #22]
 801cd24:	4619      	mov	r1, r3
 801cd26:	6878      	ldr	r0, [r7, #4]
 801cd28:	f7f4 f9d0 	bl	80110cc <pbuf_remove_header>
 801cd2c:	4603      	mov	r3, r0
 801cd2e:	2b00      	cmp	r3, #0
 801cd30:	d11e      	bne.n	801cd70 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801cd32:	6839      	ldr	r1, [r7, #0]
 801cd34:	6878      	ldr	r0, [r7, #4]
 801cd36:	f7fe fdd9 	bl	801b8ec <ip4_input>
      break;
 801cd3a:	e013      	b.n	801cd64 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801cd3c:	683b      	ldr	r3, [r7, #0]
 801cd3e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801cd42:	f003 0308 	and.w	r3, r3, #8
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	d014      	beq.n	801cd74 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801cd4a:	8afb      	ldrh	r3, [r7, #22]
 801cd4c:	4619      	mov	r1, r3
 801cd4e:	6878      	ldr	r0, [r7, #4]
 801cd50:	f7f4 f9bc 	bl	80110cc <pbuf_remove_header>
 801cd54:	4603      	mov	r3, r0
 801cd56:	2b00      	cmp	r3, #0
 801cd58:	d10e      	bne.n	801cd78 <ethernet_input+0x104>
        etharp_input(p, netif);
 801cd5a:	6839      	ldr	r1, [r7, #0]
 801cd5c:	6878      	ldr	r0, [r7, #4]
 801cd5e:	f7fd ff75 	bl	801ac4c <etharp_input>
      break;
 801cd62:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801cd64:	2300      	movs	r3, #0
 801cd66:	e00c      	b.n	801cd82 <ethernet_input+0x10e>
    goto free_and_return;
 801cd68:	bf00      	nop
 801cd6a:	e006      	b.n	801cd7a <ethernet_input+0x106>
        goto free_and_return;
 801cd6c:	bf00      	nop
 801cd6e:	e004      	b.n	801cd7a <ethernet_input+0x106>
        goto free_and_return;
 801cd70:	bf00      	nop
 801cd72:	e002      	b.n	801cd7a <ethernet_input+0x106>
        goto free_and_return;
 801cd74:	bf00      	nop
 801cd76:	e000      	b.n	801cd7a <ethernet_input+0x106>
        goto free_and_return;
 801cd78:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801cd7a:	6878      	ldr	r0, [r7, #4]
 801cd7c:	f7f4 fa2c 	bl	80111d8 <pbuf_free>
  return ERR_OK;
 801cd80:	2300      	movs	r3, #0
}
 801cd82:	4618      	mov	r0, r3
 801cd84:	3718      	adds	r7, #24
 801cd86:	46bd      	mov	sp, r7
 801cd88:	bd80      	pop	{r7, pc}
 801cd8a:	bf00      	nop
 801cd8c:	08025d78 	.word	0x08025d78

0801cd90 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801cd90:	b580      	push	{r7, lr}
 801cd92:	b086      	sub	sp, #24
 801cd94:	af00      	add	r7, sp, #0
 801cd96:	60f8      	str	r0, [r7, #12]
 801cd98:	60b9      	str	r1, [r7, #8]
 801cd9a:	607a      	str	r2, [r7, #4]
 801cd9c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801cd9e:	8c3b      	ldrh	r3, [r7, #32]
 801cda0:	4618      	mov	r0, r3
 801cda2:	f7f2 fb2d 	bl	800f400 <lwip_htons>
 801cda6:	4603      	mov	r3, r0
 801cda8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801cdaa:	210e      	movs	r1, #14
 801cdac:	68b8      	ldr	r0, [r7, #8]
 801cdae:	f7f4 f97d 	bl	80110ac <pbuf_add_header>
 801cdb2:	4603      	mov	r3, r0
 801cdb4:	2b00      	cmp	r3, #0
 801cdb6:	d125      	bne.n	801ce04 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801cdb8:	68bb      	ldr	r3, [r7, #8]
 801cdba:	685b      	ldr	r3, [r3, #4]
 801cdbc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801cdbe:	693b      	ldr	r3, [r7, #16]
 801cdc0:	8afa      	ldrh	r2, [r7, #22]
 801cdc2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801cdc4:	693b      	ldr	r3, [r7, #16]
 801cdc6:	2206      	movs	r2, #6
 801cdc8:	6839      	ldr	r1, [r7, #0]
 801cdca:	4618      	mov	r0, r3
 801cdcc:	f001 fc27 	bl	801e61e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801cdd0:	693b      	ldr	r3, [r7, #16]
 801cdd2:	3306      	adds	r3, #6
 801cdd4:	2206      	movs	r2, #6
 801cdd6:	6879      	ldr	r1, [r7, #4]
 801cdd8:	4618      	mov	r0, r3
 801cdda:	f001 fc20 	bl	801e61e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801cdde:	68fb      	ldr	r3, [r7, #12]
 801cde0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801cde4:	2b06      	cmp	r3, #6
 801cde6:	d006      	beq.n	801cdf6 <ethernet_output+0x66>
 801cde8:	4b0a      	ldr	r3, [pc, #40]	@ (801ce14 <ethernet_output+0x84>)
 801cdea:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801cdee:	490a      	ldr	r1, [pc, #40]	@ (801ce18 <ethernet_output+0x88>)
 801cdf0:	480a      	ldr	r0, [pc, #40]	@ (801ce1c <ethernet_output+0x8c>)
 801cdf2:	f001 fa73 	bl	801e2dc <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801cdf6:	68fb      	ldr	r3, [r7, #12]
 801cdf8:	699b      	ldr	r3, [r3, #24]
 801cdfa:	68b9      	ldr	r1, [r7, #8]
 801cdfc:	68f8      	ldr	r0, [r7, #12]
 801cdfe:	4798      	blx	r3
 801ce00:	4603      	mov	r3, r0
 801ce02:	e002      	b.n	801ce0a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801ce04:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801ce06:	f06f 0301 	mvn.w	r3, #1
}
 801ce0a:	4618      	mov	r0, r3
 801ce0c:	3718      	adds	r7, #24
 801ce0e:	46bd      	mov	sp, r7
 801ce10:	bd80      	pop	{r7, pc}
 801ce12:	bf00      	nop
 801ce14:	08025a48 	.word	0x08025a48
 801ce18:	08025a80 	.word	0x08025a80
 801ce1c:	08025ab4 	.word	0x08025ab4

0801ce20 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ce20:	b580      	push	{r7, lr}
 801ce22:	b082      	sub	sp, #8
 801ce24:	af00      	add	r7, sp, #0
 801ce26:	6078      	str	r0, [r7, #4]
 801ce28:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801ce2a:	683b      	ldr	r3, [r7, #0]
 801ce2c:	2200      	movs	r2, #0
 801ce2e:	2104      	movs	r1, #4
 801ce30:	4618      	mov	r0, r3
 801ce32:	f7ec f9fd 	bl	8009230 <osMessageQueueNew>
 801ce36:	4602      	mov	r2, r0
 801ce38:	687b      	ldr	r3, [r7, #4]
 801ce3a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ce3c:	687b      	ldr	r3, [r7, #4]
 801ce3e:	681b      	ldr	r3, [r3, #0]
 801ce40:	2b00      	cmp	r3, #0
 801ce42:	d102      	bne.n	801ce4a <sys_mbox_new+0x2a>
    return ERR_MEM;
 801ce44:	f04f 33ff 	mov.w	r3, #4294967295
 801ce48:	e000      	b.n	801ce4c <sys_mbox_new+0x2c>

  return ERR_OK;
 801ce4a:	2300      	movs	r3, #0
}
 801ce4c:	4618      	mov	r0, r3
 801ce4e:	3708      	adds	r7, #8
 801ce50:	46bd      	mov	sp, r7
 801ce52:	bd80      	pop	{r7, pc}

0801ce54 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801ce54:	b580      	push	{r7, lr}
 801ce56:	b082      	sub	sp, #8
 801ce58:	af00      	add	r7, sp, #0
 801ce5a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	681b      	ldr	r3, [r3, #0]
 801ce60:	4618      	mov	r0, r3
 801ce62:	f7ec fb17 	bl	8009494 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801ce66:	687b      	ldr	r3, [r7, #4]
 801ce68:	681b      	ldr	r3, [r3, #0]
 801ce6a:	4618      	mov	r0, r3
 801ce6c:	f7ec fb32 	bl	80094d4 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801ce70:	bf00      	nop
 801ce72:	3708      	adds	r7, #8
 801ce74:	46bd      	mov	sp, r7
 801ce76:	bd80      	pop	{r7, pc}

0801ce78 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801ce78:	b580      	push	{r7, lr}
 801ce7a:	b084      	sub	sp, #16
 801ce7c:	af00      	add	r7, sp, #0
 801ce7e:	6078      	str	r0, [r7, #4]
 801ce80:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	6818      	ldr	r0, [r3, #0]
 801ce86:	4639      	mov	r1, r7
 801ce88:	2300      	movs	r3, #0
 801ce8a:	2200      	movs	r2, #0
 801ce8c:	f7ec fa44 	bl	8009318 <osMessageQueuePut>
 801ce90:	4603      	mov	r3, r0
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d102      	bne.n	801ce9c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801ce96:	2300      	movs	r3, #0
 801ce98:	73fb      	strb	r3, [r7, #15]
 801ce9a:	e001      	b.n	801cea0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801ce9c:	23ff      	movs	r3, #255	@ 0xff
 801ce9e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801cea0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cea4:	4618      	mov	r0, r3
 801cea6:	3710      	adds	r7, #16
 801cea8:	46bd      	mov	sp, r7
 801ceaa:	bd80      	pop	{r7, pc}

0801ceac <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801ceac:	b580      	push	{r7, lr}
 801ceae:	b086      	sub	sp, #24
 801ceb0:	af00      	add	r7, sp, #0
 801ceb2:	60f8      	str	r0, [r7, #12]
 801ceb4:	60b9      	str	r1, [r7, #8]
 801ceb6:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801ceb8:	f7eb fea6 	bl	8008c08 <osKernelGetTickCount>
 801cebc:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801cebe:	687b      	ldr	r3, [r7, #4]
 801cec0:	2b00      	cmp	r3, #0
 801cec2:	d013      	beq.n	801ceec <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801cec4:	68fb      	ldr	r3, [r7, #12]
 801cec6:	6818      	ldr	r0, [r3, #0]
 801cec8:	687b      	ldr	r3, [r7, #4]
 801ceca:	2200      	movs	r2, #0
 801cecc:	68b9      	ldr	r1, [r7, #8]
 801cece:	f7ec fa83 	bl	80093d8 <osMessageQueueGet>
 801ced2:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801ced4:	693b      	ldr	r3, [r7, #16]
 801ced6:	2b00      	cmp	r3, #0
 801ced8:	d105      	bne.n	801cee6 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801ceda:	f7eb fe95 	bl	8008c08 <osKernelGetTickCount>
 801cede:	4602      	mov	r2, r0
 801cee0:	697b      	ldr	r3, [r7, #20]
 801cee2:	1ad3      	subs	r3, r2, r3
 801cee4:	e00f      	b.n	801cf06 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801cee6:	f04f 33ff 	mov.w	r3, #4294967295
 801ceea:	e00c      	b.n	801cf06 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801ceec:	68fb      	ldr	r3, [r7, #12]
 801ceee:	6818      	ldr	r0, [r3, #0]
 801cef0:	f04f 33ff 	mov.w	r3, #4294967295
 801cef4:	2200      	movs	r2, #0
 801cef6:	68b9      	ldr	r1, [r7, #8]
 801cef8:	f7ec fa6e 	bl	80093d8 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801cefc:	f7eb fe84 	bl	8008c08 <osKernelGetTickCount>
 801cf00:	4602      	mov	r2, r0
 801cf02:	697b      	ldr	r3, [r7, #20]
 801cf04:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801cf06:	4618      	mov	r0, r3
 801cf08:	3718      	adds	r7, #24
 801cf0a:	46bd      	mov	sp, r7
 801cf0c:	bd80      	pop	{r7, pc}

0801cf0e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801cf0e:	b580      	push	{r7, lr}
 801cf10:	b082      	sub	sp, #8
 801cf12:	af00      	add	r7, sp, #0
 801cf14:	6078      	str	r0, [r7, #4]
 801cf16:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801cf18:	687b      	ldr	r3, [r7, #4]
 801cf1a:	6818      	ldr	r0, [r3, #0]
 801cf1c:	2300      	movs	r3, #0
 801cf1e:	2200      	movs	r2, #0
 801cf20:	6839      	ldr	r1, [r7, #0]
 801cf22:	f7ec fa59 	bl	80093d8 <osMessageQueueGet>
 801cf26:	4603      	mov	r3, r0
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d101      	bne.n	801cf30 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801cf2c:	2300      	movs	r3, #0
 801cf2e:	e001      	b.n	801cf34 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801cf30:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801cf34:	4618      	mov	r0, r3
 801cf36:	3708      	adds	r7, #8
 801cf38:	46bd      	mov	sp, r7
 801cf3a:	bd80      	pop	{r7, pc}

0801cf3c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801cf3c:	b480      	push	{r7}
 801cf3e:	b083      	sub	sp, #12
 801cf40:	af00      	add	r7, sp, #0
 801cf42:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	681b      	ldr	r3, [r3, #0]
 801cf48:	2b00      	cmp	r3, #0
 801cf4a:	d101      	bne.n	801cf50 <sys_mbox_valid+0x14>
    return 0;
 801cf4c:	2300      	movs	r3, #0
 801cf4e:	e000      	b.n	801cf52 <sys_mbox_valid+0x16>
  else
    return 1;
 801cf50:	2301      	movs	r3, #1
}
 801cf52:	4618      	mov	r0, r3
 801cf54:	370c      	adds	r7, #12
 801cf56:	46bd      	mov	sp, r7
 801cf58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf5c:	4770      	bx	lr

0801cf5e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801cf5e:	b480      	push	{r7}
 801cf60:	b083      	sub	sp, #12
 801cf62:	af00      	add	r7, sp, #0
 801cf64:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801cf66:	687b      	ldr	r3, [r7, #4]
 801cf68:	2200      	movs	r2, #0
 801cf6a:	601a      	str	r2, [r3, #0]
}
 801cf6c:	bf00      	nop
 801cf6e:	370c      	adds	r7, #12
 801cf70:	46bd      	mov	sp, r7
 801cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf76:	4770      	bx	lr

0801cf78 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801cf78:	b580      	push	{r7, lr}
 801cf7a:	b082      	sub	sp, #8
 801cf7c:	af00      	add	r7, sp, #0
 801cf7e:	6078      	str	r0, [r7, #4]
 801cf80:	460b      	mov	r3, r1
 801cf82:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801cf84:	78fb      	ldrb	r3, [r7, #3]
 801cf86:	2200      	movs	r2, #0
 801cf88:	4619      	mov	r1, r3
 801cf8a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801cf8e:	f7ec f80c 	bl	8008faa <osSemaphoreNew>
 801cf92:	4602      	mov	r2, r0
 801cf94:	687b      	ldr	r3, [r7, #4]
 801cf96:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801cf98:	687b      	ldr	r3, [r7, #4]
 801cf9a:	681b      	ldr	r3, [r3, #0]
 801cf9c:	2b00      	cmp	r3, #0
 801cf9e:	d102      	bne.n	801cfa6 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801cfa0:	f04f 33ff 	mov.w	r3, #4294967295
 801cfa4:	e009      	b.n	801cfba <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801cfa6:	78fb      	ldrb	r3, [r7, #3]
 801cfa8:	2b00      	cmp	r3, #0
 801cfaa:	d105      	bne.n	801cfb8 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801cfac:	687b      	ldr	r3, [r7, #4]
 801cfae:	681b      	ldr	r3, [r3, #0]
 801cfb0:	2100      	movs	r1, #0
 801cfb2:	4618      	mov	r0, r3
 801cfb4:	f7ec f882 	bl	80090bc <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801cfb8:	2300      	movs	r3, #0
}
 801cfba:	4618      	mov	r0, r3
 801cfbc:	3708      	adds	r7, #8
 801cfbe:	46bd      	mov	sp, r7
 801cfc0:	bd80      	pop	{r7, pc}

0801cfc2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801cfc2:	b580      	push	{r7, lr}
 801cfc4:	b084      	sub	sp, #16
 801cfc6:	af00      	add	r7, sp, #0
 801cfc8:	6078      	str	r0, [r7, #4]
 801cfca:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801cfcc:	f7eb fe1c 	bl	8008c08 <osKernelGetTickCount>
 801cfd0:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801cfd2:	683b      	ldr	r3, [r7, #0]
 801cfd4:	2b00      	cmp	r3, #0
 801cfd6:	d011      	beq.n	801cffc <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	681b      	ldr	r3, [r3, #0]
 801cfdc:	6839      	ldr	r1, [r7, #0]
 801cfde:	4618      	mov	r0, r3
 801cfe0:	f7ec f86c 	bl	80090bc <osSemaphoreAcquire>
 801cfe4:	4603      	mov	r3, r0
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d105      	bne.n	801cff6 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801cfea:	f7eb fe0d 	bl	8008c08 <osKernelGetTickCount>
 801cfee:	4602      	mov	r2, r0
 801cff0:	68fb      	ldr	r3, [r7, #12]
 801cff2:	1ad3      	subs	r3, r2, r3
 801cff4:	e012      	b.n	801d01c <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801cff6:	f04f 33ff 	mov.w	r3, #4294967295
 801cffa:	e00f      	b.n	801d01c <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801cffc:	bf00      	nop
 801cffe:	687b      	ldr	r3, [r7, #4]
 801d000:	681b      	ldr	r3, [r3, #0]
 801d002:	f04f 31ff 	mov.w	r1, #4294967295
 801d006:	4618      	mov	r0, r3
 801d008:	f7ec f858 	bl	80090bc <osSemaphoreAcquire>
 801d00c:	4603      	mov	r3, r0
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d1f5      	bne.n	801cffe <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801d012:	f7eb fdf9 	bl	8008c08 <osKernelGetTickCount>
 801d016:	4602      	mov	r2, r0
 801d018:	68fb      	ldr	r3, [r7, #12]
 801d01a:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801d01c:	4618      	mov	r0, r3
 801d01e:	3710      	adds	r7, #16
 801d020:	46bd      	mov	sp, r7
 801d022:	bd80      	pop	{r7, pc}

0801d024 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801d024:	b580      	push	{r7, lr}
 801d026:	b082      	sub	sp, #8
 801d028:	af00      	add	r7, sp, #0
 801d02a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801d02c:	687b      	ldr	r3, [r7, #4]
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	4618      	mov	r0, r3
 801d032:	f7ec f895 	bl	8009160 <osSemaphoreRelease>
}
 801d036:	bf00      	nop
 801d038:	3708      	adds	r7, #8
 801d03a:	46bd      	mov	sp, r7
 801d03c:	bd80      	pop	{r7, pc}

0801d03e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801d03e:	b580      	push	{r7, lr}
 801d040:	b082      	sub	sp, #8
 801d042:	af00      	add	r7, sp, #0
 801d044:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801d046:	687b      	ldr	r3, [r7, #4]
 801d048:	681b      	ldr	r3, [r3, #0]
 801d04a:	4618      	mov	r0, r3
 801d04c:	f7ec f8cc 	bl	80091e8 <osSemaphoreDelete>
}
 801d050:	bf00      	nop
 801d052:	3708      	adds	r7, #8
 801d054:	46bd      	mov	sp, r7
 801d056:	bd80      	pop	{r7, pc}

0801d058 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801d058:	b480      	push	{r7}
 801d05a:	b083      	sub	sp, #12
 801d05c:	af00      	add	r7, sp, #0
 801d05e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	681b      	ldr	r3, [r3, #0]
 801d064:	2b00      	cmp	r3, #0
 801d066:	d101      	bne.n	801d06c <sys_sem_valid+0x14>
    return 0;
 801d068:	2300      	movs	r3, #0
 801d06a:	e000      	b.n	801d06e <sys_sem_valid+0x16>
  else
    return 1;
 801d06c:	2301      	movs	r3, #1
}
 801d06e:	4618      	mov	r0, r3
 801d070:	370c      	adds	r7, #12
 801d072:	46bd      	mov	sp, r7
 801d074:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d078:	4770      	bx	lr

0801d07a <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801d07a:	b480      	push	{r7}
 801d07c:	b083      	sub	sp, #12
 801d07e:	af00      	add	r7, sp, #0
 801d080:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801d082:	687b      	ldr	r3, [r7, #4]
 801d084:	2200      	movs	r2, #0
 801d086:	601a      	str	r2, [r3, #0]
}
 801d088:	bf00      	nop
 801d08a:	370c      	adds	r7, #12
 801d08c:	46bd      	mov	sp, r7
 801d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d092:	4770      	bx	lr

0801d094 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801d094:	b580      	push	{r7, lr}
 801d096:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801d098:	2000      	movs	r0, #0
 801d09a:	f7eb fe78 	bl	8008d8e <osMutexNew>
 801d09e:	4603      	mov	r3, r0
 801d0a0:	4a01      	ldr	r2, [pc, #4]	@ (801d0a8 <sys_init+0x14>)
 801d0a2:	6013      	str	r3, [r2, #0]
#endif
}
 801d0a4:	bf00      	nop
 801d0a6:	bd80      	pop	{r7, pc}
 801d0a8:	2001280c 	.word	0x2001280c

0801d0ac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801d0ac:	b580      	push	{r7, lr}
 801d0ae:	b082      	sub	sp, #8
 801d0b0:	af00      	add	r7, sp, #0
 801d0b2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801d0b4:	2000      	movs	r0, #0
 801d0b6:	f7eb fe6a 	bl	8008d8e <osMutexNew>
 801d0ba:	4602      	mov	r2, r0
 801d0bc:	687b      	ldr	r3, [r7, #4]
 801d0be:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801d0c0:	687b      	ldr	r3, [r7, #4]
 801d0c2:	681b      	ldr	r3, [r3, #0]
 801d0c4:	2b00      	cmp	r3, #0
 801d0c6:	d102      	bne.n	801d0ce <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801d0c8:	f04f 33ff 	mov.w	r3, #4294967295
 801d0cc:	e000      	b.n	801d0d0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801d0ce:	2300      	movs	r3, #0
}
 801d0d0:	4618      	mov	r0, r3
 801d0d2:	3708      	adds	r7, #8
 801d0d4:	46bd      	mov	sp, r7
 801d0d6:	bd80      	pop	{r7, pc}

0801d0d8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801d0d8:	b580      	push	{r7, lr}
 801d0da:	b082      	sub	sp, #8
 801d0dc:	af00      	add	r7, sp, #0
 801d0de:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	681b      	ldr	r3, [r3, #0]
 801d0e4:	f04f 31ff 	mov.w	r1, #4294967295
 801d0e8:	4618      	mov	r0, r3
 801d0ea:	f7eb fed6 	bl	8008e9a <osMutexAcquire>
#endif
}
 801d0ee:	bf00      	nop
 801d0f0:	3708      	adds	r7, #8
 801d0f2:	46bd      	mov	sp, r7
 801d0f4:	bd80      	pop	{r7, pc}

0801d0f6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801d0f6:	b580      	push	{r7, lr}
 801d0f8:	b082      	sub	sp, #8
 801d0fa:	af00      	add	r7, sp, #0
 801d0fc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801d0fe:	687b      	ldr	r3, [r7, #4]
 801d100:	681b      	ldr	r3, [r3, #0]
 801d102:	4618      	mov	r0, r3
 801d104:	f7eb ff14 	bl	8008f30 <osMutexRelease>
}
 801d108:	bf00      	nop
 801d10a:	3708      	adds	r7, #8
 801d10c:	46bd      	mov	sp, r7
 801d10e:	bd80      	pop	{r7, pc}

0801d110 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801d110:	b580      	push	{r7, lr}
 801d112:	b08e      	sub	sp, #56	@ 0x38
 801d114:	af00      	add	r7, sp, #0
 801d116:	60f8      	str	r0, [r7, #12]
 801d118:	60b9      	str	r1, [r7, #8]
 801d11a:	607a      	str	r2, [r7, #4]
 801d11c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801d11e:	f107 0314 	add.w	r3, r7, #20
 801d122:	2224      	movs	r2, #36	@ 0x24
 801d124:	2100      	movs	r1, #0
 801d126:	4618      	mov	r0, r3
 801d128:	f001 f977 	bl	801e41a <memset>
 801d12c:	68fb      	ldr	r3, [r7, #12]
 801d12e:	617b      	str	r3, [r7, #20]
 801d130:	683b      	ldr	r3, [r7, #0]
 801d132:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d134:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d136:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801d138:	f107 0314 	add.w	r3, r7, #20
 801d13c:	461a      	mov	r2, r3
 801d13e:	6879      	ldr	r1, [r7, #4]
 801d140:	68b8      	ldr	r0, [r7, #8]
 801d142:	f7eb fd76 	bl	8008c32 <osThreadNew>
 801d146:	4603      	mov	r3, r0
#endif
}
 801d148:	4618      	mov	r0, r3
 801d14a:	3738      	adds	r7, #56	@ 0x38
 801d14c:	46bd      	mov	sp, r7
 801d14e:	bd80      	pop	{r7, pc}

0801d150 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801d150:	b580      	push	{r7, lr}
 801d152:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801d154:	4b04      	ldr	r3, [pc, #16]	@ (801d168 <sys_arch_protect+0x18>)
 801d156:	681b      	ldr	r3, [r3, #0]
 801d158:	f04f 31ff 	mov.w	r1, #4294967295
 801d15c:	4618      	mov	r0, r3
 801d15e:	f7eb fe9c 	bl	8008e9a <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801d162:	2301      	movs	r3, #1
}
 801d164:	4618      	mov	r0, r3
 801d166:	bd80      	pop	{r7, pc}
 801d168:	2001280c 	.word	0x2001280c

0801d16c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801d16c:	b580      	push	{r7, lr}
 801d16e:	b082      	sub	sp, #8
 801d170:	af00      	add	r7, sp, #0
 801d172:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801d174:	4b04      	ldr	r3, [pc, #16]	@ (801d188 <sys_arch_unprotect+0x1c>)
 801d176:	681b      	ldr	r3, [r3, #0]
 801d178:	4618      	mov	r0, r3
 801d17a:	f7eb fed9 	bl	8008f30 <osMutexRelease>
}
 801d17e:	bf00      	nop
 801d180:	3708      	adds	r7, #8
 801d182:	46bd      	mov	sp, r7
 801d184:	bd80      	pop	{r7, pc}
 801d186:	bf00      	nop
 801d188:	2001280c 	.word	0x2001280c

0801d18c <rand>:
 801d18c:	4b16      	ldr	r3, [pc, #88]	@ (801d1e8 <rand+0x5c>)
 801d18e:	b510      	push	{r4, lr}
 801d190:	681c      	ldr	r4, [r3, #0]
 801d192:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d194:	b9b3      	cbnz	r3, 801d1c4 <rand+0x38>
 801d196:	2018      	movs	r0, #24
 801d198:	f002 f90c 	bl	801f3b4 <malloc>
 801d19c:	4602      	mov	r2, r0
 801d19e:	6320      	str	r0, [r4, #48]	@ 0x30
 801d1a0:	b920      	cbnz	r0, 801d1ac <rand+0x20>
 801d1a2:	4b12      	ldr	r3, [pc, #72]	@ (801d1ec <rand+0x60>)
 801d1a4:	4812      	ldr	r0, [pc, #72]	@ (801d1f0 <rand+0x64>)
 801d1a6:	2152      	movs	r1, #82	@ 0x52
 801d1a8:	f001 fa4e 	bl	801e648 <__assert_func>
 801d1ac:	4911      	ldr	r1, [pc, #68]	@ (801d1f4 <rand+0x68>)
 801d1ae:	4b12      	ldr	r3, [pc, #72]	@ (801d1f8 <rand+0x6c>)
 801d1b0:	e9c0 1300 	strd	r1, r3, [r0]
 801d1b4:	4b11      	ldr	r3, [pc, #68]	@ (801d1fc <rand+0x70>)
 801d1b6:	6083      	str	r3, [r0, #8]
 801d1b8:	230b      	movs	r3, #11
 801d1ba:	8183      	strh	r3, [r0, #12]
 801d1bc:	2100      	movs	r1, #0
 801d1be:	2001      	movs	r0, #1
 801d1c0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d1c4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d1c6:	480e      	ldr	r0, [pc, #56]	@ (801d200 <rand+0x74>)
 801d1c8:	690b      	ldr	r3, [r1, #16]
 801d1ca:	694c      	ldr	r4, [r1, #20]
 801d1cc:	4a0d      	ldr	r2, [pc, #52]	@ (801d204 <rand+0x78>)
 801d1ce:	4358      	muls	r0, r3
 801d1d0:	fb02 0004 	mla	r0, r2, r4, r0
 801d1d4:	fba3 3202 	umull	r3, r2, r3, r2
 801d1d8:	3301      	adds	r3, #1
 801d1da:	eb40 0002 	adc.w	r0, r0, r2
 801d1de:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d1e2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801d1e6:	bd10      	pop	{r4, pc}
 801d1e8:	20000060 	.word	0x20000060
 801d1ec:	08025d86 	.word	0x08025d86
 801d1f0:	08025d9d 	.word	0x08025d9d
 801d1f4:	abcd330e 	.word	0xabcd330e
 801d1f8:	e66d1234 	.word	0xe66d1234
 801d1fc:	0005deec 	.word	0x0005deec
 801d200:	5851f42d 	.word	0x5851f42d
 801d204:	4c957f2d 	.word	0x4c957f2d

0801d208 <_strtol_l.constprop.0>:
 801d208:	2b24      	cmp	r3, #36	@ 0x24
 801d20a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d20e:	4686      	mov	lr, r0
 801d210:	4690      	mov	r8, r2
 801d212:	d801      	bhi.n	801d218 <_strtol_l.constprop.0+0x10>
 801d214:	2b01      	cmp	r3, #1
 801d216:	d106      	bne.n	801d226 <_strtol_l.constprop.0+0x1e>
 801d218:	f001 f9cc 	bl	801e5b4 <__errno>
 801d21c:	2316      	movs	r3, #22
 801d21e:	6003      	str	r3, [r0, #0]
 801d220:	2000      	movs	r0, #0
 801d222:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d226:	4834      	ldr	r0, [pc, #208]	@ (801d2f8 <_strtol_l.constprop.0+0xf0>)
 801d228:	460d      	mov	r5, r1
 801d22a:	462a      	mov	r2, r5
 801d22c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d230:	5d06      	ldrb	r6, [r0, r4]
 801d232:	f016 0608 	ands.w	r6, r6, #8
 801d236:	d1f8      	bne.n	801d22a <_strtol_l.constprop.0+0x22>
 801d238:	2c2d      	cmp	r4, #45	@ 0x2d
 801d23a:	d12d      	bne.n	801d298 <_strtol_l.constprop.0+0x90>
 801d23c:	782c      	ldrb	r4, [r5, #0]
 801d23e:	2601      	movs	r6, #1
 801d240:	1c95      	adds	r5, r2, #2
 801d242:	f033 0210 	bics.w	r2, r3, #16
 801d246:	d109      	bne.n	801d25c <_strtol_l.constprop.0+0x54>
 801d248:	2c30      	cmp	r4, #48	@ 0x30
 801d24a:	d12a      	bne.n	801d2a2 <_strtol_l.constprop.0+0x9a>
 801d24c:	782a      	ldrb	r2, [r5, #0]
 801d24e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d252:	2a58      	cmp	r2, #88	@ 0x58
 801d254:	d125      	bne.n	801d2a2 <_strtol_l.constprop.0+0x9a>
 801d256:	786c      	ldrb	r4, [r5, #1]
 801d258:	2310      	movs	r3, #16
 801d25a:	3502      	adds	r5, #2
 801d25c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801d260:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d264:	2200      	movs	r2, #0
 801d266:	fbbc f9f3 	udiv	r9, ip, r3
 801d26a:	4610      	mov	r0, r2
 801d26c:	fb03 ca19 	mls	sl, r3, r9, ip
 801d270:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801d274:	2f09      	cmp	r7, #9
 801d276:	d81b      	bhi.n	801d2b0 <_strtol_l.constprop.0+0xa8>
 801d278:	463c      	mov	r4, r7
 801d27a:	42a3      	cmp	r3, r4
 801d27c:	dd27      	ble.n	801d2ce <_strtol_l.constprop.0+0xc6>
 801d27e:	1c57      	adds	r7, r2, #1
 801d280:	d007      	beq.n	801d292 <_strtol_l.constprop.0+0x8a>
 801d282:	4581      	cmp	r9, r0
 801d284:	d320      	bcc.n	801d2c8 <_strtol_l.constprop.0+0xc0>
 801d286:	d101      	bne.n	801d28c <_strtol_l.constprop.0+0x84>
 801d288:	45a2      	cmp	sl, r4
 801d28a:	db1d      	blt.n	801d2c8 <_strtol_l.constprop.0+0xc0>
 801d28c:	fb00 4003 	mla	r0, r0, r3, r4
 801d290:	2201      	movs	r2, #1
 801d292:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d296:	e7eb      	b.n	801d270 <_strtol_l.constprop.0+0x68>
 801d298:	2c2b      	cmp	r4, #43	@ 0x2b
 801d29a:	bf04      	itt	eq
 801d29c:	782c      	ldrbeq	r4, [r5, #0]
 801d29e:	1c95      	addeq	r5, r2, #2
 801d2a0:	e7cf      	b.n	801d242 <_strtol_l.constprop.0+0x3a>
 801d2a2:	2b00      	cmp	r3, #0
 801d2a4:	d1da      	bne.n	801d25c <_strtol_l.constprop.0+0x54>
 801d2a6:	2c30      	cmp	r4, #48	@ 0x30
 801d2a8:	bf0c      	ite	eq
 801d2aa:	2308      	moveq	r3, #8
 801d2ac:	230a      	movne	r3, #10
 801d2ae:	e7d5      	b.n	801d25c <_strtol_l.constprop.0+0x54>
 801d2b0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801d2b4:	2f19      	cmp	r7, #25
 801d2b6:	d801      	bhi.n	801d2bc <_strtol_l.constprop.0+0xb4>
 801d2b8:	3c37      	subs	r4, #55	@ 0x37
 801d2ba:	e7de      	b.n	801d27a <_strtol_l.constprop.0+0x72>
 801d2bc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801d2c0:	2f19      	cmp	r7, #25
 801d2c2:	d804      	bhi.n	801d2ce <_strtol_l.constprop.0+0xc6>
 801d2c4:	3c57      	subs	r4, #87	@ 0x57
 801d2c6:	e7d8      	b.n	801d27a <_strtol_l.constprop.0+0x72>
 801d2c8:	f04f 32ff 	mov.w	r2, #4294967295
 801d2cc:	e7e1      	b.n	801d292 <_strtol_l.constprop.0+0x8a>
 801d2ce:	1c53      	adds	r3, r2, #1
 801d2d0:	d108      	bne.n	801d2e4 <_strtol_l.constprop.0+0xdc>
 801d2d2:	2322      	movs	r3, #34	@ 0x22
 801d2d4:	f8ce 3000 	str.w	r3, [lr]
 801d2d8:	4660      	mov	r0, ip
 801d2da:	f1b8 0f00 	cmp.w	r8, #0
 801d2de:	d0a0      	beq.n	801d222 <_strtol_l.constprop.0+0x1a>
 801d2e0:	1e69      	subs	r1, r5, #1
 801d2e2:	e006      	b.n	801d2f2 <_strtol_l.constprop.0+0xea>
 801d2e4:	b106      	cbz	r6, 801d2e8 <_strtol_l.constprop.0+0xe0>
 801d2e6:	4240      	negs	r0, r0
 801d2e8:	f1b8 0f00 	cmp.w	r8, #0
 801d2ec:	d099      	beq.n	801d222 <_strtol_l.constprop.0+0x1a>
 801d2ee:	2a00      	cmp	r2, #0
 801d2f0:	d1f6      	bne.n	801d2e0 <_strtol_l.constprop.0+0xd8>
 801d2f2:	f8c8 1000 	str.w	r1, [r8]
 801d2f6:	e794      	b.n	801d222 <_strtol_l.constprop.0+0x1a>
 801d2f8:	08025df6 	.word	0x08025df6

0801d2fc <_strtol_r>:
 801d2fc:	f7ff bf84 	b.w	801d208 <_strtol_l.constprop.0>

0801d300 <__cvt>:
 801d300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d304:	ec57 6b10 	vmov	r6, r7, d0
 801d308:	2f00      	cmp	r7, #0
 801d30a:	460c      	mov	r4, r1
 801d30c:	4619      	mov	r1, r3
 801d30e:	463b      	mov	r3, r7
 801d310:	bfbb      	ittet	lt
 801d312:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801d316:	461f      	movlt	r7, r3
 801d318:	2300      	movge	r3, #0
 801d31a:	232d      	movlt	r3, #45	@ 0x2d
 801d31c:	700b      	strb	r3, [r1, #0]
 801d31e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d320:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801d324:	4691      	mov	r9, r2
 801d326:	f023 0820 	bic.w	r8, r3, #32
 801d32a:	bfbc      	itt	lt
 801d32c:	4632      	movlt	r2, r6
 801d32e:	4616      	movlt	r6, r2
 801d330:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d334:	d005      	beq.n	801d342 <__cvt+0x42>
 801d336:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801d33a:	d100      	bne.n	801d33e <__cvt+0x3e>
 801d33c:	3401      	adds	r4, #1
 801d33e:	2102      	movs	r1, #2
 801d340:	e000      	b.n	801d344 <__cvt+0x44>
 801d342:	2103      	movs	r1, #3
 801d344:	ab03      	add	r3, sp, #12
 801d346:	9301      	str	r3, [sp, #4]
 801d348:	ab02      	add	r3, sp, #8
 801d34a:	9300      	str	r3, [sp, #0]
 801d34c:	ec47 6b10 	vmov	d0, r6, r7
 801d350:	4653      	mov	r3, sl
 801d352:	4622      	mov	r2, r4
 801d354:	f001 fa20 	bl	801e798 <_dtoa_r>
 801d358:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801d35c:	4605      	mov	r5, r0
 801d35e:	d119      	bne.n	801d394 <__cvt+0x94>
 801d360:	f019 0f01 	tst.w	r9, #1
 801d364:	d00e      	beq.n	801d384 <__cvt+0x84>
 801d366:	eb00 0904 	add.w	r9, r0, r4
 801d36a:	2200      	movs	r2, #0
 801d36c:	2300      	movs	r3, #0
 801d36e:	4630      	mov	r0, r6
 801d370:	4639      	mov	r1, r7
 801d372:	f7e3 fba9 	bl	8000ac8 <__aeabi_dcmpeq>
 801d376:	b108      	cbz	r0, 801d37c <__cvt+0x7c>
 801d378:	f8cd 900c 	str.w	r9, [sp, #12]
 801d37c:	2230      	movs	r2, #48	@ 0x30
 801d37e:	9b03      	ldr	r3, [sp, #12]
 801d380:	454b      	cmp	r3, r9
 801d382:	d31e      	bcc.n	801d3c2 <__cvt+0xc2>
 801d384:	9b03      	ldr	r3, [sp, #12]
 801d386:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d388:	1b5b      	subs	r3, r3, r5
 801d38a:	4628      	mov	r0, r5
 801d38c:	6013      	str	r3, [r2, #0]
 801d38e:	b004      	add	sp, #16
 801d390:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d394:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d398:	eb00 0904 	add.w	r9, r0, r4
 801d39c:	d1e5      	bne.n	801d36a <__cvt+0x6a>
 801d39e:	7803      	ldrb	r3, [r0, #0]
 801d3a0:	2b30      	cmp	r3, #48	@ 0x30
 801d3a2:	d10a      	bne.n	801d3ba <__cvt+0xba>
 801d3a4:	2200      	movs	r2, #0
 801d3a6:	2300      	movs	r3, #0
 801d3a8:	4630      	mov	r0, r6
 801d3aa:	4639      	mov	r1, r7
 801d3ac:	f7e3 fb8c 	bl	8000ac8 <__aeabi_dcmpeq>
 801d3b0:	b918      	cbnz	r0, 801d3ba <__cvt+0xba>
 801d3b2:	f1c4 0401 	rsb	r4, r4, #1
 801d3b6:	f8ca 4000 	str.w	r4, [sl]
 801d3ba:	f8da 3000 	ldr.w	r3, [sl]
 801d3be:	4499      	add	r9, r3
 801d3c0:	e7d3      	b.n	801d36a <__cvt+0x6a>
 801d3c2:	1c59      	adds	r1, r3, #1
 801d3c4:	9103      	str	r1, [sp, #12]
 801d3c6:	701a      	strb	r2, [r3, #0]
 801d3c8:	e7d9      	b.n	801d37e <__cvt+0x7e>

0801d3ca <__exponent>:
 801d3ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d3cc:	2900      	cmp	r1, #0
 801d3ce:	bfba      	itte	lt
 801d3d0:	4249      	neglt	r1, r1
 801d3d2:	232d      	movlt	r3, #45	@ 0x2d
 801d3d4:	232b      	movge	r3, #43	@ 0x2b
 801d3d6:	2909      	cmp	r1, #9
 801d3d8:	7002      	strb	r2, [r0, #0]
 801d3da:	7043      	strb	r3, [r0, #1]
 801d3dc:	dd29      	ble.n	801d432 <__exponent+0x68>
 801d3de:	f10d 0307 	add.w	r3, sp, #7
 801d3e2:	461d      	mov	r5, r3
 801d3e4:	270a      	movs	r7, #10
 801d3e6:	461a      	mov	r2, r3
 801d3e8:	fbb1 f6f7 	udiv	r6, r1, r7
 801d3ec:	fb07 1416 	mls	r4, r7, r6, r1
 801d3f0:	3430      	adds	r4, #48	@ 0x30
 801d3f2:	f802 4c01 	strb.w	r4, [r2, #-1]
 801d3f6:	460c      	mov	r4, r1
 801d3f8:	2c63      	cmp	r4, #99	@ 0x63
 801d3fa:	f103 33ff 	add.w	r3, r3, #4294967295
 801d3fe:	4631      	mov	r1, r6
 801d400:	dcf1      	bgt.n	801d3e6 <__exponent+0x1c>
 801d402:	3130      	adds	r1, #48	@ 0x30
 801d404:	1e94      	subs	r4, r2, #2
 801d406:	f803 1c01 	strb.w	r1, [r3, #-1]
 801d40a:	1c41      	adds	r1, r0, #1
 801d40c:	4623      	mov	r3, r4
 801d40e:	42ab      	cmp	r3, r5
 801d410:	d30a      	bcc.n	801d428 <__exponent+0x5e>
 801d412:	f10d 0309 	add.w	r3, sp, #9
 801d416:	1a9b      	subs	r3, r3, r2
 801d418:	42ac      	cmp	r4, r5
 801d41a:	bf88      	it	hi
 801d41c:	2300      	movhi	r3, #0
 801d41e:	3302      	adds	r3, #2
 801d420:	4403      	add	r3, r0
 801d422:	1a18      	subs	r0, r3, r0
 801d424:	b003      	add	sp, #12
 801d426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d428:	f813 6b01 	ldrb.w	r6, [r3], #1
 801d42c:	f801 6f01 	strb.w	r6, [r1, #1]!
 801d430:	e7ed      	b.n	801d40e <__exponent+0x44>
 801d432:	2330      	movs	r3, #48	@ 0x30
 801d434:	3130      	adds	r1, #48	@ 0x30
 801d436:	7083      	strb	r3, [r0, #2]
 801d438:	70c1      	strb	r1, [r0, #3]
 801d43a:	1d03      	adds	r3, r0, #4
 801d43c:	e7f1      	b.n	801d422 <__exponent+0x58>
	...

0801d440 <_printf_float>:
 801d440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d444:	b08d      	sub	sp, #52	@ 0x34
 801d446:	460c      	mov	r4, r1
 801d448:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801d44c:	4616      	mov	r6, r2
 801d44e:	461f      	mov	r7, r3
 801d450:	4605      	mov	r5, r0
 801d452:	f001 f80f 	bl	801e474 <_localeconv_r>
 801d456:	6803      	ldr	r3, [r0, #0]
 801d458:	9304      	str	r3, [sp, #16]
 801d45a:	4618      	mov	r0, r3
 801d45c:	f7e2 ff08 	bl	8000270 <strlen>
 801d460:	2300      	movs	r3, #0
 801d462:	930a      	str	r3, [sp, #40]	@ 0x28
 801d464:	f8d8 3000 	ldr.w	r3, [r8]
 801d468:	9005      	str	r0, [sp, #20]
 801d46a:	3307      	adds	r3, #7
 801d46c:	f023 0307 	bic.w	r3, r3, #7
 801d470:	f103 0208 	add.w	r2, r3, #8
 801d474:	f894 a018 	ldrb.w	sl, [r4, #24]
 801d478:	f8d4 b000 	ldr.w	fp, [r4]
 801d47c:	f8c8 2000 	str.w	r2, [r8]
 801d480:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d484:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801d488:	9307      	str	r3, [sp, #28]
 801d48a:	f8cd 8018 	str.w	r8, [sp, #24]
 801d48e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801d492:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d496:	4b9c      	ldr	r3, [pc, #624]	@ (801d708 <_printf_float+0x2c8>)
 801d498:	f04f 32ff 	mov.w	r2, #4294967295
 801d49c:	f7e3 fb46 	bl	8000b2c <__aeabi_dcmpun>
 801d4a0:	bb70      	cbnz	r0, 801d500 <_printf_float+0xc0>
 801d4a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d4a6:	4b98      	ldr	r3, [pc, #608]	@ (801d708 <_printf_float+0x2c8>)
 801d4a8:	f04f 32ff 	mov.w	r2, #4294967295
 801d4ac:	f7e3 fb20 	bl	8000af0 <__aeabi_dcmple>
 801d4b0:	bb30      	cbnz	r0, 801d500 <_printf_float+0xc0>
 801d4b2:	2200      	movs	r2, #0
 801d4b4:	2300      	movs	r3, #0
 801d4b6:	4640      	mov	r0, r8
 801d4b8:	4649      	mov	r1, r9
 801d4ba:	f7e3 fb0f 	bl	8000adc <__aeabi_dcmplt>
 801d4be:	b110      	cbz	r0, 801d4c6 <_printf_float+0x86>
 801d4c0:	232d      	movs	r3, #45	@ 0x2d
 801d4c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d4c6:	4a91      	ldr	r2, [pc, #580]	@ (801d70c <_printf_float+0x2cc>)
 801d4c8:	4b91      	ldr	r3, [pc, #580]	@ (801d710 <_printf_float+0x2d0>)
 801d4ca:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801d4ce:	bf94      	ite	ls
 801d4d0:	4690      	movls	r8, r2
 801d4d2:	4698      	movhi	r8, r3
 801d4d4:	2303      	movs	r3, #3
 801d4d6:	6123      	str	r3, [r4, #16]
 801d4d8:	f02b 0304 	bic.w	r3, fp, #4
 801d4dc:	6023      	str	r3, [r4, #0]
 801d4de:	f04f 0900 	mov.w	r9, #0
 801d4e2:	9700      	str	r7, [sp, #0]
 801d4e4:	4633      	mov	r3, r6
 801d4e6:	aa0b      	add	r2, sp, #44	@ 0x2c
 801d4e8:	4621      	mov	r1, r4
 801d4ea:	4628      	mov	r0, r5
 801d4ec:	f000 f9d2 	bl	801d894 <_printf_common>
 801d4f0:	3001      	adds	r0, #1
 801d4f2:	f040 808d 	bne.w	801d610 <_printf_float+0x1d0>
 801d4f6:	f04f 30ff 	mov.w	r0, #4294967295
 801d4fa:	b00d      	add	sp, #52	@ 0x34
 801d4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d500:	4642      	mov	r2, r8
 801d502:	464b      	mov	r3, r9
 801d504:	4640      	mov	r0, r8
 801d506:	4649      	mov	r1, r9
 801d508:	f7e3 fb10 	bl	8000b2c <__aeabi_dcmpun>
 801d50c:	b140      	cbz	r0, 801d520 <_printf_float+0xe0>
 801d50e:	464b      	mov	r3, r9
 801d510:	2b00      	cmp	r3, #0
 801d512:	bfbc      	itt	lt
 801d514:	232d      	movlt	r3, #45	@ 0x2d
 801d516:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801d51a:	4a7e      	ldr	r2, [pc, #504]	@ (801d714 <_printf_float+0x2d4>)
 801d51c:	4b7e      	ldr	r3, [pc, #504]	@ (801d718 <_printf_float+0x2d8>)
 801d51e:	e7d4      	b.n	801d4ca <_printf_float+0x8a>
 801d520:	6863      	ldr	r3, [r4, #4]
 801d522:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801d526:	9206      	str	r2, [sp, #24]
 801d528:	1c5a      	adds	r2, r3, #1
 801d52a:	d13b      	bne.n	801d5a4 <_printf_float+0x164>
 801d52c:	2306      	movs	r3, #6
 801d52e:	6063      	str	r3, [r4, #4]
 801d530:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801d534:	2300      	movs	r3, #0
 801d536:	6022      	str	r2, [r4, #0]
 801d538:	9303      	str	r3, [sp, #12]
 801d53a:	ab0a      	add	r3, sp, #40	@ 0x28
 801d53c:	e9cd a301 	strd	sl, r3, [sp, #4]
 801d540:	ab09      	add	r3, sp, #36	@ 0x24
 801d542:	9300      	str	r3, [sp, #0]
 801d544:	6861      	ldr	r1, [r4, #4]
 801d546:	ec49 8b10 	vmov	d0, r8, r9
 801d54a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801d54e:	4628      	mov	r0, r5
 801d550:	f7ff fed6 	bl	801d300 <__cvt>
 801d554:	9b06      	ldr	r3, [sp, #24]
 801d556:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d558:	2b47      	cmp	r3, #71	@ 0x47
 801d55a:	4680      	mov	r8, r0
 801d55c:	d129      	bne.n	801d5b2 <_printf_float+0x172>
 801d55e:	1cc8      	adds	r0, r1, #3
 801d560:	db02      	blt.n	801d568 <_printf_float+0x128>
 801d562:	6863      	ldr	r3, [r4, #4]
 801d564:	4299      	cmp	r1, r3
 801d566:	dd41      	ble.n	801d5ec <_printf_float+0x1ac>
 801d568:	f1aa 0a02 	sub.w	sl, sl, #2
 801d56c:	fa5f fa8a 	uxtb.w	sl, sl
 801d570:	3901      	subs	r1, #1
 801d572:	4652      	mov	r2, sl
 801d574:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801d578:	9109      	str	r1, [sp, #36]	@ 0x24
 801d57a:	f7ff ff26 	bl	801d3ca <__exponent>
 801d57e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d580:	1813      	adds	r3, r2, r0
 801d582:	2a01      	cmp	r2, #1
 801d584:	4681      	mov	r9, r0
 801d586:	6123      	str	r3, [r4, #16]
 801d588:	dc02      	bgt.n	801d590 <_printf_float+0x150>
 801d58a:	6822      	ldr	r2, [r4, #0]
 801d58c:	07d2      	lsls	r2, r2, #31
 801d58e:	d501      	bpl.n	801d594 <_printf_float+0x154>
 801d590:	3301      	adds	r3, #1
 801d592:	6123      	str	r3, [r4, #16]
 801d594:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801d598:	2b00      	cmp	r3, #0
 801d59a:	d0a2      	beq.n	801d4e2 <_printf_float+0xa2>
 801d59c:	232d      	movs	r3, #45	@ 0x2d
 801d59e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d5a2:	e79e      	b.n	801d4e2 <_printf_float+0xa2>
 801d5a4:	9a06      	ldr	r2, [sp, #24]
 801d5a6:	2a47      	cmp	r2, #71	@ 0x47
 801d5a8:	d1c2      	bne.n	801d530 <_printf_float+0xf0>
 801d5aa:	2b00      	cmp	r3, #0
 801d5ac:	d1c0      	bne.n	801d530 <_printf_float+0xf0>
 801d5ae:	2301      	movs	r3, #1
 801d5b0:	e7bd      	b.n	801d52e <_printf_float+0xee>
 801d5b2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d5b6:	d9db      	bls.n	801d570 <_printf_float+0x130>
 801d5b8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801d5bc:	d118      	bne.n	801d5f0 <_printf_float+0x1b0>
 801d5be:	2900      	cmp	r1, #0
 801d5c0:	6863      	ldr	r3, [r4, #4]
 801d5c2:	dd0b      	ble.n	801d5dc <_printf_float+0x19c>
 801d5c4:	6121      	str	r1, [r4, #16]
 801d5c6:	b913      	cbnz	r3, 801d5ce <_printf_float+0x18e>
 801d5c8:	6822      	ldr	r2, [r4, #0]
 801d5ca:	07d0      	lsls	r0, r2, #31
 801d5cc:	d502      	bpl.n	801d5d4 <_printf_float+0x194>
 801d5ce:	3301      	adds	r3, #1
 801d5d0:	440b      	add	r3, r1
 801d5d2:	6123      	str	r3, [r4, #16]
 801d5d4:	65a1      	str	r1, [r4, #88]	@ 0x58
 801d5d6:	f04f 0900 	mov.w	r9, #0
 801d5da:	e7db      	b.n	801d594 <_printf_float+0x154>
 801d5dc:	b913      	cbnz	r3, 801d5e4 <_printf_float+0x1a4>
 801d5de:	6822      	ldr	r2, [r4, #0]
 801d5e0:	07d2      	lsls	r2, r2, #31
 801d5e2:	d501      	bpl.n	801d5e8 <_printf_float+0x1a8>
 801d5e4:	3302      	adds	r3, #2
 801d5e6:	e7f4      	b.n	801d5d2 <_printf_float+0x192>
 801d5e8:	2301      	movs	r3, #1
 801d5ea:	e7f2      	b.n	801d5d2 <_printf_float+0x192>
 801d5ec:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801d5f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d5f2:	4299      	cmp	r1, r3
 801d5f4:	db05      	blt.n	801d602 <_printf_float+0x1c2>
 801d5f6:	6823      	ldr	r3, [r4, #0]
 801d5f8:	6121      	str	r1, [r4, #16]
 801d5fa:	07d8      	lsls	r0, r3, #31
 801d5fc:	d5ea      	bpl.n	801d5d4 <_printf_float+0x194>
 801d5fe:	1c4b      	adds	r3, r1, #1
 801d600:	e7e7      	b.n	801d5d2 <_printf_float+0x192>
 801d602:	2900      	cmp	r1, #0
 801d604:	bfd4      	ite	le
 801d606:	f1c1 0202 	rsble	r2, r1, #2
 801d60a:	2201      	movgt	r2, #1
 801d60c:	4413      	add	r3, r2
 801d60e:	e7e0      	b.n	801d5d2 <_printf_float+0x192>
 801d610:	6823      	ldr	r3, [r4, #0]
 801d612:	055a      	lsls	r2, r3, #21
 801d614:	d407      	bmi.n	801d626 <_printf_float+0x1e6>
 801d616:	6923      	ldr	r3, [r4, #16]
 801d618:	4642      	mov	r2, r8
 801d61a:	4631      	mov	r1, r6
 801d61c:	4628      	mov	r0, r5
 801d61e:	47b8      	blx	r7
 801d620:	3001      	adds	r0, #1
 801d622:	d12b      	bne.n	801d67c <_printf_float+0x23c>
 801d624:	e767      	b.n	801d4f6 <_printf_float+0xb6>
 801d626:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d62a:	f240 80dd 	bls.w	801d7e8 <_printf_float+0x3a8>
 801d62e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d632:	2200      	movs	r2, #0
 801d634:	2300      	movs	r3, #0
 801d636:	f7e3 fa47 	bl	8000ac8 <__aeabi_dcmpeq>
 801d63a:	2800      	cmp	r0, #0
 801d63c:	d033      	beq.n	801d6a6 <_printf_float+0x266>
 801d63e:	4a37      	ldr	r2, [pc, #220]	@ (801d71c <_printf_float+0x2dc>)
 801d640:	2301      	movs	r3, #1
 801d642:	4631      	mov	r1, r6
 801d644:	4628      	mov	r0, r5
 801d646:	47b8      	blx	r7
 801d648:	3001      	adds	r0, #1
 801d64a:	f43f af54 	beq.w	801d4f6 <_printf_float+0xb6>
 801d64e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801d652:	4543      	cmp	r3, r8
 801d654:	db02      	blt.n	801d65c <_printf_float+0x21c>
 801d656:	6823      	ldr	r3, [r4, #0]
 801d658:	07d8      	lsls	r0, r3, #31
 801d65a:	d50f      	bpl.n	801d67c <_printf_float+0x23c>
 801d65c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d660:	4631      	mov	r1, r6
 801d662:	4628      	mov	r0, r5
 801d664:	47b8      	blx	r7
 801d666:	3001      	adds	r0, #1
 801d668:	f43f af45 	beq.w	801d4f6 <_printf_float+0xb6>
 801d66c:	f04f 0900 	mov.w	r9, #0
 801d670:	f108 38ff 	add.w	r8, r8, #4294967295
 801d674:	f104 0a1a 	add.w	sl, r4, #26
 801d678:	45c8      	cmp	r8, r9
 801d67a:	dc09      	bgt.n	801d690 <_printf_float+0x250>
 801d67c:	6823      	ldr	r3, [r4, #0]
 801d67e:	079b      	lsls	r3, r3, #30
 801d680:	f100 8103 	bmi.w	801d88a <_printf_float+0x44a>
 801d684:	68e0      	ldr	r0, [r4, #12]
 801d686:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d688:	4298      	cmp	r0, r3
 801d68a:	bfb8      	it	lt
 801d68c:	4618      	movlt	r0, r3
 801d68e:	e734      	b.n	801d4fa <_printf_float+0xba>
 801d690:	2301      	movs	r3, #1
 801d692:	4652      	mov	r2, sl
 801d694:	4631      	mov	r1, r6
 801d696:	4628      	mov	r0, r5
 801d698:	47b8      	blx	r7
 801d69a:	3001      	adds	r0, #1
 801d69c:	f43f af2b 	beq.w	801d4f6 <_printf_float+0xb6>
 801d6a0:	f109 0901 	add.w	r9, r9, #1
 801d6a4:	e7e8      	b.n	801d678 <_printf_float+0x238>
 801d6a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d6a8:	2b00      	cmp	r3, #0
 801d6aa:	dc39      	bgt.n	801d720 <_printf_float+0x2e0>
 801d6ac:	4a1b      	ldr	r2, [pc, #108]	@ (801d71c <_printf_float+0x2dc>)
 801d6ae:	2301      	movs	r3, #1
 801d6b0:	4631      	mov	r1, r6
 801d6b2:	4628      	mov	r0, r5
 801d6b4:	47b8      	blx	r7
 801d6b6:	3001      	adds	r0, #1
 801d6b8:	f43f af1d 	beq.w	801d4f6 <_printf_float+0xb6>
 801d6bc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801d6c0:	ea59 0303 	orrs.w	r3, r9, r3
 801d6c4:	d102      	bne.n	801d6cc <_printf_float+0x28c>
 801d6c6:	6823      	ldr	r3, [r4, #0]
 801d6c8:	07d9      	lsls	r1, r3, #31
 801d6ca:	d5d7      	bpl.n	801d67c <_printf_float+0x23c>
 801d6cc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d6d0:	4631      	mov	r1, r6
 801d6d2:	4628      	mov	r0, r5
 801d6d4:	47b8      	blx	r7
 801d6d6:	3001      	adds	r0, #1
 801d6d8:	f43f af0d 	beq.w	801d4f6 <_printf_float+0xb6>
 801d6dc:	f04f 0a00 	mov.w	sl, #0
 801d6e0:	f104 0b1a 	add.w	fp, r4, #26
 801d6e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d6e6:	425b      	negs	r3, r3
 801d6e8:	4553      	cmp	r3, sl
 801d6ea:	dc01      	bgt.n	801d6f0 <_printf_float+0x2b0>
 801d6ec:	464b      	mov	r3, r9
 801d6ee:	e793      	b.n	801d618 <_printf_float+0x1d8>
 801d6f0:	2301      	movs	r3, #1
 801d6f2:	465a      	mov	r2, fp
 801d6f4:	4631      	mov	r1, r6
 801d6f6:	4628      	mov	r0, r5
 801d6f8:	47b8      	blx	r7
 801d6fa:	3001      	adds	r0, #1
 801d6fc:	f43f aefb 	beq.w	801d4f6 <_printf_float+0xb6>
 801d700:	f10a 0a01 	add.w	sl, sl, #1
 801d704:	e7ee      	b.n	801d6e4 <_printf_float+0x2a4>
 801d706:	bf00      	nop
 801d708:	7fefffff 	.word	0x7fefffff
 801d70c:	08025ef6 	.word	0x08025ef6
 801d710:	08025efa 	.word	0x08025efa
 801d714:	08025efe 	.word	0x08025efe
 801d718:	08025f02 	.word	0x08025f02
 801d71c:	08025f06 	.word	0x08025f06
 801d720:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d722:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d726:	4553      	cmp	r3, sl
 801d728:	bfa8      	it	ge
 801d72a:	4653      	movge	r3, sl
 801d72c:	2b00      	cmp	r3, #0
 801d72e:	4699      	mov	r9, r3
 801d730:	dc36      	bgt.n	801d7a0 <_printf_float+0x360>
 801d732:	f04f 0b00 	mov.w	fp, #0
 801d736:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d73a:	f104 021a 	add.w	r2, r4, #26
 801d73e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d740:	9306      	str	r3, [sp, #24]
 801d742:	eba3 0309 	sub.w	r3, r3, r9
 801d746:	455b      	cmp	r3, fp
 801d748:	dc31      	bgt.n	801d7ae <_printf_float+0x36e>
 801d74a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d74c:	459a      	cmp	sl, r3
 801d74e:	dc3a      	bgt.n	801d7c6 <_printf_float+0x386>
 801d750:	6823      	ldr	r3, [r4, #0]
 801d752:	07da      	lsls	r2, r3, #31
 801d754:	d437      	bmi.n	801d7c6 <_printf_float+0x386>
 801d756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d758:	ebaa 0903 	sub.w	r9, sl, r3
 801d75c:	9b06      	ldr	r3, [sp, #24]
 801d75e:	ebaa 0303 	sub.w	r3, sl, r3
 801d762:	4599      	cmp	r9, r3
 801d764:	bfa8      	it	ge
 801d766:	4699      	movge	r9, r3
 801d768:	f1b9 0f00 	cmp.w	r9, #0
 801d76c:	dc33      	bgt.n	801d7d6 <_printf_float+0x396>
 801d76e:	f04f 0800 	mov.w	r8, #0
 801d772:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d776:	f104 0b1a 	add.w	fp, r4, #26
 801d77a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d77c:	ebaa 0303 	sub.w	r3, sl, r3
 801d780:	eba3 0309 	sub.w	r3, r3, r9
 801d784:	4543      	cmp	r3, r8
 801d786:	f77f af79 	ble.w	801d67c <_printf_float+0x23c>
 801d78a:	2301      	movs	r3, #1
 801d78c:	465a      	mov	r2, fp
 801d78e:	4631      	mov	r1, r6
 801d790:	4628      	mov	r0, r5
 801d792:	47b8      	blx	r7
 801d794:	3001      	adds	r0, #1
 801d796:	f43f aeae 	beq.w	801d4f6 <_printf_float+0xb6>
 801d79a:	f108 0801 	add.w	r8, r8, #1
 801d79e:	e7ec      	b.n	801d77a <_printf_float+0x33a>
 801d7a0:	4642      	mov	r2, r8
 801d7a2:	4631      	mov	r1, r6
 801d7a4:	4628      	mov	r0, r5
 801d7a6:	47b8      	blx	r7
 801d7a8:	3001      	adds	r0, #1
 801d7aa:	d1c2      	bne.n	801d732 <_printf_float+0x2f2>
 801d7ac:	e6a3      	b.n	801d4f6 <_printf_float+0xb6>
 801d7ae:	2301      	movs	r3, #1
 801d7b0:	4631      	mov	r1, r6
 801d7b2:	4628      	mov	r0, r5
 801d7b4:	9206      	str	r2, [sp, #24]
 801d7b6:	47b8      	blx	r7
 801d7b8:	3001      	adds	r0, #1
 801d7ba:	f43f ae9c 	beq.w	801d4f6 <_printf_float+0xb6>
 801d7be:	9a06      	ldr	r2, [sp, #24]
 801d7c0:	f10b 0b01 	add.w	fp, fp, #1
 801d7c4:	e7bb      	b.n	801d73e <_printf_float+0x2fe>
 801d7c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d7ca:	4631      	mov	r1, r6
 801d7cc:	4628      	mov	r0, r5
 801d7ce:	47b8      	blx	r7
 801d7d0:	3001      	adds	r0, #1
 801d7d2:	d1c0      	bne.n	801d756 <_printf_float+0x316>
 801d7d4:	e68f      	b.n	801d4f6 <_printf_float+0xb6>
 801d7d6:	9a06      	ldr	r2, [sp, #24]
 801d7d8:	464b      	mov	r3, r9
 801d7da:	4442      	add	r2, r8
 801d7dc:	4631      	mov	r1, r6
 801d7de:	4628      	mov	r0, r5
 801d7e0:	47b8      	blx	r7
 801d7e2:	3001      	adds	r0, #1
 801d7e4:	d1c3      	bne.n	801d76e <_printf_float+0x32e>
 801d7e6:	e686      	b.n	801d4f6 <_printf_float+0xb6>
 801d7e8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d7ec:	f1ba 0f01 	cmp.w	sl, #1
 801d7f0:	dc01      	bgt.n	801d7f6 <_printf_float+0x3b6>
 801d7f2:	07db      	lsls	r3, r3, #31
 801d7f4:	d536      	bpl.n	801d864 <_printf_float+0x424>
 801d7f6:	2301      	movs	r3, #1
 801d7f8:	4642      	mov	r2, r8
 801d7fa:	4631      	mov	r1, r6
 801d7fc:	4628      	mov	r0, r5
 801d7fe:	47b8      	blx	r7
 801d800:	3001      	adds	r0, #1
 801d802:	f43f ae78 	beq.w	801d4f6 <_printf_float+0xb6>
 801d806:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d80a:	4631      	mov	r1, r6
 801d80c:	4628      	mov	r0, r5
 801d80e:	47b8      	blx	r7
 801d810:	3001      	adds	r0, #1
 801d812:	f43f ae70 	beq.w	801d4f6 <_printf_float+0xb6>
 801d816:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d81a:	2200      	movs	r2, #0
 801d81c:	2300      	movs	r3, #0
 801d81e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d822:	f7e3 f951 	bl	8000ac8 <__aeabi_dcmpeq>
 801d826:	b9c0      	cbnz	r0, 801d85a <_printf_float+0x41a>
 801d828:	4653      	mov	r3, sl
 801d82a:	f108 0201 	add.w	r2, r8, #1
 801d82e:	4631      	mov	r1, r6
 801d830:	4628      	mov	r0, r5
 801d832:	47b8      	blx	r7
 801d834:	3001      	adds	r0, #1
 801d836:	d10c      	bne.n	801d852 <_printf_float+0x412>
 801d838:	e65d      	b.n	801d4f6 <_printf_float+0xb6>
 801d83a:	2301      	movs	r3, #1
 801d83c:	465a      	mov	r2, fp
 801d83e:	4631      	mov	r1, r6
 801d840:	4628      	mov	r0, r5
 801d842:	47b8      	blx	r7
 801d844:	3001      	adds	r0, #1
 801d846:	f43f ae56 	beq.w	801d4f6 <_printf_float+0xb6>
 801d84a:	f108 0801 	add.w	r8, r8, #1
 801d84e:	45d0      	cmp	r8, sl
 801d850:	dbf3      	blt.n	801d83a <_printf_float+0x3fa>
 801d852:	464b      	mov	r3, r9
 801d854:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801d858:	e6df      	b.n	801d61a <_printf_float+0x1da>
 801d85a:	f04f 0800 	mov.w	r8, #0
 801d85e:	f104 0b1a 	add.w	fp, r4, #26
 801d862:	e7f4      	b.n	801d84e <_printf_float+0x40e>
 801d864:	2301      	movs	r3, #1
 801d866:	4642      	mov	r2, r8
 801d868:	e7e1      	b.n	801d82e <_printf_float+0x3ee>
 801d86a:	2301      	movs	r3, #1
 801d86c:	464a      	mov	r2, r9
 801d86e:	4631      	mov	r1, r6
 801d870:	4628      	mov	r0, r5
 801d872:	47b8      	blx	r7
 801d874:	3001      	adds	r0, #1
 801d876:	f43f ae3e 	beq.w	801d4f6 <_printf_float+0xb6>
 801d87a:	f108 0801 	add.w	r8, r8, #1
 801d87e:	68e3      	ldr	r3, [r4, #12]
 801d880:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d882:	1a5b      	subs	r3, r3, r1
 801d884:	4543      	cmp	r3, r8
 801d886:	dcf0      	bgt.n	801d86a <_printf_float+0x42a>
 801d888:	e6fc      	b.n	801d684 <_printf_float+0x244>
 801d88a:	f04f 0800 	mov.w	r8, #0
 801d88e:	f104 0919 	add.w	r9, r4, #25
 801d892:	e7f4      	b.n	801d87e <_printf_float+0x43e>

0801d894 <_printf_common>:
 801d894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d898:	4616      	mov	r6, r2
 801d89a:	4698      	mov	r8, r3
 801d89c:	688a      	ldr	r2, [r1, #8]
 801d89e:	690b      	ldr	r3, [r1, #16]
 801d8a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d8a4:	4293      	cmp	r3, r2
 801d8a6:	bfb8      	it	lt
 801d8a8:	4613      	movlt	r3, r2
 801d8aa:	6033      	str	r3, [r6, #0]
 801d8ac:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d8b0:	4607      	mov	r7, r0
 801d8b2:	460c      	mov	r4, r1
 801d8b4:	b10a      	cbz	r2, 801d8ba <_printf_common+0x26>
 801d8b6:	3301      	adds	r3, #1
 801d8b8:	6033      	str	r3, [r6, #0]
 801d8ba:	6823      	ldr	r3, [r4, #0]
 801d8bc:	0699      	lsls	r1, r3, #26
 801d8be:	bf42      	ittt	mi
 801d8c0:	6833      	ldrmi	r3, [r6, #0]
 801d8c2:	3302      	addmi	r3, #2
 801d8c4:	6033      	strmi	r3, [r6, #0]
 801d8c6:	6825      	ldr	r5, [r4, #0]
 801d8c8:	f015 0506 	ands.w	r5, r5, #6
 801d8cc:	d106      	bne.n	801d8dc <_printf_common+0x48>
 801d8ce:	f104 0a19 	add.w	sl, r4, #25
 801d8d2:	68e3      	ldr	r3, [r4, #12]
 801d8d4:	6832      	ldr	r2, [r6, #0]
 801d8d6:	1a9b      	subs	r3, r3, r2
 801d8d8:	42ab      	cmp	r3, r5
 801d8da:	dc26      	bgt.n	801d92a <_printf_common+0x96>
 801d8dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d8e0:	6822      	ldr	r2, [r4, #0]
 801d8e2:	3b00      	subs	r3, #0
 801d8e4:	bf18      	it	ne
 801d8e6:	2301      	movne	r3, #1
 801d8e8:	0692      	lsls	r2, r2, #26
 801d8ea:	d42b      	bmi.n	801d944 <_printf_common+0xb0>
 801d8ec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d8f0:	4641      	mov	r1, r8
 801d8f2:	4638      	mov	r0, r7
 801d8f4:	47c8      	blx	r9
 801d8f6:	3001      	adds	r0, #1
 801d8f8:	d01e      	beq.n	801d938 <_printf_common+0xa4>
 801d8fa:	6823      	ldr	r3, [r4, #0]
 801d8fc:	6922      	ldr	r2, [r4, #16]
 801d8fe:	f003 0306 	and.w	r3, r3, #6
 801d902:	2b04      	cmp	r3, #4
 801d904:	bf02      	ittt	eq
 801d906:	68e5      	ldreq	r5, [r4, #12]
 801d908:	6833      	ldreq	r3, [r6, #0]
 801d90a:	1aed      	subeq	r5, r5, r3
 801d90c:	68a3      	ldr	r3, [r4, #8]
 801d90e:	bf0c      	ite	eq
 801d910:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d914:	2500      	movne	r5, #0
 801d916:	4293      	cmp	r3, r2
 801d918:	bfc4      	itt	gt
 801d91a:	1a9b      	subgt	r3, r3, r2
 801d91c:	18ed      	addgt	r5, r5, r3
 801d91e:	2600      	movs	r6, #0
 801d920:	341a      	adds	r4, #26
 801d922:	42b5      	cmp	r5, r6
 801d924:	d11a      	bne.n	801d95c <_printf_common+0xc8>
 801d926:	2000      	movs	r0, #0
 801d928:	e008      	b.n	801d93c <_printf_common+0xa8>
 801d92a:	2301      	movs	r3, #1
 801d92c:	4652      	mov	r2, sl
 801d92e:	4641      	mov	r1, r8
 801d930:	4638      	mov	r0, r7
 801d932:	47c8      	blx	r9
 801d934:	3001      	adds	r0, #1
 801d936:	d103      	bne.n	801d940 <_printf_common+0xac>
 801d938:	f04f 30ff 	mov.w	r0, #4294967295
 801d93c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d940:	3501      	adds	r5, #1
 801d942:	e7c6      	b.n	801d8d2 <_printf_common+0x3e>
 801d944:	18e1      	adds	r1, r4, r3
 801d946:	1c5a      	adds	r2, r3, #1
 801d948:	2030      	movs	r0, #48	@ 0x30
 801d94a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d94e:	4422      	add	r2, r4
 801d950:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d954:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d958:	3302      	adds	r3, #2
 801d95a:	e7c7      	b.n	801d8ec <_printf_common+0x58>
 801d95c:	2301      	movs	r3, #1
 801d95e:	4622      	mov	r2, r4
 801d960:	4641      	mov	r1, r8
 801d962:	4638      	mov	r0, r7
 801d964:	47c8      	blx	r9
 801d966:	3001      	adds	r0, #1
 801d968:	d0e6      	beq.n	801d938 <_printf_common+0xa4>
 801d96a:	3601      	adds	r6, #1
 801d96c:	e7d9      	b.n	801d922 <_printf_common+0x8e>
	...

0801d970 <_printf_i>:
 801d970:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d974:	7e0f      	ldrb	r7, [r1, #24]
 801d976:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d978:	2f78      	cmp	r7, #120	@ 0x78
 801d97a:	4691      	mov	r9, r2
 801d97c:	4680      	mov	r8, r0
 801d97e:	460c      	mov	r4, r1
 801d980:	469a      	mov	sl, r3
 801d982:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d986:	d807      	bhi.n	801d998 <_printf_i+0x28>
 801d988:	2f62      	cmp	r7, #98	@ 0x62
 801d98a:	d80a      	bhi.n	801d9a2 <_printf_i+0x32>
 801d98c:	2f00      	cmp	r7, #0
 801d98e:	f000 80d2 	beq.w	801db36 <_printf_i+0x1c6>
 801d992:	2f58      	cmp	r7, #88	@ 0x58
 801d994:	f000 80b9 	beq.w	801db0a <_printf_i+0x19a>
 801d998:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d99c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d9a0:	e03a      	b.n	801da18 <_printf_i+0xa8>
 801d9a2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d9a6:	2b15      	cmp	r3, #21
 801d9a8:	d8f6      	bhi.n	801d998 <_printf_i+0x28>
 801d9aa:	a101      	add	r1, pc, #4	@ (adr r1, 801d9b0 <_printf_i+0x40>)
 801d9ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d9b0:	0801da09 	.word	0x0801da09
 801d9b4:	0801da1d 	.word	0x0801da1d
 801d9b8:	0801d999 	.word	0x0801d999
 801d9bc:	0801d999 	.word	0x0801d999
 801d9c0:	0801d999 	.word	0x0801d999
 801d9c4:	0801d999 	.word	0x0801d999
 801d9c8:	0801da1d 	.word	0x0801da1d
 801d9cc:	0801d999 	.word	0x0801d999
 801d9d0:	0801d999 	.word	0x0801d999
 801d9d4:	0801d999 	.word	0x0801d999
 801d9d8:	0801d999 	.word	0x0801d999
 801d9dc:	0801db1d 	.word	0x0801db1d
 801d9e0:	0801da47 	.word	0x0801da47
 801d9e4:	0801dad7 	.word	0x0801dad7
 801d9e8:	0801d999 	.word	0x0801d999
 801d9ec:	0801d999 	.word	0x0801d999
 801d9f0:	0801db3f 	.word	0x0801db3f
 801d9f4:	0801d999 	.word	0x0801d999
 801d9f8:	0801da47 	.word	0x0801da47
 801d9fc:	0801d999 	.word	0x0801d999
 801da00:	0801d999 	.word	0x0801d999
 801da04:	0801dadf 	.word	0x0801dadf
 801da08:	6833      	ldr	r3, [r6, #0]
 801da0a:	1d1a      	adds	r2, r3, #4
 801da0c:	681b      	ldr	r3, [r3, #0]
 801da0e:	6032      	str	r2, [r6, #0]
 801da10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801da14:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801da18:	2301      	movs	r3, #1
 801da1a:	e09d      	b.n	801db58 <_printf_i+0x1e8>
 801da1c:	6833      	ldr	r3, [r6, #0]
 801da1e:	6820      	ldr	r0, [r4, #0]
 801da20:	1d19      	adds	r1, r3, #4
 801da22:	6031      	str	r1, [r6, #0]
 801da24:	0606      	lsls	r6, r0, #24
 801da26:	d501      	bpl.n	801da2c <_printf_i+0xbc>
 801da28:	681d      	ldr	r5, [r3, #0]
 801da2a:	e003      	b.n	801da34 <_printf_i+0xc4>
 801da2c:	0645      	lsls	r5, r0, #25
 801da2e:	d5fb      	bpl.n	801da28 <_printf_i+0xb8>
 801da30:	f9b3 5000 	ldrsh.w	r5, [r3]
 801da34:	2d00      	cmp	r5, #0
 801da36:	da03      	bge.n	801da40 <_printf_i+0xd0>
 801da38:	232d      	movs	r3, #45	@ 0x2d
 801da3a:	426d      	negs	r5, r5
 801da3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801da40:	4859      	ldr	r0, [pc, #356]	@ (801dba8 <_printf_i+0x238>)
 801da42:	230a      	movs	r3, #10
 801da44:	e011      	b.n	801da6a <_printf_i+0xfa>
 801da46:	6821      	ldr	r1, [r4, #0]
 801da48:	6833      	ldr	r3, [r6, #0]
 801da4a:	0608      	lsls	r0, r1, #24
 801da4c:	f853 5b04 	ldr.w	r5, [r3], #4
 801da50:	d402      	bmi.n	801da58 <_printf_i+0xe8>
 801da52:	0649      	lsls	r1, r1, #25
 801da54:	bf48      	it	mi
 801da56:	b2ad      	uxthmi	r5, r5
 801da58:	2f6f      	cmp	r7, #111	@ 0x6f
 801da5a:	4853      	ldr	r0, [pc, #332]	@ (801dba8 <_printf_i+0x238>)
 801da5c:	6033      	str	r3, [r6, #0]
 801da5e:	bf14      	ite	ne
 801da60:	230a      	movne	r3, #10
 801da62:	2308      	moveq	r3, #8
 801da64:	2100      	movs	r1, #0
 801da66:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801da6a:	6866      	ldr	r6, [r4, #4]
 801da6c:	60a6      	str	r6, [r4, #8]
 801da6e:	2e00      	cmp	r6, #0
 801da70:	bfa2      	ittt	ge
 801da72:	6821      	ldrge	r1, [r4, #0]
 801da74:	f021 0104 	bicge.w	r1, r1, #4
 801da78:	6021      	strge	r1, [r4, #0]
 801da7a:	b90d      	cbnz	r5, 801da80 <_printf_i+0x110>
 801da7c:	2e00      	cmp	r6, #0
 801da7e:	d04b      	beq.n	801db18 <_printf_i+0x1a8>
 801da80:	4616      	mov	r6, r2
 801da82:	fbb5 f1f3 	udiv	r1, r5, r3
 801da86:	fb03 5711 	mls	r7, r3, r1, r5
 801da8a:	5dc7      	ldrb	r7, [r0, r7]
 801da8c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801da90:	462f      	mov	r7, r5
 801da92:	42bb      	cmp	r3, r7
 801da94:	460d      	mov	r5, r1
 801da96:	d9f4      	bls.n	801da82 <_printf_i+0x112>
 801da98:	2b08      	cmp	r3, #8
 801da9a:	d10b      	bne.n	801dab4 <_printf_i+0x144>
 801da9c:	6823      	ldr	r3, [r4, #0]
 801da9e:	07df      	lsls	r7, r3, #31
 801daa0:	d508      	bpl.n	801dab4 <_printf_i+0x144>
 801daa2:	6923      	ldr	r3, [r4, #16]
 801daa4:	6861      	ldr	r1, [r4, #4]
 801daa6:	4299      	cmp	r1, r3
 801daa8:	bfde      	ittt	le
 801daaa:	2330      	movle	r3, #48	@ 0x30
 801daac:	f806 3c01 	strble.w	r3, [r6, #-1]
 801dab0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801dab4:	1b92      	subs	r2, r2, r6
 801dab6:	6122      	str	r2, [r4, #16]
 801dab8:	f8cd a000 	str.w	sl, [sp]
 801dabc:	464b      	mov	r3, r9
 801dabe:	aa03      	add	r2, sp, #12
 801dac0:	4621      	mov	r1, r4
 801dac2:	4640      	mov	r0, r8
 801dac4:	f7ff fee6 	bl	801d894 <_printf_common>
 801dac8:	3001      	adds	r0, #1
 801daca:	d14a      	bne.n	801db62 <_printf_i+0x1f2>
 801dacc:	f04f 30ff 	mov.w	r0, #4294967295
 801dad0:	b004      	add	sp, #16
 801dad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dad6:	6823      	ldr	r3, [r4, #0]
 801dad8:	f043 0320 	orr.w	r3, r3, #32
 801dadc:	6023      	str	r3, [r4, #0]
 801dade:	4833      	ldr	r0, [pc, #204]	@ (801dbac <_printf_i+0x23c>)
 801dae0:	2778      	movs	r7, #120	@ 0x78
 801dae2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801dae6:	6823      	ldr	r3, [r4, #0]
 801dae8:	6831      	ldr	r1, [r6, #0]
 801daea:	061f      	lsls	r7, r3, #24
 801daec:	f851 5b04 	ldr.w	r5, [r1], #4
 801daf0:	d402      	bmi.n	801daf8 <_printf_i+0x188>
 801daf2:	065f      	lsls	r7, r3, #25
 801daf4:	bf48      	it	mi
 801daf6:	b2ad      	uxthmi	r5, r5
 801daf8:	6031      	str	r1, [r6, #0]
 801dafa:	07d9      	lsls	r1, r3, #31
 801dafc:	bf44      	itt	mi
 801dafe:	f043 0320 	orrmi.w	r3, r3, #32
 801db02:	6023      	strmi	r3, [r4, #0]
 801db04:	b11d      	cbz	r5, 801db0e <_printf_i+0x19e>
 801db06:	2310      	movs	r3, #16
 801db08:	e7ac      	b.n	801da64 <_printf_i+0xf4>
 801db0a:	4827      	ldr	r0, [pc, #156]	@ (801dba8 <_printf_i+0x238>)
 801db0c:	e7e9      	b.n	801dae2 <_printf_i+0x172>
 801db0e:	6823      	ldr	r3, [r4, #0]
 801db10:	f023 0320 	bic.w	r3, r3, #32
 801db14:	6023      	str	r3, [r4, #0]
 801db16:	e7f6      	b.n	801db06 <_printf_i+0x196>
 801db18:	4616      	mov	r6, r2
 801db1a:	e7bd      	b.n	801da98 <_printf_i+0x128>
 801db1c:	6833      	ldr	r3, [r6, #0]
 801db1e:	6825      	ldr	r5, [r4, #0]
 801db20:	6961      	ldr	r1, [r4, #20]
 801db22:	1d18      	adds	r0, r3, #4
 801db24:	6030      	str	r0, [r6, #0]
 801db26:	062e      	lsls	r6, r5, #24
 801db28:	681b      	ldr	r3, [r3, #0]
 801db2a:	d501      	bpl.n	801db30 <_printf_i+0x1c0>
 801db2c:	6019      	str	r1, [r3, #0]
 801db2e:	e002      	b.n	801db36 <_printf_i+0x1c6>
 801db30:	0668      	lsls	r0, r5, #25
 801db32:	d5fb      	bpl.n	801db2c <_printf_i+0x1bc>
 801db34:	8019      	strh	r1, [r3, #0]
 801db36:	2300      	movs	r3, #0
 801db38:	6123      	str	r3, [r4, #16]
 801db3a:	4616      	mov	r6, r2
 801db3c:	e7bc      	b.n	801dab8 <_printf_i+0x148>
 801db3e:	6833      	ldr	r3, [r6, #0]
 801db40:	1d1a      	adds	r2, r3, #4
 801db42:	6032      	str	r2, [r6, #0]
 801db44:	681e      	ldr	r6, [r3, #0]
 801db46:	6862      	ldr	r2, [r4, #4]
 801db48:	2100      	movs	r1, #0
 801db4a:	4630      	mov	r0, r6
 801db4c:	f7e2 fb40 	bl	80001d0 <memchr>
 801db50:	b108      	cbz	r0, 801db56 <_printf_i+0x1e6>
 801db52:	1b80      	subs	r0, r0, r6
 801db54:	6060      	str	r0, [r4, #4]
 801db56:	6863      	ldr	r3, [r4, #4]
 801db58:	6123      	str	r3, [r4, #16]
 801db5a:	2300      	movs	r3, #0
 801db5c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801db60:	e7aa      	b.n	801dab8 <_printf_i+0x148>
 801db62:	6923      	ldr	r3, [r4, #16]
 801db64:	4632      	mov	r2, r6
 801db66:	4649      	mov	r1, r9
 801db68:	4640      	mov	r0, r8
 801db6a:	47d0      	blx	sl
 801db6c:	3001      	adds	r0, #1
 801db6e:	d0ad      	beq.n	801dacc <_printf_i+0x15c>
 801db70:	6823      	ldr	r3, [r4, #0]
 801db72:	079b      	lsls	r3, r3, #30
 801db74:	d413      	bmi.n	801db9e <_printf_i+0x22e>
 801db76:	68e0      	ldr	r0, [r4, #12]
 801db78:	9b03      	ldr	r3, [sp, #12]
 801db7a:	4298      	cmp	r0, r3
 801db7c:	bfb8      	it	lt
 801db7e:	4618      	movlt	r0, r3
 801db80:	e7a6      	b.n	801dad0 <_printf_i+0x160>
 801db82:	2301      	movs	r3, #1
 801db84:	4632      	mov	r2, r6
 801db86:	4649      	mov	r1, r9
 801db88:	4640      	mov	r0, r8
 801db8a:	47d0      	blx	sl
 801db8c:	3001      	adds	r0, #1
 801db8e:	d09d      	beq.n	801dacc <_printf_i+0x15c>
 801db90:	3501      	adds	r5, #1
 801db92:	68e3      	ldr	r3, [r4, #12]
 801db94:	9903      	ldr	r1, [sp, #12]
 801db96:	1a5b      	subs	r3, r3, r1
 801db98:	42ab      	cmp	r3, r5
 801db9a:	dcf2      	bgt.n	801db82 <_printf_i+0x212>
 801db9c:	e7eb      	b.n	801db76 <_printf_i+0x206>
 801db9e:	2500      	movs	r5, #0
 801dba0:	f104 0619 	add.w	r6, r4, #25
 801dba4:	e7f5      	b.n	801db92 <_printf_i+0x222>
 801dba6:	bf00      	nop
 801dba8:	08025f08 	.word	0x08025f08
 801dbac:	08025f19 	.word	0x08025f19

0801dbb0 <_scanf_float>:
 801dbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dbb4:	b087      	sub	sp, #28
 801dbb6:	4617      	mov	r7, r2
 801dbb8:	9303      	str	r3, [sp, #12]
 801dbba:	688b      	ldr	r3, [r1, #8]
 801dbbc:	1e5a      	subs	r2, r3, #1
 801dbbe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801dbc2:	bf81      	itttt	hi
 801dbc4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801dbc8:	eb03 0b05 	addhi.w	fp, r3, r5
 801dbcc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801dbd0:	608b      	strhi	r3, [r1, #8]
 801dbd2:	680b      	ldr	r3, [r1, #0]
 801dbd4:	460a      	mov	r2, r1
 801dbd6:	f04f 0500 	mov.w	r5, #0
 801dbda:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801dbde:	f842 3b1c 	str.w	r3, [r2], #28
 801dbe2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801dbe6:	4680      	mov	r8, r0
 801dbe8:	460c      	mov	r4, r1
 801dbea:	bf98      	it	ls
 801dbec:	f04f 0b00 	movls.w	fp, #0
 801dbf0:	9201      	str	r2, [sp, #4]
 801dbf2:	4616      	mov	r6, r2
 801dbf4:	46aa      	mov	sl, r5
 801dbf6:	46a9      	mov	r9, r5
 801dbf8:	9502      	str	r5, [sp, #8]
 801dbfa:	68a2      	ldr	r2, [r4, #8]
 801dbfc:	b152      	cbz	r2, 801dc14 <_scanf_float+0x64>
 801dbfe:	683b      	ldr	r3, [r7, #0]
 801dc00:	781b      	ldrb	r3, [r3, #0]
 801dc02:	2b4e      	cmp	r3, #78	@ 0x4e
 801dc04:	d864      	bhi.n	801dcd0 <_scanf_float+0x120>
 801dc06:	2b40      	cmp	r3, #64	@ 0x40
 801dc08:	d83c      	bhi.n	801dc84 <_scanf_float+0xd4>
 801dc0a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801dc0e:	b2c8      	uxtb	r0, r1
 801dc10:	280e      	cmp	r0, #14
 801dc12:	d93a      	bls.n	801dc8a <_scanf_float+0xda>
 801dc14:	f1b9 0f00 	cmp.w	r9, #0
 801dc18:	d003      	beq.n	801dc22 <_scanf_float+0x72>
 801dc1a:	6823      	ldr	r3, [r4, #0]
 801dc1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801dc20:	6023      	str	r3, [r4, #0]
 801dc22:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dc26:	f1ba 0f01 	cmp.w	sl, #1
 801dc2a:	f200 8117 	bhi.w	801de5c <_scanf_float+0x2ac>
 801dc2e:	9b01      	ldr	r3, [sp, #4]
 801dc30:	429e      	cmp	r6, r3
 801dc32:	f200 8108 	bhi.w	801de46 <_scanf_float+0x296>
 801dc36:	2001      	movs	r0, #1
 801dc38:	b007      	add	sp, #28
 801dc3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dc3e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801dc42:	2a0d      	cmp	r2, #13
 801dc44:	d8e6      	bhi.n	801dc14 <_scanf_float+0x64>
 801dc46:	a101      	add	r1, pc, #4	@ (adr r1, 801dc4c <_scanf_float+0x9c>)
 801dc48:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801dc4c:	0801dd93 	.word	0x0801dd93
 801dc50:	0801dc15 	.word	0x0801dc15
 801dc54:	0801dc15 	.word	0x0801dc15
 801dc58:	0801dc15 	.word	0x0801dc15
 801dc5c:	0801ddf3 	.word	0x0801ddf3
 801dc60:	0801ddcb 	.word	0x0801ddcb
 801dc64:	0801dc15 	.word	0x0801dc15
 801dc68:	0801dc15 	.word	0x0801dc15
 801dc6c:	0801dda1 	.word	0x0801dda1
 801dc70:	0801dc15 	.word	0x0801dc15
 801dc74:	0801dc15 	.word	0x0801dc15
 801dc78:	0801dc15 	.word	0x0801dc15
 801dc7c:	0801dc15 	.word	0x0801dc15
 801dc80:	0801dd59 	.word	0x0801dd59
 801dc84:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801dc88:	e7db      	b.n	801dc42 <_scanf_float+0x92>
 801dc8a:	290e      	cmp	r1, #14
 801dc8c:	d8c2      	bhi.n	801dc14 <_scanf_float+0x64>
 801dc8e:	a001      	add	r0, pc, #4	@ (adr r0, 801dc94 <_scanf_float+0xe4>)
 801dc90:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801dc94:	0801dd49 	.word	0x0801dd49
 801dc98:	0801dc15 	.word	0x0801dc15
 801dc9c:	0801dd49 	.word	0x0801dd49
 801dca0:	0801dddf 	.word	0x0801dddf
 801dca4:	0801dc15 	.word	0x0801dc15
 801dca8:	0801dcf1 	.word	0x0801dcf1
 801dcac:	0801dd2f 	.word	0x0801dd2f
 801dcb0:	0801dd2f 	.word	0x0801dd2f
 801dcb4:	0801dd2f 	.word	0x0801dd2f
 801dcb8:	0801dd2f 	.word	0x0801dd2f
 801dcbc:	0801dd2f 	.word	0x0801dd2f
 801dcc0:	0801dd2f 	.word	0x0801dd2f
 801dcc4:	0801dd2f 	.word	0x0801dd2f
 801dcc8:	0801dd2f 	.word	0x0801dd2f
 801dccc:	0801dd2f 	.word	0x0801dd2f
 801dcd0:	2b6e      	cmp	r3, #110	@ 0x6e
 801dcd2:	d809      	bhi.n	801dce8 <_scanf_float+0x138>
 801dcd4:	2b60      	cmp	r3, #96	@ 0x60
 801dcd6:	d8b2      	bhi.n	801dc3e <_scanf_float+0x8e>
 801dcd8:	2b54      	cmp	r3, #84	@ 0x54
 801dcda:	d07b      	beq.n	801ddd4 <_scanf_float+0x224>
 801dcdc:	2b59      	cmp	r3, #89	@ 0x59
 801dcde:	d199      	bne.n	801dc14 <_scanf_float+0x64>
 801dce0:	2d07      	cmp	r5, #7
 801dce2:	d197      	bne.n	801dc14 <_scanf_float+0x64>
 801dce4:	2508      	movs	r5, #8
 801dce6:	e02c      	b.n	801dd42 <_scanf_float+0x192>
 801dce8:	2b74      	cmp	r3, #116	@ 0x74
 801dcea:	d073      	beq.n	801ddd4 <_scanf_float+0x224>
 801dcec:	2b79      	cmp	r3, #121	@ 0x79
 801dcee:	e7f6      	b.n	801dcde <_scanf_float+0x12e>
 801dcf0:	6821      	ldr	r1, [r4, #0]
 801dcf2:	05c8      	lsls	r0, r1, #23
 801dcf4:	d51b      	bpl.n	801dd2e <_scanf_float+0x17e>
 801dcf6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801dcfa:	6021      	str	r1, [r4, #0]
 801dcfc:	f109 0901 	add.w	r9, r9, #1
 801dd00:	f1bb 0f00 	cmp.w	fp, #0
 801dd04:	d003      	beq.n	801dd0e <_scanf_float+0x15e>
 801dd06:	3201      	adds	r2, #1
 801dd08:	f10b 3bff 	add.w	fp, fp, #4294967295
 801dd0c:	60a2      	str	r2, [r4, #8]
 801dd0e:	68a3      	ldr	r3, [r4, #8]
 801dd10:	3b01      	subs	r3, #1
 801dd12:	60a3      	str	r3, [r4, #8]
 801dd14:	6923      	ldr	r3, [r4, #16]
 801dd16:	3301      	adds	r3, #1
 801dd18:	6123      	str	r3, [r4, #16]
 801dd1a:	687b      	ldr	r3, [r7, #4]
 801dd1c:	3b01      	subs	r3, #1
 801dd1e:	2b00      	cmp	r3, #0
 801dd20:	607b      	str	r3, [r7, #4]
 801dd22:	f340 8087 	ble.w	801de34 <_scanf_float+0x284>
 801dd26:	683b      	ldr	r3, [r7, #0]
 801dd28:	3301      	adds	r3, #1
 801dd2a:	603b      	str	r3, [r7, #0]
 801dd2c:	e765      	b.n	801dbfa <_scanf_float+0x4a>
 801dd2e:	eb1a 0105 	adds.w	r1, sl, r5
 801dd32:	f47f af6f 	bne.w	801dc14 <_scanf_float+0x64>
 801dd36:	6822      	ldr	r2, [r4, #0]
 801dd38:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801dd3c:	6022      	str	r2, [r4, #0]
 801dd3e:	460d      	mov	r5, r1
 801dd40:	468a      	mov	sl, r1
 801dd42:	f806 3b01 	strb.w	r3, [r6], #1
 801dd46:	e7e2      	b.n	801dd0e <_scanf_float+0x15e>
 801dd48:	6822      	ldr	r2, [r4, #0]
 801dd4a:	0610      	lsls	r0, r2, #24
 801dd4c:	f57f af62 	bpl.w	801dc14 <_scanf_float+0x64>
 801dd50:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801dd54:	6022      	str	r2, [r4, #0]
 801dd56:	e7f4      	b.n	801dd42 <_scanf_float+0x192>
 801dd58:	f1ba 0f00 	cmp.w	sl, #0
 801dd5c:	d10e      	bne.n	801dd7c <_scanf_float+0x1cc>
 801dd5e:	f1b9 0f00 	cmp.w	r9, #0
 801dd62:	d10e      	bne.n	801dd82 <_scanf_float+0x1d2>
 801dd64:	6822      	ldr	r2, [r4, #0]
 801dd66:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801dd6a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801dd6e:	d108      	bne.n	801dd82 <_scanf_float+0x1d2>
 801dd70:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801dd74:	6022      	str	r2, [r4, #0]
 801dd76:	f04f 0a01 	mov.w	sl, #1
 801dd7a:	e7e2      	b.n	801dd42 <_scanf_float+0x192>
 801dd7c:	f1ba 0f02 	cmp.w	sl, #2
 801dd80:	d055      	beq.n	801de2e <_scanf_float+0x27e>
 801dd82:	2d01      	cmp	r5, #1
 801dd84:	d002      	beq.n	801dd8c <_scanf_float+0x1dc>
 801dd86:	2d04      	cmp	r5, #4
 801dd88:	f47f af44 	bne.w	801dc14 <_scanf_float+0x64>
 801dd8c:	3501      	adds	r5, #1
 801dd8e:	b2ed      	uxtb	r5, r5
 801dd90:	e7d7      	b.n	801dd42 <_scanf_float+0x192>
 801dd92:	f1ba 0f01 	cmp.w	sl, #1
 801dd96:	f47f af3d 	bne.w	801dc14 <_scanf_float+0x64>
 801dd9a:	f04f 0a02 	mov.w	sl, #2
 801dd9e:	e7d0      	b.n	801dd42 <_scanf_float+0x192>
 801dda0:	b97d      	cbnz	r5, 801ddc2 <_scanf_float+0x212>
 801dda2:	f1b9 0f00 	cmp.w	r9, #0
 801dda6:	f47f af38 	bne.w	801dc1a <_scanf_float+0x6a>
 801ddaa:	6822      	ldr	r2, [r4, #0]
 801ddac:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801ddb0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801ddb4:	f040 8108 	bne.w	801dfc8 <_scanf_float+0x418>
 801ddb8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801ddbc:	6022      	str	r2, [r4, #0]
 801ddbe:	2501      	movs	r5, #1
 801ddc0:	e7bf      	b.n	801dd42 <_scanf_float+0x192>
 801ddc2:	2d03      	cmp	r5, #3
 801ddc4:	d0e2      	beq.n	801dd8c <_scanf_float+0x1dc>
 801ddc6:	2d05      	cmp	r5, #5
 801ddc8:	e7de      	b.n	801dd88 <_scanf_float+0x1d8>
 801ddca:	2d02      	cmp	r5, #2
 801ddcc:	f47f af22 	bne.w	801dc14 <_scanf_float+0x64>
 801ddd0:	2503      	movs	r5, #3
 801ddd2:	e7b6      	b.n	801dd42 <_scanf_float+0x192>
 801ddd4:	2d06      	cmp	r5, #6
 801ddd6:	f47f af1d 	bne.w	801dc14 <_scanf_float+0x64>
 801ddda:	2507      	movs	r5, #7
 801dddc:	e7b1      	b.n	801dd42 <_scanf_float+0x192>
 801ddde:	6822      	ldr	r2, [r4, #0]
 801dde0:	0591      	lsls	r1, r2, #22
 801dde2:	f57f af17 	bpl.w	801dc14 <_scanf_float+0x64>
 801dde6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801ddea:	6022      	str	r2, [r4, #0]
 801ddec:	f8cd 9008 	str.w	r9, [sp, #8]
 801ddf0:	e7a7      	b.n	801dd42 <_scanf_float+0x192>
 801ddf2:	6822      	ldr	r2, [r4, #0]
 801ddf4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801ddf8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801ddfc:	d006      	beq.n	801de0c <_scanf_float+0x25c>
 801ddfe:	0550      	lsls	r0, r2, #21
 801de00:	f57f af08 	bpl.w	801dc14 <_scanf_float+0x64>
 801de04:	f1b9 0f00 	cmp.w	r9, #0
 801de08:	f000 80de 	beq.w	801dfc8 <_scanf_float+0x418>
 801de0c:	0591      	lsls	r1, r2, #22
 801de0e:	bf58      	it	pl
 801de10:	9902      	ldrpl	r1, [sp, #8]
 801de12:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801de16:	bf58      	it	pl
 801de18:	eba9 0101 	subpl.w	r1, r9, r1
 801de1c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801de20:	bf58      	it	pl
 801de22:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801de26:	6022      	str	r2, [r4, #0]
 801de28:	f04f 0900 	mov.w	r9, #0
 801de2c:	e789      	b.n	801dd42 <_scanf_float+0x192>
 801de2e:	f04f 0a03 	mov.w	sl, #3
 801de32:	e786      	b.n	801dd42 <_scanf_float+0x192>
 801de34:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801de38:	4639      	mov	r1, r7
 801de3a:	4640      	mov	r0, r8
 801de3c:	4798      	blx	r3
 801de3e:	2800      	cmp	r0, #0
 801de40:	f43f aedb 	beq.w	801dbfa <_scanf_float+0x4a>
 801de44:	e6e6      	b.n	801dc14 <_scanf_float+0x64>
 801de46:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801de4a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801de4e:	463a      	mov	r2, r7
 801de50:	4640      	mov	r0, r8
 801de52:	4798      	blx	r3
 801de54:	6923      	ldr	r3, [r4, #16]
 801de56:	3b01      	subs	r3, #1
 801de58:	6123      	str	r3, [r4, #16]
 801de5a:	e6e8      	b.n	801dc2e <_scanf_float+0x7e>
 801de5c:	1e6b      	subs	r3, r5, #1
 801de5e:	2b06      	cmp	r3, #6
 801de60:	d824      	bhi.n	801deac <_scanf_float+0x2fc>
 801de62:	2d02      	cmp	r5, #2
 801de64:	d836      	bhi.n	801ded4 <_scanf_float+0x324>
 801de66:	9b01      	ldr	r3, [sp, #4]
 801de68:	429e      	cmp	r6, r3
 801de6a:	f67f aee4 	bls.w	801dc36 <_scanf_float+0x86>
 801de6e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801de72:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801de76:	463a      	mov	r2, r7
 801de78:	4640      	mov	r0, r8
 801de7a:	4798      	blx	r3
 801de7c:	6923      	ldr	r3, [r4, #16]
 801de7e:	3b01      	subs	r3, #1
 801de80:	6123      	str	r3, [r4, #16]
 801de82:	e7f0      	b.n	801de66 <_scanf_float+0x2b6>
 801de84:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801de88:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801de8c:	463a      	mov	r2, r7
 801de8e:	4640      	mov	r0, r8
 801de90:	4798      	blx	r3
 801de92:	6923      	ldr	r3, [r4, #16]
 801de94:	3b01      	subs	r3, #1
 801de96:	6123      	str	r3, [r4, #16]
 801de98:	f10a 3aff 	add.w	sl, sl, #4294967295
 801de9c:	fa5f fa8a 	uxtb.w	sl, sl
 801dea0:	f1ba 0f02 	cmp.w	sl, #2
 801dea4:	d1ee      	bne.n	801de84 <_scanf_float+0x2d4>
 801dea6:	3d03      	subs	r5, #3
 801dea8:	b2ed      	uxtb	r5, r5
 801deaa:	1b76      	subs	r6, r6, r5
 801deac:	6823      	ldr	r3, [r4, #0]
 801deae:	05da      	lsls	r2, r3, #23
 801deb0:	d530      	bpl.n	801df14 <_scanf_float+0x364>
 801deb2:	055b      	lsls	r3, r3, #21
 801deb4:	d511      	bpl.n	801deda <_scanf_float+0x32a>
 801deb6:	9b01      	ldr	r3, [sp, #4]
 801deb8:	429e      	cmp	r6, r3
 801deba:	f67f aebc 	bls.w	801dc36 <_scanf_float+0x86>
 801debe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801dec2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801dec6:	463a      	mov	r2, r7
 801dec8:	4640      	mov	r0, r8
 801deca:	4798      	blx	r3
 801decc:	6923      	ldr	r3, [r4, #16]
 801dece:	3b01      	subs	r3, #1
 801ded0:	6123      	str	r3, [r4, #16]
 801ded2:	e7f0      	b.n	801deb6 <_scanf_float+0x306>
 801ded4:	46aa      	mov	sl, r5
 801ded6:	46b3      	mov	fp, r6
 801ded8:	e7de      	b.n	801de98 <_scanf_float+0x2e8>
 801deda:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801dede:	6923      	ldr	r3, [r4, #16]
 801dee0:	2965      	cmp	r1, #101	@ 0x65
 801dee2:	f103 33ff 	add.w	r3, r3, #4294967295
 801dee6:	f106 35ff 	add.w	r5, r6, #4294967295
 801deea:	6123      	str	r3, [r4, #16]
 801deec:	d00c      	beq.n	801df08 <_scanf_float+0x358>
 801deee:	2945      	cmp	r1, #69	@ 0x45
 801def0:	d00a      	beq.n	801df08 <_scanf_float+0x358>
 801def2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801def6:	463a      	mov	r2, r7
 801def8:	4640      	mov	r0, r8
 801defa:	4798      	blx	r3
 801defc:	6923      	ldr	r3, [r4, #16]
 801defe:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801df02:	3b01      	subs	r3, #1
 801df04:	1eb5      	subs	r5, r6, #2
 801df06:	6123      	str	r3, [r4, #16]
 801df08:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801df0c:	463a      	mov	r2, r7
 801df0e:	4640      	mov	r0, r8
 801df10:	4798      	blx	r3
 801df12:	462e      	mov	r6, r5
 801df14:	6822      	ldr	r2, [r4, #0]
 801df16:	f012 0210 	ands.w	r2, r2, #16
 801df1a:	d001      	beq.n	801df20 <_scanf_float+0x370>
 801df1c:	2000      	movs	r0, #0
 801df1e:	e68b      	b.n	801dc38 <_scanf_float+0x88>
 801df20:	7032      	strb	r2, [r6, #0]
 801df22:	6823      	ldr	r3, [r4, #0]
 801df24:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801df28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801df2c:	d11c      	bne.n	801df68 <_scanf_float+0x3b8>
 801df2e:	9b02      	ldr	r3, [sp, #8]
 801df30:	454b      	cmp	r3, r9
 801df32:	eba3 0209 	sub.w	r2, r3, r9
 801df36:	d123      	bne.n	801df80 <_scanf_float+0x3d0>
 801df38:	9901      	ldr	r1, [sp, #4]
 801df3a:	2200      	movs	r2, #0
 801df3c:	4640      	mov	r0, r8
 801df3e:	f002 fda3 	bl	8020a88 <_strtod_r>
 801df42:	9b03      	ldr	r3, [sp, #12]
 801df44:	6821      	ldr	r1, [r4, #0]
 801df46:	681b      	ldr	r3, [r3, #0]
 801df48:	f011 0f02 	tst.w	r1, #2
 801df4c:	ec57 6b10 	vmov	r6, r7, d0
 801df50:	f103 0204 	add.w	r2, r3, #4
 801df54:	d01f      	beq.n	801df96 <_scanf_float+0x3e6>
 801df56:	9903      	ldr	r1, [sp, #12]
 801df58:	600a      	str	r2, [r1, #0]
 801df5a:	681b      	ldr	r3, [r3, #0]
 801df5c:	e9c3 6700 	strd	r6, r7, [r3]
 801df60:	68e3      	ldr	r3, [r4, #12]
 801df62:	3301      	adds	r3, #1
 801df64:	60e3      	str	r3, [r4, #12]
 801df66:	e7d9      	b.n	801df1c <_scanf_float+0x36c>
 801df68:	9b04      	ldr	r3, [sp, #16]
 801df6a:	2b00      	cmp	r3, #0
 801df6c:	d0e4      	beq.n	801df38 <_scanf_float+0x388>
 801df6e:	9905      	ldr	r1, [sp, #20]
 801df70:	230a      	movs	r3, #10
 801df72:	3101      	adds	r1, #1
 801df74:	4640      	mov	r0, r8
 801df76:	f7ff f9c1 	bl	801d2fc <_strtol_r>
 801df7a:	9b04      	ldr	r3, [sp, #16]
 801df7c:	9e05      	ldr	r6, [sp, #20]
 801df7e:	1ac2      	subs	r2, r0, r3
 801df80:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801df84:	429e      	cmp	r6, r3
 801df86:	bf28      	it	cs
 801df88:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801df8c:	4910      	ldr	r1, [pc, #64]	@ (801dfd0 <_scanf_float+0x420>)
 801df8e:	4630      	mov	r0, r6
 801df90:	f000 f9b6 	bl	801e300 <siprintf>
 801df94:	e7d0      	b.n	801df38 <_scanf_float+0x388>
 801df96:	f011 0f04 	tst.w	r1, #4
 801df9a:	9903      	ldr	r1, [sp, #12]
 801df9c:	600a      	str	r2, [r1, #0]
 801df9e:	d1dc      	bne.n	801df5a <_scanf_float+0x3aa>
 801dfa0:	681d      	ldr	r5, [r3, #0]
 801dfa2:	4632      	mov	r2, r6
 801dfa4:	463b      	mov	r3, r7
 801dfa6:	4630      	mov	r0, r6
 801dfa8:	4639      	mov	r1, r7
 801dfaa:	f7e2 fdbf 	bl	8000b2c <__aeabi_dcmpun>
 801dfae:	b128      	cbz	r0, 801dfbc <_scanf_float+0x40c>
 801dfb0:	4808      	ldr	r0, [pc, #32]	@ (801dfd4 <_scanf_float+0x424>)
 801dfb2:	f000 fb43 	bl	801e63c <nanf>
 801dfb6:	ed85 0a00 	vstr	s0, [r5]
 801dfba:	e7d1      	b.n	801df60 <_scanf_float+0x3b0>
 801dfbc:	4630      	mov	r0, r6
 801dfbe:	4639      	mov	r1, r7
 801dfc0:	f7e2 fe12 	bl	8000be8 <__aeabi_d2f>
 801dfc4:	6028      	str	r0, [r5, #0]
 801dfc6:	e7cb      	b.n	801df60 <_scanf_float+0x3b0>
 801dfc8:	f04f 0900 	mov.w	r9, #0
 801dfcc:	e629      	b.n	801dc22 <_scanf_float+0x72>
 801dfce:	bf00      	nop
 801dfd0:	08025f2a 	.word	0x08025f2a
 801dfd4:	08025f6a 	.word	0x08025f6a

0801dfd8 <__sflush_r>:
 801dfd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801dfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dfe0:	0716      	lsls	r6, r2, #28
 801dfe2:	4605      	mov	r5, r0
 801dfe4:	460c      	mov	r4, r1
 801dfe6:	d454      	bmi.n	801e092 <__sflush_r+0xba>
 801dfe8:	684b      	ldr	r3, [r1, #4]
 801dfea:	2b00      	cmp	r3, #0
 801dfec:	dc02      	bgt.n	801dff4 <__sflush_r+0x1c>
 801dfee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801dff0:	2b00      	cmp	r3, #0
 801dff2:	dd48      	ble.n	801e086 <__sflush_r+0xae>
 801dff4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801dff6:	2e00      	cmp	r6, #0
 801dff8:	d045      	beq.n	801e086 <__sflush_r+0xae>
 801dffa:	2300      	movs	r3, #0
 801dffc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e000:	682f      	ldr	r7, [r5, #0]
 801e002:	6a21      	ldr	r1, [r4, #32]
 801e004:	602b      	str	r3, [r5, #0]
 801e006:	d030      	beq.n	801e06a <__sflush_r+0x92>
 801e008:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e00a:	89a3      	ldrh	r3, [r4, #12]
 801e00c:	0759      	lsls	r1, r3, #29
 801e00e:	d505      	bpl.n	801e01c <__sflush_r+0x44>
 801e010:	6863      	ldr	r3, [r4, #4]
 801e012:	1ad2      	subs	r2, r2, r3
 801e014:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e016:	b10b      	cbz	r3, 801e01c <__sflush_r+0x44>
 801e018:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e01a:	1ad2      	subs	r2, r2, r3
 801e01c:	2300      	movs	r3, #0
 801e01e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e020:	6a21      	ldr	r1, [r4, #32]
 801e022:	4628      	mov	r0, r5
 801e024:	47b0      	blx	r6
 801e026:	1c43      	adds	r3, r0, #1
 801e028:	89a3      	ldrh	r3, [r4, #12]
 801e02a:	d106      	bne.n	801e03a <__sflush_r+0x62>
 801e02c:	6829      	ldr	r1, [r5, #0]
 801e02e:	291d      	cmp	r1, #29
 801e030:	d82b      	bhi.n	801e08a <__sflush_r+0xb2>
 801e032:	4a2a      	ldr	r2, [pc, #168]	@ (801e0dc <__sflush_r+0x104>)
 801e034:	410a      	asrs	r2, r1
 801e036:	07d6      	lsls	r6, r2, #31
 801e038:	d427      	bmi.n	801e08a <__sflush_r+0xb2>
 801e03a:	2200      	movs	r2, #0
 801e03c:	6062      	str	r2, [r4, #4]
 801e03e:	04d9      	lsls	r1, r3, #19
 801e040:	6922      	ldr	r2, [r4, #16]
 801e042:	6022      	str	r2, [r4, #0]
 801e044:	d504      	bpl.n	801e050 <__sflush_r+0x78>
 801e046:	1c42      	adds	r2, r0, #1
 801e048:	d101      	bne.n	801e04e <__sflush_r+0x76>
 801e04a:	682b      	ldr	r3, [r5, #0]
 801e04c:	b903      	cbnz	r3, 801e050 <__sflush_r+0x78>
 801e04e:	6560      	str	r0, [r4, #84]	@ 0x54
 801e050:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e052:	602f      	str	r7, [r5, #0]
 801e054:	b1b9      	cbz	r1, 801e086 <__sflush_r+0xae>
 801e056:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e05a:	4299      	cmp	r1, r3
 801e05c:	d002      	beq.n	801e064 <__sflush_r+0x8c>
 801e05e:	4628      	mov	r0, r5
 801e060:	f001 f95e 	bl	801f320 <_free_r>
 801e064:	2300      	movs	r3, #0
 801e066:	6363      	str	r3, [r4, #52]	@ 0x34
 801e068:	e00d      	b.n	801e086 <__sflush_r+0xae>
 801e06a:	2301      	movs	r3, #1
 801e06c:	4628      	mov	r0, r5
 801e06e:	47b0      	blx	r6
 801e070:	4602      	mov	r2, r0
 801e072:	1c50      	adds	r0, r2, #1
 801e074:	d1c9      	bne.n	801e00a <__sflush_r+0x32>
 801e076:	682b      	ldr	r3, [r5, #0]
 801e078:	2b00      	cmp	r3, #0
 801e07a:	d0c6      	beq.n	801e00a <__sflush_r+0x32>
 801e07c:	2b1d      	cmp	r3, #29
 801e07e:	d001      	beq.n	801e084 <__sflush_r+0xac>
 801e080:	2b16      	cmp	r3, #22
 801e082:	d11e      	bne.n	801e0c2 <__sflush_r+0xea>
 801e084:	602f      	str	r7, [r5, #0]
 801e086:	2000      	movs	r0, #0
 801e088:	e022      	b.n	801e0d0 <__sflush_r+0xf8>
 801e08a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e08e:	b21b      	sxth	r3, r3
 801e090:	e01b      	b.n	801e0ca <__sflush_r+0xf2>
 801e092:	690f      	ldr	r7, [r1, #16]
 801e094:	2f00      	cmp	r7, #0
 801e096:	d0f6      	beq.n	801e086 <__sflush_r+0xae>
 801e098:	0793      	lsls	r3, r2, #30
 801e09a:	680e      	ldr	r6, [r1, #0]
 801e09c:	bf08      	it	eq
 801e09e:	694b      	ldreq	r3, [r1, #20]
 801e0a0:	600f      	str	r7, [r1, #0]
 801e0a2:	bf18      	it	ne
 801e0a4:	2300      	movne	r3, #0
 801e0a6:	eba6 0807 	sub.w	r8, r6, r7
 801e0aa:	608b      	str	r3, [r1, #8]
 801e0ac:	f1b8 0f00 	cmp.w	r8, #0
 801e0b0:	dde9      	ble.n	801e086 <__sflush_r+0xae>
 801e0b2:	6a21      	ldr	r1, [r4, #32]
 801e0b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e0b6:	4643      	mov	r3, r8
 801e0b8:	463a      	mov	r2, r7
 801e0ba:	4628      	mov	r0, r5
 801e0bc:	47b0      	blx	r6
 801e0be:	2800      	cmp	r0, #0
 801e0c0:	dc08      	bgt.n	801e0d4 <__sflush_r+0xfc>
 801e0c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e0c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e0ca:	81a3      	strh	r3, [r4, #12]
 801e0cc:	f04f 30ff 	mov.w	r0, #4294967295
 801e0d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e0d4:	4407      	add	r7, r0
 801e0d6:	eba8 0800 	sub.w	r8, r8, r0
 801e0da:	e7e7      	b.n	801e0ac <__sflush_r+0xd4>
 801e0dc:	dfbffffe 	.word	0xdfbffffe

0801e0e0 <_fflush_r>:
 801e0e0:	b538      	push	{r3, r4, r5, lr}
 801e0e2:	690b      	ldr	r3, [r1, #16]
 801e0e4:	4605      	mov	r5, r0
 801e0e6:	460c      	mov	r4, r1
 801e0e8:	b913      	cbnz	r3, 801e0f0 <_fflush_r+0x10>
 801e0ea:	2500      	movs	r5, #0
 801e0ec:	4628      	mov	r0, r5
 801e0ee:	bd38      	pop	{r3, r4, r5, pc}
 801e0f0:	b118      	cbz	r0, 801e0fa <_fflush_r+0x1a>
 801e0f2:	6a03      	ldr	r3, [r0, #32]
 801e0f4:	b90b      	cbnz	r3, 801e0fa <_fflush_r+0x1a>
 801e0f6:	f000 f8bb 	bl	801e270 <__sinit>
 801e0fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e0fe:	2b00      	cmp	r3, #0
 801e100:	d0f3      	beq.n	801e0ea <_fflush_r+0xa>
 801e102:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e104:	07d0      	lsls	r0, r2, #31
 801e106:	d404      	bmi.n	801e112 <_fflush_r+0x32>
 801e108:	0599      	lsls	r1, r3, #22
 801e10a:	d402      	bmi.n	801e112 <_fflush_r+0x32>
 801e10c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e10e:	f000 fa7c 	bl	801e60a <__retarget_lock_acquire_recursive>
 801e112:	4628      	mov	r0, r5
 801e114:	4621      	mov	r1, r4
 801e116:	f7ff ff5f 	bl	801dfd8 <__sflush_r>
 801e11a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e11c:	07da      	lsls	r2, r3, #31
 801e11e:	4605      	mov	r5, r0
 801e120:	d4e4      	bmi.n	801e0ec <_fflush_r+0xc>
 801e122:	89a3      	ldrh	r3, [r4, #12]
 801e124:	059b      	lsls	r3, r3, #22
 801e126:	d4e1      	bmi.n	801e0ec <_fflush_r+0xc>
 801e128:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e12a:	f000 fa6f 	bl	801e60c <__retarget_lock_release_recursive>
 801e12e:	e7dd      	b.n	801e0ec <_fflush_r+0xc>

0801e130 <fflush>:
 801e130:	4601      	mov	r1, r0
 801e132:	b920      	cbnz	r0, 801e13e <fflush+0xe>
 801e134:	4a04      	ldr	r2, [pc, #16]	@ (801e148 <fflush+0x18>)
 801e136:	4905      	ldr	r1, [pc, #20]	@ (801e14c <fflush+0x1c>)
 801e138:	4805      	ldr	r0, [pc, #20]	@ (801e150 <fflush+0x20>)
 801e13a:	f000 b8b1 	b.w	801e2a0 <_fwalk_sglue>
 801e13e:	4b05      	ldr	r3, [pc, #20]	@ (801e154 <fflush+0x24>)
 801e140:	6818      	ldr	r0, [r3, #0]
 801e142:	f7ff bfcd 	b.w	801e0e0 <_fflush_r>
 801e146:	bf00      	nop
 801e148:	20000054 	.word	0x20000054
 801e14c:	0801e0e1 	.word	0x0801e0e1
 801e150:	20000064 	.word	0x20000064
 801e154:	20000060 	.word	0x20000060

0801e158 <std>:
 801e158:	2300      	movs	r3, #0
 801e15a:	b510      	push	{r4, lr}
 801e15c:	4604      	mov	r4, r0
 801e15e:	e9c0 3300 	strd	r3, r3, [r0]
 801e162:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e166:	6083      	str	r3, [r0, #8]
 801e168:	8181      	strh	r1, [r0, #12]
 801e16a:	6643      	str	r3, [r0, #100]	@ 0x64
 801e16c:	81c2      	strh	r2, [r0, #14]
 801e16e:	6183      	str	r3, [r0, #24]
 801e170:	4619      	mov	r1, r3
 801e172:	2208      	movs	r2, #8
 801e174:	305c      	adds	r0, #92	@ 0x5c
 801e176:	f000 f950 	bl	801e41a <memset>
 801e17a:	4b0d      	ldr	r3, [pc, #52]	@ (801e1b0 <std+0x58>)
 801e17c:	6263      	str	r3, [r4, #36]	@ 0x24
 801e17e:	4b0d      	ldr	r3, [pc, #52]	@ (801e1b4 <std+0x5c>)
 801e180:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e182:	4b0d      	ldr	r3, [pc, #52]	@ (801e1b8 <std+0x60>)
 801e184:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e186:	4b0d      	ldr	r3, [pc, #52]	@ (801e1bc <std+0x64>)
 801e188:	6323      	str	r3, [r4, #48]	@ 0x30
 801e18a:	4b0d      	ldr	r3, [pc, #52]	@ (801e1c0 <std+0x68>)
 801e18c:	6224      	str	r4, [r4, #32]
 801e18e:	429c      	cmp	r4, r3
 801e190:	d006      	beq.n	801e1a0 <std+0x48>
 801e192:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e196:	4294      	cmp	r4, r2
 801e198:	d002      	beq.n	801e1a0 <std+0x48>
 801e19a:	33d0      	adds	r3, #208	@ 0xd0
 801e19c:	429c      	cmp	r4, r3
 801e19e:	d105      	bne.n	801e1ac <std+0x54>
 801e1a0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e1a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e1a8:	f000 ba2e 	b.w	801e608 <__retarget_lock_init_recursive>
 801e1ac:	bd10      	pop	{r4, pc}
 801e1ae:	bf00      	nop
 801e1b0:	0801e341 	.word	0x0801e341
 801e1b4:	0801e363 	.word	0x0801e363
 801e1b8:	0801e39b 	.word	0x0801e39b
 801e1bc:	0801e3bf 	.word	0x0801e3bf
 801e1c0:	20012810 	.word	0x20012810

0801e1c4 <stdio_exit_handler>:
 801e1c4:	4a02      	ldr	r2, [pc, #8]	@ (801e1d0 <stdio_exit_handler+0xc>)
 801e1c6:	4903      	ldr	r1, [pc, #12]	@ (801e1d4 <stdio_exit_handler+0x10>)
 801e1c8:	4803      	ldr	r0, [pc, #12]	@ (801e1d8 <stdio_exit_handler+0x14>)
 801e1ca:	f000 b869 	b.w	801e2a0 <_fwalk_sglue>
 801e1ce:	bf00      	nop
 801e1d0:	20000054 	.word	0x20000054
 801e1d4:	0801e0e1 	.word	0x0801e0e1
 801e1d8:	20000064 	.word	0x20000064

0801e1dc <cleanup_stdio>:
 801e1dc:	6841      	ldr	r1, [r0, #4]
 801e1de:	4b0c      	ldr	r3, [pc, #48]	@ (801e210 <cleanup_stdio+0x34>)
 801e1e0:	4299      	cmp	r1, r3
 801e1e2:	b510      	push	{r4, lr}
 801e1e4:	4604      	mov	r4, r0
 801e1e6:	d001      	beq.n	801e1ec <cleanup_stdio+0x10>
 801e1e8:	f7ff ff7a 	bl	801e0e0 <_fflush_r>
 801e1ec:	68a1      	ldr	r1, [r4, #8]
 801e1ee:	4b09      	ldr	r3, [pc, #36]	@ (801e214 <cleanup_stdio+0x38>)
 801e1f0:	4299      	cmp	r1, r3
 801e1f2:	d002      	beq.n	801e1fa <cleanup_stdio+0x1e>
 801e1f4:	4620      	mov	r0, r4
 801e1f6:	f7ff ff73 	bl	801e0e0 <_fflush_r>
 801e1fa:	68e1      	ldr	r1, [r4, #12]
 801e1fc:	4b06      	ldr	r3, [pc, #24]	@ (801e218 <cleanup_stdio+0x3c>)
 801e1fe:	4299      	cmp	r1, r3
 801e200:	d004      	beq.n	801e20c <cleanup_stdio+0x30>
 801e202:	4620      	mov	r0, r4
 801e204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e208:	f7ff bf6a 	b.w	801e0e0 <_fflush_r>
 801e20c:	bd10      	pop	{r4, pc}
 801e20e:	bf00      	nop
 801e210:	20012810 	.word	0x20012810
 801e214:	20012878 	.word	0x20012878
 801e218:	200128e0 	.word	0x200128e0

0801e21c <global_stdio_init.part.0>:
 801e21c:	b510      	push	{r4, lr}
 801e21e:	4b0b      	ldr	r3, [pc, #44]	@ (801e24c <global_stdio_init.part.0+0x30>)
 801e220:	4c0b      	ldr	r4, [pc, #44]	@ (801e250 <global_stdio_init.part.0+0x34>)
 801e222:	4a0c      	ldr	r2, [pc, #48]	@ (801e254 <global_stdio_init.part.0+0x38>)
 801e224:	601a      	str	r2, [r3, #0]
 801e226:	4620      	mov	r0, r4
 801e228:	2200      	movs	r2, #0
 801e22a:	2104      	movs	r1, #4
 801e22c:	f7ff ff94 	bl	801e158 <std>
 801e230:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e234:	2201      	movs	r2, #1
 801e236:	2109      	movs	r1, #9
 801e238:	f7ff ff8e 	bl	801e158 <std>
 801e23c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e240:	2202      	movs	r2, #2
 801e242:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e246:	2112      	movs	r1, #18
 801e248:	f7ff bf86 	b.w	801e158 <std>
 801e24c:	20012948 	.word	0x20012948
 801e250:	20012810 	.word	0x20012810
 801e254:	0801e1c5 	.word	0x0801e1c5

0801e258 <__sfp_lock_acquire>:
 801e258:	4801      	ldr	r0, [pc, #4]	@ (801e260 <__sfp_lock_acquire+0x8>)
 801e25a:	f000 b9d6 	b.w	801e60a <__retarget_lock_acquire_recursive>
 801e25e:	bf00      	nop
 801e260:	20012951 	.word	0x20012951

0801e264 <__sfp_lock_release>:
 801e264:	4801      	ldr	r0, [pc, #4]	@ (801e26c <__sfp_lock_release+0x8>)
 801e266:	f000 b9d1 	b.w	801e60c <__retarget_lock_release_recursive>
 801e26a:	bf00      	nop
 801e26c:	20012951 	.word	0x20012951

0801e270 <__sinit>:
 801e270:	b510      	push	{r4, lr}
 801e272:	4604      	mov	r4, r0
 801e274:	f7ff fff0 	bl	801e258 <__sfp_lock_acquire>
 801e278:	6a23      	ldr	r3, [r4, #32]
 801e27a:	b11b      	cbz	r3, 801e284 <__sinit+0x14>
 801e27c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e280:	f7ff bff0 	b.w	801e264 <__sfp_lock_release>
 801e284:	4b04      	ldr	r3, [pc, #16]	@ (801e298 <__sinit+0x28>)
 801e286:	6223      	str	r3, [r4, #32]
 801e288:	4b04      	ldr	r3, [pc, #16]	@ (801e29c <__sinit+0x2c>)
 801e28a:	681b      	ldr	r3, [r3, #0]
 801e28c:	2b00      	cmp	r3, #0
 801e28e:	d1f5      	bne.n	801e27c <__sinit+0xc>
 801e290:	f7ff ffc4 	bl	801e21c <global_stdio_init.part.0>
 801e294:	e7f2      	b.n	801e27c <__sinit+0xc>
 801e296:	bf00      	nop
 801e298:	0801e1dd 	.word	0x0801e1dd
 801e29c:	20012948 	.word	0x20012948

0801e2a0 <_fwalk_sglue>:
 801e2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e2a4:	4607      	mov	r7, r0
 801e2a6:	4688      	mov	r8, r1
 801e2a8:	4614      	mov	r4, r2
 801e2aa:	2600      	movs	r6, #0
 801e2ac:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e2b0:	f1b9 0901 	subs.w	r9, r9, #1
 801e2b4:	d505      	bpl.n	801e2c2 <_fwalk_sglue+0x22>
 801e2b6:	6824      	ldr	r4, [r4, #0]
 801e2b8:	2c00      	cmp	r4, #0
 801e2ba:	d1f7      	bne.n	801e2ac <_fwalk_sglue+0xc>
 801e2bc:	4630      	mov	r0, r6
 801e2be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e2c2:	89ab      	ldrh	r3, [r5, #12]
 801e2c4:	2b01      	cmp	r3, #1
 801e2c6:	d907      	bls.n	801e2d8 <_fwalk_sglue+0x38>
 801e2c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e2cc:	3301      	adds	r3, #1
 801e2ce:	d003      	beq.n	801e2d8 <_fwalk_sglue+0x38>
 801e2d0:	4629      	mov	r1, r5
 801e2d2:	4638      	mov	r0, r7
 801e2d4:	47c0      	blx	r8
 801e2d6:	4306      	orrs	r6, r0
 801e2d8:	3568      	adds	r5, #104	@ 0x68
 801e2da:	e7e9      	b.n	801e2b0 <_fwalk_sglue+0x10>

0801e2dc <iprintf>:
 801e2dc:	b40f      	push	{r0, r1, r2, r3}
 801e2de:	b507      	push	{r0, r1, r2, lr}
 801e2e0:	4906      	ldr	r1, [pc, #24]	@ (801e2fc <iprintf+0x20>)
 801e2e2:	ab04      	add	r3, sp, #16
 801e2e4:	6808      	ldr	r0, [r1, #0]
 801e2e6:	f853 2b04 	ldr.w	r2, [r3], #4
 801e2ea:	6881      	ldr	r1, [r0, #8]
 801e2ec:	9301      	str	r3, [sp, #4]
 801e2ee:	f002 fd53 	bl	8020d98 <_vfiprintf_r>
 801e2f2:	b003      	add	sp, #12
 801e2f4:	f85d eb04 	ldr.w	lr, [sp], #4
 801e2f8:	b004      	add	sp, #16
 801e2fa:	4770      	bx	lr
 801e2fc:	20000060 	.word	0x20000060

0801e300 <siprintf>:
 801e300:	b40e      	push	{r1, r2, r3}
 801e302:	b500      	push	{lr}
 801e304:	b09c      	sub	sp, #112	@ 0x70
 801e306:	ab1d      	add	r3, sp, #116	@ 0x74
 801e308:	9002      	str	r0, [sp, #8]
 801e30a:	9006      	str	r0, [sp, #24]
 801e30c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e310:	4809      	ldr	r0, [pc, #36]	@ (801e338 <siprintf+0x38>)
 801e312:	9107      	str	r1, [sp, #28]
 801e314:	9104      	str	r1, [sp, #16]
 801e316:	4909      	ldr	r1, [pc, #36]	@ (801e33c <siprintf+0x3c>)
 801e318:	f853 2b04 	ldr.w	r2, [r3], #4
 801e31c:	9105      	str	r1, [sp, #20]
 801e31e:	6800      	ldr	r0, [r0, #0]
 801e320:	9301      	str	r3, [sp, #4]
 801e322:	a902      	add	r1, sp, #8
 801e324:	f002 fc12 	bl	8020b4c <_svfiprintf_r>
 801e328:	9b02      	ldr	r3, [sp, #8]
 801e32a:	2200      	movs	r2, #0
 801e32c:	701a      	strb	r2, [r3, #0]
 801e32e:	b01c      	add	sp, #112	@ 0x70
 801e330:	f85d eb04 	ldr.w	lr, [sp], #4
 801e334:	b003      	add	sp, #12
 801e336:	4770      	bx	lr
 801e338:	20000060 	.word	0x20000060
 801e33c:	ffff0208 	.word	0xffff0208

0801e340 <__sread>:
 801e340:	b510      	push	{r4, lr}
 801e342:	460c      	mov	r4, r1
 801e344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e348:	f000 f910 	bl	801e56c <_read_r>
 801e34c:	2800      	cmp	r0, #0
 801e34e:	bfab      	itete	ge
 801e350:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e352:	89a3      	ldrhlt	r3, [r4, #12]
 801e354:	181b      	addge	r3, r3, r0
 801e356:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e35a:	bfac      	ite	ge
 801e35c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e35e:	81a3      	strhlt	r3, [r4, #12]
 801e360:	bd10      	pop	{r4, pc}

0801e362 <__swrite>:
 801e362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e366:	461f      	mov	r7, r3
 801e368:	898b      	ldrh	r3, [r1, #12]
 801e36a:	05db      	lsls	r3, r3, #23
 801e36c:	4605      	mov	r5, r0
 801e36e:	460c      	mov	r4, r1
 801e370:	4616      	mov	r6, r2
 801e372:	d505      	bpl.n	801e380 <__swrite+0x1e>
 801e374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e378:	2302      	movs	r3, #2
 801e37a:	2200      	movs	r2, #0
 801e37c:	f000 f8e4 	bl	801e548 <_lseek_r>
 801e380:	89a3      	ldrh	r3, [r4, #12]
 801e382:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e386:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e38a:	81a3      	strh	r3, [r4, #12]
 801e38c:	4632      	mov	r2, r6
 801e38e:	463b      	mov	r3, r7
 801e390:	4628      	mov	r0, r5
 801e392:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e396:	f000 b8fb 	b.w	801e590 <_write_r>

0801e39a <__sseek>:
 801e39a:	b510      	push	{r4, lr}
 801e39c:	460c      	mov	r4, r1
 801e39e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e3a2:	f000 f8d1 	bl	801e548 <_lseek_r>
 801e3a6:	1c43      	adds	r3, r0, #1
 801e3a8:	89a3      	ldrh	r3, [r4, #12]
 801e3aa:	bf15      	itete	ne
 801e3ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e3ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e3b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e3b6:	81a3      	strheq	r3, [r4, #12]
 801e3b8:	bf18      	it	ne
 801e3ba:	81a3      	strhne	r3, [r4, #12]
 801e3bc:	bd10      	pop	{r4, pc}

0801e3be <__sclose>:
 801e3be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e3c2:	f000 b85b 	b.w	801e47c <_close_r>

0801e3c6 <memcmp>:
 801e3c6:	b510      	push	{r4, lr}
 801e3c8:	3901      	subs	r1, #1
 801e3ca:	4402      	add	r2, r0
 801e3cc:	4290      	cmp	r0, r2
 801e3ce:	d101      	bne.n	801e3d4 <memcmp+0xe>
 801e3d0:	2000      	movs	r0, #0
 801e3d2:	e005      	b.n	801e3e0 <memcmp+0x1a>
 801e3d4:	7803      	ldrb	r3, [r0, #0]
 801e3d6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e3da:	42a3      	cmp	r3, r4
 801e3dc:	d001      	beq.n	801e3e2 <memcmp+0x1c>
 801e3de:	1b18      	subs	r0, r3, r4
 801e3e0:	bd10      	pop	{r4, pc}
 801e3e2:	3001      	adds	r0, #1
 801e3e4:	e7f2      	b.n	801e3cc <memcmp+0x6>

0801e3e6 <memmove>:
 801e3e6:	4288      	cmp	r0, r1
 801e3e8:	b510      	push	{r4, lr}
 801e3ea:	eb01 0402 	add.w	r4, r1, r2
 801e3ee:	d902      	bls.n	801e3f6 <memmove+0x10>
 801e3f0:	4284      	cmp	r4, r0
 801e3f2:	4623      	mov	r3, r4
 801e3f4:	d807      	bhi.n	801e406 <memmove+0x20>
 801e3f6:	1e43      	subs	r3, r0, #1
 801e3f8:	42a1      	cmp	r1, r4
 801e3fa:	d008      	beq.n	801e40e <memmove+0x28>
 801e3fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e400:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e404:	e7f8      	b.n	801e3f8 <memmove+0x12>
 801e406:	4402      	add	r2, r0
 801e408:	4601      	mov	r1, r0
 801e40a:	428a      	cmp	r2, r1
 801e40c:	d100      	bne.n	801e410 <memmove+0x2a>
 801e40e:	bd10      	pop	{r4, pc}
 801e410:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e414:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e418:	e7f7      	b.n	801e40a <memmove+0x24>

0801e41a <memset>:
 801e41a:	4402      	add	r2, r0
 801e41c:	4603      	mov	r3, r0
 801e41e:	4293      	cmp	r3, r2
 801e420:	d100      	bne.n	801e424 <memset+0xa>
 801e422:	4770      	bx	lr
 801e424:	f803 1b01 	strb.w	r1, [r3], #1
 801e428:	e7f9      	b.n	801e41e <memset+0x4>

0801e42a <strncmp>:
 801e42a:	b510      	push	{r4, lr}
 801e42c:	b16a      	cbz	r2, 801e44a <strncmp+0x20>
 801e42e:	3901      	subs	r1, #1
 801e430:	1884      	adds	r4, r0, r2
 801e432:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e436:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e43a:	429a      	cmp	r2, r3
 801e43c:	d103      	bne.n	801e446 <strncmp+0x1c>
 801e43e:	42a0      	cmp	r0, r4
 801e440:	d001      	beq.n	801e446 <strncmp+0x1c>
 801e442:	2a00      	cmp	r2, #0
 801e444:	d1f5      	bne.n	801e432 <strncmp+0x8>
 801e446:	1ad0      	subs	r0, r2, r3
 801e448:	bd10      	pop	{r4, pc}
 801e44a:	4610      	mov	r0, r2
 801e44c:	e7fc      	b.n	801e448 <strncmp+0x1e>

0801e44e <strncpy>:
 801e44e:	b510      	push	{r4, lr}
 801e450:	3901      	subs	r1, #1
 801e452:	4603      	mov	r3, r0
 801e454:	b132      	cbz	r2, 801e464 <strncpy+0x16>
 801e456:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e45a:	f803 4b01 	strb.w	r4, [r3], #1
 801e45e:	3a01      	subs	r2, #1
 801e460:	2c00      	cmp	r4, #0
 801e462:	d1f7      	bne.n	801e454 <strncpy+0x6>
 801e464:	441a      	add	r2, r3
 801e466:	2100      	movs	r1, #0
 801e468:	4293      	cmp	r3, r2
 801e46a:	d100      	bne.n	801e46e <strncpy+0x20>
 801e46c:	bd10      	pop	{r4, pc}
 801e46e:	f803 1b01 	strb.w	r1, [r3], #1
 801e472:	e7f9      	b.n	801e468 <strncpy+0x1a>

0801e474 <_localeconv_r>:
 801e474:	4800      	ldr	r0, [pc, #0]	@ (801e478 <_localeconv_r+0x4>)
 801e476:	4770      	bx	lr
 801e478:	200001a0 	.word	0x200001a0

0801e47c <_close_r>:
 801e47c:	b538      	push	{r3, r4, r5, lr}
 801e47e:	4d06      	ldr	r5, [pc, #24]	@ (801e498 <_close_r+0x1c>)
 801e480:	2300      	movs	r3, #0
 801e482:	4604      	mov	r4, r0
 801e484:	4608      	mov	r0, r1
 801e486:	602b      	str	r3, [r5, #0]
 801e488:	f7e3 fc9a 	bl	8001dc0 <_close>
 801e48c:	1c43      	adds	r3, r0, #1
 801e48e:	d102      	bne.n	801e496 <_close_r+0x1a>
 801e490:	682b      	ldr	r3, [r5, #0]
 801e492:	b103      	cbz	r3, 801e496 <_close_r+0x1a>
 801e494:	6023      	str	r3, [r4, #0]
 801e496:	bd38      	pop	{r3, r4, r5, pc}
 801e498:	2001294c 	.word	0x2001294c

0801e49c <_reclaim_reent>:
 801e49c:	4b29      	ldr	r3, [pc, #164]	@ (801e544 <_reclaim_reent+0xa8>)
 801e49e:	681b      	ldr	r3, [r3, #0]
 801e4a0:	4283      	cmp	r3, r0
 801e4a2:	b570      	push	{r4, r5, r6, lr}
 801e4a4:	4604      	mov	r4, r0
 801e4a6:	d04b      	beq.n	801e540 <_reclaim_reent+0xa4>
 801e4a8:	69c3      	ldr	r3, [r0, #28]
 801e4aa:	b1ab      	cbz	r3, 801e4d8 <_reclaim_reent+0x3c>
 801e4ac:	68db      	ldr	r3, [r3, #12]
 801e4ae:	b16b      	cbz	r3, 801e4cc <_reclaim_reent+0x30>
 801e4b0:	2500      	movs	r5, #0
 801e4b2:	69e3      	ldr	r3, [r4, #28]
 801e4b4:	68db      	ldr	r3, [r3, #12]
 801e4b6:	5959      	ldr	r1, [r3, r5]
 801e4b8:	2900      	cmp	r1, #0
 801e4ba:	d13b      	bne.n	801e534 <_reclaim_reent+0x98>
 801e4bc:	3504      	adds	r5, #4
 801e4be:	2d80      	cmp	r5, #128	@ 0x80
 801e4c0:	d1f7      	bne.n	801e4b2 <_reclaim_reent+0x16>
 801e4c2:	69e3      	ldr	r3, [r4, #28]
 801e4c4:	4620      	mov	r0, r4
 801e4c6:	68d9      	ldr	r1, [r3, #12]
 801e4c8:	f000 ff2a 	bl	801f320 <_free_r>
 801e4cc:	69e3      	ldr	r3, [r4, #28]
 801e4ce:	6819      	ldr	r1, [r3, #0]
 801e4d0:	b111      	cbz	r1, 801e4d8 <_reclaim_reent+0x3c>
 801e4d2:	4620      	mov	r0, r4
 801e4d4:	f000 ff24 	bl	801f320 <_free_r>
 801e4d8:	6961      	ldr	r1, [r4, #20]
 801e4da:	b111      	cbz	r1, 801e4e2 <_reclaim_reent+0x46>
 801e4dc:	4620      	mov	r0, r4
 801e4de:	f000 ff1f 	bl	801f320 <_free_r>
 801e4e2:	69e1      	ldr	r1, [r4, #28]
 801e4e4:	b111      	cbz	r1, 801e4ec <_reclaim_reent+0x50>
 801e4e6:	4620      	mov	r0, r4
 801e4e8:	f000 ff1a 	bl	801f320 <_free_r>
 801e4ec:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801e4ee:	b111      	cbz	r1, 801e4f6 <_reclaim_reent+0x5a>
 801e4f0:	4620      	mov	r0, r4
 801e4f2:	f000 ff15 	bl	801f320 <_free_r>
 801e4f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e4f8:	b111      	cbz	r1, 801e500 <_reclaim_reent+0x64>
 801e4fa:	4620      	mov	r0, r4
 801e4fc:	f000 ff10 	bl	801f320 <_free_r>
 801e500:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801e502:	b111      	cbz	r1, 801e50a <_reclaim_reent+0x6e>
 801e504:	4620      	mov	r0, r4
 801e506:	f000 ff0b 	bl	801f320 <_free_r>
 801e50a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801e50c:	b111      	cbz	r1, 801e514 <_reclaim_reent+0x78>
 801e50e:	4620      	mov	r0, r4
 801e510:	f000 ff06 	bl	801f320 <_free_r>
 801e514:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801e516:	b111      	cbz	r1, 801e51e <_reclaim_reent+0x82>
 801e518:	4620      	mov	r0, r4
 801e51a:	f000 ff01 	bl	801f320 <_free_r>
 801e51e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801e520:	b111      	cbz	r1, 801e528 <_reclaim_reent+0x8c>
 801e522:	4620      	mov	r0, r4
 801e524:	f000 fefc 	bl	801f320 <_free_r>
 801e528:	6a23      	ldr	r3, [r4, #32]
 801e52a:	b14b      	cbz	r3, 801e540 <_reclaim_reent+0xa4>
 801e52c:	4620      	mov	r0, r4
 801e52e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e532:	4718      	bx	r3
 801e534:	680e      	ldr	r6, [r1, #0]
 801e536:	4620      	mov	r0, r4
 801e538:	f000 fef2 	bl	801f320 <_free_r>
 801e53c:	4631      	mov	r1, r6
 801e53e:	e7bb      	b.n	801e4b8 <_reclaim_reent+0x1c>
 801e540:	bd70      	pop	{r4, r5, r6, pc}
 801e542:	bf00      	nop
 801e544:	20000060 	.word	0x20000060

0801e548 <_lseek_r>:
 801e548:	b538      	push	{r3, r4, r5, lr}
 801e54a:	4d07      	ldr	r5, [pc, #28]	@ (801e568 <_lseek_r+0x20>)
 801e54c:	4604      	mov	r4, r0
 801e54e:	4608      	mov	r0, r1
 801e550:	4611      	mov	r1, r2
 801e552:	2200      	movs	r2, #0
 801e554:	602a      	str	r2, [r5, #0]
 801e556:	461a      	mov	r2, r3
 801e558:	f7e3 fc59 	bl	8001e0e <_lseek>
 801e55c:	1c43      	adds	r3, r0, #1
 801e55e:	d102      	bne.n	801e566 <_lseek_r+0x1e>
 801e560:	682b      	ldr	r3, [r5, #0]
 801e562:	b103      	cbz	r3, 801e566 <_lseek_r+0x1e>
 801e564:	6023      	str	r3, [r4, #0]
 801e566:	bd38      	pop	{r3, r4, r5, pc}
 801e568:	2001294c 	.word	0x2001294c

0801e56c <_read_r>:
 801e56c:	b538      	push	{r3, r4, r5, lr}
 801e56e:	4d07      	ldr	r5, [pc, #28]	@ (801e58c <_read_r+0x20>)
 801e570:	4604      	mov	r4, r0
 801e572:	4608      	mov	r0, r1
 801e574:	4611      	mov	r1, r2
 801e576:	2200      	movs	r2, #0
 801e578:	602a      	str	r2, [r5, #0]
 801e57a:	461a      	mov	r2, r3
 801e57c:	f7e3 fc03 	bl	8001d86 <_read>
 801e580:	1c43      	adds	r3, r0, #1
 801e582:	d102      	bne.n	801e58a <_read_r+0x1e>
 801e584:	682b      	ldr	r3, [r5, #0]
 801e586:	b103      	cbz	r3, 801e58a <_read_r+0x1e>
 801e588:	6023      	str	r3, [r4, #0]
 801e58a:	bd38      	pop	{r3, r4, r5, pc}
 801e58c:	2001294c 	.word	0x2001294c

0801e590 <_write_r>:
 801e590:	b538      	push	{r3, r4, r5, lr}
 801e592:	4d07      	ldr	r5, [pc, #28]	@ (801e5b0 <_write_r+0x20>)
 801e594:	4604      	mov	r4, r0
 801e596:	4608      	mov	r0, r1
 801e598:	4611      	mov	r1, r2
 801e59a:	2200      	movs	r2, #0
 801e59c:	602a      	str	r2, [r5, #0]
 801e59e:	461a      	mov	r2, r3
 801e5a0:	f7e2 fed2 	bl	8001348 <_write>
 801e5a4:	1c43      	adds	r3, r0, #1
 801e5a6:	d102      	bne.n	801e5ae <_write_r+0x1e>
 801e5a8:	682b      	ldr	r3, [r5, #0]
 801e5aa:	b103      	cbz	r3, 801e5ae <_write_r+0x1e>
 801e5ac:	6023      	str	r3, [r4, #0]
 801e5ae:	bd38      	pop	{r3, r4, r5, pc}
 801e5b0:	2001294c 	.word	0x2001294c

0801e5b4 <__errno>:
 801e5b4:	4b01      	ldr	r3, [pc, #4]	@ (801e5bc <__errno+0x8>)
 801e5b6:	6818      	ldr	r0, [r3, #0]
 801e5b8:	4770      	bx	lr
 801e5ba:	bf00      	nop
 801e5bc:	20000060 	.word	0x20000060

0801e5c0 <__libc_init_array>:
 801e5c0:	b570      	push	{r4, r5, r6, lr}
 801e5c2:	4d0d      	ldr	r5, [pc, #52]	@ (801e5f8 <__libc_init_array+0x38>)
 801e5c4:	4c0d      	ldr	r4, [pc, #52]	@ (801e5fc <__libc_init_array+0x3c>)
 801e5c6:	1b64      	subs	r4, r4, r5
 801e5c8:	10a4      	asrs	r4, r4, #2
 801e5ca:	2600      	movs	r6, #0
 801e5cc:	42a6      	cmp	r6, r4
 801e5ce:	d109      	bne.n	801e5e4 <__libc_init_array+0x24>
 801e5d0:	4d0b      	ldr	r5, [pc, #44]	@ (801e600 <__libc_init_array+0x40>)
 801e5d2:	4c0c      	ldr	r4, [pc, #48]	@ (801e604 <__libc_init_array+0x44>)
 801e5d4:	f003 fa28 	bl	8021a28 <_init>
 801e5d8:	1b64      	subs	r4, r4, r5
 801e5da:	10a4      	asrs	r4, r4, #2
 801e5dc:	2600      	movs	r6, #0
 801e5de:	42a6      	cmp	r6, r4
 801e5e0:	d105      	bne.n	801e5ee <__libc_init_array+0x2e>
 801e5e2:	bd70      	pop	{r4, r5, r6, pc}
 801e5e4:	f855 3b04 	ldr.w	r3, [r5], #4
 801e5e8:	4798      	blx	r3
 801e5ea:	3601      	adds	r6, #1
 801e5ec:	e7ee      	b.n	801e5cc <__libc_init_array+0xc>
 801e5ee:	f855 3b04 	ldr.w	r3, [r5], #4
 801e5f2:	4798      	blx	r3
 801e5f4:	3601      	adds	r6, #1
 801e5f6:	e7f2      	b.n	801e5de <__libc_init_array+0x1e>
 801e5f8:	08026214 	.word	0x08026214
 801e5fc:	08026214 	.word	0x08026214
 801e600:	08026214 	.word	0x08026214
 801e604:	08026218 	.word	0x08026218

0801e608 <__retarget_lock_init_recursive>:
 801e608:	4770      	bx	lr

0801e60a <__retarget_lock_acquire_recursive>:
 801e60a:	4770      	bx	lr

0801e60c <__retarget_lock_release_recursive>:
 801e60c:	4770      	bx	lr

0801e60e <strcpy>:
 801e60e:	4603      	mov	r3, r0
 801e610:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e614:	f803 2b01 	strb.w	r2, [r3], #1
 801e618:	2a00      	cmp	r2, #0
 801e61a:	d1f9      	bne.n	801e610 <strcpy+0x2>
 801e61c:	4770      	bx	lr

0801e61e <memcpy>:
 801e61e:	440a      	add	r2, r1
 801e620:	4291      	cmp	r1, r2
 801e622:	f100 33ff 	add.w	r3, r0, #4294967295
 801e626:	d100      	bne.n	801e62a <memcpy+0xc>
 801e628:	4770      	bx	lr
 801e62a:	b510      	push	{r4, lr}
 801e62c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e630:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e634:	4291      	cmp	r1, r2
 801e636:	d1f9      	bne.n	801e62c <memcpy+0xe>
 801e638:	bd10      	pop	{r4, pc}
	...

0801e63c <nanf>:
 801e63c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801e644 <nanf+0x8>
 801e640:	4770      	bx	lr
 801e642:	bf00      	nop
 801e644:	7fc00000 	.word	0x7fc00000

0801e648 <__assert_func>:
 801e648:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e64a:	4614      	mov	r4, r2
 801e64c:	461a      	mov	r2, r3
 801e64e:	4b09      	ldr	r3, [pc, #36]	@ (801e674 <__assert_func+0x2c>)
 801e650:	681b      	ldr	r3, [r3, #0]
 801e652:	4605      	mov	r5, r0
 801e654:	68d8      	ldr	r0, [r3, #12]
 801e656:	b954      	cbnz	r4, 801e66e <__assert_func+0x26>
 801e658:	4b07      	ldr	r3, [pc, #28]	@ (801e678 <__assert_func+0x30>)
 801e65a:	461c      	mov	r4, r3
 801e65c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e660:	9100      	str	r1, [sp, #0]
 801e662:	462b      	mov	r3, r5
 801e664:	4905      	ldr	r1, [pc, #20]	@ (801e67c <__assert_func+0x34>)
 801e666:	f002 fcaf 	bl	8020fc8 <fiprintf>
 801e66a:	f002 fd6d 	bl	8021148 <abort>
 801e66e:	4b04      	ldr	r3, [pc, #16]	@ (801e680 <__assert_func+0x38>)
 801e670:	e7f4      	b.n	801e65c <__assert_func+0x14>
 801e672:	bf00      	nop
 801e674:	20000060 	.word	0x20000060
 801e678:	08025f6a 	.word	0x08025f6a
 801e67c:	08025f3c 	.word	0x08025f3c
 801e680:	08025f2f 	.word	0x08025f2f

0801e684 <quorem>:
 801e684:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e688:	6903      	ldr	r3, [r0, #16]
 801e68a:	690c      	ldr	r4, [r1, #16]
 801e68c:	42a3      	cmp	r3, r4
 801e68e:	4607      	mov	r7, r0
 801e690:	db7e      	blt.n	801e790 <quorem+0x10c>
 801e692:	3c01      	subs	r4, #1
 801e694:	f101 0814 	add.w	r8, r1, #20
 801e698:	00a3      	lsls	r3, r4, #2
 801e69a:	f100 0514 	add.w	r5, r0, #20
 801e69e:	9300      	str	r3, [sp, #0]
 801e6a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e6a4:	9301      	str	r3, [sp, #4]
 801e6a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e6aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e6ae:	3301      	adds	r3, #1
 801e6b0:	429a      	cmp	r2, r3
 801e6b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e6b6:	fbb2 f6f3 	udiv	r6, r2, r3
 801e6ba:	d32e      	bcc.n	801e71a <quorem+0x96>
 801e6bc:	f04f 0a00 	mov.w	sl, #0
 801e6c0:	46c4      	mov	ip, r8
 801e6c2:	46ae      	mov	lr, r5
 801e6c4:	46d3      	mov	fp, sl
 801e6c6:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e6ca:	b298      	uxth	r0, r3
 801e6cc:	fb06 a000 	mla	r0, r6, r0, sl
 801e6d0:	0c02      	lsrs	r2, r0, #16
 801e6d2:	0c1b      	lsrs	r3, r3, #16
 801e6d4:	fb06 2303 	mla	r3, r6, r3, r2
 801e6d8:	f8de 2000 	ldr.w	r2, [lr]
 801e6dc:	b280      	uxth	r0, r0
 801e6de:	b292      	uxth	r2, r2
 801e6e0:	1a12      	subs	r2, r2, r0
 801e6e2:	445a      	add	r2, fp
 801e6e4:	f8de 0000 	ldr.w	r0, [lr]
 801e6e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e6ec:	b29b      	uxth	r3, r3
 801e6ee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801e6f2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801e6f6:	b292      	uxth	r2, r2
 801e6f8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801e6fc:	45e1      	cmp	r9, ip
 801e6fe:	f84e 2b04 	str.w	r2, [lr], #4
 801e702:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801e706:	d2de      	bcs.n	801e6c6 <quorem+0x42>
 801e708:	9b00      	ldr	r3, [sp, #0]
 801e70a:	58eb      	ldr	r3, [r5, r3]
 801e70c:	b92b      	cbnz	r3, 801e71a <quorem+0x96>
 801e70e:	9b01      	ldr	r3, [sp, #4]
 801e710:	3b04      	subs	r3, #4
 801e712:	429d      	cmp	r5, r3
 801e714:	461a      	mov	r2, r3
 801e716:	d32f      	bcc.n	801e778 <quorem+0xf4>
 801e718:	613c      	str	r4, [r7, #16]
 801e71a:	4638      	mov	r0, r7
 801e71c:	f001 f9c4 	bl	801faa8 <__mcmp>
 801e720:	2800      	cmp	r0, #0
 801e722:	db25      	blt.n	801e770 <quorem+0xec>
 801e724:	4629      	mov	r1, r5
 801e726:	2000      	movs	r0, #0
 801e728:	f858 2b04 	ldr.w	r2, [r8], #4
 801e72c:	f8d1 c000 	ldr.w	ip, [r1]
 801e730:	fa1f fe82 	uxth.w	lr, r2
 801e734:	fa1f f38c 	uxth.w	r3, ip
 801e738:	eba3 030e 	sub.w	r3, r3, lr
 801e73c:	4403      	add	r3, r0
 801e73e:	0c12      	lsrs	r2, r2, #16
 801e740:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801e744:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801e748:	b29b      	uxth	r3, r3
 801e74a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e74e:	45c1      	cmp	r9, r8
 801e750:	f841 3b04 	str.w	r3, [r1], #4
 801e754:	ea4f 4022 	mov.w	r0, r2, asr #16
 801e758:	d2e6      	bcs.n	801e728 <quorem+0xa4>
 801e75a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e75e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e762:	b922      	cbnz	r2, 801e76e <quorem+0xea>
 801e764:	3b04      	subs	r3, #4
 801e766:	429d      	cmp	r5, r3
 801e768:	461a      	mov	r2, r3
 801e76a:	d30b      	bcc.n	801e784 <quorem+0x100>
 801e76c:	613c      	str	r4, [r7, #16]
 801e76e:	3601      	adds	r6, #1
 801e770:	4630      	mov	r0, r6
 801e772:	b003      	add	sp, #12
 801e774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e778:	6812      	ldr	r2, [r2, #0]
 801e77a:	3b04      	subs	r3, #4
 801e77c:	2a00      	cmp	r2, #0
 801e77e:	d1cb      	bne.n	801e718 <quorem+0x94>
 801e780:	3c01      	subs	r4, #1
 801e782:	e7c6      	b.n	801e712 <quorem+0x8e>
 801e784:	6812      	ldr	r2, [r2, #0]
 801e786:	3b04      	subs	r3, #4
 801e788:	2a00      	cmp	r2, #0
 801e78a:	d1ef      	bne.n	801e76c <quorem+0xe8>
 801e78c:	3c01      	subs	r4, #1
 801e78e:	e7ea      	b.n	801e766 <quorem+0xe2>
 801e790:	2000      	movs	r0, #0
 801e792:	e7ee      	b.n	801e772 <quorem+0xee>
 801e794:	0000      	movs	r0, r0
	...

0801e798 <_dtoa_r>:
 801e798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e79c:	69c7      	ldr	r7, [r0, #28]
 801e79e:	b099      	sub	sp, #100	@ 0x64
 801e7a0:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e7a4:	ec55 4b10 	vmov	r4, r5, d0
 801e7a8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801e7aa:	9109      	str	r1, [sp, #36]	@ 0x24
 801e7ac:	4683      	mov	fp, r0
 801e7ae:	920e      	str	r2, [sp, #56]	@ 0x38
 801e7b0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e7b2:	b97f      	cbnz	r7, 801e7d4 <_dtoa_r+0x3c>
 801e7b4:	2010      	movs	r0, #16
 801e7b6:	f000 fdfd 	bl	801f3b4 <malloc>
 801e7ba:	4602      	mov	r2, r0
 801e7bc:	f8cb 001c 	str.w	r0, [fp, #28]
 801e7c0:	b920      	cbnz	r0, 801e7cc <_dtoa_r+0x34>
 801e7c2:	4ba7      	ldr	r3, [pc, #668]	@ (801ea60 <_dtoa_r+0x2c8>)
 801e7c4:	21ef      	movs	r1, #239	@ 0xef
 801e7c6:	48a7      	ldr	r0, [pc, #668]	@ (801ea64 <_dtoa_r+0x2cc>)
 801e7c8:	f7ff ff3e 	bl	801e648 <__assert_func>
 801e7cc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801e7d0:	6007      	str	r7, [r0, #0]
 801e7d2:	60c7      	str	r7, [r0, #12]
 801e7d4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801e7d8:	6819      	ldr	r1, [r3, #0]
 801e7da:	b159      	cbz	r1, 801e7f4 <_dtoa_r+0x5c>
 801e7dc:	685a      	ldr	r2, [r3, #4]
 801e7de:	604a      	str	r2, [r1, #4]
 801e7e0:	2301      	movs	r3, #1
 801e7e2:	4093      	lsls	r3, r2
 801e7e4:	608b      	str	r3, [r1, #8]
 801e7e6:	4658      	mov	r0, fp
 801e7e8:	f000 feda 	bl	801f5a0 <_Bfree>
 801e7ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 801e7f0:	2200      	movs	r2, #0
 801e7f2:	601a      	str	r2, [r3, #0]
 801e7f4:	1e2b      	subs	r3, r5, #0
 801e7f6:	bfb9      	ittee	lt
 801e7f8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801e7fc:	9303      	strlt	r3, [sp, #12]
 801e7fe:	2300      	movge	r3, #0
 801e800:	6033      	strge	r3, [r6, #0]
 801e802:	9f03      	ldr	r7, [sp, #12]
 801e804:	4b98      	ldr	r3, [pc, #608]	@ (801ea68 <_dtoa_r+0x2d0>)
 801e806:	bfbc      	itt	lt
 801e808:	2201      	movlt	r2, #1
 801e80a:	6032      	strlt	r2, [r6, #0]
 801e80c:	43bb      	bics	r3, r7
 801e80e:	d112      	bne.n	801e836 <_dtoa_r+0x9e>
 801e810:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e812:	f242 730f 	movw	r3, #9999	@ 0x270f
 801e816:	6013      	str	r3, [r2, #0]
 801e818:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e81c:	4323      	orrs	r3, r4
 801e81e:	f000 854d 	beq.w	801f2bc <_dtoa_r+0xb24>
 801e822:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e824:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801ea7c <_dtoa_r+0x2e4>
 801e828:	2b00      	cmp	r3, #0
 801e82a:	f000 854f 	beq.w	801f2cc <_dtoa_r+0xb34>
 801e82e:	f10a 0303 	add.w	r3, sl, #3
 801e832:	f000 bd49 	b.w	801f2c8 <_dtoa_r+0xb30>
 801e836:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e83a:	2200      	movs	r2, #0
 801e83c:	ec51 0b17 	vmov	r0, r1, d7
 801e840:	2300      	movs	r3, #0
 801e842:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801e846:	f7e2 f93f 	bl	8000ac8 <__aeabi_dcmpeq>
 801e84a:	4680      	mov	r8, r0
 801e84c:	b158      	cbz	r0, 801e866 <_dtoa_r+0xce>
 801e84e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e850:	2301      	movs	r3, #1
 801e852:	6013      	str	r3, [r2, #0]
 801e854:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e856:	b113      	cbz	r3, 801e85e <_dtoa_r+0xc6>
 801e858:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e85a:	4b84      	ldr	r3, [pc, #528]	@ (801ea6c <_dtoa_r+0x2d4>)
 801e85c:	6013      	str	r3, [r2, #0]
 801e85e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801ea80 <_dtoa_r+0x2e8>
 801e862:	f000 bd33 	b.w	801f2cc <_dtoa_r+0xb34>
 801e866:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801e86a:	aa16      	add	r2, sp, #88	@ 0x58
 801e86c:	a917      	add	r1, sp, #92	@ 0x5c
 801e86e:	4658      	mov	r0, fp
 801e870:	f001 fa3a 	bl	801fce8 <__d2b>
 801e874:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801e878:	4681      	mov	r9, r0
 801e87a:	2e00      	cmp	r6, #0
 801e87c:	d077      	beq.n	801e96e <_dtoa_r+0x1d6>
 801e87e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e880:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801e884:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e888:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e88c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801e890:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801e894:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801e898:	4619      	mov	r1, r3
 801e89a:	2200      	movs	r2, #0
 801e89c:	4b74      	ldr	r3, [pc, #464]	@ (801ea70 <_dtoa_r+0x2d8>)
 801e89e:	f7e1 fcf3 	bl	8000288 <__aeabi_dsub>
 801e8a2:	a369      	add	r3, pc, #420	@ (adr r3, 801ea48 <_dtoa_r+0x2b0>)
 801e8a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8a8:	f7e1 fea6 	bl	80005f8 <__aeabi_dmul>
 801e8ac:	a368      	add	r3, pc, #416	@ (adr r3, 801ea50 <_dtoa_r+0x2b8>)
 801e8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8b2:	f7e1 fceb 	bl	800028c <__adddf3>
 801e8b6:	4604      	mov	r4, r0
 801e8b8:	4630      	mov	r0, r6
 801e8ba:	460d      	mov	r5, r1
 801e8bc:	f7e1 fe32 	bl	8000524 <__aeabi_i2d>
 801e8c0:	a365      	add	r3, pc, #404	@ (adr r3, 801ea58 <_dtoa_r+0x2c0>)
 801e8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e8c6:	f7e1 fe97 	bl	80005f8 <__aeabi_dmul>
 801e8ca:	4602      	mov	r2, r0
 801e8cc:	460b      	mov	r3, r1
 801e8ce:	4620      	mov	r0, r4
 801e8d0:	4629      	mov	r1, r5
 801e8d2:	f7e1 fcdb 	bl	800028c <__adddf3>
 801e8d6:	4604      	mov	r4, r0
 801e8d8:	460d      	mov	r5, r1
 801e8da:	f7e2 f93d 	bl	8000b58 <__aeabi_d2iz>
 801e8de:	2200      	movs	r2, #0
 801e8e0:	4607      	mov	r7, r0
 801e8e2:	2300      	movs	r3, #0
 801e8e4:	4620      	mov	r0, r4
 801e8e6:	4629      	mov	r1, r5
 801e8e8:	f7e2 f8f8 	bl	8000adc <__aeabi_dcmplt>
 801e8ec:	b140      	cbz	r0, 801e900 <_dtoa_r+0x168>
 801e8ee:	4638      	mov	r0, r7
 801e8f0:	f7e1 fe18 	bl	8000524 <__aeabi_i2d>
 801e8f4:	4622      	mov	r2, r4
 801e8f6:	462b      	mov	r3, r5
 801e8f8:	f7e2 f8e6 	bl	8000ac8 <__aeabi_dcmpeq>
 801e8fc:	b900      	cbnz	r0, 801e900 <_dtoa_r+0x168>
 801e8fe:	3f01      	subs	r7, #1
 801e900:	2f16      	cmp	r7, #22
 801e902:	d851      	bhi.n	801e9a8 <_dtoa_r+0x210>
 801e904:	4b5b      	ldr	r3, [pc, #364]	@ (801ea74 <_dtoa_r+0x2dc>)
 801e906:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e90a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e90e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e912:	f7e2 f8e3 	bl	8000adc <__aeabi_dcmplt>
 801e916:	2800      	cmp	r0, #0
 801e918:	d048      	beq.n	801e9ac <_dtoa_r+0x214>
 801e91a:	3f01      	subs	r7, #1
 801e91c:	2300      	movs	r3, #0
 801e91e:	9312      	str	r3, [sp, #72]	@ 0x48
 801e920:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e922:	1b9b      	subs	r3, r3, r6
 801e924:	1e5a      	subs	r2, r3, #1
 801e926:	bf44      	itt	mi
 801e928:	f1c3 0801 	rsbmi	r8, r3, #1
 801e92c:	2300      	movmi	r3, #0
 801e92e:	9208      	str	r2, [sp, #32]
 801e930:	bf54      	ite	pl
 801e932:	f04f 0800 	movpl.w	r8, #0
 801e936:	9308      	strmi	r3, [sp, #32]
 801e938:	2f00      	cmp	r7, #0
 801e93a:	db39      	blt.n	801e9b0 <_dtoa_r+0x218>
 801e93c:	9b08      	ldr	r3, [sp, #32]
 801e93e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801e940:	443b      	add	r3, r7
 801e942:	9308      	str	r3, [sp, #32]
 801e944:	2300      	movs	r3, #0
 801e946:	930a      	str	r3, [sp, #40]	@ 0x28
 801e948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e94a:	2b09      	cmp	r3, #9
 801e94c:	d864      	bhi.n	801ea18 <_dtoa_r+0x280>
 801e94e:	2b05      	cmp	r3, #5
 801e950:	bfc4      	itt	gt
 801e952:	3b04      	subgt	r3, #4
 801e954:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801e956:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e958:	f1a3 0302 	sub.w	r3, r3, #2
 801e95c:	bfcc      	ite	gt
 801e95e:	2400      	movgt	r4, #0
 801e960:	2401      	movle	r4, #1
 801e962:	2b03      	cmp	r3, #3
 801e964:	d863      	bhi.n	801ea2e <_dtoa_r+0x296>
 801e966:	e8df f003 	tbb	[pc, r3]
 801e96a:	372a      	.short	0x372a
 801e96c:	5535      	.short	0x5535
 801e96e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801e972:	441e      	add	r6, r3
 801e974:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801e978:	2b20      	cmp	r3, #32
 801e97a:	bfc1      	itttt	gt
 801e97c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801e980:	409f      	lslgt	r7, r3
 801e982:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801e986:	fa24 f303 	lsrgt.w	r3, r4, r3
 801e98a:	bfd6      	itet	le
 801e98c:	f1c3 0320 	rsble	r3, r3, #32
 801e990:	ea47 0003 	orrgt.w	r0, r7, r3
 801e994:	fa04 f003 	lslle.w	r0, r4, r3
 801e998:	f7e1 fdb4 	bl	8000504 <__aeabi_ui2d>
 801e99c:	2201      	movs	r2, #1
 801e99e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801e9a2:	3e01      	subs	r6, #1
 801e9a4:	9214      	str	r2, [sp, #80]	@ 0x50
 801e9a6:	e777      	b.n	801e898 <_dtoa_r+0x100>
 801e9a8:	2301      	movs	r3, #1
 801e9aa:	e7b8      	b.n	801e91e <_dtoa_r+0x186>
 801e9ac:	9012      	str	r0, [sp, #72]	@ 0x48
 801e9ae:	e7b7      	b.n	801e920 <_dtoa_r+0x188>
 801e9b0:	427b      	negs	r3, r7
 801e9b2:	930a      	str	r3, [sp, #40]	@ 0x28
 801e9b4:	2300      	movs	r3, #0
 801e9b6:	eba8 0807 	sub.w	r8, r8, r7
 801e9ba:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e9bc:	e7c4      	b.n	801e948 <_dtoa_r+0x1b0>
 801e9be:	2300      	movs	r3, #0
 801e9c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e9c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e9c4:	2b00      	cmp	r3, #0
 801e9c6:	dc35      	bgt.n	801ea34 <_dtoa_r+0x29c>
 801e9c8:	2301      	movs	r3, #1
 801e9ca:	9300      	str	r3, [sp, #0]
 801e9cc:	9307      	str	r3, [sp, #28]
 801e9ce:	461a      	mov	r2, r3
 801e9d0:	920e      	str	r2, [sp, #56]	@ 0x38
 801e9d2:	e00b      	b.n	801e9ec <_dtoa_r+0x254>
 801e9d4:	2301      	movs	r3, #1
 801e9d6:	e7f3      	b.n	801e9c0 <_dtoa_r+0x228>
 801e9d8:	2300      	movs	r3, #0
 801e9da:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e9dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e9de:	18fb      	adds	r3, r7, r3
 801e9e0:	9300      	str	r3, [sp, #0]
 801e9e2:	3301      	adds	r3, #1
 801e9e4:	2b01      	cmp	r3, #1
 801e9e6:	9307      	str	r3, [sp, #28]
 801e9e8:	bfb8      	it	lt
 801e9ea:	2301      	movlt	r3, #1
 801e9ec:	f8db 001c 	ldr.w	r0, [fp, #28]
 801e9f0:	2100      	movs	r1, #0
 801e9f2:	2204      	movs	r2, #4
 801e9f4:	f102 0514 	add.w	r5, r2, #20
 801e9f8:	429d      	cmp	r5, r3
 801e9fa:	d91f      	bls.n	801ea3c <_dtoa_r+0x2a4>
 801e9fc:	6041      	str	r1, [r0, #4]
 801e9fe:	4658      	mov	r0, fp
 801ea00:	f000 fd8e 	bl	801f520 <_Balloc>
 801ea04:	4682      	mov	sl, r0
 801ea06:	2800      	cmp	r0, #0
 801ea08:	d13c      	bne.n	801ea84 <_dtoa_r+0x2ec>
 801ea0a:	4b1b      	ldr	r3, [pc, #108]	@ (801ea78 <_dtoa_r+0x2e0>)
 801ea0c:	4602      	mov	r2, r0
 801ea0e:	f240 11af 	movw	r1, #431	@ 0x1af
 801ea12:	e6d8      	b.n	801e7c6 <_dtoa_r+0x2e>
 801ea14:	2301      	movs	r3, #1
 801ea16:	e7e0      	b.n	801e9da <_dtoa_r+0x242>
 801ea18:	2401      	movs	r4, #1
 801ea1a:	2300      	movs	r3, #0
 801ea1c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea1e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ea20:	f04f 33ff 	mov.w	r3, #4294967295
 801ea24:	9300      	str	r3, [sp, #0]
 801ea26:	9307      	str	r3, [sp, #28]
 801ea28:	2200      	movs	r2, #0
 801ea2a:	2312      	movs	r3, #18
 801ea2c:	e7d0      	b.n	801e9d0 <_dtoa_r+0x238>
 801ea2e:	2301      	movs	r3, #1
 801ea30:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ea32:	e7f5      	b.n	801ea20 <_dtoa_r+0x288>
 801ea34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ea36:	9300      	str	r3, [sp, #0]
 801ea38:	9307      	str	r3, [sp, #28]
 801ea3a:	e7d7      	b.n	801e9ec <_dtoa_r+0x254>
 801ea3c:	3101      	adds	r1, #1
 801ea3e:	0052      	lsls	r2, r2, #1
 801ea40:	e7d8      	b.n	801e9f4 <_dtoa_r+0x25c>
 801ea42:	bf00      	nop
 801ea44:	f3af 8000 	nop.w
 801ea48:	636f4361 	.word	0x636f4361
 801ea4c:	3fd287a7 	.word	0x3fd287a7
 801ea50:	8b60c8b3 	.word	0x8b60c8b3
 801ea54:	3fc68a28 	.word	0x3fc68a28
 801ea58:	509f79fb 	.word	0x509f79fb
 801ea5c:	3fd34413 	.word	0x3fd34413
 801ea60:	08025d86 	.word	0x08025d86
 801ea64:	08025f78 	.word	0x08025f78
 801ea68:	7ff00000 	.word	0x7ff00000
 801ea6c:	08025f07 	.word	0x08025f07
 801ea70:	3ff80000 	.word	0x3ff80000
 801ea74:	08026070 	.word	0x08026070
 801ea78:	08025fd0 	.word	0x08025fd0
 801ea7c:	08025f74 	.word	0x08025f74
 801ea80:	08025f06 	.word	0x08025f06
 801ea84:	f8db 301c 	ldr.w	r3, [fp, #28]
 801ea88:	6018      	str	r0, [r3, #0]
 801ea8a:	9b07      	ldr	r3, [sp, #28]
 801ea8c:	2b0e      	cmp	r3, #14
 801ea8e:	f200 80a4 	bhi.w	801ebda <_dtoa_r+0x442>
 801ea92:	2c00      	cmp	r4, #0
 801ea94:	f000 80a1 	beq.w	801ebda <_dtoa_r+0x442>
 801ea98:	2f00      	cmp	r7, #0
 801ea9a:	dd33      	ble.n	801eb04 <_dtoa_r+0x36c>
 801ea9c:	4bad      	ldr	r3, [pc, #692]	@ (801ed54 <_dtoa_r+0x5bc>)
 801ea9e:	f007 020f 	and.w	r2, r7, #15
 801eaa2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801eaa6:	ed93 7b00 	vldr	d7, [r3]
 801eaaa:	05f8      	lsls	r0, r7, #23
 801eaac:	ed8d 7b04 	vstr	d7, [sp, #16]
 801eab0:	ea4f 1427 	mov.w	r4, r7, asr #4
 801eab4:	d516      	bpl.n	801eae4 <_dtoa_r+0x34c>
 801eab6:	4ba8      	ldr	r3, [pc, #672]	@ (801ed58 <_dtoa_r+0x5c0>)
 801eab8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801eabc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801eac0:	f7e1 fec4 	bl	800084c <__aeabi_ddiv>
 801eac4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eac8:	f004 040f 	and.w	r4, r4, #15
 801eacc:	2603      	movs	r6, #3
 801eace:	4da2      	ldr	r5, [pc, #648]	@ (801ed58 <_dtoa_r+0x5c0>)
 801ead0:	b954      	cbnz	r4, 801eae8 <_dtoa_r+0x350>
 801ead2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801ead6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eada:	f7e1 feb7 	bl	800084c <__aeabi_ddiv>
 801eade:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eae2:	e028      	b.n	801eb36 <_dtoa_r+0x39e>
 801eae4:	2602      	movs	r6, #2
 801eae6:	e7f2      	b.n	801eace <_dtoa_r+0x336>
 801eae8:	07e1      	lsls	r1, r4, #31
 801eaea:	d508      	bpl.n	801eafe <_dtoa_r+0x366>
 801eaec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801eaf0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801eaf4:	f7e1 fd80 	bl	80005f8 <__aeabi_dmul>
 801eaf8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801eafc:	3601      	adds	r6, #1
 801eafe:	1064      	asrs	r4, r4, #1
 801eb00:	3508      	adds	r5, #8
 801eb02:	e7e5      	b.n	801ead0 <_dtoa_r+0x338>
 801eb04:	f000 80d2 	beq.w	801ecac <_dtoa_r+0x514>
 801eb08:	427c      	negs	r4, r7
 801eb0a:	4b92      	ldr	r3, [pc, #584]	@ (801ed54 <_dtoa_r+0x5bc>)
 801eb0c:	4d92      	ldr	r5, [pc, #584]	@ (801ed58 <_dtoa_r+0x5c0>)
 801eb0e:	f004 020f 	and.w	r2, r4, #15
 801eb12:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801eb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eb1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801eb1e:	f7e1 fd6b 	bl	80005f8 <__aeabi_dmul>
 801eb22:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eb26:	1124      	asrs	r4, r4, #4
 801eb28:	2300      	movs	r3, #0
 801eb2a:	2602      	movs	r6, #2
 801eb2c:	2c00      	cmp	r4, #0
 801eb2e:	f040 80b2 	bne.w	801ec96 <_dtoa_r+0x4fe>
 801eb32:	2b00      	cmp	r3, #0
 801eb34:	d1d3      	bne.n	801eade <_dtoa_r+0x346>
 801eb36:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801eb38:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801eb3c:	2b00      	cmp	r3, #0
 801eb3e:	f000 80b7 	beq.w	801ecb0 <_dtoa_r+0x518>
 801eb42:	4b86      	ldr	r3, [pc, #536]	@ (801ed5c <_dtoa_r+0x5c4>)
 801eb44:	2200      	movs	r2, #0
 801eb46:	4620      	mov	r0, r4
 801eb48:	4629      	mov	r1, r5
 801eb4a:	f7e1 ffc7 	bl	8000adc <__aeabi_dcmplt>
 801eb4e:	2800      	cmp	r0, #0
 801eb50:	f000 80ae 	beq.w	801ecb0 <_dtoa_r+0x518>
 801eb54:	9b07      	ldr	r3, [sp, #28]
 801eb56:	2b00      	cmp	r3, #0
 801eb58:	f000 80aa 	beq.w	801ecb0 <_dtoa_r+0x518>
 801eb5c:	9b00      	ldr	r3, [sp, #0]
 801eb5e:	2b00      	cmp	r3, #0
 801eb60:	dd37      	ble.n	801ebd2 <_dtoa_r+0x43a>
 801eb62:	1e7b      	subs	r3, r7, #1
 801eb64:	9304      	str	r3, [sp, #16]
 801eb66:	4620      	mov	r0, r4
 801eb68:	4b7d      	ldr	r3, [pc, #500]	@ (801ed60 <_dtoa_r+0x5c8>)
 801eb6a:	2200      	movs	r2, #0
 801eb6c:	4629      	mov	r1, r5
 801eb6e:	f7e1 fd43 	bl	80005f8 <__aeabi_dmul>
 801eb72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801eb76:	9c00      	ldr	r4, [sp, #0]
 801eb78:	3601      	adds	r6, #1
 801eb7a:	4630      	mov	r0, r6
 801eb7c:	f7e1 fcd2 	bl	8000524 <__aeabi_i2d>
 801eb80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801eb84:	f7e1 fd38 	bl	80005f8 <__aeabi_dmul>
 801eb88:	4b76      	ldr	r3, [pc, #472]	@ (801ed64 <_dtoa_r+0x5cc>)
 801eb8a:	2200      	movs	r2, #0
 801eb8c:	f7e1 fb7e 	bl	800028c <__adddf3>
 801eb90:	4605      	mov	r5, r0
 801eb92:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801eb96:	2c00      	cmp	r4, #0
 801eb98:	f040 808d 	bne.w	801ecb6 <_dtoa_r+0x51e>
 801eb9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801eba0:	4b71      	ldr	r3, [pc, #452]	@ (801ed68 <_dtoa_r+0x5d0>)
 801eba2:	2200      	movs	r2, #0
 801eba4:	f7e1 fb70 	bl	8000288 <__aeabi_dsub>
 801eba8:	4602      	mov	r2, r0
 801ebaa:	460b      	mov	r3, r1
 801ebac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ebb0:	462a      	mov	r2, r5
 801ebb2:	4633      	mov	r3, r6
 801ebb4:	f7e1 ffb0 	bl	8000b18 <__aeabi_dcmpgt>
 801ebb8:	2800      	cmp	r0, #0
 801ebba:	f040 828b 	bne.w	801f0d4 <_dtoa_r+0x93c>
 801ebbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ebc2:	462a      	mov	r2, r5
 801ebc4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801ebc8:	f7e1 ff88 	bl	8000adc <__aeabi_dcmplt>
 801ebcc:	2800      	cmp	r0, #0
 801ebce:	f040 8128 	bne.w	801ee22 <_dtoa_r+0x68a>
 801ebd2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801ebd6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801ebda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ebdc:	2b00      	cmp	r3, #0
 801ebde:	f2c0 815a 	blt.w	801ee96 <_dtoa_r+0x6fe>
 801ebe2:	2f0e      	cmp	r7, #14
 801ebe4:	f300 8157 	bgt.w	801ee96 <_dtoa_r+0x6fe>
 801ebe8:	4b5a      	ldr	r3, [pc, #360]	@ (801ed54 <_dtoa_r+0x5bc>)
 801ebea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ebee:	ed93 7b00 	vldr	d7, [r3]
 801ebf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ebf4:	2b00      	cmp	r3, #0
 801ebf6:	ed8d 7b00 	vstr	d7, [sp]
 801ebfa:	da03      	bge.n	801ec04 <_dtoa_r+0x46c>
 801ebfc:	9b07      	ldr	r3, [sp, #28]
 801ebfe:	2b00      	cmp	r3, #0
 801ec00:	f340 8101 	ble.w	801ee06 <_dtoa_r+0x66e>
 801ec04:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801ec08:	4656      	mov	r6, sl
 801ec0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ec0e:	4620      	mov	r0, r4
 801ec10:	4629      	mov	r1, r5
 801ec12:	f7e1 fe1b 	bl	800084c <__aeabi_ddiv>
 801ec16:	f7e1 ff9f 	bl	8000b58 <__aeabi_d2iz>
 801ec1a:	4680      	mov	r8, r0
 801ec1c:	f7e1 fc82 	bl	8000524 <__aeabi_i2d>
 801ec20:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ec24:	f7e1 fce8 	bl	80005f8 <__aeabi_dmul>
 801ec28:	4602      	mov	r2, r0
 801ec2a:	460b      	mov	r3, r1
 801ec2c:	4620      	mov	r0, r4
 801ec2e:	4629      	mov	r1, r5
 801ec30:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801ec34:	f7e1 fb28 	bl	8000288 <__aeabi_dsub>
 801ec38:	f806 4b01 	strb.w	r4, [r6], #1
 801ec3c:	9d07      	ldr	r5, [sp, #28]
 801ec3e:	eba6 040a 	sub.w	r4, r6, sl
 801ec42:	42a5      	cmp	r5, r4
 801ec44:	4602      	mov	r2, r0
 801ec46:	460b      	mov	r3, r1
 801ec48:	f040 8117 	bne.w	801ee7a <_dtoa_r+0x6e2>
 801ec4c:	f7e1 fb1e 	bl	800028c <__adddf3>
 801ec50:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ec54:	4604      	mov	r4, r0
 801ec56:	460d      	mov	r5, r1
 801ec58:	f7e1 ff5e 	bl	8000b18 <__aeabi_dcmpgt>
 801ec5c:	2800      	cmp	r0, #0
 801ec5e:	f040 80f9 	bne.w	801ee54 <_dtoa_r+0x6bc>
 801ec62:	e9dd 2300 	ldrd	r2, r3, [sp]
 801ec66:	4620      	mov	r0, r4
 801ec68:	4629      	mov	r1, r5
 801ec6a:	f7e1 ff2d 	bl	8000ac8 <__aeabi_dcmpeq>
 801ec6e:	b118      	cbz	r0, 801ec78 <_dtoa_r+0x4e0>
 801ec70:	f018 0f01 	tst.w	r8, #1
 801ec74:	f040 80ee 	bne.w	801ee54 <_dtoa_r+0x6bc>
 801ec78:	4649      	mov	r1, r9
 801ec7a:	4658      	mov	r0, fp
 801ec7c:	f000 fc90 	bl	801f5a0 <_Bfree>
 801ec80:	2300      	movs	r3, #0
 801ec82:	7033      	strb	r3, [r6, #0]
 801ec84:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801ec86:	3701      	adds	r7, #1
 801ec88:	601f      	str	r7, [r3, #0]
 801ec8a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ec8c:	2b00      	cmp	r3, #0
 801ec8e:	f000 831d 	beq.w	801f2cc <_dtoa_r+0xb34>
 801ec92:	601e      	str	r6, [r3, #0]
 801ec94:	e31a      	b.n	801f2cc <_dtoa_r+0xb34>
 801ec96:	07e2      	lsls	r2, r4, #31
 801ec98:	d505      	bpl.n	801eca6 <_dtoa_r+0x50e>
 801ec9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801ec9e:	f7e1 fcab 	bl	80005f8 <__aeabi_dmul>
 801eca2:	3601      	adds	r6, #1
 801eca4:	2301      	movs	r3, #1
 801eca6:	1064      	asrs	r4, r4, #1
 801eca8:	3508      	adds	r5, #8
 801ecaa:	e73f      	b.n	801eb2c <_dtoa_r+0x394>
 801ecac:	2602      	movs	r6, #2
 801ecae:	e742      	b.n	801eb36 <_dtoa_r+0x39e>
 801ecb0:	9c07      	ldr	r4, [sp, #28]
 801ecb2:	9704      	str	r7, [sp, #16]
 801ecb4:	e761      	b.n	801eb7a <_dtoa_r+0x3e2>
 801ecb6:	4b27      	ldr	r3, [pc, #156]	@ (801ed54 <_dtoa_r+0x5bc>)
 801ecb8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ecba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801ecbe:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801ecc2:	4454      	add	r4, sl
 801ecc4:	2900      	cmp	r1, #0
 801ecc6:	d053      	beq.n	801ed70 <_dtoa_r+0x5d8>
 801ecc8:	4928      	ldr	r1, [pc, #160]	@ (801ed6c <_dtoa_r+0x5d4>)
 801ecca:	2000      	movs	r0, #0
 801eccc:	f7e1 fdbe 	bl	800084c <__aeabi_ddiv>
 801ecd0:	4633      	mov	r3, r6
 801ecd2:	462a      	mov	r2, r5
 801ecd4:	f7e1 fad8 	bl	8000288 <__aeabi_dsub>
 801ecd8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801ecdc:	4656      	mov	r6, sl
 801ecde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ece2:	f7e1 ff39 	bl	8000b58 <__aeabi_d2iz>
 801ece6:	4605      	mov	r5, r0
 801ece8:	f7e1 fc1c 	bl	8000524 <__aeabi_i2d>
 801ecec:	4602      	mov	r2, r0
 801ecee:	460b      	mov	r3, r1
 801ecf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ecf4:	f7e1 fac8 	bl	8000288 <__aeabi_dsub>
 801ecf8:	3530      	adds	r5, #48	@ 0x30
 801ecfa:	4602      	mov	r2, r0
 801ecfc:	460b      	mov	r3, r1
 801ecfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801ed02:	f806 5b01 	strb.w	r5, [r6], #1
 801ed06:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801ed0a:	f7e1 fee7 	bl	8000adc <__aeabi_dcmplt>
 801ed0e:	2800      	cmp	r0, #0
 801ed10:	d171      	bne.n	801edf6 <_dtoa_r+0x65e>
 801ed12:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ed16:	4911      	ldr	r1, [pc, #68]	@ (801ed5c <_dtoa_r+0x5c4>)
 801ed18:	2000      	movs	r0, #0
 801ed1a:	f7e1 fab5 	bl	8000288 <__aeabi_dsub>
 801ed1e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801ed22:	f7e1 fedb 	bl	8000adc <__aeabi_dcmplt>
 801ed26:	2800      	cmp	r0, #0
 801ed28:	f040 8095 	bne.w	801ee56 <_dtoa_r+0x6be>
 801ed2c:	42a6      	cmp	r6, r4
 801ed2e:	f43f af50 	beq.w	801ebd2 <_dtoa_r+0x43a>
 801ed32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801ed36:	4b0a      	ldr	r3, [pc, #40]	@ (801ed60 <_dtoa_r+0x5c8>)
 801ed38:	2200      	movs	r2, #0
 801ed3a:	f7e1 fc5d 	bl	80005f8 <__aeabi_dmul>
 801ed3e:	4b08      	ldr	r3, [pc, #32]	@ (801ed60 <_dtoa_r+0x5c8>)
 801ed40:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801ed44:	2200      	movs	r2, #0
 801ed46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ed4a:	f7e1 fc55 	bl	80005f8 <__aeabi_dmul>
 801ed4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ed52:	e7c4      	b.n	801ecde <_dtoa_r+0x546>
 801ed54:	08026070 	.word	0x08026070
 801ed58:	08026048 	.word	0x08026048
 801ed5c:	3ff00000 	.word	0x3ff00000
 801ed60:	40240000 	.word	0x40240000
 801ed64:	401c0000 	.word	0x401c0000
 801ed68:	40140000 	.word	0x40140000
 801ed6c:	3fe00000 	.word	0x3fe00000
 801ed70:	4631      	mov	r1, r6
 801ed72:	4628      	mov	r0, r5
 801ed74:	f7e1 fc40 	bl	80005f8 <__aeabi_dmul>
 801ed78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801ed7c:	9415      	str	r4, [sp, #84]	@ 0x54
 801ed7e:	4656      	mov	r6, sl
 801ed80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ed84:	f7e1 fee8 	bl	8000b58 <__aeabi_d2iz>
 801ed88:	4605      	mov	r5, r0
 801ed8a:	f7e1 fbcb 	bl	8000524 <__aeabi_i2d>
 801ed8e:	4602      	mov	r2, r0
 801ed90:	460b      	mov	r3, r1
 801ed92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801ed96:	f7e1 fa77 	bl	8000288 <__aeabi_dsub>
 801ed9a:	3530      	adds	r5, #48	@ 0x30
 801ed9c:	f806 5b01 	strb.w	r5, [r6], #1
 801eda0:	4602      	mov	r2, r0
 801eda2:	460b      	mov	r3, r1
 801eda4:	42a6      	cmp	r6, r4
 801eda6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801edaa:	f04f 0200 	mov.w	r2, #0
 801edae:	d124      	bne.n	801edfa <_dtoa_r+0x662>
 801edb0:	4bac      	ldr	r3, [pc, #688]	@ (801f064 <_dtoa_r+0x8cc>)
 801edb2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801edb6:	f7e1 fa69 	bl	800028c <__adddf3>
 801edba:	4602      	mov	r2, r0
 801edbc:	460b      	mov	r3, r1
 801edbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801edc2:	f7e1 fea9 	bl	8000b18 <__aeabi_dcmpgt>
 801edc6:	2800      	cmp	r0, #0
 801edc8:	d145      	bne.n	801ee56 <_dtoa_r+0x6be>
 801edca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801edce:	49a5      	ldr	r1, [pc, #660]	@ (801f064 <_dtoa_r+0x8cc>)
 801edd0:	2000      	movs	r0, #0
 801edd2:	f7e1 fa59 	bl	8000288 <__aeabi_dsub>
 801edd6:	4602      	mov	r2, r0
 801edd8:	460b      	mov	r3, r1
 801edda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801edde:	f7e1 fe7d 	bl	8000adc <__aeabi_dcmplt>
 801ede2:	2800      	cmp	r0, #0
 801ede4:	f43f aef5 	beq.w	801ebd2 <_dtoa_r+0x43a>
 801ede8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801edea:	1e73      	subs	r3, r6, #1
 801edec:	9315      	str	r3, [sp, #84]	@ 0x54
 801edee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801edf2:	2b30      	cmp	r3, #48	@ 0x30
 801edf4:	d0f8      	beq.n	801ede8 <_dtoa_r+0x650>
 801edf6:	9f04      	ldr	r7, [sp, #16]
 801edf8:	e73e      	b.n	801ec78 <_dtoa_r+0x4e0>
 801edfa:	4b9b      	ldr	r3, [pc, #620]	@ (801f068 <_dtoa_r+0x8d0>)
 801edfc:	f7e1 fbfc 	bl	80005f8 <__aeabi_dmul>
 801ee00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801ee04:	e7bc      	b.n	801ed80 <_dtoa_r+0x5e8>
 801ee06:	d10c      	bne.n	801ee22 <_dtoa_r+0x68a>
 801ee08:	4b98      	ldr	r3, [pc, #608]	@ (801f06c <_dtoa_r+0x8d4>)
 801ee0a:	2200      	movs	r2, #0
 801ee0c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ee10:	f7e1 fbf2 	bl	80005f8 <__aeabi_dmul>
 801ee14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801ee18:	f7e1 fe74 	bl	8000b04 <__aeabi_dcmpge>
 801ee1c:	2800      	cmp	r0, #0
 801ee1e:	f000 8157 	beq.w	801f0d0 <_dtoa_r+0x938>
 801ee22:	2400      	movs	r4, #0
 801ee24:	4625      	mov	r5, r4
 801ee26:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ee28:	43db      	mvns	r3, r3
 801ee2a:	9304      	str	r3, [sp, #16]
 801ee2c:	4656      	mov	r6, sl
 801ee2e:	2700      	movs	r7, #0
 801ee30:	4621      	mov	r1, r4
 801ee32:	4658      	mov	r0, fp
 801ee34:	f000 fbb4 	bl	801f5a0 <_Bfree>
 801ee38:	2d00      	cmp	r5, #0
 801ee3a:	d0dc      	beq.n	801edf6 <_dtoa_r+0x65e>
 801ee3c:	b12f      	cbz	r7, 801ee4a <_dtoa_r+0x6b2>
 801ee3e:	42af      	cmp	r7, r5
 801ee40:	d003      	beq.n	801ee4a <_dtoa_r+0x6b2>
 801ee42:	4639      	mov	r1, r7
 801ee44:	4658      	mov	r0, fp
 801ee46:	f000 fbab 	bl	801f5a0 <_Bfree>
 801ee4a:	4629      	mov	r1, r5
 801ee4c:	4658      	mov	r0, fp
 801ee4e:	f000 fba7 	bl	801f5a0 <_Bfree>
 801ee52:	e7d0      	b.n	801edf6 <_dtoa_r+0x65e>
 801ee54:	9704      	str	r7, [sp, #16]
 801ee56:	4633      	mov	r3, r6
 801ee58:	461e      	mov	r6, r3
 801ee5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ee5e:	2a39      	cmp	r2, #57	@ 0x39
 801ee60:	d107      	bne.n	801ee72 <_dtoa_r+0x6da>
 801ee62:	459a      	cmp	sl, r3
 801ee64:	d1f8      	bne.n	801ee58 <_dtoa_r+0x6c0>
 801ee66:	9a04      	ldr	r2, [sp, #16]
 801ee68:	3201      	adds	r2, #1
 801ee6a:	9204      	str	r2, [sp, #16]
 801ee6c:	2230      	movs	r2, #48	@ 0x30
 801ee6e:	f88a 2000 	strb.w	r2, [sl]
 801ee72:	781a      	ldrb	r2, [r3, #0]
 801ee74:	3201      	adds	r2, #1
 801ee76:	701a      	strb	r2, [r3, #0]
 801ee78:	e7bd      	b.n	801edf6 <_dtoa_r+0x65e>
 801ee7a:	4b7b      	ldr	r3, [pc, #492]	@ (801f068 <_dtoa_r+0x8d0>)
 801ee7c:	2200      	movs	r2, #0
 801ee7e:	f7e1 fbbb 	bl	80005f8 <__aeabi_dmul>
 801ee82:	2200      	movs	r2, #0
 801ee84:	2300      	movs	r3, #0
 801ee86:	4604      	mov	r4, r0
 801ee88:	460d      	mov	r5, r1
 801ee8a:	f7e1 fe1d 	bl	8000ac8 <__aeabi_dcmpeq>
 801ee8e:	2800      	cmp	r0, #0
 801ee90:	f43f aebb 	beq.w	801ec0a <_dtoa_r+0x472>
 801ee94:	e6f0      	b.n	801ec78 <_dtoa_r+0x4e0>
 801ee96:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ee98:	2a00      	cmp	r2, #0
 801ee9a:	f000 80db 	beq.w	801f054 <_dtoa_r+0x8bc>
 801ee9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801eea0:	2a01      	cmp	r2, #1
 801eea2:	f300 80bf 	bgt.w	801f024 <_dtoa_r+0x88c>
 801eea6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801eea8:	2a00      	cmp	r2, #0
 801eeaa:	f000 80b7 	beq.w	801f01c <_dtoa_r+0x884>
 801eeae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801eeb2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801eeb4:	4646      	mov	r6, r8
 801eeb6:	9a08      	ldr	r2, [sp, #32]
 801eeb8:	2101      	movs	r1, #1
 801eeba:	441a      	add	r2, r3
 801eebc:	4658      	mov	r0, fp
 801eebe:	4498      	add	r8, r3
 801eec0:	9208      	str	r2, [sp, #32]
 801eec2:	f000 fc6b 	bl	801f79c <__i2b>
 801eec6:	4605      	mov	r5, r0
 801eec8:	b15e      	cbz	r6, 801eee2 <_dtoa_r+0x74a>
 801eeca:	9b08      	ldr	r3, [sp, #32]
 801eecc:	2b00      	cmp	r3, #0
 801eece:	dd08      	ble.n	801eee2 <_dtoa_r+0x74a>
 801eed0:	42b3      	cmp	r3, r6
 801eed2:	9a08      	ldr	r2, [sp, #32]
 801eed4:	bfa8      	it	ge
 801eed6:	4633      	movge	r3, r6
 801eed8:	eba8 0803 	sub.w	r8, r8, r3
 801eedc:	1af6      	subs	r6, r6, r3
 801eede:	1ad3      	subs	r3, r2, r3
 801eee0:	9308      	str	r3, [sp, #32]
 801eee2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eee4:	b1f3      	cbz	r3, 801ef24 <_dtoa_r+0x78c>
 801eee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eee8:	2b00      	cmp	r3, #0
 801eeea:	f000 80b7 	beq.w	801f05c <_dtoa_r+0x8c4>
 801eeee:	b18c      	cbz	r4, 801ef14 <_dtoa_r+0x77c>
 801eef0:	4629      	mov	r1, r5
 801eef2:	4622      	mov	r2, r4
 801eef4:	4658      	mov	r0, fp
 801eef6:	f000 fd11 	bl	801f91c <__pow5mult>
 801eefa:	464a      	mov	r2, r9
 801eefc:	4601      	mov	r1, r0
 801eefe:	4605      	mov	r5, r0
 801ef00:	4658      	mov	r0, fp
 801ef02:	f000 fc61 	bl	801f7c8 <__multiply>
 801ef06:	4649      	mov	r1, r9
 801ef08:	9004      	str	r0, [sp, #16]
 801ef0a:	4658      	mov	r0, fp
 801ef0c:	f000 fb48 	bl	801f5a0 <_Bfree>
 801ef10:	9b04      	ldr	r3, [sp, #16]
 801ef12:	4699      	mov	r9, r3
 801ef14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ef16:	1b1a      	subs	r2, r3, r4
 801ef18:	d004      	beq.n	801ef24 <_dtoa_r+0x78c>
 801ef1a:	4649      	mov	r1, r9
 801ef1c:	4658      	mov	r0, fp
 801ef1e:	f000 fcfd 	bl	801f91c <__pow5mult>
 801ef22:	4681      	mov	r9, r0
 801ef24:	2101      	movs	r1, #1
 801ef26:	4658      	mov	r0, fp
 801ef28:	f000 fc38 	bl	801f79c <__i2b>
 801ef2c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ef2e:	4604      	mov	r4, r0
 801ef30:	2b00      	cmp	r3, #0
 801ef32:	f000 81cf 	beq.w	801f2d4 <_dtoa_r+0xb3c>
 801ef36:	461a      	mov	r2, r3
 801ef38:	4601      	mov	r1, r0
 801ef3a:	4658      	mov	r0, fp
 801ef3c:	f000 fcee 	bl	801f91c <__pow5mult>
 801ef40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef42:	2b01      	cmp	r3, #1
 801ef44:	4604      	mov	r4, r0
 801ef46:	f300 8095 	bgt.w	801f074 <_dtoa_r+0x8dc>
 801ef4a:	9b02      	ldr	r3, [sp, #8]
 801ef4c:	2b00      	cmp	r3, #0
 801ef4e:	f040 8087 	bne.w	801f060 <_dtoa_r+0x8c8>
 801ef52:	9b03      	ldr	r3, [sp, #12]
 801ef54:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ef58:	2b00      	cmp	r3, #0
 801ef5a:	f040 8089 	bne.w	801f070 <_dtoa_r+0x8d8>
 801ef5e:	9b03      	ldr	r3, [sp, #12]
 801ef60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801ef64:	0d1b      	lsrs	r3, r3, #20
 801ef66:	051b      	lsls	r3, r3, #20
 801ef68:	b12b      	cbz	r3, 801ef76 <_dtoa_r+0x7de>
 801ef6a:	9b08      	ldr	r3, [sp, #32]
 801ef6c:	3301      	adds	r3, #1
 801ef6e:	9308      	str	r3, [sp, #32]
 801ef70:	f108 0801 	add.w	r8, r8, #1
 801ef74:	2301      	movs	r3, #1
 801ef76:	930a      	str	r3, [sp, #40]	@ 0x28
 801ef78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ef7a:	2b00      	cmp	r3, #0
 801ef7c:	f000 81b0 	beq.w	801f2e0 <_dtoa_r+0xb48>
 801ef80:	6923      	ldr	r3, [r4, #16]
 801ef82:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801ef86:	6918      	ldr	r0, [r3, #16]
 801ef88:	f000 fbbc 	bl	801f704 <__hi0bits>
 801ef8c:	f1c0 0020 	rsb	r0, r0, #32
 801ef90:	9b08      	ldr	r3, [sp, #32]
 801ef92:	4418      	add	r0, r3
 801ef94:	f010 001f 	ands.w	r0, r0, #31
 801ef98:	d077      	beq.n	801f08a <_dtoa_r+0x8f2>
 801ef9a:	f1c0 0320 	rsb	r3, r0, #32
 801ef9e:	2b04      	cmp	r3, #4
 801efa0:	dd6b      	ble.n	801f07a <_dtoa_r+0x8e2>
 801efa2:	9b08      	ldr	r3, [sp, #32]
 801efa4:	f1c0 001c 	rsb	r0, r0, #28
 801efa8:	4403      	add	r3, r0
 801efaa:	4480      	add	r8, r0
 801efac:	4406      	add	r6, r0
 801efae:	9308      	str	r3, [sp, #32]
 801efb0:	f1b8 0f00 	cmp.w	r8, #0
 801efb4:	dd05      	ble.n	801efc2 <_dtoa_r+0x82a>
 801efb6:	4649      	mov	r1, r9
 801efb8:	4642      	mov	r2, r8
 801efba:	4658      	mov	r0, fp
 801efbc:	f000 fd08 	bl	801f9d0 <__lshift>
 801efc0:	4681      	mov	r9, r0
 801efc2:	9b08      	ldr	r3, [sp, #32]
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	dd05      	ble.n	801efd4 <_dtoa_r+0x83c>
 801efc8:	4621      	mov	r1, r4
 801efca:	461a      	mov	r2, r3
 801efcc:	4658      	mov	r0, fp
 801efce:	f000 fcff 	bl	801f9d0 <__lshift>
 801efd2:	4604      	mov	r4, r0
 801efd4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801efd6:	2b00      	cmp	r3, #0
 801efd8:	d059      	beq.n	801f08e <_dtoa_r+0x8f6>
 801efda:	4621      	mov	r1, r4
 801efdc:	4648      	mov	r0, r9
 801efde:	f000 fd63 	bl	801faa8 <__mcmp>
 801efe2:	2800      	cmp	r0, #0
 801efe4:	da53      	bge.n	801f08e <_dtoa_r+0x8f6>
 801efe6:	1e7b      	subs	r3, r7, #1
 801efe8:	9304      	str	r3, [sp, #16]
 801efea:	4649      	mov	r1, r9
 801efec:	2300      	movs	r3, #0
 801efee:	220a      	movs	r2, #10
 801eff0:	4658      	mov	r0, fp
 801eff2:	f000 faf7 	bl	801f5e4 <__multadd>
 801eff6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eff8:	4681      	mov	r9, r0
 801effa:	2b00      	cmp	r3, #0
 801effc:	f000 8172 	beq.w	801f2e4 <_dtoa_r+0xb4c>
 801f000:	2300      	movs	r3, #0
 801f002:	4629      	mov	r1, r5
 801f004:	220a      	movs	r2, #10
 801f006:	4658      	mov	r0, fp
 801f008:	f000 faec 	bl	801f5e4 <__multadd>
 801f00c:	9b00      	ldr	r3, [sp, #0]
 801f00e:	2b00      	cmp	r3, #0
 801f010:	4605      	mov	r5, r0
 801f012:	dc67      	bgt.n	801f0e4 <_dtoa_r+0x94c>
 801f014:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f016:	2b02      	cmp	r3, #2
 801f018:	dc41      	bgt.n	801f09e <_dtoa_r+0x906>
 801f01a:	e063      	b.n	801f0e4 <_dtoa_r+0x94c>
 801f01c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f01e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801f022:	e746      	b.n	801eeb2 <_dtoa_r+0x71a>
 801f024:	9b07      	ldr	r3, [sp, #28]
 801f026:	1e5c      	subs	r4, r3, #1
 801f028:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f02a:	42a3      	cmp	r3, r4
 801f02c:	bfbf      	itttt	lt
 801f02e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801f030:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801f032:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801f034:	1ae3      	sublt	r3, r4, r3
 801f036:	bfb4      	ite	lt
 801f038:	18d2      	addlt	r2, r2, r3
 801f03a:	1b1c      	subge	r4, r3, r4
 801f03c:	9b07      	ldr	r3, [sp, #28]
 801f03e:	bfbc      	itt	lt
 801f040:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801f042:	2400      	movlt	r4, #0
 801f044:	2b00      	cmp	r3, #0
 801f046:	bfb5      	itete	lt
 801f048:	eba8 0603 	sublt.w	r6, r8, r3
 801f04c:	9b07      	ldrge	r3, [sp, #28]
 801f04e:	2300      	movlt	r3, #0
 801f050:	4646      	movge	r6, r8
 801f052:	e730      	b.n	801eeb6 <_dtoa_r+0x71e>
 801f054:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f056:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801f058:	4646      	mov	r6, r8
 801f05a:	e735      	b.n	801eec8 <_dtoa_r+0x730>
 801f05c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f05e:	e75c      	b.n	801ef1a <_dtoa_r+0x782>
 801f060:	2300      	movs	r3, #0
 801f062:	e788      	b.n	801ef76 <_dtoa_r+0x7de>
 801f064:	3fe00000 	.word	0x3fe00000
 801f068:	40240000 	.word	0x40240000
 801f06c:	40140000 	.word	0x40140000
 801f070:	9b02      	ldr	r3, [sp, #8]
 801f072:	e780      	b.n	801ef76 <_dtoa_r+0x7de>
 801f074:	2300      	movs	r3, #0
 801f076:	930a      	str	r3, [sp, #40]	@ 0x28
 801f078:	e782      	b.n	801ef80 <_dtoa_r+0x7e8>
 801f07a:	d099      	beq.n	801efb0 <_dtoa_r+0x818>
 801f07c:	9a08      	ldr	r2, [sp, #32]
 801f07e:	331c      	adds	r3, #28
 801f080:	441a      	add	r2, r3
 801f082:	4498      	add	r8, r3
 801f084:	441e      	add	r6, r3
 801f086:	9208      	str	r2, [sp, #32]
 801f088:	e792      	b.n	801efb0 <_dtoa_r+0x818>
 801f08a:	4603      	mov	r3, r0
 801f08c:	e7f6      	b.n	801f07c <_dtoa_r+0x8e4>
 801f08e:	9b07      	ldr	r3, [sp, #28]
 801f090:	9704      	str	r7, [sp, #16]
 801f092:	2b00      	cmp	r3, #0
 801f094:	dc20      	bgt.n	801f0d8 <_dtoa_r+0x940>
 801f096:	9300      	str	r3, [sp, #0]
 801f098:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f09a:	2b02      	cmp	r3, #2
 801f09c:	dd1e      	ble.n	801f0dc <_dtoa_r+0x944>
 801f09e:	9b00      	ldr	r3, [sp, #0]
 801f0a0:	2b00      	cmp	r3, #0
 801f0a2:	f47f aec0 	bne.w	801ee26 <_dtoa_r+0x68e>
 801f0a6:	4621      	mov	r1, r4
 801f0a8:	2205      	movs	r2, #5
 801f0aa:	4658      	mov	r0, fp
 801f0ac:	f000 fa9a 	bl	801f5e4 <__multadd>
 801f0b0:	4601      	mov	r1, r0
 801f0b2:	4604      	mov	r4, r0
 801f0b4:	4648      	mov	r0, r9
 801f0b6:	f000 fcf7 	bl	801faa8 <__mcmp>
 801f0ba:	2800      	cmp	r0, #0
 801f0bc:	f77f aeb3 	ble.w	801ee26 <_dtoa_r+0x68e>
 801f0c0:	4656      	mov	r6, sl
 801f0c2:	2331      	movs	r3, #49	@ 0x31
 801f0c4:	f806 3b01 	strb.w	r3, [r6], #1
 801f0c8:	9b04      	ldr	r3, [sp, #16]
 801f0ca:	3301      	adds	r3, #1
 801f0cc:	9304      	str	r3, [sp, #16]
 801f0ce:	e6ae      	b.n	801ee2e <_dtoa_r+0x696>
 801f0d0:	9c07      	ldr	r4, [sp, #28]
 801f0d2:	9704      	str	r7, [sp, #16]
 801f0d4:	4625      	mov	r5, r4
 801f0d6:	e7f3      	b.n	801f0c0 <_dtoa_r+0x928>
 801f0d8:	9b07      	ldr	r3, [sp, #28]
 801f0da:	9300      	str	r3, [sp, #0]
 801f0dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f0de:	2b00      	cmp	r3, #0
 801f0e0:	f000 8104 	beq.w	801f2ec <_dtoa_r+0xb54>
 801f0e4:	2e00      	cmp	r6, #0
 801f0e6:	dd05      	ble.n	801f0f4 <_dtoa_r+0x95c>
 801f0e8:	4629      	mov	r1, r5
 801f0ea:	4632      	mov	r2, r6
 801f0ec:	4658      	mov	r0, fp
 801f0ee:	f000 fc6f 	bl	801f9d0 <__lshift>
 801f0f2:	4605      	mov	r5, r0
 801f0f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f0f6:	2b00      	cmp	r3, #0
 801f0f8:	d05a      	beq.n	801f1b0 <_dtoa_r+0xa18>
 801f0fa:	6869      	ldr	r1, [r5, #4]
 801f0fc:	4658      	mov	r0, fp
 801f0fe:	f000 fa0f 	bl	801f520 <_Balloc>
 801f102:	4606      	mov	r6, r0
 801f104:	b928      	cbnz	r0, 801f112 <_dtoa_r+0x97a>
 801f106:	4b84      	ldr	r3, [pc, #528]	@ (801f318 <_dtoa_r+0xb80>)
 801f108:	4602      	mov	r2, r0
 801f10a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801f10e:	f7ff bb5a 	b.w	801e7c6 <_dtoa_r+0x2e>
 801f112:	692a      	ldr	r2, [r5, #16]
 801f114:	3202      	adds	r2, #2
 801f116:	0092      	lsls	r2, r2, #2
 801f118:	f105 010c 	add.w	r1, r5, #12
 801f11c:	300c      	adds	r0, #12
 801f11e:	f7ff fa7e 	bl	801e61e <memcpy>
 801f122:	2201      	movs	r2, #1
 801f124:	4631      	mov	r1, r6
 801f126:	4658      	mov	r0, fp
 801f128:	f000 fc52 	bl	801f9d0 <__lshift>
 801f12c:	f10a 0301 	add.w	r3, sl, #1
 801f130:	9307      	str	r3, [sp, #28]
 801f132:	9b00      	ldr	r3, [sp, #0]
 801f134:	4453      	add	r3, sl
 801f136:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f138:	9b02      	ldr	r3, [sp, #8]
 801f13a:	f003 0301 	and.w	r3, r3, #1
 801f13e:	462f      	mov	r7, r5
 801f140:	930a      	str	r3, [sp, #40]	@ 0x28
 801f142:	4605      	mov	r5, r0
 801f144:	9b07      	ldr	r3, [sp, #28]
 801f146:	4621      	mov	r1, r4
 801f148:	3b01      	subs	r3, #1
 801f14a:	4648      	mov	r0, r9
 801f14c:	9300      	str	r3, [sp, #0]
 801f14e:	f7ff fa99 	bl	801e684 <quorem>
 801f152:	4639      	mov	r1, r7
 801f154:	9002      	str	r0, [sp, #8]
 801f156:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801f15a:	4648      	mov	r0, r9
 801f15c:	f000 fca4 	bl	801faa8 <__mcmp>
 801f160:	462a      	mov	r2, r5
 801f162:	9008      	str	r0, [sp, #32]
 801f164:	4621      	mov	r1, r4
 801f166:	4658      	mov	r0, fp
 801f168:	f000 fcba 	bl	801fae0 <__mdiff>
 801f16c:	68c2      	ldr	r2, [r0, #12]
 801f16e:	4606      	mov	r6, r0
 801f170:	bb02      	cbnz	r2, 801f1b4 <_dtoa_r+0xa1c>
 801f172:	4601      	mov	r1, r0
 801f174:	4648      	mov	r0, r9
 801f176:	f000 fc97 	bl	801faa8 <__mcmp>
 801f17a:	4602      	mov	r2, r0
 801f17c:	4631      	mov	r1, r6
 801f17e:	4658      	mov	r0, fp
 801f180:	920e      	str	r2, [sp, #56]	@ 0x38
 801f182:	f000 fa0d 	bl	801f5a0 <_Bfree>
 801f186:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f188:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f18a:	9e07      	ldr	r6, [sp, #28]
 801f18c:	ea43 0102 	orr.w	r1, r3, r2
 801f190:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f192:	4319      	orrs	r1, r3
 801f194:	d110      	bne.n	801f1b8 <_dtoa_r+0xa20>
 801f196:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f19a:	d029      	beq.n	801f1f0 <_dtoa_r+0xa58>
 801f19c:	9b08      	ldr	r3, [sp, #32]
 801f19e:	2b00      	cmp	r3, #0
 801f1a0:	dd02      	ble.n	801f1a8 <_dtoa_r+0xa10>
 801f1a2:	9b02      	ldr	r3, [sp, #8]
 801f1a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801f1a8:	9b00      	ldr	r3, [sp, #0]
 801f1aa:	f883 8000 	strb.w	r8, [r3]
 801f1ae:	e63f      	b.n	801ee30 <_dtoa_r+0x698>
 801f1b0:	4628      	mov	r0, r5
 801f1b2:	e7bb      	b.n	801f12c <_dtoa_r+0x994>
 801f1b4:	2201      	movs	r2, #1
 801f1b6:	e7e1      	b.n	801f17c <_dtoa_r+0x9e4>
 801f1b8:	9b08      	ldr	r3, [sp, #32]
 801f1ba:	2b00      	cmp	r3, #0
 801f1bc:	db04      	blt.n	801f1c8 <_dtoa_r+0xa30>
 801f1be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f1c0:	430b      	orrs	r3, r1
 801f1c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f1c4:	430b      	orrs	r3, r1
 801f1c6:	d120      	bne.n	801f20a <_dtoa_r+0xa72>
 801f1c8:	2a00      	cmp	r2, #0
 801f1ca:	dded      	ble.n	801f1a8 <_dtoa_r+0xa10>
 801f1cc:	4649      	mov	r1, r9
 801f1ce:	2201      	movs	r2, #1
 801f1d0:	4658      	mov	r0, fp
 801f1d2:	f000 fbfd 	bl	801f9d0 <__lshift>
 801f1d6:	4621      	mov	r1, r4
 801f1d8:	4681      	mov	r9, r0
 801f1da:	f000 fc65 	bl	801faa8 <__mcmp>
 801f1de:	2800      	cmp	r0, #0
 801f1e0:	dc03      	bgt.n	801f1ea <_dtoa_r+0xa52>
 801f1e2:	d1e1      	bne.n	801f1a8 <_dtoa_r+0xa10>
 801f1e4:	f018 0f01 	tst.w	r8, #1
 801f1e8:	d0de      	beq.n	801f1a8 <_dtoa_r+0xa10>
 801f1ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f1ee:	d1d8      	bne.n	801f1a2 <_dtoa_r+0xa0a>
 801f1f0:	9a00      	ldr	r2, [sp, #0]
 801f1f2:	2339      	movs	r3, #57	@ 0x39
 801f1f4:	7013      	strb	r3, [r2, #0]
 801f1f6:	4633      	mov	r3, r6
 801f1f8:	461e      	mov	r6, r3
 801f1fa:	3b01      	subs	r3, #1
 801f1fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801f200:	2a39      	cmp	r2, #57	@ 0x39
 801f202:	d052      	beq.n	801f2aa <_dtoa_r+0xb12>
 801f204:	3201      	adds	r2, #1
 801f206:	701a      	strb	r2, [r3, #0]
 801f208:	e612      	b.n	801ee30 <_dtoa_r+0x698>
 801f20a:	2a00      	cmp	r2, #0
 801f20c:	dd07      	ble.n	801f21e <_dtoa_r+0xa86>
 801f20e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f212:	d0ed      	beq.n	801f1f0 <_dtoa_r+0xa58>
 801f214:	9a00      	ldr	r2, [sp, #0]
 801f216:	f108 0301 	add.w	r3, r8, #1
 801f21a:	7013      	strb	r3, [r2, #0]
 801f21c:	e608      	b.n	801ee30 <_dtoa_r+0x698>
 801f21e:	9b07      	ldr	r3, [sp, #28]
 801f220:	9a07      	ldr	r2, [sp, #28]
 801f222:	f803 8c01 	strb.w	r8, [r3, #-1]
 801f226:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f228:	4293      	cmp	r3, r2
 801f22a:	d028      	beq.n	801f27e <_dtoa_r+0xae6>
 801f22c:	4649      	mov	r1, r9
 801f22e:	2300      	movs	r3, #0
 801f230:	220a      	movs	r2, #10
 801f232:	4658      	mov	r0, fp
 801f234:	f000 f9d6 	bl	801f5e4 <__multadd>
 801f238:	42af      	cmp	r7, r5
 801f23a:	4681      	mov	r9, r0
 801f23c:	f04f 0300 	mov.w	r3, #0
 801f240:	f04f 020a 	mov.w	r2, #10
 801f244:	4639      	mov	r1, r7
 801f246:	4658      	mov	r0, fp
 801f248:	d107      	bne.n	801f25a <_dtoa_r+0xac2>
 801f24a:	f000 f9cb 	bl	801f5e4 <__multadd>
 801f24e:	4607      	mov	r7, r0
 801f250:	4605      	mov	r5, r0
 801f252:	9b07      	ldr	r3, [sp, #28]
 801f254:	3301      	adds	r3, #1
 801f256:	9307      	str	r3, [sp, #28]
 801f258:	e774      	b.n	801f144 <_dtoa_r+0x9ac>
 801f25a:	f000 f9c3 	bl	801f5e4 <__multadd>
 801f25e:	4629      	mov	r1, r5
 801f260:	4607      	mov	r7, r0
 801f262:	2300      	movs	r3, #0
 801f264:	220a      	movs	r2, #10
 801f266:	4658      	mov	r0, fp
 801f268:	f000 f9bc 	bl	801f5e4 <__multadd>
 801f26c:	4605      	mov	r5, r0
 801f26e:	e7f0      	b.n	801f252 <_dtoa_r+0xaba>
 801f270:	9b00      	ldr	r3, [sp, #0]
 801f272:	2b00      	cmp	r3, #0
 801f274:	bfcc      	ite	gt
 801f276:	461e      	movgt	r6, r3
 801f278:	2601      	movle	r6, #1
 801f27a:	4456      	add	r6, sl
 801f27c:	2700      	movs	r7, #0
 801f27e:	4649      	mov	r1, r9
 801f280:	2201      	movs	r2, #1
 801f282:	4658      	mov	r0, fp
 801f284:	f000 fba4 	bl	801f9d0 <__lshift>
 801f288:	4621      	mov	r1, r4
 801f28a:	4681      	mov	r9, r0
 801f28c:	f000 fc0c 	bl	801faa8 <__mcmp>
 801f290:	2800      	cmp	r0, #0
 801f292:	dcb0      	bgt.n	801f1f6 <_dtoa_r+0xa5e>
 801f294:	d102      	bne.n	801f29c <_dtoa_r+0xb04>
 801f296:	f018 0f01 	tst.w	r8, #1
 801f29a:	d1ac      	bne.n	801f1f6 <_dtoa_r+0xa5e>
 801f29c:	4633      	mov	r3, r6
 801f29e:	461e      	mov	r6, r3
 801f2a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f2a4:	2a30      	cmp	r2, #48	@ 0x30
 801f2a6:	d0fa      	beq.n	801f29e <_dtoa_r+0xb06>
 801f2a8:	e5c2      	b.n	801ee30 <_dtoa_r+0x698>
 801f2aa:	459a      	cmp	sl, r3
 801f2ac:	d1a4      	bne.n	801f1f8 <_dtoa_r+0xa60>
 801f2ae:	9b04      	ldr	r3, [sp, #16]
 801f2b0:	3301      	adds	r3, #1
 801f2b2:	9304      	str	r3, [sp, #16]
 801f2b4:	2331      	movs	r3, #49	@ 0x31
 801f2b6:	f88a 3000 	strb.w	r3, [sl]
 801f2ba:	e5b9      	b.n	801ee30 <_dtoa_r+0x698>
 801f2bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f2be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801f31c <_dtoa_r+0xb84>
 801f2c2:	b11b      	cbz	r3, 801f2cc <_dtoa_r+0xb34>
 801f2c4:	f10a 0308 	add.w	r3, sl, #8
 801f2c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f2ca:	6013      	str	r3, [r2, #0]
 801f2cc:	4650      	mov	r0, sl
 801f2ce:	b019      	add	sp, #100	@ 0x64
 801f2d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f2d6:	2b01      	cmp	r3, #1
 801f2d8:	f77f ae37 	ble.w	801ef4a <_dtoa_r+0x7b2>
 801f2dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f2de:	930a      	str	r3, [sp, #40]	@ 0x28
 801f2e0:	2001      	movs	r0, #1
 801f2e2:	e655      	b.n	801ef90 <_dtoa_r+0x7f8>
 801f2e4:	9b00      	ldr	r3, [sp, #0]
 801f2e6:	2b00      	cmp	r3, #0
 801f2e8:	f77f aed6 	ble.w	801f098 <_dtoa_r+0x900>
 801f2ec:	4656      	mov	r6, sl
 801f2ee:	4621      	mov	r1, r4
 801f2f0:	4648      	mov	r0, r9
 801f2f2:	f7ff f9c7 	bl	801e684 <quorem>
 801f2f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801f2fa:	f806 8b01 	strb.w	r8, [r6], #1
 801f2fe:	9b00      	ldr	r3, [sp, #0]
 801f300:	eba6 020a 	sub.w	r2, r6, sl
 801f304:	4293      	cmp	r3, r2
 801f306:	ddb3      	ble.n	801f270 <_dtoa_r+0xad8>
 801f308:	4649      	mov	r1, r9
 801f30a:	2300      	movs	r3, #0
 801f30c:	220a      	movs	r2, #10
 801f30e:	4658      	mov	r0, fp
 801f310:	f000 f968 	bl	801f5e4 <__multadd>
 801f314:	4681      	mov	r9, r0
 801f316:	e7ea      	b.n	801f2ee <_dtoa_r+0xb56>
 801f318:	08025fd0 	.word	0x08025fd0
 801f31c:	08025f6b 	.word	0x08025f6b

0801f320 <_free_r>:
 801f320:	b538      	push	{r3, r4, r5, lr}
 801f322:	4605      	mov	r5, r0
 801f324:	2900      	cmp	r1, #0
 801f326:	d041      	beq.n	801f3ac <_free_r+0x8c>
 801f328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f32c:	1f0c      	subs	r4, r1, #4
 801f32e:	2b00      	cmp	r3, #0
 801f330:	bfb8      	it	lt
 801f332:	18e4      	addlt	r4, r4, r3
 801f334:	f000 f8e8 	bl	801f508 <__malloc_lock>
 801f338:	4a1d      	ldr	r2, [pc, #116]	@ (801f3b0 <_free_r+0x90>)
 801f33a:	6813      	ldr	r3, [r2, #0]
 801f33c:	b933      	cbnz	r3, 801f34c <_free_r+0x2c>
 801f33e:	6063      	str	r3, [r4, #4]
 801f340:	6014      	str	r4, [r2, #0]
 801f342:	4628      	mov	r0, r5
 801f344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f348:	f000 b8e4 	b.w	801f514 <__malloc_unlock>
 801f34c:	42a3      	cmp	r3, r4
 801f34e:	d908      	bls.n	801f362 <_free_r+0x42>
 801f350:	6820      	ldr	r0, [r4, #0]
 801f352:	1821      	adds	r1, r4, r0
 801f354:	428b      	cmp	r3, r1
 801f356:	bf01      	itttt	eq
 801f358:	6819      	ldreq	r1, [r3, #0]
 801f35a:	685b      	ldreq	r3, [r3, #4]
 801f35c:	1809      	addeq	r1, r1, r0
 801f35e:	6021      	streq	r1, [r4, #0]
 801f360:	e7ed      	b.n	801f33e <_free_r+0x1e>
 801f362:	461a      	mov	r2, r3
 801f364:	685b      	ldr	r3, [r3, #4]
 801f366:	b10b      	cbz	r3, 801f36c <_free_r+0x4c>
 801f368:	42a3      	cmp	r3, r4
 801f36a:	d9fa      	bls.n	801f362 <_free_r+0x42>
 801f36c:	6811      	ldr	r1, [r2, #0]
 801f36e:	1850      	adds	r0, r2, r1
 801f370:	42a0      	cmp	r0, r4
 801f372:	d10b      	bne.n	801f38c <_free_r+0x6c>
 801f374:	6820      	ldr	r0, [r4, #0]
 801f376:	4401      	add	r1, r0
 801f378:	1850      	adds	r0, r2, r1
 801f37a:	4283      	cmp	r3, r0
 801f37c:	6011      	str	r1, [r2, #0]
 801f37e:	d1e0      	bne.n	801f342 <_free_r+0x22>
 801f380:	6818      	ldr	r0, [r3, #0]
 801f382:	685b      	ldr	r3, [r3, #4]
 801f384:	6053      	str	r3, [r2, #4]
 801f386:	4408      	add	r0, r1
 801f388:	6010      	str	r0, [r2, #0]
 801f38a:	e7da      	b.n	801f342 <_free_r+0x22>
 801f38c:	d902      	bls.n	801f394 <_free_r+0x74>
 801f38e:	230c      	movs	r3, #12
 801f390:	602b      	str	r3, [r5, #0]
 801f392:	e7d6      	b.n	801f342 <_free_r+0x22>
 801f394:	6820      	ldr	r0, [r4, #0]
 801f396:	1821      	adds	r1, r4, r0
 801f398:	428b      	cmp	r3, r1
 801f39a:	bf04      	itt	eq
 801f39c:	6819      	ldreq	r1, [r3, #0]
 801f39e:	685b      	ldreq	r3, [r3, #4]
 801f3a0:	6063      	str	r3, [r4, #4]
 801f3a2:	bf04      	itt	eq
 801f3a4:	1809      	addeq	r1, r1, r0
 801f3a6:	6021      	streq	r1, [r4, #0]
 801f3a8:	6054      	str	r4, [r2, #4]
 801f3aa:	e7ca      	b.n	801f342 <_free_r+0x22>
 801f3ac:	bd38      	pop	{r3, r4, r5, pc}
 801f3ae:	bf00      	nop
 801f3b0:	20012958 	.word	0x20012958

0801f3b4 <malloc>:
 801f3b4:	4b02      	ldr	r3, [pc, #8]	@ (801f3c0 <malloc+0xc>)
 801f3b6:	4601      	mov	r1, r0
 801f3b8:	6818      	ldr	r0, [r3, #0]
 801f3ba:	f000 b825 	b.w	801f408 <_malloc_r>
 801f3be:	bf00      	nop
 801f3c0:	20000060 	.word	0x20000060

0801f3c4 <sbrk_aligned>:
 801f3c4:	b570      	push	{r4, r5, r6, lr}
 801f3c6:	4e0f      	ldr	r6, [pc, #60]	@ (801f404 <sbrk_aligned+0x40>)
 801f3c8:	460c      	mov	r4, r1
 801f3ca:	6831      	ldr	r1, [r6, #0]
 801f3cc:	4605      	mov	r5, r0
 801f3ce:	b911      	cbnz	r1, 801f3d6 <sbrk_aligned+0x12>
 801f3d0:	f001 fea0 	bl	8021114 <_sbrk_r>
 801f3d4:	6030      	str	r0, [r6, #0]
 801f3d6:	4621      	mov	r1, r4
 801f3d8:	4628      	mov	r0, r5
 801f3da:	f001 fe9b 	bl	8021114 <_sbrk_r>
 801f3de:	1c43      	adds	r3, r0, #1
 801f3e0:	d103      	bne.n	801f3ea <sbrk_aligned+0x26>
 801f3e2:	f04f 34ff 	mov.w	r4, #4294967295
 801f3e6:	4620      	mov	r0, r4
 801f3e8:	bd70      	pop	{r4, r5, r6, pc}
 801f3ea:	1cc4      	adds	r4, r0, #3
 801f3ec:	f024 0403 	bic.w	r4, r4, #3
 801f3f0:	42a0      	cmp	r0, r4
 801f3f2:	d0f8      	beq.n	801f3e6 <sbrk_aligned+0x22>
 801f3f4:	1a21      	subs	r1, r4, r0
 801f3f6:	4628      	mov	r0, r5
 801f3f8:	f001 fe8c 	bl	8021114 <_sbrk_r>
 801f3fc:	3001      	adds	r0, #1
 801f3fe:	d1f2      	bne.n	801f3e6 <sbrk_aligned+0x22>
 801f400:	e7ef      	b.n	801f3e2 <sbrk_aligned+0x1e>
 801f402:	bf00      	nop
 801f404:	20012954 	.word	0x20012954

0801f408 <_malloc_r>:
 801f408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f40c:	1ccd      	adds	r5, r1, #3
 801f40e:	f025 0503 	bic.w	r5, r5, #3
 801f412:	3508      	adds	r5, #8
 801f414:	2d0c      	cmp	r5, #12
 801f416:	bf38      	it	cc
 801f418:	250c      	movcc	r5, #12
 801f41a:	2d00      	cmp	r5, #0
 801f41c:	4606      	mov	r6, r0
 801f41e:	db01      	blt.n	801f424 <_malloc_r+0x1c>
 801f420:	42a9      	cmp	r1, r5
 801f422:	d904      	bls.n	801f42e <_malloc_r+0x26>
 801f424:	230c      	movs	r3, #12
 801f426:	6033      	str	r3, [r6, #0]
 801f428:	2000      	movs	r0, #0
 801f42a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f42e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801f504 <_malloc_r+0xfc>
 801f432:	f000 f869 	bl	801f508 <__malloc_lock>
 801f436:	f8d8 3000 	ldr.w	r3, [r8]
 801f43a:	461c      	mov	r4, r3
 801f43c:	bb44      	cbnz	r4, 801f490 <_malloc_r+0x88>
 801f43e:	4629      	mov	r1, r5
 801f440:	4630      	mov	r0, r6
 801f442:	f7ff ffbf 	bl	801f3c4 <sbrk_aligned>
 801f446:	1c43      	adds	r3, r0, #1
 801f448:	4604      	mov	r4, r0
 801f44a:	d158      	bne.n	801f4fe <_malloc_r+0xf6>
 801f44c:	f8d8 4000 	ldr.w	r4, [r8]
 801f450:	4627      	mov	r7, r4
 801f452:	2f00      	cmp	r7, #0
 801f454:	d143      	bne.n	801f4de <_malloc_r+0xd6>
 801f456:	2c00      	cmp	r4, #0
 801f458:	d04b      	beq.n	801f4f2 <_malloc_r+0xea>
 801f45a:	6823      	ldr	r3, [r4, #0]
 801f45c:	4639      	mov	r1, r7
 801f45e:	4630      	mov	r0, r6
 801f460:	eb04 0903 	add.w	r9, r4, r3
 801f464:	f001 fe56 	bl	8021114 <_sbrk_r>
 801f468:	4581      	cmp	r9, r0
 801f46a:	d142      	bne.n	801f4f2 <_malloc_r+0xea>
 801f46c:	6821      	ldr	r1, [r4, #0]
 801f46e:	1a6d      	subs	r5, r5, r1
 801f470:	4629      	mov	r1, r5
 801f472:	4630      	mov	r0, r6
 801f474:	f7ff ffa6 	bl	801f3c4 <sbrk_aligned>
 801f478:	3001      	adds	r0, #1
 801f47a:	d03a      	beq.n	801f4f2 <_malloc_r+0xea>
 801f47c:	6823      	ldr	r3, [r4, #0]
 801f47e:	442b      	add	r3, r5
 801f480:	6023      	str	r3, [r4, #0]
 801f482:	f8d8 3000 	ldr.w	r3, [r8]
 801f486:	685a      	ldr	r2, [r3, #4]
 801f488:	bb62      	cbnz	r2, 801f4e4 <_malloc_r+0xdc>
 801f48a:	f8c8 7000 	str.w	r7, [r8]
 801f48e:	e00f      	b.n	801f4b0 <_malloc_r+0xa8>
 801f490:	6822      	ldr	r2, [r4, #0]
 801f492:	1b52      	subs	r2, r2, r5
 801f494:	d420      	bmi.n	801f4d8 <_malloc_r+0xd0>
 801f496:	2a0b      	cmp	r2, #11
 801f498:	d917      	bls.n	801f4ca <_malloc_r+0xc2>
 801f49a:	1961      	adds	r1, r4, r5
 801f49c:	42a3      	cmp	r3, r4
 801f49e:	6025      	str	r5, [r4, #0]
 801f4a0:	bf18      	it	ne
 801f4a2:	6059      	strne	r1, [r3, #4]
 801f4a4:	6863      	ldr	r3, [r4, #4]
 801f4a6:	bf08      	it	eq
 801f4a8:	f8c8 1000 	streq.w	r1, [r8]
 801f4ac:	5162      	str	r2, [r4, r5]
 801f4ae:	604b      	str	r3, [r1, #4]
 801f4b0:	4630      	mov	r0, r6
 801f4b2:	f000 f82f 	bl	801f514 <__malloc_unlock>
 801f4b6:	f104 000b 	add.w	r0, r4, #11
 801f4ba:	1d23      	adds	r3, r4, #4
 801f4bc:	f020 0007 	bic.w	r0, r0, #7
 801f4c0:	1ac2      	subs	r2, r0, r3
 801f4c2:	bf1c      	itt	ne
 801f4c4:	1a1b      	subne	r3, r3, r0
 801f4c6:	50a3      	strne	r3, [r4, r2]
 801f4c8:	e7af      	b.n	801f42a <_malloc_r+0x22>
 801f4ca:	6862      	ldr	r2, [r4, #4]
 801f4cc:	42a3      	cmp	r3, r4
 801f4ce:	bf0c      	ite	eq
 801f4d0:	f8c8 2000 	streq.w	r2, [r8]
 801f4d4:	605a      	strne	r2, [r3, #4]
 801f4d6:	e7eb      	b.n	801f4b0 <_malloc_r+0xa8>
 801f4d8:	4623      	mov	r3, r4
 801f4da:	6864      	ldr	r4, [r4, #4]
 801f4dc:	e7ae      	b.n	801f43c <_malloc_r+0x34>
 801f4de:	463c      	mov	r4, r7
 801f4e0:	687f      	ldr	r7, [r7, #4]
 801f4e2:	e7b6      	b.n	801f452 <_malloc_r+0x4a>
 801f4e4:	461a      	mov	r2, r3
 801f4e6:	685b      	ldr	r3, [r3, #4]
 801f4e8:	42a3      	cmp	r3, r4
 801f4ea:	d1fb      	bne.n	801f4e4 <_malloc_r+0xdc>
 801f4ec:	2300      	movs	r3, #0
 801f4ee:	6053      	str	r3, [r2, #4]
 801f4f0:	e7de      	b.n	801f4b0 <_malloc_r+0xa8>
 801f4f2:	230c      	movs	r3, #12
 801f4f4:	6033      	str	r3, [r6, #0]
 801f4f6:	4630      	mov	r0, r6
 801f4f8:	f000 f80c 	bl	801f514 <__malloc_unlock>
 801f4fc:	e794      	b.n	801f428 <_malloc_r+0x20>
 801f4fe:	6005      	str	r5, [r0, #0]
 801f500:	e7d6      	b.n	801f4b0 <_malloc_r+0xa8>
 801f502:	bf00      	nop
 801f504:	20012958 	.word	0x20012958

0801f508 <__malloc_lock>:
 801f508:	4801      	ldr	r0, [pc, #4]	@ (801f510 <__malloc_lock+0x8>)
 801f50a:	f7ff b87e 	b.w	801e60a <__retarget_lock_acquire_recursive>
 801f50e:	bf00      	nop
 801f510:	20012950 	.word	0x20012950

0801f514 <__malloc_unlock>:
 801f514:	4801      	ldr	r0, [pc, #4]	@ (801f51c <__malloc_unlock+0x8>)
 801f516:	f7ff b879 	b.w	801e60c <__retarget_lock_release_recursive>
 801f51a:	bf00      	nop
 801f51c:	20012950 	.word	0x20012950

0801f520 <_Balloc>:
 801f520:	b570      	push	{r4, r5, r6, lr}
 801f522:	69c6      	ldr	r6, [r0, #28]
 801f524:	4604      	mov	r4, r0
 801f526:	460d      	mov	r5, r1
 801f528:	b976      	cbnz	r6, 801f548 <_Balloc+0x28>
 801f52a:	2010      	movs	r0, #16
 801f52c:	f7ff ff42 	bl	801f3b4 <malloc>
 801f530:	4602      	mov	r2, r0
 801f532:	61e0      	str	r0, [r4, #28]
 801f534:	b920      	cbnz	r0, 801f540 <_Balloc+0x20>
 801f536:	4b18      	ldr	r3, [pc, #96]	@ (801f598 <_Balloc+0x78>)
 801f538:	4818      	ldr	r0, [pc, #96]	@ (801f59c <_Balloc+0x7c>)
 801f53a:	216b      	movs	r1, #107	@ 0x6b
 801f53c:	f7ff f884 	bl	801e648 <__assert_func>
 801f540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f544:	6006      	str	r6, [r0, #0]
 801f546:	60c6      	str	r6, [r0, #12]
 801f548:	69e6      	ldr	r6, [r4, #28]
 801f54a:	68f3      	ldr	r3, [r6, #12]
 801f54c:	b183      	cbz	r3, 801f570 <_Balloc+0x50>
 801f54e:	69e3      	ldr	r3, [r4, #28]
 801f550:	68db      	ldr	r3, [r3, #12]
 801f552:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f556:	b9b8      	cbnz	r0, 801f588 <_Balloc+0x68>
 801f558:	2101      	movs	r1, #1
 801f55a:	fa01 f605 	lsl.w	r6, r1, r5
 801f55e:	1d72      	adds	r2, r6, #5
 801f560:	0092      	lsls	r2, r2, #2
 801f562:	4620      	mov	r0, r4
 801f564:	f001 fdf7 	bl	8021156 <_calloc_r>
 801f568:	b160      	cbz	r0, 801f584 <_Balloc+0x64>
 801f56a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801f56e:	e00e      	b.n	801f58e <_Balloc+0x6e>
 801f570:	2221      	movs	r2, #33	@ 0x21
 801f572:	2104      	movs	r1, #4
 801f574:	4620      	mov	r0, r4
 801f576:	f001 fdee 	bl	8021156 <_calloc_r>
 801f57a:	69e3      	ldr	r3, [r4, #28]
 801f57c:	60f0      	str	r0, [r6, #12]
 801f57e:	68db      	ldr	r3, [r3, #12]
 801f580:	2b00      	cmp	r3, #0
 801f582:	d1e4      	bne.n	801f54e <_Balloc+0x2e>
 801f584:	2000      	movs	r0, #0
 801f586:	bd70      	pop	{r4, r5, r6, pc}
 801f588:	6802      	ldr	r2, [r0, #0]
 801f58a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f58e:	2300      	movs	r3, #0
 801f590:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f594:	e7f7      	b.n	801f586 <_Balloc+0x66>
 801f596:	bf00      	nop
 801f598:	08025d86 	.word	0x08025d86
 801f59c:	08025fe1 	.word	0x08025fe1

0801f5a0 <_Bfree>:
 801f5a0:	b570      	push	{r4, r5, r6, lr}
 801f5a2:	69c6      	ldr	r6, [r0, #28]
 801f5a4:	4605      	mov	r5, r0
 801f5a6:	460c      	mov	r4, r1
 801f5a8:	b976      	cbnz	r6, 801f5c8 <_Bfree+0x28>
 801f5aa:	2010      	movs	r0, #16
 801f5ac:	f7ff ff02 	bl	801f3b4 <malloc>
 801f5b0:	4602      	mov	r2, r0
 801f5b2:	61e8      	str	r0, [r5, #28]
 801f5b4:	b920      	cbnz	r0, 801f5c0 <_Bfree+0x20>
 801f5b6:	4b09      	ldr	r3, [pc, #36]	@ (801f5dc <_Bfree+0x3c>)
 801f5b8:	4809      	ldr	r0, [pc, #36]	@ (801f5e0 <_Bfree+0x40>)
 801f5ba:	218f      	movs	r1, #143	@ 0x8f
 801f5bc:	f7ff f844 	bl	801e648 <__assert_func>
 801f5c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f5c4:	6006      	str	r6, [r0, #0]
 801f5c6:	60c6      	str	r6, [r0, #12]
 801f5c8:	b13c      	cbz	r4, 801f5da <_Bfree+0x3a>
 801f5ca:	69eb      	ldr	r3, [r5, #28]
 801f5cc:	6862      	ldr	r2, [r4, #4]
 801f5ce:	68db      	ldr	r3, [r3, #12]
 801f5d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f5d4:	6021      	str	r1, [r4, #0]
 801f5d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f5da:	bd70      	pop	{r4, r5, r6, pc}
 801f5dc:	08025d86 	.word	0x08025d86
 801f5e0:	08025fe1 	.word	0x08025fe1

0801f5e4 <__multadd>:
 801f5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f5e8:	690d      	ldr	r5, [r1, #16]
 801f5ea:	4607      	mov	r7, r0
 801f5ec:	460c      	mov	r4, r1
 801f5ee:	461e      	mov	r6, r3
 801f5f0:	f101 0c14 	add.w	ip, r1, #20
 801f5f4:	2000      	movs	r0, #0
 801f5f6:	f8dc 3000 	ldr.w	r3, [ip]
 801f5fa:	b299      	uxth	r1, r3
 801f5fc:	fb02 6101 	mla	r1, r2, r1, r6
 801f600:	0c1e      	lsrs	r6, r3, #16
 801f602:	0c0b      	lsrs	r3, r1, #16
 801f604:	fb02 3306 	mla	r3, r2, r6, r3
 801f608:	b289      	uxth	r1, r1
 801f60a:	3001      	adds	r0, #1
 801f60c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f610:	4285      	cmp	r5, r0
 801f612:	f84c 1b04 	str.w	r1, [ip], #4
 801f616:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f61a:	dcec      	bgt.n	801f5f6 <__multadd+0x12>
 801f61c:	b30e      	cbz	r6, 801f662 <__multadd+0x7e>
 801f61e:	68a3      	ldr	r3, [r4, #8]
 801f620:	42ab      	cmp	r3, r5
 801f622:	dc19      	bgt.n	801f658 <__multadd+0x74>
 801f624:	6861      	ldr	r1, [r4, #4]
 801f626:	4638      	mov	r0, r7
 801f628:	3101      	adds	r1, #1
 801f62a:	f7ff ff79 	bl	801f520 <_Balloc>
 801f62e:	4680      	mov	r8, r0
 801f630:	b928      	cbnz	r0, 801f63e <__multadd+0x5a>
 801f632:	4602      	mov	r2, r0
 801f634:	4b0c      	ldr	r3, [pc, #48]	@ (801f668 <__multadd+0x84>)
 801f636:	480d      	ldr	r0, [pc, #52]	@ (801f66c <__multadd+0x88>)
 801f638:	21ba      	movs	r1, #186	@ 0xba
 801f63a:	f7ff f805 	bl	801e648 <__assert_func>
 801f63e:	6922      	ldr	r2, [r4, #16]
 801f640:	3202      	adds	r2, #2
 801f642:	f104 010c 	add.w	r1, r4, #12
 801f646:	0092      	lsls	r2, r2, #2
 801f648:	300c      	adds	r0, #12
 801f64a:	f7fe ffe8 	bl	801e61e <memcpy>
 801f64e:	4621      	mov	r1, r4
 801f650:	4638      	mov	r0, r7
 801f652:	f7ff ffa5 	bl	801f5a0 <_Bfree>
 801f656:	4644      	mov	r4, r8
 801f658:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f65c:	3501      	adds	r5, #1
 801f65e:	615e      	str	r6, [r3, #20]
 801f660:	6125      	str	r5, [r4, #16]
 801f662:	4620      	mov	r0, r4
 801f664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f668:	08025fd0 	.word	0x08025fd0
 801f66c:	08025fe1 	.word	0x08025fe1

0801f670 <__s2b>:
 801f670:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f674:	460c      	mov	r4, r1
 801f676:	4615      	mov	r5, r2
 801f678:	461f      	mov	r7, r3
 801f67a:	2209      	movs	r2, #9
 801f67c:	3308      	adds	r3, #8
 801f67e:	4606      	mov	r6, r0
 801f680:	fb93 f3f2 	sdiv	r3, r3, r2
 801f684:	2100      	movs	r1, #0
 801f686:	2201      	movs	r2, #1
 801f688:	429a      	cmp	r2, r3
 801f68a:	db09      	blt.n	801f6a0 <__s2b+0x30>
 801f68c:	4630      	mov	r0, r6
 801f68e:	f7ff ff47 	bl	801f520 <_Balloc>
 801f692:	b940      	cbnz	r0, 801f6a6 <__s2b+0x36>
 801f694:	4602      	mov	r2, r0
 801f696:	4b19      	ldr	r3, [pc, #100]	@ (801f6fc <__s2b+0x8c>)
 801f698:	4819      	ldr	r0, [pc, #100]	@ (801f700 <__s2b+0x90>)
 801f69a:	21d3      	movs	r1, #211	@ 0xd3
 801f69c:	f7fe ffd4 	bl	801e648 <__assert_func>
 801f6a0:	0052      	lsls	r2, r2, #1
 801f6a2:	3101      	adds	r1, #1
 801f6a4:	e7f0      	b.n	801f688 <__s2b+0x18>
 801f6a6:	9b08      	ldr	r3, [sp, #32]
 801f6a8:	6143      	str	r3, [r0, #20]
 801f6aa:	2d09      	cmp	r5, #9
 801f6ac:	f04f 0301 	mov.w	r3, #1
 801f6b0:	6103      	str	r3, [r0, #16]
 801f6b2:	dd16      	ble.n	801f6e2 <__s2b+0x72>
 801f6b4:	f104 0909 	add.w	r9, r4, #9
 801f6b8:	46c8      	mov	r8, r9
 801f6ba:	442c      	add	r4, r5
 801f6bc:	f818 3b01 	ldrb.w	r3, [r8], #1
 801f6c0:	4601      	mov	r1, r0
 801f6c2:	3b30      	subs	r3, #48	@ 0x30
 801f6c4:	220a      	movs	r2, #10
 801f6c6:	4630      	mov	r0, r6
 801f6c8:	f7ff ff8c 	bl	801f5e4 <__multadd>
 801f6cc:	45a0      	cmp	r8, r4
 801f6ce:	d1f5      	bne.n	801f6bc <__s2b+0x4c>
 801f6d0:	f1a5 0408 	sub.w	r4, r5, #8
 801f6d4:	444c      	add	r4, r9
 801f6d6:	1b2d      	subs	r5, r5, r4
 801f6d8:	1963      	adds	r3, r4, r5
 801f6da:	42bb      	cmp	r3, r7
 801f6dc:	db04      	blt.n	801f6e8 <__s2b+0x78>
 801f6de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f6e2:	340a      	adds	r4, #10
 801f6e4:	2509      	movs	r5, #9
 801f6e6:	e7f6      	b.n	801f6d6 <__s2b+0x66>
 801f6e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f6ec:	4601      	mov	r1, r0
 801f6ee:	3b30      	subs	r3, #48	@ 0x30
 801f6f0:	220a      	movs	r2, #10
 801f6f2:	4630      	mov	r0, r6
 801f6f4:	f7ff ff76 	bl	801f5e4 <__multadd>
 801f6f8:	e7ee      	b.n	801f6d8 <__s2b+0x68>
 801f6fa:	bf00      	nop
 801f6fc:	08025fd0 	.word	0x08025fd0
 801f700:	08025fe1 	.word	0x08025fe1

0801f704 <__hi0bits>:
 801f704:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801f708:	4603      	mov	r3, r0
 801f70a:	bf36      	itet	cc
 801f70c:	0403      	lslcc	r3, r0, #16
 801f70e:	2000      	movcs	r0, #0
 801f710:	2010      	movcc	r0, #16
 801f712:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801f716:	bf3c      	itt	cc
 801f718:	021b      	lslcc	r3, r3, #8
 801f71a:	3008      	addcc	r0, #8
 801f71c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f720:	bf3c      	itt	cc
 801f722:	011b      	lslcc	r3, r3, #4
 801f724:	3004      	addcc	r0, #4
 801f726:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f72a:	bf3c      	itt	cc
 801f72c:	009b      	lslcc	r3, r3, #2
 801f72e:	3002      	addcc	r0, #2
 801f730:	2b00      	cmp	r3, #0
 801f732:	db05      	blt.n	801f740 <__hi0bits+0x3c>
 801f734:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801f738:	f100 0001 	add.w	r0, r0, #1
 801f73c:	bf08      	it	eq
 801f73e:	2020      	moveq	r0, #32
 801f740:	4770      	bx	lr

0801f742 <__lo0bits>:
 801f742:	6803      	ldr	r3, [r0, #0]
 801f744:	4602      	mov	r2, r0
 801f746:	f013 0007 	ands.w	r0, r3, #7
 801f74a:	d00b      	beq.n	801f764 <__lo0bits+0x22>
 801f74c:	07d9      	lsls	r1, r3, #31
 801f74e:	d421      	bmi.n	801f794 <__lo0bits+0x52>
 801f750:	0798      	lsls	r0, r3, #30
 801f752:	bf49      	itett	mi
 801f754:	085b      	lsrmi	r3, r3, #1
 801f756:	089b      	lsrpl	r3, r3, #2
 801f758:	2001      	movmi	r0, #1
 801f75a:	6013      	strmi	r3, [r2, #0]
 801f75c:	bf5c      	itt	pl
 801f75e:	6013      	strpl	r3, [r2, #0]
 801f760:	2002      	movpl	r0, #2
 801f762:	4770      	bx	lr
 801f764:	b299      	uxth	r1, r3
 801f766:	b909      	cbnz	r1, 801f76c <__lo0bits+0x2a>
 801f768:	0c1b      	lsrs	r3, r3, #16
 801f76a:	2010      	movs	r0, #16
 801f76c:	b2d9      	uxtb	r1, r3
 801f76e:	b909      	cbnz	r1, 801f774 <__lo0bits+0x32>
 801f770:	3008      	adds	r0, #8
 801f772:	0a1b      	lsrs	r3, r3, #8
 801f774:	0719      	lsls	r1, r3, #28
 801f776:	bf04      	itt	eq
 801f778:	091b      	lsreq	r3, r3, #4
 801f77a:	3004      	addeq	r0, #4
 801f77c:	0799      	lsls	r1, r3, #30
 801f77e:	bf04      	itt	eq
 801f780:	089b      	lsreq	r3, r3, #2
 801f782:	3002      	addeq	r0, #2
 801f784:	07d9      	lsls	r1, r3, #31
 801f786:	d403      	bmi.n	801f790 <__lo0bits+0x4e>
 801f788:	085b      	lsrs	r3, r3, #1
 801f78a:	f100 0001 	add.w	r0, r0, #1
 801f78e:	d003      	beq.n	801f798 <__lo0bits+0x56>
 801f790:	6013      	str	r3, [r2, #0]
 801f792:	4770      	bx	lr
 801f794:	2000      	movs	r0, #0
 801f796:	4770      	bx	lr
 801f798:	2020      	movs	r0, #32
 801f79a:	4770      	bx	lr

0801f79c <__i2b>:
 801f79c:	b510      	push	{r4, lr}
 801f79e:	460c      	mov	r4, r1
 801f7a0:	2101      	movs	r1, #1
 801f7a2:	f7ff febd 	bl	801f520 <_Balloc>
 801f7a6:	4602      	mov	r2, r0
 801f7a8:	b928      	cbnz	r0, 801f7b6 <__i2b+0x1a>
 801f7aa:	4b05      	ldr	r3, [pc, #20]	@ (801f7c0 <__i2b+0x24>)
 801f7ac:	4805      	ldr	r0, [pc, #20]	@ (801f7c4 <__i2b+0x28>)
 801f7ae:	f240 1145 	movw	r1, #325	@ 0x145
 801f7b2:	f7fe ff49 	bl	801e648 <__assert_func>
 801f7b6:	2301      	movs	r3, #1
 801f7b8:	6144      	str	r4, [r0, #20]
 801f7ba:	6103      	str	r3, [r0, #16]
 801f7bc:	bd10      	pop	{r4, pc}
 801f7be:	bf00      	nop
 801f7c0:	08025fd0 	.word	0x08025fd0
 801f7c4:	08025fe1 	.word	0x08025fe1

0801f7c8 <__multiply>:
 801f7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f7cc:	4614      	mov	r4, r2
 801f7ce:	690a      	ldr	r2, [r1, #16]
 801f7d0:	6923      	ldr	r3, [r4, #16]
 801f7d2:	429a      	cmp	r2, r3
 801f7d4:	bfa8      	it	ge
 801f7d6:	4623      	movge	r3, r4
 801f7d8:	460f      	mov	r7, r1
 801f7da:	bfa4      	itt	ge
 801f7dc:	460c      	movge	r4, r1
 801f7de:	461f      	movge	r7, r3
 801f7e0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801f7e4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801f7e8:	68a3      	ldr	r3, [r4, #8]
 801f7ea:	6861      	ldr	r1, [r4, #4]
 801f7ec:	eb0a 0609 	add.w	r6, sl, r9
 801f7f0:	42b3      	cmp	r3, r6
 801f7f2:	b085      	sub	sp, #20
 801f7f4:	bfb8      	it	lt
 801f7f6:	3101      	addlt	r1, #1
 801f7f8:	f7ff fe92 	bl	801f520 <_Balloc>
 801f7fc:	b930      	cbnz	r0, 801f80c <__multiply+0x44>
 801f7fe:	4602      	mov	r2, r0
 801f800:	4b44      	ldr	r3, [pc, #272]	@ (801f914 <__multiply+0x14c>)
 801f802:	4845      	ldr	r0, [pc, #276]	@ (801f918 <__multiply+0x150>)
 801f804:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801f808:	f7fe ff1e 	bl	801e648 <__assert_func>
 801f80c:	f100 0514 	add.w	r5, r0, #20
 801f810:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f814:	462b      	mov	r3, r5
 801f816:	2200      	movs	r2, #0
 801f818:	4543      	cmp	r3, r8
 801f81a:	d321      	bcc.n	801f860 <__multiply+0x98>
 801f81c:	f107 0114 	add.w	r1, r7, #20
 801f820:	f104 0214 	add.w	r2, r4, #20
 801f824:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801f828:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801f82c:	9302      	str	r3, [sp, #8]
 801f82e:	1b13      	subs	r3, r2, r4
 801f830:	3b15      	subs	r3, #21
 801f832:	f023 0303 	bic.w	r3, r3, #3
 801f836:	3304      	adds	r3, #4
 801f838:	f104 0715 	add.w	r7, r4, #21
 801f83c:	42ba      	cmp	r2, r7
 801f83e:	bf38      	it	cc
 801f840:	2304      	movcc	r3, #4
 801f842:	9301      	str	r3, [sp, #4]
 801f844:	9b02      	ldr	r3, [sp, #8]
 801f846:	9103      	str	r1, [sp, #12]
 801f848:	428b      	cmp	r3, r1
 801f84a:	d80c      	bhi.n	801f866 <__multiply+0x9e>
 801f84c:	2e00      	cmp	r6, #0
 801f84e:	dd03      	ble.n	801f858 <__multiply+0x90>
 801f850:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f854:	2b00      	cmp	r3, #0
 801f856:	d05b      	beq.n	801f910 <__multiply+0x148>
 801f858:	6106      	str	r6, [r0, #16]
 801f85a:	b005      	add	sp, #20
 801f85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f860:	f843 2b04 	str.w	r2, [r3], #4
 801f864:	e7d8      	b.n	801f818 <__multiply+0x50>
 801f866:	f8b1 a000 	ldrh.w	sl, [r1]
 801f86a:	f1ba 0f00 	cmp.w	sl, #0
 801f86e:	d024      	beq.n	801f8ba <__multiply+0xf2>
 801f870:	f104 0e14 	add.w	lr, r4, #20
 801f874:	46a9      	mov	r9, r5
 801f876:	f04f 0c00 	mov.w	ip, #0
 801f87a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f87e:	f8d9 3000 	ldr.w	r3, [r9]
 801f882:	fa1f fb87 	uxth.w	fp, r7
 801f886:	b29b      	uxth	r3, r3
 801f888:	fb0a 330b 	mla	r3, sl, fp, r3
 801f88c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801f890:	f8d9 7000 	ldr.w	r7, [r9]
 801f894:	4463      	add	r3, ip
 801f896:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f89a:	fb0a c70b 	mla	r7, sl, fp, ip
 801f89e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801f8a2:	b29b      	uxth	r3, r3
 801f8a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f8a8:	4572      	cmp	r2, lr
 801f8aa:	f849 3b04 	str.w	r3, [r9], #4
 801f8ae:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f8b2:	d8e2      	bhi.n	801f87a <__multiply+0xb2>
 801f8b4:	9b01      	ldr	r3, [sp, #4]
 801f8b6:	f845 c003 	str.w	ip, [r5, r3]
 801f8ba:	9b03      	ldr	r3, [sp, #12]
 801f8bc:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801f8c0:	3104      	adds	r1, #4
 801f8c2:	f1b9 0f00 	cmp.w	r9, #0
 801f8c6:	d021      	beq.n	801f90c <__multiply+0x144>
 801f8c8:	682b      	ldr	r3, [r5, #0]
 801f8ca:	f104 0c14 	add.w	ip, r4, #20
 801f8ce:	46ae      	mov	lr, r5
 801f8d0:	f04f 0a00 	mov.w	sl, #0
 801f8d4:	f8bc b000 	ldrh.w	fp, [ip]
 801f8d8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801f8dc:	fb09 770b 	mla	r7, r9, fp, r7
 801f8e0:	4457      	add	r7, sl
 801f8e2:	b29b      	uxth	r3, r3
 801f8e4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f8e8:	f84e 3b04 	str.w	r3, [lr], #4
 801f8ec:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f8f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f8f4:	f8be 3000 	ldrh.w	r3, [lr]
 801f8f8:	fb09 330a 	mla	r3, r9, sl, r3
 801f8fc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801f900:	4562      	cmp	r2, ip
 801f902:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f906:	d8e5      	bhi.n	801f8d4 <__multiply+0x10c>
 801f908:	9f01      	ldr	r7, [sp, #4]
 801f90a:	51eb      	str	r3, [r5, r7]
 801f90c:	3504      	adds	r5, #4
 801f90e:	e799      	b.n	801f844 <__multiply+0x7c>
 801f910:	3e01      	subs	r6, #1
 801f912:	e79b      	b.n	801f84c <__multiply+0x84>
 801f914:	08025fd0 	.word	0x08025fd0
 801f918:	08025fe1 	.word	0x08025fe1

0801f91c <__pow5mult>:
 801f91c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f920:	4615      	mov	r5, r2
 801f922:	f012 0203 	ands.w	r2, r2, #3
 801f926:	4607      	mov	r7, r0
 801f928:	460e      	mov	r6, r1
 801f92a:	d007      	beq.n	801f93c <__pow5mult+0x20>
 801f92c:	4c25      	ldr	r4, [pc, #148]	@ (801f9c4 <__pow5mult+0xa8>)
 801f92e:	3a01      	subs	r2, #1
 801f930:	2300      	movs	r3, #0
 801f932:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f936:	f7ff fe55 	bl	801f5e4 <__multadd>
 801f93a:	4606      	mov	r6, r0
 801f93c:	10ad      	asrs	r5, r5, #2
 801f93e:	d03d      	beq.n	801f9bc <__pow5mult+0xa0>
 801f940:	69fc      	ldr	r4, [r7, #28]
 801f942:	b97c      	cbnz	r4, 801f964 <__pow5mult+0x48>
 801f944:	2010      	movs	r0, #16
 801f946:	f7ff fd35 	bl	801f3b4 <malloc>
 801f94a:	4602      	mov	r2, r0
 801f94c:	61f8      	str	r0, [r7, #28]
 801f94e:	b928      	cbnz	r0, 801f95c <__pow5mult+0x40>
 801f950:	4b1d      	ldr	r3, [pc, #116]	@ (801f9c8 <__pow5mult+0xac>)
 801f952:	481e      	ldr	r0, [pc, #120]	@ (801f9cc <__pow5mult+0xb0>)
 801f954:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801f958:	f7fe fe76 	bl	801e648 <__assert_func>
 801f95c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f960:	6004      	str	r4, [r0, #0]
 801f962:	60c4      	str	r4, [r0, #12]
 801f964:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801f968:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f96c:	b94c      	cbnz	r4, 801f982 <__pow5mult+0x66>
 801f96e:	f240 2171 	movw	r1, #625	@ 0x271
 801f972:	4638      	mov	r0, r7
 801f974:	f7ff ff12 	bl	801f79c <__i2b>
 801f978:	2300      	movs	r3, #0
 801f97a:	f8c8 0008 	str.w	r0, [r8, #8]
 801f97e:	4604      	mov	r4, r0
 801f980:	6003      	str	r3, [r0, #0]
 801f982:	f04f 0900 	mov.w	r9, #0
 801f986:	07eb      	lsls	r3, r5, #31
 801f988:	d50a      	bpl.n	801f9a0 <__pow5mult+0x84>
 801f98a:	4631      	mov	r1, r6
 801f98c:	4622      	mov	r2, r4
 801f98e:	4638      	mov	r0, r7
 801f990:	f7ff ff1a 	bl	801f7c8 <__multiply>
 801f994:	4631      	mov	r1, r6
 801f996:	4680      	mov	r8, r0
 801f998:	4638      	mov	r0, r7
 801f99a:	f7ff fe01 	bl	801f5a0 <_Bfree>
 801f99e:	4646      	mov	r6, r8
 801f9a0:	106d      	asrs	r5, r5, #1
 801f9a2:	d00b      	beq.n	801f9bc <__pow5mult+0xa0>
 801f9a4:	6820      	ldr	r0, [r4, #0]
 801f9a6:	b938      	cbnz	r0, 801f9b8 <__pow5mult+0x9c>
 801f9a8:	4622      	mov	r2, r4
 801f9aa:	4621      	mov	r1, r4
 801f9ac:	4638      	mov	r0, r7
 801f9ae:	f7ff ff0b 	bl	801f7c8 <__multiply>
 801f9b2:	6020      	str	r0, [r4, #0]
 801f9b4:	f8c0 9000 	str.w	r9, [r0]
 801f9b8:	4604      	mov	r4, r0
 801f9ba:	e7e4      	b.n	801f986 <__pow5mult+0x6a>
 801f9bc:	4630      	mov	r0, r6
 801f9be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f9c2:	bf00      	nop
 801f9c4:	0802603c 	.word	0x0802603c
 801f9c8:	08025d86 	.word	0x08025d86
 801f9cc:	08025fe1 	.word	0x08025fe1

0801f9d0 <__lshift>:
 801f9d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f9d4:	460c      	mov	r4, r1
 801f9d6:	6849      	ldr	r1, [r1, #4]
 801f9d8:	6923      	ldr	r3, [r4, #16]
 801f9da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f9de:	68a3      	ldr	r3, [r4, #8]
 801f9e0:	4607      	mov	r7, r0
 801f9e2:	4691      	mov	r9, r2
 801f9e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f9e8:	f108 0601 	add.w	r6, r8, #1
 801f9ec:	42b3      	cmp	r3, r6
 801f9ee:	db0b      	blt.n	801fa08 <__lshift+0x38>
 801f9f0:	4638      	mov	r0, r7
 801f9f2:	f7ff fd95 	bl	801f520 <_Balloc>
 801f9f6:	4605      	mov	r5, r0
 801f9f8:	b948      	cbnz	r0, 801fa0e <__lshift+0x3e>
 801f9fa:	4602      	mov	r2, r0
 801f9fc:	4b28      	ldr	r3, [pc, #160]	@ (801faa0 <__lshift+0xd0>)
 801f9fe:	4829      	ldr	r0, [pc, #164]	@ (801faa4 <__lshift+0xd4>)
 801fa00:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801fa04:	f7fe fe20 	bl	801e648 <__assert_func>
 801fa08:	3101      	adds	r1, #1
 801fa0a:	005b      	lsls	r3, r3, #1
 801fa0c:	e7ee      	b.n	801f9ec <__lshift+0x1c>
 801fa0e:	2300      	movs	r3, #0
 801fa10:	f100 0114 	add.w	r1, r0, #20
 801fa14:	f100 0210 	add.w	r2, r0, #16
 801fa18:	4618      	mov	r0, r3
 801fa1a:	4553      	cmp	r3, sl
 801fa1c:	db33      	blt.n	801fa86 <__lshift+0xb6>
 801fa1e:	6920      	ldr	r0, [r4, #16]
 801fa20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801fa24:	f104 0314 	add.w	r3, r4, #20
 801fa28:	f019 091f 	ands.w	r9, r9, #31
 801fa2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801fa30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801fa34:	d02b      	beq.n	801fa8e <__lshift+0xbe>
 801fa36:	f1c9 0e20 	rsb	lr, r9, #32
 801fa3a:	468a      	mov	sl, r1
 801fa3c:	2200      	movs	r2, #0
 801fa3e:	6818      	ldr	r0, [r3, #0]
 801fa40:	fa00 f009 	lsl.w	r0, r0, r9
 801fa44:	4310      	orrs	r0, r2
 801fa46:	f84a 0b04 	str.w	r0, [sl], #4
 801fa4a:	f853 2b04 	ldr.w	r2, [r3], #4
 801fa4e:	459c      	cmp	ip, r3
 801fa50:	fa22 f20e 	lsr.w	r2, r2, lr
 801fa54:	d8f3      	bhi.n	801fa3e <__lshift+0x6e>
 801fa56:	ebac 0304 	sub.w	r3, ip, r4
 801fa5a:	3b15      	subs	r3, #21
 801fa5c:	f023 0303 	bic.w	r3, r3, #3
 801fa60:	3304      	adds	r3, #4
 801fa62:	f104 0015 	add.w	r0, r4, #21
 801fa66:	4584      	cmp	ip, r0
 801fa68:	bf38      	it	cc
 801fa6a:	2304      	movcc	r3, #4
 801fa6c:	50ca      	str	r2, [r1, r3]
 801fa6e:	b10a      	cbz	r2, 801fa74 <__lshift+0xa4>
 801fa70:	f108 0602 	add.w	r6, r8, #2
 801fa74:	3e01      	subs	r6, #1
 801fa76:	4638      	mov	r0, r7
 801fa78:	612e      	str	r6, [r5, #16]
 801fa7a:	4621      	mov	r1, r4
 801fa7c:	f7ff fd90 	bl	801f5a0 <_Bfree>
 801fa80:	4628      	mov	r0, r5
 801fa82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fa86:	f842 0f04 	str.w	r0, [r2, #4]!
 801fa8a:	3301      	adds	r3, #1
 801fa8c:	e7c5      	b.n	801fa1a <__lshift+0x4a>
 801fa8e:	3904      	subs	r1, #4
 801fa90:	f853 2b04 	ldr.w	r2, [r3], #4
 801fa94:	f841 2f04 	str.w	r2, [r1, #4]!
 801fa98:	459c      	cmp	ip, r3
 801fa9a:	d8f9      	bhi.n	801fa90 <__lshift+0xc0>
 801fa9c:	e7ea      	b.n	801fa74 <__lshift+0xa4>
 801fa9e:	bf00      	nop
 801faa0:	08025fd0 	.word	0x08025fd0
 801faa4:	08025fe1 	.word	0x08025fe1

0801faa8 <__mcmp>:
 801faa8:	690a      	ldr	r2, [r1, #16]
 801faaa:	4603      	mov	r3, r0
 801faac:	6900      	ldr	r0, [r0, #16]
 801faae:	1a80      	subs	r0, r0, r2
 801fab0:	b530      	push	{r4, r5, lr}
 801fab2:	d10e      	bne.n	801fad2 <__mcmp+0x2a>
 801fab4:	3314      	adds	r3, #20
 801fab6:	3114      	adds	r1, #20
 801fab8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801fabc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801fac0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801fac4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801fac8:	4295      	cmp	r5, r2
 801faca:	d003      	beq.n	801fad4 <__mcmp+0x2c>
 801facc:	d205      	bcs.n	801fada <__mcmp+0x32>
 801face:	f04f 30ff 	mov.w	r0, #4294967295
 801fad2:	bd30      	pop	{r4, r5, pc}
 801fad4:	42a3      	cmp	r3, r4
 801fad6:	d3f3      	bcc.n	801fac0 <__mcmp+0x18>
 801fad8:	e7fb      	b.n	801fad2 <__mcmp+0x2a>
 801fada:	2001      	movs	r0, #1
 801fadc:	e7f9      	b.n	801fad2 <__mcmp+0x2a>
	...

0801fae0 <__mdiff>:
 801fae0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fae4:	4689      	mov	r9, r1
 801fae6:	4606      	mov	r6, r0
 801fae8:	4611      	mov	r1, r2
 801faea:	4648      	mov	r0, r9
 801faec:	4614      	mov	r4, r2
 801faee:	f7ff ffdb 	bl	801faa8 <__mcmp>
 801faf2:	1e05      	subs	r5, r0, #0
 801faf4:	d112      	bne.n	801fb1c <__mdiff+0x3c>
 801faf6:	4629      	mov	r1, r5
 801faf8:	4630      	mov	r0, r6
 801fafa:	f7ff fd11 	bl	801f520 <_Balloc>
 801fafe:	4602      	mov	r2, r0
 801fb00:	b928      	cbnz	r0, 801fb0e <__mdiff+0x2e>
 801fb02:	4b3f      	ldr	r3, [pc, #252]	@ (801fc00 <__mdiff+0x120>)
 801fb04:	f240 2137 	movw	r1, #567	@ 0x237
 801fb08:	483e      	ldr	r0, [pc, #248]	@ (801fc04 <__mdiff+0x124>)
 801fb0a:	f7fe fd9d 	bl	801e648 <__assert_func>
 801fb0e:	2301      	movs	r3, #1
 801fb10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801fb14:	4610      	mov	r0, r2
 801fb16:	b003      	add	sp, #12
 801fb18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fb1c:	bfbc      	itt	lt
 801fb1e:	464b      	movlt	r3, r9
 801fb20:	46a1      	movlt	r9, r4
 801fb22:	4630      	mov	r0, r6
 801fb24:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801fb28:	bfba      	itte	lt
 801fb2a:	461c      	movlt	r4, r3
 801fb2c:	2501      	movlt	r5, #1
 801fb2e:	2500      	movge	r5, #0
 801fb30:	f7ff fcf6 	bl	801f520 <_Balloc>
 801fb34:	4602      	mov	r2, r0
 801fb36:	b918      	cbnz	r0, 801fb40 <__mdiff+0x60>
 801fb38:	4b31      	ldr	r3, [pc, #196]	@ (801fc00 <__mdiff+0x120>)
 801fb3a:	f240 2145 	movw	r1, #581	@ 0x245
 801fb3e:	e7e3      	b.n	801fb08 <__mdiff+0x28>
 801fb40:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801fb44:	6926      	ldr	r6, [r4, #16]
 801fb46:	60c5      	str	r5, [r0, #12]
 801fb48:	f109 0310 	add.w	r3, r9, #16
 801fb4c:	f109 0514 	add.w	r5, r9, #20
 801fb50:	f104 0e14 	add.w	lr, r4, #20
 801fb54:	f100 0b14 	add.w	fp, r0, #20
 801fb58:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801fb5c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801fb60:	9301      	str	r3, [sp, #4]
 801fb62:	46d9      	mov	r9, fp
 801fb64:	f04f 0c00 	mov.w	ip, #0
 801fb68:	9b01      	ldr	r3, [sp, #4]
 801fb6a:	f85e 0b04 	ldr.w	r0, [lr], #4
 801fb6e:	f853 af04 	ldr.w	sl, [r3, #4]!
 801fb72:	9301      	str	r3, [sp, #4]
 801fb74:	fa1f f38a 	uxth.w	r3, sl
 801fb78:	4619      	mov	r1, r3
 801fb7a:	b283      	uxth	r3, r0
 801fb7c:	1acb      	subs	r3, r1, r3
 801fb7e:	0c00      	lsrs	r0, r0, #16
 801fb80:	4463      	add	r3, ip
 801fb82:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801fb86:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801fb8a:	b29b      	uxth	r3, r3
 801fb8c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801fb90:	4576      	cmp	r6, lr
 801fb92:	f849 3b04 	str.w	r3, [r9], #4
 801fb96:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801fb9a:	d8e5      	bhi.n	801fb68 <__mdiff+0x88>
 801fb9c:	1b33      	subs	r3, r6, r4
 801fb9e:	3b15      	subs	r3, #21
 801fba0:	f023 0303 	bic.w	r3, r3, #3
 801fba4:	3415      	adds	r4, #21
 801fba6:	3304      	adds	r3, #4
 801fba8:	42a6      	cmp	r6, r4
 801fbaa:	bf38      	it	cc
 801fbac:	2304      	movcc	r3, #4
 801fbae:	441d      	add	r5, r3
 801fbb0:	445b      	add	r3, fp
 801fbb2:	461e      	mov	r6, r3
 801fbb4:	462c      	mov	r4, r5
 801fbb6:	4544      	cmp	r4, r8
 801fbb8:	d30e      	bcc.n	801fbd8 <__mdiff+0xf8>
 801fbba:	f108 0103 	add.w	r1, r8, #3
 801fbbe:	1b49      	subs	r1, r1, r5
 801fbc0:	f021 0103 	bic.w	r1, r1, #3
 801fbc4:	3d03      	subs	r5, #3
 801fbc6:	45a8      	cmp	r8, r5
 801fbc8:	bf38      	it	cc
 801fbca:	2100      	movcc	r1, #0
 801fbcc:	440b      	add	r3, r1
 801fbce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801fbd2:	b191      	cbz	r1, 801fbfa <__mdiff+0x11a>
 801fbd4:	6117      	str	r7, [r2, #16]
 801fbd6:	e79d      	b.n	801fb14 <__mdiff+0x34>
 801fbd8:	f854 1b04 	ldr.w	r1, [r4], #4
 801fbdc:	46e6      	mov	lr, ip
 801fbde:	0c08      	lsrs	r0, r1, #16
 801fbe0:	fa1c fc81 	uxtah	ip, ip, r1
 801fbe4:	4471      	add	r1, lr
 801fbe6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801fbea:	b289      	uxth	r1, r1
 801fbec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801fbf0:	f846 1b04 	str.w	r1, [r6], #4
 801fbf4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801fbf8:	e7dd      	b.n	801fbb6 <__mdiff+0xd6>
 801fbfa:	3f01      	subs	r7, #1
 801fbfc:	e7e7      	b.n	801fbce <__mdiff+0xee>
 801fbfe:	bf00      	nop
 801fc00:	08025fd0 	.word	0x08025fd0
 801fc04:	08025fe1 	.word	0x08025fe1

0801fc08 <__ulp>:
 801fc08:	b082      	sub	sp, #8
 801fc0a:	ed8d 0b00 	vstr	d0, [sp]
 801fc0e:	9a01      	ldr	r2, [sp, #4]
 801fc10:	4b0f      	ldr	r3, [pc, #60]	@ (801fc50 <__ulp+0x48>)
 801fc12:	4013      	ands	r3, r2
 801fc14:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801fc18:	2b00      	cmp	r3, #0
 801fc1a:	dc08      	bgt.n	801fc2e <__ulp+0x26>
 801fc1c:	425b      	negs	r3, r3
 801fc1e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801fc22:	ea4f 5223 	mov.w	r2, r3, asr #20
 801fc26:	da04      	bge.n	801fc32 <__ulp+0x2a>
 801fc28:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801fc2c:	4113      	asrs	r3, r2
 801fc2e:	2200      	movs	r2, #0
 801fc30:	e008      	b.n	801fc44 <__ulp+0x3c>
 801fc32:	f1a2 0314 	sub.w	r3, r2, #20
 801fc36:	2b1e      	cmp	r3, #30
 801fc38:	bfda      	itte	le
 801fc3a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801fc3e:	40da      	lsrle	r2, r3
 801fc40:	2201      	movgt	r2, #1
 801fc42:	2300      	movs	r3, #0
 801fc44:	4619      	mov	r1, r3
 801fc46:	4610      	mov	r0, r2
 801fc48:	ec41 0b10 	vmov	d0, r0, r1
 801fc4c:	b002      	add	sp, #8
 801fc4e:	4770      	bx	lr
 801fc50:	7ff00000 	.word	0x7ff00000

0801fc54 <__b2d>:
 801fc54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fc58:	6906      	ldr	r6, [r0, #16]
 801fc5a:	f100 0814 	add.w	r8, r0, #20
 801fc5e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801fc62:	1f37      	subs	r7, r6, #4
 801fc64:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801fc68:	4610      	mov	r0, r2
 801fc6a:	f7ff fd4b 	bl	801f704 <__hi0bits>
 801fc6e:	f1c0 0320 	rsb	r3, r0, #32
 801fc72:	280a      	cmp	r0, #10
 801fc74:	600b      	str	r3, [r1, #0]
 801fc76:	491b      	ldr	r1, [pc, #108]	@ (801fce4 <__b2d+0x90>)
 801fc78:	dc15      	bgt.n	801fca6 <__b2d+0x52>
 801fc7a:	f1c0 0c0b 	rsb	ip, r0, #11
 801fc7e:	fa22 f30c 	lsr.w	r3, r2, ip
 801fc82:	45b8      	cmp	r8, r7
 801fc84:	ea43 0501 	orr.w	r5, r3, r1
 801fc88:	bf34      	ite	cc
 801fc8a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801fc8e:	2300      	movcs	r3, #0
 801fc90:	3015      	adds	r0, #21
 801fc92:	fa02 f000 	lsl.w	r0, r2, r0
 801fc96:	fa23 f30c 	lsr.w	r3, r3, ip
 801fc9a:	4303      	orrs	r3, r0
 801fc9c:	461c      	mov	r4, r3
 801fc9e:	ec45 4b10 	vmov	d0, r4, r5
 801fca2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fca6:	45b8      	cmp	r8, r7
 801fca8:	bf3a      	itte	cc
 801fcaa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801fcae:	f1a6 0708 	subcc.w	r7, r6, #8
 801fcb2:	2300      	movcs	r3, #0
 801fcb4:	380b      	subs	r0, #11
 801fcb6:	d012      	beq.n	801fcde <__b2d+0x8a>
 801fcb8:	f1c0 0120 	rsb	r1, r0, #32
 801fcbc:	fa23 f401 	lsr.w	r4, r3, r1
 801fcc0:	4082      	lsls	r2, r0
 801fcc2:	4322      	orrs	r2, r4
 801fcc4:	4547      	cmp	r7, r8
 801fcc6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801fcca:	bf8c      	ite	hi
 801fccc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801fcd0:	2200      	movls	r2, #0
 801fcd2:	4083      	lsls	r3, r0
 801fcd4:	40ca      	lsrs	r2, r1
 801fcd6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801fcda:	4313      	orrs	r3, r2
 801fcdc:	e7de      	b.n	801fc9c <__b2d+0x48>
 801fcde:	ea42 0501 	orr.w	r5, r2, r1
 801fce2:	e7db      	b.n	801fc9c <__b2d+0x48>
 801fce4:	3ff00000 	.word	0x3ff00000

0801fce8 <__d2b>:
 801fce8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801fcec:	460f      	mov	r7, r1
 801fcee:	2101      	movs	r1, #1
 801fcf0:	ec59 8b10 	vmov	r8, r9, d0
 801fcf4:	4616      	mov	r6, r2
 801fcf6:	f7ff fc13 	bl	801f520 <_Balloc>
 801fcfa:	4604      	mov	r4, r0
 801fcfc:	b930      	cbnz	r0, 801fd0c <__d2b+0x24>
 801fcfe:	4602      	mov	r2, r0
 801fd00:	4b23      	ldr	r3, [pc, #140]	@ (801fd90 <__d2b+0xa8>)
 801fd02:	4824      	ldr	r0, [pc, #144]	@ (801fd94 <__d2b+0xac>)
 801fd04:	f240 310f 	movw	r1, #783	@ 0x30f
 801fd08:	f7fe fc9e 	bl	801e648 <__assert_func>
 801fd0c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801fd10:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801fd14:	b10d      	cbz	r5, 801fd1a <__d2b+0x32>
 801fd16:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801fd1a:	9301      	str	r3, [sp, #4]
 801fd1c:	f1b8 0300 	subs.w	r3, r8, #0
 801fd20:	d023      	beq.n	801fd6a <__d2b+0x82>
 801fd22:	4668      	mov	r0, sp
 801fd24:	9300      	str	r3, [sp, #0]
 801fd26:	f7ff fd0c 	bl	801f742 <__lo0bits>
 801fd2a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801fd2e:	b1d0      	cbz	r0, 801fd66 <__d2b+0x7e>
 801fd30:	f1c0 0320 	rsb	r3, r0, #32
 801fd34:	fa02 f303 	lsl.w	r3, r2, r3
 801fd38:	430b      	orrs	r3, r1
 801fd3a:	40c2      	lsrs	r2, r0
 801fd3c:	6163      	str	r3, [r4, #20]
 801fd3e:	9201      	str	r2, [sp, #4]
 801fd40:	9b01      	ldr	r3, [sp, #4]
 801fd42:	61a3      	str	r3, [r4, #24]
 801fd44:	2b00      	cmp	r3, #0
 801fd46:	bf0c      	ite	eq
 801fd48:	2201      	moveq	r2, #1
 801fd4a:	2202      	movne	r2, #2
 801fd4c:	6122      	str	r2, [r4, #16]
 801fd4e:	b1a5      	cbz	r5, 801fd7a <__d2b+0x92>
 801fd50:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801fd54:	4405      	add	r5, r0
 801fd56:	603d      	str	r5, [r7, #0]
 801fd58:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801fd5c:	6030      	str	r0, [r6, #0]
 801fd5e:	4620      	mov	r0, r4
 801fd60:	b003      	add	sp, #12
 801fd62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801fd66:	6161      	str	r1, [r4, #20]
 801fd68:	e7ea      	b.n	801fd40 <__d2b+0x58>
 801fd6a:	a801      	add	r0, sp, #4
 801fd6c:	f7ff fce9 	bl	801f742 <__lo0bits>
 801fd70:	9b01      	ldr	r3, [sp, #4]
 801fd72:	6163      	str	r3, [r4, #20]
 801fd74:	3020      	adds	r0, #32
 801fd76:	2201      	movs	r2, #1
 801fd78:	e7e8      	b.n	801fd4c <__d2b+0x64>
 801fd7a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801fd7e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801fd82:	6038      	str	r0, [r7, #0]
 801fd84:	6918      	ldr	r0, [r3, #16]
 801fd86:	f7ff fcbd 	bl	801f704 <__hi0bits>
 801fd8a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801fd8e:	e7e5      	b.n	801fd5c <__d2b+0x74>
 801fd90:	08025fd0 	.word	0x08025fd0
 801fd94:	08025fe1 	.word	0x08025fe1

0801fd98 <__ratio>:
 801fd98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd9c:	b085      	sub	sp, #20
 801fd9e:	e9cd 1000 	strd	r1, r0, [sp]
 801fda2:	a902      	add	r1, sp, #8
 801fda4:	f7ff ff56 	bl	801fc54 <__b2d>
 801fda8:	9800      	ldr	r0, [sp, #0]
 801fdaa:	a903      	add	r1, sp, #12
 801fdac:	ec55 4b10 	vmov	r4, r5, d0
 801fdb0:	f7ff ff50 	bl	801fc54 <__b2d>
 801fdb4:	9b01      	ldr	r3, [sp, #4]
 801fdb6:	6919      	ldr	r1, [r3, #16]
 801fdb8:	9b00      	ldr	r3, [sp, #0]
 801fdba:	691b      	ldr	r3, [r3, #16]
 801fdbc:	1ac9      	subs	r1, r1, r3
 801fdbe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801fdc2:	1a9b      	subs	r3, r3, r2
 801fdc4:	ec5b ab10 	vmov	sl, fp, d0
 801fdc8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801fdcc:	2b00      	cmp	r3, #0
 801fdce:	bfce      	itee	gt
 801fdd0:	462a      	movgt	r2, r5
 801fdd2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801fdd6:	465a      	movle	r2, fp
 801fdd8:	462f      	mov	r7, r5
 801fdda:	46d9      	mov	r9, fp
 801fddc:	bfcc      	ite	gt
 801fdde:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801fde2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801fde6:	464b      	mov	r3, r9
 801fde8:	4652      	mov	r2, sl
 801fdea:	4620      	mov	r0, r4
 801fdec:	4639      	mov	r1, r7
 801fdee:	f7e0 fd2d 	bl	800084c <__aeabi_ddiv>
 801fdf2:	ec41 0b10 	vmov	d0, r0, r1
 801fdf6:	b005      	add	sp, #20
 801fdf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fdfc <__copybits>:
 801fdfc:	3901      	subs	r1, #1
 801fdfe:	b570      	push	{r4, r5, r6, lr}
 801fe00:	1149      	asrs	r1, r1, #5
 801fe02:	6914      	ldr	r4, [r2, #16]
 801fe04:	3101      	adds	r1, #1
 801fe06:	f102 0314 	add.w	r3, r2, #20
 801fe0a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801fe0e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801fe12:	1f05      	subs	r5, r0, #4
 801fe14:	42a3      	cmp	r3, r4
 801fe16:	d30c      	bcc.n	801fe32 <__copybits+0x36>
 801fe18:	1aa3      	subs	r3, r4, r2
 801fe1a:	3b11      	subs	r3, #17
 801fe1c:	f023 0303 	bic.w	r3, r3, #3
 801fe20:	3211      	adds	r2, #17
 801fe22:	42a2      	cmp	r2, r4
 801fe24:	bf88      	it	hi
 801fe26:	2300      	movhi	r3, #0
 801fe28:	4418      	add	r0, r3
 801fe2a:	2300      	movs	r3, #0
 801fe2c:	4288      	cmp	r0, r1
 801fe2e:	d305      	bcc.n	801fe3c <__copybits+0x40>
 801fe30:	bd70      	pop	{r4, r5, r6, pc}
 801fe32:	f853 6b04 	ldr.w	r6, [r3], #4
 801fe36:	f845 6f04 	str.w	r6, [r5, #4]!
 801fe3a:	e7eb      	b.n	801fe14 <__copybits+0x18>
 801fe3c:	f840 3b04 	str.w	r3, [r0], #4
 801fe40:	e7f4      	b.n	801fe2c <__copybits+0x30>

0801fe42 <__any_on>:
 801fe42:	f100 0214 	add.w	r2, r0, #20
 801fe46:	6900      	ldr	r0, [r0, #16]
 801fe48:	114b      	asrs	r3, r1, #5
 801fe4a:	4298      	cmp	r0, r3
 801fe4c:	b510      	push	{r4, lr}
 801fe4e:	db11      	blt.n	801fe74 <__any_on+0x32>
 801fe50:	dd0a      	ble.n	801fe68 <__any_on+0x26>
 801fe52:	f011 011f 	ands.w	r1, r1, #31
 801fe56:	d007      	beq.n	801fe68 <__any_on+0x26>
 801fe58:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801fe5c:	fa24 f001 	lsr.w	r0, r4, r1
 801fe60:	fa00 f101 	lsl.w	r1, r0, r1
 801fe64:	428c      	cmp	r4, r1
 801fe66:	d10b      	bne.n	801fe80 <__any_on+0x3e>
 801fe68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801fe6c:	4293      	cmp	r3, r2
 801fe6e:	d803      	bhi.n	801fe78 <__any_on+0x36>
 801fe70:	2000      	movs	r0, #0
 801fe72:	bd10      	pop	{r4, pc}
 801fe74:	4603      	mov	r3, r0
 801fe76:	e7f7      	b.n	801fe68 <__any_on+0x26>
 801fe78:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801fe7c:	2900      	cmp	r1, #0
 801fe7e:	d0f5      	beq.n	801fe6c <__any_on+0x2a>
 801fe80:	2001      	movs	r0, #1
 801fe82:	e7f6      	b.n	801fe72 <__any_on+0x30>

0801fe84 <sulp>:
 801fe84:	b570      	push	{r4, r5, r6, lr}
 801fe86:	4604      	mov	r4, r0
 801fe88:	460d      	mov	r5, r1
 801fe8a:	ec45 4b10 	vmov	d0, r4, r5
 801fe8e:	4616      	mov	r6, r2
 801fe90:	f7ff feba 	bl	801fc08 <__ulp>
 801fe94:	ec51 0b10 	vmov	r0, r1, d0
 801fe98:	b17e      	cbz	r6, 801feba <sulp+0x36>
 801fe9a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801fe9e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801fea2:	2b00      	cmp	r3, #0
 801fea4:	dd09      	ble.n	801feba <sulp+0x36>
 801fea6:	051b      	lsls	r3, r3, #20
 801fea8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801feac:	2400      	movs	r4, #0
 801feae:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801feb2:	4622      	mov	r2, r4
 801feb4:	462b      	mov	r3, r5
 801feb6:	f7e0 fb9f 	bl	80005f8 <__aeabi_dmul>
 801feba:	ec41 0b10 	vmov	d0, r0, r1
 801febe:	bd70      	pop	{r4, r5, r6, pc}

0801fec0 <_strtod_l>:
 801fec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fec4:	b09f      	sub	sp, #124	@ 0x7c
 801fec6:	460c      	mov	r4, r1
 801fec8:	9217      	str	r2, [sp, #92]	@ 0x5c
 801feca:	2200      	movs	r2, #0
 801fecc:	921a      	str	r2, [sp, #104]	@ 0x68
 801fece:	9005      	str	r0, [sp, #20]
 801fed0:	f04f 0a00 	mov.w	sl, #0
 801fed4:	f04f 0b00 	mov.w	fp, #0
 801fed8:	460a      	mov	r2, r1
 801feda:	9219      	str	r2, [sp, #100]	@ 0x64
 801fedc:	7811      	ldrb	r1, [r2, #0]
 801fede:	292b      	cmp	r1, #43	@ 0x2b
 801fee0:	d04a      	beq.n	801ff78 <_strtod_l+0xb8>
 801fee2:	d838      	bhi.n	801ff56 <_strtod_l+0x96>
 801fee4:	290d      	cmp	r1, #13
 801fee6:	d832      	bhi.n	801ff4e <_strtod_l+0x8e>
 801fee8:	2908      	cmp	r1, #8
 801feea:	d832      	bhi.n	801ff52 <_strtod_l+0x92>
 801feec:	2900      	cmp	r1, #0
 801feee:	d03b      	beq.n	801ff68 <_strtod_l+0xa8>
 801fef0:	2200      	movs	r2, #0
 801fef2:	920b      	str	r2, [sp, #44]	@ 0x2c
 801fef4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801fef6:	782a      	ldrb	r2, [r5, #0]
 801fef8:	2a30      	cmp	r2, #48	@ 0x30
 801fefa:	f040 80b3 	bne.w	8020064 <_strtod_l+0x1a4>
 801fefe:	786a      	ldrb	r2, [r5, #1]
 801ff00:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801ff04:	2a58      	cmp	r2, #88	@ 0x58
 801ff06:	d16e      	bne.n	801ffe6 <_strtod_l+0x126>
 801ff08:	9302      	str	r3, [sp, #8]
 801ff0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ff0c:	9301      	str	r3, [sp, #4]
 801ff0e:	ab1a      	add	r3, sp, #104	@ 0x68
 801ff10:	9300      	str	r3, [sp, #0]
 801ff12:	4a8e      	ldr	r2, [pc, #568]	@ (802014c <_strtod_l+0x28c>)
 801ff14:	9805      	ldr	r0, [sp, #20]
 801ff16:	ab1b      	add	r3, sp, #108	@ 0x6c
 801ff18:	a919      	add	r1, sp, #100	@ 0x64
 801ff1a:	f001 f997 	bl	802124c <__gethex>
 801ff1e:	f010 060f 	ands.w	r6, r0, #15
 801ff22:	4604      	mov	r4, r0
 801ff24:	d005      	beq.n	801ff32 <_strtod_l+0x72>
 801ff26:	2e06      	cmp	r6, #6
 801ff28:	d128      	bne.n	801ff7c <_strtod_l+0xbc>
 801ff2a:	3501      	adds	r5, #1
 801ff2c:	2300      	movs	r3, #0
 801ff2e:	9519      	str	r5, [sp, #100]	@ 0x64
 801ff30:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ff32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ff34:	2b00      	cmp	r3, #0
 801ff36:	f040 858e 	bne.w	8020a56 <_strtod_l+0xb96>
 801ff3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ff3c:	b1cb      	cbz	r3, 801ff72 <_strtod_l+0xb2>
 801ff3e:	4652      	mov	r2, sl
 801ff40:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801ff44:	ec43 2b10 	vmov	d0, r2, r3
 801ff48:	b01f      	add	sp, #124	@ 0x7c
 801ff4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff4e:	2920      	cmp	r1, #32
 801ff50:	d1ce      	bne.n	801fef0 <_strtod_l+0x30>
 801ff52:	3201      	adds	r2, #1
 801ff54:	e7c1      	b.n	801feda <_strtod_l+0x1a>
 801ff56:	292d      	cmp	r1, #45	@ 0x2d
 801ff58:	d1ca      	bne.n	801fef0 <_strtod_l+0x30>
 801ff5a:	2101      	movs	r1, #1
 801ff5c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ff5e:	1c51      	adds	r1, r2, #1
 801ff60:	9119      	str	r1, [sp, #100]	@ 0x64
 801ff62:	7852      	ldrb	r2, [r2, #1]
 801ff64:	2a00      	cmp	r2, #0
 801ff66:	d1c5      	bne.n	801fef4 <_strtod_l+0x34>
 801ff68:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ff6a:	9419      	str	r4, [sp, #100]	@ 0x64
 801ff6c:	2b00      	cmp	r3, #0
 801ff6e:	f040 8570 	bne.w	8020a52 <_strtod_l+0xb92>
 801ff72:	4652      	mov	r2, sl
 801ff74:	465b      	mov	r3, fp
 801ff76:	e7e5      	b.n	801ff44 <_strtod_l+0x84>
 801ff78:	2100      	movs	r1, #0
 801ff7a:	e7ef      	b.n	801ff5c <_strtod_l+0x9c>
 801ff7c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ff7e:	b13a      	cbz	r2, 801ff90 <_strtod_l+0xd0>
 801ff80:	2135      	movs	r1, #53	@ 0x35
 801ff82:	a81c      	add	r0, sp, #112	@ 0x70
 801ff84:	f7ff ff3a 	bl	801fdfc <__copybits>
 801ff88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ff8a:	9805      	ldr	r0, [sp, #20]
 801ff8c:	f7ff fb08 	bl	801f5a0 <_Bfree>
 801ff90:	3e01      	subs	r6, #1
 801ff92:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ff94:	2e04      	cmp	r6, #4
 801ff96:	d806      	bhi.n	801ffa6 <_strtod_l+0xe6>
 801ff98:	e8df f006 	tbb	[pc, r6]
 801ff9c:	201d0314 	.word	0x201d0314
 801ffa0:	14          	.byte	0x14
 801ffa1:	00          	.byte	0x00
 801ffa2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801ffa6:	05e1      	lsls	r1, r4, #23
 801ffa8:	bf48      	it	mi
 801ffaa:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801ffae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801ffb2:	0d1b      	lsrs	r3, r3, #20
 801ffb4:	051b      	lsls	r3, r3, #20
 801ffb6:	2b00      	cmp	r3, #0
 801ffb8:	d1bb      	bne.n	801ff32 <_strtod_l+0x72>
 801ffba:	f7fe fafb 	bl	801e5b4 <__errno>
 801ffbe:	2322      	movs	r3, #34	@ 0x22
 801ffc0:	6003      	str	r3, [r0, #0]
 801ffc2:	e7b6      	b.n	801ff32 <_strtod_l+0x72>
 801ffc4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801ffc8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801ffcc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801ffd0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801ffd4:	e7e7      	b.n	801ffa6 <_strtod_l+0xe6>
 801ffd6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8020154 <_strtod_l+0x294>
 801ffda:	e7e4      	b.n	801ffa6 <_strtod_l+0xe6>
 801ffdc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801ffe0:	f04f 3aff 	mov.w	sl, #4294967295
 801ffe4:	e7df      	b.n	801ffa6 <_strtod_l+0xe6>
 801ffe6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ffe8:	1c5a      	adds	r2, r3, #1
 801ffea:	9219      	str	r2, [sp, #100]	@ 0x64
 801ffec:	785b      	ldrb	r3, [r3, #1]
 801ffee:	2b30      	cmp	r3, #48	@ 0x30
 801fff0:	d0f9      	beq.n	801ffe6 <_strtod_l+0x126>
 801fff2:	2b00      	cmp	r3, #0
 801fff4:	d09d      	beq.n	801ff32 <_strtod_l+0x72>
 801fff6:	2301      	movs	r3, #1
 801fff8:	9309      	str	r3, [sp, #36]	@ 0x24
 801fffa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fffc:	930c      	str	r3, [sp, #48]	@ 0x30
 801fffe:	2300      	movs	r3, #0
 8020000:	9308      	str	r3, [sp, #32]
 8020002:	930a      	str	r3, [sp, #40]	@ 0x28
 8020004:	461f      	mov	r7, r3
 8020006:	220a      	movs	r2, #10
 8020008:	9819      	ldr	r0, [sp, #100]	@ 0x64
 802000a:	7805      	ldrb	r5, [r0, #0]
 802000c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8020010:	b2d9      	uxtb	r1, r3
 8020012:	2909      	cmp	r1, #9
 8020014:	d928      	bls.n	8020068 <_strtod_l+0x1a8>
 8020016:	494e      	ldr	r1, [pc, #312]	@ (8020150 <_strtod_l+0x290>)
 8020018:	2201      	movs	r2, #1
 802001a:	f7fe fa06 	bl	801e42a <strncmp>
 802001e:	2800      	cmp	r0, #0
 8020020:	d032      	beq.n	8020088 <_strtod_l+0x1c8>
 8020022:	2000      	movs	r0, #0
 8020024:	462a      	mov	r2, r5
 8020026:	4681      	mov	r9, r0
 8020028:	463d      	mov	r5, r7
 802002a:	4603      	mov	r3, r0
 802002c:	2a65      	cmp	r2, #101	@ 0x65
 802002e:	d001      	beq.n	8020034 <_strtod_l+0x174>
 8020030:	2a45      	cmp	r2, #69	@ 0x45
 8020032:	d114      	bne.n	802005e <_strtod_l+0x19e>
 8020034:	b91d      	cbnz	r5, 802003e <_strtod_l+0x17e>
 8020036:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020038:	4302      	orrs	r2, r0
 802003a:	d095      	beq.n	801ff68 <_strtod_l+0xa8>
 802003c:	2500      	movs	r5, #0
 802003e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8020040:	1c62      	adds	r2, r4, #1
 8020042:	9219      	str	r2, [sp, #100]	@ 0x64
 8020044:	7862      	ldrb	r2, [r4, #1]
 8020046:	2a2b      	cmp	r2, #43	@ 0x2b
 8020048:	d077      	beq.n	802013a <_strtod_l+0x27a>
 802004a:	2a2d      	cmp	r2, #45	@ 0x2d
 802004c:	d07b      	beq.n	8020146 <_strtod_l+0x286>
 802004e:	f04f 0c00 	mov.w	ip, #0
 8020052:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8020056:	2909      	cmp	r1, #9
 8020058:	f240 8082 	bls.w	8020160 <_strtod_l+0x2a0>
 802005c:	9419      	str	r4, [sp, #100]	@ 0x64
 802005e:	f04f 0800 	mov.w	r8, #0
 8020062:	e0a2      	b.n	80201aa <_strtod_l+0x2ea>
 8020064:	2300      	movs	r3, #0
 8020066:	e7c7      	b.n	801fff8 <_strtod_l+0x138>
 8020068:	2f08      	cmp	r7, #8
 802006a:	bfd5      	itete	le
 802006c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 802006e:	9908      	ldrgt	r1, [sp, #32]
 8020070:	fb02 3301 	mlale	r3, r2, r1, r3
 8020074:	fb02 3301 	mlagt	r3, r2, r1, r3
 8020078:	f100 0001 	add.w	r0, r0, #1
 802007c:	bfd4      	ite	le
 802007e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8020080:	9308      	strgt	r3, [sp, #32]
 8020082:	3701      	adds	r7, #1
 8020084:	9019      	str	r0, [sp, #100]	@ 0x64
 8020086:	e7bf      	b.n	8020008 <_strtod_l+0x148>
 8020088:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802008a:	1c5a      	adds	r2, r3, #1
 802008c:	9219      	str	r2, [sp, #100]	@ 0x64
 802008e:	785a      	ldrb	r2, [r3, #1]
 8020090:	b37f      	cbz	r7, 80200f2 <_strtod_l+0x232>
 8020092:	4681      	mov	r9, r0
 8020094:	463d      	mov	r5, r7
 8020096:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 802009a:	2b09      	cmp	r3, #9
 802009c:	d912      	bls.n	80200c4 <_strtod_l+0x204>
 802009e:	2301      	movs	r3, #1
 80200a0:	e7c4      	b.n	802002c <_strtod_l+0x16c>
 80200a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80200a4:	1c5a      	adds	r2, r3, #1
 80200a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80200a8:	785a      	ldrb	r2, [r3, #1]
 80200aa:	3001      	adds	r0, #1
 80200ac:	2a30      	cmp	r2, #48	@ 0x30
 80200ae:	d0f8      	beq.n	80200a2 <_strtod_l+0x1e2>
 80200b0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80200b4:	2b08      	cmp	r3, #8
 80200b6:	f200 84d3 	bhi.w	8020a60 <_strtod_l+0xba0>
 80200ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80200bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80200be:	4681      	mov	r9, r0
 80200c0:	2000      	movs	r0, #0
 80200c2:	4605      	mov	r5, r0
 80200c4:	3a30      	subs	r2, #48	@ 0x30
 80200c6:	f100 0301 	add.w	r3, r0, #1
 80200ca:	d02a      	beq.n	8020122 <_strtod_l+0x262>
 80200cc:	4499      	add	r9, r3
 80200ce:	eb00 0c05 	add.w	ip, r0, r5
 80200d2:	462b      	mov	r3, r5
 80200d4:	210a      	movs	r1, #10
 80200d6:	4563      	cmp	r3, ip
 80200d8:	d10d      	bne.n	80200f6 <_strtod_l+0x236>
 80200da:	1c69      	adds	r1, r5, #1
 80200dc:	4401      	add	r1, r0
 80200de:	4428      	add	r0, r5
 80200e0:	2808      	cmp	r0, #8
 80200e2:	dc16      	bgt.n	8020112 <_strtod_l+0x252>
 80200e4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80200e6:	230a      	movs	r3, #10
 80200e8:	fb03 2300 	mla	r3, r3, r0, r2
 80200ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80200ee:	2300      	movs	r3, #0
 80200f0:	e018      	b.n	8020124 <_strtod_l+0x264>
 80200f2:	4638      	mov	r0, r7
 80200f4:	e7da      	b.n	80200ac <_strtod_l+0x1ec>
 80200f6:	2b08      	cmp	r3, #8
 80200f8:	f103 0301 	add.w	r3, r3, #1
 80200fc:	dc03      	bgt.n	8020106 <_strtod_l+0x246>
 80200fe:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8020100:	434e      	muls	r6, r1
 8020102:	960a      	str	r6, [sp, #40]	@ 0x28
 8020104:	e7e7      	b.n	80200d6 <_strtod_l+0x216>
 8020106:	2b10      	cmp	r3, #16
 8020108:	bfde      	ittt	le
 802010a:	9e08      	ldrle	r6, [sp, #32]
 802010c:	434e      	mulle	r6, r1
 802010e:	9608      	strle	r6, [sp, #32]
 8020110:	e7e1      	b.n	80200d6 <_strtod_l+0x216>
 8020112:	280f      	cmp	r0, #15
 8020114:	dceb      	bgt.n	80200ee <_strtod_l+0x22e>
 8020116:	9808      	ldr	r0, [sp, #32]
 8020118:	230a      	movs	r3, #10
 802011a:	fb03 2300 	mla	r3, r3, r0, r2
 802011e:	9308      	str	r3, [sp, #32]
 8020120:	e7e5      	b.n	80200ee <_strtod_l+0x22e>
 8020122:	4629      	mov	r1, r5
 8020124:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020126:	1c50      	adds	r0, r2, #1
 8020128:	9019      	str	r0, [sp, #100]	@ 0x64
 802012a:	7852      	ldrb	r2, [r2, #1]
 802012c:	4618      	mov	r0, r3
 802012e:	460d      	mov	r5, r1
 8020130:	e7b1      	b.n	8020096 <_strtod_l+0x1d6>
 8020132:	f04f 0900 	mov.w	r9, #0
 8020136:	2301      	movs	r3, #1
 8020138:	e77d      	b.n	8020036 <_strtod_l+0x176>
 802013a:	f04f 0c00 	mov.w	ip, #0
 802013e:	1ca2      	adds	r2, r4, #2
 8020140:	9219      	str	r2, [sp, #100]	@ 0x64
 8020142:	78a2      	ldrb	r2, [r4, #2]
 8020144:	e785      	b.n	8020052 <_strtod_l+0x192>
 8020146:	f04f 0c01 	mov.w	ip, #1
 802014a:	e7f8      	b.n	802013e <_strtod_l+0x27e>
 802014c:	08026150 	.word	0x08026150
 8020150:	08026138 	.word	0x08026138
 8020154:	7ff00000 	.word	0x7ff00000
 8020158:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802015a:	1c51      	adds	r1, r2, #1
 802015c:	9119      	str	r1, [sp, #100]	@ 0x64
 802015e:	7852      	ldrb	r2, [r2, #1]
 8020160:	2a30      	cmp	r2, #48	@ 0x30
 8020162:	d0f9      	beq.n	8020158 <_strtod_l+0x298>
 8020164:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8020168:	2908      	cmp	r1, #8
 802016a:	f63f af78 	bhi.w	802005e <_strtod_l+0x19e>
 802016e:	3a30      	subs	r2, #48	@ 0x30
 8020170:	920e      	str	r2, [sp, #56]	@ 0x38
 8020172:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020174:	920f      	str	r2, [sp, #60]	@ 0x3c
 8020176:	f04f 080a 	mov.w	r8, #10
 802017a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802017c:	1c56      	adds	r6, r2, #1
 802017e:	9619      	str	r6, [sp, #100]	@ 0x64
 8020180:	7852      	ldrb	r2, [r2, #1]
 8020182:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8020186:	f1be 0f09 	cmp.w	lr, #9
 802018a:	d939      	bls.n	8020200 <_strtod_l+0x340>
 802018c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 802018e:	1a76      	subs	r6, r6, r1
 8020190:	2e08      	cmp	r6, #8
 8020192:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8020196:	dc03      	bgt.n	80201a0 <_strtod_l+0x2e0>
 8020198:	990e      	ldr	r1, [sp, #56]	@ 0x38
 802019a:	4588      	cmp	r8, r1
 802019c:	bfa8      	it	ge
 802019e:	4688      	movge	r8, r1
 80201a0:	f1bc 0f00 	cmp.w	ip, #0
 80201a4:	d001      	beq.n	80201aa <_strtod_l+0x2ea>
 80201a6:	f1c8 0800 	rsb	r8, r8, #0
 80201aa:	2d00      	cmp	r5, #0
 80201ac:	d14e      	bne.n	802024c <_strtod_l+0x38c>
 80201ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80201b0:	4308      	orrs	r0, r1
 80201b2:	f47f aebe 	bne.w	801ff32 <_strtod_l+0x72>
 80201b6:	2b00      	cmp	r3, #0
 80201b8:	f47f aed6 	bne.w	801ff68 <_strtod_l+0xa8>
 80201bc:	2a69      	cmp	r2, #105	@ 0x69
 80201be:	d028      	beq.n	8020212 <_strtod_l+0x352>
 80201c0:	dc25      	bgt.n	802020e <_strtod_l+0x34e>
 80201c2:	2a49      	cmp	r2, #73	@ 0x49
 80201c4:	d025      	beq.n	8020212 <_strtod_l+0x352>
 80201c6:	2a4e      	cmp	r2, #78	@ 0x4e
 80201c8:	f47f aece 	bne.w	801ff68 <_strtod_l+0xa8>
 80201cc:	499b      	ldr	r1, [pc, #620]	@ (802043c <_strtod_l+0x57c>)
 80201ce:	a819      	add	r0, sp, #100	@ 0x64
 80201d0:	f001 fa5e 	bl	8021690 <__match>
 80201d4:	2800      	cmp	r0, #0
 80201d6:	f43f aec7 	beq.w	801ff68 <_strtod_l+0xa8>
 80201da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80201dc:	781b      	ldrb	r3, [r3, #0]
 80201de:	2b28      	cmp	r3, #40	@ 0x28
 80201e0:	d12e      	bne.n	8020240 <_strtod_l+0x380>
 80201e2:	4997      	ldr	r1, [pc, #604]	@ (8020440 <_strtod_l+0x580>)
 80201e4:	aa1c      	add	r2, sp, #112	@ 0x70
 80201e6:	a819      	add	r0, sp, #100	@ 0x64
 80201e8:	f001 fa66 	bl	80216b8 <__hexnan>
 80201ec:	2805      	cmp	r0, #5
 80201ee:	d127      	bne.n	8020240 <_strtod_l+0x380>
 80201f0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80201f2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80201f6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80201fa:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80201fe:	e698      	b.n	801ff32 <_strtod_l+0x72>
 8020200:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020202:	fb08 2101 	mla	r1, r8, r1, r2
 8020206:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 802020a:	920e      	str	r2, [sp, #56]	@ 0x38
 802020c:	e7b5      	b.n	802017a <_strtod_l+0x2ba>
 802020e:	2a6e      	cmp	r2, #110	@ 0x6e
 8020210:	e7da      	b.n	80201c8 <_strtod_l+0x308>
 8020212:	498c      	ldr	r1, [pc, #560]	@ (8020444 <_strtod_l+0x584>)
 8020214:	a819      	add	r0, sp, #100	@ 0x64
 8020216:	f001 fa3b 	bl	8021690 <__match>
 802021a:	2800      	cmp	r0, #0
 802021c:	f43f aea4 	beq.w	801ff68 <_strtod_l+0xa8>
 8020220:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020222:	4989      	ldr	r1, [pc, #548]	@ (8020448 <_strtod_l+0x588>)
 8020224:	3b01      	subs	r3, #1
 8020226:	a819      	add	r0, sp, #100	@ 0x64
 8020228:	9319      	str	r3, [sp, #100]	@ 0x64
 802022a:	f001 fa31 	bl	8021690 <__match>
 802022e:	b910      	cbnz	r0, 8020236 <_strtod_l+0x376>
 8020230:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020232:	3301      	adds	r3, #1
 8020234:	9319      	str	r3, [sp, #100]	@ 0x64
 8020236:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8020458 <_strtod_l+0x598>
 802023a:	f04f 0a00 	mov.w	sl, #0
 802023e:	e678      	b.n	801ff32 <_strtod_l+0x72>
 8020240:	4882      	ldr	r0, [pc, #520]	@ (802044c <_strtod_l+0x58c>)
 8020242:	f000 ff79 	bl	8021138 <nan>
 8020246:	ec5b ab10 	vmov	sl, fp, d0
 802024a:	e672      	b.n	801ff32 <_strtod_l+0x72>
 802024c:	eba8 0309 	sub.w	r3, r8, r9
 8020250:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8020252:	9309      	str	r3, [sp, #36]	@ 0x24
 8020254:	2f00      	cmp	r7, #0
 8020256:	bf08      	it	eq
 8020258:	462f      	moveq	r7, r5
 802025a:	2d10      	cmp	r5, #16
 802025c:	462c      	mov	r4, r5
 802025e:	bfa8      	it	ge
 8020260:	2410      	movge	r4, #16
 8020262:	f7e0 f94f 	bl	8000504 <__aeabi_ui2d>
 8020266:	2d09      	cmp	r5, #9
 8020268:	4682      	mov	sl, r0
 802026a:	468b      	mov	fp, r1
 802026c:	dc13      	bgt.n	8020296 <_strtod_l+0x3d6>
 802026e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020270:	2b00      	cmp	r3, #0
 8020272:	f43f ae5e 	beq.w	801ff32 <_strtod_l+0x72>
 8020276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020278:	dd78      	ble.n	802036c <_strtod_l+0x4ac>
 802027a:	2b16      	cmp	r3, #22
 802027c:	dc5f      	bgt.n	802033e <_strtod_l+0x47e>
 802027e:	4974      	ldr	r1, [pc, #464]	@ (8020450 <_strtod_l+0x590>)
 8020280:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8020284:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020288:	4652      	mov	r2, sl
 802028a:	465b      	mov	r3, fp
 802028c:	f7e0 f9b4 	bl	80005f8 <__aeabi_dmul>
 8020290:	4682      	mov	sl, r0
 8020292:	468b      	mov	fp, r1
 8020294:	e64d      	b.n	801ff32 <_strtod_l+0x72>
 8020296:	4b6e      	ldr	r3, [pc, #440]	@ (8020450 <_strtod_l+0x590>)
 8020298:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 802029c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80202a0:	f7e0 f9aa 	bl	80005f8 <__aeabi_dmul>
 80202a4:	4682      	mov	sl, r0
 80202a6:	9808      	ldr	r0, [sp, #32]
 80202a8:	468b      	mov	fp, r1
 80202aa:	f7e0 f92b 	bl	8000504 <__aeabi_ui2d>
 80202ae:	4602      	mov	r2, r0
 80202b0:	460b      	mov	r3, r1
 80202b2:	4650      	mov	r0, sl
 80202b4:	4659      	mov	r1, fp
 80202b6:	f7df ffe9 	bl	800028c <__adddf3>
 80202ba:	2d0f      	cmp	r5, #15
 80202bc:	4682      	mov	sl, r0
 80202be:	468b      	mov	fp, r1
 80202c0:	ddd5      	ble.n	802026e <_strtod_l+0x3ae>
 80202c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80202c4:	1b2c      	subs	r4, r5, r4
 80202c6:	441c      	add	r4, r3
 80202c8:	2c00      	cmp	r4, #0
 80202ca:	f340 8096 	ble.w	80203fa <_strtod_l+0x53a>
 80202ce:	f014 030f 	ands.w	r3, r4, #15
 80202d2:	d00a      	beq.n	80202ea <_strtod_l+0x42a>
 80202d4:	495e      	ldr	r1, [pc, #376]	@ (8020450 <_strtod_l+0x590>)
 80202d6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80202da:	4652      	mov	r2, sl
 80202dc:	465b      	mov	r3, fp
 80202de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80202e2:	f7e0 f989 	bl	80005f8 <__aeabi_dmul>
 80202e6:	4682      	mov	sl, r0
 80202e8:	468b      	mov	fp, r1
 80202ea:	f034 040f 	bics.w	r4, r4, #15
 80202ee:	d073      	beq.n	80203d8 <_strtod_l+0x518>
 80202f0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80202f4:	dd48      	ble.n	8020388 <_strtod_l+0x4c8>
 80202f6:	2400      	movs	r4, #0
 80202f8:	46a0      	mov	r8, r4
 80202fa:	940a      	str	r4, [sp, #40]	@ 0x28
 80202fc:	46a1      	mov	r9, r4
 80202fe:	9a05      	ldr	r2, [sp, #20]
 8020300:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8020458 <_strtod_l+0x598>
 8020304:	2322      	movs	r3, #34	@ 0x22
 8020306:	6013      	str	r3, [r2, #0]
 8020308:	f04f 0a00 	mov.w	sl, #0
 802030c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802030e:	2b00      	cmp	r3, #0
 8020310:	f43f ae0f 	beq.w	801ff32 <_strtod_l+0x72>
 8020314:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020316:	9805      	ldr	r0, [sp, #20]
 8020318:	f7ff f942 	bl	801f5a0 <_Bfree>
 802031c:	9805      	ldr	r0, [sp, #20]
 802031e:	4649      	mov	r1, r9
 8020320:	f7ff f93e 	bl	801f5a0 <_Bfree>
 8020324:	9805      	ldr	r0, [sp, #20]
 8020326:	4641      	mov	r1, r8
 8020328:	f7ff f93a 	bl	801f5a0 <_Bfree>
 802032c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802032e:	9805      	ldr	r0, [sp, #20]
 8020330:	f7ff f936 	bl	801f5a0 <_Bfree>
 8020334:	9805      	ldr	r0, [sp, #20]
 8020336:	4621      	mov	r1, r4
 8020338:	f7ff f932 	bl	801f5a0 <_Bfree>
 802033c:	e5f9      	b.n	801ff32 <_strtod_l+0x72>
 802033e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020340:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8020344:	4293      	cmp	r3, r2
 8020346:	dbbc      	blt.n	80202c2 <_strtod_l+0x402>
 8020348:	4c41      	ldr	r4, [pc, #260]	@ (8020450 <_strtod_l+0x590>)
 802034a:	f1c5 050f 	rsb	r5, r5, #15
 802034e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8020352:	4652      	mov	r2, sl
 8020354:	465b      	mov	r3, fp
 8020356:	e9d1 0100 	ldrd	r0, r1, [r1]
 802035a:	f7e0 f94d 	bl	80005f8 <__aeabi_dmul>
 802035e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020360:	1b5d      	subs	r5, r3, r5
 8020362:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8020366:	e9d4 2300 	ldrd	r2, r3, [r4]
 802036a:	e78f      	b.n	802028c <_strtod_l+0x3cc>
 802036c:	3316      	adds	r3, #22
 802036e:	dba8      	blt.n	80202c2 <_strtod_l+0x402>
 8020370:	4b37      	ldr	r3, [pc, #220]	@ (8020450 <_strtod_l+0x590>)
 8020372:	eba9 0808 	sub.w	r8, r9, r8
 8020376:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 802037a:	e9d8 2300 	ldrd	r2, r3, [r8]
 802037e:	4650      	mov	r0, sl
 8020380:	4659      	mov	r1, fp
 8020382:	f7e0 fa63 	bl	800084c <__aeabi_ddiv>
 8020386:	e783      	b.n	8020290 <_strtod_l+0x3d0>
 8020388:	4b32      	ldr	r3, [pc, #200]	@ (8020454 <_strtod_l+0x594>)
 802038a:	9308      	str	r3, [sp, #32]
 802038c:	2300      	movs	r3, #0
 802038e:	1124      	asrs	r4, r4, #4
 8020390:	4650      	mov	r0, sl
 8020392:	4659      	mov	r1, fp
 8020394:	461e      	mov	r6, r3
 8020396:	2c01      	cmp	r4, #1
 8020398:	dc21      	bgt.n	80203de <_strtod_l+0x51e>
 802039a:	b10b      	cbz	r3, 80203a0 <_strtod_l+0x4e0>
 802039c:	4682      	mov	sl, r0
 802039e:	468b      	mov	fp, r1
 80203a0:	492c      	ldr	r1, [pc, #176]	@ (8020454 <_strtod_l+0x594>)
 80203a2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80203a6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80203aa:	4652      	mov	r2, sl
 80203ac:	465b      	mov	r3, fp
 80203ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80203b2:	f7e0 f921 	bl	80005f8 <__aeabi_dmul>
 80203b6:	4b28      	ldr	r3, [pc, #160]	@ (8020458 <_strtod_l+0x598>)
 80203b8:	460a      	mov	r2, r1
 80203ba:	400b      	ands	r3, r1
 80203bc:	4927      	ldr	r1, [pc, #156]	@ (802045c <_strtod_l+0x59c>)
 80203be:	428b      	cmp	r3, r1
 80203c0:	4682      	mov	sl, r0
 80203c2:	d898      	bhi.n	80202f6 <_strtod_l+0x436>
 80203c4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80203c8:	428b      	cmp	r3, r1
 80203ca:	bf86      	itte	hi
 80203cc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8020460 <_strtod_l+0x5a0>
 80203d0:	f04f 3aff 	movhi.w	sl, #4294967295
 80203d4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80203d8:	2300      	movs	r3, #0
 80203da:	9308      	str	r3, [sp, #32]
 80203dc:	e07a      	b.n	80204d4 <_strtod_l+0x614>
 80203de:	07e2      	lsls	r2, r4, #31
 80203e0:	d505      	bpl.n	80203ee <_strtod_l+0x52e>
 80203e2:	9b08      	ldr	r3, [sp, #32]
 80203e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80203e8:	f7e0 f906 	bl	80005f8 <__aeabi_dmul>
 80203ec:	2301      	movs	r3, #1
 80203ee:	9a08      	ldr	r2, [sp, #32]
 80203f0:	3208      	adds	r2, #8
 80203f2:	3601      	adds	r6, #1
 80203f4:	1064      	asrs	r4, r4, #1
 80203f6:	9208      	str	r2, [sp, #32]
 80203f8:	e7cd      	b.n	8020396 <_strtod_l+0x4d6>
 80203fa:	d0ed      	beq.n	80203d8 <_strtod_l+0x518>
 80203fc:	4264      	negs	r4, r4
 80203fe:	f014 020f 	ands.w	r2, r4, #15
 8020402:	d00a      	beq.n	802041a <_strtod_l+0x55a>
 8020404:	4b12      	ldr	r3, [pc, #72]	@ (8020450 <_strtod_l+0x590>)
 8020406:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 802040a:	4650      	mov	r0, sl
 802040c:	4659      	mov	r1, fp
 802040e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020412:	f7e0 fa1b 	bl	800084c <__aeabi_ddiv>
 8020416:	4682      	mov	sl, r0
 8020418:	468b      	mov	fp, r1
 802041a:	1124      	asrs	r4, r4, #4
 802041c:	d0dc      	beq.n	80203d8 <_strtod_l+0x518>
 802041e:	2c1f      	cmp	r4, #31
 8020420:	dd20      	ble.n	8020464 <_strtod_l+0x5a4>
 8020422:	2400      	movs	r4, #0
 8020424:	46a0      	mov	r8, r4
 8020426:	940a      	str	r4, [sp, #40]	@ 0x28
 8020428:	46a1      	mov	r9, r4
 802042a:	9a05      	ldr	r2, [sp, #20]
 802042c:	2322      	movs	r3, #34	@ 0x22
 802042e:	f04f 0a00 	mov.w	sl, #0
 8020432:	f04f 0b00 	mov.w	fp, #0
 8020436:	6013      	str	r3, [r2, #0]
 8020438:	e768      	b.n	802030c <_strtod_l+0x44c>
 802043a:	bf00      	nop
 802043c:	08025f03 	.word	0x08025f03
 8020440:	0802613c 	.word	0x0802613c
 8020444:	08025efb 	.word	0x08025efb
 8020448:	08025f6e 	.word	0x08025f6e
 802044c:	08025f6a 	.word	0x08025f6a
 8020450:	08026070 	.word	0x08026070
 8020454:	08026048 	.word	0x08026048
 8020458:	7ff00000 	.word	0x7ff00000
 802045c:	7ca00000 	.word	0x7ca00000
 8020460:	7fefffff 	.word	0x7fefffff
 8020464:	f014 0310 	ands.w	r3, r4, #16
 8020468:	bf18      	it	ne
 802046a:	236a      	movne	r3, #106	@ 0x6a
 802046c:	4ea9      	ldr	r6, [pc, #676]	@ (8020714 <_strtod_l+0x854>)
 802046e:	9308      	str	r3, [sp, #32]
 8020470:	4650      	mov	r0, sl
 8020472:	4659      	mov	r1, fp
 8020474:	2300      	movs	r3, #0
 8020476:	07e2      	lsls	r2, r4, #31
 8020478:	d504      	bpl.n	8020484 <_strtod_l+0x5c4>
 802047a:	e9d6 2300 	ldrd	r2, r3, [r6]
 802047e:	f7e0 f8bb 	bl	80005f8 <__aeabi_dmul>
 8020482:	2301      	movs	r3, #1
 8020484:	1064      	asrs	r4, r4, #1
 8020486:	f106 0608 	add.w	r6, r6, #8
 802048a:	d1f4      	bne.n	8020476 <_strtod_l+0x5b6>
 802048c:	b10b      	cbz	r3, 8020492 <_strtod_l+0x5d2>
 802048e:	4682      	mov	sl, r0
 8020490:	468b      	mov	fp, r1
 8020492:	9b08      	ldr	r3, [sp, #32]
 8020494:	b1b3      	cbz	r3, 80204c4 <_strtod_l+0x604>
 8020496:	f3cb 520a 	ubfx	r2, fp, #20, #11
 802049a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 802049e:	2b00      	cmp	r3, #0
 80204a0:	4659      	mov	r1, fp
 80204a2:	dd0f      	ble.n	80204c4 <_strtod_l+0x604>
 80204a4:	2b1f      	cmp	r3, #31
 80204a6:	dd55      	ble.n	8020554 <_strtod_l+0x694>
 80204a8:	2b34      	cmp	r3, #52	@ 0x34
 80204aa:	bfde      	ittt	le
 80204ac:	f04f 33ff 	movle.w	r3, #4294967295
 80204b0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80204b4:	4093      	lslle	r3, r2
 80204b6:	f04f 0a00 	mov.w	sl, #0
 80204ba:	bfcc      	ite	gt
 80204bc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80204c0:	ea03 0b01 	andle.w	fp, r3, r1
 80204c4:	2200      	movs	r2, #0
 80204c6:	2300      	movs	r3, #0
 80204c8:	4650      	mov	r0, sl
 80204ca:	4659      	mov	r1, fp
 80204cc:	f7e0 fafc 	bl	8000ac8 <__aeabi_dcmpeq>
 80204d0:	2800      	cmp	r0, #0
 80204d2:	d1a6      	bne.n	8020422 <_strtod_l+0x562>
 80204d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80204d6:	9300      	str	r3, [sp, #0]
 80204d8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80204da:	9805      	ldr	r0, [sp, #20]
 80204dc:	462b      	mov	r3, r5
 80204de:	463a      	mov	r2, r7
 80204e0:	f7ff f8c6 	bl	801f670 <__s2b>
 80204e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80204e6:	2800      	cmp	r0, #0
 80204e8:	f43f af05 	beq.w	80202f6 <_strtod_l+0x436>
 80204ec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80204ee:	2a00      	cmp	r2, #0
 80204f0:	eba9 0308 	sub.w	r3, r9, r8
 80204f4:	bfa8      	it	ge
 80204f6:	2300      	movge	r3, #0
 80204f8:	9312      	str	r3, [sp, #72]	@ 0x48
 80204fa:	2400      	movs	r4, #0
 80204fc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8020500:	9316      	str	r3, [sp, #88]	@ 0x58
 8020502:	46a0      	mov	r8, r4
 8020504:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020506:	9805      	ldr	r0, [sp, #20]
 8020508:	6859      	ldr	r1, [r3, #4]
 802050a:	f7ff f809 	bl	801f520 <_Balloc>
 802050e:	4681      	mov	r9, r0
 8020510:	2800      	cmp	r0, #0
 8020512:	f43f aef4 	beq.w	80202fe <_strtod_l+0x43e>
 8020516:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8020518:	691a      	ldr	r2, [r3, #16]
 802051a:	3202      	adds	r2, #2
 802051c:	f103 010c 	add.w	r1, r3, #12
 8020520:	0092      	lsls	r2, r2, #2
 8020522:	300c      	adds	r0, #12
 8020524:	f7fe f87b 	bl	801e61e <memcpy>
 8020528:	ec4b ab10 	vmov	d0, sl, fp
 802052c:	9805      	ldr	r0, [sp, #20]
 802052e:	aa1c      	add	r2, sp, #112	@ 0x70
 8020530:	a91b      	add	r1, sp, #108	@ 0x6c
 8020532:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8020536:	f7ff fbd7 	bl	801fce8 <__d2b>
 802053a:	901a      	str	r0, [sp, #104]	@ 0x68
 802053c:	2800      	cmp	r0, #0
 802053e:	f43f aede 	beq.w	80202fe <_strtod_l+0x43e>
 8020542:	9805      	ldr	r0, [sp, #20]
 8020544:	2101      	movs	r1, #1
 8020546:	f7ff f929 	bl	801f79c <__i2b>
 802054a:	4680      	mov	r8, r0
 802054c:	b948      	cbnz	r0, 8020562 <_strtod_l+0x6a2>
 802054e:	f04f 0800 	mov.w	r8, #0
 8020552:	e6d4      	b.n	80202fe <_strtod_l+0x43e>
 8020554:	f04f 32ff 	mov.w	r2, #4294967295
 8020558:	fa02 f303 	lsl.w	r3, r2, r3
 802055c:	ea03 0a0a 	and.w	sl, r3, sl
 8020560:	e7b0      	b.n	80204c4 <_strtod_l+0x604>
 8020562:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8020564:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8020566:	2d00      	cmp	r5, #0
 8020568:	bfab      	itete	ge
 802056a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 802056c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 802056e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8020570:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8020572:	bfac      	ite	ge
 8020574:	18ef      	addge	r7, r5, r3
 8020576:	1b5e      	sublt	r6, r3, r5
 8020578:	9b08      	ldr	r3, [sp, #32]
 802057a:	1aed      	subs	r5, r5, r3
 802057c:	4415      	add	r5, r2
 802057e:	4b66      	ldr	r3, [pc, #408]	@ (8020718 <_strtod_l+0x858>)
 8020580:	3d01      	subs	r5, #1
 8020582:	429d      	cmp	r5, r3
 8020584:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8020588:	da50      	bge.n	802062c <_strtod_l+0x76c>
 802058a:	1b5b      	subs	r3, r3, r5
 802058c:	2b1f      	cmp	r3, #31
 802058e:	eba2 0203 	sub.w	r2, r2, r3
 8020592:	f04f 0101 	mov.w	r1, #1
 8020596:	dc3d      	bgt.n	8020614 <_strtod_l+0x754>
 8020598:	fa01 f303 	lsl.w	r3, r1, r3
 802059c:	9313      	str	r3, [sp, #76]	@ 0x4c
 802059e:	2300      	movs	r3, #0
 80205a0:	9310      	str	r3, [sp, #64]	@ 0x40
 80205a2:	18bd      	adds	r5, r7, r2
 80205a4:	9b08      	ldr	r3, [sp, #32]
 80205a6:	42af      	cmp	r7, r5
 80205a8:	4416      	add	r6, r2
 80205aa:	441e      	add	r6, r3
 80205ac:	463b      	mov	r3, r7
 80205ae:	bfa8      	it	ge
 80205b0:	462b      	movge	r3, r5
 80205b2:	42b3      	cmp	r3, r6
 80205b4:	bfa8      	it	ge
 80205b6:	4633      	movge	r3, r6
 80205b8:	2b00      	cmp	r3, #0
 80205ba:	bfc2      	ittt	gt
 80205bc:	1aed      	subgt	r5, r5, r3
 80205be:	1af6      	subgt	r6, r6, r3
 80205c0:	1aff      	subgt	r7, r7, r3
 80205c2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80205c4:	2b00      	cmp	r3, #0
 80205c6:	dd16      	ble.n	80205f6 <_strtod_l+0x736>
 80205c8:	4641      	mov	r1, r8
 80205ca:	9805      	ldr	r0, [sp, #20]
 80205cc:	461a      	mov	r2, r3
 80205ce:	f7ff f9a5 	bl	801f91c <__pow5mult>
 80205d2:	4680      	mov	r8, r0
 80205d4:	2800      	cmp	r0, #0
 80205d6:	d0ba      	beq.n	802054e <_strtod_l+0x68e>
 80205d8:	4601      	mov	r1, r0
 80205da:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80205dc:	9805      	ldr	r0, [sp, #20]
 80205de:	f7ff f8f3 	bl	801f7c8 <__multiply>
 80205e2:	900e      	str	r0, [sp, #56]	@ 0x38
 80205e4:	2800      	cmp	r0, #0
 80205e6:	f43f ae8a 	beq.w	80202fe <_strtod_l+0x43e>
 80205ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80205ec:	9805      	ldr	r0, [sp, #20]
 80205ee:	f7fe ffd7 	bl	801f5a0 <_Bfree>
 80205f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80205f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80205f6:	2d00      	cmp	r5, #0
 80205f8:	dc1d      	bgt.n	8020636 <_strtod_l+0x776>
 80205fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80205fc:	2b00      	cmp	r3, #0
 80205fe:	dd23      	ble.n	8020648 <_strtod_l+0x788>
 8020600:	4649      	mov	r1, r9
 8020602:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020604:	9805      	ldr	r0, [sp, #20]
 8020606:	f7ff f989 	bl	801f91c <__pow5mult>
 802060a:	4681      	mov	r9, r0
 802060c:	b9e0      	cbnz	r0, 8020648 <_strtod_l+0x788>
 802060e:	f04f 0900 	mov.w	r9, #0
 8020612:	e674      	b.n	80202fe <_strtod_l+0x43e>
 8020614:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8020618:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 802061c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8020620:	35e2      	adds	r5, #226	@ 0xe2
 8020622:	fa01 f305 	lsl.w	r3, r1, r5
 8020626:	9310      	str	r3, [sp, #64]	@ 0x40
 8020628:	9113      	str	r1, [sp, #76]	@ 0x4c
 802062a:	e7ba      	b.n	80205a2 <_strtod_l+0x6e2>
 802062c:	2300      	movs	r3, #0
 802062e:	9310      	str	r3, [sp, #64]	@ 0x40
 8020630:	2301      	movs	r3, #1
 8020632:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020634:	e7b5      	b.n	80205a2 <_strtod_l+0x6e2>
 8020636:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020638:	9805      	ldr	r0, [sp, #20]
 802063a:	462a      	mov	r2, r5
 802063c:	f7ff f9c8 	bl	801f9d0 <__lshift>
 8020640:	901a      	str	r0, [sp, #104]	@ 0x68
 8020642:	2800      	cmp	r0, #0
 8020644:	d1d9      	bne.n	80205fa <_strtod_l+0x73a>
 8020646:	e65a      	b.n	80202fe <_strtod_l+0x43e>
 8020648:	2e00      	cmp	r6, #0
 802064a:	dd07      	ble.n	802065c <_strtod_l+0x79c>
 802064c:	4649      	mov	r1, r9
 802064e:	9805      	ldr	r0, [sp, #20]
 8020650:	4632      	mov	r2, r6
 8020652:	f7ff f9bd 	bl	801f9d0 <__lshift>
 8020656:	4681      	mov	r9, r0
 8020658:	2800      	cmp	r0, #0
 802065a:	d0d8      	beq.n	802060e <_strtod_l+0x74e>
 802065c:	2f00      	cmp	r7, #0
 802065e:	dd08      	ble.n	8020672 <_strtod_l+0x7b2>
 8020660:	4641      	mov	r1, r8
 8020662:	9805      	ldr	r0, [sp, #20]
 8020664:	463a      	mov	r2, r7
 8020666:	f7ff f9b3 	bl	801f9d0 <__lshift>
 802066a:	4680      	mov	r8, r0
 802066c:	2800      	cmp	r0, #0
 802066e:	f43f ae46 	beq.w	80202fe <_strtod_l+0x43e>
 8020672:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020674:	9805      	ldr	r0, [sp, #20]
 8020676:	464a      	mov	r2, r9
 8020678:	f7ff fa32 	bl	801fae0 <__mdiff>
 802067c:	4604      	mov	r4, r0
 802067e:	2800      	cmp	r0, #0
 8020680:	f43f ae3d 	beq.w	80202fe <_strtod_l+0x43e>
 8020684:	68c3      	ldr	r3, [r0, #12]
 8020686:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020688:	2300      	movs	r3, #0
 802068a:	60c3      	str	r3, [r0, #12]
 802068c:	4641      	mov	r1, r8
 802068e:	f7ff fa0b 	bl	801faa8 <__mcmp>
 8020692:	2800      	cmp	r0, #0
 8020694:	da46      	bge.n	8020724 <_strtod_l+0x864>
 8020696:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020698:	ea53 030a 	orrs.w	r3, r3, sl
 802069c:	d16c      	bne.n	8020778 <_strtod_l+0x8b8>
 802069e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80206a2:	2b00      	cmp	r3, #0
 80206a4:	d168      	bne.n	8020778 <_strtod_l+0x8b8>
 80206a6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80206aa:	0d1b      	lsrs	r3, r3, #20
 80206ac:	051b      	lsls	r3, r3, #20
 80206ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80206b2:	d961      	bls.n	8020778 <_strtod_l+0x8b8>
 80206b4:	6963      	ldr	r3, [r4, #20]
 80206b6:	b913      	cbnz	r3, 80206be <_strtod_l+0x7fe>
 80206b8:	6923      	ldr	r3, [r4, #16]
 80206ba:	2b01      	cmp	r3, #1
 80206bc:	dd5c      	ble.n	8020778 <_strtod_l+0x8b8>
 80206be:	4621      	mov	r1, r4
 80206c0:	2201      	movs	r2, #1
 80206c2:	9805      	ldr	r0, [sp, #20]
 80206c4:	f7ff f984 	bl	801f9d0 <__lshift>
 80206c8:	4641      	mov	r1, r8
 80206ca:	4604      	mov	r4, r0
 80206cc:	f7ff f9ec 	bl	801faa8 <__mcmp>
 80206d0:	2800      	cmp	r0, #0
 80206d2:	dd51      	ble.n	8020778 <_strtod_l+0x8b8>
 80206d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80206d8:	9a08      	ldr	r2, [sp, #32]
 80206da:	0d1b      	lsrs	r3, r3, #20
 80206dc:	051b      	lsls	r3, r3, #20
 80206de:	2a00      	cmp	r2, #0
 80206e0:	d06b      	beq.n	80207ba <_strtod_l+0x8fa>
 80206e2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80206e6:	d868      	bhi.n	80207ba <_strtod_l+0x8fa>
 80206e8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80206ec:	f67f ae9d 	bls.w	802042a <_strtod_l+0x56a>
 80206f0:	4b0a      	ldr	r3, [pc, #40]	@ (802071c <_strtod_l+0x85c>)
 80206f2:	4650      	mov	r0, sl
 80206f4:	4659      	mov	r1, fp
 80206f6:	2200      	movs	r2, #0
 80206f8:	f7df ff7e 	bl	80005f8 <__aeabi_dmul>
 80206fc:	4b08      	ldr	r3, [pc, #32]	@ (8020720 <_strtod_l+0x860>)
 80206fe:	400b      	ands	r3, r1
 8020700:	4682      	mov	sl, r0
 8020702:	468b      	mov	fp, r1
 8020704:	2b00      	cmp	r3, #0
 8020706:	f47f ae05 	bne.w	8020314 <_strtod_l+0x454>
 802070a:	9a05      	ldr	r2, [sp, #20]
 802070c:	2322      	movs	r3, #34	@ 0x22
 802070e:	6013      	str	r3, [r2, #0]
 8020710:	e600      	b.n	8020314 <_strtod_l+0x454>
 8020712:	bf00      	nop
 8020714:	08026168 	.word	0x08026168
 8020718:	fffffc02 	.word	0xfffffc02
 802071c:	39500000 	.word	0x39500000
 8020720:	7ff00000 	.word	0x7ff00000
 8020724:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020728:	d165      	bne.n	80207f6 <_strtod_l+0x936>
 802072a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 802072c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020730:	b35a      	cbz	r2, 802078a <_strtod_l+0x8ca>
 8020732:	4a9f      	ldr	r2, [pc, #636]	@ (80209b0 <_strtod_l+0xaf0>)
 8020734:	4293      	cmp	r3, r2
 8020736:	d12b      	bne.n	8020790 <_strtod_l+0x8d0>
 8020738:	9b08      	ldr	r3, [sp, #32]
 802073a:	4651      	mov	r1, sl
 802073c:	b303      	cbz	r3, 8020780 <_strtod_l+0x8c0>
 802073e:	4b9d      	ldr	r3, [pc, #628]	@ (80209b4 <_strtod_l+0xaf4>)
 8020740:	465a      	mov	r2, fp
 8020742:	4013      	ands	r3, r2
 8020744:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8020748:	f04f 32ff 	mov.w	r2, #4294967295
 802074c:	d81b      	bhi.n	8020786 <_strtod_l+0x8c6>
 802074e:	0d1b      	lsrs	r3, r3, #20
 8020750:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8020754:	fa02 f303 	lsl.w	r3, r2, r3
 8020758:	4299      	cmp	r1, r3
 802075a:	d119      	bne.n	8020790 <_strtod_l+0x8d0>
 802075c:	4b96      	ldr	r3, [pc, #600]	@ (80209b8 <_strtod_l+0xaf8>)
 802075e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020760:	429a      	cmp	r2, r3
 8020762:	d102      	bne.n	802076a <_strtod_l+0x8aa>
 8020764:	3101      	adds	r1, #1
 8020766:	f43f adca 	beq.w	80202fe <_strtod_l+0x43e>
 802076a:	4b92      	ldr	r3, [pc, #584]	@ (80209b4 <_strtod_l+0xaf4>)
 802076c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802076e:	401a      	ands	r2, r3
 8020770:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8020774:	f04f 0a00 	mov.w	sl, #0
 8020778:	9b08      	ldr	r3, [sp, #32]
 802077a:	2b00      	cmp	r3, #0
 802077c:	d1b8      	bne.n	80206f0 <_strtod_l+0x830>
 802077e:	e5c9      	b.n	8020314 <_strtod_l+0x454>
 8020780:	f04f 33ff 	mov.w	r3, #4294967295
 8020784:	e7e8      	b.n	8020758 <_strtod_l+0x898>
 8020786:	4613      	mov	r3, r2
 8020788:	e7e6      	b.n	8020758 <_strtod_l+0x898>
 802078a:	ea53 030a 	orrs.w	r3, r3, sl
 802078e:	d0a1      	beq.n	80206d4 <_strtod_l+0x814>
 8020790:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020792:	b1db      	cbz	r3, 80207cc <_strtod_l+0x90c>
 8020794:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020796:	4213      	tst	r3, r2
 8020798:	d0ee      	beq.n	8020778 <_strtod_l+0x8b8>
 802079a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802079c:	9a08      	ldr	r2, [sp, #32]
 802079e:	4650      	mov	r0, sl
 80207a0:	4659      	mov	r1, fp
 80207a2:	b1bb      	cbz	r3, 80207d4 <_strtod_l+0x914>
 80207a4:	f7ff fb6e 	bl	801fe84 <sulp>
 80207a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80207ac:	ec53 2b10 	vmov	r2, r3, d0
 80207b0:	f7df fd6c 	bl	800028c <__adddf3>
 80207b4:	4682      	mov	sl, r0
 80207b6:	468b      	mov	fp, r1
 80207b8:	e7de      	b.n	8020778 <_strtod_l+0x8b8>
 80207ba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80207be:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80207c2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80207c6:	f04f 3aff 	mov.w	sl, #4294967295
 80207ca:	e7d5      	b.n	8020778 <_strtod_l+0x8b8>
 80207cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80207ce:	ea13 0f0a 	tst.w	r3, sl
 80207d2:	e7e1      	b.n	8020798 <_strtod_l+0x8d8>
 80207d4:	f7ff fb56 	bl	801fe84 <sulp>
 80207d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80207dc:	ec53 2b10 	vmov	r2, r3, d0
 80207e0:	f7df fd52 	bl	8000288 <__aeabi_dsub>
 80207e4:	2200      	movs	r2, #0
 80207e6:	2300      	movs	r3, #0
 80207e8:	4682      	mov	sl, r0
 80207ea:	468b      	mov	fp, r1
 80207ec:	f7e0 f96c 	bl	8000ac8 <__aeabi_dcmpeq>
 80207f0:	2800      	cmp	r0, #0
 80207f2:	d0c1      	beq.n	8020778 <_strtod_l+0x8b8>
 80207f4:	e619      	b.n	802042a <_strtod_l+0x56a>
 80207f6:	4641      	mov	r1, r8
 80207f8:	4620      	mov	r0, r4
 80207fa:	f7ff facd 	bl	801fd98 <__ratio>
 80207fe:	ec57 6b10 	vmov	r6, r7, d0
 8020802:	2200      	movs	r2, #0
 8020804:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8020808:	4630      	mov	r0, r6
 802080a:	4639      	mov	r1, r7
 802080c:	f7e0 f970 	bl	8000af0 <__aeabi_dcmple>
 8020810:	2800      	cmp	r0, #0
 8020812:	d06f      	beq.n	80208f4 <_strtod_l+0xa34>
 8020814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020816:	2b00      	cmp	r3, #0
 8020818:	d17a      	bne.n	8020910 <_strtod_l+0xa50>
 802081a:	f1ba 0f00 	cmp.w	sl, #0
 802081e:	d158      	bne.n	80208d2 <_strtod_l+0xa12>
 8020820:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020822:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020826:	2b00      	cmp	r3, #0
 8020828:	d15a      	bne.n	80208e0 <_strtod_l+0xa20>
 802082a:	4b64      	ldr	r3, [pc, #400]	@ (80209bc <_strtod_l+0xafc>)
 802082c:	2200      	movs	r2, #0
 802082e:	4630      	mov	r0, r6
 8020830:	4639      	mov	r1, r7
 8020832:	f7e0 f953 	bl	8000adc <__aeabi_dcmplt>
 8020836:	2800      	cmp	r0, #0
 8020838:	d159      	bne.n	80208ee <_strtod_l+0xa2e>
 802083a:	4630      	mov	r0, r6
 802083c:	4639      	mov	r1, r7
 802083e:	4b60      	ldr	r3, [pc, #384]	@ (80209c0 <_strtod_l+0xb00>)
 8020840:	2200      	movs	r2, #0
 8020842:	f7df fed9 	bl	80005f8 <__aeabi_dmul>
 8020846:	4606      	mov	r6, r0
 8020848:	460f      	mov	r7, r1
 802084a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 802084e:	9606      	str	r6, [sp, #24]
 8020850:	9307      	str	r3, [sp, #28]
 8020852:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020856:	4d57      	ldr	r5, [pc, #348]	@ (80209b4 <_strtod_l+0xaf4>)
 8020858:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 802085c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802085e:	401d      	ands	r5, r3
 8020860:	4b58      	ldr	r3, [pc, #352]	@ (80209c4 <_strtod_l+0xb04>)
 8020862:	429d      	cmp	r5, r3
 8020864:	f040 80b2 	bne.w	80209cc <_strtod_l+0xb0c>
 8020868:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802086a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 802086e:	ec4b ab10 	vmov	d0, sl, fp
 8020872:	f7ff f9c9 	bl	801fc08 <__ulp>
 8020876:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 802087a:	ec51 0b10 	vmov	r0, r1, d0
 802087e:	f7df febb 	bl	80005f8 <__aeabi_dmul>
 8020882:	4652      	mov	r2, sl
 8020884:	465b      	mov	r3, fp
 8020886:	f7df fd01 	bl	800028c <__adddf3>
 802088a:	460b      	mov	r3, r1
 802088c:	4949      	ldr	r1, [pc, #292]	@ (80209b4 <_strtod_l+0xaf4>)
 802088e:	4a4e      	ldr	r2, [pc, #312]	@ (80209c8 <_strtod_l+0xb08>)
 8020890:	4019      	ands	r1, r3
 8020892:	4291      	cmp	r1, r2
 8020894:	4682      	mov	sl, r0
 8020896:	d942      	bls.n	802091e <_strtod_l+0xa5e>
 8020898:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 802089a:	4b47      	ldr	r3, [pc, #284]	@ (80209b8 <_strtod_l+0xaf8>)
 802089c:	429a      	cmp	r2, r3
 802089e:	d103      	bne.n	80208a8 <_strtod_l+0x9e8>
 80208a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80208a2:	3301      	adds	r3, #1
 80208a4:	f43f ad2b 	beq.w	80202fe <_strtod_l+0x43e>
 80208a8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80209b8 <_strtod_l+0xaf8>
 80208ac:	f04f 3aff 	mov.w	sl, #4294967295
 80208b0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80208b2:	9805      	ldr	r0, [sp, #20]
 80208b4:	f7fe fe74 	bl	801f5a0 <_Bfree>
 80208b8:	9805      	ldr	r0, [sp, #20]
 80208ba:	4649      	mov	r1, r9
 80208bc:	f7fe fe70 	bl	801f5a0 <_Bfree>
 80208c0:	9805      	ldr	r0, [sp, #20]
 80208c2:	4641      	mov	r1, r8
 80208c4:	f7fe fe6c 	bl	801f5a0 <_Bfree>
 80208c8:	9805      	ldr	r0, [sp, #20]
 80208ca:	4621      	mov	r1, r4
 80208cc:	f7fe fe68 	bl	801f5a0 <_Bfree>
 80208d0:	e618      	b.n	8020504 <_strtod_l+0x644>
 80208d2:	f1ba 0f01 	cmp.w	sl, #1
 80208d6:	d103      	bne.n	80208e0 <_strtod_l+0xa20>
 80208d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80208da:	2b00      	cmp	r3, #0
 80208dc:	f43f ada5 	beq.w	802042a <_strtod_l+0x56a>
 80208e0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8020990 <_strtod_l+0xad0>
 80208e4:	4f35      	ldr	r7, [pc, #212]	@ (80209bc <_strtod_l+0xafc>)
 80208e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80208ea:	2600      	movs	r6, #0
 80208ec:	e7b1      	b.n	8020852 <_strtod_l+0x992>
 80208ee:	4f34      	ldr	r7, [pc, #208]	@ (80209c0 <_strtod_l+0xb00>)
 80208f0:	2600      	movs	r6, #0
 80208f2:	e7aa      	b.n	802084a <_strtod_l+0x98a>
 80208f4:	4b32      	ldr	r3, [pc, #200]	@ (80209c0 <_strtod_l+0xb00>)
 80208f6:	4630      	mov	r0, r6
 80208f8:	4639      	mov	r1, r7
 80208fa:	2200      	movs	r2, #0
 80208fc:	f7df fe7c 	bl	80005f8 <__aeabi_dmul>
 8020900:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020902:	4606      	mov	r6, r0
 8020904:	460f      	mov	r7, r1
 8020906:	2b00      	cmp	r3, #0
 8020908:	d09f      	beq.n	802084a <_strtod_l+0x98a>
 802090a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 802090e:	e7a0      	b.n	8020852 <_strtod_l+0x992>
 8020910:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8020998 <_strtod_l+0xad8>
 8020914:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020918:	ec57 6b17 	vmov	r6, r7, d7
 802091c:	e799      	b.n	8020852 <_strtod_l+0x992>
 802091e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8020922:	9b08      	ldr	r3, [sp, #32]
 8020924:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020928:	2b00      	cmp	r3, #0
 802092a:	d1c1      	bne.n	80208b0 <_strtod_l+0x9f0>
 802092c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020930:	0d1b      	lsrs	r3, r3, #20
 8020932:	051b      	lsls	r3, r3, #20
 8020934:	429d      	cmp	r5, r3
 8020936:	d1bb      	bne.n	80208b0 <_strtod_l+0x9f0>
 8020938:	4630      	mov	r0, r6
 802093a:	4639      	mov	r1, r7
 802093c:	f7e0 f9bc 	bl	8000cb8 <__aeabi_d2lz>
 8020940:	f7df fe2c 	bl	800059c <__aeabi_l2d>
 8020944:	4602      	mov	r2, r0
 8020946:	460b      	mov	r3, r1
 8020948:	4630      	mov	r0, r6
 802094a:	4639      	mov	r1, r7
 802094c:	f7df fc9c 	bl	8000288 <__aeabi_dsub>
 8020950:	460b      	mov	r3, r1
 8020952:	4602      	mov	r2, r0
 8020954:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8020958:	f3cb 0613 	ubfx	r6, fp, #0, #20
 802095c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802095e:	ea46 060a 	orr.w	r6, r6, sl
 8020962:	431e      	orrs	r6, r3
 8020964:	d06f      	beq.n	8020a46 <_strtod_l+0xb86>
 8020966:	a30e      	add	r3, pc, #56	@ (adr r3, 80209a0 <_strtod_l+0xae0>)
 8020968:	e9d3 2300 	ldrd	r2, r3, [r3]
 802096c:	f7e0 f8b6 	bl	8000adc <__aeabi_dcmplt>
 8020970:	2800      	cmp	r0, #0
 8020972:	f47f accf 	bne.w	8020314 <_strtod_l+0x454>
 8020976:	a30c      	add	r3, pc, #48	@ (adr r3, 80209a8 <_strtod_l+0xae8>)
 8020978:	e9d3 2300 	ldrd	r2, r3, [r3]
 802097c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020980:	f7e0 f8ca 	bl	8000b18 <__aeabi_dcmpgt>
 8020984:	2800      	cmp	r0, #0
 8020986:	d093      	beq.n	80208b0 <_strtod_l+0x9f0>
 8020988:	e4c4      	b.n	8020314 <_strtod_l+0x454>
 802098a:	bf00      	nop
 802098c:	f3af 8000 	nop.w
 8020990:	00000000 	.word	0x00000000
 8020994:	bff00000 	.word	0xbff00000
 8020998:	00000000 	.word	0x00000000
 802099c:	3ff00000 	.word	0x3ff00000
 80209a0:	94a03595 	.word	0x94a03595
 80209a4:	3fdfffff 	.word	0x3fdfffff
 80209a8:	35afe535 	.word	0x35afe535
 80209ac:	3fe00000 	.word	0x3fe00000
 80209b0:	000fffff 	.word	0x000fffff
 80209b4:	7ff00000 	.word	0x7ff00000
 80209b8:	7fefffff 	.word	0x7fefffff
 80209bc:	3ff00000 	.word	0x3ff00000
 80209c0:	3fe00000 	.word	0x3fe00000
 80209c4:	7fe00000 	.word	0x7fe00000
 80209c8:	7c9fffff 	.word	0x7c9fffff
 80209cc:	9b08      	ldr	r3, [sp, #32]
 80209ce:	b323      	cbz	r3, 8020a1a <_strtod_l+0xb5a>
 80209d0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80209d4:	d821      	bhi.n	8020a1a <_strtod_l+0xb5a>
 80209d6:	a328      	add	r3, pc, #160	@ (adr r3, 8020a78 <_strtod_l+0xbb8>)
 80209d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80209dc:	4630      	mov	r0, r6
 80209de:	4639      	mov	r1, r7
 80209e0:	f7e0 f886 	bl	8000af0 <__aeabi_dcmple>
 80209e4:	b1a0      	cbz	r0, 8020a10 <_strtod_l+0xb50>
 80209e6:	4639      	mov	r1, r7
 80209e8:	4630      	mov	r0, r6
 80209ea:	f7e0 f8dd 	bl	8000ba8 <__aeabi_d2uiz>
 80209ee:	2801      	cmp	r0, #1
 80209f0:	bf38      	it	cc
 80209f2:	2001      	movcc	r0, #1
 80209f4:	f7df fd86 	bl	8000504 <__aeabi_ui2d>
 80209f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80209fa:	4606      	mov	r6, r0
 80209fc:	460f      	mov	r7, r1
 80209fe:	b9fb      	cbnz	r3, 8020a40 <_strtod_l+0xb80>
 8020a00:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020a04:	9014      	str	r0, [sp, #80]	@ 0x50
 8020a06:	9315      	str	r3, [sp, #84]	@ 0x54
 8020a08:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8020a0c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8020a10:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020a12:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8020a16:	1b5b      	subs	r3, r3, r5
 8020a18:	9311      	str	r3, [sp, #68]	@ 0x44
 8020a1a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8020a1e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8020a22:	f7ff f8f1 	bl	801fc08 <__ulp>
 8020a26:	4650      	mov	r0, sl
 8020a28:	ec53 2b10 	vmov	r2, r3, d0
 8020a2c:	4659      	mov	r1, fp
 8020a2e:	f7df fde3 	bl	80005f8 <__aeabi_dmul>
 8020a32:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8020a36:	f7df fc29 	bl	800028c <__adddf3>
 8020a3a:	4682      	mov	sl, r0
 8020a3c:	468b      	mov	fp, r1
 8020a3e:	e770      	b.n	8020922 <_strtod_l+0xa62>
 8020a40:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8020a44:	e7e0      	b.n	8020a08 <_strtod_l+0xb48>
 8020a46:	a30e      	add	r3, pc, #56	@ (adr r3, 8020a80 <_strtod_l+0xbc0>)
 8020a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020a4c:	f7e0 f846 	bl	8000adc <__aeabi_dcmplt>
 8020a50:	e798      	b.n	8020984 <_strtod_l+0xac4>
 8020a52:	2300      	movs	r3, #0
 8020a54:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020a56:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8020a58:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020a5a:	6013      	str	r3, [r2, #0]
 8020a5c:	f7ff ba6d 	b.w	801ff3a <_strtod_l+0x7a>
 8020a60:	2a65      	cmp	r2, #101	@ 0x65
 8020a62:	f43f ab66 	beq.w	8020132 <_strtod_l+0x272>
 8020a66:	2a45      	cmp	r2, #69	@ 0x45
 8020a68:	f43f ab63 	beq.w	8020132 <_strtod_l+0x272>
 8020a6c:	2301      	movs	r3, #1
 8020a6e:	f7ff bb9e 	b.w	80201ae <_strtod_l+0x2ee>
 8020a72:	bf00      	nop
 8020a74:	f3af 8000 	nop.w
 8020a78:	ffc00000 	.word	0xffc00000
 8020a7c:	41dfffff 	.word	0x41dfffff
 8020a80:	94a03595 	.word	0x94a03595
 8020a84:	3fcfffff 	.word	0x3fcfffff

08020a88 <_strtod_r>:
 8020a88:	4b01      	ldr	r3, [pc, #4]	@ (8020a90 <_strtod_r+0x8>)
 8020a8a:	f7ff ba19 	b.w	801fec0 <_strtod_l>
 8020a8e:	bf00      	nop
 8020a90:	200000b0 	.word	0x200000b0

08020a94 <__ssputs_r>:
 8020a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020a98:	688e      	ldr	r6, [r1, #8]
 8020a9a:	461f      	mov	r7, r3
 8020a9c:	42be      	cmp	r6, r7
 8020a9e:	680b      	ldr	r3, [r1, #0]
 8020aa0:	4682      	mov	sl, r0
 8020aa2:	460c      	mov	r4, r1
 8020aa4:	4690      	mov	r8, r2
 8020aa6:	d82d      	bhi.n	8020b04 <__ssputs_r+0x70>
 8020aa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020aac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8020ab0:	d026      	beq.n	8020b00 <__ssputs_r+0x6c>
 8020ab2:	6965      	ldr	r5, [r4, #20]
 8020ab4:	6909      	ldr	r1, [r1, #16]
 8020ab6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020aba:	eba3 0901 	sub.w	r9, r3, r1
 8020abe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020ac2:	1c7b      	adds	r3, r7, #1
 8020ac4:	444b      	add	r3, r9
 8020ac6:	106d      	asrs	r5, r5, #1
 8020ac8:	429d      	cmp	r5, r3
 8020aca:	bf38      	it	cc
 8020acc:	461d      	movcc	r5, r3
 8020ace:	0553      	lsls	r3, r2, #21
 8020ad0:	d527      	bpl.n	8020b22 <__ssputs_r+0x8e>
 8020ad2:	4629      	mov	r1, r5
 8020ad4:	f7fe fc98 	bl	801f408 <_malloc_r>
 8020ad8:	4606      	mov	r6, r0
 8020ada:	b360      	cbz	r0, 8020b36 <__ssputs_r+0xa2>
 8020adc:	6921      	ldr	r1, [r4, #16]
 8020ade:	464a      	mov	r2, r9
 8020ae0:	f7fd fd9d 	bl	801e61e <memcpy>
 8020ae4:	89a3      	ldrh	r3, [r4, #12]
 8020ae6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8020aea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020aee:	81a3      	strh	r3, [r4, #12]
 8020af0:	6126      	str	r6, [r4, #16]
 8020af2:	6165      	str	r5, [r4, #20]
 8020af4:	444e      	add	r6, r9
 8020af6:	eba5 0509 	sub.w	r5, r5, r9
 8020afa:	6026      	str	r6, [r4, #0]
 8020afc:	60a5      	str	r5, [r4, #8]
 8020afe:	463e      	mov	r6, r7
 8020b00:	42be      	cmp	r6, r7
 8020b02:	d900      	bls.n	8020b06 <__ssputs_r+0x72>
 8020b04:	463e      	mov	r6, r7
 8020b06:	6820      	ldr	r0, [r4, #0]
 8020b08:	4632      	mov	r2, r6
 8020b0a:	4641      	mov	r1, r8
 8020b0c:	f7fd fc6b 	bl	801e3e6 <memmove>
 8020b10:	68a3      	ldr	r3, [r4, #8]
 8020b12:	1b9b      	subs	r3, r3, r6
 8020b14:	60a3      	str	r3, [r4, #8]
 8020b16:	6823      	ldr	r3, [r4, #0]
 8020b18:	4433      	add	r3, r6
 8020b1a:	6023      	str	r3, [r4, #0]
 8020b1c:	2000      	movs	r0, #0
 8020b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020b22:	462a      	mov	r2, r5
 8020b24:	f000 fe75 	bl	8021812 <_realloc_r>
 8020b28:	4606      	mov	r6, r0
 8020b2a:	2800      	cmp	r0, #0
 8020b2c:	d1e0      	bne.n	8020af0 <__ssputs_r+0x5c>
 8020b2e:	6921      	ldr	r1, [r4, #16]
 8020b30:	4650      	mov	r0, sl
 8020b32:	f7fe fbf5 	bl	801f320 <_free_r>
 8020b36:	230c      	movs	r3, #12
 8020b38:	f8ca 3000 	str.w	r3, [sl]
 8020b3c:	89a3      	ldrh	r3, [r4, #12]
 8020b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020b42:	81a3      	strh	r3, [r4, #12]
 8020b44:	f04f 30ff 	mov.w	r0, #4294967295
 8020b48:	e7e9      	b.n	8020b1e <__ssputs_r+0x8a>
	...

08020b4c <_svfiprintf_r>:
 8020b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b50:	4698      	mov	r8, r3
 8020b52:	898b      	ldrh	r3, [r1, #12]
 8020b54:	061b      	lsls	r3, r3, #24
 8020b56:	b09d      	sub	sp, #116	@ 0x74
 8020b58:	4607      	mov	r7, r0
 8020b5a:	460d      	mov	r5, r1
 8020b5c:	4614      	mov	r4, r2
 8020b5e:	d510      	bpl.n	8020b82 <_svfiprintf_r+0x36>
 8020b60:	690b      	ldr	r3, [r1, #16]
 8020b62:	b973      	cbnz	r3, 8020b82 <_svfiprintf_r+0x36>
 8020b64:	2140      	movs	r1, #64	@ 0x40
 8020b66:	f7fe fc4f 	bl	801f408 <_malloc_r>
 8020b6a:	6028      	str	r0, [r5, #0]
 8020b6c:	6128      	str	r0, [r5, #16]
 8020b6e:	b930      	cbnz	r0, 8020b7e <_svfiprintf_r+0x32>
 8020b70:	230c      	movs	r3, #12
 8020b72:	603b      	str	r3, [r7, #0]
 8020b74:	f04f 30ff 	mov.w	r0, #4294967295
 8020b78:	b01d      	add	sp, #116	@ 0x74
 8020b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020b7e:	2340      	movs	r3, #64	@ 0x40
 8020b80:	616b      	str	r3, [r5, #20]
 8020b82:	2300      	movs	r3, #0
 8020b84:	9309      	str	r3, [sp, #36]	@ 0x24
 8020b86:	2320      	movs	r3, #32
 8020b88:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020b8c:	f8cd 800c 	str.w	r8, [sp, #12]
 8020b90:	2330      	movs	r3, #48	@ 0x30
 8020b92:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8020d30 <_svfiprintf_r+0x1e4>
 8020b96:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020b9a:	f04f 0901 	mov.w	r9, #1
 8020b9e:	4623      	mov	r3, r4
 8020ba0:	469a      	mov	sl, r3
 8020ba2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020ba6:	b10a      	cbz	r2, 8020bac <_svfiprintf_r+0x60>
 8020ba8:	2a25      	cmp	r2, #37	@ 0x25
 8020baa:	d1f9      	bne.n	8020ba0 <_svfiprintf_r+0x54>
 8020bac:	ebba 0b04 	subs.w	fp, sl, r4
 8020bb0:	d00b      	beq.n	8020bca <_svfiprintf_r+0x7e>
 8020bb2:	465b      	mov	r3, fp
 8020bb4:	4622      	mov	r2, r4
 8020bb6:	4629      	mov	r1, r5
 8020bb8:	4638      	mov	r0, r7
 8020bba:	f7ff ff6b 	bl	8020a94 <__ssputs_r>
 8020bbe:	3001      	adds	r0, #1
 8020bc0:	f000 80a7 	beq.w	8020d12 <_svfiprintf_r+0x1c6>
 8020bc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020bc6:	445a      	add	r2, fp
 8020bc8:	9209      	str	r2, [sp, #36]	@ 0x24
 8020bca:	f89a 3000 	ldrb.w	r3, [sl]
 8020bce:	2b00      	cmp	r3, #0
 8020bd0:	f000 809f 	beq.w	8020d12 <_svfiprintf_r+0x1c6>
 8020bd4:	2300      	movs	r3, #0
 8020bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8020bda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020bde:	f10a 0a01 	add.w	sl, sl, #1
 8020be2:	9304      	str	r3, [sp, #16]
 8020be4:	9307      	str	r3, [sp, #28]
 8020be6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020bea:	931a      	str	r3, [sp, #104]	@ 0x68
 8020bec:	4654      	mov	r4, sl
 8020bee:	2205      	movs	r2, #5
 8020bf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020bf4:	484e      	ldr	r0, [pc, #312]	@ (8020d30 <_svfiprintf_r+0x1e4>)
 8020bf6:	f7df faeb 	bl	80001d0 <memchr>
 8020bfa:	9a04      	ldr	r2, [sp, #16]
 8020bfc:	b9d8      	cbnz	r0, 8020c36 <_svfiprintf_r+0xea>
 8020bfe:	06d0      	lsls	r0, r2, #27
 8020c00:	bf44      	itt	mi
 8020c02:	2320      	movmi	r3, #32
 8020c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020c08:	0711      	lsls	r1, r2, #28
 8020c0a:	bf44      	itt	mi
 8020c0c:	232b      	movmi	r3, #43	@ 0x2b
 8020c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020c12:	f89a 3000 	ldrb.w	r3, [sl]
 8020c16:	2b2a      	cmp	r3, #42	@ 0x2a
 8020c18:	d015      	beq.n	8020c46 <_svfiprintf_r+0xfa>
 8020c1a:	9a07      	ldr	r2, [sp, #28]
 8020c1c:	4654      	mov	r4, sl
 8020c1e:	2000      	movs	r0, #0
 8020c20:	f04f 0c0a 	mov.w	ip, #10
 8020c24:	4621      	mov	r1, r4
 8020c26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020c2a:	3b30      	subs	r3, #48	@ 0x30
 8020c2c:	2b09      	cmp	r3, #9
 8020c2e:	d94b      	bls.n	8020cc8 <_svfiprintf_r+0x17c>
 8020c30:	b1b0      	cbz	r0, 8020c60 <_svfiprintf_r+0x114>
 8020c32:	9207      	str	r2, [sp, #28]
 8020c34:	e014      	b.n	8020c60 <_svfiprintf_r+0x114>
 8020c36:	eba0 0308 	sub.w	r3, r0, r8
 8020c3a:	fa09 f303 	lsl.w	r3, r9, r3
 8020c3e:	4313      	orrs	r3, r2
 8020c40:	9304      	str	r3, [sp, #16]
 8020c42:	46a2      	mov	sl, r4
 8020c44:	e7d2      	b.n	8020bec <_svfiprintf_r+0xa0>
 8020c46:	9b03      	ldr	r3, [sp, #12]
 8020c48:	1d19      	adds	r1, r3, #4
 8020c4a:	681b      	ldr	r3, [r3, #0]
 8020c4c:	9103      	str	r1, [sp, #12]
 8020c4e:	2b00      	cmp	r3, #0
 8020c50:	bfbb      	ittet	lt
 8020c52:	425b      	neglt	r3, r3
 8020c54:	f042 0202 	orrlt.w	r2, r2, #2
 8020c58:	9307      	strge	r3, [sp, #28]
 8020c5a:	9307      	strlt	r3, [sp, #28]
 8020c5c:	bfb8      	it	lt
 8020c5e:	9204      	strlt	r2, [sp, #16]
 8020c60:	7823      	ldrb	r3, [r4, #0]
 8020c62:	2b2e      	cmp	r3, #46	@ 0x2e
 8020c64:	d10a      	bne.n	8020c7c <_svfiprintf_r+0x130>
 8020c66:	7863      	ldrb	r3, [r4, #1]
 8020c68:	2b2a      	cmp	r3, #42	@ 0x2a
 8020c6a:	d132      	bne.n	8020cd2 <_svfiprintf_r+0x186>
 8020c6c:	9b03      	ldr	r3, [sp, #12]
 8020c6e:	1d1a      	adds	r2, r3, #4
 8020c70:	681b      	ldr	r3, [r3, #0]
 8020c72:	9203      	str	r2, [sp, #12]
 8020c74:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020c78:	3402      	adds	r4, #2
 8020c7a:	9305      	str	r3, [sp, #20]
 8020c7c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8020d40 <_svfiprintf_r+0x1f4>
 8020c80:	7821      	ldrb	r1, [r4, #0]
 8020c82:	2203      	movs	r2, #3
 8020c84:	4650      	mov	r0, sl
 8020c86:	f7df faa3 	bl	80001d0 <memchr>
 8020c8a:	b138      	cbz	r0, 8020c9c <_svfiprintf_r+0x150>
 8020c8c:	9b04      	ldr	r3, [sp, #16]
 8020c8e:	eba0 000a 	sub.w	r0, r0, sl
 8020c92:	2240      	movs	r2, #64	@ 0x40
 8020c94:	4082      	lsls	r2, r0
 8020c96:	4313      	orrs	r3, r2
 8020c98:	3401      	adds	r4, #1
 8020c9a:	9304      	str	r3, [sp, #16]
 8020c9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020ca0:	4824      	ldr	r0, [pc, #144]	@ (8020d34 <_svfiprintf_r+0x1e8>)
 8020ca2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020ca6:	2206      	movs	r2, #6
 8020ca8:	f7df fa92 	bl	80001d0 <memchr>
 8020cac:	2800      	cmp	r0, #0
 8020cae:	d036      	beq.n	8020d1e <_svfiprintf_r+0x1d2>
 8020cb0:	4b21      	ldr	r3, [pc, #132]	@ (8020d38 <_svfiprintf_r+0x1ec>)
 8020cb2:	bb1b      	cbnz	r3, 8020cfc <_svfiprintf_r+0x1b0>
 8020cb4:	9b03      	ldr	r3, [sp, #12]
 8020cb6:	3307      	adds	r3, #7
 8020cb8:	f023 0307 	bic.w	r3, r3, #7
 8020cbc:	3308      	adds	r3, #8
 8020cbe:	9303      	str	r3, [sp, #12]
 8020cc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020cc2:	4433      	add	r3, r6
 8020cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8020cc6:	e76a      	b.n	8020b9e <_svfiprintf_r+0x52>
 8020cc8:	fb0c 3202 	mla	r2, ip, r2, r3
 8020ccc:	460c      	mov	r4, r1
 8020cce:	2001      	movs	r0, #1
 8020cd0:	e7a8      	b.n	8020c24 <_svfiprintf_r+0xd8>
 8020cd2:	2300      	movs	r3, #0
 8020cd4:	3401      	adds	r4, #1
 8020cd6:	9305      	str	r3, [sp, #20]
 8020cd8:	4619      	mov	r1, r3
 8020cda:	f04f 0c0a 	mov.w	ip, #10
 8020cde:	4620      	mov	r0, r4
 8020ce0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020ce4:	3a30      	subs	r2, #48	@ 0x30
 8020ce6:	2a09      	cmp	r2, #9
 8020ce8:	d903      	bls.n	8020cf2 <_svfiprintf_r+0x1a6>
 8020cea:	2b00      	cmp	r3, #0
 8020cec:	d0c6      	beq.n	8020c7c <_svfiprintf_r+0x130>
 8020cee:	9105      	str	r1, [sp, #20]
 8020cf0:	e7c4      	b.n	8020c7c <_svfiprintf_r+0x130>
 8020cf2:	fb0c 2101 	mla	r1, ip, r1, r2
 8020cf6:	4604      	mov	r4, r0
 8020cf8:	2301      	movs	r3, #1
 8020cfa:	e7f0      	b.n	8020cde <_svfiprintf_r+0x192>
 8020cfc:	ab03      	add	r3, sp, #12
 8020cfe:	9300      	str	r3, [sp, #0]
 8020d00:	462a      	mov	r2, r5
 8020d02:	4b0e      	ldr	r3, [pc, #56]	@ (8020d3c <_svfiprintf_r+0x1f0>)
 8020d04:	a904      	add	r1, sp, #16
 8020d06:	4638      	mov	r0, r7
 8020d08:	f7fc fb9a 	bl	801d440 <_printf_float>
 8020d0c:	1c42      	adds	r2, r0, #1
 8020d0e:	4606      	mov	r6, r0
 8020d10:	d1d6      	bne.n	8020cc0 <_svfiprintf_r+0x174>
 8020d12:	89ab      	ldrh	r3, [r5, #12]
 8020d14:	065b      	lsls	r3, r3, #25
 8020d16:	f53f af2d 	bmi.w	8020b74 <_svfiprintf_r+0x28>
 8020d1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020d1c:	e72c      	b.n	8020b78 <_svfiprintf_r+0x2c>
 8020d1e:	ab03      	add	r3, sp, #12
 8020d20:	9300      	str	r3, [sp, #0]
 8020d22:	462a      	mov	r2, r5
 8020d24:	4b05      	ldr	r3, [pc, #20]	@ (8020d3c <_svfiprintf_r+0x1f0>)
 8020d26:	a904      	add	r1, sp, #16
 8020d28:	4638      	mov	r0, r7
 8020d2a:	f7fc fe21 	bl	801d970 <_printf_i>
 8020d2e:	e7ed      	b.n	8020d0c <_svfiprintf_r+0x1c0>
 8020d30:	08026190 	.word	0x08026190
 8020d34:	0802619a 	.word	0x0802619a
 8020d38:	0801d441 	.word	0x0801d441
 8020d3c:	08020a95 	.word	0x08020a95
 8020d40:	08026196 	.word	0x08026196

08020d44 <__sfputc_r>:
 8020d44:	6893      	ldr	r3, [r2, #8]
 8020d46:	3b01      	subs	r3, #1
 8020d48:	2b00      	cmp	r3, #0
 8020d4a:	b410      	push	{r4}
 8020d4c:	6093      	str	r3, [r2, #8]
 8020d4e:	da08      	bge.n	8020d62 <__sfputc_r+0x1e>
 8020d50:	6994      	ldr	r4, [r2, #24]
 8020d52:	42a3      	cmp	r3, r4
 8020d54:	db01      	blt.n	8020d5a <__sfputc_r+0x16>
 8020d56:	290a      	cmp	r1, #10
 8020d58:	d103      	bne.n	8020d62 <__sfputc_r+0x1e>
 8020d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020d5e:	f000 b945 	b.w	8020fec <__swbuf_r>
 8020d62:	6813      	ldr	r3, [r2, #0]
 8020d64:	1c58      	adds	r0, r3, #1
 8020d66:	6010      	str	r0, [r2, #0]
 8020d68:	7019      	strb	r1, [r3, #0]
 8020d6a:	4608      	mov	r0, r1
 8020d6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8020d70:	4770      	bx	lr

08020d72 <__sfputs_r>:
 8020d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020d74:	4606      	mov	r6, r0
 8020d76:	460f      	mov	r7, r1
 8020d78:	4614      	mov	r4, r2
 8020d7a:	18d5      	adds	r5, r2, r3
 8020d7c:	42ac      	cmp	r4, r5
 8020d7e:	d101      	bne.n	8020d84 <__sfputs_r+0x12>
 8020d80:	2000      	movs	r0, #0
 8020d82:	e007      	b.n	8020d94 <__sfputs_r+0x22>
 8020d84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020d88:	463a      	mov	r2, r7
 8020d8a:	4630      	mov	r0, r6
 8020d8c:	f7ff ffda 	bl	8020d44 <__sfputc_r>
 8020d90:	1c43      	adds	r3, r0, #1
 8020d92:	d1f3      	bne.n	8020d7c <__sfputs_r+0xa>
 8020d94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020d98 <_vfiprintf_r>:
 8020d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020d9c:	460d      	mov	r5, r1
 8020d9e:	b09d      	sub	sp, #116	@ 0x74
 8020da0:	4614      	mov	r4, r2
 8020da2:	4698      	mov	r8, r3
 8020da4:	4606      	mov	r6, r0
 8020da6:	b118      	cbz	r0, 8020db0 <_vfiprintf_r+0x18>
 8020da8:	6a03      	ldr	r3, [r0, #32]
 8020daa:	b90b      	cbnz	r3, 8020db0 <_vfiprintf_r+0x18>
 8020dac:	f7fd fa60 	bl	801e270 <__sinit>
 8020db0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020db2:	07d9      	lsls	r1, r3, #31
 8020db4:	d405      	bmi.n	8020dc2 <_vfiprintf_r+0x2a>
 8020db6:	89ab      	ldrh	r3, [r5, #12]
 8020db8:	059a      	lsls	r2, r3, #22
 8020dba:	d402      	bmi.n	8020dc2 <_vfiprintf_r+0x2a>
 8020dbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020dbe:	f7fd fc24 	bl	801e60a <__retarget_lock_acquire_recursive>
 8020dc2:	89ab      	ldrh	r3, [r5, #12]
 8020dc4:	071b      	lsls	r3, r3, #28
 8020dc6:	d501      	bpl.n	8020dcc <_vfiprintf_r+0x34>
 8020dc8:	692b      	ldr	r3, [r5, #16]
 8020dca:	b99b      	cbnz	r3, 8020df4 <_vfiprintf_r+0x5c>
 8020dcc:	4629      	mov	r1, r5
 8020dce:	4630      	mov	r0, r6
 8020dd0:	f000 f94a 	bl	8021068 <__swsetup_r>
 8020dd4:	b170      	cbz	r0, 8020df4 <_vfiprintf_r+0x5c>
 8020dd6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020dd8:	07dc      	lsls	r4, r3, #31
 8020dda:	d504      	bpl.n	8020de6 <_vfiprintf_r+0x4e>
 8020ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8020de0:	b01d      	add	sp, #116	@ 0x74
 8020de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020de6:	89ab      	ldrh	r3, [r5, #12]
 8020de8:	0598      	lsls	r0, r3, #22
 8020dea:	d4f7      	bmi.n	8020ddc <_vfiprintf_r+0x44>
 8020dec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020dee:	f7fd fc0d 	bl	801e60c <__retarget_lock_release_recursive>
 8020df2:	e7f3      	b.n	8020ddc <_vfiprintf_r+0x44>
 8020df4:	2300      	movs	r3, #0
 8020df6:	9309      	str	r3, [sp, #36]	@ 0x24
 8020df8:	2320      	movs	r3, #32
 8020dfa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020dfe:	f8cd 800c 	str.w	r8, [sp, #12]
 8020e02:	2330      	movs	r3, #48	@ 0x30
 8020e04:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8020fb4 <_vfiprintf_r+0x21c>
 8020e08:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020e0c:	f04f 0901 	mov.w	r9, #1
 8020e10:	4623      	mov	r3, r4
 8020e12:	469a      	mov	sl, r3
 8020e14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020e18:	b10a      	cbz	r2, 8020e1e <_vfiprintf_r+0x86>
 8020e1a:	2a25      	cmp	r2, #37	@ 0x25
 8020e1c:	d1f9      	bne.n	8020e12 <_vfiprintf_r+0x7a>
 8020e1e:	ebba 0b04 	subs.w	fp, sl, r4
 8020e22:	d00b      	beq.n	8020e3c <_vfiprintf_r+0xa4>
 8020e24:	465b      	mov	r3, fp
 8020e26:	4622      	mov	r2, r4
 8020e28:	4629      	mov	r1, r5
 8020e2a:	4630      	mov	r0, r6
 8020e2c:	f7ff ffa1 	bl	8020d72 <__sfputs_r>
 8020e30:	3001      	adds	r0, #1
 8020e32:	f000 80a7 	beq.w	8020f84 <_vfiprintf_r+0x1ec>
 8020e36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020e38:	445a      	add	r2, fp
 8020e3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8020e3c:	f89a 3000 	ldrb.w	r3, [sl]
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	f000 809f 	beq.w	8020f84 <_vfiprintf_r+0x1ec>
 8020e46:	2300      	movs	r3, #0
 8020e48:	f04f 32ff 	mov.w	r2, #4294967295
 8020e4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020e50:	f10a 0a01 	add.w	sl, sl, #1
 8020e54:	9304      	str	r3, [sp, #16]
 8020e56:	9307      	str	r3, [sp, #28]
 8020e58:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020e5c:	931a      	str	r3, [sp, #104]	@ 0x68
 8020e5e:	4654      	mov	r4, sl
 8020e60:	2205      	movs	r2, #5
 8020e62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020e66:	4853      	ldr	r0, [pc, #332]	@ (8020fb4 <_vfiprintf_r+0x21c>)
 8020e68:	f7df f9b2 	bl	80001d0 <memchr>
 8020e6c:	9a04      	ldr	r2, [sp, #16]
 8020e6e:	b9d8      	cbnz	r0, 8020ea8 <_vfiprintf_r+0x110>
 8020e70:	06d1      	lsls	r1, r2, #27
 8020e72:	bf44      	itt	mi
 8020e74:	2320      	movmi	r3, #32
 8020e76:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020e7a:	0713      	lsls	r3, r2, #28
 8020e7c:	bf44      	itt	mi
 8020e7e:	232b      	movmi	r3, #43	@ 0x2b
 8020e80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020e84:	f89a 3000 	ldrb.w	r3, [sl]
 8020e88:	2b2a      	cmp	r3, #42	@ 0x2a
 8020e8a:	d015      	beq.n	8020eb8 <_vfiprintf_r+0x120>
 8020e8c:	9a07      	ldr	r2, [sp, #28]
 8020e8e:	4654      	mov	r4, sl
 8020e90:	2000      	movs	r0, #0
 8020e92:	f04f 0c0a 	mov.w	ip, #10
 8020e96:	4621      	mov	r1, r4
 8020e98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020e9c:	3b30      	subs	r3, #48	@ 0x30
 8020e9e:	2b09      	cmp	r3, #9
 8020ea0:	d94b      	bls.n	8020f3a <_vfiprintf_r+0x1a2>
 8020ea2:	b1b0      	cbz	r0, 8020ed2 <_vfiprintf_r+0x13a>
 8020ea4:	9207      	str	r2, [sp, #28]
 8020ea6:	e014      	b.n	8020ed2 <_vfiprintf_r+0x13a>
 8020ea8:	eba0 0308 	sub.w	r3, r0, r8
 8020eac:	fa09 f303 	lsl.w	r3, r9, r3
 8020eb0:	4313      	orrs	r3, r2
 8020eb2:	9304      	str	r3, [sp, #16]
 8020eb4:	46a2      	mov	sl, r4
 8020eb6:	e7d2      	b.n	8020e5e <_vfiprintf_r+0xc6>
 8020eb8:	9b03      	ldr	r3, [sp, #12]
 8020eba:	1d19      	adds	r1, r3, #4
 8020ebc:	681b      	ldr	r3, [r3, #0]
 8020ebe:	9103      	str	r1, [sp, #12]
 8020ec0:	2b00      	cmp	r3, #0
 8020ec2:	bfbb      	ittet	lt
 8020ec4:	425b      	neglt	r3, r3
 8020ec6:	f042 0202 	orrlt.w	r2, r2, #2
 8020eca:	9307      	strge	r3, [sp, #28]
 8020ecc:	9307      	strlt	r3, [sp, #28]
 8020ece:	bfb8      	it	lt
 8020ed0:	9204      	strlt	r2, [sp, #16]
 8020ed2:	7823      	ldrb	r3, [r4, #0]
 8020ed4:	2b2e      	cmp	r3, #46	@ 0x2e
 8020ed6:	d10a      	bne.n	8020eee <_vfiprintf_r+0x156>
 8020ed8:	7863      	ldrb	r3, [r4, #1]
 8020eda:	2b2a      	cmp	r3, #42	@ 0x2a
 8020edc:	d132      	bne.n	8020f44 <_vfiprintf_r+0x1ac>
 8020ede:	9b03      	ldr	r3, [sp, #12]
 8020ee0:	1d1a      	adds	r2, r3, #4
 8020ee2:	681b      	ldr	r3, [r3, #0]
 8020ee4:	9203      	str	r2, [sp, #12]
 8020ee6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020eea:	3402      	adds	r4, #2
 8020eec:	9305      	str	r3, [sp, #20]
 8020eee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8020fc4 <_vfiprintf_r+0x22c>
 8020ef2:	7821      	ldrb	r1, [r4, #0]
 8020ef4:	2203      	movs	r2, #3
 8020ef6:	4650      	mov	r0, sl
 8020ef8:	f7df f96a 	bl	80001d0 <memchr>
 8020efc:	b138      	cbz	r0, 8020f0e <_vfiprintf_r+0x176>
 8020efe:	9b04      	ldr	r3, [sp, #16]
 8020f00:	eba0 000a 	sub.w	r0, r0, sl
 8020f04:	2240      	movs	r2, #64	@ 0x40
 8020f06:	4082      	lsls	r2, r0
 8020f08:	4313      	orrs	r3, r2
 8020f0a:	3401      	adds	r4, #1
 8020f0c:	9304      	str	r3, [sp, #16]
 8020f0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020f12:	4829      	ldr	r0, [pc, #164]	@ (8020fb8 <_vfiprintf_r+0x220>)
 8020f14:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020f18:	2206      	movs	r2, #6
 8020f1a:	f7df f959 	bl	80001d0 <memchr>
 8020f1e:	2800      	cmp	r0, #0
 8020f20:	d03f      	beq.n	8020fa2 <_vfiprintf_r+0x20a>
 8020f22:	4b26      	ldr	r3, [pc, #152]	@ (8020fbc <_vfiprintf_r+0x224>)
 8020f24:	bb1b      	cbnz	r3, 8020f6e <_vfiprintf_r+0x1d6>
 8020f26:	9b03      	ldr	r3, [sp, #12]
 8020f28:	3307      	adds	r3, #7
 8020f2a:	f023 0307 	bic.w	r3, r3, #7
 8020f2e:	3308      	adds	r3, #8
 8020f30:	9303      	str	r3, [sp, #12]
 8020f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020f34:	443b      	add	r3, r7
 8020f36:	9309      	str	r3, [sp, #36]	@ 0x24
 8020f38:	e76a      	b.n	8020e10 <_vfiprintf_r+0x78>
 8020f3a:	fb0c 3202 	mla	r2, ip, r2, r3
 8020f3e:	460c      	mov	r4, r1
 8020f40:	2001      	movs	r0, #1
 8020f42:	e7a8      	b.n	8020e96 <_vfiprintf_r+0xfe>
 8020f44:	2300      	movs	r3, #0
 8020f46:	3401      	adds	r4, #1
 8020f48:	9305      	str	r3, [sp, #20]
 8020f4a:	4619      	mov	r1, r3
 8020f4c:	f04f 0c0a 	mov.w	ip, #10
 8020f50:	4620      	mov	r0, r4
 8020f52:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020f56:	3a30      	subs	r2, #48	@ 0x30
 8020f58:	2a09      	cmp	r2, #9
 8020f5a:	d903      	bls.n	8020f64 <_vfiprintf_r+0x1cc>
 8020f5c:	2b00      	cmp	r3, #0
 8020f5e:	d0c6      	beq.n	8020eee <_vfiprintf_r+0x156>
 8020f60:	9105      	str	r1, [sp, #20]
 8020f62:	e7c4      	b.n	8020eee <_vfiprintf_r+0x156>
 8020f64:	fb0c 2101 	mla	r1, ip, r1, r2
 8020f68:	4604      	mov	r4, r0
 8020f6a:	2301      	movs	r3, #1
 8020f6c:	e7f0      	b.n	8020f50 <_vfiprintf_r+0x1b8>
 8020f6e:	ab03      	add	r3, sp, #12
 8020f70:	9300      	str	r3, [sp, #0]
 8020f72:	462a      	mov	r2, r5
 8020f74:	4b12      	ldr	r3, [pc, #72]	@ (8020fc0 <_vfiprintf_r+0x228>)
 8020f76:	a904      	add	r1, sp, #16
 8020f78:	4630      	mov	r0, r6
 8020f7a:	f7fc fa61 	bl	801d440 <_printf_float>
 8020f7e:	4607      	mov	r7, r0
 8020f80:	1c78      	adds	r0, r7, #1
 8020f82:	d1d6      	bne.n	8020f32 <_vfiprintf_r+0x19a>
 8020f84:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020f86:	07d9      	lsls	r1, r3, #31
 8020f88:	d405      	bmi.n	8020f96 <_vfiprintf_r+0x1fe>
 8020f8a:	89ab      	ldrh	r3, [r5, #12]
 8020f8c:	059a      	lsls	r2, r3, #22
 8020f8e:	d402      	bmi.n	8020f96 <_vfiprintf_r+0x1fe>
 8020f90:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020f92:	f7fd fb3b 	bl	801e60c <__retarget_lock_release_recursive>
 8020f96:	89ab      	ldrh	r3, [r5, #12]
 8020f98:	065b      	lsls	r3, r3, #25
 8020f9a:	f53f af1f 	bmi.w	8020ddc <_vfiprintf_r+0x44>
 8020f9e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020fa0:	e71e      	b.n	8020de0 <_vfiprintf_r+0x48>
 8020fa2:	ab03      	add	r3, sp, #12
 8020fa4:	9300      	str	r3, [sp, #0]
 8020fa6:	462a      	mov	r2, r5
 8020fa8:	4b05      	ldr	r3, [pc, #20]	@ (8020fc0 <_vfiprintf_r+0x228>)
 8020faa:	a904      	add	r1, sp, #16
 8020fac:	4630      	mov	r0, r6
 8020fae:	f7fc fcdf 	bl	801d970 <_printf_i>
 8020fb2:	e7e4      	b.n	8020f7e <_vfiprintf_r+0x1e6>
 8020fb4:	08026190 	.word	0x08026190
 8020fb8:	0802619a 	.word	0x0802619a
 8020fbc:	0801d441 	.word	0x0801d441
 8020fc0:	08020d73 	.word	0x08020d73
 8020fc4:	08026196 	.word	0x08026196

08020fc8 <fiprintf>:
 8020fc8:	b40e      	push	{r1, r2, r3}
 8020fca:	b503      	push	{r0, r1, lr}
 8020fcc:	4601      	mov	r1, r0
 8020fce:	ab03      	add	r3, sp, #12
 8020fd0:	4805      	ldr	r0, [pc, #20]	@ (8020fe8 <fiprintf+0x20>)
 8020fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8020fd6:	6800      	ldr	r0, [r0, #0]
 8020fd8:	9301      	str	r3, [sp, #4]
 8020fda:	f7ff fedd 	bl	8020d98 <_vfiprintf_r>
 8020fde:	b002      	add	sp, #8
 8020fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8020fe4:	b003      	add	sp, #12
 8020fe6:	4770      	bx	lr
 8020fe8:	20000060 	.word	0x20000060

08020fec <__swbuf_r>:
 8020fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020fee:	460e      	mov	r6, r1
 8020ff0:	4614      	mov	r4, r2
 8020ff2:	4605      	mov	r5, r0
 8020ff4:	b118      	cbz	r0, 8020ffe <__swbuf_r+0x12>
 8020ff6:	6a03      	ldr	r3, [r0, #32]
 8020ff8:	b90b      	cbnz	r3, 8020ffe <__swbuf_r+0x12>
 8020ffa:	f7fd f939 	bl	801e270 <__sinit>
 8020ffe:	69a3      	ldr	r3, [r4, #24]
 8021000:	60a3      	str	r3, [r4, #8]
 8021002:	89a3      	ldrh	r3, [r4, #12]
 8021004:	071a      	lsls	r2, r3, #28
 8021006:	d501      	bpl.n	802100c <__swbuf_r+0x20>
 8021008:	6923      	ldr	r3, [r4, #16]
 802100a:	b943      	cbnz	r3, 802101e <__swbuf_r+0x32>
 802100c:	4621      	mov	r1, r4
 802100e:	4628      	mov	r0, r5
 8021010:	f000 f82a 	bl	8021068 <__swsetup_r>
 8021014:	b118      	cbz	r0, 802101e <__swbuf_r+0x32>
 8021016:	f04f 37ff 	mov.w	r7, #4294967295
 802101a:	4638      	mov	r0, r7
 802101c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802101e:	6823      	ldr	r3, [r4, #0]
 8021020:	6922      	ldr	r2, [r4, #16]
 8021022:	1a98      	subs	r0, r3, r2
 8021024:	6963      	ldr	r3, [r4, #20]
 8021026:	b2f6      	uxtb	r6, r6
 8021028:	4283      	cmp	r3, r0
 802102a:	4637      	mov	r7, r6
 802102c:	dc05      	bgt.n	802103a <__swbuf_r+0x4e>
 802102e:	4621      	mov	r1, r4
 8021030:	4628      	mov	r0, r5
 8021032:	f7fd f855 	bl	801e0e0 <_fflush_r>
 8021036:	2800      	cmp	r0, #0
 8021038:	d1ed      	bne.n	8021016 <__swbuf_r+0x2a>
 802103a:	68a3      	ldr	r3, [r4, #8]
 802103c:	3b01      	subs	r3, #1
 802103e:	60a3      	str	r3, [r4, #8]
 8021040:	6823      	ldr	r3, [r4, #0]
 8021042:	1c5a      	adds	r2, r3, #1
 8021044:	6022      	str	r2, [r4, #0]
 8021046:	701e      	strb	r6, [r3, #0]
 8021048:	6962      	ldr	r2, [r4, #20]
 802104a:	1c43      	adds	r3, r0, #1
 802104c:	429a      	cmp	r2, r3
 802104e:	d004      	beq.n	802105a <__swbuf_r+0x6e>
 8021050:	89a3      	ldrh	r3, [r4, #12]
 8021052:	07db      	lsls	r3, r3, #31
 8021054:	d5e1      	bpl.n	802101a <__swbuf_r+0x2e>
 8021056:	2e0a      	cmp	r6, #10
 8021058:	d1df      	bne.n	802101a <__swbuf_r+0x2e>
 802105a:	4621      	mov	r1, r4
 802105c:	4628      	mov	r0, r5
 802105e:	f7fd f83f 	bl	801e0e0 <_fflush_r>
 8021062:	2800      	cmp	r0, #0
 8021064:	d0d9      	beq.n	802101a <__swbuf_r+0x2e>
 8021066:	e7d6      	b.n	8021016 <__swbuf_r+0x2a>

08021068 <__swsetup_r>:
 8021068:	b538      	push	{r3, r4, r5, lr}
 802106a:	4b29      	ldr	r3, [pc, #164]	@ (8021110 <__swsetup_r+0xa8>)
 802106c:	4605      	mov	r5, r0
 802106e:	6818      	ldr	r0, [r3, #0]
 8021070:	460c      	mov	r4, r1
 8021072:	b118      	cbz	r0, 802107c <__swsetup_r+0x14>
 8021074:	6a03      	ldr	r3, [r0, #32]
 8021076:	b90b      	cbnz	r3, 802107c <__swsetup_r+0x14>
 8021078:	f7fd f8fa 	bl	801e270 <__sinit>
 802107c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021080:	0719      	lsls	r1, r3, #28
 8021082:	d422      	bmi.n	80210ca <__swsetup_r+0x62>
 8021084:	06da      	lsls	r2, r3, #27
 8021086:	d407      	bmi.n	8021098 <__swsetup_r+0x30>
 8021088:	2209      	movs	r2, #9
 802108a:	602a      	str	r2, [r5, #0]
 802108c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021090:	81a3      	strh	r3, [r4, #12]
 8021092:	f04f 30ff 	mov.w	r0, #4294967295
 8021096:	e033      	b.n	8021100 <__swsetup_r+0x98>
 8021098:	0758      	lsls	r0, r3, #29
 802109a:	d512      	bpl.n	80210c2 <__swsetup_r+0x5a>
 802109c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802109e:	b141      	cbz	r1, 80210b2 <__swsetup_r+0x4a>
 80210a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80210a4:	4299      	cmp	r1, r3
 80210a6:	d002      	beq.n	80210ae <__swsetup_r+0x46>
 80210a8:	4628      	mov	r0, r5
 80210aa:	f7fe f939 	bl	801f320 <_free_r>
 80210ae:	2300      	movs	r3, #0
 80210b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80210b2:	89a3      	ldrh	r3, [r4, #12]
 80210b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80210b8:	81a3      	strh	r3, [r4, #12]
 80210ba:	2300      	movs	r3, #0
 80210bc:	6063      	str	r3, [r4, #4]
 80210be:	6923      	ldr	r3, [r4, #16]
 80210c0:	6023      	str	r3, [r4, #0]
 80210c2:	89a3      	ldrh	r3, [r4, #12]
 80210c4:	f043 0308 	orr.w	r3, r3, #8
 80210c8:	81a3      	strh	r3, [r4, #12]
 80210ca:	6923      	ldr	r3, [r4, #16]
 80210cc:	b94b      	cbnz	r3, 80210e2 <__swsetup_r+0x7a>
 80210ce:	89a3      	ldrh	r3, [r4, #12]
 80210d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80210d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80210d8:	d003      	beq.n	80210e2 <__swsetup_r+0x7a>
 80210da:	4621      	mov	r1, r4
 80210dc:	4628      	mov	r0, r5
 80210de:	f000 fbf9 	bl	80218d4 <__smakebuf_r>
 80210e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80210e6:	f013 0201 	ands.w	r2, r3, #1
 80210ea:	d00a      	beq.n	8021102 <__swsetup_r+0x9a>
 80210ec:	2200      	movs	r2, #0
 80210ee:	60a2      	str	r2, [r4, #8]
 80210f0:	6962      	ldr	r2, [r4, #20]
 80210f2:	4252      	negs	r2, r2
 80210f4:	61a2      	str	r2, [r4, #24]
 80210f6:	6922      	ldr	r2, [r4, #16]
 80210f8:	b942      	cbnz	r2, 802110c <__swsetup_r+0xa4>
 80210fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80210fe:	d1c5      	bne.n	802108c <__swsetup_r+0x24>
 8021100:	bd38      	pop	{r3, r4, r5, pc}
 8021102:	0799      	lsls	r1, r3, #30
 8021104:	bf58      	it	pl
 8021106:	6962      	ldrpl	r2, [r4, #20]
 8021108:	60a2      	str	r2, [r4, #8]
 802110a:	e7f4      	b.n	80210f6 <__swsetup_r+0x8e>
 802110c:	2000      	movs	r0, #0
 802110e:	e7f7      	b.n	8021100 <__swsetup_r+0x98>
 8021110:	20000060 	.word	0x20000060

08021114 <_sbrk_r>:
 8021114:	b538      	push	{r3, r4, r5, lr}
 8021116:	4d06      	ldr	r5, [pc, #24]	@ (8021130 <_sbrk_r+0x1c>)
 8021118:	2300      	movs	r3, #0
 802111a:	4604      	mov	r4, r0
 802111c:	4608      	mov	r0, r1
 802111e:	602b      	str	r3, [r5, #0]
 8021120:	f7e0 fe82 	bl	8001e28 <_sbrk>
 8021124:	1c43      	adds	r3, r0, #1
 8021126:	d102      	bne.n	802112e <_sbrk_r+0x1a>
 8021128:	682b      	ldr	r3, [r5, #0]
 802112a:	b103      	cbz	r3, 802112e <_sbrk_r+0x1a>
 802112c:	6023      	str	r3, [r4, #0]
 802112e:	bd38      	pop	{r3, r4, r5, pc}
 8021130:	2001294c 	.word	0x2001294c
 8021134:	00000000 	.word	0x00000000

08021138 <nan>:
 8021138:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8021140 <nan+0x8>
 802113c:	4770      	bx	lr
 802113e:	bf00      	nop
 8021140:	00000000 	.word	0x00000000
 8021144:	7ff80000 	.word	0x7ff80000

08021148 <abort>:
 8021148:	b508      	push	{r3, lr}
 802114a:	2006      	movs	r0, #6
 802114c:	f000 fc26 	bl	802199c <raise>
 8021150:	2001      	movs	r0, #1
 8021152:	f7e0 fe0d 	bl	8001d70 <_exit>

08021156 <_calloc_r>:
 8021156:	b570      	push	{r4, r5, r6, lr}
 8021158:	fba1 5402 	umull	r5, r4, r1, r2
 802115c:	b93c      	cbnz	r4, 802116e <_calloc_r+0x18>
 802115e:	4629      	mov	r1, r5
 8021160:	f7fe f952 	bl	801f408 <_malloc_r>
 8021164:	4606      	mov	r6, r0
 8021166:	b928      	cbnz	r0, 8021174 <_calloc_r+0x1e>
 8021168:	2600      	movs	r6, #0
 802116a:	4630      	mov	r0, r6
 802116c:	bd70      	pop	{r4, r5, r6, pc}
 802116e:	220c      	movs	r2, #12
 8021170:	6002      	str	r2, [r0, #0]
 8021172:	e7f9      	b.n	8021168 <_calloc_r+0x12>
 8021174:	462a      	mov	r2, r5
 8021176:	4621      	mov	r1, r4
 8021178:	f7fd f94f 	bl	801e41a <memset>
 802117c:	e7f5      	b.n	802116a <_calloc_r+0x14>

0802117e <rshift>:
 802117e:	6903      	ldr	r3, [r0, #16]
 8021180:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8021184:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8021188:	ea4f 1261 	mov.w	r2, r1, asr #5
 802118c:	f100 0414 	add.w	r4, r0, #20
 8021190:	dd45      	ble.n	802121e <rshift+0xa0>
 8021192:	f011 011f 	ands.w	r1, r1, #31
 8021196:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 802119a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 802119e:	d10c      	bne.n	80211ba <rshift+0x3c>
 80211a0:	f100 0710 	add.w	r7, r0, #16
 80211a4:	4629      	mov	r1, r5
 80211a6:	42b1      	cmp	r1, r6
 80211a8:	d334      	bcc.n	8021214 <rshift+0x96>
 80211aa:	1a9b      	subs	r3, r3, r2
 80211ac:	009b      	lsls	r3, r3, #2
 80211ae:	1eea      	subs	r2, r5, #3
 80211b0:	4296      	cmp	r6, r2
 80211b2:	bf38      	it	cc
 80211b4:	2300      	movcc	r3, #0
 80211b6:	4423      	add	r3, r4
 80211b8:	e015      	b.n	80211e6 <rshift+0x68>
 80211ba:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80211be:	f1c1 0820 	rsb	r8, r1, #32
 80211c2:	40cf      	lsrs	r7, r1
 80211c4:	f105 0e04 	add.w	lr, r5, #4
 80211c8:	46a1      	mov	r9, r4
 80211ca:	4576      	cmp	r6, lr
 80211cc:	46f4      	mov	ip, lr
 80211ce:	d815      	bhi.n	80211fc <rshift+0x7e>
 80211d0:	1a9a      	subs	r2, r3, r2
 80211d2:	0092      	lsls	r2, r2, #2
 80211d4:	3a04      	subs	r2, #4
 80211d6:	3501      	adds	r5, #1
 80211d8:	42ae      	cmp	r6, r5
 80211da:	bf38      	it	cc
 80211dc:	2200      	movcc	r2, #0
 80211de:	18a3      	adds	r3, r4, r2
 80211e0:	50a7      	str	r7, [r4, r2]
 80211e2:	b107      	cbz	r7, 80211e6 <rshift+0x68>
 80211e4:	3304      	adds	r3, #4
 80211e6:	1b1a      	subs	r2, r3, r4
 80211e8:	42a3      	cmp	r3, r4
 80211ea:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80211ee:	bf08      	it	eq
 80211f0:	2300      	moveq	r3, #0
 80211f2:	6102      	str	r2, [r0, #16]
 80211f4:	bf08      	it	eq
 80211f6:	6143      	streq	r3, [r0, #20]
 80211f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80211fc:	f8dc c000 	ldr.w	ip, [ip]
 8021200:	fa0c fc08 	lsl.w	ip, ip, r8
 8021204:	ea4c 0707 	orr.w	r7, ip, r7
 8021208:	f849 7b04 	str.w	r7, [r9], #4
 802120c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021210:	40cf      	lsrs	r7, r1
 8021212:	e7da      	b.n	80211ca <rshift+0x4c>
 8021214:	f851 cb04 	ldr.w	ip, [r1], #4
 8021218:	f847 cf04 	str.w	ip, [r7, #4]!
 802121c:	e7c3      	b.n	80211a6 <rshift+0x28>
 802121e:	4623      	mov	r3, r4
 8021220:	e7e1      	b.n	80211e6 <rshift+0x68>

08021222 <__hexdig_fun>:
 8021222:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8021226:	2b09      	cmp	r3, #9
 8021228:	d802      	bhi.n	8021230 <__hexdig_fun+0xe>
 802122a:	3820      	subs	r0, #32
 802122c:	b2c0      	uxtb	r0, r0
 802122e:	4770      	bx	lr
 8021230:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8021234:	2b05      	cmp	r3, #5
 8021236:	d801      	bhi.n	802123c <__hexdig_fun+0x1a>
 8021238:	3847      	subs	r0, #71	@ 0x47
 802123a:	e7f7      	b.n	802122c <__hexdig_fun+0xa>
 802123c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8021240:	2b05      	cmp	r3, #5
 8021242:	d801      	bhi.n	8021248 <__hexdig_fun+0x26>
 8021244:	3827      	subs	r0, #39	@ 0x27
 8021246:	e7f1      	b.n	802122c <__hexdig_fun+0xa>
 8021248:	2000      	movs	r0, #0
 802124a:	4770      	bx	lr

0802124c <__gethex>:
 802124c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021250:	b085      	sub	sp, #20
 8021252:	468a      	mov	sl, r1
 8021254:	9302      	str	r3, [sp, #8]
 8021256:	680b      	ldr	r3, [r1, #0]
 8021258:	9001      	str	r0, [sp, #4]
 802125a:	4690      	mov	r8, r2
 802125c:	1c9c      	adds	r4, r3, #2
 802125e:	46a1      	mov	r9, r4
 8021260:	f814 0b01 	ldrb.w	r0, [r4], #1
 8021264:	2830      	cmp	r0, #48	@ 0x30
 8021266:	d0fa      	beq.n	802125e <__gethex+0x12>
 8021268:	eba9 0303 	sub.w	r3, r9, r3
 802126c:	f1a3 0b02 	sub.w	fp, r3, #2
 8021270:	f7ff ffd7 	bl	8021222 <__hexdig_fun>
 8021274:	4605      	mov	r5, r0
 8021276:	2800      	cmp	r0, #0
 8021278:	d168      	bne.n	802134c <__gethex+0x100>
 802127a:	49a0      	ldr	r1, [pc, #640]	@ (80214fc <__gethex+0x2b0>)
 802127c:	2201      	movs	r2, #1
 802127e:	4648      	mov	r0, r9
 8021280:	f7fd f8d3 	bl	801e42a <strncmp>
 8021284:	4607      	mov	r7, r0
 8021286:	2800      	cmp	r0, #0
 8021288:	d167      	bne.n	802135a <__gethex+0x10e>
 802128a:	f899 0001 	ldrb.w	r0, [r9, #1]
 802128e:	4626      	mov	r6, r4
 8021290:	f7ff ffc7 	bl	8021222 <__hexdig_fun>
 8021294:	2800      	cmp	r0, #0
 8021296:	d062      	beq.n	802135e <__gethex+0x112>
 8021298:	4623      	mov	r3, r4
 802129a:	7818      	ldrb	r0, [r3, #0]
 802129c:	2830      	cmp	r0, #48	@ 0x30
 802129e:	4699      	mov	r9, r3
 80212a0:	f103 0301 	add.w	r3, r3, #1
 80212a4:	d0f9      	beq.n	802129a <__gethex+0x4e>
 80212a6:	f7ff ffbc 	bl	8021222 <__hexdig_fun>
 80212aa:	fab0 f580 	clz	r5, r0
 80212ae:	096d      	lsrs	r5, r5, #5
 80212b0:	f04f 0b01 	mov.w	fp, #1
 80212b4:	464a      	mov	r2, r9
 80212b6:	4616      	mov	r6, r2
 80212b8:	3201      	adds	r2, #1
 80212ba:	7830      	ldrb	r0, [r6, #0]
 80212bc:	f7ff ffb1 	bl	8021222 <__hexdig_fun>
 80212c0:	2800      	cmp	r0, #0
 80212c2:	d1f8      	bne.n	80212b6 <__gethex+0x6a>
 80212c4:	498d      	ldr	r1, [pc, #564]	@ (80214fc <__gethex+0x2b0>)
 80212c6:	2201      	movs	r2, #1
 80212c8:	4630      	mov	r0, r6
 80212ca:	f7fd f8ae 	bl	801e42a <strncmp>
 80212ce:	2800      	cmp	r0, #0
 80212d0:	d13f      	bne.n	8021352 <__gethex+0x106>
 80212d2:	b944      	cbnz	r4, 80212e6 <__gethex+0x9a>
 80212d4:	1c74      	adds	r4, r6, #1
 80212d6:	4622      	mov	r2, r4
 80212d8:	4616      	mov	r6, r2
 80212da:	3201      	adds	r2, #1
 80212dc:	7830      	ldrb	r0, [r6, #0]
 80212de:	f7ff ffa0 	bl	8021222 <__hexdig_fun>
 80212e2:	2800      	cmp	r0, #0
 80212e4:	d1f8      	bne.n	80212d8 <__gethex+0x8c>
 80212e6:	1ba4      	subs	r4, r4, r6
 80212e8:	00a7      	lsls	r7, r4, #2
 80212ea:	7833      	ldrb	r3, [r6, #0]
 80212ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80212f0:	2b50      	cmp	r3, #80	@ 0x50
 80212f2:	d13e      	bne.n	8021372 <__gethex+0x126>
 80212f4:	7873      	ldrb	r3, [r6, #1]
 80212f6:	2b2b      	cmp	r3, #43	@ 0x2b
 80212f8:	d033      	beq.n	8021362 <__gethex+0x116>
 80212fa:	2b2d      	cmp	r3, #45	@ 0x2d
 80212fc:	d034      	beq.n	8021368 <__gethex+0x11c>
 80212fe:	1c71      	adds	r1, r6, #1
 8021300:	2400      	movs	r4, #0
 8021302:	7808      	ldrb	r0, [r1, #0]
 8021304:	f7ff ff8d 	bl	8021222 <__hexdig_fun>
 8021308:	1e43      	subs	r3, r0, #1
 802130a:	b2db      	uxtb	r3, r3
 802130c:	2b18      	cmp	r3, #24
 802130e:	d830      	bhi.n	8021372 <__gethex+0x126>
 8021310:	f1a0 0210 	sub.w	r2, r0, #16
 8021314:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021318:	f7ff ff83 	bl	8021222 <__hexdig_fun>
 802131c:	f100 3cff 	add.w	ip, r0, #4294967295
 8021320:	fa5f fc8c 	uxtb.w	ip, ip
 8021324:	f1bc 0f18 	cmp.w	ip, #24
 8021328:	f04f 030a 	mov.w	r3, #10
 802132c:	d91e      	bls.n	802136c <__gethex+0x120>
 802132e:	b104      	cbz	r4, 8021332 <__gethex+0xe6>
 8021330:	4252      	negs	r2, r2
 8021332:	4417      	add	r7, r2
 8021334:	f8ca 1000 	str.w	r1, [sl]
 8021338:	b1ed      	cbz	r5, 8021376 <__gethex+0x12a>
 802133a:	f1bb 0f00 	cmp.w	fp, #0
 802133e:	bf0c      	ite	eq
 8021340:	2506      	moveq	r5, #6
 8021342:	2500      	movne	r5, #0
 8021344:	4628      	mov	r0, r5
 8021346:	b005      	add	sp, #20
 8021348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802134c:	2500      	movs	r5, #0
 802134e:	462c      	mov	r4, r5
 8021350:	e7b0      	b.n	80212b4 <__gethex+0x68>
 8021352:	2c00      	cmp	r4, #0
 8021354:	d1c7      	bne.n	80212e6 <__gethex+0x9a>
 8021356:	4627      	mov	r7, r4
 8021358:	e7c7      	b.n	80212ea <__gethex+0x9e>
 802135a:	464e      	mov	r6, r9
 802135c:	462f      	mov	r7, r5
 802135e:	2501      	movs	r5, #1
 8021360:	e7c3      	b.n	80212ea <__gethex+0x9e>
 8021362:	2400      	movs	r4, #0
 8021364:	1cb1      	adds	r1, r6, #2
 8021366:	e7cc      	b.n	8021302 <__gethex+0xb6>
 8021368:	2401      	movs	r4, #1
 802136a:	e7fb      	b.n	8021364 <__gethex+0x118>
 802136c:	fb03 0002 	mla	r0, r3, r2, r0
 8021370:	e7ce      	b.n	8021310 <__gethex+0xc4>
 8021372:	4631      	mov	r1, r6
 8021374:	e7de      	b.n	8021334 <__gethex+0xe8>
 8021376:	eba6 0309 	sub.w	r3, r6, r9
 802137a:	3b01      	subs	r3, #1
 802137c:	4629      	mov	r1, r5
 802137e:	2b07      	cmp	r3, #7
 8021380:	dc0a      	bgt.n	8021398 <__gethex+0x14c>
 8021382:	9801      	ldr	r0, [sp, #4]
 8021384:	f7fe f8cc 	bl	801f520 <_Balloc>
 8021388:	4604      	mov	r4, r0
 802138a:	b940      	cbnz	r0, 802139e <__gethex+0x152>
 802138c:	4b5c      	ldr	r3, [pc, #368]	@ (8021500 <__gethex+0x2b4>)
 802138e:	4602      	mov	r2, r0
 8021390:	21e4      	movs	r1, #228	@ 0xe4
 8021392:	485c      	ldr	r0, [pc, #368]	@ (8021504 <__gethex+0x2b8>)
 8021394:	f7fd f958 	bl	801e648 <__assert_func>
 8021398:	3101      	adds	r1, #1
 802139a:	105b      	asrs	r3, r3, #1
 802139c:	e7ef      	b.n	802137e <__gethex+0x132>
 802139e:	f100 0a14 	add.w	sl, r0, #20
 80213a2:	2300      	movs	r3, #0
 80213a4:	4655      	mov	r5, sl
 80213a6:	469b      	mov	fp, r3
 80213a8:	45b1      	cmp	r9, r6
 80213aa:	d337      	bcc.n	802141c <__gethex+0x1d0>
 80213ac:	f845 bb04 	str.w	fp, [r5], #4
 80213b0:	eba5 050a 	sub.w	r5, r5, sl
 80213b4:	10ad      	asrs	r5, r5, #2
 80213b6:	6125      	str	r5, [r4, #16]
 80213b8:	4658      	mov	r0, fp
 80213ba:	f7fe f9a3 	bl	801f704 <__hi0bits>
 80213be:	016d      	lsls	r5, r5, #5
 80213c0:	f8d8 6000 	ldr.w	r6, [r8]
 80213c4:	1a2d      	subs	r5, r5, r0
 80213c6:	42b5      	cmp	r5, r6
 80213c8:	dd54      	ble.n	8021474 <__gethex+0x228>
 80213ca:	1bad      	subs	r5, r5, r6
 80213cc:	4629      	mov	r1, r5
 80213ce:	4620      	mov	r0, r4
 80213d0:	f7fe fd37 	bl	801fe42 <__any_on>
 80213d4:	4681      	mov	r9, r0
 80213d6:	b178      	cbz	r0, 80213f8 <__gethex+0x1ac>
 80213d8:	1e6b      	subs	r3, r5, #1
 80213da:	1159      	asrs	r1, r3, #5
 80213dc:	f003 021f 	and.w	r2, r3, #31
 80213e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80213e4:	f04f 0901 	mov.w	r9, #1
 80213e8:	fa09 f202 	lsl.w	r2, r9, r2
 80213ec:	420a      	tst	r2, r1
 80213ee:	d003      	beq.n	80213f8 <__gethex+0x1ac>
 80213f0:	454b      	cmp	r3, r9
 80213f2:	dc36      	bgt.n	8021462 <__gethex+0x216>
 80213f4:	f04f 0902 	mov.w	r9, #2
 80213f8:	4629      	mov	r1, r5
 80213fa:	4620      	mov	r0, r4
 80213fc:	f7ff febf 	bl	802117e <rshift>
 8021400:	442f      	add	r7, r5
 8021402:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021406:	42bb      	cmp	r3, r7
 8021408:	da42      	bge.n	8021490 <__gethex+0x244>
 802140a:	9801      	ldr	r0, [sp, #4]
 802140c:	4621      	mov	r1, r4
 802140e:	f7fe f8c7 	bl	801f5a0 <_Bfree>
 8021412:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021414:	2300      	movs	r3, #0
 8021416:	6013      	str	r3, [r2, #0]
 8021418:	25a3      	movs	r5, #163	@ 0xa3
 802141a:	e793      	b.n	8021344 <__gethex+0xf8>
 802141c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8021420:	2a2e      	cmp	r2, #46	@ 0x2e
 8021422:	d012      	beq.n	802144a <__gethex+0x1fe>
 8021424:	2b20      	cmp	r3, #32
 8021426:	d104      	bne.n	8021432 <__gethex+0x1e6>
 8021428:	f845 bb04 	str.w	fp, [r5], #4
 802142c:	f04f 0b00 	mov.w	fp, #0
 8021430:	465b      	mov	r3, fp
 8021432:	7830      	ldrb	r0, [r6, #0]
 8021434:	9303      	str	r3, [sp, #12]
 8021436:	f7ff fef4 	bl	8021222 <__hexdig_fun>
 802143a:	9b03      	ldr	r3, [sp, #12]
 802143c:	f000 000f 	and.w	r0, r0, #15
 8021440:	4098      	lsls	r0, r3
 8021442:	ea4b 0b00 	orr.w	fp, fp, r0
 8021446:	3304      	adds	r3, #4
 8021448:	e7ae      	b.n	80213a8 <__gethex+0x15c>
 802144a:	45b1      	cmp	r9, r6
 802144c:	d8ea      	bhi.n	8021424 <__gethex+0x1d8>
 802144e:	492b      	ldr	r1, [pc, #172]	@ (80214fc <__gethex+0x2b0>)
 8021450:	9303      	str	r3, [sp, #12]
 8021452:	2201      	movs	r2, #1
 8021454:	4630      	mov	r0, r6
 8021456:	f7fc ffe8 	bl	801e42a <strncmp>
 802145a:	9b03      	ldr	r3, [sp, #12]
 802145c:	2800      	cmp	r0, #0
 802145e:	d1e1      	bne.n	8021424 <__gethex+0x1d8>
 8021460:	e7a2      	b.n	80213a8 <__gethex+0x15c>
 8021462:	1ea9      	subs	r1, r5, #2
 8021464:	4620      	mov	r0, r4
 8021466:	f7fe fcec 	bl	801fe42 <__any_on>
 802146a:	2800      	cmp	r0, #0
 802146c:	d0c2      	beq.n	80213f4 <__gethex+0x1a8>
 802146e:	f04f 0903 	mov.w	r9, #3
 8021472:	e7c1      	b.n	80213f8 <__gethex+0x1ac>
 8021474:	da09      	bge.n	802148a <__gethex+0x23e>
 8021476:	1b75      	subs	r5, r6, r5
 8021478:	4621      	mov	r1, r4
 802147a:	9801      	ldr	r0, [sp, #4]
 802147c:	462a      	mov	r2, r5
 802147e:	f7fe faa7 	bl	801f9d0 <__lshift>
 8021482:	1b7f      	subs	r7, r7, r5
 8021484:	4604      	mov	r4, r0
 8021486:	f100 0a14 	add.w	sl, r0, #20
 802148a:	f04f 0900 	mov.w	r9, #0
 802148e:	e7b8      	b.n	8021402 <__gethex+0x1b6>
 8021490:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021494:	42bd      	cmp	r5, r7
 8021496:	dd6f      	ble.n	8021578 <__gethex+0x32c>
 8021498:	1bed      	subs	r5, r5, r7
 802149a:	42ae      	cmp	r6, r5
 802149c:	dc34      	bgt.n	8021508 <__gethex+0x2bc>
 802149e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80214a2:	2b02      	cmp	r3, #2
 80214a4:	d022      	beq.n	80214ec <__gethex+0x2a0>
 80214a6:	2b03      	cmp	r3, #3
 80214a8:	d024      	beq.n	80214f4 <__gethex+0x2a8>
 80214aa:	2b01      	cmp	r3, #1
 80214ac:	d115      	bne.n	80214da <__gethex+0x28e>
 80214ae:	42ae      	cmp	r6, r5
 80214b0:	d113      	bne.n	80214da <__gethex+0x28e>
 80214b2:	2e01      	cmp	r6, #1
 80214b4:	d10b      	bne.n	80214ce <__gethex+0x282>
 80214b6:	9a02      	ldr	r2, [sp, #8]
 80214b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80214bc:	6013      	str	r3, [r2, #0]
 80214be:	2301      	movs	r3, #1
 80214c0:	6123      	str	r3, [r4, #16]
 80214c2:	f8ca 3000 	str.w	r3, [sl]
 80214c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80214c8:	2562      	movs	r5, #98	@ 0x62
 80214ca:	601c      	str	r4, [r3, #0]
 80214cc:	e73a      	b.n	8021344 <__gethex+0xf8>
 80214ce:	1e71      	subs	r1, r6, #1
 80214d0:	4620      	mov	r0, r4
 80214d2:	f7fe fcb6 	bl	801fe42 <__any_on>
 80214d6:	2800      	cmp	r0, #0
 80214d8:	d1ed      	bne.n	80214b6 <__gethex+0x26a>
 80214da:	9801      	ldr	r0, [sp, #4]
 80214dc:	4621      	mov	r1, r4
 80214de:	f7fe f85f 	bl	801f5a0 <_Bfree>
 80214e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80214e4:	2300      	movs	r3, #0
 80214e6:	6013      	str	r3, [r2, #0]
 80214e8:	2550      	movs	r5, #80	@ 0x50
 80214ea:	e72b      	b.n	8021344 <__gethex+0xf8>
 80214ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80214ee:	2b00      	cmp	r3, #0
 80214f0:	d1f3      	bne.n	80214da <__gethex+0x28e>
 80214f2:	e7e0      	b.n	80214b6 <__gethex+0x26a>
 80214f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80214f6:	2b00      	cmp	r3, #0
 80214f8:	d1dd      	bne.n	80214b6 <__gethex+0x26a>
 80214fa:	e7ee      	b.n	80214da <__gethex+0x28e>
 80214fc:	08026138 	.word	0x08026138
 8021500:	08025fd0 	.word	0x08025fd0
 8021504:	080261a9 	.word	0x080261a9
 8021508:	1e6f      	subs	r7, r5, #1
 802150a:	f1b9 0f00 	cmp.w	r9, #0
 802150e:	d130      	bne.n	8021572 <__gethex+0x326>
 8021510:	b127      	cbz	r7, 802151c <__gethex+0x2d0>
 8021512:	4639      	mov	r1, r7
 8021514:	4620      	mov	r0, r4
 8021516:	f7fe fc94 	bl	801fe42 <__any_on>
 802151a:	4681      	mov	r9, r0
 802151c:	117a      	asrs	r2, r7, #5
 802151e:	2301      	movs	r3, #1
 8021520:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8021524:	f007 071f 	and.w	r7, r7, #31
 8021528:	40bb      	lsls	r3, r7
 802152a:	4213      	tst	r3, r2
 802152c:	4629      	mov	r1, r5
 802152e:	4620      	mov	r0, r4
 8021530:	bf18      	it	ne
 8021532:	f049 0902 	orrne.w	r9, r9, #2
 8021536:	f7ff fe22 	bl	802117e <rshift>
 802153a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 802153e:	1b76      	subs	r6, r6, r5
 8021540:	2502      	movs	r5, #2
 8021542:	f1b9 0f00 	cmp.w	r9, #0
 8021546:	d047      	beq.n	80215d8 <__gethex+0x38c>
 8021548:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802154c:	2b02      	cmp	r3, #2
 802154e:	d015      	beq.n	802157c <__gethex+0x330>
 8021550:	2b03      	cmp	r3, #3
 8021552:	d017      	beq.n	8021584 <__gethex+0x338>
 8021554:	2b01      	cmp	r3, #1
 8021556:	d109      	bne.n	802156c <__gethex+0x320>
 8021558:	f019 0f02 	tst.w	r9, #2
 802155c:	d006      	beq.n	802156c <__gethex+0x320>
 802155e:	f8da 3000 	ldr.w	r3, [sl]
 8021562:	ea49 0903 	orr.w	r9, r9, r3
 8021566:	f019 0f01 	tst.w	r9, #1
 802156a:	d10e      	bne.n	802158a <__gethex+0x33e>
 802156c:	f045 0510 	orr.w	r5, r5, #16
 8021570:	e032      	b.n	80215d8 <__gethex+0x38c>
 8021572:	f04f 0901 	mov.w	r9, #1
 8021576:	e7d1      	b.n	802151c <__gethex+0x2d0>
 8021578:	2501      	movs	r5, #1
 802157a:	e7e2      	b.n	8021542 <__gethex+0x2f6>
 802157c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802157e:	f1c3 0301 	rsb	r3, r3, #1
 8021582:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021584:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021586:	2b00      	cmp	r3, #0
 8021588:	d0f0      	beq.n	802156c <__gethex+0x320>
 802158a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802158e:	f104 0314 	add.w	r3, r4, #20
 8021592:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021596:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802159a:	f04f 0c00 	mov.w	ip, #0
 802159e:	4618      	mov	r0, r3
 80215a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80215a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80215a8:	d01b      	beq.n	80215e2 <__gethex+0x396>
 80215aa:	3201      	adds	r2, #1
 80215ac:	6002      	str	r2, [r0, #0]
 80215ae:	2d02      	cmp	r5, #2
 80215b0:	f104 0314 	add.w	r3, r4, #20
 80215b4:	d13c      	bne.n	8021630 <__gethex+0x3e4>
 80215b6:	f8d8 2000 	ldr.w	r2, [r8]
 80215ba:	3a01      	subs	r2, #1
 80215bc:	42b2      	cmp	r2, r6
 80215be:	d109      	bne.n	80215d4 <__gethex+0x388>
 80215c0:	1171      	asrs	r1, r6, #5
 80215c2:	2201      	movs	r2, #1
 80215c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80215c8:	f006 061f 	and.w	r6, r6, #31
 80215cc:	fa02 f606 	lsl.w	r6, r2, r6
 80215d0:	421e      	tst	r6, r3
 80215d2:	d13a      	bne.n	802164a <__gethex+0x3fe>
 80215d4:	f045 0520 	orr.w	r5, r5, #32
 80215d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80215da:	601c      	str	r4, [r3, #0]
 80215dc:	9b02      	ldr	r3, [sp, #8]
 80215de:	601f      	str	r7, [r3, #0]
 80215e0:	e6b0      	b.n	8021344 <__gethex+0xf8>
 80215e2:	4299      	cmp	r1, r3
 80215e4:	f843 cc04 	str.w	ip, [r3, #-4]
 80215e8:	d8d9      	bhi.n	802159e <__gethex+0x352>
 80215ea:	68a3      	ldr	r3, [r4, #8]
 80215ec:	459b      	cmp	fp, r3
 80215ee:	db17      	blt.n	8021620 <__gethex+0x3d4>
 80215f0:	6861      	ldr	r1, [r4, #4]
 80215f2:	9801      	ldr	r0, [sp, #4]
 80215f4:	3101      	adds	r1, #1
 80215f6:	f7fd ff93 	bl	801f520 <_Balloc>
 80215fa:	4681      	mov	r9, r0
 80215fc:	b918      	cbnz	r0, 8021606 <__gethex+0x3ba>
 80215fe:	4b1a      	ldr	r3, [pc, #104]	@ (8021668 <__gethex+0x41c>)
 8021600:	4602      	mov	r2, r0
 8021602:	2184      	movs	r1, #132	@ 0x84
 8021604:	e6c5      	b.n	8021392 <__gethex+0x146>
 8021606:	6922      	ldr	r2, [r4, #16]
 8021608:	3202      	adds	r2, #2
 802160a:	f104 010c 	add.w	r1, r4, #12
 802160e:	0092      	lsls	r2, r2, #2
 8021610:	300c      	adds	r0, #12
 8021612:	f7fd f804 	bl	801e61e <memcpy>
 8021616:	4621      	mov	r1, r4
 8021618:	9801      	ldr	r0, [sp, #4]
 802161a:	f7fd ffc1 	bl	801f5a0 <_Bfree>
 802161e:	464c      	mov	r4, r9
 8021620:	6923      	ldr	r3, [r4, #16]
 8021622:	1c5a      	adds	r2, r3, #1
 8021624:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021628:	6122      	str	r2, [r4, #16]
 802162a:	2201      	movs	r2, #1
 802162c:	615a      	str	r2, [r3, #20]
 802162e:	e7be      	b.n	80215ae <__gethex+0x362>
 8021630:	6922      	ldr	r2, [r4, #16]
 8021632:	455a      	cmp	r2, fp
 8021634:	dd0b      	ble.n	802164e <__gethex+0x402>
 8021636:	2101      	movs	r1, #1
 8021638:	4620      	mov	r0, r4
 802163a:	f7ff fda0 	bl	802117e <rshift>
 802163e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021642:	3701      	adds	r7, #1
 8021644:	42bb      	cmp	r3, r7
 8021646:	f6ff aee0 	blt.w	802140a <__gethex+0x1be>
 802164a:	2501      	movs	r5, #1
 802164c:	e7c2      	b.n	80215d4 <__gethex+0x388>
 802164e:	f016 061f 	ands.w	r6, r6, #31
 8021652:	d0fa      	beq.n	802164a <__gethex+0x3fe>
 8021654:	4453      	add	r3, sl
 8021656:	f1c6 0620 	rsb	r6, r6, #32
 802165a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802165e:	f7fe f851 	bl	801f704 <__hi0bits>
 8021662:	42b0      	cmp	r0, r6
 8021664:	dbe7      	blt.n	8021636 <__gethex+0x3ea>
 8021666:	e7f0      	b.n	802164a <__gethex+0x3fe>
 8021668:	08025fd0 	.word	0x08025fd0

0802166c <L_shift>:
 802166c:	f1c2 0208 	rsb	r2, r2, #8
 8021670:	0092      	lsls	r2, r2, #2
 8021672:	b570      	push	{r4, r5, r6, lr}
 8021674:	f1c2 0620 	rsb	r6, r2, #32
 8021678:	6843      	ldr	r3, [r0, #4]
 802167a:	6804      	ldr	r4, [r0, #0]
 802167c:	fa03 f506 	lsl.w	r5, r3, r6
 8021680:	432c      	orrs	r4, r5
 8021682:	40d3      	lsrs	r3, r2
 8021684:	6004      	str	r4, [r0, #0]
 8021686:	f840 3f04 	str.w	r3, [r0, #4]!
 802168a:	4288      	cmp	r0, r1
 802168c:	d3f4      	bcc.n	8021678 <L_shift+0xc>
 802168e:	bd70      	pop	{r4, r5, r6, pc}

08021690 <__match>:
 8021690:	b530      	push	{r4, r5, lr}
 8021692:	6803      	ldr	r3, [r0, #0]
 8021694:	3301      	adds	r3, #1
 8021696:	f811 4b01 	ldrb.w	r4, [r1], #1
 802169a:	b914      	cbnz	r4, 80216a2 <__match+0x12>
 802169c:	6003      	str	r3, [r0, #0]
 802169e:	2001      	movs	r0, #1
 80216a0:	bd30      	pop	{r4, r5, pc}
 80216a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80216a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80216aa:	2d19      	cmp	r5, #25
 80216ac:	bf98      	it	ls
 80216ae:	3220      	addls	r2, #32
 80216b0:	42a2      	cmp	r2, r4
 80216b2:	d0f0      	beq.n	8021696 <__match+0x6>
 80216b4:	2000      	movs	r0, #0
 80216b6:	e7f3      	b.n	80216a0 <__match+0x10>

080216b8 <__hexnan>:
 80216b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216bc:	680b      	ldr	r3, [r1, #0]
 80216be:	6801      	ldr	r1, [r0, #0]
 80216c0:	115e      	asrs	r6, r3, #5
 80216c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80216c6:	f013 031f 	ands.w	r3, r3, #31
 80216ca:	b087      	sub	sp, #28
 80216cc:	bf18      	it	ne
 80216ce:	3604      	addne	r6, #4
 80216d0:	2500      	movs	r5, #0
 80216d2:	1f37      	subs	r7, r6, #4
 80216d4:	4682      	mov	sl, r0
 80216d6:	4690      	mov	r8, r2
 80216d8:	9301      	str	r3, [sp, #4]
 80216da:	f846 5c04 	str.w	r5, [r6, #-4]
 80216de:	46b9      	mov	r9, r7
 80216e0:	463c      	mov	r4, r7
 80216e2:	9502      	str	r5, [sp, #8]
 80216e4:	46ab      	mov	fp, r5
 80216e6:	784a      	ldrb	r2, [r1, #1]
 80216e8:	1c4b      	adds	r3, r1, #1
 80216ea:	9303      	str	r3, [sp, #12]
 80216ec:	b342      	cbz	r2, 8021740 <__hexnan+0x88>
 80216ee:	4610      	mov	r0, r2
 80216f0:	9105      	str	r1, [sp, #20]
 80216f2:	9204      	str	r2, [sp, #16]
 80216f4:	f7ff fd95 	bl	8021222 <__hexdig_fun>
 80216f8:	2800      	cmp	r0, #0
 80216fa:	d151      	bne.n	80217a0 <__hexnan+0xe8>
 80216fc:	9a04      	ldr	r2, [sp, #16]
 80216fe:	9905      	ldr	r1, [sp, #20]
 8021700:	2a20      	cmp	r2, #32
 8021702:	d818      	bhi.n	8021736 <__hexnan+0x7e>
 8021704:	9b02      	ldr	r3, [sp, #8]
 8021706:	459b      	cmp	fp, r3
 8021708:	dd13      	ble.n	8021732 <__hexnan+0x7a>
 802170a:	454c      	cmp	r4, r9
 802170c:	d206      	bcs.n	802171c <__hexnan+0x64>
 802170e:	2d07      	cmp	r5, #7
 8021710:	dc04      	bgt.n	802171c <__hexnan+0x64>
 8021712:	462a      	mov	r2, r5
 8021714:	4649      	mov	r1, r9
 8021716:	4620      	mov	r0, r4
 8021718:	f7ff ffa8 	bl	802166c <L_shift>
 802171c:	4544      	cmp	r4, r8
 802171e:	d952      	bls.n	80217c6 <__hexnan+0x10e>
 8021720:	2300      	movs	r3, #0
 8021722:	f1a4 0904 	sub.w	r9, r4, #4
 8021726:	f844 3c04 	str.w	r3, [r4, #-4]
 802172a:	f8cd b008 	str.w	fp, [sp, #8]
 802172e:	464c      	mov	r4, r9
 8021730:	461d      	mov	r5, r3
 8021732:	9903      	ldr	r1, [sp, #12]
 8021734:	e7d7      	b.n	80216e6 <__hexnan+0x2e>
 8021736:	2a29      	cmp	r2, #41	@ 0x29
 8021738:	d157      	bne.n	80217ea <__hexnan+0x132>
 802173a:	3102      	adds	r1, #2
 802173c:	f8ca 1000 	str.w	r1, [sl]
 8021740:	f1bb 0f00 	cmp.w	fp, #0
 8021744:	d051      	beq.n	80217ea <__hexnan+0x132>
 8021746:	454c      	cmp	r4, r9
 8021748:	d206      	bcs.n	8021758 <__hexnan+0xa0>
 802174a:	2d07      	cmp	r5, #7
 802174c:	dc04      	bgt.n	8021758 <__hexnan+0xa0>
 802174e:	462a      	mov	r2, r5
 8021750:	4649      	mov	r1, r9
 8021752:	4620      	mov	r0, r4
 8021754:	f7ff ff8a 	bl	802166c <L_shift>
 8021758:	4544      	cmp	r4, r8
 802175a:	d936      	bls.n	80217ca <__hexnan+0x112>
 802175c:	f1a8 0204 	sub.w	r2, r8, #4
 8021760:	4623      	mov	r3, r4
 8021762:	f853 1b04 	ldr.w	r1, [r3], #4
 8021766:	f842 1f04 	str.w	r1, [r2, #4]!
 802176a:	429f      	cmp	r7, r3
 802176c:	d2f9      	bcs.n	8021762 <__hexnan+0xaa>
 802176e:	1b3b      	subs	r3, r7, r4
 8021770:	f023 0303 	bic.w	r3, r3, #3
 8021774:	3304      	adds	r3, #4
 8021776:	3401      	adds	r4, #1
 8021778:	3e03      	subs	r6, #3
 802177a:	42b4      	cmp	r4, r6
 802177c:	bf88      	it	hi
 802177e:	2304      	movhi	r3, #4
 8021780:	4443      	add	r3, r8
 8021782:	2200      	movs	r2, #0
 8021784:	f843 2b04 	str.w	r2, [r3], #4
 8021788:	429f      	cmp	r7, r3
 802178a:	d2fb      	bcs.n	8021784 <__hexnan+0xcc>
 802178c:	683b      	ldr	r3, [r7, #0]
 802178e:	b91b      	cbnz	r3, 8021798 <__hexnan+0xe0>
 8021790:	4547      	cmp	r7, r8
 8021792:	d128      	bne.n	80217e6 <__hexnan+0x12e>
 8021794:	2301      	movs	r3, #1
 8021796:	603b      	str	r3, [r7, #0]
 8021798:	2005      	movs	r0, #5
 802179a:	b007      	add	sp, #28
 802179c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217a0:	3501      	adds	r5, #1
 80217a2:	2d08      	cmp	r5, #8
 80217a4:	f10b 0b01 	add.w	fp, fp, #1
 80217a8:	dd06      	ble.n	80217b8 <__hexnan+0x100>
 80217aa:	4544      	cmp	r4, r8
 80217ac:	d9c1      	bls.n	8021732 <__hexnan+0x7a>
 80217ae:	2300      	movs	r3, #0
 80217b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80217b4:	2501      	movs	r5, #1
 80217b6:	3c04      	subs	r4, #4
 80217b8:	6822      	ldr	r2, [r4, #0]
 80217ba:	f000 000f 	and.w	r0, r0, #15
 80217be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80217c2:	6020      	str	r0, [r4, #0]
 80217c4:	e7b5      	b.n	8021732 <__hexnan+0x7a>
 80217c6:	2508      	movs	r5, #8
 80217c8:	e7b3      	b.n	8021732 <__hexnan+0x7a>
 80217ca:	9b01      	ldr	r3, [sp, #4]
 80217cc:	2b00      	cmp	r3, #0
 80217ce:	d0dd      	beq.n	802178c <__hexnan+0xd4>
 80217d0:	f1c3 0320 	rsb	r3, r3, #32
 80217d4:	f04f 32ff 	mov.w	r2, #4294967295
 80217d8:	40da      	lsrs	r2, r3
 80217da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80217de:	4013      	ands	r3, r2
 80217e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80217e4:	e7d2      	b.n	802178c <__hexnan+0xd4>
 80217e6:	3f04      	subs	r7, #4
 80217e8:	e7d0      	b.n	802178c <__hexnan+0xd4>
 80217ea:	2004      	movs	r0, #4
 80217ec:	e7d5      	b.n	802179a <__hexnan+0xe2>

080217ee <__ascii_mbtowc>:
 80217ee:	b082      	sub	sp, #8
 80217f0:	b901      	cbnz	r1, 80217f4 <__ascii_mbtowc+0x6>
 80217f2:	a901      	add	r1, sp, #4
 80217f4:	b142      	cbz	r2, 8021808 <__ascii_mbtowc+0x1a>
 80217f6:	b14b      	cbz	r3, 802180c <__ascii_mbtowc+0x1e>
 80217f8:	7813      	ldrb	r3, [r2, #0]
 80217fa:	600b      	str	r3, [r1, #0]
 80217fc:	7812      	ldrb	r2, [r2, #0]
 80217fe:	1e10      	subs	r0, r2, #0
 8021800:	bf18      	it	ne
 8021802:	2001      	movne	r0, #1
 8021804:	b002      	add	sp, #8
 8021806:	4770      	bx	lr
 8021808:	4610      	mov	r0, r2
 802180a:	e7fb      	b.n	8021804 <__ascii_mbtowc+0x16>
 802180c:	f06f 0001 	mvn.w	r0, #1
 8021810:	e7f8      	b.n	8021804 <__ascii_mbtowc+0x16>

08021812 <_realloc_r>:
 8021812:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021816:	4680      	mov	r8, r0
 8021818:	4615      	mov	r5, r2
 802181a:	460c      	mov	r4, r1
 802181c:	b921      	cbnz	r1, 8021828 <_realloc_r+0x16>
 802181e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021822:	4611      	mov	r1, r2
 8021824:	f7fd bdf0 	b.w	801f408 <_malloc_r>
 8021828:	b92a      	cbnz	r2, 8021836 <_realloc_r+0x24>
 802182a:	f7fd fd79 	bl	801f320 <_free_r>
 802182e:	2400      	movs	r4, #0
 8021830:	4620      	mov	r0, r4
 8021832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021836:	f000 f8ef 	bl	8021a18 <_malloc_usable_size_r>
 802183a:	4285      	cmp	r5, r0
 802183c:	4606      	mov	r6, r0
 802183e:	d802      	bhi.n	8021846 <_realloc_r+0x34>
 8021840:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8021844:	d8f4      	bhi.n	8021830 <_realloc_r+0x1e>
 8021846:	4629      	mov	r1, r5
 8021848:	4640      	mov	r0, r8
 802184a:	f7fd fddd 	bl	801f408 <_malloc_r>
 802184e:	4607      	mov	r7, r0
 8021850:	2800      	cmp	r0, #0
 8021852:	d0ec      	beq.n	802182e <_realloc_r+0x1c>
 8021854:	42b5      	cmp	r5, r6
 8021856:	462a      	mov	r2, r5
 8021858:	4621      	mov	r1, r4
 802185a:	bf28      	it	cs
 802185c:	4632      	movcs	r2, r6
 802185e:	f7fc fede 	bl	801e61e <memcpy>
 8021862:	4621      	mov	r1, r4
 8021864:	4640      	mov	r0, r8
 8021866:	f7fd fd5b 	bl	801f320 <_free_r>
 802186a:	463c      	mov	r4, r7
 802186c:	e7e0      	b.n	8021830 <_realloc_r+0x1e>

0802186e <__ascii_wctomb>:
 802186e:	4603      	mov	r3, r0
 8021870:	4608      	mov	r0, r1
 8021872:	b141      	cbz	r1, 8021886 <__ascii_wctomb+0x18>
 8021874:	2aff      	cmp	r2, #255	@ 0xff
 8021876:	d904      	bls.n	8021882 <__ascii_wctomb+0x14>
 8021878:	228a      	movs	r2, #138	@ 0x8a
 802187a:	601a      	str	r2, [r3, #0]
 802187c:	f04f 30ff 	mov.w	r0, #4294967295
 8021880:	4770      	bx	lr
 8021882:	700a      	strb	r2, [r1, #0]
 8021884:	2001      	movs	r0, #1
 8021886:	4770      	bx	lr

08021888 <__swhatbuf_r>:
 8021888:	b570      	push	{r4, r5, r6, lr}
 802188a:	460c      	mov	r4, r1
 802188c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021890:	2900      	cmp	r1, #0
 8021892:	b096      	sub	sp, #88	@ 0x58
 8021894:	4615      	mov	r5, r2
 8021896:	461e      	mov	r6, r3
 8021898:	da0d      	bge.n	80218b6 <__swhatbuf_r+0x2e>
 802189a:	89a3      	ldrh	r3, [r4, #12]
 802189c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80218a0:	f04f 0100 	mov.w	r1, #0
 80218a4:	bf14      	ite	ne
 80218a6:	2340      	movne	r3, #64	@ 0x40
 80218a8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80218ac:	2000      	movs	r0, #0
 80218ae:	6031      	str	r1, [r6, #0]
 80218b0:	602b      	str	r3, [r5, #0]
 80218b2:	b016      	add	sp, #88	@ 0x58
 80218b4:	bd70      	pop	{r4, r5, r6, pc}
 80218b6:	466a      	mov	r2, sp
 80218b8:	f000 f878 	bl	80219ac <_fstat_r>
 80218bc:	2800      	cmp	r0, #0
 80218be:	dbec      	blt.n	802189a <__swhatbuf_r+0x12>
 80218c0:	9901      	ldr	r1, [sp, #4]
 80218c2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80218c6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80218ca:	4259      	negs	r1, r3
 80218cc:	4159      	adcs	r1, r3
 80218ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80218d2:	e7eb      	b.n	80218ac <__swhatbuf_r+0x24>

080218d4 <__smakebuf_r>:
 80218d4:	898b      	ldrh	r3, [r1, #12]
 80218d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80218d8:	079d      	lsls	r5, r3, #30
 80218da:	4606      	mov	r6, r0
 80218dc:	460c      	mov	r4, r1
 80218de:	d507      	bpl.n	80218f0 <__smakebuf_r+0x1c>
 80218e0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80218e4:	6023      	str	r3, [r4, #0]
 80218e6:	6123      	str	r3, [r4, #16]
 80218e8:	2301      	movs	r3, #1
 80218ea:	6163      	str	r3, [r4, #20]
 80218ec:	b003      	add	sp, #12
 80218ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80218f0:	ab01      	add	r3, sp, #4
 80218f2:	466a      	mov	r2, sp
 80218f4:	f7ff ffc8 	bl	8021888 <__swhatbuf_r>
 80218f8:	9f00      	ldr	r7, [sp, #0]
 80218fa:	4605      	mov	r5, r0
 80218fc:	4639      	mov	r1, r7
 80218fe:	4630      	mov	r0, r6
 8021900:	f7fd fd82 	bl	801f408 <_malloc_r>
 8021904:	b948      	cbnz	r0, 802191a <__smakebuf_r+0x46>
 8021906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802190a:	059a      	lsls	r2, r3, #22
 802190c:	d4ee      	bmi.n	80218ec <__smakebuf_r+0x18>
 802190e:	f023 0303 	bic.w	r3, r3, #3
 8021912:	f043 0302 	orr.w	r3, r3, #2
 8021916:	81a3      	strh	r3, [r4, #12]
 8021918:	e7e2      	b.n	80218e0 <__smakebuf_r+0xc>
 802191a:	89a3      	ldrh	r3, [r4, #12]
 802191c:	6020      	str	r0, [r4, #0]
 802191e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021922:	81a3      	strh	r3, [r4, #12]
 8021924:	9b01      	ldr	r3, [sp, #4]
 8021926:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802192a:	b15b      	cbz	r3, 8021944 <__smakebuf_r+0x70>
 802192c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021930:	4630      	mov	r0, r6
 8021932:	f000 f84d 	bl	80219d0 <_isatty_r>
 8021936:	b128      	cbz	r0, 8021944 <__smakebuf_r+0x70>
 8021938:	89a3      	ldrh	r3, [r4, #12]
 802193a:	f023 0303 	bic.w	r3, r3, #3
 802193e:	f043 0301 	orr.w	r3, r3, #1
 8021942:	81a3      	strh	r3, [r4, #12]
 8021944:	89a3      	ldrh	r3, [r4, #12]
 8021946:	431d      	orrs	r5, r3
 8021948:	81a5      	strh	r5, [r4, #12]
 802194a:	e7cf      	b.n	80218ec <__smakebuf_r+0x18>

0802194c <_raise_r>:
 802194c:	291f      	cmp	r1, #31
 802194e:	b538      	push	{r3, r4, r5, lr}
 8021950:	4605      	mov	r5, r0
 8021952:	460c      	mov	r4, r1
 8021954:	d904      	bls.n	8021960 <_raise_r+0x14>
 8021956:	2316      	movs	r3, #22
 8021958:	6003      	str	r3, [r0, #0]
 802195a:	f04f 30ff 	mov.w	r0, #4294967295
 802195e:	bd38      	pop	{r3, r4, r5, pc}
 8021960:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8021962:	b112      	cbz	r2, 802196a <_raise_r+0x1e>
 8021964:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021968:	b94b      	cbnz	r3, 802197e <_raise_r+0x32>
 802196a:	4628      	mov	r0, r5
 802196c:	f000 f852 	bl	8021a14 <_getpid_r>
 8021970:	4622      	mov	r2, r4
 8021972:	4601      	mov	r1, r0
 8021974:	4628      	mov	r0, r5
 8021976:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802197a:	f000 b839 	b.w	80219f0 <_kill_r>
 802197e:	2b01      	cmp	r3, #1
 8021980:	d00a      	beq.n	8021998 <_raise_r+0x4c>
 8021982:	1c59      	adds	r1, r3, #1
 8021984:	d103      	bne.n	802198e <_raise_r+0x42>
 8021986:	2316      	movs	r3, #22
 8021988:	6003      	str	r3, [r0, #0]
 802198a:	2001      	movs	r0, #1
 802198c:	e7e7      	b.n	802195e <_raise_r+0x12>
 802198e:	2100      	movs	r1, #0
 8021990:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8021994:	4620      	mov	r0, r4
 8021996:	4798      	blx	r3
 8021998:	2000      	movs	r0, #0
 802199a:	e7e0      	b.n	802195e <_raise_r+0x12>

0802199c <raise>:
 802199c:	4b02      	ldr	r3, [pc, #8]	@ (80219a8 <raise+0xc>)
 802199e:	4601      	mov	r1, r0
 80219a0:	6818      	ldr	r0, [r3, #0]
 80219a2:	f7ff bfd3 	b.w	802194c <_raise_r>
 80219a6:	bf00      	nop
 80219a8:	20000060 	.word	0x20000060

080219ac <_fstat_r>:
 80219ac:	b538      	push	{r3, r4, r5, lr}
 80219ae:	4d07      	ldr	r5, [pc, #28]	@ (80219cc <_fstat_r+0x20>)
 80219b0:	2300      	movs	r3, #0
 80219b2:	4604      	mov	r4, r0
 80219b4:	4608      	mov	r0, r1
 80219b6:	4611      	mov	r1, r2
 80219b8:	602b      	str	r3, [r5, #0]
 80219ba:	f7e0 fa0d 	bl	8001dd8 <_fstat>
 80219be:	1c43      	adds	r3, r0, #1
 80219c0:	d102      	bne.n	80219c8 <_fstat_r+0x1c>
 80219c2:	682b      	ldr	r3, [r5, #0]
 80219c4:	b103      	cbz	r3, 80219c8 <_fstat_r+0x1c>
 80219c6:	6023      	str	r3, [r4, #0]
 80219c8:	bd38      	pop	{r3, r4, r5, pc}
 80219ca:	bf00      	nop
 80219cc:	2001294c 	.word	0x2001294c

080219d0 <_isatty_r>:
 80219d0:	b538      	push	{r3, r4, r5, lr}
 80219d2:	4d06      	ldr	r5, [pc, #24]	@ (80219ec <_isatty_r+0x1c>)
 80219d4:	2300      	movs	r3, #0
 80219d6:	4604      	mov	r4, r0
 80219d8:	4608      	mov	r0, r1
 80219da:	602b      	str	r3, [r5, #0]
 80219dc:	f7e0 fa0c 	bl	8001df8 <_isatty>
 80219e0:	1c43      	adds	r3, r0, #1
 80219e2:	d102      	bne.n	80219ea <_isatty_r+0x1a>
 80219e4:	682b      	ldr	r3, [r5, #0]
 80219e6:	b103      	cbz	r3, 80219ea <_isatty_r+0x1a>
 80219e8:	6023      	str	r3, [r4, #0]
 80219ea:	bd38      	pop	{r3, r4, r5, pc}
 80219ec:	2001294c 	.word	0x2001294c

080219f0 <_kill_r>:
 80219f0:	b538      	push	{r3, r4, r5, lr}
 80219f2:	4d07      	ldr	r5, [pc, #28]	@ (8021a10 <_kill_r+0x20>)
 80219f4:	2300      	movs	r3, #0
 80219f6:	4604      	mov	r4, r0
 80219f8:	4608      	mov	r0, r1
 80219fa:	4611      	mov	r1, r2
 80219fc:	602b      	str	r3, [r5, #0]
 80219fe:	f7e0 f9a5 	bl	8001d4c <_kill>
 8021a02:	1c43      	adds	r3, r0, #1
 8021a04:	d102      	bne.n	8021a0c <_kill_r+0x1c>
 8021a06:	682b      	ldr	r3, [r5, #0]
 8021a08:	b103      	cbz	r3, 8021a0c <_kill_r+0x1c>
 8021a0a:	6023      	str	r3, [r4, #0]
 8021a0c:	bd38      	pop	{r3, r4, r5, pc}
 8021a0e:	bf00      	nop
 8021a10:	2001294c 	.word	0x2001294c

08021a14 <_getpid_r>:
 8021a14:	f7e0 b992 	b.w	8001d3c <_getpid>

08021a18 <_malloc_usable_size_r>:
 8021a18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021a1c:	1f18      	subs	r0, r3, #4
 8021a1e:	2b00      	cmp	r3, #0
 8021a20:	bfbc      	itt	lt
 8021a22:	580b      	ldrlt	r3, [r1, r0]
 8021a24:	18c0      	addlt	r0, r0, r3
 8021a26:	4770      	bx	lr

08021a28 <_init>:
 8021a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a2a:	bf00      	nop
 8021a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021a2e:	bc08      	pop	{r3}
 8021a30:	469e      	mov	lr, r3
 8021a32:	4770      	bx	lr

08021a34 <_fini>:
 8021a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021a36:	bf00      	nop
 8021a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021a3a:	bc08      	pop	{r3}
 8021a3c:	469e      	mov	lr, r3
 8021a3e:	4770      	bx	lr
