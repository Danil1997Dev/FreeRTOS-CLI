
RTOS-CLI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021480  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000045cc  08021610  08021610  00022610  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025bdc  08025bdc  000271fc  2**0
                  CONTENTS
  4 .ARM          00000008  08025bdc  08025bdc  00026bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08025be4  08025be4  000271fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08025be4  08025be4  00026be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08025be8  08025be8  00026be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  08025bec  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000271fc  2**0
                  CONTENTS
 10 .bss          0000ed20  200001fc  200001fc  000271fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  2000ef1c  2000ef1c  000271fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000271fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003ee4d  00000000  00000000  0002722c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009721  00000000  00000000  00066079  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ef0  00000000  00000000  0006f7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000255e  00000000  00000000  00072690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000359d7  00000000  00000000  00074bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00048005  00000000  00000000  000aa5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fbf07  00000000  00000000  000f25ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001ee4d1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d770  00000000  00000000  001ee514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  001fbc84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001fc 	.word	0x200001fc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080215f8 	.word	0x080215f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000200 	.word	0x20000200
 80001cc:	080215f8 	.word	0x080215f8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0

}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr

08000ff2 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
return 0;
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001008:	f000 fe6e 	bl	8001ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800100c:	f000 f852 	bl	80010b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001010:	f000 f966 	bl	80012e0 <MX_GPIO_Init>
  MX_TIM5_Init();
 8001014:	f000 f8ec 	bl	80011f0 <MX_TIM5_Init>
  MX_SDIO_SD_Init();
 8001018:	f000 f8ca 	bl	80011b0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800101c:	f005 fd9c 	bl	8006b58 <MX_FATFS_Init>
  MX_RNG_Init();
 8001020:	f000 f8b2 	bl	8001188 <MX_RNG_Init>
// HAL_UART_Transmit(&huart3, (uint8_t *)"Start\n\r", sizeof("Start\n\r"), 0xffff);
  //HAL_UART_Transmit(&huart3, (uint8_t *)buf, sizeof(buf), 0xffff);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001024:	f006 fd7e 	bl	8007b24 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of dhcpSem */
  dhcpSemHandle = osSemaphoreNew(1, 0, &dhcpSem_attributes);
 8001028:	4a15      	ldr	r2, [pc, #84]	@ (8001080 <main+0x7c>)
 800102a:	2100      	movs	r1, #0
 800102c:	2001      	movs	r0, #1
 800102e:	f006 ffb6 	bl	8007f9e <osSemaphoreNew>
 8001032:	4603      	mov	r3, r0
 8001034:	4a13      	ldr	r2, [pc, #76]	@ (8001084 <main+0x80>)
 8001036:	6013      	str	r3, [r2, #0]

  /* creation of uartConfigSem */
  uartConfigSemHandle = osSemaphoreNew(1, 0, &uartConfigSem_attributes);
 8001038:	4a13      	ldr	r2, [pc, #76]	@ (8001088 <main+0x84>)
 800103a:	2100      	movs	r1, #0
 800103c:	2001      	movs	r0, #1
 800103e:	f006 ffae 	bl	8007f9e <osSemaphoreNew>
 8001042:	4603      	mov	r3, r0
 8001044:	4a11      	ldr	r2, [pc, #68]	@ (800108c <main+0x88>)
 8001046:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001048:	4a11      	ldr	r2, [pc, #68]	@ (8001090 <main+0x8c>)
 800104a:	2100      	movs	r1, #0
 800104c:	4811      	ldr	r0, [pc, #68]	@ (8001094 <main+0x90>)
 800104e:	f006 fdea 	bl	8007c26 <osThreadNew>
 8001052:	4603      	mov	r3, r0
 8001054:	4a10      	ldr	r2, [pc, #64]	@ (8001098 <main+0x94>)
 8001056:	6013      	str	r3, [r2, #0]

  /* creation of PrintTask */
  PrintTaskHandle = osThreadNew(StartPrintTask, NULL, &PrintTask_attributes);
 8001058:	4a10      	ldr	r2, [pc, #64]	@ (800109c <main+0x98>)
 800105a:	2100      	movs	r1, #0
 800105c:	4810      	ldr	r0, [pc, #64]	@ (80010a0 <main+0x9c>)
 800105e:	f006 fde2 	bl	8007c26 <osThreadNew>
 8001062:	4603      	mov	r3, r0
 8001064:	4a0f      	ldr	r2, [pc, #60]	@ (80010a4 <main+0xa0>)
 8001066:	6013      	str	r3, [r2, #0]

  /* creation of dhcpTask */
  dhcpTaskHandle = osThreadNew(StartDHCPTask, NULL, &dhcpTask_attributes);
 8001068:	4a0f      	ldr	r2, [pc, #60]	@ (80010a8 <main+0xa4>)
 800106a:	2100      	movs	r1, #0
 800106c:	480f      	ldr	r0, [pc, #60]	@ (80010ac <main+0xa8>)
 800106e:	f006 fdda 	bl	8007c26 <osThreadNew>
 8001072:	4603      	mov	r3, r0
 8001074:	4a0e      	ldr	r2, [pc, #56]	@ (80010b0 <main+0xac>)
 8001076:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001078:	f006 fd9a 	bl	8007bb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800107c:	bf00      	nop
 800107e:	e7fd      	b.n	800107c <main+0x78>
 8001080:	08025568 	.word	0x08025568
 8001084:	20000348 	.word	0x20000348
 8001088:	08025578 	.word	0x08025578
 800108c:	2000034c 	.word	0x2000034c
 8001090:	080254fc 	.word	0x080254fc
 8001094:	08001385 	.word	0x08001385
 8001098:	2000033c 	.word	0x2000033c
 800109c:	08025520 	.word	0x08025520
 80010a0:	08001425 	.word	0x08001425
 80010a4:	20000340 	.word	0x20000340
 80010a8:	08025544 	.word	0x08025544
 80010ac:	0800146d 	.word	0x0800146d
 80010b0:	20000344 	.word	0x20000344

080010b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b094      	sub	sp, #80	@ 0x50
 80010b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ba:	f107 0320 	add.w	r3, r7, #32
 80010be:	2230      	movs	r2, #48	@ 0x30
 80010c0:	2100      	movs	r1, #0
 80010c2:	4618      	mov	r0, r3
 80010c4:	f01c ff01 	bl	801deca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d8:	2300      	movs	r3, #0
 80010da:	60bb      	str	r3, [r7, #8]
 80010dc:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <SystemClock_Config+0xcc>)
 80010de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e0:	4a27      	ldr	r2, [pc, #156]	@ (8001180 <SystemClock_Config+0xcc>)
 80010e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80010e8:	4b25      	ldr	r3, [pc, #148]	@ (8001180 <SystemClock_Config+0xcc>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
 80010f8:	4b22      	ldr	r3, [pc, #136]	@ (8001184 <SystemClock_Config+0xd0>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a21      	ldr	r2, [pc, #132]	@ (8001184 <SystemClock_Config+0xd0>)
 80010fe:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001102:	6013      	str	r3, [r2, #0]
 8001104:	4b1f      	ldr	r3, [pc, #124]	@ (8001184 <SystemClock_Config+0xd0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800110c:	607b      	str	r3, [r7, #4]
 800110e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001110:	2302      	movs	r3, #2
 8001112:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001114:	2301      	movs	r3, #1
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001118:	2310      	movs	r3, #16
 800111a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800111c:	2302      	movs	r3, #2
 800111e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001120:	2300      	movs	r3, #0
 8001122:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001124:	2308      	movs	r3, #8
 8001126:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001128:	23a8      	movs	r3, #168	@ 0xa8
 800112a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800112c:	2302      	movs	r3, #2
 800112e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001130:	2307      	movs	r3, #7
 8001132:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001134:	f107 0320 	add.w	r3, r7, #32
 8001138:	4618      	mov	r0, r3
 800113a:	f002 fbc3 	bl	80038c4 <HAL_RCC_OscConfig>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001144:	f000 f9c2 	bl	80014cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001148:	230f      	movs	r3, #15
 800114a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114c:	2302      	movs	r3, #2
 800114e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001154:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001158:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800115a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800115e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001160:	f107 030c 	add.w	r3, r7, #12
 8001164:	2105      	movs	r1, #5
 8001166:	4618      	mov	r0, r3
 8001168:	f002 fe24 	bl	8003db4 <HAL_RCC_ClockConfig>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001172:	f000 f9ab 	bl	80014cc <Error_Handler>
  }
}
 8001176:	bf00      	nop
 8001178:	3750      	adds	r7, #80	@ 0x50
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	40023800 	.word	0x40023800
 8001184:	40007000 	.word	0x40007000

08001188 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800118c:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <MX_RNG_Init+0x20>)
 800118e:	4a07      	ldr	r2, [pc, #28]	@ (80011ac <MX_RNG_Init+0x24>)
 8001190:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001192:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_RNG_Init+0x20>)
 8001194:	f003 f820 	bl	80041d8 <HAL_RNG_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800119e:	f000 f995 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000218 	.word	0x20000218
 80011ac:	50060800 	.word	0x50060800

080011b0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <MX_SDIO_SD_Init+0x38>)
 80011b6:	4a0d      	ldr	r2, [pc, #52]	@ (80011ec <MX_SDIO_SD_Init+0x3c>)
 80011b8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <MX_SDIO_SD_Init+0x38>)
 80011bc:	2200      	movs	r2, #0
 80011be:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80011c0:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <MX_SDIO_SD_Init+0x38>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <MX_SDIO_SD_Init+0x38>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <MX_SDIO_SD_Init+0x38>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80011d2:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <MX_SDIO_SD_Init+0x38>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80011d8:	4b03      	ldr	r3, [pc, #12]	@ (80011e8 <MX_SDIO_SD_Init+0x38>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	20000228 	.word	0x20000228
 80011ec:	40012c00 	.word	0x40012c00

080011f0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f6:	f107 0308 	add.w	r3, r7, #8
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]
 80011fe:	605a      	str	r2, [r3, #4]
 8001200:	609a      	str	r2, [r3, #8]
 8001202:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001204:	463b      	mov	r3, r7
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800120c:	4b1d      	ldr	r3, [pc, #116]	@ (8001284 <MX_TIM5_Init+0x94>)
 800120e:	4a1e      	ldr	r2, [pc, #120]	@ (8001288 <MX_TIM5_Init+0x98>)
 8001210:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 599;
 8001212:	4b1c      	ldr	r3, [pc, #112]	@ (8001284 <MX_TIM5_Init+0x94>)
 8001214:	f240 2257 	movw	r2, #599	@ 0x257
 8001218:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121a:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <MX_TIM5_Init+0x94>)
 800121c:	2200      	movs	r2, #0
 800121e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001220:	4b18      	ldr	r3, [pc, #96]	@ (8001284 <MX_TIM5_Init+0x94>)
 8001222:	f04f 32ff 	mov.w	r2, #4294967295
 8001226:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001228:	4b16      	ldr	r3, [pc, #88]	@ (8001284 <MX_TIM5_Init+0x94>)
 800122a:	2200      	movs	r2, #0
 800122c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <MX_TIM5_Init+0x94>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001234:	4813      	ldr	r0, [pc, #76]	@ (8001284 <MX_TIM5_Init+0x94>)
 8001236:	f003 fef9 	bl	800502c <HAL_TIM_Base_Init>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001240:	f000 f944 	bl	80014cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001244:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001248:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800124a:	f107 0308 	add.w	r3, r7, #8
 800124e:	4619      	mov	r1, r3
 8001250:	480c      	ldr	r0, [pc, #48]	@ (8001284 <MX_TIM5_Init+0x94>)
 8001252:	f004 f89b 	bl	800538c <HAL_TIM_ConfigClockSource>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 800125c:	f000 f936 	bl	80014cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001260:	2300      	movs	r3, #0
 8001262:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001264:	2300      	movs	r3, #0
 8001266:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001268:	463b      	mov	r3, r7
 800126a:	4619      	mov	r1, r3
 800126c:	4805      	ldr	r0, [pc, #20]	@ (8001284 <MX_TIM5_Init+0x94>)
 800126e:	f004 fac3 	bl	80057f8 <HAL_TIMEx_MasterConfigSynchronization>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001278:	f000 f928 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800127c:	bf00      	nop
 800127e:	3718      	adds	r7, #24
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200002ac 	.word	0x200002ac
 8001288:	40000c00 	.word	0x40000c00

0800128c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <MX_USART3_UART_Init+0x4c>)
 8001292:	4a12      	ldr	r2, [pc, #72]	@ (80012dc <MX_USART3_UART_Init+0x50>)
 8001294:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001296:	4b10      	ldr	r3, [pc, #64]	@ (80012d8 <MX_USART3_UART_Init+0x4c>)
 8001298:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800129c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <MX_USART3_UART_Init+0x4c>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012a4:	4b0c      	ldr	r3, [pc, #48]	@ (80012d8 <MX_USART3_UART_Init+0x4c>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012aa:	4b0b      	ldr	r3, [pc, #44]	@ (80012d8 <MX_USART3_UART_Init+0x4c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <MX_USART3_UART_Init+0x4c>)
 80012b2:	220c      	movs	r2, #12
 80012b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012b6:	4b08      	ldr	r3, [pc, #32]	@ (80012d8 <MX_USART3_UART_Init+0x4c>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012bc:	4b06      	ldr	r3, [pc, #24]	@ (80012d8 <MX_USART3_UART_Init+0x4c>)
 80012be:	2200      	movs	r2, #0
 80012c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012c2:	4805      	ldr	r0, [pc, #20]	@ (80012d8 <MX_USART3_UART_Init+0x4c>)
 80012c4:	f004 fb28 	bl	8005918 <HAL_UART_Init>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80012ce:	f000 f8fd 	bl	80014cc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	200002f4 	.word	0x200002f4
 80012dc:	40004800 	.word	0x40004800

080012e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	617b      	str	r3, [r7, #20]
 80012ea:	4b25      	ldr	r3, [pc, #148]	@ (8001380 <MX_GPIO_Init+0xa0>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a24      	ldr	r2, [pc, #144]	@ (8001380 <MX_GPIO_Init+0xa0>)
 80012f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b22      	ldr	r3, [pc, #136]	@ (8001380 <MX_GPIO_Init+0xa0>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	613b      	str	r3, [r7, #16]
 8001306:	4b1e      	ldr	r3, [pc, #120]	@ (8001380 <MX_GPIO_Init+0xa0>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a1d      	ldr	r2, [pc, #116]	@ (8001380 <MX_GPIO_Init+0xa0>)
 800130c:	f043 0304 	orr.w	r3, r3, #4
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b1b      	ldr	r3, [pc, #108]	@ (8001380 <MX_GPIO_Init+0xa0>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f003 0304 	and.w	r3, r3, #4
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b17      	ldr	r3, [pc, #92]	@ (8001380 <MX_GPIO_Init+0xa0>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a16      	ldr	r2, [pc, #88]	@ (8001380 <MX_GPIO_Init+0xa0>)
 8001328:	f043 0301 	orr.w	r3, r3, #1
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b14      	ldr	r3, [pc, #80]	@ (8001380 <MX_GPIO_Init+0xa0>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0301 	and.w	r3, r3, #1
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60bb      	str	r3, [r7, #8]
 800133e:	4b10      	ldr	r3, [pc, #64]	@ (8001380 <MX_GPIO_Init+0xa0>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	4a0f      	ldr	r2, [pc, #60]	@ (8001380 <MX_GPIO_Init+0xa0>)
 8001344:	f043 0302 	orr.w	r3, r3, #2
 8001348:	6313      	str	r3, [r2, #48]	@ 0x30
 800134a:	4b0d      	ldr	r3, [pc, #52]	@ (8001380 <MX_GPIO_Init+0xa0>)
 800134c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	607b      	str	r3, [r7, #4]
 800135a:	4b09      	ldr	r3, [pc, #36]	@ (8001380 <MX_GPIO_Init+0xa0>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135e:	4a08      	ldr	r2, [pc, #32]	@ (8001380 <MX_GPIO_Init+0xa0>)
 8001360:	f043 0308 	orr.w	r3, r3, #8
 8001364:	6313      	str	r3, [r2, #48]	@ 0x30
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <MX_GPIO_Init+0xa0>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	607b      	str	r3, [r7, #4]
 8001370:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001372:	bf00      	nop
 8001374:	371c      	adds	r7, #28
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	40023800 	.word	0x40023800

08001384 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */

  /* USER CODE BEGIN 5 */
  struct sockaddr_in remout_host;
  int s;
  if (xSemaphoreTake(dhcpSemHandle, portMAX_DELAY))
 800138c:	4b20      	ldr	r3, [pc, #128]	@ (8001410 <StartDefaultTask+0x8c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f04f 31ff 	mov.w	r1, #4294967295
 8001394:	4618      	mov	r0, r3
 8001396:	f007 ff21 	bl	80091dc <xQueueSemaphoreTake>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d01f      	beq.n	80013e0 <StartDefaultTask+0x5c>
  {
	  s = lwip_socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
 80013a0:	2206      	movs	r2, #6
 80013a2:	2101      	movs	r1, #1
 80013a4:	2002      	movs	r0, #2
 80013a6:	f00d fa5d 	bl	800e864 <lwip_socket>
 80013aa:	61f8      	str	r0, [r7, #28]
	  remout_host.sin_family = AF_INET;
 80013ac:	2302      	movs	r3, #2
 80013ae:	737b      	strb	r3, [r7, #13]
	  remout_host.sin_port = htons(23);
 80013b0:	2017      	movs	r0, #23
 80013b2:	f00d fe0b 	bl	800efcc <lwip_htons>
 80013b6:	4603      	mov	r3, r0
 80013b8:	81fb      	strh	r3, [r7, #14]
	  ip4addr_aton("192.168.0.10",(ip4_addr_t*)&remout_host.sin_addr);
 80013ba:	f107 030c 	add.w	r3, r7, #12
 80013be:	3304      	adds	r3, #4
 80013c0:	4619      	mov	r1, r3
 80013c2:	4814      	ldr	r0, [pc, #80]	@ (8001414 <StartDefaultTask+0x90>)
 80013c4:	f01a fb06 	bl	801b9d4 <ip4addr_aton>
	  lwip_connect(s, (struct sockaddr *)&remout_host, sizeof(struct sockaddr_in));
 80013c8:	f107 030c 	add.w	r3, r7, #12
 80013cc:	2210      	movs	r2, #16
 80013ce:	4619      	mov	r1, r3
 80013d0:	69f8      	ldr	r0, [r7, #28]
 80013d2:	f00c fd8b 	bl	800deec <lwip_connect>
	  lwip_write(s, "Hello\n\r", sizeof("Hello\n\r"));
 80013d6:	2208      	movs	r2, #8
 80013d8:	490f      	ldr	r1, [pc, #60]	@ (8001418 <StartDefaultTask+0x94>)
 80013da:	69f8      	ldr	r0, [r7, #28]
 80013dc:	f00d faa0 	bl	800e920 <lwip_write>


  /* Infinite loop */
  for(;;)
  {
	lwip_recv(s, buf, 30, 0);
 80013e0:	2300      	movs	r3, #0
 80013e2:	221e      	movs	r2, #30
 80013e4:	490d      	ldr	r1, [pc, #52]	@ (800141c <StartDefaultTask+0x98>)
 80013e6:	69f8      	ldr	r0, [r7, #28]
 80013e8:	f00d f916 	bl	800e618 <lwip_recv>
	HAL_UART_Transmit(&huart3, buf, sizeof(buf), 0xffff);
 80013ec:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80013f0:	221e      	movs	r2, #30
 80013f2:	490a      	ldr	r1, [pc, #40]	@ (800141c <StartDefaultTask+0x98>)
 80013f4:	480a      	ldr	r0, [pc, #40]	@ (8001420 <StartDefaultTask+0x9c>)
 80013f6:	f004 fadf 	bl	80059b8 <HAL_UART_Transmit>
	memset(buf, (uint32_t)'\0', sizeof(buf));
 80013fa:	221e      	movs	r2, #30
 80013fc:	2100      	movs	r1, #0
 80013fe:	4807      	ldr	r0, [pc, #28]	@ (800141c <StartDefaultTask+0x98>)
 8001400:	f01c fd63 	bl	801deca <memset>
    osDelay(1);
 8001404:	2001      	movs	r0, #1
 8001406:	f006 fca1 	bl	8007d4c <osDelay>
	lwip_recv(s, buf, 30, 0);
 800140a:	bf00      	nop
 800140c:	e7e8      	b.n	80013e0 <StartDefaultTask+0x5c>
 800140e:	bf00      	nop
 8001410:	20000348 	.word	0x20000348
 8001414:	0802164c 	.word	0x0802164c
 8001418:	0802165c 	.word	0x0802165c
 800141c:	20000350 	.word	0x20000350
 8001420:	200002f4 	.word	0x200002f4

08001424 <StartPrintTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrintTask */
void StartPrintTask(void *argument)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPrintTask */
	HAL_Delay(10000);
 800142c:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001430:	f000 fc9c 	bl	8001d6c <HAL_Delay>
//	if (xSemaphoreTake(uartConfigSemHandle, portMAX_DELAY))
//	{
	  MX_USART3_UART_Init();
 8001434:	f7ff ff2a 	bl	800128c <MX_USART3_UART_Init>
	  HAL_UART_Transmit(&huart3, (uint8_t *)"UART config\n\r", sizeof("UART config\n\r"), 0xffff);
 8001438:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800143c:	220e      	movs	r2, #14
 800143e:	4908      	ldr	r1, [pc, #32]	@ (8001460 <StartPrintTask+0x3c>)
 8001440:	4808      	ldr	r0, [pc, #32]	@ (8001464 <StartPrintTask+0x40>)
 8001442:	f004 fab9 	bl	80059b8 <HAL_UART_Transmit>
//	}

  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Transmit(&huart3, (uint8_t *)"Start\n\r", sizeof("Start\n\r"), 0xffff);
 8001446:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800144a:	2208      	movs	r2, #8
 800144c:	4906      	ldr	r1, [pc, #24]	@ (8001468 <StartPrintTask+0x44>)
 800144e:	4805      	ldr	r0, [pc, #20]	@ (8001464 <StartPrintTask+0x40>)
 8001450:	f004 fab2 	bl	80059b8 <HAL_UART_Transmit>
	  //HAL_UART_Transmit(&huart3, (uint8_t *)buf, sizeof(buf), 0xffff);
	  //memset(buf, (uint32_t)'\0', sizeof(buf));

	  osDelay(1000);
 8001454:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001458:	f006 fc78 	bl	8007d4c <osDelay>
	  HAL_UART_Transmit(&huart3, (uint8_t *)"Start\n\r", sizeof("Start\n\r"), 0xffff);
 800145c:	bf00      	nop
 800145e:	e7f2      	b.n	8001446 <StartPrintTask+0x22>
 8001460:	08021664 	.word	0x08021664
 8001464:	200002f4 	.word	0x200002f4
 8001468:	08021674 	.word	0x08021674

0800146c <StartDHCPTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDHCPTask */
void StartDHCPTask(void *argument)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDHCPTask */
	//osDelay(3000);
	MX_LWIP_Init();
 8001474:	f005 fd8a 	bl	8006f8c <MX_LWIP_Init>
	osDelay(3000);
 8001478:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800147c:	f006 fc66 	bl	8007d4c <osDelay>
	//xSemaphoreGive(uartConfigSemHandle);

  /* Infinite loop */
  for(;;)
  {
	  if (gnetif.ip_addr.addr != 0)
 8001480:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <StartDHCPTask+0x34>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d006      	beq.n	8001496 <StartDHCPTask+0x2a>
	  {
		  xSemaphoreGive(dhcpSemHandle);
 8001488:	4b06      	ldr	r3, [pc, #24]	@ (80014a4 <StartDHCPTask+0x38>)
 800148a:	6818      	ldr	r0, [r3, #0]
 800148c:	2300      	movs	r3, #0
 800148e:	2200      	movs	r2, #0
 8001490:	2100      	movs	r1, #0
 8001492:	f007 fb91 	bl	8008bb8 <xQueueGenericSend>

	  }

    osDelay(1);
 8001496:	2001      	movs	r0, #1
 8001498:	f006 fc58 	bl	8007d4c <osDelay>
	  if (gnetif.ip_addr.addr != 0)
 800149c:	e7f0      	b.n	8001480 <StartDHCPTask+0x14>
 800149e:	bf00      	nop
 80014a0:	200003cc 	.word	0x200003cc
 80014a4:	20000348 	.word	0x20000348

080014a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a04      	ldr	r2, [pc, #16]	@ (80014c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d101      	bne.n	80014be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80014ba:	f000 fc37 	bl	8001d2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40010000 	.word	0x40010000

080014cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d0:	b672      	cpsid	i
}
 80014d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d4:	bf00      	nop
 80014d6:	e7fd      	b.n	80014d4 <Error_Handler+0x8>

080014d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014de:	2300      	movs	r3, #0
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	4b16      	ldr	r3, [pc, #88]	@ (800153c <HAL_MspInit+0x64>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	4a15      	ldr	r2, [pc, #84]	@ (800153c <HAL_MspInit+0x64>)
 80014e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80014ee:	4b13      	ldr	r3, [pc, #76]	@ (800153c <HAL_MspInit+0x64>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	603b      	str	r3, [r7, #0]
 80014fe:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <HAL_MspInit+0x64>)
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	4a0e      	ldr	r2, [pc, #56]	@ (800153c <HAL_MspInit+0x64>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001508:	6413      	str	r3, [r2, #64]	@ 0x40
 800150a:	4b0c      	ldr	r3, [pc, #48]	@ (800153c <HAL_MspInit+0x64>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	210f      	movs	r1, #15
 800151a:	f06f 0001 	mvn.w	r0, #1
 800151e:	f000 fd01 	bl	8001f24 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001522:	2200      	movs	r2, #0
 8001524:	2105      	movs	r1, #5
 8001526:	2005      	movs	r0, #5
 8001528:	f000 fcfc 	bl	8001f24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800152c:	2005      	movs	r0, #5
 800152e:	f000 fd15 	bl	8001f5c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800

08001540 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a0e      	ldr	r2, [pc, #56]	@ (8001588 <HAL_RNG_MspInit+0x48>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d115      	bne.n	800157e <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	4b0d      	ldr	r3, [pc, #52]	@ (800158c <HAL_RNG_MspInit+0x4c>)
 8001558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800155a:	4a0c      	ldr	r2, [pc, #48]	@ (800158c <HAL_RNG_MspInit+0x4c>)
 800155c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001560:	6353      	str	r3, [r2, #52]	@ 0x34
 8001562:	4b0a      	ldr	r3, [pc, #40]	@ (800158c <HAL_RNG_MspInit+0x4c>)
 8001564:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800156a:	60fb      	str	r3, [r7, #12]
 800156c:	68fb      	ldr	r3, [r7, #12]
    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 5, 0);
 800156e:	2200      	movs	r2, #0
 8001570:	2105      	movs	r1, #5
 8001572:	2050      	movs	r0, #80	@ 0x50
 8001574:	f000 fcd6 	bl	8001f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8001578:	2050      	movs	r0, #80	@ 0x50
 800157a:	f000 fcef 	bl	8001f5c <HAL_NVIC_EnableIRQ>

  /* USER CODE END RNG_MspInit 1 */

  }

}
 800157e:	bf00      	nop
 8001580:	3710      	adds	r7, #16
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	50060800 	.word	0x50060800
 800158c:	40023800 	.word	0x40023800

08001590 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b08a      	sub	sp, #40	@ 0x28
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a28      	ldr	r2, [pc, #160]	@ (8001650 <HAL_SD_MspInit+0xc0>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d14a      	bne.n	8001648 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b27      	ldr	r3, [pc, #156]	@ (8001654 <HAL_SD_MspInit+0xc4>)
 80015b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ba:	4a26      	ldr	r2, [pc, #152]	@ (8001654 <HAL_SD_MspInit+0xc4>)
 80015bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80015c2:	4b24      	ldr	r3, [pc, #144]	@ (8001654 <HAL_SD_MspInit+0xc4>)
 80015c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b20      	ldr	r3, [pc, #128]	@ (8001654 <HAL_SD_MspInit+0xc4>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d6:	4a1f      	ldr	r2, [pc, #124]	@ (8001654 <HAL_SD_MspInit+0xc4>)
 80015d8:	f043 0304 	orr.w	r3, r3, #4
 80015dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015de:	4b1d      	ldr	r3, [pc, #116]	@ (8001654 <HAL_SD_MspInit+0xc4>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b19      	ldr	r3, [pc, #100]	@ (8001654 <HAL_SD_MspInit+0xc4>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f2:	4a18      	ldr	r2, [pc, #96]	@ (8001654 <HAL_SD_MspInit+0xc4>)
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fa:	4b16      	ldr	r3, [pc, #88]	@ (8001654 <HAL_SD_MspInit+0xc4>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001606:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 800160a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001618:	230c      	movs	r3, #12
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	480d      	ldr	r0, [pc, #52]	@ (8001658 <HAL_SD_MspInit+0xc8>)
 8001624:	f001 ffb2 	bl	800358c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001628:	2304      	movs	r3, #4
 800162a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162c:	2302      	movs	r3, #2
 800162e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001634:	2303      	movs	r3, #3
 8001636:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001638:	230c      	movs	r3, #12
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	4806      	ldr	r0, [pc, #24]	@ (800165c <HAL_SD_MspInit+0xcc>)
 8001644:	f001 ffa2 	bl	800358c <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8001648:	bf00      	nop
 800164a:	3728      	adds	r7, #40	@ 0x28
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40012c00 	.word	0x40012c00
 8001654:	40023800 	.word	0x40023800
 8001658:	40020800 	.word	0x40020800
 800165c:	40020c00 	.word	0x40020c00

08001660 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0e      	ldr	r2, [pc, #56]	@ (80016a8 <HAL_TIM_Base_MspInit+0x48>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d115      	bne.n	800169e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b0d      	ldr	r3, [pc, #52]	@ (80016ac <HAL_TIM_Base_MspInit+0x4c>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800167a:	4a0c      	ldr	r2, [pc, #48]	@ (80016ac <HAL_TIM_Base_MspInit+0x4c>)
 800167c:	f043 0308 	orr.w	r3, r3, #8
 8001680:	6413      	str	r3, [r2, #64]	@ 0x40
 8001682:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <HAL_TIM_Base_MspInit+0x4c>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2105      	movs	r1, #5
 8001692:	2032      	movs	r0, #50	@ 0x32
 8001694:	f000 fc46 	bl	8001f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001698:	2032      	movs	r0, #50	@ 0x32
 800169a:	f000 fc5f 	bl	8001f5c <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM5_MspInit 1 */

  }

}
 800169e:	bf00      	nop
 80016a0:	3710      	adds	r7, #16
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40000c00 	.word	0x40000c00
 80016ac:	40023800 	.word	0x40023800

080016b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	@ 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a19      	ldr	r2, [pc, #100]	@ (8001734 <HAL_UART_MspInit+0x84>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d12c      	bne.n	800172c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	4b18      	ldr	r3, [pc, #96]	@ (8001738 <HAL_UART_MspInit+0x88>)
 80016d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016da:	4a17      	ldr	r2, [pc, #92]	@ (8001738 <HAL_UART_MspInit+0x88>)
 80016dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e2:	4b15      	ldr	r3, [pc, #84]	@ (8001738 <HAL_UART_MspInit+0x88>)
 80016e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016ea:	613b      	str	r3, [r7, #16]
 80016ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <HAL_UART_MspInit+0x88>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	4a10      	ldr	r2, [pc, #64]	@ (8001738 <HAL_UART_MspInit+0x88>)
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <HAL_UART_MspInit+0x88>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	f003 0308 	and.w	r3, r3, #8
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800170a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001718:	2303      	movs	r3, #3
 800171a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800171c:	2307      	movs	r3, #7
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001720:	f107 0314 	add.w	r3, r7, #20
 8001724:	4619      	mov	r1, r3
 8001726:	4805      	ldr	r0, [pc, #20]	@ (800173c <HAL_UART_MspInit+0x8c>)
 8001728:	f001 ff30 	bl	800358c <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800172c:	bf00      	nop
 800172e:	3728      	adds	r7, #40	@ 0x28
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40004800 	.word	0x40004800
 8001738:	40023800 	.word	0x40023800
 800173c:	40020c00 	.word	0x40020c00

08001740 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08c      	sub	sp, #48	@ 0x30
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	4b2f      	ldr	r3, [pc, #188]	@ (8001814 <HAL_InitTick+0xd4>)
 8001756:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001758:	4a2e      	ldr	r2, [pc, #184]	@ (8001814 <HAL_InitTick+0xd4>)
 800175a:	f043 0301 	orr.w	r3, r3, #1
 800175e:	6453      	str	r3, [r2, #68]	@ 0x44
 8001760:	4b2c      	ldr	r3, [pc, #176]	@ (8001814 <HAL_InitTick+0xd4>)
 8001762:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800176c:	f107 020c 	add.w	r2, r7, #12
 8001770:	f107 0310 	add.w	r3, r7, #16
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f002 fcfc 	bl	8004174 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800177c:	f002 fce6 	bl	800414c <HAL_RCC_GetPCLK2Freq>
 8001780:	4603      	mov	r3, r0
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001788:	4a23      	ldr	r2, [pc, #140]	@ (8001818 <HAL_InitTick+0xd8>)
 800178a:	fba2 2303 	umull	r2, r3, r2, r3
 800178e:	0c9b      	lsrs	r3, r3, #18
 8001790:	3b01      	subs	r3, #1
 8001792:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001794:	4b21      	ldr	r3, [pc, #132]	@ (800181c <HAL_InitTick+0xdc>)
 8001796:	4a22      	ldr	r2, [pc, #136]	@ (8001820 <HAL_InitTick+0xe0>)
 8001798:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800179a:	4b20      	ldr	r3, [pc, #128]	@ (800181c <HAL_InitTick+0xdc>)
 800179c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017a0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80017a2:	4a1e      	ldr	r2, [pc, #120]	@ (800181c <HAL_InitTick+0xdc>)
 80017a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017a6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80017a8:	4b1c      	ldr	r3, [pc, #112]	@ (800181c <HAL_InitTick+0xdc>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ae:	4b1b      	ldr	r3, [pc, #108]	@ (800181c <HAL_InitTick+0xdc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b4:	4b19      	ldr	r3, [pc, #100]	@ (800181c <HAL_InitTick+0xdc>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 80017ba:	4818      	ldr	r0, [pc, #96]	@ (800181c <HAL_InitTick+0xdc>)
 80017bc:	f003 fc36 	bl	800502c <HAL_TIM_Base_Init>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80017c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d11b      	bne.n	8001806 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80017ce:	4813      	ldr	r0, [pc, #76]	@ (800181c <HAL_InitTick+0xdc>)
 80017d0:	f003 fc7c 	bl	80050cc <HAL_TIM_Base_Start_IT>
 80017d4:	4603      	mov	r3, r0
 80017d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80017da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d111      	bne.n	8001806 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017e2:	2019      	movs	r0, #25
 80017e4:	f000 fbba 	bl	8001f5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2b0f      	cmp	r3, #15
 80017ec:	d808      	bhi.n	8001800 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80017ee:	2200      	movs	r2, #0
 80017f0:	6879      	ldr	r1, [r7, #4]
 80017f2:	2019      	movs	r0, #25
 80017f4:	f000 fb96 	bl	8001f24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017f8:	4a0a      	ldr	r2, [pc, #40]	@ (8001824 <HAL_InitTick+0xe4>)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	e002      	b.n	8001806 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001806:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800180a:	4618      	mov	r0, r3
 800180c:	3730      	adds	r7, #48	@ 0x30
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	431bde83 	.word	0x431bde83
 800181c:	20000370 	.word	0x20000370
 8001820:	40010000 	.word	0x40010000
 8001824:	20000004 	.word	0x20000004

08001828 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <NMI_Handler+0x4>

08001830 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <HardFault_Handler+0x4>

08001838 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <MemManage_Handler+0x4>

08001840 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <BusFault_Handler+0x4>

08001848 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800184c:	bf00      	nop
 800184e:	e7fd      	b.n	800184c <UsageFault_Handler+0x4>

08001850 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr

0800185e <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001862:	bf00      	nop
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001870:	4802      	ldr	r0, [pc, #8]	@ (800187c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001872:	f003 fc9b 	bl	80051ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	20000370 	.word	0x20000370

08001880 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001884:	4802      	ldr	r0, [pc, #8]	@ (8001890 <TIM5_IRQHandler+0x10>)
 8001886:	f003 fc91 	bl	80051ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	200002ac 	.word	0x200002ac

08001894 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001898:	4802      	ldr	r0, [pc, #8]	@ (80018a4 <ETH_IRQHandler+0x10>)
 800189a:	f000 ff8d 	bl	80027b8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20004f08 	.word	0x20004f08

080018a8 <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <ETH_WKUP_IRQHandler+0x10>)
 80018ae:	f000 ff83 	bl	80027b8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20004f08 	.word	0x20004f08

080018bc <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80018c0:	4802      	ldr	r0, [pc, #8]	@ (80018cc <HASH_RNG_IRQHandler+0x10>)
 80018c2:	f002 fcb3 	bl	800422c <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000218 	.word	0x20000218

080018d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return 1;
 80018d4:	2301      	movs	r3, #1
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <_kill>:

int _kill(int pid, int sig)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ea:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <_kill+0x20>)
 80018ec:	2216      	movs	r2, #22
 80018ee:	601a      	str	r2, [r3, #0]
  return -1;
 80018f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	2000ef0c 	.word	0x2000ef0c

08001904 <_exit>:

void _exit (int status)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800190c:	f04f 31ff 	mov.w	r1, #4294967295
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f7ff ffe5 	bl	80018e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001916:	bf00      	nop
 8001918:	e7fd      	b.n	8001916 <_exit+0x12>

0800191a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
 800192a:	e00a      	b.n	8001942 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800192c:	f3af 8000 	nop.w
 8001930:	4601      	mov	r1, r0
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	1c5a      	adds	r2, r3, #1
 8001936:	60ba      	str	r2, [r7, #8]
 8001938:	b2ca      	uxtb	r2, r1
 800193a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	3301      	adds	r3, #1
 8001940:	617b      	str	r3, [r7, #20]
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	429a      	cmp	r2, r3
 8001948:	dbf0      	blt.n	800192c <_read+0x12>
  }

  return len;
 800194a:	687b      	ldr	r3, [r7, #4]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001960:	2300      	movs	r3, #0
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	e009      	b.n	800197a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	60ba      	str	r2, [r7, #8]
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	4618      	mov	r0, r3
 8001970:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	3301      	adds	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	429a      	cmp	r2, r3
 8001980:	dbf1      	blt.n	8001966 <_write+0x12>
  }
  return len;
 8001982:	687b      	ldr	r3, [r7, #4]
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <_close>:

int _close(int file)
{
 800198c:	b480      	push	{r7}
 800198e:	b083      	sub	sp, #12
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001998:	4618      	mov	r0, r3
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr

080019a4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019b4:	605a      	str	r2, [r3, #4]
  return 0;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr

080019c4 <_isatty>:

int _isatty(int file)
{
 80019c4:	b480      	push	{r7}
 80019c6:	b083      	sub	sp, #12
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019cc:	2301      	movs	r3, #1
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019da:	b480      	push	{r7}
 80019dc:	b085      	sub	sp, #20
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019e6:	2300      	movs	r3, #0
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b087      	sub	sp, #28
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019fc:	4a14      	ldr	r2, [pc, #80]	@ (8001a50 <_sbrk+0x5c>)
 80019fe:	4b15      	ldr	r3, [pc, #84]	@ (8001a54 <_sbrk+0x60>)
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a08:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d102      	bne.n	8001a16 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a10:	4b11      	ldr	r3, [pc, #68]	@ (8001a58 <_sbrk+0x64>)
 8001a12:	4a12      	ldr	r2, [pc, #72]	@ (8001a5c <_sbrk+0x68>)
 8001a14:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a16:	4b10      	ldr	r3, [pc, #64]	@ (8001a58 <_sbrk+0x64>)
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d205      	bcs.n	8001a30 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001a24:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <_sbrk+0x6c>)
 8001a26:	220c      	movs	r2, #12
 8001a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	e009      	b.n	8001a44 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a30:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a36:	4b08      	ldr	r3, [pc, #32]	@ (8001a58 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	4a06      	ldr	r2, [pc, #24]	@ (8001a58 <_sbrk+0x64>)
 8001a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	371c      	adds	r7, #28
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	20020000 	.word	0x20020000
 8001a54:	00000800 	.word	0x00000800
 8001a58:	200003b8 	.word	0x200003b8
 8001a5c:	2000ef20 	.word	0x2000ef20
 8001a60:	2000ef0c 	.word	0x2000ef0c

08001a64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a68:	4b06      	ldr	r3, [pc, #24]	@ (8001a84 <SystemInit+0x20>)
 8001a6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a6e:	4a05      	ldr	r2, [pc, #20]	@ (8001a84 <SystemInit+0x20>)
 8001a70:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a74:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000ed00 	.word	0xe000ed00

08001a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001a88:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ac0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001a8c:	f7ff ffea 	bl	8001a64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a90:	480c      	ldr	r0, [pc, #48]	@ (8001ac4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001a92:	490d      	ldr	r1, [pc, #52]	@ (8001ac8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001a94:	4a0d      	ldr	r2, [pc, #52]	@ (8001acc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a98:	e002      	b.n	8001aa0 <LoopCopyDataInit>

08001a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9e:	3304      	adds	r3, #4

08001aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa4:	d3f9      	bcc.n	8001a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ad0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001aa8:	4c0a      	ldr	r4, [pc, #40]	@ (8001ad4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aac:	e001      	b.n	8001ab2 <LoopFillZerobss>

08001aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab0:	3204      	adds	r2, #4

08001ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab4:	d3fb      	bcc.n	8001aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ab6:	f01c fac9 	bl	801e04c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aba:	f7ff faa3 	bl	8001004 <main>
  bx  lr    
 8001abe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ac0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac8:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001acc:	08025bec 	.word	0x08025bec
  ldr r2, =_sbss
 8001ad0:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 8001ad4:	2000ef1c 	.word	0x2000ef1c

08001ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC_IRQHandler>

08001ada <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8001ada:	b480      	push	{r7}
 8001adc:	b083      	sub	sp, #12
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00b      	beq.n	8001b02 <DP83848_RegisterBusIO+0x28>
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d007      	beq.n	8001b02 <DP83848_RegisterBusIO+0x28>
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <DP83848_RegisterBusIO+0x28>
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d102      	bne.n	8001b08 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8001b02:	f04f 33ff 	mov.w	r3, #4294967295
 8001b06:	e014      	b.n	8001b32 <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68da      	ldr	r2, [r3, #12]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689a      	ldr	r2, [r3, #8]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <DP83848_Init>:
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ADDRESS_ERROR if cannot find device address
  *         DP83848_STATUS_READ_ERROR if connot read register
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8001b46:	2300      	movs	r3, #0
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d139      	bne.n	8001bce <DP83848_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <DP83848_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2220      	movs	r2, #32
 8001b6c:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
 8001b72:	e01c      	b.n	8001bae <DP83848_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	695b      	ldr	r3, [r3, #20]
 8001b78:	f107 020c 	add.w	r2, r7, #12
 8001b7c:	2119      	movs	r1, #25
 8001b7e:	6978      	ldr	r0, [r7, #20]
 8001b80:	4798      	blx	r3
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	da03      	bge.n	8001b90 <DP83848_Init+0x52>
       {
         status = DP83848_STATUS_READ_ERROR;
 8001b88:	f06f 0304 	mvn.w	r3, #4
 8001b8c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8001b8e:	e00b      	b.n	8001ba8 <DP83848_Init+0x6a>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 031f 	and.w	r3, r3, #31
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	d105      	bne.n	8001ba8 <DP83848_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
         break;
 8001ba6:	e005      	b.n	8001bb4 <DP83848_Init+0x76>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3301      	adds	r3, #1
 8001bac:	617b      	str	r3, [r7, #20]
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	2b1f      	cmp	r3, #31
 8001bb2:	d9df      	bls.n	8001b74 <DP83848_Init+0x36>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2b1f      	cmp	r3, #31
 8001bba:	d902      	bls.n	8001bc2 <DP83848_Init+0x84>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8001bbc:	f06f 0302 	mvn.w	r3, #2
 8001bc0:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d102      	bne.n	8001bce <DP83848_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8001bce:	693b      	ldr	r3, [r7, #16]
 }
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b084      	sub	sp, #16
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6810      	ldr	r0, [r2, #0]
 8001bec:	f107 020c 	add.w	r2, r7, #12
 8001bf0:	2101      	movs	r1, #1
 8001bf2:	4798      	blx	r3
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	da02      	bge.n	8001c00 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8001bfa:	f06f 0304 	mvn.w	r3, #4
 8001bfe:	e06e      	b.n	8001cde <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	695b      	ldr	r3, [r3, #20]
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6810      	ldr	r0, [r2, #0]
 8001c08:	f107 020c 	add.w	r2, r7, #12
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	4798      	blx	r3
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	da02      	bge.n	8001c1c <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8001c16:	f06f 0304 	mvn.w	r3, #4
 8001c1a:	e060      	b.n	8001cde <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e059      	b.n	8001cde <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6810      	ldr	r0, [r2, #0]
 8001c32:	f107 020c 	add.w	r2, r7, #12
 8001c36:	2100      	movs	r1, #0
 8001c38:	4798      	blx	r3
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	da02      	bge.n	8001c46 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8001c40:	f06f 0304 	mvn.w	r3, #4
 8001c44:	e04b      	b.n	8001cde <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d11b      	bne.n	8001c88 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d006      	beq.n	8001c68 <DP83848_GetLinkState+0x90>
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001c64:	2302      	movs	r3, #2
 8001c66:	e03a      	b.n	8001cde <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e033      	b.n	8001cde <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8001c80:	2304      	movs	r3, #4
 8001c82:	e02c      	b.n	8001cde <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001c84:	2305      	movs	r3, #5
 8001c86:	e02a      	b.n	8001cde <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	695b      	ldr	r3, [r3, #20]
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6810      	ldr	r0, [r2, #0]
 8001c90:	f107 020c 	add.w	r2, r7, #12
 8001c94:	2110      	movs	r1, #16
 8001c96:	4798      	blx	r3
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	da02      	bge.n	8001ca4 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8001c9e:	f06f 0304 	mvn.w	r3, #4
 8001ca2:	e01c      	b.n	8001cde <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 0310 	and.w	r3, r3, #16
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 8001cae:	2306      	movs	r3, #6
 8001cb0:	e015      	b.n	8001cde <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	f003 0306 	and.w	r3, r3, #6
 8001cb8:	2b04      	cmp	r3, #4
 8001cba:	d101      	bne.n	8001cc0 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e00e      	b.n	8001cde <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 0306 	and.w	r3, r3, #6
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e007      	b.n	8001cde <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f003 0306 	and.w	r3, r3, #6
 8001cd4:	2b06      	cmp	r3, #6
 8001cd6:	d101      	bne.n	8001cdc <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8001cd8:	2304      	movs	r3, #4
 8001cda:	e000      	b.n	8001cde <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8001cdc:	2305      	movs	r3, #5
    }
  }
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cec:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <HAL_Init+0x40>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a0d      	ldr	r2, [pc, #52]	@ (8001d28 <HAL_Init+0x40>)
 8001cf2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001cf6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <HAL_Init+0x40>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8001d28 <HAL_Init+0x40>)
 8001cfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d04:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <HAL_Init+0x40>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a07      	ldr	r2, [pc, #28]	@ (8001d28 <HAL_Init+0x40>)
 8001d0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d10:	2003      	movs	r0, #3
 8001d12:	f000 f8fc 	bl	8001f0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d16:	200f      	movs	r0, #15
 8001d18:	f7ff fd12 	bl	8001740 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d1c:	f7ff fbdc 	bl	80014d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40023c00 	.word	0x40023c00

08001d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d30:	4b06      	ldr	r3, [pc, #24]	@ (8001d4c <HAL_IncTick+0x20>)
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_IncTick+0x24>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	4a04      	ldr	r2, [pc, #16]	@ (8001d50 <HAL_IncTick+0x24>)
 8001d3e:	6013      	str	r3, [r2, #0]
}
 8001d40:	bf00      	nop
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	20000008 	.word	0x20000008
 8001d50:	200003bc 	.word	0x200003bc

08001d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return uwTick;
 8001d58:	4b03      	ldr	r3, [pc, #12]	@ (8001d68 <HAL_GetTick+0x14>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	200003bc 	.word	0x200003bc

08001d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d74:	f7ff ffee 	bl	8001d54 <HAL_GetTick>
 8001d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d84:	d005      	beq.n	8001d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d86:	4b0a      	ldr	r3, [pc, #40]	@ (8001db0 <HAL_Delay+0x44>)
 8001d88:	781b      	ldrb	r3, [r3, #0]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	4413      	add	r3, r2
 8001d90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d92:	bf00      	nop
 8001d94:	f7ff ffde 	bl	8001d54 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d8f7      	bhi.n	8001d94 <HAL_Delay+0x28>
  {
  }
}
 8001da4:	bf00      	nop
 8001da6:	bf00      	nop
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000008 	.word	0x20000008

08001db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b085      	sub	sp, #20
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f003 0307 	and.w	r3, r3, #7
 8001dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001df8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dca:	68ba      	ldr	r2, [r7, #8]
 8001dcc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ddc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001de0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de6:	4a04      	ldr	r2, [pc, #16]	@ (8001df8 <__NVIC_SetPriorityGrouping+0x44>)
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	60d3      	str	r3, [r2, #12]
}
 8001dec:	bf00      	nop
 8001dee:	3714      	adds	r7, #20
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr
 8001df8:	e000ed00 	.word	0xe000ed00

08001dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e00:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <__NVIC_GetPriorityGrouping+0x18>)
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	f003 0307 	and.w	r3, r3, #7
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000ed00 	.word	0xe000ed00

08001e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	4603      	mov	r3, r0
 8001e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	db0b      	blt.n	8001e42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	f003 021f 	and.w	r2, r3, #31
 8001e30:	4907      	ldr	r1, [pc, #28]	@ (8001e50 <__NVIC_EnableIRQ+0x38>)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	2001      	movs	r0, #1
 8001e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e42:	bf00      	nop
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	e000e100 	.word	0xe000e100

08001e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	6039      	str	r1, [r7, #0]
 8001e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	db0a      	blt.n	8001e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	490c      	ldr	r1, [pc, #48]	@ (8001ea0 <__NVIC_SetPriority+0x4c>)
 8001e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e72:	0112      	lsls	r2, r2, #4
 8001e74:	b2d2      	uxtb	r2, r2
 8001e76:	440b      	add	r3, r1
 8001e78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e7c:	e00a      	b.n	8001e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	4908      	ldr	r1, [pc, #32]	@ (8001ea4 <__NVIC_SetPriority+0x50>)
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	3b04      	subs	r3, #4
 8001e8c:	0112      	lsls	r2, r2, #4
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	440b      	add	r3, r1
 8001e92:	761a      	strb	r2, [r3, #24]
}
 8001e94:	bf00      	nop
 8001e96:	370c      	adds	r7, #12
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9e:	4770      	bx	lr
 8001ea0:	e000e100 	.word	0xe000e100
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b089      	sub	sp, #36	@ 0x24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	60f8      	str	r0, [r7, #12]
 8001eb0:	60b9      	str	r1, [r7, #8]
 8001eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f003 0307 	and.w	r3, r3, #7
 8001eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f1c3 0307 	rsb	r3, r3, #7
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	bf28      	it	cs
 8001ec6:	2304      	movcs	r3, #4
 8001ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	2b06      	cmp	r3, #6
 8001ed0:	d902      	bls.n	8001ed8 <NVIC_EncodePriority+0x30>
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	3b03      	subs	r3, #3
 8001ed6:	e000      	b.n	8001eda <NVIC_EncodePriority+0x32>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001edc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	43da      	mvns	r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	401a      	ands	r2, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8001efa:	43d9      	mvns	r1, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f00:	4313      	orrs	r3, r2
         );
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3724      	adds	r7, #36	@ 0x24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f7ff ff4c 	bl	8001db4 <__NVIC_SetPriorityGrouping>
}
 8001f1c:	bf00      	nop
 8001f1e:	3708      	adds	r7, #8
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}

08001f24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	607a      	str	r2, [r7, #4]
 8001f30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f36:	f7ff ff61 	bl	8001dfc <__NVIC_GetPriorityGrouping>
 8001f3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	68b9      	ldr	r1, [r7, #8]
 8001f40:	6978      	ldr	r0, [r7, #20]
 8001f42:	f7ff ffb1 	bl	8001ea8 <NVIC_EncodePriority>
 8001f46:	4602      	mov	r2, r0
 8001f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff ff80 	bl	8001e54 <__NVIC_SetPriority>
}
 8001f54:	bf00      	nop
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff ff54 	bl	8001e18 <__NVIC_EnableIRQ>
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f86:	2300      	movs	r3, #0
 8001f88:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f8e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <HAL_DMA_Start_IT+0x26>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e040      	b.n	8002020 <HAL_DMA_Start_IT+0xa8>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d12f      	bne.n	8002012 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	687a      	ldr	r2, [r7, #4]
 8001fc4:	68b9      	ldr	r1, [r7, #8]
 8001fc6:	68f8      	ldr	r0, [r7, #12]
 8001fc8:	f000 f83a 	bl	8002040 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fd0:	223f      	movs	r2, #63	@ 0x3f
 8001fd2:	409a      	lsls	r2, r3
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f042 0216 	orr.w	r2, r2, #22
 8001fe6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d007      	beq.n	8002000 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f042 0208 	orr.w	r2, r2, #8
 8001ffe:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	e005      	b.n	800201e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800201a:	2302      	movs	r3, #2
 800201c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800201e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002020:	4618      	mov	r0, r3
 8002022:	3718      	adds	r7, #24
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}

08002028 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002034:	4618      	mov	r0, r3
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
 800204c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800205c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b40      	cmp	r3, #64	@ 0x40
 800206c:	d108      	bne.n	8002080 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68ba      	ldr	r2, [r7, #8]
 800207c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800207e:	e007      	b.n	8002090 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68ba      	ldr	r2, [r7, #8]
 8002086:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	60da      	str	r2, [r3, #12]
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b084      	sub	sp, #16
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e08a      	b.n	80021c4 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d106      	bne.n	80020c6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2223      	movs	r2, #35	@ 0x23
 80020bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f005 fa81 	bl	80075c8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020c6:	2300      	movs	r3, #0
 80020c8:	60bb      	str	r3, [r7, #8]
 80020ca:	4b40      	ldr	r3, [pc, #256]	@ (80021cc <HAL_ETH_Init+0x130>)
 80020cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ce:	4a3f      	ldr	r2, [pc, #252]	@ (80021cc <HAL_ETH_Init+0x130>)
 80020d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020d6:	4b3d      	ldr	r3, [pc, #244]	@ (80021cc <HAL_ETH_Init+0x130>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020de:	60bb      	str	r3, [r7, #8]
 80020e0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80020e2:	4b3b      	ldr	r3, [pc, #236]	@ (80021d0 <HAL_ETH_Init+0x134>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	4a3a      	ldr	r2, [pc, #232]	@ (80021d0 <HAL_ETH_Init+0x134>)
 80020e8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80020ec:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80020ee:	4b38      	ldr	r3, [pc, #224]	@ (80021d0 <HAL_ETH_Init+0x134>)
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	4936      	ldr	r1, [pc, #216]	@ (80021d0 <HAL_ETH_Init+0x134>)
 80020f8:	4313      	orrs	r3, r2
 80020fa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80020fc:	4b34      	ldr	r3, [pc, #208]	@ (80021d0 <HAL_ETH_Init+0x134>)
 80020fe:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	687a      	ldr	r2, [r7, #4]
 800210c:	6812      	ldr	r2, [r2, #0]
 800210e:	f043 0301 	orr.w	r3, r3, #1
 8002112:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002116:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002118:	f7ff fe1c 	bl	8001d54 <HAL_GetTick>
 800211c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800211e:	e011      	b.n	8002144 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002120:	f7ff fe18 	bl	8001d54 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800212e:	d909      	bls.n	8002144 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2204      	movs	r2, #4
 8002134:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	22e0      	movs	r2, #224	@ 0xe0
 800213c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e03f      	b.n	80021c4 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d1e4      	bne.n	8002120 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002156:	6878      	ldr	r0, [r7, #4]
 8002158:	f000 ff5a 	bl	8003010 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f001 f805 	bl	800316c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	f001 f85b 	bl	800321e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	461a      	mov	r2, r3
 800216e:	2100      	movs	r1, #0
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f000 ffc3 	bl	80030fc <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8002184:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6812      	ldr	r2, [r2, #0]
 8002192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002196:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800219a:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 80021ae:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2200      	movs	r2, #0
 80021b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2210      	movs	r2, #16
 80021be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40013800 	.word	0x40013800

080021d4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021e2:	2b10      	cmp	r3, #16
 80021e4:	d161      	bne.n	80022aa <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2223      	movs	r2, #35	@ 0x23
 80021ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2201      	movs	r2, #1
 80021f2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2204      	movs	r2, #4
 80021f8:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f9f4 	bl	80025e8 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002208:	2001      	movs	r0, #1
 800220a:	f7ff fdaf 	bl	8001d6c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800221e:	699b      	ldr	r3, [r3, #24]
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6812      	ldr	r2, [r2, #0]
 8002224:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002228:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800222c:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002236:	699b      	ldr	r3, [r3, #24]
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	6812      	ldr	r2, [r2, #0]
 800223c:	f043 0302 	orr.w	r3, r3, #2
 8002240:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002244:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f000 fd7e 	bl	8002d48 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f042 0208 	orr.w	r2, r2, #8
 800225a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002264:	2001      	movs	r0, #1
 8002266:	f7ff fd81 	bl	8001d6c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f042 0204 	orr.w	r2, r2, #4
 8002280:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800228a:	69db      	ldr	r3, [r3, #28]
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6812      	ldr	r2, [r2, #0]
 8002290:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8002294:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 8002298:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800229c:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2223      	movs	r2, #35	@ 0x23
 80022a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 80022a6:	2300      	movs	r3, #0
 80022a8:	e000      	b.n	80022ac <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
  }
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3710      	adds	r7, #16
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80022c2:	2b23      	cmp	r3, #35	@ 0x23
 80022c4:	d170      	bne.n	80023a8 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2223      	movs	r2, #35	@ 0x23
 80022ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6812      	ldr	r2, [r2, #0]
 80022dc:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 80022e0:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 80022e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80022e8:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6812      	ldr	r2, [r2, #0]
 80022f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80022fc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002300:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800230a:	699b      	ldr	r3, [r3, #24]
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	6812      	ldr	r2, [r2, #0]
 8002310:	f023 0302 	bic.w	r3, r3, #2
 8002314:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002318:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f022 0204 	bic.w	r2, r2, #4
 8002328:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002332:	2001      	movs	r0, #1
 8002334:	f7ff fd1a 	bl	8001d6c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 fd01 	bl	8002d48 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0208 	bic.w	r2, r2, #8
 8002354:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800235e:	2001      	movs	r0, #1
 8002360:	f7ff fd04 	bl	8001d6c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800236c:	2300      	movs	r3, #0
 800236e:	617b      	str	r3, [r7, #20]
 8002370:	e00e      	b.n	8002390 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	3212      	adds	r2, #18
 8002378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800237c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	3301      	adds	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	2b03      	cmp	r3, #3
 8002394:	d9ed      	bls.n	8002372 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2210      	movs	r2, #16
 80023a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	e000      	b.n	80023aa <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
  }
}
 80023aa:	4618      	mov	r0, r3
 80023ac:	3718      	adds	r7, #24
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 80023b2:	b580      	push	{r7, lr}
 80023b4:	b082      	sub	sp, #8
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e045      	b.n	8002462 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023dc:	2b23      	cmp	r3, #35	@ 0x23
 80023de:	d13f      	bne.n	8002460 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 80023e8:	2201      	movs	r2, #1
 80023ea:	6839      	ldr	r1, [r7, #0]
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f000 ff85 	bl	80032fc <ETH_Prepare_Tx_Descriptors>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d009      	beq.n	800240c <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023fe:	f043 0202 	orr.w	r2, r3, #2
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e02a      	b.n	8002462 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 800240c:	f3bf 8f4f 	dsb	sy
}
 8002410:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	629a      	str	r2, [r3, #40]	@ 0x28
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002420:	2b03      	cmp	r3, #3
 8002422:	d904      	bls.n	800242e <HAL_ETH_Transmit_IT+0x7c>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002428:	1f1a      	subs	r2, r3, #4
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002436:	695b      	ldr	r3, [r3, #20]
 8002438:	f003 0304 	and.w	r3, r3, #4
 800243c:	2b00      	cmp	r3, #0
 800243e:	d00d      	beq.n	800245c <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002448:	461a      	mov	r2, r3
 800244a:	2304      	movs	r3, #4
 800244c:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002456:	461a      	mov	r2, r3
 8002458:	2300      	movs	r3, #0
 800245a:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800245c:	2300      	movs	r3, #0
 800245e:	e000      	b.n	8002462 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
  }
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}

0800246a <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800246a:	b580      	push	{r7, lr}
 800246c:	b088      	sub	sp, #32
 800246e:	af00      	add	r7, sp, #0
 8002470:	6078      	str	r0, [r7, #4]
 8002472:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8002474:	2300      	movs	r3, #0
 8002476:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8002478:	2300      	movs	r3, #0
 800247a:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d109      	bne.n	8002496 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002488:	f043 0201 	orr.w	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e0a4      	b.n	80025e0 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800249c:	2b23      	cmp	r3, #35	@ 0x23
 800249e:	d001      	beq.n	80024a4 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	e09d      	b.n	80025e0 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69fa      	ldr	r2, [r7, #28]
 80024ae:	3212      	adds	r2, #18
 80024b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024b4:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80024ba:	f1c3 0304 	rsb	r3, r3, #4
 80024be:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80024c0:	e066      	b.n	8002590 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d007      	beq.n	80024de <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	69da      	ldr	r2, [r3, #28]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	699a      	ldr	r2, [r3, #24]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d103      	bne.n	80024f2 <HAL_ETH_ReadData+0x88>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d03c      	beq.n	800256c <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2200      	movs	r2, #0
 8002508:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	0c1b      	lsrs	r3, r3, #16
 8002510:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002514:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800251e:	2b00      	cmp	r3, #0
 8002520:	d005      	beq.n	800252e <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 800252a:	2301      	movs	r3, #1
 800252c:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	689a      	ldr	r2, [r3, #8]
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8002546:	461a      	mov	r2, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	b29b      	uxth	r3, r3
 800254c:	f005 f9fe 	bl	800794c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	441a      	add	r2, r3
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2200      	movs	r2, #0
 800256a:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	3301      	adds	r3, #1
 8002570:	61fb      	str	r3, [r7, #28]
 8002572:	69fb      	ldr	r3, [r7, #28]
 8002574:	2b03      	cmp	r3, #3
 8002576:	d902      	bls.n	800257e <HAL_ETH_ReadData+0x114>
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	3b04      	subs	r3, #4
 800257c:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	69fa      	ldr	r2, [r7, #28]
 8002582:	3212      	adds	r2, #18
 8002584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002588:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	3301      	adds	r3, #1
 800258e:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8002594:	2b00      	cmp	r3, #0
 8002596:	db06      	blt.n	80025a6 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	429a      	cmp	r2, r3
 800259e:	d202      	bcs.n	80025a6 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 80025a0:	7cfb      	ldrb	r3, [r7, #19]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d08d      	beq.n	80024c2 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	441a      	add	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d002      	beq.n	80025c0 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f814 	bl	80025e8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d108      	bne.n	80025de <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	e000      	b.n	80025e0 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3720      	adds	r7, #32
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}

080025e8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80025f0:	2300      	movs	r3, #0
 80025f2:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80025f4:	2301      	movs	r3, #1
 80025f6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025fc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69fa      	ldr	r2, [r7, #28]
 8002602:	3212      	adds	r2, #18
 8002604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002608:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800260e:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8002610:	e044      	b.n	800269c <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d112      	bne.n	8002640 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800261a:	f107 0308 	add.w	r3, r7, #8
 800261e:	4618      	mov	r0, r3
 8002620:	f005 f964 	bl	80078ec <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d102      	bne.n	8002630 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800262a:	2300      	movs	r3, #0
 800262c:	74fb      	strb	r3, [r7, #19]
 800262e:	e007      	b.n	8002640 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	461a      	mov	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	461a      	mov	r2, r3
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8002640:	7cfb      	ldrb	r3, [r7, #19]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d02a      	beq.n	800269c <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800264a:	2b00      	cmp	r3, #0
 800264c:	d108      	bne.n	8002660 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	695b      	ldr	r3, [r3, #20]
 8002652:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002656:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	6053      	str	r3, [r2, #4]
 800265e:	e005      	b.n	800266c <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	695b      	ldr	r3, [r3, #20]
 8002664:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800266c:	697b      	ldr	r3, [r7, #20]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	3301      	adds	r3, #1
 800267c:	61fb      	str	r3, [r7, #28]
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d902      	bls.n	800268a <ETH_UpdateDescriptor+0xa2>
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	3b04      	subs	r3, #4
 8002688:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69fa      	ldr	r2, [r7, #28]
 800268e:	3212      	adds	r2, #18
 8002690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002694:	617b      	str	r3, [r7, #20]
      desccount--;
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	3b01      	subs	r3, #1
 800269a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <ETH_UpdateDescriptor+0xc0>
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1b4      	bne.n	8002612 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80026ac:	69ba      	ldr	r2, [r7, #24]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d01a      	beq.n	80026e8 <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 80026b2:	69fb      	ldr	r3, [r7, #28]
 80026b4:	3301      	adds	r3, #1
 80026b6:	f003 0303 	and.w	r3, r3, #3
 80026ba:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80026bc:	f3bf 8f5f 	dmb	sy
}
 80026c0:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6919      	ldr	r1, [r3, #16]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	4613      	mov	r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	4413      	add	r3, r2
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	18ca      	adds	r2, r1, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80026da:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 80026e8:	bf00      	nop
 80026ea:	3720      	adds	r7, #32
 80026ec:	46bd      	mov	sp, r7
 80026ee:	bd80      	pop	{r7, pc}

080026f0 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b086      	sub	sp, #24
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	3318      	adds	r3, #24
 80026fc:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002702:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002708:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800270a:	2301      	movs	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800270e:	e047      	b.n	80027a0 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8002710:	2301      	movs	r3, #1
 8002712:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	3b01      	subs	r3, #1
 8002718:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	3304      	adds	r3, #4
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	4413      	add	r3, r2
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	3301      	adds	r3, #1
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	2b03      	cmp	r3, #3
 8002734:	d902      	bls.n	800273c <HAL_ETH_ReleaseTxPacket+0x4c>
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	3b04      	subs	r3, #4
 800273a:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8002740:	7bbb      	ldrb	r3, [r7, #14]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d02c      	beq.n	80027a0 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	68d9      	ldr	r1, [r3, #12]
 800274a:	693a      	ldr	r2, [r7, #16]
 800274c:	4613      	mov	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	4413      	add	r3, r2
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	440b      	add	r3, r1
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	db1f      	blt.n	800279c <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	3304      	adds	r3, #4
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4618      	mov	r0, r3
 800276a:	f005 f92f 	bl	80079cc <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800276e:	68ba      	ldr	r2, [r7, #8]
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	3304      	adds	r3, #4
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	2200      	movs	r2, #0
 800277a:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	3301      	adds	r3, #1
 8002780:	613b      	str	r3, [r7, #16]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	2b03      	cmp	r3, #3
 8002786:	d902      	bls.n	800278e <HAL_ETH_ReleaseTxPacket+0x9e>
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	3b04      	subs	r3, #4
 800278c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	697a      	ldr	r2, [r7, #20]
 8002792:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	693a      	ldr	r2, [r7, #16]
 8002798:	62da      	str	r2, [r3, #44]	@ 0x2c
 800279a:	e001      	b.n	80027a0 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800279c:	2300      	movs	r3, #0
 800279e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_ETH_ReleaseTxPacket+0xbc>
 80027a6:	7bfb      	ldrb	r3, [r7, #15]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1b1      	bne.n	8002710 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 80027ac:	2300      	movs	r3, #0
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
	...

080027b8 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b086      	sub	sp, #24
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027c6:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 80027e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002910 <HAL_ETH_IRQHandler+0x158>)
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00e      	beq.n	800280e <HAL_ETH_IRQHandler+0x56>
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002802:	461a      	mov	r2, r3
 8002804:	4b43      	ldr	r3, [pc, #268]	@ (8002914 <HAL_ETH_IRQHandler+0x15c>)
 8002806:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f004 fc1d 	bl	8007048 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00f      	beq.n	8002838 <HAL_ETH_IRQHandler+0x80>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f003 0301 	and.w	r3, r3, #1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800282a:	461a      	mov	r2, r3
 800282c:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 8002830:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f004 fc18 	bl	8007068 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d042      	beq.n	80028c8 <HAL_ETH_IRQHandler+0x110>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d03d      	beq.n	80028c8 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002852:	f043 0208 	orr.w	r2, r3, #8
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d01a      	beq.n	800289c <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	4b29      	ldr	r3, [pc, #164]	@ (8002918 <HAL_ETH_IRQHandler+0x160>)
 8002872:	4013      	ands	r3, r2
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002882:	69db      	ldr	r3, [r3, #28]
 8002884:	687a      	ldr	r2, [r7, #4]
 8002886:	6812      	ldr	r2, [r2, #0]
 8002888:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 800288c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002890:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	22e0      	movs	r2, #224	@ 0xe0
 8002896:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800289a:	e012      	b.n	80028c2 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028a4:	695a      	ldr	r2, [r3, #20]
 80028a6:	f248 6380 	movw	r3, #34432	@ 0x8680
 80028aa:	4013      	ands	r3, r2
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80028ba:	461a      	mov	r2, r3
 80028bc:	f248 6380 	movw	r3, #34432	@ 0x8680
 80028c0:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f004 fbe0 	bl	8007088 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	f003 0308 	and.w	r3, r3, #8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00e      	beq.n	80028f0 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028d8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f000 f81a 	bl	800291c <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d006      	beq.n	8002908 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80028fa:	4b05      	ldr	r3, [pc, #20]	@ (8002910 <HAL_ETH_IRQHandler+0x158>)
 80028fc:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002900:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f814 	bl	8002930 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8002908:	bf00      	nop
 800290a:	3718      	adds	r7, #24
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	40013c00 	.word	0x40013c00
 8002914:	00010040 	.word	0x00010040
 8002918:	007e2000 	.word	0x007e2000

0800291c <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8002938:	bf00      	nop
 800293a:	370c      	adds	r7, #12
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr

08002944 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	60f8      	str	r0, [r7, #12]
 800294c:	60b9      	str	r1, [r7, #8]
 800294e:	607a      	str	r2, [r7, #4]
 8002950:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	f003 031c 	and.w	r3, r3, #28
 8002960:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002962:	68bb      	ldr	r3, [r7, #8]
 8002964:	02db      	lsls	r3, r3, #11
 8002966:	b29b      	uxth	r3, r3
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	4313      	orrs	r3, r2
 800296c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	019b      	lsls	r3, r3, #6
 8002972:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002976:	697a      	ldr	r2, [r7, #20]
 8002978:	4313      	orrs	r3, r2
 800297a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f023 0302 	bic.w	r3, r3, #2
 8002982:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002994:	f7ff f9de 	bl	8001d54 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800299a:	e00d      	b.n	80029b8 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800299c:	f7ff f9da 	bl	8001d54 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029aa:	d301      	bcc.n	80029b0 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e010      	b.n	80029d2 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1ec      	bne.n	800299c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	695b      	ldr	r3, [r3, #20]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b086      	sub	sp, #24
 80029de:	af00      	add	r7, sp, #0
 80029e0:	60f8      	str	r0, [r7, #12]
 80029e2:	60b9      	str	r1, [r7, #8]
 80029e4:	607a      	str	r2, [r7, #4]
 80029e6:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	f003 031c 	and.w	r3, r3, #28
 80029f6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	02db      	lsls	r3, r3, #11
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	019b      	lsls	r3, r3, #6
 8002a08:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8002a0c:	697a      	ldr	r2, [r7, #20]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a34:	f7ff f98e 	bl	8001d54 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a3a:	e00d      	b.n	8002a58 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002a3c:	f7ff f98a 	bl	8001d54 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a4a:	d301      	bcc.n	8002a50 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e009      	b.n	8002a64 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1ec      	bne.n	8002a3c <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e0e6      	b.n	8002c4e <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf14      	ite	ne
 8002a8e:	2301      	movne	r3, #1
 8002a90:	2300      	moveq	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	461a      	mov	r2, r3
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf14      	ite	ne
 8002ad4:	2301      	movne	r3, #1
 8002ad6:	2300      	moveq	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bf0c      	ite	eq
 8002aee:	2301      	moveq	r3, #1
 8002af0:	2300      	movne	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	bf14      	ite	ne
 8002b08:	2301      	movne	r3, #1
 8002b0a:	2300      	moveq	r3, #0
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	461a      	mov	r2, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	bf0c      	ite	eq
 8002b3e:	2301      	moveq	r3, #1
 8002b40:	2300      	movne	r3, #0
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	461a      	mov	r2, r3
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	bf0c      	ite	eq
 8002b58:	2301      	moveq	r3, #1
 8002b5a:	2300      	movne	r3, #0
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	bf14      	ite	ne
 8002b72:	2301      	movne	r3, #1
 8002b74:	2300      	moveq	r3, #0
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	bf14      	ite	ne
 8002b9a:	2301      	movne	r3, #1
 8002b9c:	2300      	moveq	r3, #0
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf14      	ite	ne
 8002bb4:	2301      	movne	r3, #1
 8002bb6:	2300      	moveq	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	461a      	mov	r2, r3
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bf14      	ite	ne
 8002bce:	2301      	movne	r3, #1
 8002bd0:	2300      	moveq	r3, #0
 8002bd2:	b2db      	uxtb	r3, r3
 8002bd4:	461a      	mov	r2, r3
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	bf0c      	ite	eq
 8002bea:	2301      	moveq	r3, #1
 8002bec:	2300      	movne	r3, #0
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	0c1b      	lsrs	r3, r3, #16
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	f003 0304 	and.w	r3, r3, #4
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	bf14      	ite	ne
 8002c22:	2301      	movne	r3, #1
 8002c24:	2300      	moveq	r3, #0
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	461a      	mov	r2, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	bf14      	ite	ne
 8002c3e:	2301      	movne	r3, #1
 8002c40:	2300      	moveq	r3, #0
 8002c42:	b2db      	uxtb	r3, r3
 8002c44:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr

08002c5a <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b082      	sub	sp, #8
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
 8002c62:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e00b      	b.n	8002c86 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	d105      	bne.n	8002c84 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002c78:	6839      	ldr	r1, [r7, #0]
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 f88a 	bl	8002d94 <ETH_SetMACConfig>

    return HAL_OK;
 8002c80:	2300      	movs	r3, #0
 8002c82:	e000      	b.n	8002c86 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
  }
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3708      	adds	r7, #8
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
	...

08002c90 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f023 031c 	bic.w	r3, r3, #28
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002ca8:	f001 fa30 	bl	800410c <HAL_RCC_GetHCLKFreq>
 8002cac:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	4a14      	ldr	r2, [pc, #80]	@ (8002d04 <HAL_ETH_SetMDIOClockRange+0x74>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d804      	bhi.n	8002cc0 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	f043 0308 	orr.w	r3, r3, #8
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	e019      	b.n	8002cf4 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4a11      	ldr	r2, [pc, #68]	@ (8002d08 <HAL_ETH_SetMDIOClockRange+0x78>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d204      	bcs.n	8002cd2 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	f043 030c 	orr.w	r3, r3, #12
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	e010      	b.n	8002cf4 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8002d0c <HAL_ETH_SetMDIOClockRange+0x7c>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d90c      	bls.n	8002cf4 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8002d10 <HAL_ETH_SetMDIOClockRange+0x80>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d804      	bhi.n	8002cec <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	f043 0304 	orr.w	r3, r3, #4
 8002ce8:	60fb      	str	r3, [r7, #12]
 8002cea:	e003      	b.n	8002cf4 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f043 0310 	orr.w	r3, r3, #16
 8002cf2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	611a      	str	r2, [r3, #16]
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	02160ebf 	.word	0x02160ebf
 8002d08:	03938700 	.word	0x03938700
 8002d0c:	05f5e0ff 	.word	0x05f5e0ff
 8002d10:	08f0d17f 	.word	0x08f0d17f

08002d14 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d5c:	699b      	ldr	r3, [r3, #24]
 8002d5e:	687a      	ldr	r2, [r7, #4]
 8002d60:	6812      	ldr	r2, [r2, #0]
 8002d62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002d66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d6a:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002d78:	2001      	movs	r0, #1
 8002d7a:	f7fe fff7 	bl	8001d6c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002d88:	6193      	str	r3, [r2, #24]
}
 8002d8a:	bf00      	nop
 8002d8c:	3710      	adds	r7, #16
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bd80      	pop	{r7, pc}
	...

08002d94 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	4b53      	ldr	r3, [pc, #332]	@ (8002ef8 <ETH_SetMACConfig+0x164>)
 8002daa:	4013      	ands	r3, r2
 8002dac:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	7b9b      	ldrb	r3, [r3, #14]
 8002db2:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	7c12      	ldrb	r2, [r2, #16]
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d102      	bne.n	8002dc2 <ETH_SetMACConfig+0x2e>
 8002dbc:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8002dc0:	e000      	b.n	8002dc4 <ETH_SetMACConfig+0x30>
 8002dc2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002dc4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002dc6:	683a      	ldr	r2, [r7, #0]
 8002dc8:	7c52      	ldrb	r2, [r2, #17]
 8002dca:	2a00      	cmp	r2, #0
 8002dcc:	d102      	bne.n	8002dd4 <ETH_SetMACConfig+0x40>
 8002dce:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8002dd2:	e000      	b.n	8002dd6 <ETH_SetMACConfig+0x42>
 8002dd4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002dd6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ddc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	7fdb      	ldrb	r3, [r3, #31]
 8002de2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002de4:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002dea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	7f92      	ldrb	r2, [r2, #30]
 8002df0:	2a00      	cmp	r2, #0
 8002df2:	d102      	bne.n	8002dfa <ETH_SetMACConfig+0x66>
 8002df4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002df8:	e000      	b.n	8002dfc <ETH_SetMACConfig+0x68>
 8002dfa:	2200      	movs	r2, #0
                        macconf->Speed |
 8002dfc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	7f1b      	ldrb	r3, [r3, #28]
 8002e02:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e04:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002e0a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	791b      	ldrb	r3, [r3, #4]
 8002e10:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002e12:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002e1a:	2a00      	cmp	r2, #0
 8002e1c:	d102      	bne.n	8002e24 <ETH_SetMACConfig+0x90>
 8002e1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e22:	e000      	b.n	8002e26 <ETH_SetMACConfig+0x92>
 8002e24:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002e26:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	7bdb      	ldrb	r3, [r3, #15]
 8002e2c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002e2e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002e34:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002e3c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68fa      	ldr	r2, [r7, #12]
 8002e4c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002e56:	2001      	movs	r0, #1
 8002e58:	f7fe ff88 	bl	8001d6c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	68fa      	ldr	r2, [r7, #12]
 8002e62:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002e6c:	68fa      	ldr	r2, [r7, #12]
 8002e6e:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8002e72:	4013      	ands	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e7a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8002e82:	2a00      	cmp	r2, #0
 8002e84:	d101      	bne.n	8002e8a <ETH_SetMACConfig+0xf6>
 8002e86:	2280      	movs	r2, #128	@ 0x80
 8002e88:	e000      	b.n	8002e8c <ETH_SetMACConfig+0xf8>
 8002e8a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002e8c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002e92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 8002e9a:	2a01      	cmp	r2, #1
 8002e9c:	d101      	bne.n	8002ea2 <ETH_SetMACConfig+0x10e>
 8002e9e:	2208      	movs	r2, #8
 8002ea0:	e000      	b.n	8002ea4 <ETH_SetMACConfig+0x110>
 8002ea2:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002ea4:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002ea6:	683a      	ldr	r2, [r7, #0]
 8002ea8:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8002eac:	2a01      	cmp	r2, #1
 8002eae:	d101      	bne.n	8002eb4 <ETH_SetMACConfig+0x120>
 8002eb0:	2204      	movs	r2, #4
 8002eb2:	e000      	b.n	8002eb6 <ETH_SetMACConfig+0x122>
 8002eb4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002eb6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8002ebe:	2a01      	cmp	r2, #1
 8002ec0:	d101      	bne.n	8002ec6 <ETH_SetMACConfig+0x132>
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	e000      	b.n	8002ec8 <ETH_SetMACConfig+0x134>
 8002ec6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68fa      	ldr	r2, [r7, #12]
 8002ed6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ee0:	2001      	movs	r0, #1
 8002ee2:	f7fe ff43 	bl	8001d6c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68fa      	ldr	r2, [r7, #12]
 8002eec:	619a      	str	r2, [r3, #24]
}
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	fd20810f 	.word	0xfd20810f

08002efc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4b3d      	ldr	r3, [pc, #244]	@ (800300c <ETH_SetDMAConfig+0x110>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	7b1b      	ldrb	r3, [r3, #12]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d102      	bne.n	8002f28 <ETH_SetDMAConfig+0x2c>
 8002f22:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f26:	e000      	b.n	8002f2a <ETH_SetDMAConfig+0x2e>
 8002f28:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	7b5b      	ldrb	r3, [r3, #13]
 8002f2e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f30:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	7f52      	ldrb	r2, [r2, #29]
 8002f36:	2a00      	cmp	r2, #0
 8002f38:	d102      	bne.n	8002f40 <ETH_SetDMAConfig+0x44>
 8002f3a:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002f3e:	e000      	b.n	8002f42 <ETH_SetDMAConfig+0x46>
 8002f40:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002f42:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	7b9b      	ldrb	r3, [r3, #14]
 8002f48:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002f4a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002f50:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	7f1b      	ldrb	r3, [r3, #28]
 8002f56:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002f58:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	7f9b      	ldrb	r3, [r3, #30]
 8002f5e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002f60:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002f66:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002f6e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002f70:	4313      	orrs	r3, r2
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f80:	461a      	mov	r2, r3
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002f8e:	699b      	ldr	r3, [r3, #24]
 8002f90:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f92:	2001      	movs	r0, #1
 8002f94:	f7fe feea 	bl	8001d6c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	791b      	ldrb	r3, [r3, #4]
 8002faa:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fb0:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002fb6:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002fbc:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002fc4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002fc6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fcc:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002fce:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002fd4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002fde:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8002fe2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ff0:	2001      	movs	r0, #1
 8002ff2:	f7fe febb 	bl	8001d6c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8002ffe:	461a      	mov	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6013      	str	r3, [r2, #0]
}
 8003004:	bf00      	nop
 8003006:	3710      	adds	r7, #16
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	f8de3f23 	.word	0xf8de3f23

08003010 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b0a6      	sub	sp, #152	@ 0x98
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8003018:	2301      	movs	r3, #1
 800301a:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 800301e:	2301      	movs	r3, #1
 8003020:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8003024:	2300      	movs	r3, #0
 8003026:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8003028:	2300      	movs	r3, #0
 800302a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800302e:	2301      	movs	r3, #1
 8003030:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003034:	2300      	movs	r3, #0
 8003036:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800303a:	2301      	movs	r3, #1
 800303c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8003040:	2301      	movs	r3, #1
 8003042:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003046:	2300      	movs	r3, #0
 8003048:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800304c:	2300      	movs	r3, #0
 800304e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003052:	2300      	movs	r3, #0
 8003054:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003056:	2300      	movs	r3, #0
 8003058:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800305c:	2300      	movs	r3, #0
 800305e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003060:	2300      	movs	r3, #0
 8003062:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003066:	2300      	movs	r3, #0
 8003068:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800306c:	2300      	movs	r3, #0
 800306e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003072:	2300      	movs	r3, #0
 8003074:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003078:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800307c:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800307e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003082:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003084:	2300      	movs	r3, #0
 8003086:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800308a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800308e:	4619      	mov	r1, r3
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f7ff fe7f 	bl	8002d94 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003096:	2301      	movs	r3, #1
 8003098:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800309a:	2301      	movs	r3, #1
 800309c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800309e:	2301      	movs	r3, #1
 80030a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80030a4:	2301      	movs	r3, #1
 80030a6:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80030a8:	2300      	movs	r3, #0
 80030aa:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80030ac:	2300      	movs	r3, #0
 80030ae:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80030b2:	2300      	movs	r3, #0
 80030b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80030b8:	2300      	movs	r3, #0
 80030ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80030bc:	2301      	movs	r3, #1
 80030be:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80030c2:	2301      	movs	r3, #1
 80030c4:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80030c6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030ca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80030cc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80030d0:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80030d2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80030d6:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80030d8:	2301      	movs	r3, #1
 80030da:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80030e6:	f107 0308 	add.w	r3, r7, #8
 80030ea:	4619      	mov	r1, r3
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff ff05 	bl	8002efc <ETH_SetDMAConfig>
}
 80030f2:	bf00      	nop
 80030f4:	3798      	adds	r7, #152	@ 0x98
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
	...

080030fc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
 8003102:	60f8      	str	r0, [r7, #12]
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3305      	adds	r3, #5
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	021b      	lsls	r3, r3, #8
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	3204      	adds	r2, #4
 8003114:	7812      	ldrb	r2, [r2, #0]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	4b11      	ldr	r3, [pc, #68]	@ (8003164 <ETH_MACAddressConfig+0x68>)
 800311e:	4413      	add	r3, r2
 8003120:	461a      	mov	r2, r3
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3303      	adds	r3, #3
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	061a      	lsls	r2, r3, #24
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	3302      	adds	r3, #2
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	041b      	lsls	r3, r3, #16
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3301      	adds	r3, #1
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	4313      	orrs	r3, r2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	7812      	ldrb	r2, [r2, #0]
 8003146:	4313      	orrs	r3, r2
 8003148:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	4b06      	ldr	r3, [pc, #24]	@ (8003168 <ETH_MACAddressConfig+0x6c>)
 800314e:	4413      	add	r3, r2
 8003150:	461a      	mov	r2, r3
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	6013      	str	r3, [r2, #0]
}
 8003156:	bf00      	nop
 8003158:	371c      	adds	r7, #28
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	40028040 	.word	0x40028040
 8003168:	40028044 	.word	0x40028044

0800316c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800316c:	b480      	push	{r7}
 800316e:	b085      	sub	sp, #20
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003174:	2300      	movs	r3, #0
 8003176:	60fb      	str	r3, [r7, #12]
 8003178:	e03e      	b.n	80031f8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	68d9      	ldr	r1, [r3, #12]
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4613      	mov	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	440b      	add	r3, r1
 800318a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2200      	movs	r2, #0
 8003196:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2200      	movs	r2, #0
 800319c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	2200      	movs	r2, #0
 80031a2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80031a4:	68b9      	ldr	r1, [r7, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	3206      	adds	r2, #6
 80031ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d80c      	bhi.n	80031dc <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68d9      	ldr	r1, [r3, #12]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	1c5a      	adds	r2, r3, #1
 80031ca:	4613      	mov	r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	4413      	add	r3, r2
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	440b      	add	r3, r1
 80031d4:	461a      	mov	r2, r3
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	60da      	str	r2, [r3, #12]
 80031da:	e004      	b.n	80031e6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	461a      	mov	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	3301      	adds	r3, #1
 80031f6:	60fb      	str	r3, [r7, #12]
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d9bd      	bls.n	800317a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68da      	ldr	r2, [r3, #12]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003210:	611a      	str	r2, [r3, #16]
}
 8003212:	bf00      	nop
 8003214:	3714      	adds	r7, #20
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800321e:	b480      	push	{r7}
 8003220:	b085      	sub	sp, #20
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
 800322a:	e048      	b.n	80032be <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6919      	ldr	r1, [r3, #16]
 8003230:	68fa      	ldr	r2, [r7, #12]
 8003232:	4613      	mov	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	4413      	add	r3, r2
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	440b      	add	r3, r1
 800323c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2200      	movs	r2, #0
 8003242:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	2200      	movs	r2, #0
 8003248:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	2200      	movs	r2, #0
 800324e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2200      	movs	r2, #0
 8003254:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	2200      	movs	r2, #0
 800325a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	2200      	movs	r2, #0
 8003260:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003268:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8003282:	68b9      	ldr	r1, [r7, #8]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	3212      	adds	r2, #18
 800328a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2b02      	cmp	r3, #2
 8003292:	d80c      	bhi.n	80032ae <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6919      	ldr	r1, [r3, #16]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	440b      	add	r3, r1
 80032a6:	461a      	mov	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	60da      	str	r2, [r3, #12]
 80032ac:	e004      	b.n	80032b8 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	461a      	mov	r2, r3
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	3301      	adds	r3, #1
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d9b3      	bls.n	800322c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ee:	60da      	str	r2, [r3, #12]
}
 80032f0:	bf00      	nop
 80032f2:	3714      	adds	r7, #20
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b091      	sub	sp, #68	@ 0x44
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	3318      	adds	r3, #24
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800330e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8003314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 800331a:	2300      	movs	r3, #0
 800331c:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800331e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003320:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003326:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 800332e:	2300      	movs	r3, #0
 8003330:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800333a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800333e:	d007      	beq.n	8003350 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003342:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003344:	3304      	adds	r3, #4
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	4413      	add	r3, r2
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8003350:	2302      	movs	r3, #2
 8003352:	e115      	b.n	8003580 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 8003354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003356:	3301      	adds	r3, #1
 8003358:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800335a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	461a      	mov	r2, r3
 8003360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003362:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8003364:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 800336c:	f023 031f 	bic.w	r3, r3, #31
 8003370:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003372:	6852      	ldr	r2, [r2, #4]
 8003374:	431a      	orrs	r2, r3
 8003376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003378:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 0301 	and.w	r3, r3, #1
 8003382:	2b00      	cmp	r3, #0
 8003384:	d008      	beq.n	8003398 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8003386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	431a      	orrs	r2, r3
 8003394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003396:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0320 	and.w	r3, r3, #32
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d008      	beq.n	80033b6 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80033a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	431a      	orrs	r2, r3
 80033b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b4:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d005      	beq.n	80033ce <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80033c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80033ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033cc:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80033ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80033d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033d8:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80033da:	e084      	b.n	80034e6 <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80033dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80033e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033e6:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d006      	beq.n	80033fc <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80033ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80033f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033f8:	601a      	str	r2, [r3, #0]
 80033fa:	e005      	b.n	8003408 <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80033fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003406:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8003408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800340a:	3301      	adds	r3, #1
 800340c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800340e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003410:	2b03      	cmp	r3, #3
 8003412:	d902      	bls.n	800341a <ETH_Prepare_Tx_Descriptors+0x11e>
 8003414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003416:	3b04      	subs	r3, #4
 8003418:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800341a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800341e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003422:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8003424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800342c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003430:	d007      	beq.n	8003442 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8003432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003434:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003436:	3304      	adds	r3, #4
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d029      	beq.n	8003496 <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 8003442:	6a3b      	ldr	r3, [r7, #32]
 8003444:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800344a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800344e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8003450:	2300      	movs	r3, #0
 8003452:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003454:	e019      	b.n	800348a <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 8003456:	f3bf 8f5f 	dmb	sy
}
 800345a:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800345c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003466:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8003468:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800346a:	3301      	adds	r3, #1
 800346c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800346e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003470:	2b03      	cmp	r3, #3
 8003472:	d902      	bls.n	800347a <ETH_Prepare_Tx_Descriptors+0x17e>
 8003474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003476:	3b04      	subs	r3, #4
 8003478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800347a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800347e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003482:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8003484:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003486:	3301      	adds	r3, #1
 8003488:	63bb      	str	r3, [r7, #56]	@ 0x38
 800348a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800348c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800348e:	429a      	cmp	r2, r3
 8003490:	d3e1      	bcc.n	8003456 <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8003492:	2302      	movs	r3, #2
 8003494:	e074      	b.n	8003580 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8003496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800349e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034a0:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 80034a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034a4:	3301      	adds	r3, #1
 80034a6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80034a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80034ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034b6:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80034b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 80034c0:	f023 031f 	bic.w	r3, r3, #31
 80034c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034c6:	6852      	ldr	r2, [r2, #4]
 80034c8:	431a      	orrs	r2, r3
 80034ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034cc:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80034ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034d0:	3301      	adds	r3, #1
 80034d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 80034d4:	f3bf 8f5f 	dmb	sy
}
 80034d8:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80034da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80034e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e4:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80034e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f47f af76 	bne.w	80033dc <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d006      	beq.n	8003504 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80034f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80034fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	e005      	b.n	8003510 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8003504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800350c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800350e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8003510:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800351a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800351c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351e:	6a3a      	ldr	r2, [r7, #32]
 8003520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003524:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 8003526:	f3bf 8f5f 	dmb	sy
}
 800352a:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800352c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003536:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800353c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800353e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003540:	3304      	adds	r3, #4
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8003548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800354a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800354c:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800354e:	f3ef 8310 	mrs	r3, PRIMASK
 8003552:	613b      	str	r3, [r7, #16]
  return(result);
 8003554:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8003556:	61fb      	str	r3, [r7, #28]
 8003558:	2301      	movs	r3, #1
 800355a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f383 8810 	msr	PRIMASK, r3
}
 8003562:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8003564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003566:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003568:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800356a:	4413      	add	r3, r2
 800356c:	1c5a      	adds	r2, r3, #1
 800356e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003570:	629a      	str	r2, [r3, #40]	@ 0x28
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f383 8810 	msr	PRIMASK, r3
}
 800357c:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3744      	adds	r7, #68	@ 0x44
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800358c:	b480      	push	{r7}
 800358e:	b089      	sub	sp, #36	@ 0x24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003596:	2300      	movs	r3, #0
 8003598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800359a:	2300      	movs	r3, #0
 800359c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800359e:	2300      	movs	r3, #0
 80035a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035a2:	2300      	movs	r3, #0
 80035a4:	61fb      	str	r3, [r7, #28]
 80035a6:	e16b      	b.n	8003880 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035a8:	2201      	movs	r2, #1
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	fa02 f303 	lsl.w	r3, r2, r3
 80035b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4013      	ands	r3, r2
 80035ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035bc:	693a      	ldr	r2, [r7, #16]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	f040 815a 	bne.w	800387a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f003 0303 	and.w	r3, r3, #3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d005      	beq.n	80035de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d130      	bne.n	8003640 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80035e4:	69fb      	ldr	r3, [r7, #28]
 80035e6:	005b      	lsls	r3, r3, #1
 80035e8:	2203      	movs	r2, #3
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43db      	mvns	r3, r3
 80035f0:	69ba      	ldr	r2, [r7, #24]
 80035f2:	4013      	ands	r3, r2
 80035f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68da      	ldr	r2, [r3, #12]
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003602:	69ba      	ldr	r2, [r7, #24]
 8003604:	4313      	orrs	r3, r2
 8003606:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003614:	2201      	movs	r2, #1
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	f003 0201 	and.w	r2, r3, #1
 800362e:	69fb      	ldr	r3, [r7, #28]
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	2b03      	cmp	r3, #3
 800364a:	d017      	beq.n	800367c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	2203      	movs	r2, #3
 8003658:	fa02 f303 	lsl.w	r3, r2, r3
 800365c:	43db      	mvns	r3, r3
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4013      	ands	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689a      	ldr	r2, [r3, #8]
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	fa02 f303 	lsl.w	r3, r2, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4313      	orrs	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	f003 0303 	and.w	r3, r3, #3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d123      	bne.n	80036d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	08da      	lsrs	r2, r3, #3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3208      	adds	r2, #8
 8003690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	009b      	lsls	r3, r3, #2
 800369e:	220f      	movs	r2, #15
 80036a0:	fa02 f303 	lsl.w	r3, r2, r3
 80036a4:	43db      	mvns	r3, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4013      	ands	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	69fb      	ldr	r3, [r7, #28]
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	4313      	orrs	r3, r2
 80036c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	08da      	lsrs	r2, r3, #3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	3208      	adds	r2, #8
 80036ca:	69b9      	ldr	r1, [r7, #24]
 80036cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	2203      	movs	r2, #3
 80036dc:	fa02 f303 	lsl.w	r3, r2, r3
 80036e0:	43db      	mvns	r3, r3
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4013      	ands	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f003 0203 	and.w	r2, r3, #3
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	005b      	lsls	r3, r3, #1
 80036f4:	fa02 f303 	lsl.w	r3, r2, r3
 80036f8:	69ba      	ldr	r2, [r7, #24]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80b4 	beq.w	800387a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
 8003716:	4b60      	ldr	r3, [pc, #384]	@ (8003898 <HAL_GPIO_Init+0x30c>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371a:	4a5f      	ldr	r2, [pc, #380]	@ (8003898 <HAL_GPIO_Init+0x30c>)
 800371c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003720:	6453      	str	r3, [r2, #68]	@ 0x44
 8003722:	4b5d      	ldr	r3, [pc, #372]	@ (8003898 <HAL_GPIO_Init+0x30c>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003726:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800372e:	4a5b      	ldr	r2, [pc, #364]	@ (800389c <HAL_GPIO_Init+0x310>)
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	089b      	lsrs	r3, r3, #2
 8003734:	3302      	adds	r3, #2
 8003736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800373a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	220f      	movs	r2, #15
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43db      	mvns	r3, r3
 800374c:	69ba      	ldr	r2, [r7, #24]
 800374e:	4013      	ands	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	4a52      	ldr	r2, [pc, #328]	@ (80038a0 <HAL_GPIO_Init+0x314>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d02b      	beq.n	80037b2 <HAL_GPIO_Init+0x226>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a51      	ldr	r2, [pc, #324]	@ (80038a4 <HAL_GPIO_Init+0x318>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d025      	beq.n	80037ae <HAL_GPIO_Init+0x222>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	4a50      	ldr	r2, [pc, #320]	@ (80038a8 <HAL_GPIO_Init+0x31c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d01f      	beq.n	80037aa <HAL_GPIO_Init+0x21e>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	4a4f      	ldr	r2, [pc, #316]	@ (80038ac <HAL_GPIO_Init+0x320>)
 800376e:	4293      	cmp	r3, r2
 8003770:	d019      	beq.n	80037a6 <HAL_GPIO_Init+0x21a>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a4e      	ldr	r2, [pc, #312]	@ (80038b0 <HAL_GPIO_Init+0x324>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d013      	beq.n	80037a2 <HAL_GPIO_Init+0x216>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a4d      	ldr	r2, [pc, #308]	@ (80038b4 <HAL_GPIO_Init+0x328>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d00d      	beq.n	800379e <HAL_GPIO_Init+0x212>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a4c      	ldr	r2, [pc, #304]	@ (80038b8 <HAL_GPIO_Init+0x32c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d007      	beq.n	800379a <HAL_GPIO_Init+0x20e>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a4b      	ldr	r2, [pc, #300]	@ (80038bc <HAL_GPIO_Init+0x330>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d101      	bne.n	8003796 <HAL_GPIO_Init+0x20a>
 8003792:	2307      	movs	r3, #7
 8003794:	e00e      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 8003796:	2308      	movs	r3, #8
 8003798:	e00c      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 800379a:	2306      	movs	r3, #6
 800379c:	e00a      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 800379e:	2305      	movs	r3, #5
 80037a0:	e008      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 80037a2:	2304      	movs	r3, #4
 80037a4:	e006      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 80037a6:	2303      	movs	r3, #3
 80037a8:	e004      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 80037aa:	2302      	movs	r3, #2
 80037ac:	e002      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 80037ae:	2301      	movs	r3, #1
 80037b0:	e000      	b.n	80037b4 <HAL_GPIO_Init+0x228>
 80037b2:	2300      	movs	r3, #0
 80037b4:	69fa      	ldr	r2, [r7, #28]
 80037b6:	f002 0203 	and.w	r2, r2, #3
 80037ba:	0092      	lsls	r2, r2, #2
 80037bc:	4093      	lsls	r3, r2
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c4:	4935      	ldr	r1, [pc, #212]	@ (800389c <HAL_GPIO_Init+0x310>)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	089b      	lsrs	r3, r3, #2
 80037ca:	3302      	adds	r3, #2
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037d2:	4b3b      	ldr	r3, [pc, #236]	@ (80038c0 <HAL_GPIO_Init+0x334>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	43db      	mvns	r3, r3
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	4013      	ands	r3, r2
 80037e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037f6:	4a32      	ldr	r2, [pc, #200]	@ (80038c0 <HAL_GPIO_Init+0x334>)
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037fc:	4b30      	ldr	r3, [pc, #192]	@ (80038c0 <HAL_GPIO_Init+0x334>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	43db      	mvns	r3, r3
 8003806:	69ba      	ldr	r2, [r7, #24]
 8003808:	4013      	ands	r3, r2
 800380a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d003      	beq.n	8003820 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4313      	orrs	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003820:	4a27      	ldr	r2, [pc, #156]	@ (80038c0 <HAL_GPIO_Init+0x334>)
 8003822:	69bb      	ldr	r3, [r7, #24]
 8003824:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003826:	4b26      	ldr	r3, [pc, #152]	@ (80038c0 <HAL_GPIO_Init+0x334>)
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	43db      	mvns	r3, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4013      	ands	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d003      	beq.n	800384a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800384a:	4a1d      	ldr	r2, [pc, #116]	@ (80038c0 <HAL_GPIO_Init+0x334>)
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003850:	4b1b      	ldr	r3, [pc, #108]	@ (80038c0 <HAL_GPIO_Init+0x334>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003874:	4a12      	ldr	r2, [pc, #72]	@ (80038c0 <HAL_GPIO_Init+0x334>)
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3301      	adds	r3, #1
 800387e:	61fb      	str	r3, [r7, #28]
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b0f      	cmp	r3, #15
 8003884:	f67f ae90 	bls.w	80035a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003888:	bf00      	nop
 800388a:	bf00      	nop
 800388c:	3724      	adds	r7, #36	@ 0x24
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	40023800 	.word	0x40023800
 800389c:	40013800 	.word	0x40013800
 80038a0:	40020000 	.word	0x40020000
 80038a4:	40020400 	.word	0x40020400
 80038a8:	40020800 	.word	0x40020800
 80038ac:	40020c00 	.word	0x40020c00
 80038b0:	40021000 	.word	0x40021000
 80038b4:	40021400 	.word	0x40021400
 80038b8:	40021800 	.word	0x40021800
 80038bc:	40021c00 	.word	0x40021c00
 80038c0:	40013c00 	.word	0x40013c00

080038c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e267      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d075      	beq.n	80039ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038e2:	4b88      	ldr	r3, [pc, #544]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 030c 	and.w	r3, r3, #12
 80038ea:	2b04      	cmp	r3, #4
 80038ec:	d00c      	beq.n	8003908 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038ee:	4b85      	ldr	r3, [pc, #532]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d112      	bne.n	8003920 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80038fa:	4b82      	ldr	r3, [pc, #520]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003902:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003906:	d10b      	bne.n	8003920 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003908:	4b7e      	ldr	r3, [pc, #504]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003910:	2b00      	cmp	r3, #0
 8003912:	d05b      	beq.n	80039cc <HAL_RCC_OscConfig+0x108>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d157      	bne.n	80039cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e242      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003928:	d106      	bne.n	8003938 <HAL_RCC_OscConfig+0x74>
 800392a:	4b76      	ldr	r3, [pc, #472]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a75      	ldr	r2, [pc, #468]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003934:	6013      	str	r3, [r2, #0]
 8003936:	e01d      	b.n	8003974 <HAL_RCC_OscConfig+0xb0>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	685b      	ldr	r3, [r3, #4]
 800393c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003940:	d10c      	bne.n	800395c <HAL_RCC_OscConfig+0x98>
 8003942:	4b70      	ldr	r3, [pc, #448]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a6f      	ldr	r2, [pc, #444]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	4b6d      	ldr	r3, [pc, #436]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a6c      	ldr	r2, [pc, #432]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003958:	6013      	str	r3, [r2, #0]
 800395a:	e00b      	b.n	8003974 <HAL_RCC_OscConfig+0xb0>
 800395c:	4b69      	ldr	r3, [pc, #420]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a68      	ldr	r2, [pc, #416]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003966:	6013      	str	r3, [r2, #0]
 8003968:	4b66      	ldr	r3, [pc, #408]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a65      	ldr	r2, [pc, #404]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 800396e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d013      	beq.n	80039a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800397c:	f7fe f9ea 	bl	8001d54 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003984:	f7fe f9e6 	bl	8001d54 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b64      	cmp	r3, #100	@ 0x64
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e207      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003996:	4b5b      	ldr	r3, [pc, #364]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0xc0>
 80039a2:	e014      	b.n	80039ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a4:	f7fe f9d6 	bl	8001d54 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039ac:	f7fe f9d2 	bl	8001d54 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b64      	cmp	r3, #100	@ 0x64
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e1f3      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80039be:	4b51      	ldr	r3, [pc, #324]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1f0      	bne.n	80039ac <HAL_RCC_OscConfig+0xe8>
 80039ca:	e000      	b.n	80039ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0302 	and.w	r3, r3, #2
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d063      	beq.n	8003aa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039da:	4b4a      	ldr	r3, [pc, #296]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	f003 030c 	and.w	r3, r3, #12
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039e6:	4b47      	ldr	r3, [pc, #284]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80039ee:	2b08      	cmp	r3, #8
 80039f0:	d11c      	bne.n	8003a2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80039f2:	4b44      	ldr	r3, [pc, #272]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d116      	bne.n	8003a2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039fe:	4b41      	ldr	r3, [pc, #260]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d005      	beq.n	8003a16 <HAL_RCC_OscConfig+0x152>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	d001      	beq.n	8003a16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e1c7      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a16:	4b3b      	ldr	r3, [pc, #236]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	00db      	lsls	r3, r3, #3
 8003a24:	4937      	ldr	r1, [pc, #220]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a2a:	e03a      	b.n	8003aa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d020      	beq.n	8003a76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a34:	4b34      	ldr	r3, [pc, #208]	@ (8003b08 <HAL_RCC_OscConfig+0x244>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3a:	f7fe f98b 	bl	8001d54 <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a40:	e008      	b.n	8003a54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a42:	f7fe f987 	bl	8001d54 <HAL_GetTick>
 8003a46:	4602      	mov	r2, r0
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	1ad3      	subs	r3, r2, r3
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d901      	bls.n	8003a54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e1a8      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a54:	4b2b      	ldr	r3, [pc, #172]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0302 	and.w	r3, r3, #2
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d0f0      	beq.n	8003a42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a60:	4b28      	ldr	r3, [pc, #160]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4925      	ldr	r1, [pc, #148]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	600b      	str	r3, [r1, #0]
 8003a74:	e015      	b.n	8003aa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a76:	4b24      	ldr	r3, [pc, #144]	@ (8003b08 <HAL_RCC_OscConfig+0x244>)
 8003a78:	2200      	movs	r2, #0
 8003a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fe f96a 	bl	8001d54 <HAL_GetTick>
 8003a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a82:	e008      	b.n	8003a96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a84:	f7fe f966 	bl	8001d54 <HAL_GetTick>
 8003a88:	4602      	mov	r2, r0
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	1ad3      	subs	r3, r2, r3
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d901      	bls.n	8003a96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e187      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a96:	4b1b      	ldr	r3, [pc, #108]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0302 	and.w	r3, r3, #2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1f0      	bne.n	8003a84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0308 	and.w	r3, r3, #8
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d036      	beq.n	8003b1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d016      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ab6:	4b15      	ldr	r3, [pc, #84]	@ (8003b0c <HAL_RCC_OscConfig+0x248>)
 8003ab8:	2201      	movs	r2, #1
 8003aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003abc:	f7fe f94a 	bl	8001d54 <HAL_GetTick>
 8003ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ac2:	e008      	b.n	8003ad6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac4:	f7fe f946 	bl	8001d54 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d901      	bls.n	8003ad6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	e167      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8003b04 <HAL_RCC_OscConfig+0x240>)
 8003ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ada:	f003 0302 	and.w	r3, r3, #2
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d0f0      	beq.n	8003ac4 <HAL_RCC_OscConfig+0x200>
 8003ae2:	e01b      	b.n	8003b1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ae4:	4b09      	ldr	r3, [pc, #36]	@ (8003b0c <HAL_RCC_OscConfig+0x248>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003aea:	f7fe f933 	bl	8001d54 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003af0:	e00e      	b.n	8003b10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003af2:	f7fe f92f 	bl	8001d54 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d907      	bls.n	8003b10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e150      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
 8003b04:	40023800 	.word	0x40023800
 8003b08:	42470000 	.word	0x42470000
 8003b0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b10:	4b88      	ldr	r3, [pc, #544]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1ea      	bne.n	8003af2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 8097 	beq.w	8003c58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b2e:	4b81      	ldr	r3, [pc, #516]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10f      	bne.n	8003b5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	4b7d      	ldr	r3, [pc, #500]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b42:	4a7c      	ldr	r2, [pc, #496]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b4a:	4b7a      	ldr	r3, [pc, #488]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b56:	2301      	movs	r3, #1
 8003b58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b5a:	4b77      	ldr	r3, [pc, #476]	@ (8003d38 <HAL_RCC_OscConfig+0x474>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d118      	bne.n	8003b98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b66:	4b74      	ldr	r3, [pc, #464]	@ (8003d38 <HAL_RCC_OscConfig+0x474>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a73      	ldr	r2, [pc, #460]	@ (8003d38 <HAL_RCC_OscConfig+0x474>)
 8003b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b72:	f7fe f8ef 	bl	8001d54 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b7a:	f7fe f8eb 	bl	8001d54 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e10c      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8c:	4b6a      	ldr	r3, [pc, #424]	@ (8003d38 <HAL_RCC_OscConfig+0x474>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d106      	bne.n	8003bae <HAL_RCC_OscConfig+0x2ea>
 8003ba0:	4b64      	ldr	r3, [pc, #400]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ba4:	4a63      	ldr	r2, [pc, #396]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003ba6:	f043 0301 	orr.w	r3, r3, #1
 8003baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bac:	e01c      	b.n	8003be8 <HAL_RCC_OscConfig+0x324>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	2b05      	cmp	r3, #5
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x30c>
 8003bb6:	4b5f      	ldr	r3, [pc, #380]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bba:	4a5e      	ldr	r2, [pc, #376]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bbc:	f043 0304 	orr.w	r3, r3, #4
 8003bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bc2:	4b5c      	ldr	r3, [pc, #368]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bc6:	4a5b      	ldr	r2, [pc, #364]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bc8:	f043 0301 	orr.w	r3, r3, #1
 8003bcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bce:	e00b      	b.n	8003be8 <HAL_RCC_OscConfig+0x324>
 8003bd0:	4b58      	ldr	r3, [pc, #352]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bd4:	4a57      	ldr	r2, [pc, #348]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bd6:	f023 0301 	bic.w	r3, r3, #1
 8003bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bdc:	4b55      	ldr	r3, [pc, #340]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be0:	4a54      	ldr	r2, [pc, #336]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003be2:	f023 0304 	bic.w	r3, r3, #4
 8003be6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d015      	beq.n	8003c1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bf0:	f7fe f8b0 	bl	8001d54 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003bf8:	f7fe f8ac 	bl	8001d54 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e0cb      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0e:	4b49      	ldr	r3, [pc, #292]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0ee      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x334>
 8003c1a:	e014      	b.n	8003c46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1c:	f7fe f89a 	bl	8001d54 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c22:	e00a      	b.n	8003c3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c24:	f7fe f896 	bl	8001d54 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c32:	4293      	cmp	r3, r2
 8003c34:	d901      	bls.n	8003c3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e0b5      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3e:	f003 0302 	and.w	r3, r3, #2
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d1ee      	bne.n	8003c24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d105      	bne.n	8003c58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c4c:	4b39      	ldr	r3, [pc, #228]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c50:	4a38      	ldr	r2, [pc, #224]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80a1 	beq.w	8003da4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003c62:	4b34      	ldr	r3, [pc, #208]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
 8003c6a:	2b08      	cmp	r3, #8
 8003c6c:	d05c      	beq.n	8003d28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	699b      	ldr	r3, [r3, #24]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d141      	bne.n	8003cfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c76:	4b31      	ldr	r3, [pc, #196]	@ (8003d3c <HAL_RCC_OscConfig+0x478>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fe f86a 	bl	8001d54 <HAL_GetTick>
 8003c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c82:	e008      	b.n	8003c96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c84:	f7fe f866 	bl	8001d54 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d901      	bls.n	8003c96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	e087      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c96:	4b27      	ldr	r3, [pc, #156]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d1f0      	bne.n	8003c84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69da      	ldr	r2, [r3, #28]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb0:	019b      	lsls	r3, r3, #6
 8003cb2:	431a      	orrs	r2, r3
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb8:	085b      	lsrs	r3, r3, #1
 8003cba:	3b01      	subs	r3, #1
 8003cbc:	041b      	lsls	r3, r3, #16
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc4:	061b      	lsls	r3, r3, #24
 8003cc6:	491b      	ldr	r1, [pc, #108]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8003d3c <HAL_RCC_OscConfig+0x478>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cd2:	f7fe f83f 	bl	8001d54 <HAL_GetTick>
 8003cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cd8:	e008      	b.n	8003cec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cda:	f7fe f83b 	bl	8001d54 <HAL_GetTick>
 8003cde:	4602      	mov	r2, r0
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	1ad3      	subs	r3, r2, r3
 8003ce4:	2b02      	cmp	r3, #2
 8003ce6:	d901      	bls.n	8003cec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ce8:	2303      	movs	r3, #3
 8003cea:	e05c      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cec:	4b11      	ldr	r3, [pc, #68]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d0f0      	beq.n	8003cda <HAL_RCC_OscConfig+0x416>
 8003cf8:	e054      	b.n	8003da4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cfa:	4b10      	ldr	r3, [pc, #64]	@ (8003d3c <HAL_RCC_OscConfig+0x478>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d00:	f7fe f828 	bl	8001d54 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d06:	e008      	b.n	8003d1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d08:	f7fe f824 	bl	8001d54 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	2b02      	cmp	r3, #2
 8003d14:	d901      	bls.n	8003d1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e045      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d1a:	4b06      	ldr	r3, [pc, #24]	@ (8003d34 <HAL_RCC_OscConfig+0x470>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1f0      	bne.n	8003d08 <HAL_RCC_OscConfig+0x444>
 8003d26:	e03d      	b.n	8003da4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	d107      	bne.n	8003d40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	e038      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
 8003d34:	40023800 	.word	0x40023800
 8003d38:	40007000 	.word	0x40007000
 8003d3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003d40:	4b1b      	ldr	r3, [pc, #108]	@ (8003db0 <HAL_RCC_OscConfig+0x4ec>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d028      	beq.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d121      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d11a      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003d70:	4013      	ands	r3, r2
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003d76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d111      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d86:	085b      	lsrs	r3, r3, #1
 8003d88:	3b01      	subs	r3, #1
 8003d8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d107      	bne.n	8003da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d001      	beq.n	8003da4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003da0:	2301      	movs	r3, #1
 8003da2:	e000      	b.n	8003da6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	40023800 	.word	0x40023800

08003db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d101      	bne.n	8003dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e0cc      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003dc8:	4b68      	ldr	r3, [pc, #416]	@ (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	683a      	ldr	r2, [r7, #0]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d90c      	bls.n	8003df0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003dd6:	4b65      	ldr	r3, [pc, #404]	@ (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003dd8:	683a      	ldr	r2, [r7, #0]
 8003dda:	b2d2      	uxtb	r2, r2
 8003ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dde:	4b63      	ldr	r3, [pc, #396]	@ (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	683a      	ldr	r2, [r7, #0]
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d001      	beq.n	8003df0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	e0b8      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d020      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d005      	beq.n	8003e14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e08:	4b59      	ldr	r3, [pc, #356]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	4a58      	ldr	r2, [pc, #352]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003e12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0308 	and.w	r3, r3, #8
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d005      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e20:	4b53      	ldr	r3, [pc, #332]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	4a52      	ldr	r2, [pc, #328]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003e2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e2c:	4b50      	ldr	r3, [pc, #320]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	494d      	ldr	r1, [pc, #308]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d044      	beq.n	8003ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d107      	bne.n	8003e62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e52:	4b47      	ldr	r3, [pc, #284]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d119      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e07f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d003      	beq.n	8003e72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	d107      	bne.n	8003e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e72:	4b3f      	ldr	r3, [pc, #252]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d109      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e06f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e82:	4b3b      	ldr	r3, [pc, #236]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e067      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e92:	4b37      	ldr	r3, [pc, #220]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f023 0203 	bic.w	r2, r3, #3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4934      	ldr	r1, [pc, #208]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ea4:	f7fd ff56 	bl	8001d54 <HAL_GetTick>
 8003ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003eaa:	e00a      	b.n	8003ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003eac:	f7fd ff52 	bl	8001d54 <HAL_GetTick>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	1ad3      	subs	r3, r2, r3
 8003eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d901      	bls.n	8003ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e04f      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	f003 020c 	and.w	r2, r3, #12
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d1eb      	bne.n	8003eac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed4:	4b25      	ldr	r3, [pc, #148]	@ (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0307 	and.w	r3, r3, #7
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	429a      	cmp	r2, r3
 8003ee0:	d20c      	bcs.n	8003efc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee2:	4b22      	ldr	r3, [pc, #136]	@ (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003ee4:	683a      	ldr	r2, [r7, #0]
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eea:	4b20      	ldr	r3, [pc, #128]	@ (8003f6c <HAL_RCC_ClockConfig+0x1b8>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	429a      	cmp	r2, r3
 8003ef6:	d001      	beq.n	8003efc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e032      	b.n	8003f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f003 0304 	and.w	r3, r3, #4
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d008      	beq.n	8003f1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f08:	4b19      	ldr	r3, [pc, #100]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	68db      	ldr	r3, [r3, #12]
 8003f14:	4916      	ldr	r1, [pc, #88]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d009      	beq.n	8003f3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f26:	4b12      	ldr	r3, [pc, #72]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	490e      	ldr	r1, [pc, #56]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	4313      	orrs	r3, r2
 8003f38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003f3a:	f000 f821 	bl	8003f80 <HAL_RCC_GetSysClockFreq>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	091b      	lsrs	r3, r3, #4
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	490a      	ldr	r1, [pc, #40]	@ (8003f74 <HAL_RCC_ClockConfig+0x1c0>)
 8003f4c:	5ccb      	ldrb	r3, [r1, r3]
 8003f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f52:	4a09      	ldr	r2, [pc, #36]	@ (8003f78 <HAL_RCC_ClockConfig+0x1c4>)
 8003f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003f56:	4b09      	ldr	r3, [pc, #36]	@ (8003f7c <HAL_RCC_ClockConfig+0x1c8>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f7fd fbf0 	bl	8001740 <HAL_InitTick>

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40023c00 	.word	0x40023c00
 8003f70:	40023800 	.word	0x40023800
 8003f74:	08025588 	.word	0x08025588
 8003f78:	20000000 	.word	0x20000000
 8003f7c:	20000004 	.word	0x20000004

08003f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f84:	b090      	sub	sp, #64	@ 0x40
 8003f86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003f90:	2300      	movs	r3, #0
 8003f92:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003f94:	2300      	movs	r3, #0
 8003f96:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f98:	4b59      	ldr	r3, [pc, #356]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x180>)
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	f003 030c 	and.w	r3, r3, #12
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d00d      	beq.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x40>
 8003fa4:	2b08      	cmp	r3, #8
 8003fa6:	f200 80a1 	bhi.w	80040ec <HAL_RCC_GetSysClockFreq+0x16c>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8003fae:	2b04      	cmp	r3, #4
 8003fb0:	d003      	beq.n	8003fba <HAL_RCC_GetSysClockFreq+0x3a>
 8003fb2:	e09b      	b.n	80040ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003fb4:	4b53      	ldr	r3, [pc, #332]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x184>)
 8003fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fb8:	e09b      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003fba:	4b53      	ldr	r3, [pc, #332]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fbc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003fbe:	e098      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003fc0:	4b4f      	ldr	r3, [pc, #316]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fc2:	685b      	ldr	r3, [r3, #4]
 8003fc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fc8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fca:	4b4d      	ldr	r3, [pc, #308]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d028      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x180>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	099b      	lsrs	r3, r3, #6
 8003fdc:	2200      	movs	r2, #0
 8003fde:	623b      	str	r3, [r7, #32]
 8003fe0:	627a      	str	r2, [r7, #36]	@ 0x24
 8003fe2:	6a3b      	ldr	r3, [r7, #32]
 8003fe4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4b47      	ldr	r3, [pc, #284]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x188>)
 8003fec:	fb03 f201 	mul.w	r2, r3, r1
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	fb00 f303 	mul.w	r3, r0, r3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	4a43      	ldr	r2, [pc, #268]	@ (8004108 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ffa:	fba0 1202 	umull	r1, r2, r0, r2
 8003ffe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004000:	460a      	mov	r2, r1
 8004002:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004004:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004006:	4413      	add	r3, r2
 8004008:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800400a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800400c:	2200      	movs	r2, #0
 800400e:	61bb      	str	r3, [r7, #24]
 8004010:	61fa      	str	r2, [r7, #28]
 8004012:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004016:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800401a:	f7fc fe35 	bl	8000c88 <__aeabi_uldivmod>
 800401e:	4602      	mov	r2, r0
 8004020:	460b      	mov	r3, r1
 8004022:	4613      	mov	r3, r2
 8004024:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004026:	e053      	b.n	80040d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004028:	4b35      	ldr	r3, [pc, #212]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x180>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	099b      	lsrs	r3, r3, #6
 800402e:	2200      	movs	r2, #0
 8004030:	613b      	str	r3, [r7, #16]
 8004032:	617a      	str	r2, [r7, #20]
 8004034:	693b      	ldr	r3, [r7, #16]
 8004036:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800403a:	f04f 0b00 	mov.w	fp, #0
 800403e:	4652      	mov	r2, sl
 8004040:	465b      	mov	r3, fp
 8004042:	f04f 0000 	mov.w	r0, #0
 8004046:	f04f 0100 	mov.w	r1, #0
 800404a:	0159      	lsls	r1, r3, #5
 800404c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004050:	0150      	lsls	r0, r2, #5
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	ebb2 080a 	subs.w	r8, r2, sl
 800405a:	eb63 090b 	sbc.w	r9, r3, fp
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800406a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800406e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004072:	ebb2 0408 	subs.w	r4, r2, r8
 8004076:	eb63 0509 	sbc.w	r5, r3, r9
 800407a:	f04f 0200 	mov.w	r2, #0
 800407e:	f04f 0300 	mov.w	r3, #0
 8004082:	00eb      	lsls	r3, r5, #3
 8004084:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004088:	00e2      	lsls	r2, r4, #3
 800408a:	4614      	mov	r4, r2
 800408c:	461d      	mov	r5, r3
 800408e:	eb14 030a 	adds.w	r3, r4, sl
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	eb45 030b 	adc.w	r3, r5, fp
 8004098:	607b      	str	r3, [r7, #4]
 800409a:	f04f 0200 	mov.w	r2, #0
 800409e:	f04f 0300 	mov.w	r3, #0
 80040a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040a6:	4629      	mov	r1, r5
 80040a8:	028b      	lsls	r3, r1, #10
 80040aa:	4621      	mov	r1, r4
 80040ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040b0:	4621      	mov	r1, r4
 80040b2:	028a      	lsls	r2, r1, #10
 80040b4:	4610      	mov	r0, r2
 80040b6:	4619      	mov	r1, r3
 80040b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ba:	2200      	movs	r2, #0
 80040bc:	60bb      	str	r3, [r7, #8]
 80040be:	60fa      	str	r2, [r7, #12]
 80040c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80040c4:	f7fc fde0 	bl	8000c88 <__aeabi_uldivmod>
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4613      	mov	r3, r2
 80040ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80040d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004100 <HAL_RCC_GetSysClockFreq+0x180>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	0c1b      	lsrs	r3, r3, #16
 80040d6:	f003 0303 	and.w	r3, r3, #3
 80040da:	3301      	adds	r3, #1
 80040dc:	005b      	lsls	r3, r3, #1
 80040de:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80040e0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80040e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040ea:	e002      	b.n	80040f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040ec:	4b05      	ldr	r3, [pc, #20]	@ (8004104 <HAL_RCC_GetSysClockFreq+0x184>)
 80040ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3740      	adds	r7, #64	@ 0x40
 80040f8:	46bd      	mov	sp, r7
 80040fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040fe:	bf00      	nop
 8004100:	40023800 	.word	0x40023800
 8004104:	00f42400 	.word	0x00f42400
 8004108:	017d7840 	.word	0x017d7840

0800410c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004110:	4b03      	ldr	r3, [pc, #12]	@ (8004120 <HAL_RCC_GetHCLKFreq+0x14>)
 8004112:	681b      	ldr	r3, [r3, #0]
}
 8004114:	4618      	mov	r0, r3
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	20000000 	.word	0x20000000

08004124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004128:	f7ff fff0 	bl	800410c <HAL_RCC_GetHCLKFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b05      	ldr	r3, [pc, #20]	@ (8004144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	0a9b      	lsrs	r3, r3, #10
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	4903      	ldr	r1, [pc, #12]	@ (8004148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004140:	4618      	mov	r0, r3
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40023800 	.word	0x40023800
 8004148:	08025598 	.word	0x08025598

0800414c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004150:	f7ff ffdc 	bl	800410c <HAL_RCC_GetHCLKFreq>
 8004154:	4602      	mov	r2, r0
 8004156:	4b05      	ldr	r3, [pc, #20]	@ (800416c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	0b5b      	lsrs	r3, r3, #13
 800415c:	f003 0307 	and.w	r3, r3, #7
 8004160:	4903      	ldr	r1, [pc, #12]	@ (8004170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004162:	5ccb      	ldrb	r3, [r1, r3]
 8004164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004168:	4618      	mov	r0, r3
 800416a:	bd80      	pop	{r7, pc}
 800416c:	40023800 	.word	0x40023800
 8004170:	08025598 	.word	0x08025598

08004174 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	220f      	movs	r2, #15
 8004182:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004184:	4b12      	ldr	r3, [pc, #72]	@ (80041d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	f003 0203 	and.w	r2, r3, #3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004190:	4b0f      	ldr	r3, [pc, #60]	@ (80041d0 <HAL_RCC_GetClockConfig+0x5c>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800419c:	4b0c      	ldr	r3, [pc, #48]	@ (80041d0 <HAL_RCC_GetClockConfig+0x5c>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80041a8:	4b09      	ldr	r3, [pc, #36]	@ (80041d0 <HAL_RCC_GetClockConfig+0x5c>)
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	08db      	lsrs	r3, r3, #3
 80041ae:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80041b6:	4b07      	ldr	r3, [pc, #28]	@ (80041d4 <HAL_RCC_GetClockConfig+0x60>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0207 	and.w	r2, r3, #7
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	601a      	str	r2, [r3, #0]
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800
 80041d4:	40023c00 	.word	0x40023c00

080041d8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d101      	bne.n	80041ea <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e01c      	b.n	8004224 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	795b      	ldrb	r3, [r3, #5]
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d105      	bne.n	8004200 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fd f9a0 	bl	8001540 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2202      	movs	r2, #2
 8004204:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f042 0204 	orr.w	r2, r2, #4
 8004214:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 8004234:	2300      	movs	r3, #0
 8004236:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f003 0320 	and.w	r3, r3, #32
 8004246:	2b00      	cmp	r3, #0
 8004248:	d005      	beq.n	8004256 <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2210      	movs	r2, #16
 800424e:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004250:	2301      	movs	r3, #1
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	e009      	b.n	800426a <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800425c:	2b00      	cmp	r3, #0
 800425e:	d004      	beq.n	800426a <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2208      	movs	r2, #8
 8004264:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 8004266:	2301      	movs	r3, #1
 8004268:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d10b      	bne.n	8004288 <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2204      	movs	r2, #4
 8004274:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f000 f837 	bl	80042ea <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8004284:	605a      	str	r2, [r3, #4]

    return;
 8004286:	e022      	b.n	80042ce <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 0301 	and.w	r3, r3, #1
 800428e:	2b00      	cmp	r3, #0
 8004290:	d01d      	beq.n	80042ce <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	681a      	ldr	r2, [r3, #0]
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f022 0208 	bic.w	r2, r2, #8
 80042a0:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	689a      	ldr	r2, [r3, #8]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	795b      	ldrb	r3, [r3, #5]
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d00b      	beq.n	80042ce <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	4619      	mov	r1, r3
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f803 	bl	80042d4 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 80042ce:	3710      	adds	r7, #16
 80042d0:	46bd      	mov	sp, r7
 80042d2:	bd80      	pop	{r7, pc}

080042d4 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b083      	sub	sp, #12
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 80042de:	bf00      	nop
 80042e0:	370c      	adds	r7, #12
 80042e2:	46bd      	mov	sp, r7
 80042e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e8:	4770      	bx	lr

080042ea <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 80042ea:	b480      	push	{r7}
 80042ec:	b083      	sub	sp, #12
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 80042f2:	bf00      	nop
 80042f4:	370c      	adds	r7, #12
 80042f6:	46bd      	mov	sp, r7
 80042f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fc:	4770      	bx	lr

080042fe <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e022      	b.n	8004356 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004316:	b2db      	uxtb	r3, r3
 8004318:	2b00      	cmp	r3, #0
 800431a:	d105      	bne.n	8004328 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fd f934 	bl	8001590 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2203      	movs	r2, #3
 800432c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8004330:	6878      	ldr	r0, [r7, #4]
 8004332:	f000 f815 	bl	8004360 <HAL_SD_InitCard>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e00a      	b.n	8004356 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2200      	movs	r2, #0
 8004344:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2200      	movs	r2, #0
 800434a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004354:	2300      	movs	r3, #0
}
 8004356:	4618      	mov	r0, r3
 8004358:	3708      	adds	r7, #8
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
	...

08004360 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004360:	b5b0      	push	{r4, r5, r7, lr}
 8004362:	b08e      	sub	sp, #56	@ 0x38
 8004364:	af04      	add	r7, sp, #16
 8004366:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8004368:	2300      	movs	r3, #0
 800436a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8004370:	2300      	movs	r3, #0
 8004372:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8004378:	2300      	movs	r3, #0
 800437a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 800437c:	2376      	movs	r3, #118	@ 0x76
 800437e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681d      	ldr	r5, [r3, #0]
 8004384:	466c      	mov	r4, sp
 8004386:	f107 0314 	add.w	r3, r7, #20
 800438a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800438e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004392:	f107 0308 	add.w	r3, r7, #8
 8004396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004398:	4628      	mov	r0, r5
 800439a:	f001 fec9 	bl	8006130 <SDIO_Init>
 800439e:	4603      	mov	r3, r0
 80043a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80043a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d001      	beq.n	80043b0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e04f      	b.n	8004450 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80043b0:	4b29      	ldr	r3, [pc, #164]	@ (8004458 <HAL_SD_InitCard+0xf8>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f001 fee3 	bl	8006186 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80043c0:	4b25      	ldr	r3, [pc, #148]	@ (8004458 <HAL_SD_InitCard+0xf8>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80043c6:	2002      	movs	r0, #2
 80043c8:	f7fd fcd0 	bl	8001d6c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 fd77 	bl	8004ec0 <SD_PowerON>
 80043d2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00b      	beq.n	80043f2 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80043e6:	6a3b      	ldr	r3, [r7, #32]
 80043e8:	431a      	orrs	r2, r3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e02e      	b.n	8004450 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fc96 	bl	8004d24 <SD_InitCard>
 80043f8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d00b      	beq.n	8004418 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800440c:	6a3b      	ldr	r3, [r7, #32]
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e01b      	b.n	8004450 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004420:	4618      	mov	r0, r3
 8004422:	f001 ff42 	bl	80062aa <SDMMC_CmdBlockLength>
 8004426:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004428:	6a3b      	ldr	r3, [r7, #32]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00f      	beq.n	800444e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4a0a      	ldr	r2, [pc, #40]	@ (800445c <HAL_SD_InitCard+0xfc>)
 8004434:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e000      	b.n	8004450 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3728      	adds	r7, #40	@ 0x28
 8004454:	46bd      	mov	sp, r7
 8004456:	bdb0      	pop	{r4, r5, r7, pc}
 8004458:	422580a0 	.word	0x422580a0
 800445c:	004005ff 	.word	0x004005ff

08004460 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b08c      	sub	sp, #48	@ 0x30
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
 800446c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d107      	bne.n	8004488 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800447c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	e0c0      	b.n	800460a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b01      	cmp	r3, #1
 8004492:	f040 80b9 	bne.w	8004608 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800449c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	441a      	add	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d907      	bls.n	80044ba <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ae:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e0a7      	b.n	800460a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2203      	movs	r2, #3
 80044be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2200      	movs	r2, #0
 80044c8:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	6812      	ldr	r2, [r2, #0]
 80044d4:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 80044d8:	f043 0302 	orr.w	r3, r3, #2
 80044dc:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	4a4c      	ldr	r2, [pc, #304]	@ (8004614 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80044e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ea:	4a4b      	ldr	r2, [pc, #300]	@ (8004618 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80044ec:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f2:	2200      	movs	r2, #0
 80044f4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	2200      	movs	r2, #0
 80044fc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3380      	adds	r3, #128	@ 0x80
 8004524:	4619      	mov	r1, r3
 8004526:	68ba      	ldr	r2, [r7, #8]
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	025b      	lsls	r3, r3, #9
 800452c:	089b      	lsrs	r3, r3, #2
 800452e:	f7fd fd23 	bl	8001f78 <HAL_DMA_Start_IT>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d017      	beq.n	8004568 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 8004546:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a33      	ldr	r2, [pc, #204]	@ (800461c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800454e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004554:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e050      	b.n	800460a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8004568:	4b2d      	ldr	r3, [pc, #180]	@ (8004620 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800456a:	2201      	movs	r2, #1
 800456c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004572:	2b01      	cmp	r3, #1
 8004574:	d002      	beq.n	800457c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8004576:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004578:	025b      	lsls	r3, r3, #9
 800457a:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800457c:	f04f 33ff 	mov.w	r3, #4294967295
 8004580:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	025b      	lsls	r3, r3, #9
 8004586:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004588:	2390      	movs	r3, #144	@ 0x90
 800458a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800458c:	2302      	movs	r3, #2
 800458e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004590:	2300      	movs	r3, #0
 8004592:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8004594:	2301      	movs	r3, #1
 8004596:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f107 0210 	add.w	r2, r7, #16
 80045a0:	4611      	mov	r1, r2
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 fe55 	bl	8006252 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d90a      	bls.n	80045c4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2282      	movs	r2, #130	@ 0x82
 80045b2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045ba:	4618      	mov	r0, r3
 80045bc:	f001 feb9 	bl	8006332 <SDMMC_CmdReadMultiBlock>
 80045c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80045c2:	e009      	b.n	80045d8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2281      	movs	r2, #129	@ 0x81
 80045c8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045d0:	4618      	mov	r0, r3
 80045d2:	f001 fe8c 	bl	80062ee <SDMMC_CmdReadSingleBlock>
 80045d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80045d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d012      	beq.n	8004604 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a0e      	ldr	r2, [pc, #56]	@ (800461c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80045e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80045ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045ec:	431a      	orrs	r2, r3
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2200      	movs	r2, #0
 80045fe:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e002      	b.n	800460a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	e000      	b.n	800460a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8004608:	2302      	movs	r3, #2
  }
}
 800460a:	4618      	mov	r0, r3
 800460c:	3730      	adds	r7, #48	@ 0x30
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	08004c0f 	.word	0x08004c0f
 8004618:	08004c81 	.word	0x08004c81
 800461c:	004005ff 	.word	0x004005ff
 8004620:	4225858c 	.word	0x4225858c

08004624 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08c      	sub	sp, #48	@ 0x30
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
 8004630:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d107      	bne.n	800464c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004640:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e0c5      	b.n	80047d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b01      	cmp	r3, #1
 8004656:	f040 80be 	bne.w	80047d6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004660:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	441a      	add	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800466a:	429a      	cmp	r2, r3
 800466c:	d907      	bls.n	800467e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004672:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e0ac      	b.n	80047d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	2203      	movs	r2, #3
 8004682:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2200      	movs	r2, #0
 800468c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	6812      	ldr	r2, [r2, #0]
 8004698:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 800469c:	f043 0302 	orr.w	r3, r3, #2
 80046a0:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a6:	4a4e      	ldr	r2, [pc, #312]	@ (80047e0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80046a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046ae:	4a4d      	ldr	r2, [pc, #308]	@ (80047e4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80046b0:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046b6:	2200      	movs	r2, #0
 80046b8:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d002      	beq.n	80046c8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80046c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046c4:	025b      	lsls	r3, r3, #9
 80046c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d90a      	bls.n	80046e4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	22a0      	movs	r2, #160	@ 0xa0
 80046d2:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046da:	4618      	mov	r0, r3
 80046dc:	f001 fe6d 	bl	80063ba <SDMMC_CmdWriteMultiBlock>
 80046e0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80046e2:	e009      	b.n	80046f8 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	2290      	movs	r2, #144	@ 0x90
 80046e8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80046f0:	4618      	mov	r0, r3
 80046f2:	f001 fe40 	bl	8006376 <SDMMC_CmdWriteSingleBlock>
 80046f6:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80046f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d012      	beq.n	8004724 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a39      	ldr	r2, [pc, #228]	@ (80047e8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004704:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800470a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470c:	431a      	orrs	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	e059      	b.n	80047d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8004724:	4b31      	ldr	r3, [pc, #196]	@ (80047ec <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8004726:	2201      	movs	r2, #1
 8004728:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472e:	2240      	movs	r2, #64	@ 0x40
 8004730:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004742:	689a      	ldr	r2, [r3, #8]
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	430a      	orrs	r2, r1
 800474c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8004752:	68b9      	ldr	r1, [r7, #8]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	3380      	adds	r3, #128	@ 0x80
 800475a:	461a      	mov	r2, r3
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	025b      	lsls	r3, r3, #9
 8004760:	089b      	lsrs	r3, r3, #2
 8004762:	f7fd fc09 	bl	8001f78 <HAL_DMA_Start_IT>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d01c      	beq.n	80047a6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004772:	68fa      	ldr	r2, [r7, #12]
 8004774:	6812      	ldr	r2, [r2, #0]
 8004776:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 800477a:	f023 0302 	bic.w	r3, r3, #2
 800477e:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a18      	ldr	r2, [pc, #96]	@ (80047e8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8004786:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800478c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	2201      	movs	r2, #1
 8004798:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e018      	b.n	80047d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80047a6:	f04f 33ff 	mov.w	r3, #4294967295
 80047aa:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	025b      	lsls	r3, r3, #9
 80047b0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80047b2:	2390      	movs	r3, #144	@ 0x90
 80047b4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80047ba:	2300      	movs	r3, #0
 80047bc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80047be:	2301      	movs	r3, #1
 80047c0:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f107 0210 	add.w	r2, r7, #16
 80047ca:	4611      	mov	r1, r2
 80047cc:	4618      	mov	r0, r3
 80047ce:	f001 fd40 	bl	8006252 <SDIO_ConfigData>

      return HAL_OK;
 80047d2:	2300      	movs	r3, #0
 80047d4:	e000      	b.n	80047d8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80047d6:	2302      	movs	r3, #2
  }
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3730      	adds	r7, #48	@ 0x30
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	08004be5 	.word	0x08004be5
 80047e4:	08004c81 	.word	0x08004c81
 80047e8:	004005ff 	.word	0x004005ff
 80047ec:	4225858c 	.word	0x4225858c

080047f0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b083      	sub	sp, #12
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004812:	0f9b      	lsrs	r3, r3, #30
 8004814:	b2da      	uxtb	r2, r3
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800481e:	0e9b      	lsrs	r3, r3, #26
 8004820:	b2db      	uxtb	r3, r3
 8004822:	f003 030f 	and.w	r3, r3, #15
 8004826:	b2da      	uxtb	r2, r3
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004830:	0e1b      	lsrs	r3, r3, #24
 8004832:	b2db      	uxtb	r3, r3
 8004834:	f003 0303 	and.w	r3, r3, #3
 8004838:	b2da      	uxtb	r2, r3
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004842:	0c1b      	lsrs	r3, r3, #16
 8004844:	b2da      	uxtb	r2, r3
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800484e:	0a1b      	lsrs	r3, r3, #8
 8004850:	b2da      	uxtb	r2, r3
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800485a:	b2da      	uxtb	r2, r3
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004864:	0d1b      	lsrs	r3, r3, #20
 8004866:	b29a      	uxth	r2, r3
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004870:	0c1b      	lsrs	r3, r3, #16
 8004872:	b2db      	uxtb	r3, r3
 8004874:	f003 030f 	and.w	r3, r3, #15
 8004878:	b2da      	uxtb	r2, r3
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004882:	0bdb      	lsrs	r3, r3, #15
 8004884:	b2db      	uxtb	r3, r3
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	b2da      	uxtb	r2, r3
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004894:	0b9b      	lsrs	r3, r3, #14
 8004896:	b2db      	uxtb	r3, r3
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	b2da      	uxtb	r2, r3
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048a6:	0b5b      	lsrs	r3, r3, #13
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048b8:	0b1b      	lsrs	r3, r3, #12
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	f003 0301 	and.w	r3, r3, #1
 80048c0:	b2da      	uxtb	r2, r3
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2200      	movs	r2, #0
 80048ca:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d163      	bne.n	800499c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048d8:	009a      	lsls	r2, r3, #2
 80048da:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80048de:	4013      	ands	r3, r2
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 80048e4:	0f92      	lsrs	r2, r2, #30
 80048e6:	431a      	orrs	r2, r3
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80048f0:	0edb      	lsrs	r3, r3, #27
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	f003 0307 	and.w	r3, r3, #7
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004902:	0e1b      	lsrs	r3, r3, #24
 8004904:	b2db      	uxtb	r3, r3
 8004906:	f003 0307 	and.w	r3, r3, #7
 800490a:	b2da      	uxtb	r2, r3
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004914:	0d5b      	lsrs	r3, r3, #21
 8004916:	b2db      	uxtb	r3, r3
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	b2da      	uxtb	r2, r3
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004926:	0c9b      	lsrs	r3, r3, #18
 8004928:	b2db      	uxtb	r3, r3
 800492a:	f003 0307 	and.w	r3, r3, #7
 800492e:	b2da      	uxtb	r2, r3
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004938:	0bdb      	lsrs	r3, r3, #15
 800493a:	b2db      	uxtb	r3, r3
 800493c:	f003 0307 	and.w	r3, r3, #7
 8004940:	b2da      	uxtb	r2, r3
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	7e1b      	ldrb	r3, [r3, #24]
 8004954:	b2db      	uxtb	r3, r3
 8004956:	f003 0307 	and.w	r3, r3, #7
 800495a:	3302      	adds	r3, #2
 800495c:	2201      	movs	r2, #1
 800495e:	fa02 f303 	lsl.w	r3, r2, r3
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004966:	fb03 f202 	mul.w	r2, r3, r2
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	7a1b      	ldrb	r3, [r3, #8]
 8004972:	b2db      	uxtb	r3, r3
 8004974:	f003 030f 	and.w	r3, r3, #15
 8004978:	2201      	movs	r2, #1
 800497a:	409a      	lsls	r2, r3
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8004988:	0a52      	lsrs	r2, r2, #9
 800498a:	fb03 f202 	mul.w	r2, r3, r2
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004998:	661a      	str	r2, [r3, #96]	@ 0x60
 800499a:	e031      	b.n	8004a00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d11d      	bne.n	80049e0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80049a8:	041b      	lsls	r3, r3, #16
 80049aa:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049b2:	0c1b      	lsrs	r3, r3, #16
 80049b4:	431a      	orrs	r2, r3
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	3301      	adds	r3, #1
 80049c0:	029a      	lsls	r2, r3, #10
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049d4:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	661a      	str	r2, [r3, #96]	@ 0x60
 80049de:	e00f      	b.n	8004a00 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a58      	ldr	r2, [pc, #352]	@ (8004b48 <HAL_SD_GetCardCSD+0x344>)
 80049e6:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049ec:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e09d      	b.n	8004b3c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a04:	0b9b      	lsrs	r3, r3, #14
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a16:	09db      	lsrs	r3, r3, #7
 8004a18:	b2db      	uxtb	r3, r3
 8004a1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a1e:	b2da      	uxtb	r2, r3
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a2e:	b2da      	uxtb	r2, r3
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a38:	0fdb      	lsrs	r3, r3, #31
 8004a3a:	b2da      	uxtb	r2, r3
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a44:	0f5b      	lsrs	r3, r3, #29
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	f003 0303 	and.w	r3, r3, #3
 8004a4c:	b2da      	uxtb	r2, r3
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a56:	0e9b      	lsrs	r3, r3, #26
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	f003 0307 	and.w	r3, r3, #7
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a68:	0d9b      	lsrs	r3, r3, #22
 8004a6a:	b2db      	uxtb	r3, r3
 8004a6c:	f003 030f 	and.w	r3, r3, #15
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a7a:	0d5b      	lsrs	r3, r3, #21
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	b2da      	uxtb	r2, r3
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a96:	0c1b      	lsrs	r3, r3, #16
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	b2da      	uxtb	r2, r3
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004aaa:	0bdb      	lsrs	r3, r3, #15
 8004aac:	b2db      	uxtb	r3, r3
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	b2da      	uxtb	r2, r3
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004abe:	0b9b      	lsrs	r3, r3, #14
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	b2da      	uxtb	r2, r3
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ad2:	0b5b      	lsrs	r3, r3, #13
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	b2da      	uxtb	r2, r3
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ae6:	0b1b      	lsrs	r3, r3, #12
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	b2da      	uxtb	r2, r3
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004afa:	0a9b      	lsrs	r3, r3, #10
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b0e:	0a1b      	lsrs	r3, r3, #8
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	b2da      	uxtb	r2, r3
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b22:	085b      	lsrs	r3, r3, #1
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b2a:	b2da      	uxtb	r2, r3
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	2201      	movs	r2, #1
 8004b36:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	370c      	adds	r7, #12
 8004b40:	46bd      	mov	sp, r7
 8004b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b46:	4770      	bx	lr
 8004b48:	004005ff 	.word	0x004005ff

08004b4c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	370c      	adds	r7, #12
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004bac:	2300      	movs	r3, #0
 8004bae:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004bb0:	f107 030c 	add.w	r3, r7, #12
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 fa10 	bl	8004fdc <SD_SendStatus>
 8004bbc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	0a5b      	lsrs	r3, r3, #9
 8004bd4:	f003 030f 	and.w	r3, r3, #15
 8004bd8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004bda:	693b      	ldr	r3, [r7, #16]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3718      	adds	r7, #24
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c00:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004c02:	bf00      	nop
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	b084      	sub	sp, #16
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c20:	2b82      	cmp	r3, #130	@ 0x82
 8004c22:	d111      	bne.n	8004c48 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f001 fbe9 	bl	8006400 <SDMMC_CmdStopTransfer>
 8004c2e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d008      	beq.n	8004c48 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	431a      	orrs	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8004c42:	68f8      	ldr	r0, [r7, #12]
 8004c44:	f7ff fdd4 	bl	80047f0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0208 	bic.w	r2, r2, #8
 8004c56:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8004c60:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f001 ffed 	bl	8006c50 <HAL_SD_RxCpltCallback>
#endif
}
 8004c76:	bf00      	nop
 8004c78:	3710      	adds	r7, #16
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c8c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7fd f9ca 	bl	8002028 <HAL_DMA_GetError>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b02      	cmp	r3, #2
 8004c98:	d03e      	beq.n	8004d18 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	2b01      	cmp	r3, #1
 8004cae:	d002      	beq.n	8004cb6 <SD_DMAError+0x36>
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d12d      	bne.n	8004d12 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a19      	ldr	r2, [pc, #100]	@ (8004d20 <SD_DMAError+0xa0>)
 8004cbc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8004ccc:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd2:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8004cda:	6978      	ldr	r0, [r7, #20]
 8004cdc:	f7ff ff62 	bl	8004ba4 <HAL_SD_GetCardState>
 8004ce0:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	2b06      	cmp	r3, #6
 8004ce6:	d002      	beq.n	8004cee <SD_DMAError+0x6e>
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	2b05      	cmp	r3, #5
 8004cec:	d10a      	bne.n	8004d04 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f001 fb84 	bl	8006400 <SDMMC_CmdStopTransfer>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8004d12:	6978      	ldr	r0, [r7, #20]
 8004d14:	f7ff fd6c 	bl	80047f0 <HAL_SD_ErrorCallback>
#endif
  }
}
 8004d18:	bf00      	nop
 8004d1a:	3718      	adds	r7, #24
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	004005ff 	.word	0x004005ff

08004d24 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004d24:	b5b0      	push	{r4, r5, r7, lr}
 8004d26:	b094      	sub	sp, #80	@ 0x50
 8004d28:	af04      	add	r7, sp, #16
 8004d2a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f001 fa34 	bl	80061a2 <SDIO_GetPowerState>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d102      	bne.n	8004d46 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004d40:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8004d44:	e0b8      	b.n	8004eb8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	d02f      	beq.n	8004dae <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4618      	mov	r0, r3
 8004d54:	f001 fc1b 	bl	800658e <SDMMC_CmdSendCID>
 8004d58:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d001      	beq.n	8004d64 <SD_InitCard+0x40>
    {
      return errorstate;
 8004d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d62:	e0a9      	b.n	8004eb8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2100      	movs	r1, #0
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f001 fa5e 	bl	800622c <SDIO_GetResponse>
 8004d70:	4602      	mov	r2, r0
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2104      	movs	r1, #4
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f001 fa55 	bl	800622c <SDIO_GetResponse>
 8004d82:	4602      	mov	r2, r0
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2108      	movs	r1, #8
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f001 fa4c 	bl	800622c <SDIO_GetResponse>
 8004d94:	4602      	mov	r2, r0
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	210c      	movs	r1, #12
 8004da0:	4618      	mov	r0, r3
 8004da2:	f001 fa43 	bl	800622c <SDIO_GetResponse>
 8004da6:	4602      	mov	r2, r0
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d00d      	beq.n	8004dd2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f107 020e 	add.w	r2, r7, #14
 8004dbe:	4611      	mov	r1, r2
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f001 fc21 	bl	8006608 <SDMMC_CmdSetRelAdd>
 8004dc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004dc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d001      	beq.n	8004dd2 <SD_InitCard+0xae>
    {
      return errorstate;
 8004dce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dd0:	e072      	b.n	8004eb8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dd6:	2b03      	cmp	r3, #3
 8004dd8:	d036      	beq.n	8004e48 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004dda:	89fb      	ldrh	r3, [r7, #14]
 8004ddc:	461a      	mov	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004dea:	041b      	lsls	r3, r3, #16
 8004dec:	4619      	mov	r1, r3
 8004dee:	4610      	mov	r0, r2
 8004df0:	f001 fbeb 	bl	80065ca <SDMMC_CmdSendCSD>
 8004df4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004df6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dfe:	e05b      	b.n	8004eb8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2100      	movs	r1, #0
 8004e06:	4618      	mov	r0, r3
 8004e08:	f001 fa10 	bl	800622c <SDIO_GetResponse>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2104      	movs	r1, #4
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f001 fa07 	bl	800622c <SDIO_GetResponse>
 8004e1e:	4602      	mov	r2, r0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2108      	movs	r1, #8
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f001 f9fe 	bl	800622c <SDIO_GetResponse>
 8004e30:	4602      	mov	r2, r0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	210c      	movs	r1, #12
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f001 f9f5 	bl	800622c <SDIO_GetResponse>
 8004e42:	4602      	mov	r2, r0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2104      	movs	r1, #4
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f001 f9ec 	bl	800622c <SDIO_GetResponse>
 8004e54:	4603      	mov	r3, r0
 8004e56:	0d1a      	lsrs	r2, r3, #20
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004e5c:	f107 0310 	add.w	r3, r7, #16
 8004e60:	4619      	mov	r1, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff fcce 	bl	8004804 <HAL_SD_GetCardCSD>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004e6e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004e72:	e021      	b.n	8004eb8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6819      	ldr	r1, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e7c:	041b      	lsls	r3, r3, #16
 8004e7e:	2200      	movs	r2, #0
 8004e80:	461c      	mov	r4, r3
 8004e82:	4615      	mov	r5, r2
 8004e84:	4622      	mov	r2, r4
 8004e86:	462b      	mov	r3, r5
 8004e88:	4608      	mov	r0, r1
 8004e8a:	f001 fadb 	bl	8006444 <SDMMC_CmdSelDesel>
 8004e8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d001      	beq.n	8004e9a <SD_InitCard+0x176>
  {
    return errorstate;
 8004e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e98:	e00e      	b.n	8004eb8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681d      	ldr	r5, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	466c      	mov	r4, sp
 8004ea2:	f103 0210 	add.w	r2, r3, #16
 8004ea6:	ca07      	ldmia	r2, {r0, r1, r2}
 8004ea8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004eac:	3304      	adds	r3, #4
 8004eae:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004eb0:	4628      	mov	r0, r5
 8004eb2:	f001 f93d 	bl	8006130 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3740      	adds	r7, #64	@ 0x40
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bdb0      	pop	{r4, r5, r7, pc}

08004ec0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f001 fad6 	bl	800648a <SDMMC_CmdGoIdleState>
 8004ede:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <SD_PowerON+0x2a>
  {
    return errorstate;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	e072      	b.n	8004fd0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f001 fae9 	bl	80064c6 <SDMMC_CmdOperCond>
 8004ef4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d00d      	beq.n	8004f18 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4618      	mov	r0, r3
 8004f08:	f001 fabf 	bl	800648a <SDMMC_CmdGoIdleState>
 8004f0c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d004      	beq.n	8004f1e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	e05b      	b.n	8004fd0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d137      	bne.n	8004f96 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f001 fae9 	bl	8006504 <SDMMC_CmdAppCommand>
 8004f32:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d02d      	beq.n	8004f96 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f3a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004f3e:	e047      	b.n	8004fd0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2100      	movs	r1, #0
 8004f46:	4618      	mov	r0, r3
 8004f48:	f001 fadc 	bl	8006504 <SDMMC_CmdAppCommand>
 8004f4c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d001      	beq.n	8004f58 <SD_PowerON+0x98>
    {
      return errorstate;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	e03b      	b.n	8004fd0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	491e      	ldr	r1, [pc, #120]	@ (8004fd8 <SD_PowerON+0x118>)
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f001 faf2 	bl	8006548 <SDMMC_CmdAppOperCommand>
 8004f64:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004f6c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8004f70:	e02e      	b.n	8004fd0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2100      	movs	r1, #0
 8004f78:	4618      	mov	r0, r3
 8004f7a:	f001 f957 	bl	800622c <SDIO_GetResponse>
 8004f7e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	0fdb      	lsrs	r3, r3, #31
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <SD_PowerON+0xcc>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e000      	b.n	8004f8e <SD_PowerON+0xce>
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	613b      	str	r3, [r7, #16]

    count++;
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	3301      	adds	r3, #1
 8004f94:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d802      	bhi.n	8004fa6 <SD_PowerON+0xe6>
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d0cc      	beq.n	8004f40 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d902      	bls.n	8004fb6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004fb0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004fb4:	e00c      	b.n	8004fd0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d003      	beq.n	8004fc8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	645a      	str	r2, [r3, #68]	@ 0x44
 8004fc6:	e002      	b.n	8004fce <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004fce:	2300      	movs	r3, #0
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3718      	adds	r7, #24
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}
 8004fd8:	c1100000 	.word	0xc1100000

08004fdc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d102      	bne.n	8004ff2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004fec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004ff0:	e018      	b.n	8005024 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681a      	ldr	r2, [r3, #0]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ffa:	041b      	lsls	r3, r3, #16
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4610      	mov	r0, r2
 8005000:	f001 fb23 	bl	800664a <SDMMC_CmdSendStatus>
 8005004:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d001      	beq.n	8005010 <SD_SendStatus+0x34>
  {
    return errorstate;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	e009      	b.n	8005024 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	2100      	movs	r1, #0
 8005016:	4618      	mov	r0, r3
 8005018:	f001 f908 	bl	800622c <SDIO_GetResponse>
 800501c:	4602      	mov	r2, r0
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3710      	adds	r7, #16
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b082      	sub	sp, #8
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d101      	bne.n	800503e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e041      	b.n	80050c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b00      	cmp	r3, #0
 8005048:	d106      	bne.n	8005058 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2200      	movs	r2, #0
 800504e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f7fc fb04 	bl	8001660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2202      	movs	r2, #2
 800505c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	3304      	adds	r3, #4
 8005068:	4619      	mov	r1, r3
 800506a:	4610      	mov	r0, r2
 800506c:	f000 fa7e 	bl	800556c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2201      	movs	r2, #1
 80050ac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2201      	movs	r2, #1
 80050b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d001      	beq.n	80050e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e04e      	b.n	8005182 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68da      	ldr	r2, [r3, #12]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a23      	ldr	r2, [pc, #140]	@ (8005190 <HAL_TIM_Base_Start_IT+0xc4>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d022      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800510e:	d01d      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1f      	ldr	r2, [pc, #124]	@ (8005194 <HAL_TIM_Base_Start_IT+0xc8>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d018      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1e      	ldr	r2, [pc, #120]	@ (8005198 <HAL_TIM_Base_Start_IT+0xcc>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d013      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a1c      	ldr	r2, [pc, #112]	@ (800519c <HAL_TIM_Base_Start_IT+0xd0>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d00e      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a1b      	ldr	r2, [pc, #108]	@ (80051a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d009      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a19      	ldr	r2, [pc, #100]	@ (80051a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d004      	beq.n	800514c <HAL_TIM_Base_Start_IT+0x80>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a18      	ldr	r2, [pc, #96]	@ (80051a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d111      	bne.n	8005170 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 0307 	and.w	r3, r3, #7
 8005156:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2b06      	cmp	r3, #6
 800515c:	d010      	beq.n	8005180 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0201 	orr.w	r2, r2, #1
 800516c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516e:	e007      	b.n	8005180 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f042 0201 	orr.w	r2, r2, #1
 800517e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005180:	2300      	movs	r3, #0
}
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40010000 	.word	0x40010000
 8005194:	40000400 	.word	0x40000400
 8005198:	40000800 	.word	0x40000800
 800519c:	40000c00 	.word	0x40000c00
 80051a0:	40010400 	.word	0x40010400
 80051a4:	40014000 	.word	0x40014000
 80051a8:	40001800 	.word	0x40001800

080051ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68db      	ldr	r3, [r3, #12]
 80051ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 0302 	and.w	r3, r3, #2
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d020      	beq.n	8005210 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01b      	beq.n	8005210 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0202 	mvn.w	r2, #2
 80051e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f999 	bl	800552e <HAL_TIM_IC_CaptureCallback>
 80051fc:	e005      	b.n	800520a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f98b 	bl	800551a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f99c 	bl	8005542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f003 0304 	and.w	r3, r3, #4
 8005216:	2b00      	cmp	r3, #0
 8005218:	d020      	beq.n	800525c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f003 0304 	and.w	r3, r3, #4
 8005220:	2b00      	cmp	r3, #0
 8005222:	d01b      	beq.n	800525c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0204 	mvn.w	r2, #4
 800522c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2202      	movs	r2, #2
 8005232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	699b      	ldr	r3, [r3, #24]
 800523a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f973 	bl	800552e <HAL_TIM_IC_CaptureCallback>
 8005248:	e005      	b.n	8005256 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f965 	bl	800551a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f976 	bl	8005542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d020      	beq.n	80052a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f003 0308 	and.w	r3, r3, #8
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01b      	beq.n	80052a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0208 	mvn.w	r2, #8
 8005278:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2204      	movs	r2, #4
 800527e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f94d 	bl	800552e <HAL_TIM_IC_CaptureCallback>
 8005294:	e005      	b.n	80052a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f93f 	bl	800551a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f950 	bl	8005542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f003 0310 	and.w	r3, r3, #16
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d020      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f003 0310 	and.w	r3, r3, #16
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d01b      	beq.n	80052f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f06f 0210 	mvn.w	r2, #16
 80052c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2208      	movs	r2, #8
 80052ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d003      	beq.n	80052e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f927 	bl	800552e <HAL_TIM_IC_CaptureCallback>
 80052e0:	e005      	b.n	80052ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f919 	bl	800551a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 f92a 	bl	8005542 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00c      	beq.n	8005318 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f003 0301 	and.w	r3, r3, #1
 8005304:	2b00      	cmp	r3, #0
 8005306:	d007      	beq.n	8005318 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f06f 0201 	mvn.w	r2, #1
 8005310:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005312:	6878      	ldr	r0, [r7, #4]
 8005314:	f7fc f8c8 	bl	80014a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00c      	beq.n	800533c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005328:	2b00      	cmp	r3, #0
 800532a:	d007      	beq.n	800533c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005334:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 fae4 	bl	8005904 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00c      	beq.n	8005360 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f8fb 	bl	8005556 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	f003 0320 	and.w	r3, r3, #32
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00c      	beq.n	8005384 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 0320 	and.w	r3, r3, #32
 8005370:	2b00      	cmp	r3, #0
 8005372:	d007      	beq.n	8005384 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f06f 0220 	mvn.w	r2, #32
 800537c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fab6 	bl	80058f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005384:	bf00      	nop
 8005386:	3710      	adds	r7, #16
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}

0800538c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_TIM_ConfigClockSource+0x1c>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e0b4      	b.n	8005512 <HAL_TIM_ConfigClockSource+0x186>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2202      	movs	r2, #2
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80053c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80053ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e0:	d03e      	beq.n	8005460 <HAL_TIM_ConfigClockSource+0xd4>
 80053e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053e6:	f200 8087 	bhi.w	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
 80053ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ee:	f000 8086 	beq.w	80054fe <HAL_TIM_ConfigClockSource+0x172>
 80053f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053f6:	d87f      	bhi.n	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
 80053f8:	2b70      	cmp	r3, #112	@ 0x70
 80053fa:	d01a      	beq.n	8005432 <HAL_TIM_ConfigClockSource+0xa6>
 80053fc:	2b70      	cmp	r3, #112	@ 0x70
 80053fe:	d87b      	bhi.n	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005400:	2b60      	cmp	r3, #96	@ 0x60
 8005402:	d050      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0x11a>
 8005404:	2b60      	cmp	r3, #96	@ 0x60
 8005406:	d877      	bhi.n	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005408:	2b50      	cmp	r3, #80	@ 0x50
 800540a:	d03c      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0xfa>
 800540c:	2b50      	cmp	r3, #80	@ 0x50
 800540e:	d873      	bhi.n	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005410:	2b40      	cmp	r3, #64	@ 0x40
 8005412:	d058      	beq.n	80054c6 <HAL_TIM_ConfigClockSource+0x13a>
 8005414:	2b40      	cmp	r3, #64	@ 0x40
 8005416:	d86f      	bhi.n	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005418:	2b30      	cmp	r3, #48	@ 0x30
 800541a:	d064      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0x15a>
 800541c:	2b30      	cmp	r3, #48	@ 0x30
 800541e:	d86b      	bhi.n	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005420:	2b20      	cmp	r3, #32
 8005422:	d060      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005424:	2b20      	cmp	r3, #32
 8005426:	d867      	bhi.n	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
 8005428:	2b00      	cmp	r3, #0
 800542a:	d05c      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0x15a>
 800542c:	2b10      	cmp	r3, #16
 800542e:	d05a      	beq.n	80054e6 <HAL_TIM_ConfigClockSource+0x15a>
 8005430:	e062      	b.n	80054f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005442:	f000 f9b9 	bl	80057b8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005454:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68ba      	ldr	r2, [r7, #8]
 800545c:	609a      	str	r2, [r3, #8]
      break;
 800545e:	e04f      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005470:	f000 f9a2 	bl	80057b8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005482:	609a      	str	r2, [r3, #8]
      break;
 8005484:	e03c      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005492:	461a      	mov	r2, r3
 8005494:	f000 f916 	bl	80056c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2150      	movs	r1, #80	@ 0x50
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 f96f 	bl	8005782 <TIM_ITRx_SetConfig>
      break;
 80054a4:	e02c      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054b2:	461a      	mov	r2, r3
 80054b4:	f000 f935 	bl	8005722 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2160      	movs	r1, #96	@ 0x60
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 f95f 	bl	8005782 <TIM_ITRx_SetConfig>
      break;
 80054c4:	e01c      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80054ce:	683b      	ldr	r3, [r7, #0]
 80054d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054d2:	461a      	mov	r2, r3
 80054d4:	f000 f8f6 	bl	80056c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	2140      	movs	r1, #64	@ 0x40
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 f94f 	bl	8005782 <TIM_ITRx_SetConfig>
      break;
 80054e4:	e00c      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4619      	mov	r1, r3
 80054f0:	4610      	mov	r0, r2
 80054f2:	f000 f946 	bl	8005782 <TIM_ITRx_SetConfig>
      break;
 80054f6:	e003      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054f8:	2301      	movs	r3, #1
 80054fa:	73fb      	strb	r3, [r7, #15]
      break;
 80054fc:	e000      	b.n	8005500 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005510:	7bfb      	ldrb	r3, [r7, #15]
}
 8005512:	4618      	mov	r0, r3
 8005514:	3710      	adds	r7, #16
 8005516:	46bd      	mov	sp, r7
 8005518:	bd80      	pop	{r7, pc}

0800551a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800551a:	b480      	push	{r7}
 800551c:	b083      	sub	sp, #12
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005522:	bf00      	nop
 8005524:	370c      	adds	r7, #12
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr

0800552e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800552e:	b480      	push	{r7}
 8005530:	b083      	sub	sp, #12
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005536:	bf00      	nop
 8005538:	370c      	adds	r7, #12
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005542:	b480      	push	{r7}
 8005544:	b083      	sub	sp, #12
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800554a:	bf00      	nop
 800554c:	370c      	adds	r7, #12
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr

08005556 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005556:	b480      	push	{r7}
 8005558:	b083      	sub	sp, #12
 800555a:	af00      	add	r7, sp, #0
 800555c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr
	...

0800556c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800556c:	b480      	push	{r7}
 800556e:	b085      	sub	sp, #20
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	4a46      	ldr	r2, [pc, #280]	@ (8005698 <TIM_Base_SetConfig+0x12c>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d013      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800558a:	d00f      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a43      	ldr	r2, [pc, #268]	@ (800569c <TIM_Base_SetConfig+0x130>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d00b      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	4a42      	ldr	r2, [pc, #264]	@ (80056a0 <TIM_Base_SetConfig+0x134>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d007      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	4a41      	ldr	r2, [pc, #260]	@ (80056a4 <TIM_Base_SetConfig+0x138>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d003      	beq.n	80055ac <TIM_Base_SetConfig+0x40>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a40      	ldr	r2, [pc, #256]	@ (80056a8 <TIM_Base_SetConfig+0x13c>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d108      	bne.n	80055be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	68fa      	ldr	r2, [r7, #12]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a35      	ldr	r2, [pc, #212]	@ (8005698 <TIM_Base_SetConfig+0x12c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d02b      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80055cc:	d027      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a32      	ldr	r2, [pc, #200]	@ (800569c <TIM_Base_SetConfig+0x130>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d023      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a31      	ldr	r2, [pc, #196]	@ (80056a0 <TIM_Base_SetConfig+0x134>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d01f      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a30      	ldr	r2, [pc, #192]	@ (80056a4 <TIM_Base_SetConfig+0x138>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d01b      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a2f      	ldr	r2, [pc, #188]	@ (80056a8 <TIM_Base_SetConfig+0x13c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d017      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a2e      	ldr	r2, [pc, #184]	@ (80056ac <TIM_Base_SetConfig+0x140>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d013      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a2d      	ldr	r2, [pc, #180]	@ (80056b0 <TIM_Base_SetConfig+0x144>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00f      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a2c      	ldr	r2, [pc, #176]	@ (80056b4 <TIM_Base_SetConfig+0x148>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00b      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a2b      	ldr	r2, [pc, #172]	@ (80056b8 <TIM_Base_SetConfig+0x14c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d007      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a2a      	ldr	r2, [pc, #168]	@ (80056bc <TIM_Base_SetConfig+0x150>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d003      	beq.n	800561e <TIM_Base_SetConfig+0xb2>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a29      	ldr	r2, [pc, #164]	@ (80056c0 <TIM_Base_SetConfig+0x154>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d108      	bne.n	8005630 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005624:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	4313      	orrs	r3, r2
 800562e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	695b      	ldr	r3, [r3, #20]
 800563a:	4313      	orrs	r3, r2
 800563c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68fa      	ldr	r2, [r7, #12]
 8005642:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	689a      	ldr	r2, [r3, #8]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a10      	ldr	r2, [pc, #64]	@ (8005698 <TIM_Base_SetConfig+0x12c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d003      	beq.n	8005664 <TIM_Base_SetConfig+0xf8>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	4a12      	ldr	r2, [pc, #72]	@ (80056a8 <TIM_Base_SetConfig+0x13c>)
 8005660:	4293      	cmp	r3, r2
 8005662:	d103      	bne.n	800566c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b01      	cmp	r3, #1
 800567c:	d105      	bne.n	800568a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	691b      	ldr	r3, [r3, #16]
 8005682:	f023 0201 	bic.w	r2, r3, #1
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	611a      	str	r2, [r3, #16]
  }
}
 800568a:	bf00      	nop
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	40010000 	.word	0x40010000
 800569c:	40000400 	.word	0x40000400
 80056a0:	40000800 	.word	0x40000800
 80056a4:	40000c00 	.word	0x40000c00
 80056a8:	40010400 	.word	0x40010400
 80056ac:	40014000 	.word	0x40014000
 80056b0:	40014400 	.word	0x40014400
 80056b4:	40014800 	.word	0x40014800
 80056b8:	40001800 	.word	0x40001800
 80056bc:	40001c00 	.word	0x40001c00
 80056c0:	40002000 	.word	0x40002000

080056c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b087      	sub	sp, #28
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6a1b      	ldr	r3, [r3, #32]
 80056d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	f023 0201 	bic.w	r2, r3, #1
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	011b      	lsls	r3, r3, #4
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80056fa:	697b      	ldr	r3, [r7, #20]
 80056fc:	f023 030a 	bic.w	r3, r3, #10
 8005700:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4313      	orrs	r3, r2
 8005708:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	697a      	ldr	r2, [r7, #20]
 8005714:	621a      	str	r2, [r3, #32]
}
 8005716:	bf00      	nop
 8005718:	371c      	adds	r7, #28
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005722:	b480      	push	{r7}
 8005724:	b087      	sub	sp, #28
 8005726:	af00      	add	r7, sp, #0
 8005728:	60f8      	str	r0, [r7, #12]
 800572a:	60b9      	str	r1, [r7, #8]
 800572c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6a1b      	ldr	r3, [r3, #32]
 8005732:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	f023 0210 	bic.w	r2, r3, #16
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800574c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	031b      	lsls	r3, r3, #12
 8005752:	693a      	ldr	r2, [r7, #16]
 8005754:	4313      	orrs	r3, r2
 8005756:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800575e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	011b      	lsls	r3, r3, #4
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	4313      	orrs	r3, r2
 8005768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	621a      	str	r2, [r3, #32]
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr

08005782 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005782:	b480      	push	{r7}
 8005784:	b085      	sub	sp, #20
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
 800578a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005798:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800579a:	683a      	ldr	r2, [r7, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	4313      	orrs	r3, r2
 80057a0:	f043 0307 	orr.w	r3, r3, #7
 80057a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	609a      	str	r2, [r3, #8]
}
 80057ac:	bf00      	nop
 80057ae:	3714      	adds	r7, #20
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr

080057b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b087      	sub	sp, #28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	689b      	ldr	r3, [r3, #8]
 80057ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80057d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	021a      	lsls	r2, r3, #8
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	431a      	orrs	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	4313      	orrs	r3, r2
 80057e0:	697a      	ldr	r2, [r7, #20]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	609a      	str	r2, [r3, #8]
}
 80057ec:	bf00      	nop
 80057ee:	371c      	adds	r7, #28
 80057f0:	46bd      	mov	sp, r7
 80057f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f6:	4770      	bx	lr

080057f8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005808:	2b01      	cmp	r3, #1
 800580a:	d101      	bne.n	8005810 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800580c:	2302      	movs	r3, #2
 800580e:	e05a      	b.n	80058c6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2201      	movs	r2, #1
 8005814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005836:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a21      	ldr	r2, [pc, #132]	@ (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d022      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800585c:	d01d      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a1d      	ldr	r2, [pc, #116]	@ (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d018      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a1b      	ldr	r2, [pc, #108]	@ (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d013      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a1a      	ldr	r2, [pc, #104]	@ (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00e      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a18      	ldr	r2, [pc, #96]	@ (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d009      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a17      	ldr	r2, [pc, #92]	@ (80058e8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d004      	beq.n	800589a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a15      	ldr	r2, [pc, #84]	@ (80058ec <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d10c      	bne.n	80058b4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	685b      	ldr	r3, [r3, #4]
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68ba      	ldr	r2, [r7, #8]
 80058b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3714      	adds	r7, #20
 80058ca:	46bd      	mov	sp, r7
 80058cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d0:	4770      	bx	lr
 80058d2:	bf00      	nop
 80058d4:	40010000 	.word	0x40010000
 80058d8:	40000400 	.word	0x40000400
 80058dc:	40000800 	.word	0x40000800
 80058e0:	40000c00 	.word	0x40000c00
 80058e4:	40010400 	.word	0x40010400
 80058e8:	40014000 	.word	0x40014000
 80058ec:	40001800 	.word	0x40001800

080058f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d101      	bne.n	800592a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e042      	b.n	80059b0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b00      	cmp	r3, #0
 8005934:	d106      	bne.n	8005944 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7fb feb6 	bl	80016b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2224      	movs	r2, #36	@ 0x24
 8005948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68da      	ldr	r2, [r3, #12]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800595a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f973 	bl	8005c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005970:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695a      	ldr	r2, [r3, #20]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005980:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68da      	ldr	r2, [r3, #12]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005990:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80059ae:	2300      	movs	r3, #0
}
 80059b0:	4618      	mov	r0, r3
 80059b2:	3708      	adds	r7, #8
 80059b4:	46bd      	mov	sp, r7
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b08a      	sub	sp, #40	@ 0x28
 80059bc:	af02      	add	r7, sp, #8
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	60b9      	str	r1, [r7, #8]
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	4613      	mov	r3, r2
 80059c6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059c8:	2300      	movs	r3, #0
 80059ca:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b20      	cmp	r3, #32
 80059d6:	d175      	bne.n	8005ac4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <HAL_UART_Transmit+0x2c>
 80059de:	88fb      	ldrh	r3, [r7, #6]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d101      	bne.n	80059e8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e06e      	b.n	8005ac6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2221      	movs	r2, #33	@ 0x21
 80059f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059f6:	f7fc f9ad 	bl	8001d54 <HAL_GetTick>
 80059fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	88fa      	ldrh	r2, [r7, #6]
 8005a00:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	88fa      	ldrh	r2, [r7, #6]
 8005a06:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a10:	d108      	bne.n	8005a24 <HAL_UART_Transmit+0x6c>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d104      	bne.n	8005a24 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	61bb      	str	r3, [r7, #24]
 8005a22:	e003      	b.n	8005a2c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a2c:	e02e      	b.n	8005a8c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	9300      	str	r3, [sp, #0]
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2200      	movs	r2, #0
 8005a36:	2180      	movs	r1, #128	@ 0x80
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f000 f848 	bl	8005ace <UART_WaitOnFlagUntilTimeout>
 8005a3e:	4603      	mov	r3, r0
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d005      	beq.n	8005a50 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2220      	movs	r2, #32
 8005a48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e03a      	b.n	8005ac6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d10b      	bne.n	8005a6e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a56:	69bb      	ldr	r3, [r7, #24]
 8005a58:	881b      	ldrh	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a64:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	3302      	adds	r3, #2
 8005a6a:	61bb      	str	r3, [r7, #24]
 8005a6c:	e007      	b.n	8005a7e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	781a      	ldrb	r2, [r3, #0]
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	3301      	adds	r3, #1
 8005a7c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a82:	b29b      	uxth	r3, r3
 8005a84:	3b01      	subs	r3, #1
 8005a86:	b29a      	uxth	r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a90:	b29b      	uxth	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1cb      	bne.n	8005a2e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	9300      	str	r3, [sp, #0]
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	2140      	movs	r1, #64	@ 0x40
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 f814 	bl	8005ace <UART_WaitOnFlagUntilTimeout>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d005      	beq.n	8005ab8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2220      	movs	r2, #32
 8005ab0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e006      	b.n	8005ac6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	e000      	b.n	8005ac6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005ac4:	2302      	movs	r3, #2
  }
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}

08005ace <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ace:	b580      	push	{r7, lr}
 8005ad0:	b086      	sub	sp, #24
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	603b      	str	r3, [r7, #0]
 8005ada:	4613      	mov	r3, r2
 8005adc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ade:	e03b      	b.n	8005b58 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ae6:	d037      	beq.n	8005b58 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ae8:	f7fc f934 	bl	8001d54 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	6a3a      	ldr	r2, [r7, #32]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d302      	bcc.n	8005afe <UART_WaitOnFlagUntilTimeout+0x30>
 8005af8:	6a3b      	ldr	r3, [r7, #32]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d101      	bne.n	8005b02 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e03a      	b.n	8005b78 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d023      	beq.n	8005b58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b80      	cmp	r3, #128	@ 0x80
 8005b14:	d020      	beq.n	8005b58 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b40      	cmp	r3, #64	@ 0x40
 8005b1a:	d01d      	beq.n	8005b58 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0308 	and.w	r3, r3, #8
 8005b26:	2b08      	cmp	r3, #8
 8005b28:	d116      	bne.n	8005b58 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	617b      	str	r3, [r7, #20]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	617b      	str	r3, [r7, #20]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	617b      	str	r3, [r7, #20]
 8005b3e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f000 f81d 	bl	8005b80 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2208      	movs	r2, #8
 8005b4a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e00f      	b.n	8005b78 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	4013      	ands	r3, r2
 8005b62:	68ba      	ldr	r2, [r7, #8]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	bf0c      	ite	eq
 8005b68:	2301      	moveq	r3, #1
 8005b6a:	2300      	movne	r3, #0
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	461a      	mov	r2, r3
 8005b70:	79fb      	ldrb	r3, [r7, #7]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d0b4      	beq.n	8005ae0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3718      	adds	r7, #24
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b095      	sub	sp, #84	@ 0x54
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	330c      	adds	r3, #12
 8005b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b92:	e853 3f00 	ldrex	r3, [r3]
 8005b96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	330c      	adds	r3, #12
 8005ba6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005ba8:	643a      	str	r2, [r7, #64]	@ 0x40
 8005baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bb0:	e841 2300 	strex	r3, r2, [r1]
 8005bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d1e5      	bne.n	8005b88 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3314      	adds	r3, #20
 8005bc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc4:	6a3b      	ldr	r3, [r7, #32]
 8005bc6:	e853 3f00 	ldrex	r3, [r3]
 8005bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	f023 0301 	bic.w	r3, r3, #1
 8005bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	3314      	adds	r3, #20
 8005bda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005be4:	e841 2300 	strex	r3, r2, [r1]
 8005be8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d1e5      	bne.n	8005bbc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d119      	bne.n	8005c2c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	330c      	adds	r3, #12
 8005bfe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	e853 3f00 	ldrex	r3, [r3]
 8005c06:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	f023 0310 	bic.w	r3, r3, #16
 8005c0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	330c      	adds	r3, #12
 8005c16:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c18:	61ba      	str	r2, [r7, #24]
 8005c1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	6979      	ldr	r1, [r7, #20]
 8005c1e:	69ba      	ldr	r2, [r7, #24]
 8005c20:	e841 2300 	strex	r3, r2, [r1]
 8005c24:	613b      	str	r3, [r7, #16]
   return(result);
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e5      	bne.n	8005bf8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2220      	movs	r2, #32
 8005c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c3a:	bf00      	nop
 8005c3c:	3754      	adds	r7, #84	@ 0x54
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
	...

08005c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c4c:	b0c0      	sub	sp, #256	@ 0x100
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	691b      	ldr	r3, [r3, #16]
 8005c5c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c64:	68d9      	ldr	r1, [r3, #12]
 8005c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	ea40 0301 	orr.w	r3, r0, r1
 8005c70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	431a      	orrs	r2, r3
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	431a      	orrs	r2, r3
 8005c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c8c:	69db      	ldr	r3, [r3, #28]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ca0:	f021 010c 	bic.w	r1, r1, #12
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc2:	6999      	ldr	r1, [r3, #24]
 8005cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	ea40 0301 	orr.w	r3, r0, r1
 8005cce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd4:	681a      	ldr	r2, [r3, #0]
 8005cd6:	4b8f      	ldr	r3, [pc, #572]	@ (8005f14 <UART_SetConfig+0x2cc>)
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d005      	beq.n	8005ce8 <UART_SetConfig+0xa0>
 8005cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	4b8d      	ldr	r3, [pc, #564]	@ (8005f18 <UART_SetConfig+0x2d0>)
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d104      	bne.n	8005cf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ce8:	f7fe fa30 	bl	800414c <HAL_RCC_GetPCLK2Freq>
 8005cec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005cf0:	e003      	b.n	8005cfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cf2:	f7fe fa17 	bl	8004124 <HAL_RCC_GetPCLK1Freq>
 8005cf6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d04:	f040 810c 	bne.w	8005f20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d12:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005d16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	462b      	mov	r3, r5
 8005d1e:	1891      	adds	r1, r2, r2
 8005d20:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d22:	415b      	adcs	r3, r3
 8005d24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	eb12 0801 	adds.w	r8, r2, r1
 8005d30:	4629      	mov	r1, r5
 8005d32:	eb43 0901 	adc.w	r9, r3, r1
 8005d36:	f04f 0200 	mov.w	r2, #0
 8005d3a:	f04f 0300 	mov.w	r3, #0
 8005d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d4a:	4690      	mov	r8, r2
 8005d4c:	4699      	mov	r9, r3
 8005d4e:	4623      	mov	r3, r4
 8005d50:	eb18 0303 	adds.w	r3, r8, r3
 8005d54:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d58:	462b      	mov	r3, r5
 8005d5a:	eb49 0303 	adc.w	r3, r9, r3
 8005d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d6e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d76:	460b      	mov	r3, r1
 8005d78:	18db      	adds	r3, r3, r3
 8005d7a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	eb42 0303 	adc.w	r3, r2, r3
 8005d82:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d8c:	f7fa ff7c 	bl	8000c88 <__aeabi_uldivmod>
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	4b61      	ldr	r3, [pc, #388]	@ (8005f1c <UART_SetConfig+0x2d4>)
 8005d96:	fba3 2302 	umull	r2, r3, r3, r2
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	011c      	lsls	r4, r3, #4
 8005d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005da2:	2200      	movs	r2, #0
 8005da4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005da8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005dac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005db0:	4642      	mov	r2, r8
 8005db2:	464b      	mov	r3, r9
 8005db4:	1891      	adds	r1, r2, r2
 8005db6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005db8:	415b      	adcs	r3, r3
 8005dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005dc0:	4641      	mov	r1, r8
 8005dc2:	eb12 0a01 	adds.w	sl, r2, r1
 8005dc6:	4649      	mov	r1, r9
 8005dc8:	eb43 0b01 	adc.w	fp, r3, r1
 8005dcc:	f04f 0200 	mov.w	r2, #0
 8005dd0:	f04f 0300 	mov.w	r3, #0
 8005dd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005dd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005de0:	4692      	mov	sl, r2
 8005de2:	469b      	mov	fp, r3
 8005de4:	4643      	mov	r3, r8
 8005de6:	eb1a 0303 	adds.w	r3, sl, r3
 8005dea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dee:	464b      	mov	r3, r9
 8005df0:	eb4b 0303 	adc.w	r3, fp, r3
 8005df4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfc:	685b      	ldr	r3, [r3, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e04:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e0c:	460b      	mov	r3, r1
 8005e0e:	18db      	adds	r3, r3, r3
 8005e10:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e12:	4613      	mov	r3, r2
 8005e14:	eb42 0303 	adc.w	r3, r2, r3
 8005e18:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e22:	f7fa ff31 	bl	8000c88 <__aeabi_uldivmod>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	4b3b      	ldr	r3, [pc, #236]	@ (8005f1c <UART_SetConfig+0x2d4>)
 8005e2e:	fba3 2301 	umull	r2, r3, r3, r1
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	2264      	movs	r2, #100	@ 0x64
 8005e36:	fb02 f303 	mul.w	r3, r2, r3
 8005e3a:	1acb      	subs	r3, r1, r3
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e42:	4b36      	ldr	r3, [pc, #216]	@ (8005f1c <UART_SetConfig+0x2d4>)
 8005e44:	fba3 2302 	umull	r2, r3, r3, r2
 8005e48:	095b      	lsrs	r3, r3, #5
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e50:	441c      	add	r4, r3
 8005e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e56:	2200      	movs	r2, #0
 8005e58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e5c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e64:	4642      	mov	r2, r8
 8005e66:	464b      	mov	r3, r9
 8005e68:	1891      	adds	r1, r2, r2
 8005e6a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e6c:	415b      	adcs	r3, r3
 8005e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e74:	4641      	mov	r1, r8
 8005e76:	1851      	adds	r1, r2, r1
 8005e78:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	414b      	adcs	r3, r1
 8005e7e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e80:	f04f 0200 	mov.w	r2, #0
 8005e84:	f04f 0300 	mov.w	r3, #0
 8005e88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e8c:	4659      	mov	r1, fp
 8005e8e:	00cb      	lsls	r3, r1, #3
 8005e90:	4651      	mov	r1, sl
 8005e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e96:	4651      	mov	r1, sl
 8005e98:	00ca      	lsls	r2, r1, #3
 8005e9a:	4610      	mov	r0, r2
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	4642      	mov	r2, r8
 8005ea2:	189b      	adds	r3, r3, r2
 8005ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ea8:	464b      	mov	r3, r9
 8005eaa:	460a      	mov	r2, r1
 8005eac:	eb42 0303 	adc.w	r3, r2, r3
 8005eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ec0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ec4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ec8:	460b      	mov	r3, r1
 8005eca:	18db      	adds	r3, r3, r3
 8005ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ece:	4613      	mov	r3, r2
 8005ed0:	eb42 0303 	adc.w	r3, r2, r3
 8005ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005eda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ede:	f7fa fed3 	bl	8000c88 <__aeabi_uldivmod>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f1c <UART_SetConfig+0x2d4>)
 8005ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8005eec:	095b      	lsrs	r3, r3, #5
 8005eee:	2164      	movs	r1, #100	@ 0x64
 8005ef0:	fb01 f303 	mul.w	r3, r1, r3
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	3332      	adds	r3, #50	@ 0x32
 8005efa:	4a08      	ldr	r2, [pc, #32]	@ (8005f1c <UART_SetConfig+0x2d4>)
 8005efc:	fba2 2303 	umull	r2, r3, r2, r3
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	f003 0207 	and.w	r2, r3, #7
 8005f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4422      	add	r2, r4
 8005f0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f10:	e106      	b.n	8006120 <UART_SetConfig+0x4d8>
 8005f12:	bf00      	nop
 8005f14:	40011000 	.word	0x40011000
 8005f18:	40011400 	.word	0x40011400
 8005f1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f24:	2200      	movs	r2, #0
 8005f26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f32:	4642      	mov	r2, r8
 8005f34:	464b      	mov	r3, r9
 8005f36:	1891      	adds	r1, r2, r2
 8005f38:	6239      	str	r1, [r7, #32]
 8005f3a:	415b      	adcs	r3, r3
 8005f3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f42:	4641      	mov	r1, r8
 8005f44:	1854      	adds	r4, r2, r1
 8005f46:	4649      	mov	r1, r9
 8005f48:	eb43 0501 	adc.w	r5, r3, r1
 8005f4c:	f04f 0200 	mov.w	r2, #0
 8005f50:	f04f 0300 	mov.w	r3, #0
 8005f54:	00eb      	lsls	r3, r5, #3
 8005f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f5a:	00e2      	lsls	r2, r4, #3
 8005f5c:	4614      	mov	r4, r2
 8005f5e:	461d      	mov	r5, r3
 8005f60:	4643      	mov	r3, r8
 8005f62:	18e3      	adds	r3, r4, r3
 8005f64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f68:	464b      	mov	r3, r9
 8005f6a:	eb45 0303 	adc.w	r3, r5, r3
 8005f6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f82:	f04f 0200 	mov.w	r2, #0
 8005f86:	f04f 0300 	mov.w	r3, #0
 8005f8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f8e:	4629      	mov	r1, r5
 8005f90:	008b      	lsls	r3, r1, #2
 8005f92:	4621      	mov	r1, r4
 8005f94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f98:	4621      	mov	r1, r4
 8005f9a:	008a      	lsls	r2, r1, #2
 8005f9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005fa0:	f7fa fe72 	bl	8000c88 <__aeabi_uldivmod>
 8005fa4:	4602      	mov	r2, r0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4b60      	ldr	r3, [pc, #384]	@ (800612c <UART_SetConfig+0x4e4>)
 8005faa:	fba3 2302 	umull	r2, r3, r3, r2
 8005fae:	095b      	lsrs	r3, r3, #5
 8005fb0:	011c      	lsls	r4, r3, #4
 8005fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fbc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005fc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005fc4:	4642      	mov	r2, r8
 8005fc6:	464b      	mov	r3, r9
 8005fc8:	1891      	adds	r1, r2, r2
 8005fca:	61b9      	str	r1, [r7, #24]
 8005fcc:	415b      	adcs	r3, r3
 8005fce:	61fb      	str	r3, [r7, #28]
 8005fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fd4:	4641      	mov	r1, r8
 8005fd6:	1851      	adds	r1, r2, r1
 8005fd8:	6139      	str	r1, [r7, #16]
 8005fda:	4649      	mov	r1, r9
 8005fdc:	414b      	adcs	r3, r1
 8005fde:	617b      	str	r3, [r7, #20]
 8005fe0:	f04f 0200 	mov.w	r2, #0
 8005fe4:	f04f 0300 	mov.w	r3, #0
 8005fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005fec:	4659      	mov	r1, fp
 8005fee:	00cb      	lsls	r3, r1, #3
 8005ff0:	4651      	mov	r1, sl
 8005ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ff6:	4651      	mov	r1, sl
 8005ff8:	00ca      	lsls	r2, r1, #3
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4603      	mov	r3, r0
 8006000:	4642      	mov	r2, r8
 8006002:	189b      	adds	r3, r3, r2
 8006004:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006008:	464b      	mov	r3, r9
 800600a:	460a      	mov	r2, r1
 800600c:	eb42 0303 	adc.w	r3, r2, r3
 8006010:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800601e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006020:	f04f 0200 	mov.w	r2, #0
 8006024:	f04f 0300 	mov.w	r3, #0
 8006028:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800602c:	4649      	mov	r1, r9
 800602e:	008b      	lsls	r3, r1, #2
 8006030:	4641      	mov	r1, r8
 8006032:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006036:	4641      	mov	r1, r8
 8006038:	008a      	lsls	r2, r1, #2
 800603a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800603e:	f7fa fe23 	bl	8000c88 <__aeabi_uldivmod>
 8006042:	4602      	mov	r2, r0
 8006044:	460b      	mov	r3, r1
 8006046:	4611      	mov	r1, r2
 8006048:	4b38      	ldr	r3, [pc, #224]	@ (800612c <UART_SetConfig+0x4e4>)
 800604a:	fba3 2301 	umull	r2, r3, r3, r1
 800604e:	095b      	lsrs	r3, r3, #5
 8006050:	2264      	movs	r2, #100	@ 0x64
 8006052:	fb02 f303 	mul.w	r3, r2, r3
 8006056:	1acb      	subs	r3, r1, r3
 8006058:	011b      	lsls	r3, r3, #4
 800605a:	3332      	adds	r3, #50	@ 0x32
 800605c:	4a33      	ldr	r2, [pc, #204]	@ (800612c <UART_SetConfig+0x4e4>)
 800605e:	fba2 2303 	umull	r2, r3, r2, r3
 8006062:	095b      	lsrs	r3, r3, #5
 8006064:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006068:	441c      	add	r4, r3
 800606a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800606e:	2200      	movs	r2, #0
 8006070:	673b      	str	r3, [r7, #112]	@ 0x70
 8006072:	677a      	str	r2, [r7, #116]	@ 0x74
 8006074:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006078:	4642      	mov	r2, r8
 800607a:	464b      	mov	r3, r9
 800607c:	1891      	adds	r1, r2, r2
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	415b      	adcs	r3, r3
 8006082:	60fb      	str	r3, [r7, #12]
 8006084:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006088:	4641      	mov	r1, r8
 800608a:	1851      	adds	r1, r2, r1
 800608c:	6039      	str	r1, [r7, #0]
 800608e:	4649      	mov	r1, r9
 8006090:	414b      	adcs	r3, r1
 8006092:	607b      	str	r3, [r7, #4]
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060a0:	4659      	mov	r1, fp
 80060a2:	00cb      	lsls	r3, r1, #3
 80060a4:	4651      	mov	r1, sl
 80060a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060aa:	4651      	mov	r1, sl
 80060ac:	00ca      	lsls	r2, r1, #3
 80060ae:	4610      	mov	r0, r2
 80060b0:	4619      	mov	r1, r3
 80060b2:	4603      	mov	r3, r0
 80060b4:	4642      	mov	r2, r8
 80060b6:	189b      	adds	r3, r3, r2
 80060b8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060ba:	464b      	mov	r3, r9
 80060bc:	460a      	mov	r2, r1
 80060be:	eb42 0303 	adc.w	r3, r2, r3
 80060c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80060ce:	667a      	str	r2, [r7, #100]	@ 0x64
 80060d0:	f04f 0200 	mov.w	r2, #0
 80060d4:	f04f 0300 	mov.w	r3, #0
 80060d8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80060dc:	4649      	mov	r1, r9
 80060de:	008b      	lsls	r3, r1, #2
 80060e0:	4641      	mov	r1, r8
 80060e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060e6:	4641      	mov	r1, r8
 80060e8:	008a      	lsls	r2, r1, #2
 80060ea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80060ee:	f7fa fdcb 	bl	8000c88 <__aeabi_uldivmod>
 80060f2:	4602      	mov	r2, r0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4b0d      	ldr	r3, [pc, #52]	@ (800612c <UART_SetConfig+0x4e4>)
 80060f8:	fba3 1302 	umull	r1, r3, r3, r2
 80060fc:	095b      	lsrs	r3, r3, #5
 80060fe:	2164      	movs	r1, #100	@ 0x64
 8006100:	fb01 f303 	mul.w	r3, r1, r3
 8006104:	1ad3      	subs	r3, r2, r3
 8006106:	011b      	lsls	r3, r3, #4
 8006108:	3332      	adds	r3, #50	@ 0x32
 800610a:	4a08      	ldr	r2, [pc, #32]	@ (800612c <UART_SetConfig+0x4e4>)
 800610c:	fba2 2303 	umull	r2, r3, r2, r3
 8006110:	095b      	lsrs	r3, r3, #5
 8006112:	f003 020f 	and.w	r2, r3, #15
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4422      	add	r2, r4
 800611e:	609a      	str	r2, [r3, #8]
}
 8006120:	bf00      	nop
 8006122:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006126:	46bd      	mov	sp, r7
 8006128:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800612c:	51eb851f 	.word	0x51eb851f

08006130 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006130:	b084      	sub	sp, #16
 8006132:	b480      	push	{r7}
 8006134:	b085      	sub	sp, #20
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	f107 001c 	add.w	r0, r7, #28
 800613e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006142:	2300      	movs	r3, #0
 8006144:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006146:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006148:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800614a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800614c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800614e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8006152:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8006156:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800615a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800615c:	68fa      	ldr	r2, [r7, #12]
 800615e:	4313      	orrs	r3, r2
 8006160:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800616a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	431a      	orrs	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006176:	2300      	movs	r3, #0
}
 8006178:	4618      	mov	r0, r3
 800617a:	3714      	adds	r7, #20
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	b004      	add	sp, #16
 8006184:	4770      	bx	lr

08006186 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006186:	b480      	push	{r7}
 8006188:	b083      	sub	sp, #12
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2203      	movs	r2, #3
 8006192:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006194:	2300      	movs	r3, #0
}
 8006196:	4618      	mov	r0, r3
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f003 0303 	and.w	r3, r3, #3
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	370c      	adds	r7, #12
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr

080061be <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80061be:	b480      	push	{r7}
 80061c0:	b085      	sub	sp, #20
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
 80061c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80061c8:	2300      	movs	r3, #0
 80061ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	681a      	ldr	r2, [r3, #0]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80061dc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80061e2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80061e8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80061ea:	68fa      	ldr	r2, [r7, #12]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80061f8:	f023 030f 	bic.w	r3, r3, #15
 80061fc:	68fa      	ldr	r2, [r7, #12]
 80061fe:	431a      	orrs	r2, r3
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3714      	adds	r7, #20
 800620a:	46bd      	mov	sp, r7
 800620c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006210:	4770      	bx	lr

08006212 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006212:	b480      	push	{r7}
 8006214:	b083      	sub	sp, #12
 8006216:	af00      	add	r7, sp, #0
 8006218:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	b2db      	uxtb	r3, r3
}
 8006220:	4618      	mov	r0, r3
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800622c:	b480      	push	{r7}
 800622e:	b085      	sub	sp, #20
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
 8006234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3314      	adds	r3, #20
 800623a:	461a      	mov	r2, r3
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	4413      	add	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
}  
 8006246:	4618      	mov	r0, r3
 8006248:	3714      	adds	r7, #20
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006252:	b480      	push	{r7}
 8006254:	b085      	sub	sp, #20
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
 800625a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800625c:	2300      	movs	r3, #0
 800625e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685a      	ldr	r2, [r3, #4]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006278:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800627e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006284:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	4313      	orrs	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006290:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	431a      	orrs	r2, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800629c:	2300      	movs	r3, #0

}
 800629e:	4618      	mov	r0, r3
 80062a0:	3714      	adds	r7, #20
 80062a2:	46bd      	mov	sp, r7
 80062a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a8:	4770      	bx	lr

080062aa <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80062aa:	b580      	push	{r7, lr}
 80062ac:	b088      	sub	sp, #32
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	6078      	str	r0, [r7, #4]
 80062b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80062b8:	2310      	movs	r3, #16
 80062ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062bc:	2340      	movs	r3, #64	@ 0x40
 80062be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062c0:	2300      	movs	r3, #0
 80062c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80062c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062ca:	f107 0308 	add.w	r3, r7, #8
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f7ff ff74 	bl	80061be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80062d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062da:	2110      	movs	r1, #16
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f9d7 	bl	8006690 <SDMMC_GetCmdResp1>
 80062e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80062e4:	69fb      	ldr	r3, [r7, #28]
}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3720      	adds	r7, #32
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b088      	sub	sp, #32
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80062fc:	2311      	movs	r3, #17
 80062fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006300:	2340      	movs	r3, #64	@ 0x40
 8006302:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006304:	2300      	movs	r3, #0
 8006306:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006308:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800630c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800630e:	f107 0308 	add.w	r3, r7, #8
 8006312:	4619      	mov	r1, r3
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f7ff ff52 	bl	80061be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800631a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800631e:	2111      	movs	r1, #17
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f9b5 	bl	8006690 <SDMMC_GetCmdResp1>
 8006326:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006328:	69fb      	ldr	r3, [r7, #28]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3720      	adds	r7, #32
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b088      	sub	sp, #32
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
 800633a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006340:	2312      	movs	r3, #18
 8006342:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006344:	2340      	movs	r3, #64	@ 0x40
 8006346:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006348:	2300      	movs	r3, #0
 800634a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800634c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006350:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006352:	f107 0308 	add.w	r3, r7, #8
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f7ff ff30 	bl	80061be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800635e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006362:	2112      	movs	r1, #18
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 f993 	bl	8006690 <SDMMC_GetCmdResp1>
 800636a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800636c:	69fb      	ldr	r3, [r7, #28]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3720      	adds	r7, #32
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006376:	b580      	push	{r7, lr}
 8006378:	b088      	sub	sp, #32
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006384:	2318      	movs	r3, #24
 8006386:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006388:	2340      	movs	r3, #64	@ 0x40
 800638a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800638c:	2300      	movs	r3, #0
 800638e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006390:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006394:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006396:	f107 0308 	add.w	r3, r7, #8
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7ff ff0e 	bl	80061be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80063a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063a6:	2118      	movs	r1, #24
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f971 	bl	8006690 <SDMMC_GetCmdResp1>
 80063ae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063b0:	69fb      	ldr	r3, [r7, #28]
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3720      	adds	r7, #32
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b088      	sub	sp, #32
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
 80063c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80063c8:	2319      	movs	r3, #25
 80063ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063cc:	2340      	movs	r3, #64	@ 0x40
 80063ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063d0:	2300      	movs	r3, #0
 80063d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063da:	f107 0308 	add.w	r3, r7, #8
 80063de:	4619      	mov	r1, r3
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7ff feec 	bl	80061be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80063e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ea:	2119      	movs	r1, #25
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 f94f 	bl	8006690 <SDMMC_GetCmdResp1>
 80063f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063f4:	69fb      	ldr	r3, [r7, #28]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3720      	adds	r7, #32
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
	...

08006400 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b088      	sub	sp, #32
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006408:	2300      	movs	r3, #0
 800640a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800640c:	230c      	movs	r3, #12
 800640e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006410:	2340      	movs	r3, #64	@ 0x40
 8006412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006414:	2300      	movs	r3, #0
 8006416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006418:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800641c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800641e:	f107 0308 	add.w	r3, r7, #8
 8006422:	4619      	mov	r1, r3
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f7ff feca 	bl	80061be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800642a:	4a05      	ldr	r2, [pc, #20]	@ (8006440 <SDMMC_CmdStopTransfer+0x40>)
 800642c:	210c      	movs	r1, #12
 800642e:	6878      	ldr	r0, [r7, #4]
 8006430:	f000 f92e 	bl	8006690 <SDMMC_GetCmdResp1>
 8006434:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006436:	69fb      	ldr	r3, [r7, #28]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3720      	adds	r7, #32
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}
 8006440:	05f5e100 	.word	0x05f5e100

08006444 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08a      	sub	sp, #40	@ 0x28
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006454:	2307      	movs	r3, #7
 8006456:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006458:	2340      	movs	r3, #64	@ 0x40
 800645a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800645c:	2300      	movs	r3, #0
 800645e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006460:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006464:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006466:	f107 0310 	add.w	r3, r7, #16
 800646a:	4619      	mov	r1, r3
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f7ff fea6 	bl	80061be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006472:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006476:	2107      	movs	r1, #7
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f000 f909 	bl	8006690 <SDMMC_GetCmdResp1>
 800647e:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8006480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006482:	4618      	mov	r0, r3
 8006484:	3728      	adds	r7, #40	@ 0x28
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}

0800648a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800648a:	b580      	push	{r7, lr}
 800648c:	b088      	sub	sp, #32
 800648e:	af00      	add	r7, sp, #0
 8006490:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006492:	2300      	movs	r3, #0
 8006494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006496:	2300      	movs	r3, #0
 8006498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800649a:	2300      	movs	r3, #0
 800649c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800649e:	2300      	movs	r3, #0
 80064a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064a8:	f107 0308 	add.w	r3, r7, #8
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f7ff fe85 	bl	80061be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fb23 	bl	8006b00 <SDMMC_GetCmdError>
 80064ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064bc:	69fb      	ldr	r3, [r7, #28]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3720      	adds	r7, #32
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b088      	sub	sp, #32
 80064ca:	af00      	add	r7, sp, #0
 80064cc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80064ce:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 80064d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80064d4:	2308      	movs	r3, #8
 80064d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80064d8:	2340      	movs	r3, #64	@ 0x40
 80064da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064dc:	2300      	movs	r3, #0
 80064de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064e4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064e6:	f107 0308 	add.w	r3, r7, #8
 80064ea:	4619      	mov	r1, r3
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f7ff fe66 	bl	80061be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fab6 	bl	8006a64 <SDMMC_GetCmdResp7>
 80064f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064fa:	69fb      	ldr	r3, [r7, #28]
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3720      	adds	r7, #32
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b088      	sub	sp, #32
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006512:	2337      	movs	r3, #55	@ 0x37
 8006514:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006516:	2340      	movs	r3, #64	@ 0x40
 8006518:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800651a:	2300      	movs	r3, #0
 800651c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800651e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006522:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006524:	f107 0308 	add.w	r3, r7, #8
 8006528:	4619      	mov	r1, r3
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff fe47 	bl	80061be <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006530:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006534:	2137      	movs	r1, #55	@ 0x37
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f8aa 	bl	8006690 <SDMMC_GetCmdResp1>
 800653c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800653e:	69fb      	ldr	r3, [r7, #28]
}
 8006540:	4618      	mov	r0, r3
 8006542:	3720      	adds	r7, #32
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b088      	sub	sp, #32
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006558:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800655c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800655e:	2329      	movs	r3, #41	@ 0x29
 8006560:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006562:	2340      	movs	r3, #64	@ 0x40
 8006564:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006566:	2300      	movs	r3, #0
 8006568:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800656a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800656e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006570:	f107 0308 	add.w	r3, r7, #8
 8006574:	4619      	mov	r1, r3
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7ff fe21 	bl	80061be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f000 f9bd 	bl	80068fc <SDMMC_GetCmdResp3>
 8006582:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006584:	69fb      	ldr	r3, [r7, #28]
}
 8006586:	4618      	mov	r0, r3
 8006588:	3720      	adds	r7, #32
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b088      	sub	sp, #32
 8006592:	af00      	add	r7, sp, #0
 8006594:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800659a:	2302      	movs	r3, #2
 800659c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800659e:	23c0      	movs	r3, #192	@ 0xc0
 80065a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065a2:	2300      	movs	r3, #0
 80065a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065aa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065ac:	f107 0308 	add.w	r3, r7, #8
 80065b0:	4619      	mov	r1, r3
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f7ff fe03 	bl	80061be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f957 	bl	800686c <SDMMC_GetCmdResp2>
 80065be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065c0:	69fb      	ldr	r3, [r7, #28]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3720      	adds	r7, #32
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b088      	sub	sp, #32
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80065d8:	2309      	movs	r3, #9
 80065da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80065dc:	23c0      	movs	r3, #192	@ 0xc0
 80065de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065e0:	2300      	movs	r3, #0
 80065e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065e4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80065e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065ea:	f107 0308 	add.w	r3, r7, #8
 80065ee:	4619      	mov	r1, r3
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f7ff fde4 	bl	80061be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f938 	bl	800686c <SDMMC_GetCmdResp2>
 80065fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065fe:	69fb      	ldr	r3, [r7, #28]
}
 8006600:	4618      	mov	r0, r3
 8006602:	3720      	adds	r7, #32
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}

08006608 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006612:	2300      	movs	r3, #0
 8006614:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006616:	2303      	movs	r3, #3
 8006618:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800661a:	2340      	movs	r3, #64	@ 0x40
 800661c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800661e:	2300      	movs	r3, #0
 8006620:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006626:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006628:	f107 0308 	add.w	r3, r7, #8
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7ff fdc5 	bl	80061be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006634:	683a      	ldr	r2, [r7, #0]
 8006636:	2103      	movs	r1, #3
 8006638:	6878      	ldr	r0, [r7, #4]
 800663a:	f000 f99d 	bl	8006978 <SDMMC_GetCmdResp6>
 800663e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006640:	69fb      	ldr	r3, [r7, #28]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3720      	adds	r7, #32
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}

0800664a <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b088      	sub	sp, #32
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006658:	230d      	movs	r3, #13
 800665a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800665c:	2340      	movs	r3, #64	@ 0x40
 800665e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006660:	2300      	movs	r3, #0
 8006662:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006664:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006668:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800666a:	f107 0308 	add.w	r3, r7, #8
 800666e:	4619      	mov	r1, r3
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f7ff fda4 	bl	80061be <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800667a:	210d      	movs	r1, #13
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f000 f807 	bl	8006690 <SDMMC_GetCmdResp1>
 8006682:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006684:	69fb      	ldr	r3, [r7, #28]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3720      	adds	r7, #32
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b088      	sub	sp, #32
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	460b      	mov	r3, r1
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800669e:	4b70      	ldr	r3, [pc, #448]	@ (8006860 <SDMMC_GetCmdResp1+0x1d0>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a70      	ldr	r2, [pc, #448]	@ (8006864 <SDMMC_GetCmdResp1+0x1d4>)
 80066a4:	fba2 2303 	umull	r2, r3, r2, r3
 80066a8:	0a5a      	lsrs	r2, r3, #9
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	fb02 f303 	mul.w	r3, r2, r3
 80066b0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80066b2:	69fb      	ldr	r3, [r7, #28]
 80066b4:	1e5a      	subs	r2, r3, #1
 80066b6:	61fa      	str	r2, [r7, #28]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d102      	bne.n	80066c2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80066c0:	e0c9      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066c6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d0ef      	beq.n	80066b2 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1ea      	bne.n	80066b2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066e0:	f003 0304 	and.w	r3, r3, #4
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d004      	beq.n	80066f2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2204      	movs	r2, #4
 80066ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80066ee:	2304      	movs	r3, #4
 80066f0:	e0b1      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d004      	beq.n	8006708 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2201      	movs	r2, #1
 8006702:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006704:	2301      	movs	r3, #1
 8006706:	e0a6      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	22c5      	movs	r2, #197	@ 0xc5
 800670c:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f7ff fd7f 	bl	8006212 <SDIO_GetCommandResponse>
 8006714:	4603      	mov	r3, r0
 8006716:	461a      	mov	r2, r3
 8006718:	7afb      	ldrb	r3, [r7, #11]
 800671a:	4293      	cmp	r3, r2
 800671c:	d001      	beq.n	8006722 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800671e:	2301      	movs	r3, #1
 8006720:	e099      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006722:	2100      	movs	r1, #0
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f7ff fd81 	bl	800622c <SDIO_GetResponse>
 800672a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	4b4e      	ldr	r3, [pc, #312]	@ (8006868 <SDMMC_GetCmdResp1+0x1d8>)
 8006730:	4013      	ands	r3, r2
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006736:	2300      	movs	r3, #0
 8006738:	e08d      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	2b00      	cmp	r3, #0
 800673e:	da02      	bge.n	8006746 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006740:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006744:	e087      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006750:	2340      	movs	r3, #64	@ 0x40
 8006752:	e080      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800675e:	2380      	movs	r3, #128	@ 0x80
 8006760:	e079      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d002      	beq.n	8006772 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800676c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006770:	e071      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006778:	2b00      	cmp	r3, #0
 800677a:	d002      	beq.n	8006782 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800677c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006780:	e069      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006788:	2b00      	cmp	r3, #0
 800678a:	d002      	beq.n	8006792 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800678c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006790:	e061      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006792:	697b      	ldr	r3, [r7, #20]
 8006794:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800679c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80067a0:	e059      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80067ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80067b0:	e051      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80067bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80067c0:	e049      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d002      	beq.n	80067d2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80067cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80067d0:	e041      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d002      	beq.n	80067e2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80067dc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067e0:	e039      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80067ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80067f0:	e031      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80067fc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8006800:	e029      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800680c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006810:	e021      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800681c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8006820:	e019      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800682c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8006830:	e011      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800683c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8006840:	e009      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f003 0308 	and.w	r3, r3, #8
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800684c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8006850:	e001      	b.n	8006856 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006852:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006856:	4618      	mov	r0, r3
 8006858:	3720      	adds	r7, #32
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	20000000 	.word	0x20000000
 8006864:	10624dd3 	.word	0x10624dd3
 8006868:	fdffe008 	.word	0xfdffe008

0800686c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800686c:	b480      	push	{r7}
 800686e:	b085      	sub	sp, #20
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006874:	4b1f      	ldr	r3, [pc, #124]	@ (80068f4 <SDMMC_GetCmdResp2+0x88>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a1f      	ldr	r2, [pc, #124]	@ (80068f8 <SDMMC_GetCmdResp2+0x8c>)
 800687a:	fba2 2303 	umull	r2, r3, r2, r3
 800687e:	0a5b      	lsrs	r3, r3, #9
 8006880:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006884:	fb02 f303 	mul.w	r3, r2, r3
 8006888:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	1e5a      	subs	r2, r3, #1
 800688e:	60fa      	str	r2, [r7, #12]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d102      	bne.n	800689a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006894:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006898:	e026      	b.n	80068e8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800689e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d0ef      	beq.n	800688a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d1ea      	bne.n	800688a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068b8:	f003 0304 	and.w	r3, r3, #4
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d004      	beq.n	80068ca <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2204      	movs	r2, #4
 80068c4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80068c6:	2304      	movs	r3, #4
 80068c8:	e00e      	b.n	80068e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80068ce:	f003 0301 	and.w	r3, r3, #1
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d004      	beq.n	80068e0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2201      	movs	r2, #1
 80068da:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80068dc:	2301      	movs	r3, #1
 80068de:	e003      	b.n	80068e8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	22c5      	movs	r2, #197	@ 0xc5
 80068e4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr
 80068f4:	20000000 	.word	0x20000000
 80068f8:	10624dd3 	.word	0x10624dd3

080068fc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b085      	sub	sp, #20
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006904:	4b1a      	ldr	r3, [pc, #104]	@ (8006970 <SDMMC_GetCmdResp3+0x74>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1a      	ldr	r2, [pc, #104]	@ (8006974 <SDMMC_GetCmdResp3+0x78>)
 800690a:	fba2 2303 	umull	r2, r3, r2, r3
 800690e:	0a5b      	lsrs	r3, r3, #9
 8006910:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006914:	fb02 f303 	mul.w	r3, r2, r3
 8006918:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	1e5a      	subs	r2, r3, #1
 800691e:	60fa      	str	r2, [r7, #12]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d102      	bne.n	800692a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006924:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006928:	e01b      	b.n	8006962 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800692e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006936:	2b00      	cmp	r3, #0
 8006938:	d0ef      	beq.n	800691a <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1ea      	bne.n	800691a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006948:	f003 0304 	and.w	r3, r3, #4
 800694c:	2b00      	cmp	r3, #0
 800694e:	d004      	beq.n	800695a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2204      	movs	r2, #4
 8006954:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006956:	2304      	movs	r3, #4
 8006958:	e003      	b.n	8006962 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	22c5      	movs	r2, #197	@ 0xc5
 800695e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3714      	adds	r7, #20
 8006966:	46bd      	mov	sp, r7
 8006968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696c:	4770      	bx	lr
 800696e:	bf00      	nop
 8006970:	20000000 	.word	0x20000000
 8006974:	10624dd3 	.word	0x10624dd3

08006978 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b088      	sub	sp, #32
 800697c:	af00      	add	r7, sp, #0
 800697e:	60f8      	str	r0, [r7, #12]
 8006980:	460b      	mov	r3, r1
 8006982:	607a      	str	r2, [r7, #4]
 8006984:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006986:	4b35      	ldr	r3, [pc, #212]	@ (8006a5c <SDMMC_GetCmdResp6+0xe4>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a35      	ldr	r2, [pc, #212]	@ (8006a60 <SDMMC_GetCmdResp6+0xe8>)
 800698c:	fba2 2303 	umull	r2, r3, r2, r3
 8006990:	0a5b      	lsrs	r3, r3, #9
 8006992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006996:	fb02 f303 	mul.w	r3, r2, r3
 800699a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	1e5a      	subs	r2, r3, #1
 80069a0:	61fa      	str	r2, [r7, #28]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d102      	bne.n	80069ac <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80069a6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80069aa:	e052      	b.n	8006a52 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069b0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80069b2:	69bb      	ldr	r3, [r7, #24]
 80069b4:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d0ef      	beq.n	800699c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80069bc:	69bb      	ldr	r3, [r7, #24]
 80069be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1ea      	bne.n	800699c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ca:	f003 0304 	and.w	r3, r3, #4
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d004      	beq.n	80069dc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2204      	movs	r2, #4
 80069d6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80069d8:	2304      	movs	r3, #4
 80069da:	e03a      	b.n	8006a52 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2201      	movs	r2, #1
 80069ec:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e02f      	b.n	8006a52 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f7ff fc0d 	bl	8006212 <SDIO_GetCommandResponse>
 80069f8:	4603      	mov	r3, r0
 80069fa:	461a      	mov	r2, r3
 80069fc:	7afb      	ldrb	r3, [r7, #11]
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d001      	beq.n	8006a06 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e025      	b.n	8006a52 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	22c5      	movs	r2, #197	@ 0xc5
 8006a0a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	68f8      	ldr	r0, [r7, #12]
 8006a10:	f7ff fc0c 	bl	800622c <SDIO_GetResponse>
 8006a14:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d106      	bne.n	8006a2e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	0c1b      	lsrs	r3, r3, #16
 8006a24:	b29a      	uxth	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	e011      	b.n	8006a52 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d002      	beq.n	8006a3e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006a38:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006a3c:	e009      	b.n	8006a52 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d002      	beq.n	8006a4e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006a48:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a4c:	e001      	b.n	8006a52 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006a4e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3720      	adds	r7, #32
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20000000 	.word	0x20000000
 8006a60:	10624dd3 	.word	0x10624dd3

08006a64 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a6c:	4b22      	ldr	r3, [pc, #136]	@ (8006af8 <SDMMC_GetCmdResp7+0x94>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a22      	ldr	r2, [pc, #136]	@ (8006afc <SDMMC_GetCmdResp7+0x98>)
 8006a72:	fba2 2303 	umull	r2, r3, r2, r3
 8006a76:	0a5b      	lsrs	r3, r3, #9
 8006a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a7c:	fb02 f303 	mul.w	r3, r2, r3
 8006a80:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	1e5a      	subs	r2, r3, #1
 8006a86:	60fa      	str	r2, [r7, #12]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d102      	bne.n	8006a92 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006a8c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006a90:	e02c      	b.n	8006aec <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006a96:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0ef      	beq.n	8006a82 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d1ea      	bne.n	8006a82 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2204      	movs	r2, #4
 8006abc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006abe:	2304      	movs	r3, #4
 8006ac0:	e014      	b.n	8006aec <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d004      	beq.n	8006ad8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	e009      	b.n	8006aec <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d002      	beq.n	8006aea <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2240      	movs	r2, #64	@ 0x40
 8006ae8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006aea:	2300      	movs	r3, #0
  
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3714      	adds	r7, #20
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr
 8006af8:	20000000 	.word	0x20000000
 8006afc:	10624dd3 	.word	0x10624dd3

08006b00 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006b08:	4b11      	ldr	r3, [pc, #68]	@ (8006b50 <SDMMC_GetCmdError+0x50>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a11      	ldr	r2, [pc, #68]	@ (8006b54 <SDMMC_GetCmdError+0x54>)
 8006b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b12:	0a5b      	lsrs	r3, r3, #9
 8006b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b18:	fb02 f303 	mul.w	r3, r2, r3
 8006b1c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	1e5a      	subs	r2, r3, #1
 8006b22:	60fa      	str	r2, [r7, #12]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d102      	bne.n	8006b2e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006b28:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8006b2c:	e009      	b.n	8006b42 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0f1      	beq.n	8006b1e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	22c5      	movs	r2, #197	@ 0xc5
 8006b3e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3714      	adds	r7, #20
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr
 8006b4e:	bf00      	nop
 8006b50:	20000000 	.word	0x20000000
 8006b54:	10624dd3 	.word	0x10624dd3

08006b58 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006b5c:	4904      	ldr	r1, [pc, #16]	@ (8006b70 <MX_FATFS_Init+0x18>)
 8006b5e:	4805      	ldr	r0, [pc, #20]	@ (8006b74 <MX_FATFS_Init+0x1c>)
 8006b60:	f000 ff8c 	bl	8007a7c <FATFS_LinkDriver>
 8006b64:	4603      	mov	r3, r0
 8006b66:	461a      	mov	r2, r3
 8006b68:	4b03      	ldr	r3, [pc, #12]	@ (8006b78 <MX_FATFS_Init+0x20>)
 8006b6a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006b6c:	bf00      	nop
 8006b6e:	bd80      	pop	{r7, pc}
 8006b70:	200003c4 	.word	0x200003c4
 8006b74:	080255a0 	.word	0x080255a0
 8006b78:	200003c0 	.word	0x200003c0

08006b7c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006b82:	2300      	movs	r3, #0
 8006b84:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006b86:	f000 f86d 	bl	8006c64 <BSP_SD_IsDetected>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d001      	beq.n	8006b94 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006b90:	2301      	movs	r3, #1
 8006b92:	e005      	b.n	8006ba0 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006b94:	4804      	ldr	r0, [pc, #16]	@ (8006ba8 <BSP_SD_Init+0x2c>)
 8006b96:	f7fd fbb2 	bl	80042fe <HAL_SD_Init>
 8006b9a:	4603      	mov	r3, r0
 8006b9c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006b9e:	79fb      	ldrb	r3, [r7, #7]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	20000228 	.word	0x20000228

08006bac <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	68f9      	ldr	r1, [r7, #12]
 8006bc2:	4806      	ldr	r0, [pc, #24]	@ (8006bdc <BSP_SD_ReadBlocks_DMA+0x30>)
 8006bc4:	f7fd fc4c 	bl	8004460 <HAL_SD_ReadBlocks_DMA>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d001      	beq.n	8006bd2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	3718      	adds	r7, #24
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	bd80      	pop	{r7, pc}
 8006bdc:	20000228 	.word	0x20000228

08006be0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b086      	sub	sp, #24
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	60f8      	str	r0, [r7, #12]
 8006be8:	60b9      	str	r1, [r7, #8]
 8006bea:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8006bec:	2300      	movs	r3, #0
 8006bee:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	68f9      	ldr	r1, [r7, #12]
 8006bf6:	4806      	ldr	r0, [pc, #24]	@ (8006c10 <BSP_SD_WriteBlocks_DMA+0x30>)
 8006bf8:	f7fd fd14 	bl	8004624 <HAL_SD_WriteBlocks_DMA>
 8006bfc:	4603      	mov	r3, r0
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d001      	beq.n	8006c06 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3718      	adds	r7, #24
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000228 	.word	0x20000228

08006c14 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006c18:	4805      	ldr	r0, [pc, #20]	@ (8006c30 <BSP_SD_GetCardState+0x1c>)
 8006c1a:	f7fd ffc3 	bl	8004ba4 <HAL_SD_GetCardState>
 8006c1e:	4603      	mov	r3, r0
 8006c20:	2b04      	cmp	r3, #4
 8006c22:	bf14      	ite	ne
 8006c24:	2301      	movne	r3, #1
 8006c26:	2300      	moveq	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
}
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000228 	.word	0x20000228

08006c34 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006c3c:	6879      	ldr	r1, [r7, #4]
 8006c3e:	4803      	ldr	r0, [pc, #12]	@ (8006c4c <BSP_SD_GetCardInfo+0x18>)
 8006c40:	f7fd ff84 	bl	8004b4c <HAL_SD_GetCardInfo>
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	20000228 	.word	0x20000228

08006c50 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006c58:	f000 f986 	bl	8006f68 <BSP_SD_ReadCpltCallback>
}
 8006c5c:	bf00      	nop
 8006c5e:	3708      	adds	r7, #8
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b083      	sub	sp, #12
 8006c68:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8006c6e:	79fb      	ldrb	r3, [r7, #7]
 8006c70:	b2db      	uxtb	r3, r3
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr

08006c7e <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8006c7e:	b580      	push	{r7, lr}
 8006c80:	b084      	sub	sp, #16
 8006c82:	af00      	add	r7, sp, #0
 8006c84:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8006c86:	f000 ffb9 	bl	8007bfc <osKernelGetTickCount>
 8006c8a:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8006c8c:	e006      	b.n	8006c9c <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006c8e:	f7ff ffc1 	bl	8006c14 <BSP_SD_GetCardState>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d101      	bne.n	8006c9c <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	e009      	b.n	8006cb0 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8006c9c:	f000 ffae 	bl	8007bfc <osKernelGetTickCount>
 8006ca0:	4602      	mov	r2, r0
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	1ad3      	subs	r3, r2, r3
 8006ca6:	687a      	ldr	r2, [r7, #4]
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d8f0      	bhi.n	8006c8e <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8006cac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	3710      	adds	r7, #16
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b082      	sub	sp, #8
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8006cf0 <SD_CheckStatus+0x38>)
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006cc8:	f7ff ffa4 	bl	8006c14 <BSP_SD_GetCardState>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d107      	bne.n	8006ce2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006cd2:	4b07      	ldr	r3, [pc, #28]	@ (8006cf0 <SD_CheckStatus+0x38>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	f023 0301 	bic.w	r3, r3, #1
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	4b04      	ldr	r3, [pc, #16]	@ (8006cf0 <SD_CheckStatus+0x38>)
 8006ce0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006ce2:	4b03      	ldr	r3, [pc, #12]	@ (8006cf0 <SD_CheckStatus+0x38>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	b2db      	uxtb	r3, r3
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}
 8006cf0:	20000009 	.word	0x20000009

08006cf4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006cfe:	4b1c      	ldr	r3, [pc, #112]	@ (8006d70 <SD_initialize+0x7c>)
 8006d00:	2201      	movs	r2, #1
 8006d02:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8006d04:	f000 ff32 	bl	8007b6c <osKernelGetState>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	d129      	bne.n	8006d62 <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8006d0e:	f7ff ff35 	bl	8006b7c <BSP_SD_Init>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d107      	bne.n	8006d28 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8006d18:	79fb      	ldrb	r3, [r7, #7]
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7ff ffcc 	bl	8006cb8 <SD_CheckStatus>
 8006d20:	4603      	mov	r3, r0
 8006d22:	461a      	mov	r2, r3
 8006d24:	4b12      	ldr	r3, [pc, #72]	@ (8006d70 <SD_initialize+0x7c>)
 8006d26:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8006d28:	4b11      	ldr	r3, [pc, #68]	@ (8006d70 <SD_initialize+0x7c>)
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d017      	beq.n	8006d62 <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8006d32:	4b10      	ldr	r3, [pc, #64]	@ (8006d74 <SD_initialize+0x80>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d107      	bne.n	8006d4a <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	2102      	movs	r1, #2
 8006d3e:	200a      	movs	r0, #10
 8006d40:	f001 fa70 	bl	8008224 <osMessageQueueNew>
 8006d44:	4603      	mov	r3, r0
 8006d46:	4a0b      	ldr	r2, [pc, #44]	@ (8006d74 <SD_initialize+0x80>)
 8006d48:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8006d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8006d74 <SD_initialize+0x80>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d107      	bne.n	8006d62 <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8006d52:	4b07      	ldr	r3, [pc, #28]	@ (8006d70 <SD_initialize+0x7c>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	f043 0301 	orr.w	r3, r3, #1
 8006d5c:	b2da      	uxtb	r2, r3
 8006d5e:	4b04      	ldr	r3, [pc, #16]	@ (8006d70 <SD_initialize+0x7c>)
 8006d60:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8006d62:	4b03      	ldr	r3, [pc, #12]	@ (8006d70 <SD_initialize+0x7c>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	b2db      	uxtb	r3, r3
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3708      	adds	r7, #8
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}
 8006d70:	20000009 	.word	0x20000009
 8006d74:	200003c8 	.word	0x200003c8

08006d78 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	4603      	mov	r3, r0
 8006d80:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006d82:	79fb      	ldrb	r3, [r7, #7]
 8006d84:	4618      	mov	r0, r3
 8006d86:	f7ff ff97 	bl	8006cb8 <SD_CheckStatus>
 8006d8a:	4603      	mov	r3, r0
}
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	3708      	adds	r7, #8
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60b9      	str	r1, [r7, #8]
 8006d9c:	607a      	str	r2, [r7, #4]
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	4603      	mov	r3, r0
 8006da2:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006da8:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006dac:	f7ff ff67 	bl	8006c7e <SD_CheckStatusWithTimeout>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	da01      	bge.n	8006dba <SD_read+0x26>
  {
    return res;
 8006db6:	7ffb      	ldrb	r3, [r7, #31]
 8006db8:	e02f      	b.n	8006e1a <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	6879      	ldr	r1, [r7, #4]
 8006dbe:	68b8      	ldr	r0, [r7, #8]
 8006dc0:	f7ff fef4 	bl	8006bac <BSP_SD_ReadBlocks_DMA>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8006dc8:	7fbb      	ldrb	r3, [r7, #30]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d124      	bne.n	8006e18 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8006dce:	4b15      	ldr	r3, [pc, #84]	@ (8006e24 <SD_read+0x90>)
 8006dd0:	6818      	ldr	r0, [r3, #0]
 8006dd2:	f107 0112 	add.w	r1, r7, #18
 8006dd6:	f247 5330 	movw	r3, #30000	@ 0x7530
 8006dda:	2200      	movs	r2, #0
 8006ddc:	f001 faf6 	bl	80083cc <osMessageQueueGet>
 8006de0:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d117      	bne.n	8006e18 <SD_read+0x84>
 8006de8:	8a7b      	ldrh	r3, [r7, #18]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d114      	bne.n	8006e18 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8006dee:	f000 ff05 	bl	8007bfc <osKernelGetTickCount>
 8006df2:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8006df4:	e007      	b.n	8006e06 <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006df6:	f7ff ff0d 	bl	8006c14 <BSP_SD_GetCardState>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d102      	bne.n	8006e06 <SD_read+0x72>
              {
                res = RES_OK;
 8006e00:	2300      	movs	r3, #0
 8006e02:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8006e04:	e008      	b.n	8006e18 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8006e06:	f000 fef9 	bl	8007bfc <osKernelGetTickCount>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	697b      	ldr	r3, [r7, #20]
 8006e0e:	1ad3      	subs	r3, r2, r3
 8006e10:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d9ee      	bls.n	8006df6 <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8006e18:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3720      	adds	r7, #32
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
 8006e22:	bf00      	nop
 8006e24:	200003c8 	.word	0x200003c8

08006e28 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	60b9      	str	r1, [r7, #8]
 8006e30:	607a      	str	r2, [r7, #4]
 8006e32:	603b      	str	r3, [r7, #0]
 8006e34:	4603      	mov	r3, r0
 8006e36:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8006e3c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8006e40:	f7ff ff1d 	bl	8006c7e <SD_CheckStatusWithTimeout>
 8006e44:	4603      	mov	r3, r0
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	da01      	bge.n	8006e4e <SD_write+0x26>
  {
    return res;
 8006e4a:	7ffb      	ldrb	r3, [r7, #31]
 8006e4c:	e02d      	b.n	8006eaa <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8006e4e:	683a      	ldr	r2, [r7, #0]
 8006e50:	6879      	ldr	r1, [r7, #4]
 8006e52:	68b8      	ldr	r0, [r7, #8]
 8006e54:	f7ff fec4 	bl	8006be0 <BSP_SD_WriteBlocks_DMA>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d124      	bne.n	8006ea8 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8006e5e:	4b15      	ldr	r3, [pc, #84]	@ (8006eb4 <SD_write+0x8c>)
 8006e60:	6818      	ldr	r0, [r3, #0]
 8006e62:	f107 0112 	add.w	r1, r7, #18
 8006e66:	f247 5330 	movw	r3, #30000	@ 0x7530
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	f001 faae 	bl	80083cc <osMessageQueueGet>
 8006e70:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d117      	bne.n	8006ea8 <SD_write+0x80>
 8006e78:	8a7b      	ldrh	r3, [r7, #18]
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d114      	bne.n	8006ea8 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8006e7e:	f000 febd 	bl	8007bfc <osKernelGetTickCount>
 8006e82:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8006e84:	e007      	b.n	8006e96 <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8006e86:	f7ff fec5 	bl	8006c14 <BSP_SD_GetCardState>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d102      	bne.n	8006e96 <SD_write+0x6e>
          {
            res = RES_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	77fb      	strb	r3, [r7, #31]
            break;
 8006e94:	e008      	b.n	8006ea8 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 8006e96:	f000 feb1 	bl	8007bfc <osKernelGetTickCount>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	f247 522f 	movw	r2, #29999	@ 0x752f
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d9ee      	bls.n	8006e86 <SD_write+0x5e>
    }

  }
#endif

  return res;
 8006ea8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3720      	adds	r7, #32
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	bd80      	pop	{r7, pc}
 8006eb2:	bf00      	nop
 8006eb4:	200003c8 	.word	0x200003c8

08006eb8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08c      	sub	sp, #48	@ 0x30
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	603a      	str	r2, [r7, #0]
 8006ec2:	71fb      	strb	r3, [r7, #7]
 8006ec4:	460b      	mov	r3, r1
 8006ec6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006ece:	4b25      	ldr	r3, [pc, #148]	@ (8006f64 <SD_ioctl+0xac>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	f003 0301 	and.w	r3, r3, #1
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <SD_ioctl+0x28>
 8006edc:	2303      	movs	r3, #3
 8006ede:	e03c      	b.n	8006f5a <SD_ioctl+0xa2>

  switch (cmd)
 8006ee0:	79bb      	ldrb	r3, [r7, #6]
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d834      	bhi.n	8006f50 <SD_ioctl+0x98>
 8006ee6:	a201      	add	r2, pc, #4	@ (adr r2, 8006eec <SD_ioctl+0x34>)
 8006ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eec:	08006efd 	.word	0x08006efd
 8006ef0:	08006f05 	.word	0x08006f05
 8006ef4:	08006f1d 	.word	0x08006f1d
 8006ef8:	08006f37 	.word	0x08006f37
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006efc:	2300      	movs	r3, #0
 8006efe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006f02:	e028      	b.n	8006f56 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006f04:	f107 030c 	add.w	r3, r7, #12
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f7ff fe93 	bl	8006c34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006f0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006f14:	2300      	movs	r3, #0
 8006f16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006f1a:	e01c      	b.n	8006f56 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006f1c:	f107 030c 	add.w	r3, r7, #12
 8006f20:	4618      	mov	r0, r3
 8006f22:	f7ff fe87 	bl	8006c34 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006f34:	e00f      	b.n	8006f56 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006f36:	f107 030c 	add.w	r3, r7, #12
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7ff fe7a 	bl	8006c34 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f42:	0a5a      	lsrs	r2, r3, #9
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8006f4e:	e002      	b.n	8006f56 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006f50:	2304      	movs	r3, #4
 8006f52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8006f56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3730      	adds	r7, #48	@ 0x30
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	20000009 	.word	0x20000009

08006f68 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 8006f72:	4b05      	ldr	r3, [pc, #20]	@ (8006f88 <BSP_SD_ReadCpltCallback+0x20>)
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	1db9      	adds	r1, r7, #6
 8006f78:	2300      	movs	r3, #0
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	f001 f9c6 	bl	800830c <osMessageQueuePut>
#endif
}
 8006f80:	bf00      	nop
 8006f82:	3708      	adds	r7, #8
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}
 8006f88:	200003c8 	.word	0x200003c8

08006f8c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b084      	sub	sp, #16
 8006f90:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8006f92:	2100      	movs	r1, #0
 8006f94:	2000      	movs	r0, #0
 8006f96:	f007 ffcf 	bl	800ef38 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8006f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800700c <MX_LWIP_Init+0x80>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 8006fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8007010 <MX_LWIP_Init+0x84>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8006fa6:	4b1b      	ldr	r3, [pc, #108]	@ (8007014 <MX_LWIP_Init+0x88>)
 8006fa8:	2200      	movs	r2, #0
 8006faa:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8006fac:	4b1a      	ldr	r3, [pc, #104]	@ (8007018 <MX_LWIP_Init+0x8c>)
 8006fae:	9302      	str	r3, [sp, #8]
 8006fb0:	4b1a      	ldr	r3, [pc, #104]	@ (800701c <MX_LWIP_Init+0x90>)
 8006fb2:	9301      	str	r3, [sp, #4]
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	9300      	str	r3, [sp, #0]
 8006fb8:	4b16      	ldr	r3, [pc, #88]	@ (8007014 <MX_LWIP_Init+0x88>)
 8006fba:	4a15      	ldr	r2, [pc, #84]	@ (8007010 <MX_LWIP_Init+0x84>)
 8006fbc:	4913      	ldr	r1, [pc, #76]	@ (800700c <MX_LWIP_Init+0x80>)
 8006fbe:	4818      	ldr	r0, [pc, #96]	@ (8007020 <MX_LWIP_Init+0x94>)
 8006fc0:	f009 f872 	bl	80100a8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006fc4:	4816      	ldr	r0, [pc, #88]	@ (8007020 <MX_LWIP_Init+0x94>)
 8006fc6:	f009 fa29 	bl	801041c <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 8006fca:	4815      	ldr	r0, [pc, #84]	@ (8007020 <MX_LWIP_Init+0x94>)
 8006fcc:	f009 fa36 	bl	801043c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8006fd0:	4914      	ldr	r1, [pc, #80]	@ (8007024 <MX_LWIP_Init+0x98>)
 8006fd2:	4813      	ldr	r0, [pc, #76]	@ (8007020 <MX_LWIP_Init+0x94>)
 8006fd4:	f009 fb38 	bl	8010648 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006fd8:	2224      	movs	r2, #36	@ 0x24
 8006fda:	2100      	movs	r1, #0
 8006fdc:	4812      	ldr	r0, [pc, #72]	@ (8007028 <MX_LWIP_Init+0x9c>)
 8006fde:	f016 ff74 	bl	801deca <memset>
  attributes.name = "EthLink";
 8006fe2:	4b11      	ldr	r3, [pc, #68]	@ (8007028 <MX_LWIP_Init+0x9c>)
 8006fe4:	4a11      	ldr	r2, [pc, #68]	@ (800702c <MX_LWIP_Init+0xa0>)
 8006fe6:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006fe8:	4b0f      	ldr	r3, [pc, #60]	@ (8007028 <MX_LWIP_Init+0x9c>)
 8006fea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006fee:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8006ff0:	4b0d      	ldr	r3, [pc, #52]	@ (8007028 <MX_LWIP_Init+0x9c>)
 8006ff2:	2210      	movs	r2, #16
 8006ff4:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8006ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8007028 <MX_LWIP_Init+0x9c>)
 8006ff8:	4909      	ldr	r1, [pc, #36]	@ (8007020 <MX_LWIP_Init+0x94>)
 8006ffa:	480d      	ldr	r0, [pc, #52]	@ (8007030 <MX_LWIP_Init+0xa4>)
 8006ffc:	f000 fe13 	bl	8007c26 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8007000:	4807      	ldr	r0, [pc, #28]	@ (8007020 <MX_LWIP_Init+0x94>)
 8007002:	f011 fdd3 	bl	8018bac <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8007006:	bf00      	nop
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	20000404 	.word	0x20000404
 8007010:	20000408 	.word	0x20000408
 8007014:	2000040c 	.word	0x2000040c
 8007018:	0800ee49 	.word	0x0800ee49
 800701c:	0800751d 	.word	0x0800751d
 8007020:	200003cc 	.word	0x200003cc
 8007024:	08007035 	.word	0x08007035
 8007028:	20000410 	.word	0x20000410
 800702c:	0802167c 	.word	0x0802167c
 8007030:	080077d1 	.word	0x080077d1

08007034 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8007050:	4b04      	ldr	r3, [pc, #16]	@ (8007064 <HAL_ETH_RxCpltCallback+0x1c>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4618      	mov	r0, r3
 8007056:	f001 f87d 	bl	8008154 <osSemaphoreRelease>
}
 800705a:	bf00      	nop
 800705c:	3708      	adds	r7, #8
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	20004f00 	.word	0x20004f00

08007068 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b082      	sub	sp, #8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8007070:	4b04      	ldr	r3, [pc, #16]	@ (8007084 <HAL_ETH_TxCpltCallback+0x1c>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4618      	mov	r0, r3
 8007076:	f001 f86d 	bl	8008154 <osSemaphoreRelease>
}
 800707a:	bf00      	nop
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20004f04 	.word	0x20004f04

08007088 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7fb fe4c 	bl	8002d2e <HAL_ETH_GetDMAError>
 8007096:	4603      	mov	r3, r0
 8007098:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800709c:	2b80      	cmp	r3, #128	@ 0x80
 800709e:	d104      	bne.n	80070aa <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80070a0:	4b04      	ldr	r3, [pc, #16]	@ (80070b4 <HAL_ETH_ErrorCallback+0x2c>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f001 f855 	bl	8008154 <osSemaphoreRelease>
  }
}
 80070aa:	bf00      	nop
 80070ac:	3708      	adds	r7, #8
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
 80070b2:	bf00      	nop
 80070b4:	20004f00 	.word	0x20004f00

080070b8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b0aa      	sub	sp, #168	@ 0xa8
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80070c6:	2300      	movs	r3, #0
 80070c8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 80070d2:	f107 0310 	add.w	r3, r7, #16
 80070d6:	2264      	movs	r2, #100	@ 0x64
 80070d8:	2100      	movs	r1, #0
 80070da:	4618      	mov	r0, r3
 80070dc:	f016 fef5 	bl	801deca <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80070e0:	4b89      	ldr	r3, [pc, #548]	@ (8007308 <low_level_init+0x250>)
 80070e2:	4a8a      	ldr	r2, [pc, #552]	@ (800730c <low_level_init+0x254>)
 80070e4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80070e6:	2300      	movs	r3, #0
 80070e8:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80070ea:	2380      	movs	r3, #128	@ 0x80
 80070ec:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80070ee:	23e1      	movs	r3, #225	@ 0xe1
 80070f0:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80070f2:	2300      	movs	r3, #0
 80070f4:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80070f6:	2300      	movs	r3, #0
 80070f8:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80070fa:	2300      	movs	r3, #0
 80070fc:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80070fe:	4a82      	ldr	r2, [pc, #520]	@ (8007308 <low_level_init+0x250>)
 8007100:	f107 0308 	add.w	r3, r7, #8
 8007104:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8007106:	4b80      	ldr	r3, [pc, #512]	@ (8007308 <low_level_init+0x250>)
 8007108:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 800710c:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800710e:	4b7e      	ldr	r3, [pc, #504]	@ (8007308 <low_level_init+0x250>)
 8007110:	4a7f      	ldr	r2, [pc, #508]	@ (8007310 <low_level_init+0x258>)
 8007112:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8007114:	4b7c      	ldr	r3, [pc, #496]	@ (8007308 <low_level_init+0x250>)
 8007116:	4a7f      	ldr	r2, [pc, #508]	@ (8007314 <low_level_init+0x25c>)
 8007118:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800711a:	4b7b      	ldr	r3, [pc, #492]	@ (8007308 <low_level_init+0x250>)
 800711c:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8007120:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007122:	4879      	ldr	r0, [pc, #484]	@ (8007308 <low_level_init+0x250>)
 8007124:	f7fa ffba 	bl	800209c <HAL_ETH_Init>
 8007128:	4603      	mov	r3, r0
 800712a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800712e:	2238      	movs	r2, #56	@ 0x38
 8007130:	2100      	movs	r1, #0
 8007132:	4879      	ldr	r0, [pc, #484]	@ (8007318 <low_level_init+0x260>)
 8007134:	f016 fec9 	bl	801deca <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8007138:	4b77      	ldr	r3, [pc, #476]	@ (8007318 <low_level_init+0x260>)
 800713a:	2221      	movs	r2, #33	@ 0x21
 800713c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800713e:	4b76      	ldr	r3, [pc, #472]	@ (8007318 <low_level_init+0x260>)
 8007140:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8007144:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8007146:	4b74      	ldr	r3, [pc, #464]	@ (8007318 <low_level_init+0x260>)
 8007148:	2200      	movs	r2, #0
 800714a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800714c:	4873      	ldr	r0, [pc, #460]	@ (800731c <low_level_init+0x264>)
 800714e:	f008 fe65 	bl	800fe1c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2206      	movs	r2, #6
 8007156:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800715a:	4b6b      	ldr	r3, [pc, #428]	@ (8007308 <low_level_init+0x250>)
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	781a      	ldrb	r2, [r3, #0]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8007166:	4b68      	ldr	r3, [pc, #416]	@ (8007308 <low_level_init+0x250>)
 8007168:	685b      	ldr	r3, [r3, #4]
 800716a:	785a      	ldrb	r2, [r3, #1]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8007172:	4b65      	ldr	r3, [pc, #404]	@ (8007308 <low_level_init+0x250>)
 8007174:	685b      	ldr	r3, [r3, #4]
 8007176:	789a      	ldrb	r2, [r3, #2]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800717e:	4b62      	ldr	r3, [pc, #392]	@ (8007308 <low_level_init+0x250>)
 8007180:	685b      	ldr	r3, [r3, #4]
 8007182:	78da      	ldrb	r2, [r3, #3]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800718a:	4b5f      	ldr	r3, [pc, #380]	@ (8007308 <low_level_init+0x250>)
 800718c:	685b      	ldr	r3, [r3, #4]
 800718e:	791a      	ldrb	r2, [r3, #4]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8007196:	4b5c      	ldr	r3, [pc, #368]	@ (8007308 <low_level_init+0x250>)
 8007198:	685b      	ldr	r3, [r3, #4]
 800719a:	795a      	ldrb	r2, [r3, #5]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80071a8:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80071b0:	f043 030a 	orr.w	r3, r3, #10
 80071b4:	b2da      	uxtb	r2, r3
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80071bc:	2200      	movs	r2, #0
 80071be:	2100      	movs	r1, #0
 80071c0:	2001      	movs	r0, #1
 80071c2:	f000 feec 	bl	8007f9e <osSemaphoreNew>
 80071c6:	4603      	mov	r3, r0
 80071c8:	4a55      	ldr	r2, [pc, #340]	@ (8007320 <low_level_init+0x268>)
 80071ca:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80071cc:	2200      	movs	r2, #0
 80071ce:	2100      	movs	r1, #0
 80071d0:	2001      	movs	r0, #1
 80071d2:	f000 fee4 	bl	8007f9e <osSemaphoreNew>
 80071d6:	4603      	mov	r3, r0
 80071d8:	4a52      	ldr	r2, [pc, #328]	@ (8007324 <low_level_init+0x26c>)
 80071da:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80071dc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80071e0:	2224      	movs	r2, #36	@ 0x24
 80071e2:	2100      	movs	r1, #0
 80071e4:	4618      	mov	r0, r3
 80071e6:	f016 fe70 	bl	801deca <memset>
  attributes.name = "EthIf";
 80071ea:	4b4f      	ldr	r3, [pc, #316]	@ (8007328 <low_level_init+0x270>)
 80071ec:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80071ee:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80071f2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 80071f6:	2330      	movs	r3, #48	@ 0x30
 80071f8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 80071fc:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8007200:	461a      	mov	r2, r3
 8007202:	6879      	ldr	r1, [r7, #4]
 8007204:	4849      	ldr	r0, [pc, #292]	@ (800732c <low_level_init+0x274>)
 8007206:	f000 fd0e 	bl	8007c26 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 800720a:	4949      	ldr	r1, [pc, #292]	@ (8007330 <low_level_init+0x278>)
 800720c:	4849      	ldr	r0, [pc, #292]	@ (8007334 <low_level_init+0x27c>)
 800720e:	f7fa fc64 	bl	8001ada <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  if(DP83848_Init(&DP83848) != DP83848_STATUS_OK)
 8007212:	4848      	ldr	r0, [pc, #288]	@ (8007334 <low_level_init+0x27c>)
 8007214:	f7fa fc93 	bl	8001b3e <DP83848_Init>
 8007218:	4603      	mov	r3, r0
 800721a:	2b00      	cmp	r3, #0
 800721c:	d006      	beq.n	800722c <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f009 f9e2 	bl	80105e8 <netif_set_link_down>
    netif_set_down(netif);
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f009 f975 	bl	8010514 <netif_set_down>
 800722a:	e06a      	b.n	8007302 <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 800722c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8007230:	2b00      	cmp	r3, #0
 8007232:	d164      	bne.n	80072fe <low_level_init+0x246>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 8007234:	483f      	ldr	r0, [pc, #252]	@ (8007334 <low_level_init+0x27c>)
 8007236:	f7fa fccf 	bl	8001bd8 <DP83848_GetLinkState>
 800723a:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 800723e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007242:	2b01      	cmp	r3, #1
 8007244:	dc06      	bgt.n	8007254 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f009 f9ce 	bl	80105e8 <netif_set_link_down>
      netif_set_down(netif);
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f009 f961 	bl	8010514 <netif_set_down>
 8007252:	e056      	b.n	8007302 <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8007254:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007258:	3b02      	subs	r3, #2
 800725a:	2b03      	cmp	r3, #3
 800725c:	d82a      	bhi.n	80072b4 <low_level_init+0x1fc>
 800725e:	a201      	add	r2, pc, #4	@ (adr r2, 8007264 <low_level_init+0x1ac>)
 8007260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007264:	08007275 	.word	0x08007275
 8007268:	08007287 	.word	0x08007287
 800726c:	08007297 	.word	0x08007297
 8007270:	080072a7 	.word	0x080072a7
      {
      case DP83848_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8007274:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007278:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800727c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007280:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007284:	e01f      	b.n	80072c6 <low_level_init+0x20e>
      case DP83848_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8007286:	2300      	movs	r3, #0
 8007288:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 800728c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8007290:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8007294:	e017      	b.n	80072c6 <low_level_init+0x20e>
      case DP83848_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8007296:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800729a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800729e:	2300      	movs	r3, #0
 80072a0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80072a4:	e00f      	b.n	80072c6 <low_level_init+0x20e>
      case DP83848_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80072a6:	2300      	movs	r3, #0
 80072a8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 80072ac:	2300      	movs	r3, #0
 80072ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80072b2:	e008      	b.n	80072c6 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 80072b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80072b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 80072bc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80072c0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80072c4:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80072c6:	f107 0310 	add.w	r3, r7, #16
 80072ca:	4619      	mov	r1, r3
 80072cc:	480e      	ldr	r0, [pc, #56]	@ (8007308 <low_level_init+0x250>)
 80072ce:	f7fb fbcd 	bl	8002a6c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80072d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80072d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 80072d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80072de:	f107 0310 	add.w	r3, r7, #16
 80072e2:	4619      	mov	r1, r3
 80072e4:	4808      	ldr	r0, [pc, #32]	@ (8007308 <low_level_init+0x250>)
 80072e6:	f7fb fcb8 	bl	8002c5a <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 80072ea:	4807      	ldr	r0, [pc, #28]	@ (8007308 <low_level_init+0x250>)
 80072ec:	f7fa ff72 	bl	80021d4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f009 f8a3 	bl	801043c <netif_set_up>
    netif_set_link_up(netif);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f009 f93e 	bl	8010578 <netif_set_link_up>
 80072fc:	e001      	b.n	8007302 <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 80072fe:	f7fa f8e5 	bl	80014cc <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8007302:	37a8      	adds	r7, #168	@ 0xa8
 8007304:	46bd      	mov	sp, r7
 8007306:	bd80      	pop	{r7, pc}
 8007308:	20004f08 	.word	0x20004f08
 800730c:	40028000 	.word	0x40028000
 8007310:	20004e60 	.word	0x20004e60
 8007314:	20004dc0 	.word	0x20004dc0
 8007318:	20004fb8 	.word	0x20004fb8
 800731c:	080255b4 	.word	0x080255b4
 8007320:	20004f00 	.word	0x20004f00
 8007324:	20004f04 	.word	0x20004f04
 8007328:	08021684 	.word	0x08021684
 800732c:	080074c9 	.word	0x080074c9
 8007330:	2000000c 	.word	0x2000000c
 8007334:	20004ff0 	.word	0x20004ff0

08007338 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b092      	sub	sp, #72	@ 0x48
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8007342:	2300      	movs	r3, #0
 8007344:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8007346:	2300      	movs	r3, #0
 8007348:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 800734a:	2300      	movs	r3, #0
 800734c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8007350:	f107 030c 	add.w	r3, r7, #12
 8007354:	2230      	movs	r2, #48	@ 0x30
 8007356:	2100      	movs	r1, #0
 8007358:	4618      	mov	r0, r3
 800735a:	f016 fdb6 	bl	801deca <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800735e:	f107 030c 	add.w	r3, r7, #12
 8007362:	2230      	movs	r2, #48	@ 0x30
 8007364:	2100      	movs	r1, #0
 8007366:	4618      	mov	r0, r3
 8007368:	f016 fdaf 	bl	801deca <memset>

  for(q = p; q != NULL; q = q->next)
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007370:	e045      	b.n	80073fe <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8007372:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007374:	2b03      	cmp	r3, #3
 8007376:	d902      	bls.n	800737e <low_level_output+0x46>
      return ERR_IF;
 8007378:	f06f 030b 	mvn.w	r3, #11
 800737c:	e07f      	b.n	800747e <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800737e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007380:	6859      	ldr	r1, [r3, #4]
 8007382:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007384:	4613      	mov	r3, r2
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	4413      	add	r3, r2
 800738a:	009b      	lsls	r3, r3, #2
 800738c:	3348      	adds	r3, #72	@ 0x48
 800738e:	443b      	add	r3, r7
 8007390:	3b3c      	subs	r3, #60	@ 0x3c
 8007392:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8007394:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007396:	895b      	ldrh	r3, [r3, #10]
 8007398:	4619      	mov	r1, r3
 800739a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800739c:	4613      	mov	r3, r2
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	4413      	add	r3, r2
 80073a2:	009b      	lsls	r3, r3, #2
 80073a4:	3348      	adds	r3, #72	@ 0x48
 80073a6:	443b      	add	r3, r7
 80073a8:	3b38      	subs	r3, #56	@ 0x38
 80073aa:	6019      	str	r1, [r3, #0]

    if(i>0)
 80073ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d011      	beq.n	80073d6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80073b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073b4:	1e5a      	subs	r2, r3, #1
 80073b6:	f107 000c 	add.w	r0, r7, #12
 80073ba:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80073bc:	460b      	mov	r3, r1
 80073be:	005b      	lsls	r3, r3, #1
 80073c0:	440b      	add	r3, r1
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	18c1      	adds	r1, r0, r3
 80073c6:	4613      	mov	r3, r2
 80073c8:	005b      	lsls	r3, r3, #1
 80073ca:	4413      	add	r3, r2
 80073cc:	009b      	lsls	r3, r3, #2
 80073ce:	3348      	adds	r3, #72	@ 0x48
 80073d0:	443b      	add	r3, r7
 80073d2:	3b34      	subs	r3, #52	@ 0x34
 80073d4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80073d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d109      	bne.n	80073f2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80073de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073e0:	4613      	mov	r3, r2
 80073e2:	005b      	lsls	r3, r3, #1
 80073e4:	4413      	add	r3, r2
 80073e6:	009b      	lsls	r3, r3, #2
 80073e8:	3348      	adds	r3, #72	@ 0x48
 80073ea:	443b      	add	r3, r7
 80073ec:	3b34      	subs	r3, #52	@ 0x34
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]
    }

    i++;
 80073f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80073f4:	3301      	adds	r3, #1
 80073f6:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80073f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80073fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1b6      	bne.n	8007372 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	891b      	ldrh	r3, [r3, #8]
 8007408:	461a      	mov	r2, r3
 800740a:	4b1f      	ldr	r3, [pc, #124]	@ (8007488 <low_level_output+0x150>)
 800740c:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800740e:	4a1e      	ldr	r2, [pc, #120]	@ (8007488 <low_level_output+0x150>)
 8007410:	f107 030c 	add.w	r3, r7, #12
 8007414:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8007416:	4a1c      	ldr	r2, [pc, #112]	@ (8007488 <low_level_output+0x150>)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 800741c:	6838      	ldr	r0, [r7, #0]
 800741e:	f009 fd99 	bl	8010f54 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 8007422:	4919      	ldr	r1, [pc, #100]	@ (8007488 <low_level_output+0x150>)
 8007424:	4819      	ldr	r0, [pc, #100]	@ (800748c <low_level_output+0x154>)
 8007426:	f7fa ffc4 	bl	80023b2 <HAL_ETH_Transmit_IT>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d103      	bne.n	8007438 <low_level_output+0x100>
    {
      errval = ERR_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007436:	e01b      	b.n	8007470 <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8007438:	4814      	ldr	r0, [pc, #80]	@ (800748c <low_level_output+0x154>)
 800743a:	f7fb fc6b 	bl	8002d14 <HAL_ETH_GetError>
 800743e:	4603      	mov	r3, r0
 8007440:	f003 0302 	and.w	r3, r3, #2
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00d      	beq.n	8007464 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8007448:	4b11      	ldr	r3, [pc, #68]	@ (8007490 <low_level_output+0x158>)
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8007450:	4618      	mov	r0, r3
 8007452:	f000 fe2d 	bl	80080b0 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8007456:	480d      	ldr	r0, [pc, #52]	@ (800748c <low_level_output+0x154>)
 8007458:	f7fb f94a 	bl	80026f0 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 800745c:	23fe      	movs	r3, #254	@ 0xfe
 800745e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007462:	e005      	b.n	8007470 <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8007464:	6838      	ldr	r0, [r7, #0]
 8007466:	f009 fccf 	bl	8010e08 <pbuf_free>
        errval =  ERR_IF;
 800746a:	23f4      	movs	r3, #244	@ 0xf4
 800746c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 8007470:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8007474:	f113 0f02 	cmn.w	r3, #2
 8007478:	d0d3      	beq.n	8007422 <low_level_output+0xea>

  return errval;
 800747a:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800747e:	4618      	mov	r0, r3
 8007480:	3748      	adds	r7, #72	@ 0x48
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	20004fb8 	.word	0x20004fb8
 800748c:	20004f08 	.word	0x20004f08
 8007490:	20004f04 	.word	0x20004f04

08007494 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b084      	sub	sp, #16
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800749c:	2300      	movs	r3, #0
 800749e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80074a0:	4b07      	ldr	r3, [pc, #28]	@ (80074c0 <low_level_input+0x2c>)
 80074a2:	781b      	ldrb	r3, [r3, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d105      	bne.n	80074b4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80074a8:	f107 030c 	add.w	r3, r7, #12
 80074ac:	4619      	mov	r1, r3
 80074ae:	4805      	ldr	r0, [pc, #20]	@ (80074c4 <low_level_input+0x30>)
 80074b0:	f7fa ffdb 	bl	800246a <HAL_ETH_ReadData>
  }

  return p;
 80074b4:	68fb      	ldr	r3, [r7, #12]
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3710      	adds	r7, #16
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	20004dbc 	.word	0x20004dbc
 80074c4:	20004f08 	.word	0x20004f08

080074c8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80074d8:	4b0f      	ldr	r3, [pc, #60]	@ (8007518 <ethernetif_input+0x50>)
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f04f 31ff 	mov.w	r1, #4294967295
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 fde5 	bl	80080b0 <osSemaphoreAcquire>
 80074e6:	4603      	mov	r3, r0
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1f5      	bne.n	80074d8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80074ec:	68b8      	ldr	r0, [r7, #8]
 80074ee:	f7ff ffd1 	bl	8007494 <low_level_input>
 80074f2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00a      	beq.n	8007510 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	68b9      	ldr	r1, [r7, #8]
 8007500:	68f8      	ldr	r0, [r7, #12]
 8007502:	4798      	blx	r3
 8007504:	4603      	mov	r3, r0
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f009 fc7c 	bl	8010e08 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d1ea      	bne.n	80074ec <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007516:	e7df      	b.n	80074d8 <ethernetif_input+0x10>
 8007518:	20004f00 	.word	0x20004f00

0800751c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b082      	sub	sp, #8
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d106      	bne.n	8007538 <ethernetif_init+0x1c>
 800752a:	4b0e      	ldr	r3, [pc, #56]	@ (8007564 <ethernetif_init+0x48>)
 800752c:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 8007530:	490d      	ldr	r1, [pc, #52]	@ (8007568 <ethernetif_init+0x4c>)
 8007532:	480e      	ldr	r0, [pc, #56]	@ (800756c <ethernetif_init+0x50>)
 8007534:	f016 fc2a 	bl	801dd8c <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2273      	movs	r2, #115	@ 0x73
 800753c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2274      	movs	r2, #116	@ 0x74
 8007544:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a09      	ldr	r2, [pc, #36]	@ (8007570 <ethernetif_init+0x54>)
 800754c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a08      	ldr	r2, [pc, #32]	@ (8007574 <ethernetif_init+0x58>)
 8007552:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff fdaf 	bl	80070b8 <low_level_init>

  return ERR_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3708      	adds	r7, #8
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	0802168c 	.word	0x0802168c
 8007568:	080216a8 	.word	0x080216a8
 800756c:	080216b8 	.word	0x080216b8
 8007570:	0801aacd 	.word	0x0801aacd
 8007574:	08007339 	.word	0x08007339

08007578 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b084      	sub	sp, #16
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8007584:	68f9      	ldr	r1, [r7, #12]
 8007586:	4809      	ldr	r0, [pc, #36]	@ (80075ac <pbuf_free_custom+0x34>)
 8007588:	f008 fd38 	bl	800fffc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800758c:	4b08      	ldr	r3, [pc, #32]	@ (80075b0 <pbuf_free_custom+0x38>)
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d107      	bne.n	80075a4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8007594:	4b06      	ldr	r3, [pc, #24]	@ (80075b0 <pbuf_free_custom+0x38>)
 8007596:	2200      	movs	r2, #0
 8007598:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800759a:	4b06      	ldr	r3, [pc, #24]	@ (80075b4 <pbuf_free_custom+0x3c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 fdd8 	bl	8008154 <osSemaphoreRelease>
  }
}
 80075a4:	bf00      	nop
 80075a6:	3710      	adds	r7, #16
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}
 80075ac:	080255b4 	.word	0x080255b4
 80075b0:	20004dbc 	.word	0x20004dbc
 80075b4:	20004f00 	.word	0x20004f00

080075b8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80075bc:	f7fa fbca 	bl	8001d54 <HAL_GetTick>
 80075c0:	4603      	mov	r3, r0
}
 80075c2:	4618      	mov	r0, r3
 80075c4:	bd80      	pop	{r7, pc}
	...

080075c8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08e      	sub	sp, #56	@ 0x38
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80075d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80075d4:	2200      	movs	r2, #0
 80075d6:	601a      	str	r2, [r3, #0]
 80075d8:	605a      	str	r2, [r3, #4]
 80075da:	609a      	str	r2, [r3, #8]
 80075dc:	60da      	str	r2, [r3, #12]
 80075de:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	4a4e      	ldr	r2, [pc, #312]	@ (8007720 <HAL_ETH_MspInit+0x158>)
 80075e6:	4293      	cmp	r3, r2
 80075e8:	f040 8095 	bne.w	8007716 <HAL_ETH_MspInit+0x14e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80075ec:	2300      	movs	r3, #0
 80075ee:	623b      	str	r3, [r7, #32]
 80075f0:	4b4c      	ldr	r3, [pc, #304]	@ (8007724 <HAL_ETH_MspInit+0x15c>)
 80075f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f4:	4a4b      	ldr	r2, [pc, #300]	@ (8007724 <HAL_ETH_MspInit+0x15c>)
 80075f6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80075fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80075fc:	4b49      	ldr	r3, [pc, #292]	@ (8007724 <HAL_ETH_MspInit+0x15c>)
 80075fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007600:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007604:	623b      	str	r3, [r7, #32]
 8007606:	6a3b      	ldr	r3, [r7, #32]
 8007608:	2300      	movs	r3, #0
 800760a:	61fb      	str	r3, [r7, #28]
 800760c:	4b45      	ldr	r3, [pc, #276]	@ (8007724 <HAL_ETH_MspInit+0x15c>)
 800760e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007610:	4a44      	ldr	r2, [pc, #272]	@ (8007724 <HAL_ETH_MspInit+0x15c>)
 8007612:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007616:	6313      	str	r3, [r2, #48]	@ 0x30
 8007618:	4b42      	ldr	r3, [pc, #264]	@ (8007724 <HAL_ETH_MspInit+0x15c>)
 800761a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800761c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007620:	61fb      	str	r3, [r7, #28]
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	2300      	movs	r3, #0
 8007626:	61bb      	str	r3, [r7, #24]
 8007628:	4b3e      	ldr	r3, [pc, #248]	@ (8007724 <HAL_ETH_MspInit+0x15c>)
 800762a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800762c:	4a3d      	ldr	r2, [pc, #244]	@ (8007724 <HAL_ETH_MspInit+0x15c>)
 800762e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007632:	6313      	str	r3, [r2, #48]	@ 0x30
 8007634:	4b3b      	ldr	r3, [pc, #236]	@ (8007724 <HAL_ETH_MspInit+0x15c>)
 8007636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007638:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800763c:	61bb      	str	r3, [r7, #24]
 800763e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007640:	2300      	movs	r3, #0
 8007642:	617b      	str	r3, [r7, #20]
 8007644:	4b37      	ldr	r3, [pc, #220]	@ (8007724 <HAL_ETH_MspInit+0x15c>)
 8007646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007648:	4a36      	ldr	r2, [pc, #216]	@ (8007724 <HAL_ETH_MspInit+0x15c>)
 800764a:	f043 0304 	orr.w	r3, r3, #4
 800764e:	6313      	str	r3, [r2, #48]	@ 0x30
 8007650:	4b34      	ldr	r3, [pc, #208]	@ (8007724 <HAL_ETH_MspInit+0x15c>)
 8007652:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007654:	f003 0304 	and.w	r3, r3, #4
 8007658:	617b      	str	r3, [r7, #20]
 800765a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800765c:	2300      	movs	r3, #0
 800765e:	613b      	str	r3, [r7, #16]
 8007660:	4b30      	ldr	r3, [pc, #192]	@ (8007724 <HAL_ETH_MspInit+0x15c>)
 8007662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007664:	4a2f      	ldr	r2, [pc, #188]	@ (8007724 <HAL_ETH_MspInit+0x15c>)
 8007666:	f043 0301 	orr.w	r3, r3, #1
 800766a:	6313      	str	r3, [r2, #48]	@ 0x30
 800766c:	4b2d      	ldr	r3, [pc, #180]	@ (8007724 <HAL_ETH_MspInit+0x15c>)
 800766e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007670:	f003 0301 	and.w	r3, r3, #1
 8007674:	613b      	str	r3, [r7, #16]
 8007676:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	4b29      	ldr	r3, [pc, #164]	@ (8007724 <HAL_ETH_MspInit+0x15c>)
 800767e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007680:	4a28      	ldr	r2, [pc, #160]	@ (8007724 <HAL_ETH_MspInit+0x15c>)
 8007682:	f043 0302 	orr.w	r3, r3, #2
 8007686:	6313      	str	r3, [r2, #48]	@ 0x30
 8007688:	4b26      	ldr	r3, [pc, #152]	@ (8007724 <HAL_ETH_MspInit+0x15c>)
 800768a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800768c:	f003 0302 	and.w	r3, r3, #2
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8007694:	2332      	movs	r3, #50	@ 0x32
 8007696:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007698:	2302      	movs	r3, #2
 800769a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800769c:	2300      	movs	r3, #0
 800769e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076a0:	2303      	movs	r3, #3
 80076a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80076a4:	230b      	movs	r3, #11
 80076a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80076a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076ac:	4619      	mov	r1, r3
 80076ae:	481e      	ldr	r0, [pc, #120]	@ (8007728 <HAL_ETH_MspInit+0x160>)
 80076b0:	f7fb ff6c 	bl	800358c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80076b4:	2386      	movs	r3, #134	@ 0x86
 80076b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076b8:	2302      	movs	r3, #2
 80076ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076bc:	2300      	movs	r3, #0
 80076be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076c0:	2303      	movs	r3, #3
 80076c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80076c4:	230b      	movs	r3, #11
 80076c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076cc:	4619      	mov	r1, r3
 80076ce:	4817      	ldr	r0, [pc, #92]	@ (800772c <HAL_ETH_MspInit+0x164>)
 80076d0:	f7fb ff5c 	bl	800358c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80076d4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80076d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076da:	2302      	movs	r3, #2
 80076dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076de:	2300      	movs	r3, #0
 80076e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80076e2:	2303      	movs	r3, #3
 80076e4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80076e6:	230b      	movs	r3, #11
 80076e8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80076ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80076ee:	4619      	mov	r1, r3
 80076f0:	480f      	ldr	r0, [pc, #60]	@ (8007730 <HAL_ETH_MspInit+0x168>)
 80076f2:	f7fb ff4b 	bl	800358c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80076f6:	2200      	movs	r2, #0
 80076f8:	2105      	movs	r1, #5
 80076fa:	203d      	movs	r0, #61	@ 0x3d
 80076fc:	f7fa fc12 	bl	8001f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8007700:	203d      	movs	r0, #61	@ 0x3d
 8007702:	f7fa fc2b 	bl	8001f5c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8007706:	2200      	movs	r2, #0
 8007708:	2105      	movs	r1, #5
 800770a:	203e      	movs	r0, #62	@ 0x3e
 800770c:	f7fa fc0a 	bl	8001f24 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8007710:	203e      	movs	r0, #62	@ 0x3e
 8007712:	f7fa fc23 	bl	8001f5c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8007716:	bf00      	nop
 8007718:	3738      	adds	r7, #56	@ 0x38
 800771a:	46bd      	mov	sp, r7
 800771c:	bd80      	pop	{r7, pc}
 800771e:	bf00      	nop
 8007720:	40028000 	.word	0x40028000
 8007724:	40023800 	.word	0x40023800
 8007728:	40020800 	.word	0x40020800
 800772c:	40020000 	.word	0x40020000
 8007730:	40020400 	.word	0x40020400

08007734 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8007738:	4802      	ldr	r0, [pc, #8]	@ (8007744 <ETH_PHY_IO_Init+0x10>)
 800773a:	f7fb faa9 	bl	8002c90 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800773e:	2300      	movs	r3, #0
}
 8007740:	4618      	mov	r0, r3
 8007742:	bd80      	pop	{r7, pc}
 8007744:	20004f08 	.word	0x20004f08

08007748 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8007748:	b480      	push	{r7}
 800774a:	af00      	add	r7, sp, #0
  return 0;
 800774c:	2300      	movs	r3, #0
}
 800774e:	4618      	mov	r0, r3
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	68ba      	ldr	r2, [r7, #8]
 8007768:	68f9      	ldr	r1, [r7, #12]
 800776a:	4807      	ldr	r0, [pc, #28]	@ (8007788 <ETH_PHY_IO_ReadReg+0x30>)
 800776c:	f7fb f8ea 	bl	8002944 <HAL_ETH_ReadPHYRegister>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d002      	beq.n	800777c <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8007776:	f04f 33ff 	mov.w	r3, #4294967295
 800777a:	e000      	b.n	800777e <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800777c:	2300      	movs	r3, #0
}
 800777e:	4618      	mov	r0, r3
 8007780:	3710      	adds	r7, #16
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	bf00      	nop
 8007788:	20004f08 	.word	0x20004f08

0800778c <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b084      	sub	sp, #16
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	68ba      	ldr	r2, [r7, #8]
 800779c:	68f9      	ldr	r1, [r7, #12]
 800779e:	4807      	ldr	r0, [pc, #28]	@ (80077bc <ETH_PHY_IO_WriteReg+0x30>)
 80077a0:	f7fb f91b 	bl	80029da <HAL_ETH_WritePHYRegister>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d002      	beq.n	80077b0 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80077aa:	f04f 33ff 	mov.w	r3, #4294967295
 80077ae:	e000      	b.n	80077b2 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
 80077ba:	bf00      	nop
 80077bc:	20004f08 	.word	0x20004f08

080077c0 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80077c4:	f7fa fac6 	bl	8001d54 <HAL_GetTick>
 80077c8:	4603      	mov	r3, r0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b0a0      	sub	sp, #128	@ 0x80
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80077d8:	f107 0308 	add.w	r3, r7, #8
 80077dc:	2264      	movs	r2, #100	@ 0x64
 80077de:	2100      	movs	r1, #0
 80077e0:	4618      	mov	r0, r3
 80077e2:	f016 fb72 	bl	801deca <memset>
  int32_t PHYLinkState = 0;
 80077e6:	2300      	movs	r3, #0
 80077e8:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80077ea:	2300      	movs	r3, #0
 80077ec:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80077ee:	2300      	movs	r3, #0
 80077f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077f2:	2300      	movs	r3, #0
 80077f4:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 80077fa:	483a      	ldr	r0, [pc, #232]	@ (80078e4 <ethernet_link_thread+0x114>)
 80077fc:	f7fa f9ec 	bl	8001bd8 <DP83848_GetLinkState>
 8007800:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 8007802:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007804:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007808:	089b      	lsrs	r3, r3, #2
 800780a:	f003 0301 	and.w	r3, r3, #1
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b00      	cmp	r3, #0
 8007812:	d00c      	beq.n	800782e <ethernet_link_thread+0x5e>
 8007814:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007816:	2b01      	cmp	r3, #1
 8007818:	dc09      	bgt.n	800782e <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800781a:	4833      	ldr	r0, [pc, #204]	@ (80078e8 <ethernet_link_thread+0x118>)
 800781c:	f7fa fd4a 	bl	80022b4 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8007820:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007822:	f008 fe77 	bl	8010514 <netif_set_down>
    netif_set_link_down(netif);
 8007826:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007828:	f008 fede 	bl	80105e8 <netif_set_link_down>
 800782c:	e055      	b.n	80078da <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 800782e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007830:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b00      	cmp	r3, #0
 800783a:	d14e      	bne.n	80078da <ethernet_link_thread+0x10a>
 800783c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800783e:	2b01      	cmp	r3, #1
 8007840:	dd4b      	ble.n	80078da <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8007842:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007844:	3b02      	subs	r3, #2
 8007846:	2b03      	cmp	r3, #3
 8007848:	d82a      	bhi.n	80078a0 <ethernet_link_thread+0xd0>
 800784a:	a201      	add	r2, pc, #4	@ (adr r2, 8007850 <ethernet_link_thread+0x80>)
 800784c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007850:	08007861 	.word	0x08007861
 8007854:	08007873 	.word	0x08007873
 8007858:	08007883 	.word	0x08007883
 800785c:	08007893 	.word	0x08007893
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007860:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007864:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8007866:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800786a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800786c:	2301      	movs	r3, #1
 800786e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007870:	e017      	b.n	80078a2 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007872:	2300      	movs	r3, #0
 8007874:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8007876:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800787a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800787c:	2301      	movs	r3, #1
 800787e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007880:	e00f      	b.n	80078a2 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8007882:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007886:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8007888:	2300      	movs	r3, #0
 800788a:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800788c:	2301      	movs	r3, #1
 800788e:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8007890:	e007      	b.n	80078a2 <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8007892:	2300      	movs	r3, #0
 8007894:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8007896:	2300      	movs	r3, #0
 8007898:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 800789a:	2301      	movs	r3, #1
 800789c:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 800789e:	e000      	b.n	80078a2 <ethernet_link_thread+0xd2>
    default:
      break;
 80078a0:	bf00      	nop
    }

    if(linkchanged)
 80078a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d018      	beq.n	80078da <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80078a8:	f107 0308 	add.w	r3, r7, #8
 80078ac:	4619      	mov	r1, r3
 80078ae:	480e      	ldr	r0, [pc, #56]	@ (80078e8 <ethernet_link_thread+0x118>)
 80078b0:	f7fb f8dc 	bl	8002a6c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80078b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80078b6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80078b8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078ba:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80078bc:	f107 0308 	add.w	r3, r7, #8
 80078c0:	4619      	mov	r1, r3
 80078c2:	4809      	ldr	r0, [pc, #36]	@ (80078e8 <ethernet_link_thread+0x118>)
 80078c4:	f7fb f9c9 	bl	8002c5a <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 80078c8:	4807      	ldr	r0, [pc, #28]	@ (80078e8 <ethernet_link_thread+0x118>)
 80078ca:	f7fa fc83 	bl	80021d4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 80078ce:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80078d0:	f008 fdb4 	bl	801043c <netif_set_up>
      netif_set_link_up(netif);
 80078d4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80078d6:	f008 fe4f 	bl	8010578 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 80078da:	2064      	movs	r0, #100	@ 0x64
 80078dc:	f000 fa36 	bl	8007d4c <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 80078e0:	e78b      	b.n	80077fa <ethernet_link_thread+0x2a>
 80078e2:	bf00      	nop
 80078e4:	20004ff0 	.word	0x20004ff0
 80078e8:	20004f08 	.word	0x20004f08

080078ec <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b086      	sub	sp, #24
 80078f0:	af02      	add	r7, sp, #8
 80078f2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80078f4:	4812      	ldr	r0, [pc, #72]	@ (8007940 <HAL_ETH_RxAllocateCallback+0x54>)
 80078f6:	f008 fb0d 	bl	800ff14 <memp_malloc_pool>
 80078fa:	60f8      	str	r0, [r7, #12]
  if (p)
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d014      	beq.n	800792c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	f103 0220 	add.w	r2, r3, #32
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	4a0d      	ldr	r2, [pc, #52]	@ (8007944 <HAL_ETH_RxAllocateCallback+0x58>)
 8007910:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800791a:	9201      	str	r2, [sp, #4]
 800791c:	9300      	str	r3, [sp, #0]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2241      	movs	r2, #65	@ 0x41
 8007922:	2100      	movs	r1, #0
 8007924:	2000      	movs	r0, #0
 8007926:	f009 f883 	bl	8010a30 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800792a:	e005      	b.n	8007938 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800792c:	4b06      	ldr	r3, [pc, #24]	@ (8007948 <HAL_ETH_RxAllocateCallback+0x5c>)
 800792e:	2201      	movs	r2, #1
 8007930:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2200      	movs	r2, #0
 8007936:	601a      	str	r2, [r3, #0]
}
 8007938:	bf00      	nop
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}
 8007940:	080255b4 	.word	0x080255b4
 8007944:	08007579 	.word	0x08007579
 8007948:	20004dbc 	.word	0x20004dbc

0800794c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800794c:	b480      	push	{r7}
 800794e:	b089      	sub	sp, #36	@ 0x24
 8007950:	af00      	add	r7, sp, #0
 8007952:	60f8      	str	r0, [r7, #12]
 8007954:	60b9      	str	r1, [r7, #8]
 8007956:	607a      	str	r2, [r7, #4]
 8007958:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8007962:	2300      	movs	r3, #0
 8007964:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	3b20      	subs	r3, #32
 800796a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	2200      	movs	r2, #0
 8007970:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	2200      	movs	r2, #0
 8007976:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	887a      	ldrh	r2, [r7, #2]
 800797c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d103      	bne.n	800798e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	69fa      	ldr	r2, [r7, #28]
 800798a:	601a      	str	r2, [r3, #0]
 800798c:	e003      	b.n	8007996 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	69fa      	ldr	r2, [r7, #28]
 8007994:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	69fa      	ldr	r2, [r7, #28]
 800799a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800799c:	69bb      	ldr	r3, [r7, #24]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	61fb      	str	r3, [r7, #28]
 80079a2:	e009      	b.n	80079b8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80079a4:	69fb      	ldr	r3, [r7, #28]
 80079a6:	891a      	ldrh	r2, [r3, #8]
 80079a8:	887b      	ldrh	r3, [r7, #2]
 80079aa:	4413      	add	r3, r2
 80079ac:	b29a      	uxth	r2, r3
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80079b2:	69fb      	ldr	r3, [r7, #28]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	61fb      	str	r3, [r7, #28]
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1f2      	bne.n	80079a4 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 80079be:	bf00      	nop
 80079c0:	bf00      	nop
 80079c2:	3724      	adds	r7, #36	@ 0x24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr

080079cc <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b082      	sub	sp, #8
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f009 fa17 	bl	8010e08 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80079da:	bf00      	nop
 80079dc:	3708      	adds	r7, #8
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}
	...

080079e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	4613      	mov	r3, r2
 80079f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80079f2:	2301      	movs	r3, #1
 80079f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80079f6:	2300      	movs	r3, #0
 80079f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80079fa:	4b1f      	ldr	r3, [pc, #124]	@ (8007a78 <FATFS_LinkDriverEx+0x94>)
 80079fc:	7a5b      	ldrb	r3, [r3, #9]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d131      	bne.n	8007a68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007a04:	4b1c      	ldr	r3, [pc, #112]	@ (8007a78 <FATFS_LinkDriverEx+0x94>)
 8007a06:	7a5b      	ldrb	r3, [r3, #9]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8007a78 <FATFS_LinkDriverEx+0x94>)
 8007a0e:	2100      	movs	r1, #0
 8007a10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007a12:	4b19      	ldr	r3, [pc, #100]	@ (8007a78 <FATFS_LinkDriverEx+0x94>)
 8007a14:	7a5b      	ldrb	r3, [r3, #9]
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	4a17      	ldr	r2, [pc, #92]	@ (8007a78 <FATFS_LinkDriverEx+0x94>)
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007a22:	4b15      	ldr	r3, [pc, #84]	@ (8007a78 <FATFS_LinkDriverEx+0x94>)
 8007a24:	7a5b      	ldrb	r3, [r3, #9]
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	461a      	mov	r2, r3
 8007a2a:	4b13      	ldr	r3, [pc, #76]	@ (8007a78 <FATFS_LinkDriverEx+0x94>)
 8007a2c:	4413      	add	r3, r2
 8007a2e:	79fa      	ldrb	r2, [r7, #7]
 8007a30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007a32:	4b11      	ldr	r3, [pc, #68]	@ (8007a78 <FATFS_LinkDriverEx+0x94>)
 8007a34:	7a5b      	ldrb	r3, [r3, #9]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	b2d1      	uxtb	r1, r2
 8007a3c:	4a0e      	ldr	r2, [pc, #56]	@ (8007a78 <FATFS_LinkDriverEx+0x94>)
 8007a3e:	7251      	strb	r1, [r2, #9]
 8007a40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007a42:	7dbb      	ldrb	r3, [r7, #22]
 8007a44:	3330      	adds	r3, #48	@ 0x30
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	223a      	movs	r2, #58	@ 0x3a
 8007a52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	3302      	adds	r3, #2
 8007a58:	222f      	movs	r2, #47	@ 0x2f
 8007a5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	3303      	adds	r3, #3
 8007a60:	2200      	movs	r2, #0
 8007a62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007a64:	2300      	movs	r3, #0
 8007a66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	371c      	adds	r7, #28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	20005010 	.word	0x20005010

08007a7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007a86:	2200      	movs	r2, #0
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7ff ffaa 	bl	80079e4 <FATFS_LinkDriverEx>
 8007a90:	4603      	mov	r3, r0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
	...

08007a9c <__NVIC_SetPriority>:
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	6039      	str	r1, [r7, #0]
 8007aa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007aa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	db0a      	blt.n	8007ac6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	490c      	ldr	r1, [pc, #48]	@ (8007ae8 <__NVIC_SetPriority+0x4c>)
 8007ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aba:	0112      	lsls	r2, r2, #4
 8007abc:	b2d2      	uxtb	r2, r2
 8007abe:	440b      	add	r3, r1
 8007ac0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007ac4:	e00a      	b.n	8007adc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	b2da      	uxtb	r2, r3
 8007aca:	4908      	ldr	r1, [pc, #32]	@ (8007aec <__NVIC_SetPriority+0x50>)
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	f003 030f 	and.w	r3, r3, #15
 8007ad2:	3b04      	subs	r3, #4
 8007ad4:	0112      	lsls	r2, r2, #4
 8007ad6:	b2d2      	uxtb	r2, r2
 8007ad8:	440b      	add	r3, r1
 8007ada:	761a      	strb	r2, [r3, #24]
}
 8007adc:	bf00      	nop
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr
 8007ae8:	e000e100 	.word	0xe000e100
 8007aec:	e000ed00 	.word	0xe000ed00

08007af0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007af0:	b580      	push	{r7, lr}
 8007af2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007af4:	4b05      	ldr	r3, [pc, #20]	@ (8007b0c <SysTick_Handler+0x1c>)
 8007af6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007af8:	f002 fdac 	bl	800a654 <xTaskGetSchedulerState>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b01      	cmp	r3, #1
 8007b00:	d001      	beq.n	8007b06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007b02:	f003 fca1 	bl	800b448 <xPortSysTickHandler>
  }
}
 8007b06:	bf00      	nop
 8007b08:	bd80      	pop	{r7, pc}
 8007b0a:	bf00      	nop
 8007b0c:	e000e010 	.word	0xe000e010

08007b10 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007b10:	b580      	push	{r7, lr}
 8007b12:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007b14:	2100      	movs	r1, #0
 8007b16:	f06f 0004 	mvn.w	r0, #4
 8007b1a:	f7ff ffbf 	bl	8007a9c <__NVIC_SetPriority>
#endif
}
 8007b1e:	bf00      	nop
 8007b20:	bd80      	pop	{r7, pc}
	...

08007b24 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007b2a:	f3ef 8305 	mrs	r3, IPSR
 8007b2e:	603b      	str	r3, [r7, #0]
  return(result);
 8007b30:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007b36:	f06f 0305 	mvn.w	r3, #5
 8007b3a:	607b      	str	r3, [r7, #4]
 8007b3c:	e00c      	b.n	8007b58 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007b3e:	4b0a      	ldr	r3, [pc, #40]	@ (8007b68 <osKernelInitialize+0x44>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d105      	bne.n	8007b52 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007b46:	4b08      	ldr	r3, [pc, #32]	@ (8007b68 <osKernelInitialize+0x44>)
 8007b48:	2201      	movs	r2, #1
 8007b4a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	607b      	str	r3, [r7, #4]
 8007b50:	e002      	b.n	8007b58 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007b52:	f04f 33ff 	mov.w	r3, #4294967295
 8007b56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007b58:	687b      	ldr	r3, [r7, #4]
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	370c      	adds	r7, #12
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	2000501c 	.word	0x2000501c

08007b6c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 8007b72:	f002 fd6f 	bl	800a654 <xTaskGetSchedulerState>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d004      	beq.n	8007b86 <osKernelGetState+0x1a>
 8007b7c:	2b02      	cmp	r3, #2
 8007b7e:	d105      	bne.n	8007b8c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 8007b80:	2302      	movs	r3, #2
 8007b82:	607b      	str	r3, [r7, #4]
      break;
 8007b84:	e00c      	b.n	8007ba0 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 8007b86:	2303      	movs	r3, #3
 8007b88:	607b      	str	r3, [r7, #4]
      break;
 8007b8a:	e009      	b.n	8007ba0 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 8007b8c:	4b07      	ldr	r3, [pc, #28]	@ (8007bac <osKernelGetState+0x40>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d102      	bne.n	8007b9a <osKernelGetState+0x2e>
        state = osKernelReady;
 8007b94:	2301      	movs	r3, #1
 8007b96:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 8007b98:	e001      	b.n	8007b9e <osKernelGetState+0x32>
        state = osKernelInactive;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	607b      	str	r3, [r7, #4]
      break;
 8007b9e:	bf00      	nop
  }

  return (state);
 8007ba0:	687b      	ldr	r3, [r7, #4]
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3708      	adds	r7, #8
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	bd80      	pop	{r7, pc}
 8007baa:	bf00      	nop
 8007bac:	2000501c 	.word	0x2000501c

08007bb0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007bb6:	f3ef 8305 	mrs	r3, IPSR
 8007bba:	603b      	str	r3, [r7, #0]
  return(result);
 8007bbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d003      	beq.n	8007bca <osKernelStart+0x1a>
    stat = osErrorISR;
 8007bc2:	f06f 0305 	mvn.w	r3, #5
 8007bc6:	607b      	str	r3, [r7, #4]
 8007bc8:	e010      	b.n	8007bec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007bca:	4b0b      	ldr	r3, [pc, #44]	@ (8007bf8 <osKernelStart+0x48>)
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d109      	bne.n	8007be6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007bd2:	f7ff ff9d 	bl	8007b10 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007bd6:	4b08      	ldr	r3, [pc, #32]	@ (8007bf8 <osKernelStart+0x48>)
 8007bd8:	2202      	movs	r2, #2
 8007bda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007bdc:	f002 f898 	bl	8009d10 <vTaskStartScheduler>
      stat = osOK;
 8007be0:	2300      	movs	r3, #0
 8007be2:	607b      	str	r3, [r7, #4]
 8007be4:	e002      	b.n	8007bec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007be6:	f04f 33ff 	mov.w	r3, #4294967295
 8007bea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007bec:	687b      	ldr	r3, [r7, #4]
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	2000501c 	.word	0x2000501c

08007bfc <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b082      	sub	sp, #8
 8007c00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c02:	f3ef 8305 	mrs	r3, IPSR
 8007c06:	603b      	str	r3, [r7, #0]
  return(result);
 8007c08:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d003      	beq.n	8007c16 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8007c0e:	f002 f9ad 	bl	8009f6c <xTaskGetTickCountFromISR>
 8007c12:	6078      	str	r0, [r7, #4]
 8007c14:	e002      	b.n	8007c1c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 8007c16:	f002 f999 	bl	8009f4c <xTaskGetTickCount>
 8007c1a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8007c1c:	687b      	ldr	r3, [r7, #4]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b08e      	sub	sp, #56	@ 0x38
 8007c2a:	af04      	add	r7, sp, #16
 8007c2c:	60f8      	str	r0, [r7, #12]
 8007c2e:	60b9      	str	r1, [r7, #8]
 8007c30:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007c32:	2300      	movs	r3, #0
 8007c34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007c36:	f3ef 8305 	mrs	r3, IPSR
 8007c3a:	617b      	str	r3, [r7, #20]
  return(result);
 8007c3c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d17f      	bne.n	8007d42 <osThreadNew+0x11c>
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d07c      	beq.n	8007d42 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8007c48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007c4c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007c4e:	2318      	movs	r3, #24
 8007c50:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007c52:	2300      	movs	r3, #0
 8007c54:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007c56:	f04f 33ff 	mov.w	r3, #4294967295
 8007c5a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d045      	beq.n	8007cee <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <osThreadNew+0x4a>
        name = attr->name;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	699b      	ldr	r3, [r3, #24]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d002      	beq.n	8007c7e <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007c7e:	69fb      	ldr	r3, [r7, #28]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d008      	beq.n	8007c96 <osThreadNew+0x70>
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	2b38      	cmp	r3, #56	@ 0x38
 8007c88:	d805      	bhi.n	8007c96 <osThreadNew+0x70>
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	f003 0301 	and.w	r3, r3, #1
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <osThreadNew+0x74>
        return (NULL);
 8007c96:	2300      	movs	r3, #0
 8007c98:	e054      	b.n	8007d44 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	695b      	ldr	r3, [r3, #20]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	089b      	lsrs	r3, r3, #2
 8007ca8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00e      	beq.n	8007cd0 <osThreadNew+0xaa>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	2bab      	cmp	r3, #171	@ 0xab
 8007cb8:	d90a      	bls.n	8007cd0 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d006      	beq.n	8007cd0 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d002      	beq.n	8007cd0 <osThreadNew+0xaa>
        mem = 1;
 8007cca:	2301      	movs	r3, #1
 8007ccc:	61bb      	str	r3, [r7, #24]
 8007cce:	e010      	b.n	8007cf2 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	689b      	ldr	r3, [r3, #8]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d10c      	bne.n	8007cf2 <osThreadNew+0xcc>
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	68db      	ldr	r3, [r3, #12]
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d108      	bne.n	8007cf2 <osThreadNew+0xcc>
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	691b      	ldr	r3, [r3, #16]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d104      	bne.n	8007cf2 <osThreadNew+0xcc>
          mem = 0;
 8007ce8:	2300      	movs	r3, #0
 8007cea:	61bb      	str	r3, [r7, #24]
 8007cec:	e001      	b.n	8007cf2 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007cf2:	69bb      	ldr	r3, [r7, #24]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d110      	bne.n	8007d1a <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007d00:	9202      	str	r2, [sp, #8]
 8007d02:	9301      	str	r3, [sp, #4]
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	9300      	str	r3, [sp, #0]
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	6a3a      	ldr	r2, [r7, #32]
 8007d0c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d0e:	68f8      	ldr	r0, [r7, #12]
 8007d10:	f001 fe08 	bl	8009924 <xTaskCreateStatic>
 8007d14:	4603      	mov	r3, r0
 8007d16:	613b      	str	r3, [r7, #16]
 8007d18:	e013      	b.n	8007d42 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d110      	bne.n	8007d42 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007d20:	6a3b      	ldr	r3, [r7, #32]
 8007d22:	b29a      	uxth	r2, r3
 8007d24:	f107 0310 	add.w	r3, r7, #16
 8007d28:	9301      	str	r3, [sp, #4]
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	9300      	str	r3, [sp, #0]
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007d32:	68f8      	ldr	r0, [r7, #12]
 8007d34:	f001 fe56 	bl	80099e4 <xTaskCreate>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	2b01      	cmp	r3, #1
 8007d3c:	d001      	beq.n	8007d42 <osThreadNew+0x11c>
            hTask = NULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007d42:	693b      	ldr	r3, [r7, #16]
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3728      	adds	r7, #40	@ 0x28
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d54:	f3ef 8305 	mrs	r3, IPSR
 8007d58:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d5a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d003      	beq.n	8007d68 <osDelay+0x1c>
    stat = osErrorISR;
 8007d60:	f06f 0305 	mvn.w	r3, #5
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	e007      	b.n	8007d78 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d002      	beq.n	8007d78 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f001 ff96 	bl	8009ca4 <vTaskDelay>
    }
  }

  return (stat);
 8007d78:	68fb      	ldr	r3, [r7, #12]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b088      	sub	sp, #32
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007d8e:	f3ef 8305 	mrs	r3, IPSR
 8007d92:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d94:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d174      	bne.n	8007e84 <osMutexNew+0x102>
    if (attr != NULL) {
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d003      	beq.n	8007da8 <osMutexNew+0x26>
      type = attr->attr_bits;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	685b      	ldr	r3, [r3, #4]
 8007da4:	61bb      	str	r3, [r7, #24]
 8007da6:	e001      	b.n	8007dac <osMutexNew+0x2a>
    } else {
      type = 0U;
 8007da8:	2300      	movs	r3, #0
 8007daa:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d002      	beq.n	8007dbc <osMutexNew+0x3a>
      rmtx = 1U;
 8007db6:	2301      	movs	r3, #1
 8007db8:	617b      	str	r3, [r7, #20]
 8007dba:	e001      	b.n	8007dc0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8007dc0:	69bb      	ldr	r3, [r7, #24]
 8007dc2:	f003 0308 	and.w	r3, r3, #8
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d15c      	bne.n	8007e84 <osMutexNew+0x102>
      mem = -1;
 8007dca:	f04f 33ff 	mov.w	r3, #4294967295
 8007dce:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d015      	beq.n	8007e02 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	689b      	ldr	r3, [r3, #8]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d006      	beq.n	8007dec <osMutexNew+0x6a>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	2b4f      	cmp	r3, #79	@ 0x4f
 8007de4:	d902      	bls.n	8007dec <osMutexNew+0x6a>
          mem = 1;
 8007de6:	2301      	movs	r3, #1
 8007de8:	613b      	str	r3, [r7, #16]
 8007dea:	e00c      	b.n	8007e06 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d108      	bne.n	8007e06 <osMutexNew+0x84>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d104      	bne.n	8007e06 <osMutexNew+0x84>
            mem = 0;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	613b      	str	r3, [r7, #16]
 8007e00:	e001      	b.n	8007e06 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8007e02:	2300      	movs	r3, #0
 8007e04:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	2b01      	cmp	r3, #1
 8007e0a:	d112      	bne.n	8007e32 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d007      	beq.n	8007e22 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	4619      	mov	r1, r3
 8007e18:	2004      	movs	r0, #4
 8007e1a:	f000 fdd8 	bl	80089ce <xQueueCreateMutexStatic>
 8007e1e:	61f8      	str	r0, [r7, #28]
 8007e20:	e016      	b.n	8007e50 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	689b      	ldr	r3, [r3, #8]
 8007e26:	4619      	mov	r1, r3
 8007e28:	2001      	movs	r0, #1
 8007e2a:	f000 fdd0 	bl	80089ce <xQueueCreateMutexStatic>
 8007e2e:	61f8      	str	r0, [r7, #28]
 8007e30:	e00e      	b.n	8007e50 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d10b      	bne.n	8007e50 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d004      	beq.n	8007e48 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8007e3e:	2004      	movs	r0, #4
 8007e40:	f000 fdad 	bl	800899e <xQueueCreateMutex>
 8007e44:	61f8      	str	r0, [r7, #28]
 8007e46:	e003      	b.n	8007e50 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8007e48:	2001      	movs	r0, #1
 8007e4a:	f000 fda8 	bl	800899e <xQueueCreateMutex>
 8007e4e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d00c      	beq.n	8007e70 <osMutexNew+0xee>
        if (attr != NULL) {
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d003      	beq.n	8007e64 <osMutexNew+0xe2>
          name = attr->name;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	60fb      	str	r3, [r7, #12]
 8007e62:	e001      	b.n	8007e68 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8007e64:	2300      	movs	r3, #0
 8007e66:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8007e68:	68f9      	ldr	r1, [r7, #12]
 8007e6a:	69f8      	ldr	r0, [r7, #28]
 8007e6c:	f001 fcd2 	bl	8009814 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d006      	beq.n	8007e84 <osMutexNew+0x102>
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d003      	beq.n	8007e84 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	f043 0301 	orr.w	r3, r3, #1
 8007e82:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8007e84:	69fb      	ldr	r3, [r7, #28]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3720      	adds	r7, #32
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bd80      	pop	{r7, pc}

08007e8e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8007e8e:	b580      	push	{r7, lr}
 8007e90:	b086      	sub	sp, #24
 8007e92:	af00      	add	r7, sp, #0
 8007e94:	6078      	str	r0, [r7, #4]
 8007e96:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f023 0301 	bic.w	r3, r3, #1
 8007e9e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f003 0301 	and.w	r3, r3, #1
 8007ea6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007eac:	f3ef 8305 	mrs	r3, IPSR
 8007eb0:	60bb      	str	r3, [r7, #8]
  return(result);
 8007eb2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d003      	beq.n	8007ec0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8007eb8:	f06f 0305 	mvn.w	r3, #5
 8007ebc:	617b      	str	r3, [r7, #20]
 8007ebe:	e02c      	b.n	8007f1a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d103      	bne.n	8007ece <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8007ec6:	f06f 0303 	mvn.w	r3, #3
 8007eca:	617b      	str	r3, [r7, #20]
 8007ecc:	e025      	b.n	8007f1a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d011      	beq.n	8007ef8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6938      	ldr	r0, [r7, #16]
 8007ed8:	f000 fdc9 	bl	8008a6e <xQueueTakeMutexRecursive>
 8007edc:	4603      	mov	r3, r0
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d01b      	beq.n	8007f1a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d003      	beq.n	8007ef0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8007ee8:	f06f 0301 	mvn.w	r3, #1
 8007eec:	617b      	str	r3, [r7, #20]
 8007eee:	e014      	b.n	8007f1a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007ef0:	f06f 0302 	mvn.w	r3, #2
 8007ef4:	617b      	str	r3, [r7, #20]
 8007ef6:	e010      	b.n	8007f1a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8007ef8:	6839      	ldr	r1, [r7, #0]
 8007efa:	6938      	ldr	r0, [r7, #16]
 8007efc:	f001 f96e 	bl	80091dc <xQueueSemaphoreTake>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d009      	beq.n	8007f1a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8007f0c:	f06f 0301 	mvn.w	r3, #1
 8007f10:	617b      	str	r3, [r7, #20]
 8007f12:	e002      	b.n	8007f1a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8007f14:	f06f 0302 	mvn.w	r3, #2
 8007f18:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8007f1a:	697b      	ldr	r3, [r7, #20]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3718      	adds	r7, #24
 8007f20:	46bd      	mov	sp, r7
 8007f22:	bd80      	pop	{r7, pc}

08007f24 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b086      	sub	sp, #24
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	f023 0301 	bic.w	r3, r3, #1
 8007f32:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f003 0301 	and.w	r3, r3, #1
 8007f3a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f40:	f3ef 8305 	mrs	r3, IPSR
 8007f44:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f46:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d003      	beq.n	8007f54 <osMutexRelease+0x30>
    stat = osErrorISR;
 8007f4c:	f06f 0305 	mvn.w	r3, #5
 8007f50:	617b      	str	r3, [r7, #20]
 8007f52:	e01f      	b.n	8007f94 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d103      	bne.n	8007f62 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8007f5a:	f06f 0303 	mvn.w	r3, #3
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	e018      	b.n	8007f94 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d009      	beq.n	8007f7c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8007f68:	6938      	ldr	r0, [r7, #16]
 8007f6a:	f000 fd4b 	bl	8008a04 <xQueueGiveMutexRecursive>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d00f      	beq.n	8007f94 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007f74:	f06f 0302 	mvn.w	r3, #2
 8007f78:	617b      	str	r3, [r7, #20]
 8007f7a:	e00b      	b.n	8007f94 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	2200      	movs	r2, #0
 8007f80:	2100      	movs	r1, #0
 8007f82:	6938      	ldr	r0, [r7, #16]
 8007f84:	f000 fe18 	bl	8008bb8 <xQueueGenericSend>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d002      	beq.n	8007f94 <osMutexRelease+0x70>
        stat = osErrorResource;
 8007f8e:	f06f 0302 	mvn.w	r3, #2
 8007f92:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8007f94:	697b      	ldr	r3, [r7, #20]
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	3718      	adds	r7, #24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}

08007f9e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8007f9e:	b580      	push	{r7, lr}
 8007fa0:	b08a      	sub	sp, #40	@ 0x28
 8007fa2:	af02      	add	r7, sp, #8
 8007fa4:	60f8      	str	r0, [r7, #12]
 8007fa6:	60b9      	str	r1, [r7, #8]
 8007fa8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8007faa:	2300      	movs	r3, #0
 8007fac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007fae:	f3ef 8305 	mrs	r3, IPSR
 8007fb2:	613b      	str	r3, [r7, #16]
  return(result);
 8007fb4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d175      	bne.n	80080a6 <osSemaphoreNew+0x108>
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d072      	beq.n	80080a6 <osSemaphoreNew+0x108>
 8007fc0:	68ba      	ldr	r2, [r7, #8]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d86e      	bhi.n	80080a6 <osSemaphoreNew+0x108>
    mem = -1;
 8007fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8007fcc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d015      	beq.n	8008000 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	689b      	ldr	r3, [r3, #8]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d006      	beq.n	8007fea <osSemaphoreNew+0x4c>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	2b4f      	cmp	r3, #79	@ 0x4f
 8007fe2:	d902      	bls.n	8007fea <osSemaphoreNew+0x4c>
        mem = 1;
 8007fe4:	2301      	movs	r3, #1
 8007fe6:	61bb      	str	r3, [r7, #24]
 8007fe8:	e00c      	b.n	8008004 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d108      	bne.n	8008004 <osSemaphoreNew+0x66>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68db      	ldr	r3, [r3, #12]
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d104      	bne.n	8008004 <osSemaphoreNew+0x66>
          mem = 0;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	61bb      	str	r3, [r7, #24]
 8007ffe:	e001      	b.n	8008004 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8008000:	2300      	movs	r3, #0
 8008002:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800a:	d04c      	beq.n	80080a6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	2b01      	cmp	r3, #1
 8008010:	d128      	bne.n	8008064 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8008012:	69bb      	ldr	r3, [r7, #24]
 8008014:	2b01      	cmp	r3, #1
 8008016:	d10a      	bne.n	800802e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	689b      	ldr	r3, [r3, #8]
 800801c:	2203      	movs	r2, #3
 800801e:	9200      	str	r2, [sp, #0]
 8008020:	2200      	movs	r2, #0
 8008022:	2100      	movs	r1, #0
 8008024:	2001      	movs	r0, #1
 8008026:	f000 fbc5 	bl	80087b4 <xQueueGenericCreateStatic>
 800802a:	61f8      	str	r0, [r7, #28]
 800802c:	e005      	b.n	800803a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800802e:	2203      	movs	r2, #3
 8008030:	2100      	movs	r1, #0
 8008032:	2001      	movs	r0, #1
 8008034:	f000 fc3b 	bl	80088ae <xQueueGenericCreate>
 8008038:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800803a:	69fb      	ldr	r3, [r7, #28]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d022      	beq.n	8008086 <osSemaphoreNew+0xe8>
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d01f      	beq.n	8008086 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008046:	2300      	movs	r3, #0
 8008048:	2200      	movs	r2, #0
 800804a:	2100      	movs	r1, #0
 800804c:	69f8      	ldr	r0, [r7, #28]
 800804e:	f000 fdb3 	bl	8008bb8 <xQueueGenericSend>
 8008052:	4603      	mov	r3, r0
 8008054:	2b01      	cmp	r3, #1
 8008056:	d016      	beq.n	8008086 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8008058:	69f8      	ldr	r0, [r7, #28]
 800805a:	f001 fa8f 	bl	800957c <vQueueDelete>
            hSemaphore = NULL;
 800805e:	2300      	movs	r3, #0
 8008060:	61fb      	str	r3, [r7, #28]
 8008062:	e010      	b.n	8008086 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	2b01      	cmp	r3, #1
 8008068:	d108      	bne.n	800807c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	461a      	mov	r2, r3
 8008070:	68b9      	ldr	r1, [r7, #8]
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 fd32 	bl	8008adc <xQueueCreateCountingSemaphoreStatic>
 8008078:	61f8      	str	r0, [r7, #28]
 800807a:	e004      	b.n	8008086 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800807c:	68b9      	ldr	r1, [r7, #8]
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 fd65 	bl	8008b4e <xQueueCreateCountingSemaphore>
 8008084:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00c      	beq.n	80080a6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d003      	beq.n	800809a <osSemaphoreNew+0xfc>
          name = attr->name;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	617b      	str	r3, [r7, #20]
 8008098:	e001      	b.n	800809e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800809a:	2300      	movs	r3, #0
 800809c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800809e:	6979      	ldr	r1, [r7, #20]
 80080a0:	69f8      	ldr	r0, [r7, #28]
 80080a2:	f001 fbb7 	bl	8009814 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80080a6:	69fb      	ldr	r3, [r7, #28]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3720      	adds	r7, #32
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b086      	sub	sp, #24
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80080be:	2300      	movs	r3, #0
 80080c0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80080c2:	693b      	ldr	r3, [r7, #16]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d103      	bne.n	80080d0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80080c8:	f06f 0303 	mvn.w	r3, #3
 80080cc:	617b      	str	r3, [r7, #20]
 80080ce:	e039      	b.n	8008144 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080d0:	f3ef 8305 	mrs	r3, IPSR
 80080d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80080d6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d022      	beq.n	8008122 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d003      	beq.n	80080ea <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80080e2:	f06f 0303 	mvn.w	r3, #3
 80080e6:	617b      	str	r3, [r7, #20]
 80080e8:	e02c      	b.n	8008144 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80080ea:	2300      	movs	r3, #0
 80080ec:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80080ee:	f107 0308 	add.w	r3, r7, #8
 80080f2:	461a      	mov	r2, r3
 80080f4:	2100      	movs	r1, #0
 80080f6:	6938      	ldr	r0, [r7, #16]
 80080f8:	f001 f980 	bl	80093fc <xQueueReceiveFromISR>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d003      	beq.n	800810a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8008102:	f06f 0302 	mvn.w	r3, #2
 8008106:	617b      	str	r3, [r7, #20]
 8008108:	e01c      	b.n	8008144 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d019      	beq.n	8008144 <osSemaphoreAcquire+0x94>
 8008110:	4b0f      	ldr	r3, [pc, #60]	@ (8008150 <osSemaphoreAcquire+0xa0>)
 8008112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008116:	601a      	str	r2, [r3, #0]
 8008118:	f3bf 8f4f 	dsb	sy
 800811c:	f3bf 8f6f 	isb	sy
 8008120:	e010      	b.n	8008144 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008122:	6839      	ldr	r1, [r7, #0]
 8008124:	6938      	ldr	r0, [r7, #16]
 8008126:	f001 f859 	bl	80091dc <xQueueSemaphoreTake>
 800812a:	4603      	mov	r3, r0
 800812c:	2b01      	cmp	r3, #1
 800812e:	d009      	beq.n	8008144 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d003      	beq.n	800813e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8008136:	f06f 0301 	mvn.w	r3, #1
 800813a:	617b      	str	r3, [r7, #20]
 800813c:	e002      	b.n	8008144 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800813e:	f06f 0302 	mvn.w	r3, #2
 8008142:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8008144:	697b      	ldr	r3, [r7, #20]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3718      	adds	r7, #24
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	e000ed04 	.word	0xe000ed04

08008154 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008154:	b580      	push	{r7, lr}
 8008156:	b086      	sub	sp, #24
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008160:	2300      	movs	r3, #0
 8008162:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d103      	bne.n	8008172 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800816a:	f06f 0303 	mvn.w	r3, #3
 800816e:	617b      	str	r3, [r7, #20]
 8008170:	e02c      	b.n	80081cc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008172:	f3ef 8305 	mrs	r3, IPSR
 8008176:	60fb      	str	r3, [r7, #12]
  return(result);
 8008178:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800817a:	2b00      	cmp	r3, #0
 800817c:	d01a      	beq.n	80081b4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800817e:	2300      	movs	r3, #0
 8008180:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008182:	f107 0308 	add.w	r3, r7, #8
 8008186:	4619      	mov	r1, r3
 8008188:	6938      	ldr	r0, [r7, #16]
 800818a:	f000 feb5 	bl	8008ef8 <xQueueGiveFromISR>
 800818e:	4603      	mov	r3, r0
 8008190:	2b01      	cmp	r3, #1
 8008192:	d003      	beq.n	800819c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008194:	f06f 0302 	mvn.w	r3, #2
 8008198:	617b      	str	r3, [r7, #20]
 800819a:	e017      	b.n	80081cc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d014      	beq.n	80081cc <osSemaphoreRelease+0x78>
 80081a2:	4b0d      	ldr	r3, [pc, #52]	@ (80081d8 <osSemaphoreRelease+0x84>)
 80081a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081a8:	601a      	str	r2, [r3, #0]
 80081aa:	f3bf 8f4f 	dsb	sy
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	e00b      	b.n	80081cc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80081b4:	2300      	movs	r3, #0
 80081b6:	2200      	movs	r2, #0
 80081b8:	2100      	movs	r1, #0
 80081ba:	6938      	ldr	r0, [r7, #16]
 80081bc:	f000 fcfc 	bl	8008bb8 <xQueueGenericSend>
 80081c0:	4603      	mov	r3, r0
 80081c2:	2b01      	cmp	r3, #1
 80081c4:	d002      	beq.n	80081cc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80081c6:	f06f 0302 	mvn.w	r3, #2
 80081ca:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80081cc:	697b      	ldr	r3, [r7, #20]
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}
 80081d6:	bf00      	nop
 80081d8:	e000ed04 	.word	0xe000ed04

080081dc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80081dc:	b580      	push	{r7, lr}
 80081de:	b086      	sub	sp, #24
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081e8:	f3ef 8305 	mrs	r3, IPSR
 80081ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80081ee:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d003      	beq.n	80081fc <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80081f4:	f06f 0305 	mvn.w	r3, #5
 80081f8:	617b      	str	r3, [r7, #20]
 80081fa:	e00e      	b.n	800821a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d103      	bne.n	800820a <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8008202:	f06f 0303 	mvn.w	r3, #3
 8008206:	617b      	str	r3, [r7, #20]
 8008208:	e007      	b.n	800821a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800820a:	6938      	ldr	r0, [r7, #16]
 800820c:	f001 fb2c 	bl	8009868 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8008210:	2300      	movs	r3, #0
 8008212:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8008214:	6938      	ldr	r0, [r7, #16]
 8008216:	f001 f9b1 	bl	800957c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800821a:	697b      	ldr	r3, [r7, #20]
}
 800821c:	4618      	mov	r0, r3
 800821e:	3718      	adds	r7, #24
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008224:	b580      	push	{r7, lr}
 8008226:	b08a      	sub	sp, #40	@ 0x28
 8008228:	af02      	add	r7, sp, #8
 800822a:	60f8      	str	r0, [r7, #12]
 800822c:	60b9      	str	r1, [r7, #8]
 800822e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008230:	2300      	movs	r3, #0
 8008232:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008234:	f3ef 8305 	mrs	r3, IPSR
 8008238:	613b      	str	r3, [r7, #16]
  return(result);
 800823a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800823c:	2b00      	cmp	r3, #0
 800823e:	d15f      	bne.n	8008300 <osMessageQueueNew+0xdc>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d05c      	beq.n	8008300 <osMessageQueueNew+0xdc>
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d059      	beq.n	8008300 <osMessageQueueNew+0xdc>
    mem = -1;
 800824c:	f04f 33ff 	mov.w	r3, #4294967295
 8008250:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d029      	beq.n	80082ac <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	689b      	ldr	r3, [r3, #8]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d012      	beq.n	8008286 <osMessageQueueNew+0x62>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	2b4f      	cmp	r3, #79	@ 0x4f
 8008266:	d90e      	bls.n	8008286 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00a      	beq.n	8008286 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	695a      	ldr	r2, [r3, #20]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	68b9      	ldr	r1, [r7, #8]
 8008278:	fb01 f303 	mul.w	r3, r1, r3
 800827c:	429a      	cmp	r2, r3
 800827e:	d302      	bcc.n	8008286 <osMessageQueueNew+0x62>
        mem = 1;
 8008280:	2301      	movs	r3, #1
 8008282:	61bb      	str	r3, [r7, #24]
 8008284:	e014      	b.n	80082b0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	689b      	ldr	r3, [r3, #8]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d110      	bne.n	80082b0 <osMessageQueueNew+0x8c>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68db      	ldr	r3, [r3, #12]
 8008292:	2b00      	cmp	r3, #0
 8008294:	d10c      	bne.n	80082b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800829a:	2b00      	cmp	r3, #0
 800829c:	d108      	bne.n	80082b0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d104      	bne.n	80082b0 <osMessageQueueNew+0x8c>
          mem = 0;
 80082a6:	2300      	movs	r3, #0
 80082a8:	61bb      	str	r3, [r7, #24]
 80082aa:	e001      	b.n	80082b0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80082ac:	2300      	movs	r3, #0
 80082ae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80082b0:	69bb      	ldr	r3, [r7, #24]
 80082b2:	2b01      	cmp	r3, #1
 80082b4:	d10b      	bne.n	80082ce <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	691a      	ldr	r2, [r3, #16]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	2100      	movs	r1, #0
 80082c0:	9100      	str	r1, [sp, #0]
 80082c2:	68b9      	ldr	r1, [r7, #8]
 80082c4:	68f8      	ldr	r0, [r7, #12]
 80082c6:	f000 fa75 	bl	80087b4 <xQueueGenericCreateStatic>
 80082ca:	61f8      	str	r0, [r7, #28]
 80082cc:	e008      	b.n	80082e0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80082ce:	69bb      	ldr	r3, [r7, #24]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d105      	bne.n	80082e0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80082d4:	2200      	movs	r2, #0
 80082d6:	68b9      	ldr	r1, [r7, #8]
 80082d8:	68f8      	ldr	r0, [r7, #12]
 80082da:	f000 fae8 	bl	80088ae <xQueueGenericCreate>
 80082de:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80082e0:	69fb      	ldr	r3, [r7, #28]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00c      	beq.n	8008300 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d003      	beq.n	80082f4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	617b      	str	r3, [r7, #20]
 80082f2:	e001      	b.n	80082f8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80082f4:	2300      	movs	r3, #0
 80082f6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80082f8:	6979      	ldr	r1, [r7, #20]
 80082fa:	69f8      	ldr	r0, [r7, #28]
 80082fc:	f001 fa8a 	bl	8009814 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008300:	69fb      	ldr	r3, [r7, #28]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3720      	adds	r7, #32
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
	...

0800830c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800830c:	b580      	push	{r7, lr}
 800830e:	b088      	sub	sp, #32
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	603b      	str	r3, [r7, #0]
 8008318:	4613      	mov	r3, r2
 800831a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008320:	2300      	movs	r3, #0
 8008322:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008324:	f3ef 8305 	mrs	r3, IPSR
 8008328:	617b      	str	r3, [r7, #20]
  return(result);
 800832a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800832c:	2b00      	cmp	r3, #0
 800832e:	d028      	beq.n	8008382 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008330:	69bb      	ldr	r3, [r7, #24]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d005      	beq.n	8008342 <osMessageQueuePut+0x36>
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <osMessageQueuePut+0x36>
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008342:	f06f 0303 	mvn.w	r3, #3
 8008346:	61fb      	str	r3, [r7, #28]
 8008348:	e038      	b.n	80083bc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800834a:	2300      	movs	r3, #0
 800834c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800834e:	f107 0210 	add.w	r2, r7, #16
 8008352:	2300      	movs	r3, #0
 8008354:	68b9      	ldr	r1, [r7, #8]
 8008356:	69b8      	ldr	r0, [r7, #24]
 8008358:	f000 fd30 	bl	8008dbc <xQueueGenericSendFromISR>
 800835c:	4603      	mov	r3, r0
 800835e:	2b01      	cmp	r3, #1
 8008360:	d003      	beq.n	800836a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008362:	f06f 0302 	mvn.w	r3, #2
 8008366:	61fb      	str	r3, [r7, #28]
 8008368:	e028      	b.n	80083bc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d025      	beq.n	80083bc <osMessageQueuePut+0xb0>
 8008370:	4b15      	ldr	r3, [pc, #84]	@ (80083c8 <osMessageQueuePut+0xbc>)
 8008372:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008376:	601a      	str	r2, [r3, #0]
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	e01c      	b.n	80083bc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008382:	69bb      	ldr	r3, [r7, #24]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d002      	beq.n	800838e <osMessageQueuePut+0x82>
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d103      	bne.n	8008396 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800838e:	f06f 0303 	mvn.w	r3, #3
 8008392:	61fb      	str	r3, [r7, #28]
 8008394:	e012      	b.n	80083bc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008396:	2300      	movs	r3, #0
 8008398:	683a      	ldr	r2, [r7, #0]
 800839a:	68b9      	ldr	r1, [r7, #8]
 800839c:	69b8      	ldr	r0, [r7, #24]
 800839e:	f000 fc0b 	bl	8008bb8 <xQueueGenericSend>
 80083a2:	4603      	mov	r3, r0
 80083a4:	2b01      	cmp	r3, #1
 80083a6:	d009      	beq.n	80083bc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80083ae:	f06f 0301 	mvn.w	r3, #1
 80083b2:	61fb      	str	r3, [r7, #28]
 80083b4:	e002      	b.n	80083bc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80083b6:	f06f 0302 	mvn.w	r3, #2
 80083ba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80083bc:	69fb      	ldr	r3, [r7, #28]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3720      	adds	r7, #32
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	e000ed04 	.word	0xe000ed04

080083cc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b088      	sub	sp, #32
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	60f8      	str	r0, [r7, #12]
 80083d4:	60b9      	str	r1, [r7, #8]
 80083d6:	607a      	str	r2, [r7, #4]
 80083d8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80083de:	2300      	movs	r3, #0
 80083e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80083e2:	f3ef 8305 	mrs	r3, IPSR
 80083e6:	617b      	str	r3, [r7, #20]
  return(result);
 80083e8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d028      	beq.n	8008440 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80083ee:	69bb      	ldr	r3, [r7, #24]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d005      	beq.n	8008400 <osMessageQueueGet+0x34>
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d002      	beq.n	8008400 <osMessageQueueGet+0x34>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d003      	beq.n	8008408 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008400:	f06f 0303 	mvn.w	r3, #3
 8008404:	61fb      	str	r3, [r7, #28]
 8008406:	e037      	b.n	8008478 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008408:	2300      	movs	r3, #0
 800840a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800840c:	f107 0310 	add.w	r3, r7, #16
 8008410:	461a      	mov	r2, r3
 8008412:	68b9      	ldr	r1, [r7, #8]
 8008414:	69b8      	ldr	r0, [r7, #24]
 8008416:	f000 fff1 	bl	80093fc <xQueueReceiveFromISR>
 800841a:	4603      	mov	r3, r0
 800841c:	2b01      	cmp	r3, #1
 800841e:	d003      	beq.n	8008428 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008420:	f06f 0302 	mvn.w	r3, #2
 8008424:	61fb      	str	r3, [r7, #28]
 8008426:	e027      	b.n	8008478 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d024      	beq.n	8008478 <osMessageQueueGet+0xac>
 800842e:	4b15      	ldr	r3, [pc, #84]	@ (8008484 <osMessageQueueGet+0xb8>)
 8008430:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008434:	601a      	str	r2, [r3, #0]
 8008436:	f3bf 8f4f 	dsb	sy
 800843a:	f3bf 8f6f 	isb	sy
 800843e:	e01b      	b.n	8008478 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d002      	beq.n	800844c <osMessageQueueGet+0x80>
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d103      	bne.n	8008454 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800844c:	f06f 0303 	mvn.w	r3, #3
 8008450:	61fb      	str	r3, [r7, #28]
 8008452:	e011      	b.n	8008478 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008454:	683a      	ldr	r2, [r7, #0]
 8008456:	68b9      	ldr	r1, [r7, #8]
 8008458:	69b8      	ldr	r0, [r7, #24]
 800845a:	f000 fddd 	bl	8009018 <xQueueReceive>
 800845e:	4603      	mov	r3, r0
 8008460:	2b01      	cmp	r3, #1
 8008462:	d009      	beq.n	8008478 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800846a:	f06f 0301 	mvn.w	r3, #1
 800846e:	61fb      	str	r3, [r7, #28]
 8008470:	e002      	b.n	8008478 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008472:	f06f 0302 	mvn.w	r3, #2
 8008476:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008478:	69fb      	ldr	r3, [r7, #28]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3720      	adds	r7, #32
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}
 8008482:	bf00      	nop
 8008484:	e000ed04 	.word	0xe000ed04

08008488 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d102      	bne.n	80084a0 <osMessageQueueGetCount+0x18>
    count = 0U;
 800849a:	2300      	movs	r3, #0
 800849c:	617b      	str	r3, [r7, #20]
 800849e:	e00e      	b.n	80084be <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084a0:	f3ef 8305 	mrs	r3, IPSR
 80084a4:	60fb      	str	r3, [r7, #12]
  return(result);
 80084a6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d004      	beq.n	80084b6 <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80084ac:	6938      	ldr	r0, [r7, #16]
 80084ae:	f001 f846 	bl	800953e <uxQueueMessagesWaitingFromISR>
 80084b2:	6178      	str	r0, [r7, #20]
 80084b4:	e003      	b.n	80084be <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80084b6:	6938      	ldr	r0, [r7, #16]
 80084b8:	f001 f822 	bl	8009500 <uxQueueMessagesWaiting>
 80084bc:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 80084be:	697b      	ldr	r3, [r7, #20]
}
 80084c0:	4618      	mov	r0, r3
 80084c2:	3718      	adds	r7, #24
 80084c4:	46bd      	mov	sp, r7
 80084c6:	bd80      	pop	{r7, pc}

080084c8 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b086      	sub	sp, #24
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80084d4:	f3ef 8305 	mrs	r3, IPSR
 80084d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80084da:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d003      	beq.n	80084e8 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 80084e0:	f06f 0305 	mvn.w	r3, #5
 80084e4:	617b      	str	r3, [r7, #20]
 80084e6:	e00e      	b.n	8008506 <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 80084e8:	693b      	ldr	r3, [r7, #16]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d103      	bne.n	80084f6 <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 80084ee:	f06f 0303 	mvn.w	r3, #3
 80084f2:	617b      	str	r3, [r7, #20]
 80084f4:	e007      	b.n	8008506 <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 80084f6:	6938      	ldr	r0, [r7, #16]
 80084f8:	f001 f9b6 	bl	8009868 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8008500:	6938      	ldr	r0, [r7, #16]
 8008502:	f001 f83b 	bl	800957c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8008506:	697b      	ldr	r3, [r7, #20]
}
 8008508:	4618      	mov	r0, r3
 800850a:	3718      	adds	r7, #24
 800850c:	46bd      	mov	sp, r7
 800850e:	bd80      	pop	{r7, pc}

08008510 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	4a07      	ldr	r2, [pc, #28]	@ (800853c <vApplicationGetIdleTaskMemory+0x2c>)
 8008520:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	4a06      	ldr	r2, [pc, #24]	@ (8008540 <vApplicationGetIdleTaskMemory+0x30>)
 8008526:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800852e:	601a      	str	r2, [r3, #0]
}
 8008530:	bf00      	nop
 8008532:	3714      	adds	r7, #20
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	20005020 	.word	0x20005020
 8008540:	200050cc 	.word	0x200050cc

08008544 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008544:	b480      	push	{r7}
 8008546:	b085      	sub	sp, #20
 8008548:	af00      	add	r7, sp, #0
 800854a:	60f8      	str	r0, [r7, #12]
 800854c:	60b9      	str	r1, [r7, #8]
 800854e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	4a07      	ldr	r2, [pc, #28]	@ (8008570 <vApplicationGetTimerTaskMemory+0x2c>)
 8008554:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	4a06      	ldr	r2, [pc, #24]	@ (8008574 <vApplicationGetTimerTaskMemory+0x30>)
 800855a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008562:	601a      	str	r2, [r3, #0]
}
 8008564:	bf00      	nop
 8008566:	3714      	adds	r7, #20
 8008568:	46bd      	mov	sp, r7
 800856a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856e:	4770      	bx	lr
 8008570:	200058cc 	.word	0x200058cc
 8008574:	20005978 	.word	0x20005978

08008578 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f103 0208 	add.w	r2, r3, #8
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	f04f 32ff 	mov.w	r2, #4294967295
 8008590:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f103 0208 	add.w	r2, r3, #8
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f103 0208 	add.w	r2, r3, #8
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80085b8:	b480      	push	{r7}
 80085ba:	b083      	sub	sp, #12
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085c6:	bf00      	nop
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d0:	4770      	bx	lr

080085d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085d2:	b480      	push	{r7}
 80085d4:	b085      	sub	sp, #20
 80085d6:	af00      	add	r7, sp, #0
 80085d8:	6078      	str	r0, [r7, #4]
 80085da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	68fa      	ldr	r2, [r7, #12]
 80085e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	689a      	ldr	r2, [r3, #8]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	689b      	ldr	r3, [r3, #8]
 80085f4:	683a      	ldr	r2, [r7, #0]
 80085f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	683a      	ldr	r2, [r7, #0]
 80085fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	1c5a      	adds	r2, r3, #1
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	601a      	str	r2, [r3, #0]
}
 800860e:	bf00      	nop
 8008610:	3714      	adds	r7, #20
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800861a:	b480      	push	{r7}
 800861c:	b085      	sub	sp, #20
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008624:	683b      	ldr	r3, [r7, #0]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800862a:	68bb      	ldr	r3, [r7, #8]
 800862c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008630:	d103      	bne.n	800863a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	e00c      	b.n	8008654 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	3308      	adds	r3, #8
 800863e:	60fb      	str	r3, [r7, #12]
 8008640:	e002      	b.n	8008648 <vListInsert+0x2e>
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	60fb      	str	r3, [r7, #12]
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	429a      	cmp	r2, r3
 8008652:	d2f6      	bcs.n	8008642 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	685a      	ldr	r2, [r3, #4]
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	683a      	ldr	r2, [r7, #0]
 8008662:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	683a      	ldr	r2, [r7, #0]
 800866e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	687a      	ldr	r2, [r7, #4]
 8008674:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	601a      	str	r2, [r3, #0]
}
 8008680:	bf00      	nop
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800868c:	b480      	push	{r7}
 800868e:	b085      	sub	sp, #20
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	691b      	ldr	r3, [r3, #16]
 8008698:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	687a      	ldr	r2, [r7, #4]
 80086a0:	6892      	ldr	r2, [r2, #8]
 80086a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	689b      	ldr	r3, [r3, #8]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	6852      	ldr	r2, [r2, #4]
 80086ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	429a      	cmp	r2, r3
 80086b6:	d103      	bne.n	80086c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689a      	ldr	r2, [r3, #8]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	1e5a      	subs	r2, r3, #1
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
}
 80086d4:	4618      	mov	r0, r3
 80086d6:	3714      	adds	r7, #20
 80086d8:	46bd      	mov	sp, r7
 80086da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086de:	4770      	bx	lr

080086e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b084      	sub	sp, #16
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d10b      	bne.n	800870c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008706:	bf00      	nop
 8008708:	bf00      	nop
 800870a:	e7fd      	b.n	8008708 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800870c:	f002 fe0c 	bl	800b328 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008718:	68f9      	ldr	r1, [r7, #12]
 800871a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800871c:	fb01 f303 	mul.w	r3, r1, r3
 8008720:	441a      	add	r2, r3
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	2200      	movs	r2, #0
 800872a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	681a      	ldr	r2, [r3, #0]
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	681a      	ldr	r2, [r3, #0]
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800873c:	3b01      	subs	r3, #1
 800873e:	68f9      	ldr	r1, [r7, #12]
 8008740:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008742:	fb01 f303 	mul.w	r3, r1, r3
 8008746:	441a      	add	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	22ff      	movs	r2, #255	@ 0xff
 8008750:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	22ff      	movs	r2, #255	@ 0xff
 8008758:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d114      	bne.n	800878c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d01a      	beq.n	80087a0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	3310      	adds	r3, #16
 800876e:	4618      	mov	r0, r3
 8008770:	f001 fd9a 	bl	800a2a8 <xTaskRemoveFromEventList>
 8008774:	4603      	mov	r3, r0
 8008776:	2b00      	cmp	r3, #0
 8008778:	d012      	beq.n	80087a0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800877a:	4b0d      	ldr	r3, [pc, #52]	@ (80087b0 <xQueueGenericReset+0xd0>)
 800877c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008780:	601a      	str	r2, [r3, #0]
 8008782:	f3bf 8f4f 	dsb	sy
 8008786:	f3bf 8f6f 	isb	sy
 800878a:	e009      	b.n	80087a0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	3310      	adds	r3, #16
 8008790:	4618      	mov	r0, r3
 8008792:	f7ff fef1 	bl	8008578 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	3324      	adds	r3, #36	@ 0x24
 800879a:	4618      	mov	r0, r3
 800879c:	f7ff feec 	bl	8008578 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80087a0:	f002 fdf4 	bl	800b38c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80087a4:	2301      	movs	r3, #1
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	e000ed04 	.word	0xe000ed04

080087b4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b08e      	sub	sp, #56	@ 0x38
 80087b8:	af02      	add	r7, sp, #8
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10b      	bne.n	80087e0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80087c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087cc:	f383 8811 	msr	BASEPRI, r3
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	f3bf 8f4f 	dsb	sy
 80087d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80087da:	bf00      	nop
 80087dc:	bf00      	nop
 80087de:	e7fd      	b.n	80087dc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10b      	bne.n	80087fe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80087e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80087f8:	bf00      	nop
 80087fa:	bf00      	nop
 80087fc:	e7fd      	b.n	80087fa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d002      	beq.n	800880a <xQueueGenericCreateStatic+0x56>
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d001      	beq.n	800880e <xQueueGenericCreateStatic+0x5a>
 800880a:	2301      	movs	r3, #1
 800880c:	e000      	b.n	8008810 <xQueueGenericCreateStatic+0x5c>
 800880e:	2300      	movs	r3, #0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d10b      	bne.n	800882c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008818:	f383 8811 	msr	BASEPRI, r3
 800881c:	f3bf 8f6f 	isb	sy
 8008820:	f3bf 8f4f 	dsb	sy
 8008824:	623b      	str	r3, [r7, #32]
}
 8008826:	bf00      	nop
 8008828:	bf00      	nop
 800882a:	e7fd      	b.n	8008828 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d102      	bne.n	8008838 <xQueueGenericCreateStatic+0x84>
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d101      	bne.n	800883c <xQueueGenericCreateStatic+0x88>
 8008838:	2301      	movs	r3, #1
 800883a:	e000      	b.n	800883e <xQueueGenericCreateStatic+0x8a>
 800883c:	2300      	movs	r3, #0
 800883e:	2b00      	cmp	r3, #0
 8008840:	d10b      	bne.n	800885a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8008842:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008846:	f383 8811 	msr	BASEPRI, r3
 800884a:	f3bf 8f6f 	isb	sy
 800884e:	f3bf 8f4f 	dsb	sy
 8008852:	61fb      	str	r3, [r7, #28]
}
 8008854:	bf00      	nop
 8008856:	bf00      	nop
 8008858:	e7fd      	b.n	8008856 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800885a:	2350      	movs	r3, #80	@ 0x50
 800885c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2b50      	cmp	r3, #80	@ 0x50
 8008862:	d00b      	beq.n	800887c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8008864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	61bb      	str	r3, [r7, #24]
}
 8008876:	bf00      	nop
 8008878:	bf00      	nop
 800887a:	e7fd      	b.n	8008878 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800887c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8008882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008884:	2b00      	cmp	r3, #0
 8008886:	d00d      	beq.n	80088a4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800888a:	2201      	movs	r2, #1
 800888c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008890:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008896:	9300      	str	r3, [sp, #0]
 8008898:	4613      	mov	r3, r2
 800889a:	687a      	ldr	r2, [r7, #4]
 800889c:	68b9      	ldr	r1, [r7, #8]
 800889e:	68f8      	ldr	r0, [r7, #12]
 80088a0:	f000 f840 	bl	8008924 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80088a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3730      	adds	r7, #48	@ 0x30
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b08a      	sub	sp, #40	@ 0x28
 80088b2:	af02      	add	r7, sp, #8
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	60b9      	str	r1, [r7, #8]
 80088b8:	4613      	mov	r3, r2
 80088ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d10b      	bne.n	80088da <xQueueGenericCreate+0x2c>
	__asm volatile
 80088c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088c6:	f383 8811 	msr	BASEPRI, r3
 80088ca:	f3bf 8f6f 	isb	sy
 80088ce:	f3bf 8f4f 	dsb	sy
 80088d2:	613b      	str	r3, [r7, #16]
}
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop
 80088d8:	e7fd      	b.n	80088d6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	68ba      	ldr	r2, [r7, #8]
 80088de:	fb02 f303 	mul.w	r3, r2, r3
 80088e2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	3350      	adds	r3, #80	@ 0x50
 80088e8:	4618      	mov	r0, r3
 80088ea:	f002 fe3f 	bl	800b56c <pvPortMalloc>
 80088ee:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d011      	beq.n	800891a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	3350      	adds	r3, #80	@ 0x50
 80088fe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	2200      	movs	r2, #0
 8008904:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008908:	79fa      	ldrb	r2, [r7, #7]
 800890a:	69bb      	ldr	r3, [r7, #24]
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	4613      	mov	r3, r2
 8008910:	697a      	ldr	r2, [r7, #20]
 8008912:	68b9      	ldr	r1, [r7, #8]
 8008914:	68f8      	ldr	r0, [r7, #12]
 8008916:	f000 f805 	bl	8008924 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800891a:	69bb      	ldr	r3, [r7, #24]
	}
 800891c:	4618      	mov	r0, r3
 800891e:	3720      	adds	r7, #32
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	60f8      	str	r0, [r7, #12]
 800892c:	60b9      	str	r1, [r7, #8]
 800892e:	607a      	str	r2, [r7, #4]
 8008930:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d103      	bne.n	8008940 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008938:	69bb      	ldr	r3, [r7, #24]
 800893a:	69ba      	ldr	r2, [r7, #24]
 800893c:	601a      	str	r2, [r3, #0]
 800893e:	e002      	b.n	8008946 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008946:	69bb      	ldr	r3, [r7, #24]
 8008948:	68fa      	ldr	r2, [r7, #12]
 800894a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800894c:	69bb      	ldr	r3, [r7, #24]
 800894e:	68ba      	ldr	r2, [r7, #8]
 8008950:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008952:	2101      	movs	r1, #1
 8008954:	69b8      	ldr	r0, [r7, #24]
 8008956:	f7ff fec3 	bl	80086e0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	78fa      	ldrb	r2, [r7, #3]
 800895e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008962:	bf00      	nop
 8008964:	3710      	adds	r7, #16
 8008966:	46bd      	mov	sp, r7
 8008968:	bd80      	pop	{r7, pc}

0800896a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800896a:	b580      	push	{r7, lr}
 800896c:	b082      	sub	sp, #8
 800896e:	af00      	add	r7, sp, #0
 8008970:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00e      	beq.n	8008996 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	2200      	movs	r2, #0
 800897c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2200      	movs	r2, #0
 8008988:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800898a:	2300      	movs	r3, #0
 800898c:	2200      	movs	r2, #0
 800898e:	2100      	movs	r1, #0
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f000 f911 	bl	8008bb8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8008996:	bf00      	nop
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b086      	sub	sp, #24
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	4603      	mov	r3, r0
 80089a6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80089a8:	2301      	movs	r3, #1
 80089aa:	617b      	str	r3, [r7, #20]
 80089ac:	2300      	movs	r3, #0
 80089ae:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80089b0:	79fb      	ldrb	r3, [r7, #7]
 80089b2:	461a      	mov	r2, r3
 80089b4:	6939      	ldr	r1, [r7, #16]
 80089b6:	6978      	ldr	r0, [r7, #20]
 80089b8:	f7ff ff79 	bl	80088ae <xQueueGenericCreate>
 80089bc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80089be:	68f8      	ldr	r0, [r7, #12]
 80089c0:	f7ff ffd3 	bl	800896a <prvInitialiseMutex>

		return xNewQueue;
 80089c4:	68fb      	ldr	r3, [r7, #12]
	}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3718      	adds	r7, #24
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}

080089ce <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80089ce:	b580      	push	{r7, lr}
 80089d0:	b088      	sub	sp, #32
 80089d2:	af02      	add	r7, sp, #8
 80089d4:	4603      	mov	r3, r0
 80089d6:	6039      	str	r1, [r7, #0]
 80089d8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80089da:	2301      	movs	r3, #1
 80089dc:	617b      	str	r3, [r7, #20]
 80089de:	2300      	movs	r3, #0
 80089e0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80089e2:	79fb      	ldrb	r3, [r7, #7]
 80089e4:	9300      	str	r3, [sp, #0]
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	2200      	movs	r2, #0
 80089ea:	6939      	ldr	r1, [r7, #16]
 80089ec:	6978      	ldr	r0, [r7, #20]
 80089ee:	f7ff fee1 	bl	80087b4 <xQueueGenericCreateStatic>
 80089f2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80089f4:	68f8      	ldr	r0, [r7, #12]
 80089f6:	f7ff ffb8 	bl	800896a <prvInitialiseMutex>

		return xNewQueue;
 80089fa:	68fb      	ldr	r3, [r7, #12]
	}
 80089fc:	4618      	mov	r0, r3
 80089fe:	3718      	adds	r7, #24
 8008a00:	46bd      	mov	sp, r7
 8008a02:	bd80      	pop	{r7, pc}

08008a04 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8008a04:	b590      	push	{r4, r7, lr}
 8008a06:	b087      	sub	sp, #28
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008a10:	693b      	ldr	r3, [r7, #16]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d10b      	bne.n	8008a2e <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8008a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a1a:	f383 8811 	msr	BASEPRI, r3
 8008a1e:	f3bf 8f6f 	isb	sy
 8008a22:	f3bf 8f4f 	dsb	sy
 8008a26:	60fb      	str	r3, [r7, #12]
}
 8008a28:	bf00      	nop
 8008a2a:	bf00      	nop
 8008a2c:	e7fd      	b.n	8008a2a <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	689c      	ldr	r4, [r3, #8]
 8008a32:	f001 fdff 	bl	800a634 <xTaskGetCurrentTaskHandle>
 8008a36:	4603      	mov	r3, r0
 8008a38:	429c      	cmp	r4, r3
 8008a3a:	d111      	bne.n	8008a60 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8008a3c:	693b      	ldr	r3, [r7, #16]
 8008a3e:	68db      	ldr	r3, [r3, #12]
 8008a40:	1e5a      	subs	r2, r3, #1
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d105      	bne.n	8008a5a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8008a4e:	2300      	movs	r3, #0
 8008a50:	2200      	movs	r2, #0
 8008a52:	2100      	movs	r1, #0
 8008a54:	6938      	ldr	r0, [r7, #16]
 8008a56:	f000 f8af 	bl	8008bb8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	617b      	str	r3, [r7, #20]
 8008a5e:	e001      	b.n	8008a64 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8008a60:	2300      	movs	r3, #0
 8008a62:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8008a64:	697b      	ldr	r3, [r7, #20]
	}
 8008a66:	4618      	mov	r0, r3
 8008a68:	371c      	adds	r7, #28
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd90      	pop	{r4, r7, pc}

08008a6e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8008a6e:	b590      	push	{r4, r7, lr}
 8008a70:	b087      	sub	sp, #28
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d10b      	bne.n	8008a9a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	60fb      	str	r3, [r7, #12]
}
 8008a94:	bf00      	nop
 8008a96:	bf00      	nop
 8008a98:	e7fd      	b.n	8008a96 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	689c      	ldr	r4, [r3, #8]
 8008a9e:	f001 fdc9 	bl	800a634 <xTaskGetCurrentTaskHandle>
 8008aa2:	4603      	mov	r3, r0
 8008aa4:	429c      	cmp	r4, r3
 8008aa6:	d107      	bne.n	8008ab8 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	68db      	ldr	r3, [r3, #12]
 8008aac:	1c5a      	adds	r2, r3, #1
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	617b      	str	r3, [r7, #20]
 8008ab6:	e00c      	b.n	8008ad2 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8008ab8:	6839      	ldr	r1, [r7, #0]
 8008aba:	6938      	ldr	r0, [r7, #16]
 8008abc:	f000 fb8e 	bl	80091dc <xQueueSemaphoreTake>
 8008ac0:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d004      	beq.n	8008ad2 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8008ac8:	693b      	ldr	r3, [r7, #16]
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	1c5a      	adds	r2, r3, #1
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8008ad2:	697b      	ldr	r3, [r7, #20]
	}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	371c      	adds	r7, #28
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd90      	pop	{r4, r7, pc}

08008adc <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b08a      	sub	sp, #40	@ 0x28
 8008ae0:	af02      	add	r7, sp, #8
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10b      	bne.n	8008b06 <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 8008aee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008af2:	f383 8811 	msr	BASEPRI, r3
 8008af6:	f3bf 8f6f 	isb	sy
 8008afa:	f3bf 8f4f 	dsb	sy
 8008afe:	61bb      	str	r3, [r7, #24]
}
 8008b00:	bf00      	nop
 8008b02:	bf00      	nop
 8008b04:	e7fd      	b.n	8008b02 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d90b      	bls.n	8008b26 <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 8008b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b12:	f383 8811 	msr	BASEPRI, r3
 8008b16:	f3bf 8f6f 	isb	sy
 8008b1a:	f3bf 8f4f 	dsb	sy
 8008b1e:	617b      	str	r3, [r7, #20]
}
 8008b20:	bf00      	nop
 8008b22:	bf00      	nop
 8008b24:	e7fd      	b.n	8008b22 <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008b26:	2302      	movs	r3, #2
 8008b28:	9300      	str	r3, [sp, #0]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	2100      	movs	r1, #0
 8008b30:	68f8      	ldr	r0, [r7, #12]
 8008b32:	f7ff fe3f 	bl	80087b4 <xQueueGenericCreateStatic>
 8008b36:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d002      	beq.n	8008b44 <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008b44:	69fb      	ldr	r3, [r7, #28]
	}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3720      	adds	r7, #32
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b086      	sub	sp, #24
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d10b      	bne.n	8008b76 <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 8008b5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	613b      	str	r3, [r7, #16]
}
 8008b70:	bf00      	nop
 8008b72:	bf00      	nop
 8008b74:	e7fd      	b.n	8008b72 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8008b76:	683a      	ldr	r2, [r7, #0]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	429a      	cmp	r2, r3
 8008b7c:	d90b      	bls.n	8008b96 <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	60fb      	str	r3, [r7, #12]
}
 8008b90:	bf00      	nop
 8008b92:	bf00      	nop
 8008b94:	e7fd      	b.n	8008b92 <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8008b96:	2202      	movs	r2, #2
 8008b98:	2100      	movs	r1, #0
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f7ff fe87 	bl	80088ae <xQueueGenericCreate>
 8008ba0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8008ba2:	697b      	ldr	r3, [r7, #20]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	683a      	ldr	r2, [r7, #0]
 8008bac:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8008bae:	697b      	ldr	r3, [r7, #20]
	}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3718      	adds	r7, #24
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008bb8:	b580      	push	{r7, lr}
 8008bba:	b08e      	sub	sp, #56	@ 0x38
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
 8008bc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10b      	bne.n	8008bec <xQueueGenericSend+0x34>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008be6:	bf00      	nop
 8008be8:	bf00      	nop
 8008bea:	e7fd      	b.n	8008be8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d103      	bne.n	8008bfa <xQueueGenericSend+0x42>
 8008bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d101      	bne.n	8008bfe <xQueueGenericSend+0x46>
 8008bfa:	2301      	movs	r3, #1
 8008bfc:	e000      	b.n	8008c00 <xQueueGenericSend+0x48>
 8008bfe:	2300      	movs	r3, #0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d10b      	bne.n	8008c1c <xQueueGenericSend+0x64>
	__asm volatile
 8008c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008c16:	bf00      	nop
 8008c18:	bf00      	nop
 8008c1a:	e7fd      	b.n	8008c18 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	2b02      	cmp	r3, #2
 8008c20:	d103      	bne.n	8008c2a <xQueueGenericSend+0x72>
 8008c22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c26:	2b01      	cmp	r3, #1
 8008c28:	d101      	bne.n	8008c2e <xQueueGenericSend+0x76>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	e000      	b.n	8008c30 <xQueueGenericSend+0x78>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d10b      	bne.n	8008c4c <xQueueGenericSend+0x94>
	__asm volatile
 8008c34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c38:	f383 8811 	msr	BASEPRI, r3
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f3bf 8f4f 	dsb	sy
 8008c44:	623b      	str	r3, [r7, #32]
}
 8008c46:	bf00      	nop
 8008c48:	bf00      	nop
 8008c4a:	e7fd      	b.n	8008c48 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008c4c:	f001 fd02 	bl	800a654 <xTaskGetSchedulerState>
 8008c50:	4603      	mov	r3, r0
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d102      	bne.n	8008c5c <xQueueGenericSend+0xa4>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d101      	bne.n	8008c60 <xQueueGenericSend+0xa8>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e000      	b.n	8008c62 <xQueueGenericSend+0xaa>
 8008c60:	2300      	movs	r3, #0
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d10b      	bne.n	8008c7e <xQueueGenericSend+0xc6>
	__asm volatile
 8008c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	61fb      	str	r3, [r7, #28]
}
 8008c78:	bf00      	nop
 8008c7a:	bf00      	nop
 8008c7c:	e7fd      	b.n	8008c7a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008c7e:	f002 fb53 	bl	800b328 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008c88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008c8a:	429a      	cmp	r2, r3
 8008c8c:	d302      	bcc.n	8008c94 <xQueueGenericSend+0xdc>
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2b02      	cmp	r3, #2
 8008c92:	d129      	bne.n	8008ce8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008c94:	683a      	ldr	r2, [r7, #0]
 8008c96:	68b9      	ldr	r1, [r7, #8]
 8008c98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008c9a:	f000 fcab 	bl	80095f4 <prvCopyDataToQueue>
 8008c9e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d010      	beq.n	8008cca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ca8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008caa:	3324      	adds	r3, #36	@ 0x24
 8008cac:	4618      	mov	r0, r3
 8008cae:	f001 fafb 	bl	800a2a8 <xTaskRemoveFromEventList>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d013      	beq.n	8008ce0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8008db8 <xQueueGenericSend+0x200>)
 8008cba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cbe:	601a      	str	r2, [r3, #0]
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	f3bf 8f6f 	isb	sy
 8008cc8:	e00a      	b.n	8008ce0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008cca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d007      	beq.n	8008ce0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008cd0:	4b39      	ldr	r3, [pc, #228]	@ (8008db8 <xQueueGenericSend+0x200>)
 8008cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008cd6:	601a      	str	r2, [r3, #0]
 8008cd8:	f3bf 8f4f 	dsb	sy
 8008cdc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ce0:	f002 fb54 	bl	800b38c <vPortExitCritical>
				return pdPASS;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	e063      	b.n	8008db0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d103      	bne.n	8008cf6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008cee:	f002 fb4d 	bl	800b38c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	e05c      	b.n	8008db0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d106      	bne.n	8008d0a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008cfc:	f107 0314 	add.w	r3, r7, #20
 8008d00:	4618      	mov	r0, r3
 8008d02:	f001 fb35 	bl	800a370 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008d06:	2301      	movs	r3, #1
 8008d08:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008d0a:	f002 fb3f 	bl	800b38c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008d0e:	f001 f871 	bl	8009df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008d12:	f002 fb09 	bl	800b328 <vPortEnterCritical>
 8008d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008d1c:	b25b      	sxtb	r3, r3
 8008d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d22:	d103      	bne.n	8008d2c <xQueueGenericSend+0x174>
 8008d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008d32:	b25b      	sxtb	r3, r3
 8008d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d38:	d103      	bne.n	8008d42 <xQueueGenericSend+0x18a>
 8008d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008d42:	f002 fb23 	bl	800b38c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008d46:	1d3a      	adds	r2, r7, #4
 8008d48:	f107 0314 	add.w	r3, r7, #20
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	4618      	mov	r0, r3
 8008d50:	f001 fb24 	bl	800a39c <xTaskCheckForTimeOut>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d124      	bne.n	8008da4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008d5a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d5c:	f000 fd42 	bl	80097e4 <prvIsQueueFull>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d018      	beq.n	8008d98 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d68:	3310      	adds	r3, #16
 8008d6a:	687a      	ldr	r2, [r7, #4]
 8008d6c:	4611      	mov	r1, r2
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f001 fa48 	bl	800a204 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008d74:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d76:	f000 fccd 	bl	8009714 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008d7a:	f001 f849 	bl	8009e10 <xTaskResumeAll>
 8008d7e:	4603      	mov	r3, r0
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	f47f af7c 	bne.w	8008c7e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8008d86:	4b0c      	ldr	r3, [pc, #48]	@ (8008db8 <xQueueGenericSend+0x200>)
 8008d88:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d8c:	601a      	str	r2, [r3, #0]
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	f3bf 8f6f 	isb	sy
 8008d96:	e772      	b.n	8008c7e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008d98:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008d9a:	f000 fcbb 	bl	8009714 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008d9e:	f001 f837 	bl	8009e10 <xTaskResumeAll>
 8008da2:	e76c      	b.n	8008c7e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008da4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008da6:	f000 fcb5 	bl	8009714 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008daa:	f001 f831 	bl	8009e10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008dae:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3738      	adds	r7, #56	@ 0x38
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	e000ed04 	.word	0xe000ed04

08008dbc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b090      	sub	sp, #64	@ 0x40
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	60f8      	str	r0, [r7, #12]
 8008dc4:	60b9      	str	r1, [r7, #8]
 8008dc6:	607a      	str	r2, [r7, #4]
 8008dc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008dce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d10b      	bne.n	8008dec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd8:	f383 8811 	msr	BASEPRI, r3
 8008ddc:	f3bf 8f6f 	isb	sy
 8008de0:	f3bf 8f4f 	dsb	sy
 8008de4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008de6:	bf00      	nop
 8008de8:	bf00      	nop
 8008dea:	e7fd      	b.n	8008de8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d103      	bne.n	8008dfa <xQueueGenericSendFromISR+0x3e>
 8008df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d101      	bne.n	8008dfe <xQueueGenericSendFromISR+0x42>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e000      	b.n	8008e00 <xQueueGenericSendFromISR+0x44>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d10b      	bne.n	8008e1c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e08:	f383 8811 	msr	BASEPRI, r3
 8008e0c:	f3bf 8f6f 	isb	sy
 8008e10:	f3bf 8f4f 	dsb	sy
 8008e14:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008e16:	bf00      	nop
 8008e18:	bf00      	nop
 8008e1a:	e7fd      	b.n	8008e18 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e1c:	683b      	ldr	r3, [r7, #0]
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	d103      	bne.n	8008e2a <xQueueGenericSendFromISR+0x6e>
 8008e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e26:	2b01      	cmp	r3, #1
 8008e28:	d101      	bne.n	8008e2e <xQueueGenericSendFromISR+0x72>
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	e000      	b.n	8008e30 <xQueueGenericSendFromISR+0x74>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d10b      	bne.n	8008e4c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008e34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e38:	f383 8811 	msr	BASEPRI, r3
 8008e3c:	f3bf 8f6f 	isb	sy
 8008e40:	f3bf 8f4f 	dsb	sy
 8008e44:	623b      	str	r3, [r7, #32]
}
 8008e46:	bf00      	nop
 8008e48:	bf00      	nop
 8008e4a:	e7fd      	b.n	8008e48 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008e4c:	f002 fb4c 	bl	800b4e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008e50:	f3ef 8211 	mrs	r2, BASEPRI
 8008e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e58:	f383 8811 	msr	BASEPRI, r3
 8008e5c:	f3bf 8f6f 	isb	sy
 8008e60:	f3bf 8f4f 	dsb	sy
 8008e64:	61fa      	str	r2, [r7, #28]
 8008e66:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008e68:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008e6a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d302      	bcc.n	8008e7e <xQueueGenericSendFromISR+0xc2>
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	2b02      	cmp	r3, #2
 8008e7c:	d12f      	bne.n	8008ede <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008e84:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	68b9      	ldr	r1, [r7, #8]
 8008e92:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008e94:	f000 fbae 	bl	80095f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008e98:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008e9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ea0:	d112      	bne.n	8008ec8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ea2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d016      	beq.n	8008ed8 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eac:	3324      	adds	r3, #36	@ 0x24
 8008eae:	4618      	mov	r0, r3
 8008eb0:	f001 f9fa 	bl	800a2a8 <xTaskRemoveFromEventList>
 8008eb4:	4603      	mov	r3, r0
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d00e      	beq.n	8008ed8 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d00b      	beq.n	8008ed8 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	601a      	str	r2, [r3, #0]
 8008ec6:	e007      	b.n	8008ed8 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008ec8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008ecc:	3301      	adds	r3, #1
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	b25a      	sxtb	r2, r3
 8008ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ed4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008edc:	e001      	b.n	8008ee2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ee4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008ee6:	697b      	ldr	r3, [r7, #20]
 8008ee8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008eec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008eee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3740      	adds	r7, #64	@ 0x40
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b08e      	sub	sp, #56	@ 0x38
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
 8008f00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10b      	bne.n	8008f24 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8008f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	623b      	str	r3, [r7, #32]
}
 8008f1e:	bf00      	nop
 8008f20:	bf00      	nop
 8008f22:	e7fd      	b.n	8008f20 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00b      	beq.n	8008f44 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8008f2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	61fb      	str	r3, [r7, #28]
}
 8008f3e:	bf00      	nop
 8008f40:	bf00      	nop
 8008f42:	e7fd      	b.n	8008f40 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d103      	bne.n	8008f54 <xQueueGiveFromISR+0x5c>
 8008f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f4e:	689b      	ldr	r3, [r3, #8]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <xQueueGiveFromISR+0x60>
 8008f54:	2301      	movs	r3, #1
 8008f56:	e000      	b.n	8008f5a <xQueueGiveFromISR+0x62>
 8008f58:	2300      	movs	r3, #0
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d10b      	bne.n	8008f76 <xQueueGiveFromISR+0x7e>
	__asm volatile
 8008f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	61bb      	str	r3, [r7, #24]
}
 8008f70:	bf00      	nop
 8008f72:	bf00      	nop
 8008f74:	e7fd      	b.n	8008f72 <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008f76:	f002 fab7 	bl	800b4e8 <vPortValidateInterruptPriority>
	__asm volatile
 8008f7a:	f3ef 8211 	mrs	r2, BASEPRI
 8008f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f82:	f383 8811 	msr	BASEPRI, r3
 8008f86:	f3bf 8f6f 	isb	sy
 8008f8a:	f3bf 8f4f 	dsb	sy
 8008f8e:	617a      	str	r2, [r7, #20]
 8008f90:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008f92:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008f94:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f9a:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008fa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d22b      	bcs.n	8008ffe <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008fac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fb2:	1c5a      	adds	r2, r3, #1
 8008fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008fb8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8008fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fc0:	d112      	bne.n	8008fe8 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d016      	beq.n	8008ff8 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fcc:	3324      	adds	r3, #36	@ 0x24
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f001 f96a 	bl	800a2a8 <xTaskRemoveFromEventList>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d00e      	beq.n	8008ff8 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d00b      	beq.n	8008ff8 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	e007      	b.n	8008ff8 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008fec:	3301      	adds	r3, #1
 8008fee:	b2db      	uxtb	r3, r3
 8008ff0:	b25a      	sxtb	r2, r3
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ff4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ffc:	e001      	b.n	8009002 <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008ffe:	2300      	movs	r3, #0
 8009000:	637b      	str	r3, [r7, #52]	@ 0x34
 8009002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009004:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f383 8811 	msr	BASEPRI, r3
}
 800900c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800900e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8009010:	4618      	mov	r0, r3
 8009012:	3738      	adds	r7, #56	@ 0x38
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b08c      	sub	sp, #48	@ 0x30
 800901c:	af00      	add	r7, sp, #0
 800901e:	60f8      	str	r0, [r7, #12]
 8009020:	60b9      	str	r1, [r7, #8]
 8009022:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009024:	2300      	movs	r3, #0
 8009026:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800902c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902e:	2b00      	cmp	r3, #0
 8009030:	d10b      	bne.n	800904a <xQueueReceive+0x32>
	__asm volatile
 8009032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009036:	f383 8811 	msr	BASEPRI, r3
 800903a:	f3bf 8f6f 	isb	sy
 800903e:	f3bf 8f4f 	dsb	sy
 8009042:	623b      	str	r3, [r7, #32]
}
 8009044:	bf00      	nop
 8009046:	bf00      	nop
 8009048:	e7fd      	b.n	8009046 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d103      	bne.n	8009058 <xQueueReceive+0x40>
 8009050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009052:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009054:	2b00      	cmp	r3, #0
 8009056:	d101      	bne.n	800905c <xQueueReceive+0x44>
 8009058:	2301      	movs	r3, #1
 800905a:	e000      	b.n	800905e <xQueueReceive+0x46>
 800905c:	2300      	movs	r3, #0
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10b      	bne.n	800907a <xQueueReceive+0x62>
	__asm volatile
 8009062:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009066:	f383 8811 	msr	BASEPRI, r3
 800906a:	f3bf 8f6f 	isb	sy
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	61fb      	str	r3, [r7, #28]
}
 8009074:	bf00      	nop
 8009076:	bf00      	nop
 8009078:	e7fd      	b.n	8009076 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800907a:	f001 faeb 	bl	800a654 <xTaskGetSchedulerState>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d102      	bne.n	800908a <xQueueReceive+0x72>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d101      	bne.n	800908e <xQueueReceive+0x76>
 800908a:	2301      	movs	r3, #1
 800908c:	e000      	b.n	8009090 <xQueueReceive+0x78>
 800908e:	2300      	movs	r3, #0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d10b      	bne.n	80090ac <xQueueReceive+0x94>
	__asm volatile
 8009094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009098:	f383 8811 	msr	BASEPRI, r3
 800909c:	f3bf 8f6f 	isb	sy
 80090a0:	f3bf 8f4f 	dsb	sy
 80090a4:	61bb      	str	r3, [r7, #24]
}
 80090a6:	bf00      	nop
 80090a8:	bf00      	nop
 80090aa:	e7fd      	b.n	80090a8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80090ac:	f002 f93c 	bl	800b328 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090b4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80090b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d01f      	beq.n	80090fc <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80090bc:	68b9      	ldr	r1, [r7, #8]
 80090be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090c0:	f000 fb02 	bl	80096c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80090c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c6:	1e5a      	subs	r2, r3, #1
 80090c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ca:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80090cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00f      	beq.n	80090f4 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80090d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d6:	3310      	adds	r3, #16
 80090d8:	4618      	mov	r0, r3
 80090da:	f001 f8e5 	bl	800a2a8 <xTaskRemoveFromEventList>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d007      	beq.n	80090f4 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80090e4:	4b3c      	ldr	r3, [pc, #240]	@ (80091d8 <xQueueReceive+0x1c0>)
 80090e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090ea:	601a      	str	r2, [r3, #0]
 80090ec:	f3bf 8f4f 	dsb	sy
 80090f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80090f4:	f002 f94a 	bl	800b38c <vPortExitCritical>
				return pdPASS;
 80090f8:	2301      	movs	r3, #1
 80090fa:	e069      	b.n	80091d0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d103      	bne.n	800910a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009102:	f002 f943 	bl	800b38c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009106:	2300      	movs	r3, #0
 8009108:	e062      	b.n	80091d0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800910a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800910c:	2b00      	cmp	r3, #0
 800910e:	d106      	bne.n	800911e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009110:	f107 0310 	add.w	r3, r7, #16
 8009114:	4618      	mov	r0, r3
 8009116:	f001 f92b 	bl	800a370 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800911a:	2301      	movs	r3, #1
 800911c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800911e:	f002 f935 	bl	800b38c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009122:	f000 fe67 	bl	8009df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009126:	f002 f8ff 	bl	800b328 <vPortEnterCritical>
 800912a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800912c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009130:	b25b      	sxtb	r3, r3
 8009132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009136:	d103      	bne.n	8009140 <xQueueReceive+0x128>
 8009138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913a:	2200      	movs	r2, #0
 800913c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009142:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009146:	b25b      	sxtb	r3, r3
 8009148:	f1b3 3fff 	cmp.w	r3, #4294967295
 800914c:	d103      	bne.n	8009156 <xQueueReceive+0x13e>
 800914e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009156:	f002 f919 	bl	800b38c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800915a:	1d3a      	adds	r2, r7, #4
 800915c:	f107 0310 	add.w	r3, r7, #16
 8009160:	4611      	mov	r1, r2
 8009162:	4618      	mov	r0, r3
 8009164:	f001 f91a 	bl	800a39c <xTaskCheckForTimeOut>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d123      	bne.n	80091b6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800916e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009170:	f000 fb22 	bl	80097b8 <prvIsQueueEmpty>
 8009174:	4603      	mov	r3, r0
 8009176:	2b00      	cmp	r3, #0
 8009178:	d017      	beq.n	80091aa <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800917a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917c:	3324      	adds	r3, #36	@ 0x24
 800917e:	687a      	ldr	r2, [r7, #4]
 8009180:	4611      	mov	r1, r2
 8009182:	4618      	mov	r0, r3
 8009184:	f001 f83e 	bl	800a204 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009188:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800918a:	f000 fac3 	bl	8009714 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800918e:	f000 fe3f 	bl	8009e10 <xTaskResumeAll>
 8009192:	4603      	mov	r3, r0
 8009194:	2b00      	cmp	r3, #0
 8009196:	d189      	bne.n	80090ac <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8009198:	4b0f      	ldr	r3, [pc, #60]	@ (80091d8 <xQueueReceive+0x1c0>)
 800919a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800919e:	601a      	str	r2, [r3, #0]
 80091a0:	f3bf 8f4f 	dsb	sy
 80091a4:	f3bf 8f6f 	isb	sy
 80091a8:	e780      	b.n	80090ac <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80091aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091ac:	f000 fab2 	bl	8009714 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091b0:	f000 fe2e 	bl	8009e10 <xTaskResumeAll>
 80091b4:	e77a      	b.n	80090ac <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80091b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091b8:	f000 faac 	bl	8009714 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091bc:	f000 fe28 	bl	8009e10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80091c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091c2:	f000 faf9 	bl	80097b8 <prvIsQueueEmpty>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f43f af6f 	beq.w	80090ac <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80091ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80091d0:	4618      	mov	r0, r3
 80091d2:	3730      	adds	r7, #48	@ 0x30
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}
 80091d8:	e000ed04 	.word	0xe000ed04

080091dc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b08e      	sub	sp, #56	@ 0x38
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80091e6:	2300      	movs	r3, #0
 80091e8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80091ee:	2300      	movs	r3, #0
 80091f0:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80091f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d10b      	bne.n	8009210 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80091f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091fc:	f383 8811 	msr	BASEPRI, r3
 8009200:	f3bf 8f6f 	isb	sy
 8009204:	f3bf 8f4f 	dsb	sy
 8009208:	623b      	str	r3, [r7, #32]
}
 800920a:	bf00      	nop
 800920c:	bf00      	nop
 800920e:	e7fd      	b.n	800920c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00b      	beq.n	8009230 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8009218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800921c:	f383 8811 	msr	BASEPRI, r3
 8009220:	f3bf 8f6f 	isb	sy
 8009224:	f3bf 8f4f 	dsb	sy
 8009228:	61fb      	str	r3, [r7, #28]
}
 800922a:	bf00      	nop
 800922c:	bf00      	nop
 800922e:	e7fd      	b.n	800922c <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009230:	f001 fa10 	bl	800a654 <xTaskGetSchedulerState>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d102      	bne.n	8009240 <xQueueSemaphoreTake+0x64>
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d101      	bne.n	8009244 <xQueueSemaphoreTake+0x68>
 8009240:	2301      	movs	r3, #1
 8009242:	e000      	b.n	8009246 <xQueueSemaphoreTake+0x6a>
 8009244:	2300      	movs	r3, #0
 8009246:	2b00      	cmp	r3, #0
 8009248:	d10b      	bne.n	8009262 <xQueueSemaphoreTake+0x86>
	__asm volatile
 800924a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800924e:	f383 8811 	msr	BASEPRI, r3
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	f3bf 8f4f 	dsb	sy
 800925a:	61bb      	str	r3, [r7, #24]
}
 800925c:	bf00      	nop
 800925e:	bf00      	nop
 8009260:	e7fd      	b.n	800925e <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009262:	f002 f861 	bl	800b328 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800926a:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800926c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926e:	2b00      	cmp	r3, #0
 8009270:	d024      	beq.n	80092bc <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009272:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009274:	1e5a      	subs	r2, r3, #1
 8009276:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009278:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800927a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d104      	bne.n	800928c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009282:	f001 fb61 	bl	800a948 <pvTaskIncrementMutexHeldCount>
 8009286:	4602      	mov	r2, r0
 8009288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800928a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800928c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800928e:	691b      	ldr	r3, [r3, #16]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00f      	beq.n	80092b4 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009296:	3310      	adds	r3, #16
 8009298:	4618      	mov	r0, r3
 800929a:	f001 f805 	bl	800a2a8 <xTaskRemoveFromEventList>
 800929e:	4603      	mov	r3, r0
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d007      	beq.n	80092b4 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80092a4:	4b54      	ldr	r3, [pc, #336]	@ (80093f8 <xQueueSemaphoreTake+0x21c>)
 80092a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092aa:	601a      	str	r2, [r3, #0]
 80092ac:	f3bf 8f4f 	dsb	sy
 80092b0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80092b4:	f002 f86a 	bl	800b38c <vPortExitCritical>
				return pdPASS;
 80092b8:	2301      	movs	r3, #1
 80092ba:	e098      	b.n	80093ee <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d112      	bne.n	80092e8 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80092c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d00b      	beq.n	80092e0 <xQueueSemaphoreTake+0x104>
	__asm volatile
 80092c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092cc:	f383 8811 	msr	BASEPRI, r3
 80092d0:	f3bf 8f6f 	isb	sy
 80092d4:	f3bf 8f4f 	dsb	sy
 80092d8:	617b      	str	r3, [r7, #20]
}
 80092da:	bf00      	nop
 80092dc:	bf00      	nop
 80092de:	e7fd      	b.n	80092dc <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80092e0:	f002 f854 	bl	800b38c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80092e4:	2300      	movs	r3, #0
 80092e6:	e082      	b.n	80093ee <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d106      	bne.n	80092fc <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092ee:	f107 030c 	add.w	r3, r7, #12
 80092f2:	4618      	mov	r0, r3
 80092f4:	f001 f83c 	bl	800a370 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092f8:	2301      	movs	r3, #1
 80092fa:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092fc:	f002 f846 	bl	800b38c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009300:	f000 fd78 	bl	8009df4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009304:	f002 f810 	bl	800b328 <vPortEnterCritical>
 8009308:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800930a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800930e:	b25b      	sxtb	r3, r3
 8009310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009314:	d103      	bne.n	800931e <xQueueSemaphoreTake+0x142>
 8009316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800931e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009320:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009324:	b25b      	sxtb	r3, r3
 8009326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932a:	d103      	bne.n	8009334 <xQueueSemaphoreTake+0x158>
 800932c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800932e:	2200      	movs	r2, #0
 8009330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8009334:	f002 f82a 	bl	800b38c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009338:	463a      	mov	r2, r7
 800933a:	f107 030c 	add.w	r3, r7, #12
 800933e:	4611      	mov	r1, r2
 8009340:	4618      	mov	r0, r3
 8009342:	f001 f82b 	bl	800a39c <xTaskCheckForTimeOut>
 8009346:	4603      	mov	r3, r0
 8009348:	2b00      	cmp	r3, #0
 800934a:	d132      	bne.n	80093b2 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800934c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800934e:	f000 fa33 	bl	80097b8 <prvIsQueueEmpty>
 8009352:	4603      	mov	r3, r0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d026      	beq.n	80093a6 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d109      	bne.n	8009374 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8009360:	f001 ffe2 	bl	800b328 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	4618      	mov	r0, r3
 800936a:	f001 f991 	bl	800a690 <xTaskPriorityInherit>
 800936e:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8009370:	f002 f80c 	bl	800b38c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009376:	3324      	adds	r3, #36	@ 0x24
 8009378:	683a      	ldr	r2, [r7, #0]
 800937a:	4611      	mov	r1, r2
 800937c:	4618      	mov	r0, r3
 800937e:	f000 ff41 	bl	800a204 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009382:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8009384:	f000 f9c6 	bl	8009714 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009388:	f000 fd42 	bl	8009e10 <xTaskResumeAll>
 800938c:	4603      	mov	r3, r0
 800938e:	2b00      	cmp	r3, #0
 8009390:	f47f af67 	bne.w	8009262 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8009394:	4b18      	ldr	r3, [pc, #96]	@ (80093f8 <xQueueSemaphoreTake+0x21c>)
 8009396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800939a:	601a      	str	r2, [r3, #0]
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	f3bf 8f6f 	isb	sy
 80093a4:	e75d      	b.n	8009262 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80093a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093a8:	f000 f9b4 	bl	8009714 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093ac:	f000 fd30 	bl	8009e10 <xTaskResumeAll>
 80093b0:	e757      	b.n	8009262 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80093b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093b4:	f000 f9ae 	bl	8009714 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093b8:	f000 fd2a 	bl	8009e10 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093bc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093be:	f000 f9fb 	bl	80097b8 <prvIsQueueEmpty>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	f43f af4c 	beq.w	8009262 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80093ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00d      	beq.n	80093ec <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 80093d0:	f001 ffaa 	bl	800b328 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80093d4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80093d6:	f000 f8f5 	bl	80095c4 <prvGetDisinheritPriorityAfterTimeout>
 80093da:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80093dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80093e2:	4618      	mov	r0, r3
 80093e4:	f001 fa2c 	bl	800a840 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80093e8:	f001 ffd0 	bl	800b38c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80093ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3738      	adds	r7, #56	@ 0x38
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	e000ed04 	.word	0xe000ed04

080093fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80093fc:	b580      	push	{r7, lr}
 80093fe:	b08e      	sub	sp, #56	@ 0x38
 8009400:	af00      	add	r7, sp, #0
 8009402:	60f8      	str	r0, [r7, #12]
 8009404:	60b9      	str	r1, [r7, #8]
 8009406:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800940c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10b      	bne.n	800942a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	623b      	str	r3, [r7, #32]
}
 8009424:	bf00      	nop
 8009426:	bf00      	nop
 8009428:	e7fd      	b.n	8009426 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d103      	bne.n	8009438 <xQueueReceiveFromISR+0x3c>
 8009430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009434:	2b00      	cmp	r3, #0
 8009436:	d101      	bne.n	800943c <xQueueReceiveFromISR+0x40>
 8009438:	2301      	movs	r3, #1
 800943a:	e000      	b.n	800943e <xQueueReceiveFromISR+0x42>
 800943c:	2300      	movs	r3, #0
 800943e:	2b00      	cmp	r3, #0
 8009440:	d10b      	bne.n	800945a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8009442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009446:	f383 8811 	msr	BASEPRI, r3
 800944a:	f3bf 8f6f 	isb	sy
 800944e:	f3bf 8f4f 	dsb	sy
 8009452:	61fb      	str	r3, [r7, #28]
}
 8009454:	bf00      	nop
 8009456:	bf00      	nop
 8009458:	e7fd      	b.n	8009456 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800945a:	f002 f845 	bl	800b4e8 <vPortValidateInterruptPriority>
	__asm volatile
 800945e:	f3ef 8211 	mrs	r2, BASEPRI
 8009462:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009466:	f383 8811 	msr	BASEPRI, r3
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	61ba      	str	r2, [r7, #24]
 8009474:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009476:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009478:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800947a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800947c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800947e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009482:	2b00      	cmp	r3, #0
 8009484:	d02f      	beq.n	80094e6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009488:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800948c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009490:	68b9      	ldr	r1, [r7, #8]
 8009492:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8009494:	f000 f918 	bl	80096c8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800949a:	1e5a      	subs	r2, r3, #1
 800949c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800949e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80094a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80094a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094a8:	d112      	bne.n	80094d0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094ac:	691b      	ldr	r3, [r3, #16]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d016      	beq.n	80094e0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094b4:	3310      	adds	r3, #16
 80094b6:	4618      	mov	r0, r3
 80094b8:	f000 fef6 	bl	800a2a8 <xTaskRemoveFromEventList>
 80094bc:	4603      	mov	r3, r0
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d00e      	beq.n	80094e0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00b      	beq.n	80094e0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	2201      	movs	r2, #1
 80094cc:	601a      	str	r2, [r3, #0]
 80094ce:	e007      	b.n	80094e0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80094d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80094d4:	3301      	adds	r3, #1
 80094d6:	b2db      	uxtb	r3, r3
 80094d8:	b25a      	sxtb	r2, r3
 80094da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80094dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80094e0:	2301      	movs	r3, #1
 80094e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80094e4:	e001      	b.n	80094ea <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80094e6:	2300      	movs	r3, #0
 80094e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80094ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	f383 8811 	msr	BASEPRI, r3
}
 80094f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80094f8:	4618      	mov	r0, r3
 80094fa:	3738      	adds	r7, #56	@ 0x38
 80094fc:	46bd      	mov	sp, r7
 80094fe:	bd80      	pop	{r7, pc}

08009500 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8009500:	b580      	push	{r7, lr}
 8009502:	b084      	sub	sp, #16
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d10b      	bne.n	8009526 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	60bb      	str	r3, [r7, #8]
}
 8009520:	bf00      	nop
 8009522:	bf00      	nop
 8009524:	e7fd      	b.n	8009522 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8009526:	f001 feff 	bl	800b328 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800952e:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8009530:	f001 ff2c 	bl	800b38c <vPortExitCritical>

	return uxReturn;
 8009534:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800953e:	b480      	push	{r7}
 8009540:	b087      	sub	sp, #28
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	2b00      	cmp	r3, #0
 800954e:	d10b      	bne.n	8009568 <uxQueueMessagesWaitingFromISR+0x2a>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	60fb      	str	r3, [r7, #12]
}
 8009562:	bf00      	nop
 8009564:	bf00      	nop
 8009566:	e7fd      	b.n	8009564 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800956c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800956e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8009570:	4618      	mov	r0, r3
 8009572:	371c      	adds	r7, #28
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b084      	sub	sp, #16
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d10b      	bne.n	80095a6 <vQueueDelete+0x2a>
	__asm volatile
 800958e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009592:	f383 8811 	msr	BASEPRI, r3
 8009596:	f3bf 8f6f 	isb	sy
 800959a:	f3bf 8f4f 	dsb	sy
 800959e:	60bb      	str	r3, [r7, #8]
}
 80095a0:	bf00      	nop
 80095a2:	bf00      	nop
 80095a4:	e7fd      	b.n	80095a2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80095a6:	68f8      	ldr	r0, [r7, #12]
 80095a8:	f000 f95e 	bl	8009868 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d102      	bne.n	80095bc <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f002 f8a6 	bl	800b708 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80095bc:	bf00      	nop
 80095be:	3710      	adds	r7, #16
 80095c0:	46bd      	mov	sp, r7
 80095c2:	bd80      	pop	{r7, pc}

080095c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80095c4:	b480      	push	{r7}
 80095c6:	b085      	sub	sp, #20
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d006      	beq.n	80095e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80095de:	60fb      	str	r3, [r7, #12]
 80095e0:	e001      	b.n	80095e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80095e2:	2300      	movs	r3, #0
 80095e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80095e6:	68fb      	ldr	r3, [r7, #12]
	}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3714      	adds	r7, #20
 80095ec:	46bd      	mov	sp, r7
 80095ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095f2:	4770      	bx	lr

080095f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b086      	sub	sp, #24
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	60f8      	str	r0, [r7, #12]
 80095fc:	60b9      	str	r1, [r7, #8]
 80095fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009600:	2300      	movs	r3, #0
 8009602:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009608:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800960e:	2b00      	cmp	r3, #0
 8009610:	d10d      	bne.n	800962e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d14d      	bne.n	80096b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	689b      	ldr	r3, [r3, #8]
 800961e:	4618      	mov	r0, r3
 8009620:	f001 f89e 	bl	800a760 <xTaskPriorityDisinherit>
 8009624:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2200      	movs	r2, #0
 800962a:	609a      	str	r2, [r3, #8]
 800962c:	e043      	b.n	80096b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d119      	bne.n	8009668 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	6858      	ldr	r0, [r3, #4]
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800963c:	461a      	mov	r2, r3
 800963e:	68b9      	ldr	r1, [r7, #8]
 8009640:	f014 fd2b 	bl	801e09a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	685a      	ldr	r2, [r3, #4]
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800964c:	441a      	add	r2, r3
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	685a      	ldr	r2, [r3, #4]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	689b      	ldr	r3, [r3, #8]
 800965a:	429a      	cmp	r2, r3
 800965c:	d32b      	bcc.n	80096b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681a      	ldr	r2, [r3, #0]
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	605a      	str	r2, [r3, #4]
 8009666:	e026      	b.n	80096b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	68d8      	ldr	r0, [r3, #12]
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009670:	461a      	mov	r2, r3
 8009672:	68b9      	ldr	r1, [r7, #8]
 8009674:	f014 fd11 	bl	801e09a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	68da      	ldr	r2, [r3, #12]
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009680:	425b      	negs	r3, r3
 8009682:	441a      	add	r2, r3
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	68da      	ldr	r2, [r3, #12]
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	429a      	cmp	r2, r3
 8009692:	d207      	bcs.n	80096a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	689a      	ldr	r2, [r3, #8]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800969c:	425b      	negs	r3, r3
 800969e:	441a      	add	r2, r3
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2b02      	cmp	r3, #2
 80096a8:	d105      	bne.n	80096b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80096aa:	693b      	ldr	r3, [r7, #16]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d002      	beq.n	80096b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	3b01      	subs	r3, #1
 80096b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80096b6:	693b      	ldr	r3, [r7, #16]
 80096b8:	1c5a      	adds	r2, r3, #1
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80096be:	697b      	ldr	r3, [r7, #20]
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3718      	adds	r7, #24
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d018      	beq.n	800970c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	68da      	ldr	r2, [r3, #12]
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80096e2:	441a      	add	r2, r3
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	68da      	ldr	r2, [r3, #12]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	429a      	cmp	r2, r3
 80096f2:	d303      	bcc.n	80096fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681a      	ldr	r2, [r3, #0]
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	68d9      	ldr	r1, [r3, #12]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009704:	461a      	mov	r2, r3
 8009706:	6838      	ldr	r0, [r7, #0]
 8009708:	f014 fcc7 	bl	801e09a <memcpy>
	}
}
 800970c:	bf00      	nop
 800970e:	3708      	adds	r7, #8
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b084      	sub	sp, #16
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800971c:	f001 fe04 	bl	800b328 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8009726:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009728:	e011      	b.n	800974e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800972e:	2b00      	cmp	r3, #0
 8009730:	d012      	beq.n	8009758 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	3324      	adds	r3, #36	@ 0x24
 8009736:	4618      	mov	r0, r3
 8009738:	f000 fdb6 	bl	800a2a8 <xTaskRemoveFromEventList>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009742:	f000 fe8f 	bl	800a464 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009746:	7bfb      	ldrb	r3, [r7, #15]
 8009748:	3b01      	subs	r3, #1
 800974a:	b2db      	uxtb	r3, r3
 800974c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800974e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009752:	2b00      	cmp	r3, #0
 8009754:	dce9      	bgt.n	800972a <prvUnlockQueue+0x16>
 8009756:	e000      	b.n	800975a <prvUnlockQueue+0x46>
					break;
 8009758:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	22ff      	movs	r2, #255	@ 0xff
 800975e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8009762:	f001 fe13 	bl	800b38c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009766:	f001 fddf 	bl	800b328 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8009770:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009772:	e011      	b.n	8009798 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	691b      	ldr	r3, [r3, #16]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d012      	beq.n	80097a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	3310      	adds	r3, #16
 8009780:	4618      	mov	r0, r3
 8009782:	f000 fd91 	bl	800a2a8 <xTaskRemoveFromEventList>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d001      	beq.n	8009790 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800978c:	f000 fe6a 	bl	800a464 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009790:	7bbb      	ldrb	r3, [r7, #14]
 8009792:	3b01      	subs	r3, #1
 8009794:	b2db      	uxtb	r3, r3
 8009796:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009798:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800979c:	2b00      	cmp	r3, #0
 800979e:	dce9      	bgt.n	8009774 <prvUnlockQueue+0x60>
 80097a0:	e000      	b.n	80097a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80097a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	22ff      	movs	r2, #255	@ 0xff
 80097a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80097ac:	f001 fdee 	bl	800b38c <vPortExitCritical>
}
 80097b0:	bf00      	nop
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80097b8:	b580      	push	{r7, lr}
 80097ba:	b084      	sub	sp, #16
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097c0:	f001 fdb2 	bl	800b328 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d102      	bne.n	80097d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80097cc:	2301      	movs	r3, #1
 80097ce:	60fb      	str	r3, [r7, #12]
 80097d0:	e001      	b.n	80097d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80097d2:	2300      	movs	r3, #0
 80097d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80097d6:	f001 fdd9 	bl	800b38c <vPortExitCritical>

	return xReturn;
 80097da:	68fb      	ldr	r3, [r7, #12]
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3710      	adds	r7, #16
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80097ec:	f001 fd9c 	bl	800b328 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097f8:	429a      	cmp	r2, r3
 80097fa:	d102      	bne.n	8009802 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80097fc:	2301      	movs	r3, #1
 80097fe:	60fb      	str	r3, [r7, #12]
 8009800:	e001      	b.n	8009806 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009802:	2300      	movs	r3, #0
 8009804:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009806:	f001 fdc1 	bl	800b38c <vPortExitCritical>

	return xReturn;
 800980a:	68fb      	ldr	r3, [r7, #12]
}
 800980c:	4618      	mov	r0, r3
 800980e:	3710      	adds	r7, #16
 8009810:	46bd      	mov	sp, r7
 8009812:	bd80      	pop	{r7, pc}

08009814 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800981e:	2300      	movs	r3, #0
 8009820:	60fb      	str	r3, [r7, #12]
 8009822:	e014      	b.n	800984e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009824:	4a0f      	ldr	r2, [pc, #60]	@ (8009864 <vQueueAddToRegistry+0x50>)
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10b      	bne.n	8009848 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009830:	490c      	ldr	r1, [pc, #48]	@ (8009864 <vQueueAddToRegistry+0x50>)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	683a      	ldr	r2, [r7, #0]
 8009836:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800983a:	4a0a      	ldr	r2, [pc, #40]	@ (8009864 <vQueueAddToRegistry+0x50>)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	00db      	lsls	r3, r3, #3
 8009840:	4413      	add	r3, r2
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009846:	e006      	b.n	8009856 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	3301      	adds	r3, #1
 800984c:	60fb      	str	r3, [r7, #12]
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2b07      	cmp	r3, #7
 8009852:	d9e7      	bls.n	8009824 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009854:	bf00      	nop
 8009856:	bf00      	nop
 8009858:	3714      	adds	r7, #20
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	20006978 	.word	0x20006978

08009868 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009870:	2300      	movs	r3, #0
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	e016      	b.n	80098a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8009876:	4a10      	ldr	r2, [pc, #64]	@ (80098b8 <vQueueUnregisterQueue+0x50>)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	00db      	lsls	r3, r3, #3
 800987c:	4413      	add	r3, r2
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	687a      	ldr	r2, [r7, #4]
 8009882:	429a      	cmp	r2, r3
 8009884:	d10b      	bne.n	800989e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8009886:	4a0c      	ldr	r2, [pc, #48]	@ (80098b8 <vQueueUnregisterQueue+0x50>)
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2100      	movs	r1, #0
 800988c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8009890:	4a09      	ldr	r2, [pc, #36]	@ (80098b8 <vQueueUnregisterQueue+0x50>)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	00db      	lsls	r3, r3, #3
 8009896:	4413      	add	r3, r2
 8009898:	2200      	movs	r2, #0
 800989a:	605a      	str	r2, [r3, #4]
				break;
 800989c:	e006      	b.n	80098ac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	3301      	adds	r3, #1
 80098a2:	60fb      	str	r3, [r7, #12]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	2b07      	cmp	r3, #7
 80098a8:	d9e5      	bls.n	8009876 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80098aa:	bf00      	nop
 80098ac:	bf00      	nop
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	20006978 	.word	0x20006978

080098bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	60f8      	str	r0, [r7, #12]
 80098c4:	60b9      	str	r1, [r7, #8]
 80098c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80098cc:	f001 fd2c 	bl	800b328 <vPortEnterCritical>
 80098d0:	697b      	ldr	r3, [r7, #20]
 80098d2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80098d6:	b25b      	sxtb	r3, r3
 80098d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098dc:	d103      	bne.n	80098e6 <vQueueWaitForMessageRestricted+0x2a>
 80098de:	697b      	ldr	r3, [r7, #20]
 80098e0:	2200      	movs	r2, #0
 80098e2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80098e6:	697b      	ldr	r3, [r7, #20]
 80098e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80098ec:	b25b      	sxtb	r3, r3
 80098ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f2:	d103      	bne.n	80098fc <vQueueWaitForMessageRestricted+0x40>
 80098f4:	697b      	ldr	r3, [r7, #20]
 80098f6:	2200      	movs	r2, #0
 80098f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80098fc:	f001 fd46 	bl	800b38c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009900:	697b      	ldr	r3, [r7, #20]
 8009902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009904:	2b00      	cmp	r3, #0
 8009906:	d106      	bne.n	8009916 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	3324      	adds	r3, #36	@ 0x24
 800990c:	687a      	ldr	r2, [r7, #4]
 800990e:	68b9      	ldr	r1, [r7, #8]
 8009910:	4618      	mov	r0, r3
 8009912:	f000 fc9d 	bl	800a250 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009916:	6978      	ldr	r0, [r7, #20]
 8009918:	f7ff fefc 	bl	8009714 <prvUnlockQueue>
	}
 800991c:	bf00      	nop
 800991e:	3718      	adds	r7, #24
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009924:	b580      	push	{r7, lr}
 8009926:	b08e      	sub	sp, #56	@ 0x38
 8009928:	af04      	add	r7, sp, #16
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
 8009930:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009932:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10b      	bne.n	8009950 <xTaskCreateStatic+0x2c>
	__asm volatile
 8009938:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800993c:	f383 8811 	msr	BASEPRI, r3
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	623b      	str	r3, [r7, #32]
}
 800994a:	bf00      	nop
 800994c:	bf00      	nop
 800994e:	e7fd      	b.n	800994c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009952:	2b00      	cmp	r3, #0
 8009954:	d10b      	bne.n	800996e <xTaskCreateStatic+0x4a>
	__asm volatile
 8009956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995a:	f383 8811 	msr	BASEPRI, r3
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f3bf 8f4f 	dsb	sy
 8009966:	61fb      	str	r3, [r7, #28]
}
 8009968:	bf00      	nop
 800996a:	bf00      	nop
 800996c:	e7fd      	b.n	800996a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800996e:	23ac      	movs	r3, #172	@ 0xac
 8009970:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	2bac      	cmp	r3, #172	@ 0xac
 8009976:	d00b      	beq.n	8009990 <xTaskCreateStatic+0x6c>
	__asm volatile
 8009978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800997c:	f383 8811 	msr	BASEPRI, r3
 8009980:	f3bf 8f6f 	isb	sy
 8009984:	f3bf 8f4f 	dsb	sy
 8009988:	61bb      	str	r3, [r7, #24]
}
 800998a:	bf00      	nop
 800998c:	bf00      	nop
 800998e:	e7fd      	b.n	800998c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009990:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009994:	2b00      	cmp	r3, #0
 8009996:	d01e      	beq.n	80099d6 <xTaskCreateStatic+0xb2>
 8009998:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800999a:	2b00      	cmp	r3, #0
 800999c:	d01b      	beq.n	80099d6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800999e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099a0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80099a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80099a6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80099a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099aa:	2202      	movs	r2, #2
 80099ac:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80099b0:	2300      	movs	r3, #0
 80099b2:	9303      	str	r3, [sp, #12]
 80099b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b6:	9302      	str	r3, [sp, #8]
 80099b8:	f107 0314 	add.w	r3, r7, #20
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80099c0:	9300      	str	r3, [sp, #0]
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	68b9      	ldr	r1, [r7, #8]
 80099c8:	68f8      	ldr	r0, [r7, #12]
 80099ca:	f000 f851 	bl	8009a70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80099ce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80099d0:	f000 f8f8 	bl	8009bc4 <prvAddNewTaskToReadyList>
 80099d4:	e001      	b.n	80099da <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80099d6:	2300      	movs	r3, #0
 80099d8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80099da:	697b      	ldr	r3, [r7, #20]
	}
 80099dc:	4618      	mov	r0, r3
 80099de:	3728      	adds	r7, #40	@ 0x28
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b08c      	sub	sp, #48	@ 0x30
 80099e8:	af04      	add	r7, sp, #16
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	603b      	str	r3, [r7, #0]
 80099f0:	4613      	mov	r3, r2
 80099f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80099f4:	88fb      	ldrh	r3, [r7, #6]
 80099f6:	009b      	lsls	r3, r3, #2
 80099f8:	4618      	mov	r0, r3
 80099fa:	f001 fdb7 	bl	800b56c <pvPortMalloc>
 80099fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00e      	beq.n	8009a24 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009a06:	20ac      	movs	r0, #172	@ 0xac
 8009a08:	f001 fdb0 	bl	800b56c <pvPortMalloc>
 8009a0c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009a0e:	69fb      	ldr	r3, [r7, #28]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d003      	beq.n	8009a1c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	697a      	ldr	r2, [r7, #20]
 8009a18:	631a      	str	r2, [r3, #48]	@ 0x30
 8009a1a:	e005      	b.n	8009a28 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009a1c:	6978      	ldr	r0, [r7, #20]
 8009a1e:	f001 fe73 	bl	800b708 <vPortFree>
 8009a22:	e001      	b.n	8009a28 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009a24:	2300      	movs	r3, #0
 8009a26:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009a28:	69fb      	ldr	r3, [r7, #28]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d017      	beq.n	8009a5e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009a2e:	69fb      	ldr	r3, [r7, #28]
 8009a30:	2200      	movs	r2, #0
 8009a32:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009a36:	88fa      	ldrh	r2, [r7, #6]
 8009a38:	2300      	movs	r3, #0
 8009a3a:	9303      	str	r3, [sp, #12]
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	9302      	str	r3, [sp, #8]
 8009a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a42:	9301      	str	r3, [sp, #4]
 8009a44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a46:	9300      	str	r3, [sp, #0]
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	68b9      	ldr	r1, [r7, #8]
 8009a4c:	68f8      	ldr	r0, [r7, #12]
 8009a4e:	f000 f80f 	bl	8009a70 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009a52:	69f8      	ldr	r0, [r7, #28]
 8009a54:	f000 f8b6 	bl	8009bc4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	61bb      	str	r3, [r7, #24]
 8009a5c:	e002      	b.n	8009a64 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8009a62:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009a64:	69bb      	ldr	r3, [r7, #24]
	}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3720      	adds	r7, #32
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b088      	sub	sp, #32
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	60f8      	str	r0, [r7, #12]
 8009a78:	60b9      	str	r1, [r7, #8]
 8009a7a:	607a      	str	r2, [r7, #4]
 8009a7c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a80:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	461a      	mov	r2, r3
 8009a88:	21a5      	movs	r1, #165	@ 0xa5
 8009a8a:	f014 fa1e 	bl	801deca <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009a90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	009b      	lsls	r3, r3, #2
 8009a9c:	4413      	add	r3, r2
 8009a9e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	f023 0307 	bic.w	r3, r3, #7
 8009aa6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009aa8:	69bb      	ldr	r3, [r7, #24]
 8009aaa:	f003 0307 	and.w	r3, r3, #7
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00b      	beq.n	8009aca <prvInitialiseNewTask+0x5a>
	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	617b      	str	r3, [r7, #20]
}
 8009ac4:	bf00      	nop
 8009ac6:	bf00      	nop
 8009ac8:	e7fd      	b.n	8009ac6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d01f      	beq.n	8009b10 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	61fb      	str	r3, [r7, #28]
 8009ad4:	e012      	b.n	8009afc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009ad6:	68ba      	ldr	r2, [r7, #8]
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	4413      	add	r3, r2
 8009adc:	7819      	ldrb	r1, [r3, #0]
 8009ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	3334      	adds	r3, #52	@ 0x34
 8009ae6:	460a      	mov	r2, r1
 8009ae8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	69fb      	ldr	r3, [r7, #28]
 8009aee:	4413      	add	r3, r2
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d006      	beq.n	8009b04 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	3301      	adds	r3, #1
 8009afa:	61fb      	str	r3, [r7, #28]
 8009afc:	69fb      	ldr	r3, [r7, #28]
 8009afe:	2b0f      	cmp	r3, #15
 8009b00:	d9e9      	bls.n	8009ad6 <prvInitialiseNewTask+0x66>
 8009b02:	e000      	b.n	8009b06 <prvInitialiseNewTask+0x96>
			{
				break;
 8009b04:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009b0e:	e003      	b.n	8009b18 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009b10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b12:	2200      	movs	r2, #0
 8009b14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b1a:	2b37      	cmp	r3, #55	@ 0x37
 8009b1c:	d901      	bls.n	8009b22 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009b1e:	2337      	movs	r3, #55	@ 0x37
 8009b20:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b26:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b2c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b30:	2200      	movs	r2, #0
 8009b32:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b36:	3304      	adds	r3, #4
 8009b38:	4618      	mov	r0, r3
 8009b3a:	f7fe fd3d 	bl	80085b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b40:	3318      	adds	r3, #24
 8009b42:	4618      	mov	r0, r3
 8009b44:	f7fe fd38 	bl	80085b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009b58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009b5c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8009b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b60:	2200      	movs	r2, #0
 8009b62:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b66:	2200      	movs	r2, #0
 8009b68:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b6e:	2200      	movs	r2, #0
 8009b70:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b76:	3358      	adds	r3, #88	@ 0x58
 8009b78:	224c      	movs	r2, #76	@ 0x4c
 8009b7a:	2100      	movs	r1, #0
 8009b7c:	4618      	mov	r0, r3
 8009b7e:	f014 f9a4 	bl	801deca <memset>
 8009b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b84:	4a0c      	ldr	r2, [pc, #48]	@ (8009bb8 <prvInitialiseNewTask+0x148>)
 8009b86:	65da      	str	r2, [r3, #92]	@ 0x5c
 8009b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8009bbc <prvInitialiseNewTask+0x14c>)
 8009b8c:	661a      	str	r2, [r3, #96]	@ 0x60
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b90:	4a0b      	ldr	r2, [pc, #44]	@ (8009bc0 <prvInitialiseNewTask+0x150>)
 8009b92:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009b94:	683a      	ldr	r2, [r7, #0]
 8009b96:	68f9      	ldr	r1, [r7, #12]
 8009b98:	69b8      	ldr	r0, [r7, #24]
 8009b9a:	f001 fa97 	bl	800b0cc <pxPortInitialiseStack>
 8009b9e:	4602      	mov	r2, r0
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ba2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009ba4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d002      	beq.n	8009bb0 <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bae:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009bb0:	bf00      	nop
 8009bb2:	3720      	adds	r7, #32
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}
 8009bb8:	2000edd0 	.word	0x2000edd0
 8009bbc:	2000ee38 	.word	0x2000ee38
 8009bc0:	2000eea0 	.word	0x2000eea0

08009bc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009bcc:	f001 fbac 	bl	800b328 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009bd0:	4b2d      	ldr	r3, [pc, #180]	@ (8009c88 <prvAddNewTaskToReadyList+0xc4>)
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	3301      	adds	r3, #1
 8009bd6:	4a2c      	ldr	r2, [pc, #176]	@ (8009c88 <prvAddNewTaskToReadyList+0xc4>)
 8009bd8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009bda:	4b2c      	ldr	r3, [pc, #176]	@ (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d109      	bne.n	8009bf6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009be2:	4a2a      	ldr	r2, [pc, #168]	@ (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009be8:	4b27      	ldr	r3, [pc, #156]	@ (8009c88 <prvAddNewTaskToReadyList+0xc4>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d110      	bne.n	8009c12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009bf0:	f000 fc5c 	bl	800a4ac <prvInitialiseTaskLists>
 8009bf4:	e00d      	b.n	8009c12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009bf6:	4b26      	ldr	r3, [pc, #152]	@ (8009c90 <prvAddNewTaskToReadyList+0xcc>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d109      	bne.n	8009c12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009bfe:	4b23      	ldr	r3, [pc, #140]	@ (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c08:	429a      	cmp	r2, r3
 8009c0a:	d802      	bhi.n	8009c12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009c0c:	4a1f      	ldr	r2, [pc, #124]	@ (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009c12:	4b20      	ldr	r3, [pc, #128]	@ (8009c94 <prvAddNewTaskToReadyList+0xd0>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	3301      	adds	r3, #1
 8009c18:	4a1e      	ldr	r2, [pc, #120]	@ (8009c94 <prvAddNewTaskToReadyList+0xd0>)
 8009c1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8009c94 <prvAddNewTaskToReadyList+0xd0>)
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c28:	4b1b      	ldr	r3, [pc, #108]	@ (8009c98 <prvAddNewTaskToReadyList+0xd4>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	429a      	cmp	r2, r3
 8009c2e:	d903      	bls.n	8009c38 <prvAddNewTaskToReadyList+0x74>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c34:	4a18      	ldr	r2, [pc, #96]	@ (8009c98 <prvAddNewTaskToReadyList+0xd4>)
 8009c36:	6013      	str	r3, [r2, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c3c:	4613      	mov	r3, r2
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	009b      	lsls	r3, r3, #2
 8009c44:	4a15      	ldr	r2, [pc, #84]	@ (8009c9c <prvAddNewTaskToReadyList+0xd8>)
 8009c46:	441a      	add	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	3304      	adds	r3, #4
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	4610      	mov	r0, r2
 8009c50:	f7fe fcbf 	bl	80085d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009c54:	f001 fb9a 	bl	800b38c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009c58:	4b0d      	ldr	r3, [pc, #52]	@ (8009c90 <prvAddNewTaskToReadyList+0xcc>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d00e      	beq.n	8009c7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009c60:	4b0a      	ldr	r3, [pc, #40]	@ (8009c8c <prvAddNewTaskToReadyList+0xc8>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c6a:	429a      	cmp	r2, r3
 8009c6c:	d207      	bcs.n	8009c7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca0 <prvAddNewTaskToReadyList+0xdc>)
 8009c70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c74:	601a      	str	r2, [r3, #0]
 8009c76:	f3bf 8f4f 	dsb	sy
 8009c7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c7e:	bf00      	nop
 8009c80:	3708      	adds	r7, #8
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}
 8009c86:	bf00      	nop
 8009c88:	20006e8c 	.word	0x20006e8c
 8009c8c:	200069b8 	.word	0x200069b8
 8009c90:	20006e98 	.word	0x20006e98
 8009c94:	20006ea8 	.word	0x20006ea8
 8009c98:	20006e94 	.word	0x20006e94
 8009c9c:	200069bc 	.word	0x200069bc
 8009ca0:	e000ed04 	.word	0xe000ed04

08009ca4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009ca4:	b580      	push	{r7, lr}
 8009ca6:	b084      	sub	sp, #16
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009cac:	2300      	movs	r3, #0
 8009cae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d018      	beq.n	8009ce8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009cb6:	4b14      	ldr	r3, [pc, #80]	@ (8009d08 <vTaskDelay+0x64>)
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d00b      	beq.n	8009cd6 <vTaskDelay+0x32>
	__asm volatile
 8009cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	60bb      	str	r3, [r7, #8]
}
 8009cd0:	bf00      	nop
 8009cd2:	bf00      	nop
 8009cd4:	e7fd      	b.n	8009cd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009cd6:	f000 f88d 	bl	8009df4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009cda:	2100      	movs	r1, #0
 8009cdc:	6878      	ldr	r0, [r7, #4]
 8009cde:	f000 fe47 	bl	800a970 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009ce2:	f000 f895 	bl	8009e10 <xTaskResumeAll>
 8009ce6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d107      	bne.n	8009cfe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009cee:	4b07      	ldr	r3, [pc, #28]	@ (8009d0c <vTaskDelay+0x68>)
 8009cf0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009cf4:	601a      	str	r2, [r3, #0]
 8009cf6:	f3bf 8f4f 	dsb	sy
 8009cfa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009cfe:	bf00      	nop
 8009d00:	3710      	adds	r7, #16
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20006eb4 	.word	0x20006eb4
 8009d0c:	e000ed04 	.word	0xe000ed04

08009d10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b08a      	sub	sp, #40	@ 0x28
 8009d14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009d16:	2300      	movs	r3, #0
 8009d18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009d1e:	463a      	mov	r2, r7
 8009d20:	1d39      	adds	r1, r7, #4
 8009d22:	f107 0308 	add.w	r3, r7, #8
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7fe fbf2 	bl	8008510 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009d2c:	6839      	ldr	r1, [r7, #0]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68ba      	ldr	r2, [r7, #8]
 8009d32:	9202      	str	r2, [sp, #8]
 8009d34:	9301      	str	r3, [sp, #4]
 8009d36:	2300      	movs	r3, #0
 8009d38:	9300      	str	r3, [sp, #0]
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	460a      	mov	r2, r1
 8009d3e:	4925      	ldr	r1, [pc, #148]	@ (8009dd4 <vTaskStartScheduler+0xc4>)
 8009d40:	4825      	ldr	r0, [pc, #148]	@ (8009dd8 <vTaskStartScheduler+0xc8>)
 8009d42:	f7ff fdef 	bl	8009924 <xTaskCreateStatic>
 8009d46:	4603      	mov	r3, r0
 8009d48:	4a24      	ldr	r2, [pc, #144]	@ (8009ddc <vTaskStartScheduler+0xcc>)
 8009d4a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009d4c:	4b23      	ldr	r3, [pc, #140]	@ (8009ddc <vTaskStartScheduler+0xcc>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d002      	beq.n	8009d5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009d54:	2301      	movs	r3, #1
 8009d56:	617b      	str	r3, [r7, #20]
 8009d58:	e001      	b.n	8009d5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	2b01      	cmp	r3, #1
 8009d62:	d102      	bne.n	8009d6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009d64:	f000 fe58 	bl	800aa18 <xTimerCreateTimerTask>
 8009d68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d11d      	bne.n	8009dac <vTaskStartScheduler+0x9c>
	__asm volatile
 8009d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d74:	f383 8811 	msr	BASEPRI, r3
 8009d78:	f3bf 8f6f 	isb	sy
 8009d7c:	f3bf 8f4f 	dsb	sy
 8009d80:	613b      	str	r3, [r7, #16]
}
 8009d82:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009d84:	4b16      	ldr	r3, [pc, #88]	@ (8009de0 <vTaskStartScheduler+0xd0>)
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	3358      	adds	r3, #88	@ 0x58
 8009d8a:	4a16      	ldr	r2, [pc, #88]	@ (8009de4 <vTaskStartScheduler+0xd4>)
 8009d8c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009d8e:	4b16      	ldr	r3, [pc, #88]	@ (8009de8 <vTaskStartScheduler+0xd8>)
 8009d90:	f04f 32ff 	mov.w	r2, #4294967295
 8009d94:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009d96:	4b15      	ldr	r3, [pc, #84]	@ (8009dec <vTaskStartScheduler+0xdc>)
 8009d98:	2201      	movs	r2, #1
 8009d9a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009d9c:	4b14      	ldr	r3, [pc, #80]	@ (8009df0 <vTaskStartScheduler+0xe0>)
 8009d9e:	2200      	movs	r2, #0
 8009da0:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8009da2:	f7f7 f91f 	bl	8000fe4 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009da6:	f001 fa1b 	bl	800b1e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009daa:	e00f      	b.n	8009dcc <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009dac:	697b      	ldr	r3, [r7, #20]
 8009dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db2:	d10b      	bne.n	8009dcc <vTaskStartScheduler+0xbc>
	__asm volatile
 8009db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db8:	f383 8811 	msr	BASEPRI, r3
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	60fb      	str	r3, [r7, #12]
}
 8009dc6:	bf00      	nop
 8009dc8:	bf00      	nop
 8009dca:	e7fd      	b.n	8009dc8 <vTaskStartScheduler+0xb8>
}
 8009dcc:	bf00      	nop
 8009dce:	3718      	adds	r7, #24
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	bd80      	pop	{r7, pc}
 8009dd4:	080216e0 	.word	0x080216e0
 8009dd8:	0800a47d 	.word	0x0800a47d
 8009ddc:	20006eb0 	.word	0x20006eb0
 8009de0:	200069b8 	.word	0x200069b8
 8009de4:	20000040 	.word	0x20000040
 8009de8:	20006eac 	.word	0x20006eac
 8009dec:	20006e98 	.word	0x20006e98
 8009df0:	20006e90 	.word	0x20006e90

08009df4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009df4:	b480      	push	{r7}
 8009df6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009df8:	4b04      	ldr	r3, [pc, #16]	@ (8009e0c <vTaskSuspendAll+0x18>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	4a03      	ldr	r2, [pc, #12]	@ (8009e0c <vTaskSuspendAll+0x18>)
 8009e00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009e02:	bf00      	nop
 8009e04:	46bd      	mov	sp, r7
 8009e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0a:	4770      	bx	lr
 8009e0c:	20006eb4 	.word	0x20006eb4

08009e10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b084      	sub	sp, #16
 8009e14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009e16:	2300      	movs	r3, #0
 8009e18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009e1e:	4b42      	ldr	r3, [pc, #264]	@ (8009f28 <xTaskResumeAll+0x118>)
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d10b      	bne.n	8009e3e <xTaskResumeAll+0x2e>
	__asm volatile
 8009e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e2a:	f383 8811 	msr	BASEPRI, r3
 8009e2e:	f3bf 8f6f 	isb	sy
 8009e32:	f3bf 8f4f 	dsb	sy
 8009e36:	603b      	str	r3, [r7, #0]
}
 8009e38:	bf00      	nop
 8009e3a:	bf00      	nop
 8009e3c:	e7fd      	b.n	8009e3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009e3e:	f001 fa73 	bl	800b328 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009e42:	4b39      	ldr	r3, [pc, #228]	@ (8009f28 <xTaskResumeAll+0x118>)
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	3b01      	subs	r3, #1
 8009e48:	4a37      	ldr	r2, [pc, #220]	@ (8009f28 <xTaskResumeAll+0x118>)
 8009e4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e4c:	4b36      	ldr	r3, [pc, #216]	@ (8009f28 <xTaskResumeAll+0x118>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d162      	bne.n	8009f1a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009e54:	4b35      	ldr	r3, [pc, #212]	@ (8009f2c <xTaskResumeAll+0x11c>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d05e      	beq.n	8009f1a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009e5c:	e02f      	b.n	8009ebe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e5e:	4b34      	ldr	r3, [pc, #208]	@ (8009f30 <xTaskResumeAll+0x120>)
 8009e60:	68db      	ldr	r3, [r3, #12]
 8009e62:	68db      	ldr	r3, [r3, #12]
 8009e64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	3318      	adds	r3, #24
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f7fe fc0e 	bl	800868c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	3304      	adds	r3, #4
 8009e74:	4618      	mov	r0, r3
 8009e76:	f7fe fc09 	bl	800868c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e7e:	4b2d      	ldr	r3, [pc, #180]	@ (8009f34 <xTaskResumeAll+0x124>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	429a      	cmp	r2, r3
 8009e84:	d903      	bls.n	8009e8e <xTaskResumeAll+0x7e>
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e8a:	4a2a      	ldr	r2, [pc, #168]	@ (8009f34 <xTaskResumeAll+0x124>)
 8009e8c:	6013      	str	r3, [r2, #0]
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e92:	4613      	mov	r3, r2
 8009e94:	009b      	lsls	r3, r3, #2
 8009e96:	4413      	add	r3, r2
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	4a27      	ldr	r2, [pc, #156]	@ (8009f38 <xTaskResumeAll+0x128>)
 8009e9c:	441a      	add	r2, r3
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	3304      	adds	r3, #4
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	4610      	mov	r0, r2
 8009ea6:	f7fe fb94 	bl	80085d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009eae:	4b23      	ldr	r3, [pc, #140]	@ (8009f3c <xTaskResumeAll+0x12c>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d302      	bcc.n	8009ebe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8009eb8:	4b21      	ldr	r3, [pc, #132]	@ (8009f40 <xTaskResumeAll+0x130>)
 8009eba:	2201      	movs	r2, #1
 8009ebc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ebe:	4b1c      	ldr	r3, [pc, #112]	@ (8009f30 <xTaskResumeAll+0x120>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d1cb      	bne.n	8009e5e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d001      	beq.n	8009ed0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009ecc:	f000 fb92 	bl	800a5f4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8009f44 <xTaskResumeAll+0x134>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d010      	beq.n	8009efe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009edc:	f000 f858 	bl	8009f90 <xTaskIncrementTick>
 8009ee0:	4603      	mov	r3, r0
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d002      	beq.n	8009eec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009ee6:	4b16      	ldr	r3, [pc, #88]	@ (8009f40 <xTaskResumeAll+0x130>)
 8009ee8:	2201      	movs	r2, #1
 8009eea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	3b01      	subs	r3, #1
 8009ef0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1f1      	bne.n	8009edc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009ef8:	4b12      	ldr	r3, [pc, #72]	@ (8009f44 <xTaskResumeAll+0x134>)
 8009efa:	2200      	movs	r2, #0
 8009efc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009efe:	4b10      	ldr	r3, [pc, #64]	@ (8009f40 <xTaskResumeAll+0x130>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d009      	beq.n	8009f1a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009f06:	2301      	movs	r3, #1
 8009f08:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8009f48 <xTaskResumeAll+0x138>)
 8009f0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f10:	601a      	str	r2, [r3, #0]
 8009f12:	f3bf 8f4f 	dsb	sy
 8009f16:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009f1a:	f001 fa37 	bl	800b38c <vPortExitCritical>

	return xAlreadyYielded;
 8009f1e:	68bb      	ldr	r3, [r7, #8]
}
 8009f20:	4618      	mov	r0, r3
 8009f22:	3710      	adds	r7, #16
 8009f24:	46bd      	mov	sp, r7
 8009f26:	bd80      	pop	{r7, pc}
 8009f28:	20006eb4 	.word	0x20006eb4
 8009f2c:	20006e8c 	.word	0x20006e8c
 8009f30:	20006e4c 	.word	0x20006e4c
 8009f34:	20006e94 	.word	0x20006e94
 8009f38:	200069bc 	.word	0x200069bc
 8009f3c:	200069b8 	.word	0x200069b8
 8009f40:	20006ea0 	.word	0x20006ea0
 8009f44:	20006e9c 	.word	0x20006e9c
 8009f48:	e000ed04 	.word	0xe000ed04

08009f4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009f52:	4b05      	ldr	r3, [pc, #20]	@ (8009f68 <xTaskGetTickCount+0x1c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009f58:	687b      	ldr	r3, [r7, #4]
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	370c      	adds	r7, #12
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr
 8009f66:	bf00      	nop
 8009f68:	20006e90 	.word	0x20006e90

08009f6c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b082      	sub	sp, #8
 8009f70:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f72:	f001 fab9 	bl	800b4e8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8009f76:	2300      	movs	r3, #0
 8009f78:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8009f7a:	4b04      	ldr	r3, [pc, #16]	@ (8009f8c <xTaskGetTickCountFromISR+0x20>)
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f80:	683b      	ldr	r3, [r7, #0]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3708      	adds	r7, #8
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}
 8009f8a:	bf00      	nop
 8009f8c:	20006e90 	.word	0x20006e90

08009f90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b086      	sub	sp, #24
 8009f94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009f96:	2300      	movs	r3, #0
 8009f98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009f9a:	4b4f      	ldr	r3, [pc, #316]	@ (800a0d8 <xTaskIncrementTick+0x148>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	f040 8090 	bne.w	800a0c4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009fa4:	4b4d      	ldr	r3, [pc, #308]	@ (800a0dc <xTaskIncrementTick+0x14c>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009fac:	4a4b      	ldr	r2, [pc, #300]	@ (800a0dc <xTaskIncrementTick+0x14c>)
 8009fae:	693b      	ldr	r3, [r7, #16]
 8009fb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009fb2:	693b      	ldr	r3, [r7, #16]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d121      	bne.n	8009ffc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009fb8:	4b49      	ldr	r3, [pc, #292]	@ (800a0e0 <xTaskIncrementTick+0x150>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00b      	beq.n	8009fda <xTaskIncrementTick+0x4a>
	__asm volatile
 8009fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc6:	f383 8811 	msr	BASEPRI, r3
 8009fca:	f3bf 8f6f 	isb	sy
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	603b      	str	r3, [r7, #0]
}
 8009fd4:	bf00      	nop
 8009fd6:	bf00      	nop
 8009fd8:	e7fd      	b.n	8009fd6 <xTaskIncrementTick+0x46>
 8009fda:	4b41      	ldr	r3, [pc, #260]	@ (800a0e0 <xTaskIncrementTick+0x150>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	60fb      	str	r3, [r7, #12]
 8009fe0:	4b40      	ldr	r3, [pc, #256]	@ (800a0e4 <xTaskIncrementTick+0x154>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	4a3e      	ldr	r2, [pc, #248]	@ (800a0e0 <xTaskIncrementTick+0x150>)
 8009fe6:	6013      	str	r3, [r2, #0]
 8009fe8:	4a3e      	ldr	r2, [pc, #248]	@ (800a0e4 <xTaskIncrementTick+0x154>)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6013      	str	r3, [r2, #0]
 8009fee:	4b3e      	ldr	r3, [pc, #248]	@ (800a0e8 <xTaskIncrementTick+0x158>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	3301      	adds	r3, #1
 8009ff4:	4a3c      	ldr	r2, [pc, #240]	@ (800a0e8 <xTaskIncrementTick+0x158>)
 8009ff6:	6013      	str	r3, [r2, #0]
 8009ff8:	f000 fafc 	bl	800a5f4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ffc:	4b3b      	ldr	r3, [pc, #236]	@ (800a0ec <xTaskIncrementTick+0x15c>)
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	693a      	ldr	r2, [r7, #16]
 800a002:	429a      	cmp	r2, r3
 800a004:	d349      	bcc.n	800a09a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a006:	4b36      	ldr	r3, [pc, #216]	@ (800a0e0 <xTaskIncrementTick+0x150>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d104      	bne.n	800a01a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a010:	4b36      	ldr	r3, [pc, #216]	@ (800a0ec <xTaskIncrementTick+0x15c>)
 800a012:	f04f 32ff 	mov.w	r2, #4294967295
 800a016:	601a      	str	r2, [r3, #0]
					break;
 800a018:	e03f      	b.n	800a09a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a01a:	4b31      	ldr	r3, [pc, #196]	@ (800a0e0 <xTaskIncrementTick+0x150>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a02a:	693a      	ldr	r2, [r7, #16]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d203      	bcs.n	800a03a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a032:	4a2e      	ldr	r2, [pc, #184]	@ (800a0ec <xTaskIncrementTick+0x15c>)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a038:	e02f      	b.n	800a09a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	3304      	adds	r3, #4
 800a03e:	4618      	mov	r0, r3
 800a040:	f7fe fb24 	bl	800868c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d004      	beq.n	800a056 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	3318      	adds	r3, #24
 800a050:	4618      	mov	r0, r3
 800a052:	f7fe fb1b 	bl	800868c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a05a:	4b25      	ldr	r3, [pc, #148]	@ (800a0f0 <xTaskIncrementTick+0x160>)
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	429a      	cmp	r2, r3
 800a060:	d903      	bls.n	800a06a <xTaskIncrementTick+0xda>
 800a062:	68bb      	ldr	r3, [r7, #8]
 800a064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a066:	4a22      	ldr	r2, [pc, #136]	@ (800a0f0 <xTaskIncrementTick+0x160>)
 800a068:	6013      	str	r3, [r2, #0]
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a06e:	4613      	mov	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	4413      	add	r3, r2
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	4a1f      	ldr	r2, [pc, #124]	@ (800a0f4 <xTaskIncrementTick+0x164>)
 800a078:	441a      	add	r2, r3
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	3304      	adds	r3, #4
 800a07e:	4619      	mov	r1, r3
 800a080:	4610      	mov	r0, r2
 800a082:	f7fe faa6 	bl	80085d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a08a:	4b1b      	ldr	r3, [pc, #108]	@ (800a0f8 <xTaskIncrementTick+0x168>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a090:	429a      	cmp	r2, r3
 800a092:	d3b8      	bcc.n	800a006 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a094:	2301      	movs	r3, #1
 800a096:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a098:	e7b5      	b.n	800a006 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a09a:	4b17      	ldr	r3, [pc, #92]	@ (800a0f8 <xTaskIncrementTick+0x168>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0a0:	4914      	ldr	r1, [pc, #80]	@ (800a0f4 <xTaskIncrementTick+0x164>)
 800a0a2:	4613      	mov	r3, r2
 800a0a4:	009b      	lsls	r3, r3, #2
 800a0a6:	4413      	add	r3, r2
 800a0a8:	009b      	lsls	r3, r3, #2
 800a0aa:	440b      	add	r3, r1
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d901      	bls.n	800a0b6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a0b6:	4b11      	ldr	r3, [pc, #68]	@ (800a0fc <xTaskIncrementTick+0x16c>)
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d007      	beq.n	800a0ce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	617b      	str	r3, [r7, #20]
 800a0c2:	e004      	b.n	800a0ce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a0c4:	4b0e      	ldr	r3, [pc, #56]	@ (800a100 <xTaskIncrementTick+0x170>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	4a0d      	ldr	r2, [pc, #52]	@ (800a100 <xTaskIncrementTick+0x170>)
 800a0cc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a0ce:	697b      	ldr	r3, [r7, #20]
}
 800a0d0:	4618      	mov	r0, r3
 800a0d2:	3718      	adds	r7, #24
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}
 800a0d8:	20006eb4 	.word	0x20006eb4
 800a0dc:	20006e90 	.word	0x20006e90
 800a0e0:	20006e44 	.word	0x20006e44
 800a0e4:	20006e48 	.word	0x20006e48
 800a0e8:	20006ea4 	.word	0x20006ea4
 800a0ec:	20006eac 	.word	0x20006eac
 800a0f0:	20006e94 	.word	0x20006e94
 800a0f4:	200069bc 	.word	0x200069bc
 800a0f8:	200069b8 	.word	0x200069b8
 800a0fc:	20006ea0 	.word	0x20006ea0
 800a100:	20006e9c 	.word	0x20006e9c

0800a104 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a10a:	4b36      	ldr	r3, [pc, #216]	@ (800a1e4 <vTaskSwitchContext+0xe0>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d003      	beq.n	800a11a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a112:	4b35      	ldr	r3, [pc, #212]	@ (800a1e8 <vTaskSwitchContext+0xe4>)
 800a114:	2201      	movs	r2, #1
 800a116:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a118:	e060      	b.n	800a1dc <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 800a11a:	4b33      	ldr	r3, [pc, #204]	@ (800a1e8 <vTaskSwitchContext+0xe4>)
 800a11c:	2200      	movs	r2, #0
 800a11e:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800a120:	f7f6 ff67 	bl	8000ff2 <getRunTimeCounterValue>
 800a124:	4603      	mov	r3, r0
 800a126:	4a31      	ldr	r2, [pc, #196]	@ (800a1ec <vTaskSwitchContext+0xe8>)
 800a128:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800a12a:	4b30      	ldr	r3, [pc, #192]	@ (800a1ec <vTaskSwitchContext+0xe8>)
 800a12c:	681a      	ldr	r2, [r3, #0]
 800a12e:	4b30      	ldr	r3, [pc, #192]	@ (800a1f0 <vTaskSwitchContext+0xec>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	429a      	cmp	r2, r3
 800a134:	d909      	bls.n	800a14a <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800a136:	4b2f      	ldr	r3, [pc, #188]	@ (800a1f4 <vTaskSwitchContext+0xf0>)
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800a13c:	4a2b      	ldr	r2, [pc, #172]	@ (800a1ec <vTaskSwitchContext+0xe8>)
 800a13e:	6810      	ldr	r0, [r2, #0]
 800a140:	4a2b      	ldr	r2, [pc, #172]	@ (800a1f0 <vTaskSwitchContext+0xec>)
 800a142:	6812      	ldr	r2, [r2, #0]
 800a144:	1a82      	subs	r2, r0, r2
 800a146:	440a      	add	r2, r1
 800a148:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800a14a:	4b28      	ldr	r3, [pc, #160]	@ (800a1ec <vTaskSwitchContext+0xe8>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a28      	ldr	r2, [pc, #160]	@ (800a1f0 <vTaskSwitchContext+0xec>)
 800a150:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a152:	4b29      	ldr	r3, [pc, #164]	@ (800a1f8 <vTaskSwitchContext+0xf4>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	e011      	b.n	800a17e <vTaskSwitchContext+0x7a>
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10b      	bne.n	800a178 <vTaskSwitchContext+0x74>
	__asm volatile
 800a160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a164:	f383 8811 	msr	BASEPRI, r3
 800a168:	f3bf 8f6f 	isb	sy
 800a16c:	f3bf 8f4f 	dsb	sy
 800a170:	607b      	str	r3, [r7, #4]
}
 800a172:	bf00      	nop
 800a174:	bf00      	nop
 800a176:	e7fd      	b.n	800a174 <vTaskSwitchContext+0x70>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	3b01      	subs	r3, #1
 800a17c:	60fb      	str	r3, [r7, #12]
 800a17e:	491f      	ldr	r1, [pc, #124]	@ (800a1fc <vTaskSwitchContext+0xf8>)
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	4613      	mov	r3, r2
 800a184:	009b      	lsls	r3, r3, #2
 800a186:	4413      	add	r3, r2
 800a188:	009b      	lsls	r3, r3, #2
 800a18a:	440b      	add	r3, r1
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d0e3      	beq.n	800a15a <vTaskSwitchContext+0x56>
 800a192:	68fa      	ldr	r2, [r7, #12]
 800a194:	4613      	mov	r3, r2
 800a196:	009b      	lsls	r3, r3, #2
 800a198:	4413      	add	r3, r2
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	4a17      	ldr	r2, [pc, #92]	@ (800a1fc <vTaskSwitchContext+0xf8>)
 800a19e:	4413      	add	r3, r2
 800a1a0:	60bb      	str	r3, [r7, #8]
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	685a      	ldr	r2, [r3, #4]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	605a      	str	r2, [r3, #4]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	685a      	ldr	r2, [r3, #4]
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	3308      	adds	r3, #8
 800a1b4:	429a      	cmp	r2, r3
 800a1b6:	d104      	bne.n	800a1c2 <vTaskSwitchContext+0xbe>
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	685a      	ldr	r2, [r3, #4]
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	605a      	str	r2, [r3, #4]
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	685b      	ldr	r3, [r3, #4]
 800a1c6:	68db      	ldr	r3, [r3, #12]
 800a1c8:	4a0a      	ldr	r2, [pc, #40]	@ (800a1f4 <vTaskSwitchContext+0xf0>)
 800a1ca:	6013      	str	r3, [r2, #0]
 800a1cc:	4a0a      	ldr	r2, [pc, #40]	@ (800a1f8 <vTaskSwitchContext+0xf4>)
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a1d2:	4b08      	ldr	r3, [pc, #32]	@ (800a1f4 <vTaskSwitchContext+0xf0>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	3358      	adds	r3, #88	@ 0x58
 800a1d8:	4a09      	ldr	r2, [pc, #36]	@ (800a200 <vTaskSwitchContext+0xfc>)
 800a1da:	6013      	str	r3, [r2, #0]
}
 800a1dc:	bf00      	nop
 800a1de:	3710      	adds	r7, #16
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	20006eb4 	.word	0x20006eb4
 800a1e8:	20006ea0 	.word	0x20006ea0
 800a1ec:	20006ebc 	.word	0x20006ebc
 800a1f0:	20006eb8 	.word	0x20006eb8
 800a1f4:	200069b8 	.word	0x200069b8
 800a1f8:	20006e94 	.word	0x20006e94
 800a1fc:	200069bc 	.word	0x200069bc
 800a200:	20000040 	.word	0x20000040

0800a204 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b084      	sub	sp, #16
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10b      	bne.n	800a22c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800a214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a218:	f383 8811 	msr	BASEPRI, r3
 800a21c:	f3bf 8f6f 	isb	sy
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	60fb      	str	r3, [r7, #12]
}
 800a226:	bf00      	nop
 800a228:	bf00      	nop
 800a22a:	e7fd      	b.n	800a228 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a22c:	4b07      	ldr	r3, [pc, #28]	@ (800a24c <vTaskPlaceOnEventList+0x48>)
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	3318      	adds	r3, #24
 800a232:	4619      	mov	r1, r3
 800a234:	6878      	ldr	r0, [r7, #4]
 800a236:	f7fe f9f0 	bl	800861a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a23a:	2101      	movs	r1, #1
 800a23c:	6838      	ldr	r0, [r7, #0]
 800a23e:	f000 fb97 	bl	800a970 <prvAddCurrentTaskToDelayedList>
}
 800a242:	bf00      	nop
 800a244:	3710      	adds	r7, #16
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
 800a24a:	bf00      	nop
 800a24c:	200069b8 	.word	0x200069b8

0800a250 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a250:	b580      	push	{r7, lr}
 800a252:	b086      	sub	sp, #24
 800a254:	af00      	add	r7, sp, #0
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d10b      	bne.n	800a27a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800a262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a266:	f383 8811 	msr	BASEPRI, r3
 800a26a:	f3bf 8f6f 	isb	sy
 800a26e:	f3bf 8f4f 	dsb	sy
 800a272:	617b      	str	r3, [r7, #20]
}
 800a274:	bf00      	nop
 800a276:	bf00      	nop
 800a278:	e7fd      	b.n	800a276 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a27a:	4b0a      	ldr	r3, [pc, #40]	@ (800a2a4 <vTaskPlaceOnEventListRestricted+0x54>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	3318      	adds	r3, #24
 800a280:	4619      	mov	r1, r3
 800a282:	68f8      	ldr	r0, [r7, #12]
 800a284:	f7fe f9a5 	bl	80085d2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d002      	beq.n	800a294 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800a28e:	f04f 33ff 	mov.w	r3, #4294967295
 800a292:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a294:	6879      	ldr	r1, [r7, #4]
 800a296:	68b8      	ldr	r0, [r7, #8]
 800a298:	f000 fb6a 	bl	800a970 <prvAddCurrentTaskToDelayedList>
	}
 800a29c:	bf00      	nop
 800a29e:	3718      	adds	r7, #24
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	200069b8 	.word	0x200069b8

0800a2a8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b086      	sub	sp, #24
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	68db      	ldr	r3, [r3, #12]
 800a2b6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d10b      	bne.n	800a2d6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800a2be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2c2:	f383 8811 	msr	BASEPRI, r3
 800a2c6:	f3bf 8f6f 	isb	sy
 800a2ca:	f3bf 8f4f 	dsb	sy
 800a2ce:	60fb      	str	r3, [r7, #12]
}
 800a2d0:	bf00      	nop
 800a2d2:	bf00      	nop
 800a2d4:	e7fd      	b.n	800a2d2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	3318      	adds	r3, #24
 800a2da:	4618      	mov	r0, r3
 800a2dc:	f7fe f9d6 	bl	800868c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a2e0:	4b1d      	ldr	r3, [pc, #116]	@ (800a358 <xTaskRemoveFromEventList+0xb0>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d11d      	bne.n	800a324 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	3304      	adds	r3, #4
 800a2ec:	4618      	mov	r0, r3
 800a2ee:	f7fe f9cd 	bl	800868c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a2f6:	4b19      	ldr	r3, [pc, #100]	@ (800a35c <xTaskRemoveFromEventList+0xb4>)
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d903      	bls.n	800a306 <xTaskRemoveFromEventList+0x5e>
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a302:	4a16      	ldr	r2, [pc, #88]	@ (800a35c <xTaskRemoveFromEventList+0xb4>)
 800a304:	6013      	str	r3, [r2, #0]
 800a306:	693b      	ldr	r3, [r7, #16]
 800a308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a30a:	4613      	mov	r3, r2
 800a30c:	009b      	lsls	r3, r3, #2
 800a30e:	4413      	add	r3, r2
 800a310:	009b      	lsls	r3, r3, #2
 800a312:	4a13      	ldr	r2, [pc, #76]	@ (800a360 <xTaskRemoveFromEventList+0xb8>)
 800a314:	441a      	add	r2, r3
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	3304      	adds	r3, #4
 800a31a:	4619      	mov	r1, r3
 800a31c:	4610      	mov	r0, r2
 800a31e:	f7fe f958 	bl	80085d2 <vListInsertEnd>
 800a322:	e005      	b.n	800a330 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	3318      	adds	r3, #24
 800a328:	4619      	mov	r1, r3
 800a32a:	480e      	ldr	r0, [pc, #56]	@ (800a364 <xTaskRemoveFromEventList+0xbc>)
 800a32c:	f7fe f951 	bl	80085d2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a330:	693b      	ldr	r3, [r7, #16]
 800a332:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a334:	4b0c      	ldr	r3, [pc, #48]	@ (800a368 <xTaskRemoveFromEventList+0xc0>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a33a:	429a      	cmp	r2, r3
 800a33c:	d905      	bls.n	800a34a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a33e:	2301      	movs	r3, #1
 800a340:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a342:	4b0a      	ldr	r3, [pc, #40]	@ (800a36c <xTaskRemoveFromEventList+0xc4>)
 800a344:	2201      	movs	r2, #1
 800a346:	601a      	str	r2, [r3, #0]
 800a348:	e001      	b.n	800a34e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800a34a:	2300      	movs	r3, #0
 800a34c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a34e:	697b      	ldr	r3, [r7, #20]
}
 800a350:	4618      	mov	r0, r3
 800a352:	3718      	adds	r7, #24
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	20006eb4 	.word	0x20006eb4
 800a35c:	20006e94 	.word	0x20006e94
 800a360:	200069bc 	.word	0x200069bc
 800a364:	20006e4c 	.word	0x20006e4c
 800a368:	200069b8 	.word	0x200069b8
 800a36c:	20006ea0 	.word	0x20006ea0

0800a370 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a370:	b480      	push	{r7}
 800a372:	b083      	sub	sp, #12
 800a374:	af00      	add	r7, sp, #0
 800a376:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a378:	4b06      	ldr	r3, [pc, #24]	@ (800a394 <vTaskInternalSetTimeOutState+0x24>)
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a380:	4b05      	ldr	r3, [pc, #20]	@ (800a398 <vTaskInternalSetTimeOutState+0x28>)
 800a382:	681a      	ldr	r2, [r3, #0]
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	605a      	str	r2, [r3, #4]
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	20006ea4 	.word	0x20006ea4
 800a398:	20006e90 	.word	0x20006e90

0800a39c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b088      	sub	sp, #32
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	6078      	str	r0, [r7, #4]
 800a3a4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d10b      	bne.n	800a3c4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800a3ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3b0:	f383 8811 	msr	BASEPRI, r3
 800a3b4:	f3bf 8f6f 	isb	sy
 800a3b8:	f3bf 8f4f 	dsb	sy
 800a3bc:	613b      	str	r3, [r7, #16]
}
 800a3be:	bf00      	nop
 800a3c0:	bf00      	nop
 800a3c2:	e7fd      	b.n	800a3c0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d10b      	bne.n	800a3e2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800a3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3ce:	f383 8811 	msr	BASEPRI, r3
 800a3d2:	f3bf 8f6f 	isb	sy
 800a3d6:	f3bf 8f4f 	dsb	sy
 800a3da:	60fb      	str	r3, [r7, #12]
}
 800a3dc:	bf00      	nop
 800a3de:	bf00      	nop
 800a3e0:	e7fd      	b.n	800a3de <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800a3e2:	f000 ffa1 	bl	800b328 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a3e6:	4b1d      	ldr	r3, [pc, #116]	@ (800a45c <xTaskCheckForTimeOut+0xc0>)
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	685b      	ldr	r3, [r3, #4]
 800a3f0:	69ba      	ldr	r2, [r7, #24]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3fe:	d102      	bne.n	800a406 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a400:	2300      	movs	r3, #0
 800a402:	61fb      	str	r3, [r7, #28]
 800a404:	e023      	b.n	800a44e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681a      	ldr	r2, [r3, #0]
 800a40a:	4b15      	ldr	r3, [pc, #84]	@ (800a460 <xTaskCheckForTimeOut+0xc4>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d007      	beq.n	800a422 <xTaskCheckForTimeOut+0x86>
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	69ba      	ldr	r2, [r7, #24]
 800a418:	429a      	cmp	r2, r3
 800a41a:	d302      	bcc.n	800a422 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a41c:	2301      	movs	r3, #1
 800a41e:	61fb      	str	r3, [r7, #28]
 800a420:	e015      	b.n	800a44e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a422:	683b      	ldr	r3, [r7, #0]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	697a      	ldr	r2, [r7, #20]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d20b      	bcs.n	800a444 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	681a      	ldr	r2, [r3, #0]
 800a430:	697b      	ldr	r3, [r7, #20]
 800a432:	1ad2      	subs	r2, r2, r3
 800a434:	683b      	ldr	r3, [r7, #0]
 800a436:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f7ff ff99 	bl	800a370 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a43e:	2300      	movs	r3, #0
 800a440:	61fb      	str	r3, [r7, #28]
 800a442:	e004      	b.n	800a44e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800a444:	683b      	ldr	r3, [r7, #0]
 800a446:	2200      	movs	r2, #0
 800a448:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a44a:	2301      	movs	r3, #1
 800a44c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a44e:	f000 ff9d 	bl	800b38c <vPortExitCritical>

	return xReturn;
 800a452:	69fb      	ldr	r3, [r7, #28]
}
 800a454:	4618      	mov	r0, r3
 800a456:	3720      	adds	r7, #32
 800a458:	46bd      	mov	sp, r7
 800a45a:	bd80      	pop	{r7, pc}
 800a45c:	20006e90 	.word	0x20006e90
 800a460:	20006ea4 	.word	0x20006ea4

0800a464 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a464:	b480      	push	{r7}
 800a466:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a468:	4b03      	ldr	r3, [pc, #12]	@ (800a478 <vTaskMissedYield+0x14>)
 800a46a:	2201      	movs	r2, #1
 800a46c:	601a      	str	r2, [r3, #0]
}
 800a46e:	bf00      	nop
 800a470:	46bd      	mov	sp, r7
 800a472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a476:	4770      	bx	lr
 800a478:	20006ea0 	.word	0x20006ea0

0800a47c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a484:	f000 f852 	bl	800a52c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a488:	4b06      	ldr	r3, [pc, #24]	@ (800a4a4 <prvIdleTask+0x28>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	2b01      	cmp	r3, #1
 800a48e:	d9f9      	bls.n	800a484 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a490:	4b05      	ldr	r3, [pc, #20]	@ (800a4a8 <prvIdleTask+0x2c>)
 800a492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a496:	601a      	str	r2, [r3, #0]
 800a498:	f3bf 8f4f 	dsb	sy
 800a49c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a4a0:	e7f0      	b.n	800a484 <prvIdleTask+0x8>
 800a4a2:	bf00      	nop
 800a4a4:	200069bc 	.word	0x200069bc
 800a4a8:	e000ed04 	.word	0xe000ed04

0800a4ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	607b      	str	r3, [r7, #4]
 800a4b6:	e00c      	b.n	800a4d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a4b8:	687a      	ldr	r2, [r7, #4]
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	009b      	lsls	r3, r3, #2
 800a4be:	4413      	add	r3, r2
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	4a12      	ldr	r2, [pc, #72]	@ (800a50c <prvInitialiseTaskLists+0x60>)
 800a4c4:	4413      	add	r3, r2
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7fe f856 	bl	8008578 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	3301      	adds	r3, #1
 800a4d0:	607b      	str	r3, [r7, #4]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2b37      	cmp	r3, #55	@ 0x37
 800a4d6:	d9ef      	bls.n	800a4b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a4d8:	480d      	ldr	r0, [pc, #52]	@ (800a510 <prvInitialiseTaskLists+0x64>)
 800a4da:	f7fe f84d 	bl	8008578 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a4de:	480d      	ldr	r0, [pc, #52]	@ (800a514 <prvInitialiseTaskLists+0x68>)
 800a4e0:	f7fe f84a 	bl	8008578 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a4e4:	480c      	ldr	r0, [pc, #48]	@ (800a518 <prvInitialiseTaskLists+0x6c>)
 800a4e6:	f7fe f847 	bl	8008578 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a4ea:	480c      	ldr	r0, [pc, #48]	@ (800a51c <prvInitialiseTaskLists+0x70>)
 800a4ec:	f7fe f844 	bl	8008578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a4f0:	480b      	ldr	r0, [pc, #44]	@ (800a520 <prvInitialiseTaskLists+0x74>)
 800a4f2:	f7fe f841 	bl	8008578 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a4f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a524 <prvInitialiseTaskLists+0x78>)
 800a4f8:	4a05      	ldr	r2, [pc, #20]	@ (800a510 <prvInitialiseTaskLists+0x64>)
 800a4fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a4fc:	4b0a      	ldr	r3, [pc, #40]	@ (800a528 <prvInitialiseTaskLists+0x7c>)
 800a4fe:	4a05      	ldr	r2, [pc, #20]	@ (800a514 <prvInitialiseTaskLists+0x68>)
 800a500:	601a      	str	r2, [r3, #0]
}
 800a502:	bf00      	nop
 800a504:	3708      	adds	r7, #8
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	200069bc 	.word	0x200069bc
 800a510:	20006e1c 	.word	0x20006e1c
 800a514:	20006e30 	.word	0x20006e30
 800a518:	20006e4c 	.word	0x20006e4c
 800a51c:	20006e60 	.word	0x20006e60
 800a520:	20006e78 	.word	0x20006e78
 800a524:	20006e44 	.word	0x20006e44
 800a528:	20006e48 	.word	0x20006e48

0800a52c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a532:	e019      	b.n	800a568 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a534:	f000 fef8 	bl	800b328 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a538:	4b10      	ldr	r3, [pc, #64]	@ (800a57c <prvCheckTasksWaitingTermination+0x50>)
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	68db      	ldr	r3, [r3, #12]
 800a53e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	3304      	adds	r3, #4
 800a544:	4618      	mov	r0, r3
 800a546:	f7fe f8a1 	bl	800868c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a54a:	4b0d      	ldr	r3, [pc, #52]	@ (800a580 <prvCheckTasksWaitingTermination+0x54>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	3b01      	subs	r3, #1
 800a550:	4a0b      	ldr	r2, [pc, #44]	@ (800a580 <prvCheckTasksWaitingTermination+0x54>)
 800a552:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a554:	4b0b      	ldr	r3, [pc, #44]	@ (800a584 <prvCheckTasksWaitingTermination+0x58>)
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	3b01      	subs	r3, #1
 800a55a:	4a0a      	ldr	r2, [pc, #40]	@ (800a584 <prvCheckTasksWaitingTermination+0x58>)
 800a55c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a55e:	f000 ff15 	bl	800b38c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 f810 	bl	800a588 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a568:	4b06      	ldr	r3, [pc, #24]	@ (800a584 <prvCheckTasksWaitingTermination+0x58>)
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d1e1      	bne.n	800a534 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a570:	bf00      	nop
 800a572:	bf00      	nop
 800a574:	3708      	adds	r7, #8
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	20006e60 	.word	0x20006e60
 800a580:	20006e8c 	.word	0x20006e8c
 800a584:	20006e74 	.word	0x20006e74

0800a588 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	3358      	adds	r3, #88	@ 0x58
 800a594:	4618      	mov	r0, r3
 800a596:	f013 fcc7 	bl	801df28 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d108      	bne.n	800a5b6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	f001 f8ad 	bl	800b708 <vPortFree>
				vPortFree( pxTCB );
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f001 f8aa 	bl	800b708 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a5b4:	e019      	b.n	800a5ea <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800a5bc:	2b01      	cmp	r3, #1
 800a5be:	d103      	bne.n	800a5c8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f001 f8a1 	bl	800b708 <vPortFree>
	}
 800a5c6:	e010      	b.n	800a5ea <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800a5ce:	2b02      	cmp	r3, #2
 800a5d0:	d00b      	beq.n	800a5ea <prvDeleteTCB+0x62>
	__asm volatile
 800a5d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5d6:	f383 8811 	msr	BASEPRI, r3
 800a5da:	f3bf 8f6f 	isb	sy
 800a5de:	f3bf 8f4f 	dsb	sy
 800a5e2:	60fb      	str	r3, [r7, #12]
}
 800a5e4:	bf00      	nop
 800a5e6:	bf00      	nop
 800a5e8:	e7fd      	b.n	800a5e6 <prvDeleteTCB+0x5e>
	}
 800a5ea:	bf00      	nop
 800a5ec:	3710      	adds	r7, #16
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}
	...

0800a5f4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a5fa:	4b0c      	ldr	r3, [pc, #48]	@ (800a62c <prvResetNextTaskUnblockTime+0x38>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d104      	bne.n	800a60e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a604:	4b0a      	ldr	r3, [pc, #40]	@ (800a630 <prvResetNextTaskUnblockTime+0x3c>)
 800a606:	f04f 32ff 	mov.w	r2, #4294967295
 800a60a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a60c:	e008      	b.n	800a620 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a60e:	4b07      	ldr	r3, [pc, #28]	@ (800a62c <prvResetNextTaskUnblockTime+0x38>)
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	68db      	ldr	r3, [r3, #12]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	4a04      	ldr	r2, [pc, #16]	@ (800a630 <prvResetNextTaskUnblockTime+0x3c>)
 800a61e:	6013      	str	r3, [r2, #0]
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr
 800a62c:	20006e44 	.word	0x20006e44
 800a630:	20006eac 	.word	0x20006eac

0800a634 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800a634:	b480      	push	{r7}
 800a636:	b083      	sub	sp, #12
 800a638:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800a63a:	4b05      	ldr	r3, [pc, #20]	@ (800a650 <xTaskGetCurrentTaskHandle+0x1c>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	607b      	str	r3, [r7, #4]

		return xReturn;
 800a640:	687b      	ldr	r3, [r7, #4]
	}
 800a642:	4618      	mov	r0, r3
 800a644:	370c      	adds	r7, #12
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	200069b8 	.word	0x200069b8

0800a654 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a654:	b480      	push	{r7}
 800a656:	b083      	sub	sp, #12
 800a658:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a65a:	4b0b      	ldr	r3, [pc, #44]	@ (800a688 <xTaskGetSchedulerState+0x34>)
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d102      	bne.n	800a668 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a662:	2301      	movs	r3, #1
 800a664:	607b      	str	r3, [r7, #4]
 800a666:	e008      	b.n	800a67a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a668:	4b08      	ldr	r3, [pc, #32]	@ (800a68c <xTaskGetSchedulerState+0x38>)
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d102      	bne.n	800a676 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a670:	2302      	movs	r3, #2
 800a672:	607b      	str	r3, [r7, #4]
 800a674:	e001      	b.n	800a67a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a676:	2300      	movs	r3, #0
 800a678:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a67a:	687b      	ldr	r3, [r7, #4]
	}
 800a67c:	4618      	mov	r0, r3
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	20006e98 	.word	0x20006e98
 800a68c:	20006eb4 	.word	0x20006eb4

0800a690 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800a690:	b580      	push	{r7, lr}
 800a692:	b084      	sub	sp, #16
 800a694:	af00      	add	r7, sp, #0
 800a696:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800a69c:	2300      	movs	r3, #0
 800a69e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d051      	beq.n	800a74a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6aa:	4b2a      	ldr	r3, [pc, #168]	@ (800a754 <xTaskPriorityInherit+0xc4>)
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d241      	bcs.n	800a738 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a6b4:	68bb      	ldr	r3, [r7, #8]
 800a6b6:	699b      	ldr	r3, [r3, #24]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	db06      	blt.n	800a6ca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6bc:	4b25      	ldr	r3, [pc, #148]	@ (800a754 <xTaskPriorityInherit+0xc4>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a6c2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	6959      	ldr	r1, [r3, #20]
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6d2:	4613      	mov	r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	4413      	add	r3, r2
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	4a1f      	ldr	r2, [pc, #124]	@ (800a758 <xTaskPriorityInherit+0xc8>)
 800a6dc:	4413      	add	r3, r2
 800a6de:	4299      	cmp	r1, r3
 800a6e0:	d122      	bne.n	800a728 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a6e2:	68bb      	ldr	r3, [r7, #8]
 800a6e4:	3304      	adds	r3, #4
 800a6e6:	4618      	mov	r0, r3
 800a6e8:	f7fd ffd0 	bl	800868c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a6ec:	4b19      	ldr	r3, [pc, #100]	@ (800a754 <xTaskPriorityInherit+0xc4>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6f2:	68bb      	ldr	r3, [r7, #8]
 800a6f4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a6fa:	4b18      	ldr	r3, [pc, #96]	@ (800a75c <xTaskPriorityInherit+0xcc>)
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	429a      	cmp	r2, r3
 800a700:	d903      	bls.n	800a70a <xTaskPriorityInherit+0x7a>
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a706:	4a15      	ldr	r2, [pc, #84]	@ (800a75c <xTaskPriorityInherit+0xcc>)
 800a708:	6013      	str	r3, [r2, #0]
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a70e:	4613      	mov	r3, r2
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	4413      	add	r3, r2
 800a714:	009b      	lsls	r3, r3, #2
 800a716:	4a10      	ldr	r2, [pc, #64]	@ (800a758 <xTaskPriorityInherit+0xc8>)
 800a718:	441a      	add	r2, r3
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	3304      	adds	r3, #4
 800a71e:	4619      	mov	r1, r3
 800a720:	4610      	mov	r0, r2
 800a722:	f7fd ff56 	bl	80085d2 <vListInsertEnd>
 800a726:	e004      	b.n	800a732 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800a728:	4b0a      	ldr	r3, [pc, #40]	@ (800a754 <xTaskPriorityInherit+0xc4>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800a732:	2301      	movs	r3, #1
 800a734:	60fb      	str	r3, [r7, #12]
 800a736:	e008      	b.n	800a74a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a73c:	4b05      	ldr	r3, [pc, #20]	@ (800a754 <xTaskPriorityInherit+0xc4>)
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a742:	429a      	cmp	r2, r3
 800a744:	d201      	bcs.n	800a74a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800a746:	2301      	movs	r3, #1
 800a748:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a74a:	68fb      	ldr	r3, [r7, #12]
	}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3710      	adds	r7, #16
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	200069b8 	.word	0x200069b8
 800a758:	200069bc 	.word	0x200069bc
 800a75c:	20006e94 	.word	0x20006e94

0800a760 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a76c:	2300      	movs	r3, #0
 800a76e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d058      	beq.n	800a828 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a776:	4b2f      	ldr	r3, [pc, #188]	@ (800a834 <xTaskPriorityDisinherit+0xd4>)
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	693a      	ldr	r2, [r7, #16]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d00b      	beq.n	800a798 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800a780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a784:	f383 8811 	msr	BASEPRI, r3
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	60fb      	str	r3, [r7, #12]
}
 800a792:	bf00      	nop
 800a794:	bf00      	nop
 800a796:	e7fd      	b.n	800a794 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d10b      	bne.n	800a7b8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800a7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a4:	f383 8811 	msr	BASEPRI, r3
 800a7a8:	f3bf 8f6f 	isb	sy
 800a7ac:	f3bf 8f4f 	dsb	sy
 800a7b0:	60bb      	str	r3, [r7, #8]
}
 800a7b2:	bf00      	nop
 800a7b4:	bf00      	nop
 800a7b6:	e7fd      	b.n	800a7b4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7bc:	1e5a      	subs	r2, r3, #1
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a7c2:	693b      	ldr	r3, [r7, #16]
 800a7c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d02c      	beq.n	800a828 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d128      	bne.n	800a828 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a7d6:	693b      	ldr	r3, [r7, #16]
 800a7d8:	3304      	adds	r3, #4
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f7fd ff56 	bl	800868c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a7e0:	693b      	ldr	r3, [r7, #16]
 800a7e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a7ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a7f8:	4b0f      	ldr	r3, [pc, #60]	@ (800a838 <xTaskPriorityDisinherit+0xd8>)
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d903      	bls.n	800a808 <xTaskPriorityDisinherit+0xa8>
 800a800:	693b      	ldr	r3, [r7, #16]
 800a802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a804:	4a0c      	ldr	r2, [pc, #48]	@ (800a838 <xTaskPriorityDisinherit+0xd8>)
 800a806:	6013      	str	r3, [r2, #0]
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a80c:	4613      	mov	r3, r2
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	4413      	add	r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	4a09      	ldr	r2, [pc, #36]	@ (800a83c <xTaskPriorityDisinherit+0xdc>)
 800a816:	441a      	add	r2, r3
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	3304      	adds	r3, #4
 800a81c:	4619      	mov	r1, r3
 800a81e:	4610      	mov	r0, r2
 800a820:	f7fd fed7 	bl	80085d2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a824:	2301      	movs	r3, #1
 800a826:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a828:	697b      	ldr	r3, [r7, #20]
	}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3718      	adds	r7, #24
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	200069b8 	.word	0x200069b8
 800a838:	20006e94 	.word	0x20006e94
 800a83c:	200069bc 	.word	0x200069bc

0800a840 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800a840:	b580      	push	{r7, lr}
 800a842:	b088      	sub	sp, #32
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
 800a848:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800a84e:	2301      	movs	r3, #1
 800a850:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d06c      	beq.n	800a932 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d10b      	bne.n	800a878 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800a860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a864:	f383 8811 	msr	BASEPRI, r3
 800a868:	f3bf 8f6f 	isb	sy
 800a86c:	f3bf 8f4f 	dsb	sy
 800a870:	60fb      	str	r3, [r7, #12]
}
 800a872:	bf00      	nop
 800a874:	bf00      	nop
 800a876:	e7fd      	b.n	800a874 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800a878:	69bb      	ldr	r3, [r7, #24]
 800a87a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a87c:	683a      	ldr	r2, [r7, #0]
 800a87e:	429a      	cmp	r2, r3
 800a880:	d902      	bls.n	800a888 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800a882:	683b      	ldr	r3, [r7, #0]
 800a884:	61fb      	str	r3, [r7, #28]
 800a886:	e002      	b.n	800a88e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800a888:	69bb      	ldr	r3, [r7, #24]
 800a88a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a88c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a892:	69fa      	ldr	r2, [r7, #28]
 800a894:	429a      	cmp	r2, r3
 800a896:	d04c      	beq.n	800a932 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800a898:	69bb      	ldr	r3, [r7, #24]
 800a89a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a89c:	697a      	ldr	r2, [r7, #20]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d147      	bne.n	800a932 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800a8a2:	4b26      	ldr	r3, [pc, #152]	@ (800a93c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	69ba      	ldr	r2, [r7, #24]
 800a8a8:	429a      	cmp	r2, r3
 800a8aa:	d10b      	bne.n	800a8c4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800a8ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8b0:	f383 8811 	msr	BASEPRI, r3
 800a8b4:	f3bf 8f6f 	isb	sy
 800a8b8:	f3bf 8f4f 	dsb	sy
 800a8bc:	60bb      	str	r3, [r7, #8]
}
 800a8be:	bf00      	nop
 800a8c0:	bf00      	nop
 800a8c2:	e7fd      	b.n	800a8c0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a8c8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800a8ca:	69bb      	ldr	r3, [r7, #24]
 800a8cc:	69fa      	ldr	r2, [r7, #28]
 800a8ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	699b      	ldr	r3, [r3, #24]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	db04      	blt.n	800a8e2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800a8de:	69bb      	ldr	r3, [r7, #24]
 800a8e0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800a8e2:	69bb      	ldr	r3, [r7, #24]
 800a8e4:	6959      	ldr	r1, [r3, #20]
 800a8e6:	693a      	ldr	r2, [r7, #16]
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	4413      	add	r3, r2
 800a8ee:	009b      	lsls	r3, r3, #2
 800a8f0:	4a13      	ldr	r2, [pc, #76]	@ (800a940 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a8f2:	4413      	add	r3, r2
 800a8f4:	4299      	cmp	r1, r3
 800a8f6:	d11c      	bne.n	800a932 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a8f8:	69bb      	ldr	r3, [r7, #24]
 800a8fa:	3304      	adds	r3, #4
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	f7fd fec5 	bl	800868c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800a902:	69bb      	ldr	r3, [r7, #24]
 800a904:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a906:	4b0f      	ldr	r3, [pc, #60]	@ (800a944 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d903      	bls.n	800a916 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a912:	4a0c      	ldr	r2, [pc, #48]	@ (800a944 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800a914:	6013      	str	r3, [r2, #0]
 800a916:	69bb      	ldr	r3, [r7, #24]
 800a918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a91a:	4613      	mov	r3, r2
 800a91c:	009b      	lsls	r3, r3, #2
 800a91e:	4413      	add	r3, r2
 800a920:	009b      	lsls	r3, r3, #2
 800a922:	4a07      	ldr	r2, [pc, #28]	@ (800a940 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800a924:	441a      	add	r2, r3
 800a926:	69bb      	ldr	r3, [r7, #24]
 800a928:	3304      	adds	r3, #4
 800a92a:	4619      	mov	r1, r3
 800a92c:	4610      	mov	r0, r2
 800a92e:	f7fd fe50 	bl	80085d2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a932:	bf00      	nop
 800a934:	3720      	adds	r7, #32
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}
 800a93a:	bf00      	nop
 800a93c:	200069b8 	.word	0x200069b8
 800a940:	200069bc 	.word	0x200069bc
 800a944:	20006e94 	.word	0x20006e94

0800a948 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800a948:	b480      	push	{r7}
 800a94a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800a94c:	4b07      	ldr	r3, [pc, #28]	@ (800a96c <pvTaskIncrementMutexHeldCount+0x24>)
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d004      	beq.n	800a95e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800a954:	4b05      	ldr	r3, [pc, #20]	@ (800a96c <pvTaskIncrementMutexHeldCount+0x24>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a95a:	3201      	adds	r2, #1
 800a95c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800a95e:	4b03      	ldr	r3, [pc, #12]	@ (800a96c <pvTaskIncrementMutexHeldCount+0x24>)
 800a960:	681b      	ldr	r3, [r3, #0]
	}
 800a962:	4618      	mov	r0, r3
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr
 800a96c:	200069b8 	.word	0x200069b8

0800a970 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b084      	sub	sp, #16
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
 800a978:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a97a:	4b21      	ldr	r3, [pc, #132]	@ (800aa00 <prvAddCurrentTaskToDelayedList+0x90>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a980:	4b20      	ldr	r3, [pc, #128]	@ (800aa04 <prvAddCurrentTaskToDelayedList+0x94>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	3304      	adds	r3, #4
 800a986:	4618      	mov	r0, r3
 800a988:	f7fd fe80 	bl	800868c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a992:	d10a      	bne.n	800a9aa <prvAddCurrentTaskToDelayedList+0x3a>
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	2b00      	cmp	r3, #0
 800a998:	d007      	beq.n	800a9aa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a99a:	4b1a      	ldr	r3, [pc, #104]	@ (800aa04 <prvAddCurrentTaskToDelayedList+0x94>)
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	3304      	adds	r3, #4
 800a9a0:	4619      	mov	r1, r3
 800a9a2:	4819      	ldr	r0, [pc, #100]	@ (800aa08 <prvAddCurrentTaskToDelayedList+0x98>)
 800a9a4:	f7fd fe15 	bl	80085d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a9a8:	e026      	b.n	800a9f8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a9aa:	68fa      	ldr	r2, [r7, #12]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	4413      	add	r3, r2
 800a9b0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a9b2:	4b14      	ldr	r3, [pc, #80]	@ (800aa04 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	68ba      	ldr	r2, [r7, #8]
 800a9b8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a9ba:	68ba      	ldr	r2, [r7, #8]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	429a      	cmp	r2, r3
 800a9c0:	d209      	bcs.n	800a9d6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9c2:	4b12      	ldr	r3, [pc, #72]	@ (800aa0c <prvAddCurrentTaskToDelayedList+0x9c>)
 800a9c4:	681a      	ldr	r2, [r3, #0]
 800a9c6:	4b0f      	ldr	r3, [pc, #60]	@ (800aa04 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	3304      	adds	r3, #4
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	4610      	mov	r0, r2
 800a9d0:	f7fd fe23 	bl	800861a <vListInsert>
}
 800a9d4:	e010      	b.n	800a9f8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a9d6:	4b0e      	ldr	r3, [pc, #56]	@ (800aa10 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a9d8:	681a      	ldr	r2, [r3, #0]
 800a9da:	4b0a      	ldr	r3, [pc, #40]	@ (800aa04 <prvAddCurrentTaskToDelayedList+0x94>)
 800a9dc:	681b      	ldr	r3, [r3, #0]
 800a9de:	3304      	adds	r3, #4
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	4610      	mov	r0, r2
 800a9e4:	f7fd fe19 	bl	800861a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a9e8:	4b0a      	ldr	r3, [pc, #40]	@ (800aa14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	68ba      	ldr	r2, [r7, #8]
 800a9ee:	429a      	cmp	r2, r3
 800a9f0:	d202      	bcs.n	800a9f8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a9f2:	4a08      	ldr	r2, [pc, #32]	@ (800aa14 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	6013      	str	r3, [r2, #0]
}
 800a9f8:	bf00      	nop
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}
 800aa00:	20006e90 	.word	0x20006e90
 800aa04:	200069b8 	.word	0x200069b8
 800aa08:	20006e78 	.word	0x20006e78
 800aa0c:	20006e48 	.word	0x20006e48
 800aa10:	20006e44 	.word	0x20006e44
 800aa14:	20006eac 	.word	0x20006eac

0800aa18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b08a      	sub	sp, #40	@ 0x28
 800aa1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800aa22:	f000 fb13 	bl	800b04c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800aa26:	4b1d      	ldr	r3, [pc, #116]	@ (800aa9c <xTimerCreateTimerTask+0x84>)
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d021      	beq.n	800aa72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800aa32:	2300      	movs	r3, #0
 800aa34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800aa36:	1d3a      	adds	r2, r7, #4
 800aa38:	f107 0108 	add.w	r1, r7, #8
 800aa3c:	f107 030c 	add.w	r3, r7, #12
 800aa40:	4618      	mov	r0, r3
 800aa42:	f7fd fd7f 	bl	8008544 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800aa46:	6879      	ldr	r1, [r7, #4]
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	68fa      	ldr	r2, [r7, #12]
 800aa4c:	9202      	str	r2, [sp, #8]
 800aa4e:	9301      	str	r3, [sp, #4]
 800aa50:	2302      	movs	r3, #2
 800aa52:	9300      	str	r3, [sp, #0]
 800aa54:	2300      	movs	r3, #0
 800aa56:	460a      	mov	r2, r1
 800aa58:	4911      	ldr	r1, [pc, #68]	@ (800aaa0 <xTimerCreateTimerTask+0x88>)
 800aa5a:	4812      	ldr	r0, [pc, #72]	@ (800aaa4 <xTimerCreateTimerTask+0x8c>)
 800aa5c:	f7fe ff62 	bl	8009924 <xTaskCreateStatic>
 800aa60:	4603      	mov	r3, r0
 800aa62:	4a11      	ldr	r2, [pc, #68]	@ (800aaa8 <xTimerCreateTimerTask+0x90>)
 800aa64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800aa66:	4b10      	ldr	r3, [pc, #64]	@ (800aaa8 <xTimerCreateTimerTask+0x90>)
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d001      	beq.n	800aa72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10b      	bne.n	800aa90 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800aa78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa7c:	f383 8811 	msr	BASEPRI, r3
 800aa80:	f3bf 8f6f 	isb	sy
 800aa84:	f3bf 8f4f 	dsb	sy
 800aa88:	613b      	str	r3, [r7, #16]
}
 800aa8a:	bf00      	nop
 800aa8c:	bf00      	nop
 800aa8e:	e7fd      	b.n	800aa8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800aa90:	697b      	ldr	r3, [r7, #20]
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	3718      	adds	r7, #24
 800aa96:	46bd      	mov	sp, r7
 800aa98:	bd80      	pop	{r7, pc}
 800aa9a:	bf00      	nop
 800aa9c:	20006ef0 	.word	0x20006ef0
 800aaa0:	08021710 	.word	0x08021710
 800aaa4:	0800abe5 	.word	0x0800abe5
 800aaa8:	20006ef4 	.word	0x20006ef4

0800aaac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b08a      	sub	sp, #40	@ 0x28
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
 800aab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800aaba:	2300      	movs	r3, #0
 800aabc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d10b      	bne.n	800aadc <xTimerGenericCommand+0x30>
	__asm volatile
 800aac4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aac8:	f383 8811 	msr	BASEPRI, r3
 800aacc:	f3bf 8f6f 	isb	sy
 800aad0:	f3bf 8f4f 	dsb	sy
 800aad4:	623b      	str	r3, [r7, #32]
}
 800aad6:	bf00      	nop
 800aad8:	bf00      	nop
 800aada:	e7fd      	b.n	800aad8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800aadc:	4b19      	ldr	r3, [pc, #100]	@ (800ab44 <xTimerGenericCommand+0x98>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d02a      	beq.n	800ab3a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	2b05      	cmp	r3, #5
 800aaf4:	dc18      	bgt.n	800ab28 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800aaf6:	f7ff fdad 	bl	800a654 <xTaskGetSchedulerState>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b02      	cmp	r3, #2
 800aafe:	d109      	bne.n	800ab14 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800ab00:	4b10      	ldr	r3, [pc, #64]	@ (800ab44 <xTimerGenericCommand+0x98>)
 800ab02:	6818      	ldr	r0, [r3, #0]
 800ab04:	f107 0110 	add.w	r1, r7, #16
 800ab08:	2300      	movs	r3, #0
 800ab0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab0c:	f7fe f854 	bl	8008bb8 <xQueueGenericSend>
 800ab10:	6278      	str	r0, [r7, #36]	@ 0x24
 800ab12:	e012      	b.n	800ab3a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800ab14:	4b0b      	ldr	r3, [pc, #44]	@ (800ab44 <xTimerGenericCommand+0x98>)
 800ab16:	6818      	ldr	r0, [r3, #0]
 800ab18:	f107 0110 	add.w	r1, r7, #16
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	2200      	movs	r2, #0
 800ab20:	f7fe f84a 	bl	8008bb8 <xQueueGenericSend>
 800ab24:	6278      	str	r0, [r7, #36]	@ 0x24
 800ab26:	e008      	b.n	800ab3a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800ab28:	4b06      	ldr	r3, [pc, #24]	@ (800ab44 <xTimerGenericCommand+0x98>)
 800ab2a:	6818      	ldr	r0, [r3, #0]
 800ab2c:	f107 0110 	add.w	r1, r7, #16
 800ab30:	2300      	movs	r3, #0
 800ab32:	683a      	ldr	r2, [r7, #0]
 800ab34:	f7fe f942 	bl	8008dbc <xQueueGenericSendFromISR>
 800ab38:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	3728      	adds	r7, #40	@ 0x28
 800ab40:	46bd      	mov	sp, r7
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	20006ef0 	.word	0x20006ef0

0800ab48 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b088      	sub	sp, #32
 800ab4c:	af02      	add	r7, sp, #8
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab52:	4b23      	ldr	r3, [pc, #140]	@ (800abe0 <prvProcessExpiredTimer+0x98>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	68db      	ldr	r3, [r3, #12]
 800ab5a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab5c:	697b      	ldr	r3, [r7, #20]
 800ab5e:	3304      	adds	r3, #4
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7fd fd93 	bl	800868c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab66:	697b      	ldr	r3, [r7, #20]
 800ab68:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ab6c:	f003 0304 	and.w	r3, r3, #4
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d023      	beq.n	800abbc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800ab74:	697b      	ldr	r3, [r7, #20]
 800ab76:	699a      	ldr	r2, [r3, #24]
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	18d1      	adds	r1, r2, r3
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	683a      	ldr	r2, [r7, #0]
 800ab80:	6978      	ldr	r0, [r7, #20]
 800ab82:	f000 f8d5 	bl	800ad30 <prvInsertTimerInActiveList>
 800ab86:	4603      	mov	r3, r0
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d020      	beq.n	800abce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	9300      	str	r3, [sp, #0]
 800ab90:	2300      	movs	r3, #0
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	2100      	movs	r1, #0
 800ab96:	6978      	ldr	r0, [r7, #20]
 800ab98:	f7ff ff88 	bl	800aaac <xTimerGenericCommand>
 800ab9c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d114      	bne.n	800abce <prvProcessExpiredTimer+0x86>
	__asm volatile
 800aba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aba8:	f383 8811 	msr	BASEPRI, r3
 800abac:	f3bf 8f6f 	isb	sy
 800abb0:	f3bf 8f4f 	dsb	sy
 800abb4:	60fb      	str	r3, [r7, #12]
}
 800abb6:	bf00      	nop
 800abb8:	bf00      	nop
 800abba:	e7fd      	b.n	800abb8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800abc2:	f023 0301 	bic.w	r3, r3, #1
 800abc6:	b2da      	uxtb	r2, r3
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abce:	697b      	ldr	r3, [r7, #20]
 800abd0:	6a1b      	ldr	r3, [r3, #32]
 800abd2:	6978      	ldr	r0, [r7, #20]
 800abd4:	4798      	blx	r3
}
 800abd6:	bf00      	nop
 800abd8:	3718      	adds	r7, #24
 800abda:	46bd      	mov	sp, r7
 800abdc:	bd80      	pop	{r7, pc}
 800abde:	bf00      	nop
 800abe0:	20006ee8 	.word	0x20006ee8

0800abe4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800abec:	f107 0308 	add.w	r3, r7, #8
 800abf0:	4618      	mov	r0, r3
 800abf2:	f000 f859 	bl	800aca8 <prvGetNextExpireTime>
 800abf6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	4619      	mov	r1, r3
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f000 f805 	bl	800ac0c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ac02:	f000 f8d7 	bl	800adb4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ac06:	bf00      	nop
 800ac08:	e7f0      	b.n	800abec <prvTimerTask+0x8>
	...

0800ac0c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ac16:	f7ff f8ed 	bl	8009df4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ac1a:	f107 0308 	add.w	r3, r7, #8
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f000 f866 	bl	800acf0 <prvSampleTimeNow>
 800ac24:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d130      	bne.n	800ac8e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d10a      	bne.n	800ac48 <prvProcessTimerOrBlockTask+0x3c>
 800ac32:	687a      	ldr	r2, [r7, #4]
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d806      	bhi.n	800ac48 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ac3a:	f7ff f8e9 	bl	8009e10 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ac3e:	68f9      	ldr	r1, [r7, #12]
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f7ff ff81 	bl	800ab48 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ac46:	e024      	b.n	800ac92 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d008      	beq.n	800ac60 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ac4e:	4b13      	ldr	r3, [pc, #76]	@ (800ac9c <prvProcessTimerOrBlockTask+0x90>)
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d101      	bne.n	800ac5c <prvProcessTimerOrBlockTask+0x50>
 800ac58:	2301      	movs	r3, #1
 800ac5a:	e000      	b.n	800ac5e <prvProcessTimerOrBlockTask+0x52>
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ac60:	4b0f      	ldr	r3, [pc, #60]	@ (800aca0 <prvProcessTimerOrBlockTask+0x94>)
 800ac62:	6818      	ldr	r0, [r3, #0]
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	1ad3      	subs	r3, r2, r3
 800ac6a:	683a      	ldr	r2, [r7, #0]
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	f7fe fe25 	bl	80098bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ac72:	f7ff f8cd 	bl	8009e10 <xTaskResumeAll>
 800ac76:	4603      	mov	r3, r0
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d10a      	bne.n	800ac92 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ac7c:	4b09      	ldr	r3, [pc, #36]	@ (800aca4 <prvProcessTimerOrBlockTask+0x98>)
 800ac7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac82:	601a      	str	r2, [r3, #0]
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	f3bf 8f6f 	isb	sy
}
 800ac8c:	e001      	b.n	800ac92 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ac8e:	f7ff f8bf 	bl	8009e10 <xTaskResumeAll>
}
 800ac92:	bf00      	nop
 800ac94:	3710      	adds	r7, #16
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}
 800ac9a:	bf00      	nop
 800ac9c:	20006eec 	.word	0x20006eec
 800aca0:	20006ef0 	.word	0x20006ef0
 800aca4:	e000ed04 	.word	0xe000ed04

0800aca8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800aca8:	b480      	push	{r7}
 800acaa:	b085      	sub	sp, #20
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800acb0:	4b0e      	ldr	r3, [pc, #56]	@ (800acec <prvGetNextExpireTime+0x44>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d101      	bne.n	800acbe <prvGetNextExpireTime+0x16>
 800acba:	2201      	movs	r2, #1
 800acbc:	e000      	b.n	800acc0 <prvGetNextExpireTime+0x18>
 800acbe:	2200      	movs	r2, #0
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d105      	bne.n	800acd8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800accc:	4b07      	ldr	r3, [pc, #28]	@ (800acec <prvGetNextExpireTime+0x44>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68db      	ldr	r3, [r3, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	60fb      	str	r3, [r7, #12]
 800acd6:	e001      	b.n	800acdc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800acd8:	2300      	movs	r3, #0
 800acda:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800acdc:	68fb      	ldr	r3, [r7, #12]
}
 800acde:	4618      	mov	r0, r3
 800ace0:	3714      	adds	r7, #20
 800ace2:	46bd      	mov	sp, r7
 800ace4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace8:	4770      	bx	lr
 800acea:	bf00      	nop
 800acec:	20006ee8 	.word	0x20006ee8

0800acf0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800acf8:	f7ff f928 	bl	8009f4c <xTaskGetTickCount>
 800acfc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800acfe:	4b0b      	ldr	r3, [pc, #44]	@ (800ad2c <prvSampleTimeNow+0x3c>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	68fa      	ldr	r2, [r7, #12]
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d205      	bcs.n	800ad14 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ad08:	f000 f93a 	bl	800af80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2201      	movs	r2, #1
 800ad10:	601a      	str	r2, [r3, #0]
 800ad12:	e002      	b.n	800ad1a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ad1a:	4a04      	ldr	r2, [pc, #16]	@ (800ad2c <prvSampleTimeNow+0x3c>)
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ad20:	68fb      	ldr	r3, [r7, #12]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	20006ef8 	.word	0x20006ef8

0800ad30 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
 800ad3c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	68ba      	ldr	r2, [r7, #8]
 800ad46:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ad4e:	68ba      	ldr	r2, [r7, #8]
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	429a      	cmp	r2, r3
 800ad54:	d812      	bhi.n	800ad7c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	1ad2      	subs	r2, r2, r3
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	699b      	ldr	r3, [r3, #24]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d302      	bcc.n	800ad6a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ad64:	2301      	movs	r3, #1
 800ad66:	617b      	str	r3, [r7, #20]
 800ad68:	e01b      	b.n	800ada2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ad6a:	4b10      	ldr	r3, [pc, #64]	@ (800adac <prvInsertTimerInActiveList+0x7c>)
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	3304      	adds	r3, #4
 800ad72:	4619      	mov	r1, r3
 800ad74:	4610      	mov	r0, r2
 800ad76:	f7fd fc50 	bl	800861a <vListInsert>
 800ad7a:	e012      	b.n	800ada2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ad7c:	687a      	ldr	r2, [r7, #4]
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d206      	bcs.n	800ad92 <prvInsertTimerInActiveList+0x62>
 800ad84:	68ba      	ldr	r2, [r7, #8]
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	429a      	cmp	r2, r3
 800ad8a:	d302      	bcc.n	800ad92 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	617b      	str	r3, [r7, #20]
 800ad90:	e007      	b.n	800ada2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ad92:	4b07      	ldr	r3, [pc, #28]	@ (800adb0 <prvInsertTimerInActiveList+0x80>)
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	3304      	adds	r3, #4
 800ad9a:	4619      	mov	r1, r3
 800ad9c:	4610      	mov	r0, r2
 800ad9e:	f7fd fc3c 	bl	800861a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ada2:	697b      	ldr	r3, [r7, #20]
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3718      	adds	r7, #24
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	20006eec 	.word	0x20006eec
 800adb0:	20006ee8 	.word	0x20006ee8

0800adb4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b08e      	sub	sp, #56	@ 0x38
 800adb8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800adba:	e0ce      	b.n	800af5a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	da19      	bge.n	800adf6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800adc2:	1d3b      	adds	r3, r7, #4
 800adc4:	3304      	adds	r3, #4
 800adc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800adc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d10b      	bne.n	800ade6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800adce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	61fb      	str	r3, [r7, #28]
}
 800ade0:	bf00      	nop
 800ade2:	bf00      	nop
 800ade4:	e7fd      	b.n	800ade2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ade6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adec:	6850      	ldr	r0, [r2, #4]
 800adee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800adf0:	6892      	ldr	r2, [r2, #8]
 800adf2:	4611      	mov	r1, r2
 800adf4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f2c0 80ae 	blt.w	800af5a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ae02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae04:	695b      	ldr	r3, [r3, #20]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d004      	beq.n	800ae14 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ae0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7fd fc3c 	bl	800868c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ae14:	463b      	mov	r3, r7
 800ae16:	4618      	mov	r0, r3
 800ae18:	f7ff ff6a 	bl	800acf0 <prvSampleTimeNow>
 800ae1c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2b09      	cmp	r3, #9
 800ae22:	f200 8097 	bhi.w	800af54 <prvProcessReceivedCommands+0x1a0>
 800ae26:	a201      	add	r2, pc, #4	@ (adr r2, 800ae2c <prvProcessReceivedCommands+0x78>)
 800ae28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2c:	0800ae55 	.word	0x0800ae55
 800ae30:	0800ae55 	.word	0x0800ae55
 800ae34:	0800ae55 	.word	0x0800ae55
 800ae38:	0800aecb 	.word	0x0800aecb
 800ae3c:	0800aedf 	.word	0x0800aedf
 800ae40:	0800af2b 	.word	0x0800af2b
 800ae44:	0800ae55 	.word	0x0800ae55
 800ae48:	0800ae55 	.word	0x0800ae55
 800ae4c:	0800aecb 	.word	0x0800aecb
 800ae50:	0800aedf 	.word	0x0800aedf
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ae54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae5a:	f043 0301 	orr.w	r3, r3, #1
 800ae5e:	b2da      	uxtb	r2, r3
 800ae60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ae66:	68ba      	ldr	r2, [r7, #8]
 800ae68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae6a:	699b      	ldr	r3, [r3, #24]
 800ae6c:	18d1      	adds	r1, r2, r3
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ae72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae74:	f7ff ff5c 	bl	800ad30 <prvInsertTimerInActiveList>
 800ae78:	4603      	mov	r3, r0
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d06c      	beq.n	800af58 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ae7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae80:	6a1b      	ldr	r3, [r3, #32]
 800ae82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae84:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ae86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae88:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800ae8c:	f003 0304 	and.w	r3, r3, #4
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d061      	beq.n	800af58 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ae94:	68ba      	ldr	r2, [r7, #8]
 800ae96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae98:	699b      	ldr	r3, [r3, #24]
 800ae9a:	441a      	add	r2, r3
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	9300      	str	r3, [sp, #0]
 800aea0:	2300      	movs	r3, #0
 800aea2:	2100      	movs	r1, #0
 800aea4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aea6:	f7ff fe01 	bl	800aaac <xTimerGenericCommand>
 800aeaa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aeac:	6a3b      	ldr	r3, [r7, #32]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d152      	bne.n	800af58 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800aeb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aeb6:	f383 8811 	msr	BASEPRI, r3
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	61bb      	str	r3, [r7, #24]
}
 800aec4:	bf00      	nop
 800aec6:	bf00      	nop
 800aec8:	e7fd      	b.n	800aec6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aeca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aecc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aed0:	f023 0301 	bic.w	r3, r3, #1
 800aed4:	b2da      	uxtb	r2, r3
 800aed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800aedc:	e03d      	b.n	800af5a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aee0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800aee4:	f043 0301 	orr.w	r3, r3, #1
 800aee8:	b2da      	uxtb	r2, r3
 800aeea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aef0:	68ba      	ldr	r2, [r7, #8]
 800aef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aef8:	699b      	ldr	r3, [r3, #24]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d10b      	bne.n	800af16 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800aefe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af02:	f383 8811 	msr	BASEPRI, r3
 800af06:	f3bf 8f6f 	isb	sy
 800af0a:	f3bf 8f4f 	dsb	sy
 800af0e:	617b      	str	r3, [r7, #20]
}
 800af10:	bf00      	nop
 800af12:	bf00      	nop
 800af14:	e7fd      	b.n	800af12 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800af16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af18:	699a      	ldr	r2, [r3, #24]
 800af1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af1c:	18d1      	adds	r1, r2, r3
 800af1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800af22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af24:	f7ff ff04 	bl	800ad30 <prvInsertTimerInActiveList>
					break;
 800af28:	e017      	b.n	800af5a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800af2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af30:	f003 0302 	and.w	r3, r3, #2
 800af34:	2b00      	cmp	r3, #0
 800af36:	d103      	bne.n	800af40 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800af38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af3a:	f000 fbe5 	bl	800b708 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800af3e:	e00c      	b.n	800af5a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800af40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800af46:	f023 0301 	bic.w	r3, r3, #1
 800af4a:	b2da      	uxtb	r2, r3
 800af4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800af52:	e002      	b.n	800af5a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800af54:	bf00      	nop
 800af56:	e000      	b.n	800af5a <prvProcessReceivedCommands+0x1a6>
					break;
 800af58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800af5a:	4b08      	ldr	r3, [pc, #32]	@ (800af7c <prvProcessReceivedCommands+0x1c8>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	1d39      	adds	r1, r7, #4
 800af60:	2200      	movs	r2, #0
 800af62:	4618      	mov	r0, r3
 800af64:	f7fe f858 	bl	8009018 <xQueueReceive>
 800af68:	4603      	mov	r3, r0
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	f47f af26 	bne.w	800adbc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800af70:	bf00      	nop
 800af72:	bf00      	nop
 800af74:	3730      	adds	r7, #48	@ 0x30
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	20006ef0 	.word	0x20006ef0

0800af80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b088      	sub	sp, #32
 800af84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800af86:	e049      	b.n	800b01c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800af88:	4b2e      	ldr	r3, [pc, #184]	@ (800b044 <prvSwitchTimerLists+0xc4>)
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af92:	4b2c      	ldr	r3, [pc, #176]	@ (800b044 <prvSwitchTimerLists+0xc4>)
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68db      	ldr	r3, [r3, #12]
 800af98:	68db      	ldr	r3, [r3, #12]
 800af9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	3304      	adds	r3, #4
 800afa0:	4618      	mov	r0, r3
 800afa2:	f7fd fb73 	bl	800868c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	6a1b      	ldr	r3, [r3, #32]
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800afb4:	f003 0304 	and.w	r3, r3, #4
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d02f      	beq.n	800b01c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	693a      	ldr	r2, [r7, #16]
 800afc2:	4413      	add	r3, r2
 800afc4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800afc6:	68ba      	ldr	r2, [r7, #8]
 800afc8:	693b      	ldr	r3, [r7, #16]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d90e      	bls.n	800afec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	68ba      	ldr	r2, [r7, #8]
 800afd2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	68fa      	ldr	r2, [r7, #12]
 800afd8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800afda:	4b1a      	ldr	r3, [pc, #104]	@ (800b044 <prvSwitchTimerLists+0xc4>)
 800afdc:	681a      	ldr	r2, [r3, #0]
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	3304      	adds	r3, #4
 800afe2:	4619      	mov	r1, r3
 800afe4:	4610      	mov	r0, r2
 800afe6:	f7fd fb18 	bl	800861a <vListInsert>
 800afea:	e017      	b.n	800b01c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800afec:	2300      	movs	r3, #0
 800afee:	9300      	str	r3, [sp, #0]
 800aff0:	2300      	movs	r3, #0
 800aff2:	693a      	ldr	r2, [r7, #16]
 800aff4:	2100      	movs	r1, #0
 800aff6:	68f8      	ldr	r0, [r7, #12]
 800aff8:	f7ff fd58 	bl	800aaac <xTimerGenericCommand>
 800affc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10b      	bne.n	800b01c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800b004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b008:	f383 8811 	msr	BASEPRI, r3
 800b00c:	f3bf 8f6f 	isb	sy
 800b010:	f3bf 8f4f 	dsb	sy
 800b014:	603b      	str	r3, [r7, #0]
}
 800b016:	bf00      	nop
 800b018:	bf00      	nop
 800b01a:	e7fd      	b.n	800b018 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b01c:	4b09      	ldr	r3, [pc, #36]	@ (800b044 <prvSwitchTimerLists+0xc4>)
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d1b0      	bne.n	800af88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b026:	4b07      	ldr	r3, [pc, #28]	@ (800b044 <prvSwitchTimerLists+0xc4>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b02c:	4b06      	ldr	r3, [pc, #24]	@ (800b048 <prvSwitchTimerLists+0xc8>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a04      	ldr	r2, [pc, #16]	@ (800b044 <prvSwitchTimerLists+0xc4>)
 800b032:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b034:	4a04      	ldr	r2, [pc, #16]	@ (800b048 <prvSwitchTimerLists+0xc8>)
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	6013      	str	r3, [r2, #0]
}
 800b03a:	bf00      	nop
 800b03c:	3718      	adds	r7, #24
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	20006ee8 	.word	0x20006ee8
 800b048:	20006eec 	.word	0x20006eec

0800b04c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b082      	sub	sp, #8
 800b050:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b052:	f000 f969 	bl	800b328 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b056:	4b15      	ldr	r3, [pc, #84]	@ (800b0ac <prvCheckForValidListAndQueue+0x60>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d120      	bne.n	800b0a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b05e:	4814      	ldr	r0, [pc, #80]	@ (800b0b0 <prvCheckForValidListAndQueue+0x64>)
 800b060:	f7fd fa8a 	bl	8008578 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b064:	4813      	ldr	r0, [pc, #76]	@ (800b0b4 <prvCheckForValidListAndQueue+0x68>)
 800b066:	f7fd fa87 	bl	8008578 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b06a:	4b13      	ldr	r3, [pc, #76]	@ (800b0b8 <prvCheckForValidListAndQueue+0x6c>)
 800b06c:	4a10      	ldr	r2, [pc, #64]	@ (800b0b0 <prvCheckForValidListAndQueue+0x64>)
 800b06e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b070:	4b12      	ldr	r3, [pc, #72]	@ (800b0bc <prvCheckForValidListAndQueue+0x70>)
 800b072:	4a10      	ldr	r2, [pc, #64]	@ (800b0b4 <prvCheckForValidListAndQueue+0x68>)
 800b074:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b076:	2300      	movs	r3, #0
 800b078:	9300      	str	r3, [sp, #0]
 800b07a:	4b11      	ldr	r3, [pc, #68]	@ (800b0c0 <prvCheckForValidListAndQueue+0x74>)
 800b07c:	4a11      	ldr	r2, [pc, #68]	@ (800b0c4 <prvCheckForValidListAndQueue+0x78>)
 800b07e:	2110      	movs	r1, #16
 800b080:	200a      	movs	r0, #10
 800b082:	f7fd fb97 	bl	80087b4 <xQueueGenericCreateStatic>
 800b086:	4603      	mov	r3, r0
 800b088:	4a08      	ldr	r2, [pc, #32]	@ (800b0ac <prvCheckForValidListAndQueue+0x60>)
 800b08a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b08c:	4b07      	ldr	r3, [pc, #28]	@ (800b0ac <prvCheckForValidListAndQueue+0x60>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d005      	beq.n	800b0a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b094:	4b05      	ldr	r3, [pc, #20]	@ (800b0ac <prvCheckForValidListAndQueue+0x60>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	490b      	ldr	r1, [pc, #44]	@ (800b0c8 <prvCheckForValidListAndQueue+0x7c>)
 800b09a:	4618      	mov	r0, r3
 800b09c:	f7fe fbba 	bl	8009814 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b0a0:	f000 f974 	bl	800b38c <vPortExitCritical>
}
 800b0a4:	bf00      	nop
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	20006ef0 	.word	0x20006ef0
 800b0b0:	20006ec0 	.word	0x20006ec0
 800b0b4:	20006ed4 	.word	0x20006ed4
 800b0b8:	20006ee8 	.word	0x20006ee8
 800b0bc:	20006eec 	.word	0x20006eec
 800b0c0:	20006f9c 	.word	0x20006f9c
 800b0c4:	20006efc 	.word	0x20006efc
 800b0c8:	08021718 	.word	0x08021718

0800b0cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b0cc:	b480      	push	{r7}
 800b0ce:	b085      	sub	sp, #20
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	60f8      	str	r0, [r7, #12]
 800b0d4:	60b9      	str	r1, [r7, #8]
 800b0d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	3b04      	subs	r3, #4
 800b0dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800b0e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	3b04      	subs	r3, #4
 800b0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	f023 0201 	bic.w	r2, r3, #1
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	3b04      	subs	r3, #4
 800b0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b0fc:	4a0c      	ldr	r2, [pc, #48]	@ (800b130 <pxPortInitialiseStack+0x64>)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	3b14      	subs	r3, #20
 800b106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	3b04      	subs	r3, #4
 800b112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	f06f 0202 	mvn.w	r2, #2
 800b11a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	3b20      	subs	r3, #32
 800b120:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b122:	68fb      	ldr	r3, [r7, #12]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3714      	adds	r7, #20
 800b128:	46bd      	mov	sp, r7
 800b12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12e:	4770      	bx	lr
 800b130:	0800b135 	.word	0x0800b135

0800b134 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b13a:	2300      	movs	r3, #0
 800b13c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b13e:	4b13      	ldr	r3, [pc, #76]	@ (800b18c <prvTaskExitError+0x58>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b146:	d00b      	beq.n	800b160 <prvTaskExitError+0x2c>
	__asm volatile
 800b148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b14c:	f383 8811 	msr	BASEPRI, r3
 800b150:	f3bf 8f6f 	isb	sy
 800b154:	f3bf 8f4f 	dsb	sy
 800b158:	60fb      	str	r3, [r7, #12]
}
 800b15a:	bf00      	nop
 800b15c:	bf00      	nop
 800b15e:	e7fd      	b.n	800b15c <prvTaskExitError+0x28>
	__asm volatile
 800b160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b164:	f383 8811 	msr	BASEPRI, r3
 800b168:	f3bf 8f6f 	isb	sy
 800b16c:	f3bf 8f4f 	dsb	sy
 800b170:	60bb      	str	r3, [r7, #8]
}
 800b172:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b174:	bf00      	nop
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d0fc      	beq.n	800b176 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b17c:	bf00      	nop
 800b17e:	bf00      	nop
 800b180:	3714      	adds	r7, #20
 800b182:	46bd      	mov	sp, r7
 800b184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b188:	4770      	bx	lr
 800b18a:	bf00      	nop
 800b18c:	20000020 	.word	0x20000020

0800b190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b190:	4b07      	ldr	r3, [pc, #28]	@ (800b1b0 <pxCurrentTCBConst2>)
 800b192:	6819      	ldr	r1, [r3, #0]
 800b194:	6808      	ldr	r0, [r1, #0]
 800b196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b19a:	f380 8809 	msr	PSP, r0
 800b19e:	f3bf 8f6f 	isb	sy
 800b1a2:	f04f 0000 	mov.w	r0, #0
 800b1a6:	f380 8811 	msr	BASEPRI, r0
 800b1aa:	4770      	bx	lr
 800b1ac:	f3af 8000 	nop.w

0800b1b0 <pxCurrentTCBConst2>:
 800b1b0:	200069b8 	.word	0x200069b8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b1b4:	bf00      	nop
 800b1b6:	bf00      	nop

0800b1b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b1b8:	4808      	ldr	r0, [pc, #32]	@ (800b1dc <prvPortStartFirstTask+0x24>)
 800b1ba:	6800      	ldr	r0, [r0, #0]
 800b1bc:	6800      	ldr	r0, [r0, #0]
 800b1be:	f380 8808 	msr	MSP, r0
 800b1c2:	f04f 0000 	mov.w	r0, #0
 800b1c6:	f380 8814 	msr	CONTROL, r0
 800b1ca:	b662      	cpsie	i
 800b1cc:	b661      	cpsie	f
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	f3bf 8f6f 	isb	sy
 800b1d6:	df00      	svc	0
 800b1d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b1da:	bf00      	nop
 800b1dc:	e000ed08 	.word	0xe000ed08

0800b1e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b1e6:	4b47      	ldr	r3, [pc, #284]	@ (800b304 <xPortStartScheduler+0x124>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	4a47      	ldr	r2, [pc, #284]	@ (800b308 <xPortStartScheduler+0x128>)
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d10b      	bne.n	800b208 <xPortStartScheduler+0x28>
	__asm volatile
 800b1f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1f4:	f383 8811 	msr	BASEPRI, r3
 800b1f8:	f3bf 8f6f 	isb	sy
 800b1fc:	f3bf 8f4f 	dsb	sy
 800b200:	613b      	str	r3, [r7, #16]
}
 800b202:	bf00      	nop
 800b204:	bf00      	nop
 800b206:	e7fd      	b.n	800b204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b208:	4b3e      	ldr	r3, [pc, #248]	@ (800b304 <xPortStartScheduler+0x124>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a3f      	ldr	r2, [pc, #252]	@ (800b30c <xPortStartScheduler+0x12c>)
 800b20e:	4293      	cmp	r3, r2
 800b210:	d10b      	bne.n	800b22a <xPortStartScheduler+0x4a>
	__asm volatile
 800b212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b216:	f383 8811 	msr	BASEPRI, r3
 800b21a:	f3bf 8f6f 	isb	sy
 800b21e:	f3bf 8f4f 	dsb	sy
 800b222:	60fb      	str	r3, [r7, #12]
}
 800b224:	bf00      	nop
 800b226:	bf00      	nop
 800b228:	e7fd      	b.n	800b226 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b22a:	4b39      	ldr	r3, [pc, #228]	@ (800b310 <xPortStartScheduler+0x130>)
 800b22c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	781b      	ldrb	r3, [r3, #0]
 800b232:	b2db      	uxtb	r3, r3
 800b234:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	22ff      	movs	r2, #255	@ 0xff
 800b23a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b23c:	697b      	ldr	r3, [r7, #20]
 800b23e:	781b      	ldrb	r3, [r3, #0]
 800b240:	b2db      	uxtb	r3, r3
 800b242:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b244:	78fb      	ldrb	r3, [r7, #3]
 800b246:	b2db      	uxtb	r3, r3
 800b248:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800b24c:	b2da      	uxtb	r2, r3
 800b24e:	4b31      	ldr	r3, [pc, #196]	@ (800b314 <xPortStartScheduler+0x134>)
 800b250:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b252:	4b31      	ldr	r3, [pc, #196]	@ (800b318 <xPortStartScheduler+0x138>)
 800b254:	2207      	movs	r2, #7
 800b256:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b258:	e009      	b.n	800b26e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800b25a:	4b2f      	ldr	r3, [pc, #188]	@ (800b318 <xPortStartScheduler+0x138>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	3b01      	subs	r3, #1
 800b260:	4a2d      	ldr	r2, [pc, #180]	@ (800b318 <xPortStartScheduler+0x138>)
 800b262:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b264:	78fb      	ldrb	r3, [r7, #3]
 800b266:	b2db      	uxtb	r3, r3
 800b268:	005b      	lsls	r3, r3, #1
 800b26a:	b2db      	uxtb	r3, r3
 800b26c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b26e:	78fb      	ldrb	r3, [r7, #3]
 800b270:	b2db      	uxtb	r3, r3
 800b272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b276:	2b80      	cmp	r3, #128	@ 0x80
 800b278:	d0ef      	beq.n	800b25a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b27a:	4b27      	ldr	r3, [pc, #156]	@ (800b318 <xPortStartScheduler+0x138>)
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f1c3 0307 	rsb	r3, r3, #7
 800b282:	2b04      	cmp	r3, #4
 800b284:	d00b      	beq.n	800b29e <xPortStartScheduler+0xbe>
	__asm volatile
 800b286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b28a:	f383 8811 	msr	BASEPRI, r3
 800b28e:	f3bf 8f6f 	isb	sy
 800b292:	f3bf 8f4f 	dsb	sy
 800b296:	60bb      	str	r3, [r7, #8]
}
 800b298:	bf00      	nop
 800b29a:	bf00      	nop
 800b29c:	e7fd      	b.n	800b29a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b29e:	4b1e      	ldr	r3, [pc, #120]	@ (800b318 <xPortStartScheduler+0x138>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	021b      	lsls	r3, r3, #8
 800b2a4:	4a1c      	ldr	r2, [pc, #112]	@ (800b318 <xPortStartScheduler+0x138>)
 800b2a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b2a8:	4b1b      	ldr	r3, [pc, #108]	@ (800b318 <xPortStartScheduler+0x138>)
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800b2b0:	4a19      	ldr	r2, [pc, #100]	@ (800b318 <xPortStartScheduler+0x138>)
 800b2b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	b2da      	uxtb	r2, r3
 800b2b8:	697b      	ldr	r3, [r7, #20]
 800b2ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b2bc:	4b17      	ldr	r3, [pc, #92]	@ (800b31c <xPortStartScheduler+0x13c>)
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a16      	ldr	r2, [pc, #88]	@ (800b31c <xPortStartScheduler+0x13c>)
 800b2c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800b2c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b2c8:	4b14      	ldr	r3, [pc, #80]	@ (800b31c <xPortStartScheduler+0x13c>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a13      	ldr	r2, [pc, #76]	@ (800b31c <xPortStartScheduler+0x13c>)
 800b2ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800b2d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b2d4:	f000 f8da 	bl	800b48c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b2d8:	4b11      	ldr	r3, [pc, #68]	@ (800b320 <xPortStartScheduler+0x140>)
 800b2da:	2200      	movs	r2, #0
 800b2dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b2de:	f000 f8f9 	bl	800b4d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b2e2:	4b10      	ldr	r3, [pc, #64]	@ (800b324 <xPortStartScheduler+0x144>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a0f      	ldr	r2, [pc, #60]	@ (800b324 <xPortStartScheduler+0x144>)
 800b2e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800b2ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b2ee:	f7ff ff63 	bl	800b1b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b2f2:	f7fe ff07 	bl	800a104 <vTaskSwitchContext>
	prvTaskExitError();
 800b2f6:	f7ff ff1d 	bl	800b134 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b2fa:	2300      	movs	r3, #0
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3718      	adds	r7, #24
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	e000ed00 	.word	0xe000ed00
 800b308:	410fc271 	.word	0x410fc271
 800b30c:	410fc270 	.word	0x410fc270
 800b310:	e000e400 	.word	0xe000e400
 800b314:	20006fec 	.word	0x20006fec
 800b318:	20006ff0 	.word	0x20006ff0
 800b31c:	e000ed20 	.word	0xe000ed20
 800b320:	20000020 	.word	0x20000020
 800b324:	e000ef34 	.word	0xe000ef34

0800b328 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
	__asm volatile
 800b32e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b332:	f383 8811 	msr	BASEPRI, r3
 800b336:	f3bf 8f6f 	isb	sy
 800b33a:	f3bf 8f4f 	dsb	sy
 800b33e:	607b      	str	r3, [r7, #4]
}
 800b340:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b342:	4b10      	ldr	r3, [pc, #64]	@ (800b384 <vPortEnterCritical+0x5c>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	3301      	adds	r3, #1
 800b348:	4a0e      	ldr	r2, [pc, #56]	@ (800b384 <vPortEnterCritical+0x5c>)
 800b34a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b34c:	4b0d      	ldr	r3, [pc, #52]	@ (800b384 <vPortEnterCritical+0x5c>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b01      	cmp	r3, #1
 800b352:	d110      	bne.n	800b376 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b354:	4b0c      	ldr	r3, [pc, #48]	@ (800b388 <vPortEnterCritical+0x60>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	b2db      	uxtb	r3, r3
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d00b      	beq.n	800b376 <vPortEnterCritical+0x4e>
	__asm volatile
 800b35e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	603b      	str	r3, [r7, #0]
}
 800b370:	bf00      	nop
 800b372:	bf00      	nop
 800b374:	e7fd      	b.n	800b372 <vPortEnterCritical+0x4a>
	}
}
 800b376:	bf00      	nop
 800b378:	370c      	adds	r7, #12
 800b37a:	46bd      	mov	sp, r7
 800b37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b380:	4770      	bx	lr
 800b382:	bf00      	nop
 800b384:	20000020 	.word	0x20000020
 800b388:	e000ed04 	.word	0xe000ed04

0800b38c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b38c:	b480      	push	{r7}
 800b38e:	b083      	sub	sp, #12
 800b390:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b392:	4b12      	ldr	r3, [pc, #72]	@ (800b3dc <vPortExitCritical+0x50>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d10b      	bne.n	800b3b2 <vPortExitCritical+0x26>
	__asm volatile
 800b39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	607b      	str	r3, [r7, #4]
}
 800b3ac:	bf00      	nop
 800b3ae:	bf00      	nop
 800b3b0:	e7fd      	b.n	800b3ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b3b2:	4b0a      	ldr	r3, [pc, #40]	@ (800b3dc <vPortExitCritical+0x50>)
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	3b01      	subs	r3, #1
 800b3b8:	4a08      	ldr	r2, [pc, #32]	@ (800b3dc <vPortExitCritical+0x50>)
 800b3ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b3bc:	4b07      	ldr	r3, [pc, #28]	@ (800b3dc <vPortExitCritical+0x50>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d105      	bne.n	800b3d0 <vPortExitCritical+0x44>
 800b3c4:	2300      	movs	r3, #0
 800b3c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b3c8:	683b      	ldr	r3, [r7, #0]
 800b3ca:	f383 8811 	msr	BASEPRI, r3
}
 800b3ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b3d0:	bf00      	nop
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr
 800b3dc:	20000020 	.word	0x20000020

0800b3e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b3e0:	f3ef 8009 	mrs	r0, PSP
 800b3e4:	f3bf 8f6f 	isb	sy
 800b3e8:	4b15      	ldr	r3, [pc, #84]	@ (800b440 <pxCurrentTCBConst>)
 800b3ea:	681a      	ldr	r2, [r3, #0]
 800b3ec:	f01e 0f10 	tst.w	lr, #16
 800b3f0:	bf08      	it	eq
 800b3f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b3f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3fa:	6010      	str	r0, [r2, #0]
 800b3fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b400:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800b404:	f380 8811 	msr	BASEPRI, r0
 800b408:	f3bf 8f4f 	dsb	sy
 800b40c:	f3bf 8f6f 	isb	sy
 800b410:	f7fe fe78 	bl	800a104 <vTaskSwitchContext>
 800b414:	f04f 0000 	mov.w	r0, #0
 800b418:	f380 8811 	msr	BASEPRI, r0
 800b41c:	bc09      	pop	{r0, r3}
 800b41e:	6819      	ldr	r1, [r3, #0]
 800b420:	6808      	ldr	r0, [r1, #0]
 800b422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b426:	f01e 0f10 	tst.w	lr, #16
 800b42a:	bf08      	it	eq
 800b42c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b430:	f380 8809 	msr	PSP, r0
 800b434:	f3bf 8f6f 	isb	sy
 800b438:	4770      	bx	lr
 800b43a:	bf00      	nop
 800b43c:	f3af 8000 	nop.w

0800b440 <pxCurrentTCBConst>:
 800b440:	200069b8 	.word	0x200069b8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b444:	bf00      	nop
 800b446:	bf00      	nop

0800b448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b448:	b580      	push	{r7, lr}
 800b44a:	b082      	sub	sp, #8
 800b44c:	af00      	add	r7, sp, #0
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	607b      	str	r3, [r7, #4]
}
 800b460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b462:	f7fe fd95 	bl	8009f90 <xTaskIncrementTick>
 800b466:	4603      	mov	r3, r0
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d003      	beq.n	800b474 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b46c:	4b06      	ldr	r3, [pc, #24]	@ (800b488 <xPortSysTickHandler+0x40>)
 800b46e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b472:	601a      	str	r2, [r3, #0]
 800b474:	2300      	movs	r3, #0
 800b476:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	f383 8811 	msr	BASEPRI, r3
}
 800b47e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b480:	bf00      	nop
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	e000ed04 	.word	0xe000ed04

0800b48c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b48c:	b480      	push	{r7}
 800b48e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b490:	4b0b      	ldr	r3, [pc, #44]	@ (800b4c0 <vPortSetupTimerInterrupt+0x34>)
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b496:	4b0b      	ldr	r3, [pc, #44]	@ (800b4c4 <vPortSetupTimerInterrupt+0x38>)
 800b498:	2200      	movs	r2, #0
 800b49a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b49c:	4b0a      	ldr	r3, [pc, #40]	@ (800b4c8 <vPortSetupTimerInterrupt+0x3c>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a0a      	ldr	r2, [pc, #40]	@ (800b4cc <vPortSetupTimerInterrupt+0x40>)
 800b4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b4a6:	099b      	lsrs	r3, r3, #6
 800b4a8:	4a09      	ldr	r2, [pc, #36]	@ (800b4d0 <vPortSetupTimerInterrupt+0x44>)
 800b4aa:	3b01      	subs	r3, #1
 800b4ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b4ae:	4b04      	ldr	r3, [pc, #16]	@ (800b4c0 <vPortSetupTimerInterrupt+0x34>)
 800b4b0:	2207      	movs	r2, #7
 800b4b2:	601a      	str	r2, [r3, #0]
}
 800b4b4:	bf00      	nop
 800b4b6:	46bd      	mov	sp, r7
 800b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4bc:	4770      	bx	lr
 800b4be:	bf00      	nop
 800b4c0:	e000e010 	.word	0xe000e010
 800b4c4:	e000e018 	.word	0xe000e018
 800b4c8:	20000000 	.word	0x20000000
 800b4cc:	10624dd3 	.word	0x10624dd3
 800b4d0:	e000e014 	.word	0xe000e014

0800b4d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b4d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800b4e4 <vPortEnableVFP+0x10>
 800b4d8:	6801      	ldr	r1, [r0, #0]
 800b4da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800b4de:	6001      	str	r1, [r0, #0]
 800b4e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b4e2:	bf00      	nop
 800b4e4:	e000ed88 	.word	0xe000ed88

0800b4e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b085      	sub	sp, #20
 800b4ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b4ee:	f3ef 8305 	mrs	r3, IPSR
 800b4f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	2b0f      	cmp	r3, #15
 800b4f8:	d915      	bls.n	800b526 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b4fa:	4a18      	ldr	r2, [pc, #96]	@ (800b55c <vPortValidateInterruptPriority+0x74>)
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	4413      	add	r3, r2
 800b500:	781b      	ldrb	r3, [r3, #0]
 800b502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b504:	4b16      	ldr	r3, [pc, #88]	@ (800b560 <vPortValidateInterruptPriority+0x78>)
 800b506:	781b      	ldrb	r3, [r3, #0]
 800b508:	7afa      	ldrb	r2, [r7, #11]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d20b      	bcs.n	800b526 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800b50e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b512:	f383 8811 	msr	BASEPRI, r3
 800b516:	f3bf 8f6f 	isb	sy
 800b51a:	f3bf 8f4f 	dsb	sy
 800b51e:	607b      	str	r3, [r7, #4]
}
 800b520:	bf00      	nop
 800b522:	bf00      	nop
 800b524:	e7fd      	b.n	800b522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b526:	4b0f      	ldr	r3, [pc, #60]	@ (800b564 <vPortValidateInterruptPriority+0x7c>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800b52e:	4b0e      	ldr	r3, [pc, #56]	@ (800b568 <vPortValidateInterruptPriority+0x80>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	429a      	cmp	r2, r3
 800b534:	d90b      	bls.n	800b54e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800b536:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b53a:	f383 8811 	msr	BASEPRI, r3
 800b53e:	f3bf 8f6f 	isb	sy
 800b542:	f3bf 8f4f 	dsb	sy
 800b546:	603b      	str	r3, [r7, #0]
}
 800b548:	bf00      	nop
 800b54a:	bf00      	nop
 800b54c:	e7fd      	b.n	800b54a <vPortValidateInterruptPriority+0x62>
	}
 800b54e:	bf00      	nop
 800b550:	3714      	adds	r7, #20
 800b552:	46bd      	mov	sp, r7
 800b554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b558:	4770      	bx	lr
 800b55a:	bf00      	nop
 800b55c:	e000e3f0 	.word	0xe000e3f0
 800b560:	20006fec 	.word	0x20006fec
 800b564:	e000ed0c 	.word	0xe000ed0c
 800b568:	20006ff0 	.word	0x20006ff0

0800b56c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b08a      	sub	sp, #40	@ 0x28
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b574:	2300      	movs	r3, #0
 800b576:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b578:	f7fe fc3c 	bl	8009df4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b57c:	4b5c      	ldr	r3, [pc, #368]	@ (800b6f0 <pvPortMalloc+0x184>)
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d101      	bne.n	800b588 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b584:	f000 f924 	bl	800b7d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b588:	4b5a      	ldr	r3, [pc, #360]	@ (800b6f4 <pvPortMalloc+0x188>)
 800b58a:	681a      	ldr	r2, [r3, #0]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	4013      	ands	r3, r2
 800b590:	2b00      	cmp	r3, #0
 800b592:	f040 8095 	bne.w	800b6c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d01e      	beq.n	800b5da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800b59c:	2208      	movs	r2, #8
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	4413      	add	r3, r2
 800b5a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f003 0307 	and.w	r3, r3, #7
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d015      	beq.n	800b5da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f023 0307 	bic.w	r3, r3, #7
 800b5b4:	3308      	adds	r3, #8
 800b5b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f003 0307 	and.w	r3, r3, #7
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d00b      	beq.n	800b5da <pvPortMalloc+0x6e>
	__asm volatile
 800b5c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5c6:	f383 8811 	msr	BASEPRI, r3
 800b5ca:	f3bf 8f6f 	isb	sy
 800b5ce:	f3bf 8f4f 	dsb	sy
 800b5d2:	617b      	str	r3, [r7, #20]
}
 800b5d4:	bf00      	nop
 800b5d6:	bf00      	nop
 800b5d8:	e7fd      	b.n	800b5d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d06f      	beq.n	800b6c0 <pvPortMalloc+0x154>
 800b5e0:	4b45      	ldr	r3, [pc, #276]	@ (800b6f8 <pvPortMalloc+0x18c>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d86a      	bhi.n	800b6c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b5ea:	4b44      	ldr	r3, [pc, #272]	@ (800b6fc <pvPortMalloc+0x190>)
 800b5ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b5ee:	4b43      	ldr	r3, [pc, #268]	@ (800b6fc <pvPortMalloc+0x190>)
 800b5f0:	681b      	ldr	r3, [r3, #0]
 800b5f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b5f4:	e004      	b.n	800b600 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800b5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b602:	685b      	ldr	r3, [r3, #4]
 800b604:	687a      	ldr	r2, [r7, #4]
 800b606:	429a      	cmp	r2, r3
 800b608:	d903      	bls.n	800b612 <pvPortMalloc+0xa6>
 800b60a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d1f1      	bne.n	800b5f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b612:	4b37      	ldr	r3, [pc, #220]	@ (800b6f0 <pvPortMalloc+0x184>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b618:	429a      	cmp	r2, r3
 800b61a:	d051      	beq.n	800b6c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b61c:	6a3b      	ldr	r3, [r7, #32]
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	2208      	movs	r2, #8
 800b622:	4413      	add	r3, r2
 800b624:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b628:	681a      	ldr	r2, [r3, #0]
 800b62a:	6a3b      	ldr	r3, [r7, #32]
 800b62c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b62e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b630:	685a      	ldr	r2, [r3, #4]
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	1ad2      	subs	r2, r2, r3
 800b636:	2308      	movs	r3, #8
 800b638:	005b      	lsls	r3, r3, #1
 800b63a:	429a      	cmp	r2, r3
 800b63c:	d920      	bls.n	800b680 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b63e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4413      	add	r3, r2
 800b644:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b646:	69bb      	ldr	r3, [r7, #24]
 800b648:	f003 0307 	and.w	r3, r3, #7
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d00b      	beq.n	800b668 <pvPortMalloc+0xfc>
	__asm volatile
 800b650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b654:	f383 8811 	msr	BASEPRI, r3
 800b658:	f3bf 8f6f 	isb	sy
 800b65c:	f3bf 8f4f 	dsb	sy
 800b660:	613b      	str	r3, [r7, #16]
}
 800b662:	bf00      	nop
 800b664:	bf00      	nop
 800b666:	e7fd      	b.n	800b664 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66a:	685a      	ldr	r2, [r3, #4]
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	1ad2      	subs	r2, r2, r3
 800b670:	69bb      	ldr	r3, [r7, #24]
 800b672:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b676:	687a      	ldr	r2, [r7, #4]
 800b678:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b67a:	69b8      	ldr	r0, [r7, #24]
 800b67c:	f000 f90a 	bl	800b894 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b680:	4b1d      	ldr	r3, [pc, #116]	@ (800b6f8 <pvPortMalloc+0x18c>)
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b686:	685b      	ldr	r3, [r3, #4]
 800b688:	1ad3      	subs	r3, r2, r3
 800b68a:	4a1b      	ldr	r2, [pc, #108]	@ (800b6f8 <pvPortMalloc+0x18c>)
 800b68c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b68e:	4b1a      	ldr	r3, [pc, #104]	@ (800b6f8 <pvPortMalloc+0x18c>)
 800b690:	681a      	ldr	r2, [r3, #0]
 800b692:	4b1b      	ldr	r3, [pc, #108]	@ (800b700 <pvPortMalloc+0x194>)
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	429a      	cmp	r2, r3
 800b698:	d203      	bcs.n	800b6a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b69a:	4b17      	ldr	r3, [pc, #92]	@ (800b6f8 <pvPortMalloc+0x18c>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	4a18      	ldr	r2, [pc, #96]	@ (800b700 <pvPortMalloc+0x194>)
 800b6a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b6a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6a4:	685a      	ldr	r2, [r3, #4]
 800b6a6:	4b13      	ldr	r3, [pc, #76]	@ (800b6f4 <pvPortMalloc+0x188>)
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	431a      	orrs	r2, r3
 800b6ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b6b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6b2:	2200      	movs	r2, #0
 800b6b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b6b6:	4b13      	ldr	r3, [pc, #76]	@ (800b704 <pvPortMalloc+0x198>)
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	3301      	adds	r3, #1
 800b6bc:	4a11      	ldr	r2, [pc, #68]	@ (800b704 <pvPortMalloc+0x198>)
 800b6be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b6c0:	f7fe fba6 	bl	8009e10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	f003 0307 	and.w	r3, r3, #7
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d00b      	beq.n	800b6e6 <pvPortMalloc+0x17a>
	__asm volatile
 800b6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	60fb      	str	r3, [r7, #12]
}
 800b6e0:	bf00      	nop
 800b6e2:	bf00      	nop
 800b6e4:	e7fd      	b.n	800b6e2 <pvPortMalloc+0x176>
	return pvReturn;
 800b6e6:	69fb      	ldr	r3, [r7, #28]
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3728      	adds	r7, #40	@ 0x28
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	2000ae7c 	.word	0x2000ae7c
 800b6f4:	2000ae90 	.word	0x2000ae90
 800b6f8:	2000ae80 	.word	0x2000ae80
 800b6fc:	2000ae74 	.word	0x2000ae74
 800b700:	2000ae84 	.word	0x2000ae84
 800b704:	2000ae88 	.word	0x2000ae88

0800b708 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b708:	b580      	push	{r7, lr}
 800b70a:	b086      	sub	sp, #24
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d04f      	beq.n	800b7ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b71a:	2308      	movs	r3, #8
 800b71c:	425b      	negs	r3, r3
 800b71e:	697a      	ldr	r2, [r7, #20]
 800b720:	4413      	add	r3, r2
 800b722:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b724:	697b      	ldr	r3, [r7, #20]
 800b726:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	685a      	ldr	r2, [r3, #4]
 800b72c:	4b25      	ldr	r3, [pc, #148]	@ (800b7c4 <vPortFree+0xbc>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	4013      	ands	r3, r2
 800b732:	2b00      	cmp	r3, #0
 800b734:	d10b      	bne.n	800b74e <vPortFree+0x46>
	__asm volatile
 800b736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b73a:	f383 8811 	msr	BASEPRI, r3
 800b73e:	f3bf 8f6f 	isb	sy
 800b742:	f3bf 8f4f 	dsb	sy
 800b746:	60fb      	str	r3, [r7, #12]
}
 800b748:	bf00      	nop
 800b74a:	bf00      	nop
 800b74c:	e7fd      	b.n	800b74a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	2b00      	cmp	r3, #0
 800b754:	d00b      	beq.n	800b76e <vPortFree+0x66>
	__asm volatile
 800b756:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b75a:	f383 8811 	msr	BASEPRI, r3
 800b75e:	f3bf 8f6f 	isb	sy
 800b762:	f3bf 8f4f 	dsb	sy
 800b766:	60bb      	str	r3, [r7, #8]
}
 800b768:	bf00      	nop
 800b76a:	bf00      	nop
 800b76c:	e7fd      	b.n	800b76a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	685a      	ldr	r2, [r3, #4]
 800b772:	4b14      	ldr	r3, [pc, #80]	@ (800b7c4 <vPortFree+0xbc>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	4013      	ands	r3, r2
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d01e      	beq.n	800b7ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d11a      	bne.n	800b7ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	685a      	ldr	r2, [r3, #4]
 800b788:	4b0e      	ldr	r3, [pc, #56]	@ (800b7c4 <vPortFree+0xbc>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	43db      	mvns	r3, r3
 800b78e:	401a      	ands	r2, r3
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b794:	f7fe fb2e 	bl	8009df4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	685a      	ldr	r2, [r3, #4]
 800b79c:	4b0a      	ldr	r3, [pc, #40]	@ (800b7c8 <vPortFree+0xc0>)
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	4a09      	ldr	r2, [pc, #36]	@ (800b7c8 <vPortFree+0xc0>)
 800b7a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b7a6:	6938      	ldr	r0, [r7, #16]
 800b7a8:	f000 f874 	bl	800b894 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b7ac:	4b07      	ldr	r3, [pc, #28]	@ (800b7cc <vPortFree+0xc4>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	4a06      	ldr	r2, [pc, #24]	@ (800b7cc <vPortFree+0xc4>)
 800b7b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b7b6:	f7fe fb2b 	bl	8009e10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b7ba:	bf00      	nop
 800b7bc:	3718      	adds	r7, #24
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	2000ae90 	.word	0x2000ae90
 800b7c8:	2000ae80 	.word	0x2000ae80
 800b7cc:	2000ae8c 	.word	0x2000ae8c

0800b7d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b085      	sub	sp, #20
 800b7d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b7d6:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 800b7da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b7dc:	4b27      	ldr	r3, [pc, #156]	@ (800b87c <prvHeapInit+0xac>)
 800b7de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f003 0307 	and.w	r3, r3, #7
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00c      	beq.n	800b804 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	3307      	adds	r3, #7
 800b7ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	f023 0307 	bic.w	r3, r3, #7
 800b7f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b7f8:	68ba      	ldr	r2, [r7, #8]
 800b7fa:	68fb      	ldr	r3, [r7, #12]
 800b7fc:	1ad3      	subs	r3, r2, r3
 800b7fe:	4a1f      	ldr	r2, [pc, #124]	@ (800b87c <prvHeapInit+0xac>)
 800b800:	4413      	add	r3, r2
 800b802:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b808:	4a1d      	ldr	r2, [pc, #116]	@ (800b880 <prvHeapInit+0xb0>)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b80e:	4b1c      	ldr	r3, [pc, #112]	@ (800b880 <prvHeapInit+0xb0>)
 800b810:	2200      	movs	r2, #0
 800b812:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	68ba      	ldr	r2, [r7, #8]
 800b818:	4413      	add	r3, r2
 800b81a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b81c:	2208      	movs	r2, #8
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	1a9b      	subs	r3, r3, r2
 800b822:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	f023 0307 	bic.w	r3, r3, #7
 800b82a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	4a15      	ldr	r2, [pc, #84]	@ (800b884 <prvHeapInit+0xb4>)
 800b830:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b832:	4b14      	ldr	r3, [pc, #80]	@ (800b884 <prvHeapInit+0xb4>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	2200      	movs	r2, #0
 800b838:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b83a:	4b12      	ldr	r3, [pc, #72]	@ (800b884 <prvHeapInit+0xb4>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	2200      	movs	r2, #0
 800b840:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	1ad2      	subs	r2, r2, r3
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b850:	4b0c      	ldr	r3, [pc, #48]	@ (800b884 <prvHeapInit+0xb4>)
 800b852:	681a      	ldr	r2, [r3, #0]
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	685b      	ldr	r3, [r3, #4]
 800b85c:	4a0a      	ldr	r2, [pc, #40]	@ (800b888 <prvHeapInit+0xb8>)
 800b85e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	4a09      	ldr	r2, [pc, #36]	@ (800b88c <prvHeapInit+0xbc>)
 800b866:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b868:	4b09      	ldr	r3, [pc, #36]	@ (800b890 <prvHeapInit+0xc0>)
 800b86a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800b86e:	601a      	str	r2, [r3, #0]
}
 800b870:	bf00      	nop
 800b872:	3714      	adds	r7, #20
 800b874:	46bd      	mov	sp, r7
 800b876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87a:	4770      	bx	lr
 800b87c:	20006ff4 	.word	0x20006ff4
 800b880:	2000ae74 	.word	0x2000ae74
 800b884:	2000ae7c 	.word	0x2000ae7c
 800b888:	2000ae84 	.word	0x2000ae84
 800b88c:	2000ae80 	.word	0x2000ae80
 800b890:	2000ae90 	.word	0x2000ae90

0800b894 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b89c:	4b28      	ldr	r3, [pc, #160]	@ (800b940 <prvInsertBlockIntoFreeList+0xac>)
 800b89e:	60fb      	str	r3, [r7, #12]
 800b8a0:	e002      	b.n	800b8a8 <prvInsertBlockIntoFreeList+0x14>
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	60fb      	str	r3, [r7, #12]
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	687a      	ldr	r2, [r7, #4]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d8f7      	bhi.n	800b8a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	685b      	ldr	r3, [r3, #4]
 800b8ba:	68ba      	ldr	r2, [r7, #8]
 800b8bc:	4413      	add	r3, r2
 800b8be:	687a      	ldr	r2, [r7, #4]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d108      	bne.n	800b8d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	685a      	ldr	r2, [r3, #4]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	441a      	add	r2, r3
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	68ba      	ldr	r2, [r7, #8]
 800b8e0:	441a      	add	r2, r3
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	429a      	cmp	r2, r3
 800b8e8:	d118      	bne.n	800b91c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	4b15      	ldr	r3, [pc, #84]	@ (800b944 <prvInsertBlockIntoFreeList+0xb0>)
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	429a      	cmp	r2, r3
 800b8f4:	d00d      	beq.n	800b912 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	685a      	ldr	r2, [r3, #4]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	685b      	ldr	r3, [r3, #4]
 800b900:	441a      	add	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	681a      	ldr	r2, [r3, #0]
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	601a      	str	r2, [r3, #0]
 800b910:	e008      	b.n	800b924 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b912:	4b0c      	ldr	r3, [pc, #48]	@ (800b944 <prvInsertBlockIntoFreeList+0xb0>)
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	601a      	str	r2, [r3, #0]
 800b91a:	e003      	b.n	800b924 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	681a      	ldr	r2, [r3, #0]
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b924:	68fa      	ldr	r2, [r7, #12]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d002      	beq.n	800b932 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	687a      	ldr	r2, [r7, #4]
 800b930:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b932:	bf00      	nop
 800b934:	3714      	adds	r7, #20
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	2000ae74 	.word	0x2000ae74
 800b944:	2000ae7c 	.word	0x2000ae7c

0800b948 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	330c      	adds	r3, #12
 800b958:	461a      	mov	r2, r3
 800b95a:	6839      	ldr	r1, [r7, #0]
 800b95c:	6878      	ldr	r0, [r7, #4]
 800b95e:	f003 fad5 	bl	800ef0c <tcpip_send_msg_wait_sem>
 800b962:	4603      	mov	r3, r0
 800b964:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b966:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d103      	bne.n	800b976 <netconn_apimsg+0x2e>
    return apimsg->err;
 800b96e:	683b      	ldr	r3, [r7, #0]
 800b970:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800b974:	e001      	b.n	800b97a <netconn_apimsg+0x32>
  }
  return err;
 800b976:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b97a:	4618      	mov	r0, r3
 800b97c:	3710      	adds	r7, #16
 800b97e:	46bd      	mov	sp, r7
 800b980:	bd80      	pop	{r7, pc}
	...

0800b984 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b08c      	sub	sp, #48	@ 0x30
 800b988:	af00      	add	r7, sp, #0
 800b98a:	4603      	mov	r3, r0
 800b98c:	603a      	str	r2, [r7, #0]
 800b98e:	71fb      	strb	r3, [r7, #7]
 800b990:	460b      	mov	r3, r1
 800b992:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800b994:	79fb      	ldrb	r3, [r7, #7]
 800b996:	6839      	ldr	r1, [r7, #0]
 800b998:	4618      	mov	r0, r3
 800b99a:	f001 f859 	bl	800ca50 <netconn_alloc>
 800b99e:	62f8      	str	r0, [r7, #44]	@ 0x2c
  if (conn != NULL) {
 800b9a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d054      	beq.n	800ba50 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800b9a6:	79bb      	ldrb	r3, [r7, #6]
 800b9a8:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800b9aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ac:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800b9ae:	f107 0308 	add.w	r3, r7, #8
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	4829      	ldr	r0, [pc, #164]	@ (800ba5c <netconn_new_with_proto_and_callback+0xd8>)
 800b9b6:	f7ff ffc7 	bl	800b948 <netconn_apimsg>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    if (err != ERR_OK) {
 800b9c0:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d043      	beq.n	800ba50 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800b9c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9ca:	685b      	ldr	r3, [r3, #4]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d005      	beq.n	800b9dc <netconn_new_with_proto_and_callback+0x58>
 800b9d0:	4b23      	ldr	r3, [pc, #140]	@ (800ba60 <netconn_new_with_proto_and_callback+0xdc>)
 800b9d2:	22a3      	movs	r2, #163	@ 0xa3
 800b9d4:	4923      	ldr	r1, [pc, #140]	@ (800ba64 <netconn_new_with_proto_and_callback+0xe0>)
 800b9d6:	4824      	ldr	r0, [pc, #144]	@ (800ba68 <netconn_new_with_proto_and_callback+0xe4>)
 800b9d8:	f012 f9d8 	bl	801dd8c <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800b9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9de:	3310      	adds	r3, #16
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	f011 f8c3 	bl	801cb6c <sys_mbox_valid>
 800b9e6:	4603      	mov	r3, r0
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d105      	bne.n	800b9f8 <netconn_new_with_proto_and_callback+0x74>
 800b9ec:	4b1c      	ldr	r3, [pc, #112]	@ (800ba60 <netconn_new_with_proto_and_callback+0xdc>)
 800b9ee:	22a4      	movs	r2, #164	@ 0xa4
 800b9f0:	491e      	ldr	r1, [pc, #120]	@ (800ba6c <netconn_new_with_proto_and_callback+0xe8>)
 800b9f2:	481d      	ldr	r0, [pc, #116]	@ (800ba68 <netconn_new_with_proto_and_callback+0xe4>)
 800b9f4:	f012 f9ca 	bl	801dd8c <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800b9f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9fa:	3314      	adds	r3, #20
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f011 f8b5 	bl	801cb6c <sys_mbox_valid>
 800ba02:	4603      	mov	r3, r0
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d005      	beq.n	800ba14 <netconn_new_with_proto_and_callback+0x90>
 800ba08:	4b15      	ldr	r3, [pc, #84]	@ (800ba60 <netconn_new_with_proto_and_callback+0xdc>)
 800ba0a:	22a6      	movs	r2, #166	@ 0xa6
 800ba0c:	4918      	ldr	r1, [pc, #96]	@ (800ba70 <netconn_new_with_proto_and_callback+0xec>)
 800ba0e:	4816      	ldr	r0, [pc, #88]	@ (800ba68 <netconn_new_with_proto_and_callback+0xe4>)
 800ba10:	f012 f9bc 	bl	801dd8c <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800ba14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba16:	330c      	adds	r3, #12
 800ba18:	4618      	mov	r0, r3
 800ba1a:	f011 f935 	bl	801cc88 <sys_sem_valid>
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d105      	bne.n	800ba30 <netconn_new_with_proto_and_callback+0xac>
 800ba24:	4b0e      	ldr	r3, [pc, #56]	@ (800ba60 <netconn_new_with_proto_and_callback+0xdc>)
 800ba26:	22a9      	movs	r2, #169	@ 0xa9
 800ba28:	4912      	ldr	r1, [pc, #72]	@ (800ba74 <netconn_new_with_proto_and_callback+0xf0>)
 800ba2a:	480f      	ldr	r0, [pc, #60]	@ (800ba68 <netconn_new_with_proto_and_callback+0xe4>)
 800ba2c:	f012 f9ae 	bl	801dd8c <iprintf>
      sys_sem_free(&conn->op_completed);
 800ba30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba32:	330c      	adds	r3, #12
 800ba34:	4618      	mov	r0, r3
 800ba36:	f011 f91a 	bl	801cc6e <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800ba3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba3c:	3310      	adds	r3, #16
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f011 f820 	bl	801ca84 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800ba44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba46:	2007      	movs	r0, #7
 800ba48:	f004 fafc 	bl	8010044 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	e000      	b.n	800ba52 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800ba50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	3730      	adds	r7, #48	@ 0x30
 800ba56:	46bd      	mov	sp, r7
 800ba58:	bd80      	pop	{r7, pc}
 800ba5a:	bf00      	nop
 800ba5c:	0800ca25 	.word	0x0800ca25
 800ba60:	08021720 	.word	0x08021720
 800ba64:	08021754 	.word	0x08021754
 800ba68:	08021778 	.word	0x08021778
 800ba6c:	080217a0 	.word	0x080217a0
 800ba70:	080217b8 	.word	0x080217b8
 800ba74:	080217dc 	.word	0x080217dc

0800ba78 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b08c      	sub	sp, #48	@ 0x30
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d101      	bne.n	800ba8a <netconn_prepare_delete+0x12>
    return ERR_OK;
 800ba86:	2300      	movs	r3, #0
 800ba88:	e014      	b.n	800bab4 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800ba8e:	2329      	movs	r3, #41	@ 0x29
 800ba90:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800ba92:	f107 030c 	add.w	r3, r7, #12
 800ba96:	4619      	mov	r1, r3
 800ba98:	4808      	ldr	r0, [pc, #32]	@ (800babc <netconn_prepare_delete+0x44>)
 800ba9a:	f7ff ff55 	bl	800b948 <netconn_apimsg>
 800ba9e:	4603      	mov	r3, r0
 800baa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800baa4:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d002      	beq.n	800bab2 <netconn_prepare_delete+0x3a>
    return err;
 800baac:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800bab0:	e000      	b.n	800bab4 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800bab2:	2300      	movs	r3, #0
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3730      	adds	r7, #48	@ 0x30
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	0800cf91 	.word	0x0800cf91

0800bac0 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b084      	sub	sp, #16
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d101      	bne.n	800bad2 <netconn_delete+0x12>
    return ERR_OK;
 800bace:	2300      	movs	r3, #0
 800bad0:	e00d      	b.n	800baee <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f7ff ffd0 	bl	800ba78 <netconn_prepare_delete>
 800bad8:	4603      	mov	r3, r0
 800bada:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800badc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d102      	bne.n	800baea <netconn_delete+0x2a>
    netconn_free(conn);
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f001 f821 	bl	800cb2c <netconn_free>
  }
  return err;
 800baea:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800baee:	4618      	mov	r0, r3
 800baf0:	3710      	adds	r7, #16
 800baf2:	46bd      	mov	sp, r7
 800baf4:	bd80      	pop	{r7, pc}
	...

0800baf8 <netconn_getaddr>:
 * @return ERR_CONN for invalid connections
 *         ERR_OK if the information was retrieved
 */
err_t
netconn_getaddr(struct netconn *conn, ip_addr_t *addr, u16_t *port, u8_t local)
{
 800baf8:	b580      	push	{r7, lr}
 800bafa:	b08e      	sub	sp, #56	@ 0x38
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	60f8      	str	r0, [r7, #12]
 800bb00:	60b9      	str	r1, [r7, #8]
 800bb02:	607a      	str	r2, [r7, #4]
 800bb04:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_getaddr: invalid conn", (conn != NULL), return ERR_ARG;);
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d109      	bne.n	800bb20 <netconn_getaddr+0x28>
 800bb0c:	4b1d      	ldr	r3, [pc, #116]	@ (800bb84 <netconn_getaddr+0x8c>)
 800bb0e:	f44f 7289 	mov.w	r2, #274	@ 0x112
 800bb12:	491d      	ldr	r1, [pc, #116]	@ (800bb88 <netconn_getaddr+0x90>)
 800bb14:	481d      	ldr	r0, [pc, #116]	@ (800bb8c <netconn_getaddr+0x94>)
 800bb16:	f012 f939 	bl	801dd8c <iprintf>
 800bb1a:	f06f 030f 	mvn.w	r3, #15
 800bb1e:	e02d      	b.n	800bb7c <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid addr", (addr != NULL), return ERR_ARG;);
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d109      	bne.n	800bb3a <netconn_getaddr+0x42>
 800bb26:	4b17      	ldr	r3, [pc, #92]	@ (800bb84 <netconn_getaddr+0x8c>)
 800bb28:	f240 1213 	movw	r2, #275	@ 0x113
 800bb2c:	4918      	ldr	r1, [pc, #96]	@ (800bb90 <netconn_getaddr+0x98>)
 800bb2e:	4817      	ldr	r0, [pc, #92]	@ (800bb8c <netconn_getaddr+0x94>)
 800bb30:	f012 f92c 	bl	801dd8c <iprintf>
 800bb34:	f06f 030f 	mvn.w	r3, #15
 800bb38:	e020      	b.n	800bb7c <netconn_getaddr+0x84>
  LWIP_ERROR("netconn_getaddr: invalid port", (port != NULL), return ERR_ARG;);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d109      	bne.n	800bb54 <netconn_getaddr+0x5c>
 800bb40:	4b10      	ldr	r3, [pc, #64]	@ (800bb84 <netconn_getaddr+0x8c>)
 800bb42:	f44f 728a 	mov.w	r2, #276	@ 0x114
 800bb46:	4913      	ldr	r1, [pc, #76]	@ (800bb94 <netconn_getaddr+0x9c>)
 800bb48:	4810      	ldr	r0, [pc, #64]	@ (800bb8c <netconn_getaddr+0x94>)
 800bb4a:	f012 f91f 	bl	801dd8c <iprintf>
 800bb4e:	f06f 030f 	mvn.w	r3, #15
 800bb52:	e013      	b.n	800bb7c <netconn_getaddr+0x84>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.ad.local = local;
 800bb58:	78fb      	ldrb	r3, [r7, #3]
 800bb5a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
#if LWIP_MPU_COMPATIBLE
  err = netconn_apimsg(lwip_netconn_do_getaddr, &API_MSG_VAR_REF(msg));
  *addr = msg->msg.ad.ipaddr;
  *port = msg->msg.ad.port;
#else /* LWIP_MPU_COMPATIBLE */
  msg.msg.ad.ipaddr = addr;
 800bb5e:	68bb      	ldr	r3, [r7, #8]
 800bb60:	61fb      	str	r3, [r7, #28]
  msg.msg.ad.port = port;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	623b      	str	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_getaddr, &msg);
 800bb66:	f107 0314 	add.w	r3, r7, #20
 800bb6a:	4619      	mov	r1, r3
 800bb6c:	480a      	ldr	r0, [pc, #40]	@ (800bb98 <netconn_getaddr+0xa0>)
 800bb6e:	f7ff feeb 	bl	800b948 <netconn_apimsg>
 800bb72:	4603      	mov	r3, r0
 800bb74:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_MPU_COMPATIBLE */
  API_MSG_VAR_FREE(msg);

  return err;
 800bb78:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3738      	adds	r7, #56	@ 0x38
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	08021720 	.word	0x08021720
 800bb88:	080217f8 	.word	0x080217f8
 800bb8c:	08021778 	.word	0x08021778
 800bb90:	08021818 	.word	0x08021818
 800bb94:	08021838 	.word	0x08021838
 800bb98:	0800d9e5 	.word	0x0800d9e5

0800bb9c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b08e      	sub	sp, #56	@ 0x38
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	60b9      	str	r1, [r7, #8]
 800bba6:	4613      	mov	r3, r2
 800bba8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d109      	bne.n	800bbc4 <netconn_connect+0x28>
 800bbb0:	4b11      	ldr	r3, [pc, #68]	@ (800bbf8 <netconn_connect+0x5c>)
 800bbb2:	f44f 72bf 	mov.w	r2, #382	@ 0x17e
 800bbb6:	4911      	ldr	r1, [pc, #68]	@ (800bbfc <netconn_connect+0x60>)
 800bbb8:	4811      	ldr	r0, [pc, #68]	@ (800bc00 <netconn_connect+0x64>)
 800bbba:	f012 f8e7 	bl	801dd8c <iprintf>
 800bbbe:	f06f 030f 	mvn.w	r3, #15
 800bbc2:	e015      	b.n	800bbf0 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d101      	bne.n	800bbce <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800bbca:	4b0e      	ldr	r3, [pc, #56]	@ (800bc04 <netconn_connect+0x68>)
 800bbcc:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800bbd6:	88fb      	ldrh	r3, [r7, #6]
 800bbd8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800bbda:	f107 0314 	add.w	r3, r7, #20
 800bbde:	4619      	mov	r1, r3
 800bbe0:	4809      	ldr	r0, [pc, #36]	@ (800bc08 <netconn_connect+0x6c>)
 800bbe2:	f7ff feb1 	bl	800b948 <netconn_apimsg>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800bbec:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	3738      	adds	r7, #56	@ 0x38
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}
 800bbf8:	08021720 	.word	0x08021720
 800bbfc:	08021894 	.word	0x08021894
 800bc00:	08021778 	.word	0x08021778
 800bc04:	08025740 	.word	0x08025740
 800bc08:	0800d279 	.word	0x0800d279

0800bc0c <netconn_disconnect>:
 * @param conn the netconn to disconnect
 * @return See @ref err_t
 */
err_t
netconn_disconnect(struct netconn *conn)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b08c      	sub	sp, #48	@ 0x30
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_disconnect: invalid conn", (conn != NULL), return ERR_ARG;);
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d109      	bne.n	800bc2e <netconn_disconnect+0x22>
 800bc1a:	4b0d      	ldr	r3, [pc, #52]	@ (800bc50 <netconn_disconnect+0x44>)
 800bc1c:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 800bc20:	490c      	ldr	r1, [pc, #48]	@ (800bc54 <netconn_disconnect+0x48>)
 800bc22:	480d      	ldr	r0, [pc, #52]	@ (800bc58 <netconn_disconnect+0x4c>)
 800bc24:	f012 f8b2 	bl	801dd8c <iprintf>
 800bc28:	f06f 030f 	mvn.w	r3, #15
 800bc2c:	e00c      	b.n	800bc48 <netconn_disconnect+0x3c>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	60fb      	str	r3, [r7, #12]
  err = netconn_apimsg(lwip_netconn_do_disconnect, &API_MSG_VAR_REF(msg));
 800bc32:	f107 030c 	add.w	r3, r7, #12
 800bc36:	4619      	mov	r1, r3
 800bc38:	4808      	ldr	r0, [pc, #32]	@ (800bc5c <netconn_disconnect+0x50>)
 800bc3a:	f7ff fe85 	bl	800b948 <netconn_apimsg>
 800bc3e:	4603      	mov	r3, r0
 800bc40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800bc44:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	3730      	adds	r7, #48	@ 0x30
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	bd80      	pop	{r7, pc}
 800bc50:	08021720 	.word	0x08021720
 800bc54:	080218b4 	.word	0x080218b4
 800bc58:	08021778 	.word	0x08021778
 800bc5c:	0800d3f5 	.word	0x0800d3f5

0800bc60 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b088      	sub	sp, #32
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	60f8      	str	r0, [r7, #12]
 800bc68:	60b9      	str	r1, [r7, #8]
 800bc6a:	4613      	mov	r3, r2
 800bc6c:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d109      	bne.n	800bc8c <netconn_recv_data+0x2c>
 800bc78:	4b58      	ldr	r3, [pc, #352]	@ (800bddc <netconn_recv_data+0x17c>)
 800bc7a:	f44f 7212 	mov.w	r2, #584	@ 0x248
 800bc7e:	4958      	ldr	r1, [pc, #352]	@ (800bde0 <netconn_recv_data+0x180>)
 800bc80:	4858      	ldr	r0, [pc, #352]	@ (800bde4 <netconn_recv_data+0x184>)
 800bc82:	f012 f883 	bl	801dd8c <iprintf>
 800bc86:	f06f 030f 	mvn.w	r3, #15
 800bc8a:	e0a2      	b.n	800bdd2 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800bc8c:	68bb      	ldr	r3, [r7, #8]
 800bc8e:	2200      	movs	r2, #0
 800bc90:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d109      	bne.n	800bcac <netconn_recv_data+0x4c>
 800bc98:	4b50      	ldr	r3, [pc, #320]	@ (800bddc <netconn_recv_data+0x17c>)
 800bc9a:	f240 224a 	movw	r2, #586	@ 0x24a
 800bc9e:	4952      	ldr	r1, [pc, #328]	@ (800bde8 <netconn_recv_data+0x188>)
 800bca0:	4850      	ldr	r0, [pc, #320]	@ (800bde4 <netconn_recv_data+0x184>)
 800bca2:	f012 f873 	bl	801dd8c <iprintf>
 800bca6:	f06f 030f 	mvn.w	r3, #15
 800bcaa:	e092      	b.n	800bdd2 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	3310      	adds	r3, #16
 800bcb0:	4618      	mov	r0, r3
 800bcb2:	f010 ff5b 	bl	801cb6c <sys_mbox_valid>
 800bcb6:	4603      	mov	r3, r0
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d10e      	bne.n	800bcda <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800bcbc:	68f8      	ldr	r0, [r7, #12]
 800bcbe:	f000 fb01 	bl	800c2c4 <netconn_err>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800bcc6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d002      	beq.n	800bcd4 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800bcce:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800bcd2:	e07e      	b.n	800bdd2 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800bcd4:	f06f 030a 	mvn.w	r3, #10
 800bcd8:	e07b      	b.n	800bdd2 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	7f1b      	ldrb	r3, [r3, #28]
 800bcde:	f003 0302 	and.w	r3, r3, #2
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d10f      	bne.n	800bd06 <netconn_recv_data+0xa6>
 800bce6:	79fb      	ldrb	r3, [r7, #7]
 800bce8:	f003 0304 	and.w	r3, r3, #4
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d10a      	bne.n	800bd06 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	7f1b      	ldrb	r3, [r3, #28]
 800bcf4:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d104      	bne.n	800bd06 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d023      	beq.n	800bd4e <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	3310      	adds	r3, #16
 800bd0a:	f107 0218 	add.w	r2, r7, #24
 800bd0e:	4611      	mov	r1, r2
 800bd10:	4618      	mov	r0, r3
 800bd12:	f010 ff14 	bl	801cb3e <sys_arch_mbox_tryfetch>
 800bd16:	4603      	mov	r3, r0
 800bd18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd1c:	d11f      	bne.n	800bd5e <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800bd1e:	68f8      	ldr	r0, [r7, #12]
 800bd20:	f000 fad0 	bl	800c2c4 <netconn_err>
 800bd24:	4603      	mov	r3, r0
 800bd26:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800bd28:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d002      	beq.n	800bd36 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800bd30:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800bd34:	e04d      	b.n	800bdd2 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	7f1b      	ldrb	r3, [r3, #28]
 800bd3a:	f003 0301 	and.w	r3, r3, #1
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d002      	beq.n	800bd48 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800bd42:	f06f 030a 	mvn.w	r3, #10
 800bd46:	e044      	b.n	800bdd2 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800bd48:	f06f 0306 	mvn.w	r3, #6
 800bd4c:	e041      	b.n	800bdd2 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	3310      	adds	r3, #16
 800bd52:	f107 0118 	add.w	r1, r7, #24
 800bd56:	2200      	movs	r2, #0
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f010 febf 	bl	801cadc <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	781b      	ldrb	r3, [r3, #0]
 800bd62:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bd66:	2b10      	cmp	r3, #16
 800bd68:	d117      	bne.n	800bd9a <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800bd6a:	69bb      	ldr	r3, [r7, #24]
 800bd6c:	f107 0217 	add.w	r2, r7, #23
 800bd70:	4611      	mov	r1, r2
 800bd72:	4618      	mov	r0, r3
 800bd74:	f000 faf8 	bl	800c368 <lwip_netconn_is_err_msg>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	2b00      	cmp	r3, #0
 800bd7c:	d009      	beq.n	800bd92 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800bd7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd82:	f113 0f0f 	cmn.w	r3, #15
 800bd86:	d101      	bne.n	800bd8c <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	e022      	b.n	800bdd2 <netconn_recv_data+0x172>
      }
      return err;
 800bd8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800bd90:	e01f      	b.n	800bdd2 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800bd92:	69bb      	ldr	r3, [r7, #24]
 800bd94:	891b      	ldrh	r3, [r3, #8]
 800bd96:	83fb      	strh	r3, [r7, #30]
 800bd98:	e00d      	b.n	800bdb6 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800bd9a:	69bb      	ldr	r3, [r7, #24]
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d106      	bne.n	800bdae <netconn_recv_data+0x14e>
 800bda0:	4b0e      	ldr	r3, [pc, #56]	@ (800bddc <netconn_recv_data+0x17c>)
 800bda2:	f240 2291 	movw	r2, #657	@ 0x291
 800bda6:	4911      	ldr	r1, [pc, #68]	@ (800bdec <netconn_recv_data+0x18c>)
 800bda8:	480e      	ldr	r0, [pc, #56]	@ (800bde4 <netconn_recv_data+0x184>)
 800bdaa:	f011 ffef 	bl	801dd8c <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800bdae:	69bb      	ldr	r3, [r7, #24]
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	891b      	ldrh	r3, [r3, #8]
 800bdb4:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d005      	beq.n	800bdca <netconn_recv_data+0x16a>
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bdc2:	8bfa      	ldrh	r2, [r7, #30]
 800bdc4:	2101      	movs	r1, #1
 800bdc6:	68f8      	ldr	r0, [r7, #12]
 800bdc8:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800bdca:	69ba      	ldr	r2, [r7, #24]
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800bdd0:	2300      	movs	r3, #0
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3720      	adds	r7, #32
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	08021720 	.word	0x08021720
 800bde0:	08021938 	.word	0x08021938
 800bde4:	08021778 	.word	0x08021778
 800bde8:	08021958 	.word	0x08021958
 800bdec:	08021974 	.word	0x08021974

0800bdf0 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800bdf0:	b580      	push	{r7, lr}
 800bdf2:	b084      	sub	sp, #16
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	60f8      	str	r0, [r7, #12]
 800bdf8:	60b9      	str	r1, [r7, #8]
 800bdfa:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800bdfc:	68fb      	ldr	r3, [r7, #12]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d005      	beq.n	800be0e <netconn_tcp_recvd_msg+0x1e>
 800be02:	68fb      	ldr	r3, [r7, #12]
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800be0a:	2b10      	cmp	r3, #16
 800be0c:	d009      	beq.n	800be22 <netconn_tcp_recvd_msg+0x32>
 800be0e:	4b0c      	ldr	r3, [pc, #48]	@ (800be40 <netconn_tcp_recvd_msg+0x50>)
 800be10:	f240 22a7 	movw	r2, #679	@ 0x2a7
 800be14:	490b      	ldr	r1, [pc, #44]	@ (800be44 <netconn_tcp_recvd_msg+0x54>)
 800be16:	480c      	ldr	r0, [pc, #48]	@ (800be48 <netconn_tcp_recvd_msg+0x58>)
 800be18:	f011 ffb8 	bl	801dd8c <iprintf>
 800be1c:	f06f 030f 	mvn.w	r3, #15
 800be20:	e00a      	b.n	800be38 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	68ba      	ldr	r2, [r7, #8]
 800be2c:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800be2e:	6879      	ldr	r1, [r7, #4]
 800be30:	4806      	ldr	r0, [pc, #24]	@ (800be4c <netconn_tcp_recvd_msg+0x5c>)
 800be32:	f7ff fd89 	bl	800b948 <netconn_apimsg>
 800be36:	4603      	mov	r3, r0
}
 800be38:	4618      	mov	r0, r3
 800be3a:	3710      	adds	r7, #16
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	08021720 	.word	0x08021720
 800be44:	08021980 	.word	0x08021980
 800be48:	08021778 	.word	0x08021778
 800be4c:	0800d4cb 	.word	0x0800d4cb

0800be50 <netconn_tcp_recvd>:

err_t
netconn_tcp_recvd(struct netconn *conn, size_t len)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b08c      	sub	sp, #48	@ 0x30
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  err_t err;
  API_MSG_VAR_DECLARE(msg);
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d005      	beq.n	800be6c <netconn_tcp_recvd+0x1c>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	781b      	ldrb	r3, [r3, #0]
 800be64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800be68:	2b10      	cmp	r3, #16
 800be6a:	d009      	beq.n	800be80 <netconn_tcp_recvd+0x30>
 800be6c:	4b0c      	ldr	r3, [pc, #48]	@ (800bea0 <netconn_tcp_recvd+0x50>)
 800be6e:	f240 22b5 	movw	r2, #693	@ 0x2b5
 800be72:	490c      	ldr	r1, [pc, #48]	@ (800bea4 <netconn_tcp_recvd+0x54>)
 800be74:	480c      	ldr	r0, [pc, #48]	@ (800bea8 <netconn_tcp_recvd+0x58>)
 800be76:	f011 ff89 	bl	801dd8c <iprintf>
 800be7a:	f06f 030f 	mvn.w	r3, #15
 800be7e:	e00b      	b.n	800be98 <netconn_tcp_recvd+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  API_MSG_VAR_ALLOC(msg);
  err = netconn_tcp_recvd_msg(conn, len, &API_VAR_REF(msg));
 800be80:	f107 030c 	add.w	r3, r7, #12
 800be84:	461a      	mov	r2, r3
 800be86:	6839      	ldr	r1, [r7, #0]
 800be88:	6878      	ldr	r0, [r7, #4]
 800be8a:	f7ff ffb1 	bl	800bdf0 <netconn_tcp_recvd_msg>
 800be8e:	4603      	mov	r3, r0
 800be90:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);
  return err;
 800be94:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800be98:	4618      	mov	r0, r3
 800be9a:	3730      	adds	r7, #48	@ 0x30
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bd80      	pop	{r7, pc}
 800bea0:	08021720 	.word	0x08021720
 800bea4:	08021980 	.word	0x08021980
 800bea8:	08021778 	.word	0x08021778

0800beac <netconn_recv_data_tcp>:

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b090      	sub	sp, #64	@ 0x40
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	60f8      	str	r0, [r7, #12]
 800beb4:	60b9      	str	r1, [r7, #8]
 800beb6:	4613      	mov	r3, r2
 800beb8:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	3310      	adds	r3, #16
 800bebe:	4618      	mov	r0, r3
 800bec0:	f010 fe54 	bl	801cb6c <sys_mbox_valid>
 800bec4:	4603      	mov	r3, r0
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d102      	bne.n	800bed0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800beca:	f06f 030a 	mvn.w	r3, #10
 800bece:	e06d      	b.n	800bfac <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	7f1b      	ldrb	r3, [r3, #28]
 800bed4:	b25b      	sxtb	r3, r3
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	da07      	bge.n	800beea <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800beda:	68fb      	ldr	r3, [r7, #12]
 800bedc:	7f1b      	ldrb	r3, [r3, #28]
 800bede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bee2:	b2da      	uxtb	r2, r3
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800bee8:	e039      	b.n	800bf5e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800beea:	79fb      	ldrb	r3, [r7, #7]
 800beec:	461a      	mov	r2, r3
 800beee:	68b9      	ldr	r1, [r7, #8]
 800bef0:	68f8      	ldr	r0, [r7, #12]
 800bef2:	f7ff feb5 	bl	800bc60 <netconn_recv_data>
 800bef6:	4603      	mov	r3, r0
 800bef8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (err != ERR_OK) {
 800befc:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d002      	beq.n	800bf0a <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800bf04:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bf08:	e050      	b.n	800bfac <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800bf10:	79fb      	ldrb	r3, [r7, #7]
 800bf12:	f003 0308 	and.w	r3, r3, #8
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d10e      	bne.n	800bf38 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800bf1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d002      	beq.n	800bf26 <netconn_recv_data_tcp+0x7a>
 800bf20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf22:	891b      	ldrh	r3, [r3, #8]
 800bf24:	e000      	b.n	800bf28 <netconn_recv_data_tcp+0x7c>
 800bf26:	2301      	movs	r3, #1
 800bf28:	86fb      	strh	r3, [r7, #54]	@ 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800bf2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800bf2c:	f107 0214 	add.w	r2, r7, #20
 800bf30:	4619      	mov	r1, r3
 800bf32:	68f8      	ldr	r0, [r7, #12]
 800bf34:	f7ff ff5c 	bl	800bdf0 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800bf38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d134      	bne.n	800bfa8 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800bf3e:	79fb      	ldrb	r3, [r7, #7]
 800bf40:	f003 0310 	and.w	r3, r3, #16
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d009      	beq.n	800bf5c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	7f1b      	ldrb	r3, [r3, #28]
 800bf4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bf50:	b2da      	uxtb	r2, r3
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800bf56:	f06f 0306 	mvn.w	r3, #6
 800bf5a:	e027      	b.n	800bfac <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800bf5c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d005      	beq.n	800bf72 <netconn_recv_data_tcp+0xc6>
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	2101      	movs	r1, #1
 800bf6e:	68f8      	ldr	r0, [r7, #12]
 800bf70:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	685b      	ldr	r3, [r3, #4]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d10f      	bne.n	800bf9a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800bf7a:	68f8      	ldr	r0, [r7, #12]
 800bf7c:	f000 f9a2 	bl	800c2c4 <netconn_err>
 800bf80:	4603      	mov	r3, r0
 800bf82:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if (err != ERR_OK) {
 800bf86:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d002      	beq.n	800bf94 <netconn_recv_data_tcp+0xe8>
          return err;
 800bf8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800bf92:	e00b      	b.n	800bfac <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800bf94:	f06f 030d 	mvn.w	r3, #13
 800bf98:	e008      	b.n	800bfac <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800bf9a:	2101      	movs	r1, #1
 800bf9c:	68f8      	ldr	r0, [r7, #12]
 800bf9e:	f000 f961 	bl	800c264 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800bfa2:	f06f 030e 	mvn.w	r3, #14
 800bfa6:	e001      	b.n	800bfac <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800bfa8:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3740      	adds	r7, #64	@ 0x40
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	bd80      	pop	{r7, pc}

0800bfb4 <netconn_recv_tcp_pbuf_flags>:
 *                memory error or another error, @see netconn_recv_data)
 *         ERR_ARG if conn is not a TCP netconn
 */
err_t
netconn_recv_tcp_pbuf_flags(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800bfb4:	b580      	push	{r7, lr}
 800bfb6:	b084      	sub	sp, #16
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	60f8      	str	r0, [r7, #12]
 800bfbc:	60b9      	str	r1, [r7, #8]
 800bfbe:	4613      	mov	r3, r2
 800bfc0:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d005      	beq.n	800bfd4 <netconn_recv_tcp_pbuf_flags+0x20>
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	781b      	ldrb	r3, [r3, #0]
 800bfcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bfd0:	2b10      	cmp	r3, #16
 800bfd2:	d009      	beq.n	800bfe8 <netconn_recv_tcp_pbuf_flags+0x34>
 800bfd4:	4b0a      	ldr	r3, [pc, #40]	@ (800c000 <netconn_recv_tcp_pbuf_flags+0x4c>)
 800bfd6:	f240 3225 	movw	r2, #805	@ 0x325
 800bfda:	490a      	ldr	r1, [pc, #40]	@ (800c004 <netconn_recv_tcp_pbuf_flags+0x50>)
 800bfdc:	480a      	ldr	r0, [pc, #40]	@ (800c008 <netconn_recv_tcp_pbuf_flags+0x54>)
 800bfde:	f011 fed5 	bl	801dd8c <iprintf>
 800bfe2:	f06f 030f 	mvn.w	r3, #15
 800bfe6:	e006      	b.n	800bff6 <netconn_recv_tcp_pbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data_tcp(conn, new_buf, apiflags);
 800bfe8:	79fb      	ldrb	r3, [r7, #7]
 800bfea:	461a      	mov	r2, r3
 800bfec:	68b9      	ldr	r1, [r7, #8]
 800bfee:	68f8      	ldr	r0, [r7, #12]
 800bff0:	f7ff ff5c 	bl	800beac <netconn_recv_data_tcp>
 800bff4:	4603      	mov	r3, r0
}
 800bff6:	4618      	mov	r0, r3
 800bff8:	3710      	adds	r7, #16
 800bffa:	46bd      	mov	sp, r7
 800bffc:	bd80      	pop	{r7, pc}
 800bffe:	bf00      	nop
 800c000:	08021720 	.word	0x08021720
 800c004:	08021980 	.word	0x08021980
 800c008:	08021778 	.word	0x08021778

0800c00c <netconn_recv_udp_raw_netbuf_flags>:
 *                memory error or another error)
 *         ERR_ARG if conn is not a UDP/RAW netconn
 */
err_t
netconn_recv_udp_raw_netbuf_flags(struct netconn *conn, struct netbuf **new_buf, u8_t apiflags)
{
 800c00c:	b580      	push	{r7, lr}
 800c00e:	b084      	sub	sp, #16
 800c010:	af00      	add	r7, sp, #0
 800c012:	60f8      	str	r0, [r7, #12]
 800c014:	60b9      	str	r1, [r7, #8]
 800c016:	4613      	mov	r3, r2
 800c018:	71fb      	strb	r3, [r7, #7]
  LWIP_ERROR("netconn_recv_udp_raw_netbuf: invalid conn", (conn != NULL) &&
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d005      	beq.n	800c02c <netconn_recv_udp_raw_netbuf_flags+0x20>
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c028:	2b10      	cmp	r3, #16
 800c02a:	d109      	bne.n	800c040 <netconn_recv_udp_raw_netbuf_flags+0x34>
 800c02c:	4b0a      	ldr	r3, [pc, #40]	@ (800c058 <netconn_recv_udp_raw_netbuf_flags+0x4c>)
 800c02e:	f44f 7253 	mov.w	r2, #844	@ 0x34c
 800c032:	490a      	ldr	r1, [pc, #40]	@ (800c05c <netconn_recv_udp_raw_netbuf_flags+0x50>)
 800c034:	480a      	ldr	r0, [pc, #40]	@ (800c060 <netconn_recv_udp_raw_netbuf_flags+0x54>)
 800c036:	f011 fea9 	bl	801dd8c <iprintf>
 800c03a:	f06f 030f 	mvn.w	r3, #15
 800c03e:	e006      	b.n	800c04e <netconn_recv_udp_raw_netbuf_flags+0x42>
             NETCONNTYPE_GROUP(netconn_type(conn)) != NETCONN_TCP, return ERR_ARG;);

  return netconn_recv_data(conn, (void **)new_buf, apiflags);
 800c040:	79fb      	ldrb	r3, [r7, #7]
 800c042:	461a      	mov	r2, r3
 800c044:	68b9      	ldr	r1, [r7, #8]
 800c046:	68f8      	ldr	r0, [r7, #12]
 800c048:	f7ff fe0a 	bl	800bc60 <netconn_recv_data>
 800c04c:	4603      	mov	r3, r0
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3710      	adds	r7, #16
 800c052:	46bd      	mov	sp, r7
 800c054:	bd80      	pop	{r7, pc}
 800c056:	bf00      	nop
 800c058:	08021720 	.word	0x08021720
 800c05c:	080219a4 	.word	0x080219a4
 800c060:	08021778 	.word	0x08021778

0800c064 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b08c      	sub	sp, #48	@ 0x30
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
 800c06c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d109      	bne.n	800c088 <netconn_send+0x24>
 800c074:	4b0e      	ldr	r3, [pc, #56]	@ (800c0b0 <netconn_send+0x4c>)
 800c076:	f240 32b2 	movw	r2, #946	@ 0x3b2
 800c07a:	490e      	ldr	r1, [pc, #56]	@ (800c0b4 <netconn_send+0x50>)
 800c07c:	480e      	ldr	r0, [pc, #56]	@ (800c0b8 <netconn_send+0x54>)
 800c07e:	f011 fe85 	bl	801dd8c <iprintf>
 800c082:	f06f 030f 	mvn.w	r3, #15
 800c086:	e00e      	b.n	800c0a6 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800c08c:	683b      	ldr	r3, [r7, #0]
 800c08e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800c090:	f107 030c 	add.w	r3, r7, #12
 800c094:	4619      	mov	r1, r3
 800c096:	4809      	ldr	r0, [pc, #36]	@ (800c0bc <netconn_send+0x58>)
 800c098:	f7ff fc56 	bl	800b948 <netconn_apimsg>
 800c09c:	4603      	mov	r3, r0
 800c09e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c0a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c0a6:	4618      	mov	r0, r3
 800c0a8:	3730      	adds	r7, #48	@ 0x30
 800c0aa:	46bd      	mov	sp, r7
 800c0ac:	bd80      	pop	{r7, pc}
 800c0ae:	bf00      	nop
 800c0b0:	08021720 	.word	0x08021720
 800c0b4:	080219dc 	.word	0x080219dc
 800c0b8:	08021778 	.word	0x08021778
 800c0bc:	0800d431 	.word	0x0800d431

0800c0c0 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b088      	sub	sp, #32
 800c0c4:	af02      	add	r7, sp, #8
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	607a      	str	r2, [r7, #4]
 800c0cc:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 800c0ce:	68bb      	ldr	r3, [r7, #8]
 800c0d0:	613b      	str	r3, [r7, #16]
  vector.len = size;
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 800c0d6:	78fa      	ldrb	r2, [r7, #3]
 800c0d8:	f107 0110 	add.w	r1, r7, #16
 800c0dc:	6a3b      	ldr	r3, [r7, #32]
 800c0de:	9300      	str	r3, [sp, #0]
 800c0e0:	4613      	mov	r3, r2
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	68f8      	ldr	r0, [r7, #12]
 800c0e6:	f000 f805 	bl	800c0f4 <netconn_write_vectors_partly>
 800c0ea:	4603      	mov	r3, r0
}
 800c0ec:	4618      	mov	r0, r3
 800c0ee:	3718      	adds	r7, #24
 800c0f0:	46bd      	mov	sp, r7
 800c0f2:	bd80      	pop	{r7, pc}

0800c0f4 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b092      	sub	sp, #72	@ 0x48
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	60f8      	str	r0, [r7, #12]
 800c0fc:	60b9      	str	r1, [r7, #8]
 800c0fe:	4611      	mov	r1, r2
 800c100:	461a      	mov	r2, r3
 800c102:	460b      	mov	r3, r1
 800c104:	80fb      	strh	r3, [r7, #6]
 800c106:	4613      	mov	r3, r2
 800c108:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d109      	bne.n	800c124 <netconn_write_vectors_partly+0x30>
 800c110:	4b4e      	ldr	r3, [pc, #312]	@ (800c24c <netconn_write_vectors_partly+0x158>)
 800c112:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 800c116:	494e      	ldr	r1, [pc, #312]	@ (800c250 <netconn_write_vectors_partly+0x15c>)
 800c118:	484e      	ldr	r0, [pc, #312]	@ (800c254 <netconn_write_vectors_partly+0x160>)
 800c11a:	f011 fe37 	bl	801dd8c <iprintf>
 800c11e:	f06f 030f 	mvn.w	r3, #15
 800c122:	e08e      	b.n	800c242 <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	781b      	ldrb	r3, [r3, #0]
 800c128:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c12c:	2b10      	cmp	r3, #16
 800c12e:	d009      	beq.n	800c144 <netconn_write_vectors_partly+0x50>
 800c130:	4b46      	ldr	r3, [pc, #280]	@ (800c24c <netconn_write_vectors_partly+0x158>)
 800c132:	f240 32ef 	movw	r2, #1007	@ 0x3ef
 800c136:	4948      	ldr	r1, [pc, #288]	@ (800c258 <netconn_write_vectors_partly+0x164>)
 800c138:	4846      	ldr	r0, [pc, #280]	@ (800c254 <netconn_write_vectors_partly+0x160>)
 800c13a:	f011 fe27 	bl	801dd8c <iprintf>
 800c13e:	f06f 0305 	mvn.w	r3, #5
 800c142:	e07e      	b.n	800c242 <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	7f1b      	ldrb	r3, [r3, #28]
 800c148:	f003 0302 	and.w	r3, r3, #2
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d104      	bne.n	800c15a <netconn_write_vectors_partly+0x66>
 800c150:	797b      	ldrb	r3, [r7, #5]
 800c152:	f003 0304 	and.w	r3, r3, #4
 800c156:	2b00      	cmp	r3, #0
 800c158:	d001      	beq.n	800c15e <netconn_write_vectors_partly+0x6a>
 800c15a:	2301      	movs	r3, #1
 800c15c:	e000      	b.n	800c160 <netconn_write_vectors_partly+0x6c>
 800c15e:	2300      	movs	r3, #0
 800c160:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800c164:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d005      	beq.n	800c178 <netconn_write_vectors_partly+0x84>
 800c16c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d102      	bne.n	800c178 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800c172:	f06f 0305 	mvn.w	r3, #5
 800c176:	e064      	b.n	800c242 <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 800c178:	2300      	movs	r3, #0
 800c17a:	647b      	str	r3, [r7, #68]	@ 0x44
  for (i = 0; i < vectorcnt; i++) {
 800c17c:	2300      	movs	r3, #0
 800c17e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c180:	e015      	b.n	800c1ae <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 800c182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c184:	00db      	lsls	r3, r3, #3
 800c186:	68ba      	ldr	r2, [r7, #8]
 800c188:	4413      	add	r3, r2
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c18e:	4413      	add	r3, r2
 800c190:	647b      	str	r3, [r7, #68]	@ 0x44
    if (size < vectors[i].len) {
 800c192:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c194:	00db      	lsls	r3, r3, #3
 800c196:	68ba      	ldr	r2, [r7, #8]
 800c198:	4413      	add	r3, r2
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c19e:	429a      	cmp	r2, r3
 800c1a0:	d202      	bcs.n	800c1a8 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 800c1a2:	f06f 0305 	mvn.w	r3, #5
 800c1a6:	e04c      	b.n	800c242 <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 800c1a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	643b      	str	r3, [r7, #64]	@ 0x40
 800c1ae:	88fb      	ldrh	r3, [r7, #6]
 800c1b0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	dbe5      	blt.n	800c182 <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 800c1b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d101      	bne.n	800c1c0 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 800c1bc:	2300      	movs	r3, #0
 800c1be:	e040      	b.n	800c242 <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 800c1c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	da0a      	bge.n	800c1dc <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 800c1c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d102      	bne.n	800c1d2 <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 800c1cc:	f06f 0305 	mvn.w	r3, #5
 800c1d0:	e037      	b.n	800c242 <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 800c1d2:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800c1d6:	63bb      	str	r3, [r7, #56]	@ 0x38
    size = (size_t)limited;
 800c1d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c1da:	647b      	str	r3, [r7, #68]	@ 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800c1dc:	68fb      	ldr	r3, [r7, #12]
 800c1de:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 800c1e4:	88fb      	ldrh	r3, [r7, #6]
 800c1e6:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	627b      	str	r3, [r7, #36]	@ 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800c1ec:	797b      	ldrb	r3, [r7, #5]
 800c1ee:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800c1f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c1f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800c1fa:	f107 0314 	add.w	r3, r7, #20
 800c1fe:	4619      	mov	r1, r3
 800c200:	4816      	ldr	r0, [pc, #88]	@ (800c25c <netconn_write_vectors_partly+0x168>)
 800c202:	f7ff fba1 	bl	800b948 <netconn_apimsg>
 800c206:	4603      	mov	r3, r0
 800c208:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (err == ERR_OK) {
 800c20c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800c210:	2b00      	cmp	r3, #0
 800c212:	d114      	bne.n	800c23e <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 800c214:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c216:	2b00      	cmp	r3, #0
 800c218:	d002      	beq.n	800c220 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 800c21a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c21c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c21e:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 800c220:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c224:	2b00      	cmp	r3, #0
 800c226:	d10a      	bne.n	800c23e <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 800c228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c22a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c22c:	429a      	cmp	r2, r3
 800c22e:	d006      	beq.n	800c23e <netconn_write_vectors_partly+0x14a>
 800c230:	4b06      	ldr	r3, [pc, #24]	@ (800c24c <netconn_write_vectors_partly+0x158>)
 800c232:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 800c236:	490a      	ldr	r1, [pc, #40]	@ (800c260 <netconn_write_vectors_partly+0x16c>)
 800c238:	4806      	ldr	r0, [pc, #24]	@ (800c254 <netconn_write_vectors_partly+0x160>)
 800c23a:	f011 fda7 	bl	801dd8c <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800c23e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800c242:	4618      	mov	r0, r3
 800c244:	3748      	adds	r7, #72	@ 0x48
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}
 800c24a:	bf00      	nop
 800c24c:	08021720 	.word	0x08021720
 800c250:	080219f8 	.word	0x080219f8
 800c254:	08021778 	.word	0x08021778
 800c258:	08021a14 	.word	0x08021a14
 800c25c:	0800d8cd 	.word	0x0800d8cd
 800c260:	08021a38 	.word	0x08021a38

0800c264 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b08c      	sub	sp, #48	@ 0x30
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	460b      	mov	r3, r1
 800c26e:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2b00      	cmp	r3, #0
 800c274:	d109      	bne.n	800c28a <netconn_close_shutdown+0x26>
 800c276:	4b0f      	ldr	r3, [pc, #60]	@ (800c2b4 <netconn_close_shutdown+0x50>)
 800c278:	f240 4247 	movw	r2, #1095	@ 0x447
 800c27c:	490e      	ldr	r1, [pc, #56]	@ (800c2b8 <netconn_close_shutdown+0x54>)
 800c27e:	480f      	ldr	r0, [pc, #60]	@ (800c2bc <netconn_close_shutdown+0x58>)
 800c280:	f011 fd84 	bl	801dd8c <iprintf>
 800c284:	f06f 030f 	mvn.w	r3, #15
 800c288:	e010      	b.n	800c2ac <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800c28e:	78fb      	ldrb	r3, [r7, #3]
 800c290:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800c292:	2329      	movs	r3, #41	@ 0x29
 800c294:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800c296:	f107 030c 	add.w	r3, r7, #12
 800c29a:	4619      	mov	r1, r3
 800c29c:	4808      	ldr	r0, [pc, #32]	@ (800c2c0 <netconn_close_shutdown+0x5c>)
 800c29e:	f7ff fb53 	bl	800b948 <netconn_apimsg>
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800c2a8:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3730      	adds	r7, #48	@ 0x30
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}
 800c2b4:	08021720 	.word	0x08021720
 800c2b8:	08021a5c 	.word	0x08021a5c
 800c2bc:	08021778 	.word	0x08021778
 800c2c0:	0800daf1 	.word	0x0800daf1

0800c2c4 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800c2c4:	b580      	push	{r7, lr}
 800c2c6:	b084      	sub	sp, #16
 800c2c8:	af00      	add	r7, sp, #0
 800c2ca:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d101      	bne.n	800c2d6 <netconn_err+0x12>
    return ERR_OK;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	e00d      	b.n	800c2f2 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800c2d6:	f010 fd53 	bl	801cd80 <sys_arch_protect>
 800c2da:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	7a1b      	ldrb	r3, [r3, #8]
 800c2e0:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800c2e8:	68f8      	ldr	r0, [r7, #12]
 800c2ea:	f010 fd57 	bl	801cd9c <sys_arch_unprotect>
  return err;
 800c2ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3710      	adds	r7, #16
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
	...

0800c2fc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	4603      	mov	r3, r0
 800c304:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800c306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c30a:	f113 0f0d 	cmn.w	r3, #13
 800c30e:	d009      	beq.n	800c324 <lwip_netconn_err_to_msg+0x28>
 800c310:	f113 0f0d 	cmn.w	r3, #13
 800c314:	dc0c      	bgt.n	800c330 <lwip_netconn_err_to_msg+0x34>
 800c316:	f113 0f0f 	cmn.w	r3, #15
 800c31a:	d007      	beq.n	800c32c <lwip_netconn_err_to_msg+0x30>
 800c31c:	f113 0f0e 	cmn.w	r3, #14
 800c320:	d002      	beq.n	800c328 <lwip_netconn_err_to_msg+0x2c>
 800c322:	e005      	b.n	800c330 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800c324:	4b0a      	ldr	r3, [pc, #40]	@ (800c350 <lwip_netconn_err_to_msg+0x54>)
 800c326:	e00e      	b.n	800c346 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800c328:	4b0a      	ldr	r3, [pc, #40]	@ (800c354 <lwip_netconn_err_to_msg+0x58>)
 800c32a:	e00c      	b.n	800c346 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800c32c:	4b0a      	ldr	r3, [pc, #40]	@ (800c358 <lwip_netconn_err_to_msg+0x5c>)
 800c32e:	e00a      	b.n	800c346 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800c330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d005      	beq.n	800c344 <lwip_netconn_err_to_msg+0x48>
 800c338:	4b08      	ldr	r3, [pc, #32]	@ (800c35c <lwip_netconn_err_to_msg+0x60>)
 800c33a:	227d      	movs	r2, #125	@ 0x7d
 800c33c:	4908      	ldr	r1, [pc, #32]	@ (800c360 <lwip_netconn_err_to_msg+0x64>)
 800c33e:	4809      	ldr	r0, [pc, #36]	@ (800c364 <lwip_netconn_err_to_msg+0x68>)
 800c340:	f011 fd24 	bl	801dd8c <iprintf>
      return NULL;
 800c344:	2300      	movs	r3, #0
  }
}
 800c346:	4618      	mov	r0, r3
 800c348:	3708      	adds	r7, #8
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}
 800c34e:	bf00      	nop
 800c350:	080255c0 	.word	0x080255c0
 800c354:	080255c1 	.word	0x080255c1
 800c358:	080255c2 	.word	0x080255c2
 800c35c:	08021ac0 	.word	0x08021ac0
 800c360:	08021af4 	.word	0x08021af4
 800c364:	08021b04 	.word	0x08021b04

0800c368 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800c368:	b580      	push	{r7, lr}
 800c36a:	b082      	sub	sp, #8
 800c36c:	af00      	add	r7, sp, #0
 800c36e:	6078      	str	r0, [r7, #4]
 800c370:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800c372:	683b      	ldr	r3, [r7, #0]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d105      	bne.n	800c384 <lwip_netconn_is_err_msg+0x1c>
 800c378:	4b12      	ldr	r3, [pc, #72]	@ (800c3c4 <lwip_netconn_is_err_msg+0x5c>)
 800c37a:	2285      	movs	r2, #133	@ 0x85
 800c37c:	4912      	ldr	r1, [pc, #72]	@ (800c3c8 <lwip_netconn_is_err_msg+0x60>)
 800c37e:	4813      	ldr	r0, [pc, #76]	@ (800c3cc <lwip_netconn_is_err_msg+0x64>)
 800c380:	f011 fd04 	bl	801dd8c <iprintf>

  if (msg == &netconn_aborted) {
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	4a12      	ldr	r2, [pc, #72]	@ (800c3d0 <lwip_netconn_is_err_msg+0x68>)
 800c388:	4293      	cmp	r3, r2
 800c38a:	d104      	bne.n	800c396 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	22f3      	movs	r2, #243	@ 0xf3
 800c390:	701a      	strb	r2, [r3, #0]
    return 1;
 800c392:	2301      	movs	r3, #1
 800c394:	e012      	b.n	800c3bc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	4a0e      	ldr	r2, [pc, #56]	@ (800c3d4 <lwip_netconn_is_err_msg+0x6c>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d104      	bne.n	800c3a8 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	22f2      	movs	r2, #242	@ 0xf2
 800c3a2:	701a      	strb	r2, [r3, #0]
    return 1;
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e009      	b.n	800c3bc <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4a0b      	ldr	r2, [pc, #44]	@ (800c3d8 <lwip_netconn_is_err_msg+0x70>)
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d104      	bne.n	800c3ba <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800c3b0:	683b      	ldr	r3, [r7, #0]
 800c3b2:	22f1      	movs	r2, #241	@ 0xf1
 800c3b4:	701a      	strb	r2, [r3, #0]
    return 1;
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e000      	b.n	800c3bc <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	08021ac0 	.word	0x08021ac0
 800c3c8:	08021b2c 	.word	0x08021b2c
 800c3cc:	08021b04 	.word	0x08021b04
 800c3d0:	080255c0 	.word	0x080255c0
 800c3d4:	080255c1 	.word	0x080255c1
 800c3d8:	080255c2 	.word	0x080255c2

0800c3dc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b088      	sub	sp, #32
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	60f8      	str	r0, [r7, #12]
 800c3e4:	60b9      	str	r1, [r7, #8]
 800c3e6:	607a      	str	r2, [r7, #4]
 800c3e8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d105      	bne.n	800c3fc <recv_udp+0x20>
 800c3f0:	4b34      	ldr	r3, [pc, #208]	@ (800c4c4 <recv_udp+0xe8>)
 800c3f2:	22e5      	movs	r2, #229	@ 0xe5
 800c3f4:	4934      	ldr	r1, [pc, #208]	@ (800c4c8 <recv_udp+0xec>)
 800c3f6:	4835      	ldr	r0, [pc, #212]	@ (800c4cc <recv_udp+0xf0>)
 800c3f8:	f011 fcc8 	bl	801dd8c <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800c3fc:	68fb      	ldr	r3, [r7, #12]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d105      	bne.n	800c40e <recv_udp+0x32>
 800c402:	4b30      	ldr	r3, [pc, #192]	@ (800c4c4 <recv_udp+0xe8>)
 800c404:	22e6      	movs	r2, #230	@ 0xe6
 800c406:	4932      	ldr	r1, [pc, #200]	@ (800c4d0 <recv_udp+0xf4>)
 800c408:	4830      	ldr	r0, [pc, #192]	@ (800c4cc <recv_udp+0xf0>)
 800c40a:	f011 fcbf 	bl	801dd8c <iprintf>
  conn = (struct netconn *)arg;
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800c412:	69fb      	ldr	r3, [r7, #28]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d103      	bne.n	800c420 <recv_udp+0x44>
    pbuf_free(p);
 800c418:	6878      	ldr	r0, [r7, #4]
 800c41a:	f004 fcf5 	bl	8010e08 <pbuf_free>
    return;
 800c41e:	e04d      	b.n	800c4bc <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	429a      	cmp	r2, r3
 800c428:	d005      	beq.n	800c436 <recv_udp+0x5a>
 800c42a:	4b26      	ldr	r3, [pc, #152]	@ (800c4c4 <recv_udp+0xe8>)
 800c42c:	22ee      	movs	r2, #238	@ 0xee
 800c42e:	4929      	ldr	r1, [pc, #164]	@ (800c4d4 <recv_udp+0xf8>)
 800c430:	4826      	ldr	r0, [pc, #152]	@ (800c4cc <recv_udp+0xf0>)
 800c432:	f011 fcab 	bl	801dd8c <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c436:	69fb      	ldr	r3, [r7, #28]
 800c438:	3310      	adds	r3, #16
 800c43a:	4618      	mov	r0, r3
 800c43c:	f010 fb96 	bl	801cb6c <sys_mbox_valid>
 800c440:	4603      	mov	r3, r0
 800c442:	2b00      	cmp	r3, #0
 800c444:	d103      	bne.n	800c44e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f004 fcde 	bl	8010e08 <pbuf_free>
    return;
 800c44c:	e036      	b.n	800c4bc <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800c44e:	2006      	movs	r0, #6
 800c450:	f003 fd82 	bl	800ff58 <memp_malloc>
 800c454:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800c456:	69bb      	ldr	r3, [r7, #24]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d103      	bne.n	800c464 <recv_udp+0x88>
    pbuf_free(p);
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f004 fcd3 	bl	8010e08 <pbuf_free>
    return;
 800c462:	e02b      	b.n	800c4bc <recv_udp+0xe0>
  } else {
    buf->p = p;
 800c464:	69bb      	ldr	r3, [r7, #24]
 800c466:	687a      	ldr	r2, [r7, #4]
 800c468:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800c46a:	69bb      	ldr	r3, [r7, #24]
 800c46c:	687a      	ldr	r2, [r7, #4]
 800c46e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d002      	beq.n	800c47c <recv_udp+0xa0>
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	e000      	b.n	800c47e <recv_udp+0xa2>
 800c47c:	2300      	movs	r3, #0
 800c47e:	69ba      	ldr	r2, [r7, #24]
 800c480:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800c482:	69bb      	ldr	r3, [r7, #24]
 800c484:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800c486:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	891b      	ldrh	r3, [r3, #8]
 800c48c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	3310      	adds	r3, #16
 800c492:	69b9      	ldr	r1, [r7, #24]
 800c494:	4618      	mov	r0, r3
 800c496:	f010 fb07 	bl	801caa8 <sys_mbox_trypost>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d003      	beq.n	800c4a8 <recv_udp+0xcc>
    netbuf_delete(buf);
 800c4a0:	69b8      	ldr	r0, [r7, #24]
 800c4a2:	f001 fbcf 	bl	800dc44 <netbuf_delete>
    return;
 800c4a6:	e009      	b.n	800c4bc <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c4a8:	69fb      	ldr	r3, [r7, #28]
 800c4aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d005      	beq.n	800c4bc <recv_udp+0xe0>
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c4b4:	8afa      	ldrh	r2, [r7, #22]
 800c4b6:	2100      	movs	r1, #0
 800c4b8:	69f8      	ldr	r0, [r7, #28]
 800c4ba:	4798      	blx	r3
  }
}
 800c4bc:	3720      	adds	r7, #32
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	08021ac0 	.word	0x08021ac0
 800c4c8:	08021b38 	.word	0x08021b38
 800c4cc:	08021b04 	.word	0x08021b04
 800c4d0:	08021b5c 	.word	0x08021b5c
 800c4d4:	08021b7c 	.word	0x08021b7c

0800c4d8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b088      	sub	sp, #32
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	60f8      	str	r0, [r7, #12]
 800c4e0:	60b9      	str	r1, [r7, #8]
 800c4e2:	607a      	str	r2, [r7, #4]
 800c4e4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d106      	bne.n	800c4fa <recv_tcp+0x22>
 800c4ec:	4b36      	ldr	r3, [pc, #216]	@ (800c5c8 <recv_tcp+0xf0>)
 800c4ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800c4f2:	4936      	ldr	r1, [pc, #216]	@ (800c5cc <recv_tcp+0xf4>)
 800c4f4:	4836      	ldr	r0, [pc, #216]	@ (800c5d0 <recv_tcp+0xf8>)
 800c4f6:	f011 fc49 	bl	801dd8c <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d106      	bne.n	800c50e <recv_tcp+0x36>
 800c500:	4b31      	ldr	r3, [pc, #196]	@ (800c5c8 <recv_tcp+0xf0>)
 800c502:	f240 122d 	movw	r2, #301	@ 0x12d
 800c506:	4933      	ldr	r1, [pc, #204]	@ (800c5d4 <recv_tcp+0xfc>)
 800c508:	4831      	ldr	r0, [pc, #196]	@ (800c5d0 <recv_tcp+0xf8>)
 800c50a:	f011 fc3f 	bl	801dd8c <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800c50e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d006      	beq.n	800c524 <recv_tcp+0x4c>
 800c516:	4b2c      	ldr	r3, [pc, #176]	@ (800c5c8 <recv_tcp+0xf0>)
 800c518:	f44f 7297 	mov.w	r2, #302	@ 0x12e
 800c51c:	492e      	ldr	r1, [pc, #184]	@ (800c5d8 <recv_tcp+0x100>)
 800c51e:	482c      	ldr	r0, [pc, #176]	@ (800c5d0 <recv_tcp+0xf8>)
 800c520:	f011 fc34 	bl	801dd8c <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800c528:	697b      	ldr	r3, [r7, #20]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d102      	bne.n	800c534 <recv_tcp+0x5c>
    return ERR_VAL;
 800c52e:	f06f 0305 	mvn.w	r3, #5
 800c532:	e045      	b.n	800c5c0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800c534:	697b      	ldr	r3, [r7, #20]
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	68ba      	ldr	r2, [r7, #8]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d006      	beq.n	800c54c <recv_tcp+0x74>
 800c53e:	4b22      	ldr	r3, [pc, #136]	@ (800c5c8 <recv_tcp+0xf0>)
 800c540:	f240 1235 	movw	r2, #309	@ 0x135
 800c544:	4925      	ldr	r1, [pc, #148]	@ (800c5dc <recv_tcp+0x104>)
 800c546:	4822      	ldr	r0, [pc, #136]	@ (800c5d0 <recv_tcp+0xf8>)
 800c548:	f011 fc20 	bl	801dd8c <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c54c:	697b      	ldr	r3, [r7, #20]
 800c54e:	3310      	adds	r3, #16
 800c550:	4618      	mov	r0, r3
 800c552:	f010 fb0b 	bl	801cb6c <sys_mbox_valid>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d10d      	bne.n	800c578 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	2b00      	cmp	r3, #0
 800c560:	d008      	beq.n	800c574 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	891b      	ldrh	r3, [r3, #8]
 800c566:	4619      	mov	r1, r3
 800c568:	68b8      	ldr	r0, [r7, #8]
 800c56a:	f005 fc0d 	bl	8011d88 <tcp_recved>
      pbuf_free(p);
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f004 fc4a 	bl	8010e08 <pbuf_free>
    }
    return ERR_OK;
 800c574:	2300      	movs	r3, #0
 800c576:	e023      	b.n	800c5c0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d005      	beq.n	800c58a <recv_tcp+0xb2>
    msg = p;
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	891b      	ldrh	r3, [r3, #8]
 800c586:	83fb      	strh	r3, [r7, #30]
 800c588:	e003      	b.n	800c592 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800c58a:	4b15      	ldr	r3, [pc, #84]	@ (800c5e0 <recv_tcp+0x108>)
 800c58c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800c58e:	2300      	movs	r3, #0
 800c590:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800c592:	697b      	ldr	r3, [r7, #20]
 800c594:	3310      	adds	r3, #16
 800c596:	69b9      	ldr	r1, [r7, #24]
 800c598:	4618      	mov	r0, r3
 800c59a:	f010 fa85 	bl	801caa8 <sys_mbox_trypost>
 800c59e:	4603      	mov	r3, r0
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d002      	beq.n	800c5aa <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800c5a4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5a8:	e00a      	b.n	800c5c0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800c5aa:	697b      	ldr	r3, [r7, #20]
 800c5ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d005      	beq.n	800c5be <recv_tcp+0xe6>
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5b6:	8bfa      	ldrh	r2, [r7, #30]
 800c5b8:	2100      	movs	r1, #0
 800c5ba:	6978      	ldr	r0, [r7, #20]
 800c5bc:	4798      	blx	r3
  }

  return ERR_OK;
 800c5be:	2300      	movs	r3, #0
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3720      	adds	r7, #32
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	bd80      	pop	{r7, pc}
 800c5c8:	08021ac0 	.word	0x08021ac0
 800c5cc:	08021b9c 	.word	0x08021b9c
 800c5d0:	08021b04 	.word	0x08021b04
 800c5d4:	08021bc0 	.word	0x08021bc0
 800c5d8:	08021be0 	.word	0x08021be0
 800c5dc:	08021bf8 	.word	0x08021bf8
 800c5e0:	080255c2 	.word	0x080255c2

0800c5e4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800c5e4:	b580      	push	{r7, lr}
 800c5e6:	b084      	sub	sp, #16
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d106      	bne.n	800c606 <poll_tcp+0x22>
 800c5f8:	4b29      	ldr	r3, [pc, #164]	@ (800c6a0 <poll_tcp+0xbc>)
 800c5fa:	f44f 72b5 	mov.w	r2, #362	@ 0x16a
 800c5fe:	4929      	ldr	r1, [pc, #164]	@ (800c6a4 <poll_tcp+0xc0>)
 800c600:	4829      	ldr	r0, [pc, #164]	@ (800c6a8 <poll_tcp+0xc4>)
 800c602:	f011 fbc3 	bl	801dd8c <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	785b      	ldrb	r3, [r3, #1]
 800c60a:	2b01      	cmp	r3, #1
 800c60c:	d104      	bne.n	800c618 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c60e:	2101      	movs	r1, #1
 800c610:	68f8      	ldr	r0, [r7, #12]
 800c612:	f000 ff8f 	bl	800d534 <lwip_netconn_do_writemore>
 800c616:	e016      	b.n	800c646 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	785b      	ldrb	r3, [r3, #1]
 800c61c:	2b04      	cmp	r3, #4
 800c61e:	d112      	bne.n	800c646 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	6a1b      	ldr	r3, [r3, #32]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d00a      	beq.n	800c63e <poll_tcp+0x5a>
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	6a1b      	ldr	r3, [r3, #32]
 800c62c:	7a5b      	ldrb	r3, [r3, #9]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d005      	beq.n	800c63e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	6a1b      	ldr	r3, [r3, #32]
 800c636:	7a5a      	ldrb	r2, [r3, #9]
 800c638:	3a01      	subs	r2, #1
 800c63a:	b2d2      	uxtb	r2, r2
 800c63c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c63e:	2101      	movs	r1, #1
 800c640:	68f8      	ldr	r0, [r7, #12]
 800c642:	f000 fb3b 	bl	800ccbc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	7f1b      	ldrb	r3, [r3, #28]
 800c64a:	f003 0310 	and.w	r3, r3, #16
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d021      	beq.n	800c696 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d01d      	beq.n	800c696 <poll_tcp+0xb2>
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c662:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800c666:	d316      	bcc.n	800c696 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c670:	2b04      	cmp	r3, #4
 800c672:	d810      	bhi.n	800c696 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	7f1b      	ldrb	r3, [r3, #28]
 800c678:	f023 0310 	bic.w	r3, r3, #16
 800c67c:	b2da      	uxtb	r2, r3
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c686:	2b00      	cmp	r3, #0
 800c688:	d005      	beq.n	800c696 <poll_tcp+0xb2>
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c68e:	2200      	movs	r2, #0
 800c690:	2102      	movs	r1, #2
 800c692:	68f8      	ldr	r0, [r7, #12]
 800c694:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c696:	2300      	movs	r3, #0
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3710      	adds	r7, #16
 800c69c:	46bd      	mov	sp, r7
 800c69e:	bd80      	pop	{r7, pc}
 800c6a0:	08021ac0 	.word	0x08021ac0
 800c6a4:	08021c18 	.word	0x08021c18
 800c6a8:	08021b04 	.word	0x08021b04

0800c6ac <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800c6ac:	b580      	push	{r7, lr}
 800c6ae:	b086      	sub	sp, #24
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	60f8      	str	r0, [r7, #12]
 800c6b4:	60b9      	str	r1, [r7, #8]
 800c6b6:	4613      	mov	r3, r2
 800c6b8:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c6be:	697b      	ldr	r3, [r7, #20]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d106      	bne.n	800c6d2 <sent_tcp+0x26>
 800c6c4:	4b20      	ldr	r3, [pc, #128]	@ (800c748 <sent_tcp+0x9c>)
 800c6c6:	f240 1293 	movw	r2, #403	@ 0x193
 800c6ca:	4920      	ldr	r1, [pc, #128]	@ (800c74c <sent_tcp+0xa0>)
 800c6cc:	4820      	ldr	r0, [pc, #128]	@ (800c750 <sent_tcp+0xa4>)
 800c6ce:	f011 fb5d 	bl	801dd8c <iprintf>

  if (conn) {
 800c6d2:	697b      	ldr	r3, [r7, #20]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d032      	beq.n	800c73e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800c6d8:	697b      	ldr	r3, [r7, #20]
 800c6da:	785b      	ldrb	r3, [r3, #1]
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d104      	bne.n	800c6ea <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800c6e0:	2101      	movs	r1, #1
 800c6e2:	6978      	ldr	r0, [r7, #20]
 800c6e4:	f000 ff26 	bl	800d534 <lwip_netconn_do_writemore>
 800c6e8:	e007      	b.n	800c6fa <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800c6ea:	697b      	ldr	r3, [r7, #20]
 800c6ec:	785b      	ldrb	r3, [r3, #1]
 800c6ee:	2b04      	cmp	r3, #4
 800c6f0:	d103      	bne.n	800c6fa <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800c6f2:	2101      	movs	r1, #1
 800c6f4:	6978      	ldr	r0, [r7, #20]
 800c6f6:	f000 fae1 	bl	800ccbc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c6fa:	697b      	ldr	r3, [r7, #20]
 800c6fc:	685b      	ldr	r3, [r3, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d01d      	beq.n	800c73e <sent_tcp+0x92>
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	685b      	ldr	r3, [r3, #4]
 800c706:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800c70a:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800c70e:	d316      	bcc.n	800c73e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	685b      	ldr	r3, [r3, #4]
 800c714:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800c718:	2b04      	cmp	r3, #4
 800c71a:	d810      	bhi.n	800c73e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	7f1b      	ldrb	r3, [r3, #28]
 800c720:	f023 0310 	bic.w	r3, r3, #16
 800c724:	b2da      	uxtb	r2, r3
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800c72a:	697b      	ldr	r3, [r7, #20]
 800c72c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d005      	beq.n	800c73e <sent_tcp+0x92>
 800c732:	697b      	ldr	r3, [r7, #20]
 800c734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c736:	88fa      	ldrh	r2, [r7, #6]
 800c738:	2102      	movs	r1, #2
 800c73a:	6978      	ldr	r0, [r7, #20]
 800c73c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800c73e:	2300      	movs	r3, #0
}
 800c740:	4618      	mov	r0, r3
 800c742:	3718      	adds	r7, #24
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}
 800c748:	08021ac0 	.word	0x08021ac0
 800c74c:	08021c18 	.word	0x08021c18
 800c750:	08021b04 	.word	0x08021b04

0800c754 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b088      	sub	sp, #32
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	460b      	mov	r3, r1
 800c75e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d106      	bne.n	800c778 <err_tcp+0x24>
 800c76a:	4b5f      	ldr	r3, [pc, #380]	@ (800c8e8 <err_tcp+0x194>)
 800c76c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 800c770:	495e      	ldr	r1, [pc, #376]	@ (800c8ec <err_tcp+0x198>)
 800c772:	485f      	ldr	r0, [pc, #380]	@ (800c8f0 <err_tcp+0x19c>)
 800c774:	f011 fb0a 	bl	801dd8c <iprintf>

  SYS_ARCH_PROTECT(lev);
 800c778:	f010 fb02 	bl	801cd80 <sys_arch_protect>
 800c77c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800c77e:	69fb      	ldr	r3, [r7, #28]
 800c780:	2200      	movs	r2, #0
 800c782:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	78fa      	ldrb	r2, [r7, #3]
 800c788:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	7f1b      	ldrb	r3, [r3, #28]
 800c78e:	f043 0301 	orr.w	r3, r3, #1
 800c792:	b2da      	uxtb	r2, r3
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	785b      	ldrb	r3, [r3, #1]
 800c79c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800c79e:	69fb      	ldr	r3, [r7, #28]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800c7a4:	69b8      	ldr	r0, [r7, #24]
 800c7a6:	f010 faf9 	bl	801cd9c <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d005      	beq.n	800c7be <err_tcp+0x6a>
 800c7b2:	69fb      	ldr	r3, [r7, #28]
 800c7b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	2104      	movs	r1, #4
 800c7ba:	69f8      	ldr	r0, [r7, #28]
 800c7bc:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800c7be:	69fb      	ldr	r3, [r7, #28]
 800c7c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	d005      	beq.n	800c7d2 <err_tcp+0x7e>
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	2100      	movs	r1, #0
 800c7ce:	69f8      	ldr	r0, [r7, #28]
 800c7d0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d005      	beq.n	800c7e6 <err_tcp+0x92>
 800c7da:	69fb      	ldr	r3, [r7, #28]
 800c7dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c7de:	2200      	movs	r2, #0
 800c7e0:	2102      	movs	r1, #2
 800c7e2:	69f8      	ldr	r0, [r7, #28]
 800c7e4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800c7e6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7ff fd86 	bl	800c2fc <lwip_netconn_err_to_msg>
 800c7f0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	3310      	adds	r3, #16
 800c7f6:	4618      	mov	r0, r3
 800c7f8:	f010 f9b8 	bl	801cb6c <sys_mbox_valid>
 800c7fc:	4603      	mov	r3, r0
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d005      	beq.n	800c80e <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800c802:	69fb      	ldr	r3, [r7, #28]
 800c804:	3310      	adds	r3, #16
 800c806:	6939      	ldr	r1, [r7, #16]
 800c808:	4618      	mov	r0, r3
 800c80a:	f010 f94d 	bl	801caa8 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	3314      	adds	r3, #20
 800c812:	4618      	mov	r0, r3
 800c814:	f010 f9aa 	bl	801cb6c <sys_mbox_valid>
 800c818:	4603      	mov	r3, r0
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d005      	beq.n	800c82a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800c81e:	69fb      	ldr	r3, [r7, #28]
 800c820:	3314      	adds	r3, #20
 800c822:	6939      	ldr	r1, [r7, #16]
 800c824:	4618      	mov	r0, r3
 800c826:	f010 f93f 	bl	801caa8 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800c82a:	7dfb      	ldrb	r3, [r7, #23]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d005      	beq.n	800c83c <err_tcp+0xe8>
 800c830:	7dfb      	ldrb	r3, [r7, #23]
 800c832:	2b04      	cmp	r3, #4
 800c834:	d002      	beq.n	800c83c <err_tcp+0xe8>
 800c836:	7dfb      	ldrb	r3, [r7, #23]
 800c838:	2b03      	cmp	r3, #3
 800c83a:	d143      	bne.n	800c8c4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	7f1b      	ldrb	r3, [r3, #28]
 800c840:	f003 0304 	and.w	r3, r3, #4
 800c844:	2b00      	cmp	r3, #0
 800c846:	bf14      	ite	ne
 800c848:	2301      	movne	r3, #1
 800c84a:	2300      	moveq	r3, #0
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800c850:	69fb      	ldr	r3, [r7, #28]
 800c852:	7f1b      	ldrb	r3, [r3, #28]
 800c854:	f023 0304 	bic.w	r3, r3, #4
 800c858:	b2da      	uxtb	r2, r3
 800c85a:	69fb      	ldr	r3, [r7, #28]
 800c85c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	2b00      	cmp	r3, #0
 800c862:	d13b      	bne.n	800c8dc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800c864:	69fb      	ldr	r3, [r7, #28]
 800c866:	6a1b      	ldr	r3, [r3, #32]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d106      	bne.n	800c87a <err_tcp+0x126>
 800c86c:	4b1e      	ldr	r3, [pc, #120]	@ (800c8e8 <err_tcp+0x194>)
 800c86e:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 800c872:	4920      	ldr	r1, [pc, #128]	@ (800c8f4 <err_tcp+0x1a0>)
 800c874:	481e      	ldr	r0, [pc, #120]	@ (800c8f0 <err_tcp+0x19c>)
 800c876:	f011 fa89 	bl	801dd8c <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800c87a:	7dfb      	ldrb	r3, [r7, #23]
 800c87c:	2b04      	cmp	r3, #4
 800c87e:	d104      	bne.n	800c88a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	6a1b      	ldr	r3, [r3, #32]
 800c884:	2200      	movs	r2, #0
 800c886:	711a      	strb	r2, [r3, #4]
 800c888:	e003      	b.n	800c892 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800c88a:	69fb      	ldr	r3, [r7, #28]
 800c88c:	6a1b      	ldr	r3, [r3, #32]
 800c88e:	78fa      	ldrb	r2, [r7, #3]
 800c890:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	6a1b      	ldr	r3, [r3, #32]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	330c      	adds	r3, #12
 800c89a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800c89c:	68b8      	ldr	r0, [r7, #8]
 800c89e:	f010 f9f3 	bl	801cc88 <sys_sem_valid>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d106      	bne.n	800c8b6 <err_tcp+0x162>
 800c8a8:	4b0f      	ldr	r3, [pc, #60]	@ (800c8e8 <err_tcp+0x194>)
 800c8aa:	f240 12ef 	movw	r2, #495	@ 0x1ef
 800c8ae:	4912      	ldr	r1, [pc, #72]	@ (800c8f8 <err_tcp+0x1a4>)
 800c8b0:	480f      	ldr	r0, [pc, #60]	@ (800c8f0 <err_tcp+0x19c>)
 800c8b2:	f011 fa6b 	bl	801dd8c <iprintf>
      conn->current_msg = NULL;
 800c8b6:	69fb      	ldr	r3, [r7, #28]
 800c8b8:	2200      	movs	r2, #0
 800c8ba:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800c8bc:	68b8      	ldr	r0, [r7, #8]
 800c8be:	f010 f9c9 	bl	801cc54 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800c8c2:	e00b      	b.n	800c8dc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	6a1b      	ldr	r3, [r3, #32]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d008      	beq.n	800c8de <err_tcp+0x18a>
 800c8cc:	4b06      	ldr	r3, [pc, #24]	@ (800c8e8 <err_tcp+0x194>)
 800c8ce:	f240 12f7 	movw	r2, #503	@ 0x1f7
 800c8d2:	490a      	ldr	r1, [pc, #40]	@ (800c8fc <err_tcp+0x1a8>)
 800c8d4:	4806      	ldr	r0, [pc, #24]	@ (800c8f0 <err_tcp+0x19c>)
 800c8d6:	f011 fa59 	bl	801dd8c <iprintf>
  }
}
 800c8da:	e000      	b.n	800c8de <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800c8dc:	bf00      	nop
}
 800c8de:	bf00      	nop
 800c8e0:	3720      	adds	r7, #32
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	08021ac0 	.word	0x08021ac0
 800c8ec:	08021c18 	.word	0x08021c18
 800c8f0:	08021b04 	.word	0x08021b04
 800c8f4:	08021c28 	.word	0x08021c28
 800c8f8:	08021c44 	.word	0x08021c44
 800c8fc:	08021c60 	.word	0x08021c60

0800c900 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800c90e:	6879      	ldr	r1, [r7, #4]
 800c910:	68f8      	ldr	r0, [r7, #12]
 800c912:	f006 fa19 	bl	8012d48 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800c916:	490a      	ldr	r1, [pc, #40]	@ (800c940 <setup_tcp+0x40>)
 800c918:	68f8      	ldr	r0, [r7, #12]
 800c91a:	f006 fa27 	bl	8012d6c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800c91e:	4909      	ldr	r1, [pc, #36]	@ (800c944 <setup_tcp+0x44>)
 800c920:	68f8      	ldr	r0, [r7, #12]
 800c922:	f006 fa45 	bl	8012db0 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800c926:	2202      	movs	r2, #2
 800c928:	4907      	ldr	r1, [pc, #28]	@ (800c948 <setup_tcp+0x48>)
 800c92a:	68f8      	ldr	r0, [r7, #12]
 800c92c:	f006 fa9c 	bl	8012e68 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800c930:	4906      	ldr	r1, [pc, #24]	@ (800c94c <setup_tcp+0x4c>)
 800c932:	68f8      	ldr	r0, [r7, #12]
 800c934:	f006 fa5e 	bl	8012df4 <tcp_err>
}
 800c938:	bf00      	nop
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}
 800c940:	0800c4d9 	.word	0x0800c4d9
 800c944:	0800c6ad 	.word	0x0800c6ad
 800c948:	0800c5e5 	.word	0x0800c5e5
 800c94c:	0800c755 	.word	0x0800c755

0800c950 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800c950:	b590      	push	{r4, r7, lr}
 800c952:	b085      	sub	sp, #20
 800c954:	af00      	add	r7, sp, #0
 800c956:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800c958:	2300      	movs	r3, #0
 800c95a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	685b      	ldr	r3, [r3, #4]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d006      	beq.n	800c974 <pcb_new+0x24>
 800c966:	4b2b      	ldr	r3, [pc, #172]	@ (800ca14 <pcb_new+0xc4>)
 800c968:	f240 2265 	movw	r2, #613	@ 0x265
 800c96c:	492a      	ldr	r1, [pc, #168]	@ (800ca18 <pcb_new+0xc8>)
 800c96e:	482b      	ldr	r0, [pc, #172]	@ (800ca1c <pcb_new+0xcc>)
 800c970:	f011 fa0c 	bl	801dd8c <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	781b      	ldrb	r3, [r3, #0]
 800c97a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800c97e:	2b10      	cmp	r3, #16
 800c980:	d022      	beq.n	800c9c8 <pcb_new+0x78>
 800c982:	2b20      	cmp	r3, #32
 800c984:	d133      	bne.n	800c9ee <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681c      	ldr	r4, [r3, #0]
 800c98a:	7bfb      	ldrb	r3, [r7, #15]
 800c98c:	4618      	mov	r0, r3
 800c98e:	f00b fd34 	bl	80183fa <udp_new_ip_type>
 800c992:	4603      	mov	r3, r0
 800c994:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	685b      	ldr	r3, [r3, #4]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d02a      	beq.n	800c9f6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	781b      	ldrb	r3, [r3, #0]
 800c9a6:	2b22      	cmp	r3, #34	@ 0x22
 800c9a8:	d104      	bne.n	800c9b4 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	685b      	ldr	r3, [r3, #4]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	6858      	ldr	r0, [r3, #4]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	461a      	mov	r2, r3
 800c9c0:	4917      	ldr	r1, [pc, #92]	@ (800ca20 <pcb_new+0xd0>)
 800c9c2:	f00b fca1 	bl	8018308 <udp_recv>
      }
      break;
 800c9c6:	e016      	b.n	800c9f6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681c      	ldr	r4, [r3, #0]
 800c9cc:	7bfb      	ldrb	r3, [r7, #15]
 800c9ce:	4618      	mov	r0, r3
 800c9d0:	f006 f9ac 	bl	8012d2c <tcp_new_ip_type>
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	685b      	ldr	r3, [r3, #4]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d00b      	beq.n	800c9fa <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7ff ff8a 	bl	800c900 <setup_tcp>
      }
      break;
 800c9ec:	e005      	b.n	800c9fa <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	22fa      	movs	r2, #250	@ 0xfa
 800c9f2:	711a      	strb	r2, [r3, #4]
      return;
 800c9f4:	e00a      	b.n	800ca0c <pcb_new+0xbc>
      break;
 800c9f6:	bf00      	nop
 800c9f8:	e000      	b.n	800c9fc <pcb_new+0xac>
      break;
 800c9fa:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	685b      	ldr	r3, [r3, #4]
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d102      	bne.n	800ca0c <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	22ff      	movs	r2, #255	@ 0xff
 800ca0a:	711a      	strb	r2, [r3, #4]
  }
}
 800ca0c:	3714      	adds	r7, #20
 800ca0e:	46bd      	mov	sp, r7
 800ca10:	bd90      	pop	{r4, r7, pc}
 800ca12:	bf00      	nop
 800ca14:	08021ac0 	.word	0x08021ac0
 800ca18:	08021ca4 	.word	0x08021ca4
 800ca1c:	08021b04 	.word	0x08021b04
 800ca20:	0800c3dd 	.word	0x0800c3dd

0800ca24 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800ca24:	b580      	push	{r7, lr}
 800ca26:	b084      	sub	sp, #16
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	2200      	movs	r2, #0
 800ca34:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d102      	bne.n	800ca46 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800ca40:	68f8      	ldr	r0, [r7, #12]
 800ca42:	f7ff ff85 	bl	800c950 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800ca46:	bf00      	nop
 800ca48:	3710      	adds	r7, #16
 800ca4a:	46bd      	mov	sp, r7
 800ca4c:	bd80      	pop	{r7, pc}
	...

0800ca50 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b086      	sub	sp, #24
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	4603      	mov	r3, r0
 800ca58:	6039      	str	r1, [r7, #0]
 800ca5a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800ca60:	2007      	movs	r0, #7
 800ca62:	f003 fa79 	bl	800ff58 <memp_malloc>
 800ca66:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d101      	bne.n	800ca72 <netconn_alloc+0x22>
    return NULL;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	e052      	b.n	800cb18 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2200      	movs	r2, #0
 800ca76:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	79fa      	ldrb	r2, [r7, #7]
 800ca7c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2200      	movs	r2, #0
 800ca82:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800ca84:	79fb      	ldrb	r3, [r7, #7]
 800ca86:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ca8a:	2b10      	cmp	r3, #16
 800ca8c:	d004      	beq.n	800ca98 <netconn_alloc+0x48>
 800ca8e:	2b20      	cmp	r3, #32
 800ca90:	d105      	bne.n	800ca9e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800ca92:	2306      	movs	r3, #6
 800ca94:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800ca96:	e00a      	b.n	800caae <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800ca98:	2306      	movs	r3, #6
 800ca9a:	617b      	str	r3, [r7, #20]
      break;
 800ca9c:	e007      	b.n	800caae <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800ca9e:	4b20      	ldr	r3, [pc, #128]	@ (800cb20 <netconn_alloc+0xd0>)
 800caa0:	f240 22e5 	movw	r2, #741	@ 0x2e5
 800caa4:	491f      	ldr	r1, [pc, #124]	@ (800cb24 <netconn_alloc+0xd4>)
 800caa6:	4820      	ldr	r0, [pc, #128]	@ (800cb28 <netconn_alloc+0xd8>)
 800caa8:	f011 f970 	bl	801dd8c <iprintf>
      goto free_and_return;
 800caac:	e02f      	b.n	800cb0e <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	3310      	adds	r3, #16
 800cab2:	6979      	ldr	r1, [r7, #20]
 800cab4:	4618      	mov	r0, r3
 800cab6:	f00f ffcb 	bl	801ca50 <sys_mbox_new>
 800caba:	4603      	mov	r3, r0
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d125      	bne.n	800cb0c <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	330c      	adds	r3, #12
 800cac4:	2100      	movs	r1, #0
 800cac6:	4618      	mov	r0, r3
 800cac8:	f010 f86e 	bl	801cba8 <sys_sem_new>
 800cacc:	4603      	mov	r3, r0
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d005      	beq.n	800cade <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	3310      	adds	r3, #16
 800cad6:	4618      	mov	r0, r3
 800cad8:	f00f ffd4 	bl	801ca84 <sys_mbox_free>
    goto free_and_return;
 800cadc:	e017      	b.n	800cb0e <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	3314      	adds	r3, #20
 800cae2:	4618      	mov	r0, r3
 800cae4:	f010 f853 	bl	801cb8e <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2200      	movs	r2, #0
 800caec:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f04f 32ff 	mov.w	r2, #4294967295
 800caf4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	683a      	ldr	r2, [r7, #0]
 800cafa:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2200      	movs	r2, #0
 800cb00:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	7cfa      	ldrb	r2, [r7, #19]
 800cb06:	771a      	strb	r2, [r3, #28]
  return conn;
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	e005      	b.n	800cb18 <netconn_alloc+0xc8>
    goto free_and_return;
 800cb0c:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800cb0e:	68f9      	ldr	r1, [r7, #12]
 800cb10:	2007      	movs	r0, #7
 800cb12:	f003 fa97 	bl	8010044 <memp_free>
  return NULL;
 800cb16:	2300      	movs	r3, #0
}
 800cb18:	4618      	mov	r0, r3
 800cb1a:	3718      	adds	r7, #24
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	bd80      	pop	{r7, pc}
 800cb20:	08021ac0 	.word	0x08021ac0
 800cb24:	08021cc4 	.word	0x08021cc4
 800cb28:	08021b04 	.word	0x08021b04

0800cb2c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b082      	sub	sp, #8
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	685b      	ldr	r3, [r3, #4]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d006      	beq.n	800cb4a <netconn_free+0x1e>
 800cb3c:	4b1b      	ldr	r3, [pc, #108]	@ (800cbac <netconn_free+0x80>)
 800cb3e:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 800cb42:	491b      	ldr	r1, [pc, #108]	@ (800cbb0 <netconn_free+0x84>)
 800cb44:	481b      	ldr	r0, [pc, #108]	@ (800cbb4 <netconn_free+0x88>)
 800cb46:	f011 f921 	bl	801dd8c <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	3310      	adds	r3, #16
 800cb4e:	4618      	mov	r0, r3
 800cb50:	f010 f80c 	bl	801cb6c <sys_mbox_valid>
 800cb54:	4603      	mov	r3, r0
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d006      	beq.n	800cb68 <netconn_free+0x3c>
 800cb5a:	4b14      	ldr	r3, [pc, #80]	@ (800cbac <netconn_free+0x80>)
 800cb5c:	f240 3223 	movw	r2, #803	@ 0x323
 800cb60:	4915      	ldr	r1, [pc, #84]	@ (800cbb8 <netconn_free+0x8c>)
 800cb62:	4814      	ldr	r0, [pc, #80]	@ (800cbb4 <netconn_free+0x88>)
 800cb64:	f011 f912 	bl	801dd8c <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	3314      	adds	r3, #20
 800cb6c:	4618      	mov	r0, r3
 800cb6e:	f00f fffd 	bl	801cb6c <sys_mbox_valid>
 800cb72:	4603      	mov	r3, r0
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d006      	beq.n	800cb86 <netconn_free+0x5a>
 800cb78:	4b0c      	ldr	r3, [pc, #48]	@ (800cbac <netconn_free+0x80>)
 800cb7a:	f240 3226 	movw	r2, #806	@ 0x326
 800cb7e:	490f      	ldr	r1, [pc, #60]	@ (800cbbc <netconn_free+0x90>)
 800cb80:	480c      	ldr	r0, [pc, #48]	@ (800cbb4 <netconn_free+0x88>)
 800cb82:	f011 f903 	bl	801dd8c <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	330c      	adds	r3, #12
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	f010 f86f 	bl	801cc6e <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	330c      	adds	r3, #12
 800cb94:	4618      	mov	r0, r3
 800cb96:	f010 f888 	bl	801ccaa <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800cb9a:	6879      	ldr	r1, [r7, #4]
 800cb9c:	2007      	movs	r0, #7
 800cb9e:	f003 fa51 	bl	8010044 <memp_free>
}
 800cba2:	bf00      	nop
 800cba4:	3708      	adds	r7, #8
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd80      	pop	{r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	08021ac0 	.word	0x08021ac0
 800cbb0:	08021cec 	.word	0x08021cec
 800cbb4:	08021b04 	.word	0x08021b04
 800cbb8:	08021d1c 	.word	0x08021d1c
 800cbbc:	08021d58 	.word	0x08021d58

0800cbc0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b086      	sub	sp, #24
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	3310      	adds	r3, #16
 800cbcc:	4618      	mov	r0, r3
 800cbce:	f00f ffcd 	bl	801cb6c <sys_mbox_valid>
 800cbd2:	4603      	mov	r3, r0
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d02f      	beq.n	800cc38 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800cbd8:	e018      	b.n	800cc0c <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	781b      	ldrb	r3, [r3, #0]
 800cbde:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cbe2:	2b10      	cmp	r3, #16
 800cbe4:	d10e      	bne.n	800cc04 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	f107 020f 	add.w	r2, r7, #15
 800cbec:	4611      	mov	r1, r2
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f7ff fbba 	bl	800c368 <lwip_netconn_is_err_msg>
 800cbf4:	4603      	mov	r3, r0
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d108      	bne.n	800cc0c <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	f004 f903 	bl	8010e08 <pbuf_free>
 800cc02:	e003      	b.n	800cc0c <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800cc04:	693b      	ldr	r3, [r7, #16]
 800cc06:	4618      	mov	r0, r3
 800cc08:	f001 f81c 	bl	800dc44 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	3310      	adds	r3, #16
 800cc10:	f107 0210 	add.w	r2, r7, #16
 800cc14:	4611      	mov	r1, r2
 800cc16:	4618      	mov	r0, r3
 800cc18:	f00f ff91 	bl	801cb3e <sys_arch_mbox_tryfetch>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc22:	d1da      	bne.n	800cbda <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	3310      	adds	r3, #16
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f00f ff2b 	bl	801ca84 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	3310      	adds	r3, #16
 800cc32:	4618      	mov	r0, r3
 800cc34:	f00f ffab 	bl	801cb8e <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	3314      	adds	r3, #20
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f00f ff95 	bl	801cb6c <sys_mbox_valid>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d034      	beq.n	800ccb2 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800cc48:	e01d      	b.n	800cc86 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800cc4a:	693b      	ldr	r3, [r7, #16]
 800cc4c:	f107 020e 	add.w	r2, r7, #14
 800cc50:	4611      	mov	r1, r2
 800cc52:	4618      	mov	r0, r3
 800cc54:	f7ff fb88 	bl	800c368 <lwip_netconn_is_err_msg>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d113      	bne.n	800cc86 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800cc62:	6978      	ldr	r0, [r7, #20]
 800cc64:	f7ff ffac 	bl	800cbc0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800cc68:	697b      	ldr	r3, [r7, #20]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d007      	beq.n	800cc80 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800cc70:	697b      	ldr	r3, [r7, #20]
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	4618      	mov	r0, r3
 800cc76:	f005 f821 	bl	8011cbc <tcp_abort>
            newconn->pcb.tcp = NULL;
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	2200      	movs	r2, #0
 800cc7e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800cc80:	6978      	ldr	r0, [r7, #20]
 800cc82:	f7ff ff53 	bl	800cb2c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	3314      	adds	r3, #20
 800cc8a:	f107 0210 	add.w	r2, r7, #16
 800cc8e:	4611      	mov	r1, r2
 800cc90:	4618      	mov	r0, r3
 800cc92:	f00f ff54 	bl	801cb3e <sys_arch_mbox_tryfetch>
 800cc96:	4603      	mov	r3, r0
 800cc98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cc9c:	d1d5      	bne.n	800cc4a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	3314      	adds	r3, #20
 800cca2:	4618      	mov	r0, r3
 800cca4:	f00f feee 	bl	801ca84 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	3314      	adds	r3, #20
 800ccac:	4618      	mov	r0, r3
 800ccae:	f00f ff6e 	bl	801cb8e <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800ccb2:	bf00      	nop
 800ccb4:	3718      	adds	r7, #24
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
	...

0800ccbc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b086      	sub	sp, #24
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800ccc8:	2300      	movs	r3, #0
 800ccca:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d106      	bne.n	800cce0 <lwip_netconn_do_close_internal+0x24>
 800ccd2:	4b87      	ldr	r3, [pc, #540]	@ (800cef0 <lwip_netconn_do_close_internal+0x234>)
 800ccd4:	f240 32a2 	movw	r2, #930	@ 0x3a2
 800ccd8:	4986      	ldr	r1, [pc, #536]	@ (800cef4 <lwip_netconn_do_close_internal+0x238>)
 800ccda:	4887      	ldr	r0, [pc, #540]	@ (800cef8 <lwip_netconn_do_close_internal+0x23c>)
 800ccdc:	f011 f856 	bl	801dd8c <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	781b      	ldrb	r3, [r3, #0]
 800cce4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cce8:	2b10      	cmp	r3, #16
 800ccea:	d006      	beq.n	800ccfa <lwip_netconn_do_close_internal+0x3e>
 800ccec:	4b80      	ldr	r3, [pc, #512]	@ (800cef0 <lwip_netconn_do_close_internal+0x234>)
 800ccee:	f240 32a3 	movw	r2, #931	@ 0x3a3
 800ccf2:	4982      	ldr	r1, [pc, #520]	@ (800cefc <lwip_netconn_do_close_internal+0x240>)
 800ccf4:	4880      	ldr	r0, [pc, #512]	@ (800cef8 <lwip_netconn_do_close_internal+0x23c>)
 800ccf6:	f011 f849 	bl	801dd8c <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	785b      	ldrb	r3, [r3, #1]
 800ccfe:	2b04      	cmp	r3, #4
 800cd00:	d006      	beq.n	800cd10 <lwip_netconn_do_close_internal+0x54>
 800cd02:	4b7b      	ldr	r3, [pc, #492]	@ (800cef0 <lwip_netconn_do_close_internal+0x234>)
 800cd04:	f44f 7269 	mov.w	r2, #932	@ 0x3a4
 800cd08:	497d      	ldr	r1, [pc, #500]	@ (800cf00 <lwip_netconn_do_close_internal+0x244>)
 800cd0a:	487b      	ldr	r0, [pc, #492]	@ (800cef8 <lwip_netconn_do_close_internal+0x23c>)
 800cd0c:	f011 f83e 	bl	801dd8c <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	685b      	ldr	r3, [r3, #4]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d106      	bne.n	800cd26 <lwip_netconn_do_close_internal+0x6a>
 800cd18:	4b75      	ldr	r3, [pc, #468]	@ (800cef0 <lwip_netconn_do_close_internal+0x234>)
 800cd1a:	f240 32a5 	movw	r2, #933	@ 0x3a5
 800cd1e:	4979      	ldr	r1, [pc, #484]	@ (800cf04 <lwip_netconn_do_close_internal+0x248>)
 800cd20:	4875      	ldr	r0, [pc, #468]	@ (800cef8 <lwip_netconn_do_close_internal+0x23c>)
 800cd22:	f011 f833 	bl	801dd8c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	6a1b      	ldr	r3, [r3, #32]
 800cd2a:	2b00      	cmp	r3, #0
 800cd2c:	d106      	bne.n	800cd3c <lwip_netconn_do_close_internal+0x80>
 800cd2e:	4b70      	ldr	r3, [pc, #448]	@ (800cef0 <lwip_netconn_do_close_internal+0x234>)
 800cd30:	f240 32a6 	movw	r2, #934	@ 0x3a6
 800cd34:	4974      	ldr	r1, [pc, #464]	@ (800cf08 <lwip_netconn_do_close_internal+0x24c>)
 800cd36:	4870      	ldr	r0, [pc, #448]	@ (800cef8 <lwip_netconn_do_close_internal+0x23c>)
 800cd38:	f011 f828 	bl	801dd8c <iprintf>

  tpcb = conn->pcb.tcp;
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	685b      	ldr	r3, [r3, #4]
 800cd40:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6a1b      	ldr	r3, [r3, #32]
 800cd46:	7a1b      	ldrb	r3, [r3, #8]
 800cd48:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800cd4a:	7bfb      	ldrb	r3, [r7, #15]
 800cd4c:	f003 0301 	and.w	r3, r3, #1
 800cd50:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800cd52:	7bfb      	ldrb	r3, [r7, #15]
 800cd54:	f003 0302 	and.w	r3, r3, #2
 800cd58:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800cd5a:	7bfb      	ldrb	r3, [r7, #15]
 800cd5c:	2b03      	cmp	r3, #3
 800cd5e:	d102      	bne.n	800cd66 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800cd60:	2301      	movs	r3, #1
 800cd62:	75bb      	strb	r3, [r7, #22]
 800cd64:	e01f      	b.n	800cda6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800cd66:	7bbb      	ldrb	r3, [r7, #14]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d00e      	beq.n	800cd8a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800cd70:	2b05      	cmp	r3, #5
 800cd72:	d007      	beq.n	800cd84 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800cd74:	693b      	ldr	r3, [r7, #16]
 800cd76:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800cd78:	2b06      	cmp	r3, #6
 800cd7a:	d003      	beq.n	800cd84 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800cd7c:	693b      	ldr	r3, [r7, #16]
 800cd7e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800cd80:	2b08      	cmp	r3, #8
 800cd82:	d102      	bne.n	800cd8a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800cd84:	2301      	movs	r3, #1
 800cd86:	75bb      	strb	r3, [r7, #22]
 800cd88:	e00d      	b.n	800cda6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800cd8a:	7b7b      	ldrb	r3, [r7, #13]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d008      	beq.n	800cda2 <lwip_netconn_do_close_internal+0xe6>
 800cd90:	693b      	ldr	r3, [r7, #16]
 800cd92:	8b5b      	ldrh	r3, [r3, #26]
 800cd94:	f003 0310 	and.w	r3, r3, #16
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d002      	beq.n	800cda2 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800cd9c:	2301      	movs	r3, #1
 800cd9e:	75bb      	strb	r3, [r7, #22]
 800cda0:	e001      	b.n	800cda6 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800cda2:	2300      	movs	r3, #0
 800cda4:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800cda6:	7dbb      	ldrb	r3, [r7, #22]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d003      	beq.n	800cdb4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800cdac:	2100      	movs	r1, #0
 800cdae:	6938      	ldr	r0, [r7, #16]
 800cdb0:	f005 ffca 	bl	8012d48 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	7d1b      	ldrb	r3, [r3, #20]
 800cdb8:	2b01      	cmp	r3, #1
 800cdba:	d104      	bne.n	800cdc6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800cdbc:	2100      	movs	r1, #0
 800cdbe:	6938      	ldr	r0, [r7, #16]
 800cdc0:	f006 f83a 	bl	8012e38 <tcp_accept>
 800cdc4:	e01d      	b.n	800ce02 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800cdc6:	7bbb      	ldrb	r3, [r7, #14]
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d007      	beq.n	800cddc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800cdcc:	2100      	movs	r1, #0
 800cdce:	6938      	ldr	r0, [r7, #16]
 800cdd0:	f005 ffcc 	bl	8012d6c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800cdd4:	2100      	movs	r1, #0
 800cdd6:	6938      	ldr	r0, [r7, #16]
 800cdd8:	f006 f82e 	bl	8012e38 <tcp_accept>
    }
    if (shut_tx) {
 800cddc:	7b7b      	ldrb	r3, [r7, #13]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d003      	beq.n	800cdea <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800cde2:	2100      	movs	r1, #0
 800cde4:	6938      	ldr	r0, [r7, #16]
 800cde6:	f005 ffe3 	bl	8012db0 <tcp_sent>
    }
    if (shut_close) {
 800cdea:	7dbb      	ldrb	r3, [r7, #22]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d008      	beq.n	800ce02 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800cdf0:	2200      	movs	r2, #0
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	6938      	ldr	r0, [r7, #16]
 800cdf6:	f006 f837 	bl	8012e68 <tcp_poll>
      tcp_err(tpcb, NULL);
 800cdfa:	2100      	movs	r1, #0
 800cdfc:	6938      	ldr	r0, [r7, #16]
 800cdfe:	f005 fff9 	bl	8012df4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800ce02:	7dbb      	ldrb	r3, [r7, #22]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d005      	beq.n	800ce14 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800ce08:	6938      	ldr	r0, [r7, #16]
 800ce0a:	f004 fe11 	bl	8011a30 <tcp_close>
 800ce0e:	4603      	mov	r3, r0
 800ce10:	75fb      	strb	r3, [r7, #23]
 800ce12:	e007      	b.n	800ce24 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800ce14:	7bbb      	ldrb	r3, [r7, #14]
 800ce16:	7b7a      	ldrb	r2, [r7, #13]
 800ce18:	4619      	mov	r1, r3
 800ce1a:	6938      	ldr	r0, [r7, #16]
 800ce1c:	f004 fe34 	bl	8011a88 <tcp_shutdown>
 800ce20:	4603      	mov	r3, r0
 800ce22:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800ce24:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d102      	bne.n	800ce32 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	757b      	strb	r3, [r7, #21]
 800ce30:	e016      	b.n	800ce60 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800ce32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce3a:	d10f      	bne.n	800ce5c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	6a1b      	ldr	r3, [r3, #32]
 800ce40:	7a5b      	ldrb	r3, [r3, #9]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d10c      	bne.n	800ce60 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800ce46:	2301      	movs	r3, #1
 800ce48:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800ce4a:	7dbb      	ldrb	r3, [r7, #22]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d007      	beq.n	800ce60 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800ce50:	6938      	ldr	r0, [r7, #16]
 800ce52:	f004 ff33 	bl	8011cbc <tcp_abort>
          err = ERR_OK;
 800ce56:	2300      	movs	r3, #0
 800ce58:	75fb      	strb	r3, [r7, #23]
 800ce5a:	e001      	b.n	800ce60 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800ce60:	7d7b      	ldrb	r3, [r7, #21]
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	d052      	beq.n	800cf0c <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6a1b      	ldr	r3, [r3, #32]
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	330c      	adds	r3, #12
 800ce6e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	6a1b      	ldr	r3, [r3, #32]
 800ce74:	7dfa      	ldrb	r2, [r7, #23]
 800ce76:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2200      	movs	r2, #0
 800ce82:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800ce84:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d129      	bne.n	800cee0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800ce8c:	7dbb      	ldrb	r3, [r7, #22]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d00c      	beq.n	800ceac <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	2200      	movs	r2, #0
 800ce96:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d005      	beq.n	800ceac <lwip_netconn_do_close_internal+0x1f0>
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cea4:	2200      	movs	r2, #0
 800cea6:	2104      	movs	r1, #4
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	4798      	blx	r3
      }
      if (shut_rx) {
 800ceac:	7bbb      	ldrb	r3, [r7, #14]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d009      	beq.n	800cec6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d005      	beq.n	800cec6 <lwip_netconn_do_close_internal+0x20a>
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cebe:	2200      	movs	r2, #0
 800cec0:	2100      	movs	r1, #0
 800cec2:	6878      	ldr	r0, [r7, #4]
 800cec4:	4798      	blx	r3
      }
      if (shut_tx) {
 800cec6:	7b7b      	ldrb	r3, [r7, #13]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d009      	beq.n	800cee0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d005      	beq.n	800cee0 <lwip_netconn_do_close_internal+0x224>
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ced8:	2200      	movs	r2, #0
 800ceda:	2102      	movs	r1, #2
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800cee0:	78fb      	ldrb	r3, [r7, #3]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d002      	beq.n	800ceec <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800cee6:	68b8      	ldr	r0, [r7, #8]
 800cee8:	f00f feb4 	bl	801cc54 <sys_sem_signal>
    }
    return ERR_OK;
 800ceec:	2300      	movs	r3, #0
 800ceee:	e03c      	b.n	800cf6a <lwip_netconn_do_close_internal+0x2ae>
 800cef0:	08021ac0 	.word	0x08021ac0
 800cef4:	08021d94 	.word	0x08021d94
 800cef8:	08021b04 	.word	0x08021b04
 800cefc:	08021da4 	.word	0x08021da4
 800cf00:	08021dc4 	.word	0x08021dc4
 800cf04:	08021de8 	.word	0x08021de8
 800cf08:	08021c28 	.word	0x08021c28
  }
  if (!close_finished) {
 800cf0c:	7d7b      	ldrb	r3, [r7, #21]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d11e      	bne.n	800cf50 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800cf12:	693b      	ldr	r3, [r7, #16]
 800cf14:	7d1b      	ldrb	r3, [r3, #20]
 800cf16:	2b01      	cmp	r3, #1
 800cf18:	d106      	bne.n	800cf28 <lwip_netconn_do_close_internal+0x26c>
 800cf1a:	4b16      	ldr	r3, [pc, #88]	@ (800cf74 <lwip_netconn_do_close_internal+0x2b8>)
 800cf1c:	f240 4241 	movw	r2, #1089	@ 0x441
 800cf20:	4915      	ldr	r1, [pc, #84]	@ (800cf78 <lwip_netconn_do_close_internal+0x2bc>)
 800cf22:	4816      	ldr	r0, [pc, #88]	@ (800cf7c <lwip_netconn_do_close_internal+0x2c0>)
 800cf24:	f010 ff32 	bl	801dd8c <iprintf>
    if (shut_tx) {
 800cf28:	7b7b      	ldrb	r3, [r7, #13]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d003      	beq.n	800cf36 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800cf2e:	4914      	ldr	r1, [pc, #80]	@ (800cf80 <lwip_netconn_do_close_internal+0x2c4>)
 800cf30:	6938      	ldr	r0, [r7, #16]
 800cf32:	f005 ff3d 	bl	8012db0 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800cf36:	2201      	movs	r2, #1
 800cf38:	4912      	ldr	r1, [pc, #72]	@ (800cf84 <lwip_netconn_do_close_internal+0x2c8>)
 800cf3a:	6938      	ldr	r0, [r7, #16]
 800cf3c:	f005 ff94 	bl	8012e68 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800cf40:	4911      	ldr	r1, [pc, #68]	@ (800cf88 <lwip_netconn_do_close_internal+0x2cc>)
 800cf42:	6938      	ldr	r0, [r7, #16]
 800cf44:	f005 ff56 	bl	8012df4 <tcp_err>
    tcp_arg(tpcb, conn);
 800cf48:	6879      	ldr	r1, [r7, #4]
 800cf4a:	6938      	ldr	r0, [r7, #16]
 800cf4c:	f005 fefc 	bl	8012d48 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800cf50:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d106      	bne.n	800cf66 <lwip_netconn_do_close_internal+0x2aa>
 800cf58:	4b06      	ldr	r3, [pc, #24]	@ (800cf74 <lwip_netconn_do_close_internal+0x2b8>)
 800cf5a:	f240 424d 	movw	r2, #1101	@ 0x44d
 800cf5e:	490b      	ldr	r1, [pc, #44]	@ (800cf8c <lwip_netconn_do_close_internal+0x2d0>)
 800cf60:	4806      	ldr	r0, [pc, #24]	@ (800cf7c <lwip_netconn_do_close_internal+0x2c0>)
 800cf62:	f010 ff13 	bl	801dd8c <iprintf>
  return err;
 800cf66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3718      	adds	r7, #24
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	08021ac0 	.word	0x08021ac0
 800cf78:	08021dfc 	.word	0x08021dfc
 800cf7c:	08021b04 	.word	0x08021b04
 800cf80:	0800c6ad 	.word	0x0800c6ad
 800cf84:	0800c5e5 	.word	0x0800c5e5
 800cf88:	0800c755 	.word	0x0800c755
 800cf8c:	08021e20 	.word	0x08021e20

0800cf90 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	785b      	ldrb	r3, [r3, #1]
 800cfa2:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800cfa4:	7afb      	ldrb	r3, [r7, #11]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00d      	beq.n	800cfc6 <lwip_netconn_do_delconn+0x36>
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800cfb4:	2b10      	cmp	r3, #16
 800cfb6:	d006      	beq.n	800cfc6 <lwip_netconn_do_delconn+0x36>
 800cfb8:	4b60      	ldr	r3, [pc, #384]	@ (800d13c <lwip_netconn_do_delconn+0x1ac>)
 800cfba:	f240 425e 	movw	r2, #1118	@ 0x45e
 800cfbe:	4960      	ldr	r1, [pc, #384]	@ (800d140 <lwip_netconn_do_delconn+0x1b0>)
 800cfc0:	4860      	ldr	r0, [pc, #384]	@ (800d144 <lwip_netconn_do_delconn+0x1b4>)
 800cfc2:	f010 fee3 	bl	801dd8c <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800cfc6:	7afb      	ldrb	r3, [r7, #11]
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d005      	beq.n	800cfd8 <lwip_netconn_do_delconn+0x48>
 800cfcc:	7afb      	ldrb	r3, [r7, #11]
 800cfce:	2b02      	cmp	r3, #2
 800cfd0:	d002      	beq.n	800cfd8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800cfd2:	7afb      	ldrb	r3, [r7, #11]
 800cfd4:	2b03      	cmp	r3, #3
 800cfd6:	d109      	bne.n	800cfec <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800cfd8:	7afb      	ldrb	r3, [r7, #11]
 800cfda:	2b03      	cmp	r3, #3
 800cfdc:	d10a      	bne.n	800cff4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	7f1b      	ldrb	r3, [r3, #28]
 800cfe4:	f003 0304 	and.w	r3, r3, #4
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d103      	bne.n	800cff4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	22fb      	movs	r2, #251	@ 0xfb
 800cff0:	711a      	strb	r2, [r3, #4]
 800cff2:	e097      	b.n	800d124 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800cff4:	7afb      	ldrb	r3, [r7, #11]
 800cff6:	2b03      	cmp	r3, #3
 800cff8:	d10d      	bne.n	800d016 <lwip_netconn_do_delconn+0x86>
 800cffa:	68fb      	ldr	r3, [r7, #12]
 800cffc:	681b      	ldr	r3, [r3, #0]
 800cffe:	7f1b      	ldrb	r3, [r3, #28]
 800d000:	f003 0304 	and.w	r3, r3, #4
 800d004:	2b00      	cmp	r3, #0
 800d006:	d106      	bne.n	800d016 <lwip_netconn_do_delconn+0x86>
 800d008:	4b4c      	ldr	r3, [pc, #304]	@ (800d13c <lwip_netconn_do_delconn+0x1ac>)
 800d00a:	f240 427a 	movw	r2, #1146	@ 0x47a
 800d00e:	494e      	ldr	r1, [pc, #312]	@ (800d148 <lwip_netconn_do_delconn+0x1b8>)
 800d010:	484c      	ldr	r0, [pc, #304]	@ (800d144 <lwip_netconn_do_delconn+0x1b4>)
 800d012:	f010 febb 	bl	801dd8c <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2200      	movs	r2, #0
 800d01a:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	4618      	mov	r0, r3
 800d022:	f7ff fdcd 	bl	800cbc0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	685b      	ldr	r3, [r3, #4]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d05f      	beq.n	800d0f0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	781b      	ldrb	r3, [r3, #0]
 800d036:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d03a:	2b10      	cmp	r3, #16
 800d03c:	d00d      	beq.n	800d05a <lwip_netconn_do_delconn+0xca>
 800d03e:	2b20      	cmp	r3, #32
 800d040:	d151      	bne.n	800d0e6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	2200      	movs	r2, #0
 800d04a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	685b      	ldr	r3, [r3, #4]
 800d052:	4618      	mov	r0, r3
 800d054:	f00b f978 	bl	8018348 <udp_remove>
          break;
 800d058:	e046      	b.n	800d0e8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	6a1b      	ldr	r3, [r3, #32]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d006      	beq.n	800d072 <lwip_netconn_do_delconn+0xe2>
 800d064:	4b35      	ldr	r3, [pc, #212]	@ (800d13c <lwip_netconn_do_delconn+0x1ac>)
 800d066:	f240 4294 	movw	r2, #1172	@ 0x494
 800d06a:	4938      	ldr	r1, [pc, #224]	@ (800d14c <lwip_netconn_do_delconn+0x1bc>)
 800d06c:	4835      	ldr	r0, [pc, #212]	@ (800d144 <lwip_netconn_do_delconn+0x1b4>)
 800d06e:	f010 fe8d 	bl	801dd8c <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2204      	movs	r2, #4
 800d078:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2203      	movs	r2, #3
 800d07e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	2100      	movs	r1, #0
 800d08e:	4618      	mov	r0, r3
 800d090:	f7ff fe14 	bl	800ccbc <lwip_netconn_do_close_internal>
 800d094:	4603      	mov	r3, r0
 800d096:	2b00      	cmp	r3, #0
 800d098:	d04b      	beq.n	800d132 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800d09a:	68fb      	ldr	r3, [r7, #12]
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	785b      	ldrb	r3, [r3, #1]
 800d0a0:	2b04      	cmp	r3, #4
 800d0a2:	d006      	beq.n	800d0b2 <lwip_netconn_do_delconn+0x122>
 800d0a4:	4b25      	ldr	r3, [pc, #148]	@ (800d13c <lwip_netconn_do_delconn+0x1ac>)
 800d0a6:	f240 429a 	movw	r2, #1178	@ 0x49a
 800d0aa:	4929      	ldr	r1, [pc, #164]	@ (800d150 <lwip_netconn_do_delconn+0x1c0>)
 800d0ac:	4825      	ldr	r0, [pc, #148]	@ (800d144 <lwip_netconn_do_delconn+0x1b4>)
 800d0ae:	f010 fe6d 	bl	801dd8c <iprintf>
            UNLOCK_TCPIP_CORE();
 800d0b2:	4828      	ldr	r0, [pc, #160]	@ (800d154 <lwip_netconn_do_delconn+0x1c4>)
 800d0b4:	f00f fe37 	bl	801cd26 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	330c      	adds	r3, #12
 800d0be:	2100      	movs	r1, #0
 800d0c0:	4618      	mov	r0, r3
 800d0c2:	f00f fd96 	bl	801cbf2 <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800d0c6:	4823      	ldr	r0, [pc, #140]	@ (800d154 <lwip_netconn_do_delconn+0x1c4>)
 800d0c8:	f00f fe1e 	bl	801cd08 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800d0cc:	68fb      	ldr	r3, [r7, #12]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	785b      	ldrb	r3, [r3, #1]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d02d      	beq.n	800d132 <lwip_netconn_do_delconn+0x1a2>
 800d0d6:	4b19      	ldr	r3, [pc, #100]	@ (800d13c <lwip_netconn_do_delconn+0x1ac>)
 800d0d8:	f240 429e 	movw	r2, #1182	@ 0x49e
 800d0dc:	491c      	ldr	r1, [pc, #112]	@ (800d150 <lwip_netconn_do_delconn+0x1c0>)
 800d0de:	4819      	ldr	r0, [pc, #100]	@ (800d144 <lwip_netconn_do_delconn+0x1b4>)
 800d0e0:	f010 fe54 	bl	801dd8c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800d0e4:	e025      	b.n	800d132 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800d0e6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d007      	beq.n	800d10a <lwip_netconn_do_delconn+0x17a>
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d100:	68fa      	ldr	r2, [r7, #12]
 800d102:	6810      	ldr	r0, [r2, #0]
 800d104:	2200      	movs	r2, #0
 800d106:	2100      	movs	r1, #0
 800d108:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d110:	2b00      	cmp	r3, #0
 800d112:	d007      	beq.n	800d124 <lwip_netconn_do_delconn+0x194>
 800d114:	68fb      	ldr	r3, [r7, #12]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	6810      	ldr	r0, [r2, #0]
 800d11e:	2200      	movs	r2, #0
 800d120:	2102      	movs	r1, #2
 800d122:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	330c      	adds	r3, #12
 800d12a:	4618      	mov	r0, r3
 800d12c:	f00f fdac 	bl	801cc88 <sys_sem_valid>
 800d130:	e000      	b.n	800d134 <lwip_netconn_do_delconn+0x1a4>
          return;
 800d132:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800d134:	3710      	adds	r7, #16
 800d136:	46bd      	mov	sp, r7
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	bf00      	nop
 800d13c:	08021ac0 	.word	0x08021ac0
 800d140:	08021e30 	.word	0x08021e30
 800d144:	08021b04 	.word	0x08021b04
 800d148:	08021e44 	.word	0x08021e44
 800d14c:	08021e64 	.word	0x08021e64
 800d150:	08021e80 	.word	0x08021e80
 800d154:	2000aee4 	.word	0x2000aee4

0800d158 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b088      	sub	sp, #32
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	60b9      	str	r1, [r7, #8]
 800d162:	4613      	mov	r3, r2
 800d164:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800d166:	2300      	movs	r3, #0
 800d168:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800d16e:	69bb      	ldr	r3, [r7, #24]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d102      	bne.n	800d17a <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800d174:	f06f 0305 	mvn.w	r3, #5
 800d178:	e070      	b.n	800d25c <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800d17a:	69bb      	ldr	r3, [r7, #24]
 800d17c:	785b      	ldrb	r3, [r3, #1]
 800d17e:	2b03      	cmp	r3, #3
 800d180:	d006      	beq.n	800d190 <lwip_netconn_do_connected+0x38>
 800d182:	4b38      	ldr	r3, [pc, #224]	@ (800d264 <lwip_netconn_do_connected+0x10c>)
 800d184:	f240 5223 	movw	r2, #1315	@ 0x523
 800d188:	4937      	ldr	r1, [pc, #220]	@ (800d268 <lwip_netconn_do_connected+0x110>)
 800d18a:	4838      	ldr	r0, [pc, #224]	@ (800d26c <lwip_netconn_do_connected+0x114>)
 800d18c:	f010 fdfe 	bl	801dd8c <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	6a1b      	ldr	r3, [r3, #32]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d10c      	bne.n	800d1b2 <lwip_netconn_do_connected+0x5a>
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	7f1b      	ldrb	r3, [r3, #28]
 800d19c:	f003 0304 	and.w	r3, r3, #4
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d106      	bne.n	800d1b2 <lwip_netconn_do_connected+0x5a>
 800d1a4:	4b2f      	ldr	r3, [pc, #188]	@ (800d264 <lwip_netconn_do_connected+0x10c>)
 800d1a6:	f240 5224 	movw	r2, #1316	@ 0x524
 800d1aa:	4931      	ldr	r1, [pc, #196]	@ (800d270 <lwip_netconn_do_connected+0x118>)
 800d1ac:	482f      	ldr	r0, [pc, #188]	@ (800d26c <lwip_netconn_do_connected+0x114>)
 800d1ae:	f010 fded 	bl	801dd8c <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800d1b2:	69bb      	ldr	r3, [r7, #24]
 800d1b4:	6a1b      	ldr	r3, [r3, #32]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d008      	beq.n	800d1cc <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800d1ba:	69bb      	ldr	r3, [r7, #24]
 800d1bc:	6a1b      	ldr	r3, [r3, #32]
 800d1be:	79fa      	ldrb	r2, [r7, #7]
 800d1c0:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d1c2:	69bb      	ldr	r3, [r7, #24]
 800d1c4:	6a1b      	ldr	r3, [r3, #32]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	330c      	adds	r3, #12
 800d1ca:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800d1cc:	69bb      	ldr	r3, [r7, #24]
 800d1ce:	781b      	ldrb	r3, [r3, #0]
 800d1d0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d1d4:	2b10      	cmp	r3, #16
 800d1d6:	d106      	bne.n	800d1e6 <lwip_netconn_do_connected+0x8e>
 800d1d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d102      	bne.n	800d1e6 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800d1e0:	69b8      	ldr	r0, [r7, #24]
 800d1e2:	f7ff fb8d 	bl	800c900 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	7f1b      	ldrb	r3, [r3, #28]
 800d1ea:	f003 0304 	and.w	r3, r3, #4
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	bf0c      	ite	eq
 800d1f2:	2301      	moveq	r3, #1
 800d1f4:	2300      	movne	r3, #0
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800d1fa:	69bb      	ldr	r3, [r7, #24]
 800d1fc:	7f1b      	ldrb	r3, [r3, #28]
 800d1fe:	f023 0304 	bic.w	r3, r3, #4
 800d202:	b2da      	uxtb	r2, r3
 800d204:	69bb      	ldr	r3, [r7, #24]
 800d206:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d002      	beq.n	800d214 <lwip_netconn_do_connected+0xbc>
 800d20e:	69fb      	ldr	r3, [r7, #28]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d10c      	bne.n	800d22e <lwip_netconn_do_connected+0xd6>
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d102      	bne.n	800d220 <lwip_netconn_do_connected+0xc8>
 800d21a:	69fb      	ldr	r3, [r7, #28]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d006      	beq.n	800d22e <lwip_netconn_do_connected+0xd6>
 800d220:	4b10      	ldr	r3, [pc, #64]	@ (800d264 <lwip_netconn_do_connected+0x10c>)
 800d222:	f44f 62a6 	mov.w	r2, #1328	@ 0x530
 800d226:	4913      	ldr	r1, [pc, #76]	@ (800d274 <lwip_netconn_do_connected+0x11c>)
 800d228:	4810      	ldr	r0, [pc, #64]	@ (800d26c <lwip_netconn_do_connected+0x114>)
 800d22a:	f010 fdaf 	bl	801dd8c <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800d22e:	69bb      	ldr	r3, [r7, #24]
 800d230:	2200      	movs	r2, #0
 800d232:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800d234:	69bb      	ldr	r3, [r7, #24]
 800d236:	2200      	movs	r2, #0
 800d238:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800d23a:	69bb      	ldr	r3, [r7, #24]
 800d23c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d005      	beq.n	800d24e <lwip_netconn_do_connected+0xf6>
 800d242:	69bb      	ldr	r3, [r7, #24]
 800d244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d246:	2200      	movs	r2, #0
 800d248:	2102      	movs	r1, #2
 800d24a:	69b8      	ldr	r0, [r7, #24]
 800d24c:	4798      	blx	r3

  if (was_blocking) {
 800d24e:	697b      	ldr	r3, [r7, #20]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d002      	beq.n	800d25a <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800d254:	69f8      	ldr	r0, [r7, #28]
 800d256:	f00f fcfd 	bl	801cc54 <sys_sem_signal>
  }
  return ERR_OK;
 800d25a:	2300      	movs	r3, #0
}
 800d25c:	4618      	mov	r0, r3
 800d25e:	3720      	adds	r7, #32
 800d260:	46bd      	mov	sp, r7
 800d262:	bd80      	pop	{r7, pc}
 800d264:	08021ac0 	.word	0x08021ac0
 800d268:	08021e88 	.word	0x08021e88
 800d26c:	08021b04 	.word	0x08021b04
 800d270:	08021ea8 	.word	0x08021ea8
 800d274:	08021ee8 	.word	0x08021ee8

0800d278 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b086      	sub	sp, #24
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d102      	bne.n	800d294 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800d28e:	23f1      	movs	r3, #241	@ 0xf1
 800d290:	75fb      	strb	r3, [r7, #23]
 800d292:	e09b      	b.n	800d3cc <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d294:	693b      	ldr	r3, [r7, #16]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	781b      	ldrb	r3, [r3, #0]
 800d29a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d29e:	2b10      	cmp	r3, #16
 800d2a0:	d00f      	beq.n	800d2c2 <lwip_netconn_do_connect+0x4a>
 800d2a2:	2b20      	cmp	r3, #32
 800d2a4:	f040 8087 	bne.w	800d3b6 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	6858      	ldr	r0, [r3, #4]
 800d2ae:	693b      	ldr	r3, [r7, #16]
 800d2b0:	6899      	ldr	r1, [r3, #8]
 800d2b2:	693b      	ldr	r3, [r7, #16]
 800d2b4:	899b      	ldrh	r3, [r3, #12]
 800d2b6:	461a      	mov	r2, r3
 800d2b8:	f00a ff90 	bl	80181dc <udp_connect>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	75fb      	strb	r3, [r7, #23]
        break;
 800d2c0:	e084      	b.n	800d3cc <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	785b      	ldrb	r3, [r3, #1]
 800d2c8:	2b03      	cmp	r3, #3
 800d2ca:	d102      	bne.n	800d2d2 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800d2cc:	23f7      	movs	r3, #247	@ 0xf7
 800d2ce:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800d2d0:	e07b      	b.n	800d3ca <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	785b      	ldrb	r3, [r3, #1]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d002      	beq.n	800d2e2 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800d2dc:	23f6      	movs	r3, #246	@ 0xf6
 800d2de:	75fb      	strb	r3, [r7, #23]
        break;
 800d2e0:	e073      	b.n	800d3ca <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800d2e2:	693b      	ldr	r3, [r7, #16]
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	f7ff fb0a 	bl	800c900 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	6858      	ldr	r0, [r3, #4]
 800d2f2:	693b      	ldr	r3, [r7, #16]
 800d2f4:	6899      	ldr	r1, [r3, #8]
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	899a      	ldrh	r2, [r3, #12]
 800d2fa:	4b38      	ldr	r3, [pc, #224]	@ (800d3dc <lwip_netconn_do_connect+0x164>)
 800d2fc:	f004 fdda 	bl	8011eb4 <tcp_connect>
 800d300:	4603      	mov	r3, r0
 800d302:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800d304:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	d15e      	bne.n	800d3ca <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800d30c:	693b      	ldr	r3, [r7, #16]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	7f1b      	ldrb	r3, [r3, #28]
 800d312:	f003 0302 	and.w	r3, r3, #2
 800d316:	2b00      	cmp	r3, #0
 800d318:	bf14      	ite	ne
 800d31a:	2301      	movne	r3, #1
 800d31c:	2300      	moveq	r3, #0
 800d31e:	b2db      	uxtb	r3, r3
 800d320:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2203      	movs	r2, #3
 800d328:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800d32a:	7bfb      	ldrb	r3, [r7, #15]
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d009      	beq.n	800d344 <lwip_netconn_do_connect+0xcc>
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	7f1a      	ldrb	r2, [r3, #28]
 800d336:	693b      	ldr	r3, [r7, #16]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	f042 0204 	orr.w	r2, r2, #4
 800d33e:	b2d2      	uxtb	r2, r2
 800d340:	771a      	strb	r2, [r3, #28]
 800d342:	e008      	b.n	800d356 <lwip_netconn_do_connect+0xde>
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	7f1a      	ldrb	r2, [r3, #28]
 800d34a:	693b      	ldr	r3, [r7, #16]
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	f022 0204 	bic.w	r2, r2, #4
 800d352:	b2d2      	uxtb	r2, r2
 800d354:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800d356:	7bfb      	ldrb	r3, [r7, #15]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d002      	beq.n	800d362 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800d35c:	23fb      	movs	r3, #251	@ 0xfb
 800d35e:	75fb      	strb	r3, [r7, #23]
        break;
 800d360:	e033      	b.n	800d3ca <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800d362:	693b      	ldr	r3, [r7, #16]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	693a      	ldr	r2, [r7, #16]
 800d368:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800d36a:	693b      	ldr	r3, [r7, #16]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	785b      	ldrb	r3, [r3, #1]
 800d370:	2b03      	cmp	r3, #3
 800d372:	d006      	beq.n	800d382 <lwip_netconn_do_connect+0x10a>
 800d374:	4b1a      	ldr	r3, [pc, #104]	@ (800d3e0 <lwip_netconn_do_connect+0x168>)
 800d376:	f44f 62ae 	mov.w	r2, #1392	@ 0x570
 800d37a:	491a      	ldr	r1, [pc, #104]	@ (800d3e4 <lwip_netconn_do_connect+0x16c>)
 800d37c:	481a      	ldr	r0, [pc, #104]	@ (800d3e8 <lwip_netconn_do_connect+0x170>)
 800d37e:	f010 fd05 	bl	801dd8c <iprintf>
              UNLOCK_TCPIP_CORE();
 800d382:	481a      	ldr	r0, [pc, #104]	@ (800d3ec <lwip_netconn_do_connect+0x174>)
 800d384:	f00f fccf 	bl	801cd26 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d388:	693b      	ldr	r3, [r7, #16]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	330c      	adds	r3, #12
 800d38e:	2100      	movs	r1, #0
 800d390:	4618      	mov	r0, r3
 800d392:	f00f fc2e 	bl	801cbf2 <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800d396:	4815      	ldr	r0, [pc, #84]	@ (800d3ec <lwip_netconn_do_connect+0x174>)
 800d398:	f00f fcb6 	bl	801cd08 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800d39c:	693b      	ldr	r3, [r7, #16]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	785b      	ldrb	r3, [r3, #1]
 800d3a2:	2b03      	cmp	r3, #3
 800d3a4:	d116      	bne.n	800d3d4 <lwip_netconn_do_connect+0x15c>
 800d3a6:	4b0e      	ldr	r3, [pc, #56]	@ (800d3e0 <lwip_netconn_do_connect+0x168>)
 800d3a8:	f240 5274 	movw	r2, #1396	@ 0x574
 800d3ac:	490d      	ldr	r1, [pc, #52]	@ (800d3e4 <lwip_netconn_do_connect+0x16c>)
 800d3ae:	480e      	ldr	r0, [pc, #56]	@ (800d3e8 <lwip_netconn_do_connect+0x170>)
 800d3b0:	f010 fcec 	bl	801dd8c <iprintf>
              return;
 800d3b4:	e00e      	b.n	800d3d4 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800d3b6:	4b0a      	ldr	r3, [pc, #40]	@ (800d3e0 <lwip_netconn_do_connect+0x168>)
 800d3b8:	f240 527d 	movw	r2, #1405	@ 0x57d
 800d3bc:	490c      	ldr	r1, [pc, #48]	@ (800d3f0 <lwip_netconn_do_connect+0x178>)
 800d3be:	480a      	ldr	r0, [pc, #40]	@ (800d3e8 <lwip_netconn_do_connect+0x170>)
 800d3c0:	f010 fce4 	bl	801dd8c <iprintf>
 800d3c4:	23fa      	movs	r3, #250	@ 0xfa
 800d3c6:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800d3c8:	e000      	b.n	800d3cc <lwip_netconn_do_connect+0x154>
        break;
 800d3ca:	bf00      	nop
    }
  }
  msg->err = err;
 800d3cc:	693b      	ldr	r3, [r7, #16]
 800d3ce:	7dfa      	ldrb	r2, [r7, #23]
 800d3d0:	711a      	strb	r2, [r3, #4]
 800d3d2:	e000      	b.n	800d3d6 <lwip_netconn_do_connect+0x15e>
              return;
 800d3d4:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800d3d6:	3718      	adds	r7, #24
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	bd80      	pop	{r7, pc}
 800d3dc:	0800d159 	.word	0x0800d159
 800d3e0:	08021ac0 	.word	0x08021ac0
 800d3e4:	08021e80 	.word	0x08021e80
 800d3e8:	08021b04 	.word	0x08021b04
 800d3ec:	2000aee4 	.word	0x2000aee4
 800d3f0:	08021f08 	.word	0x08021f08

0800d3f4 <lwip_netconn_do_disconnect>:
 *
 * @param m the api_msg pointing to the connection to disconnect
 */
void
lwip_netconn_do_disconnect(void *m)
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b084      	sub	sp, #16
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	60fb      	str	r3, [r7, #12]

#if LWIP_UDP
  if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_UDP) {
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	781b      	ldrb	r3, [r3, #0]
 800d406:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d40a:	2b20      	cmp	r3, #32
 800d40c:	d109      	bne.n	800d422 <lwip_netconn_do_disconnect+0x2e>
    udp_disconnect(msg->conn->pcb.udp);
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	685b      	ldr	r3, [r3, #4]
 800d414:	4618      	mov	r0, r3
 800d416:	f00a ff4f 	bl	80182b8 <udp_disconnect>
    msg->err = ERR_OK;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	2200      	movs	r2, #0
 800d41e:	711a      	strb	r2, [r3, #4]
#endif /* LWIP_UDP */
  {
    msg->err = ERR_VAL;
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d420:	e002      	b.n	800d428 <lwip_netconn_do_disconnect+0x34>
    msg->err = ERR_VAL;
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	22fa      	movs	r2, #250	@ 0xfa
 800d426:	711a      	strb	r2, [r3, #4]
}
 800d428:	bf00      	nop
 800d42a:	3710      	adds	r7, #16
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	4618      	mov	r0, r3
 800d442:	f7fe ff3f 	bl	800c2c4 <netconn_err>
 800d446:	4603      	mov	r3, r0
 800d448:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d44a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d134      	bne.n	800d4bc <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d02d      	beq.n	800d4b8 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d466:	2b20      	cmp	r3, #32
 800d468:	d123      	bne.n	800d4b2 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	689b      	ldr	r3, [r3, #8]
 800d46e:	689b      	ldr	r3, [r3, #8]
 800d470:	2b00      	cmp	r3, #0
 800d472:	d10c      	bne.n	800d48e <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	685a      	ldr	r2, [r3, #4]
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	689b      	ldr	r3, [r3, #8]
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4619      	mov	r1, r3
 800d482:	4610      	mov	r0, r2
 800d484:	f00a fc38 	bl	8017cf8 <udp_send>
 800d488:	4603      	mov	r3, r0
 800d48a:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800d48c:	e016      	b.n	800d4bc <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800d48e:	68bb      	ldr	r3, [r7, #8]
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	6858      	ldr	r0, [r3, #4]
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	689b      	ldr	r3, [r3, #8]
 800d498:	6819      	ldr	r1, [r3, #0]
 800d49a:	68bb      	ldr	r3, [r7, #8]
 800d49c:	689b      	ldr	r3, [r3, #8]
 800d49e:	f103 0208 	add.w	r2, r3, #8
 800d4a2:	68bb      	ldr	r3, [r7, #8]
 800d4a4:	689b      	ldr	r3, [r3, #8]
 800d4a6:	899b      	ldrh	r3, [r3, #12]
 800d4a8:	f00a fc5a 	bl	8017d60 <udp_sendto>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	73fb      	strb	r3, [r7, #15]
          break;
 800d4b0:	e004      	b.n	800d4bc <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800d4b2:	23f5      	movs	r3, #245	@ 0xf5
 800d4b4:	73fb      	strb	r3, [r7, #15]
          break;
 800d4b6:	e001      	b.n	800d4bc <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800d4b8:	23f5      	movs	r3, #245	@ 0xf5
 800d4ba:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800d4bc:	68bb      	ldr	r3, [r7, #8]
 800d4be:	7bfa      	ldrb	r2, [r7, #15]
 800d4c0:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800d4c2:	bf00      	nop
 800d4c4:	3710      	adds	r7, #16
 800d4c6:	46bd      	mov	sp, r7
 800d4c8:	bd80      	pop	{r7, pc}

0800d4ca <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800d4ca:	b580      	push	{r7, lr}
 800d4cc:	b086      	sub	sp, #24
 800d4ce:	af00      	add	r7, sp, #0
 800d4d0:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800d4d6:	693b      	ldr	r3, [r7, #16]
 800d4d8:	2200      	movs	r2, #0
 800d4da:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	681b      	ldr	r3, [r3, #0]
 800d4e0:	685b      	ldr	r3, [r3, #4]
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d022      	beq.n	800d52c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	681b      	ldr	r3, [r3, #0]
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d4f0:	2b10      	cmp	r3, #16
 800d4f2:	d11b      	bne.n	800d52c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800d4f4:	693b      	ldr	r3, [r7, #16]
 800d4f6:	689b      	ldr	r3, [r3, #8]
 800d4f8:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d500:	d202      	bcs.n	800d508 <lwip_netconn_do_recv+0x3e>
 800d502:	697b      	ldr	r3, [r7, #20]
 800d504:	b29b      	uxth	r3, r3
 800d506:	e001      	b.n	800d50c <lwip_netconn_do_recv+0x42>
 800d508:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d50c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800d50e:	693b      	ldr	r3, [r7, #16]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	685b      	ldr	r3, [r3, #4]
 800d514:	89fa      	ldrh	r2, [r7, #14]
 800d516:	4611      	mov	r1, r2
 800d518:	4618      	mov	r0, r3
 800d51a:	f004 fc35 	bl	8011d88 <tcp_recved>
        remaining -= recved;
 800d51e:	89fb      	ldrh	r3, [r7, #14]
 800d520:	697a      	ldr	r2, [r7, #20]
 800d522:	1ad3      	subs	r3, r2, r3
 800d524:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d1e6      	bne.n	800d4fa <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800d52c:	bf00      	nop
 800d52e:	3718      	adds	r7, #24
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b088      	sub	sp, #32
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
 800d53c:	460b      	mov	r3, r1
 800d53e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800d540:	2300      	movs	r3, #0
 800d542:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d106      	bne.n	800d558 <lwip_netconn_do_writemore+0x24>
 800d54a:	4b96      	ldr	r3, [pc, #600]	@ (800d7a4 <lwip_netconn_do_writemore+0x270>)
 800d54c:	f240 6273 	movw	r2, #1651	@ 0x673
 800d550:	4995      	ldr	r1, [pc, #596]	@ (800d7a8 <lwip_netconn_do_writemore+0x274>)
 800d552:	4896      	ldr	r0, [pc, #600]	@ (800d7ac <lwip_netconn_do_writemore+0x278>)
 800d554:	f010 fc1a 	bl	801dd8c <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	785b      	ldrb	r3, [r3, #1]
 800d55c:	2b01      	cmp	r3, #1
 800d55e:	d006      	beq.n	800d56e <lwip_netconn_do_writemore+0x3a>
 800d560:	4b90      	ldr	r3, [pc, #576]	@ (800d7a4 <lwip_netconn_do_writemore+0x270>)
 800d562:	f240 6274 	movw	r2, #1652	@ 0x674
 800d566:	4992      	ldr	r1, [pc, #584]	@ (800d7b0 <lwip_netconn_do_writemore+0x27c>)
 800d568:	4890      	ldr	r0, [pc, #576]	@ (800d7ac <lwip_netconn_do_writemore+0x278>)
 800d56a:	f010 fc0f 	bl	801dd8c <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	6a1b      	ldr	r3, [r3, #32]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d106      	bne.n	800d584 <lwip_netconn_do_writemore+0x50>
 800d576:	4b8b      	ldr	r3, [pc, #556]	@ (800d7a4 <lwip_netconn_do_writemore+0x270>)
 800d578:	f240 6275 	movw	r2, #1653	@ 0x675
 800d57c:	498d      	ldr	r1, [pc, #564]	@ (800d7b4 <lwip_netconn_do_writemore+0x280>)
 800d57e:	488b      	ldr	r0, [pc, #556]	@ (800d7ac <lwip_netconn_do_writemore+0x278>)
 800d580:	f010 fc04 	bl	801dd8c <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	685b      	ldr	r3, [r3, #4]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d106      	bne.n	800d59a <lwip_netconn_do_writemore+0x66>
 800d58c:	4b85      	ldr	r3, [pc, #532]	@ (800d7a4 <lwip_netconn_do_writemore+0x270>)
 800d58e:	f240 6276 	movw	r2, #1654	@ 0x676
 800d592:	4989      	ldr	r1, [pc, #548]	@ (800d7b8 <lwip_netconn_do_writemore+0x284>)
 800d594:	4885      	ldr	r0, [pc, #532]	@ (800d7ac <lwip_netconn_do_writemore+0x278>)
 800d596:	f010 fbf9 	bl	801dd8c <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	6a1b      	ldr	r3, [r3, #32]
 800d59e:	699a      	ldr	r2, [r3, #24]
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	6a1b      	ldr	r3, [r3, #32]
 800d5a4:	695b      	ldr	r3, [r3, #20]
 800d5a6:	429a      	cmp	r2, r3
 800d5a8:	d306      	bcc.n	800d5b8 <lwip_netconn_do_writemore+0x84>
 800d5aa:	4b7e      	ldr	r3, [pc, #504]	@ (800d7a4 <lwip_netconn_do_writemore+0x270>)
 800d5ac:	f240 6277 	movw	r2, #1655	@ 0x677
 800d5b0:	4982      	ldr	r1, [pc, #520]	@ (800d7bc <lwip_netconn_do_writemore+0x288>)
 800d5b2:	487e      	ldr	r0, [pc, #504]	@ (800d7ac <lwip_netconn_do_writemore+0x278>)
 800d5b4:	f010 fbea 	bl	801dd8c <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6a1b      	ldr	r3, [r3, #32]
 800d5bc:	899b      	ldrh	r3, [r3, #12]
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d106      	bne.n	800d5d0 <lwip_netconn_do_writemore+0x9c>
 800d5c2:	4b78      	ldr	r3, [pc, #480]	@ (800d7a4 <lwip_netconn_do_writemore+0x270>)
 800d5c4:	f240 6279 	movw	r2, #1657	@ 0x679
 800d5c8:	497d      	ldr	r1, [pc, #500]	@ (800d7c0 <lwip_netconn_do_writemore+0x28c>)
 800d5ca:	4878      	ldr	r0, [pc, #480]	@ (800d7ac <lwip_netconn_do_writemore+0x278>)
 800d5cc:	f010 fbde 	bl	801dd8c <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6a1b      	ldr	r3, [r3, #32]
 800d5d4:	7f1b      	ldrb	r3, [r3, #28]
 800d5d6:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	7f1b      	ldrb	r3, [r3, #28]
 800d5dc:	f003 0302 	and.w	r3, r3, #2
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d104      	bne.n	800d5ee <lwip_netconn_do_writemore+0xba>
 800d5e4:	7ebb      	ldrb	r3, [r7, #26]
 800d5e6:	f003 0304 	and.w	r3, r3, #4
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d001      	beq.n	800d5f2 <lwip_netconn_do_writemore+0xbe>
 800d5ee:	2301      	movs	r3, #1
 800d5f0:	e000      	b.n	800d5f4 <lwip_netconn_do_writemore+0xc0>
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	6a1b      	ldr	r3, [r3, #32]
 800d5fa:	689b      	ldr	r3, [r3, #8]
 800d5fc:	681a      	ldr	r2, [r3, #0]
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	6a1b      	ldr	r3, [r3, #32]
 800d602:	691b      	ldr	r3, [r3, #16]
 800d604:	4413      	add	r3, r2
 800d606:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6a1b      	ldr	r3, [r3, #32]
 800d60c:	689b      	ldr	r3, [r3, #8]
 800d60e:	685a      	ldr	r2, [r3, #4]
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6a1b      	ldr	r3, [r3, #32]
 800d614:	691b      	ldr	r3, [r3, #16]
 800d616:	1ad3      	subs	r3, r2, r3
 800d618:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800d61a:	693b      	ldr	r3, [r7, #16]
 800d61c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d620:	d307      	bcc.n	800d632 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800d622:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d626:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800d628:	7ebb      	ldrb	r3, [r7, #26]
 800d62a:	f043 0302 	orr.w	r3, r3, #2
 800d62e:	76bb      	strb	r3, [r7, #26]
 800d630:	e001      	b.n	800d636 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800d632:	693b      	ldr	r3, [r7, #16]
 800d634:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	685b      	ldr	r3, [r3, #4]
 800d63a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d63e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800d640:	89fa      	ldrh	r2, [r7, #14]
 800d642:	8bbb      	ldrh	r3, [r7, #28]
 800d644:	429a      	cmp	r2, r3
 800d646:	d216      	bcs.n	800d676 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800d648:	89fb      	ldrh	r3, [r7, #14]
 800d64a:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800d64c:	7e3b      	ldrb	r3, [r7, #24]
 800d64e:	2b00      	cmp	r3, #0
 800d650:	d00d      	beq.n	800d66e <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800d652:	8bbb      	ldrh	r3, [r7, #28]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d10e      	bne.n	800d676 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6a1b      	ldr	r3, [r3, #32]
 800d65c:	699b      	ldr	r3, [r3, #24]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d102      	bne.n	800d668 <lwip_netconn_do_writemore+0x134>
 800d662:	f06f 0306 	mvn.w	r3, #6
 800d666:	e000      	b.n	800d66a <lwip_netconn_do_writemore+0x136>
 800d668:	2300      	movs	r3, #0
 800d66a:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800d66c:	e07d      	b.n	800d76a <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800d66e:	7ebb      	ldrb	r3, [r7, #26]
 800d670:	f043 0302 	orr.w	r3, r3, #2
 800d674:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6a1b      	ldr	r3, [r3, #32]
 800d67a:	691a      	ldr	r2, [r3, #16]
 800d67c:	8bbb      	ldrh	r3, [r7, #28]
 800d67e:	441a      	add	r2, r3
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	6a1b      	ldr	r3, [r3, #32]
 800d684:	689b      	ldr	r3, [r3, #8]
 800d686:	685b      	ldr	r3, [r3, #4]
 800d688:	429a      	cmp	r2, r3
 800d68a:	d906      	bls.n	800d69a <lwip_netconn_do_writemore+0x166>
 800d68c:	4b45      	ldr	r3, [pc, #276]	@ (800d7a4 <lwip_netconn_do_writemore+0x270>)
 800d68e:	f240 62a3 	movw	r2, #1699	@ 0x6a3
 800d692:	494c      	ldr	r1, [pc, #304]	@ (800d7c4 <lwip_netconn_do_writemore+0x290>)
 800d694:	4845      	ldr	r0, [pc, #276]	@ (800d7ac <lwip_netconn_do_writemore+0x278>)
 800d696:	f010 fb79 	bl	801dd8c <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800d69a:	8bbb      	ldrh	r3, [r7, #28]
 800d69c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d6a0:	4293      	cmp	r3, r2
 800d6a2:	d103      	bne.n	800d6ac <lwip_netconn_do_writemore+0x178>
 800d6a4:	693b      	ldr	r3, [r7, #16]
 800d6a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d6aa:	d209      	bcs.n	800d6c0 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800d6b0:	8bba      	ldrh	r2, [r7, #28]
 800d6b2:	429a      	cmp	r2, r3
 800d6b4:	d10b      	bne.n	800d6ce <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	6a1b      	ldr	r3, [r3, #32]
 800d6ba:	899b      	ldrh	r3, [r3, #12]
 800d6bc:	2b01      	cmp	r3, #1
 800d6be:	d906      	bls.n	800d6ce <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800d6c0:	2301      	movs	r3, #1
 800d6c2:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800d6c4:	7ebb      	ldrb	r3, [r7, #26]
 800d6c6:	f043 0302 	orr.w	r3, r3, #2
 800d6ca:	76bb      	strb	r3, [r7, #26]
 800d6cc:	e001      	b.n	800d6d2 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	6858      	ldr	r0, [r3, #4]
 800d6d6:	7ebb      	ldrb	r3, [r7, #26]
 800d6d8:	8bba      	ldrh	r2, [r7, #28]
 800d6da:	6979      	ldr	r1, [r7, #20]
 800d6dc:	f008 fa70 	bl	8015bc0 <tcp_write>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800d6e4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d12c      	bne.n	800d746 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6a1b      	ldr	r3, [r3, #32]
 800d6f0:	6999      	ldr	r1, [r3, #24]
 800d6f2:	8bba      	ldrh	r2, [r7, #28]
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	6a1b      	ldr	r3, [r3, #32]
 800d6f8:	440a      	add	r2, r1
 800d6fa:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	6a1b      	ldr	r3, [r3, #32]
 800d700:	6919      	ldr	r1, [r3, #16]
 800d702:	8bba      	ldrh	r2, [r7, #28]
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	6a1b      	ldr	r3, [r3, #32]
 800d708:	440a      	add	r2, r1
 800d70a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	6a1b      	ldr	r3, [r3, #32]
 800d710:	691a      	ldr	r2, [r3, #16]
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6a1b      	ldr	r3, [r3, #32]
 800d716:	689b      	ldr	r3, [r3, #8]
 800d718:	685b      	ldr	r3, [r3, #4]
 800d71a:	429a      	cmp	r2, r3
 800d71c:	d113      	bne.n	800d746 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	6a1b      	ldr	r3, [r3, #32]
 800d722:	899a      	ldrh	r2, [r3, #12]
 800d724:	3a01      	subs	r2, #1
 800d726:	b292      	uxth	r2, r2
 800d728:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	6a1b      	ldr	r3, [r3, #32]
 800d72e:	899b      	ldrh	r3, [r3, #12]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d008      	beq.n	800d746 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	6a1b      	ldr	r3, [r3, #32]
 800d738:	689a      	ldr	r2, [r3, #8]
 800d73a:	3208      	adds	r2, #8
 800d73c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6a1b      	ldr	r3, [r3, #32]
 800d742:	2200      	movs	r2, #0
 800d744:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800d746:	7e7b      	ldrb	r3, [r7, #25]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d004      	beq.n	800d756 <lwip_netconn_do_writemore+0x222>
 800d74c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d750:	2b00      	cmp	r3, #0
 800d752:	f43f af50 	beq.w	800d5f6 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800d756:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d004      	beq.n	800d768 <lwip_netconn_do_writemore+0x234>
 800d75e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d762:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d766:	d146      	bne.n	800d7f6 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800d768:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800d76a:	7e3b      	ldrb	r3, [r7, #24]
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d02b      	beq.n	800d7c8 <lwip_netconn_do_writemore+0x294>
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	6a1b      	ldr	r3, [r3, #32]
 800d774:	699a      	ldr	r2, [r3, #24]
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6a1b      	ldr	r3, [r3, #32]
 800d77a:	695b      	ldr	r3, [r3, #20]
 800d77c:	429a      	cmp	r2, r3
 800d77e:	d223      	bcs.n	800d7c8 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d784:	2b00      	cmp	r3, #0
 800d786:	d005      	beq.n	800d794 <lwip_netconn_do_writemore+0x260>
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d78c:	2200      	movs	r2, #0
 800d78e:	2103      	movs	r1, #3
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	7f1b      	ldrb	r3, [r3, #28]
 800d798:	f043 0310 	orr.w	r3, r3, #16
 800d79c:	b2da      	uxtb	r2, r3
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	771a      	strb	r2, [r3, #28]
 800d7a2:	e028      	b.n	800d7f6 <lwip_netconn_do_writemore+0x2c2>
 800d7a4:	08021ac0 	.word	0x08021ac0
 800d7a8:	08021c18 	.word	0x08021c18
 800d7ac:	08021b04 	.word	0x08021b04
 800d7b0:	08021f20 	.word	0x08021f20
 800d7b4:	08021c28 	.word	0x08021c28
 800d7b8:	08021f40 	.word	0x08021f40
 800d7bc:	08021f58 	.word	0x08021f58
 800d7c0:	08021f98 	.word	0x08021f98
 800d7c4:	08021fc0 	.word	0x08021fc0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	685b      	ldr	r3, [r3, #4]
 800d7cc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800d7d0:	f5b3 6f86 	cmp.w	r3, #1072	@ 0x430
 800d7d4:	d305      	bcc.n	800d7e2 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	685b      	ldr	r3, [r3, #4]
 800d7da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800d7de:	2b04      	cmp	r3, #4
 800d7e0:	d909      	bls.n	800d7f6 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d005      	beq.n	800d7f6 <lwip_netconn_do_writemore+0x2c2>
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	2103      	movs	r1, #3
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800d7f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d11d      	bne.n	800d83a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6a1b      	ldr	r3, [r3, #32]
 800d802:	699a      	ldr	r2, [r3, #24]
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	6a1b      	ldr	r3, [r3, #32]
 800d808:	695b      	ldr	r3, [r3, #20]
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d002      	beq.n	800d814 <lwip_netconn_do_writemore+0x2e0>
 800d80e:	7e3b      	ldrb	r3, [r7, #24]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d001      	beq.n	800d818 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800d814:	2301      	movs	r3, #1
 800d816:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	685b      	ldr	r3, [r3, #4]
 800d81c:	4618      	mov	r0, r3
 800d81e:	f008 ffb9 	bl	8016794 <tcp_output>
 800d822:	4603      	mov	r3, r0
 800d824:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800d826:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800d82a:	f113 0f04 	cmn.w	r3, #4
 800d82e:	d12c      	bne.n	800d88a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d830:	7b3b      	ldrb	r3, [r7, #12]
 800d832:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d834:	2301      	movs	r3, #1
 800d836:	76fb      	strb	r3, [r7, #27]
 800d838:	e027      	b.n	800d88a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800d83a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800d83e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d842:	d120      	bne.n	800d886 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	685b      	ldr	r3, [r3, #4]
 800d848:	4618      	mov	r0, r3
 800d84a:	f008 ffa3 	bl	8016794 <tcp_output>
 800d84e:	4603      	mov	r3, r0
 800d850:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800d852:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800d856:	f113 0f04 	cmn.w	r3, #4
 800d85a:	d104      	bne.n	800d866 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800d85c:	7b7b      	ldrb	r3, [r7, #13]
 800d85e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d860:	2301      	movs	r3, #1
 800d862:	76fb      	strb	r3, [r7, #27]
 800d864:	e011      	b.n	800d88a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800d866:	7e3b      	ldrb	r3, [r7, #24]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d00e      	beq.n	800d88a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	6a1b      	ldr	r3, [r3, #32]
 800d870:	699b      	ldr	r3, [r3, #24]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d102      	bne.n	800d87c <lwip_netconn_do_writemore+0x348>
 800d876:	f06f 0306 	mvn.w	r3, #6
 800d87a:	e000      	b.n	800d87e <lwip_netconn_do_writemore+0x34a>
 800d87c:	2300      	movs	r3, #0
 800d87e:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800d880:	2301      	movs	r3, #1
 800d882:	76fb      	strb	r3, [r7, #27]
 800d884:	e001      	b.n	800d88a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800d886:	2301      	movs	r3, #1
 800d888:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800d88a:	7efb      	ldrb	r3, [r7, #27]
 800d88c:	2b00      	cmp	r3, #0
 800d88e:	d015      	beq.n	800d8bc <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	6a1b      	ldr	r3, [r3, #32]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	330c      	adds	r3, #12
 800d898:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	6a1b      	ldr	r3, [r3, #32]
 800d89e:	7ffa      	ldrb	r2, [r7, #31]
 800d8a0:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2200      	movs	r2, #0
 800d8ac:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800d8ae:	78fb      	ldrb	r3, [r7, #3]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d006      	beq.n	800d8c2 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800d8b4:	68b8      	ldr	r0, [r7, #8]
 800d8b6:	f00f f9cd 	bl	801cc54 <sys_sem_signal>
 800d8ba:	e002      	b.n	800d8c2 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800d8bc:	f04f 33ff 	mov.w	r3, #4294967295
 800d8c0:	e000      	b.n	800d8c4 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800d8c2:	2300      	movs	r3, #0
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3720      	adds	r7, #32
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800d8d8:	68bb      	ldr	r3, [r7, #8]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4618      	mov	r0, r3
 800d8de:	f7fe fcf1 	bl	800c2c4 <netconn_err>
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d8e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d166      	bne.n	800d9bc <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	681b      	ldr	r3, [r3, #0]
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d8f8:	2b10      	cmp	r3, #16
 800d8fa:	d15d      	bne.n	800d9b8 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	785b      	ldrb	r3, [r3, #1]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d002      	beq.n	800d90c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800d906:	23fb      	movs	r3, #251	@ 0xfb
 800d908:	73fb      	strb	r3, [r7, #15]
 800d90a:	e057      	b.n	800d9bc <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800d90c:	68bb      	ldr	r3, [r7, #8]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	685b      	ldr	r3, [r3, #4]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d04d      	beq.n	800d9b2 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	2201      	movs	r2, #1
 800d91c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800d91e:	68bb      	ldr	r3, [r7, #8]
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	6a1b      	ldr	r3, [r3, #32]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d006      	beq.n	800d936 <lwip_netconn_do_write+0x6a>
 800d928:	4b28      	ldr	r3, [pc, #160]	@ (800d9cc <lwip_netconn_do_write+0x100>)
 800d92a:	f240 7223 	movw	r2, #1827	@ 0x723
 800d92e:	4928      	ldr	r1, [pc, #160]	@ (800d9d0 <lwip_netconn_do_write+0x104>)
 800d930:	4828      	ldr	r0, [pc, #160]	@ (800d9d4 <lwip_netconn_do_write+0x108>)
 800d932:	f010 fa2b 	bl	801dd8c <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800d936:	68bb      	ldr	r3, [r7, #8]
 800d938:	695b      	ldr	r3, [r3, #20]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d106      	bne.n	800d94c <lwip_netconn_do_write+0x80>
 800d93e:	4b23      	ldr	r3, [pc, #140]	@ (800d9cc <lwip_netconn_do_write+0x100>)
 800d940:	f240 7224 	movw	r2, #1828	@ 0x724
 800d944:	4924      	ldr	r1, [pc, #144]	@ (800d9d8 <lwip_netconn_do_write+0x10c>)
 800d946:	4823      	ldr	r0, [pc, #140]	@ (800d9d4 <lwip_netconn_do_write+0x108>)
 800d948:	f010 fa20 	bl	801dd8c <iprintf>
        msg->conn->current_msg = msg;
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	68ba      	ldr	r2, [r7, #8]
 800d952:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800d954:	68bb      	ldr	r3, [r7, #8]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2100      	movs	r1, #0
 800d95a:	4618      	mov	r0, r3
 800d95c:	f7ff fdea 	bl	800d534 <lwip_netconn_do_writemore>
 800d960:	4603      	mov	r3, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	d02e      	beq.n	800d9c4 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800d966:	68bb      	ldr	r3, [r7, #8]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	785b      	ldrb	r3, [r3, #1]
 800d96c:	2b01      	cmp	r3, #1
 800d96e:	d006      	beq.n	800d97e <lwip_netconn_do_write+0xb2>
 800d970:	4b16      	ldr	r3, [pc, #88]	@ (800d9cc <lwip_netconn_do_write+0x100>)
 800d972:	f44f 62e5 	mov.w	r2, #1832	@ 0x728
 800d976:	4919      	ldr	r1, [pc, #100]	@ (800d9dc <lwip_netconn_do_write+0x110>)
 800d978:	4816      	ldr	r0, [pc, #88]	@ (800d9d4 <lwip_netconn_do_write+0x108>)
 800d97a:	f010 fa07 	bl	801dd8c <iprintf>
          UNLOCK_TCPIP_CORE();
 800d97e:	4818      	ldr	r0, [pc, #96]	@ (800d9e0 <lwip_netconn_do_write+0x114>)
 800d980:	f00f f9d1 	bl	801cd26 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800d984:	68bb      	ldr	r3, [r7, #8]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	330c      	adds	r3, #12
 800d98a:	2100      	movs	r1, #0
 800d98c:	4618      	mov	r0, r3
 800d98e:	f00f f930 	bl	801cbf2 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800d992:	4813      	ldr	r0, [pc, #76]	@ (800d9e0 <lwip_netconn_do_write+0x114>)
 800d994:	f00f f9b8 	bl	801cd08 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	785b      	ldrb	r3, [r3, #1]
 800d99e:	2b01      	cmp	r3, #1
 800d9a0:	d110      	bne.n	800d9c4 <lwip_netconn_do_write+0xf8>
 800d9a2:	4b0a      	ldr	r3, [pc, #40]	@ (800d9cc <lwip_netconn_do_write+0x100>)
 800d9a4:	f240 722c 	movw	r2, #1836	@ 0x72c
 800d9a8:	490c      	ldr	r1, [pc, #48]	@ (800d9dc <lwip_netconn_do_write+0x110>)
 800d9aa:	480a      	ldr	r0, [pc, #40]	@ (800d9d4 <lwip_netconn_do_write+0x108>)
 800d9ac:	f010 f9ee 	bl	801dd8c <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800d9b0:	e008      	b.n	800d9c4 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800d9b2:	23f5      	movs	r3, #245	@ 0xf5
 800d9b4:	73fb      	strb	r3, [r7, #15]
 800d9b6:	e001      	b.n	800d9bc <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800d9b8:	23fa      	movs	r3, #250	@ 0xfa
 800d9ba:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800d9bc:	68bb      	ldr	r3, [r7, #8]
 800d9be:	7bfa      	ldrb	r2, [r7, #15]
 800d9c0:	711a      	strb	r2, [r3, #4]
 800d9c2:	e000      	b.n	800d9c6 <lwip_netconn_do_write+0xfa>
        return;
 800d9c4:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800d9c6:	3710      	adds	r7, #16
 800d9c8:	46bd      	mov	sp, r7
 800d9ca:	bd80      	pop	{r7, pc}
 800d9cc:	08021ac0 	.word	0x08021ac0
 800d9d0:	08021e64 	.word	0x08021e64
 800d9d4:	08021b04 	.word	0x08021b04
 800d9d8:	08021fec 	.word	0x08021fec
 800d9dc:	08021e80 	.word	0x08021e80
 800d9e0:	2000aee4 	.word	0x2000aee4

0800d9e4 <lwip_netconn_do_getaddr>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_getaddr(void *m)
{
 800d9e4:	b580      	push	{r7, lr}
 800d9e6:	b084      	sub	sp, #16
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	60fb      	str	r3, [r7, #12]

  if (msg->conn->pcb.ip != NULL) {
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	685b      	ldr	r3, [r3, #4]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d06b      	beq.n	800dad2 <lwip_netconn_do_getaddr+0xee>
    if (msg->msg.ad.local) {
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	7c1b      	ldrb	r3, [r3, #16]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d007      	beq.n	800da12 <lwip_netconn_do_getaddr+0x2e>
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	685a      	ldr	r2, [r3, #4]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	689b      	ldr	r3, [r3, #8]
 800da0c:	6812      	ldr	r2, [r2, #0]
 800da0e:	601a      	str	r2, [r3, #0]
 800da10:	e006      	b.n	800da20 <lwip_netconn_do_getaddr+0x3c>
                   msg->conn->pcb.ip->local_ip);
    } else {
      ip_addr_copy(API_EXPR_DEREF(msg->msg.ad.ipaddr),
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	685a      	ldr	r2, [r3, #4]
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	689b      	ldr	r3, [r3, #8]
 800da1c:	6852      	ldr	r2, [r2, #4]
 800da1e:	601a      	str	r2, [r3, #0]
                   msg->conn->pcb.ip->remote_ip);
    }

    msg->err = ERR_OK;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	2200      	movs	r2, #0
 800da24:	711a      	strb	r2, [r3, #4]
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	681b      	ldr	r3, [r3, #0]
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800da30:	2b10      	cmp	r3, #16
 800da32:	d021      	beq.n	800da78 <lwip_netconn_do_getaddr+0x94>
 800da34:	2b20      	cmp	r3, #32
 800da36:	d144      	bne.n	800dac2 <lwip_netconn_do_getaddr+0xde>
        }
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        if (msg->msg.ad.local) {
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	7c1b      	ldrb	r3, [r3, #16]
 800da3c:	2b00      	cmp	r3, #0
 800da3e:	d007      	beq.n	800da50 <lwip_netconn_do_getaddr+0x6c>
          API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->local_port;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	685a      	ldr	r2, [r3, #4]
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	68db      	ldr	r3, [r3, #12]
 800da4a:	8a52      	ldrh	r2, [r2, #18]
 800da4c:	801a      	strh	r2, [r3, #0]
            msg->err = ERR_CONN;
          } else {
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
          }
        }
        break;
 800da4e:	e044      	b.n	800dada <lwip_netconn_do_getaddr+0xf6>
          if ((msg->conn->pcb.udp->flags & UDP_FLAGS_CONNECTED) == 0) {
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	685b      	ldr	r3, [r3, #4]
 800da56:	7c1b      	ldrb	r3, [r3, #16]
 800da58:	f003 0304 	and.w	r3, r3, #4
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d103      	bne.n	800da68 <lwip_netconn_do_getaddr+0x84>
            msg->err = ERR_CONN;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	22f5      	movs	r2, #245	@ 0xf5
 800da64:	711a      	strb	r2, [r3, #4]
        break;
 800da66:	e038      	b.n	800dada <lwip_netconn_do_getaddr+0xf6>
            API_EXPR_DEREF(msg->msg.ad.port) = msg->conn->pcb.udp->remote_port;
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	685a      	ldr	r2, [r3, #4]
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	68db      	ldr	r3, [r3, #12]
 800da72:	8a92      	ldrh	r2, [r2, #20]
 800da74:	801a      	strh	r2, [r3, #0]
        break;
 800da76:	e030      	b.n	800dada <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        if ((msg->msg.ad.local == 0) &&
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	7c1b      	ldrb	r3, [r3, #16]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d10f      	bne.n	800daa0 <lwip_netconn_do_getaddr+0xbc>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	685b      	ldr	r3, [r3, #4]
 800da86:	7d1b      	ldrb	r3, [r3, #20]
        if ((msg->msg.ad.local == 0) &&
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d005      	beq.n	800da98 <lwip_netconn_do_getaddr+0xb4>
            ((msg->conn->pcb.tcp->state == CLOSED) || (msg->conn->pcb.tcp->state == LISTEN))) {
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	7d1b      	ldrb	r3, [r3, #20]
 800da94:	2b01      	cmp	r3, #1
 800da96:	d103      	bne.n	800daa0 <lwip_netconn_do_getaddr+0xbc>
          /* pcb is not connected and remote name is requested */
          msg->err = ERR_CONN;
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	22f5      	movs	r2, #245	@ 0xf5
 800da9c:	711a      	strb	r2, [r3, #4]
        } else {
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
        }
        break;
 800da9e:	e01c      	b.n	800dada <lwip_netconn_do_getaddr+0xf6>
          API_EXPR_DEREF(msg->msg.ad.port) = (msg->msg.ad.local ? msg->conn->pcb.tcp->local_port : msg->conn->pcb.tcp->remote_port);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	7c1b      	ldrb	r3, [r3, #16]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d004      	beq.n	800dab2 <lwip_netconn_do_getaddr+0xce>
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	681b      	ldr	r3, [r3, #0]
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	8adb      	ldrh	r3, [r3, #22]
 800dab0:	e003      	b.n	800daba <lwip_netconn_do_getaddr+0xd6>
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	8b1b      	ldrh	r3, [r3, #24]
 800daba:	68fa      	ldr	r2, [r7, #12]
 800dabc:	68d2      	ldr	r2, [r2, #12]
 800dabe:	8013      	strh	r3, [r2, #0]
        break;
 800dac0:	e00b      	b.n	800dada <lwip_netconn_do_getaddr+0xf6>
#endif /* LWIP_TCP */
      default:
        LWIP_ASSERT("invalid netconn_type", 0);
 800dac2:	4b08      	ldr	r3, [pc, #32]	@ (800dae4 <lwip_netconn_do_getaddr+0x100>)
 800dac4:	f240 727d 	movw	r2, #1917	@ 0x77d
 800dac8:	4907      	ldr	r1, [pc, #28]	@ (800dae8 <lwip_netconn_do_getaddr+0x104>)
 800daca:	4808      	ldr	r0, [pc, #32]	@ (800daec <lwip_netconn_do_getaddr+0x108>)
 800dacc:	f010 f95e 	bl	801dd8c <iprintf>
        break;
 800dad0:	e003      	b.n	800dada <lwip_netconn_do_getaddr+0xf6>
    }
  } else {
    msg->err = ERR_CONN;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	22f5      	movs	r2, #245	@ 0xf5
 800dad6:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
}
 800dad8:	bf00      	nop
 800dada:	bf00      	nop
 800dadc:	3710      	adds	r7, #16
 800dade:	46bd      	mov	sp, r7
 800dae0:	bd80      	pop	{r7, pc}
 800dae2:	bf00      	nop
 800dae4:	08021ac0 	.word	0x08021ac0
 800dae8:	08022000 	.word	0x08022000
 800daec:	08021b04 	.word	0x08021b04

0800daf0 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	785b      	ldrb	r3, [r3, #1]
 800db02:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	685b      	ldr	r3, [r3, #4]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d069      	beq.n	800dbe2 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800db18:	2b10      	cmp	r3, #16
 800db1a:	d162      	bne.n	800dbe2 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800db20:	2b03      	cmp	r3, #3
 800db22:	d002      	beq.n	800db2a <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800db24:	7afb      	ldrb	r3, [r7, #11]
 800db26:	2b02      	cmp	r3, #2
 800db28:	d05b      	beq.n	800dbe2 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800db2a:	7afb      	ldrb	r3, [r7, #11]
 800db2c:	2b03      	cmp	r3, #3
 800db2e:	d103      	bne.n	800db38 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	22f5      	movs	r2, #245	@ 0xf5
 800db34:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800db36:	e059      	b.n	800dbec <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800db38:	7afb      	ldrb	r3, [r7, #11]
 800db3a:	2b01      	cmp	r3, #1
 800db3c:	d103      	bne.n	800db46 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	22fb      	movs	r2, #251	@ 0xfb
 800db42:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800db44:	e052      	b.n	800dbec <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	7a1b      	ldrb	r3, [r3, #8]
 800db4a:	f003 0301 	and.w	r3, r3, #1
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d004      	beq.n	800db5c <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	4618      	mov	r0, r3
 800db58:	f7ff f832 	bl	800cbc0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	6a1b      	ldr	r3, [r3, #32]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d006      	beq.n	800db74 <lwip_netconn_do_close+0x84>
 800db66:	4b23      	ldr	r3, [pc, #140]	@ (800dbf4 <lwip_netconn_do_close+0x104>)
 800db68:	f240 72bd 	movw	r2, #1981	@ 0x7bd
 800db6c:	4922      	ldr	r1, [pc, #136]	@ (800dbf8 <lwip_netconn_do_close+0x108>)
 800db6e:	4823      	ldr	r0, [pc, #140]	@ (800dbfc <lwip_netconn_do_close+0x10c>)
 800db70:	f010 f90c 	bl	801dd8c <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	2204      	movs	r2, #4
 800db7a:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800db7c:	68fb      	ldr	r3, [r7, #12]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	68fa      	ldr	r2, [r7, #12]
 800db82:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	2100      	movs	r1, #0
 800db8a:	4618      	mov	r0, r3
 800db8c:	f7ff f896 	bl	800ccbc <lwip_netconn_do_close_internal>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d029      	beq.n	800dbea <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	785b      	ldrb	r3, [r3, #1]
 800db9c:	2b04      	cmp	r3, #4
 800db9e:	d006      	beq.n	800dbae <lwip_netconn_do_close+0xbe>
 800dba0:	4b14      	ldr	r3, [pc, #80]	@ (800dbf4 <lwip_netconn_do_close+0x104>)
 800dba2:	f240 72c2 	movw	r2, #1986	@ 0x7c2
 800dba6:	4916      	ldr	r1, [pc, #88]	@ (800dc00 <lwip_netconn_do_close+0x110>)
 800dba8:	4814      	ldr	r0, [pc, #80]	@ (800dbfc <lwip_netconn_do_close+0x10c>)
 800dbaa:	f010 f8ef 	bl	801dd8c <iprintf>
        UNLOCK_TCPIP_CORE();
 800dbae:	4815      	ldr	r0, [pc, #84]	@ (800dc04 <lwip_netconn_do_close+0x114>)
 800dbb0:	f00f f8b9 	bl	801cd26 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800dbb4:	68fb      	ldr	r3, [r7, #12]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	330c      	adds	r3, #12
 800dbba:	2100      	movs	r1, #0
 800dbbc:	4618      	mov	r0, r3
 800dbbe:	f00f f818 	bl	801cbf2 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800dbc2:	4810      	ldr	r0, [pc, #64]	@ (800dc04 <lwip_netconn_do_close+0x114>)
 800dbc4:	f00f f8a0 	bl	801cd08 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800dbc8:	68fb      	ldr	r3, [r7, #12]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	785b      	ldrb	r3, [r3, #1]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d00b      	beq.n	800dbea <lwip_netconn_do_close+0xfa>
 800dbd2:	4b08      	ldr	r3, [pc, #32]	@ (800dbf4 <lwip_netconn_do_close+0x104>)
 800dbd4:	f240 72c6 	movw	r2, #1990	@ 0x7c6
 800dbd8:	4909      	ldr	r1, [pc, #36]	@ (800dc00 <lwip_netconn_do_close+0x110>)
 800dbda:	4808      	ldr	r0, [pc, #32]	@ (800dbfc <lwip_netconn_do_close+0x10c>)
 800dbdc:	f010 f8d6 	bl	801dd8c <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800dbe0:	e003      	b.n	800dbea <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	22f5      	movs	r2, #245	@ 0xf5
 800dbe6:	711a      	strb	r2, [r3, #4]
 800dbe8:	e000      	b.n	800dbec <lwip_netconn_do_close+0xfc>
      return;
 800dbea:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800dbec:	3710      	adds	r7, #16
 800dbee:	46bd      	mov	sp, r7
 800dbf0:	bd80      	pop	{r7, pc}
 800dbf2:	bf00      	nop
 800dbf4:	08021ac0 	.word	0x08021ac0
 800dbf8:	08021e64 	.word	0x08021e64
 800dbfc:	08021b04 	.word	0x08021b04
 800dc00:	08021e80 	.word	0x08021e80
 800dc04:	2000aee4 	.word	0x2000aee4

0800dc08 <err_to_errno>:
  EIO            /* ERR_ARG        -16     Illegal argument.        */
};

int
err_to_errno(err_t err)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b083      	sub	sp, #12
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	4603      	mov	r3, r0
 800dc10:	71fb      	strb	r3, [r7, #7]
  if ((err > 0) || (-err >= (err_t)LWIP_ARRAYSIZE(err_to_errno_table))) {
 800dc12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	dc04      	bgt.n	800dc24 <err_to_errno+0x1c>
 800dc1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc1e:	f113 0f10 	cmn.w	r3, #16
 800dc22:	da01      	bge.n	800dc28 <err_to_errno+0x20>
    return EIO;
 800dc24:	2305      	movs	r3, #5
 800dc26:	e005      	b.n	800dc34 <err_to_errno+0x2c>
  }
  return err_to_errno_table[-err];
 800dc28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dc2c:	425b      	negs	r3, r3
 800dc2e:	4a04      	ldr	r2, [pc, #16]	@ (800dc40 <err_to_errno+0x38>)
 800dc30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	370c      	adds	r7, #12
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc3e:	4770      	bx	lr
 800dc40:	080255c4 	.word	0x080255c4

0800dc44 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b082      	sub	sp, #8
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d013      	beq.n	800dc7a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	681b      	ldr	r3, [r3, #0]
 800dc56:	2b00      	cmp	r3, #0
 800dc58:	d00b      	beq.n	800dc72 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	4618      	mov	r0, r3
 800dc60:	f003 f8d2 	bl	8010e08 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2200      	movs	r2, #0
 800dc68:	605a      	str	r2, [r3, #4]
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	685a      	ldr	r2, [r3, #4]
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800dc72:	6879      	ldr	r1, [r7, #4]
 800dc74:	2006      	movs	r0, #6
 800dc76:	f002 f9e5 	bl	8010044 <memp_free>
  }
}
 800dc7a:	bf00      	nop
 800dc7c:	3708      	adds	r7, #8
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}
	...

0800dc84 <netbuf_free>:
 *
 * @param buf pointer to the netbuf which contains the packet buffer to free
 */
void
netbuf_free(struct netbuf *buf)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b082      	sub	sp, #8
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_free: invalid buf", (buf != NULL), return;);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d106      	bne.n	800dca0 <netbuf_free+0x1c>
 800dc92:	4b0d      	ldr	r3, [pc, #52]	@ (800dcc8 <netbuf_free+0x44>)
 800dc94:	2281      	movs	r2, #129	@ 0x81
 800dc96:	490d      	ldr	r1, [pc, #52]	@ (800dccc <netbuf_free+0x48>)
 800dc98:	480d      	ldr	r0, [pc, #52]	@ (800dcd0 <netbuf_free+0x4c>)
 800dc9a:	f010 f877 	bl	801dd8c <iprintf>
 800dc9e:	e00f      	b.n	800dcc0 <netbuf_free+0x3c>
  if (buf->p != NULL) {
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d004      	beq.n	800dcb2 <netbuf_free+0x2e>
    pbuf_free(buf->p);
 800dca8:	687b      	ldr	r3, [r7, #4]
 800dcaa:	681b      	ldr	r3, [r3, #0]
 800dcac:	4618      	mov	r0, r3
 800dcae:	f003 f8ab 	bl	8010e08 <pbuf_free>
  }
  buf->p = buf->ptr = NULL;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	605a      	str	r2, [r3, #4]
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	685a      	ldr	r2, [r3, #4]
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	601a      	str	r2, [r3, #0]
#if LWIP_CHECKSUM_ON_COPY
  buf->flags = 0;
  buf->toport_chksum = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
}
 800dcc0:	3708      	adds	r7, #8
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	08022040 	.word	0x08022040
 800dccc:	080220dc 	.word	0x080220dc
 800dcd0:	08022090 	.word	0x08022090

0800dcd4 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b084      	sub	sp, #16
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	60f8      	str	r0, [r7, #12]
 800dcdc:	60b9      	str	r1, [r7, #8]
 800dcde:	4613      	mov	r3, r2
 800dce0:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d108      	bne.n	800dcfa <netbuf_ref+0x26>
 800dce8:	4b1c      	ldr	r3, [pc, #112]	@ (800dd5c <netbuf_ref+0x88>)
 800dcea:	2299      	movs	r2, #153	@ 0x99
 800dcec:	491c      	ldr	r1, [pc, #112]	@ (800dd60 <netbuf_ref+0x8c>)
 800dcee:	481d      	ldr	r0, [pc, #116]	@ (800dd64 <netbuf_ref+0x90>)
 800dcf0:	f010 f84c 	bl	801dd8c <iprintf>
 800dcf4:	f06f 030f 	mvn.w	r3, #15
 800dcf8:	e02b      	b.n	800dd52 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d004      	beq.n	800dd0c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4618      	mov	r0, r3
 800dd08:	f003 f87e 	bl	8010e08 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800dd0c:	2241      	movs	r2, #65	@ 0x41
 800dd0e:	2100      	movs	r1, #0
 800dd10:	2036      	movs	r0, #54	@ 0x36
 800dd12:	f002 fd63 	bl	80107dc <pbuf_alloc>
 800dd16:	4602      	mov	r2, r0
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	681b      	ldr	r3, [r3, #0]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d105      	bne.n	800dd30 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	2200      	movs	r2, #0
 800dd28:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800dd2a:	f04f 33ff 	mov.w	r3, #4294967295
 800dd2e:	e010      	b.n	800dd52 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	68ba      	ldr	r2, [r7, #8]
 800dd36:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	88fa      	ldrh	r2, [r7, #6]
 800dd3e:	811a      	strh	r2, [r3, #8]
 800dd40:	68fa      	ldr	r2, [r7, #12]
 800dd42:	6812      	ldr	r2, [r2, #0]
 800dd44:	891b      	ldrh	r3, [r3, #8]
 800dd46:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	681a      	ldr	r2, [r3, #0]
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}
 800dd5a:	bf00      	nop
 800dd5c:	08022040 	.word	0x08022040
 800dd60:	080220f8 	.word	0x080220f8
 800dd64:	08022090 	.word	0x08022090

0800dd68 <tryget_socket_unconn_nouse>:
#endif /* LWIP_NETCONN_FULLDUPLEX */

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn_nouse(int fd)
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b085      	sub	sp, #20
 800dd6c:	af00      	add	r7, sp, #0
 800dd6e:	6078      	str	r0, [r7, #4]
  int s = fd - LWIP_SOCKET_OFFSET;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	60fb      	str	r3, [r7, #12]
  if ((s < 0) || (s >= NUM_SOCKETS)) {
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	db02      	blt.n	800dd80 <tryget_socket_unconn_nouse+0x18>
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2b03      	cmp	r3, #3
 800dd7e:	dd01      	ble.n	800dd84 <tryget_socket_unconn_nouse+0x1c>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("tryget_socket_unconn(%d): invalid\n", fd));
    return NULL;
 800dd80:	2300      	movs	r3, #0
 800dd82:	e003      	b.n	800dd8c <tryget_socket_unconn_nouse+0x24>
  }
  return &sockets[s];
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	011b      	lsls	r3, r3, #4
 800dd88:	4a03      	ldr	r2, [pc, #12]	@ (800dd98 <tryget_socket_unconn_nouse+0x30>)
 800dd8a:	4413      	add	r3, r2
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3714      	adds	r7, #20
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr
 800dd98:	2000ae94 	.word	0x2000ae94

0800dd9c <tryget_socket_unconn>:
}

/* Translate a socket 'int' into a pointer (only fails if the index is invalid) */
static struct lwip_sock *
tryget_socket_unconn(int fd)
{
 800dd9c:	b580      	push	{r7, lr}
 800dd9e:	b084      	sub	sp, #16
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
  struct lwip_sock *ret = tryget_socket_unconn_nouse(fd);
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f7ff ffdf 	bl	800dd68 <tryget_socket_unconn_nouse>
 800ddaa:	60f8      	str	r0, [r7, #12]
  if (ret != NULL) {
    if (!sock_inc_used(ret)) {
      return NULL;
    }
  }
  return ret;
 800ddac:	68fb      	ldr	r3, [r7, #12]
}
 800ddae:	4618      	mov	r0, r3
 800ddb0:	3710      	adds	r7, #16
 800ddb2:	46bd      	mov	sp, r7
 800ddb4:	bd80      	pop	{r7, pc}

0800ddb6 <tryget_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
tryget_socket(int fd)
{
 800ddb6:	b580      	push	{r7, lr}
 800ddb8:	b084      	sub	sp, #16
 800ddba:	af00      	add	r7, sp, #0
 800ddbc:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket_unconn(fd);
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f7ff ffec 	bl	800dd9c <tryget_socket_unconn>
 800ddc4:	60f8      	str	r0, [r7, #12]
  if (sock != NULL) {
 800ddc6:	68fb      	ldr	r3, [r7, #12]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d005      	beq.n	800ddd8 <tryget_socket+0x22>
    if (sock->conn) {
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d001      	beq.n	800ddd8 <tryget_socket+0x22>
      return sock;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	e000      	b.n	800ddda <tryget_socket+0x24>
    }
    done_socket(sock);
  }
  return NULL;
 800ddd8:	2300      	movs	r3, #0
}
 800ddda:	4618      	mov	r0, r3
 800dddc:	3710      	adds	r7, #16
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}
	...

0800dde4 <get_socket>:
 * @param fd externally used socket index
 * @return struct lwip_sock for the socket or NULL if not found
 */
static struct lwip_sock *
get_socket(int fd)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b084      	sub	sp, #16
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	6078      	str	r0, [r7, #4]
  struct lwip_sock *sock = tryget_socket(fd);
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f7ff ffe2 	bl	800ddb6 <tryget_socket>
 800ddf2:	60f8      	str	r0, [r7, #12]
  if (!sock) {
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d104      	bne.n	800de04 <get_socket+0x20>
    if ((fd < LWIP_SOCKET_OFFSET) || (fd >= (LWIP_SOCKET_OFFSET + NUM_SOCKETS))) {
      LWIP_DEBUGF(SOCKETS_DEBUG, ("get_socket(%d): invalid\n", fd));
    }
    set_errno(EBADF);
 800ddfa:	4b05      	ldr	r3, [pc, #20]	@ (800de10 <get_socket+0x2c>)
 800ddfc:	2209      	movs	r2, #9
 800ddfe:	601a      	str	r2, [r3, #0]
    return NULL;
 800de00:	2300      	movs	r3, #0
 800de02:	e000      	b.n	800de06 <get_socket+0x22>
  }
  return sock;
 800de04:	68fb      	ldr	r3, [r7, #12]
}
 800de06:	4618      	mov	r0, r3
 800de08:	3710      	adds	r7, #16
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}
 800de0e:	bf00      	nop
 800de10:	2000ef0c 	.word	0x2000ef0c

0800de14 <alloc_socket>:
 *                 0 if socket has been created by socket()
 * @return the index of the new socket; -1 on error
 */
static int
alloc_socket(struct netconn *newconn, int accepted)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
 800de1c:	6039      	str	r1, [r7, #0]
  int i;
  SYS_ARCH_DECL_PROTECT(lev);
  LWIP_UNUSED_ARG(accepted);

  /* allocate a new socket identifier */
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800de1e:	2300      	movs	r3, #0
 800de20:	60fb      	str	r3, [r7, #12]
 800de22:	e052      	b.n	800deca <alloc_socket+0xb6>
    /* Protect socket array */
    SYS_ARCH_PROTECT(lev);
 800de24:	f00e ffac 	bl	801cd80 <sys_arch_protect>
 800de28:	60b8      	str	r0, [r7, #8]
    if (!sockets[i].conn) {
 800de2a:	4a2c      	ldr	r2, [pc, #176]	@ (800dedc <alloc_socket+0xc8>)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	011b      	lsls	r3, r3, #4
 800de30:	4413      	add	r3, r2
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d142      	bne.n	800debe <alloc_socket+0xaa>
        continue;
      }
      sockets[i].fd_used    = 1;
      sockets[i].fd_free_pending = 0;
#endif
      sockets[i].conn       = newconn;
 800de38:	4a28      	ldr	r2, [pc, #160]	@ (800dedc <alloc_socket+0xc8>)
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	011b      	lsls	r3, r3, #4
 800de3e:	4413      	add	r3, r2
 800de40:	687a      	ldr	r2, [r7, #4]
 800de42:	601a      	str	r2, [r3, #0]
      /* The socket is not yet known to anyone, so no need to protect
         after having marked it as used. */
      SYS_ARCH_UNPROTECT(lev);
 800de44:	68b8      	ldr	r0, [r7, #8]
 800de46:	f00e ffa9 	bl	801cd9c <sys_arch_unprotect>
      sockets[i].lastdata.pbuf = NULL;
 800de4a:	4a24      	ldr	r2, [pc, #144]	@ (800dedc <alloc_socket+0xc8>)
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	011b      	lsls	r3, r3, #4
 800de50:	4413      	add	r3, r2
 800de52:	3304      	adds	r3, #4
 800de54:	2200      	movs	r2, #0
 800de56:	601a      	str	r2, [r3, #0]
#if LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL
      LWIP_ASSERT("sockets[i].select_waiting == 0", sockets[i].select_waiting == 0);
 800de58:	4a20      	ldr	r2, [pc, #128]	@ (800dedc <alloc_socket+0xc8>)
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	011b      	lsls	r3, r3, #4
 800de5e:	4413      	add	r3, r2
 800de60:	330e      	adds	r3, #14
 800de62:	781b      	ldrb	r3, [r3, #0]
 800de64:	2b00      	cmp	r3, #0
 800de66:	d006      	beq.n	800de76 <alloc_socket+0x62>
 800de68:	4b1d      	ldr	r3, [pc, #116]	@ (800dee0 <alloc_socket+0xcc>)
 800de6a:	f240 220e 	movw	r2, #526	@ 0x20e
 800de6e:	491d      	ldr	r1, [pc, #116]	@ (800dee4 <alloc_socket+0xd0>)
 800de70:	481d      	ldr	r0, [pc, #116]	@ (800dee8 <alloc_socket+0xd4>)
 800de72:	f00f ff8b 	bl	801dd8c <iprintf>
      sockets[i].rcvevent   = 0;
 800de76:	4a19      	ldr	r2, [pc, #100]	@ (800dedc <alloc_socket+0xc8>)
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	011b      	lsls	r3, r3, #4
 800de7c:	4413      	add	r3, r2
 800de7e:	3308      	adds	r3, #8
 800de80:	2200      	movs	r2, #0
 800de82:	801a      	strh	r2, [r3, #0]
      /* TCP sendbuf is empty, but the socket is not yet writable until connected
       * (unless it has been created by accept()). */
      sockets[i].sendevent  = (NETCONNTYPE_GROUP(newconn->type) == NETCONN_TCP ? (accepted != 0) : 1);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	781b      	ldrb	r3, [r3, #0]
 800de88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800de8c:	2b10      	cmp	r3, #16
 800de8e:	d102      	bne.n	800de96 <alloc_socket+0x82>
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d001      	beq.n	800de9a <alloc_socket+0x86>
 800de96:	2301      	movs	r3, #1
 800de98:	e000      	b.n	800de9c <alloc_socket+0x88>
 800de9a:	2300      	movs	r3, #0
 800de9c:	b299      	uxth	r1, r3
 800de9e:	4a0f      	ldr	r2, [pc, #60]	@ (800dedc <alloc_socket+0xc8>)
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	011b      	lsls	r3, r3, #4
 800dea4:	4413      	add	r3, r2
 800dea6:	330a      	adds	r3, #10
 800dea8:	460a      	mov	r2, r1
 800deaa:	801a      	strh	r2, [r3, #0]
      sockets[i].errevent   = 0;
 800deac:	4a0b      	ldr	r2, [pc, #44]	@ (800dedc <alloc_socket+0xc8>)
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	011b      	lsls	r3, r3, #4
 800deb2:	4413      	add	r3, r2
 800deb4:	330c      	adds	r3, #12
 800deb6:	2200      	movs	r2, #0
 800deb8:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_SOCKET_SELECT || LWIP_SOCKET_POLL */
      return i + LWIP_SOCKET_OFFSET;
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	e00a      	b.n	800ded4 <alloc_socket+0xc0>
    }
    SYS_ARCH_UNPROTECT(lev);
 800debe:	68b8      	ldr	r0, [r7, #8]
 800dec0:	f00e ff6c 	bl	801cd9c <sys_arch_unprotect>
  for (i = 0; i < NUM_SOCKETS; ++i) {
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	3301      	adds	r3, #1
 800dec8:	60fb      	str	r3, [r7, #12]
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2b03      	cmp	r3, #3
 800dece:	dda9      	ble.n	800de24 <alloc_socket+0x10>
  }
  return -1;
 800ded0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3710      	adds	r7, #16
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	2000ae94 	.word	0x2000ae94
 800dee0:	080221d8 	.word	0x080221d8
 800dee4:	0802220c 	.word	0x0802220c
 800dee8:	0802222c 	.word	0x0802222c

0800deec <lwip_connect>:
  return 0;
}

int
lwip_connect(int s, const struct sockaddr *name, socklen_t namelen)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b08c      	sub	sp, #48	@ 0x30
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	60b9      	str	r1, [r7, #8]
 800def6:	607a      	str	r2, [r7, #4]
  struct lwip_sock *sock;
  err_t err;

  sock = get_socket(s);
 800def8:	68f8      	ldr	r0, [r7, #12]
 800defa:	f7ff ff73 	bl	800dde4 <get_socket>
 800defe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (!sock) {
 800df00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df02:	2b00      	cmp	r3, #0
 800df04:	d102      	bne.n	800df0c <lwip_connect+0x20>
    return -1;
 800df06:	f04f 33ff 	mov.w	r3, #4294967295
 800df0a:	e062      	b.n	800dfd2 <lwip_connect+0xe6>
    done_socket(sock);
    return -1;
  }

  LWIP_UNUSED_ARG(namelen);
  if (name->sa_family == AF_UNSPEC) {
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	785b      	ldrb	r3, [r3, #1]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d108      	bne.n	800df26 <lwip_connect+0x3a>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d, AF_UNSPEC)\n", s));
    err = netconn_disconnect(sock->conn);
 800df14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4618      	mov	r0, r3
 800df1a:	f7fd fe77 	bl	800bc0c <netconn_disconnect>
 800df1e:	4603      	mov	r3, r0
 800df20:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800df24:	e039      	b.n	800df9a <lwip_connect+0xae>
  } else {
    ip_addr_t remote_addr;
    u16_t remote_port;

    /* check size, family and alignment of 'name' */
    LWIP_ERROR("lwip_connect: invalid address", IS_SOCK_ADDR_LEN_VALID(namelen) &&
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2b10      	cmp	r3, #16
 800df2a:	d10c      	bne.n	800df46 <lwip_connect+0x5a>
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	785b      	ldrb	r3, [r3, #1]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d003      	beq.n	800df3c <lwip_connect+0x50>
 800df34:	68bb      	ldr	r3, [r7, #8]
 800df36:	785b      	ldrb	r3, [r3, #1]
 800df38:	2b02      	cmp	r3, #2
 800df3a:	d104      	bne.n	800df46 <lwip_connect+0x5a>
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	f003 0303 	and.w	r3, r3, #3
 800df42:	2b00      	cmp	r3, #0
 800df44:	d014      	beq.n	800df70 <lwip_connect+0x84>
 800df46:	4b25      	ldr	r3, [pc, #148]	@ (800dfdc <lwip_connect+0xf0>)
 800df48:	f240 3247 	movw	r2, #839	@ 0x347
 800df4c:	4924      	ldr	r1, [pc, #144]	@ (800dfe0 <lwip_connect+0xf4>)
 800df4e:	4825      	ldr	r0, [pc, #148]	@ (800dfe4 <lwip_connect+0xf8>)
 800df50:	f00f ff1c 	bl	801dd8c <iprintf>
 800df54:	f06f 000f 	mvn.w	r0, #15
 800df58:	f7ff fe56 	bl	800dc08 <err_to_errno>
 800df5c:	6238      	str	r0, [r7, #32]
 800df5e:	6a3b      	ldr	r3, [r7, #32]
 800df60:	2b00      	cmp	r3, #0
 800df62:	d002      	beq.n	800df6a <lwip_connect+0x7e>
 800df64:	4a20      	ldr	r2, [pc, #128]	@ (800dfe8 <lwip_connect+0xfc>)
 800df66:	6a3b      	ldr	r3, [r7, #32]
 800df68:	6013      	str	r3, [r2, #0]
 800df6a:	f04f 33ff 	mov.w	r3, #4294967295
 800df6e:	e030      	b.n	800dfd2 <lwip_connect+0xe6>
               IS_SOCK_ADDR_TYPE_VALID_OR_UNSPEC(name) && IS_SOCK_ADDR_ALIGNED(name),
               sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);

    SOCKADDR_TO_IPADDR_PORT(name, &remote_addr, remote_port);
 800df70:	68bb      	ldr	r3, [r7, #8]
 800df72:	685b      	ldr	r3, [r3, #4]
 800df74:	617b      	str	r3, [r7, #20]
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	885b      	ldrh	r3, [r3, #2]
 800df7a:	4618      	mov	r0, r3
 800df7c:	f001 f826 	bl	800efcc <lwip_htons>
 800df80:	4603      	mov	r3, r0
 800df82:	84fb      	strh	r3, [r7, #38]	@ 0x26
      unmap_ipv4_mapped_ipv6(ip_2_ip4(&remote_addr), ip_2_ip6(&remote_addr));
      IP_SET_TYPE_VAL(remote_addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    err = netconn_connect(sock->conn, &remote_addr, remote_port);
 800df84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800df8a:	f107 0114 	add.w	r1, r7, #20
 800df8e:	4618      	mov	r0, r3
 800df90:	f7fd fe04 	bl	800bb9c <netconn_connect>
 800df94:	4603      	mov	r3, r0
 800df96:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  if (err != ERR_OK) {
 800df9a:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d00e      	beq.n	800dfc0 <lwip_connect+0xd4>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) failed, err=%d\n", s, err));
    sock_set_errno(sock, err_to_errno(err));
 800dfa2:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f7ff fe2e 	bl	800dc08 <err_to_errno>
 800dfac:	61b8      	str	r0, [r7, #24]
 800dfae:	69bb      	ldr	r3, [r7, #24]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d002      	beq.n	800dfba <lwip_connect+0xce>
 800dfb4:	4a0c      	ldr	r2, [pc, #48]	@ (800dfe8 <lwip_connect+0xfc>)
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800dfba:	f04f 33ff 	mov.w	r3, #4294967295
 800dfbe:	e008      	b.n	800dfd2 <lwip_connect+0xe6>
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_connect(%d) succeeded\n", s));
  sock_set_errno(sock, 0);
 800dfc0:	2300      	movs	r3, #0
 800dfc2:	61fb      	str	r3, [r7, #28]
 800dfc4:	69fb      	ldr	r3, [r7, #28]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d002      	beq.n	800dfd0 <lwip_connect+0xe4>
 800dfca:	4a07      	ldr	r2, [pc, #28]	@ (800dfe8 <lwip_connect+0xfc>)
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return 0;
 800dfd0:	2300      	movs	r3, #0
}
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3730      	adds	r7, #48	@ 0x30
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	080221d8 	.word	0x080221d8
 800dfe0:	080222b0 	.word	0x080222b0
 800dfe4:	0802222c 	.word	0x0802222c
 800dfe8:	2000ef0c 	.word	0x2000ef0c

0800dfec <lwip_recv_tcp>:
 * until "len" bytes are received or we're otherwise done.
 * Keeps sock->lastdata for peeking or partly copying.
 */
static ssize_t
lwip_recv_tcp(struct lwip_sock *sock, void *mem, size_t len, int flags)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b08c      	sub	sp, #48	@ 0x30
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	60f8      	str	r0, [r7, #12]
 800dff4:	60b9      	str	r1, [r7, #8]
 800dff6:	607a      	str	r2, [r7, #4]
 800dff8:	603b      	str	r3, [r7, #0]
  u8_t apiflags = NETCONN_NOAUTORCVD;
 800dffa:	2308      	movs	r3, #8
 800dffc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  ssize_t recvd = 0;
 800e000:	2300      	movs	r3, #0
 800e002:	62bb      	str	r3, [r7, #40]	@ 0x28
  ssize_t recv_left = (len <= SSIZE_MAX) ? (ssize_t)len : SSIZE_MAX;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2b00      	cmp	r3, #0
 800e008:	db01      	blt.n	800e00e <lwip_recv_tcp+0x22>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	e001      	b.n	800e012 <lwip_recv_tcp+0x26>
 800e00e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e012:	627b      	str	r3, [r7, #36]	@ 0x24

  LWIP_ASSERT("no socket given", sock != NULL);
 800e014:	68fb      	ldr	r3, [r7, #12]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d106      	bne.n	800e028 <lwip_recv_tcp+0x3c>
 800e01a:	4b74      	ldr	r3, [pc, #464]	@ (800e1ec <lwip_recv_tcp+0x200>)
 800e01c:	f240 329e 	movw	r2, #926	@ 0x39e
 800e020:	4973      	ldr	r1, [pc, #460]	@ (800e1f0 <lwip_recv_tcp+0x204>)
 800e022:	4874      	ldr	r0, [pc, #464]	@ (800e1f4 <lwip_recv_tcp+0x208>)
 800e024:	f00f feb2 	bl	801dd8c <iprintf>
  LWIP_ASSERT("this should be checked internally", NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP);
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e032:	2b10      	cmp	r3, #16
 800e034:	d006      	beq.n	800e044 <lwip_recv_tcp+0x58>
 800e036:	4b6d      	ldr	r3, [pc, #436]	@ (800e1ec <lwip_recv_tcp+0x200>)
 800e038:	f240 329f 	movw	r2, #927	@ 0x39f
 800e03c:	496e      	ldr	r1, [pc, #440]	@ (800e1f8 <lwip_recv_tcp+0x20c>)
 800e03e:	486d      	ldr	r0, [pc, #436]	@ (800e1f4 <lwip_recv_tcp+0x208>)
 800e040:	f00f fea4 	bl	801dd8c <iprintf>

  if (flags & MSG_DONTWAIT) {
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	f003 0308 	and.w	r3, r3, #8
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d005      	beq.n	800e05a <lwip_recv_tcp+0x6e>
    apiflags |= NETCONN_DONTBLOCK;
 800e04e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e052:	f043 0304 	orr.w	r3, r3, #4
 800e056:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    err_t err;
    u16_t copylen;

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: top while sock->lastdata=%p\n", (void *)sock->lastdata.pbuf));
    /* Check if there is data left from the last recv operation. */
    if (sock->lastdata.pbuf) {
 800e05a:	68fb      	ldr	r3, [r7, #12]
 800e05c:	685b      	ldr	r3, [r3, #4]
 800e05e:	2b00      	cmp	r3, #0
 800e060:	d003      	beq.n	800e06a <lwip_recv_tcp+0x7e>
      p = sock->lastdata.pbuf;
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	685b      	ldr	r3, [r3, #4]
 800e066:	617b      	str	r3, [r7, #20]
 800e068:	e036      	b.n	800e0d8 <lwip_recv_tcp+0xec>
    } else {
      /* No data was left from the previous operation, so we try to get
         some from the network. */
      err = netconn_recv_tcp_pbuf_flags(sock->conn, &p, apiflags);
 800e06a:	68fb      	ldr	r3, [r7, #12]
 800e06c:	681b      	ldr	r3, [r3, #0]
 800e06e:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800e072:	f107 0114 	add.w	r1, r7, #20
 800e076:	4618      	mov	r0, r3
 800e078:	f7fd ff9c 	bl	800bfb4 <netconn_recv_tcp_pbuf_flags>
 800e07c:	4603      	mov	r3, r0
 800e07e:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: netconn_recv err=%d, pbuf=%p\n",
                                  err, (void *)p));

      if (err != ERR_OK) {
 800e082:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800e086:	2b00      	cmp	r3, #0
 800e088:	d019      	beq.n	800e0be <lwip_recv_tcp+0xd2>
        if (recvd > 0) {
 800e08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	f300 808d 	bgt.w	800e1ac <lwip_recv_tcp+0x1c0>
          goto lwip_recv_tcp_done;
        }
        /* We should really do some error checking here. */
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: p == NULL, error is \"%s\"!\n",
                                    lwip_strerr(err)));
        sock_set_errno(sock, err_to_errno(err));
 800e092:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800e096:	4618      	mov	r0, r3
 800e098:	f7ff fdb6 	bl	800dc08 <err_to_errno>
 800e09c:	61f8      	str	r0, [r7, #28]
 800e09e:	69fb      	ldr	r3, [r7, #28]
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d002      	beq.n	800e0aa <lwip_recv_tcp+0xbe>
 800e0a4:	4a55      	ldr	r2, [pc, #340]	@ (800e1fc <lwip_recv_tcp+0x210>)
 800e0a6:	69fb      	ldr	r3, [r7, #28]
 800e0a8:	6013      	str	r3, [r2, #0]
        if (err == ERR_CLSD) {
 800e0aa:	f997 3021 	ldrsb.w	r3, [r7, #33]	@ 0x21
 800e0ae:	f113 0f0f 	cmn.w	r3, #15
 800e0b2:	d101      	bne.n	800e0b8 <lwip_recv_tcp+0xcc>
          return 0;
 800e0b4:	2300      	movs	r3, #0
 800e0b6:	e094      	b.n	800e1e2 <lwip_recv_tcp+0x1f6>
        } else {
          return -1;
 800e0b8:	f04f 33ff 	mov.w	r3, #4294967295
 800e0bc:	e091      	b.n	800e1e2 <lwip_recv_tcp+0x1f6>
        }
      }
      LWIP_ASSERT("p != NULL", p != NULL);
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d106      	bne.n	800e0d2 <lwip_recv_tcp+0xe6>
 800e0c4:	4b49      	ldr	r3, [pc, #292]	@ (800e1ec <lwip_recv_tcp+0x200>)
 800e0c6:	f240 32c5 	movw	r2, #965	@ 0x3c5
 800e0ca:	494d      	ldr	r1, [pc, #308]	@ (800e200 <lwip_recv_tcp+0x214>)
 800e0cc:	4849      	ldr	r0, [pc, #292]	@ (800e1f4 <lwip_recv_tcp+0x208>)
 800e0ce:	f00f fe5d 	bl	801dd8c <iprintf>
      sock->lastdata.pbuf = p;
 800e0d2:	697a      	ldr	r2, [r7, #20]
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	605a      	str	r2, [r3, #4]
    }

    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: buflen=%"U16_F" recv_left=%d off=%d\n",
                                p->tot_len, (int)recv_left, (int)recvd));

    if (recv_left > p->tot_len) {
 800e0d8:	697b      	ldr	r3, [r7, #20]
 800e0da:	891b      	ldrh	r3, [r3, #8]
 800e0dc:	461a      	mov	r2, r3
 800e0de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0e0:	4293      	cmp	r3, r2
 800e0e2:	dd03      	ble.n	800e0ec <lwip_recv_tcp+0x100>
      copylen = p->tot_len;
 800e0e4:	697b      	ldr	r3, [r7, #20]
 800e0e6:	891b      	ldrh	r3, [r3, #8]
 800e0e8:	847b      	strh	r3, [r7, #34]	@ 0x22
 800e0ea:	e001      	b.n	800e0f0 <lwip_recv_tcp+0x104>
    } else {
      copylen = (u16_t)recv_left;
 800e0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e0ee:	847b      	strh	r3, [r7, #34]	@ 0x22
    }
    if (recvd + copylen < recvd) {
 800e0f0:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0f4:	4413      	add	r3, r2
 800e0f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	dd03      	ble.n	800e104 <lwip_recv_tcp+0x118>
      /* overflow */
      copylen = (u16_t)(SSIZE_MAX - recvd);
 800e0fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e0fe:	b29b      	uxth	r3, r3
 800e100:	43db      	mvns	r3, r3
 800e102:	847b      	strh	r3, [r7, #34]	@ 0x22
    }

    /* copy the contents of the received buffer into
    the supplied memory pointer mem */
    pbuf_copy_partial(p, (u8_t *)mem + recvd, copylen, 0);
 800e104:	6978      	ldr	r0, [r7, #20]
 800e106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e108:	68ba      	ldr	r2, [r7, #8]
 800e10a:	18d1      	adds	r1, r2, r3
 800e10c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e10e:	2300      	movs	r3, #0
 800e110:	f003 f880 	bl	8011214 <pbuf_copy_partial>

    recvd += copylen;
 800e114:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e116:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e118:	4413      	add	r3, r2
 800e11a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* TCP combines multiple pbufs for one recv */
    LWIP_ASSERT("invalid copylen, len would underflow", recv_left >= copylen);
 800e11c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e11e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e120:	429a      	cmp	r2, r3
 800e122:	da06      	bge.n	800e132 <lwip_recv_tcp+0x146>
 800e124:	4b31      	ldr	r3, [pc, #196]	@ (800e1ec <lwip_recv_tcp+0x200>)
 800e126:	f240 32dd 	movw	r2, #989	@ 0x3dd
 800e12a:	4936      	ldr	r1, [pc, #216]	@ (800e204 <lwip_recv_tcp+0x218>)
 800e12c:	4831      	ldr	r0, [pc, #196]	@ (800e1f4 <lwip_recv_tcp+0x208>)
 800e12e:	f00f fe2d 	bl	801dd8c <iprintf>
    recv_left -= copylen;
 800e132:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e136:	1ad3      	subs	r3, r2, r3
 800e138:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Unless we peek the incoming message... */
    if ((flags & MSG_PEEK) == 0) {
 800e13a:	683b      	ldr	r3, [r7, #0]
 800e13c:	f003 0301 	and.w	r3, r3, #1
 800e140:	2b00      	cmp	r3, #0
 800e142:	d123      	bne.n	800e18c <lwip_recv_tcp+0x1a0>
      /* ... check if there is data left in the pbuf */
      LWIP_ASSERT("invalid copylen", p->tot_len >= copylen);
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	891b      	ldrh	r3, [r3, #8]
 800e148:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e14a:	429a      	cmp	r2, r3
 800e14c:	d906      	bls.n	800e15c <lwip_recv_tcp+0x170>
 800e14e:	4b27      	ldr	r3, [pc, #156]	@ (800e1ec <lwip_recv_tcp+0x200>)
 800e150:	f240 32e3 	movw	r2, #995	@ 0x3e3
 800e154:	492c      	ldr	r1, [pc, #176]	@ (800e208 <lwip_recv_tcp+0x21c>)
 800e156:	4827      	ldr	r0, [pc, #156]	@ (800e1f4 <lwip_recv_tcp+0x208>)
 800e158:	f00f fe18 	bl	801dd8c <iprintf>
      if (p->tot_len - copylen > 0) {
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	891b      	ldrh	r3, [r3, #8]
 800e160:	461a      	mov	r2, r3
 800e162:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e164:	1ad3      	subs	r3, r2, r3
 800e166:	2b00      	cmp	r3, #0
 800e168:	dd09      	ble.n	800e17e <lwip_recv_tcp+0x192>
        /* If so, it should be saved in the sock structure for the next recv call.
           We store the pbuf but hide/free the consumed data: */
        sock->lastdata.pbuf = pbuf_free_header(p, copylen);
 800e16a:	697b      	ldr	r3, [r7, #20]
 800e16c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e16e:	4611      	mov	r1, r2
 800e170:	4618      	mov	r0, r3
 800e172:	f002 fe16 	bl	8010da2 <pbuf_free_header>
 800e176:	4602      	mov	r2, r0
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	605a      	str	r2, [r3, #4]
 800e17c:	e006      	b.n	800e18c <lwip_recv_tcp+0x1a0>
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: lastdata now pbuf=%p\n", (void *)sock->lastdata.pbuf));
      } else {
        sock->lastdata.pbuf = NULL;
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	2200      	movs	r2, #0
 800e182:	605a      	str	r2, [r3, #4]
        LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recv_tcp: deleting pbuf=%p\n", (void *)p));
        pbuf_free(p);
 800e184:	697b      	ldr	r3, [r7, #20]
 800e186:	4618      	mov	r0, r3
 800e188:	f002 fe3e 	bl	8010e08 <pbuf_free>
      }
    }
    /* once we have some data to return, only add more if we don't need to wait */
    apiflags |= NETCONN_DONTBLOCK | NETCONN_NOFIN;
 800e18c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800e190:	f043 0314 	orr.w	r3, r3, #20
 800e194:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    /* @todo: do we need to support peeking more than one pbuf? */
  } while ((recv_left > 0) && !(flags & MSG_PEEK));
 800e198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	dd08      	ble.n	800e1b0 <lwip_recv_tcp+0x1c4>
 800e19e:	683b      	ldr	r3, [r7, #0]
 800e1a0:	f003 0301 	and.w	r3, r3, #1
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	f43f af58 	beq.w	800e05a <lwip_recv_tcp+0x6e>
lwip_recv_tcp_done:
 800e1aa:	e001      	b.n	800e1b0 <lwip_recv_tcp+0x1c4>
          goto lwip_recv_tcp_done;
 800e1ac:	bf00      	nop
 800e1ae:	e000      	b.n	800e1b2 <lwip_recv_tcp+0x1c6>
lwip_recv_tcp_done:
 800e1b0:	bf00      	nop
  if ((recvd > 0) && !(flags & MSG_PEEK)) {
 800e1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	dd0b      	ble.n	800e1d0 <lwip_recv_tcp+0x1e4>
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	f003 0301 	and.w	r3, r3, #1
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d106      	bne.n	800e1d0 <lwip_recv_tcp+0x1e4>
    /* ensure window update after copying all data */
    netconn_tcp_recvd(sock->conn, (size_t)recvd);
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e1c8:	4611      	mov	r1, r2
 800e1ca:	4618      	mov	r0, r3
 800e1cc:	f7fd fe40 	bl	800be50 <netconn_tcp_recvd>
  }
  sock_set_errno(sock, 0);
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	61bb      	str	r3, [r7, #24]
 800e1d4:	69bb      	ldr	r3, [r7, #24]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d002      	beq.n	800e1e0 <lwip_recv_tcp+0x1f4>
 800e1da:	4a08      	ldr	r2, [pc, #32]	@ (800e1fc <lwip_recv_tcp+0x210>)
 800e1dc:	69bb      	ldr	r3, [r7, #24]
 800e1de:	6013      	str	r3, [r2, #0]
  return recvd;
 800e1e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800e1e2:	4618      	mov	r0, r3
 800e1e4:	3730      	adds	r7, #48	@ 0x30
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bd80      	pop	{r7, pc}
 800e1ea:	bf00      	nop
 800e1ec:	080221d8 	.word	0x080221d8
 800e1f0:	080222d0 	.word	0x080222d0
 800e1f4:	0802222c 	.word	0x0802222c
 800e1f8:	080222e0 	.word	0x080222e0
 800e1fc:	2000ef0c 	.word	0x2000ef0c
 800e200:	08022304 	.word	0x08022304
 800e204:	08022310 	.word	0x08022310
 800e208:	08022338 	.word	0x08022338

0800e20c <lwip_sock_make_addr>:

/* Convert a netbuf's address data to struct sockaddr */
static int
lwip_sock_make_addr(struct netconn *conn, ip_addr_t *fromaddr, u16_t port,
                    struct sockaddr *from, socklen_t *fromlen)
{
 800e20c:	b590      	push	{r4, r7, lr}
 800e20e:	b08b      	sub	sp, #44	@ 0x2c
 800e210:	af00      	add	r7, sp, #0
 800e212:	60f8      	str	r0, [r7, #12]
 800e214:	60b9      	str	r1, [r7, #8]
 800e216:	603b      	str	r3, [r7, #0]
 800e218:	4613      	mov	r3, r2
 800e21a:	80fb      	strh	r3, [r7, #6]
  int truncated = 0;
 800e21c:	2300      	movs	r3, #0
 800e21e:	627b      	str	r3, [r7, #36]	@ 0x24
  union sockaddr_aligned saddr;

  LWIP_UNUSED_ARG(conn);

  LWIP_ASSERT("fromaddr != NULL", fromaddr != NULL);
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d106      	bne.n	800e234 <lwip_sock_make_addr+0x28>
 800e226:	4b2b      	ldr	r3, [pc, #172]	@ (800e2d4 <lwip_sock_make_addr+0xc8>)
 800e228:	f240 4207 	movw	r2, #1031	@ 0x407
 800e22c:	492a      	ldr	r1, [pc, #168]	@ (800e2d8 <lwip_sock_make_addr+0xcc>)
 800e22e:	482b      	ldr	r0, [pc, #172]	@ (800e2dc <lwip_sock_make_addr+0xd0>)
 800e230:	f00f fdac 	bl	801dd8c <iprintf>
  LWIP_ASSERT("from != NULL", from != NULL);
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	2b00      	cmp	r3, #0
 800e238:	d106      	bne.n	800e248 <lwip_sock_make_addr+0x3c>
 800e23a:	4b26      	ldr	r3, [pc, #152]	@ (800e2d4 <lwip_sock_make_addr+0xc8>)
 800e23c:	f44f 6281 	mov.w	r2, #1032	@ 0x408
 800e240:	4927      	ldr	r1, [pc, #156]	@ (800e2e0 <lwip_sock_make_addr+0xd4>)
 800e242:	4826      	ldr	r0, [pc, #152]	@ (800e2dc <lwip_sock_make_addr+0xd0>)
 800e244:	f00f fda2 	bl	801dd8c <iprintf>
  LWIP_ASSERT("fromlen != NULL", fromlen != NULL);
 800e248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d106      	bne.n	800e25c <lwip_sock_make_addr+0x50>
 800e24e:	4b21      	ldr	r3, [pc, #132]	@ (800e2d4 <lwip_sock_make_addr+0xc8>)
 800e250:	f240 4209 	movw	r2, #1033	@ 0x409
 800e254:	4923      	ldr	r1, [pc, #140]	@ (800e2e4 <lwip_sock_make_addr+0xd8>)
 800e256:	4821      	ldr	r0, [pc, #132]	@ (800e2dc <lwip_sock_make_addr+0xd0>)
 800e258:	f00f fd98 	bl	801dd8c <iprintf>
    ip4_2_ipv4_mapped_ipv6(ip_2_ip6(fromaddr), ip_2_ip4(fromaddr));
    IP_SET_TYPE(fromaddr, IPADDR_TYPE_V6);
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  IPADDR_PORT_TO_SOCKADDR(&saddr, fromaddr, port);
 800e25c:	f107 0314 	add.w	r3, r7, #20
 800e260:	2210      	movs	r2, #16
 800e262:	701a      	strb	r2, [r3, #0]
 800e264:	f107 0314 	add.w	r3, r7, #20
 800e268:	2202      	movs	r2, #2
 800e26a:	705a      	strb	r2, [r3, #1]
 800e26c:	f107 0414 	add.w	r4, r7, #20
 800e270:	88fb      	ldrh	r3, [r7, #6]
 800e272:	4618      	mov	r0, r3
 800e274:	f000 feaa 	bl	800efcc <lwip_htons>
 800e278:	4603      	mov	r3, r0
 800e27a:	8063      	strh	r3, [r4, #2]
 800e27c:	f107 0314 	add.w	r3, r7, #20
 800e280:	68ba      	ldr	r2, [r7, #8]
 800e282:	6812      	ldr	r2, [r2, #0]
 800e284:	605a      	str	r2, [r3, #4]
 800e286:	f107 0314 	add.w	r3, r7, #20
 800e28a:	3308      	adds	r3, #8
 800e28c:	2208      	movs	r2, #8
 800e28e:	2100      	movs	r1, #0
 800e290:	4618      	mov	r0, r3
 800e292:	f00f fe1a 	bl	801deca <memset>
  if (*fromlen < saddr.sa.sa_len) {
 800e296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e298:	681b      	ldr	r3, [r3, #0]
 800e29a:	7d3a      	ldrb	r2, [r7, #20]
 800e29c:	4293      	cmp	r3, r2
 800e29e:	d202      	bcs.n	800e2a6 <lwip_sock_make_addr+0x9a>
    truncated = 1;
 800e2a0:	2301      	movs	r3, #1
 800e2a2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e2a4:	e008      	b.n	800e2b8 <lwip_sock_make_addr+0xac>
  } else if (*fromlen > saddr.sa.sa_len) {
 800e2a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	7d3a      	ldrb	r2, [r7, #20]
 800e2ac:	4293      	cmp	r3, r2
 800e2ae:	d903      	bls.n	800e2b8 <lwip_sock_make_addr+0xac>
    *fromlen = saddr.sa.sa_len;
 800e2b0:	7d3b      	ldrb	r3, [r7, #20]
 800e2b2:	461a      	mov	r2, r3
 800e2b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b6:	601a      	str	r2, [r3, #0]
  }
  MEMCPY(from, &saddr, *fromlen);
 800e2b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2ba:	681a      	ldr	r2, [r3, #0]
 800e2bc:	f107 0314 	add.w	r3, r7, #20
 800e2c0:	4619      	mov	r1, r3
 800e2c2:	6838      	ldr	r0, [r7, #0]
 800e2c4:	f00f fee9 	bl	801e09a <memcpy>
  return truncated;
 800e2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	372c      	adds	r7, #44	@ 0x2c
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd90      	pop	{r4, r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	080221d8 	.word	0x080221d8
 800e2d8:	08022348 	.word	0x08022348
 800e2dc:	0802222c 	.word	0x0802222c
 800e2e0:	0802235c 	.word	0x0802235c
 800e2e4:	0802236c 	.word	0x0802236c

0800e2e8 <lwip_recv_tcp_from>:

#if LWIP_TCP
/* Helper function to get a tcp socket's remote address info */
static int
lwip_recv_tcp_from(struct lwip_sock *sock, struct sockaddr *from, socklen_t *fromlen, const char *dbg_fn, int dbg_s, ssize_t dbg_ret)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b088      	sub	sp, #32
 800e2ec:	af02      	add	r7, sp, #8
 800e2ee:	60f8      	str	r0, [r7, #12]
 800e2f0:	60b9      	str	r1, [r7, #8]
 800e2f2:	607a      	str	r2, [r7, #4]
 800e2f4:	603b      	str	r3, [r7, #0]
  if (sock == NULL) {
 800e2f6:	68fb      	ldr	r3, [r7, #12]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d101      	bne.n	800e300 <lwip_recv_tcp_from+0x18>
    return 0;
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	e021      	b.n	800e344 <lwip_recv_tcp_from+0x5c>
  LWIP_UNUSED_ARG(dbg_fn);
  LWIP_UNUSED_ARG(dbg_s);
  LWIP_UNUSED_ARG(dbg_ret);

#if !SOCKETS_DEBUG
  if (from && fromlen)
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	2b00      	cmp	r3, #0
 800e304:	d01d      	beq.n	800e342 <lwip_recv_tcp_from+0x5a>
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	d01a      	beq.n	800e342 <lwip_recv_tcp_from+0x5a>
#endif /* !SOCKETS_DEBUG */
  {
    /* get remote addr/port from tcp_pcb */
    u16_t port;
    ip_addr_t tmpaddr;
    netconn_getaddr(sock->conn, &tmpaddr, &port, 0);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	6818      	ldr	r0, [r3, #0]
 800e310:	f107 0216 	add.w	r2, r7, #22
 800e314:	f107 0110 	add.w	r1, r7, #16
 800e318:	2300      	movs	r3, #0
 800e31a:	f7fd fbed 	bl	800baf8 <netconn_getaddr>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("%s(%d):  addr=", dbg_fn, dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, tmpaddr);
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", port, (int)dbg_ret));
    if (from && fromlen) {
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	2b00      	cmp	r3, #0
 800e322:	d00e      	beq.n	800e342 <lwip_recv_tcp_from+0x5a>
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d00b      	beq.n	800e342 <lwip_recv_tcp_from+0x5a>
      return lwip_sock_make_addr(sock->conn, &tmpaddr, port, from, fromlen);
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	6818      	ldr	r0, [r3, #0]
 800e32e:	8afa      	ldrh	r2, [r7, #22]
 800e330:	f107 0110 	add.w	r1, r7, #16
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	9300      	str	r3, [sp, #0]
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	f7ff ff67 	bl	800e20c <lwip_sock_make_addr>
 800e33e:	4603      	mov	r3, r0
 800e340:	e000      	b.n	800e344 <lwip_recv_tcp_from+0x5c>
    }
  }
  return 0;
 800e342:	2300      	movs	r3, #0
}
 800e344:	4618      	mov	r0, r3
 800e346:	3718      	adds	r7, #24
 800e348:	46bd      	mov	sp, r7
 800e34a:	bd80      	pop	{r7, pc}

0800e34c <lwip_recvfrom_udp_raw>:
/* Helper function to receive a netbuf from a udp or raw netconn.
 * Keeps sock->lastdata for peeking.
 */
static err_t
lwip_recvfrom_udp_raw(struct lwip_sock *sock, int flags, struct msghdr *msg, u16_t *datagram_len, int dbg_s)
{
 800e34c:	b590      	push	{r4, r7, lr}
 800e34e:	b08d      	sub	sp, #52	@ 0x34
 800e350:	af02      	add	r7, sp, #8
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	607a      	str	r2, [r7, #4]
 800e358:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t buflen, copylen, copied;
  int i;

  LWIP_UNUSED_ARG(dbg_s);
  LWIP_ERROR("lwip_recvfrom_udp_raw: invalid arguments", (msg->msg_iov != NULL) || (msg->msg_iovlen <= 0), return ERR_ARG;);
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	689b      	ldr	r3, [r3, #8]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d10d      	bne.n	800e37e <lwip_recvfrom_udp_raw+0x32>
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	68db      	ldr	r3, [r3, #12]
 800e366:	2b00      	cmp	r3, #0
 800e368:	dd09      	ble.n	800e37e <lwip_recvfrom_udp_raw+0x32>
 800e36a:	4b5e      	ldr	r3, [pc, #376]	@ (800e4e4 <lwip_recvfrom_udp_raw+0x198>)
 800e36c:	f240 4249 	movw	r2, #1097	@ 0x449
 800e370:	495d      	ldr	r1, [pc, #372]	@ (800e4e8 <lwip_recvfrom_udp_raw+0x19c>)
 800e372:	485e      	ldr	r0, [pc, #376]	@ (800e4ec <lwip_recvfrom_udp_raw+0x1a0>)
 800e374:	f00f fd0a 	bl	801dd8c <iprintf>
 800e378:	f06f 030f 	mvn.w	r3, #15
 800e37c:	e0ad      	b.n	800e4da <lwip_recvfrom_udp_raw+0x18e>

  if (flags & MSG_DONTWAIT) {
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	f003 0308 	and.w	r3, r3, #8
 800e384:	2b00      	cmp	r3, #0
 800e386:	d003      	beq.n	800e390 <lwip_recvfrom_udp_raw+0x44>
    apiflags = NETCONN_DONTBLOCK;
 800e388:	2304      	movs	r3, #4
 800e38a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800e38e:	e002      	b.n	800e396 <lwip_recvfrom_udp_raw+0x4a>
  } else {
    apiflags = 0;
 800e390:	2300      	movs	r3, #0
 800e392:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: top sock->lastdata=%p\n", (void *)sock->lastdata.netbuf));
  /* Check if there is data left from the last recv operation. */
  buf = sock->lastdata.netbuf;
 800e396:	68fb      	ldr	r3, [r7, #12]
 800e398:	685b      	ldr	r3, [r3, #4]
 800e39a:	613b      	str	r3, [r7, #16]
  if (buf == NULL) {
 800e39c:	693b      	ldr	r3, [r7, #16]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d11e      	bne.n	800e3e0 <lwip_recvfrom_udp_raw+0x94>
    /* No data was left from the previous operation, so we try to get
        some from the network. */
    err = netconn_recv_udp_raw_netbuf_flags(sock->conn, &buf, apiflags);
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e3aa:	f107 0110 	add.w	r1, r7, #16
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7fd fe2c 	bl	800c00c <netconn_recv_udp_raw_netbuf_flags>
 800e3b4:	4603      	mov	r3, r0
 800e3b6:	76fb      	strb	r3, [r7, #27]
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw[UDP/RAW]: netconn_recv err=%d, netbuf=%p\n",
                                err, (void *)buf));

    if (err != ERR_OK) {
 800e3b8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d002      	beq.n	800e3c6 <lwip_recvfrom_udp_raw+0x7a>
      return err;
 800e3c0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800e3c4:	e089      	b.n	800e4da <lwip_recvfrom_udp_raw+0x18e>
    }
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d106      	bne.n	800e3da <lwip_recvfrom_udp_raw+0x8e>
 800e3cc:	4b45      	ldr	r3, [pc, #276]	@ (800e4e4 <lwip_recvfrom_udp_raw+0x198>)
 800e3ce:	f240 425e 	movw	r2, #1118	@ 0x45e
 800e3d2:	4947      	ldr	r1, [pc, #284]	@ (800e4f0 <lwip_recvfrom_udp_raw+0x1a4>)
 800e3d4:	4845      	ldr	r0, [pc, #276]	@ (800e4ec <lwip_recvfrom_udp_raw+0x1a0>)
 800e3d6:	f00f fcd9 	bl	801dd8c <iprintf>
    sock->lastdata.netbuf = buf;
 800e3da:	693a      	ldr	r2, [r7, #16]
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	605a      	str	r2, [r3, #4]
  }
  buflen = buf->p->tot_len;
 800e3e0:	693b      	ldr	r3, [r7, #16]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	891b      	ldrh	r3, [r3, #8]
 800e3e6:	833b      	strh	r3, [r7, #24]
  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw: buflen=%"U16_F"\n", buflen));

  copied = 0;
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	847b      	strh	r3, [r7, #34]	@ 0x22
  /* copy the pbuf payload into the iovs */
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	61fb      	str	r3, [r7, #28]
 800e3f0:	e029      	b.n	800e446 <lwip_recvfrom_udp_raw+0xfa>
    u16_t len_left = (u16_t)(buflen - copied);
 800e3f2:	8b3a      	ldrh	r2, [r7, #24]
 800e3f4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e3f6:	1ad3      	subs	r3, r2, r3
 800e3f8:	82fb      	strh	r3, [r7, #22]
    if (msg->msg_iov[i].iov_len > len_left) {
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	689a      	ldr	r2, [r3, #8]
 800e3fe:	69fb      	ldr	r3, [r7, #28]
 800e400:	00db      	lsls	r3, r3, #3
 800e402:	4413      	add	r3, r2
 800e404:	685a      	ldr	r2, [r3, #4]
 800e406:	8afb      	ldrh	r3, [r7, #22]
 800e408:	429a      	cmp	r2, r3
 800e40a:	d902      	bls.n	800e412 <lwip_recvfrom_udp_raw+0xc6>
      copylen = len_left;
 800e40c:	8afb      	ldrh	r3, [r7, #22]
 800e40e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800e410:	e006      	b.n	800e420 <lwip_recvfrom_udp_raw+0xd4>
    } else {
      copylen = (u16_t)msg->msg_iov[i].iov_len;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	689a      	ldr	r2, [r3, #8]
 800e416:	69fb      	ldr	r3, [r7, #28]
 800e418:	00db      	lsls	r3, r3, #3
 800e41a:	4413      	add	r3, r2
 800e41c:	685b      	ldr	r3, [r3, #4]
 800e41e:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    /* copy the contents of the received buffer into
        the supplied memory buffer */
    pbuf_copy_partial(buf->p, (u8_t *)msg->msg_iov[i].iov_base, copylen, copied);
 800e420:	693b      	ldr	r3, [r7, #16]
 800e422:	6818      	ldr	r0, [r3, #0]
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	689a      	ldr	r2, [r3, #8]
 800e428:	69fb      	ldr	r3, [r7, #28]
 800e42a:	00db      	lsls	r3, r3, #3
 800e42c:	4413      	add	r3, r2
 800e42e:	6819      	ldr	r1, [r3, #0]
 800e430:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800e432:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e434:	f002 feee 	bl	8011214 <pbuf_copy_partial>
    copied = (u16_t)(copied + copylen);
 800e438:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e43a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e43c:	4413      	add	r3, r2
 800e43e:	847b      	strh	r3, [r7, #34]	@ 0x22
  for (i = 0; (i < msg->msg_iovlen) && (copied < buflen); i++) {
 800e440:	69fb      	ldr	r3, [r7, #28]
 800e442:	3301      	adds	r3, #1
 800e444:	61fb      	str	r3, [r7, #28]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	68db      	ldr	r3, [r3, #12]
 800e44a:	69fa      	ldr	r2, [r7, #28]
 800e44c:	429a      	cmp	r2, r3
 800e44e:	da03      	bge.n	800e458 <lwip_recvfrom_udp_raw+0x10c>
 800e450:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 800e452:	8b3b      	ldrh	r3, [r7, #24]
 800e454:	429a      	cmp	r2, r3
 800e456:	d3cc      	bcc.n	800e3f2 <lwip_recvfrom_udp_raw+0xa6>
  }

  /* Check to see from where the data was.*/
#if !SOCKETS_DEBUG
  if (msg->msg_name && msg->msg_namelen)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d01a      	beq.n	800e496 <lwip_recvfrom_udp_raw+0x14a>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	685b      	ldr	r3, [r3, #4]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d016      	beq.n	800e496 <lwip_recvfrom_udp_raw+0x14a>
#endif /* !SOCKETS_DEBUG */
  {
    LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom_udp_raw(%d):  addr=", dbg_s));
    ip_addr_debug_print_val(SOCKETS_DEBUG, *netbuf_fromaddr(buf));
    LWIP_DEBUGF(SOCKETS_DEBUG, (" port=%"U16_F" len=%d\n", netbuf_fromport(buf), copied));
    if (msg->msg_name && msg->msg_namelen) {
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	d012      	beq.n	800e496 <lwip_recvfrom_udp_raw+0x14a>
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	685b      	ldr	r3, [r3, #4]
 800e474:	2b00      	cmp	r3, #0
 800e476:	d00e      	beq.n	800e496 <lwip_recvfrom_udp_raw+0x14a>
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	6818      	ldr	r0, [r3, #0]
 800e47c:	693b      	ldr	r3, [r7, #16]
 800e47e:	f103 0108 	add.w	r1, r3, #8
 800e482:	693b      	ldr	r3, [r7, #16]
 800e484:	899a      	ldrh	r2, [r3, #12]
                          (struct sockaddr *)msg->msg_name, &msg->msg_namelen);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681c      	ldr	r4, [r3, #0]
      lwip_sock_make_addr(sock->conn, netbuf_fromaddr(buf), netbuf_fromport(buf),
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	3304      	adds	r3, #4
 800e48e:	9300      	str	r3, [sp, #0]
 800e490:	4623      	mov	r3, r4
 800e492:	f7ff febb 	bl	800e20c <lwip_sock_make_addr>
    }
  }

  /* Initialize flag output */
  msg->msg_flags = 0;
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	2200      	movs	r2, #0
 800e49a:	619a      	str	r2, [r3, #24]

  if (msg->msg_control) {
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	691b      	ldr	r3, [r3, #16]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d007      	beq.n	800e4b4 <lwip_recvfrom_udp_raw+0x168>
    u8_t wrote_msg = 0;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	757b      	strb	r3, [r7, #21]
#endif /* LWIP_IPV4 */
      }
    }
#endif /* LWIP_NETBUF_RECVINFO */

    if (!wrote_msg) {
 800e4a8:	7d7b      	ldrb	r3, [r7, #21]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d102      	bne.n	800e4b4 <lwip_recvfrom_udp_raw+0x168>
      msg->msg_controllen = 0;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	615a      	str	r2, [r3, #20]
    }
  }

  /* If we don't peek the incoming message: zero lastdata pointer and free the netbuf */
  if ((flags & MSG_PEEK) == 0) {
 800e4b4:	68bb      	ldr	r3, [r7, #8]
 800e4b6:	f003 0301 	and.w	r3, r3, #1
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d106      	bne.n	800e4cc <lwip_recvfrom_udp_raw+0x180>
    sock->lastdata.netbuf = NULL;
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	605a      	str	r2, [r3, #4]
    netbuf_delete(buf);
 800e4c4:	693b      	ldr	r3, [r7, #16]
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7ff fbbc 	bl	800dc44 <netbuf_delete>
  }
  if (datagram_len) {
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d002      	beq.n	800e4d8 <lwip_recvfrom_udp_raw+0x18c>
    *datagram_len = buflen;
 800e4d2:	683b      	ldr	r3, [r7, #0]
 800e4d4:	8b3a      	ldrh	r2, [r7, #24]
 800e4d6:	801a      	strh	r2, [r3, #0]
  }
  return ERR_OK;
 800e4d8:	2300      	movs	r3, #0
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	372c      	adds	r7, #44	@ 0x2c
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd90      	pop	{r4, r7, pc}
 800e4e2:	bf00      	nop
 800e4e4:	080221d8 	.word	0x080221d8
 800e4e8:	0802237c 	.word	0x0802237c
 800e4ec:	0802222c 	.word	0x0802222c
 800e4f0:	080223a8 	.word	0x080223a8

0800e4f4 <lwip_recvfrom>:

ssize_t
lwip_recvfrom(int s, void *mem, size_t len, int flags,
              struct sockaddr *from, socklen_t *fromlen)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b096      	sub	sp, #88	@ 0x58
 800e4f8:	af02      	add	r7, sp, #8
 800e4fa:	60f8      	str	r0, [r7, #12]
 800e4fc:	60b9      	str	r1, [r7, #8]
 800e4fe:	607a      	str	r2, [r7, #4]
 800e500:	603b      	str	r3, [r7, #0]
  struct lwip_sock *sock;
  ssize_t ret;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom(%d, %p, %"SZT_F", 0x%x, ..)\n", s, mem, len, flags));
  sock = get_socket(s);
 800e502:	68f8      	ldr	r0, [r7, #12]
 800e504:	f7ff fc6e 	bl	800dde4 <get_socket>
 800e508:	64f8      	str	r0, [r7, #76]	@ 0x4c
  if (!sock) {
 800e50a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e50c:	2b00      	cmp	r3, #0
 800e50e:	d102      	bne.n	800e516 <lwip_recvfrom+0x22>
    return -1;
 800e510:	f04f 33ff 	mov.w	r3, #4294967295
 800e514:	e078      	b.n	800e608 <lwip_recvfrom+0x114>
  }
#if LWIP_TCP
  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800e516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e520:	2b10      	cmp	r3, #16
 800e522:	d112      	bne.n	800e54a <lwip_recvfrom+0x56>
    ret = lwip_recv_tcp(sock, mem, len, flags);
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	68b9      	ldr	r1, [r7, #8]
 800e52a:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800e52c:	f7ff fd5e 	bl	800dfec <lwip_recv_tcp>
 800e530:	6478      	str	r0, [r7, #68]	@ 0x44
    lwip_recv_tcp_from(sock, from, fromlen, "lwip_recvfrom", s, ret);
 800e532:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e534:	9301      	str	r3, [sp, #4]
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	9300      	str	r3, [sp, #0]
 800e53a:	4b35      	ldr	r3, [pc, #212]	@ (800e610 <lwip_recvfrom+0x11c>)
 800e53c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800e53e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e540:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800e542:	f7ff fed1 	bl	800e2e8 <lwip_recv_tcp_from>
    done_socket(sock);
    return ret;
 800e546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e548:	e05e      	b.n	800e608 <lwip_recvfrom+0x114>
  } else
#endif
  {
    u16_t datagram_len = 0;
 800e54a:	2300      	movs	r3, #0
 800e54c:	877b      	strh	r3, [r7, #58]	@ 0x3a
    struct iovec vec;
    struct msghdr msg;
    err_t err;
    vec.iov_base = mem;
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	633b      	str	r3, [r7, #48]	@ 0x30
    vec.iov_len = len;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	637b      	str	r3, [r7, #52]	@ 0x34
    msg.msg_control = NULL;
 800e556:	2300      	movs	r3, #0
 800e558:	627b      	str	r3, [r7, #36]	@ 0x24
    msg.msg_controllen = 0;
 800e55a:	2300      	movs	r3, #0
 800e55c:	62bb      	str	r3, [r7, #40]	@ 0x28
    msg.msg_flags = 0;
 800e55e:	2300      	movs	r3, #0
 800e560:	62fb      	str	r3, [r7, #44]	@ 0x2c
    msg.msg_iov = &vec;
 800e562:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800e566:	61fb      	str	r3, [r7, #28]
    msg.msg_iovlen = 1;
 800e568:	2301      	movs	r3, #1
 800e56a:	623b      	str	r3, [r7, #32]
    msg.msg_name = from;
 800e56c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e56e:	617b      	str	r3, [r7, #20]
    msg.msg_namelen = (fromlen ? *fromlen : 0);
 800e570:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e572:	2b00      	cmp	r3, #0
 800e574:	d002      	beq.n	800e57c <lwip_recvfrom+0x88>
 800e576:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	e000      	b.n	800e57e <lwip_recvfrom+0x8a>
 800e57c:	2300      	movs	r3, #0
 800e57e:	61bb      	str	r3, [r7, #24]
    err = lwip_recvfrom_udp_raw(sock, flags, &msg, &datagram_len, s);
 800e580:	f107 013a 	add.w	r1, r7, #58	@ 0x3a
 800e584:	f107 0214 	add.w	r2, r7, #20
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	9300      	str	r3, [sp, #0]
 800e58c:	460b      	mov	r3, r1
 800e58e:	6839      	ldr	r1, [r7, #0]
 800e590:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800e592:	f7ff fedb 	bl	800e34c <lwip_recvfrom_udp_raw>
 800e596:	4603      	mov	r3, r0
 800e598:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
    if (err != ERR_OK) {
 800e59c:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d00e      	beq.n	800e5c2 <lwip_recvfrom+0xce>
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_recvfrom[UDP/RAW](%d): buf == NULL, error is \"%s\"!\n",
                                  s, lwip_strerr(err)));
      sock_set_errno(sock, err_to_errno(err));
 800e5a4:	f997 304b 	ldrsb.w	r3, [r7, #75]	@ 0x4b
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f7ff fb2d 	bl	800dc08 <err_to_errno>
 800e5ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800e5b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d002      	beq.n	800e5bc <lwip_recvfrom+0xc8>
 800e5b6:	4a17      	ldr	r2, [pc, #92]	@ (800e614 <lwip_recvfrom+0x120>)
 800e5b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e5ba:	6013      	str	r3, [r2, #0]
      done_socket(sock);
      return -1;
 800e5bc:	f04f 33ff 	mov.w	r3, #4294967295
 800e5c0:	e022      	b.n	800e608 <lwip_recvfrom+0x114>
    }
    ret = (ssize_t)LWIP_MIN(LWIP_MIN(len, datagram_len), SSIZE_MAX);
 800e5c2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e5c4:	461a      	mov	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	4293      	cmp	r3, r2
 800e5ca:	bf28      	it	cs
 800e5cc:	4613      	movcs	r3, r2
 800e5ce:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800e5d2:	4293      	cmp	r3, r2
 800e5d4:	d206      	bcs.n	800e5e4 <lwip_recvfrom+0xf0>
 800e5d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800e5d8:	461a      	mov	r2, r3
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	4293      	cmp	r3, r2
 800e5de:	bf28      	it	cs
 800e5e0:	4613      	movcs	r3, r2
 800e5e2:	e001      	b.n	800e5e8 <lwip_recvfrom+0xf4>
 800e5e4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800e5e8:	647b      	str	r3, [r7, #68]	@ 0x44
    if (fromlen) {
 800e5ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d002      	beq.n	800e5f6 <lwip_recvfrom+0x102>
      *fromlen = msg.msg_namelen;
 800e5f0:	69ba      	ldr	r2, [r7, #24]
 800e5f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e5f4:	601a      	str	r2, [r3, #0]
    }
  }

  sock_set_errno(sock, 0);
 800e5f6:	2300      	movs	r3, #0
 800e5f8:	643b      	str	r3, [r7, #64]	@ 0x40
 800e5fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d002      	beq.n	800e606 <lwip_recvfrom+0x112>
 800e600:	4a04      	ldr	r2, [pc, #16]	@ (800e614 <lwip_recvfrom+0x120>)
 800e602:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e604:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return ret;
 800e606:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3750      	adds	r7, #80	@ 0x50
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	080223b4 	.word	0x080223b4
 800e614:	2000ef0c 	.word	0x2000ef0c

0800e618 <lwip_recv>:
  return lwip_recvmsg(s, &msg, 0);
}

ssize_t
lwip_recv(int s, void *mem, size_t len, int flags)
{
 800e618:	b580      	push	{r7, lr}
 800e61a:	b086      	sub	sp, #24
 800e61c:	af02      	add	r7, sp, #8
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	607a      	str	r2, [r7, #4]
 800e624:	603b      	str	r3, [r7, #0]
  return lwip_recvfrom(s, mem, len, flags, NULL, NULL);
 800e626:	2300      	movs	r3, #0
 800e628:	9301      	str	r3, [sp, #4]
 800e62a:	2300      	movs	r3, #0
 800e62c:	9300      	str	r3, [sp, #0]
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	687a      	ldr	r2, [r7, #4]
 800e632:	68b9      	ldr	r1, [r7, #8]
 800e634:	68f8      	ldr	r0, [r7, #12]
 800e636:	f7ff ff5d 	bl	800e4f4 <lwip_recvfrom>
 800e63a:	4603      	mov	r3, r0
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3710      	adds	r7, #16
 800e640:	46bd      	mov	sp, r7
 800e642:	bd80      	pop	{r7, pc}

0800e644 <lwip_send>:
#endif /* LWIP_UDP || LWIP_RAW */
}

ssize_t
lwip_send(int s, const void *data, size_t size, int flags)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b08a      	sub	sp, #40	@ 0x28
 800e648:	af02      	add	r7, sp, #8
 800e64a:	60f8      	str	r0, [r7, #12]
 800e64c:	60b9      	str	r1, [r7, #8]
 800e64e:	607a      	str	r2, [r7, #4]
 800e650:	603b      	str	r3, [r7, #0]
  size_t written;

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d, data=%p, size=%"SZT_F", flags=0x%x)\n",
                              s, data, size, flags));

  sock = get_socket(s);
 800e652:	68f8      	ldr	r0, [r7, #12]
 800e654:	f7ff fbc6 	bl	800dde4 <get_socket>
 800e658:	61f8      	str	r0, [r7, #28]
  if (!sock) {
 800e65a:	69fb      	ldr	r3, [r7, #28]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d102      	bne.n	800e666 <lwip_send+0x22>
    return -1;
 800e660:	f04f 33ff 	mov.w	r3, #4294967295
 800e664:	e046      	b.n	800e6f4 <lwip_send+0xb0>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) != NETCONN_TCP) {
 800e666:	69fb      	ldr	r3, [r7, #28]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	781b      	ldrb	r3, [r3, #0]
 800e66c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e670:	2b10      	cmp	r3, #16
 800e672:	d00b      	beq.n	800e68c <lwip_send+0x48>
#if (LWIP_UDP || LWIP_RAW)
    done_socket(sock);
    return lwip_sendto(s, data, size, flags, NULL, 0);
 800e674:	2300      	movs	r3, #0
 800e676:	9301      	str	r3, [sp, #4]
 800e678:	2300      	movs	r3, #0
 800e67a:	9300      	str	r3, [sp, #0]
 800e67c:	683b      	ldr	r3, [r7, #0]
 800e67e:	687a      	ldr	r2, [r7, #4]
 800e680:	68b9      	ldr	r1, [r7, #8]
 800e682:	68f8      	ldr	r0, [r7, #12]
 800e684:	f000 f83c 	bl	800e700 <lwip_sendto>
 800e688:	4603      	mov	r3, r0
 800e68a:	e033      	b.n	800e6f4 <lwip_send+0xb0>
    return -1;
#endif /* (LWIP_UDP || LWIP_RAW) */
  }

  write_flags = (u8_t)(NETCONN_COPY |
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800e68c:	683b      	ldr	r3, [r7, #0]
 800e68e:	f003 0310 	and.w	r3, r3, #16
  write_flags = (u8_t)(NETCONN_COPY |
 800e692:	2b00      	cmp	r3, #0
 800e694:	d001      	beq.n	800e69a <lwip_send+0x56>
 800e696:	2203      	movs	r2, #3
 800e698:	e000      	b.n	800e69c <lwip_send+0x58>
 800e69a:	2201      	movs	r2, #1
                       ((flags & MSG_MORE)     ? NETCONN_MORE      : 0) |
 800e69c:	683b      	ldr	r3, [r7, #0]
 800e69e:	105b      	asrs	r3, r3, #1
 800e6a0:	b25b      	sxtb	r3, r3
 800e6a2:	f003 0304 	and.w	r3, r3, #4
 800e6a6:	b25b      	sxtb	r3, r3
 800e6a8:	4313      	orrs	r3, r2
 800e6aa:	b25b      	sxtb	r3, r3
  write_flags = (u8_t)(NETCONN_COPY |
 800e6ac:	76fb      	strb	r3, [r7, #27]
                       ((flags & MSG_DONTWAIT) ? NETCONN_DONTBLOCK : 0));
  written = 0;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	613b      	str	r3, [r7, #16]
  err = netconn_write_partly(sock->conn, data, size, write_flags, &written);
 800e6b2:	69fb      	ldr	r3, [r7, #28]
 800e6b4:	6818      	ldr	r0, [r3, #0]
 800e6b6:	7efa      	ldrb	r2, [r7, #27]
 800e6b8:	f107 0310 	add.w	r3, r7, #16
 800e6bc:	9300      	str	r3, [sp, #0]
 800e6be:	4613      	mov	r3, r2
 800e6c0:	687a      	ldr	r2, [r7, #4]
 800e6c2:	68b9      	ldr	r1, [r7, #8]
 800e6c4:	f7fd fcfc 	bl	800c0c0 <netconn_write_partly>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	76bb      	strb	r3, [r7, #26]

  LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_send(%d) err=%d written=%"SZT_F"\n", s, err, written));
  sock_set_errno(sock, err_to_errno(err));
 800e6cc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7ff fa99 	bl	800dc08 <err_to_errno>
 800e6d6:	6178      	str	r0, [r7, #20]
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d002      	beq.n	800e6e4 <lwip_send+0xa0>
 800e6de:	4a07      	ldr	r2, [pc, #28]	@ (800e6fc <lwip_send+0xb8>)
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  /* casting 'written' to ssize_t is OK here since the netconn API limits it to SSIZE_MAX */
  return (err == ERR_OK ? (ssize_t)written : -1);
 800e6e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d101      	bne.n	800e6f0 <lwip_send+0xac>
 800e6ec:	693b      	ldr	r3, [r7, #16]
 800e6ee:	e001      	b.n	800e6f4 <lwip_send+0xb0>
 800e6f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e6f4:	4618      	mov	r0, r3
 800e6f6:	3720      	adds	r7, #32
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	bd80      	pop	{r7, pc}
 800e6fc:	2000ef0c 	.word	0x2000ef0c

0800e700 <lwip_sendto>:
}

ssize_t
lwip_sendto(int s, const void *data, size_t size, int flags,
            const struct sockaddr *to, socklen_t tolen)
{
 800e700:	b580      	push	{r7, lr}
 800e702:	b08e      	sub	sp, #56	@ 0x38
 800e704:	af00      	add	r7, sp, #0
 800e706:	60f8      	str	r0, [r7, #12]
 800e708:	60b9      	str	r1, [r7, #8]
 800e70a:	607a      	str	r2, [r7, #4]
 800e70c:	603b      	str	r3, [r7, #0]
  err_t err;
  u16_t short_size;
  u16_t remote_port;
  struct netbuf buf;

  sock = get_socket(s);
 800e70e:	68f8      	ldr	r0, [r7, #12]
 800e710:	f7ff fb68 	bl	800dde4 <get_socket>
 800e714:	6338      	str	r0, [r7, #48]	@ 0x30
  if (!sock) {
 800e716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e718:	2b00      	cmp	r3, #0
 800e71a:	d102      	bne.n	800e722 <lwip_sendto+0x22>
    return -1;
 800e71c:	f04f 33ff 	mov.w	r3, #4294967295
 800e720:	e093      	b.n	800e84a <lwip_sendto+0x14a>
  }

  if (NETCONNTYPE_GROUP(netconn_type(sock->conn)) == NETCONN_TCP) {
 800e722:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800e72c:	2b10      	cmp	r3, #16
 800e72e:	d107      	bne.n	800e740 <lwip_sendto+0x40>
#if LWIP_TCP
    done_socket(sock);
    return lwip_send(s, data, size, flags);
 800e730:	683b      	ldr	r3, [r7, #0]
 800e732:	687a      	ldr	r2, [r7, #4]
 800e734:	68b9      	ldr	r1, [r7, #8]
 800e736:	68f8      	ldr	r0, [r7, #12]
 800e738:	f7ff ff84 	bl	800e644 <lwip_send>
 800e73c:	4603      	mov	r3, r0
 800e73e:	e084      	b.n	800e84a <lwip_sendto+0x14a>
    done_socket(sock);
    return -1;
#endif /* LWIP_TCP */
  }

  if (size > LWIP_MIN(0xFFFF, SSIZE_MAX)) {
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800e746:	d30a      	bcc.n	800e75e <lwip_sendto+0x5e>
    /* cannot fit into one datagram (at least for us) */
    sock_set_errno(sock, EMSGSIZE);
 800e748:	235a      	movs	r3, #90	@ 0x5a
 800e74a:	623b      	str	r3, [r7, #32]
 800e74c:	6a3b      	ldr	r3, [r7, #32]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d002      	beq.n	800e758 <lwip_sendto+0x58>
 800e752:	4a40      	ldr	r2, [pc, #256]	@ (800e854 <lwip_sendto+0x154>)
 800e754:	6a3b      	ldr	r3, [r7, #32]
 800e756:	6013      	str	r3, [r2, #0]
    done_socket(sock);
    return -1;
 800e758:	f04f 33ff 	mov.w	r3, #4294967295
 800e75c:	e075      	b.n	800e84a <lwip_sendto+0x14a>
  }
  short_size = (u16_t)size;
 800e75e:	687b      	ldr	r3, [r7, #4]
 800e760:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  LWIP_ERROR("lwip_sendto: invalid address", (((to == NULL) && (tolen == 0)) ||
 800e762:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e764:	2b00      	cmp	r3, #0
 800e766:	d102      	bne.n	800e76e <lwip_sendto+0x6e>
 800e768:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d023      	beq.n	800e7b6 <lwip_sendto+0xb6>
 800e76e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e770:	2b10      	cmp	r3, #16
 800e772:	d10b      	bne.n	800e78c <lwip_sendto+0x8c>
 800e774:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e776:	2b00      	cmp	r3, #0
 800e778:	d008      	beq.n	800e78c <lwip_sendto+0x8c>
 800e77a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e77c:	785b      	ldrb	r3, [r3, #1]
 800e77e:	2b02      	cmp	r3, #2
 800e780:	d104      	bne.n	800e78c <lwip_sendto+0x8c>
 800e782:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e784:	f003 0303 	and.w	r3, r3, #3
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d014      	beq.n	800e7b6 <lwip_sendto+0xb6>
 800e78c:	4b32      	ldr	r3, [pc, #200]	@ (800e858 <lwip_sendto+0x158>)
 800e78e:	f240 6252 	movw	r2, #1618	@ 0x652
 800e792:	4932      	ldr	r1, [pc, #200]	@ (800e85c <lwip_sendto+0x15c>)
 800e794:	4832      	ldr	r0, [pc, #200]	@ (800e860 <lwip_sendto+0x160>)
 800e796:	f00f faf9 	bl	801dd8c <iprintf>
 800e79a:	f06f 000f 	mvn.w	r0, #15
 800e79e:	f7ff fa33 	bl	800dc08 <err_to_errno>
 800e7a2:	62b8      	str	r0, [r7, #40]	@ 0x28
 800e7a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d002      	beq.n	800e7b0 <lwip_sendto+0xb0>
 800e7aa:	4a2a      	ldr	r2, [pc, #168]	@ (800e854 <lwip_sendto+0x154>)
 800e7ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e7ae:	6013      	str	r3, [r2, #0]
 800e7b0:	f04f 33ff 	mov.w	r3, #4294967295
 800e7b4:	e049      	b.n	800e84a <lwip_sendto+0x14a>
              ((to != NULL) && (IS_SOCK_ADDR_TYPE_VALID(to) && IS_SOCK_ADDR_ALIGNED(to))))),
             sock_set_errno(sock, err_to_errno(ERR_ARG)); done_socket(sock); return -1;);
  LWIP_UNUSED_ARG(tolen);

  /* initialize a buffer */
  buf.p = buf.ptr = NULL;
 800e7b6:	2300      	movs	r3, #0
 800e7b8:	617b      	str	r3, [r7, #20]
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	613b      	str	r3, [r7, #16]
#if LWIP_CHECKSUM_ON_COPY
  buf.flags = 0;
#endif /* LWIP_CHECKSUM_ON_COPY */
  if (to) {
 800e7be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d00a      	beq.n	800e7da <lwip_sendto+0xda>
    SOCKADDR_TO_IPADDR_PORT(to, &buf.addr, remote_port);
 800e7c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7c6:	685b      	ldr	r3, [r3, #4]
 800e7c8:	61bb      	str	r3, [r7, #24]
 800e7ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e7cc:	885b      	ldrh	r3, [r3, #2]
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	f000 fbfc 	bl	800efcc <lwip_htons>
 800e7d4:	4603      	mov	r3, r0
 800e7d6:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800e7d8:	e003      	b.n	800e7e2 <lwip_sendto+0xe2>
  } else {
    remote_port = 0;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	86bb      	strh	r3, [r7, #52]	@ 0x34
    ip_addr_set_any(NETCONNTYPE_ISIPV6(netconn_type(sock->conn)), &buf.addr);
 800e7de:	2300      	movs	r3, #0
 800e7e0:	61bb      	str	r3, [r7, #24]
  }
  netbuf_fromport(&buf) = remote_port;
 800e7e2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800e7e4:	83bb      	strh	r3, [r7, #28]
      MEMCPY(buf.p->payload, data, short_size);
    }
    err = ERR_OK;
  }
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  err = netbuf_ref(&buf, data, short_size);
 800e7e6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e7e8:	f107 0310 	add.w	r3, r7, #16
 800e7ec:	68b9      	ldr	r1, [r7, #8]
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7ff fa70 	bl	800dcd4 <netbuf_ref>
 800e7f4:	4603      	mov	r3, r0
 800e7f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (err == ERR_OK) {
 800e7fa:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d10a      	bne.n	800e818 <lwip_sendto+0x118>
      IP_SET_TYPE_VAL(buf.addr, IPADDR_TYPE_V4);
    }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

    /* send the data */
    err = netconn_send(sock->conn, &buf);
 800e802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e804:	681b      	ldr	r3, [r3, #0]
 800e806:	f107 0210 	add.w	r2, r7, #16
 800e80a:	4611      	mov	r1, r2
 800e80c:	4618      	mov	r0, r3
 800e80e:	f7fd fc29 	bl	800c064 <netconn_send>
 800e812:	4603      	mov	r3, r0
 800e814:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  }

  /* deallocated the buffer */
  netbuf_free(&buf);
 800e818:	f107 0310 	add.w	r3, r7, #16
 800e81c:	4618      	mov	r0, r3
 800e81e:	f7ff fa31 	bl	800dc84 <netbuf_free>

  sock_set_errno(sock, err_to_errno(err));
 800e822:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800e826:	4618      	mov	r0, r3
 800e828:	f7ff f9ee 	bl	800dc08 <err_to_errno>
 800e82c:	6278      	str	r0, [r7, #36]	@ 0x24
 800e82e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e830:	2b00      	cmp	r3, #0
 800e832:	d002      	beq.n	800e83a <lwip_sendto+0x13a>
 800e834:	4a07      	ldr	r2, [pc, #28]	@ (800e854 <lwip_sendto+0x154>)
 800e836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e838:	6013      	str	r3, [r2, #0]
  done_socket(sock);
  return (err == ERR_OK ? short_size : -1);
 800e83a:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d101      	bne.n	800e846 <lwip_sendto+0x146>
 800e842:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e844:	e001      	b.n	800e84a <lwip_sendto+0x14a>
 800e846:	f04f 33ff 	mov.w	r3, #4294967295
}
 800e84a:	4618      	mov	r0, r3
 800e84c:	3738      	adds	r7, #56	@ 0x38
 800e84e:	46bd      	mov	sp, r7
 800e850:	bd80      	pop	{r7, pc}
 800e852:	bf00      	nop
 800e854:	2000ef0c 	.word	0x2000ef0c
 800e858:	080221d8 	.word	0x080221d8
 800e85c:	080224b8 	.word	0x080224b8
 800e860:	0802222c 	.word	0x0802222c

0800e864 <lwip_socket>:

int
lwip_socket(int domain, int type, int protocol)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b086      	sub	sp, #24
 800e868:	af00      	add	r7, sp, #0
 800e86a:	60f8      	str	r0, [r7, #12]
 800e86c:	60b9      	str	r1, [r7, #8]
 800e86e:	607a      	str	r2, [r7, #4]
  int i;

  LWIP_UNUSED_ARG(domain); /* @todo: check this */

  /* create a netconn */
  switch (type) {
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	2b03      	cmp	r3, #3
 800e874:	d009      	beq.n	800e88a <lwip_socket+0x26>
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	2b03      	cmp	r3, #3
 800e87a:	dc23      	bgt.n	800e8c4 <lwip_socket+0x60>
 800e87c:	68bb      	ldr	r3, [r7, #8]
 800e87e:	2b01      	cmp	r3, #1
 800e880:	d019      	beq.n	800e8b6 <lwip_socket+0x52>
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	2b02      	cmp	r3, #2
 800e886:	d009      	beq.n	800e89c <lwip_socket+0x38>
 800e888:	e01c      	b.n	800e8c4 <lwip_socket+0x60>
    case SOCK_RAW:
      conn = netconn_new_with_proto_and_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_RAW),
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	b2db      	uxtb	r3, r3
 800e88e:	4a22      	ldr	r2, [pc, #136]	@ (800e918 <lwip_socket+0xb4>)
 800e890:	4619      	mov	r1, r3
 800e892:	2040      	movs	r0, #64	@ 0x40
 800e894:	f7fd f876 	bl	800b984 <netconn_new_with_proto_and_callback>
 800e898:	6178      	str	r0, [r7, #20]
             (u8_t)protocol, DEFAULT_SOCKET_EVENTCB);
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_RAW, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800e89a:	e019      	b.n	800e8d0 <lwip_socket+0x6c>
    case SOCK_DGRAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain,
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	2b88      	cmp	r3, #136	@ 0x88
 800e8a0:	d101      	bne.n	800e8a6 <lwip_socket+0x42>
 800e8a2:	2321      	movs	r3, #33	@ 0x21
 800e8a4:	e000      	b.n	800e8a8 <lwip_socket+0x44>
 800e8a6:	2320      	movs	r3, #32
 800e8a8:	4a1b      	ldr	r2, [pc, #108]	@ (800e918 <lwip_socket+0xb4>)
 800e8aa:	2100      	movs	r1, #0
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	f7fd f869 	bl	800b984 <netconn_new_with_proto_and_callback>
 800e8b2:	6178      	str	r0, [r7, #20]
      if (conn) {
        /* netconn layer enables pktinfo by default, sockets default to off */
        conn->flags &= ~NETCONN_FLAG_PKTINFO;
      }
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800e8b4:	e00c      	b.n	800e8d0 <lwip_socket+0x6c>
    case SOCK_STREAM:
      conn = netconn_new_with_callback(DOMAIN_TO_NETCONN_TYPE(domain, NETCONN_TCP), DEFAULT_SOCKET_EVENTCB);
 800e8b6:	4a18      	ldr	r2, [pc, #96]	@ (800e918 <lwip_socket+0xb4>)
 800e8b8:	2100      	movs	r1, #0
 800e8ba:	2010      	movs	r0, #16
 800e8bc:	f7fd f862 	bl	800b984 <netconn_new_with_proto_and_callback>
 800e8c0:	6178      	str	r0, [r7, #20]
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%s, SOCK_STREAM, %d) = ",
                                  domain == PF_INET ? "PF_INET" : "UNKNOWN", protocol));
      break;
 800e8c2:	e005      	b.n	800e8d0 <lwip_socket+0x6c>
    default:
      LWIP_DEBUGF(SOCKETS_DEBUG, ("lwip_socket(%d, %d/UNKNOWN, %d) = -1\n",
                                  domain, type, protocol));
      set_errno(EINVAL);
 800e8c4:	4b15      	ldr	r3, [pc, #84]	@ (800e91c <lwip_socket+0xb8>)
 800e8c6:	2216      	movs	r2, #22
 800e8c8:	601a      	str	r2, [r3, #0]
      return -1;
 800e8ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e8ce:	e01e      	b.n	800e90e <lwip_socket+0xaa>
  }

  if (!conn) {
 800e8d0:	697b      	ldr	r3, [r7, #20]
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d105      	bne.n	800e8e2 <lwip_socket+0x7e>
    LWIP_DEBUGF(SOCKETS_DEBUG, ("-1 / ENOBUFS (could not create netconn)\n"));
    set_errno(ENOBUFS);
 800e8d6:	4b11      	ldr	r3, [pc, #68]	@ (800e91c <lwip_socket+0xb8>)
 800e8d8:	2269      	movs	r2, #105	@ 0x69
 800e8da:	601a      	str	r2, [r3, #0]
    return -1;
 800e8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e8e0:	e015      	b.n	800e90e <lwip_socket+0xaa>
  }

  i = alloc_socket(conn, 0);
 800e8e2:	2100      	movs	r1, #0
 800e8e4:	6978      	ldr	r0, [r7, #20]
 800e8e6:	f7ff fa95 	bl	800de14 <alloc_socket>
 800e8ea:	6138      	str	r0, [r7, #16]

  if (i == -1) {
 800e8ec:	693b      	ldr	r3, [r7, #16]
 800e8ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e8f2:	d108      	bne.n	800e906 <lwip_socket+0xa2>
    netconn_delete(conn);
 800e8f4:	6978      	ldr	r0, [r7, #20]
 800e8f6:	f7fd f8e3 	bl	800bac0 <netconn_delete>
    set_errno(ENFILE);
 800e8fa:	4b08      	ldr	r3, [pc, #32]	@ (800e91c <lwip_socket+0xb8>)
 800e8fc:	2217      	movs	r2, #23
 800e8fe:	601a      	str	r2, [r3, #0]
    return -1;
 800e900:	f04f 33ff 	mov.w	r3, #4294967295
 800e904:	e003      	b.n	800e90e <lwip_socket+0xaa>
  }
  conn->socket = i;
 800e906:	697b      	ldr	r3, [r7, #20]
 800e908:	693a      	ldr	r2, [r7, #16]
 800e90a:	619a      	str	r2, [r3, #24]
  done_socket(&sockets[i - LWIP_SOCKET_OFFSET]);
  LWIP_DEBUGF(SOCKETS_DEBUG, ("%d\n", i));
  set_errno(0);
  return i;
 800e90c:	693b      	ldr	r3, [r7, #16]
}
 800e90e:	4618      	mov	r0, r3
 800e910:	3718      	adds	r7, #24
 800e912:	46bd      	mov	sp, r7
 800e914:	bd80      	pop	{r7, pc}
 800e916:	bf00      	nop
 800e918:	0800e9c9 	.word	0x0800e9c9
 800e91c:	2000ef0c 	.word	0x2000ef0c

0800e920 <lwip_write>:

ssize_t
lwip_write(int s, const void *data, size_t size)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b084      	sub	sp, #16
 800e924:	af00      	add	r7, sp, #0
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	60b9      	str	r1, [r7, #8]
 800e92a:	607a      	str	r2, [r7, #4]
  return lwip_send(s, data, size, 0);
 800e92c:	2300      	movs	r3, #0
 800e92e:	687a      	ldr	r2, [r7, #4]
 800e930:	68b9      	ldr	r1, [r7, #8]
 800e932:	68f8      	ldr	r0, [r7, #12]
 800e934:	f7ff fe86 	bl	800e644 <lwip_send>
 800e938:	4603      	mov	r3, r0
}
 800e93a:	4618      	mov	r0, r3
 800e93c:	3710      	adds	r7, #16
 800e93e:	46bd      	mov	sp, r7
 800e940:	bd80      	pop	{r7, pc}

0800e942 <lwip_poll_should_wake>:
 * Check whether event_callback should wake up a thread waiting in
 * lwip_poll.
 */
static int
lwip_poll_should_wake(const struct lwip_select_cb *scb, int fd, int has_recvevent, int has_sendevent, int has_errevent)
{
 800e942:	b480      	push	{r7}
 800e944:	b087      	sub	sp, #28
 800e946:	af00      	add	r7, sp, #0
 800e948:	60f8      	str	r0, [r7, #12]
 800e94a:	60b9      	str	r1, [r7, #8]
 800e94c:	607a      	str	r2, [r7, #4]
 800e94e:	603b      	str	r3, [r7, #0]
  nfds_t fdi;
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800e950:	2300      	movs	r3, #0
 800e952:	617b      	str	r3, [r7, #20]
 800e954:	e02c      	b.n	800e9b0 <lwip_poll_should_wake+0x6e>
    const struct pollfd *pollfd = &scb->poll_fds[fdi];
 800e956:	68fb      	ldr	r3, [r7, #12]
 800e958:	695a      	ldr	r2, [r3, #20]
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	00db      	lsls	r3, r3, #3
 800e95e:	4413      	add	r3, r2
 800e960:	613b      	str	r3, [r7, #16]
    if (pollfd->fd == fd) {
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	68ba      	ldr	r2, [r7, #8]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d11e      	bne.n	800e9aa <lwip_poll_should_wake+0x68>
      /* Do not update pollfd->revents right here;
         that would be a data race because lwip_pollscan
         accesses revents without protecting. */
      if (has_recvevent && (pollfd->events & POLLIN) != 0) {
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d009      	beq.n	800e986 <lwip_poll_should_wake+0x44>
 800e972:	693b      	ldr	r3, [r7, #16]
 800e974:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e978:	b29b      	uxth	r3, r3
 800e97a:	f003 0301 	and.w	r3, r3, #1
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d001      	beq.n	800e986 <lwip_poll_should_wake+0x44>
        return 1;
 800e982:	2301      	movs	r3, #1
 800e984:	e01a      	b.n	800e9bc <lwip_poll_should_wake+0x7a>
      }
      if (has_sendevent && (pollfd->events & POLLOUT) != 0) {
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d009      	beq.n	800e9a0 <lwip_poll_should_wake+0x5e>
 800e98c:	693b      	ldr	r3, [r7, #16]
 800e98e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e992:	b29b      	uxth	r3, r3
 800e994:	f003 0302 	and.w	r3, r3, #2
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d001      	beq.n	800e9a0 <lwip_poll_should_wake+0x5e>
        return 1;
 800e99c:	2301      	movs	r3, #1
 800e99e:	e00d      	b.n	800e9bc <lwip_poll_should_wake+0x7a>
      }
      if (has_errevent) {
 800e9a0:	6a3b      	ldr	r3, [r7, #32]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d001      	beq.n	800e9aa <lwip_poll_should_wake+0x68>
        /* POLLERR is output only. */
        return 1;
 800e9a6:	2301      	movs	r3, #1
 800e9a8:	e008      	b.n	800e9bc <lwip_poll_should_wake+0x7a>
  for (fdi = 0; fdi < scb->poll_nfds; fdi++) {
 800e9aa:	697b      	ldr	r3, [r7, #20]
 800e9ac:	3301      	adds	r3, #1
 800e9ae:	617b      	str	r3, [r7, #20]
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	699b      	ldr	r3, [r3, #24]
 800e9b4:	697a      	ldr	r2, [r7, #20]
 800e9b6:	429a      	cmp	r2, r3
 800e9b8:	d3cd      	bcc.n	800e956 <lwip_poll_should_wake+0x14>
      }
    }
  }
  return 0;
 800e9ba:	2300      	movs	r3, #0
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	371c      	adds	r7, #28
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c6:	4770      	bx	lr

0800e9c8 <event_callback>:
 *   NETCONN_EVT_ERROR
 * This requirement will be asserted in select_check_waiters()
 */
static void
event_callback(struct netconn *conn, enum netconn_evt evt, u16_t len)
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b08a      	sub	sp, #40	@ 0x28
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	70fb      	strb	r3, [r7, #3]
 800e9d4:	4613      	mov	r3, r2
 800e9d6:	803b      	strh	r3, [r7, #0]
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_UNUSED_ARG(len);

  /* Get socket */
  if (conn) {
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	f000 80a4 	beq.w	800eb28 <event_callback+0x160>
    s = conn->socket;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	699b      	ldr	r3, [r3, #24]
 800e9e4:	627b      	str	r3, [r7, #36]	@ 0x24
    if (s < 0) {
 800e9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	da18      	bge.n	800ea1e <event_callback+0x56>
      /* Data comes in right away after an accept, even though
       * the server task might not have created a new socket yet.
       * Just count down (or up) if that's the case and we
       * will use the data later. Note that only receive events
       * can happen before the new socket is set up. */
      SYS_ARCH_PROTECT(lev);
 800e9ec:	f00e f9c8 	bl	801cd80 <sys_arch_protect>
 800e9f0:	61f8      	str	r0, [r7, #28]
      if (conn->socket < 0) {
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	699b      	ldr	r3, [r3, #24]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	da0b      	bge.n	800ea12 <event_callback+0x4a>
        if (evt == NETCONN_EVT_RCVPLUS) {
 800e9fa:	78fb      	ldrb	r3, [r7, #3]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d104      	bne.n	800ea0a <event_callback+0x42>
          /* conn->socket is -1 on initialization
             lwip_accept adjusts sock->recvevent if conn->socket < -1 */
          conn->socket--;
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	699b      	ldr	r3, [r3, #24]
 800ea04:	1e5a      	subs	r2, r3, #1
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	619a      	str	r2, [r3, #24]
        }
        SYS_ARCH_UNPROTECT(lev);
 800ea0a:	69f8      	ldr	r0, [r7, #28]
 800ea0c:	f00e f9c6 	bl	801cd9c <sys_arch_unprotect>
        return;
 800ea10:	e08d      	b.n	800eb2e <event_callback+0x166>
      }
      s = conn->socket;
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	699b      	ldr	r3, [r3, #24]
 800ea16:	627b      	str	r3, [r7, #36]	@ 0x24
      SYS_ARCH_UNPROTECT(lev);
 800ea18:	69f8      	ldr	r0, [r7, #28]
 800ea1a:	f00e f9bf 	bl	801cd9c <sys_arch_unprotect>
    }

    sock = get_socket(s);
 800ea1e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ea20:	f7ff f9e0 	bl	800dde4 <get_socket>
 800ea24:	61b8      	str	r0, [r7, #24]
    if (!sock) {
 800ea26:	69bb      	ldr	r3, [r7, #24]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d07f      	beq.n	800eb2c <event_callback+0x164>
    }
  } else {
    return;
  }

  check_waiters = 1;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	623b      	str	r3, [r7, #32]
  SYS_ARCH_PROTECT(lev);
 800ea30:	f00e f9a6 	bl	801cd80 <sys_arch_protect>
 800ea34:	61f8      	str	r0, [r7, #28]
  /* Set event as required */
  switch (evt) {
 800ea36:	78fb      	ldrb	r3, [r7, #3]
 800ea38:	2b04      	cmp	r3, #4
 800ea3a:	d83e      	bhi.n	800eaba <event_callback+0xf2>
 800ea3c:	a201      	add	r2, pc, #4	@ (adr r2, 800ea44 <event_callback+0x7c>)
 800ea3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea42:	bf00      	nop
 800ea44:	0800ea59 	.word	0x0800ea59
 800ea48:	0800ea7b 	.word	0x0800ea7b
 800ea4c:	0800ea93 	.word	0x0800ea93
 800ea50:	0800eaa7 	.word	0x0800eaa7
 800ea54:	0800eab3 	.word	0x0800eab3
    case NETCONN_EVT_RCVPLUS:
      sock->rcvevent++;
 800ea58:	69bb      	ldr	r3, [r7, #24]
 800ea5a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ea5e:	b29b      	uxth	r3, r3
 800ea60:	3301      	adds	r3, #1
 800ea62:	b29b      	uxth	r3, r3
 800ea64:	b21a      	sxth	r2, r3
 800ea66:	69bb      	ldr	r3, [r7, #24]
 800ea68:	811a      	strh	r2, [r3, #8]
      if (sock->rcvevent > 1) {
 800ea6a:	69bb      	ldr	r3, [r7, #24]
 800ea6c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	dd2a      	ble.n	800eaca <event_callback+0x102>
        check_waiters = 0;
 800ea74:	2300      	movs	r3, #0
 800ea76:	623b      	str	r3, [r7, #32]
      }
      break;
 800ea78:	e027      	b.n	800eaca <event_callback+0x102>
    case NETCONN_EVT_RCVMINUS:
      sock->rcvevent--;
 800ea7a:	69bb      	ldr	r3, [r7, #24]
 800ea7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ea80:	b29b      	uxth	r3, r3
 800ea82:	3b01      	subs	r3, #1
 800ea84:	b29b      	uxth	r3, r3
 800ea86:	b21a      	sxth	r2, r3
 800ea88:	69bb      	ldr	r3, [r7, #24]
 800ea8a:	811a      	strh	r2, [r3, #8]
      check_waiters = 0;
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	623b      	str	r3, [r7, #32]
      break;
 800ea90:	e01c      	b.n	800eacc <event_callback+0x104>
    case NETCONN_EVT_SENDPLUS:
      if (sock->sendevent) {
 800ea92:	69bb      	ldr	r3, [r7, #24]
 800ea94:	895b      	ldrh	r3, [r3, #10]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d001      	beq.n	800ea9e <event_callback+0xd6>
        check_waiters = 0;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	623b      	str	r3, [r7, #32]
      }
      sock->sendevent = 1;
 800ea9e:	69bb      	ldr	r3, [r7, #24]
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	815a      	strh	r2, [r3, #10]
      break;
 800eaa4:	e012      	b.n	800eacc <event_callback+0x104>
    case NETCONN_EVT_SENDMINUS:
      sock->sendevent = 0;
 800eaa6:	69bb      	ldr	r3, [r7, #24]
 800eaa8:	2200      	movs	r2, #0
 800eaaa:	815a      	strh	r2, [r3, #10]
      check_waiters = 0;
 800eaac:	2300      	movs	r3, #0
 800eaae:	623b      	str	r3, [r7, #32]
      break;
 800eab0:	e00c      	b.n	800eacc <event_callback+0x104>
    case NETCONN_EVT_ERROR:
      sock->errevent = 1;
 800eab2:	69bb      	ldr	r3, [r7, #24]
 800eab4:	2201      	movs	r2, #1
 800eab6:	819a      	strh	r2, [r3, #12]
      break;
 800eab8:	e008      	b.n	800eacc <event_callback+0x104>
    default:
      LWIP_ASSERT("unknown event", 0);
 800eaba:	4b1e      	ldr	r3, [pc, #120]	@ (800eb34 <event_callback+0x16c>)
 800eabc:	f44f 621f 	mov.w	r2, #2544	@ 0x9f0
 800eac0:	491d      	ldr	r1, [pc, #116]	@ (800eb38 <event_callback+0x170>)
 800eac2:	481e      	ldr	r0, [pc, #120]	@ (800eb3c <event_callback+0x174>)
 800eac4:	f00f f962 	bl	801dd8c <iprintf>
      break;
 800eac8:	e000      	b.n	800eacc <event_callback+0x104>
      break;
 800eaca:	bf00      	nop
  }

  if (sock->select_waiting && check_waiters) {
 800eacc:	69bb      	ldr	r3, [r7, #24]
 800eace:	7b9b      	ldrb	r3, [r3, #14]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d025      	beq.n	800eb20 <event_callback+0x158>
 800ead4:	6a3b      	ldr	r3, [r7, #32]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d022      	beq.n	800eb20 <event_callback+0x158>
    /* Save which events are active */
    int has_recvevent, has_sendevent, has_errevent;
    has_recvevent = sock->rcvevent > 0;
 800eada:	69bb      	ldr	r3, [r7, #24]
 800eadc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	bfcc      	ite	gt
 800eae4:	2301      	movgt	r3, #1
 800eae6:	2300      	movle	r3, #0
 800eae8:	b2db      	uxtb	r3, r3
 800eaea:	617b      	str	r3, [r7, #20]
    has_sendevent = sock->sendevent != 0;
 800eaec:	69bb      	ldr	r3, [r7, #24]
 800eaee:	895b      	ldrh	r3, [r3, #10]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	bf14      	ite	ne
 800eaf4:	2301      	movne	r3, #1
 800eaf6:	2300      	moveq	r3, #0
 800eaf8:	b2db      	uxtb	r3, r3
 800eafa:	613b      	str	r3, [r7, #16]
    has_errevent = sock->errevent != 0;
 800eafc:	69bb      	ldr	r3, [r7, #24]
 800eafe:	899b      	ldrh	r3, [r3, #12]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	bf14      	ite	ne
 800eb04:	2301      	movne	r3, #1
 800eb06:	2300      	moveq	r3, #0
 800eb08:	b2db      	uxtb	r3, r3
 800eb0a:	60fb      	str	r3, [r7, #12]
    SYS_ARCH_UNPROTECT(lev);
 800eb0c:	69f8      	ldr	r0, [r7, #28]
 800eb0e:	f00e f945 	bl	801cd9c <sys_arch_unprotect>
    /* Check any select calls waiting on this socket */
    select_check_waiters(s, has_recvevent, has_sendevent, has_errevent);
 800eb12:	68fb      	ldr	r3, [r7, #12]
 800eb14:	693a      	ldr	r2, [r7, #16]
 800eb16:	6979      	ldr	r1, [r7, #20]
 800eb18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eb1a:	f000 f811 	bl	800eb40 <select_check_waiters>
  if (sock->select_waiting && check_waiters) {
 800eb1e:	e006      	b.n	800eb2e <event_callback+0x166>
  } else {
    SYS_ARCH_UNPROTECT(lev);
 800eb20:	69f8      	ldr	r0, [r7, #28]
 800eb22:	f00e f93b 	bl	801cd9c <sys_arch_unprotect>
 800eb26:	e002      	b.n	800eb2e <event_callback+0x166>
    return;
 800eb28:	bf00      	nop
 800eb2a:	e000      	b.n	800eb2e <event_callback+0x166>
      return;
 800eb2c:	bf00      	nop
  }
  done_socket(sock);
}
 800eb2e:	3728      	adds	r7, #40	@ 0x28
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}
 800eb34:	080221d8 	.word	0x080221d8
 800eb38:	08022554 	.word	0x08022554
 800eb3c:	0802222c 	.word	0x0802222c

0800eb40 <select_check_waiters>:
 * of the loop, thus creating a possibility where a thread could modify the
 * select_cb_list during our UNPROTECT/PROTECT. We use a generational counter to
 * detect this change and restart the list walk. The list is expected to be small
 */
static void select_check_waiters(int s, int has_recvevent, int has_sendevent, int has_errevent)
{
 800eb40:	b580      	push	{r7, lr}
 800eb42:	b088      	sub	sp, #32
 800eb44:	af02      	add	r7, sp, #8
 800eb46:	60f8      	str	r0, [r7, #12]
 800eb48:	60b9      	str	r1, [r7, #8]
 800eb4a:	607a      	str	r2, [r7, #4]
 800eb4c:	603b      	str	r3, [r7, #0]
  SYS_ARCH_PROTECT(lev);
again:
  /* remember the state of select_cb_list to detect changes */
  last_select_cb_ctr = select_cb_ctr;
#endif /* !LWIP_TCPIP_CORE_LOCKING */
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800eb4e:	4b42      	ldr	r3, [pc, #264]	@ (800ec58 <select_check_waiters+0x118>)
 800eb50:	681b      	ldr	r3, [r3, #0]
 800eb52:	617b      	str	r3, [r7, #20]
 800eb54:	e078      	b.n	800ec48 <select_check_waiters+0x108>
    if (scb->sem_signalled == 0) {
 800eb56:	697b      	ldr	r3, [r7, #20]
 800eb58:	69db      	ldr	r3, [r3, #28]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d171      	bne.n	800ec42 <select_check_waiters+0x102>
      /* semaphore not signalled yet */
      int do_signal = 0;
 800eb5e:	2300      	movs	r3, #0
 800eb60:	613b      	str	r3, [r7, #16]
#if LWIP_SOCKET_POLL
      if (scb->poll_fds != NULL) {
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	695b      	ldr	r3, [r3, #20]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d009      	beq.n	800eb7e <select_check_waiters+0x3e>
        do_signal = lwip_poll_should_wake(scb, s, has_recvevent, has_sendevent, has_errevent);
 800eb6a:	683b      	ldr	r3, [r7, #0]
 800eb6c:	9300      	str	r3, [sp, #0]
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	68ba      	ldr	r2, [r7, #8]
 800eb72:	68f9      	ldr	r1, [r7, #12]
 800eb74:	6978      	ldr	r0, [r7, #20]
 800eb76:	f7ff fee4 	bl	800e942 <lwip_poll_should_wake>
 800eb7a:	6138      	str	r0, [r7, #16]
 800eb7c:	e056      	b.n	800ec2c <select_check_waiters+0xec>
      else
#endif /* LWIP_SOCKET_SELECT && LWIP_SOCKET_POLL */
#if LWIP_SOCKET_SELECT
      {
        /* Test this select call for our socket */
        if (has_recvevent) {
 800eb7e:	68bb      	ldr	r3, [r7, #8]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d017      	beq.n	800ebb4 <select_check_waiters+0x74>
          if (scb->readset && FD_ISSET(s, scb->readset)) {
 800eb84:	697b      	ldr	r3, [r7, #20]
 800eb86:	689b      	ldr	r3, [r3, #8]
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d013      	beq.n	800ebb4 <select_check_waiters+0x74>
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	689a      	ldr	r2, [r3, #8]
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2b00      	cmp	r3, #0
 800eb94:	da00      	bge.n	800eb98 <select_check_waiters+0x58>
 800eb96:	331f      	adds	r3, #31
 800eb98:	115b      	asrs	r3, r3, #5
 800eb9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	f003 031f 	and.w	r3, r3, #31
 800eba4:	fa22 f303 	lsr.w	r3, r2, r3
 800eba8:	f003 0301 	and.w	r3, r3, #1
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d001      	beq.n	800ebb4 <select_check_waiters+0x74>
            do_signal = 1;
 800ebb0:	2301      	movs	r3, #1
 800ebb2:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_sendevent) {
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d01a      	beq.n	800ebf0 <select_check_waiters+0xb0>
          if (!do_signal && scb->writeset && FD_ISSET(s, scb->writeset)) {
 800ebba:	693b      	ldr	r3, [r7, #16]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d117      	bne.n	800ebf0 <select_check_waiters+0xb0>
 800ebc0:	697b      	ldr	r3, [r7, #20]
 800ebc2:	68db      	ldr	r3, [r3, #12]
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d013      	beq.n	800ebf0 <select_check_waiters+0xb0>
 800ebc8:	697b      	ldr	r3, [r7, #20]
 800ebca:	68da      	ldr	r2, [r3, #12]
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	da00      	bge.n	800ebd4 <select_check_waiters+0x94>
 800ebd2:	331f      	adds	r3, #31
 800ebd4:	115b      	asrs	r3, r3, #5
 800ebd6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	f003 031f 	and.w	r3, r3, #31
 800ebe0:	fa22 f303 	lsr.w	r3, r2, r3
 800ebe4:	f003 0301 	and.w	r3, r3, #1
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d001      	beq.n	800ebf0 <select_check_waiters+0xb0>
            do_signal = 1;
 800ebec:	2301      	movs	r3, #1
 800ebee:	613b      	str	r3, [r7, #16]
          }
        }
        if (has_errevent) {
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d01a      	beq.n	800ec2c <select_check_waiters+0xec>
          if (!do_signal && scb->exceptset && FD_ISSET(s, scb->exceptset)) {
 800ebf6:	693b      	ldr	r3, [r7, #16]
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d117      	bne.n	800ec2c <select_check_waiters+0xec>
 800ebfc:	697b      	ldr	r3, [r7, #20]
 800ebfe:	691b      	ldr	r3, [r3, #16]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d013      	beq.n	800ec2c <select_check_waiters+0xec>
 800ec04:	697b      	ldr	r3, [r7, #20]
 800ec06:	691a      	ldr	r2, [r3, #16]
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	da00      	bge.n	800ec10 <select_check_waiters+0xd0>
 800ec0e:	331f      	adds	r3, #31
 800ec10:	115b      	asrs	r3, r3, #5
 800ec12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	f003 031f 	and.w	r3, r3, #31
 800ec1c:	fa22 f303 	lsr.w	r3, r2, r3
 800ec20:	f003 0301 	and.w	r3, r3, #1
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d001      	beq.n	800ec2c <select_check_waiters+0xec>
            do_signal = 1;
 800ec28:	2301      	movs	r3, #1
 800ec2a:	613b      	str	r3, [r7, #16]
          }
        }
      }
#endif /* LWIP_SOCKET_SELECT */
      if (do_signal) {
 800ec2c:	693b      	ldr	r3, [r7, #16]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d007      	beq.n	800ec42 <select_check_waiters+0x102>
        scb->sem_signalled = 1;
 800ec32:	697b      	ldr	r3, [r7, #20]
 800ec34:	2201      	movs	r2, #1
 800ec36:	61da      	str	r2, [r3, #28]
        /* For !LWIP_TCPIP_CORE_LOCKING, we don't call SYS_ARCH_UNPROTECT() before signaling
           the semaphore, as this might lead to the select thread taking itself off the list,
           invalidating the semaphore. */
        sys_sem_signal(SELECT_SEM_PTR(scb->sem));
 800ec38:	697b      	ldr	r3, [r7, #20]
 800ec3a:	3320      	adds	r3, #32
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	f00e f809 	bl	801cc54 <sys_sem_signal>
  for (scb = select_cb_list; scb != NULL; scb = scb->next) {
 800ec42:	697b      	ldr	r3, [r7, #20]
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	617b      	str	r3, [r7, #20]
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d183      	bne.n	800eb56 <select_check_waiters+0x16>
    /* remember the state of select_cb_list to detect changes */
    last_select_cb_ctr = select_cb_ctr;
  }
  SYS_ARCH_UNPROTECT(lev);
#endif
}
 800ec4e:	bf00      	nop
 800ec50:	bf00      	nop
 800ec52:	3718      	adds	r7, #24
 800ec54:	46bd      	mov	sp, r7
 800ec56:	bd80      	pop	{r7, pc}
 800ec58:	2000aed4 	.word	0x2000aed4

0800ec5c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	6078      	str	r0, [r7, #4]
 800ec64:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800ec66:	f008 fe4d 	bl	8017904 <sys_timeouts_sleeptime>
 800ec6a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec72:	d10b      	bne.n	800ec8c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800ec74:	4813      	ldr	r0, [pc, #76]	@ (800ecc4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ec76:	f00e f856 	bl	801cd26 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	6839      	ldr	r1, [r7, #0]
 800ec7e:	6878      	ldr	r0, [r7, #4]
 800ec80:	f00d ff2c 	bl	801cadc <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ec84:	480f      	ldr	r0, [pc, #60]	@ (800ecc4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ec86:	f00e f83f 	bl	801cd08 <sys_mutex_lock>
    return;
 800ec8a:	e018      	b.n	800ecbe <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d102      	bne.n	800ec98 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ec92:	f008 fdfd 	bl	8017890 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ec96:	e7e6      	b.n	800ec66 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ec98:	480a      	ldr	r0, [pc, #40]	@ (800ecc4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ec9a:	f00e f844 	bl	801cd26 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ec9e:	68fa      	ldr	r2, [r7, #12]
 800eca0:	6839      	ldr	r1, [r7, #0]
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f00d ff1a 	bl	801cadc <sys_arch_mbox_fetch>
 800eca8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ecaa:	4806      	ldr	r0, [pc, #24]	@ (800ecc4 <tcpip_timeouts_mbox_fetch+0x68>)
 800ecac:	f00e f82c 	bl	801cd08 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ecb6:	d102      	bne.n	800ecbe <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ecb8:	f008 fdea 	bl	8017890 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ecbc:	e7d3      	b.n	800ec66 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ecbe:	3710      	adds	r7, #16
 800ecc0:	46bd      	mov	sp, r7
 800ecc2:	bd80      	pop	{r7, pc}
 800ecc4:	2000aee4 	.word	0x2000aee4

0800ecc8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ecc8:	b580      	push	{r7, lr}
 800ecca:	b084      	sub	sp, #16
 800eccc:	af00      	add	r7, sp, #0
 800ecce:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ecd0:	4810      	ldr	r0, [pc, #64]	@ (800ed14 <tcpip_thread+0x4c>)
 800ecd2:	f00e f819 	bl	801cd08 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ecd6:	4b10      	ldr	r3, [pc, #64]	@ (800ed18 <tcpip_thread+0x50>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d005      	beq.n	800ecea <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ecde:	4b0e      	ldr	r3, [pc, #56]	@ (800ed18 <tcpip_thread+0x50>)
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	4a0e      	ldr	r2, [pc, #56]	@ (800ed1c <tcpip_thread+0x54>)
 800ece4:	6812      	ldr	r2, [r2, #0]
 800ece6:	4610      	mov	r0, r2
 800ece8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ecea:	f107 030c 	add.w	r3, r7, #12
 800ecee:	4619      	mov	r1, r3
 800ecf0:	480b      	ldr	r0, [pc, #44]	@ (800ed20 <tcpip_thread+0x58>)
 800ecf2:	f7ff ffb3 	bl	800ec5c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d106      	bne.n	800ed0a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ecfc:	4b09      	ldr	r3, [pc, #36]	@ (800ed24 <tcpip_thread+0x5c>)
 800ecfe:	2291      	movs	r2, #145	@ 0x91
 800ed00:	4909      	ldr	r1, [pc, #36]	@ (800ed28 <tcpip_thread+0x60>)
 800ed02:	480a      	ldr	r0, [pc, #40]	@ (800ed2c <tcpip_thread+0x64>)
 800ed04:	f00f f842 	bl	801dd8c <iprintf>
      continue;
 800ed08:	e003      	b.n	800ed12 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f000 f80f 	bl	800ed30 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ed12:	e7ea      	b.n	800ecea <tcpip_thread+0x22>
 800ed14:	2000aee4 	.word	0x2000aee4
 800ed18:	2000aed8 	.word	0x2000aed8
 800ed1c:	2000aedc 	.word	0x2000aedc
 800ed20:	2000aee0 	.word	0x2000aee0
 800ed24:	080225a8 	.word	0x080225a8
 800ed28:	080225d8 	.word	0x080225d8
 800ed2c:	080225f8 	.word	0x080225f8

0800ed30 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b082      	sub	sp, #8
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	781b      	ldrb	r3, [r3, #0]
 800ed3c:	2b02      	cmp	r3, #2
 800ed3e:	d026      	beq.n	800ed8e <tcpip_thread_handle_msg+0x5e>
 800ed40:	2b02      	cmp	r3, #2
 800ed42:	dc2b      	bgt.n	800ed9c <tcpip_thread_handle_msg+0x6c>
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d002      	beq.n	800ed4e <tcpip_thread_handle_msg+0x1e>
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d015      	beq.n	800ed78 <tcpip_thread_handle_msg+0x48>
 800ed4c:	e026      	b.n	800ed9c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	68db      	ldr	r3, [r3, #12]
 800ed52:	687a      	ldr	r2, [r7, #4]
 800ed54:	6850      	ldr	r0, [r2, #4]
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	6892      	ldr	r2, [r2, #8]
 800ed5a:	4611      	mov	r1, r2
 800ed5c:	4798      	blx	r3
 800ed5e:	4603      	mov	r3, r0
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d004      	beq.n	800ed6e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	685b      	ldr	r3, [r3, #4]
 800ed68:	4618      	mov	r0, r3
 800ed6a:	f002 f84d 	bl	8010e08 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ed6e:	6879      	ldr	r1, [r7, #4]
 800ed70:	2009      	movs	r0, #9
 800ed72:	f001 f967 	bl	8010044 <memp_free>
      break;
 800ed76:	e018      	b.n	800edaa <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	685b      	ldr	r3, [r3, #4]
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	6892      	ldr	r2, [r2, #8]
 800ed80:	4610      	mov	r0, r2
 800ed82:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ed84:	6879      	ldr	r1, [r7, #4]
 800ed86:	2008      	movs	r0, #8
 800ed88:	f001 f95c 	bl	8010044 <memp_free>
      break;
 800ed8c:	e00d      	b.n	800edaa <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	685b      	ldr	r3, [r3, #4]
 800ed92:	687a      	ldr	r2, [r7, #4]
 800ed94:	6892      	ldr	r2, [r2, #8]
 800ed96:	4610      	mov	r0, r2
 800ed98:	4798      	blx	r3
      break;
 800ed9a:	e006      	b.n	800edaa <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ed9c:	4b05      	ldr	r3, [pc, #20]	@ (800edb4 <tcpip_thread_handle_msg+0x84>)
 800ed9e:	22cf      	movs	r2, #207	@ 0xcf
 800eda0:	4905      	ldr	r1, [pc, #20]	@ (800edb8 <tcpip_thread_handle_msg+0x88>)
 800eda2:	4806      	ldr	r0, [pc, #24]	@ (800edbc <tcpip_thread_handle_msg+0x8c>)
 800eda4:	f00e fff2 	bl	801dd8c <iprintf>
      break;
 800eda8:	bf00      	nop
  }
}
 800edaa:	bf00      	nop
 800edac:	3708      	adds	r7, #8
 800edae:	46bd      	mov	sp, r7
 800edb0:	bd80      	pop	{r7, pc}
 800edb2:	bf00      	nop
 800edb4:	080225a8 	.word	0x080225a8
 800edb8:	080225d8 	.word	0x080225d8
 800edbc:	080225f8 	.word	0x080225f8

0800edc0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b086      	sub	sp, #24
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	60f8      	str	r0, [r7, #12]
 800edc8:	60b9      	str	r1, [r7, #8]
 800edca:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800edcc:	481a      	ldr	r0, [pc, #104]	@ (800ee38 <tcpip_inpkt+0x78>)
 800edce:	f00d fecd 	bl	801cb6c <sys_mbox_valid>
 800edd2:	4603      	mov	r3, r0
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d105      	bne.n	800ede4 <tcpip_inpkt+0x24>
 800edd8:	4b18      	ldr	r3, [pc, #96]	@ (800ee3c <tcpip_inpkt+0x7c>)
 800edda:	22fc      	movs	r2, #252	@ 0xfc
 800eddc:	4918      	ldr	r1, [pc, #96]	@ (800ee40 <tcpip_inpkt+0x80>)
 800edde:	4819      	ldr	r0, [pc, #100]	@ (800ee44 <tcpip_inpkt+0x84>)
 800ede0:	f00e ffd4 	bl	801dd8c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ede4:	2009      	movs	r0, #9
 800ede6:	f001 f8b7 	bl	800ff58 <memp_malloc>
 800edea:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d102      	bne.n	800edf8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800edf2:	f04f 33ff 	mov.w	r3, #4294967295
 800edf6:	e01a      	b.n	800ee2e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	2200      	movs	r2, #0
 800edfc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	68fa      	ldr	r2, [r7, #12]
 800ee02:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	68ba      	ldr	r2, [r7, #8]
 800ee08:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	687a      	ldr	r2, [r7, #4]
 800ee0e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ee10:	6979      	ldr	r1, [r7, #20]
 800ee12:	4809      	ldr	r0, [pc, #36]	@ (800ee38 <tcpip_inpkt+0x78>)
 800ee14:	f00d fe48 	bl	801caa8 <sys_mbox_trypost>
 800ee18:	4603      	mov	r3, r0
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d006      	beq.n	800ee2c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800ee1e:	6979      	ldr	r1, [r7, #20]
 800ee20:	2009      	movs	r0, #9
 800ee22:	f001 f90f 	bl	8010044 <memp_free>
    return ERR_MEM;
 800ee26:	f04f 33ff 	mov.w	r3, #4294967295
 800ee2a:	e000      	b.n	800ee2e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800ee2c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800ee2e:	4618      	mov	r0, r3
 800ee30:	3718      	adds	r7, #24
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}
 800ee36:	bf00      	nop
 800ee38:	2000aee0 	.word	0x2000aee0
 800ee3c:	080225a8 	.word	0x080225a8
 800ee40:	08022620 	.word	0x08022620
 800ee44:	080225f8 	.word	0x080225f8

0800ee48 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800ee48:	b580      	push	{r7, lr}
 800ee4a:	b082      	sub	sp, #8
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800ee52:	683b      	ldr	r3, [r7, #0]
 800ee54:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800ee58:	f003 0318 	and.w	r3, r3, #24
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d006      	beq.n	800ee6e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800ee60:	4a08      	ldr	r2, [pc, #32]	@ (800ee84 <tcpip_input+0x3c>)
 800ee62:	6839      	ldr	r1, [r7, #0]
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f7ff ffab 	bl	800edc0 <tcpip_inpkt>
 800ee6a:	4603      	mov	r3, r0
 800ee6c:	e005      	b.n	800ee7a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800ee6e:	4a06      	ldr	r2, [pc, #24]	@ (800ee88 <tcpip_input+0x40>)
 800ee70:	6839      	ldr	r1, [r7, #0]
 800ee72:	6878      	ldr	r0, [r7, #4]
 800ee74:	f7ff ffa4 	bl	800edc0 <tcpip_inpkt>
 800ee78:	4603      	mov	r3, r0
}
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	3708      	adds	r7, #8
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	bd80      	pop	{r7, pc}
 800ee82:	bf00      	nop
 800ee84:	0801c8a5 	.word	0x0801c8a5
 800ee88:	0801b51d 	.word	0x0801b51d

0800ee8c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800ee8c:	b580      	push	{r7, lr}
 800ee8e:	b084      	sub	sp, #16
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	6078      	str	r0, [r7, #4]
 800ee94:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ee96:	4819      	ldr	r0, [pc, #100]	@ (800eefc <tcpip_try_callback+0x70>)
 800ee98:	f00d fe68 	bl	801cb6c <sys_mbox_valid>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d106      	bne.n	800eeb0 <tcpip_try_callback+0x24>
 800eea2:	4b17      	ldr	r3, [pc, #92]	@ (800ef00 <tcpip_try_callback+0x74>)
 800eea4:	f240 125d 	movw	r2, #349	@ 0x15d
 800eea8:	4916      	ldr	r1, [pc, #88]	@ (800ef04 <tcpip_try_callback+0x78>)
 800eeaa:	4817      	ldr	r0, [pc, #92]	@ (800ef08 <tcpip_try_callback+0x7c>)
 800eeac:	f00e ff6e 	bl	801dd8c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800eeb0:	2008      	movs	r0, #8
 800eeb2:	f001 f851 	bl	800ff58 <memp_malloc>
 800eeb6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	2b00      	cmp	r3, #0
 800eebc:	d102      	bne.n	800eec4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800eebe:	f04f 33ff 	mov.w	r3, #4294967295
 800eec2:	e017      	b.n	800eef4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2201      	movs	r2, #1
 800eec8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	683a      	ldr	r2, [r7, #0]
 800eed4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800eed6:	68f9      	ldr	r1, [r7, #12]
 800eed8:	4808      	ldr	r0, [pc, #32]	@ (800eefc <tcpip_try_callback+0x70>)
 800eeda:	f00d fde5 	bl	801caa8 <sys_mbox_trypost>
 800eede:	4603      	mov	r3, r0
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d006      	beq.n	800eef2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800eee4:	68f9      	ldr	r1, [r7, #12]
 800eee6:	2008      	movs	r0, #8
 800eee8:	f001 f8ac 	bl	8010044 <memp_free>
    return ERR_MEM;
 800eeec:	f04f 33ff 	mov.w	r3, #4294967295
 800eef0:	e000      	b.n	800eef4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800eef2:	2300      	movs	r3, #0
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	3710      	adds	r7, #16
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}
 800eefc:	2000aee0 	.word	0x2000aee0
 800ef00:	080225a8 	.word	0x080225a8
 800ef04:	08022620 	.word	0x08022620
 800ef08:	080225f8 	.word	0x080225f8

0800ef0c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b084      	sub	sp, #16
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	60f8      	str	r0, [r7, #12]
 800ef14:	60b9      	str	r1, [r7, #8]
 800ef16:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800ef18:	4806      	ldr	r0, [pc, #24]	@ (800ef34 <tcpip_send_msg_wait_sem+0x28>)
 800ef1a:	f00d fef5 	bl	801cd08 <sys_mutex_lock>
  fn(apimsg);
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	68b8      	ldr	r0, [r7, #8]
 800ef22:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800ef24:	4803      	ldr	r0, [pc, #12]	@ (800ef34 <tcpip_send_msg_wait_sem+0x28>)
 800ef26:	f00d fefe 	bl	801cd26 <sys_mutex_unlock>
  return ERR_OK;
 800ef2a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800ef2c:	4618      	mov	r0, r3
 800ef2e:	3710      	adds	r7, #16
 800ef30:	46bd      	mov	sp, r7
 800ef32:	bd80      	pop	{r7, pc}
 800ef34:	2000aee4 	.word	0x2000aee4

0800ef38 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b084      	sub	sp, #16
 800ef3c:	af02      	add	r7, sp, #8
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ef42:	f000 fb5e 	bl	800f602 <lwip_init>

  tcpip_init_done = initfunc;
 800ef46:	4a17      	ldr	r2, [pc, #92]	@ (800efa4 <tcpip_init+0x6c>)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ef4c:	4a16      	ldr	r2, [pc, #88]	@ (800efa8 <tcpip_init+0x70>)
 800ef4e:	683b      	ldr	r3, [r7, #0]
 800ef50:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ef52:	2106      	movs	r1, #6
 800ef54:	4815      	ldr	r0, [pc, #84]	@ (800efac <tcpip_init+0x74>)
 800ef56:	f00d fd7b 	bl	801ca50 <sys_mbox_new>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d006      	beq.n	800ef6e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ef60:	4b13      	ldr	r3, [pc, #76]	@ (800efb0 <tcpip_init+0x78>)
 800ef62:	f240 2261 	movw	r2, #609	@ 0x261
 800ef66:	4913      	ldr	r1, [pc, #76]	@ (800efb4 <tcpip_init+0x7c>)
 800ef68:	4813      	ldr	r0, [pc, #76]	@ (800efb8 <tcpip_init+0x80>)
 800ef6a:	f00e ff0f 	bl	801dd8c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ef6e:	4813      	ldr	r0, [pc, #76]	@ (800efbc <tcpip_init+0x84>)
 800ef70:	f00d feb4 	bl	801ccdc <sys_mutex_new>
 800ef74:	4603      	mov	r3, r0
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d006      	beq.n	800ef88 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ef7a:	4b0d      	ldr	r3, [pc, #52]	@ (800efb0 <tcpip_init+0x78>)
 800ef7c:	f240 2265 	movw	r2, #613	@ 0x265
 800ef80:	490f      	ldr	r1, [pc, #60]	@ (800efc0 <tcpip_init+0x88>)
 800ef82:	480d      	ldr	r0, [pc, #52]	@ (800efb8 <tcpip_init+0x80>)
 800ef84:	f00e ff02 	bl	801dd8c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ef88:	2318      	movs	r3, #24
 800ef8a:	9300      	str	r3, [sp, #0]
 800ef8c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ef90:	2200      	movs	r2, #0
 800ef92:	490c      	ldr	r1, [pc, #48]	@ (800efc4 <tcpip_init+0x8c>)
 800ef94:	480c      	ldr	r0, [pc, #48]	@ (800efc8 <tcpip_init+0x90>)
 800ef96:	f00d fed3 	bl	801cd40 <sys_thread_new>
}
 800ef9a:	bf00      	nop
 800ef9c:	3708      	adds	r7, #8
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}
 800efa2:	bf00      	nop
 800efa4:	2000aed8 	.word	0x2000aed8
 800efa8:	2000aedc 	.word	0x2000aedc
 800efac:	2000aee0 	.word	0x2000aee0
 800efb0:	080225a8 	.word	0x080225a8
 800efb4:	08022630 	.word	0x08022630
 800efb8:	080225f8 	.word	0x080225f8
 800efbc:	2000aee4 	.word	0x2000aee4
 800efc0:	08022654 	.word	0x08022654
 800efc4:	0800ecc9 	.word	0x0800ecc9
 800efc8:	08022678 	.word	0x08022678

0800efcc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800efcc:	b480      	push	{r7}
 800efce:	b083      	sub	sp, #12
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	4603      	mov	r3, r0
 800efd4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800efd6:	88fb      	ldrh	r3, [r7, #6]
 800efd8:	021b      	lsls	r3, r3, #8
 800efda:	b21a      	sxth	r2, r3
 800efdc:	88fb      	ldrh	r3, [r7, #6]
 800efde:	0a1b      	lsrs	r3, r3, #8
 800efe0:	b29b      	uxth	r3, r3
 800efe2:	b21b      	sxth	r3, r3
 800efe4:	4313      	orrs	r3, r2
 800efe6:	b21b      	sxth	r3, r3
 800efe8:	b29b      	uxth	r3, r3
}
 800efea:	4618      	mov	r0, r3
 800efec:	370c      	adds	r7, #12
 800efee:	46bd      	mov	sp, r7
 800eff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff4:	4770      	bx	lr

0800eff6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800eff6:	b480      	push	{r7}
 800eff8:	b083      	sub	sp, #12
 800effa:	af00      	add	r7, sp, #0
 800effc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	061a      	lsls	r2, r3, #24
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	021b      	lsls	r3, r3, #8
 800f006:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800f00a:	431a      	orrs	r2, r3
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	0a1b      	lsrs	r3, r3, #8
 800f010:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800f014:	431a      	orrs	r2, r3
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	0e1b      	lsrs	r3, r3, #24
 800f01a:	4313      	orrs	r3, r2
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	370c      	adds	r7, #12
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr

0800f028 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800f028:	b480      	push	{r7}
 800f02a:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800f02c:	bf00      	nop
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr
	...

0800f038 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 800f038:	b480      	push	{r7}
 800f03a:	b083      	sub	sp, #12
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	4603      	mov	r3, r0
 800f040:	6039      	str	r1, [r7, #0]
 800f042:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 800f044:	79fb      	ldrb	r3, [r7, #7]
 800f046:	2b01      	cmp	r3, #1
 800f048:	d80f      	bhi.n	800f06a <dns_setserver+0x32>
    if (dnsserver != NULL) {
 800f04a:	683b      	ldr	r3, [r7, #0]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d006      	beq.n	800f05e <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 800f050:	79fb      	ldrb	r3, [r7, #7]
 800f052:	4909      	ldr	r1, [pc, #36]	@ (800f078 <dns_setserver+0x40>)
 800f054:	683a      	ldr	r2, [r7, #0]
 800f056:	6812      	ldr	r2, [r2, #0]
 800f058:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 800f05c:	e005      	b.n	800f06a <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 800f05e:	79fb      	ldrb	r3, [r7, #7]
 800f060:	4905      	ldr	r1, [pc, #20]	@ (800f078 <dns_setserver+0x40>)
 800f062:	4a06      	ldr	r2, [pc, #24]	@ (800f07c <dns_setserver+0x44>)
 800f064:	6812      	ldr	r2, [r2, #0]
 800f066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800f06a:	bf00      	nop
 800f06c:	370c      	adds	r7, #12
 800f06e:	46bd      	mov	sp, r7
 800f070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f074:	4770      	bx	lr
 800f076:	bf00      	nop
 800f078:	2000b368 	.word	0x2000b368
 800f07c:	08025740 	.word	0x08025740

0800f080 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800f080:	b580      	push	{r7, lr}
 800f082:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800f084:	f000 faa8 	bl	800f5d8 <dns_check_entries>
}
 800f088:	bf00      	nop
 800f08a:	bd80      	pop	{r7, pc}

0800f08c <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800f08c:	b580      	push	{r7, lr}
 800f08e:	b090      	sub	sp, #64	@ 0x40
 800f090:	af00      	add	r7, sp, #0
 800f092:	4603      	mov	r3, r0
 800f094:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800f096:	79fa      	ldrb	r2, [r7, #7]
 800f098:	4613      	mov	r3, r2
 800f09a:	011b      	lsls	r3, r3, #4
 800f09c:	4413      	add	r3, r2
 800f09e:	011b      	lsls	r3, r3, #4
 800f0a0:	4a6c      	ldr	r2, [pc, #432]	@ (800f254 <dns_send+0x1c8>)
 800f0a2:	4413      	add	r3, r2
 800f0a4:	633b      	str	r3, [r7, #48]	@ 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800f0a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0a8:	7adb      	ldrb	r3, [r3, #11]
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d906      	bls.n	800f0bc <dns_send+0x30>
 800f0ae:	4b6a      	ldr	r3, [pc, #424]	@ (800f258 <dns_send+0x1cc>)
 800f0b0:	f240 22fa 	movw	r2, #762	@ 0x2fa
 800f0b4:	4969      	ldr	r1, [pc, #420]	@ (800f25c <dns_send+0x1d0>)
 800f0b6:	486a      	ldr	r0, [pc, #424]	@ (800f260 <dns_send+0x1d4>)
 800f0b8:	f00e fe68 	bl	801dd8c <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800f0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0be:	7adb      	ldrb	r3, [r3, #11]
 800f0c0:	461a      	mov	r2, r3
 800f0c2:	4b68      	ldr	r3, [pc, #416]	@ (800f264 <dns_send+0x1d8>)
 800f0c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d109      	bne.n	800f0e0 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800f0cc:	79fb      	ldrb	r3, [r7, #7]
 800f0ce:	2100      	movs	r1, #0
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f000 f8cb 	bl	800f26c <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800f0d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0d8:	2200      	movs	r2, #0
 800f0da:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800f0dc:	2300      	movs	r3, #0
 800f0de:	e0b4      	b.n	800f24a <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800f0e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f0e2:	3310      	adds	r3, #16
 800f0e4:	4618      	mov	r0, r3
 800f0e6:	f7f1 f8c3 	bl	8000270 <strlen>
 800f0ea:	4603      	mov	r3, r0
 800f0ec:	b29b      	uxth	r3, r3
 800f0ee:	3312      	adds	r3, #18
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800f0f6:	4619      	mov	r1, r3
 800f0f8:	2036      	movs	r0, #54	@ 0x36
 800f0fa:	f001 fb6f 	bl	80107dc <pbuf_alloc>
 800f0fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800f100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f102:	2b00      	cmp	r3, #0
 800f104:	f000 8095 	beq.w	800f232 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800f108:	f107 0310 	add.w	r3, r7, #16
 800f10c:	220c      	movs	r2, #12
 800f10e:	2100      	movs	r1, #0
 800f110:	4618      	mov	r0, r3
 800f112:	f00e feda 	bl	801deca <memset>
    hdr.id = lwip_htons(entry->txid);
 800f116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f118:	891b      	ldrh	r3, [r3, #8]
 800f11a:	4618      	mov	r0, r3
 800f11c:	f7ff ff56 	bl	800efcc <lwip_htons>
 800f120:	4603      	mov	r3, r0
 800f122:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800f124:	2301      	movs	r3, #1
 800f126:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800f128:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f12c:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800f12e:	f107 0310 	add.w	r3, r7, #16
 800f132:	220c      	movs	r2, #12
 800f134:	4619      	mov	r1, r3
 800f136:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f138:	f002 f91a 	bl	8011370 <pbuf_take>
    hostname = entry->name;
 800f13c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f13e:	3310      	adds	r3, #16
 800f140:	63bb      	str	r3, [r7, #56]	@ 0x38
    --hostname;
 800f142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f144:	3b01      	subs	r3, #1
 800f146:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800f148:	230c      	movs	r3, #12
 800f14a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    do {
      ++hostname;
 800f14c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f14e:	3301      	adds	r3, #1
 800f150:	63bb      	str	r3, [r7, #56]	@ 0x38
      hostname_part = hostname;
 800f152:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f154:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800f156:	2300      	movs	r3, #0
 800f158:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800f15c:	e007      	b.n	800f16e <dns_send+0xe2>
        ++n;
 800f15e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f162:	3301      	adds	r3, #1
 800f164:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800f168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f16a:	3301      	adds	r3, #1
 800f16c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800f16e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f170:	781b      	ldrb	r3, [r3, #0]
 800f172:	2b2e      	cmp	r3, #46	@ 0x2e
 800f174:	d003      	beq.n	800f17e <dns_send+0xf2>
 800f176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f178:	781b      	ldrb	r3, [r3, #0]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d1ef      	bne.n	800f15e <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800f17e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800f180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f182:	1ad3      	subs	r3, r2, r3
 800f184:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800f186:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800f188:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f18c:	4413      	add	r3, r2
 800f18e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800f192:	4293      	cmp	r3, r2
 800f194:	dc53      	bgt.n	800f23e <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800f196:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800f19a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f19c:	4619      	mov	r1, r3
 800f19e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f1a0:	f002 fa14 	bl	80115cc <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800f1a4:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f1a6:	3301      	adds	r3, #1
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800f1ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800f1ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f1b0:	f002 f970 	bl	8011494 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800f1b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f1bc:	4413      	add	r3, r2
 800f1be:	b29b      	uxth	r3, r3
 800f1c0:	3301      	adds	r3, #1
 800f1c2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    } while (*hostname != 0);
 800f1c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f1c6:	781b      	ldrb	r3, [r3, #0]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d1bf      	bne.n	800f14c <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800f1cc:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f1d4:	f002 f9fa 	bl	80115cc <pbuf_put_at>
    query_idx++;
 800f1d8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f1da:	3301      	adds	r3, #1
 800f1dc:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800f1de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f1e2:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800f1e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f1e8:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800f1ea:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800f1ec:	f107 010c 	add.w	r1, r7, #12
 800f1f0:	2204      	movs	r2, #4
 800f1f2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f1f4:	f002 f94e 	bl	8011494 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800f1f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1fa:	7bdb      	ldrb	r3, [r3, #15]
 800f1fc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800f200:	2335      	movs	r3, #53	@ 0x35
 800f202:	847b      	strh	r3, [r7, #34]	@ 0x22
      dst = &dns_servers[entry->server_idx];
 800f204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f206:	7adb      	ldrb	r3, [r3, #11]
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	4a16      	ldr	r2, [pc, #88]	@ (800f264 <dns_send+0x1d8>)
 800f20c:	4413      	add	r3, r2
 800f20e:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800f210:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800f214:	4a14      	ldr	r2, [pc, #80]	@ (800f268 <dns_send+0x1dc>)
 800f216:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f21a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800f21c:	69fa      	ldr	r2, [r7, #28]
 800f21e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800f220:	f008 fd9e 	bl	8017d60 <udp_sendto>
 800f224:	4603      	mov	r3, r0
 800f226:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* free pbuf */
    pbuf_free(p);
 800f22a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f22c:	f001 fdec 	bl	8010e08 <pbuf_free>
 800f230:	e002      	b.n	800f238 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800f232:	23ff      	movs	r3, #255	@ 0xff
 800f234:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return err;
 800f238:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 800f23c:	e005      	b.n	800f24a <dns_send+0x1be>
        goto overflow_return;
 800f23e:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800f240:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800f242:	f001 fde1 	bl	8010e08 <pbuf_free>
  return ERR_VAL;
 800f246:	f06f 0305 	mvn.w	r3, #5
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3740      	adds	r7, #64	@ 0x40
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}
 800f252:	bf00      	nop
 800f254:	2000aef8 	.word	0x2000aef8
 800f258:	08022688 	.word	0x08022688
 800f25c:	080226b8 	.word	0x080226b8
 800f260:	080226d0 	.word	0x080226d0
 800f264:	2000b368 	.word	0x2000b368
 800f268:	2000aee8 	.word	0x2000aee8

0800f26c <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800f26c:	b590      	push	{r4, r7, lr}
 800f26e:	b085      	sub	sp, #20
 800f270:	af00      	add	r7, sp, #0
 800f272:	4603      	mov	r3, r0
 800f274:	6039      	str	r1, [r7, #0]
 800f276:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f278:	2300      	movs	r3, #0
 800f27a:	73fb      	strb	r3, [r7, #15]
 800f27c:	e03d      	b.n	800f2fa <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800f27e:	7bfa      	ldrb	r2, [r7, #15]
 800f280:	4957      	ldr	r1, [pc, #348]	@ (800f3e0 <dns_call_found+0x174>)
 800f282:	4613      	mov	r3, r2
 800f284:	005b      	lsls	r3, r3, #1
 800f286:	4413      	add	r3, r2
 800f288:	009b      	lsls	r3, r3, #2
 800f28a:	440b      	add	r3, r1
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d030      	beq.n	800f2f4 <dns_call_found+0x88>
 800f292:	7bfa      	ldrb	r2, [r7, #15]
 800f294:	4952      	ldr	r1, [pc, #328]	@ (800f3e0 <dns_call_found+0x174>)
 800f296:	4613      	mov	r3, r2
 800f298:	005b      	lsls	r3, r3, #1
 800f29a:	4413      	add	r3, r2
 800f29c:	009b      	lsls	r3, r3, #2
 800f29e:	440b      	add	r3, r1
 800f2a0:	3308      	adds	r3, #8
 800f2a2:	781b      	ldrb	r3, [r3, #0]
 800f2a4:	79fa      	ldrb	r2, [r7, #7]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d124      	bne.n	800f2f4 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800f2aa:	7bfa      	ldrb	r2, [r7, #15]
 800f2ac:	494c      	ldr	r1, [pc, #304]	@ (800f3e0 <dns_call_found+0x174>)
 800f2ae:	4613      	mov	r3, r2
 800f2b0:	005b      	lsls	r3, r3, #1
 800f2b2:	4413      	add	r3, r2
 800f2b4:	009b      	lsls	r3, r3, #2
 800f2b6:	440b      	add	r3, r1
 800f2b8:	681c      	ldr	r4, [r3, #0]
 800f2ba:	79fa      	ldrb	r2, [r7, #7]
 800f2bc:	4613      	mov	r3, r2
 800f2be:	011b      	lsls	r3, r3, #4
 800f2c0:	4413      	add	r3, r2
 800f2c2:	011b      	lsls	r3, r3, #4
 800f2c4:	3310      	adds	r3, #16
 800f2c6:	4a47      	ldr	r2, [pc, #284]	@ (800f3e4 <dns_call_found+0x178>)
 800f2c8:	1898      	adds	r0, r3, r2
 800f2ca:	7bfa      	ldrb	r2, [r7, #15]
 800f2cc:	4944      	ldr	r1, [pc, #272]	@ (800f3e0 <dns_call_found+0x174>)
 800f2ce:	4613      	mov	r3, r2
 800f2d0:	005b      	lsls	r3, r3, #1
 800f2d2:	4413      	add	r3, r2
 800f2d4:	009b      	lsls	r3, r3, #2
 800f2d6:	440b      	add	r3, r1
 800f2d8:	3304      	adds	r3, #4
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	461a      	mov	r2, r3
 800f2de:	6839      	ldr	r1, [r7, #0]
 800f2e0:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800f2e2:	7bfa      	ldrb	r2, [r7, #15]
 800f2e4:	493e      	ldr	r1, [pc, #248]	@ (800f3e0 <dns_call_found+0x174>)
 800f2e6:	4613      	mov	r3, r2
 800f2e8:	005b      	lsls	r3, r3, #1
 800f2ea:	4413      	add	r3, r2
 800f2ec:	009b      	lsls	r3, r3, #2
 800f2ee:	440b      	add	r3, r1
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f2f4:	7bfb      	ldrb	r3, [r7, #15]
 800f2f6:	3301      	adds	r3, #1
 800f2f8:	73fb      	strb	r3, [r7, #15]
 800f2fa:	7bfb      	ldrb	r3, [r7, #15]
 800f2fc:	2b03      	cmp	r3, #3
 800f2fe:	d9be      	bls.n	800f27e <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f300:	2300      	movs	r3, #0
 800f302:	73fb      	strb	r3, [r7, #15]
 800f304:	e031      	b.n	800f36a <dns_call_found+0xfe>
    if (i == idx) {
 800f306:	7bfa      	ldrb	r2, [r7, #15]
 800f308:	79fb      	ldrb	r3, [r7, #7]
 800f30a:	429a      	cmp	r2, r3
 800f30c:	d029      	beq.n	800f362 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800f30e:	7bfa      	ldrb	r2, [r7, #15]
 800f310:	4934      	ldr	r1, [pc, #208]	@ (800f3e4 <dns_call_found+0x178>)
 800f312:	4613      	mov	r3, r2
 800f314:	011b      	lsls	r3, r3, #4
 800f316:	4413      	add	r3, r2
 800f318:	011b      	lsls	r3, r3, #4
 800f31a:	440b      	add	r3, r1
 800f31c:	330a      	adds	r3, #10
 800f31e:	781b      	ldrb	r3, [r3, #0]
 800f320:	2b02      	cmp	r3, #2
 800f322:	d11f      	bne.n	800f364 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800f324:	7bfa      	ldrb	r2, [r7, #15]
 800f326:	492f      	ldr	r1, [pc, #188]	@ (800f3e4 <dns_call_found+0x178>)
 800f328:	4613      	mov	r3, r2
 800f32a:	011b      	lsls	r3, r3, #4
 800f32c:	4413      	add	r3, r2
 800f32e:	011b      	lsls	r3, r3, #4
 800f330:	440b      	add	r3, r1
 800f332:	330f      	adds	r3, #15
 800f334:	7819      	ldrb	r1, [r3, #0]
 800f336:	79fa      	ldrb	r2, [r7, #7]
 800f338:	482a      	ldr	r0, [pc, #168]	@ (800f3e4 <dns_call_found+0x178>)
 800f33a:	4613      	mov	r3, r2
 800f33c:	011b      	lsls	r3, r3, #4
 800f33e:	4413      	add	r3, r2
 800f340:	011b      	lsls	r3, r3, #4
 800f342:	4403      	add	r3, r0
 800f344:	330f      	adds	r3, #15
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	4299      	cmp	r1, r3
 800f34a:	d10b      	bne.n	800f364 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800f34c:	79fa      	ldrb	r2, [r7, #7]
 800f34e:	4925      	ldr	r1, [pc, #148]	@ (800f3e4 <dns_call_found+0x178>)
 800f350:	4613      	mov	r3, r2
 800f352:	011b      	lsls	r3, r3, #4
 800f354:	4413      	add	r3, r2
 800f356:	011b      	lsls	r3, r3, #4
 800f358:	440b      	add	r3, r1
 800f35a:	330f      	adds	r3, #15
 800f35c:	2204      	movs	r2, #4
 800f35e:	701a      	strb	r2, [r3, #0]
        break;
 800f360:	e006      	b.n	800f370 <dns_call_found+0x104>
      continue; /* only check other requests */
 800f362:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800f364:	7bfb      	ldrb	r3, [r7, #15]
 800f366:	3301      	adds	r3, #1
 800f368:	73fb      	strb	r3, [r7, #15]
 800f36a:	7bfb      	ldrb	r3, [r7, #15]
 800f36c:	2b03      	cmp	r3, #3
 800f36e:	d9ca      	bls.n	800f306 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800f370:	79fa      	ldrb	r2, [r7, #7]
 800f372:	491c      	ldr	r1, [pc, #112]	@ (800f3e4 <dns_call_found+0x178>)
 800f374:	4613      	mov	r3, r2
 800f376:	011b      	lsls	r3, r3, #4
 800f378:	4413      	add	r3, r2
 800f37a:	011b      	lsls	r3, r3, #4
 800f37c:	440b      	add	r3, r1
 800f37e:	330f      	adds	r3, #15
 800f380:	781b      	ldrb	r3, [r3, #0]
 800f382:	2b03      	cmp	r3, #3
 800f384:	d827      	bhi.n	800f3d6 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800f386:	79fa      	ldrb	r2, [r7, #7]
 800f388:	4916      	ldr	r1, [pc, #88]	@ (800f3e4 <dns_call_found+0x178>)
 800f38a:	4613      	mov	r3, r2
 800f38c:	011b      	lsls	r3, r3, #4
 800f38e:	4413      	add	r3, r2
 800f390:	011b      	lsls	r3, r3, #4
 800f392:	440b      	add	r3, r1
 800f394:	330f      	adds	r3, #15
 800f396:	781b      	ldrb	r3, [r3, #0]
 800f398:	461a      	mov	r2, r3
 800f39a:	4b13      	ldr	r3, [pc, #76]	@ (800f3e8 <dns_call_found+0x17c>)
 800f39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f008 ffd1 	bl	8018348 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800f3a6:	79fa      	ldrb	r2, [r7, #7]
 800f3a8:	490e      	ldr	r1, [pc, #56]	@ (800f3e4 <dns_call_found+0x178>)
 800f3aa:	4613      	mov	r3, r2
 800f3ac:	011b      	lsls	r3, r3, #4
 800f3ae:	4413      	add	r3, r2
 800f3b0:	011b      	lsls	r3, r3, #4
 800f3b2:	440b      	add	r3, r1
 800f3b4:	330f      	adds	r3, #15
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	4b0b      	ldr	r3, [pc, #44]	@ (800f3e8 <dns_call_found+0x17c>)
 800f3bc:	2200      	movs	r2, #0
 800f3be:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800f3c2:	79fa      	ldrb	r2, [r7, #7]
 800f3c4:	4907      	ldr	r1, [pc, #28]	@ (800f3e4 <dns_call_found+0x178>)
 800f3c6:	4613      	mov	r3, r2
 800f3c8:	011b      	lsls	r3, r3, #4
 800f3ca:	4413      	add	r3, r2
 800f3cc:	011b      	lsls	r3, r3, #4
 800f3ce:	440b      	add	r3, r1
 800f3d0:	330f      	adds	r3, #15
 800f3d2:	2204      	movs	r2, #4
 800f3d4:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800f3d6:	bf00      	nop
 800f3d8:	3714      	adds	r7, #20
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	bd90      	pop	{r4, r7, pc}
 800f3de:	bf00      	nop
 800f3e0:	2000b338 	.word	0x2000b338
 800f3e4:	2000aef8 	.word	0x2000aef8
 800f3e8:	2000aee8 	.word	0x2000aee8

0800f3ec <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800f3f2:	f00d fce3 	bl	801cdbc <rand>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	71fb      	strb	r3, [r7, #7]
 800f3fe:	e01a      	b.n	800f436 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800f400:	79fa      	ldrb	r2, [r7, #7]
 800f402:	4911      	ldr	r1, [pc, #68]	@ (800f448 <dns_create_txid+0x5c>)
 800f404:	4613      	mov	r3, r2
 800f406:	011b      	lsls	r3, r3, #4
 800f408:	4413      	add	r3, r2
 800f40a:	011b      	lsls	r3, r3, #4
 800f40c:	440b      	add	r3, r1
 800f40e:	330a      	adds	r3, #10
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	2b02      	cmp	r3, #2
 800f414:	d10c      	bne.n	800f430 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800f416:	79fa      	ldrb	r2, [r7, #7]
 800f418:	490b      	ldr	r1, [pc, #44]	@ (800f448 <dns_create_txid+0x5c>)
 800f41a:	4613      	mov	r3, r2
 800f41c:	011b      	lsls	r3, r3, #4
 800f41e:	4413      	add	r3, r2
 800f420:	011b      	lsls	r3, r3, #4
 800f422:	440b      	add	r3, r1
 800f424:	3308      	adds	r3, #8
 800f426:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800f428:	88ba      	ldrh	r2, [r7, #4]
 800f42a:	429a      	cmp	r2, r3
 800f42c:	d100      	bne.n	800f430 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800f42e:	e7e0      	b.n	800f3f2 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800f430:	79fb      	ldrb	r3, [r7, #7]
 800f432:	3301      	adds	r3, #1
 800f434:	71fb      	strb	r3, [r7, #7]
 800f436:	79fb      	ldrb	r3, [r7, #7]
 800f438:	2b03      	cmp	r3, #3
 800f43a:	d9e1      	bls.n	800f400 <dns_create_txid+0x14>
    }
  }

  return txid;
 800f43c:	88bb      	ldrh	r3, [r7, #4]
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3708      	adds	r7, #8
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}
 800f446:	bf00      	nop
 800f448:	2000aef8 	.word	0x2000aef8

0800f44c <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800f44c:	b480      	push	{r7}
 800f44e:	b085      	sub	sp, #20
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800f454:	2300      	movs	r3, #0
 800f456:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d00d      	beq.n	800f47a <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	7adb      	ldrb	r3, [r3, #11]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d109      	bne.n	800f47a <dns_backupserver_available+0x2e>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	7adb      	ldrb	r3, [r3, #11]
 800f46a:	3301      	adds	r3, #1
 800f46c:	4a06      	ldr	r2, [pc, #24]	@ (800f488 <dns_backupserver_available+0x3c>)
 800f46e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f472:	2b00      	cmp	r3, #0
 800f474:	d001      	beq.n	800f47a <dns_backupserver_available+0x2e>
      ret = 1;
 800f476:	2301      	movs	r3, #1
 800f478:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800f47a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	3714      	adds	r7, #20
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr
 800f488:	2000b368 	.word	0x2000b368

0800f48c <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b084      	sub	sp, #16
 800f490:	af00      	add	r7, sp, #0
 800f492:	4603      	mov	r3, r0
 800f494:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800f496:	79fa      	ldrb	r2, [r7, #7]
 800f498:	4613      	mov	r3, r2
 800f49a:	011b      	lsls	r3, r3, #4
 800f49c:	4413      	add	r3, r2
 800f49e:	011b      	lsls	r3, r3, #4
 800f4a0:	4a48      	ldr	r2, [pc, #288]	@ (800f5c4 <dns_check_entry+0x138>)
 800f4a2:	4413      	add	r3, r2
 800f4a4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800f4a6:	79fb      	ldrb	r3, [r7, #7]
 800f4a8:	2b03      	cmp	r3, #3
 800f4aa:	d906      	bls.n	800f4ba <dns_check_entry+0x2e>
 800f4ac:	4b46      	ldr	r3, [pc, #280]	@ (800f5c8 <dns_check_entry+0x13c>)
 800f4ae:	f240 421c 	movw	r2, #1052	@ 0x41c
 800f4b2:	4946      	ldr	r1, [pc, #280]	@ (800f5cc <dns_check_entry+0x140>)
 800f4b4:	4846      	ldr	r0, [pc, #280]	@ (800f5d0 <dns_check_entry+0x144>)
 800f4b6:	f00e fc69 	bl	801dd8c <iprintf>

  switch (entry->state) {
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	7a9b      	ldrb	r3, [r3, #10]
 800f4be:	2b03      	cmp	r3, #3
 800f4c0:	d86f      	bhi.n	800f5a2 <dns_check_entry+0x116>
 800f4c2:	a201      	add	r2, pc, #4	@ (adr r2, 800f4c8 <dns_check_entry+0x3c>)
 800f4c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4c8:	0800f5b3 	.word	0x0800f5b3
 800f4cc:	0800f4d9 	.word	0x0800f4d9
 800f4d0:	0800f50b 	.word	0x0800f50b
 800f4d4:	0800f581 	.word	0x0800f581
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800f4d8:	f7ff ff88 	bl	800f3ec <dns_create_txid>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	461a      	mov	r2, r3
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	2202      	movs	r2, #2
 800f4e8:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800f4ea:	68fb      	ldr	r3, [r7, #12]
 800f4ec:	2200      	movs	r2, #0
 800f4ee:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	2201      	movs	r2, #1
 800f4f4:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	2200      	movs	r2, #0
 800f4fa:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800f4fc:	79fb      	ldrb	r3, [r7, #7]
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7ff fdc4 	bl	800f08c <dns_send>
 800f504:	4603      	mov	r3, r0
 800f506:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800f508:	e058      	b.n	800f5bc <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	7b1b      	ldrb	r3, [r3, #12]
 800f50e:	3b01      	subs	r3, #1
 800f510:	b2da      	uxtb	r2, r3
 800f512:	68fb      	ldr	r3, [r7, #12]
 800f514:	731a      	strb	r2, [r3, #12]
 800f516:	68fb      	ldr	r3, [r7, #12]
 800f518:	7b1b      	ldrb	r3, [r3, #12]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d14b      	bne.n	800f5b6 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800f51e:	68fb      	ldr	r3, [r7, #12]
 800f520:	7b5b      	ldrb	r3, [r3, #13]
 800f522:	3301      	adds	r3, #1
 800f524:	b2da      	uxtb	r2, r3
 800f526:	68fb      	ldr	r3, [r7, #12]
 800f528:	735a      	strb	r2, [r3, #13]
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	7b5b      	ldrb	r3, [r3, #13]
 800f52e:	2b04      	cmp	r3, #4
 800f530:	d11b      	bne.n	800f56a <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800f532:	68f8      	ldr	r0, [r7, #12]
 800f534:	f7ff ff8a 	bl	800f44c <dns_backupserver_available>
 800f538:	4603      	mov	r3, r0
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d00c      	beq.n	800f558 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	7adb      	ldrb	r3, [r3, #11]
 800f542:	3301      	adds	r3, #1
 800f544:	b2da      	uxtb	r2, r3
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	2201      	movs	r2, #1
 800f54e:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	2200      	movs	r2, #0
 800f554:	735a      	strb	r2, [r3, #13]
 800f556:	e00c      	b.n	800f572 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800f558:	79fb      	ldrb	r3, [r7, #7]
 800f55a:	2100      	movs	r1, #0
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7ff fe85 	bl	800f26c <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800f562:	68fb      	ldr	r3, [r7, #12]
 800f564:	2200      	movs	r2, #0
 800f566:	729a      	strb	r2, [r3, #10]
            break;
 800f568:	e028      	b.n	800f5bc <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800f56a:	68fb      	ldr	r3, [r7, #12]
 800f56c:	7b5a      	ldrb	r2, [r3, #13]
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800f572:	79fb      	ldrb	r3, [r7, #7]
 800f574:	4618      	mov	r0, r3
 800f576:	f7ff fd89 	bl	800f08c <dns_send>
 800f57a:	4603      	mov	r3, r0
 800f57c:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800f57e:	e01a      	b.n	800f5b6 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	2b00      	cmp	r3, #0
 800f586:	d008      	beq.n	800f59a <dns_check_entry+0x10e>
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	1e5a      	subs	r2, r3, #1
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	601a      	str	r2, [r3, #0]
 800f592:	68fb      	ldr	r3, [r7, #12]
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d10f      	bne.n	800f5ba <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800f59a:	68fb      	ldr	r3, [r7, #12]
 800f59c:	2200      	movs	r2, #0
 800f59e:	729a      	strb	r2, [r3, #10]
      }
      break;
 800f5a0:	e00b      	b.n	800f5ba <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800f5a2:	4b09      	ldr	r3, [pc, #36]	@ (800f5c8 <dns_check_entry+0x13c>)
 800f5a4:	f240 425b 	movw	r2, #1115	@ 0x45b
 800f5a8:	490a      	ldr	r1, [pc, #40]	@ (800f5d4 <dns_check_entry+0x148>)
 800f5aa:	4809      	ldr	r0, [pc, #36]	@ (800f5d0 <dns_check_entry+0x144>)
 800f5ac:	f00e fbee 	bl	801dd8c <iprintf>
      break;
 800f5b0:	e004      	b.n	800f5bc <dns_check_entry+0x130>
      break;
 800f5b2:	bf00      	nop
 800f5b4:	e002      	b.n	800f5bc <dns_check_entry+0x130>
      break;
 800f5b6:	bf00      	nop
 800f5b8:	e000      	b.n	800f5bc <dns_check_entry+0x130>
      break;
 800f5ba:	bf00      	nop
  }
}
 800f5bc:	bf00      	nop
 800f5be:	3710      	adds	r7, #16
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	bd80      	pop	{r7, pc}
 800f5c4:	2000aef8 	.word	0x2000aef8
 800f5c8:	08022688 	.word	0x08022688
 800f5cc:	080226f8 	.word	0x080226f8
 800f5d0:	080226d0 	.word	0x080226d0
 800f5d4:	08022714 	.word	0x08022714

0800f5d8 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b082      	sub	sp, #8
 800f5dc:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800f5de:	2300      	movs	r3, #0
 800f5e0:	71fb      	strb	r3, [r7, #7]
 800f5e2:	e006      	b.n	800f5f2 <dns_check_entries+0x1a>
    dns_check_entry(i);
 800f5e4:	79fb      	ldrb	r3, [r7, #7]
 800f5e6:	4618      	mov	r0, r3
 800f5e8:	f7ff ff50 	bl	800f48c <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800f5ec:	79fb      	ldrb	r3, [r7, #7]
 800f5ee:	3301      	adds	r3, #1
 800f5f0:	71fb      	strb	r3, [r7, #7]
 800f5f2:	79fb      	ldrb	r3, [r7, #7]
 800f5f4:	2b03      	cmp	r3, #3
 800f5f6:	d9f5      	bls.n	800f5e4 <dns_check_entries+0xc>
  }
}
 800f5f8:	bf00      	nop
 800f5fa:	bf00      	nop
 800f5fc:	3708      	adds	r7, #8
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}

0800f602 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f602:	b580      	push	{r7, lr}
 800f604:	b082      	sub	sp, #8
 800f606:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f608:	2300      	movs	r3, #0
 800f60a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f60c:	f00d fb5a 	bl	801ccc4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f610:	f000 f8d6 	bl	800f7c0 <mem_init>
  memp_init();
 800f614:	f000 fc32 	bl	800fe7c <memp_init>
  pbuf_init();
  netif_init();
 800f618:	f000 fd3e 	bl	8010098 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f61c:	f008 f9aa 	bl	8017974 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f620:	f001 fff6 	bl	8011610 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800f624:	f7ff fd00 	bl	800f028 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f628:	f008 f8ea 	bl	8017800 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f62c:	bf00      	nop
 800f62e:	3708      	adds	r7, #8
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f634:	b480      	push	{r7}
 800f636:	b083      	sub	sp, #12
 800f638:	af00      	add	r7, sp, #0
 800f63a:	4603      	mov	r3, r0
 800f63c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800f63e:	4b05      	ldr	r3, [pc, #20]	@ (800f654 <ptr_to_mem+0x20>)
 800f640:	681a      	ldr	r2, [r3, #0]
 800f642:	88fb      	ldrh	r3, [r7, #6]
 800f644:	4413      	add	r3, r2
}
 800f646:	4618      	mov	r0, r3
 800f648:	370c      	adds	r7, #12
 800f64a:	46bd      	mov	sp, r7
 800f64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f650:	4770      	bx	lr
 800f652:	bf00      	nop
 800f654:	2000b9dc 	.word	0x2000b9dc

0800f658 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f658:	b480      	push	{r7}
 800f65a:	b083      	sub	sp, #12
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f660:	4b05      	ldr	r3, [pc, #20]	@ (800f678 <mem_to_ptr+0x20>)
 800f662:	681b      	ldr	r3, [r3, #0]
 800f664:	687a      	ldr	r2, [r7, #4]
 800f666:	1ad3      	subs	r3, r2, r3
 800f668:	b29b      	uxth	r3, r3
}
 800f66a:	4618      	mov	r0, r3
 800f66c:	370c      	adds	r7, #12
 800f66e:	46bd      	mov	sp, r7
 800f670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f674:	4770      	bx	lr
 800f676:	bf00      	nop
 800f678:	2000b9dc 	.word	0x2000b9dc

0800f67c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f67c:	b590      	push	{r4, r7, lr}
 800f67e:	b085      	sub	sp, #20
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f684:	4b45      	ldr	r3, [pc, #276]	@ (800f79c <plug_holes+0x120>)
 800f686:	681b      	ldr	r3, [r3, #0]
 800f688:	687a      	ldr	r2, [r7, #4]
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d206      	bcs.n	800f69c <plug_holes+0x20>
 800f68e:	4b44      	ldr	r3, [pc, #272]	@ (800f7a0 <plug_holes+0x124>)
 800f690:	f240 12df 	movw	r2, #479	@ 0x1df
 800f694:	4943      	ldr	r1, [pc, #268]	@ (800f7a4 <plug_holes+0x128>)
 800f696:	4844      	ldr	r0, [pc, #272]	@ (800f7a8 <plug_holes+0x12c>)
 800f698:	f00e fb78 	bl	801dd8c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f69c:	4b43      	ldr	r3, [pc, #268]	@ (800f7ac <plug_holes+0x130>)
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	687a      	ldr	r2, [r7, #4]
 800f6a2:	429a      	cmp	r2, r3
 800f6a4:	d306      	bcc.n	800f6b4 <plug_holes+0x38>
 800f6a6:	4b3e      	ldr	r3, [pc, #248]	@ (800f7a0 <plug_holes+0x124>)
 800f6a8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800f6ac:	4940      	ldr	r1, [pc, #256]	@ (800f7b0 <plug_holes+0x134>)
 800f6ae:	483e      	ldr	r0, [pc, #248]	@ (800f7a8 <plug_holes+0x12c>)
 800f6b0:	f00e fb6c 	bl	801dd8c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	791b      	ldrb	r3, [r3, #4]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d006      	beq.n	800f6ca <plug_holes+0x4e>
 800f6bc:	4b38      	ldr	r3, [pc, #224]	@ (800f7a0 <plug_holes+0x124>)
 800f6be:	f240 12e1 	movw	r2, #481	@ 0x1e1
 800f6c2:	493c      	ldr	r1, [pc, #240]	@ (800f7b4 <plug_holes+0x138>)
 800f6c4:	4838      	ldr	r0, [pc, #224]	@ (800f7a8 <plug_holes+0x12c>)
 800f6c6:	f00e fb61 	bl	801dd8c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	881b      	ldrh	r3, [r3, #0]
 800f6ce:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f6d2:	d906      	bls.n	800f6e2 <plug_holes+0x66>
 800f6d4:	4b32      	ldr	r3, [pc, #200]	@ (800f7a0 <plug_holes+0x124>)
 800f6d6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 800f6da:	4937      	ldr	r1, [pc, #220]	@ (800f7b8 <plug_holes+0x13c>)
 800f6dc:	4832      	ldr	r0, [pc, #200]	@ (800f7a8 <plug_holes+0x12c>)
 800f6de:	f00e fb55 	bl	801dd8c <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	881b      	ldrh	r3, [r3, #0]
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	f7ff ffa4 	bl	800f634 <ptr_to_mem>
 800f6ec:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f6ee:	687a      	ldr	r2, [r7, #4]
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	429a      	cmp	r2, r3
 800f6f4:	d024      	beq.n	800f740 <plug_holes+0xc4>
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	791b      	ldrb	r3, [r3, #4]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d120      	bne.n	800f740 <plug_holes+0xc4>
 800f6fe:	4b2b      	ldr	r3, [pc, #172]	@ (800f7ac <plug_holes+0x130>)
 800f700:	681b      	ldr	r3, [r3, #0]
 800f702:	68fa      	ldr	r2, [r7, #12]
 800f704:	429a      	cmp	r2, r3
 800f706:	d01b      	beq.n	800f740 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f708:	4b2c      	ldr	r3, [pc, #176]	@ (800f7bc <plug_holes+0x140>)
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	68fa      	ldr	r2, [r7, #12]
 800f70e:	429a      	cmp	r2, r3
 800f710:	d102      	bne.n	800f718 <plug_holes+0x9c>
      lfree = mem;
 800f712:	4a2a      	ldr	r2, [pc, #168]	@ (800f7bc <plug_holes+0x140>)
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	881a      	ldrh	r2, [r3, #0]
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	881b      	ldrh	r3, [r3, #0]
 800f724:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f728:	d00a      	beq.n	800f740 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	881b      	ldrh	r3, [r3, #0]
 800f72e:	4618      	mov	r0, r3
 800f730:	f7ff ff80 	bl	800f634 <ptr_to_mem>
 800f734:	4604      	mov	r4, r0
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f7ff ff8e 	bl	800f658 <mem_to_ptr>
 800f73c:	4603      	mov	r3, r0
 800f73e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	885b      	ldrh	r3, [r3, #2]
 800f744:	4618      	mov	r0, r3
 800f746:	f7ff ff75 	bl	800f634 <ptr_to_mem>
 800f74a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f74c:	68ba      	ldr	r2, [r7, #8]
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	429a      	cmp	r2, r3
 800f752:	d01f      	beq.n	800f794 <plug_holes+0x118>
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	791b      	ldrb	r3, [r3, #4]
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d11b      	bne.n	800f794 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f75c:	4b17      	ldr	r3, [pc, #92]	@ (800f7bc <plug_holes+0x140>)
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	687a      	ldr	r2, [r7, #4]
 800f762:	429a      	cmp	r2, r3
 800f764:	d102      	bne.n	800f76c <plug_holes+0xf0>
      lfree = pmem;
 800f766:	4a15      	ldr	r2, [pc, #84]	@ (800f7bc <plug_holes+0x140>)
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	881a      	ldrh	r2, [r3, #0]
 800f770:	68bb      	ldr	r3, [r7, #8]
 800f772:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	881b      	ldrh	r3, [r3, #0]
 800f778:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f77c:	d00a      	beq.n	800f794 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	881b      	ldrh	r3, [r3, #0]
 800f782:	4618      	mov	r0, r3
 800f784:	f7ff ff56 	bl	800f634 <ptr_to_mem>
 800f788:	4604      	mov	r4, r0
 800f78a:	68b8      	ldr	r0, [r7, #8]
 800f78c:	f7ff ff64 	bl	800f658 <mem_to_ptr>
 800f790:	4603      	mov	r3, r0
 800f792:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800f794:	bf00      	nop
 800f796:	3714      	adds	r7, #20
 800f798:	46bd      	mov	sp, r7
 800f79a:	bd90      	pop	{r4, r7, pc}
 800f79c:	2000b9dc 	.word	0x2000b9dc
 800f7a0:	08022734 	.word	0x08022734
 800f7a4:	08022764 	.word	0x08022764
 800f7a8:	0802277c 	.word	0x0802277c
 800f7ac:	2000b9e0 	.word	0x2000b9e0
 800f7b0:	080227a4 	.word	0x080227a4
 800f7b4:	080227c0 	.word	0x080227c0
 800f7b8:	080227dc 	.word	0x080227dc
 800f7bc:	2000b9e8 	.word	0x2000b9e8

0800f7c0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b082      	sub	sp, #8
 800f7c4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f7c6:	4b1f      	ldr	r3, [pc, #124]	@ (800f844 <mem_init+0x84>)
 800f7c8:	3303      	adds	r3, #3
 800f7ca:	f023 0303 	bic.w	r3, r3, #3
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	4b1d      	ldr	r3, [pc, #116]	@ (800f848 <mem_init+0x88>)
 800f7d2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f7d4:	4b1c      	ldr	r3, [pc, #112]	@ (800f848 <mem_init+0x88>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800f7e0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f7ee:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 800f7f2:	f7ff ff1f 	bl	800f634 <ptr_to_mem>
 800f7f6:	4603      	mov	r3, r0
 800f7f8:	4a14      	ldr	r2, [pc, #80]	@ (800f84c <mem_init+0x8c>)
 800f7fa:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f7fc:	4b13      	ldr	r3, [pc, #76]	@ (800f84c <mem_init+0x8c>)
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	2201      	movs	r2, #1
 800f802:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f804:	4b11      	ldr	r3, [pc, #68]	@ (800f84c <mem_init+0x8c>)
 800f806:	681b      	ldr	r3, [r3, #0]
 800f808:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800f80c:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f80e:	4b0f      	ldr	r3, [pc, #60]	@ (800f84c <mem_init+0x8c>)
 800f810:	681b      	ldr	r3, [r3, #0]
 800f812:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 800f816:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f818:	4b0b      	ldr	r3, [pc, #44]	@ (800f848 <mem_init+0x88>)
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	4a0c      	ldr	r2, [pc, #48]	@ (800f850 <mem_init+0x90>)
 800f81e:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f820:	480c      	ldr	r0, [pc, #48]	@ (800f854 <mem_init+0x94>)
 800f822:	f00d fa5b 	bl	801ccdc <sys_mutex_new>
 800f826:	4603      	mov	r3, r0
 800f828:	2b00      	cmp	r3, #0
 800f82a:	d006      	beq.n	800f83a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f82c:	4b0a      	ldr	r3, [pc, #40]	@ (800f858 <mem_init+0x98>)
 800f82e:	f240 221f 	movw	r2, #543	@ 0x21f
 800f832:	490a      	ldr	r1, [pc, #40]	@ (800f85c <mem_init+0x9c>)
 800f834:	480a      	ldr	r0, [pc, #40]	@ (800f860 <mem_init+0xa0>)
 800f836:	f00e faa9 	bl	801dd8c <iprintf>
  }
}
 800f83a:	bf00      	nop
 800f83c:	3708      	adds	r7, #8
 800f83e:	46bd      	mov	sp, r7
 800f840:	bd80      	pop	{r7, pc}
 800f842:	bf00      	nop
 800f844:	2000b388 	.word	0x2000b388
 800f848:	2000b9dc 	.word	0x2000b9dc
 800f84c:	2000b9e0 	.word	0x2000b9e0
 800f850:	2000b9e8 	.word	0x2000b9e8
 800f854:	2000b9e4 	.word	0x2000b9e4
 800f858:	08022734 	.word	0x08022734
 800f85c:	08022808 	.word	0x08022808
 800f860:	0802277c 	.word	0x0802277c

0800f864 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b086      	sub	sp, #24
 800f868:	af00      	add	r7, sp, #0
 800f86a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f7ff fef3 	bl	800f658 <mem_to_ptr>
 800f872:	4603      	mov	r3, r0
 800f874:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	881b      	ldrh	r3, [r3, #0]
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7ff feda 	bl	800f634 <ptr_to_mem>
 800f880:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	885b      	ldrh	r3, [r3, #2]
 800f886:	4618      	mov	r0, r3
 800f888:	f7ff fed4 	bl	800f634 <ptr_to_mem>
 800f88c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	881b      	ldrh	r3, [r3, #0]
 800f892:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f896:	d818      	bhi.n	800f8ca <mem_link_valid+0x66>
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	885b      	ldrh	r3, [r3, #2]
 800f89c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800f8a0:	d813      	bhi.n	800f8ca <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f8a6:	8afa      	ldrh	r2, [r7, #22]
 800f8a8:	429a      	cmp	r2, r3
 800f8aa:	d004      	beq.n	800f8b6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f8ac:	68fb      	ldr	r3, [r7, #12]
 800f8ae:	881b      	ldrh	r3, [r3, #0]
 800f8b0:	8afa      	ldrh	r2, [r7, #22]
 800f8b2:	429a      	cmp	r2, r3
 800f8b4:	d109      	bne.n	800f8ca <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f8b6:	4b08      	ldr	r3, [pc, #32]	@ (800f8d8 <mem_link_valid+0x74>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f8ba:	693a      	ldr	r2, [r7, #16]
 800f8bc:	429a      	cmp	r2, r3
 800f8be:	d006      	beq.n	800f8ce <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f8c0:	693b      	ldr	r3, [r7, #16]
 800f8c2:	885b      	ldrh	r3, [r3, #2]
 800f8c4:	8afa      	ldrh	r2, [r7, #22]
 800f8c6:	429a      	cmp	r2, r3
 800f8c8:	d001      	beq.n	800f8ce <mem_link_valid+0x6a>
    return 0;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	e000      	b.n	800f8d0 <mem_link_valid+0x6c>
  }
  return 1;
 800f8ce:	2301      	movs	r3, #1
}
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	3718      	adds	r7, #24
 800f8d4:	46bd      	mov	sp, r7
 800f8d6:	bd80      	pop	{r7, pc}
 800f8d8:	2000b9e0 	.word	0x2000b9e0

0800f8dc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b088      	sub	sp, #32
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	2b00      	cmp	r3, #0
 800f8e8:	d070      	beq.n	800f9cc <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	f003 0303 	and.w	r3, r3, #3
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d00d      	beq.n	800f910 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f8f4:	4b37      	ldr	r3, [pc, #220]	@ (800f9d4 <mem_free+0xf8>)
 800f8f6:	f240 2273 	movw	r2, #627	@ 0x273
 800f8fa:	4937      	ldr	r1, [pc, #220]	@ (800f9d8 <mem_free+0xfc>)
 800f8fc:	4837      	ldr	r0, [pc, #220]	@ (800f9dc <mem_free+0x100>)
 800f8fe:	f00e fa45 	bl	801dd8c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f902:	f00d fa3d 	bl	801cd80 <sys_arch_protect>
 800f906:	60f8      	str	r0, [r7, #12]
 800f908:	68f8      	ldr	r0, [r7, #12]
 800f90a:	f00d fa47 	bl	801cd9c <sys_arch_unprotect>
    return;
 800f90e:	e05e      	b.n	800f9ce <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	3b08      	subs	r3, #8
 800f914:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f916:	4b32      	ldr	r3, [pc, #200]	@ (800f9e0 <mem_free+0x104>)
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	69fa      	ldr	r2, [r7, #28]
 800f91c:	429a      	cmp	r2, r3
 800f91e:	d306      	bcc.n	800f92e <mem_free+0x52>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f103 020c 	add.w	r2, r3, #12
 800f926:	4b2f      	ldr	r3, [pc, #188]	@ (800f9e4 <mem_free+0x108>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	429a      	cmp	r2, r3
 800f92c:	d90d      	bls.n	800f94a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f92e:	4b29      	ldr	r3, [pc, #164]	@ (800f9d4 <mem_free+0xf8>)
 800f930:	f240 227f 	movw	r2, #639	@ 0x27f
 800f934:	492c      	ldr	r1, [pc, #176]	@ (800f9e8 <mem_free+0x10c>)
 800f936:	4829      	ldr	r0, [pc, #164]	@ (800f9dc <mem_free+0x100>)
 800f938:	f00e fa28 	bl	801dd8c <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f93c:	f00d fa20 	bl	801cd80 <sys_arch_protect>
 800f940:	6138      	str	r0, [r7, #16]
 800f942:	6938      	ldr	r0, [r7, #16]
 800f944:	f00d fa2a 	bl	801cd9c <sys_arch_unprotect>
    return;
 800f948:	e041      	b.n	800f9ce <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f94a:	4828      	ldr	r0, [pc, #160]	@ (800f9ec <mem_free+0x110>)
 800f94c:	f00d f9dc 	bl	801cd08 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f950:	69fb      	ldr	r3, [r7, #28]
 800f952:	791b      	ldrb	r3, [r3, #4]
 800f954:	2b00      	cmp	r3, #0
 800f956:	d110      	bne.n	800f97a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f958:	4b1e      	ldr	r3, [pc, #120]	@ (800f9d4 <mem_free+0xf8>)
 800f95a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 800f95e:	4924      	ldr	r1, [pc, #144]	@ (800f9f0 <mem_free+0x114>)
 800f960:	481e      	ldr	r0, [pc, #120]	@ (800f9dc <mem_free+0x100>)
 800f962:	f00e fa13 	bl	801dd8c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f966:	4821      	ldr	r0, [pc, #132]	@ (800f9ec <mem_free+0x110>)
 800f968:	f00d f9dd 	bl	801cd26 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f96c:	f00d fa08 	bl	801cd80 <sys_arch_protect>
 800f970:	6178      	str	r0, [r7, #20]
 800f972:	6978      	ldr	r0, [r7, #20]
 800f974:	f00d fa12 	bl	801cd9c <sys_arch_unprotect>
    return;
 800f978:	e029      	b.n	800f9ce <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f97a:	69f8      	ldr	r0, [r7, #28]
 800f97c:	f7ff ff72 	bl	800f864 <mem_link_valid>
 800f980:	4603      	mov	r3, r0
 800f982:	2b00      	cmp	r3, #0
 800f984:	d110      	bne.n	800f9a8 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f986:	4b13      	ldr	r3, [pc, #76]	@ (800f9d4 <mem_free+0xf8>)
 800f988:	f240 2295 	movw	r2, #661	@ 0x295
 800f98c:	4919      	ldr	r1, [pc, #100]	@ (800f9f4 <mem_free+0x118>)
 800f98e:	4813      	ldr	r0, [pc, #76]	@ (800f9dc <mem_free+0x100>)
 800f990:	f00e f9fc 	bl	801dd8c <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f994:	4815      	ldr	r0, [pc, #84]	@ (800f9ec <mem_free+0x110>)
 800f996:	f00d f9c6 	bl	801cd26 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f99a:	f00d f9f1 	bl	801cd80 <sys_arch_protect>
 800f99e:	61b8      	str	r0, [r7, #24]
 800f9a0:	69b8      	ldr	r0, [r7, #24]
 800f9a2:	f00d f9fb 	bl	801cd9c <sys_arch_unprotect>
    return;
 800f9a6:	e012      	b.n	800f9ce <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f9a8:	69fb      	ldr	r3, [r7, #28]
 800f9aa:	2200      	movs	r2, #0
 800f9ac:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f9ae:	4b12      	ldr	r3, [pc, #72]	@ (800f9f8 <mem_free+0x11c>)
 800f9b0:	681b      	ldr	r3, [r3, #0]
 800f9b2:	69fa      	ldr	r2, [r7, #28]
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d202      	bcs.n	800f9be <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f9b8:	4a0f      	ldr	r2, [pc, #60]	@ (800f9f8 <mem_free+0x11c>)
 800f9ba:	69fb      	ldr	r3, [r7, #28]
 800f9bc:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f9be:	69f8      	ldr	r0, [r7, #28]
 800f9c0:	f7ff fe5c 	bl	800f67c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f9c4:	4809      	ldr	r0, [pc, #36]	@ (800f9ec <mem_free+0x110>)
 800f9c6:	f00d f9ae 	bl	801cd26 <sys_mutex_unlock>
 800f9ca:	e000      	b.n	800f9ce <mem_free+0xf2>
    return;
 800f9cc:	bf00      	nop
}
 800f9ce:	3720      	adds	r7, #32
 800f9d0:	46bd      	mov	sp, r7
 800f9d2:	bd80      	pop	{r7, pc}
 800f9d4:	08022734 	.word	0x08022734
 800f9d8:	08022824 	.word	0x08022824
 800f9dc:	0802277c 	.word	0x0802277c
 800f9e0:	2000b9dc 	.word	0x2000b9dc
 800f9e4:	2000b9e0 	.word	0x2000b9e0
 800f9e8:	08022848 	.word	0x08022848
 800f9ec:	2000b9e4 	.word	0x2000b9e4
 800f9f0:	08022864 	.word	0x08022864
 800f9f4:	0802288c 	.word	0x0802288c
 800f9f8:	2000b9e8 	.word	0x2000b9e8

0800f9fc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f9fc:	b580      	push	{r7, lr}
 800f9fe:	b088      	sub	sp, #32
 800fa00:	af00      	add	r7, sp, #0
 800fa02:	6078      	str	r0, [r7, #4]
 800fa04:	460b      	mov	r3, r1
 800fa06:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fa08:	887b      	ldrh	r3, [r7, #2]
 800fa0a:	3303      	adds	r3, #3
 800fa0c:	b29b      	uxth	r3, r3
 800fa0e:	f023 0303 	bic.w	r3, r3, #3
 800fa12:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800fa14:	8bfb      	ldrh	r3, [r7, #30]
 800fa16:	2b0b      	cmp	r3, #11
 800fa18:	d801      	bhi.n	800fa1e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fa1a:	230c      	movs	r3, #12
 800fa1c:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fa1e:	8bfb      	ldrh	r3, [r7, #30]
 800fa20:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fa24:	d803      	bhi.n	800fa2e <mem_trim+0x32>
 800fa26:	8bfa      	ldrh	r2, [r7, #30]
 800fa28:	887b      	ldrh	r3, [r7, #2]
 800fa2a:	429a      	cmp	r2, r3
 800fa2c:	d201      	bcs.n	800fa32 <mem_trim+0x36>
    return NULL;
 800fa2e:	2300      	movs	r3, #0
 800fa30:	e0d8      	b.n	800fbe4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fa32:	4b6e      	ldr	r3, [pc, #440]	@ (800fbec <mem_trim+0x1f0>)
 800fa34:	681b      	ldr	r3, [r3, #0]
 800fa36:	687a      	ldr	r2, [r7, #4]
 800fa38:	429a      	cmp	r2, r3
 800fa3a:	d304      	bcc.n	800fa46 <mem_trim+0x4a>
 800fa3c:	4b6c      	ldr	r3, [pc, #432]	@ (800fbf0 <mem_trim+0x1f4>)
 800fa3e:	681b      	ldr	r3, [r3, #0]
 800fa40:	687a      	ldr	r2, [r7, #4]
 800fa42:	429a      	cmp	r2, r3
 800fa44:	d306      	bcc.n	800fa54 <mem_trim+0x58>
 800fa46:	4b6b      	ldr	r3, [pc, #428]	@ (800fbf4 <mem_trim+0x1f8>)
 800fa48:	f240 22d1 	movw	r2, #721	@ 0x2d1
 800fa4c:	496a      	ldr	r1, [pc, #424]	@ (800fbf8 <mem_trim+0x1fc>)
 800fa4e:	486b      	ldr	r0, [pc, #428]	@ (800fbfc <mem_trim+0x200>)
 800fa50:	f00e f99c 	bl	801dd8c <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800fa54:	4b65      	ldr	r3, [pc, #404]	@ (800fbec <mem_trim+0x1f0>)
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	687a      	ldr	r2, [r7, #4]
 800fa5a:	429a      	cmp	r2, r3
 800fa5c:	d304      	bcc.n	800fa68 <mem_trim+0x6c>
 800fa5e:	4b64      	ldr	r3, [pc, #400]	@ (800fbf0 <mem_trim+0x1f4>)
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	687a      	ldr	r2, [r7, #4]
 800fa64:	429a      	cmp	r2, r3
 800fa66:	d307      	bcc.n	800fa78 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800fa68:	f00d f98a 	bl	801cd80 <sys_arch_protect>
 800fa6c:	60b8      	str	r0, [r7, #8]
 800fa6e:	68b8      	ldr	r0, [r7, #8]
 800fa70:	f00d f994 	bl	801cd9c <sys_arch_unprotect>
    return rmem;
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	e0b5      	b.n	800fbe4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	3b08      	subs	r3, #8
 800fa7c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800fa7e:	69b8      	ldr	r0, [r7, #24]
 800fa80:	f7ff fdea 	bl	800f658 <mem_to_ptr>
 800fa84:	4603      	mov	r3, r0
 800fa86:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800fa88:	69bb      	ldr	r3, [r7, #24]
 800fa8a:	881a      	ldrh	r2, [r3, #0]
 800fa8c:	8afb      	ldrh	r3, [r7, #22]
 800fa8e:	1ad3      	subs	r3, r2, r3
 800fa90:	b29b      	uxth	r3, r3
 800fa92:	3b08      	subs	r3, #8
 800fa94:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800fa96:	8bfa      	ldrh	r2, [r7, #30]
 800fa98:	8abb      	ldrh	r3, [r7, #20]
 800fa9a:	429a      	cmp	r2, r3
 800fa9c:	d906      	bls.n	800faac <mem_trim+0xb0>
 800fa9e:	4b55      	ldr	r3, [pc, #340]	@ (800fbf4 <mem_trim+0x1f8>)
 800faa0:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 800faa4:	4956      	ldr	r1, [pc, #344]	@ (800fc00 <mem_trim+0x204>)
 800faa6:	4855      	ldr	r0, [pc, #340]	@ (800fbfc <mem_trim+0x200>)
 800faa8:	f00e f970 	bl	801dd8c <iprintf>
  if (newsize > size) {
 800faac:	8bfa      	ldrh	r2, [r7, #30]
 800faae:	8abb      	ldrh	r3, [r7, #20]
 800fab0:	429a      	cmp	r2, r3
 800fab2:	d901      	bls.n	800fab8 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800fab4:	2300      	movs	r3, #0
 800fab6:	e095      	b.n	800fbe4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800fab8:	8bfa      	ldrh	r2, [r7, #30]
 800faba:	8abb      	ldrh	r3, [r7, #20]
 800fabc:	429a      	cmp	r2, r3
 800fabe:	d101      	bne.n	800fac4 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	e08f      	b.n	800fbe4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800fac4:	484f      	ldr	r0, [pc, #316]	@ (800fc04 <mem_trim+0x208>)
 800fac6:	f00d f91f 	bl	801cd08 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800faca:	69bb      	ldr	r3, [r7, #24]
 800facc:	881b      	ldrh	r3, [r3, #0]
 800face:	4618      	mov	r0, r3
 800fad0:	f7ff fdb0 	bl	800f634 <ptr_to_mem>
 800fad4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800fad6:	693b      	ldr	r3, [r7, #16]
 800fad8:	791b      	ldrb	r3, [r3, #4]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d13f      	bne.n	800fb5e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fade:	69bb      	ldr	r3, [r7, #24]
 800fae0:	881b      	ldrh	r3, [r3, #0]
 800fae2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fae6:	d106      	bne.n	800faf6 <mem_trim+0xfa>
 800fae8:	4b42      	ldr	r3, [pc, #264]	@ (800fbf4 <mem_trim+0x1f8>)
 800faea:	f240 22f5 	movw	r2, #757	@ 0x2f5
 800faee:	4946      	ldr	r1, [pc, #280]	@ (800fc08 <mem_trim+0x20c>)
 800faf0:	4842      	ldr	r0, [pc, #264]	@ (800fbfc <mem_trim+0x200>)
 800faf2:	f00e f94b 	bl	801dd8c <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800faf6:	693b      	ldr	r3, [r7, #16]
 800faf8:	881b      	ldrh	r3, [r3, #0]
 800fafa:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fafc:	8afa      	ldrh	r2, [r7, #22]
 800fafe:	8bfb      	ldrh	r3, [r7, #30]
 800fb00:	4413      	add	r3, r2
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	3308      	adds	r3, #8
 800fb06:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800fb08:	4b40      	ldr	r3, [pc, #256]	@ (800fc0c <mem_trim+0x210>)
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	693a      	ldr	r2, [r7, #16]
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	d106      	bne.n	800fb20 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800fb12:	89fb      	ldrh	r3, [r7, #14]
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7ff fd8d 	bl	800f634 <ptr_to_mem>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	4a3b      	ldr	r2, [pc, #236]	@ (800fc0c <mem_trim+0x210>)
 800fb1e:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800fb20:	89fb      	ldrh	r3, [r7, #14]
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7ff fd86 	bl	800f634 <ptr_to_mem>
 800fb28:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	2200      	movs	r2, #0
 800fb2e:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800fb30:	693b      	ldr	r3, [r7, #16]
 800fb32:	89ba      	ldrh	r2, [r7, #12]
 800fb34:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	8afa      	ldrh	r2, [r7, #22]
 800fb3a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800fb3c:	69bb      	ldr	r3, [r7, #24]
 800fb3e:	89fa      	ldrh	r2, [r7, #14]
 800fb40:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fb42:	693b      	ldr	r3, [r7, #16]
 800fb44:	881b      	ldrh	r3, [r3, #0]
 800fb46:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fb4a:	d047      	beq.n	800fbdc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fb4c:	693b      	ldr	r3, [r7, #16]
 800fb4e:	881b      	ldrh	r3, [r3, #0]
 800fb50:	4618      	mov	r0, r3
 800fb52:	f7ff fd6f 	bl	800f634 <ptr_to_mem>
 800fb56:	4602      	mov	r2, r0
 800fb58:	89fb      	ldrh	r3, [r7, #14]
 800fb5a:	8053      	strh	r3, [r2, #2]
 800fb5c:	e03e      	b.n	800fbdc <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800fb5e:	8bfb      	ldrh	r3, [r7, #30]
 800fb60:	f103 0214 	add.w	r2, r3, #20
 800fb64:	8abb      	ldrh	r3, [r7, #20]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d838      	bhi.n	800fbdc <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800fb6a:	8afa      	ldrh	r2, [r7, #22]
 800fb6c:	8bfb      	ldrh	r3, [r7, #30]
 800fb6e:	4413      	add	r3, r2
 800fb70:	b29b      	uxth	r3, r3
 800fb72:	3308      	adds	r3, #8
 800fb74:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800fb76:	69bb      	ldr	r3, [r7, #24]
 800fb78:	881b      	ldrh	r3, [r3, #0]
 800fb7a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fb7e:	d106      	bne.n	800fb8e <mem_trim+0x192>
 800fb80:	4b1c      	ldr	r3, [pc, #112]	@ (800fbf4 <mem_trim+0x1f8>)
 800fb82:	f240 3216 	movw	r2, #790	@ 0x316
 800fb86:	4920      	ldr	r1, [pc, #128]	@ (800fc08 <mem_trim+0x20c>)
 800fb88:	481c      	ldr	r0, [pc, #112]	@ (800fbfc <mem_trim+0x200>)
 800fb8a:	f00e f8ff 	bl	801dd8c <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800fb8e:	89fb      	ldrh	r3, [r7, #14]
 800fb90:	4618      	mov	r0, r3
 800fb92:	f7ff fd4f 	bl	800f634 <ptr_to_mem>
 800fb96:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800fb98:	4b1c      	ldr	r3, [pc, #112]	@ (800fc0c <mem_trim+0x210>)
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	693a      	ldr	r2, [r7, #16]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	d202      	bcs.n	800fba8 <mem_trim+0x1ac>
      lfree = mem2;
 800fba2:	4a1a      	ldr	r2, [pc, #104]	@ (800fc0c <mem_trim+0x210>)
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800fba8:	693b      	ldr	r3, [r7, #16]
 800fbaa:	2200      	movs	r2, #0
 800fbac:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800fbae:	69bb      	ldr	r3, [r7, #24]
 800fbb0:	881a      	ldrh	r2, [r3, #0]
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800fbb6:	693b      	ldr	r3, [r7, #16]
 800fbb8:	8afa      	ldrh	r2, [r7, #22]
 800fbba:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800fbbc:	69bb      	ldr	r3, [r7, #24]
 800fbbe:	89fa      	ldrh	r2, [r7, #14]
 800fbc0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800fbc2:	693b      	ldr	r3, [r7, #16]
 800fbc4:	881b      	ldrh	r3, [r3, #0]
 800fbc6:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fbca:	d007      	beq.n	800fbdc <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fbcc:	693b      	ldr	r3, [r7, #16]
 800fbce:	881b      	ldrh	r3, [r3, #0]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7ff fd2f 	bl	800f634 <ptr_to_mem>
 800fbd6:	4602      	mov	r2, r0
 800fbd8:	89fb      	ldrh	r3, [r7, #14]
 800fbda:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800fbdc:	4809      	ldr	r0, [pc, #36]	@ (800fc04 <mem_trim+0x208>)
 800fbde:	f00d f8a2 	bl	801cd26 <sys_mutex_unlock>
  return rmem;
 800fbe2:	687b      	ldr	r3, [r7, #4]
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3720      	adds	r7, #32
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	2000b9dc 	.word	0x2000b9dc
 800fbf0:	2000b9e0 	.word	0x2000b9e0
 800fbf4:	08022734 	.word	0x08022734
 800fbf8:	080228c0 	.word	0x080228c0
 800fbfc:	0802277c 	.word	0x0802277c
 800fc00:	080228d8 	.word	0x080228d8
 800fc04:	2000b9e4 	.word	0x2000b9e4
 800fc08:	080228f8 	.word	0x080228f8
 800fc0c:	2000b9e8 	.word	0x2000b9e8

0800fc10 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	b088      	sub	sp, #32
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	4603      	mov	r3, r0
 800fc18:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800fc1a:	88fb      	ldrh	r3, [r7, #6]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d101      	bne.n	800fc24 <mem_malloc+0x14>
    return NULL;
 800fc20:	2300      	movs	r3, #0
 800fc22:	e0e2      	b.n	800fdea <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800fc24:	88fb      	ldrh	r3, [r7, #6]
 800fc26:	3303      	adds	r3, #3
 800fc28:	b29b      	uxth	r3, r3
 800fc2a:	f023 0303 	bic.w	r3, r3, #3
 800fc2e:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800fc30:	8bbb      	ldrh	r3, [r7, #28]
 800fc32:	2b0b      	cmp	r3, #11
 800fc34:	d801      	bhi.n	800fc3a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800fc36:	230c      	movs	r3, #12
 800fc38:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800fc3a:	8bbb      	ldrh	r3, [r7, #28]
 800fc3c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fc40:	d803      	bhi.n	800fc4a <mem_malloc+0x3a>
 800fc42:	8bba      	ldrh	r2, [r7, #28]
 800fc44:	88fb      	ldrh	r3, [r7, #6]
 800fc46:	429a      	cmp	r2, r3
 800fc48:	d201      	bcs.n	800fc4e <mem_malloc+0x3e>
    return NULL;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	e0cd      	b.n	800fdea <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800fc4e:	4869      	ldr	r0, [pc, #420]	@ (800fdf4 <mem_malloc+0x1e4>)
 800fc50:	f00d f85a 	bl	801cd08 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fc54:	4b68      	ldr	r3, [pc, #416]	@ (800fdf8 <mem_malloc+0x1e8>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	4618      	mov	r0, r3
 800fc5a:	f7ff fcfd 	bl	800f658 <mem_to_ptr>
 800fc5e:	4603      	mov	r3, r0
 800fc60:	83fb      	strh	r3, [r7, #30]
 800fc62:	e0b7      	b.n	800fdd4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800fc64:	8bfb      	ldrh	r3, [r7, #30]
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7ff fce4 	bl	800f634 <ptr_to_mem>
 800fc6c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	791b      	ldrb	r3, [r3, #4]
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	f040 80a7 	bne.w	800fdc6 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800fc78:	697b      	ldr	r3, [r7, #20]
 800fc7a:	881b      	ldrh	r3, [r3, #0]
 800fc7c:	461a      	mov	r2, r3
 800fc7e:	8bfb      	ldrh	r3, [r7, #30]
 800fc80:	1ad3      	subs	r3, r2, r3
 800fc82:	f1a3 0208 	sub.w	r2, r3, #8
 800fc86:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800fc88:	429a      	cmp	r2, r3
 800fc8a:	f0c0 809c 	bcc.w	800fdc6 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800fc8e:	697b      	ldr	r3, [r7, #20]
 800fc90:	881b      	ldrh	r3, [r3, #0]
 800fc92:	461a      	mov	r2, r3
 800fc94:	8bfb      	ldrh	r3, [r7, #30]
 800fc96:	1ad3      	subs	r3, r2, r3
 800fc98:	f1a3 0208 	sub.w	r2, r3, #8
 800fc9c:	8bbb      	ldrh	r3, [r7, #28]
 800fc9e:	3314      	adds	r3, #20
 800fca0:	429a      	cmp	r2, r3
 800fca2:	d333      	bcc.n	800fd0c <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800fca4:	8bfa      	ldrh	r2, [r7, #30]
 800fca6:	8bbb      	ldrh	r3, [r7, #28]
 800fca8:	4413      	add	r3, r2
 800fcaa:	b29b      	uxth	r3, r3
 800fcac:	3308      	adds	r3, #8
 800fcae:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800fcb0:	8a7b      	ldrh	r3, [r7, #18]
 800fcb2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fcb6:	d106      	bne.n	800fcc6 <mem_malloc+0xb6>
 800fcb8:	4b50      	ldr	r3, [pc, #320]	@ (800fdfc <mem_malloc+0x1ec>)
 800fcba:	f240 3287 	movw	r2, #903	@ 0x387
 800fcbe:	4950      	ldr	r1, [pc, #320]	@ (800fe00 <mem_malloc+0x1f0>)
 800fcc0:	4850      	ldr	r0, [pc, #320]	@ (800fe04 <mem_malloc+0x1f4>)
 800fcc2:	f00e f863 	bl	801dd8c <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800fcc6:	8a7b      	ldrh	r3, [r7, #18]
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f7ff fcb3 	bl	800f634 <ptr_to_mem>
 800fcce:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800fcd6:	697b      	ldr	r3, [r7, #20]
 800fcd8:	881a      	ldrh	r2, [r3, #0]
 800fcda:	68fb      	ldr	r3, [r7, #12]
 800fcdc:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	8bfa      	ldrh	r2, [r7, #30]
 800fce2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800fce4:	697b      	ldr	r3, [r7, #20]
 800fce6:	8a7a      	ldrh	r2, [r7, #18]
 800fce8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800fcea:	697b      	ldr	r3, [r7, #20]
 800fcec:	2201      	movs	r2, #1
 800fcee:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	881b      	ldrh	r3, [r3, #0]
 800fcf4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 800fcf8:	d00b      	beq.n	800fd12 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	881b      	ldrh	r3, [r3, #0]
 800fcfe:	4618      	mov	r0, r3
 800fd00:	f7ff fc98 	bl	800f634 <ptr_to_mem>
 800fd04:	4602      	mov	r2, r0
 800fd06:	8a7b      	ldrh	r3, [r7, #18]
 800fd08:	8053      	strh	r3, [r2, #2]
 800fd0a:	e002      	b.n	800fd12 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800fd0c:	697b      	ldr	r3, [r7, #20]
 800fd0e:	2201      	movs	r2, #1
 800fd10:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800fd12:	4b39      	ldr	r3, [pc, #228]	@ (800fdf8 <mem_malloc+0x1e8>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	697a      	ldr	r2, [r7, #20]
 800fd18:	429a      	cmp	r2, r3
 800fd1a:	d127      	bne.n	800fd6c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800fd1c:	4b36      	ldr	r3, [pc, #216]	@ (800fdf8 <mem_malloc+0x1e8>)
 800fd1e:	681b      	ldr	r3, [r3, #0]
 800fd20:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800fd22:	e005      	b.n	800fd30 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800fd24:	69bb      	ldr	r3, [r7, #24]
 800fd26:	881b      	ldrh	r3, [r3, #0]
 800fd28:	4618      	mov	r0, r3
 800fd2a:	f7ff fc83 	bl	800f634 <ptr_to_mem>
 800fd2e:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800fd30:	69bb      	ldr	r3, [r7, #24]
 800fd32:	791b      	ldrb	r3, [r3, #4]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d004      	beq.n	800fd42 <mem_malloc+0x132>
 800fd38:	4b33      	ldr	r3, [pc, #204]	@ (800fe08 <mem_malloc+0x1f8>)
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	69ba      	ldr	r2, [r7, #24]
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	d1f0      	bne.n	800fd24 <mem_malloc+0x114>
          }
          lfree = cur;
 800fd42:	4a2d      	ldr	r2, [pc, #180]	@ (800fdf8 <mem_malloc+0x1e8>)
 800fd44:	69bb      	ldr	r3, [r7, #24]
 800fd46:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800fd48:	4b2b      	ldr	r3, [pc, #172]	@ (800fdf8 <mem_malloc+0x1e8>)
 800fd4a:	681a      	ldr	r2, [r3, #0]
 800fd4c:	4b2e      	ldr	r3, [pc, #184]	@ (800fe08 <mem_malloc+0x1f8>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	429a      	cmp	r2, r3
 800fd52:	d00b      	beq.n	800fd6c <mem_malloc+0x15c>
 800fd54:	4b28      	ldr	r3, [pc, #160]	@ (800fdf8 <mem_malloc+0x1e8>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	791b      	ldrb	r3, [r3, #4]
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d006      	beq.n	800fd6c <mem_malloc+0x15c>
 800fd5e:	4b27      	ldr	r3, [pc, #156]	@ (800fdfc <mem_malloc+0x1ec>)
 800fd60:	f240 32b5 	movw	r2, #949	@ 0x3b5
 800fd64:	4929      	ldr	r1, [pc, #164]	@ (800fe0c <mem_malloc+0x1fc>)
 800fd66:	4827      	ldr	r0, [pc, #156]	@ (800fe04 <mem_malloc+0x1f4>)
 800fd68:	f00e f810 	bl	801dd8c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800fd6c:	4821      	ldr	r0, [pc, #132]	@ (800fdf4 <mem_malloc+0x1e4>)
 800fd6e:	f00c ffda 	bl	801cd26 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800fd72:	8bba      	ldrh	r2, [r7, #28]
 800fd74:	697b      	ldr	r3, [r7, #20]
 800fd76:	4413      	add	r3, r2
 800fd78:	3308      	adds	r3, #8
 800fd7a:	4a23      	ldr	r2, [pc, #140]	@ (800fe08 <mem_malloc+0x1f8>)
 800fd7c:	6812      	ldr	r2, [r2, #0]
 800fd7e:	4293      	cmp	r3, r2
 800fd80:	d906      	bls.n	800fd90 <mem_malloc+0x180>
 800fd82:	4b1e      	ldr	r3, [pc, #120]	@ (800fdfc <mem_malloc+0x1ec>)
 800fd84:	f240 32b9 	movw	r2, #953	@ 0x3b9
 800fd88:	4921      	ldr	r1, [pc, #132]	@ (800fe10 <mem_malloc+0x200>)
 800fd8a:	481e      	ldr	r0, [pc, #120]	@ (800fe04 <mem_malloc+0x1f4>)
 800fd8c:	f00d fffe 	bl	801dd8c <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800fd90:	697b      	ldr	r3, [r7, #20]
 800fd92:	f003 0303 	and.w	r3, r3, #3
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d006      	beq.n	800fda8 <mem_malloc+0x198>
 800fd9a:	4b18      	ldr	r3, [pc, #96]	@ (800fdfc <mem_malloc+0x1ec>)
 800fd9c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 800fda0:	491c      	ldr	r1, [pc, #112]	@ (800fe14 <mem_malloc+0x204>)
 800fda2:	4818      	ldr	r0, [pc, #96]	@ (800fe04 <mem_malloc+0x1f4>)
 800fda4:	f00d fff2 	bl	801dd8c <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800fda8:	697b      	ldr	r3, [r7, #20]
 800fdaa:	f003 0303 	and.w	r3, r3, #3
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d006      	beq.n	800fdc0 <mem_malloc+0x1b0>
 800fdb2:	4b12      	ldr	r3, [pc, #72]	@ (800fdfc <mem_malloc+0x1ec>)
 800fdb4:	f240 32bd 	movw	r2, #957	@ 0x3bd
 800fdb8:	4917      	ldr	r1, [pc, #92]	@ (800fe18 <mem_malloc+0x208>)
 800fdba:	4812      	ldr	r0, [pc, #72]	@ (800fe04 <mem_malloc+0x1f4>)
 800fdbc:	f00d ffe6 	bl	801dd8c <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800fdc0:	697b      	ldr	r3, [r7, #20]
 800fdc2:	3308      	adds	r3, #8
 800fdc4:	e011      	b.n	800fdea <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800fdc6:	8bfb      	ldrh	r3, [r7, #30]
 800fdc8:	4618      	mov	r0, r3
 800fdca:	f7ff fc33 	bl	800f634 <ptr_to_mem>
 800fdce:	4603      	mov	r3, r0
 800fdd0:	881b      	ldrh	r3, [r3, #0]
 800fdd2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800fdd4:	8bfa      	ldrh	r2, [r7, #30]
 800fdd6:	8bbb      	ldrh	r3, [r7, #28]
 800fdd8:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 800fddc:	429a      	cmp	r2, r3
 800fdde:	f4ff af41 	bcc.w	800fc64 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800fde2:	4804      	ldr	r0, [pc, #16]	@ (800fdf4 <mem_malloc+0x1e4>)
 800fde4:	f00c ff9f 	bl	801cd26 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800fde8:	2300      	movs	r3, #0
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3720      	adds	r7, #32
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}
 800fdf2:	bf00      	nop
 800fdf4:	2000b9e4 	.word	0x2000b9e4
 800fdf8:	2000b9e8 	.word	0x2000b9e8
 800fdfc:	08022734 	.word	0x08022734
 800fe00:	080228f8 	.word	0x080228f8
 800fe04:	0802277c 	.word	0x0802277c
 800fe08:	2000b9e0 	.word	0x2000b9e0
 800fe0c:	0802290c 	.word	0x0802290c
 800fe10:	08022928 	.word	0x08022928
 800fe14:	08022958 	.word	0x08022958
 800fe18:	08022988 	.word	0x08022988

0800fe1c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b085      	sub	sp, #20
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	689b      	ldr	r3, [r3, #8]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	685b      	ldr	r3, [r3, #4]
 800fe30:	3303      	adds	r3, #3
 800fe32:	f023 0303 	bic.w	r3, r3, #3
 800fe36:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800fe38:	2300      	movs	r3, #0
 800fe3a:	60fb      	str	r3, [r7, #12]
 800fe3c:	e011      	b.n	800fe62 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	689b      	ldr	r3, [r3, #8]
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	68bb      	ldr	r3, [r7, #8]
 800fe46:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	689b      	ldr	r3, [r3, #8]
 800fe4c:	68ba      	ldr	r2, [r7, #8]
 800fe4e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	881b      	ldrh	r3, [r3, #0]
 800fe54:	461a      	mov	r2, r3
 800fe56:	68bb      	ldr	r3, [r7, #8]
 800fe58:	4413      	add	r3, r2
 800fe5a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800fe5c:	68fb      	ldr	r3, [r7, #12]
 800fe5e:	3301      	adds	r3, #1
 800fe60:	60fb      	str	r3, [r7, #12]
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	885b      	ldrh	r3, [r3, #2]
 800fe66:	461a      	mov	r2, r3
 800fe68:	68fb      	ldr	r3, [r7, #12]
 800fe6a:	4293      	cmp	r3, r2
 800fe6c:	dbe7      	blt.n	800fe3e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800fe6e:	bf00      	nop
 800fe70:	bf00      	nop
 800fe72:	3714      	adds	r7, #20
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr

0800fe7c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b082      	sub	sp, #8
 800fe80:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fe82:	2300      	movs	r3, #0
 800fe84:	80fb      	strh	r3, [r7, #6]
 800fe86:	e009      	b.n	800fe9c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800fe88:	88fb      	ldrh	r3, [r7, #6]
 800fe8a:	4a08      	ldr	r2, [pc, #32]	@ (800feac <memp_init+0x30>)
 800fe8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fe90:	4618      	mov	r0, r3
 800fe92:	f7ff ffc3 	bl	800fe1c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fe96:	88fb      	ldrh	r3, [r7, #6]
 800fe98:	3301      	adds	r3, #1
 800fe9a:	80fb      	strh	r3, [r7, #6]
 800fe9c:	88fb      	ldrh	r3, [r7, #6]
 800fe9e:	2b0d      	cmp	r3, #13
 800fea0:	d9f2      	bls.n	800fe88 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800fea2:	bf00      	nop
 800fea4:	bf00      	nop
 800fea6:	3708      	adds	r7, #8
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}
 800feac:	080256b0 	.word	0x080256b0

0800feb0 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b084      	sub	sp, #16
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800feb8:	f00c ff62 	bl	801cd80 <sys_arch_protect>
 800febc:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	689b      	ldr	r3, [r3, #8]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800fec6:	68bb      	ldr	r3, [r7, #8]
 800fec8:	2b00      	cmp	r3, #0
 800feca:	d015      	beq.n	800fef8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	689b      	ldr	r3, [r3, #8]
 800fed0:	68ba      	ldr	r2, [r7, #8]
 800fed2:	6812      	ldr	r2, [r2, #0]
 800fed4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800fed6:	68bb      	ldr	r3, [r7, #8]
 800fed8:	f003 0303 	and.w	r3, r3, #3
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d006      	beq.n	800feee <do_memp_malloc_pool+0x3e>
 800fee0:	4b09      	ldr	r3, [pc, #36]	@ (800ff08 <do_memp_malloc_pool+0x58>)
 800fee2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 800fee6:	4909      	ldr	r1, [pc, #36]	@ (800ff0c <do_memp_malloc_pool+0x5c>)
 800fee8:	4809      	ldr	r0, [pc, #36]	@ (800ff10 <do_memp_malloc_pool+0x60>)
 800feea:	f00d ff4f 	bl	801dd8c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800feee:	68f8      	ldr	r0, [r7, #12]
 800fef0:	f00c ff54 	bl	801cd9c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800fef4:	68bb      	ldr	r3, [r7, #8]
 800fef6:	e003      	b.n	800ff00 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fef8:	68f8      	ldr	r0, [r7, #12]
 800fefa:	f00c ff4f 	bl	801cd9c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800fefe:	2300      	movs	r3, #0
}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3710      	adds	r7, #16
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}
 800ff08:	080229ac 	.word	0x080229ac
 800ff0c:	080229dc 	.word	0x080229dc
 800ff10:	08022a00 	.word	0x08022a00

0800ff14 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b082      	sub	sp, #8
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d106      	bne.n	800ff30 <memp_malloc_pool+0x1c>
 800ff22:	4b0a      	ldr	r3, [pc, #40]	@ (800ff4c <memp_malloc_pool+0x38>)
 800ff24:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 800ff28:	4909      	ldr	r1, [pc, #36]	@ (800ff50 <memp_malloc_pool+0x3c>)
 800ff2a:	480a      	ldr	r0, [pc, #40]	@ (800ff54 <memp_malloc_pool+0x40>)
 800ff2c:	f00d ff2e 	bl	801dd8c <iprintf>
  if (desc == NULL) {
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d101      	bne.n	800ff3a <memp_malloc_pool+0x26>
    return NULL;
 800ff36:	2300      	movs	r3, #0
 800ff38:	e003      	b.n	800ff42 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800ff3a:	6878      	ldr	r0, [r7, #4]
 800ff3c:	f7ff ffb8 	bl	800feb0 <do_memp_malloc_pool>
 800ff40:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ff42:	4618      	mov	r0, r3
 800ff44:	3708      	adds	r7, #8
 800ff46:	46bd      	mov	sp, r7
 800ff48:	bd80      	pop	{r7, pc}
 800ff4a:	bf00      	nop
 800ff4c:	080229ac 	.word	0x080229ac
 800ff50:	08022a28 	.word	0x08022a28
 800ff54:	08022a00 	.word	0x08022a00

0800ff58 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ff58:	b580      	push	{r7, lr}
 800ff5a:	b084      	sub	sp, #16
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	4603      	mov	r3, r0
 800ff60:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ff62:	79fb      	ldrb	r3, [r7, #7]
 800ff64:	2b0d      	cmp	r3, #13
 800ff66:	d908      	bls.n	800ff7a <memp_malloc+0x22>
 800ff68:	4b0a      	ldr	r3, [pc, #40]	@ (800ff94 <memp_malloc+0x3c>)
 800ff6a:	f240 1257 	movw	r2, #343	@ 0x157
 800ff6e:	490a      	ldr	r1, [pc, #40]	@ (800ff98 <memp_malloc+0x40>)
 800ff70:	480a      	ldr	r0, [pc, #40]	@ (800ff9c <memp_malloc+0x44>)
 800ff72:	f00d ff0b 	bl	801dd8c <iprintf>
 800ff76:	2300      	movs	r3, #0
 800ff78:	e008      	b.n	800ff8c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ff7a:	79fb      	ldrb	r3, [r7, #7]
 800ff7c:	4a08      	ldr	r2, [pc, #32]	@ (800ffa0 <memp_malloc+0x48>)
 800ff7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ff82:	4618      	mov	r0, r3
 800ff84:	f7ff ff94 	bl	800feb0 <do_memp_malloc_pool>
 800ff88:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
}
 800ff8c:	4618      	mov	r0, r3
 800ff8e:	3710      	adds	r7, #16
 800ff90:	46bd      	mov	sp, r7
 800ff92:	bd80      	pop	{r7, pc}
 800ff94:	080229ac 	.word	0x080229ac
 800ff98:	08022a3c 	.word	0x08022a3c
 800ff9c:	08022a00 	.word	0x08022a00
 800ffa0:	080256b0 	.word	0x080256b0

0800ffa4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b084      	sub	sp, #16
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	f003 0303 	and.w	r3, r3, #3
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d006      	beq.n	800ffc6 <do_memp_free_pool+0x22>
 800ffb8:	4b0d      	ldr	r3, [pc, #52]	@ (800fff0 <do_memp_free_pool+0x4c>)
 800ffba:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 800ffbe:	490d      	ldr	r1, [pc, #52]	@ (800fff4 <do_memp_free_pool+0x50>)
 800ffc0:	480d      	ldr	r0, [pc, #52]	@ (800fff8 <do_memp_free_pool+0x54>)
 800ffc2:	f00d fee3 	bl	801dd8c <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ffca:	f00c fed9 	bl	801cd80 <sys_arch_protect>
 800ffce:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	689b      	ldr	r3, [r3, #8]
 800ffd4:	681a      	ldr	r2, [r3, #0]
 800ffd6:	68fb      	ldr	r3, [r7, #12]
 800ffd8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	689b      	ldr	r3, [r3, #8]
 800ffde:	68fa      	ldr	r2, [r7, #12]
 800ffe0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ffe2:	68b8      	ldr	r0, [r7, #8]
 800ffe4:	f00c feda 	bl	801cd9c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ffe8:	bf00      	nop
 800ffea:	3710      	adds	r7, #16
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	080229ac 	.word	0x080229ac
 800fff4:	08022a5c 	.word	0x08022a5c
 800fff8:	08022a00 	.word	0x08022a00

0800fffc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b082      	sub	sp, #8
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d106      	bne.n	801001a <memp_free_pool+0x1e>
 801000c:	4b0a      	ldr	r3, [pc, #40]	@ (8010038 <memp_free_pool+0x3c>)
 801000e:	f240 1295 	movw	r2, #405	@ 0x195
 8010012:	490a      	ldr	r1, [pc, #40]	@ (801003c <memp_free_pool+0x40>)
 8010014:	480a      	ldr	r0, [pc, #40]	@ (8010040 <memp_free_pool+0x44>)
 8010016:	f00d feb9 	bl	801dd8c <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d007      	beq.n	8010030 <memp_free_pool+0x34>
 8010020:	683b      	ldr	r3, [r7, #0]
 8010022:	2b00      	cmp	r3, #0
 8010024:	d004      	beq.n	8010030 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8010026:	6839      	ldr	r1, [r7, #0]
 8010028:	6878      	ldr	r0, [r7, #4]
 801002a:	f7ff ffbb 	bl	800ffa4 <do_memp_free_pool>
 801002e:	e000      	b.n	8010032 <memp_free_pool+0x36>
    return;
 8010030:	bf00      	nop
}
 8010032:	3708      	adds	r7, #8
 8010034:	46bd      	mov	sp, r7
 8010036:	bd80      	pop	{r7, pc}
 8010038:	080229ac 	.word	0x080229ac
 801003c:	08022a28 	.word	0x08022a28
 8010040:	08022a00 	.word	0x08022a00

08010044 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b082      	sub	sp, #8
 8010048:	af00      	add	r7, sp, #0
 801004a:	4603      	mov	r3, r0
 801004c:	6039      	str	r1, [r7, #0]
 801004e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010050:	79fb      	ldrb	r3, [r7, #7]
 8010052:	2b0d      	cmp	r3, #13
 8010054:	d907      	bls.n	8010066 <memp_free+0x22>
 8010056:	4b0c      	ldr	r3, [pc, #48]	@ (8010088 <memp_free+0x44>)
 8010058:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 801005c:	490b      	ldr	r1, [pc, #44]	@ (801008c <memp_free+0x48>)
 801005e:	480c      	ldr	r0, [pc, #48]	@ (8010090 <memp_free+0x4c>)
 8010060:	f00d fe94 	bl	801dd8c <iprintf>
 8010064:	e00c      	b.n	8010080 <memp_free+0x3c>

  if (mem == NULL) {
 8010066:	683b      	ldr	r3, [r7, #0]
 8010068:	2b00      	cmp	r3, #0
 801006a:	d008      	beq.n	801007e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801006c:	79fb      	ldrb	r3, [r7, #7]
 801006e:	4a09      	ldr	r2, [pc, #36]	@ (8010094 <memp_free+0x50>)
 8010070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010074:	6839      	ldr	r1, [r7, #0]
 8010076:	4618      	mov	r0, r3
 8010078:	f7ff ff94 	bl	800ffa4 <do_memp_free_pool>
 801007c:	e000      	b.n	8010080 <memp_free+0x3c>
    return;
 801007e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010080:	3708      	adds	r7, #8
 8010082:	46bd      	mov	sp, r7
 8010084:	bd80      	pop	{r7, pc}
 8010086:	bf00      	nop
 8010088:	080229ac 	.word	0x080229ac
 801008c:	08022a7c 	.word	0x08022a7c
 8010090:	08022a00 	.word	0x08022a00
 8010094:	080256b0 	.word	0x080256b0

08010098 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010098:	b480      	push	{r7}
 801009a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801009c:	bf00      	nop
 801009e:	46bd      	mov	sp, r7
 80100a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a4:	4770      	bx	lr
	...

080100a8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b086      	sub	sp, #24
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	60f8      	str	r0, [r7, #12]
 80100b0:	60b9      	str	r1, [r7, #8]
 80100b2:	607a      	str	r2, [r7, #4]
 80100b4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d108      	bne.n	80100ce <netif_add+0x26>
 80100bc:	4b5b      	ldr	r3, [pc, #364]	@ (801022c <netif_add+0x184>)
 80100be:	f240 1227 	movw	r2, #295	@ 0x127
 80100c2:	495b      	ldr	r1, [pc, #364]	@ (8010230 <netif_add+0x188>)
 80100c4:	485b      	ldr	r0, [pc, #364]	@ (8010234 <netif_add+0x18c>)
 80100c6:	f00d fe61 	bl	801dd8c <iprintf>
 80100ca:	2300      	movs	r3, #0
 80100cc:	e0a9      	b.n	8010222 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80100ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80100d0:	2b00      	cmp	r3, #0
 80100d2:	d108      	bne.n	80100e6 <netif_add+0x3e>
 80100d4:	4b55      	ldr	r3, [pc, #340]	@ (801022c <netif_add+0x184>)
 80100d6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80100da:	4957      	ldr	r1, [pc, #348]	@ (8010238 <netif_add+0x190>)
 80100dc:	4855      	ldr	r0, [pc, #340]	@ (8010234 <netif_add+0x18c>)
 80100de:	f00d fe55 	bl	801dd8c <iprintf>
 80100e2:	2300      	movs	r3, #0
 80100e4:	e09d      	b.n	8010222 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80100e6:	68bb      	ldr	r3, [r7, #8]
 80100e8:	2b00      	cmp	r3, #0
 80100ea:	d101      	bne.n	80100f0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80100ec:	4b53      	ldr	r3, [pc, #332]	@ (801023c <netif_add+0x194>)
 80100ee:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d101      	bne.n	80100fa <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80100f6:	4b51      	ldr	r3, [pc, #324]	@ (801023c <netif_add+0x194>)
 80100f8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80100fa:	683b      	ldr	r3, [r7, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d101      	bne.n	8010104 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010100:	4b4e      	ldr	r3, [pc, #312]	@ (801023c <netif_add+0x194>)
 8010102:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2200      	movs	r2, #0
 8010108:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	2200      	movs	r2, #0
 801010e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	2200      	movs	r2, #0
 8010114:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	4a49      	ldr	r2, [pc, #292]	@ (8010240 <netif_add+0x198>)
 801011a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	2200      	movs	r2, #0
 8010120:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	2200      	movs	r2, #0
 8010126:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	3324      	adds	r3, #36	@ 0x24
 801012e:	2204      	movs	r2, #4
 8010130:	2100      	movs	r1, #0
 8010132:	4618      	mov	r0, r3
 8010134:	f00d fec9 	bl	801deca <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	2200      	movs	r2, #0
 801013c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801013e:	68fb      	ldr	r3, [r7, #12]
 8010140:	6a3a      	ldr	r2, [r7, #32]
 8010142:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010144:	4b3f      	ldr	r3, [pc, #252]	@ (8010244 <netif_add+0x19c>)
 8010146:	781a      	ldrb	r2, [r3, #0]
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010152:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010154:	683b      	ldr	r3, [r7, #0]
 8010156:	687a      	ldr	r2, [r7, #4]
 8010158:	68b9      	ldr	r1, [r7, #8]
 801015a:	68f8      	ldr	r0, [r7, #12]
 801015c:	f000 f914 	bl	8010388 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010162:	68f8      	ldr	r0, [r7, #12]
 8010164:	4798      	blx	r3
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d001      	beq.n	8010170 <netif_add+0xc8>
    return NULL;
 801016c:	2300      	movs	r3, #0
 801016e:	e058      	b.n	8010222 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8010176:	2bff      	cmp	r3, #255	@ 0xff
 8010178:	d103      	bne.n	8010182 <netif_add+0xda>
        netif->num = 0;
 801017a:	68fb      	ldr	r3, [r7, #12]
 801017c:	2200      	movs	r2, #0
 801017e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 8010182:	2300      	movs	r3, #0
 8010184:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010186:	4b30      	ldr	r3, [pc, #192]	@ (8010248 <netif_add+0x1a0>)
 8010188:	681b      	ldr	r3, [r3, #0]
 801018a:	617b      	str	r3, [r7, #20]
 801018c:	e02b      	b.n	80101e6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801018e:	697a      	ldr	r2, [r7, #20]
 8010190:	68fb      	ldr	r3, [r7, #12]
 8010192:	429a      	cmp	r2, r3
 8010194:	d106      	bne.n	80101a4 <netif_add+0xfc>
 8010196:	4b25      	ldr	r3, [pc, #148]	@ (801022c <netif_add+0x184>)
 8010198:	f240 128b 	movw	r2, #395	@ 0x18b
 801019c:	492b      	ldr	r1, [pc, #172]	@ (801024c <netif_add+0x1a4>)
 801019e:	4825      	ldr	r0, [pc, #148]	@ (8010234 <netif_add+0x18c>)
 80101a0:	f00d fdf4 	bl	801dd8c <iprintf>
        num_netifs++;
 80101a4:	693b      	ldr	r3, [r7, #16]
 80101a6:	3301      	adds	r3, #1
 80101a8:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	2bff      	cmp	r3, #255	@ 0xff
 80101ae:	dd06      	ble.n	80101be <netif_add+0x116>
 80101b0:	4b1e      	ldr	r3, [pc, #120]	@ (801022c <netif_add+0x184>)
 80101b2:	f240 128d 	movw	r2, #397	@ 0x18d
 80101b6:	4926      	ldr	r1, [pc, #152]	@ (8010250 <netif_add+0x1a8>)
 80101b8:	481e      	ldr	r0, [pc, #120]	@ (8010234 <netif_add+0x18c>)
 80101ba:	f00d fde7 	bl	801dd8c <iprintf>
        if (netif2->num == netif->num) {
 80101be:	697b      	ldr	r3, [r7, #20]
 80101c0:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80101ca:	429a      	cmp	r2, r3
 80101cc:	d108      	bne.n	80101e0 <netif_add+0x138>
          netif->num++;
 80101ce:	68fb      	ldr	r3, [r7, #12]
 80101d0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80101d4:	3301      	adds	r3, #1
 80101d6:	b2da      	uxtb	r2, r3
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 80101de:	e005      	b.n	80101ec <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80101e0:	697b      	ldr	r3, [r7, #20]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	617b      	str	r3, [r7, #20]
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d1d0      	bne.n	801018e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 80101ec:	697b      	ldr	r3, [r7, #20]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d1be      	bne.n	8010170 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80101f8:	2bfe      	cmp	r3, #254	@ 0xfe
 80101fa:	d103      	bne.n	8010204 <netif_add+0x15c>
    netif_num = 0;
 80101fc:	4b11      	ldr	r3, [pc, #68]	@ (8010244 <netif_add+0x19c>)
 80101fe:	2200      	movs	r2, #0
 8010200:	701a      	strb	r2, [r3, #0]
 8010202:	e006      	b.n	8010212 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801020a:	3301      	adds	r3, #1
 801020c:	b2da      	uxtb	r2, r3
 801020e:	4b0d      	ldr	r3, [pc, #52]	@ (8010244 <netif_add+0x19c>)
 8010210:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010212:	4b0d      	ldr	r3, [pc, #52]	@ (8010248 <netif_add+0x1a0>)
 8010214:	681a      	ldr	r2, [r3, #0]
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801021a:	4a0b      	ldr	r2, [pc, #44]	@ (8010248 <netif_add+0x1a0>)
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010220:	68fb      	ldr	r3, [r7, #12]
}
 8010222:	4618      	mov	r0, r3
 8010224:	3718      	adds	r7, #24
 8010226:	46bd      	mov	sp, r7
 8010228:	bd80      	pop	{r7, pc}
 801022a:	bf00      	nop
 801022c:	08022a98 	.word	0x08022a98
 8010230:	08022b2c 	.word	0x08022b2c
 8010234:	08022ae8 	.word	0x08022ae8
 8010238:	08022b48 	.word	0x08022b48
 801023c:	08025740 	.word	0x08025740
 8010240:	0801066b 	.word	0x0801066b
 8010244:	2000ec2c 	.word	0x2000ec2c
 8010248:	2000ec24 	.word	0x2000ec24
 801024c:	08022b6c 	.word	0x08022b6c
 8010250:	08022b80 	.word	0x08022b80

08010254 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	b082      	sub	sp, #8
 8010258:	af00      	add	r7, sp, #0
 801025a:	6078      	str	r0, [r7, #4]
 801025c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801025e:	6839      	ldr	r1, [r7, #0]
 8010260:	6878      	ldr	r0, [r7, #4]
 8010262:	f002 ffa7 	bl	80131b4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010266:	6839      	ldr	r1, [r7, #0]
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f008 f8d3 	bl	8018414 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801026e:	bf00      	nop
 8010270:	3708      	adds	r7, #8
 8010272:	46bd      	mov	sp, r7
 8010274:	bd80      	pop	{r7, pc}
	...

08010278 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b086      	sub	sp, #24
 801027c:	af00      	add	r7, sp, #0
 801027e:	60f8      	str	r0, [r7, #12]
 8010280:	60b9      	str	r1, [r7, #8]
 8010282:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010284:	68bb      	ldr	r3, [r7, #8]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d106      	bne.n	8010298 <netif_do_set_ipaddr+0x20>
 801028a:	4b1d      	ldr	r3, [pc, #116]	@ (8010300 <netif_do_set_ipaddr+0x88>)
 801028c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8010290:	491c      	ldr	r1, [pc, #112]	@ (8010304 <netif_do_set_ipaddr+0x8c>)
 8010292:	481d      	ldr	r0, [pc, #116]	@ (8010308 <netif_do_set_ipaddr+0x90>)
 8010294:	f00d fd7a 	bl	801dd8c <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d106      	bne.n	80102ac <netif_do_set_ipaddr+0x34>
 801029e:	4b18      	ldr	r3, [pc, #96]	@ (8010300 <netif_do_set_ipaddr+0x88>)
 80102a0:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 80102a4:	4917      	ldr	r1, [pc, #92]	@ (8010304 <netif_do_set_ipaddr+0x8c>)
 80102a6:	4818      	ldr	r0, [pc, #96]	@ (8010308 <netif_do_set_ipaddr+0x90>)
 80102a8:	f00d fd70 	bl	801dd8c <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80102ac:	68bb      	ldr	r3, [r7, #8]
 80102ae:	681a      	ldr	r2, [r3, #0]
 80102b0:	68fb      	ldr	r3, [r7, #12]
 80102b2:	3304      	adds	r3, #4
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	429a      	cmp	r2, r3
 80102b8:	d01c      	beq.n	80102f4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	3304      	adds	r3, #4
 80102c4:	681a      	ldr	r2, [r3, #0]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80102ca:	f107 0314 	add.w	r3, r7, #20
 80102ce:	4619      	mov	r1, r3
 80102d0:	6878      	ldr	r0, [r7, #4]
 80102d2:	f7ff ffbf 	bl	8010254 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 80102d6:	68bb      	ldr	r3, [r7, #8]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d002      	beq.n	80102e2 <netif_do_set_ipaddr+0x6a>
 80102dc:	68bb      	ldr	r3, [r7, #8]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	e000      	b.n	80102e4 <netif_do_set_ipaddr+0x6c>
 80102e2:	2300      	movs	r3, #0
 80102e4:	68fa      	ldr	r2, [r7, #12]
 80102e6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 80102e8:	2101      	movs	r1, #1
 80102ea:	68f8      	ldr	r0, [r7, #12]
 80102ec:	f000 f8d2 	bl	8010494 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 80102f0:	2301      	movs	r3, #1
 80102f2:	e000      	b.n	80102f6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 80102f4:	2300      	movs	r3, #0
}
 80102f6:	4618      	mov	r0, r3
 80102f8:	3718      	adds	r7, #24
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	08022a98 	.word	0x08022a98
 8010304:	08022bb0 	.word	0x08022bb0
 8010308:	08022ae8 	.word	0x08022ae8

0801030c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801030c:	b480      	push	{r7}
 801030e:	b085      	sub	sp, #20
 8010310:	af00      	add	r7, sp, #0
 8010312:	60f8      	str	r0, [r7, #12]
 8010314:	60b9      	str	r1, [r7, #8]
 8010316:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010318:	68bb      	ldr	r3, [r7, #8]
 801031a:	681a      	ldr	r2, [r3, #0]
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	3308      	adds	r3, #8
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	429a      	cmp	r2, r3
 8010324:	d00a      	beq.n	801033c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010326:	68bb      	ldr	r3, [r7, #8]
 8010328:	2b00      	cmp	r3, #0
 801032a:	d002      	beq.n	8010332 <netif_do_set_netmask+0x26>
 801032c:	68bb      	ldr	r3, [r7, #8]
 801032e:	681b      	ldr	r3, [r3, #0]
 8010330:	e000      	b.n	8010334 <netif_do_set_netmask+0x28>
 8010332:	2300      	movs	r3, #0
 8010334:	68fa      	ldr	r2, [r7, #12]
 8010336:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010338:	2301      	movs	r3, #1
 801033a:	e000      	b.n	801033e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801033c:	2300      	movs	r3, #0
}
 801033e:	4618      	mov	r0, r3
 8010340:	3714      	adds	r7, #20
 8010342:	46bd      	mov	sp, r7
 8010344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010348:	4770      	bx	lr

0801034a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801034a:	b480      	push	{r7}
 801034c:	b085      	sub	sp, #20
 801034e:	af00      	add	r7, sp, #0
 8010350:	60f8      	str	r0, [r7, #12]
 8010352:	60b9      	str	r1, [r7, #8]
 8010354:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010356:	68bb      	ldr	r3, [r7, #8]
 8010358:	681a      	ldr	r2, [r3, #0]
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	330c      	adds	r3, #12
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	429a      	cmp	r2, r3
 8010362:	d00a      	beq.n	801037a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010364:	68bb      	ldr	r3, [r7, #8]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d002      	beq.n	8010370 <netif_do_set_gw+0x26>
 801036a:	68bb      	ldr	r3, [r7, #8]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	e000      	b.n	8010372 <netif_do_set_gw+0x28>
 8010370:	2300      	movs	r3, #0
 8010372:	68fa      	ldr	r2, [r7, #12]
 8010374:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010376:	2301      	movs	r3, #1
 8010378:	e000      	b.n	801037c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801037a:	2300      	movs	r3, #0
}
 801037c:	4618      	mov	r0, r3
 801037e:	3714      	adds	r7, #20
 8010380:	46bd      	mov	sp, r7
 8010382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010386:	4770      	bx	lr

08010388 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010388:	b580      	push	{r7, lr}
 801038a:	b088      	sub	sp, #32
 801038c:	af00      	add	r7, sp, #0
 801038e:	60f8      	str	r0, [r7, #12]
 8010390:	60b9      	str	r1, [r7, #8]
 8010392:	607a      	str	r2, [r7, #4]
 8010394:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010396:	2300      	movs	r3, #0
 8010398:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801039a:	2300      	movs	r3, #0
 801039c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801039e:	68bb      	ldr	r3, [r7, #8]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d101      	bne.n	80103a8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80103a4:	4b1c      	ldr	r3, [pc, #112]	@ (8010418 <netif_set_addr+0x90>)
 80103a6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80103a8:	687b      	ldr	r3, [r7, #4]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d101      	bne.n	80103b2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80103ae:	4b1a      	ldr	r3, [pc, #104]	@ (8010418 <netif_set_addr+0x90>)
 80103b0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80103b2:	683b      	ldr	r3, [r7, #0]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d101      	bne.n	80103bc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80103b8:	4b17      	ldr	r3, [pc, #92]	@ (8010418 <netif_set_addr+0x90>)
 80103ba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80103bc:	68bb      	ldr	r3, [r7, #8]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d003      	beq.n	80103ca <netif_set_addr+0x42>
 80103c2:	68bb      	ldr	r3, [r7, #8]
 80103c4:	681b      	ldr	r3, [r3, #0]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d101      	bne.n	80103ce <netif_set_addr+0x46>
 80103ca:	2301      	movs	r3, #1
 80103cc:	e000      	b.n	80103d0 <netif_set_addr+0x48>
 80103ce:	2300      	movs	r3, #0
 80103d0:	617b      	str	r3, [r7, #20]
  if (remove) {
 80103d2:	697b      	ldr	r3, [r7, #20]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	d006      	beq.n	80103e6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 80103d8:	f107 0310 	add.w	r3, r7, #16
 80103dc:	461a      	mov	r2, r3
 80103de:	68b9      	ldr	r1, [r7, #8]
 80103e0:	68f8      	ldr	r0, [r7, #12]
 80103e2:	f7ff ff49 	bl	8010278 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 80103e6:	69fa      	ldr	r2, [r7, #28]
 80103e8:	6879      	ldr	r1, [r7, #4]
 80103ea:	68f8      	ldr	r0, [r7, #12]
 80103ec:	f7ff ff8e 	bl	801030c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 80103f0:	69ba      	ldr	r2, [r7, #24]
 80103f2:	6839      	ldr	r1, [r7, #0]
 80103f4:	68f8      	ldr	r0, [r7, #12]
 80103f6:	f7ff ffa8 	bl	801034a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 80103fa:	697b      	ldr	r3, [r7, #20]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d106      	bne.n	801040e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010400:	f107 0310 	add.w	r3, r7, #16
 8010404:	461a      	mov	r2, r3
 8010406:	68b9      	ldr	r1, [r7, #8]
 8010408:	68f8      	ldr	r0, [r7, #12]
 801040a:	f7ff ff35 	bl	8010278 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801040e:	bf00      	nop
 8010410:	3720      	adds	r7, #32
 8010412:	46bd      	mov	sp, r7
 8010414:	bd80      	pop	{r7, pc}
 8010416:	bf00      	nop
 8010418:	08025740 	.word	0x08025740

0801041c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801041c:	b480      	push	{r7}
 801041e:	b083      	sub	sp, #12
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010424:	4a04      	ldr	r2, [pc, #16]	@ (8010438 <netif_set_default+0x1c>)
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801042a:	bf00      	nop
 801042c:	370c      	adds	r7, #12
 801042e:	46bd      	mov	sp, r7
 8010430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010434:	4770      	bx	lr
 8010436:	bf00      	nop
 8010438:	2000ec28 	.word	0x2000ec28

0801043c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801043c:	b580      	push	{r7, lr}
 801043e:	b082      	sub	sp, #8
 8010440:	af00      	add	r7, sp, #0
 8010442:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	2b00      	cmp	r3, #0
 8010448:	d107      	bne.n	801045a <netif_set_up+0x1e>
 801044a:	4b0f      	ldr	r3, [pc, #60]	@ (8010488 <netif_set_up+0x4c>)
 801044c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8010450:	490e      	ldr	r1, [pc, #56]	@ (801048c <netif_set_up+0x50>)
 8010452:	480f      	ldr	r0, [pc, #60]	@ (8010490 <netif_set_up+0x54>)
 8010454:	f00d fc9a 	bl	801dd8c <iprintf>
 8010458:	e013      	b.n	8010482 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010460:	f003 0301 	and.w	r3, r3, #1
 8010464:	2b00      	cmp	r3, #0
 8010466:	d10c      	bne.n	8010482 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801046e:	f043 0301 	orr.w	r3, r3, #1
 8010472:	b2da      	uxtb	r2, r3
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801047a:	2103      	movs	r1, #3
 801047c:	6878      	ldr	r0, [r7, #4]
 801047e:	f000 f809 	bl	8010494 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}
 8010488:	08022a98 	.word	0x08022a98
 801048c:	08022c20 	.word	0x08022c20
 8010490:	08022ae8 	.word	0x08022ae8

08010494 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010494:	b580      	push	{r7, lr}
 8010496:	b082      	sub	sp, #8
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
 801049c:	460b      	mov	r3, r1
 801049e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d106      	bne.n	80104b4 <netif_issue_reports+0x20>
 80104a6:	4b18      	ldr	r3, [pc, #96]	@ (8010508 <netif_issue_reports+0x74>)
 80104a8:	f240 326d 	movw	r2, #877	@ 0x36d
 80104ac:	4917      	ldr	r1, [pc, #92]	@ (801050c <netif_issue_reports+0x78>)
 80104ae:	4818      	ldr	r0, [pc, #96]	@ (8010510 <netif_issue_reports+0x7c>)
 80104b0:	f00d fc6c 	bl	801dd8c <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80104ba:	f003 0304 	and.w	r3, r3, #4
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d01e      	beq.n	8010500 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80104c8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d017      	beq.n	8010500 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80104d0:	78fb      	ldrb	r3, [r7, #3]
 80104d2:	f003 0301 	and.w	r3, r3, #1
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d013      	beq.n	8010502 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	3304      	adds	r3, #4
 80104de:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d00e      	beq.n	8010502 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80104ea:	f003 0308 	and.w	r3, r3, #8
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d007      	beq.n	8010502 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	3304      	adds	r3, #4
 80104f6:	4619      	mov	r1, r3
 80104f8:	6878      	ldr	r0, [r7, #4]
 80104fa:	f00a fdd5 	bl	801b0a8 <etharp_request>
 80104fe:	e000      	b.n	8010502 <netif_issue_reports+0x6e>
    return;
 8010500:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010502:	3708      	adds	r7, #8
 8010504:	46bd      	mov	sp, r7
 8010506:	bd80      	pop	{r7, pc}
 8010508:	08022a98 	.word	0x08022a98
 801050c:	08022c3c 	.word	0x08022c3c
 8010510:	08022ae8 	.word	0x08022ae8

08010514 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d107      	bne.n	8010532 <netif_set_down+0x1e>
 8010522:	4b12      	ldr	r3, [pc, #72]	@ (801056c <netif_set_down+0x58>)
 8010524:	f240 329b 	movw	r2, #923	@ 0x39b
 8010528:	4911      	ldr	r1, [pc, #68]	@ (8010570 <netif_set_down+0x5c>)
 801052a:	4812      	ldr	r0, [pc, #72]	@ (8010574 <netif_set_down+0x60>)
 801052c:	f00d fc2e 	bl	801dd8c <iprintf>
 8010530:	e019      	b.n	8010566 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010538:	f003 0301 	and.w	r3, r3, #1
 801053c:	2b00      	cmp	r3, #0
 801053e:	d012      	beq.n	8010566 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010546:	f023 0301 	bic.w	r3, r3, #1
 801054a:	b2da      	uxtb	r2, r3
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010558:	f003 0308 	and.w	r3, r3, #8
 801055c:	2b00      	cmp	r3, #0
 801055e:	d002      	beq.n	8010566 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010560:	6878      	ldr	r0, [r7, #4]
 8010562:	f00a f95b 	bl	801a81c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010566:	3708      	adds	r7, #8
 8010568:	46bd      	mov	sp, r7
 801056a:	bd80      	pop	{r7, pc}
 801056c:	08022a98 	.word	0x08022a98
 8010570:	08022c60 	.word	0x08022c60
 8010574:	08022ae8 	.word	0x08022ae8

08010578 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010578:	b580      	push	{r7, lr}
 801057a:	b082      	sub	sp, #8
 801057c:	af00      	add	r7, sp, #0
 801057e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d107      	bne.n	8010596 <netif_set_link_up+0x1e>
 8010586:	4b15      	ldr	r3, [pc, #84]	@ (80105dc <netif_set_link_up+0x64>)
 8010588:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 801058c:	4914      	ldr	r1, [pc, #80]	@ (80105e0 <netif_set_link_up+0x68>)
 801058e:	4815      	ldr	r0, [pc, #84]	@ (80105e4 <netif_set_link_up+0x6c>)
 8010590:	f00d fbfc 	bl	801dd8c <iprintf>
 8010594:	e01e      	b.n	80105d4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801059c:	f003 0304 	and.w	r3, r3, #4
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d117      	bne.n	80105d4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80105aa:	f043 0304 	orr.w	r3, r3, #4
 80105ae:	b2da      	uxtb	r2, r3
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f008 fb76 	bl	8018ca8 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80105bc:	2103      	movs	r1, #3
 80105be:	6878      	ldr	r0, [r7, #4]
 80105c0:	f7ff ff68 	bl	8010494 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	69db      	ldr	r3, [r3, #28]
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d003      	beq.n	80105d4 <netif_set_link_up+0x5c>
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	69db      	ldr	r3, [r3, #28]
 80105d0:	6878      	ldr	r0, [r7, #4]
 80105d2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80105d4:	3708      	adds	r7, #8
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}
 80105da:	bf00      	nop
 80105dc:	08022a98 	.word	0x08022a98
 80105e0:	08022c80 	.word	0x08022c80
 80105e4:	08022ae8 	.word	0x08022ae8

080105e8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b082      	sub	sp, #8
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d107      	bne.n	8010606 <netif_set_link_down+0x1e>
 80105f6:	4b11      	ldr	r3, [pc, #68]	@ (801063c <netif_set_link_down+0x54>)
 80105f8:	f240 4206 	movw	r2, #1030	@ 0x406
 80105fc:	4910      	ldr	r1, [pc, #64]	@ (8010640 <netif_set_link_down+0x58>)
 80105fe:	4811      	ldr	r0, [pc, #68]	@ (8010644 <netif_set_link_down+0x5c>)
 8010600:	f00d fbc4 	bl	801dd8c <iprintf>
 8010604:	e017      	b.n	8010636 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801060c:	f003 0304 	and.w	r3, r3, #4
 8010610:	2b00      	cmp	r3, #0
 8010612:	d010      	beq.n	8010636 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801061a:	f023 0304 	bic.w	r3, r3, #4
 801061e:	b2da      	uxtb	r2, r3
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	69db      	ldr	r3, [r3, #28]
 801062a:	2b00      	cmp	r3, #0
 801062c:	d003      	beq.n	8010636 <netif_set_link_down+0x4e>
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	69db      	ldr	r3, [r3, #28]
 8010632:	6878      	ldr	r0, [r7, #4]
 8010634:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010636:	3708      	adds	r7, #8
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}
 801063c:	08022a98 	.word	0x08022a98
 8010640:	08022ca4 	.word	0x08022ca4
 8010644:	08022ae8 	.word	0x08022ae8

08010648 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010648:	b480      	push	{r7}
 801064a:	b083      	sub	sp, #12
 801064c:	af00      	add	r7, sp, #0
 801064e:	6078      	str	r0, [r7, #4]
 8010650:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010652:	687b      	ldr	r3, [r7, #4]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d002      	beq.n	801065e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	683a      	ldr	r2, [r7, #0]
 801065c:	61da      	str	r2, [r3, #28]
  }
}
 801065e:	bf00      	nop
 8010660:	370c      	adds	r7, #12
 8010662:	46bd      	mov	sp, r7
 8010664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010668:	4770      	bx	lr

0801066a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801066a:	b480      	push	{r7}
 801066c:	b085      	sub	sp, #20
 801066e:	af00      	add	r7, sp, #0
 8010670:	60f8      	str	r0, [r7, #12]
 8010672:	60b9      	str	r1, [r7, #8]
 8010674:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010676:	f06f 030b 	mvn.w	r3, #11
}
 801067a:	4618      	mov	r0, r3
 801067c:	3714      	adds	r7, #20
 801067e:	46bd      	mov	sp, r7
 8010680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010684:	4770      	bx	lr
	...

08010688 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010688:	b480      	push	{r7}
 801068a:	b085      	sub	sp, #20
 801068c:	af00      	add	r7, sp, #0
 801068e:	4603      	mov	r3, r0
 8010690:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010692:	79fb      	ldrb	r3, [r7, #7]
 8010694:	2b00      	cmp	r3, #0
 8010696:	d013      	beq.n	80106c0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010698:	4b0d      	ldr	r3, [pc, #52]	@ (80106d0 <netif_get_by_index+0x48>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	60fb      	str	r3, [r7, #12]
 801069e:	e00c      	b.n	80106ba <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80106a6:	3301      	adds	r3, #1
 80106a8:	b2db      	uxtb	r3, r3
 80106aa:	79fa      	ldrb	r2, [r7, #7]
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d101      	bne.n	80106b4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80106b0:	68fb      	ldr	r3, [r7, #12]
 80106b2:	e006      	b.n	80106c2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80106b4:	68fb      	ldr	r3, [r7, #12]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	60fb      	str	r3, [r7, #12]
 80106ba:	68fb      	ldr	r3, [r7, #12]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d1ef      	bne.n	80106a0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80106c0:	2300      	movs	r3, #0
}
 80106c2:	4618      	mov	r0, r3
 80106c4:	3714      	adds	r7, #20
 80106c6:	46bd      	mov	sp, r7
 80106c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106cc:	4770      	bx	lr
 80106ce:	bf00      	nop
 80106d0:	2000ec24 	.word	0x2000ec24

080106d4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b082      	sub	sp, #8
 80106d8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 80106da:	f00c fb51 	bl	801cd80 <sys_arch_protect>
 80106de:	6038      	str	r0, [r7, #0]
 80106e0:	4b0d      	ldr	r3, [pc, #52]	@ (8010718 <pbuf_free_ooseq+0x44>)
 80106e2:	2200      	movs	r2, #0
 80106e4:	701a      	strb	r2, [r3, #0]
 80106e6:	6838      	ldr	r0, [r7, #0]
 80106e8:	f00c fb58 	bl	801cd9c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80106ec:	4b0b      	ldr	r3, [pc, #44]	@ (801071c <pbuf_free_ooseq+0x48>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	607b      	str	r3, [r7, #4]
 80106f2:	e00a      	b.n	801070a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d003      	beq.n	8010704 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 80106fc:	6878      	ldr	r0, [r7, #4]
 80106fe:	f002 fd97 	bl	8013230 <tcp_free_ooseq>
      return;
 8010702:	e005      	b.n	8010710 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	68db      	ldr	r3, [r3, #12]
 8010708:	607b      	str	r3, [r7, #4]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	2b00      	cmp	r3, #0
 801070e:	d1f1      	bne.n	80106f4 <pbuf_free_ooseq+0x20>
    }
  }
}
 8010710:	3708      	adds	r7, #8
 8010712:	46bd      	mov	sp, r7
 8010714:	bd80      	pop	{r7, pc}
 8010716:	bf00      	nop
 8010718:	2000ec2d 	.word	0x2000ec2d
 801071c:	2000ec3c 	.word	0x2000ec3c

08010720 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b082      	sub	sp, #8
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010728:	f7ff ffd4 	bl	80106d4 <pbuf_free_ooseq>
}
 801072c:	bf00      	nop
 801072e:	3708      	adds	r7, #8
 8010730:	46bd      	mov	sp, r7
 8010732:	bd80      	pop	{r7, pc}

08010734 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010734:	b580      	push	{r7, lr}
 8010736:	b082      	sub	sp, #8
 8010738:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801073a:	f00c fb21 	bl	801cd80 <sys_arch_protect>
 801073e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010740:	4b0f      	ldr	r3, [pc, #60]	@ (8010780 <pbuf_pool_is_empty+0x4c>)
 8010742:	781b      	ldrb	r3, [r3, #0]
 8010744:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010746:	4b0e      	ldr	r3, [pc, #56]	@ (8010780 <pbuf_pool_is_empty+0x4c>)
 8010748:	2201      	movs	r2, #1
 801074a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f00c fb25 	bl	801cd9c <sys_arch_unprotect>

  if (!queued) {
 8010752:	78fb      	ldrb	r3, [r7, #3]
 8010754:	2b00      	cmp	r3, #0
 8010756:	d10f      	bne.n	8010778 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010758:	2100      	movs	r1, #0
 801075a:	480a      	ldr	r0, [pc, #40]	@ (8010784 <pbuf_pool_is_empty+0x50>)
 801075c:	f7fe fb96 	bl	800ee8c <tcpip_try_callback>
 8010760:	4603      	mov	r3, r0
 8010762:	2b00      	cmp	r3, #0
 8010764:	d008      	beq.n	8010778 <pbuf_pool_is_empty+0x44>
 8010766:	f00c fb0b 	bl	801cd80 <sys_arch_protect>
 801076a:	6078      	str	r0, [r7, #4]
 801076c:	4b04      	ldr	r3, [pc, #16]	@ (8010780 <pbuf_pool_is_empty+0x4c>)
 801076e:	2200      	movs	r2, #0
 8010770:	701a      	strb	r2, [r3, #0]
 8010772:	6878      	ldr	r0, [r7, #4]
 8010774:	f00c fb12 	bl	801cd9c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010778:	bf00      	nop
 801077a:	3708      	adds	r7, #8
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}
 8010780:	2000ec2d 	.word	0x2000ec2d
 8010784:	08010721 	.word	0x08010721

08010788 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010788:	b480      	push	{r7}
 801078a:	b085      	sub	sp, #20
 801078c:	af00      	add	r7, sp, #0
 801078e:	60f8      	str	r0, [r7, #12]
 8010790:	60b9      	str	r1, [r7, #8]
 8010792:	4611      	mov	r1, r2
 8010794:	461a      	mov	r2, r3
 8010796:	460b      	mov	r3, r1
 8010798:	80fb      	strh	r3, [r7, #6]
 801079a:	4613      	mov	r3, r2
 801079c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	2200      	movs	r2, #0
 80107a2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	68ba      	ldr	r2, [r7, #8]
 80107a8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80107aa:	68fb      	ldr	r3, [r7, #12]
 80107ac:	88fa      	ldrh	r2, [r7, #6]
 80107ae:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	88ba      	ldrh	r2, [r7, #4]
 80107b4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80107b6:	8b3b      	ldrh	r3, [r7, #24]
 80107b8:	b2da      	uxtb	r2, r3
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80107be:	68fb      	ldr	r3, [r7, #12]
 80107c0:	7f3a      	ldrb	r2, [r7, #28]
 80107c2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2201      	movs	r2, #1
 80107c8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	2200      	movs	r2, #0
 80107ce:	73da      	strb	r2, [r3, #15]
}
 80107d0:	bf00      	nop
 80107d2:	3714      	adds	r7, #20
 80107d4:	46bd      	mov	sp, r7
 80107d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107da:	4770      	bx	lr

080107dc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b08c      	sub	sp, #48	@ 0x30
 80107e0:	af02      	add	r7, sp, #8
 80107e2:	4603      	mov	r3, r0
 80107e4:	71fb      	strb	r3, [r7, #7]
 80107e6:	460b      	mov	r3, r1
 80107e8:	80bb      	strh	r3, [r7, #4]
 80107ea:	4613      	mov	r3, r2
 80107ec:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80107ee:	79fb      	ldrb	r3, [r7, #7]
 80107f0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80107f2:	887b      	ldrh	r3, [r7, #2]
 80107f4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80107f8:	d07f      	beq.n	80108fa <pbuf_alloc+0x11e>
 80107fa:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80107fe:	f300 80c8 	bgt.w	8010992 <pbuf_alloc+0x1b6>
 8010802:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 8010806:	d010      	beq.n	801082a <pbuf_alloc+0x4e>
 8010808:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 801080c:	f300 80c1 	bgt.w	8010992 <pbuf_alloc+0x1b6>
 8010810:	2b01      	cmp	r3, #1
 8010812:	d002      	beq.n	801081a <pbuf_alloc+0x3e>
 8010814:	2b41      	cmp	r3, #65	@ 0x41
 8010816:	f040 80bc 	bne.w	8010992 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801081a:	887a      	ldrh	r2, [r7, #2]
 801081c:	88bb      	ldrh	r3, [r7, #4]
 801081e:	4619      	mov	r1, r3
 8010820:	2000      	movs	r0, #0
 8010822:	f000 f8d1 	bl	80109c8 <pbuf_alloc_reference>
 8010826:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 8010828:	e0bd      	b.n	80109a6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801082a:	2300      	movs	r3, #0
 801082c:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 801082e:	2300      	movs	r3, #0
 8010830:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010832:	88bb      	ldrh	r3, [r7, #4]
 8010834:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010836:	200d      	movs	r0, #13
 8010838:	f7ff fb8e 	bl	800ff58 <memp_malloc>
 801083c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801083e:	693b      	ldr	r3, [r7, #16]
 8010840:	2b00      	cmp	r3, #0
 8010842:	d109      	bne.n	8010858 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010844:	f7ff ff76 	bl	8010734 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801084a:	2b00      	cmp	r3, #0
 801084c:	d002      	beq.n	8010854 <pbuf_alloc+0x78>
            pbuf_free(p);
 801084e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010850:	f000 fada 	bl	8010e08 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010854:	2300      	movs	r3, #0
 8010856:	e0a7      	b.n	80109a8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010858:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801085a:	3303      	adds	r3, #3
 801085c:	b29b      	uxth	r3, r3
 801085e:	f023 0303 	bic.w	r3, r3, #3
 8010862:	b29b      	uxth	r3, r3
 8010864:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8010868:	b29b      	uxth	r3, r3
 801086a:	8b7a      	ldrh	r2, [r7, #26]
 801086c:	4293      	cmp	r3, r2
 801086e:	bf28      	it	cs
 8010870:	4613      	movcs	r3, r2
 8010872:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010874:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010876:	3310      	adds	r3, #16
 8010878:	693a      	ldr	r2, [r7, #16]
 801087a:	4413      	add	r3, r2
 801087c:	3303      	adds	r3, #3
 801087e:	f023 0303 	bic.w	r3, r3, #3
 8010882:	4618      	mov	r0, r3
 8010884:	89f9      	ldrh	r1, [r7, #14]
 8010886:	8b7a      	ldrh	r2, [r7, #26]
 8010888:	2300      	movs	r3, #0
 801088a:	9301      	str	r3, [sp, #4]
 801088c:	887b      	ldrh	r3, [r7, #2]
 801088e:	9300      	str	r3, [sp, #0]
 8010890:	460b      	mov	r3, r1
 8010892:	4601      	mov	r1, r0
 8010894:	6938      	ldr	r0, [r7, #16]
 8010896:	f7ff ff77 	bl	8010788 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	685b      	ldr	r3, [r3, #4]
 801089e:	f003 0303 	and.w	r3, r3, #3
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d006      	beq.n	80108b4 <pbuf_alloc+0xd8>
 80108a6:	4b42      	ldr	r3, [pc, #264]	@ (80109b0 <pbuf_alloc+0x1d4>)
 80108a8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80108ac:	4941      	ldr	r1, [pc, #260]	@ (80109b4 <pbuf_alloc+0x1d8>)
 80108ae:	4842      	ldr	r0, [pc, #264]	@ (80109b8 <pbuf_alloc+0x1dc>)
 80108b0:	f00d fa6c 	bl	801dd8c <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80108b4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80108b6:	3303      	adds	r3, #3
 80108b8:	f023 0303 	bic.w	r3, r3, #3
 80108bc:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 80108c0:	d106      	bne.n	80108d0 <pbuf_alloc+0xf4>
 80108c2:	4b3b      	ldr	r3, [pc, #236]	@ (80109b0 <pbuf_alloc+0x1d4>)
 80108c4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 80108c8:	493c      	ldr	r1, [pc, #240]	@ (80109bc <pbuf_alloc+0x1e0>)
 80108ca:	483b      	ldr	r0, [pc, #236]	@ (80109b8 <pbuf_alloc+0x1dc>)
 80108cc:	f00d fa5e 	bl	801dd8c <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80108d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d102      	bne.n	80108dc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80108d6:	693b      	ldr	r3, [r7, #16]
 80108d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80108da:	e002      	b.n	80108e2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80108dc:	69fb      	ldr	r3, [r7, #28]
 80108de:	693a      	ldr	r2, [r7, #16]
 80108e0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80108e2:	693b      	ldr	r3, [r7, #16]
 80108e4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80108e6:	8b7a      	ldrh	r2, [r7, #26]
 80108e8:	89fb      	ldrh	r3, [r7, #14]
 80108ea:	1ad3      	subs	r3, r2, r3
 80108ec:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80108ee:	2300      	movs	r3, #0
 80108f0:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80108f2:	8b7b      	ldrh	r3, [r7, #26]
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d19e      	bne.n	8010836 <pbuf_alloc+0x5a>
      break;
 80108f8:	e055      	b.n	80109a6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80108fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80108fc:	3303      	adds	r3, #3
 80108fe:	b29b      	uxth	r3, r3
 8010900:	f023 0303 	bic.w	r3, r3, #3
 8010904:	b29a      	uxth	r2, r3
 8010906:	88bb      	ldrh	r3, [r7, #4]
 8010908:	3303      	adds	r3, #3
 801090a:	b29b      	uxth	r3, r3
 801090c:	f023 0303 	bic.w	r3, r3, #3
 8010910:	b29b      	uxth	r3, r3
 8010912:	4413      	add	r3, r2
 8010914:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010916:	8b3b      	ldrh	r3, [r7, #24]
 8010918:	3310      	adds	r3, #16
 801091a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801091c:	8b3a      	ldrh	r2, [r7, #24]
 801091e:	88bb      	ldrh	r3, [r7, #4]
 8010920:	3303      	adds	r3, #3
 8010922:	f023 0303 	bic.w	r3, r3, #3
 8010926:	429a      	cmp	r2, r3
 8010928:	d306      	bcc.n	8010938 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801092a:	8afa      	ldrh	r2, [r7, #22]
 801092c:	88bb      	ldrh	r3, [r7, #4]
 801092e:	3303      	adds	r3, #3
 8010930:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010934:	429a      	cmp	r2, r3
 8010936:	d201      	bcs.n	801093c <pbuf_alloc+0x160>
        return NULL;
 8010938:	2300      	movs	r3, #0
 801093a:	e035      	b.n	80109a8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801093c:	8afb      	ldrh	r3, [r7, #22]
 801093e:	4618      	mov	r0, r3
 8010940:	f7ff f966 	bl	800fc10 <mem_malloc>
 8010944:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8010946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010948:	2b00      	cmp	r3, #0
 801094a:	d101      	bne.n	8010950 <pbuf_alloc+0x174>
        return NULL;
 801094c:	2300      	movs	r3, #0
 801094e:	e02b      	b.n	80109a8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010950:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010952:	3310      	adds	r3, #16
 8010954:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010956:	4413      	add	r3, r2
 8010958:	3303      	adds	r3, #3
 801095a:	f023 0303 	bic.w	r3, r3, #3
 801095e:	4618      	mov	r0, r3
 8010960:	88b9      	ldrh	r1, [r7, #4]
 8010962:	88ba      	ldrh	r2, [r7, #4]
 8010964:	2300      	movs	r3, #0
 8010966:	9301      	str	r3, [sp, #4]
 8010968:	887b      	ldrh	r3, [r7, #2]
 801096a:	9300      	str	r3, [sp, #0]
 801096c:	460b      	mov	r3, r1
 801096e:	4601      	mov	r1, r0
 8010970:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8010972:	f7ff ff09 	bl	8010788 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010978:	685b      	ldr	r3, [r3, #4]
 801097a:	f003 0303 	and.w	r3, r3, #3
 801097e:	2b00      	cmp	r3, #0
 8010980:	d010      	beq.n	80109a4 <pbuf_alloc+0x1c8>
 8010982:	4b0b      	ldr	r3, [pc, #44]	@ (80109b0 <pbuf_alloc+0x1d4>)
 8010984:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8010988:	490d      	ldr	r1, [pc, #52]	@ (80109c0 <pbuf_alloc+0x1e4>)
 801098a:	480b      	ldr	r0, [pc, #44]	@ (80109b8 <pbuf_alloc+0x1dc>)
 801098c:	f00d f9fe 	bl	801dd8c <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010990:	e008      	b.n	80109a4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010992:	4b07      	ldr	r3, [pc, #28]	@ (80109b0 <pbuf_alloc+0x1d4>)
 8010994:	f240 1227 	movw	r2, #295	@ 0x127
 8010998:	490a      	ldr	r1, [pc, #40]	@ (80109c4 <pbuf_alloc+0x1e8>)
 801099a:	4807      	ldr	r0, [pc, #28]	@ (80109b8 <pbuf_alloc+0x1dc>)
 801099c:	f00d f9f6 	bl	801dd8c <iprintf>
      return NULL;
 80109a0:	2300      	movs	r3, #0
 80109a2:	e001      	b.n	80109a8 <pbuf_alloc+0x1cc>
      break;
 80109a4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80109a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3728      	adds	r7, #40	@ 0x28
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}
 80109b0:	08022cc8 	.word	0x08022cc8
 80109b4:	08022cf8 	.word	0x08022cf8
 80109b8:	08022d28 	.word	0x08022d28
 80109bc:	08022d50 	.word	0x08022d50
 80109c0:	08022d84 	.word	0x08022d84
 80109c4:	08022db0 	.word	0x08022db0

080109c8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b086      	sub	sp, #24
 80109cc:	af02      	add	r7, sp, #8
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	460b      	mov	r3, r1
 80109d2:	807b      	strh	r3, [r7, #2]
 80109d4:	4613      	mov	r3, r2
 80109d6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80109d8:	883b      	ldrh	r3, [r7, #0]
 80109da:	2b41      	cmp	r3, #65	@ 0x41
 80109dc:	d009      	beq.n	80109f2 <pbuf_alloc_reference+0x2a>
 80109de:	883b      	ldrh	r3, [r7, #0]
 80109e0:	2b01      	cmp	r3, #1
 80109e2:	d006      	beq.n	80109f2 <pbuf_alloc_reference+0x2a>
 80109e4:	4b0f      	ldr	r3, [pc, #60]	@ (8010a24 <pbuf_alloc_reference+0x5c>)
 80109e6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80109ea:	490f      	ldr	r1, [pc, #60]	@ (8010a28 <pbuf_alloc_reference+0x60>)
 80109ec:	480f      	ldr	r0, [pc, #60]	@ (8010a2c <pbuf_alloc_reference+0x64>)
 80109ee:	f00d f9cd 	bl	801dd8c <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80109f2:	200c      	movs	r0, #12
 80109f4:	f7ff fab0 	bl	800ff58 <memp_malloc>
 80109f8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d101      	bne.n	8010a04 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010a00:	2300      	movs	r3, #0
 8010a02:	e00b      	b.n	8010a1c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010a04:	8879      	ldrh	r1, [r7, #2]
 8010a06:	887a      	ldrh	r2, [r7, #2]
 8010a08:	2300      	movs	r3, #0
 8010a0a:	9301      	str	r3, [sp, #4]
 8010a0c:	883b      	ldrh	r3, [r7, #0]
 8010a0e:	9300      	str	r3, [sp, #0]
 8010a10:	460b      	mov	r3, r1
 8010a12:	6879      	ldr	r1, [r7, #4]
 8010a14:	68f8      	ldr	r0, [r7, #12]
 8010a16:	f7ff feb7 	bl	8010788 <pbuf_init_alloced_pbuf>
  return p;
 8010a1a:	68fb      	ldr	r3, [r7, #12]
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3710      	adds	r7, #16
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bd80      	pop	{r7, pc}
 8010a24:	08022cc8 	.word	0x08022cc8
 8010a28:	08022dcc 	.word	0x08022dcc
 8010a2c:	08022d28 	.word	0x08022d28

08010a30 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010a30:	b580      	push	{r7, lr}
 8010a32:	b088      	sub	sp, #32
 8010a34:	af02      	add	r7, sp, #8
 8010a36:	607b      	str	r3, [r7, #4]
 8010a38:	4603      	mov	r3, r0
 8010a3a:	73fb      	strb	r3, [r7, #15]
 8010a3c:	460b      	mov	r3, r1
 8010a3e:	81bb      	strh	r3, [r7, #12]
 8010a40:	4613      	mov	r3, r2
 8010a42:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010a44:	7bfb      	ldrb	r3, [r7, #15]
 8010a46:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010a48:	8a7b      	ldrh	r3, [r7, #18]
 8010a4a:	3303      	adds	r3, #3
 8010a4c:	f023 0203 	bic.w	r2, r3, #3
 8010a50:	89bb      	ldrh	r3, [r7, #12]
 8010a52:	441a      	add	r2, r3
 8010a54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8010a56:	429a      	cmp	r2, r3
 8010a58:	d901      	bls.n	8010a5e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	e018      	b.n	8010a90 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010a5e:	6a3b      	ldr	r3, [r7, #32]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d007      	beq.n	8010a74 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010a64:	8a7b      	ldrh	r3, [r7, #18]
 8010a66:	3303      	adds	r3, #3
 8010a68:	f023 0303 	bic.w	r3, r3, #3
 8010a6c:	6a3a      	ldr	r2, [r7, #32]
 8010a6e:	4413      	add	r3, r2
 8010a70:	617b      	str	r3, [r7, #20]
 8010a72:	e001      	b.n	8010a78 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010a74:	2300      	movs	r3, #0
 8010a76:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	89b9      	ldrh	r1, [r7, #12]
 8010a7c:	89ba      	ldrh	r2, [r7, #12]
 8010a7e:	2302      	movs	r3, #2
 8010a80:	9301      	str	r3, [sp, #4]
 8010a82:	897b      	ldrh	r3, [r7, #10]
 8010a84:	9300      	str	r3, [sp, #0]
 8010a86:	460b      	mov	r3, r1
 8010a88:	6979      	ldr	r1, [r7, #20]
 8010a8a:	f7ff fe7d 	bl	8010788 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010a8e:	687b      	ldr	r3, [r7, #4]
}
 8010a90:	4618      	mov	r0, r3
 8010a92:	3718      	adds	r7, #24
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b084      	sub	sp, #16
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	460b      	mov	r3, r1
 8010aa2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d106      	bne.n	8010ab8 <pbuf_realloc+0x20>
 8010aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8010b94 <pbuf_realloc+0xfc>)
 8010aac:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8010ab0:	4939      	ldr	r1, [pc, #228]	@ (8010b98 <pbuf_realloc+0x100>)
 8010ab2:	483a      	ldr	r0, [pc, #232]	@ (8010b9c <pbuf_realloc+0x104>)
 8010ab4:	f00d f96a 	bl	801dd8c <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	891b      	ldrh	r3, [r3, #8]
 8010abc:	887a      	ldrh	r2, [r7, #2]
 8010abe:	429a      	cmp	r2, r3
 8010ac0:	d263      	bcs.n	8010b8a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	891a      	ldrh	r2, [r3, #8]
 8010ac6:	887b      	ldrh	r3, [r7, #2]
 8010ac8:	1ad3      	subs	r3, r2, r3
 8010aca:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010acc:	887b      	ldrh	r3, [r7, #2]
 8010ace:	817b      	strh	r3, [r7, #10]
  q = p;
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010ad4:	e018      	b.n	8010b08 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	895b      	ldrh	r3, [r3, #10]
 8010ada:	897a      	ldrh	r2, [r7, #10]
 8010adc:	1ad3      	subs	r3, r2, r3
 8010ade:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010ae0:	68fb      	ldr	r3, [r7, #12]
 8010ae2:	891a      	ldrh	r2, [r3, #8]
 8010ae4:	893b      	ldrh	r3, [r7, #8]
 8010ae6:	1ad3      	subs	r3, r2, r3
 8010ae8:	b29a      	uxth	r2, r3
 8010aea:	68fb      	ldr	r3, [r7, #12]
 8010aec:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d106      	bne.n	8010b08 <pbuf_realloc+0x70>
 8010afa:	4b26      	ldr	r3, [pc, #152]	@ (8010b94 <pbuf_realloc+0xfc>)
 8010afc:	f240 12af 	movw	r2, #431	@ 0x1af
 8010b00:	4927      	ldr	r1, [pc, #156]	@ (8010ba0 <pbuf_realloc+0x108>)
 8010b02:	4826      	ldr	r0, [pc, #152]	@ (8010b9c <pbuf_realloc+0x104>)
 8010b04:	f00d f942 	bl	801dd8c <iprintf>
  while (rem_len > q->len) {
 8010b08:	68fb      	ldr	r3, [r7, #12]
 8010b0a:	895b      	ldrh	r3, [r3, #10]
 8010b0c:	897a      	ldrh	r2, [r7, #10]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d8e1      	bhi.n	8010ad6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	7b1b      	ldrb	r3, [r3, #12]
 8010b16:	f003 030f 	and.w	r3, r3, #15
 8010b1a:	2b00      	cmp	r3, #0
 8010b1c:	d121      	bne.n	8010b62 <pbuf_realloc+0xca>
 8010b1e:	68fb      	ldr	r3, [r7, #12]
 8010b20:	895b      	ldrh	r3, [r3, #10]
 8010b22:	897a      	ldrh	r2, [r7, #10]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d01c      	beq.n	8010b62 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	7b5b      	ldrb	r3, [r3, #13]
 8010b2c:	f003 0302 	and.w	r3, r3, #2
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d116      	bne.n	8010b62 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	685a      	ldr	r2, [r3, #4]
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	1ad3      	subs	r3, r2, r3
 8010b3c:	b29a      	uxth	r2, r3
 8010b3e:	897b      	ldrh	r3, [r7, #10]
 8010b40:	4413      	add	r3, r2
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	4619      	mov	r1, r3
 8010b46:	68f8      	ldr	r0, [r7, #12]
 8010b48:	f7fe ff58 	bl	800f9fc <mem_trim>
 8010b4c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d106      	bne.n	8010b62 <pbuf_realloc+0xca>
 8010b54:	4b0f      	ldr	r3, [pc, #60]	@ (8010b94 <pbuf_realloc+0xfc>)
 8010b56:	f240 12bd 	movw	r2, #445	@ 0x1bd
 8010b5a:	4912      	ldr	r1, [pc, #72]	@ (8010ba4 <pbuf_realloc+0x10c>)
 8010b5c:	480f      	ldr	r0, [pc, #60]	@ (8010b9c <pbuf_realloc+0x104>)
 8010b5e:	f00d f915 	bl	801dd8c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	897a      	ldrh	r2, [r7, #10]
 8010b66:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	895a      	ldrh	r2, [r3, #10]
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	2b00      	cmp	r3, #0
 8010b76:	d004      	beq.n	8010b82 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f000 f943 	bl	8010e08 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	2200      	movs	r2, #0
 8010b86:	601a      	str	r2, [r3, #0]
 8010b88:	e000      	b.n	8010b8c <pbuf_realloc+0xf4>
    return;
 8010b8a:	bf00      	nop

}
 8010b8c:	3710      	adds	r7, #16
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
 8010b92:	bf00      	nop
 8010b94:	08022cc8 	.word	0x08022cc8
 8010b98:	08022de0 	.word	0x08022de0
 8010b9c:	08022d28 	.word	0x08022d28
 8010ba0:	08022df8 	.word	0x08022df8
 8010ba4:	08022e10 	.word	0x08022e10

08010ba8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010ba8:	b580      	push	{r7, lr}
 8010baa:	b086      	sub	sp, #24
 8010bac:	af00      	add	r7, sp, #0
 8010bae:	60f8      	str	r0, [r7, #12]
 8010bb0:	60b9      	str	r1, [r7, #8]
 8010bb2:	4613      	mov	r3, r2
 8010bb4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010bb6:	68fb      	ldr	r3, [r7, #12]
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d106      	bne.n	8010bca <pbuf_add_header_impl+0x22>
 8010bbc:	4b2b      	ldr	r3, [pc, #172]	@ (8010c6c <pbuf_add_header_impl+0xc4>)
 8010bbe:	f240 12df 	movw	r2, #479	@ 0x1df
 8010bc2:	492b      	ldr	r1, [pc, #172]	@ (8010c70 <pbuf_add_header_impl+0xc8>)
 8010bc4:	482b      	ldr	r0, [pc, #172]	@ (8010c74 <pbuf_add_header_impl+0xcc>)
 8010bc6:	f00d f8e1 	bl	801dd8c <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010bca:	68fb      	ldr	r3, [r7, #12]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d003      	beq.n	8010bd8 <pbuf_add_header_impl+0x30>
 8010bd0:	68bb      	ldr	r3, [r7, #8]
 8010bd2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010bd6:	d301      	bcc.n	8010bdc <pbuf_add_header_impl+0x34>
    return 1;
 8010bd8:	2301      	movs	r3, #1
 8010bda:	e043      	b.n	8010c64 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010bdc:	68bb      	ldr	r3, [r7, #8]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d101      	bne.n	8010be6 <pbuf_add_header_impl+0x3e>
    return 0;
 8010be2:	2300      	movs	r3, #0
 8010be4:	e03e      	b.n	8010c64 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010be6:	68bb      	ldr	r3, [r7, #8]
 8010be8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	891a      	ldrh	r2, [r3, #8]
 8010bee:	8a7b      	ldrh	r3, [r7, #18]
 8010bf0:	4413      	add	r3, r2
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	8a7a      	ldrh	r2, [r7, #18]
 8010bf6:	429a      	cmp	r2, r3
 8010bf8:	d901      	bls.n	8010bfe <pbuf_add_header_impl+0x56>
    return 1;
 8010bfa:	2301      	movs	r3, #1
 8010bfc:	e032      	b.n	8010c64 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	7b1b      	ldrb	r3, [r3, #12]
 8010c02:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010c04:	8a3b      	ldrh	r3, [r7, #16]
 8010c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d00c      	beq.n	8010c28 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	685a      	ldr	r2, [r3, #4]
 8010c12:	68bb      	ldr	r3, [r7, #8]
 8010c14:	425b      	negs	r3, r3
 8010c16:	4413      	add	r3, r2
 8010c18:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	3310      	adds	r3, #16
 8010c1e:	697a      	ldr	r2, [r7, #20]
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d20d      	bcs.n	8010c40 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010c24:	2301      	movs	r3, #1
 8010c26:	e01d      	b.n	8010c64 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010c28:	79fb      	ldrb	r3, [r7, #7]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d006      	beq.n	8010c3c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	685a      	ldr	r2, [r3, #4]
 8010c32:	68bb      	ldr	r3, [r7, #8]
 8010c34:	425b      	negs	r3, r3
 8010c36:	4413      	add	r3, r2
 8010c38:	617b      	str	r3, [r7, #20]
 8010c3a:	e001      	b.n	8010c40 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	e011      	b.n	8010c64 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	697a      	ldr	r2, [r7, #20]
 8010c44:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010c46:	68fb      	ldr	r3, [r7, #12]
 8010c48:	895a      	ldrh	r2, [r3, #10]
 8010c4a:	8a7b      	ldrh	r3, [r7, #18]
 8010c4c:	4413      	add	r3, r2
 8010c4e:	b29a      	uxth	r2, r3
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010c54:	68fb      	ldr	r3, [r7, #12]
 8010c56:	891a      	ldrh	r2, [r3, #8]
 8010c58:	8a7b      	ldrh	r3, [r7, #18]
 8010c5a:	4413      	add	r3, r2
 8010c5c:	b29a      	uxth	r2, r3
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	811a      	strh	r2, [r3, #8]


  return 0;
 8010c62:	2300      	movs	r3, #0
}
 8010c64:	4618      	mov	r0, r3
 8010c66:	3718      	adds	r7, #24
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd80      	pop	{r7, pc}
 8010c6c:	08022cc8 	.word	0x08022cc8
 8010c70:	08022e2c 	.word	0x08022e2c
 8010c74:	08022d28 	.word	0x08022d28

08010c78 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	6078      	str	r0, [r7, #4]
 8010c80:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8010c82:	2200      	movs	r2, #0
 8010c84:	6839      	ldr	r1, [r7, #0]
 8010c86:	6878      	ldr	r0, [r7, #4]
 8010c88:	f7ff ff8e 	bl	8010ba8 <pbuf_add_header_impl>
 8010c8c:	4603      	mov	r3, r0
}
 8010c8e:	4618      	mov	r0, r3
 8010c90:	3708      	adds	r7, #8
 8010c92:	46bd      	mov	sp, r7
 8010c94:	bd80      	pop	{r7, pc}
	...

08010c98 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b084      	sub	sp, #16
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d106      	bne.n	8010cb6 <pbuf_remove_header+0x1e>
 8010ca8:	4b20      	ldr	r3, [pc, #128]	@ (8010d2c <pbuf_remove_header+0x94>)
 8010caa:	f240 224b 	movw	r2, #587	@ 0x24b
 8010cae:	4920      	ldr	r1, [pc, #128]	@ (8010d30 <pbuf_remove_header+0x98>)
 8010cb0:	4820      	ldr	r0, [pc, #128]	@ (8010d34 <pbuf_remove_header+0x9c>)
 8010cb2:	f00d f86b 	bl	801dd8c <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d003      	beq.n	8010cc4 <pbuf_remove_header+0x2c>
 8010cbc:	683b      	ldr	r3, [r7, #0]
 8010cbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010cc2:	d301      	bcc.n	8010cc8 <pbuf_remove_header+0x30>
    return 1;
 8010cc4:	2301      	movs	r3, #1
 8010cc6:	e02c      	b.n	8010d22 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010cc8:	683b      	ldr	r3, [r7, #0]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d101      	bne.n	8010cd2 <pbuf_remove_header+0x3a>
    return 0;
 8010cce:	2300      	movs	r3, #0
 8010cd0:	e027      	b.n	8010d22 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010cd2:	683b      	ldr	r3, [r7, #0]
 8010cd4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	895b      	ldrh	r3, [r3, #10]
 8010cda:	89fa      	ldrh	r2, [r7, #14]
 8010cdc:	429a      	cmp	r2, r3
 8010cde:	d908      	bls.n	8010cf2 <pbuf_remove_header+0x5a>
 8010ce0:	4b12      	ldr	r3, [pc, #72]	@ (8010d2c <pbuf_remove_header+0x94>)
 8010ce2:	f240 2255 	movw	r2, #597	@ 0x255
 8010ce6:	4914      	ldr	r1, [pc, #80]	@ (8010d38 <pbuf_remove_header+0xa0>)
 8010ce8:	4812      	ldr	r0, [pc, #72]	@ (8010d34 <pbuf_remove_header+0x9c>)
 8010cea:	f00d f84f 	bl	801dd8c <iprintf>
 8010cee:	2301      	movs	r3, #1
 8010cf0:	e017      	b.n	8010d22 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	685b      	ldr	r3, [r3, #4]
 8010cf6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	685a      	ldr	r2, [r3, #4]
 8010cfc:	683b      	ldr	r3, [r7, #0]
 8010cfe:	441a      	add	r2, r3
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	895a      	ldrh	r2, [r3, #10]
 8010d08:	89fb      	ldrh	r3, [r7, #14]
 8010d0a:	1ad3      	subs	r3, r2, r3
 8010d0c:	b29a      	uxth	r2, r3
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	891a      	ldrh	r2, [r3, #8]
 8010d16:	89fb      	ldrh	r3, [r7, #14]
 8010d18:	1ad3      	subs	r3, r2, r3
 8010d1a:	b29a      	uxth	r2, r3
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010d20:	2300      	movs	r3, #0
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3710      	adds	r7, #16
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}
 8010d2a:	bf00      	nop
 8010d2c:	08022cc8 	.word	0x08022cc8
 8010d30:	08022e2c 	.word	0x08022e2c
 8010d34:	08022d28 	.word	0x08022d28
 8010d38:	08022e38 	.word	0x08022e38

08010d3c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b082      	sub	sp, #8
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
 8010d44:	460b      	mov	r3, r1
 8010d46:	807b      	strh	r3, [r7, #2]
 8010d48:	4613      	mov	r3, r2
 8010d4a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8010d4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	da08      	bge.n	8010d66 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010d54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d58:	425b      	negs	r3, r3
 8010d5a:	4619      	mov	r1, r3
 8010d5c:	6878      	ldr	r0, [r7, #4]
 8010d5e:	f7ff ff9b 	bl	8010c98 <pbuf_remove_header>
 8010d62:	4603      	mov	r3, r0
 8010d64:	e007      	b.n	8010d76 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8010d66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d6a:	787a      	ldrb	r2, [r7, #1]
 8010d6c:	4619      	mov	r1, r3
 8010d6e:	6878      	ldr	r0, [r7, #4]
 8010d70:	f7ff ff1a 	bl	8010ba8 <pbuf_add_header_impl>
 8010d74:	4603      	mov	r3, r0
  }
}
 8010d76:	4618      	mov	r0, r3
 8010d78:	3708      	adds	r7, #8
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd80      	pop	{r7, pc}

08010d7e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8010d7e:	b580      	push	{r7, lr}
 8010d80:	b082      	sub	sp, #8
 8010d82:	af00      	add	r7, sp, #0
 8010d84:	6078      	str	r0, [r7, #4]
 8010d86:	460b      	mov	r3, r1
 8010d88:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8010d8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010d8e:	2201      	movs	r2, #1
 8010d90:	4619      	mov	r1, r3
 8010d92:	6878      	ldr	r0, [r7, #4]
 8010d94:	f7ff ffd2 	bl	8010d3c <pbuf_header_impl>
 8010d98:	4603      	mov	r3, r0
}
 8010d9a:	4618      	mov	r0, r3
 8010d9c:	3708      	adds	r7, #8
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}

08010da2 <pbuf_free_header>:
 *                   takes an u16_t not s16_t!
 * @return the new head pbuf
 */
struct pbuf *
pbuf_free_header(struct pbuf *q, u16_t size)
{
 8010da2:	b580      	push	{r7, lr}
 8010da4:	b086      	sub	sp, #24
 8010da6:	af00      	add	r7, sp, #0
 8010da8:	6078      	str	r0, [r7, #4]
 8010daa:	460b      	mov	r3, r1
 8010dac:	807b      	strh	r3, [r7, #2]
  struct pbuf *p = q;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	617b      	str	r3, [r7, #20]
  u16_t free_left = size;
 8010db2:	887b      	ldrh	r3, [r7, #2]
 8010db4:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8010db6:	e01c      	b.n	8010df2 <pbuf_free_header+0x50>
    if (free_left >= p->len) {
 8010db8:	697b      	ldr	r3, [r7, #20]
 8010dba:	895b      	ldrh	r3, [r3, #10]
 8010dbc:	8a7a      	ldrh	r2, [r7, #18]
 8010dbe:	429a      	cmp	r2, r3
 8010dc0:	d310      	bcc.n	8010de4 <pbuf_free_header+0x42>
      struct pbuf *f = p;
 8010dc2:	697b      	ldr	r3, [r7, #20]
 8010dc4:	60fb      	str	r3, [r7, #12]
      free_left = (u16_t)(free_left - p->len);
 8010dc6:	697b      	ldr	r3, [r7, #20]
 8010dc8:	895b      	ldrh	r3, [r3, #10]
 8010dca:	8a7a      	ldrh	r2, [r7, #18]
 8010dcc:	1ad3      	subs	r3, r2, r3
 8010dce:	827b      	strh	r3, [r7, #18]
      p = p->next;
 8010dd0:	697b      	ldr	r3, [r7, #20]
 8010dd2:	681b      	ldr	r3, [r3, #0]
 8010dd4:	617b      	str	r3, [r7, #20]
      f->next = 0;
 8010dd6:	68fb      	ldr	r3, [r7, #12]
 8010dd8:	2200      	movs	r2, #0
 8010dda:	601a      	str	r2, [r3, #0]
      pbuf_free(f);
 8010ddc:	68f8      	ldr	r0, [r7, #12]
 8010dde:	f000 f813 	bl	8010e08 <pbuf_free>
 8010de2:	e006      	b.n	8010df2 <pbuf_free_header+0x50>
    } else {
      pbuf_remove_header(p, free_left);
 8010de4:	8a7b      	ldrh	r3, [r7, #18]
 8010de6:	4619      	mov	r1, r3
 8010de8:	6978      	ldr	r0, [r7, #20]
 8010dea:	f7ff ff55 	bl	8010c98 <pbuf_remove_header>
      free_left = 0;
 8010dee:	2300      	movs	r3, #0
 8010df0:	827b      	strh	r3, [r7, #18]
  while (free_left && p) {
 8010df2:	8a7b      	ldrh	r3, [r7, #18]
 8010df4:	2b00      	cmp	r3, #0
 8010df6:	d002      	beq.n	8010dfe <pbuf_free_header+0x5c>
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d1dc      	bne.n	8010db8 <pbuf_free_header+0x16>
    }
  }
  return p;
 8010dfe:	697b      	ldr	r3, [r7, #20]
}
 8010e00:	4618      	mov	r0, r3
 8010e02:	3718      	adds	r7, #24
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}

08010e08 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8010e08:	b580      	push	{r7, lr}
 8010e0a:	b088      	sub	sp, #32
 8010e0c:	af00      	add	r7, sp, #0
 8010e0e:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d10b      	bne.n	8010e2e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d106      	bne.n	8010e2a <pbuf_free+0x22>
 8010e1c:	4b3b      	ldr	r3, [pc, #236]	@ (8010f0c <pbuf_free+0x104>)
 8010e1e:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 8010e22:	493b      	ldr	r1, [pc, #236]	@ (8010f10 <pbuf_free+0x108>)
 8010e24:	483b      	ldr	r0, [pc, #236]	@ (8010f14 <pbuf_free+0x10c>)
 8010e26:	f00c ffb1 	bl	801dd8c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010e2a:	2300      	movs	r3, #0
 8010e2c:	e069      	b.n	8010f02 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8010e2e:	2300      	movs	r3, #0
 8010e30:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8010e32:	e062      	b.n	8010efa <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010e34:	f00b ffa4 	bl	801cd80 <sys_arch_protect>
 8010e38:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010e3a:	687b      	ldr	r3, [r7, #4]
 8010e3c:	7b9b      	ldrb	r3, [r3, #14]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d106      	bne.n	8010e50 <pbuf_free+0x48>
 8010e42:	4b32      	ldr	r3, [pc, #200]	@ (8010f0c <pbuf_free+0x104>)
 8010e44:	f240 22f1 	movw	r2, #753	@ 0x2f1
 8010e48:	4933      	ldr	r1, [pc, #204]	@ (8010f18 <pbuf_free+0x110>)
 8010e4a:	4832      	ldr	r0, [pc, #200]	@ (8010f14 <pbuf_free+0x10c>)
 8010e4c:	f00c ff9e 	bl	801dd8c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	7b9b      	ldrb	r3, [r3, #14]
 8010e54:	3b01      	subs	r3, #1
 8010e56:	b2da      	uxtb	r2, r3
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	739a      	strb	r2, [r3, #14]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	7b9b      	ldrb	r3, [r3, #14]
 8010e60:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8010e62:	69b8      	ldr	r0, [r7, #24]
 8010e64:	f00b ff9a 	bl	801cd9c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010e68:	7dfb      	ldrb	r3, [r7, #23]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d143      	bne.n	8010ef6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	681b      	ldr	r3, [r3, #0]
 8010e72:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	7b1b      	ldrb	r3, [r3, #12]
 8010e78:	f003 030f 	and.w	r3, r3, #15
 8010e7c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	7b5b      	ldrb	r3, [r3, #13]
 8010e82:	f003 0302 	and.w	r3, r3, #2
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d011      	beq.n	8010eae <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8010e8e:	68bb      	ldr	r3, [r7, #8]
 8010e90:	691b      	ldr	r3, [r3, #16]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d106      	bne.n	8010ea4 <pbuf_free+0x9c>
 8010e96:	4b1d      	ldr	r3, [pc, #116]	@ (8010f0c <pbuf_free+0x104>)
 8010e98:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8010e9c:	491f      	ldr	r1, [pc, #124]	@ (8010f1c <pbuf_free+0x114>)
 8010e9e:	481d      	ldr	r0, [pc, #116]	@ (8010f14 <pbuf_free+0x10c>)
 8010ea0:	f00c ff74 	bl	801dd8c <iprintf>
        pc->custom_free_function(p);
 8010ea4:	68bb      	ldr	r3, [r7, #8]
 8010ea6:	691b      	ldr	r3, [r3, #16]
 8010ea8:	6878      	ldr	r0, [r7, #4]
 8010eaa:	4798      	blx	r3
 8010eac:	e01d      	b.n	8010eea <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8010eae:	7bfb      	ldrb	r3, [r7, #15]
 8010eb0:	2b02      	cmp	r3, #2
 8010eb2:	d104      	bne.n	8010ebe <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010eb4:	6879      	ldr	r1, [r7, #4]
 8010eb6:	200d      	movs	r0, #13
 8010eb8:	f7ff f8c4 	bl	8010044 <memp_free>
 8010ebc:	e015      	b.n	8010eea <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8010ebe:	7bfb      	ldrb	r3, [r7, #15]
 8010ec0:	2b01      	cmp	r3, #1
 8010ec2:	d104      	bne.n	8010ece <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8010ec4:	6879      	ldr	r1, [r7, #4]
 8010ec6:	200c      	movs	r0, #12
 8010ec8:	f7ff f8bc 	bl	8010044 <memp_free>
 8010ecc:	e00d      	b.n	8010eea <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8010ece:	7bfb      	ldrb	r3, [r7, #15]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d103      	bne.n	8010edc <pbuf_free+0xd4>
          mem_free(p);
 8010ed4:	6878      	ldr	r0, [r7, #4]
 8010ed6:	f7fe fd01 	bl	800f8dc <mem_free>
 8010eda:	e006      	b.n	8010eea <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8010edc:	4b0b      	ldr	r3, [pc, #44]	@ (8010f0c <pbuf_free+0x104>)
 8010ede:	f240 320f 	movw	r2, #783	@ 0x30f
 8010ee2:	490f      	ldr	r1, [pc, #60]	@ (8010f20 <pbuf_free+0x118>)
 8010ee4:	480b      	ldr	r0, [pc, #44]	@ (8010f14 <pbuf_free+0x10c>)
 8010ee6:	f00c ff51 	bl	801dd8c <iprintf>
        }
      }
      count++;
 8010eea:	7ffb      	ldrb	r3, [r7, #31]
 8010eec:	3301      	adds	r3, #1
 8010eee:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8010ef0:	693b      	ldr	r3, [r7, #16]
 8010ef2:	607b      	str	r3, [r7, #4]
 8010ef4:	e001      	b.n	8010efa <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d199      	bne.n	8010e34 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8010f00:	7ffb      	ldrb	r3, [r7, #31]
}
 8010f02:	4618      	mov	r0, r3
 8010f04:	3720      	adds	r7, #32
 8010f06:	46bd      	mov	sp, r7
 8010f08:	bd80      	pop	{r7, pc}
 8010f0a:	bf00      	nop
 8010f0c:	08022cc8 	.word	0x08022cc8
 8010f10:	08022e2c 	.word	0x08022e2c
 8010f14:	08022d28 	.word	0x08022d28
 8010f18:	08022e58 	.word	0x08022e58
 8010f1c:	08022e70 	.word	0x08022e70
 8010f20:	08022e94 	.word	0x08022e94

08010f24 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010f24:	b480      	push	{r7}
 8010f26:	b085      	sub	sp, #20
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010f2c:	2300      	movs	r3, #0
 8010f2e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8010f30:	e005      	b.n	8010f3e <pbuf_clen+0x1a>
    ++len;
 8010f32:	89fb      	ldrh	r3, [r7, #14]
 8010f34:	3301      	adds	r3, #1
 8010f36:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d1f6      	bne.n	8010f32 <pbuf_clen+0xe>
  }
  return len;
 8010f44:	89fb      	ldrh	r3, [r7, #14]
}
 8010f46:	4618      	mov	r0, r3
 8010f48:	3714      	adds	r7, #20
 8010f4a:	46bd      	mov	sp, r7
 8010f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f50:	4770      	bx	lr
	...

08010f54 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010f54:	b580      	push	{r7, lr}
 8010f56:	b084      	sub	sp, #16
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d016      	beq.n	8010f90 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8010f62:	f00b ff0d 	bl	801cd80 <sys_arch_protect>
 8010f66:	60f8      	str	r0, [r7, #12]
 8010f68:	687b      	ldr	r3, [r7, #4]
 8010f6a:	7b9b      	ldrb	r3, [r3, #14]
 8010f6c:	3301      	adds	r3, #1
 8010f6e:	b2da      	uxtb	r2, r3
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	739a      	strb	r2, [r3, #14]
 8010f74:	68f8      	ldr	r0, [r7, #12]
 8010f76:	f00b ff11 	bl	801cd9c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	7b9b      	ldrb	r3, [r3, #14]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d106      	bne.n	8010f90 <pbuf_ref+0x3c>
 8010f82:	4b05      	ldr	r3, [pc, #20]	@ (8010f98 <pbuf_ref+0x44>)
 8010f84:	f240 3242 	movw	r2, #834	@ 0x342
 8010f88:	4904      	ldr	r1, [pc, #16]	@ (8010f9c <pbuf_ref+0x48>)
 8010f8a:	4805      	ldr	r0, [pc, #20]	@ (8010fa0 <pbuf_ref+0x4c>)
 8010f8c:	f00c fefe 	bl	801dd8c <iprintf>
  }
}
 8010f90:	bf00      	nop
 8010f92:	3710      	adds	r7, #16
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}
 8010f98:	08022cc8 	.word	0x08022cc8
 8010f9c:	08022ea8 	.word	0x08022ea8
 8010fa0:	08022d28 	.word	0x08022d28

08010fa4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010fa4:	b580      	push	{r7, lr}
 8010fa6:	b084      	sub	sp, #16
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	2b00      	cmp	r3, #0
 8010fb2:	d002      	beq.n	8010fba <pbuf_cat+0x16>
 8010fb4:	683b      	ldr	r3, [r7, #0]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d107      	bne.n	8010fca <pbuf_cat+0x26>
 8010fba:	4b20      	ldr	r3, [pc, #128]	@ (801103c <pbuf_cat+0x98>)
 8010fbc:	f240 3259 	movw	r2, #857	@ 0x359
 8010fc0:	491f      	ldr	r1, [pc, #124]	@ (8011040 <pbuf_cat+0x9c>)
 8010fc2:	4820      	ldr	r0, [pc, #128]	@ (8011044 <pbuf_cat+0xa0>)
 8010fc4:	f00c fee2 	bl	801dd8c <iprintf>
 8010fc8:	e034      	b.n	8011034 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	60fb      	str	r3, [r7, #12]
 8010fce:	e00a      	b.n	8010fe6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8010fd0:	68fb      	ldr	r3, [r7, #12]
 8010fd2:	891a      	ldrh	r2, [r3, #8]
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	891b      	ldrh	r3, [r3, #8]
 8010fd8:	4413      	add	r3, r2
 8010fda:	b29a      	uxth	r2, r3
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	60fb      	str	r3, [r7, #12]
 8010fe6:	68fb      	ldr	r3, [r7, #12]
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d1f0      	bne.n	8010fd0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	891a      	ldrh	r2, [r3, #8]
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	895b      	ldrh	r3, [r3, #10]
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	d006      	beq.n	8011008 <pbuf_cat+0x64>
 8010ffa:	4b10      	ldr	r3, [pc, #64]	@ (801103c <pbuf_cat+0x98>)
 8010ffc:	f240 3262 	movw	r2, #866	@ 0x362
 8011000:	4911      	ldr	r1, [pc, #68]	@ (8011048 <pbuf_cat+0xa4>)
 8011002:	4810      	ldr	r0, [pc, #64]	@ (8011044 <pbuf_cat+0xa0>)
 8011004:	f00c fec2 	bl	801dd8c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011008:	68fb      	ldr	r3, [r7, #12]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d006      	beq.n	801101e <pbuf_cat+0x7a>
 8011010:	4b0a      	ldr	r3, [pc, #40]	@ (801103c <pbuf_cat+0x98>)
 8011012:	f240 3263 	movw	r2, #867	@ 0x363
 8011016:	490d      	ldr	r1, [pc, #52]	@ (801104c <pbuf_cat+0xa8>)
 8011018:	480a      	ldr	r0, [pc, #40]	@ (8011044 <pbuf_cat+0xa0>)
 801101a:	f00c feb7 	bl	801dd8c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	891a      	ldrh	r2, [r3, #8]
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	891b      	ldrh	r3, [r3, #8]
 8011026:	4413      	add	r3, r2
 8011028:	b29a      	uxth	r2, r3
 801102a:	68fb      	ldr	r3, [r7, #12]
 801102c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801102e:	68fb      	ldr	r3, [r7, #12]
 8011030:	683a      	ldr	r2, [r7, #0]
 8011032:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011034:	3710      	adds	r7, #16
 8011036:	46bd      	mov	sp, r7
 8011038:	bd80      	pop	{r7, pc}
 801103a:	bf00      	nop
 801103c:	08022cc8 	.word	0x08022cc8
 8011040:	08022ebc 	.word	0x08022ebc
 8011044:	08022d28 	.word	0x08022d28
 8011048:	08022ef4 	.word	0x08022ef4
 801104c:	08022f24 	.word	0x08022f24

08011050 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8011050:	b580      	push	{r7, lr}
 8011052:	b082      	sub	sp, #8
 8011054:	af00      	add	r7, sp, #0
 8011056:	6078      	str	r0, [r7, #4]
 8011058:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801105a:	6839      	ldr	r1, [r7, #0]
 801105c:	6878      	ldr	r0, [r7, #4]
 801105e:	f7ff ffa1 	bl	8010fa4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8011062:	6838      	ldr	r0, [r7, #0]
 8011064:	f7ff ff76 	bl	8010f54 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8011068:	bf00      	nop
 801106a:	3708      	adds	r7, #8
 801106c:	46bd      	mov	sp, r7
 801106e:	bd80      	pop	{r7, pc}

08011070 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b086      	sub	sp, #24
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801107a:	2300      	movs	r3, #0
 801107c:	617b      	str	r3, [r7, #20]
 801107e:	2300      	movs	r3, #0
 8011080:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011082:	687b      	ldr	r3, [r7, #4]
 8011084:	2b00      	cmp	r3, #0
 8011086:	d008      	beq.n	801109a <pbuf_copy+0x2a>
 8011088:	683b      	ldr	r3, [r7, #0]
 801108a:	2b00      	cmp	r3, #0
 801108c:	d005      	beq.n	801109a <pbuf_copy+0x2a>
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	891a      	ldrh	r2, [r3, #8]
 8011092:	683b      	ldr	r3, [r7, #0]
 8011094:	891b      	ldrh	r3, [r3, #8]
 8011096:	429a      	cmp	r2, r3
 8011098:	d209      	bcs.n	80110ae <pbuf_copy+0x3e>
 801109a:	4b57      	ldr	r3, [pc, #348]	@ (80111f8 <pbuf_copy+0x188>)
 801109c:	f240 32c9 	movw	r2, #969	@ 0x3c9
 80110a0:	4956      	ldr	r1, [pc, #344]	@ (80111fc <pbuf_copy+0x18c>)
 80110a2:	4857      	ldr	r0, [pc, #348]	@ (8011200 <pbuf_copy+0x190>)
 80110a4:	f00c fe72 	bl	801dd8c <iprintf>
 80110a8:	f06f 030f 	mvn.w	r3, #15
 80110ac:	e09f      	b.n	80111ee <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	895b      	ldrh	r3, [r3, #10]
 80110b2:	461a      	mov	r2, r3
 80110b4:	697b      	ldr	r3, [r7, #20]
 80110b6:	1ad2      	subs	r2, r2, r3
 80110b8:	683b      	ldr	r3, [r7, #0]
 80110ba:	895b      	ldrh	r3, [r3, #10]
 80110bc:	4619      	mov	r1, r3
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	1acb      	subs	r3, r1, r3
 80110c2:	429a      	cmp	r2, r3
 80110c4:	d306      	bcc.n	80110d4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80110c6:	683b      	ldr	r3, [r7, #0]
 80110c8:	895b      	ldrh	r3, [r3, #10]
 80110ca:	461a      	mov	r2, r3
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	1ad3      	subs	r3, r2, r3
 80110d0:	60fb      	str	r3, [r7, #12]
 80110d2:	e005      	b.n	80110e0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	895b      	ldrh	r3, [r3, #10]
 80110d8:	461a      	mov	r2, r3
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	1ad3      	subs	r3, r2, r3
 80110de:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80110e0:	687b      	ldr	r3, [r7, #4]
 80110e2:	685a      	ldr	r2, [r3, #4]
 80110e4:	697b      	ldr	r3, [r7, #20]
 80110e6:	18d0      	adds	r0, r2, r3
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	685a      	ldr	r2, [r3, #4]
 80110ec:	693b      	ldr	r3, [r7, #16]
 80110ee:	4413      	add	r3, r2
 80110f0:	68fa      	ldr	r2, [r7, #12]
 80110f2:	4619      	mov	r1, r3
 80110f4:	f00c ffd1 	bl	801e09a <memcpy>
    offset_to += len;
 80110f8:	697a      	ldr	r2, [r7, #20]
 80110fa:	68fb      	ldr	r3, [r7, #12]
 80110fc:	4413      	add	r3, r2
 80110fe:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011100:	693a      	ldr	r2, [r7, #16]
 8011102:	68fb      	ldr	r3, [r7, #12]
 8011104:	4413      	add	r3, r2
 8011106:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	895b      	ldrh	r3, [r3, #10]
 801110c:	461a      	mov	r2, r3
 801110e:	697b      	ldr	r3, [r7, #20]
 8011110:	4293      	cmp	r3, r2
 8011112:	d906      	bls.n	8011122 <pbuf_copy+0xb2>
 8011114:	4b38      	ldr	r3, [pc, #224]	@ (80111f8 <pbuf_copy+0x188>)
 8011116:	f240 32d9 	movw	r2, #985	@ 0x3d9
 801111a:	493a      	ldr	r1, [pc, #232]	@ (8011204 <pbuf_copy+0x194>)
 801111c:	4838      	ldr	r0, [pc, #224]	@ (8011200 <pbuf_copy+0x190>)
 801111e:	f00c fe35 	bl	801dd8c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011122:	683b      	ldr	r3, [r7, #0]
 8011124:	895b      	ldrh	r3, [r3, #10]
 8011126:	461a      	mov	r2, r3
 8011128:	693b      	ldr	r3, [r7, #16]
 801112a:	4293      	cmp	r3, r2
 801112c:	d906      	bls.n	801113c <pbuf_copy+0xcc>
 801112e:	4b32      	ldr	r3, [pc, #200]	@ (80111f8 <pbuf_copy+0x188>)
 8011130:	f240 32da 	movw	r2, #986	@ 0x3da
 8011134:	4934      	ldr	r1, [pc, #208]	@ (8011208 <pbuf_copy+0x198>)
 8011136:	4832      	ldr	r0, [pc, #200]	@ (8011200 <pbuf_copy+0x190>)
 8011138:	f00c fe28 	bl	801dd8c <iprintf>
    if (offset_from >= p_from->len) {
 801113c:	683b      	ldr	r3, [r7, #0]
 801113e:	895b      	ldrh	r3, [r3, #10]
 8011140:	461a      	mov	r2, r3
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	4293      	cmp	r3, r2
 8011146:	d304      	bcc.n	8011152 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011148:	2300      	movs	r3, #0
 801114a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	681b      	ldr	r3, [r3, #0]
 8011150:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	895b      	ldrh	r3, [r3, #10]
 8011156:	461a      	mov	r2, r3
 8011158:	697b      	ldr	r3, [r7, #20]
 801115a:	4293      	cmp	r3, r2
 801115c:	d114      	bne.n	8011188 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801115e:	2300      	movs	r3, #0
 8011160:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	2b00      	cmp	r3, #0
 801116c:	d10c      	bne.n	8011188 <pbuf_copy+0x118>
 801116e:	683b      	ldr	r3, [r7, #0]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d009      	beq.n	8011188 <pbuf_copy+0x118>
 8011174:	4b20      	ldr	r3, [pc, #128]	@ (80111f8 <pbuf_copy+0x188>)
 8011176:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 801117a:	4924      	ldr	r1, [pc, #144]	@ (801120c <pbuf_copy+0x19c>)
 801117c:	4820      	ldr	r0, [pc, #128]	@ (8011200 <pbuf_copy+0x190>)
 801117e:	f00c fe05 	bl	801dd8c <iprintf>
 8011182:	f06f 030f 	mvn.w	r3, #15
 8011186:	e032      	b.n	80111ee <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011188:	683b      	ldr	r3, [r7, #0]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d013      	beq.n	80111b6 <pbuf_copy+0x146>
 801118e:	683b      	ldr	r3, [r7, #0]
 8011190:	895a      	ldrh	r2, [r3, #10]
 8011192:	683b      	ldr	r3, [r7, #0]
 8011194:	891b      	ldrh	r3, [r3, #8]
 8011196:	429a      	cmp	r2, r3
 8011198:	d10d      	bne.n	80111b6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801119a:	683b      	ldr	r3, [r7, #0]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d009      	beq.n	80111b6 <pbuf_copy+0x146>
 80111a2:	4b15      	ldr	r3, [pc, #84]	@ (80111f8 <pbuf_copy+0x188>)
 80111a4:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 80111a8:	4919      	ldr	r1, [pc, #100]	@ (8011210 <pbuf_copy+0x1a0>)
 80111aa:	4815      	ldr	r0, [pc, #84]	@ (8011200 <pbuf_copy+0x190>)
 80111ac:	f00c fdee 	bl	801dd8c <iprintf>
 80111b0:	f06f 0305 	mvn.w	r3, #5
 80111b4:	e01b      	b.n	80111ee <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d013      	beq.n	80111e4 <pbuf_copy+0x174>
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	895a      	ldrh	r2, [r3, #10]
 80111c0:	687b      	ldr	r3, [r7, #4]
 80111c2:	891b      	ldrh	r3, [r3, #8]
 80111c4:	429a      	cmp	r2, r3
 80111c6:	d10d      	bne.n	80111e4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	681b      	ldr	r3, [r3, #0]
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d009      	beq.n	80111e4 <pbuf_copy+0x174>
 80111d0:	4b09      	ldr	r3, [pc, #36]	@ (80111f8 <pbuf_copy+0x188>)
 80111d2:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 80111d6:	490e      	ldr	r1, [pc, #56]	@ (8011210 <pbuf_copy+0x1a0>)
 80111d8:	4809      	ldr	r0, [pc, #36]	@ (8011200 <pbuf_copy+0x190>)
 80111da:	f00c fdd7 	bl	801dd8c <iprintf>
 80111de:	f06f 0305 	mvn.w	r3, #5
 80111e2:	e004      	b.n	80111ee <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80111e4:	683b      	ldr	r3, [r7, #0]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	f47f af61 	bne.w	80110ae <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80111ec:	2300      	movs	r3, #0
}
 80111ee:	4618      	mov	r0, r3
 80111f0:	3718      	adds	r7, #24
 80111f2:	46bd      	mov	sp, r7
 80111f4:	bd80      	pop	{r7, pc}
 80111f6:	bf00      	nop
 80111f8:	08022cc8 	.word	0x08022cc8
 80111fc:	08022f70 	.word	0x08022f70
 8011200:	08022d28 	.word	0x08022d28
 8011204:	08022fa0 	.word	0x08022fa0
 8011208:	08022fb8 	.word	0x08022fb8
 801120c:	08022fd4 	.word	0x08022fd4
 8011210:	08022fe4 	.word	0x08022fe4

08011214 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b088      	sub	sp, #32
 8011218:	af00      	add	r7, sp, #0
 801121a:	60f8      	str	r0, [r7, #12]
 801121c:	60b9      	str	r1, [r7, #8]
 801121e:	4611      	mov	r1, r2
 8011220:	461a      	mov	r2, r3
 8011222:	460b      	mov	r3, r1
 8011224:	80fb      	strh	r3, [r7, #6]
 8011226:	4613      	mov	r3, r2
 8011228:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801122a:	2300      	movs	r3, #0
 801122c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801122e:	2300      	movs	r3, #0
 8011230:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011232:	68fb      	ldr	r3, [r7, #12]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d108      	bne.n	801124a <pbuf_copy_partial+0x36>
 8011238:	4b2b      	ldr	r3, [pc, #172]	@ (80112e8 <pbuf_copy_partial+0xd4>)
 801123a:	f240 420a 	movw	r2, #1034	@ 0x40a
 801123e:	492b      	ldr	r1, [pc, #172]	@ (80112ec <pbuf_copy_partial+0xd8>)
 8011240:	482b      	ldr	r0, [pc, #172]	@ (80112f0 <pbuf_copy_partial+0xdc>)
 8011242:	f00c fda3 	bl	801dd8c <iprintf>
 8011246:	2300      	movs	r3, #0
 8011248:	e04a      	b.n	80112e0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801124a:	68bb      	ldr	r3, [r7, #8]
 801124c:	2b00      	cmp	r3, #0
 801124e:	d108      	bne.n	8011262 <pbuf_copy_partial+0x4e>
 8011250:	4b25      	ldr	r3, [pc, #148]	@ (80112e8 <pbuf_copy_partial+0xd4>)
 8011252:	f240 420b 	movw	r2, #1035	@ 0x40b
 8011256:	4927      	ldr	r1, [pc, #156]	@ (80112f4 <pbuf_copy_partial+0xe0>)
 8011258:	4825      	ldr	r0, [pc, #148]	@ (80112f0 <pbuf_copy_partial+0xdc>)
 801125a:	f00c fd97 	bl	801dd8c <iprintf>
 801125e:	2300      	movs	r3, #0
 8011260:	e03e      	b.n	80112e0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	61fb      	str	r3, [r7, #28]
 8011266:	e034      	b.n	80112d2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011268:	88bb      	ldrh	r3, [r7, #4]
 801126a:	2b00      	cmp	r3, #0
 801126c:	d00a      	beq.n	8011284 <pbuf_copy_partial+0x70>
 801126e:	69fb      	ldr	r3, [r7, #28]
 8011270:	895b      	ldrh	r3, [r3, #10]
 8011272:	88ba      	ldrh	r2, [r7, #4]
 8011274:	429a      	cmp	r2, r3
 8011276:	d305      	bcc.n	8011284 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011278:	69fb      	ldr	r3, [r7, #28]
 801127a:	895b      	ldrh	r3, [r3, #10]
 801127c:	88ba      	ldrh	r2, [r7, #4]
 801127e:	1ad3      	subs	r3, r2, r3
 8011280:	80bb      	strh	r3, [r7, #4]
 8011282:	e023      	b.n	80112cc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011284:	69fb      	ldr	r3, [r7, #28]
 8011286:	895a      	ldrh	r2, [r3, #10]
 8011288:	88bb      	ldrh	r3, [r7, #4]
 801128a:	1ad3      	subs	r3, r2, r3
 801128c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801128e:	8b3a      	ldrh	r2, [r7, #24]
 8011290:	88fb      	ldrh	r3, [r7, #6]
 8011292:	429a      	cmp	r2, r3
 8011294:	d901      	bls.n	801129a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8011296:	88fb      	ldrh	r3, [r7, #6]
 8011298:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801129a:	8b7b      	ldrh	r3, [r7, #26]
 801129c:	68ba      	ldr	r2, [r7, #8]
 801129e:	18d0      	adds	r0, r2, r3
 80112a0:	69fb      	ldr	r3, [r7, #28]
 80112a2:	685a      	ldr	r2, [r3, #4]
 80112a4:	88bb      	ldrh	r3, [r7, #4]
 80112a6:	4413      	add	r3, r2
 80112a8:	8b3a      	ldrh	r2, [r7, #24]
 80112aa:	4619      	mov	r1, r3
 80112ac:	f00c fef5 	bl	801e09a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80112b0:	8afa      	ldrh	r2, [r7, #22]
 80112b2:	8b3b      	ldrh	r3, [r7, #24]
 80112b4:	4413      	add	r3, r2
 80112b6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80112b8:	8b7a      	ldrh	r2, [r7, #26]
 80112ba:	8b3b      	ldrh	r3, [r7, #24]
 80112bc:	4413      	add	r3, r2
 80112be:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80112c0:	88fa      	ldrh	r2, [r7, #6]
 80112c2:	8b3b      	ldrh	r3, [r7, #24]
 80112c4:	1ad3      	subs	r3, r2, r3
 80112c6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80112c8:	2300      	movs	r3, #0
 80112ca:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80112cc:	69fb      	ldr	r3, [r7, #28]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	61fb      	str	r3, [r7, #28]
 80112d2:	88fb      	ldrh	r3, [r7, #6]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d002      	beq.n	80112de <pbuf_copy_partial+0xca>
 80112d8:	69fb      	ldr	r3, [r7, #28]
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d1c4      	bne.n	8011268 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80112de:	8afb      	ldrh	r3, [r7, #22]
}
 80112e0:	4618      	mov	r0, r3
 80112e2:	3720      	adds	r7, #32
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}
 80112e8:	08022cc8 	.word	0x08022cc8
 80112ec:	08023010 	.word	0x08023010
 80112f0:	08022d28 	.word	0x08022d28
 80112f4:	08023030 	.word	0x08023030

080112f8 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 80112f8:	b480      	push	{r7}
 80112fa:	b087      	sub	sp, #28
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	60f8      	str	r0, [r7, #12]
 8011300:	460b      	mov	r3, r1
 8011302:	607a      	str	r2, [r7, #4]
 8011304:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8011306:	897b      	ldrh	r3, [r7, #10]
 8011308:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 801130e:	e007      	b.n	8011320 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8011310:	693b      	ldr	r3, [r7, #16]
 8011312:	895b      	ldrh	r3, [r3, #10]
 8011314:	8afa      	ldrh	r2, [r7, #22]
 8011316:	1ad3      	subs	r3, r2, r3
 8011318:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 801131a:	693b      	ldr	r3, [r7, #16]
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8011320:	693b      	ldr	r3, [r7, #16]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d004      	beq.n	8011330 <pbuf_skip_const+0x38>
 8011326:	693b      	ldr	r3, [r7, #16]
 8011328:	895b      	ldrh	r3, [r3, #10]
 801132a:	8afa      	ldrh	r2, [r7, #22]
 801132c:	429a      	cmp	r2, r3
 801132e:	d2ef      	bcs.n	8011310 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d002      	beq.n	801133c <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8011336:	687b      	ldr	r3, [r7, #4]
 8011338:	8afa      	ldrh	r2, [r7, #22]
 801133a:	801a      	strh	r2, [r3, #0]
  }
  return q;
 801133c:	693b      	ldr	r3, [r7, #16]
}
 801133e:	4618      	mov	r0, r3
 8011340:	371c      	adds	r7, #28
 8011342:	46bd      	mov	sp, r7
 8011344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011348:	4770      	bx	lr

0801134a <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 801134a:	b580      	push	{r7, lr}
 801134c:	b086      	sub	sp, #24
 801134e:	af00      	add	r7, sp, #0
 8011350:	60f8      	str	r0, [r7, #12]
 8011352:	460b      	mov	r3, r1
 8011354:	607a      	str	r2, [r7, #4]
 8011356:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8011358:	897b      	ldrh	r3, [r7, #10]
 801135a:	687a      	ldr	r2, [r7, #4]
 801135c:	4619      	mov	r1, r3
 801135e:	68f8      	ldr	r0, [r7, #12]
 8011360:	f7ff ffca 	bl	80112f8 <pbuf_skip_const>
 8011364:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8011366:	697b      	ldr	r3, [r7, #20]
}
 8011368:	4618      	mov	r0, r3
 801136a:	3718      	adds	r7, #24
 801136c:	46bd      	mov	sp, r7
 801136e:	bd80      	pop	{r7, pc}

08011370 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b088      	sub	sp, #32
 8011374:	af00      	add	r7, sp, #0
 8011376:	60f8      	str	r0, [r7, #12]
 8011378:	60b9      	str	r1, [r7, #8]
 801137a:	4613      	mov	r3, r2
 801137c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801137e:	88fb      	ldrh	r3, [r7, #6]
 8011380:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8011382:	2300      	movs	r3, #0
 8011384:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d109      	bne.n	80113a0 <pbuf_take+0x30>
 801138c:	4b3a      	ldr	r3, [pc, #232]	@ (8011478 <pbuf_take+0x108>)
 801138e:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8011392:	493a      	ldr	r1, [pc, #232]	@ (801147c <pbuf_take+0x10c>)
 8011394:	483a      	ldr	r0, [pc, #232]	@ (8011480 <pbuf_take+0x110>)
 8011396:	f00c fcf9 	bl	801dd8c <iprintf>
 801139a:	f06f 030f 	mvn.w	r3, #15
 801139e:	e067      	b.n	8011470 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d109      	bne.n	80113ba <pbuf_take+0x4a>
 80113a6:	4b34      	ldr	r3, [pc, #208]	@ (8011478 <pbuf_take+0x108>)
 80113a8:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 80113ac:	4935      	ldr	r1, [pc, #212]	@ (8011484 <pbuf_take+0x114>)
 80113ae:	4834      	ldr	r0, [pc, #208]	@ (8011480 <pbuf_take+0x110>)
 80113b0:	f00c fcec 	bl	801dd8c <iprintf>
 80113b4:	f06f 030f 	mvn.w	r3, #15
 80113b8:	e05a      	b.n	8011470 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	891b      	ldrh	r3, [r3, #8]
 80113be:	88fa      	ldrh	r2, [r7, #6]
 80113c0:	429a      	cmp	r2, r3
 80113c2:	d909      	bls.n	80113d8 <pbuf_take+0x68>
 80113c4:	4b2c      	ldr	r3, [pc, #176]	@ (8011478 <pbuf_take+0x108>)
 80113c6:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 80113ca:	492f      	ldr	r1, [pc, #188]	@ (8011488 <pbuf_take+0x118>)
 80113cc:	482c      	ldr	r0, [pc, #176]	@ (8011480 <pbuf_take+0x110>)
 80113ce:	f00c fcdd 	bl	801dd8c <iprintf>
 80113d2:	f04f 33ff 	mov.w	r3, #4294967295
 80113d6:	e04b      	b.n	8011470 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d007      	beq.n	80113ee <pbuf_take+0x7e>
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d004      	beq.n	80113ee <pbuf_take+0x7e>
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	891b      	ldrh	r3, [r3, #8]
 80113e8:	88fa      	ldrh	r2, [r7, #6]
 80113ea:	429a      	cmp	r2, r3
 80113ec:	d902      	bls.n	80113f4 <pbuf_take+0x84>
    return ERR_ARG;
 80113ee:	f06f 030f 	mvn.w	r3, #15
 80113f2:	e03d      	b.n	8011470 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 80113f4:	68fb      	ldr	r3, [r7, #12]
 80113f6:	61fb      	str	r3, [r7, #28]
 80113f8:	e028      	b.n	801144c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 80113fa:	69fb      	ldr	r3, [r7, #28]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d106      	bne.n	801140e <pbuf_take+0x9e>
 8011400:	4b1d      	ldr	r3, [pc, #116]	@ (8011478 <pbuf_take+0x108>)
 8011402:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8011406:	4921      	ldr	r1, [pc, #132]	@ (801148c <pbuf_take+0x11c>)
 8011408:	481d      	ldr	r0, [pc, #116]	@ (8011480 <pbuf_take+0x110>)
 801140a:	f00c fcbf 	bl	801dd8c <iprintf>
    buf_copy_len = total_copy_len;
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8011412:	69fb      	ldr	r3, [r7, #28]
 8011414:	895b      	ldrh	r3, [r3, #10]
 8011416:	461a      	mov	r2, r3
 8011418:	69bb      	ldr	r3, [r7, #24]
 801141a:	4293      	cmp	r3, r2
 801141c:	d902      	bls.n	8011424 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801141e:	69fb      	ldr	r3, [r7, #28]
 8011420:	895b      	ldrh	r3, [r3, #10]
 8011422:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8011424:	69fb      	ldr	r3, [r7, #28]
 8011426:	6858      	ldr	r0, [r3, #4]
 8011428:	68ba      	ldr	r2, [r7, #8]
 801142a:	693b      	ldr	r3, [r7, #16]
 801142c:	4413      	add	r3, r2
 801142e:	69ba      	ldr	r2, [r7, #24]
 8011430:	4619      	mov	r1, r3
 8011432:	f00c fe32 	bl	801e09a <memcpy>
    total_copy_len -= buf_copy_len;
 8011436:	697a      	ldr	r2, [r7, #20]
 8011438:	69bb      	ldr	r3, [r7, #24]
 801143a:	1ad3      	subs	r3, r2, r3
 801143c:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801143e:	693a      	ldr	r2, [r7, #16]
 8011440:	69bb      	ldr	r3, [r7, #24]
 8011442:	4413      	add	r3, r2
 8011444:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011446:	69fb      	ldr	r3, [r7, #28]
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	61fb      	str	r3, [r7, #28]
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d1d3      	bne.n	80113fa <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8011452:	697b      	ldr	r3, [r7, #20]
 8011454:	2b00      	cmp	r3, #0
 8011456:	d103      	bne.n	8011460 <pbuf_take+0xf0>
 8011458:	88fb      	ldrh	r3, [r7, #6]
 801145a:	693a      	ldr	r2, [r7, #16]
 801145c:	429a      	cmp	r2, r3
 801145e:	d006      	beq.n	801146e <pbuf_take+0xfe>
 8011460:	4b05      	ldr	r3, [pc, #20]	@ (8011478 <pbuf_take+0x108>)
 8011462:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8011466:	490a      	ldr	r1, [pc, #40]	@ (8011490 <pbuf_take+0x120>)
 8011468:	4805      	ldr	r0, [pc, #20]	@ (8011480 <pbuf_take+0x110>)
 801146a:	f00c fc8f 	bl	801dd8c <iprintf>
  return ERR_OK;
 801146e:	2300      	movs	r3, #0
}
 8011470:	4618      	mov	r0, r3
 8011472:	3720      	adds	r7, #32
 8011474:	46bd      	mov	sp, r7
 8011476:	bd80      	pop	{r7, pc}
 8011478:	08022cc8 	.word	0x08022cc8
 801147c:	080230a0 	.word	0x080230a0
 8011480:	08022d28 	.word	0x08022d28
 8011484:	080230b8 	.word	0x080230b8
 8011488:	080230d4 	.word	0x080230d4
 801148c:	080230f4 	.word	0x080230f4
 8011490:	0802310c 	.word	0x0802310c

08011494 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b088      	sub	sp, #32
 8011498:	af00      	add	r7, sp, #0
 801149a:	60f8      	str	r0, [r7, #12]
 801149c:	60b9      	str	r1, [r7, #8]
 801149e:	4611      	mov	r1, r2
 80114a0:	461a      	mov	r2, r3
 80114a2:	460b      	mov	r3, r1
 80114a4:	80fb      	strh	r3, [r7, #6]
 80114a6:	4613      	mov	r3, r2
 80114a8:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 80114aa:	f107 0210 	add.w	r2, r7, #16
 80114ae:	88bb      	ldrh	r3, [r7, #4]
 80114b0:	4619      	mov	r1, r3
 80114b2:	68f8      	ldr	r0, [r7, #12]
 80114b4:	f7ff ff49 	bl	801134a <pbuf_skip>
 80114b8:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 80114ba:	69fb      	ldr	r3, [r7, #28]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d047      	beq.n	8011550 <pbuf_take_at+0xbc>
 80114c0:	69fb      	ldr	r3, [r7, #28]
 80114c2:	891b      	ldrh	r3, [r3, #8]
 80114c4:	461a      	mov	r2, r3
 80114c6:	8a3b      	ldrh	r3, [r7, #16]
 80114c8:	4619      	mov	r1, r3
 80114ca:	88fb      	ldrh	r3, [r7, #6]
 80114cc:	440b      	add	r3, r1
 80114ce:	429a      	cmp	r2, r3
 80114d0:	db3e      	blt.n	8011550 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 80114d2:	88fb      	ldrh	r3, [r7, #6]
 80114d4:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 80114d6:	68bb      	ldr	r3, [r7, #8]
 80114d8:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 80114da:	69fb      	ldr	r3, [r7, #28]
 80114dc:	895a      	ldrh	r2, [r3, #10]
 80114de:	8a3b      	ldrh	r3, [r7, #16]
 80114e0:	429a      	cmp	r2, r3
 80114e2:	d806      	bhi.n	80114f2 <pbuf_take_at+0x5e>
 80114e4:	4b1d      	ldr	r3, [pc, #116]	@ (801155c <pbuf_take_at+0xc8>)
 80114e6:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80114ea:	491d      	ldr	r1, [pc, #116]	@ (8011560 <pbuf_take_at+0xcc>)
 80114ec:	481d      	ldr	r0, [pc, #116]	@ (8011564 <pbuf_take_at+0xd0>)
 80114ee:	f00c fc4d 	bl	801dd8c <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 80114f2:	69fb      	ldr	r3, [r7, #28]
 80114f4:	895b      	ldrh	r3, [r3, #10]
 80114f6:	461a      	mov	r2, r3
 80114f8:	8a3b      	ldrh	r3, [r7, #16]
 80114fa:	1ad2      	subs	r2, r2, r3
 80114fc:	88fb      	ldrh	r3, [r7, #6]
 80114fe:	429a      	cmp	r2, r3
 8011500:	da05      	bge.n	801150e <pbuf_take_at+0x7a>
 8011502:	69fb      	ldr	r3, [r7, #28]
 8011504:	895a      	ldrh	r2, [r3, #10]
 8011506:	8a3b      	ldrh	r3, [r7, #16]
 8011508:	1ad3      	subs	r3, r2, r3
 801150a:	b29b      	uxth	r3, r3
 801150c:	e000      	b.n	8011510 <pbuf_take_at+0x7c>
 801150e:	88fb      	ldrh	r3, [r7, #6]
 8011510:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8011512:	69fb      	ldr	r3, [r7, #28]
 8011514:	685b      	ldr	r3, [r3, #4]
 8011516:	8a3a      	ldrh	r2, [r7, #16]
 8011518:	4413      	add	r3, r2
 801151a:	8a7a      	ldrh	r2, [r7, #18]
 801151c:	68b9      	ldr	r1, [r7, #8]
 801151e:	4618      	mov	r0, r3
 8011520:	f00c fdbb 	bl	801e09a <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8011524:	8b7a      	ldrh	r2, [r7, #26]
 8011526:	8a7b      	ldrh	r3, [r7, #18]
 8011528:	1ad3      	subs	r3, r2, r3
 801152a:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 801152c:	8a7b      	ldrh	r3, [r7, #18]
 801152e:	697a      	ldr	r2, [r7, #20]
 8011530:	4413      	add	r3, r2
 8011532:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8011534:	8b7b      	ldrh	r3, [r7, #26]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d008      	beq.n	801154c <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 801153a:	69fb      	ldr	r3, [r7, #28]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	8b7a      	ldrh	r2, [r7, #26]
 8011540:	6979      	ldr	r1, [r7, #20]
 8011542:	4618      	mov	r0, r3
 8011544:	f7ff ff14 	bl	8011370 <pbuf_take>
 8011548:	4603      	mov	r3, r0
 801154a:	e003      	b.n	8011554 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 801154c:	2300      	movs	r3, #0
 801154e:	e001      	b.n	8011554 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8011550:	f04f 33ff 	mov.w	r3, #4294967295
}
 8011554:	4618      	mov	r0, r3
 8011556:	3720      	adds	r7, #32
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}
 801155c:	08022cc8 	.word	0x08022cc8
 8011560:	08023124 	.word	0x08023124
 8011564:	08022d28 	.word	0x08022d28

08011568 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b084      	sub	sp, #16
 801156c:	af00      	add	r7, sp, #0
 801156e:	4603      	mov	r3, r0
 8011570:	603a      	str	r2, [r7, #0]
 8011572:	71fb      	strb	r3, [r7, #7]
 8011574:	460b      	mov	r3, r1
 8011576:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011578:	683b      	ldr	r3, [r7, #0]
 801157a:	8919      	ldrh	r1, [r3, #8]
 801157c:	88ba      	ldrh	r2, [r7, #4]
 801157e:	79fb      	ldrb	r3, [r7, #7]
 8011580:	4618      	mov	r0, r3
 8011582:	f7ff f92b 	bl	80107dc <pbuf_alloc>
 8011586:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d101      	bne.n	8011592 <pbuf_clone+0x2a>
    return NULL;
 801158e:	2300      	movs	r3, #0
 8011590:	e011      	b.n	80115b6 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011592:	6839      	ldr	r1, [r7, #0]
 8011594:	68f8      	ldr	r0, [r7, #12]
 8011596:	f7ff fd6b 	bl	8011070 <pbuf_copy>
 801159a:	4603      	mov	r3, r0
 801159c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801159e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d006      	beq.n	80115b4 <pbuf_clone+0x4c>
 80115a6:	4b06      	ldr	r3, [pc, #24]	@ (80115c0 <pbuf_clone+0x58>)
 80115a8:	f240 5224 	movw	r2, #1316	@ 0x524
 80115ac:	4905      	ldr	r1, [pc, #20]	@ (80115c4 <pbuf_clone+0x5c>)
 80115ae:	4806      	ldr	r0, [pc, #24]	@ (80115c8 <pbuf_clone+0x60>)
 80115b0:	f00c fbec 	bl	801dd8c <iprintf>
  return q;
 80115b4:	68fb      	ldr	r3, [r7, #12]
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3710      	adds	r7, #16
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd80      	pop	{r7, pc}
 80115be:	bf00      	nop
 80115c0:	08022cc8 	.word	0x08022cc8
 80115c4:	0802313c 	.word	0x0802313c
 80115c8:	08022d28 	.word	0x08022d28

080115cc <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b084      	sub	sp, #16
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
 80115d4:	460b      	mov	r3, r1
 80115d6:	807b      	strh	r3, [r7, #2]
 80115d8:	4613      	mov	r3, r2
 80115da:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 80115dc:	f107 020a 	add.w	r2, r7, #10
 80115e0:	887b      	ldrh	r3, [r7, #2]
 80115e2:	4619      	mov	r1, r3
 80115e4:	6878      	ldr	r0, [r7, #4]
 80115e6:	f7ff feb0 	bl	801134a <pbuf_skip>
 80115ea:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d00a      	beq.n	8011608 <pbuf_put_at+0x3c>
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	895a      	ldrh	r2, [r3, #10]
 80115f6:	897b      	ldrh	r3, [r7, #10]
 80115f8:	429a      	cmp	r2, r3
 80115fa:	d905      	bls.n	8011608 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	685b      	ldr	r3, [r3, #4]
 8011600:	897a      	ldrh	r2, [r7, #10]
 8011602:	4413      	add	r3, r2
 8011604:	787a      	ldrb	r2, [r7, #1]
 8011606:	701a      	strb	r2, [r3, #0]
  }
}
 8011608:	bf00      	nop
 801160a:	3710      	adds	r7, #16
 801160c:	46bd      	mov	sp, r7
 801160e:	bd80      	pop	{r7, pc}

08011610 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011610:	b580      	push	{r7, lr}
 8011612:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011614:	f00b fbd2 	bl	801cdbc <rand>
 8011618:	4603      	mov	r3, r0
 801161a:	b29b      	uxth	r3, r3
 801161c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011620:	b29b      	uxth	r3, r3
 8011622:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8011626:	b29a      	uxth	r2, r3
 8011628:	4b01      	ldr	r3, [pc, #4]	@ (8011630 <tcp_init+0x20>)
 801162a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801162c:	bf00      	nop
 801162e:	bd80      	pop	{r7, pc}
 8011630:	20000024 	.word	0x20000024

08011634 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	7d1b      	ldrb	r3, [r3, #20]
 8011640:	2b01      	cmp	r3, #1
 8011642:	d105      	bne.n	8011650 <tcp_free+0x1c>
 8011644:	4b06      	ldr	r3, [pc, #24]	@ (8011660 <tcp_free+0x2c>)
 8011646:	22d4      	movs	r2, #212	@ 0xd4
 8011648:	4906      	ldr	r1, [pc, #24]	@ (8011664 <tcp_free+0x30>)
 801164a:	4807      	ldr	r0, [pc, #28]	@ (8011668 <tcp_free+0x34>)
 801164c:	f00c fb9e 	bl	801dd8c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011650:	6879      	ldr	r1, [r7, #4]
 8011652:	2001      	movs	r0, #1
 8011654:	f7fe fcf6 	bl	8010044 <memp_free>
}
 8011658:	bf00      	nop
 801165a:	3708      	adds	r7, #8
 801165c:	46bd      	mov	sp, r7
 801165e:	bd80      	pop	{r7, pc}
 8011660:	080231c8 	.word	0x080231c8
 8011664:	080231f8 	.word	0x080231f8
 8011668:	0802320c 	.word	0x0802320c

0801166c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801166c:	b580      	push	{r7, lr}
 801166e:	b082      	sub	sp, #8
 8011670:	af00      	add	r7, sp, #0
 8011672:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	7d1b      	ldrb	r3, [r3, #20]
 8011678:	2b01      	cmp	r3, #1
 801167a:	d105      	bne.n	8011688 <tcp_free_listen+0x1c>
 801167c:	4b06      	ldr	r3, [pc, #24]	@ (8011698 <tcp_free_listen+0x2c>)
 801167e:	22df      	movs	r2, #223	@ 0xdf
 8011680:	4906      	ldr	r1, [pc, #24]	@ (801169c <tcp_free_listen+0x30>)
 8011682:	4807      	ldr	r0, [pc, #28]	@ (80116a0 <tcp_free_listen+0x34>)
 8011684:	f00c fb82 	bl	801dd8c <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011688:	6879      	ldr	r1, [r7, #4]
 801168a:	2002      	movs	r0, #2
 801168c:	f7fe fcda 	bl	8010044 <memp_free>
}
 8011690:	bf00      	nop
 8011692:	3708      	adds	r7, #8
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}
 8011698:	080231c8 	.word	0x080231c8
 801169c:	08023234 	.word	0x08023234
 80116a0:	0802320c 	.word	0x0802320c

080116a4 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80116a8:	f001 f85e 	bl	8012768 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80116ac:	4b07      	ldr	r3, [pc, #28]	@ (80116cc <tcp_tmr+0x28>)
 80116ae:	781b      	ldrb	r3, [r3, #0]
 80116b0:	3301      	adds	r3, #1
 80116b2:	b2da      	uxtb	r2, r3
 80116b4:	4b05      	ldr	r3, [pc, #20]	@ (80116cc <tcp_tmr+0x28>)
 80116b6:	701a      	strb	r2, [r3, #0]
 80116b8:	4b04      	ldr	r3, [pc, #16]	@ (80116cc <tcp_tmr+0x28>)
 80116ba:	781b      	ldrb	r3, [r3, #0]
 80116bc:	f003 0301 	and.w	r3, r3, #1
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d001      	beq.n	80116c8 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80116c4:	f000 fd0e 	bl	80120e4 <tcp_slowtmr>
  }
}
 80116c8:	bf00      	nop
 80116ca:	bd80      	pop	{r7, pc}
 80116cc:	2000ec45 	.word	0x2000ec45

080116d0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b084      	sub	sp, #16
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80116da:	683b      	ldr	r3, [r7, #0]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d105      	bne.n	80116ec <tcp_remove_listener+0x1c>
 80116e0:	4b0d      	ldr	r3, [pc, #52]	@ (8011718 <tcp_remove_listener+0x48>)
 80116e2:	22ff      	movs	r2, #255	@ 0xff
 80116e4:	490d      	ldr	r1, [pc, #52]	@ (801171c <tcp_remove_listener+0x4c>)
 80116e6:	480e      	ldr	r0, [pc, #56]	@ (8011720 <tcp_remove_listener+0x50>)
 80116e8:	f00c fb50 	bl	801dd8c <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	60fb      	str	r3, [r7, #12]
 80116f0:	e00a      	b.n	8011708 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80116f6:	683a      	ldr	r2, [r7, #0]
 80116f8:	429a      	cmp	r2, r3
 80116fa:	d102      	bne.n	8011702 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80116fc:	68fb      	ldr	r3, [r7, #12]
 80116fe:	2200      	movs	r2, #0
 8011700:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	68db      	ldr	r3, [r3, #12]
 8011706:	60fb      	str	r3, [r7, #12]
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d1f1      	bne.n	80116f2 <tcp_remove_listener+0x22>
    }
  }
}
 801170e:	bf00      	nop
 8011710:	bf00      	nop
 8011712:	3710      	adds	r7, #16
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}
 8011718:	080231c8 	.word	0x080231c8
 801171c:	08023250 	.word	0x08023250
 8011720:	0802320c 	.word	0x0802320c

08011724 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b084      	sub	sp, #16
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d106      	bne.n	8011740 <tcp_listen_closed+0x1c>
 8011732:	4b14      	ldr	r3, [pc, #80]	@ (8011784 <tcp_listen_closed+0x60>)
 8011734:	f240 1211 	movw	r2, #273	@ 0x111
 8011738:	4913      	ldr	r1, [pc, #76]	@ (8011788 <tcp_listen_closed+0x64>)
 801173a:	4814      	ldr	r0, [pc, #80]	@ (801178c <tcp_listen_closed+0x68>)
 801173c:	f00c fb26 	bl	801dd8c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	7d1b      	ldrb	r3, [r3, #20]
 8011744:	2b01      	cmp	r3, #1
 8011746:	d006      	beq.n	8011756 <tcp_listen_closed+0x32>
 8011748:	4b0e      	ldr	r3, [pc, #56]	@ (8011784 <tcp_listen_closed+0x60>)
 801174a:	f44f 7289 	mov.w	r2, #274	@ 0x112
 801174e:	4910      	ldr	r1, [pc, #64]	@ (8011790 <tcp_listen_closed+0x6c>)
 8011750:	480e      	ldr	r0, [pc, #56]	@ (801178c <tcp_listen_closed+0x68>)
 8011752:	f00c fb1b 	bl	801dd8c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011756:	2301      	movs	r3, #1
 8011758:	60fb      	str	r3, [r7, #12]
 801175a:	e00b      	b.n	8011774 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801175c:	4a0d      	ldr	r2, [pc, #52]	@ (8011794 <tcp_listen_closed+0x70>)
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	6879      	ldr	r1, [r7, #4]
 8011768:	4618      	mov	r0, r3
 801176a:	f7ff ffb1 	bl	80116d0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801176e:	68fb      	ldr	r3, [r7, #12]
 8011770:	3301      	adds	r3, #1
 8011772:	60fb      	str	r3, [r7, #12]
 8011774:	68fb      	ldr	r3, [r7, #12]
 8011776:	2b03      	cmp	r3, #3
 8011778:	d9f0      	bls.n	801175c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801177a:	bf00      	nop
 801177c:	bf00      	nop
 801177e:	3710      	adds	r7, #16
 8011780:	46bd      	mov	sp, r7
 8011782:	bd80      	pop	{r7, pc}
 8011784:	080231c8 	.word	0x080231c8
 8011788:	08023278 	.word	0x08023278
 801178c:	0802320c 	.word	0x0802320c
 8011790:	08023284 	.word	0x08023284
 8011794:	08025700 	.word	0x08025700

08011798 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011798:	b5b0      	push	{r4, r5, r7, lr}
 801179a:	b088      	sub	sp, #32
 801179c:	af04      	add	r7, sp, #16
 801179e:	6078      	str	r0, [r7, #4]
 80117a0:	460b      	mov	r3, r1
 80117a2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	2b00      	cmp	r3, #0
 80117a8:	d106      	bne.n	80117b8 <tcp_close_shutdown+0x20>
 80117aa:	4b63      	ldr	r3, [pc, #396]	@ (8011938 <tcp_close_shutdown+0x1a0>)
 80117ac:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 80117b0:	4962      	ldr	r1, [pc, #392]	@ (801193c <tcp_close_shutdown+0x1a4>)
 80117b2:	4863      	ldr	r0, [pc, #396]	@ (8011940 <tcp_close_shutdown+0x1a8>)
 80117b4:	f00c faea 	bl	801dd8c <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80117b8:	78fb      	ldrb	r3, [r7, #3]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d066      	beq.n	801188c <tcp_close_shutdown+0xf4>
 80117be:	687b      	ldr	r3, [r7, #4]
 80117c0:	7d1b      	ldrb	r3, [r3, #20]
 80117c2:	2b04      	cmp	r3, #4
 80117c4:	d003      	beq.n	80117ce <tcp_close_shutdown+0x36>
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	7d1b      	ldrb	r3, [r3, #20]
 80117ca:	2b07      	cmp	r3, #7
 80117cc:	d15e      	bne.n	801188c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80117ce:	687b      	ldr	r3, [r7, #4]
 80117d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d104      	bne.n	80117e0 <tcp_close_shutdown+0x48>
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80117da:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80117de:	d055      	beq.n	801188c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	8b5b      	ldrh	r3, [r3, #26]
 80117e4:	f003 0310 	and.w	r3, r3, #16
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d106      	bne.n	80117fa <tcp_close_shutdown+0x62>
 80117ec:	4b52      	ldr	r3, [pc, #328]	@ (8011938 <tcp_close_shutdown+0x1a0>)
 80117ee:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 80117f2:	4954      	ldr	r1, [pc, #336]	@ (8011944 <tcp_close_shutdown+0x1ac>)
 80117f4:	4852      	ldr	r0, [pc, #328]	@ (8011940 <tcp_close_shutdown+0x1a8>)
 80117f6:	f00c fac9 	bl	801dd8c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80117fe:	687b      	ldr	r3, [r7, #4]
 8011800:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011802:	687d      	ldr	r5, [r7, #4]
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	3304      	adds	r3, #4
 8011808:	687a      	ldr	r2, [r7, #4]
 801180a:	8ad2      	ldrh	r2, [r2, #22]
 801180c:	6879      	ldr	r1, [r7, #4]
 801180e:	8b09      	ldrh	r1, [r1, #24]
 8011810:	9102      	str	r1, [sp, #8]
 8011812:	9201      	str	r2, [sp, #4]
 8011814:	9300      	str	r3, [sp, #0]
 8011816:	462b      	mov	r3, r5
 8011818:	4622      	mov	r2, r4
 801181a:	4601      	mov	r1, r0
 801181c:	6878      	ldr	r0, [r7, #4]
 801181e:	f005 fd6d 	bl	80172fc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011822:	6878      	ldr	r0, [r7, #4]
 8011824:	f001 fb50 	bl	8012ec8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011828:	4b47      	ldr	r3, [pc, #284]	@ (8011948 <tcp_close_shutdown+0x1b0>)
 801182a:	681b      	ldr	r3, [r3, #0]
 801182c:	687a      	ldr	r2, [r7, #4]
 801182e:	429a      	cmp	r2, r3
 8011830:	d105      	bne.n	801183e <tcp_close_shutdown+0xa6>
 8011832:	4b45      	ldr	r3, [pc, #276]	@ (8011948 <tcp_close_shutdown+0x1b0>)
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	68db      	ldr	r3, [r3, #12]
 8011838:	4a43      	ldr	r2, [pc, #268]	@ (8011948 <tcp_close_shutdown+0x1b0>)
 801183a:	6013      	str	r3, [r2, #0]
 801183c:	e013      	b.n	8011866 <tcp_close_shutdown+0xce>
 801183e:	4b42      	ldr	r3, [pc, #264]	@ (8011948 <tcp_close_shutdown+0x1b0>)
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	60fb      	str	r3, [r7, #12]
 8011844:	e00c      	b.n	8011860 <tcp_close_shutdown+0xc8>
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	68db      	ldr	r3, [r3, #12]
 801184a:	687a      	ldr	r2, [r7, #4]
 801184c:	429a      	cmp	r2, r3
 801184e:	d104      	bne.n	801185a <tcp_close_shutdown+0xc2>
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	68da      	ldr	r2, [r3, #12]
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	60da      	str	r2, [r3, #12]
 8011858:	e005      	b.n	8011866 <tcp_close_shutdown+0xce>
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	68db      	ldr	r3, [r3, #12]
 801185e:	60fb      	str	r3, [r7, #12]
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d1ef      	bne.n	8011846 <tcp_close_shutdown+0xae>
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	2200      	movs	r2, #0
 801186a:	60da      	str	r2, [r3, #12]
 801186c:	4b37      	ldr	r3, [pc, #220]	@ (801194c <tcp_close_shutdown+0x1b4>)
 801186e:	2201      	movs	r2, #1
 8011870:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011872:	4b37      	ldr	r3, [pc, #220]	@ (8011950 <tcp_close_shutdown+0x1b8>)
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	687a      	ldr	r2, [r7, #4]
 8011878:	429a      	cmp	r2, r3
 801187a:	d102      	bne.n	8011882 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801187c:	f003 ffe4 	bl	8015848 <tcp_trigger_input_pcb_close>
 8011880:	e002      	b.n	8011888 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8011882:	6878      	ldr	r0, [r7, #4]
 8011884:	f7ff fed6 	bl	8011634 <tcp_free>
      }
      return ERR_OK;
 8011888:	2300      	movs	r3, #0
 801188a:	e050      	b.n	801192e <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	7d1b      	ldrb	r3, [r3, #20]
 8011890:	2b02      	cmp	r3, #2
 8011892:	d03b      	beq.n	801190c <tcp_close_shutdown+0x174>
 8011894:	2b02      	cmp	r3, #2
 8011896:	dc44      	bgt.n	8011922 <tcp_close_shutdown+0x18a>
 8011898:	2b00      	cmp	r3, #0
 801189a:	d002      	beq.n	80118a2 <tcp_close_shutdown+0x10a>
 801189c:	2b01      	cmp	r3, #1
 801189e:	d02a      	beq.n	80118f6 <tcp_close_shutdown+0x15e>
 80118a0:	e03f      	b.n	8011922 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	8adb      	ldrh	r3, [r3, #22]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d021      	beq.n	80118ee <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80118aa:	4b2a      	ldr	r3, [pc, #168]	@ (8011954 <tcp_close_shutdown+0x1bc>)
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	687a      	ldr	r2, [r7, #4]
 80118b0:	429a      	cmp	r2, r3
 80118b2:	d105      	bne.n	80118c0 <tcp_close_shutdown+0x128>
 80118b4:	4b27      	ldr	r3, [pc, #156]	@ (8011954 <tcp_close_shutdown+0x1bc>)
 80118b6:	681b      	ldr	r3, [r3, #0]
 80118b8:	68db      	ldr	r3, [r3, #12]
 80118ba:	4a26      	ldr	r2, [pc, #152]	@ (8011954 <tcp_close_shutdown+0x1bc>)
 80118bc:	6013      	str	r3, [r2, #0]
 80118be:	e013      	b.n	80118e8 <tcp_close_shutdown+0x150>
 80118c0:	4b24      	ldr	r3, [pc, #144]	@ (8011954 <tcp_close_shutdown+0x1bc>)
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	60bb      	str	r3, [r7, #8]
 80118c6:	e00c      	b.n	80118e2 <tcp_close_shutdown+0x14a>
 80118c8:	68bb      	ldr	r3, [r7, #8]
 80118ca:	68db      	ldr	r3, [r3, #12]
 80118cc:	687a      	ldr	r2, [r7, #4]
 80118ce:	429a      	cmp	r2, r3
 80118d0:	d104      	bne.n	80118dc <tcp_close_shutdown+0x144>
 80118d2:	687b      	ldr	r3, [r7, #4]
 80118d4:	68da      	ldr	r2, [r3, #12]
 80118d6:	68bb      	ldr	r3, [r7, #8]
 80118d8:	60da      	str	r2, [r3, #12]
 80118da:	e005      	b.n	80118e8 <tcp_close_shutdown+0x150>
 80118dc:	68bb      	ldr	r3, [r7, #8]
 80118de:	68db      	ldr	r3, [r3, #12]
 80118e0:	60bb      	str	r3, [r7, #8]
 80118e2:	68bb      	ldr	r3, [r7, #8]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d1ef      	bne.n	80118c8 <tcp_close_shutdown+0x130>
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	2200      	movs	r2, #0
 80118ec:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f7ff fea0 	bl	8011634 <tcp_free>
      break;
 80118f4:	e01a      	b.n	801192c <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80118f6:	6878      	ldr	r0, [r7, #4]
 80118f8:	f7ff ff14 	bl	8011724 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80118fc:	6879      	ldr	r1, [r7, #4]
 80118fe:	4816      	ldr	r0, [pc, #88]	@ (8011958 <tcp_close_shutdown+0x1c0>)
 8011900:	f001 fb32 	bl	8012f68 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011904:	6878      	ldr	r0, [r7, #4]
 8011906:	f7ff feb1 	bl	801166c <tcp_free_listen>
      break;
 801190a:	e00f      	b.n	801192c <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801190c:	6879      	ldr	r1, [r7, #4]
 801190e:	480e      	ldr	r0, [pc, #56]	@ (8011948 <tcp_close_shutdown+0x1b0>)
 8011910:	f001 fb2a 	bl	8012f68 <tcp_pcb_remove>
 8011914:	4b0d      	ldr	r3, [pc, #52]	@ (801194c <tcp_close_shutdown+0x1b4>)
 8011916:	2201      	movs	r2, #1
 8011918:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801191a:	6878      	ldr	r0, [r7, #4]
 801191c:	f7ff fe8a 	bl	8011634 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011920:	e004      	b.n	801192c <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011922:	6878      	ldr	r0, [r7, #4]
 8011924:	f000 f81a 	bl	801195c <tcp_close_shutdown_fin>
 8011928:	4603      	mov	r3, r0
 801192a:	e000      	b.n	801192e <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 801192c:	2300      	movs	r3, #0
}
 801192e:	4618      	mov	r0, r3
 8011930:	3710      	adds	r7, #16
 8011932:	46bd      	mov	sp, r7
 8011934:	bdb0      	pop	{r4, r5, r7, pc}
 8011936:	bf00      	nop
 8011938:	080231c8 	.word	0x080231c8
 801193c:	0802329c 	.word	0x0802329c
 8011940:	0802320c 	.word	0x0802320c
 8011944:	080232bc 	.word	0x080232bc
 8011948:	2000ec3c 	.word	0x2000ec3c
 801194c:	2000ec44 	.word	0x2000ec44
 8011950:	2000ec7c 	.word	0x2000ec7c
 8011954:	2000ec34 	.word	0x2000ec34
 8011958:	2000ec38 	.word	0x2000ec38

0801195c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b084      	sub	sp, #16
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	2b00      	cmp	r3, #0
 8011968:	d106      	bne.n	8011978 <tcp_close_shutdown_fin+0x1c>
 801196a:	4b2e      	ldr	r3, [pc, #184]	@ (8011a24 <tcp_close_shutdown_fin+0xc8>)
 801196c:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 8011970:	492d      	ldr	r1, [pc, #180]	@ (8011a28 <tcp_close_shutdown_fin+0xcc>)
 8011972:	482e      	ldr	r0, [pc, #184]	@ (8011a2c <tcp_close_shutdown_fin+0xd0>)
 8011974:	f00c fa0a 	bl	801dd8c <iprintf>

  switch (pcb->state) {
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	7d1b      	ldrb	r3, [r3, #20]
 801197c:	2b07      	cmp	r3, #7
 801197e:	d020      	beq.n	80119c2 <tcp_close_shutdown_fin+0x66>
 8011980:	2b07      	cmp	r3, #7
 8011982:	dc2b      	bgt.n	80119dc <tcp_close_shutdown_fin+0x80>
 8011984:	2b03      	cmp	r3, #3
 8011986:	d002      	beq.n	801198e <tcp_close_shutdown_fin+0x32>
 8011988:	2b04      	cmp	r3, #4
 801198a:	d00d      	beq.n	80119a8 <tcp_close_shutdown_fin+0x4c>
 801198c:	e026      	b.n	80119dc <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801198e:	6878      	ldr	r0, [r7, #4]
 8011990:	f004 fdc2 	bl	8016518 <tcp_send_fin>
 8011994:	4603      	mov	r3, r0
 8011996:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801199c:	2b00      	cmp	r3, #0
 801199e:	d11f      	bne.n	80119e0 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	2205      	movs	r2, #5
 80119a4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80119a6:	e01b      	b.n	80119e0 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80119a8:	6878      	ldr	r0, [r7, #4]
 80119aa:	f004 fdb5 	bl	8016518 <tcp_send_fin>
 80119ae:	4603      	mov	r3, r0
 80119b0:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80119b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d114      	bne.n	80119e4 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	2205      	movs	r2, #5
 80119be:	751a      	strb	r2, [r3, #20]
      }
      break;
 80119c0:	e010      	b.n	80119e4 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80119c2:	6878      	ldr	r0, [r7, #4]
 80119c4:	f004 fda8 	bl	8016518 <tcp_send_fin>
 80119c8:	4603      	mov	r3, r0
 80119ca:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80119cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d109      	bne.n	80119e8 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	2209      	movs	r2, #9
 80119d8:	751a      	strb	r2, [r3, #20]
      }
      break;
 80119da:	e005      	b.n	80119e8 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80119dc:	2300      	movs	r3, #0
 80119de:	e01c      	b.n	8011a1a <tcp_close_shutdown_fin+0xbe>
      break;
 80119e0:	bf00      	nop
 80119e2:	e002      	b.n	80119ea <tcp_close_shutdown_fin+0x8e>
      break;
 80119e4:	bf00      	nop
 80119e6:	e000      	b.n	80119ea <tcp_close_shutdown_fin+0x8e>
      break;
 80119e8:	bf00      	nop
  }

  if (err == ERR_OK) {
 80119ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d103      	bne.n	80119fa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80119f2:	6878      	ldr	r0, [r7, #4]
 80119f4:	f004 fece 	bl	8016794 <tcp_output>
 80119f8:	e00d      	b.n	8011a16 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80119fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a02:	d108      	bne.n	8011a16 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	8b5b      	ldrh	r3, [r3, #26]
 8011a08:	f043 0308 	orr.w	r3, r3, #8
 8011a0c:	b29a      	uxth	r2, r3
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011a12:	2300      	movs	r3, #0
 8011a14:	e001      	b.n	8011a1a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3710      	adds	r7, #16
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}
 8011a22:	bf00      	nop
 8011a24:	080231c8 	.word	0x080231c8
 8011a28:	08023278 	.word	0x08023278
 8011a2c:	0802320c 	.word	0x0802320c

08011a30 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011a30:	b580      	push	{r7, lr}
 8011a32:	b082      	sub	sp, #8
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	2b00      	cmp	r3, #0
 8011a3c:	d109      	bne.n	8011a52 <tcp_close+0x22>
 8011a3e:	4b0f      	ldr	r3, [pc, #60]	@ (8011a7c <tcp_close+0x4c>)
 8011a40:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8011a44:	490e      	ldr	r1, [pc, #56]	@ (8011a80 <tcp_close+0x50>)
 8011a46:	480f      	ldr	r0, [pc, #60]	@ (8011a84 <tcp_close+0x54>)
 8011a48:	f00c f9a0 	bl	801dd8c <iprintf>
 8011a4c:	f06f 030f 	mvn.w	r3, #15
 8011a50:	e00f      	b.n	8011a72 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	7d1b      	ldrb	r3, [r3, #20]
 8011a56:	2b01      	cmp	r3, #1
 8011a58:	d006      	beq.n	8011a68 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	8b5b      	ldrh	r3, [r3, #26]
 8011a5e:	f043 0310 	orr.w	r3, r3, #16
 8011a62:	b29a      	uxth	r2, r3
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011a68:	2101      	movs	r1, #1
 8011a6a:	6878      	ldr	r0, [r7, #4]
 8011a6c:	f7ff fe94 	bl	8011798 <tcp_close_shutdown>
 8011a70:	4603      	mov	r3, r0
}
 8011a72:	4618      	mov	r0, r3
 8011a74:	3708      	adds	r7, #8
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}
 8011a7a:	bf00      	nop
 8011a7c:	080231c8 	.word	0x080231c8
 8011a80:	080232d8 	.word	0x080232d8
 8011a84:	0802320c 	.word	0x0802320c

08011a88 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b084      	sub	sp, #16
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	60f8      	str	r0, [r7, #12]
 8011a90:	60b9      	str	r1, [r7, #8]
 8011a92:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d109      	bne.n	8011aae <tcp_shutdown+0x26>
 8011a9a:	4b26      	ldr	r3, [pc, #152]	@ (8011b34 <tcp_shutdown+0xac>)
 8011a9c:	f240 2207 	movw	r2, #519	@ 0x207
 8011aa0:	4925      	ldr	r1, [pc, #148]	@ (8011b38 <tcp_shutdown+0xb0>)
 8011aa2:	4826      	ldr	r0, [pc, #152]	@ (8011b3c <tcp_shutdown+0xb4>)
 8011aa4:	f00c f972 	bl	801dd8c <iprintf>
 8011aa8:	f06f 030f 	mvn.w	r3, #15
 8011aac:	e03d      	b.n	8011b2a <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8011aae:	68fb      	ldr	r3, [r7, #12]
 8011ab0:	7d1b      	ldrb	r3, [r3, #20]
 8011ab2:	2b01      	cmp	r3, #1
 8011ab4:	d102      	bne.n	8011abc <tcp_shutdown+0x34>
    return ERR_CONN;
 8011ab6:	f06f 030a 	mvn.w	r3, #10
 8011aba:	e036      	b.n	8011b2a <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d01b      	beq.n	8011afa <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	8b5b      	ldrh	r3, [r3, #26]
 8011ac6:	f043 0310 	orr.w	r3, r3, #16
 8011aca:	b29a      	uxth	r2, r3
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8011ad0:	687b      	ldr	r3, [r7, #4]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d005      	beq.n	8011ae2 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8011ad6:	2101      	movs	r1, #1
 8011ad8:	68f8      	ldr	r0, [r7, #12]
 8011ada:	f7ff fe5d 	bl	8011798 <tcp_close_shutdown>
 8011ade:	4603      	mov	r3, r0
 8011ae0:	e023      	b.n	8011b2a <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d007      	beq.n	8011afa <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8011aee:	4618      	mov	r0, r3
 8011af0:	f7ff f98a 	bl	8010e08 <pbuf_free>
      pcb->refused_data = NULL;
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	2200      	movs	r2, #0
 8011af8:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }
  if (shut_tx) {
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d013      	beq.n	8011b28 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	7d1b      	ldrb	r3, [r3, #20]
 8011b04:	2b04      	cmp	r3, #4
 8011b06:	dc02      	bgt.n	8011b0e <tcp_shutdown+0x86>
 8011b08:	2b03      	cmp	r3, #3
 8011b0a:	da02      	bge.n	8011b12 <tcp_shutdown+0x8a>
 8011b0c:	e009      	b.n	8011b22 <tcp_shutdown+0x9a>
 8011b0e:	2b07      	cmp	r3, #7
 8011b10:	d107      	bne.n	8011b22 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8011b12:	68bb      	ldr	r3, [r7, #8]
 8011b14:	b2db      	uxtb	r3, r3
 8011b16:	4619      	mov	r1, r3
 8011b18:	68f8      	ldr	r0, [r7, #12]
 8011b1a:	f7ff fe3d 	bl	8011798 <tcp_close_shutdown>
 8011b1e:	4603      	mov	r3, r0
 8011b20:	e003      	b.n	8011b2a <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8011b22:	f06f 030a 	mvn.w	r3, #10
 8011b26:	e000      	b.n	8011b2a <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8011b28:	2300      	movs	r3, #0
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	3710      	adds	r7, #16
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}
 8011b32:	bf00      	nop
 8011b34:	080231c8 	.word	0x080231c8
 8011b38:	080232f0 	.word	0x080232f0
 8011b3c:	0802320c 	.word	0x0802320c

08011b40 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011b40:	b580      	push	{r7, lr}
 8011b42:	b08e      	sub	sp, #56	@ 0x38
 8011b44:	af04      	add	r7, sp, #16
 8011b46:	6078      	str	r0, [r7, #4]
 8011b48:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	2b00      	cmp	r3, #0
 8011b4e:	d107      	bne.n	8011b60 <tcp_abandon+0x20>
 8011b50:	4b52      	ldr	r3, [pc, #328]	@ (8011c9c <tcp_abandon+0x15c>)
 8011b52:	f240 223d 	movw	r2, #573	@ 0x23d
 8011b56:	4952      	ldr	r1, [pc, #328]	@ (8011ca0 <tcp_abandon+0x160>)
 8011b58:	4852      	ldr	r0, [pc, #328]	@ (8011ca4 <tcp_abandon+0x164>)
 8011b5a:	f00c f917 	bl	801dd8c <iprintf>
 8011b5e:	e099      	b.n	8011c94 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011b60:	687b      	ldr	r3, [r7, #4]
 8011b62:	7d1b      	ldrb	r3, [r3, #20]
 8011b64:	2b01      	cmp	r3, #1
 8011b66:	d106      	bne.n	8011b76 <tcp_abandon+0x36>
 8011b68:	4b4c      	ldr	r3, [pc, #304]	@ (8011c9c <tcp_abandon+0x15c>)
 8011b6a:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8011b6e:	494e      	ldr	r1, [pc, #312]	@ (8011ca8 <tcp_abandon+0x168>)
 8011b70:	484c      	ldr	r0, [pc, #304]	@ (8011ca4 <tcp_abandon+0x164>)
 8011b72:	f00c f90b 	bl	801dd8c <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	7d1b      	ldrb	r3, [r3, #20]
 8011b7a:	2b0a      	cmp	r3, #10
 8011b7c:	d107      	bne.n	8011b8e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011b7e:	6879      	ldr	r1, [r7, #4]
 8011b80:	484a      	ldr	r0, [pc, #296]	@ (8011cac <tcp_abandon+0x16c>)
 8011b82:	f001 f9f1 	bl	8012f68 <tcp_pcb_remove>
    tcp_free(pcb);
 8011b86:	6878      	ldr	r0, [r7, #4]
 8011b88:	f7ff fd54 	bl	8011634 <tcp_free>
 8011b8c:	e082      	b.n	8011c94 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011b8e:	2300      	movs	r3, #0
 8011b90:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8011b92:	2300      	movs	r3, #0
 8011b94:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011b9a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011ba0:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8011ba8:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	691b      	ldr	r3, [r3, #16]
 8011bae:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	7d1b      	ldrb	r3, [r3, #20]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d126      	bne.n	8011c06 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	8adb      	ldrh	r3, [r3, #22]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	d02e      	beq.n	8011c1e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011bc0:	4b3b      	ldr	r3, [pc, #236]	@ (8011cb0 <tcp_abandon+0x170>)
 8011bc2:	681b      	ldr	r3, [r3, #0]
 8011bc4:	687a      	ldr	r2, [r7, #4]
 8011bc6:	429a      	cmp	r2, r3
 8011bc8:	d105      	bne.n	8011bd6 <tcp_abandon+0x96>
 8011bca:	4b39      	ldr	r3, [pc, #228]	@ (8011cb0 <tcp_abandon+0x170>)
 8011bcc:	681b      	ldr	r3, [r3, #0]
 8011bce:	68db      	ldr	r3, [r3, #12]
 8011bd0:	4a37      	ldr	r2, [pc, #220]	@ (8011cb0 <tcp_abandon+0x170>)
 8011bd2:	6013      	str	r3, [r2, #0]
 8011bd4:	e013      	b.n	8011bfe <tcp_abandon+0xbe>
 8011bd6:	4b36      	ldr	r3, [pc, #216]	@ (8011cb0 <tcp_abandon+0x170>)
 8011bd8:	681b      	ldr	r3, [r3, #0]
 8011bda:	61fb      	str	r3, [r7, #28]
 8011bdc:	e00c      	b.n	8011bf8 <tcp_abandon+0xb8>
 8011bde:	69fb      	ldr	r3, [r7, #28]
 8011be0:	68db      	ldr	r3, [r3, #12]
 8011be2:	687a      	ldr	r2, [r7, #4]
 8011be4:	429a      	cmp	r2, r3
 8011be6:	d104      	bne.n	8011bf2 <tcp_abandon+0xb2>
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	68da      	ldr	r2, [r3, #12]
 8011bec:	69fb      	ldr	r3, [r7, #28]
 8011bee:	60da      	str	r2, [r3, #12]
 8011bf0:	e005      	b.n	8011bfe <tcp_abandon+0xbe>
 8011bf2:	69fb      	ldr	r3, [r7, #28]
 8011bf4:	68db      	ldr	r3, [r3, #12]
 8011bf6:	61fb      	str	r3, [r7, #28]
 8011bf8:	69fb      	ldr	r3, [r7, #28]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d1ef      	bne.n	8011bde <tcp_abandon+0x9e>
 8011bfe:	687b      	ldr	r3, [r7, #4]
 8011c00:	2200      	movs	r2, #0
 8011c02:	60da      	str	r2, [r3, #12]
 8011c04:	e00b      	b.n	8011c1e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011c06:	683b      	ldr	r3, [r7, #0]
 8011c08:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	8adb      	ldrh	r3, [r3, #22]
 8011c0e:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011c10:	6879      	ldr	r1, [r7, #4]
 8011c12:	4828      	ldr	r0, [pc, #160]	@ (8011cb4 <tcp_abandon+0x174>)
 8011c14:	f001 f9a8 	bl	8012f68 <tcp_pcb_remove>
 8011c18:	4b27      	ldr	r3, [pc, #156]	@ (8011cb8 <tcp_abandon+0x178>)
 8011c1a:	2201      	movs	r2, #1
 8011c1c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011c1e:	687b      	ldr	r3, [r7, #4]
 8011c20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d004      	beq.n	8011c30 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	f000 fe7c 	bl	8012928 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d004      	beq.n	8011c42 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011c38:	687b      	ldr	r3, [r7, #4]
 8011c3a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f000 fe73 	bl	8012928 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011c46:	2b00      	cmp	r3, #0
 8011c48:	d004      	beq.n	8011c54 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011c4e:	4618      	mov	r0, r3
 8011c50:	f000 fe6a 	bl	8012928 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d00e      	beq.n	8011c78 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011c5a:	6879      	ldr	r1, [r7, #4]
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	3304      	adds	r3, #4
 8011c60:	687a      	ldr	r2, [r7, #4]
 8011c62:	8b12      	ldrh	r2, [r2, #24]
 8011c64:	9202      	str	r2, [sp, #8]
 8011c66:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8011c68:	9201      	str	r2, [sp, #4]
 8011c6a:	9300      	str	r3, [sp, #0]
 8011c6c:	460b      	mov	r3, r1
 8011c6e:	697a      	ldr	r2, [r7, #20]
 8011c70:	69b9      	ldr	r1, [r7, #24]
 8011c72:	6878      	ldr	r0, [r7, #4]
 8011c74:	f005 fb42 	bl	80172fc <tcp_rst>
    }
    last_state = pcb->state;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	7d1b      	ldrb	r3, [r3, #20]
 8011c7c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011c7e:	6878      	ldr	r0, [r7, #4]
 8011c80:	f7ff fcd8 	bl	8011634 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d004      	beq.n	8011c94 <tcp_abandon+0x154>
 8011c8a:	693b      	ldr	r3, [r7, #16]
 8011c8c:	f06f 010c 	mvn.w	r1, #12
 8011c90:	68f8      	ldr	r0, [r7, #12]
 8011c92:	4798      	blx	r3
  }
}
 8011c94:	3728      	adds	r7, #40	@ 0x28
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd80      	pop	{r7, pc}
 8011c9a:	bf00      	nop
 8011c9c:	080231c8 	.word	0x080231c8
 8011ca0:	0802330c 	.word	0x0802330c
 8011ca4:	0802320c 	.word	0x0802320c
 8011ca8:	08023328 	.word	0x08023328
 8011cac:	2000ec40 	.word	0x2000ec40
 8011cb0:	2000ec34 	.word	0x2000ec34
 8011cb4:	2000ec3c 	.word	0x2000ec3c
 8011cb8:	2000ec44 	.word	0x2000ec44

08011cbc <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b082      	sub	sp, #8
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011cc4:	2101      	movs	r1, #1
 8011cc6:	6878      	ldr	r0, [r7, #4]
 8011cc8:	f7ff ff3a 	bl	8011b40 <tcp_abandon>
}
 8011ccc:	bf00      	nop
 8011cce:	3708      	adds	r7, #8
 8011cd0:	46bd      	mov	sp, r7
 8011cd2:	bd80      	pop	{r7, pc}

08011cd4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b084      	sub	sp, #16
 8011cd8:	af00      	add	r7, sp, #0
 8011cda:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011cdc:	687b      	ldr	r3, [r7, #4]
 8011cde:	2b00      	cmp	r3, #0
 8011ce0:	d106      	bne.n	8011cf0 <tcp_update_rcv_ann_wnd+0x1c>
 8011ce2:	4b25      	ldr	r3, [pc, #148]	@ (8011d78 <tcp_update_rcv_ann_wnd+0xa4>)
 8011ce4:	f240 32a6 	movw	r2, #934	@ 0x3a6
 8011ce8:	4924      	ldr	r1, [pc, #144]	@ (8011d7c <tcp_update_rcv_ann_wnd+0xa8>)
 8011cea:	4825      	ldr	r0, [pc, #148]	@ (8011d80 <tcp_update_rcv_ann_wnd+0xac>)
 8011cec:	f00c f84e 	bl	801dd8c <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011cf4:	687a      	ldr	r2, [r7, #4]
 8011cf6:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8011cf8:	4413      	add	r3, r2
 8011cfa:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d00:	687a      	ldr	r2, [r7, #4]
 8011d02:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 8011d04:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 8011d08:	bf28      	it	cs
 8011d0a:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 8011d0e:	b292      	uxth	r2, r2
 8011d10:	4413      	add	r3, r2
 8011d12:	68fa      	ldr	r2, [r7, #12]
 8011d14:	1ad3      	subs	r3, r2, r3
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	db08      	blt.n	8011d2c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011d22:	687b      	ldr	r3, [r7, #4]
 8011d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d26:	68fa      	ldr	r2, [r7, #12]
 8011d28:	1ad3      	subs	r3, r2, r3
 8011d2a:	e020      	b.n	8011d6e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011d34:	1ad3      	subs	r3, r2, r3
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	dd03      	ble.n	8011d42 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011d40:	e014      	b.n	8011d6c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011d4a:	1ad3      	subs	r3, r2, r3
 8011d4c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011d4e:	68bb      	ldr	r3, [r7, #8]
 8011d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011d54:	d306      	bcc.n	8011d64 <tcp_update_rcv_ann_wnd+0x90>
 8011d56:	4b08      	ldr	r3, [pc, #32]	@ (8011d78 <tcp_update_rcv_ann_wnd+0xa4>)
 8011d58:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8011d5c:	4909      	ldr	r1, [pc, #36]	@ (8011d84 <tcp_update_rcv_ann_wnd+0xb0>)
 8011d5e:	4808      	ldr	r0, [pc, #32]	@ (8011d80 <tcp_update_rcv_ann_wnd+0xac>)
 8011d60:	f00c f814 	bl	801dd8c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	b29a      	uxth	r2, r3
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8011d6c:	2300      	movs	r3, #0
  }
}
 8011d6e:	4618      	mov	r0, r3
 8011d70:	3710      	adds	r7, #16
 8011d72:	46bd      	mov	sp, r7
 8011d74:	bd80      	pop	{r7, pc}
 8011d76:	bf00      	nop
 8011d78:	080231c8 	.word	0x080231c8
 8011d7c:	08023424 	.word	0x08023424
 8011d80:	0802320c 	.word	0x0802320c
 8011d84:	08023448 	.word	0x08023448

08011d88 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b084      	sub	sp, #16
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
 8011d90:	460b      	mov	r3, r1
 8011d92:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d107      	bne.n	8011daa <tcp_recved+0x22>
 8011d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8011e18 <tcp_recved+0x90>)
 8011d9c:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8011da0:	491e      	ldr	r1, [pc, #120]	@ (8011e1c <tcp_recved+0x94>)
 8011da2:	481f      	ldr	r0, [pc, #124]	@ (8011e20 <tcp_recved+0x98>)
 8011da4:	f00b fff2 	bl	801dd8c <iprintf>
 8011da8:	e032      	b.n	8011e10 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	7d1b      	ldrb	r3, [r3, #20]
 8011dae:	2b01      	cmp	r3, #1
 8011db0:	d106      	bne.n	8011dc0 <tcp_recved+0x38>
 8011db2:	4b19      	ldr	r3, [pc, #100]	@ (8011e18 <tcp_recved+0x90>)
 8011db4:	f240 32d2 	movw	r2, #978	@ 0x3d2
 8011db8:	491a      	ldr	r1, [pc, #104]	@ (8011e24 <tcp_recved+0x9c>)
 8011dba:	4819      	ldr	r0, [pc, #100]	@ (8011e20 <tcp_recved+0x98>)
 8011dbc:	f00b ffe6 	bl	801dd8c <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8011dc4:	887b      	ldrh	r3, [r7, #2]
 8011dc6:	4413      	add	r3, r2
 8011dc8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8011dca:	89fb      	ldrh	r3, [r7, #14]
 8011dcc:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8011dd0:	d804      	bhi.n	8011ddc <tcp_recved+0x54>
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8011dd6:	89fa      	ldrh	r2, [r7, #14]
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d204      	bcs.n	8011de6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8011de2:	851a      	strh	r2, [r3, #40]	@ 0x28
 8011de4:	e002      	b.n	8011dec <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	89fa      	ldrh	r2, [r7, #14]
 8011dea:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011dec:	6878      	ldr	r0, [r7, #4]
 8011dee:	f7ff ff71 	bl	8011cd4 <tcp_update_rcv_ann_wnd>
 8011df2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8011dfa:	d309      	bcc.n	8011e10 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	8b5b      	ldrh	r3, [r3, #26]
 8011e00:	f043 0302 	orr.w	r3, r3, #2
 8011e04:	b29a      	uxth	r2, r3
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011e0a:	6878      	ldr	r0, [r7, #4]
 8011e0c:	f004 fcc2 	bl	8016794 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011e10:	3710      	adds	r7, #16
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}
 8011e16:	bf00      	nop
 8011e18:	080231c8 	.word	0x080231c8
 8011e1c:	08023464 	.word	0x08023464
 8011e20:	0802320c 	.word	0x0802320c
 8011e24:	0802347c 	.word	0x0802347c

08011e28 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8011e28:	b480      	push	{r7}
 8011e2a:	b083      	sub	sp, #12
 8011e2c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8011e2e:	2300      	movs	r3, #0
 8011e30:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8011e32:	4b1e      	ldr	r3, [pc, #120]	@ (8011eac <tcp_new_port+0x84>)
 8011e34:	881b      	ldrh	r3, [r3, #0]
 8011e36:	3301      	adds	r3, #1
 8011e38:	b29a      	uxth	r2, r3
 8011e3a:	4b1c      	ldr	r3, [pc, #112]	@ (8011eac <tcp_new_port+0x84>)
 8011e3c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8011e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8011eac <tcp_new_port+0x84>)
 8011e40:	881b      	ldrh	r3, [r3, #0]
 8011e42:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8011e46:	4293      	cmp	r3, r2
 8011e48:	d103      	bne.n	8011e52 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8011e4a:	4b18      	ldr	r3, [pc, #96]	@ (8011eac <tcp_new_port+0x84>)
 8011e4c:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8011e50:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011e52:	2300      	movs	r3, #0
 8011e54:	71fb      	strb	r3, [r7, #7]
 8011e56:	e01e      	b.n	8011e96 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011e58:	79fb      	ldrb	r3, [r7, #7]
 8011e5a:	4a15      	ldr	r2, [pc, #84]	@ (8011eb0 <tcp_new_port+0x88>)
 8011e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	603b      	str	r3, [r7, #0]
 8011e64:	e011      	b.n	8011e8a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	8ada      	ldrh	r2, [r3, #22]
 8011e6a:	4b10      	ldr	r3, [pc, #64]	@ (8011eac <tcp_new_port+0x84>)
 8011e6c:	881b      	ldrh	r3, [r3, #0]
 8011e6e:	429a      	cmp	r2, r3
 8011e70:	d108      	bne.n	8011e84 <tcp_new_port+0x5c>
        n++;
 8011e72:	88bb      	ldrh	r3, [r7, #4]
 8011e74:	3301      	adds	r3, #1
 8011e76:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8011e78:	88bb      	ldrh	r3, [r7, #4]
 8011e7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011e7e:	d3d8      	bcc.n	8011e32 <tcp_new_port+0xa>
          return 0;
 8011e80:	2300      	movs	r3, #0
 8011e82:	e00d      	b.n	8011ea0 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	68db      	ldr	r3, [r3, #12]
 8011e88:	603b      	str	r3, [r7, #0]
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	2b00      	cmp	r3, #0
 8011e8e:	d1ea      	bne.n	8011e66 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8011e90:	79fb      	ldrb	r3, [r7, #7]
 8011e92:	3301      	adds	r3, #1
 8011e94:	71fb      	strb	r3, [r7, #7]
 8011e96:	79fb      	ldrb	r3, [r7, #7]
 8011e98:	2b03      	cmp	r3, #3
 8011e9a:	d9dd      	bls.n	8011e58 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8011e9c:	4b03      	ldr	r3, [pc, #12]	@ (8011eac <tcp_new_port+0x84>)
 8011e9e:	881b      	ldrh	r3, [r3, #0]
}
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	370c      	adds	r7, #12
 8011ea4:	46bd      	mov	sp, r7
 8011ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011eaa:	4770      	bx	lr
 8011eac:	20000024 	.word	0x20000024
 8011eb0:	08025700 	.word	0x08025700

08011eb4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8011eb4:	b580      	push	{r7, lr}
 8011eb6:	b08a      	sub	sp, #40	@ 0x28
 8011eb8:	af00      	add	r7, sp, #0
 8011eba:	60f8      	str	r0, [r7, #12]
 8011ebc:	60b9      	str	r1, [r7, #8]
 8011ebe:	603b      	str	r3, [r7, #0]
 8011ec0:	4613      	mov	r3, r2
 8011ec2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8011ec4:	2300      	movs	r3, #0
 8011ec6:	627b      	str	r3, [r7, #36]	@ 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011ec8:	68fb      	ldr	r3, [r7, #12]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d109      	bne.n	8011ee2 <tcp_connect+0x2e>
 8011ece:	4b7d      	ldr	r3, [pc, #500]	@ (80120c4 <tcp_connect+0x210>)
 8011ed0:	f240 4235 	movw	r2, #1077	@ 0x435
 8011ed4:	497c      	ldr	r1, [pc, #496]	@ (80120c8 <tcp_connect+0x214>)
 8011ed6:	487d      	ldr	r0, [pc, #500]	@ (80120cc <tcp_connect+0x218>)
 8011ed8:	f00b ff58 	bl	801dd8c <iprintf>
 8011edc:	f06f 030f 	mvn.w	r3, #15
 8011ee0:	e0ec      	b.n	80120bc <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011ee2:	68bb      	ldr	r3, [r7, #8]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d109      	bne.n	8011efc <tcp_connect+0x48>
 8011ee8:	4b76      	ldr	r3, [pc, #472]	@ (80120c4 <tcp_connect+0x210>)
 8011eea:	f240 4236 	movw	r2, #1078	@ 0x436
 8011eee:	4978      	ldr	r1, [pc, #480]	@ (80120d0 <tcp_connect+0x21c>)
 8011ef0:	4876      	ldr	r0, [pc, #472]	@ (80120cc <tcp_connect+0x218>)
 8011ef2:	f00b ff4b 	bl	801dd8c <iprintf>
 8011ef6:	f06f 030f 	mvn.w	r3, #15
 8011efa:	e0df      	b.n	80120bc <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	7d1b      	ldrb	r3, [r3, #20]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d009      	beq.n	8011f18 <tcp_connect+0x64>
 8011f04:	4b6f      	ldr	r3, [pc, #444]	@ (80120c4 <tcp_connect+0x210>)
 8011f06:	f44f 6287 	mov.w	r2, #1080	@ 0x438
 8011f0a:	4972      	ldr	r1, [pc, #456]	@ (80120d4 <tcp_connect+0x220>)
 8011f0c:	486f      	ldr	r0, [pc, #444]	@ (80120cc <tcp_connect+0x218>)
 8011f0e:	f00b ff3d 	bl	801dd8c <iprintf>
 8011f12:	f06f 0309 	mvn.w	r3, #9
 8011f16:	e0d1      	b.n	80120bc <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8011f18:	68bb      	ldr	r3, [r7, #8]
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d002      	beq.n	8011f24 <tcp_connect+0x70>
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	e000      	b.n	8011f26 <tcp_connect+0x72>
 8011f24:	2300      	movs	r3, #0
 8011f26:	68fa      	ldr	r2, [r7, #12]
 8011f28:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8011f2a:	68fb      	ldr	r3, [r7, #12]
 8011f2c:	88fa      	ldrh	r2, [r7, #6]
 8011f2e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	7a1b      	ldrb	r3, [r3, #8]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d006      	beq.n	8011f46 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	7a1b      	ldrb	r3, [r3, #8]
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	f7fe fba3 	bl	8010688 <netif_get_by_index>
 8011f42:	6278      	str	r0, [r7, #36]	@ 0x24
 8011f44:	e005      	b.n	8011f52 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	3304      	adds	r3, #4
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	f009 fa4c 	bl	801b3e8 <ip4_route>
 8011f50:	6278      	str	r0, [r7, #36]	@ 0x24
  }
  if (netif == NULL) {
 8011f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d102      	bne.n	8011f5e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8011f58:	f06f 0303 	mvn.w	r3, #3
 8011f5c:	e0ae      	b.n	80120bc <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011f5e:	68fb      	ldr	r3, [r7, #12]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d003      	beq.n	8011f6c <tcp_connect+0xb8>
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d111      	bne.n	8011f90 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8011f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d002      	beq.n	8011f78 <tcp_connect+0xc4>
 8011f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011f74:	3304      	adds	r3, #4
 8011f76:	e000      	b.n	8011f7a <tcp_connect+0xc6>
 8011f78:	2300      	movs	r3, #0
 8011f7a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8011f7c:	69fb      	ldr	r3, [r7, #28]
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d102      	bne.n	8011f88 <tcp_connect+0xd4>
      return ERR_RTE;
 8011f82:	f06f 0303 	mvn.w	r3, #3
 8011f86:	e099      	b.n	80120bc <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011f88:	69fb      	ldr	r3, [r7, #28]
 8011f8a:	681a      	ldr	r2, [r3, #0]
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	8adb      	ldrh	r3, [r3, #22]
 8011f94:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	8adb      	ldrh	r3, [r3, #22]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d10c      	bne.n	8011fb8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8011f9e:	f7ff ff43 	bl	8011e28 <tcp_new_port>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	461a      	mov	r2, r3
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	8adb      	ldrh	r3, [r3, #22]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d102      	bne.n	8011fb8 <tcp_connect+0x104>
      return ERR_BUF;
 8011fb2:	f06f 0301 	mvn.w	r3, #1
 8011fb6:	e081      	b.n	80120bc <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8011fb8:	68f8      	ldr	r0, [r7, #12]
 8011fba:	f001 f869 	bl	8013090 <tcp_next_iss>
 8011fbe:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8011fc0:	68fb      	ldr	r3, [r7, #12]
 8011fc2:	2200      	movs	r2, #0
 8011fc4:	625a      	str	r2, [r3, #36]	@ 0x24
  pcb->snd_nxt = iss;
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	697a      	ldr	r2, [r7, #20]
 8011fca:	651a      	str	r2, [r3, #80]	@ 0x50
  pcb->lastack = iss - 1;
 8011fcc:	697b      	ldr	r3, [r7, #20]
 8011fce:	1e5a      	subs	r2, r3, #1
 8011fd0:	68fb      	ldr	r3, [r7, #12]
 8011fd2:	645a      	str	r2, [r3, #68]	@ 0x44
  pcb->snd_wl2 = iss - 1;
 8011fd4:	697b      	ldr	r3, [r7, #20]
 8011fd6:	1e5a      	subs	r2, r3, #1
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	659a      	str	r2, [r3, #88]	@ 0x58
  pcb->snd_lbb = iss - 1;
 8011fdc:	697b      	ldr	r3, [r7, #20]
 8011fde:	1e5a      	subs	r2, r3, #1
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8011fea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	851a      	strh	r2, [r3, #40]	@ 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	62da      	str	r2, [r3, #44]	@ 0x2c
  pcb->snd_wnd = TCP_WND;
 8011ffc:	68fb      	ldr	r3, [r7, #12]
 8011ffe:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8012002:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 8012006:	68fb      	ldr	r3, [r7, #12]
 8012008:	f44f 7206 	mov.w	r2, #536	@ 0x218
 801200c:	865a      	strh	r2, [r3, #50]	@ 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801200e:	68fb      	ldr	r3, [r7, #12]
 8012010:	8e58      	ldrh	r0, [r3, #50]	@ 0x32
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	3304      	adds	r3, #4
 8012016:	461a      	mov	r2, r3
 8012018:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801201a:	f001 f85f 	bl	80130dc <tcp_eff_send_mss_netif>
 801201e:	4603      	mov	r3, r0
 8012020:	461a      	mov	r2, r3
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	2201      	movs	r2, #1
 801202a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801202e:	68fb      	ldr	r3, [r7, #12]
 8012030:	683a      	ldr	r2, [r7, #0]
 8012032:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8012036:	2102      	movs	r1, #2
 8012038:	68f8      	ldr	r0, [r7, #12]
 801203a:	f004 fabd 	bl	80165b8 <tcp_enqueue_flags>
 801203e:	4603      	mov	r3, r0
 8012040:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8012042:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d136      	bne.n	80120b8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 801204a:	68fb      	ldr	r3, [r7, #12]
 801204c:	2202      	movs	r2, #2
 801204e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8012050:	8b7b      	ldrh	r3, [r7, #26]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d021      	beq.n	801209a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8012056:	4b20      	ldr	r3, [pc, #128]	@ (80120d8 <tcp_connect+0x224>)
 8012058:	681b      	ldr	r3, [r3, #0]
 801205a:	68fa      	ldr	r2, [r7, #12]
 801205c:	429a      	cmp	r2, r3
 801205e:	d105      	bne.n	801206c <tcp_connect+0x1b8>
 8012060:	4b1d      	ldr	r3, [pc, #116]	@ (80120d8 <tcp_connect+0x224>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	68db      	ldr	r3, [r3, #12]
 8012066:	4a1c      	ldr	r2, [pc, #112]	@ (80120d8 <tcp_connect+0x224>)
 8012068:	6013      	str	r3, [r2, #0]
 801206a:	e013      	b.n	8012094 <tcp_connect+0x1e0>
 801206c:	4b1a      	ldr	r3, [pc, #104]	@ (80120d8 <tcp_connect+0x224>)
 801206e:	681b      	ldr	r3, [r3, #0]
 8012070:	623b      	str	r3, [r7, #32]
 8012072:	e00c      	b.n	801208e <tcp_connect+0x1da>
 8012074:	6a3b      	ldr	r3, [r7, #32]
 8012076:	68db      	ldr	r3, [r3, #12]
 8012078:	68fa      	ldr	r2, [r7, #12]
 801207a:	429a      	cmp	r2, r3
 801207c:	d104      	bne.n	8012088 <tcp_connect+0x1d4>
 801207e:	68fb      	ldr	r3, [r7, #12]
 8012080:	68da      	ldr	r2, [r3, #12]
 8012082:	6a3b      	ldr	r3, [r7, #32]
 8012084:	60da      	str	r2, [r3, #12]
 8012086:	e005      	b.n	8012094 <tcp_connect+0x1e0>
 8012088:	6a3b      	ldr	r3, [r7, #32]
 801208a:	68db      	ldr	r3, [r3, #12]
 801208c:	623b      	str	r3, [r7, #32]
 801208e:	6a3b      	ldr	r3, [r7, #32]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d1ef      	bne.n	8012074 <tcp_connect+0x1c0>
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	2200      	movs	r2, #0
 8012098:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801209a:	4b10      	ldr	r3, [pc, #64]	@ (80120dc <tcp_connect+0x228>)
 801209c:	681a      	ldr	r2, [r3, #0]
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	60da      	str	r2, [r3, #12]
 80120a2:	4a0e      	ldr	r2, [pc, #56]	@ (80120dc <tcp_connect+0x228>)
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	6013      	str	r3, [r2, #0]
 80120a8:	f005 faea 	bl	8017680 <tcp_timer_needed>
 80120ac:	4b0c      	ldr	r3, [pc, #48]	@ (80120e0 <tcp_connect+0x22c>)
 80120ae:	2201      	movs	r2, #1
 80120b0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80120b2:	68f8      	ldr	r0, [r7, #12]
 80120b4:	f004 fb6e 	bl	8016794 <tcp_output>
  }
  return ret;
 80120b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80120bc:	4618      	mov	r0, r3
 80120be:	3728      	adds	r7, #40	@ 0x28
 80120c0:	46bd      	mov	sp, r7
 80120c2:	bd80      	pop	{r7, pc}
 80120c4:	080231c8 	.word	0x080231c8
 80120c8:	080234a4 	.word	0x080234a4
 80120cc:	0802320c 	.word	0x0802320c
 80120d0:	080234c0 	.word	0x080234c0
 80120d4:	080234dc 	.word	0x080234dc
 80120d8:	2000ec34 	.word	0x2000ec34
 80120dc:	2000ec3c 	.word	0x2000ec3c
 80120e0:	2000ec44 	.word	0x2000ec44

080120e4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80120e4:	b5b0      	push	{r4, r5, r7, lr}
 80120e6:	b090      	sub	sp, #64	@ 0x40
 80120e8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80120ea:	2300      	movs	r3, #0
 80120ec:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80120f0:	4b95      	ldr	r3, [pc, #596]	@ (8012348 <tcp_slowtmr+0x264>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	3301      	adds	r3, #1
 80120f6:	4a94      	ldr	r2, [pc, #592]	@ (8012348 <tcp_slowtmr+0x264>)
 80120f8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80120fa:	4b94      	ldr	r3, [pc, #592]	@ (801234c <tcp_slowtmr+0x268>)
 80120fc:	781b      	ldrb	r3, [r3, #0]
 80120fe:	3301      	adds	r3, #1
 8012100:	b2da      	uxtb	r2, r3
 8012102:	4b92      	ldr	r3, [pc, #584]	@ (801234c <tcp_slowtmr+0x268>)
 8012104:	701a      	strb	r2, [r3, #0]
 8012106:	e000      	b.n	801210a <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8012108:	bf00      	nop
  prev = NULL;
 801210a:	2300      	movs	r3, #0
 801210c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 801210e:	4b90      	ldr	r3, [pc, #576]	@ (8012350 <tcp_slowtmr+0x26c>)
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012114:	e29f      	b.n	8012656 <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012118:	7d1b      	ldrb	r3, [r3, #20]
 801211a:	2b00      	cmp	r3, #0
 801211c:	d106      	bne.n	801212c <tcp_slowtmr+0x48>
 801211e:	4b8d      	ldr	r3, [pc, #564]	@ (8012354 <tcp_slowtmr+0x270>)
 8012120:	f240 42be 	movw	r2, #1214	@ 0x4be
 8012124:	498c      	ldr	r1, [pc, #560]	@ (8012358 <tcp_slowtmr+0x274>)
 8012126:	488d      	ldr	r0, [pc, #564]	@ (801235c <tcp_slowtmr+0x278>)
 8012128:	f00b fe30 	bl	801dd8c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801212c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801212e:	7d1b      	ldrb	r3, [r3, #20]
 8012130:	2b01      	cmp	r3, #1
 8012132:	d106      	bne.n	8012142 <tcp_slowtmr+0x5e>
 8012134:	4b87      	ldr	r3, [pc, #540]	@ (8012354 <tcp_slowtmr+0x270>)
 8012136:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 801213a:	4989      	ldr	r1, [pc, #548]	@ (8012360 <tcp_slowtmr+0x27c>)
 801213c:	4887      	ldr	r0, [pc, #540]	@ (801235c <tcp_slowtmr+0x278>)
 801213e:	f00b fe25 	bl	801dd8c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012142:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012144:	7d1b      	ldrb	r3, [r3, #20]
 8012146:	2b0a      	cmp	r3, #10
 8012148:	d106      	bne.n	8012158 <tcp_slowtmr+0x74>
 801214a:	4b82      	ldr	r3, [pc, #520]	@ (8012354 <tcp_slowtmr+0x270>)
 801214c:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8012150:	4984      	ldr	r1, [pc, #528]	@ (8012364 <tcp_slowtmr+0x280>)
 8012152:	4882      	ldr	r0, [pc, #520]	@ (801235c <tcp_slowtmr+0x278>)
 8012154:	f00b fe1a 	bl	801dd8c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801215a:	7f9a      	ldrb	r2, [r3, #30]
 801215c:	4b7b      	ldr	r3, [pc, #492]	@ (801234c <tcp_slowtmr+0x268>)
 801215e:	781b      	ldrb	r3, [r3, #0]
 8012160:	429a      	cmp	r2, r3
 8012162:	d105      	bne.n	8012170 <tcp_slowtmr+0x8c>
      prev = pcb;
 8012164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012166:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012168:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801216a:	68db      	ldr	r3, [r3, #12]
 801216c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 801216e:	e272      	b.n	8012656 <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8012170:	4b76      	ldr	r3, [pc, #472]	@ (801234c <tcp_slowtmr+0x268>)
 8012172:	781a      	ldrb	r2, [r3, #0]
 8012174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012176:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8012178:	2300      	movs	r3, #0
 801217a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 801217e:	2300      	movs	r3, #0
 8012180:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012184:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012186:	7d1b      	ldrb	r3, [r3, #20]
 8012188:	2b02      	cmp	r3, #2
 801218a:	d10a      	bne.n	80121a2 <tcp_slowtmr+0xbe>
 801218c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801218e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012192:	2b05      	cmp	r3, #5
 8012194:	d905      	bls.n	80121a2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 8012196:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801219a:	3301      	adds	r3, #1
 801219c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80121a0:	e11e      	b.n	80123e0 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80121a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121a4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80121a8:	2b0b      	cmp	r3, #11
 80121aa:	d905      	bls.n	80121b8 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80121ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80121b0:	3301      	adds	r3, #1
 80121b2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80121b6:	e113      	b.n	80123e0 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80121b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121ba:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d075      	beq.n	80122ae <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80121c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d006      	beq.n	80121d8 <tcp_slowtmr+0xf4>
 80121ca:	4b62      	ldr	r3, [pc, #392]	@ (8012354 <tcp_slowtmr+0x270>)
 80121cc:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80121d0:	4965      	ldr	r1, [pc, #404]	@ (8012368 <tcp_slowtmr+0x284>)
 80121d2:	4862      	ldr	r0, [pc, #392]	@ (801235c <tcp_slowtmr+0x278>)
 80121d4:	f00b fdda 	bl	801dd8c <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80121d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80121dc:	2b00      	cmp	r3, #0
 80121de:	d106      	bne.n	80121ee <tcp_slowtmr+0x10a>
 80121e0:	4b5c      	ldr	r3, [pc, #368]	@ (8012354 <tcp_slowtmr+0x270>)
 80121e2:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80121e6:	4961      	ldr	r1, [pc, #388]	@ (801236c <tcp_slowtmr+0x288>)
 80121e8:	485c      	ldr	r0, [pc, #368]	@ (801235c <tcp_slowtmr+0x278>)
 80121ea:	f00b fdcf 	bl	801dd8c <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80121ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121f0:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80121f4:	2b0b      	cmp	r3, #11
 80121f6:	d905      	bls.n	8012204 <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80121f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80121fc:	3301      	adds	r3, #1
 80121fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8012202:	e0ed      	b.n	80123e0 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8012204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012206:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801220a:	3b01      	subs	r3, #1
 801220c:	4a58      	ldr	r2, [pc, #352]	@ (8012370 <tcp_slowtmr+0x28c>)
 801220e:	5cd3      	ldrb	r3, [r2, r3]
 8012210:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8012212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012214:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012218:	7c7a      	ldrb	r2, [r7, #17]
 801221a:	429a      	cmp	r2, r3
 801221c:	d907      	bls.n	801222e <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 801221e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012220:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012224:	3301      	adds	r3, #1
 8012226:	b2da      	uxtb	r2, r3
 8012228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801222a:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 801222e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012230:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8012234:	7c7a      	ldrb	r2, [r7, #17]
 8012236:	429a      	cmp	r2, r3
 8012238:	f200 80d2 	bhi.w	80123e0 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 801223c:	2301      	movs	r3, #1
 801223e:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8012240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012242:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012246:	2b00      	cmp	r3, #0
 8012248:	d108      	bne.n	801225c <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801224a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801224c:	f005 f94a 	bl	80174e4 <tcp_zero_window_probe>
 8012250:	4603      	mov	r3, r0
 8012252:	2b00      	cmp	r3, #0
 8012254:	d014      	beq.n	8012280 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 8012256:	2300      	movs	r3, #0
 8012258:	623b      	str	r3, [r7, #32]
 801225a:	e011      	b.n	8012280 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801225c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801225e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8012262:	4619      	mov	r1, r3
 8012264:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012266:	f004 f80f 	bl	8016288 <tcp_split_unsent_seg>
 801226a:	4603      	mov	r3, r0
 801226c:	2b00      	cmp	r3, #0
 801226e:	d107      	bne.n	8012280 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8012270:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012272:	f004 fa8f 	bl	8016794 <tcp_output>
 8012276:	4603      	mov	r3, r0
 8012278:	2b00      	cmp	r3, #0
 801227a:	d101      	bne.n	8012280 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 801227c:	2300      	movs	r3, #0
 801227e:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8012280:	6a3b      	ldr	r3, [r7, #32]
 8012282:	2b00      	cmp	r3, #0
 8012284:	f000 80ac 	beq.w	80123e0 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8012288:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801228a:	2200      	movs	r2, #0
 801228c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8012290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012292:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8012296:	2b06      	cmp	r3, #6
 8012298:	f200 80a2 	bhi.w	80123e0 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 801229c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801229e:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80122a2:	3301      	adds	r3, #1
 80122a4:	b2da      	uxtb	r2, r3
 80122a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122a8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80122ac:	e098      	b.n	80123e0 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80122ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80122b4:	2b00      	cmp	r3, #0
 80122b6:	db0f      	blt.n	80122d8 <tcp_slowtmr+0x1f4>
 80122b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122ba:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80122be:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80122c2:	4293      	cmp	r3, r2
 80122c4:	d008      	beq.n	80122d8 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80122c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122c8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80122cc:	b29b      	uxth	r3, r3
 80122ce:	3301      	adds	r3, #1
 80122d0:	b29b      	uxth	r3, r3
 80122d2:	b21a      	sxth	r2, r3
 80122d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122d6:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80122d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122da:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80122de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122e0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80122e4:	429a      	cmp	r2, r3
 80122e6:	db7b      	blt.n	80123e0 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80122e8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80122ea:	f004 fd47 	bl	8016d7c <tcp_rexmit_rto_prepare>
 80122ee:	4603      	mov	r3, r0
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d007      	beq.n	8012304 <tcp_slowtmr+0x220>
 80122f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80122f8:	2b00      	cmp	r3, #0
 80122fa:	d171      	bne.n	80123e0 <tcp_slowtmr+0x2fc>
 80122fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80122fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012300:	2b00      	cmp	r3, #0
 8012302:	d06d      	beq.n	80123e0 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 8012304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012306:	7d1b      	ldrb	r3, [r3, #20]
 8012308:	2b02      	cmp	r3, #2
 801230a:	d03a      	beq.n	8012382 <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801230c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801230e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8012312:	2b0c      	cmp	r3, #12
 8012314:	bf28      	it	cs
 8012316:	230c      	movcs	r3, #12
 8012318:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801231a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801231c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8012320:	10db      	asrs	r3, r3, #3
 8012322:	b21b      	sxth	r3, r3
 8012324:	461a      	mov	r2, r3
 8012326:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012328:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801232c:	4413      	add	r3, r2
 801232e:	7efa      	ldrb	r2, [r7, #27]
 8012330:	4910      	ldr	r1, [pc, #64]	@ (8012374 <tcp_slowtmr+0x290>)
 8012332:	5c8a      	ldrb	r2, [r1, r2]
 8012334:	4093      	lsls	r3, r2
 8012336:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 801233e:	4293      	cmp	r3, r2
 8012340:	dc1a      	bgt.n	8012378 <tcp_slowtmr+0x294>
 8012342:	697b      	ldr	r3, [r7, #20]
 8012344:	b21a      	sxth	r2, r3
 8012346:	e019      	b.n	801237c <tcp_slowtmr+0x298>
 8012348:	2000ec30 	.word	0x2000ec30
 801234c:	2000ec46 	.word	0x2000ec46
 8012350:	2000ec3c 	.word	0x2000ec3c
 8012354:	080231c8 	.word	0x080231c8
 8012358:	0802350c 	.word	0x0802350c
 801235c:	0802320c 	.word	0x0802320c
 8012360:	08023538 	.word	0x08023538
 8012364:	08023564 	.word	0x08023564
 8012368:	08023594 	.word	0x08023594
 801236c:	080235c8 	.word	0x080235c8
 8012370:	080256f8 	.word	0x080256f8
 8012374:	080256e8 	.word	0x080256e8
 8012378:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 801237c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801237e:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 8012382:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012384:	2200      	movs	r2, #0
 8012386:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012388:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801238a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801238e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012390:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8012394:	4293      	cmp	r3, r2
 8012396:	bf28      	it	cs
 8012398:	4613      	movcs	r3, r2
 801239a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801239c:	8a7b      	ldrh	r3, [r7, #18]
 801239e:	085b      	lsrs	r3, r3, #1
 80123a0:	b29a      	uxth	r2, r3
 80123a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123a4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80123a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123aa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80123ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80123b2:	005b      	lsls	r3, r3, #1
 80123b4:	b29b      	uxth	r3, r3
 80123b6:	429a      	cmp	r2, r3
 80123b8:	d206      	bcs.n	80123c8 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80123ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80123be:	005b      	lsls	r3, r3, #1
 80123c0:	b29a      	uxth	r2, r3
 80123c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123c4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80123c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123ca:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80123cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123ce:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80123d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123d4:	2200      	movs	r2, #0
 80123d6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80123da:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80123dc:	f004 fd3e 	bl	8016e5c <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80123e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123e2:	7d1b      	ldrb	r3, [r3, #20]
 80123e4:	2b06      	cmp	r3, #6
 80123e6:	d111      	bne.n	801240c <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80123e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123ea:	8b5b      	ldrh	r3, [r3, #26]
 80123ec:	f003 0310 	and.w	r3, r3, #16
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d00b      	beq.n	801240c <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80123f4:	4b9d      	ldr	r3, [pc, #628]	@ (801266c <tcp_slowtmr+0x588>)
 80123f6:	681a      	ldr	r2, [r3, #0]
 80123f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123fa:	6a1b      	ldr	r3, [r3, #32]
 80123fc:	1ad3      	subs	r3, r2, r3
 80123fe:	2b28      	cmp	r3, #40	@ 0x28
 8012400:	d904      	bls.n	801240c <tcp_slowtmr+0x328>
          ++pcb_remove;
 8012402:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012406:	3301      	adds	r3, #1
 8012408:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801240c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801240e:	7a5b      	ldrb	r3, [r3, #9]
 8012410:	f003 0308 	and.w	r3, r3, #8
 8012414:	2b00      	cmp	r3, #0
 8012416:	d04c      	beq.n	80124b2 <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8012418:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801241a:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801241c:	2b04      	cmp	r3, #4
 801241e:	d003      	beq.n	8012428 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8012420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012422:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012424:	2b07      	cmp	r3, #7
 8012426:	d144      	bne.n	80124b2 <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012428:	4b90      	ldr	r3, [pc, #576]	@ (801266c <tcp_slowtmr+0x588>)
 801242a:	681a      	ldr	r2, [r3, #0]
 801242c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801242e:	6a1b      	ldr	r3, [r3, #32]
 8012430:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012432:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012434:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012438:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 801243c:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8012440:	498b      	ldr	r1, [pc, #556]	@ (8012670 <tcp_slowtmr+0x58c>)
 8012442:	fba1 1303 	umull	r1, r3, r1, r3
 8012446:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012448:	429a      	cmp	r2, r3
 801244a:	d90a      	bls.n	8012462 <tcp_slowtmr+0x37e>
        ++pcb_remove;
 801244c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012450:	3301      	adds	r3, #1
 8012452:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 8012456:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801245a:	3301      	adds	r3, #1
 801245c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8012460:	e027      	b.n	80124b2 <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012462:	4b82      	ldr	r3, [pc, #520]	@ (801266c <tcp_slowtmr+0x588>)
 8012464:	681a      	ldr	r2, [r3, #0]
 8012466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012468:	6a1b      	ldr	r3, [r3, #32]
 801246a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801246c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801246e:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 8012472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012474:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8012478:	4618      	mov	r0, r3
 801247a:	4b7e      	ldr	r3, [pc, #504]	@ (8012674 <tcp_slowtmr+0x590>)
 801247c:	fb00 f303 	mul.w	r3, r0, r3
 8012480:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012482:	497b      	ldr	r1, [pc, #492]	@ (8012670 <tcp_slowtmr+0x58c>)
 8012484:	fba1 1303 	umull	r1, r3, r1, r3
 8012488:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801248a:	429a      	cmp	r2, r3
 801248c:	d911      	bls.n	80124b2 <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 801248e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012490:	f004 ffe8 	bl	8017464 <tcp_keepalive>
 8012494:	4603      	mov	r3, r0
 8012496:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 801249a:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d107      	bne.n	80124b2 <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 80124a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124a4:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80124a8:	3301      	adds	r3, #1
 80124aa:	b2da      	uxtb	r2, r3
 80124ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124ae:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80124b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d011      	beq.n	80124de <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80124ba:	4b6c      	ldr	r3, [pc, #432]	@ (801266c <tcp_slowtmr+0x588>)
 80124bc:	681a      	ldr	r2, [r3, #0]
 80124be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124c0:	6a1b      	ldr	r3, [r3, #32]
 80124c2:	1ad2      	subs	r2, r2, r3
 80124c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124c6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80124ca:	4619      	mov	r1, r3
 80124cc:	460b      	mov	r3, r1
 80124ce:	005b      	lsls	r3, r3, #1
 80124d0:	440b      	add	r3, r1
 80124d2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80124d4:	429a      	cmp	r2, r3
 80124d6:	d302      	bcc.n	80124de <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 80124d8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80124da:	f000 fea9 	bl	8013230 <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80124de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124e0:	7d1b      	ldrb	r3, [r3, #20]
 80124e2:	2b03      	cmp	r3, #3
 80124e4:	d10b      	bne.n	80124fe <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80124e6:	4b61      	ldr	r3, [pc, #388]	@ (801266c <tcp_slowtmr+0x588>)
 80124e8:	681a      	ldr	r2, [r3, #0]
 80124ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124ec:	6a1b      	ldr	r3, [r3, #32]
 80124ee:	1ad3      	subs	r3, r2, r3
 80124f0:	2b28      	cmp	r3, #40	@ 0x28
 80124f2:	d904      	bls.n	80124fe <tcp_slowtmr+0x41a>
        ++pcb_remove;
 80124f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80124f8:	3301      	adds	r3, #1
 80124fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80124fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012500:	7d1b      	ldrb	r3, [r3, #20]
 8012502:	2b09      	cmp	r3, #9
 8012504:	d10b      	bne.n	801251e <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012506:	4b59      	ldr	r3, [pc, #356]	@ (801266c <tcp_slowtmr+0x588>)
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801250c:	6a1b      	ldr	r3, [r3, #32]
 801250e:	1ad3      	subs	r3, r2, r3
 8012510:	2bf0      	cmp	r3, #240	@ 0xf0
 8012512:	d904      	bls.n	801251e <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8012514:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012518:	3301      	adds	r3, #1
 801251a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 801251e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8012522:	2b00      	cmp	r3, #0
 8012524:	d060      	beq.n	80125e8 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8012526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801252c:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 801252e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8012530:	f000 fcca 	bl	8012ec8 <tcp_pcb_purge>
      if (prev != NULL) {
 8012534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012536:	2b00      	cmp	r3, #0
 8012538:	d010      	beq.n	801255c <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801253a:	4b4f      	ldr	r3, [pc, #316]	@ (8012678 <tcp_slowtmr+0x594>)
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012540:	429a      	cmp	r2, r3
 8012542:	d106      	bne.n	8012552 <tcp_slowtmr+0x46e>
 8012544:	4b4d      	ldr	r3, [pc, #308]	@ (801267c <tcp_slowtmr+0x598>)
 8012546:	f240 526d 	movw	r2, #1389	@ 0x56d
 801254a:	494d      	ldr	r1, [pc, #308]	@ (8012680 <tcp_slowtmr+0x59c>)
 801254c:	484d      	ldr	r0, [pc, #308]	@ (8012684 <tcp_slowtmr+0x5a0>)
 801254e:	f00b fc1d 	bl	801dd8c <iprintf>
        prev->next = pcb->next;
 8012552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012554:	68da      	ldr	r2, [r3, #12]
 8012556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012558:	60da      	str	r2, [r3, #12]
 801255a:	e00f      	b.n	801257c <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801255c:	4b46      	ldr	r3, [pc, #280]	@ (8012678 <tcp_slowtmr+0x594>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012562:	429a      	cmp	r2, r3
 8012564:	d006      	beq.n	8012574 <tcp_slowtmr+0x490>
 8012566:	4b45      	ldr	r3, [pc, #276]	@ (801267c <tcp_slowtmr+0x598>)
 8012568:	f240 5271 	movw	r2, #1393	@ 0x571
 801256c:	4946      	ldr	r1, [pc, #280]	@ (8012688 <tcp_slowtmr+0x5a4>)
 801256e:	4845      	ldr	r0, [pc, #276]	@ (8012684 <tcp_slowtmr+0x5a0>)
 8012570:	f00b fc0c 	bl	801dd8c <iprintf>
        tcp_active_pcbs = pcb->next;
 8012574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012576:	68db      	ldr	r3, [r3, #12]
 8012578:	4a3f      	ldr	r2, [pc, #252]	@ (8012678 <tcp_slowtmr+0x594>)
 801257a:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 801257c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012580:	2b00      	cmp	r3, #0
 8012582:	d013      	beq.n	80125ac <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012584:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012586:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8012588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801258a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801258c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 801258e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012590:	3304      	adds	r3, #4
 8012592:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012594:	8ad2      	ldrh	r2, [r2, #22]
 8012596:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012598:	8b09      	ldrh	r1, [r1, #24]
 801259a:	9102      	str	r1, [sp, #8]
 801259c:	9201      	str	r2, [sp, #4]
 801259e:	9300      	str	r3, [sp, #0]
 80125a0:	462b      	mov	r3, r5
 80125a2:	4622      	mov	r2, r4
 80125a4:	4601      	mov	r1, r0
 80125a6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80125a8:	f004 fea8 	bl	80172fc <tcp_rst>
      err_arg = pcb->callback_arg;
 80125ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125ae:	691b      	ldr	r3, [r3, #16]
 80125b0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80125b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125b4:	7d1b      	ldrb	r3, [r3, #20]
 80125b6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80125b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125ba:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80125bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125be:	68db      	ldr	r3, [r3, #12]
 80125c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 80125c2:	6838      	ldr	r0, [r7, #0]
 80125c4:	f7ff f836 	bl	8011634 <tcp_free>
      tcp_active_pcbs_changed = 0;
 80125c8:	4b30      	ldr	r3, [pc, #192]	@ (801268c <tcp_slowtmr+0x5a8>)
 80125ca:	2200      	movs	r2, #0
 80125cc:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80125ce:	68fb      	ldr	r3, [r7, #12]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d004      	beq.n	80125de <tcp_slowtmr+0x4fa>
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	f06f 010c 	mvn.w	r1, #12
 80125da:	68b8      	ldr	r0, [r7, #8]
 80125dc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80125de:	4b2b      	ldr	r3, [pc, #172]	@ (801268c <tcp_slowtmr+0x5a8>)
 80125e0:	781b      	ldrb	r3, [r3, #0]
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d037      	beq.n	8012656 <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 80125e6:	e590      	b.n	801210a <tcp_slowtmr+0x26>
      prev = pcb;
 80125e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 80125ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125ee:	68db      	ldr	r3, [r3, #12]
 80125f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 80125f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125f4:	7f1b      	ldrb	r3, [r3, #28]
 80125f6:	3301      	adds	r3, #1
 80125f8:	b2da      	uxtb	r2, r3
 80125fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80125fc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80125fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012600:	7f1a      	ldrb	r2, [r3, #28]
 8012602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012604:	7f5b      	ldrb	r3, [r3, #29]
 8012606:	429a      	cmp	r2, r3
 8012608:	d325      	bcc.n	8012656 <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 801260a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801260c:	2200      	movs	r2, #0
 801260e:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8012610:	4b1e      	ldr	r3, [pc, #120]	@ (801268c <tcp_slowtmr+0x5a8>)
 8012612:	2200      	movs	r2, #0
 8012614:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012616:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801261c:	2b00      	cmp	r3, #0
 801261e:	d00b      	beq.n	8012638 <tcp_slowtmr+0x554>
 8012620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012622:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8012626:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012628:	6912      	ldr	r2, [r2, #16]
 801262a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801262c:	4610      	mov	r0, r2
 801262e:	4798      	blx	r3
 8012630:	4603      	mov	r3, r0
 8012632:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8012636:	e002      	b.n	801263e <tcp_slowtmr+0x55a>
 8012638:	2300      	movs	r3, #0
 801263a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 801263e:	4b13      	ldr	r3, [pc, #76]	@ (801268c <tcp_slowtmr+0x5a8>)
 8012640:	781b      	ldrb	r3, [r3, #0]
 8012642:	2b00      	cmp	r3, #0
 8012644:	f47f ad60 	bne.w	8012108 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012648:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 801264c:	2b00      	cmp	r3, #0
 801264e:	d102      	bne.n	8012656 <tcp_slowtmr+0x572>
          tcp_output(prev);
 8012650:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012652:	f004 f89f 	bl	8016794 <tcp_output>
  while (pcb != NULL) {
 8012656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012658:	2b00      	cmp	r3, #0
 801265a:	f47f ad5c 	bne.w	8012116 <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801265e:	2300      	movs	r3, #0
 8012660:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8012662:	4b0b      	ldr	r3, [pc, #44]	@ (8012690 <tcp_slowtmr+0x5ac>)
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8012668:	e067      	b.n	801273a <tcp_slowtmr+0x656>
 801266a:	bf00      	nop
 801266c:	2000ec30 	.word	0x2000ec30
 8012670:	10624dd3 	.word	0x10624dd3
 8012674:	000124f8 	.word	0x000124f8
 8012678:	2000ec3c 	.word	0x2000ec3c
 801267c:	080231c8 	.word	0x080231c8
 8012680:	08023600 	.word	0x08023600
 8012684:	0802320c 	.word	0x0802320c
 8012688:	0802362c 	.word	0x0802362c
 801268c:	2000ec44 	.word	0x2000ec44
 8012690:	2000ec40 	.word	0x2000ec40
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012696:	7d1b      	ldrb	r3, [r3, #20]
 8012698:	2b0a      	cmp	r3, #10
 801269a:	d006      	beq.n	80126aa <tcp_slowtmr+0x5c6>
 801269c:	4b2b      	ldr	r3, [pc, #172]	@ (801274c <tcp_slowtmr+0x668>)
 801269e:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 80126a2:	492b      	ldr	r1, [pc, #172]	@ (8012750 <tcp_slowtmr+0x66c>)
 80126a4:	482b      	ldr	r0, [pc, #172]	@ (8012754 <tcp_slowtmr+0x670>)
 80126a6:	f00b fb71 	bl	801dd8c <iprintf>
    pcb_remove = 0;
 80126aa:	2300      	movs	r3, #0
 80126ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80126b0:	4b29      	ldr	r3, [pc, #164]	@ (8012758 <tcp_slowtmr+0x674>)
 80126b2:	681a      	ldr	r2, [r3, #0]
 80126b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126b6:	6a1b      	ldr	r3, [r3, #32]
 80126b8:	1ad3      	subs	r3, r2, r3
 80126ba:	2bf0      	cmp	r3, #240	@ 0xf0
 80126bc:	d904      	bls.n	80126c8 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 80126be:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80126c2:	3301      	adds	r3, #1
 80126c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80126c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d02f      	beq.n	8012730 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80126d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80126d2:	f000 fbf9 	bl	8012ec8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80126d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d010      	beq.n	80126fe <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80126dc:	4b1f      	ldr	r3, [pc, #124]	@ (801275c <tcp_slowtmr+0x678>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80126e2:	429a      	cmp	r2, r3
 80126e4:	d106      	bne.n	80126f4 <tcp_slowtmr+0x610>
 80126e6:	4b19      	ldr	r3, [pc, #100]	@ (801274c <tcp_slowtmr+0x668>)
 80126e8:	f240 52af 	movw	r2, #1455	@ 0x5af
 80126ec:	491c      	ldr	r1, [pc, #112]	@ (8012760 <tcp_slowtmr+0x67c>)
 80126ee:	4819      	ldr	r0, [pc, #100]	@ (8012754 <tcp_slowtmr+0x670>)
 80126f0:	f00b fb4c 	bl	801dd8c <iprintf>
        prev->next = pcb->next;
 80126f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80126f6:	68da      	ldr	r2, [r3, #12]
 80126f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126fa:	60da      	str	r2, [r3, #12]
 80126fc:	e00f      	b.n	801271e <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80126fe:	4b17      	ldr	r3, [pc, #92]	@ (801275c <tcp_slowtmr+0x678>)
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012704:	429a      	cmp	r2, r3
 8012706:	d006      	beq.n	8012716 <tcp_slowtmr+0x632>
 8012708:	4b10      	ldr	r3, [pc, #64]	@ (801274c <tcp_slowtmr+0x668>)
 801270a:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 801270e:	4915      	ldr	r1, [pc, #84]	@ (8012764 <tcp_slowtmr+0x680>)
 8012710:	4810      	ldr	r0, [pc, #64]	@ (8012754 <tcp_slowtmr+0x670>)
 8012712:	f00b fb3b 	bl	801dd8c <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012718:	68db      	ldr	r3, [r3, #12]
 801271a:	4a10      	ldr	r2, [pc, #64]	@ (801275c <tcp_slowtmr+0x678>)
 801271c:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801271e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012720:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012724:	68db      	ldr	r3, [r3, #12]
 8012726:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8012728:	69f8      	ldr	r0, [r7, #28]
 801272a:	f7fe ff83 	bl	8011634 <tcp_free>
 801272e:	e004      	b.n	801273a <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8012730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012732:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8012734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012736:	68db      	ldr	r3, [r3, #12]
 8012738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801273a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801273c:	2b00      	cmp	r3, #0
 801273e:	d1a9      	bne.n	8012694 <tcp_slowtmr+0x5b0>
    }
  }
}
 8012740:	bf00      	nop
 8012742:	bf00      	nop
 8012744:	3730      	adds	r7, #48	@ 0x30
 8012746:	46bd      	mov	sp, r7
 8012748:	bdb0      	pop	{r4, r5, r7, pc}
 801274a:	bf00      	nop
 801274c:	080231c8 	.word	0x080231c8
 8012750:	08023658 	.word	0x08023658
 8012754:	0802320c 	.word	0x0802320c
 8012758:	2000ec30 	.word	0x2000ec30
 801275c:	2000ec40 	.word	0x2000ec40
 8012760:	08023688 	.word	0x08023688
 8012764:	080236b0 	.word	0x080236b0

08012768 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b082      	sub	sp, #8
 801276c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801276e:	4b2d      	ldr	r3, [pc, #180]	@ (8012824 <tcp_fasttmr+0xbc>)
 8012770:	781b      	ldrb	r3, [r3, #0]
 8012772:	3301      	adds	r3, #1
 8012774:	b2da      	uxtb	r2, r3
 8012776:	4b2b      	ldr	r3, [pc, #172]	@ (8012824 <tcp_fasttmr+0xbc>)
 8012778:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801277a:	4b2b      	ldr	r3, [pc, #172]	@ (8012828 <tcp_fasttmr+0xc0>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012780:	e048      	b.n	8012814 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	7f9a      	ldrb	r2, [r3, #30]
 8012786:	4b27      	ldr	r3, [pc, #156]	@ (8012824 <tcp_fasttmr+0xbc>)
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	429a      	cmp	r2, r3
 801278c:	d03f      	beq.n	801280e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801278e:	4b25      	ldr	r3, [pc, #148]	@ (8012824 <tcp_fasttmr+0xbc>)
 8012790:	781a      	ldrb	r2, [r3, #0]
 8012792:	687b      	ldr	r3, [r7, #4]
 8012794:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	8b5b      	ldrh	r3, [r3, #26]
 801279a:	f003 0301 	and.w	r3, r3, #1
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d010      	beq.n	80127c4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 80127a2:	687b      	ldr	r3, [r7, #4]
 80127a4:	8b5b      	ldrh	r3, [r3, #26]
 80127a6:	f043 0302 	orr.w	r3, r3, #2
 80127aa:	b29a      	uxth	r2, r3
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f003 ffef 	bl	8016794 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	8b5b      	ldrh	r3, [r3, #26]
 80127ba:	f023 0303 	bic.w	r3, r3, #3
 80127be:	b29a      	uxth	r2, r3
 80127c0:	687b      	ldr	r3, [r7, #4]
 80127c2:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80127c4:	687b      	ldr	r3, [r7, #4]
 80127c6:	8b5b      	ldrh	r3, [r3, #26]
 80127c8:	f003 0308 	and.w	r3, r3, #8
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d009      	beq.n	80127e4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	8b5b      	ldrh	r3, [r3, #26]
 80127d4:	f023 0308 	bic.w	r3, r3, #8
 80127d8:	b29a      	uxth	r2, r3
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80127de:	6878      	ldr	r0, [r7, #4]
 80127e0:	f7ff f8bc 	bl	801195c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	68db      	ldr	r3, [r3, #12]
 80127e8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d00a      	beq.n	8012808 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80127f2:	4b0e      	ldr	r3, [pc, #56]	@ (801282c <tcp_fasttmr+0xc4>)
 80127f4:	2200      	movs	r2, #0
 80127f6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80127f8:	6878      	ldr	r0, [r7, #4]
 80127fa:	f000 f819 	bl	8012830 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80127fe:	4b0b      	ldr	r3, [pc, #44]	@ (801282c <tcp_fasttmr+0xc4>)
 8012800:	781b      	ldrb	r3, [r3, #0]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d000      	beq.n	8012808 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012806:	e7b8      	b.n	801277a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	607b      	str	r3, [r7, #4]
 801280c:	e002      	b.n	8012814 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	68db      	ldr	r3, [r3, #12]
 8012812:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	2b00      	cmp	r3, #0
 8012818:	d1b3      	bne.n	8012782 <tcp_fasttmr+0x1a>
    }
  }
}
 801281a:	bf00      	nop
 801281c:	bf00      	nop
 801281e:	3708      	adds	r7, #8
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}
 8012824:	2000ec46 	.word	0x2000ec46
 8012828:	2000ec3c 	.word	0x2000ec3c
 801282c:	2000ec44 	.word	0x2000ec44

08012830 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012830:	b590      	push	{r4, r7, lr}
 8012832:	b085      	sub	sp, #20
 8012834:	af00      	add	r7, sp, #0
 8012836:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d109      	bne.n	8012852 <tcp_process_refused_data+0x22>
 801283e:	4b37      	ldr	r3, [pc, #220]	@ (801291c <tcp_process_refused_data+0xec>)
 8012840:	f240 6209 	movw	r2, #1545	@ 0x609
 8012844:	4936      	ldr	r1, [pc, #216]	@ (8012920 <tcp_process_refused_data+0xf0>)
 8012846:	4837      	ldr	r0, [pc, #220]	@ (8012924 <tcp_process_refused_data+0xf4>)
 8012848:	f00b faa0 	bl	801dd8c <iprintf>
 801284c:	f06f 030f 	mvn.w	r3, #15
 8012850:	e060      	b.n	8012914 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012856:	7b5b      	ldrb	r3, [r3, #13]
 8012858:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801285a:	687b      	ldr	r3, [r7, #4]
 801285c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801285e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2200      	movs	r2, #0
 8012864:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801286c:	2b00      	cmp	r3, #0
 801286e:	d00b      	beq.n	8012888 <tcp_process_refused_data+0x58>
 8012870:	687b      	ldr	r3, [r7, #4]
 8012872:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8012876:	687b      	ldr	r3, [r7, #4]
 8012878:	6918      	ldr	r0, [r3, #16]
 801287a:	2300      	movs	r3, #0
 801287c:	68ba      	ldr	r2, [r7, #8]
 801287e:	6879      	ldr	r1, [r7, #4]
 8012880:	47a0      	blx	r4
 8012882:	4603      	mov	r3, r0
 8012884:	73fb      	strb	r3, [r7, #15]
 8012886:	e007      	b.n	8012898 <tcp_process_refused_data+0x68>
 8012888:	2300      	movs	r3, #0
 801288a:	68ba      	ldr	r2, [r7, #8]
 801288c:	6879      	ldr	r1, [r7, #4]
 801288e:	2000      	movs	r0, #0
 8012890:	f000 f8a4 	bl	80129dc <tcp_recv_null>
 8012894:	4603      	mov	r3, r0
 8012896:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012898:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d12a      	bne.n	80128f6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80128a0:	7bbb      	ldrb	r3, [r7, #14]
 80128a2:	f003 0320 	and.w	r3, r3, #32
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d033      	beq.n	8012912 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80128ae:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 80128b2:	d005      	beq.n	80128c0 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80128b8:	3301      	adds	r3, #1
 80128ba:	b29a      	uxth	r2, r3
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80128c0:	687b      	ldr	r3, [r7, #4]
 80128c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d00b      	beq.n	80128e2 <tcp_process_refused_data+0xb2>
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	6918      	ldr	r0, [r3, #16]
 80128d4:	2300      	movs	r3, #0
 80128d6:	2200      	movs	r2, #0
 80128d8:	6879      	ldr	r1, [r7, #4]
 80128da:	47a0      	blx	r4
 80128dc:	4603      	mov	r3, r0
 80128de:	73fb      	strb	r3, [r7, #15]
 80128e0:	e001      	b.n	80128e6 <tcp_process_refused_data+0xb6>
 80128e2:	2300      	movs	r3, #0
 80128e4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80128e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128ea:	f113 0f0d 	cmn.w	r3, #13
 80128ee:	d110      	bne.n	8012912 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 80128f0:	f06f 030c 	mvn.w	r3, #12
 80128f4:	e00e      	b.n	8012914 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 80128f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128fa:	f113 0f0d 	cmn.w	r3, #13
 80128fe:	d102      	bne.n	8012906 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012900:	f06f 030c 	mvn.w	r3, #12
 8012904:	e006      	b.n	8012914 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	68ba      	ldr	r2, [r7, #8]
 801290a:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 801290c:	f06f 0304 	mvn.w	r3, #4
 8012910:	e000      	b.n	8012914 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8012912:	2300      	movs	r3, #0
}
 8012914:	4618      	mov	r0, r3
 8012916:	3714      	adds	r7, #20
 8012918:	46bd      	mov	sp, r7
 801291a:	bd90      	pop	{r4, r7, pc}
 801291c:	080231c8 	.word	0x080231c8
 8012920:	080236d8 	.word	0x080236d8
 8012924:	0802320c 	.word	0x0802320c

08012928 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012928:	b580      	push	{r7, lr}
 801292a:	b084      	sub	sp, #16
 801292c:	af00      	add	r7, sp, #0
 801292e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012930:	e007      	b.n	8012942 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012938:	6878      	ldr	r0, [r7, #4]
 801293a:	f000 f80a 	bl	8012952 <tcp_seg_free>
    seg = next;
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d1f4      	bne.n	8012932 <tcp_segs_free+0xa>
  }
}
 8012948:	bf00      	nop
 801294a:	bf00      	nop
 801294c:	3710      	adds	r7, #16
 801294e:	46bd      	mov	sp, r7
 8012950:	bd80      	pop	{r7, pc}

08012952 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012952:	b580      	push	{r7, lr}
 8012954:	b082      	sub	sp, #8
 8012956:	af00      	add	r7, sp, #0
 8012958:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d00c      	beq.n	801297a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	685b      	ldr	r3, [r3, #4]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d004      	beq.n	8012972 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	685b      	ldr	r3, [r3, #4]
 801296c:	4618      	mov	r0, r3
 801296e:	f7fe fa4b 	bl	8010e08 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012972:	6879      	ldr	r1, [r7, #4]
 8012974:	2003      	movs	r0, #3
 8012976:	f7fd fb65 	bl	8010044 <memp_free>
  }
}
 801297a:	bf00      	nop
 801297c:	3708      	adds	r7, #8
 801297e:	46bd      	mov	sp, r7
 8012980:	bd80      	pop	{r7, pc}
	...

08012984 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012984:	b580      	push	{r7, lr}
 8012986:	b084      	sub	sp, #16
 8012988:	af00      	add	r7, sp, #0
 801298a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d106      	bne.n	80129a0 <tcp_seg_copy+0x1c>
 8012992:	4b0f      	ldr	r3, [pc, #60]	@ (80129d0 <tcp_seg_copy+0x4c>)
 8012994:	f240 6282 	movw	r2, #1666	@ 0x682
 8012998:	490e      	ldr	r1, [pc, #56]	@ (80129d4 <tcp_seg_copy+0x50>)
 801299a:	480f      	ldr	r0, [pc, #60]	@ (80129d8 <tcp_seg_copy+0x54>)
 801299c:	f00b f9f6 	bl	801dd8c <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80129a0:	2003      	movs	r0, #3
 80129a2:	f7fd fad9 	bl	800ff58 <memp_malloc>
 80129a6:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	2b00      	cmp	r3, #0
 80129ac:	d101      	bne.n	80129b2 <tcp_seg_copy+0x2e>
    return NULL;
 80129ae:	2300      	movs	r3, #0
 80129b0:	e00a      	b.n	80129c8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80129b2:	2210      	movs	r2, #16
 80129b4:	6879      	ldr	r1, [r7, #4]
 80129b6:	68f8      	ldr	r0, [r7, #12]
 80129b8:	f00b fb6f 	bl	801e09a <memcpy>
  pbuf_ref(cseg->p);
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	685b      	ldr	r3, [r3, #4]
 80129c0:	4618      	mov	r0, r3
 80129c2:	f7fe fac7 	bl	8010f54 <pbuf_ref>
  return cseg;
 80129c6:	68fb      	ldr	r3, [r7, #12]
}
 80129c8:	4618      	mov	r0, r3
 80129ca:	3710      	adds	r7, #16
 80129cc:	46bd      	mov	sp, r7
 80129ce:	bd80      	pop	{r7, pc}
 80129d0:	080231c8 	.word	0x080231c8
 80129d4:	0802371c 	.word	0x0802371c
 80129d8:	0802320c 	.word	0x0802320c

080129dc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b084      	sub	sp, #16
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	60f8      	str	r0, [r7, #12]
 80129e4:	60b9      	str	r1, [r7, #8]
 80129e6:	607a      	str	r2, [r7, #4]
 80129e8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80129ea:	68bb      	ldr	r3, [r7, #8]
 80129ec:	2b00      	cmp	r3, #0
 80129ee:	d109      	bne.n	8012a04 <tcp_recv_null+0x28>
 80129f0:	4b12      	ldr	r3, [pc, #72]	@ (8012a3c <tcp_recv_null+0x60>)
 80129f2:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 80129f6:	4912      	ldr	r1, [pc, #72]	@ (8012a40 <tcp_recv_null+0x64>)
 80129f8:	4812      	ldr	r0, [pc, #72]	@ (8012a44 <tcp_recv_null+0x68>)
 80129fa:	f00b f9c7 	bl	801dd8c <iprintf>
 80129fe:	f06f 030f 	mvn.w	r3, #15
 8012a02:	e016      	b.n	8012a32 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d009      	beq.n	8012a1e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	891b      	ldrh	r3, [r3, #8]
 8012a0e:	4619      	mov	r1, r3
 8012a10:	68b8      	ldr	r0, [r7, #8]
 8012a12:	f7ff f9b9 	bl	8011d88 <tcp_recved>
    pbuf_free(p);
 8012a16:	6878      	ldr	r0, [r7, #4]
 8012a18:	f7fe f9f6 	bl	8010e08 <pbuf_free>
 8012a1c:	e008      	b.n	8012a30 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012a1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d104      	bne.n	8012a30 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012a26:	68b8      	ldr	r0, [r7, #8]
 8012a28:	f7ff f802 	bl	8011a30 <tcp_close>
 8012a2c:	4603      	mov	r3, r0
 8012a2e:	e000      	b.n	8012a32 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012a30:	2300      	movs	r3, #0
}
 8012a32:	4618      	mov	r0, r3
 8012a34:	3710      	adds	r7, #16
 8012a36:	46bd      	mov	sp, r7
 8012a38:	bd80      	pop	{r7, pc}
 8012a3a:	bf00      	nop
 8012a3c:	080231c8 	.word	0x080231c8
 8012a40:	08023738 	.word	0x08023738
 8012a44:	0802320c 	.word	0x0802320c

08012a48 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b086      	sub	sp, #24
 8012a4c:	af00      	add	r7, sp, #0
 8012a4e:	4603      	mov	r3, r0
 8012a50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	db01      	blt.n	8012a5e <tcp_kill_prio+0x16>
 8012a5a:	79fb      	ldrb	r3, [r7, #7]
 8012a5c:	e000      	b.n	8012a60 <tcp_kill_prio+0x18>
 8012a5e:	237f      	movs	r3, #127	@ 0x7f
 8012a60:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012a62:	7afb      	ldrb	r3, [r7, #11]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d034      	beq.n	8012ad2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012a68:	7afb      	ldrb	r3, [r7, #11]
 8012a6a:	3b01      	subs	r3, #1
 8012a6c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012a6e:	2300      	movs	r3, #0
 8012a70:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012a72:	2300      	movs	r3, #0
 8012a74:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a76:	4b19      	ldr	r3, [pc, #100]	@ (8012adc <tcp_kill_prio+0x94>)
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	617b      	str	r3, [r7, #20]
 8012a7c:	e01f      	b.n	8012abe <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012a7e:	697b      	ldr	r3, [r7, #20]
 8012a80:	7d5b      	ldrb	r3, [r3, #21]
 8012a82:	7afa      	ldrb	r2, [r7, #11]
 8012a84:	429a      	cmp	r2, r3
 8012a86:	d80c      	bhi.n	8012aa2 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012a88:	697b      	ldr	r3, [r7, #20]
 8012a8a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012a8c:	7afa      	ldrb	r2, [r7, #11]
 8012a8e:	429a      	cmp	r2, r3
 8012a90:	d112      	bne.n	8012ab8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012a92:	4b13      	ldr	r3, [pc, #76]	@ (8012ae0 <tcp_kill_prio+0x98>)
 8012a94:	681a      	ldr	r2, [r3, #0]
 8012a96:	697b      	ldr	r3, [r7, #20]
 8012a98:	6a1b      	ldr	r3, [r3, #32]
 8012a9a:	1ad3      	subs	r3, r2, r3
 8012a9c:	68fa      	ldr	r2, [r7, #12]
 8012a9e:	429a      	cmp	r2, r3
 8012aa0:	d80a      	bhi.n	8012ab8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8012ae0 <tcp_kill_prio+0x98>)
 8012aa4:	681a      	ldr	r2, [r3, #0]
 8012aa6:	697b      	ldr	r3, [r7, #20]
 8012aa8:	6a1b      	ldr	r3, [r3, #32]
 8012aaa:	1ad3      	subs	r3, r2, r3
 8012aac:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012ab2:	697b      	ldr	r3, [r7, #20]
 8012ab4:	7d5b      	ldrb	r3, [r3, #21]
 8012ab6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	68db      	ldr	r3, [r3, #12]
 8012abc:	617b      	str	r3, [r7, #20]
 8012abe:	697b      	ldr	r3, [r7, #20]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d1dc      	bne.n	8012a7e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d004      	beq.n	8012ad4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012aca:	6938      	ldr	r0, [r7, #16]
 8012acc:	f7ff f8f6 	bl	8011cbc <tcp_abort>
 8012ad0:	e000      	b.n	8012ad4 <tcp_kill_prio+0x8c>
    return;
 8012ad2:	bf00      	nop
  }
}
 8012ad4:	3718      	adds	r7, #24
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}
 8012ada:	bf00      	nop
 8012adc:	2000ec3c 	.word	0x2000ec3c
 8012ae0:	2000ec30 	.word	0x2000ec30

08012ae4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012ae4:	b580      	push	{r7, lr}
 8012ae6:	b086      	sub	sp, #24
 8012ae8:	af00      	add	r7, sp, #0
 8012aea:	4603      	mov	r3, r0
 8012aec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012aee:	79fb      	ldrb	r3, [r7, #7]
 8012af0:	2b08      	cmp	r3, #8
 8012af2:	d009      	beq.n	8012b08 <tcp_kill_state+0x24>
 8012af4:	79fb      	ldrb	r3, [r7, #7]
 8012af6:	2b09      	cmp	r3, #9
 8012af8:	d006      	beq.n	8012b08 <tcp_kill_state+0x24>
 8012afa:	4b1a      	ldr	r3, [pc, #104]	@ (8012b64 <tcp_kill_state+0x80>)
 8012afc:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8012b00:	4919      	ldr	r1, [pc, #100]	@ (8012b68 <tcp_kill_state+0x84>)
 8012b02:	481a      	ldr	r0, [pc, #104]	@ (8012b6c <tcp_kill_state+0x88>)
 8012b04:	f00b f942 	bl	801dd8c <iprintf>

  inactivity = 0;
 8012b08:	2300      	movs	r3, #0
 8012b0a:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012b0c:	2300      	movs	r3, #0
 8012b0e:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b10:	4b17      	ldr	r3, [pc, #92]	@ (8012b70 <tcp_kill_state+0x8c>)
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	617b      	str	r3, [r7, #20]
 8012b16:	e017      	b.n	8012b48 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012b18:	697b      	ldr	r3, [r7, #20]
 8012b1a:	7d1b      	ldrb	r3, [r3, #20]
 8012b1c:	79fa      	ldrb	r2, [r7, #7]
 8012b1e:	429a      	cmp	r2, r3
 8012b20:	d10f      	bne.n	8012b42 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012b22:	4b14      	ldr	r3, [pc, #80]	@ (8012b74 <tcp_kill_state+0x90>)
 8012b24:	681a      	ldr	r2, [r3, #0]
 8012b26:	697b      	ldr	r3, [r7, #20]
 8012b28:	6a1b      	ldr	r3, [r3, #32]
 8012b2a:	1ad3      	subs	r3, r2, r3
 8012b2c:	68fa      	ldr	r2, [r7, #12]
 8012b2e:	429a      	cmp	r2, r3
 8012b30:	d807      	bhi.n	8012b42 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012b32:	4b10      	ldr	r3, [pc, #64]	@ (8012b74 <tcp_kill_state+0x90>)
 8012b34:	681a      	ldr	r2, [r3, #0]
 8012b36:	697b      	ldr	r3, [r7, #20]
 8012b38:	6a1b      	ldr	r3, [r3, #32]
 8012b3a:	1ad3      	subs	r3, r2, r3
 8012b3c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012b3e:	697b      	ldr	r3, [r7, #20]
 8012b40:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b42:	697b      	ldr	r3, [r7, #20]
 8012b44:	68db      	ldr	r3, [r3, #12]
 8012b46:	617b      	str	r3, [r7, #20]
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d1e4      	bne.n	8012b18 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012b4e:	693b      	ldr	r3, [r7, #16]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d003      	beq.n	8012b5c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012b54:	2100      	movs	r1, #0
 8012b56:	6938      	ldr	r0, [r7, #16]
 8012b58:	f7fe fff2 	bl	8011b40 <tcp_abandon>
  }
}
 8012b5c:	bf00      	nop
 8012b5e:	3718      	adds	r7, #24
 8012b60:	46bd      	mov	sp, r7
 8012b62:	bd80      	pop	{r7, pc}
 8012b64:	080231c8 	.word	0x080231c8
 8012b68:	08023754 	.word	0x08023754
 8012b6c:	0802320c 	.word	0x0802320c
 8012b70:	2000ec3c 	.word	0x2000ec3c
 8012b74:	2000ec30 	.word	0x2000ec30

08012b78 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b084      	sub	sp, #16
 8012b7c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012b7e:	2300      	movs	r3, #0
 8012b80:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8012b82:	2300      	movs	r3, #0
 8012b84:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012b86:	4b12      	ldr	r3, [pc, #72]	@ (8012bd0 <tcp_kill_timewait+0x58>)
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	60fb      	str	r3, [r7, #12]
 8012b8c:	e012      	b.n	8012bb4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012b8e:	4b11      	ldr	r3, [pc, #68]	@ (8012bd4 <tcp_kill_timewait+0x5c>)
 8012b90:	681a      	ldr	r2, [r3, #0]
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	6a1b      	ldr	r3, [r3, #32]
 8012b96:	1ad3      	subs	r3, r2, r3
 8012b98:	687a      	ldr	r2, [r7, #4]
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d807      	bhi.n	8012bae <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8012bd4 <tcp_kill_timewait+0x5c>)
 8012ba0:	681a      	ldr	r2, [r3, #0]
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	6a1b      	ldr	r3, [r3, #32]
 8012ba6:	1ad3      	subs	r3, r2, r3
 8012ba8:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012baa:	68fb      	ldr	r3, [r7, #12]
 8012bac:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	68db      	ldr	r3, [r3, #12]
 8012bb2:	60fb      	str	r3, [r7, #12]
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d1e9      	bne.n	8012b8e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8012bba:	68bb      	ldr	r3, [r7, #8]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d002      	beq.n	8012bc6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012bc0:	68b8      	ldr	r0, [r7, #8]
 8012bc2:	f7ff f87b 	bl	8011cbc <tcp_abort>
  }
}
 8012bc6:	bf00      	nop
 8012bc8:	3710      	adds	r7, #16
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	bd80      	pop	{r7, pc}
 8012bce:	bf00      	nop
 8012bd0:	2000ec40 	.word	0x2000ec40
 8012bd4:	2000ec30 	.word	0x2000ec30

08012bd8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b082      	sub	sp, #8
 8012bdc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8012bde:	4b10      	ldr	r3, [pc, #64]	@ (8012c20 <tcp_handle_closepend+0x48>)
 8012be0:	681b      	ldr	r3, [r3, #0]
 8012be2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012be4:	e014      	b.n	8012c10 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8012be6:	687b      	ldr	r3, [r7, #4]
 8012be8:	68db      	ldr	r3, [r3, #12]
 8012bea:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	8b5b      	ldrh	r3, [r3, #26]
 8012bf0:	f003 0308 	and.w	r3, r3, #8
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d009      	beq.n	8012c0c <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	8b5b      	ldrh	r3, [r3, #26]
 8012bfc:	f023 0308 	bic.w	r3, r3, #8
 8012c00:	b29a      	uxth	r2, r3
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8012c06:	6878      	ldr	r0, [r7, #4]
 8012c08:	f7fe fea8 	bl	801195c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012c0c:	683b      	ldr	r3, [r7, #0]
 8012c0e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d1e7      	bne.n	8012be6 <tcp_handle_closepend+0xe>
  }
}
 8012c16:	bf00      	nop
 8012c18:	bf00      	nop
 8012c1a:	3708      	adds	r7, #8
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	bd80      	pop	{r7, pc}
 8012c20:	2000ec3c 	.word	0x2000ec3c

08012c24 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012c24:	b580      	push	{r7, lr}
 8012c26:	b084      	sub	sp, #16
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	4603      	mov	r3, r0
 8012c2c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012c2e:	2001      	movs	r0, #1
 8012c30:	f7fd f992 	bl	800ff58 <memp_malloc>
 8012c34:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8012c36:	68fb      	ldr	r3, [r7, #12]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d126      	bne.n	8012c8a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012c3c:	f7ff ffcc 	bl	8012bd8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012c40:	f7ff ff9a 	bl	8012b78 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012c44:	2001      	movs	r0, #1
 8012c46:	f7fd f987 	bl	800ff58 <memp_malloc>
 8012c4a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012c4c:	68fb      	ldr	r3, [r7, #12]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d11b      	bne.n	8012c8a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012c52:	2009      	movs	r0, #9
 8012c54:	f7ff ff46 	bl	8012ae4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012c58:	2001      	movs	r0, #1
 8012c5a:	f7fd f97d 	bl	800ff58 <memp_malloc>
 8012c5e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d111      	bne.n	8012c8a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8012c66:	2008      	movs	r0, #8
 8012c68:	f7ff ff3c 	bl	8012ae4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012c6c:	2001      	movs	r0, #1
 8012c6e:	f7fd f973 	bl	800ff58 <memp_malloc>
 8012c72:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d107      	bne.n	8012c8a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012c7a:	79fb      	ldrb	r3, [r7, #7]
 8012c7c:	4618      	mov	r0, r3
 8012c7e:	f7ff fee3 	bl	8012a48 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012c82:	2001      	movs	r0, #1
 8012c84:	f7fd f968 	bl	800ff58 <memp_malloc>
 8012c88:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012c8a:	68fb      	ldr	r3, [r7, #12]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d03f      	beq.n	8012d10 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012c90:	229c      	movs	r2, #156	@ 0x9c
 8012c92:	2100      	movs	r1, #0
 8012c94:	68f8      	ldr	r0, [r7, #12]
 8012c96:	f00b f918 	bl	801deca <memset>
    pcb->prio = prio;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	79fa      	ldrb	r2, [r7, #7]
 8012c9e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8012ca6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012caa:	68fb      	ldr	r3, [r7, #12]
 8012cac:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8012cb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 8012cba:	68fb      	ldr	r3, [r7, #12]
 8012cbc:	22ff      	movs	r2, #255	@ 0xff
 8012cbe:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8012cc6:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	2206      	movs	r2, #6
 8012ccc:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	2206      	movs	r2, #6
 8012cd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012cdc:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	2201      	movs	r2, #1
 8012ce2:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 8012ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8012d1c <tcp_alloc+0xf8>)
 8012ce8:	681a      	ldr	r2, [r3, #0]
 8012cea:	68fb      	ldr	r3, [r7, #12]
 8012cec:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8012cee:	4b0c      	ldr	r3, [pc, #48]	@ (8012d20 <tcp_alloc+0xfc>)
 8012cf0:	781a      	ldrb	r2, [r3, #0]
 8012cf2:	68fb      	ldr	r3, [r7, #12]
 8012cf4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 8012cfc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012d00:	68fb      	ldr	r3, [r7, #12]
 8012d02:	4a08      	ldr	r2, [pc, #32]	@ (8012d24 <tcp_alloc+0x100>)
 8012d04:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8012d08:	68fb      	ldr	r3, [r7, #12]
 8012d0a:	4a07      	ldr	r2, [pc, #28]	@ (8012d28 <tcp_alloc+0x104>)
 8012d0c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012d10:	68fb      	ldr	r3, [r7, #12]
}
 8012d12:	4618      	mov	r0, r3
 8012d14:	3710      	adds	r7, #16
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}
 8012d1a:	bf00      	nop
 8012d1c:	2000ec30 	.word	0x2000ec30
 8012d20:	2000ec46 	.word	0x2000ec46
 8012d24:	080129dd 	.word	0x080129dd
 8012d28:	006ddd00 	.word	0x006ddd00

08012d2c <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b084      	sub	sp, #16
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	4603      	mov	r3, r0
 8012d34:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8012d36:	2040      	movs	r0, #64	@ 0x40
 8012d38:	f7ff ff74 	bl	8012c24 <tcp_alloc>
 8012d3c:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012d3e:	68fb      	ldr	r3, [r7, #12]
}
 8012d40:	4618      	mov	r0, r3
 8012d42:	3710      	adds	r7, #16
 8012d44:	46bd      	mov	sp, r7
 8012d46:	bd80      	pop	{r7, pc}

08012d48 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8012d48:	b480      	push	{r7}
 8012d4a:	b083      	sub	sp, #12
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d002      	beq.n	8012d5e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	683a      	ldr	r2, [r7, #0]
 8012d5c:	611a      	str	r2, [r3, #16]
  }
}
 8012d5e:	bf00      	nop
 8012d60:	370c      	adds	r7, #12
 8012d62:	46bd      	mov	sp, r7
 8012d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d68:	4770      	bx	lr
	...

08012d6c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b082      	sub	sp, #8
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
 8012d74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d00e      	beq.n	8012d9a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	7d1b      	ldrb	r3, [r3, #20]
 8012d80:	2b01      	cmp	r3, #1
 8012d82:	d106      	bne.n	8012d92 <tcp_recv+0x26>
 8012d84:	4b07      	ldr	r3, [pc, #28]	@ (8012da4 <tcp_recv+0x38>)
 8012d86:	f240 72df 	movw	r2, #2015	@ 0x7df
 8012d8a:	4907      	ldr	r1, [pc, #28]	@ (8012da8 <tcp_recv+0x3c>)
 8012d8c:	4807      	ldr	r0, [pc, #28]	@ (8012dac <tcp_recv+0x40>)
 8012d8e:	f00a fffd 	bl	801dd8c <iprintf>
    pcb->recv = recv;
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	683a      	ldr	r2, [r7, #0]
 8012d96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }
}
 8012d9a:	bf00      	nop
 8012d9c:	3708      	adds	r7, #8
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}
 8012da2:	bf00      	nop
 8012da4:	080231c8 	.word	0x080231c8
 8012da8:	08023764 	.word	0x08023764
 8012dac:	0802320c 	.word	0x0802320c

08012db0 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8012db0:	b580      	push	{r7, lr}
 8012db2:	b082      	sub	sp, #8
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	6078      	str	r0, [r7, #4]
 8012db8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012dba:	687b      	ldr	r3, [r7, #4]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d00e      	beq.n	8012dde <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	7d1b      	ldrb	r3, [r3, #20]
 8012dc4:	2b01      	cmp	r3, #1
 8012dc6:	d106      	bne.n	8012dd6 <tcp_sent+0x26>
 8012dc8:	4b07      	ldr	r3, [pc, #28]	@ (8012de8 <tcp_sent+0x38>)
 8012dca:	f240 72f3 	movw	r2, #2035	@ 0x7f3
 8012dce:	4907      	ldr	r1, [pc, #28]	@ (8012dec <tcp_sent+0x3c>)
 8012dd0:	4807      	ldr	r0, [pc, #28]	@ (8012df0 <tcp_sent+0x40>)
 8012dd2:	f00a ffdb 	bl	801dd8c <iprintf>
    pcb->sent = sent;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	683a      	ldr	r2, [r7, #0]
 8012dda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  }
}
 8012dde:	bf00      	nop
 8012de0:	3708      	adds	r7, #8
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd80      	pop	{r7, pc}
 8012de6:	bf00      	nop
 8012de8:	080231c8 	.word	0x080231c8
 8012dec:	0802378c 	.word	0x0802378c
 8012df0:	0802320c 	.word	0x0802320c

08012df4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012df4:	b580      	push	{r7, lr}
 8012df6:	b082      	sub	sp, #8
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
 8012dfc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d00e      	beq.n	8012e22 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	7d1b      	ldrb	r3, [r3, #20]
 8012e08:	2b01      	cmp	r3, #1
 8012e0a:	d106      	bne.n	8012e1a <tcp_err+0x26>
 8012e0c:	4b07      	ldr	r3, [pc, #28]	@ (8012e2c <tcp_err+0x38>)
 8012e0e:	f640 020d 	movw	r2, #2061	@ 0x80d
 8012e12:	4907      	ldr	r1, [pc, #28]	@ (8012e30 <tcp_err+0x3c>)
 8012e14:	4807      	ldr	r0, [pc, #28]	@ (8012e34 <tcp_err+0x40>)
 8012e16:	f00a ffb9 	bl	801dd8c <iprintf>
    pcb->errf = err;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	683a      	ldr	r2, [r7, #0]
 8012e1e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  }
}
 8012e22:	bf00      	nop
 8012e24:	3708      	adds	r7, #8
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	bf00      	nop
 8012e2c:	080231c8 	.word	0x080231c8
 8012e30:	080237b4 	.word	0x080237b4
 8012e34:	0802320c 	.word	0x0802320c

08012e38 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8012e38:	b480      	push	{r7}
 8012e3a:	b085      	sub	sp, #20
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
 8012e40:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8012e42:	687b      	ldr	r3, [r7, #4]
 8012e44:	2b00      	cmp	r3, #0
 8012e46:	d008      	beq.n	8012e5a <tcp_accept+0x22>
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	7d1b      	ldrb	r3, [r3, #20]
 8012e4c:	2b01      	cmp	r3, #1
 8012e4e:	d104      	bne.n	8012e5a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	683a      	ldr	r2, [r7, #0]
 8012e58:	619a      	str	r2, [r3, #24]
  }
}
 8012e5a:	bf00      	nop
 8012e5c:	3714      	adds	r7, #20
 8012e5e:	46bd      	mov	sp, r7
 8012e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e64:	4770      	bx	lr
	...

08012e68 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8012e68:	b580      	push	{r7, lr}
 8012e6a:	b084      	sub	sp, #16
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	60f8      	str	r0, [r7, #12]
 8012e70:	60b9      	str	r1, [r7, #8]
 8012e72:	4613      	mov	r3, r2
 8012e74:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d107      	bne.n	8012e8c <tcp_poll+0x24>
 8012e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8012eb8 <tcp_poll+0x50>)
 8012e7e:	f640 023d 	movw	r2, #2109	@ 0x83d
 8012e82:	490e      	ldr	r1, [pc, #56]	@ (8012ebc <tcp_poll+0x54>)
 8012e84:	480e      	ldr	r0, [pc, #56]	@ (8012ec0 <tcp_poll+0x58>)
 8012e86:	f00a ff81 	bl	801dd8c <iprintf>
 8012e8a:	e011      	b.n	8012eb0 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	7d1b      	ldrb	r3, [r3, #20]
 8012e90:	2b01      	cmp	r3, #1
 8012e92:	d106      	bne.n	8012ea2 <tcp_poll+0x3a>
 8012e94:	4b08      	ldr	r3, [pc, #32]	@ (8012eb8 <tcp_poll+0x50>)
 8012e96:	f640 023e 	movw	r2, #2110	@ 0x83e
 8012e9a:	490a      	ldr	r1, [pc, #40]	@ (8012ec4 <tcp_poll+0x5c>)
 8012e9c:	4808      	ldr	r0, [pc, #32]	@ (8012ec0 <tcp_poll+0x58>)
 8012e9e:	f00a ff75 	bl	801dd8c <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8012ea2:	68fb      	ldr	r3, [r7, #12]
 8012ea4:	68ba      	ldr	r2, [r7, #8]
 8012ea6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	79fa      	ldrb	r2, [r7, #7]
 8012eae:	775a      	strb	r2, [r3, #29]
}
 8012eb0:	3710      	adds	r7, #16
 8012eb2:	46bd      	mov	sp, r7
 8012eb4:	bd80      	pop	{r7, pc}
 8012eb6:	bf00      	nop
 8012eb8:	080231c8 	.word	0x080231c8
 8012ebc:	080237dc 	.word	0x080237dc
 8012ec0:	0802320c 	.word	0x0802320c
 8012ec4:	080237f4 	.word	0x080237f4

08012ec8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012ec8:	b580      	push	{r7, lr}
 8012eca:	b082      	sub	sp, #8
 8012ecc:	af00      	add	r7, sp, #0
 8012ece:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	2b00      	cmp	r3, #0
 8012ed4:	d107      	bne.n	8012ee6 <tcp_pcb_purge+0x1e>
 8012ed6:	4b21      	ldr	r3, [pc, #132]	@ (8012f5c <tcp_pcb_purge+0x94>)
 8012ed8:	f640 0251 	movw	r2, #2129	@ 0x851
 8012edc:	4920      	ldr	r1, [pc, #128]	@ (8012f60 <tcp_pcb_purge+0x98>)
 8012ede:	4821      	ldr	r0, [pc, #132]	@ (8012f64 <tcp_pcb_purge+0x9c>)
 8012ee0:	f00a ff54 	bl	801dd8c <iprintf>
 8012ee4:	e037      	b.n	8012f56 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	7d1b      	ldrb	r3, [r3, #20]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d033      	beq.n	8012f56 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012ef2:	2b0a      	cmp	r3, #10
 8012ef4:	d02f      	beq.n	8012f56 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8012efa:	2b01      	cmp	r3, #1
 8012efc:	d02b      	beq.n	8012f56 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d007      	beq.n	8012f16 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8012f0a:	4618      	mov	r0, r3
 8012f0c:	f7fd ff7c 	bl	8010e08 <pbuf_free>
      pcb->refused_data = NULL;
 8012f10:	687b      	ldr	r3, [r7, #4]
 8012f12:	2200      	movs	r2, #0
 8012f14:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d002      	beq.n	8012f24 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f000 f986 	bl	8013230 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012f24:	687b      	ldr	r3, [r7, #4]
 8012f26:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8012f2a:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012f30:	4618      	mov	r0, r3
 8012f32:	f7ff fcf9 	bl	8012928 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012f36:	687b      	ldr	r3, [r7, #4]
 8012f38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f7ff fcf4 	bl	8012928 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	2200      	movs	r2, #0
 8012f44:	66da      	str	r2, [r3, #108]	@ 0x6c
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	2200      	movs	r2, #0
 8012f52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8012f56:	3708      	adds	r7, #8
 8012f58:	46bd      	mov	sp, r7
 8012f5a:	bd80      	pop	{r7, pc}
 8012f5c:	080231c8 	.word	0x080231c8
 8012f60:	08023814 	.word	0x08023814
 8012f64:	0802320c 	.word	0x0802320c

08012f68 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b084      	sub	sp, #16
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	6078      	str	r0, [r7, #4]
 8012f70:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012f72:	683b      	ldr	r3, [r7, #0]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d106      	bne.n	8012f86 <tcp_pcb_remove+0x1e>
 8012f78:	4b3e      	ldr	r3, [pc, #248]	@ (8013074 <tcp_pcb_remove+0x10c>)
 8012f7a:	f640 0283 	movw	r2, #2179	@ 0x883
 8012f7e:	493e      	ldr	r1, [pc, #248]	@ (8013078 <tcp_pcb_remove+0x110>)
 8012f80:	483e      	ldr	r0, [pc, #248]	@ (801307c <tcp_pcb_remove+0x114>)
 8012f82:	f00a ff03 	bl	801dd8c <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	2b00      	cmp	r3, #0
 8012f8a:	d106      	bne.n	8012f9a <tcp_pcb_remove+0x32>
 8012f8c:	4b39      	ldr	r3, [pc, #228]	@ (8013074 <tcp_pcb_remove+0x10c>)
 8012f8e:	f640 0284 	movw	r2, #2180	@ 0x884
 8012f92:	493b      	ldr	r1, [pc, #236]	@ (8013080 <tcp_pcb_remove+0x118>)
 8012f94:	4839      	ldr	r0, [pc, #228]	@ (801307c <tcp_pcb_remove+0x114>)
 8012f96:	f00a fef9 	bl	801dd8c <iprintf>

  TCP_RMV(pcblist, pcb);
 8012f9a:	687b      	ldr	r3, [r7, #4]
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	683a      	ldr	r2, [r7, #0]
 8012fa0:	429a      	cmp	r2, r3
 8012fa2:	d105      	bne.n	8012fb0 <tcp_pcb_remove+0x48>
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	681b      	ldr	r3, [r3, #0]
 8012fa8:	68da      	ldr	r2, [r3, #12]
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	601a      	str	r2, [r3, #0]
 8012fae:	e013      	b.n	8012fd8 <tcp_pcb_remove+0x70>
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	60fb      	str	r3, [r7, #12]
 8012fb6:	e00c      	b.n	8012fd2 <tcp_pcb_remove+0x6a>
 8012fb8:	68fb      	ldr	r3, [r7, #12]
 8012fba:	68db      	ldr	r3, [r3, #12]
 8012fbc:	683a      	ldr	r2, [r7, #0]
 8012fbe:	429a      	cmp	r2, r3
 8012fc0:	d104      	bne.n	8012fcc <tcp_pcb_remove+0x64>
 8012fc2:	683b      	ldr	r3, [r7, #0]
 8012fc4:	68da      	ldr	r2, [r3, #12]
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	60da      	str	r2, [r3, #12]
 8012fca:	e005      	b.n	8012fd8 <tcp_pcb_remove+0x70>
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	68db      	ldr	r3, [r3, #12]
 8012fd0:	60fb      	str	r3, [r7, #12]
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d1ef      	bne.n	8012fb8 <tcp_pcb_remove+0x50>
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	2200      	movs	r2, #0
 8012fdc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012fde:	6838      	ldr	r0, [r7, #0]
 8012fe0:	f7ff ff72 	bl	8012ec8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012fe4:	683b      	ldr	r3, [r7, #0]
 8012fe6:	7d1b      	ldrb	r3, [r3, #20]
 8012fe8:	2b0a      	cmp	r3, #10
 8012fea:	d013      	beq.n	8013014 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8012fec:	683b      	ldr	r3, [r7, #0]
 8012fee:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012ff0:	2b01      	cmp	r3, #1
 8012ff2:	d00f      	beq.n	8013014 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	8b5b      	ldrh	r3, [r3, #26]
 8012ff8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d009      	beq.n	8013014 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8013000:	683b      	ldr	r3, [r7, #0]
 8013002:	8b5b      	ldrh	r3, [r3, #26]
 8013004:	f043 0302 	orr.w	r3, r3, #2
 8013008:	b29a      	uxth	r2, r3
 801300a:	683b      	ldr	r3, [r7, #0]
 801300c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801300e:	6838      	ldr	r0, [r7, #0]
 8013010:	f003 fbc0 	bl	8016794 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8013014:	683b      	ldr	r3, [r7, #0]
 8013016:	7d1b      	ldrb	r3, [r3, #20]
 8013018:	2b01      	cmp	r3, #1
 801301a:	d020      	beq.n	801305e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801301c:	683b      	ldr	r3, [r7, #0]
 801301e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013020:	2b00      	cmp	r3, #0
 8013022:	d006      	beq.n	8013032 <tcp_pcb_remove+0xca>
 8013024:	4b13      	ldr	r3, [pc, #76]	@ (8013074 <tcp_pcb_remove+0x10c>)
 8013026:	f640 0293 	movw	r2, #2195	@ 0x893
 801302a:	4916      	ldr	r1, [pc, #88]	@ (8013084 <tcp_pcb_remove+0x11c>)
 801302c:	4813      	ldr	r0, [pc, #76]	@ (801307c <tcp_pcb_remove+0x114>)
 801302e:	f00a fead 	bl	801dd8c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8013032:	683b      	ldr	r3, [r7, #0]
 8013034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013036:	2b00      	cmp	r3, #0
 8013038:	d006      	beq.n	8013048 <tcp_pcb_remove+0xe0>
 801303a:	4b0e      	ldr	r3, [pc, #56]	@ (8013074 <tcp_pcb_remove+0x10c>)
 801303c:	f640 0294 	movw	r2, #2196	@ 0x894
 8013040:	4911      	ldr	r1, [pc, #68]	@ (8013088 <tcp_pcb_remove+0x120>)
 8013042:	480e      	ldr	r0, [pc, #56]	@ (801307c <tcp_pcb_remove+0x114>)
 8013044:	f00a fea2 	bl	801dd8c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013048:	683b      	ldr	r3, [r7, #0]
 801304a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801304c:	2b00      	cmp	r3, #0
 801304e:	d006      	beq.n	801305e <tcp_pcb_remove+0xf6>
 8013050:	4b08      	ldr	r3, [pc, #32]	@ (8013074 <tcp_pcb_remove+0x10c>)
 8013052:	f640 0296 	movw	r2, #2198	@ 0x896
 8013056:	490d      	ldr	r1, [pc, #52]	@ (801308c <tcp_pcb_remove+0x124>)
 8013058:	4808      	ldr	r0, [pc, #32]	@ (801307c <tcp_pcb_remove+0x114>)
 801305a:	f00a fe97 	bl	801dd8c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801305e:	683b      	ldr	r3, [r7, #0]
 8013060:	2200      	movs	r2, #0
 8013062:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	2200      	movs	r2, #0
 8013068:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801306a:	bf00      	nop
 801306c:	3710      	adds	r7, #16
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}
 8013072:	bf00      	nop
 8013074:	080231c8 	.word	0x080231c8
 8013078:	08023830 	.word	0x08023830
 801307c:	0802320c 	.word	0x0802320c
 8013080:	0802384c 	.word	0x0802384c
 8013084:	0802386c 	.word	0x0802386c
 8013088:	08023884 	.word	0x08023884
 801308c:	080238a0 	.word	0x080238a0

08013090 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b082      	sub	sp, #8
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d106      	bne.n	80130ac <tcp_next_iss+0x1c>
 801309e:	4b0a      	ldr	r3, [pc, #40]	@ (80130c8 <tcp_next_iss+0x38>)
 80130a0:	f640 02af 	movw	r2, #2223	@ 0x8af
 80130a4:	4909      	ldr	r1, [pc, #36]	@ (80130cc <tcp_next_iss+0x3c>)
 80130a6:	480a      	ldr	r0, [pc, #40]	@ (80130d0 <tcp_next_iss+0x40>)
 80130a8:	f00a fe70 	bl	801dd8c <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80130ac:	4b09      	ldr	r3, [pc, #36]	@ (80130d4 <tcp_next_iss+0x44>)
 80130ae:	681a      	ldr	r2, [r3, #0]
 80130b0:	4b09      	ldr	r3, [pc, #36]	@ (80130d8 <tcp_next_iss+0x48>)
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	4413      	add	r3, r2
 80130b6:	4a07      	ldr	r2, [pc, #28]	@ (80130d4 <tcp_next_iss+0x44>)
 80130b8:	6013      	str	r3, [r2, #0]
  return iss;
 80130ba:	4b06      	ldr	r3, [pc, #24]	@ (80130d4 <tcp_next_iss+0x44>)
 80130bc:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80130be:	4618      	mov	r0, r3
 80130c0:	3708      	adds	r7, #8
 80130c2:	46bd      	mov	sp, r7
 80130c4:	bd80      	pop	{r7, pc}
 80130c6:	bf00      	nop
 80130c8:	080231c8 	.word	0x080231c8
 80130cc:	080238b8 	.word	0x080238b8
 80130d0:	0802320c 	.word	0x0802320c
 80130d4:	20000028 	.word	0x20000028
 80130d8:	2000ec30 	.word	0x2000ec30

080130dc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b086      	sub	sp, #24
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	4603      	mov	r3, r0
 80130e4:	60b9      	str	r1, [r7, #8]
 80130e6:	607a      	str	r2, [r7, #4]
 80130e8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2b00      	cmp	r3, #0
 80130ee:	d106      	bne.n	80130fe <tcp_eff_send_mss_netif+0x22>
 80130f0:	4b14      	ldr	r3, [pc, #80]	@ (8013144 <tcp_eff_send_mss_netif+0x68>)
 80130f2:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 80130f6:	4914      	ldr	r1, [pc, #80]	@ (8013148 <tcp_eff_send_mss_netif+0x6c>)
 80130f8:	4814      	ldr	r0, [pc, #80]	@ (801314c <tcp_eff_send_mss_netif+0x70>)
 80130fa:	f00a fe47 	bl	801dd8c <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80130fe:	68bb      	ldr	r3, [r7, #8]
 8013100:	2b00      	cmp	r3, #0
 8013102:	d101      	bne.n	8013108 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8013104:	89fb      	ldrh	r3, [r7, #14]
 8013106:	e019      	b.n	801313c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8013108:	68bb      	ldr	r3, [r7, #8]
 801310a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801310c:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801310e:	8afb      	ldrh	r3, [r7, #22]
 8013110:	2b00      	cmp	r3, #0
 8013112:	d012      	beq.n	801313a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8013114:	2328      	movs	r3, #40	@ 0x28
 8013116:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8013118:	8afa      	ldrh	r2, [r7, #22]
 801311a:	8abb      	ldrh	r3, [r7, #20]
 801311c:	429a      	cmp	r2, r3
 801311e:	d904      	bls.n	801312a <tcp_eff_send_mss_netif+0x4e>
 8013120:	8afa      	ldrh	r2, [r7, #22]
 8013122:	8abb      	ldrh	r3, [r7, #20]
 8013124:	1ad3      	subs	r3, r2, r3
 8013126:	b29b      	uxth	r3, r3
 8013128:	e000      	b.n	801312c <tcp_eff_send_mss_netif+0x50>
 801312a:	2300      	movs	r3, #0
 801312c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801312e:	8a7a      	ldrh	r2, [r7, #18]
 8013130:	89fb      	ldrh	r3, [r7, #14]
 8013132:	4293      	cmp	r3, r2
 8013134:	bf28      	it	cs
 8013136:	4613      	movcs	r3, r2
 8013138:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801313a:	89fb      	ldrh	r3, [r7, #14]
}
 801313c:	4618      	mov	r0, r3
 801313e:	3718      	adds	r7, #24
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}
 8013144:	080231c8 	.word	0x080231c8
 8013148:	080238d4 	.word	0x080238d4
 801314c:	0802320c 	.word	0x0802320c

08013150 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b084      	sub	sp, #16
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801315a:	683b      	ldr	r3, [r7, #0]
 801315c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	2b00      	cmp	r3, #0
 8013162:	d119      	bne.n	8013198 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013164:	4b10      	ldr	r3, [pc, #64]	@ (80131a8 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8013166:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 801316a:	4910      	ldr	r1, [pc, #64]	@ (80131ac <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801316c:	4810      	ldr	r0, [pc, #64]	@ (80131b0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801316e:	f00a fe0d 	bl	801dd8c <iprintf>

  while (pcb != NULL) {
 8013172:	e011      	b.n	8013198 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	681a      	ldr	r2, [r3, #0]
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	429a      	cmp	r2, r3
 801317e:	d108      	bne.n	8013192 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013180:	68fb      	ldr	r3, [r7, #12]
 8013182:	68db      	ldr	r3, [r3, #12]
 8013184:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8013186:	68f8      	ldr	r0, [r7, #12]
 8013188:	f7fe fd98 	bl	8011cbc <tcp_abort>
      pcb = next;
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	60fb      	str	r3, [r7, #12]
 8013190:	e002      	b.n	8013198 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	68db      	ldr	r3, [r3, #12]
 8013196:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d1ea      	bne.n	8013174 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801319e:	bf00      	nop
 80131a0:	bf00      	nop
 80131a2:	3710      	adds	r7, #16
 80131a4:	46bd      	mov	sp, r7
 80131a6:	bd80      	pop	{r7, pc}
 80131a8:	080231c8 	.word	0x080231c8
 80131ac:	080238fc 	.word	0x080238fc
 80131b0:	0802320c 	.word	0x0802320c

080131b4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b084      	sub	sp, #16
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
 80131bc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d02a      	beq.n	801321a <tcp_netif_ip_addr_changed+0x66>
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	681b      	ldr	r3, [r3, #0]
 80131c8:	2b00      	cmp	r3, #0
 80131ca:	d026      	beq.n	801321a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80131cc:	4b15      	ldr	r3, [pc, #84]	@ (8013224 <tcp_netif_ip_addr_changed+0x70>)
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	4619      	mov	r1, r3
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f7ff ffbc 	bl	8013150 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80131d8:	4b13      	ldr	r3, [pc, #76]	@ (8013228 <tcp_netif_ip_addr_changed+0x74>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	4619      	mov	r1, r3
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	f7ff ffb6 	bl	8013150 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80131e4:	683b      	ldr	r3, [r7, #0]
 80131e6:	2b00      	cmp	r3, #0
 80131e8:	d017      	beq.n	801321a <tcp_netif_ip_addr_changed+0x66>
 80131ea:	683b      	ldr	r3, [r7, #0]
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d013      	beq.n	801321a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80131f2:	4b0e      	ldr	r3, [pc, #56]	@ (801322c <tcp_netif_ip_addr_changed+0x78>)
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	60fb      	str	r3, [r7, #12]
 80131f8:	e00c      	b.n	8013214 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	681a      	ldr	r2, [r3, #0]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	429a      	cmp	r2, r3
 8013204:	d103      	bne.n	801320e <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	681a      	ldr	r2, [r3, #0]
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	68db      	ldr	r3, [r3, #12]
 8013212:	60fb      	str	r3, [r7, #12]
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d1ef      	bne.n	80131fa <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801321a:	bf00      	nop
 801321c:	3710      	adds	r7, #16
 801321e:	46bd      	mov	sp, r7
 8013220:	bd80      	pop	{r7, pc}
 8013222:	bf00      	nop
 8013224:	2000ec3c 	.word	0x2000ec3c
 8013228:	2000ec34 	.word	0x2000ec34
 801322c:	2000ec38 	.word	0x2000ec38

08013230 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b082      	sub	sp, #8
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801323c:	2b00      	cmp	r3, #0
 801323e:	d007      	beq.n	8013250 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013244:	4618      	mov	r0, r3
 8013246:	f7ff fb6f 	bl	8012928 <tcp_segs_free>
    pcb->ooseq = NULL;
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	2200      	movs	r2, #0
 801324e:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013250:	bf00      	nop
 8013252:	3708      	adds	r7, #8
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}

08013258 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8013258:	b590      	push	{r4, r7, lr}
 801325a:	b08d      	sub	sp, #52	@ 0x34
 801325c:	af04      	add	r7, sp, #16
 801325e:	6078      	str	r0, [r7, #4]
 8013260:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d105      	bne.n	8013274 <tcp_input+0x1c>
 8013268:	4b9b      	ldr	r3, [pc, #620]	@ (80134d8 <tcp_input+0x280>)
 801326a:	2283      	movs	r2, #131	@ 0x83
 801326c:	499b      	ldr	r1, [pc, #620]	@ (80134dc <tcp_input+0x284>)
 801326e:	489c      	ldr	r0, [pc, #624]	@ (80134e0 <tcp_input+0x288>)
 8013270:	f00a fd8c 	bl	801dd8c <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	685b      	ldr	r3, [r3, #4]
 8013278:	4a9a      	ldr	r2, [pc, #616]	@ (80134e4 <tcp_input+0x28c>)
 801327a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	895b      	ldrh	r3, [r3, #10]
 8013280:	2b13      	cmp	r3, #19
 8013282:	f240 83d1 	bls.w	8013a28 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8013286:	4b98      	ldr	r3, [pc, #608]	@ (80134e8 <tcp_input+0x290>)
 8013288:	695b      	ldr	r3, [r3, #20]
 801328a:	4a97      	ldr	r2, [pc, #604]	@ (80134e8 <tcp_input+0x290>)
 801328c:	6812      	ldr	r2, [r2, #0]
 801328e:	4611      	mov	r1, r2
 8013290:	4618      	mov	r0, r3
 8013292:	f008 fb5d 	bl	801b950 <ip4_addr_isbroadcast_u32>
 8013296:	4603      	mov	r3, r0
 8013298:	2b00      	cmp	r3, #0
 801329a:	f040 83c7 	bne.w	8013a2c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801329e:	4b92      	ldr	r3, [pc, #584]	@ (80134e8 <tcp_input+0x290>)
 80132a0:	695b      	ldr	r3, [r3, #20]
 80132a2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80132a6:	2be0      	cmp	r3, #224	@ 0xe0
 80132a8:	f000 83c0 	beq.w	8013a2c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80132ac:	4b8d      	ldr	r3, [pc, #564]	@ (80134e4 <tcp_input+0x28c>)
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	899b      	ldrh	r3, [r3, #12]
 80132b2:	b29b      	uxth	r3, r3
 80132b4:	4618      	mov	r0, r3
 80132b6:	f7fb fe89 	bl	800efcc <lwip_htons>
 80132ba:	4603      	mov	r3, r0
 80132bc:	0b1b      	lsrs	r3, r3, #12
 80132be:	b29b      	uxth	r3, r3
 80132c0:	b2db      	uxtb	r3, r3
 80132c2:	009b      	lsls	r3, r3, #2
 80132c4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80132c6:	7cbb      	ldrb	r3, [r7, #18]
 80132c8:	2b13      	cmp	r3, #19
 80132ca:	f240 83b1 	bls.w	8013a30 <tcp_input+0x7d8>
 80132ce:	7cbb      	ldrb	r3, [r7, #18]
 80132d0:	b29a      	uxth	r2, r3
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	891b      	ldrh	r3, [r3, #8]
 80132d6:	429a      	cmp	r2, r3
 80132d8:	f200 83aa 	bhi.w	8013a30 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80132dc:	7cbb      	ldrb	r3, [r7, #18]
 80132de:	b29b      	uxth	r3, r3
 80132e0:	3b14      	subs	r3, #20
 80132e2:	b29a      	uxth	r2, r3
 80132e4:	4b81      	ldr	r3, [pc, #516]	@ (80134ec <tcp_input+0x294>)
 80132e6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80132e8:	4b81      	ldr	r3, [pc, #516]	@ (80134f0 <tcp_input+0x298>)
 80132ea:	2200      	movs	r2, #0
 80132ec:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	895a      	ldrh	r2, [r3, #10]
 80132f2:	7cbb      	ldrb	r3, [r7, #18]
 80132f4:	b29b      	uxth	r3, r3
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d309      	bcc.n	801330e <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80132fa:	4b7c      	ldr	r3, [pc, #496]	@ (80134ec <tcp_input+0x294>)
 80132fc:	881a      	ldrh	r2, [r3, #0]
 80132fe:	4b7d      	ldr	r3, [pc, #500]	@ (80134f4 <tcp_input+0x29c>)
 8013300:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8013302:	7cbb      	ldrb	r3, [r7, #18]
 8013304:	4619      	mov	r1, r3
 8013306:	6878      	ldr	r0, [r7, #4]
 8013308:	f7fd fcc6 	bl	8010c98 <pbuf_remove_header>
 801330c:	e04e      	b.n	80133ac <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	681b      	ldr	r3, [r3, #0]
 8013312:	2b00      	cmp	r3, #0
 8013314:	d105      	bne.n	8013322 <tcp_input+0xca>
 8013316:	4b70      	ldr	r3, [pc, #448]	@ (80134d8 <tcp_input+0x280>)
 8013318:	22c2      	movs	r2, #194	@ 0xc2
 801331a:	4977      	ldr	r1, [pc, #476]	@ (80134f8 <tcp_input+0x2a0>)
 801331c:	4870      	ldr	r0, [pc, #448]	@ (80134e0 <tcp_input+0x288>)
 801331e:	f00a fd35 	bl	801dd8c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8013322:	2114      	movs	r1, #20
 8013324:	6878      	ldr	r0, [r7, #4]
 8013326:	f7fd fcb7 	bl	8010c98 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	895a      	ldrh	r2, [r3, #10]
 801332e:	4b71      	ldr	r3, [pc, #452]	@ (80134f4 <tcp_input+0x29c>)
 8013330:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8013332:	4b6e      	ldr	r3, [pc, #440]	@ (80134ec <tcp_input+0x294>)
 8013334:	881a      	ldrh	r2, [r3, #0]
 8013336:	4b6f      	ldr	r3, [pc, #444]	@ (80134f4 <tcp_input+0x29c>)
 8013338:	881b      	ldrh	r3, [r3, #0]
 801333a:	1ad3      	subs	r3, r2, r3
 801333c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801333e:	4b6d      	ldr	r3, [pc, #436]	@ (80134f4 <tcp_input+0x29c>)
 8013340:	881b      	ldrh	r3, [r3, #0]
 8013342:	4619      	mov	r1, r3
 8013344:	6878      	ldr	r0, [r7, #4]
 8013346:	f7fd fca7 	bl	8010c98 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	895b      	ldrh	r3, [r3, #10]
 8013350:	8a3a      	ldrh	r2, [r7, #16]
 8013352:	429a      	cmp	r2, r3
 8013354:	f200 836e 	bhi.w	8013a34 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8013358:	687b      	ldr	r3, [r7, #4]
 801335a:	681b      	ldr	r3, [r3, #0]
 801335c:	685b      	ldr	r3, [r3, #4]
 801335e:	4a64      	ldr	r2, [pc, #400]	@ (80134f0 <tcp_input+0x298>)
 8013360:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	681b      	ldr	r3, [r3, #0]
 8013366:	8a3a      	ldrh	r2, [r7, #16]
 8013368:	4611      	mov	r1, r2
 801336a:	4618      	mov	r0, r3
 801336c:	f7fd fc94 	bl	8010c98 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	891a      	ldrh	r2, [r3, #8]
 8013374:	8a3b      	ldrh	r3, [r7, #16]
 8013376:	1ad3      	subs	r3, r2, r3
 8013378:	b29a      	uxth	r2, r3
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	895b      	ldrh	r3, [r3, #10]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d005      	beq.n	8013392 <tcp_input+0x13a>
 8013386:	4b54      	ldr	r3, [pc, #336]	@ (80134d8 <tcp_input+0x280>)
 8013388:	22df      	movs	r2, #223	@ 0xdf
 801338a:	495c      	ldr	r1, [pc, #368]	@ (80134fc <tcp_input+0x2a4>)
 801338c:	4854      	ldr	r0, [pc, #336]	@ (80134e0 <tcp_input+0x288>)
 801338e:	f00a fcfd 	bl	801dd8c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013392:	687b      	ldr	r3, [r7, #4]
 8013394:	891a      	ldrh	r2, [r3, #8]
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	891b      	ldrh	r3, [r3, #8]
 801339c:	429a      	cmp	r2, r3
 801339e:	d005      	beq.n	80133ac <tcp_input+0x154>
 80133a0:	4b4d      	ldr	r3, [pc, #308]	@ (80134d8 <tcp_input+0x280>)
 80133a2:	22e0      	movs	r2, #224	@ 0xe0
 80133a4:	4956      	ldr	r1, [pc, #344]	@ (8013500 <tcp_input+0x2a8>)
 80133a6:	484e      	ldr	r0, [pc, #312]	@ (80134e0 <tcp_input+0x288>)
 80133a8:	f00a fcf0 	bl	801dd8c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80133ac:	4b4d      	ldr	r3, [pc, #308]	@ (80134e4 <tcp_input+0x28c>)
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	881b      	ldrh	r3, [r3, #0]
 80133b2:	b29b      	uxth	r3, r3
 80133b4:	4a4b      	ldr	r2, [pc, #300]	@ (80134e4 <tcp_input+0x28c>)
 80133b6:	6814      	ldr	r4, [r2, #0]
 80133b8:	4618      	mov	r0, r3
 80133ba:	f7fb fe07 	bl	800efcc <lwip_htons>
 80133be:	4603      	mov	r3, r0
 80133c0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80133c2:	4b48      	ldr	r3, [pc, #288]	@ (80134e4 <tcp_input+0x28c>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	885b      	ldrh	r3, [r3, #2]
 80133c8:	b29b      	uxth	r3, r3
 80133ca:	4a46      	ldr	r2, [pc, #280]	@ (80134e4 <tcp_input+0x28c>)
 80133cc:	6814      	ldr	r4, [r2, #0]
 80133ce:	4618      	mov	r0, r3
 80133d0:	f7fb fdfc 	bl	800efcc <lwip_htons>
 80133d4:	4603      	mov	r3, r0
 80133d6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80133d8:	4b42      	ldr	r3, [pc, #264]	@ (80134e4 <tcp_input+0x28c>)
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	685b      	ldr	r3, [r3, #4]
 80133de:	4a41      	ldr	r2, [pc, #260]	@ (80134e4 <tcp_input+0x28c>)
 80133e0:	6814      	ldr	r4, [r2, #0]
 80133e2:	4618      	mov	r0, r3
 80133e4:	f7fb fe07 	bl	800eff6 <lwip_htonl>
 80133e8:	4603      	mov	r3, r0
 80133ea:	6063      	str	r3, [r4, #4]
 80133ec:	6863      	ldr	r3, [r4, #4]
 80133ee:	4a45      	ldr	r2, [pc, #276]	@ (8013504 <tcp_input+0x2ac>)
 80133f0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80133f2:	4b3c      	ldr	r3, [pc, #240]	@ (80134e4 <tcp_input+0x28c>)
 80133f4:	681b      	ldr	r3, [r3, #0]
 80133f6:	689b      	ldr	r3, [r3, #8]
 80133f8:	4a3a      	ldr	r2, [pc, #232]	@ (80134e4 <tcp_input+0x28c>)
 80133fa:	6814      	ldr	r4, [r2, #0]
 80133fc:	4618      	mov	r0, r3
 80133fe:	f7fb fdfa 	bl	800eff6 <lwip_htonl>
 8013402:	4603      	mov	r3, r0
 8013404:	60a3      	str	r3, [r4, #8]
 8013406:	68a3      	ldr	r3, [r4, #8]
 8013408:	4a3f      	ldr	r2, [pc, #252]	@ (8013508 <tcp_input+0x2b0>)
 801340a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801340c:	4b35      	ldr	r3, [pc, #212]	@ (80134e4 <tcp_input+0x28c>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	89db      	ldrh	r3, [r3, #14]
 8013412:	b29b      	uxth	r3, r3
 8013414:	4a33      	ldr	r2, [pc, #204]	@ (80134e4 <tcp_input+0x28c>)
 8013416:	6814      	ldr	r4, [r2, #0]
 8013418:	4618      	mov	r0, r3
 801341a:	f7fb fdd7 	bl	800efcc <lwip_htons>
 801341e:	4603      	mov	r3, r0
 8013420:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8013422:	4b30      	ldr	r3, [pc, #192]	@ (80134e4 <tcp_input+0x28c>)
 8013424:	681b      	ldr	r3, [r3, #0]
 8013426:	899b      	ldrh	r3, [r3, #12]
 8013428:	b29b      	uxth	r3, r3
 801342a:	4618      	mov	r0, r3
 801342c:	f7fb fdce 	bl	800efcc <lwip_htons>
 8013430:	4603      	mov	r3, r0
 8013432:	b2db      	uxtb	r3, r3
 8013434:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8013438:	b2da      	uxtb	r2, r3
 801343a:	4b34      	ldr	r3, [pc, #208]	@ (801350c <tcp_input+0x2b4>)
 801343c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	891a      	ldrh	r2, [r3, #8]
 8013442:	4b33      	ldr	r3, [pc, #204]	@ (8013510 <tcp_input+0x2b8>)
 8013444:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8013446:	4b31      	ldr	r3, [pc, #196]	@ (801350c <tcp_input+0x2b4>)
 8013448:	781b      	ldrb	r3, [r3, #0]
 801344a:	f003 0303 	and.w	r3, r3, #3
 801344e:	2b00      	cmp	r3, #0
 8013450:	d00c      	beq.n	801346c <tcp_input+0x214>
    tcplen++;
 8013452:	4b2f      	ldr	r3, [pc, #188]	@ (8013510 <tcp_input+0x2b8>)
 8013454:	881b      	ldrh	r3, [r3, #0]
 8013456:	3301      	adds	r3, #1
 8013458:	b29a      	uxth	r2, r3
 801345a:	4b2d      	ldr	r3, [pc, #180]	@ (8013510 <tcp_input+0x2b8>)
 801345c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	891a      	ldrh	r2, [r3, #8]
 8013462:	4b2b      	ldr	r3, [pc, #172]	@ (8013510 <tcp_input+0x2b8>)
 8013464:	881b      	ldrh	r3, [r3, #0]
 8013466:	429a      	cmp	r2, r3
 8013468:	f200 82e6 	bhi.w	8013a38 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801346c:	2300      	movs	r3, #0
 801346e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013470:	4b28      	ldr	r3, [pc, #160]	@ (8013514 <tcp_input+0x2bc>)
 8013472:	681b      	ldr	r3, [r3, #0]
 8013474:	61fb      	str	r3, [r7, #28]
 8013476:	e09d      	b.n	80135b4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013478:	69fb      	ldr	r3, [r7, #28]
 801347a:	7d1b      	ldrb	r3, [r3, #20]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d105      	bne.n	801348c <tcp_input+0x234>
 8013480:	4b15      	ldr	r3, [pc, #84]	@ (80134d8 <tcp_input+0x280>)
 8013482:	22fb      	movs	r2, #251	@ 0xfb
 8013484:	4924      	ldr	r1, [pc, #144]	@ (8013518 <tcp_input+0x2c0>)
 8013486:	4816      	ldr	r0, [pc, #88]	@ (80134e0 <tcp_input+0x288>)
 8013488:	f00a fc80 	bl	801dd8c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801348c:	69fb      	ldr	r3, [r7, #28]
 801348e:	7d1b      	ldrb	r3, [r3, #20]
 8013490:	2b0a      	cmp	r3, #10
 8013492:	d105      	bne.n	80134a0 <tcp_input+0x248>
 8013494:	4b10      	ldr	r3, [pc, #64]	@ (80134d8 <tcp_input+0x280>)
 8013496:	22fc      	movs	r2, #252	@ 0xfc
 8013498:	4920      	ldr	r1, [pc, #128]	@ (801351c <tcp_input+0x2c4>)
 801349a:	4811      	ldr	r0, [pc, #68]	@ (80134e0 <tcp_input+0x288>)
 801349c:	f00a fc76 	bl	801dd8c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80134a0:	69fb      	ldr	r3, [r7, #28]
 80134a2:	7d1b      	ldrb	r3, [r3, #20]
 80134a4:	2b01      	cmp	r3, #1
 80134a6:	d105      	bne.n	80134b4 <tcp_input+0x25c>
 80134a8:	4b0b      	ldr	r3, [pc, #44]	@ (80134d8 <tcp_input+0x280>)
 80134aa:	22fd      	movs	r2, #253	@ 0xfd
 80134ac:	491c      	ldr	r1, [pc, #112]	@ (8013520 <tcp_input+0x2c8>)
 80134ae:	480c      	ldr	r0, [pc, #48]	@ (80134e0 <tcp_input+0x288>)
 80134b0:	f00a fc6c 	bl	801dd8c <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80134b4:	69fb      	ldr	r3, [r7, #28]
 80134b6:	7a1b      	ldrb	r3, [r3, #8]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d033      	beq.n	8013524 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80134bc:	69fb      	ldr	r3, [r7, #28]
 80134be:	7a1a      	ldrb	r2, [r3, #8]
 80134c0:	4b09      	ldr	r3, [pc, #36]	@ (80134e8 <tcp_input+0x290>)
 80134c2:	685b      	ldr	r3, [r3, #4]
 80134c4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80134c8:	3301      	adds	r3, #1
 80134ca:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80134cc:	429a      	cmp	r2, r3
 80134ce:	d029      	beq.n	8013524 <tcp_input+0x2cc>
      prev = pcb;
 80134d0:	69fb      	ldr	r3, [r7, #28]
 80134d2:	61bb      	str	r3, [r7, #24]
      continue;
 80134d4:	e06b      	b.n	80135ae <tcp_input+0x356>
 80134d6:	bf00      	nop
 80134d8:	08023930 	.word	0x08023930
 80134dc:	08023964 	.word	0x08023964
 80134e0:	0802397c 	.word	0x0802397c
 80134e4:	2000ec58 	.word	0x2000ec58
 80134e8:	2000b370 	.word	0x2000b370
 80134ec:	2000ec5c 	.word	0x2000ec5c
 80134f0:	2000ec60 	.word	0x2000ec60
 80134f4:	2000ec5e 	.word	0x2000ec5e
 80134f8:	080239a4 	.word	0x080239a4
 80134fc:	080239b4 	.word	0x080239b4
 8013500:	080239c0 	.word	0x080239c0
 8013504:	2000ec68 	.word	0x2000ec68
 8013508:	2000ec6c 	.word	0x2000ec6c
 801350c:	2000ec74 	.word	0x2000ec74
 8013510:	2000ec72 	.word	0x2000ec72
 8013514:	2000ec3c 	.word	0x2000ec3c
 8013518:	080239e0 	.word	0x080239e0
 801351c:	08023a08 	.word	0x08023a08
 8013520:	08023a34 	.word	0x08023a34
    }

    if (pcb->remote_port == tcphdr->src &&
 8013524:	69fb      	ldr	r3, [r7, #28]
 8013526:	8b1a      	ldrh	r2, [r3, #24]
 8013528:	4b72      	ldr	r3, [pc, #456]	@ (80136f4 <tcp_input+0x49c>)
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	881b      	ldrh	r3, [r3, #0]
 801352e:	b29b      	uxth	r3, r3
 8013530:	429a      	cmp	r2, r3
 8013532:	d13a      	bne.n	80135aa <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013534:	69fb      	ldr	r3, [r7, #28]
 8013536:	8ada      	ldrh	r2, [r3, #22]
 8013538:	4b6e      	ldr	r3, [pc, #440]	@ (80136f4 <tcp_input+0x49c>)
 801353a:	681b      	ldr	r3, [r3, #0]
 801353c:	885b      	ldrh	r3, [r3, #2]
 801353e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013540:	429a      	cmp	r2, r3
 8013542:	d132      	bne.n	80135aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013544:	69fb      	ldr	r3, [r7, #28]
 8013546:	685a      	ldr	r2, [r3, #4]
 8013548:	4b6b      	ldr	r3, [pc, #428]	@ (80136f8 <tcp_input+0x4a0>)
 801354a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801354c:	429a      	cmp	r2, r3
 801354e:	d12c      	bne.n	80135aa <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013550:	69fb      	ldr	r3, [r7, #28]
 8013552:	681a      	ldr	r2, [r3, #0]
 8013554:	4b68      	ldr	r3, [pc, #416]	@ (80136f8 <tcp_input+0x4a0>)
 8013556:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013558:	429a      	cmp	r2, r3
 801355a:	d126      	bne.n	80135aa <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801355c:	69fb      	ldr	r3, [r7, #28]
 801355e:	68db      	ldr	r3, [r3, #12]
 8013560:	69fa      	ldr	r2, [r7, #28]
 8013562:	429a      	cmp	r2, r3
 8013564:	d106      	bne.n	8013574 <tcp_input+0x31c>
 8013566:	4b65      	ldr	r3, [pc, #404]	@ (80136fc <tcp_input+0x4a4>)
 8013568:	f240 120d 	movw	r2, #269	@ 0x10d
 801356c:	4964      	ldr	r1, [pc, #400]	@ (8013700 <tcp_input+0x4a8>)
 801356e:	4865      	ldr	r0, [pc, #404]	@ (8013704 <tcp_input+0x4ac>)
 8013570:	f00a fc0c 	bl	801dd8c <iprintf>
      if (prev != NULL) {
 8013574:	69bb      	ldr	r3, [r7, #24]
 8013576:	2b00      	cmp	r3, #0
 8013578:	d00a      	beq.n	8013590 <tcp_input+0x338>
        prev->next = pcb->next;
 801357a:	69fb      	ldr	r3, [r7, #28]
 801357c:	68da      	ldr	r2, [r3, #12]
 801357e:	69bb      	ldr	r3, [r7, #24]
 8013580:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013582:	4b61      	ldr	r3, [pc, #388]	@ (8013708 <tcp_input+0x4b0>)
 8013584:	681a      	ldr	r2, [r3, #0]
 8013586:	69fb      	ldr	r3, [r7, #28]
 8013588:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801358a:	4a5f      	ldr	r2, [pc, #380]	@ (8013708 <tcp_input+0x4b0>)
 801358c:	69fb      	ldr	r3, [r7, #28]
 801358e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013590:	69fb      	ldr	r3, [r7, #28]
 8013592:	68db      	ldr	r3, [r3, #12]
 8013594:	69fa      	ldr	r2, [r7, #28]
 8013596:	429a      	cmp	r2, r3
 8013598:	d111      	bne.n	80135be <tcp_input+0x366>
 801359a:	4b58      	ldr	r3, [pc, #352]	@ (80136fc <tcp_input+0x4a4>)
 801359c:	f240 1215 	movw	r2, #277	@ 0x115
 80135a0:	495a      	ldr	r1, [pc, #360]	@ (801370c <tcp_input+0x4b4>)
 80135a2:	4858      	ldr	r0, [pc, #352]	@ (8013704 <tcp_input+0x4ac>)
 80135a4:	f00a fbf2 	bl	801dd8c <iprintf>
      break;
 80135a8:	e009      	b.n	80135be <tcp_input+0x366>
    }
    prev = pcb;
 80135aa:	69fb      	ldr	r3, [r7, #28]
 80135ac:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80135ae:	69fb      	ldr	r3, [r7, #28]
 80135b0:	68db      	ldr	r3, [r3, #12]
 80135b2:	61fb      	str	r3, [r7, #28]
 80135b4:	69fb      	ldr	r3, [r7, #28]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	f47f af5e 	bne.w	8013478 <tcp_input+0x220>
 80135bc:	e000      	b.n	80135c0 <tcp_input+0x368>
      break;
 80135be:	bf00      	nop
  }

  if (pcb == NULL) {
 80135c0:	69fb      	ldr	r3, [r7, #28]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	f040 80aa 	bne.w	801371c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80135c8:	4b51      	ldr	r3, [pc, #324]	@ (8013710 <tcp_input+0x4b8>)
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	61fb      	str	r3, [r7, #28]
 80135ce:	e03f      	b.n	8013650 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80135d0:	69fb      	ldr	r3, [r7, #28]
 80135d2:	7d1b      	ldrb	r3, [r3, #20]
 80135d4:	2b0a      	cmp	r3, #10
 80135d6:	d006      	beq.n	80135e6 <tcp_input+0x38e>
 80135d8:	4b48      	ldr	r3, [pc, #288]	@ (80136fc <tcp_input+0x4a4>)
 80135da:	f240 121f 	movw	r2, #287	@ 0x11f
 80135de:	494d      	ldr	r1, [pc, #308]	@ (8013714 <tcp_input+0x4bc>)
 80135e0:	4848      	ldr	r0, [pc, #288]	@ (8013704 <tcp_input+0x4ac>)
 80135e2:	f00a fbd3 	bl	801dd8c <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80135e6:	69fb      	ldr	r3, [r7, #28]
 80135e8:	7a1b      	ldrb	r3, [r3, #8]
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d009      	beq.n	8013602 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80135ee:	69fb      	ldr	r3, [r7, #28]
 80135f0:	7a1a      	ldrb	r2, [r3, #8]
 80135f2:	4b41      	ldr	r3, [pc, #260]	@ (80136f8 <tcp_input+0x4a0>)
 80135f4:	685b      	ldr	r3, [r3, #4]
 80135f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80135fa:	3301      	adds	r3, #1
 80135fc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80135fe:	429a      	cmp	r2, r3
 8013600:	d122      	bne.n	8013648 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013602:	69fb      	ldr	r3, [r7, #28]
 8013604:	8b1a      	ldrh	r2, [r3, #24]
 8013606:	4b3b      	ldr	r3, [pc, #236]	@ (80136f4 <tcp_input+0x49c>)
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	881b      	ldrh	r3, [r3, #0]
 801360c:	b29b      	uxth	r3, r3
 801360e:	429a      	cmp	r2, r3
 8013610:	d11b      	bne.n	801364a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013612:	69fb      	ldr	r3, [r7, #28]
 8013614:	8ada      	ldrh	r2, [r3, #22]
 8013616:	4b37      	ldr	r3, [pc, #220]	@ (80136f4 <tcp_input+0x49c>)
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	885b      	ldrh	r3, [r3, #2]
 801361c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801361e:	429a      	cmp	r2, r3
 8013620:	d113      	bne.n	801364a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013622:	69fb      	ldr	r3, [r7, #28]
 8013624:	685a      	ldr	r2, [r3, #4]
 8013626:	4b34      	ldr	r3, [pc, #208]	@ (80136f8 <tcp_input+0x4a0>)
 8013628:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801362a:	429a      	cmp	r2, r3
 801362c:	d10d      	bne.n	801364a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801362e:	69fb      	ldr	r3, [r7, #28]
 8013630:	681a      	ldr	r2, [r3, #0]
 8013632:	4b31      	ldr	r3, [pc, #196]	@ (80136f8 <tcp_input+0x4a0>)
 8013634:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013636:	429a      	cmp	r2, r3
 8013638:	d107      	bne.n	801364a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801363a:	69f8      	ldr	r0, [r7, #28]
 801363c:	f000 fb56 	bl	8013cec <tcp_timewait_input>
        }
        pbuf_free(p);
 8013640:	6878      	ldr	r0, [r7, #4]
 8013642:	f7fd fbe1 	bl	8010e08 <pbuf_free>
        return;
 8013646:	e1fd      	b.n	8013a44 <tcp_input+0x7ec>
        continue;
 8013648:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801364a:	69fb      	ldr	r3, [r7, #28]
 801364c:	68db      	ldr	r3, [r3, #12]
 801364e:	61fb      	str	r3, [r7, #28]
 8013650:	69fb      	ldr	r3, [r7, #28]
 8013652:	2b00      	cmp	r3, #0
 8013654:	d1bc      	bne.n	80135d0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013656:	2300      	movs	r3, #0
 8013658:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801365a:	4b2f      	ldr	r3, [pc, #188]	@ (8013718 <tcp_input+0x4c0>)
 801365c:	681b      	ldr	r3, [r3, #0]
 801365e:	617b      	str	r3, [r7, #20]
 8013660:	e02a      	b.n	80136b8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013662:	697b      	ldr	r3, [r7, #20]
 8013664:	7a1b      	ldrb	r3, [r3, #8]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d00c      	beq.n	8013684 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801366a:	697b      	ldr	r3, [r7, #20]
 801366c:	7a1a      	ldrb	r2, [r3, #8]
 801366e:	4b22      	ldr	r3, [pc, #136]	@ (80136f8 <tcp_input+0x4a0>)
 8013670:	685b      	ldr	r3, [r3, #4]
 8013672:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8013676:	3301      	adds	r3, #1
 8013678:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801367a:	429a      	cmp	r2, r3
 801367c:	d002      	beq.n	8013684 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801367e:	697b      	ldr	r3, [r7, #20]
 8013680:	61bb      	str	r3, [r7, #24]
        continue;
 8013682:	e016      	b.n	80136b2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013684:	697b      	ldr	r3, [r7, #20]
 8013686:	8ada      	ldrh	r2, [r3, #22]
 8013688:	4b1a      	ldr	r3, [pc, #104]	@ (80136f4 <tcp_input+0x49c>)
 801368a:	681b      	ldr	r3, [r3, #0]
 801368c:	885b      	ldrh	r3, [r3, #2]
 801368e:	b29b      	uxth	r3, r3
 8013690:	429a      	cmp	r2, r3
 8013692:	d10c      	bne.n	80136ae <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013694:	697b      	ldr	r3, [r7, #20]
 8013696:	681a      	ldr	r2, [r3, #0]
 8013698:	4b17      	ldr	r3, [pc, #92]	@ (80136f8 <tcp_input+0x4a0>)
 801369a:	695b      	ldr	r3, [r3, #20]
 801369c:	429a      	cmp	r2, r3
 801369e:	d00f      	beq.n	80136c0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80136a0:	697b      	ldr	r3, [r7, #20]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d00d      	beq.n	80136c2 <tcp_input+0x46a>
 80136a6:	697b      	ldr	r3, [r7, #20]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d009      	beq.n	80136c2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80136ae:	697b      	ldr	r3, [r7, #20]
 80136b0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80136b2:	697b      	ldr	r3, [r7, #20]
 80136b4:	68db      	ldr	r3, [r3, #12]
 80136b6:	617b      	str	r3, [r7, #20]
 80136b8:	697b      	ldr	r3, [r7, #20]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d1d1      	bne.n	8013662 <tcp_input+0x40a>
 80136be:	e000      	b.n	80136c2 <tcp_input+0x46a>
            break;
 80136c0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80136c2:	697b      	ldr	r3, [r7, #20]
 80136c4:	2b00      	cmp	r3, #0
 80136c6:	d029      	beq.n	801371c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80136c8:	69bb      	ldr	r3, [r7, #24]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d00a      	beq.n	80136e4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80136ce:	697b      	ldr	r3, [r7, #20]
 80136d0:	68da      	ldr	r2, [r3, #12]
 80136d2:	69bb      	ldr	r3, [r7, #24]
 80136d4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80136d6:	4b10      	ldr	r3, [pc, #64]	@ (8013718 <tcp_input+0x4c0>)
 80136d8:	681a      	ldr	r2, [r3, #0]
 80136da:	697b      	ldr	r3, [r7, #20]
 80136dc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80136de:	4a0e      	ldr	r2, [pc, #56]	@ (8013718 <tcp_input+0x4c0>)
 80136e0:	697b      	ldr	r3, [r7, #20]
 80136e2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80136e4:	6978      	ldr	r0, [r7, #20]
 80136e6:	f000 fa03 	bl	8013af0 <tcp_listen_input>
      }
      pbuf_free(p);
 80136ea:	6878      	ldr	r0, [r7, #4]
 80136ec:	f7fd fb8c 	bl	8010e08 <pbuf_free>
      return;
 80136f0:	e1a8      	b.n	8013a44 <tcp_input+0x7ec>
 80136f2:	bf00      	nop
 80136f4:	2000ec58 	.word	0x2000ec58
 80136f8:	2000b370 	.word	0x2000b370
 80136fc:	08023930 	.word	0x08023930
 8013700:	08023a5c 	.word	0x08023a5c
 8013704:	0802397c 	.word	0x0802397c
 8013708:	2000ec3c 	.word	0x2000ec3c
 801370c:	08023a88 	.word	0x08023a88
 8013710:	2000ec40 	.word	0x2000ec40
 8013714:	08023ab4 	.word	0x08023ab4
 8013718:	2000ec38 	.word	0x2000ec38
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801371c:	69fb      	ldr	r3, [r7, #28]
 801371e:	2b00      	cmp	r3, #0
 8013720:	f000 8158 	beq.w	80139d4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013724:	4b95      	ldr	r3, [pc, #596]	@ (801397c <tcp_input+0x724>)
 8013726:	2200      	movs	r2, #0
 8013728:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801372a:	687b      	ldr	r3, [r7, #4]
 801372c:	891a      	ldrh	r2, [r3, #8]
 801372e:	4b93      	ldr	r3, [pc, #588]	@ (801397c <tcp_input+0x724>)
 8013730:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013732:	4a92      	ldr	r2, [pc, #584]	@ (801397c <tcp_input+0x724>)
 8013734:	687b      	ldr	r3, [r7, #4]
 8013736:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013738:	4b91      	ldr	r3, [pc, #580]	@ (8013980 <tcp_input+0x728>)
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	4a8f      	ldr	r2, [pc, #572]	@ (801397c <tcp_input+0x724>)
 801373e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013740:	4b90      	ldr	r3, [pc, #576]	@ (8013984 <tcp_input+0x72c>)
 8013742:	2200      	movs	r2, #0
 8013744:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013746:	4b90      	ldr	r3, [pc, #576]	@ (8013988 <tcp_input+0x730>)
 8013748:	2200      	movs	r2, #0
 801374a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801374c:	4b8f      	ldr	r3, [pc, #572]	@ (801398c <tcp_input+0x734>)
 801374e:	2200      	movs	r2, #0
 8013750:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013752:	4b8f      	ldr	r3, [pc, #572]	@ (8013990 <tcp_input+0x738>)
 8013754:	781b      	ldrb	r3, [r3, #0]
 8013756:	f003 0308 	and.w	r3, r3, #8
 801375a:	2b00      	cmp	r3, #0
 801375c:	d006      	beq.n	801376c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	7b5b      	ldrb	r3, [r3, #13]
 8013762:	f043 0301 	orr.w	r3, r3, #1
 8013766:	b2da      	uxtb	r2, r3
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801376c:	69fb      	ldr	r3, [r7, #28]
 801376e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013770:	2b00      	cmp	r3, #0
 8013772:	d017      	beq.n	80137a4 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013774:	69f8      	ldr	r0, [r7, #28]
 8013776:	f7ff f85b 	bl	8012830 <tcp_process_refused_data>
 801377a:	4603      	mov	r3, r0
 801377c:	f113 0f0d 	cmn.w	r3, #13
 8013780:	d007      	beq.n	8013792 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013782:	69fb      	ldr	r3, [r7, #28]
 8013784:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013786:	2b00      	cmp	r3, #0
 8013788:	d00c      	beq.n	80137a4 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801378a:	4b82      	ldr	r3, [pc, #520]	@ (8013994 <tcp_input+0x73c>)
 801378c:	881b      	ldrh	r3, [r3, #0]
 801378e:	2b00      	cmp	r3, #0
 8013790:	d008      	beq.n	80137a4 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013792:	69fb      	ldr	r3, [r7, #28]
 8013794:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8013796:	2b00      	cmp	r3, #0
 8013798:	f040 80e3 	bne.w	8013962 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801379c:	69f8      	ldr	r0, [r7, #28]
 801379e:	f003 fdff 	bl	80173a0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80137a2:	e0de      	b.n	8013962 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 80137a4:	4a7c      	ldr	r2, [pc, #496]	@ (8013998 <tcp_input+0x740>)
 80137a6:	69fb      	ldr	r3, [r7, #28]
 80137a8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80137aa:	69f8      	ldr	r0, [r7, #28]
 80137ac:	f000 fb18 	bl	8013de0 <tcp_process>
 80137b0:	4603      	mov	r3, r0
 80137b2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80137b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80137b8:	f113 0f0d 	cmn.w	r3, #13
 80137bc:	f000 80d3 	beq.w	8013966 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80137c0:	4b71      	ldr	r3, [pc, #452]	@ (8013988 <tcp_input+0x730>)
 80137c2:	781b      	ldrb	r3, [r3, #0]
 80137c4:	f003 0308 	and.w	r3, r3, #8
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	d015      	beq.n	80137f8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80137cc:	69fb      	ldr	r3, [r7, #28]
 80137ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80137d2:	2b00      	cmp	r3, #0
 80137d4:	d008      	beq.n	80137e8 <tcp_input+0x590>
 80137d6:	69fb      	ldr	r3, [r7, #28]
 80137d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80137dc:	69fa      	ldr	r2, [r7, #28]
 80137de:	6912      	ldr	r2, [r2, #16]
 80137e0:	f06f 010d 	mvn.w	r1, #13
 80137e4:	4610      	mov	r0, r2
 80137e6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80137e8:	69f9      	ldr	r1, [r7, #28]
 80137ea:	486c      	ldr	r0, [pc, #432]	@ (801399c <tcp_input+0x744>)
 80137ec:	f7ff fbbc 	bl	8012f68 <tcp_pcb_remove>
        tcp_free(pcb);
 80137f0:	69f8      	ldr	r0, [r7, #28]
 80137f2:	f7fd ff1f 	bl	8011634 <tcp_free>
 80137f6:	e0da      	b.n	80139ae <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80137f8:	2300      	movs	r3, #0
 80137fa:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80137fc:	4b63      	ldr	r3, [pc, #396]	@ (801398c <tcp_input+0x734>)
 80137fe:	881b      	ldrh	r3, [r3, #0]
 8013800:	2b00      	cmp	r3, #0
 8013802:	d01d      	beq.n	8013840 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013804:	4b61      	ldr	r3, [pc, #388]	@ (801398c <tcp_input+0x734>)
 8013806:	881b      	ldrh	r3, [r3, #0]
 8013808:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801380a:	69fb      	ldr	r3, [r7, #28]
 801380c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013810:	2b00      	cmp	r3, #0
 8013812:	d00a      	beq.n	801382a <tcp_input+0x5d2>
 8013814:	69fb      	ldr	r3, [r7, #28]
 8013816:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801381a:	69fa      	ldr	r2, [r7, #28]
 801381c:	6910      	ldr	r0, [r2, #16]
 801381e:	89fa      	ldrh	r2, [r7, #14]
 8013820:	69f9      	ldr	r1, [r7, #28]
 8013822:	4798      	blx	r3
 8013824:	4603      	mov	r3, r0
 8013826:	74fb      	strb	r3, [r7, #19]
 8013828:	e001      	b.n	801382e <tcp_input+0x5d6>
 801382a:	2300      	movs	r3, #0
 801382c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801382e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013832:	f113 0f0d 	cmn.w	r3, #13
 8013836:	f000 8098 	beq.w	801396a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801383a:	4b54      	ldr	r3, [pc, #336]	@ (801398c <tcp_input+0x734>)
 801383c:	2200      	movs	r2, #0
 801383e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013840:	69f8      	ldr	r0, [r7, #28]
 8013842:	f000 f915 	bl	8013a70 <tcp_input_delayed_close>
 8013846:	4603      	mov	r3, r0
 8013848:	2b00      	cmp	r3, #0
 801384a:	f040 8090 	bne.w	801396e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801384e:	4b4d      	ldr	r3, [pc, #308]	@ (8013984 <tcp_input+0x72c>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d041      	beq.n	80138da <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013856:	69fb      	ldr	r3, [r7, #28]
 8013858:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801385a:	2b00      	cmp	r3, #0
 801385c:	d006      	beq.n	801386c <tcp_input+0x614>
 801385e:	4b50      	ldr	r3, [pc, #320]	@ (80139a0 <tcp_input+0x748>)
 8013860:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8013864:	494f      	ldr	r1, [pc, #316]	@ (80139a4 <tcp_input+0x74c>)
 8013866:	4850      	ldr	r0, [pc, #320]	@ (80139a8 <tcp_input+0x750>)
 8013868:	f00a fa90 	bl	801dd8c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801386c:	69fb      	ldr	r3, [r7, #28]
 801386e:	8b5b      	ldrh	r3, [r3, #26]
 8013870:	f003 0310 	and.w	r3, r3, #16
 8013874:	2b00      	cmp	r3, #0
 8013876:	d008      	beq.n	801388a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013878:	4b42      	ldr	r3, [pc, #264]	@ (8013984 <tcp_input+0x72c>)
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	4618      	mov	r0, r3
 801387e:	f7fd fac3 	bl	8010e08 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013882:	69f8      	ldr	r0, [r7, #28]
 8013884:	f7fe fa1a 	bl	8011cbc <tcp_abort>
            goto aborted;
 8013888:	e091      	b.n	80139ae <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801388a:	69fb      	ldr	r3, [r7, #28]
 801388c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013890:	2b00      	cmp	r3, #0
 8013892:	d00c      	beq.n	80138ae <tcp_input+0x656>
 8013894:	69fb      	ldr	r3, [r7, #28]
 8013896:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 801389a:	69fb      	ldr	r3, [r7, #28]
 801389c:	6918      	ldr	r0, [r3, #16]
 801389e:	4b39      	ldr	r3, [pc, #228]	@ (8013984 <tcp_input+0x72c>)
 80138a0:	681a      	ldr	r2, [r3, #0]
 80138a2:	2300      	movs	r3, #0
 80138a4:	69f9      	ldr	r1, [r7, #28]
 80138a6:	47a0      	blx	r4
 80138a8:	4603      	mov	r3, r0
 80138aa:	74fb      	strb	r3, [r7, #19]
 80138ac:	e008      	b.n	80138c0 <tcp_input+0x668>
 80138ae:	4b35      	ldr	r3, [pc, #212]	@ (8013984 <tcp_input+0x72c>)
 80138b0:	681a      	ldr	r2, [r3, #0]
 80138b2:	2300      	movs	r3, #0
 80138b4:	69f9      	ldr	r1, [r7, #28]
 80138b6:	2000      	movs	r0, #0
 80138b8:	f7ff f890 	bl	80129dc <tcp_recv_null>
 80138bc:	4603      	mov	r3, r0
 80138be:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80138c0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80138c4:	f113 0f0d 	cmn.w	r3, #13
 80138c8:	d053      	beq.n	8013972 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80138ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80138ce:	2b00      	cmp	r3, #0
 80138d0:	d003      	beq.n	80138da <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80138d2:	4b2c      	ldr	r3, [pc, #176]	@ (8013984 <tcp_input+0x72c>)
 80138d4:	681a      	ldr	r2, [r3, #0]
 80138d6:	69fb      	ldr	r3, [r7, #28]
 80138d8:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80138da:	4b2b      	ldr	r3, [pc, #172]	@ (8013988 <tcp_input+0x730>)
 80138dc:	781b      	ldrb	r3, [r3, #0]
 80138de:	f003 0320 	and.w	r3, r3, #32
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d030      	beq.n	8013948 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80138e6:	69fb      	ldr	r3, [r7, #28]
 80138e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d009      	beq.n	8013902 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80138ee:	69fb      	ldr	r3, [r7, #28]
 80138f0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80138f2:	7b5a      	ldrb	r2, [r3, #13]
 80138f4:	69fb      	ldr	r3, [r7, #28]
 80138f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80138f8:	f042 0220 	orr.w	r2, r2, #32
 80138fc:	b2d2      	uxtb	r2, r2
 80138fe:	735a      	strb	r2, [r3, #13]
 8013900:	e022      	b.n	8013948 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013902:	69fb      	ldr	r3, [r7, #28]
 8013904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013906:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801390a:	d005      	beq.n	8013918 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013910:	3301      	adds	r3, #1
 8013912:	b29a      	uxth	r2, r3
 8013914:	69fb      	ldr	r3, [r7, #28]
 8013916:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013918:	69fb      	ldr	r3, [r7, #28]
 801391a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801391e:	2b00      	cmp	r3, #0
 8013920:	d00b      	beq.n	801393a <tcp_input+0x6e2>
 8013922:	69fb      	ldr	r3, [r7, #28]
 8013924:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013928:	69fb      	ldr	r3, [r7, #28]
 801392a:	6918      	ldr	r0, [r3, #16]
 801392c:	2300      	movs	r3, #0
 801392e:	2200      	movs	r2, #0
 8013930:	69f9      	ldr	r1, [r7, #28]
 8013932:	47a0      	blx	r4
 8013934:	4603      	mov	r3, r0
 8013936:	74fb      	strb	r3, [r7, #19]
 8013938:	e001      	b.n	801393e <tcp_input+0x6e6>
 801393a:	2300      	movs	r3, #0
 801393c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801393e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013942:	f113 0f0d 	cmn.w	r3, #13
 8013946:	d016      	beq.n	8013976 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013948:	4b13      	ldr	r3, [pc, #76]	@ (8013998 <tcp_input+0x740>)
 801394a:	2200      	movs	r2, #0
 801394c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801394e:	69f8      	ldr	r0, [r7, #28]
 8013950:	f000 f88e 	bl	8013a70 <tcp_input_delayed_close>
 8013954:	4603      	mov	r3, r0
 8013956:	2b00      	cmp	r3, #0
 8013958:	d128      	bne.n	80139ac <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801395a:	69f8      	ldr	r0, [r7, #28]
 801395c:	f002 ff1a 	bl	8016794 <tcp_output>
 8013960:	e025      	b.n	80139ae <tcp_input+0x756>
        goto aborted;
 8013962:	bf00      	nop
 8013964:	e023      	b.n	80139ae <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013966:	bf00      	nop
 8013968:	e021      	b.n	80139ae <tcp_input+0x756>
              goto aborted;
 801396a:	bf00      	nop
 801396c:	e01f      	b.n	80139ae <tcp_input+0x756>
          goto aborted;
 801396e:	bf00      	nop
 8013970:	e01d      	b.n	80139ae <tcp_input+0x756>
            goto aborted;
 8013972:	bf00      	nop
 8013974:	e01b      	b.n	80139ae <tcp_input+0x756>
              goto aborted;
 8013976:	bf00      	nop
 8013978:	e019      	b.n	80139ae <tcp_input+0x756>
 801397a:	bf00      	nop
 801397c:	2000ec48 	.word	0x2000ec48
 8013980:	2000ec58 	.word	0x2000ec58
 8013984:	2000ec78 	.word	0x2000ec78
 8013988:	2000ec75 	.word	0x2000ec75
 801398c:	2000ec70 	.word	0x2000ec70
 8013990:	2000ec74 	.word	0x2000ec74
 8013994:	2000ec72 	.word	0x2000ec72
 8013998:	2000ec7c 	.word	0x2000ec7c
 801399c:	2000ec3c 	.word	0x2000ec3c
 80139a0:	08023930 	.word	0x08023930
 80139a4:	08023ae4 	.word	0x08023ae4
 80139a8:	0802397c 	.word	0x0802397c
          goto aborted;
 80139ac:	bf00      	nop
    tcp_input_pcb = NULL;
 80139ae:	4b27      	ldr	r3, [pc, #156]	@ (8013a4c <tcp_input+0x7f4>)
 80139b0:	2200      	movs	r2, #0
 80139b2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80139b4:	4b26      	ldr	r3, [pc, #152]	@ (8013a50 <tcp_input+0x7f8>)
 80139b6:	2200      	movs	r2, #0
 80139b8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80139ba:	4b26      	ldr	r3, [pc, #152]	@ (8013a54 <tcp_input+0x7fc>)
 80139bc:	685b      	ldr	r3, [r3, #4]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d03f      	beq.n	8013a42 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80139c2:	4b24      	ldr	r3, [pc, #144]	@ (8013a54 <tcp_input+0x7fc>)
 80139c4:	685b      	ldr	r3, [r3, #4]
 80139c6:	4618      	mov	r0, r3
 80139c8:	f7fd fa1e 	bl	8010e08 <pbuf_free>
      inseg.p = NULL;
 80139cc:	4b21      	ldr	r3, [pc, #132]	@ (8013a54 <tcp_input+0x7fc>)
 80139ce:	2200      	movs	r2, #0
 80139d0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80139d2:	e036      	b.n	8013a42 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80139d4:	4b20      	ldr	r3, [pc, #128]	@ (8013a58 <tcp_input+0x800>)
 80139d6:	681b      	ldr	r3, [r3, #0]
 80139d8:	899b      	ldrh	r3, [r3, #12]
 80139da:	b29b      	uxth	r3, r3
 80139dc:	4618      	mov	r0, r3
 80139de:	f7fb faf5 	bl	800efcc <lwip_htons>
 80139e2:	4603      	mov	r3, r0
 80139e4:	b2db      	uxtb	r3, r3
 80139e6:	f003 0304 	and.w	r3, r3, #4
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d118      	bne.n	8013a20 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80139ee:	4b1b      	ldr	r3, [pc, #108]	@ (8013a5c <tcp_input+0x804>)
 80139f0:	6819      	ldr	r1, [r3, #0]
 80139f2:	4b1b      	ldr	r3, [pc, #108]	@ (8013a60 <tcp_input+0x808>)
 80139f4:	881b      	ldrh	r3, [r3, #0]
 80139f6:	461a      	mov	r2, r3
 80139f8:	4b1a      	ldr	r3, [pc, #104]	@ (8013a64 <tcp_input+0x80c>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80139fe:	4b16      	ldr	r3, [pc, #88]	@ (8013a58 <tcp_input+0x800>)
 8013a00:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a02:	885b      	ldrh	r3, [r3, #2]
 8013a04:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013a06:	4a14      	ldr	r2, [pc, #80]	@ (8013a58 <tcp_input+0x800>)
 8013a08:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013a0a:	8812      	ldrh	r2, [r2, #0]
 8013a0c:	b292      	uxth	r2, r2
 8013a0e:	9202      	str	r2, [sp, #8]
 8013a10:	9301      	str	r3, [sp, #4]
 8013a12:	4b15      	ldr	r3, [pc, #84]	@ (8013a68 <tcp_input+0x810>)
 8013a14:	9300      	str	r3, [sp, #0]
 8013a16:	4b15      	ldr	r3, [pc, #84]	@ (8013a6c <tcp_input+0x814>)
 8013a18:	4602      	mov	r2, r0
 8013a1a:	2000      	movs	r0, #0
 8013a1c:	f003 fc6e 	bl	80172fc <tcp_rst>
    pbuf_free(p);
 8013a20:	6878      	ldr	r0, [r7, #4]
 8013a22:	f7fd f9f1 	bl	8010e08 <pbuf_free>
  return;
 8013a26:	e00c      	b.n	8013a42 <tcp_input+0x7ea>
    goto dropped;
 8013a28:	bf00      	nop
 8013a2a:	e006      	b.n	8013a3a <tcp_input+0x7e2>
    goto dropped;
 8013a2c:	bf00      	nop
 8013a2e:	e004      	b.n	8013a3a <tcp_input+0x7e2>
    goto dropped;
 8013a30:	bf00      	nop
 8013a32:	e002      	b.n	8013a3a <tcp_input+0x7e2>
      goto dropped;
 8013a34:	bf00      	nop
 8013a36:	e000      	b.n	8013a3a <tcp_input+0x7e2>
      goto dropped;
 8013a38:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013a3a:	6878      	ldr	r0, [r7, #4]
 8013a3c:	f7fd f9e4 	bl	8010e08 <pbuf_free>
 8013a40:	e000      	b.n	8013a44 <tcp_input+0x7ec>
  return;
 8013a42:	bf00      	nop
}
 8013a44:	3724      	adds	r7, #36	@ 0x24
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd90      	pop	{r4, r7, pc}
 8013a4a:	bf00      	nop
 8013a4c:	2000ec7c 	.word	0x2000ec7c
 8013a50:	2000ec78 	.word	0x2000ec78
 8013a54:	2000ec48 	.word	0x2000ec48
 8013a58:	2000ec58 	.word	0x2000ec58
 8013a5c:	2000ec6c 	.word	0x2000ec6c
 8013a60:	2000ec72 	.word	0x2000ec72
 8013a64:	2000ec68 	.word	0x2000ec68
 8013a68:	2000b380 	.word	0x2000b380
 8013a6c:	2000b384 	.word	0x2000b384

08013a70 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b082      	sub	sp, #8
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	2b00      	cmp	r3, #0
 8013a7c:	d106      	bne.n	8013a8c <tcp_input_delayed_close+0x1c>
 8013a7e:	4b17      	ldr	r3, [pc, #92]	@ (8013adc <tcp_input_delayed_close+0x6c>)
 8013a80:	f240 225a 	movw	r2, #602	@ 0x25a
 8013a84:	4916      	ldr	r1, [pc, #88]	@ (8013ae0 <tcp_input_delayed_close+0x70>)
 8013a86:	4817      	ldr	r0, [pc, #92]	@ (8013ae4 <tcp_input_delayed_close+0x74>)
 8013a88:	f00a f980 	bl	801dd8c <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013a8c:	4b16      	ldr	r3, [pc, #88]	@ (8013ae8 <tcp_input_delayed_close+0x78>)
 8013a8e:	781b      	ldrb	r3, [r3, #0]
 8013a90:	f003 0310 	and.w	r3, r3, #16
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d01c      	beq.n	8013ad2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	8b5b      	ldrh	r3, [r3, #26]
 8013a9c:	f003 0310 	and.w	r3, r3, #16
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	d10d      	bne.n	8013ac0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013aa4:	687b      	ldr	r3, [r7, #4]
 8013aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013aaa:	2b00      	cmp	r3, #0
 8013aac:	d008      	beq.n	8013ac0 <tcp_input_delayed_close+0x50>
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013ab4:	687a      	ldr	r2, [r7, #4]
 8013ab6:	6912      	ldr	r2, [r2, #16]
 8013ab8:	f06f 010e 	mvn.w	r1, #14
 8013abc:	4610      	mov	r0, r2
 8013abe:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013ac0:	6879      	ldr	r1, [r7, #4]
 8013ac2:	480a      	ldr	r0, [pc, #40]	@ (8013aec <tcp_input_delayed_close+0x7c>)
 8013ac4:	f7ff fa50 	bl	8012f68 <tcp_pcb_remove>
    tcp_free(pcb);
 8013ac8:	6878      	ldr	r0, [r7, #4]
 8013aca:	f7fd fdb3 	bl	8011634 <tcp_free>
    return 1;
 8013ace:	2301      	movs	r3, #1
 8013ad0:	e000      	b.n	8013ad4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013ad2:	2300      	movs	r3, #0
}
 8013ad4:	4618      	mov	r0, r3
 8013ad6:	3708      	adds	r7, #8
 8013ad8:	46bd      	mov	sp, r7
 8013ada:	bd80      	pop	{r7, pc}
 8013adc:	08023930 	.word	0x08023930
 8013ae0:	08023b00 	.word	0x08023b00
 8013ae4:	0802397c 	.word	0x0802397c
 8013ae8:	2000ec75 	.word	0x2000ec75
 8013aec:	2000ec3c 	.word	0x2000ec3c

08013af0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013af0:	b590      	push	{r4, r7, lr}
 8013af2:	b08b      	sub	sp, #44	@ 0x2c
 8013af4:	af04      	add	r7, sp, #16
 8013af6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013af8:	4b6f      	ldr	r3, [pc, #444]	@ (8013cb8 <tcp_listen_input+0x1c8>)
 8013afa:	781b      	ldrb	r3, [r3, #0]
 8013afc:	f003 0304 	and.w	r3, r3, #4
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	f040 80d2 	bne.w	8013caa <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	2b00      	cmp	r3, #0
 8013b0a:	d106      	bne.n	8013b1a <tcp_listen_input+0x2a>
 8013b0c:	4b6b      	ldr	r3, [pc, #428]	@ (8013cbc <tcp_listen_input+0x1cc>)
 8013b0e:	f240 2281 	movw	r2, #641	@ 0x281
 8013b12:	496b      	ldr	r1, [pc, #428]	@ (8013cc0 <tcp_listen_input+0x1d0>)
 8013b14:	486b      	ldr	r0, [pc, #428]	@ (8013cc4 <tcp_listen_input+0x1d4>)
 8013b16:	f00a f939 	bl	801dd8c <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013b1a:	4b67      	ldr	r3, [pc, #412]	@ (8013cb8 <tcp_listen_input+0x1c8>)
 8013b1c:	781b      	ldrb	r3, [r3, #0]
 8013b1e:	f003 0310 	and.w	r3, r3, #16
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d019      	beq.n	8013b5a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013b26:	4b68      	ldr	r3, [pc, #416]	@ (8013cc8 <tcp_listen_input+0x1d8>)
 8013b28:	6819      	ldr	r1, [r3, #0]
 8013b2a:	4b68      	ldr	r3, [pc, #416]	@ (8013ccc <tcp_listen_input+0x1dc>)
 8013b2c:	881b      	ldrh	r3, [r3, #0]
 8013b2e:	461a      	mov	r2, r3
 8013b30:	4b67      	ldr	r3, [pc, #412]	@ (8013cd0 <tcp_listen_input+0x1e0>)
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013b36:	4b67      	ldr	r3, [pc, #412]	@ (8013cd4 <tcp_listen_input+0x1e4>)
 8013b38:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013b3a:	885b      	ldrh	r3, [r3, #2]
 8013b3c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013b3e:	4a65      	ldr	r2, [pc, #404]	@ (8013cd4 <tcp_listen_input+0x1e4>)
 8013b40:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013b42:	8812      	ldrh	r2, [r2, #0]
 8013b44:	b292      	uxth	r2, r2
 8013b46:	9202      	str	r2, [sp, #8]
 8013b48:	9301      	str	r3, [sp, #4]
 8013b4a:	4b63      	ldr	r3, [pc, #396]	@ (8013cd8 <tcp_listen_input+0x1e8>)
 8013b4c:	9300      	str	r3, [sp, #0]
 8013b4e:	4b63      	ldr	r3, [pc, #396]	@ (8013cdc <tcp_listen_input+0x1ec>)
 8013b50:	4602      	mov	r2, r0
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f003 fbd2 	bl	80172fc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013b58:	e0a9      	b.n	8013cae <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8013b5a:	4b57      	ldr	r3, [pc, #348]	@ (8013cb8 <tcp_listen_input+0x1c8>)
 8013b5c:	781b      	ldrb	r3, [r3, #0]
 8013b5e:	f003 0302 	and.w	r3, r3, #2
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	f000 80a3 	beq.w	8013cae <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	7d5b      	ldrb	r3, [r3, #21]
 8013b6c:	4618      	mov	r0, r3
 8013b6e:	f7ff f859 	bl	8012c24 <tcp_alloc>
 8013b72:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013b74:	697b      	ldr	r3, [r7, #20]
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d111      	bne.n	8013b9e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013b7a:	687b      	ldr	r3, [r7, #4]
 8013b7c:	699b      	ldr	r3, [r3, #24]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d00a      	beq.n	8013b98 <tcp_listen_input+0xa8>
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	699b      	ldr	r3, [r3, #24]
 8013b86:	687a      	ldr	r2, [r7, #4]
 8013b88:	6910      	ldr	r0, [r2, #16]
 8013b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8013b8e:	2100      	movs	r1, #0
 8013b90:	4798      	blx	r3
 8013b92:	4603      	mov	r3, r0
 8013b94:	73bb      	strb	r3, [r7, #14]
      return;
 8013b96:	e08b      	b.n	8013cb0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013b98:	23f0      	movs	r3, #240	@ 0xf0
 8013b9a:	73bb      	strb	r3, [r7, #14]
      return;
 8013b9c:	e088      	b.n	8013cb0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013b9e:	4b50      	ldr	r3, [pc, #320]	@ (8013ce0 <tcp_listen_input+0x1f0>)
 8013ba0:	695a      	ldr	r2, [r3, #20]
 8013ba2:	697b      	ldr	r3, [r7, #20]
 8013ba4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013ba6:	4b4e      	ldr	r3, [pc, #312]	@ (8013ce0 <tcp_listen_input+0x1f0>)
 8013ba8:	691a      	ldr	r2, [r3, #16]
 8013baa:	697b      	ldr	r3, [r7, #20]
 8013bac:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	8ada      	ldrh	r2, [r3, #22]
 8013bb2:	697b      	ldr	r3, [r7, #20]
 8013bb4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013bb6:	4b47      	ldr	r3, [pc, #284]	@ (8013cd4 <tcp_listen_input+0x1e4>)
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	881b      	ldrh	r3, [r3, #0]
 8013bbc:	b29a      	uxth	r2, r3
 8013bbe:	697b      	ldr	r3, [r7, #20]
 8013bc0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013bc2:	697b      	ldr	r3, [r7, #20]
 8013bc4:	2203      	movs	r2, #3
 8013bc6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013bc8:	4b41      	ldr	r3, [pc, #260]	@ (8013cd0 <tcp_listen_input+0x1e0>)
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	1c5a      	adds	r2, r3, #1
 8013bce:	697b      	ldr	r3, [r7, #20]
 8013bd0:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013bd2:	697b      	ldr	r3, [r7, #20]
 8013bd4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013bd6:	697b      	ldr	r3, [r7, #20]
 8013bd8:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8013bda:	6978      	ldr	r0, [r7, #20]
 8013bdc:	f7ff fa58 	bl	8013090 <tcp_next_iss>
 8013be0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013be2:	697b      	ldr	r3, [r7, #20]
 8013be4:	693a      	ldr	r2, [r7, #16]
 8013be6:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8013be8:	697b      	ldr	r3, [r7, #20]
 8013bea:	693a      	ldr	r2, [r7, #16]
 8013bec:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8013bee:	697b      	ldr	r3, [r7, #20]
 8013bf0:	693a      	ldr	r2, [r7, #16]
 8013bf2:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8013bf4:	697b      	ldr	r3, [r7, #20]
 8013bf6:	693a      	ldr	r2, [r7, #16]
 8013bf8:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013bfa:	4b35      	ldr	r3, [pc, #212]	@ (8013cd0 <tcp_listen_input+0x1e0>)
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	1e5a      	subs	r2, r3, #1
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013c04:	687b      	ldr	r3, [r7, #4]
 8013c06:	691a      	ldr	r2, [r3, #16]
 8013c08:	697b      	ldr	r3, [r7, #20]
 8013c0a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013c0c:	697b      	ldr	r3, [r7, #20]
 8013c0e:	687a      	ldr	r2, [r7, #4]
 8013c10:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	7a5b      	ldrb	r3, [r3, #9]
 8013c16:	f003 030c 	and.w	r3, r3, #12
 8013c1a:	b2da      	uxtb	r2, r3
 8013c1c:	697b      	ldr	r3, [r7, #20]
 8013c1e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	7a1a      	ldrb	r2, [r3, #8]
 8013c24:	697b      	ldr	r3, [r7, #20]
 8013c26:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013c28:	4b2e      	ldr	r3, [pc, #184]	@ (8013ce4 <tcp_listen_input+0x1f4>)
 8013c2a:	681a      	ldr	r2, [r3, #0]
 8013c2c:	697b      	ldr	r3, [r7, #20]
 8013c2e:	60da      	str	r2, [r3, #12]
 8013c30:	4a2c      	ldr	r2, [pc, #176]	@ (8013ce4 <tcp_listen_input+0x1f4>)
 8013c32:	697b      	ldr	r3, [r7, #20]
 8013c34:	6013      	str	r3, [r2, #0]
 8013c36:	f003 fd23 	bl	8017680 <tcp_timer_needed>
 8013c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8013ce8 <tcp_listen_input+0x1f8>)
 8013c3c:	2201      	movs	r2, #1
 8013c3e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013c40:	6978      	ldr	r0, [r7, #20]
 8013c42:	f001 fd8b 	bl	801575c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013c46:	4b23      	ldr	r3, [pc, #140]	@ (8013cd4 <tcp_listen_input+0x1e4>)
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	89db      	ldrh	r3, [r3, #14]
 8013c4c:	b29a      	uxth	r2, r3
 8013c4e:	697b      	ldr	r3, [r7, #20]
 8013c50:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013c54:	697b      	ldr	r3, [r7, #20]
 8013c56:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013c5a:	697b      	ldr	r3, [r7, #20]
 8013c5c:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013c60:	697b      	ldr	r3, [r7, #20]
 8013c62:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8013c64:	697b      	ldr	r3, [r7, #20]
 8013c66:	3304      	adds	r3, #4
 8013c68:	4618      	mov	r0, r3
 8013c6a:	f007 fbbd 	bl	801b3e8 <ip4_route>
 8013c6e:	4601      	mov	r1, r0
 8013c70:	697b      	ldr	r3, [r7, #20]
 8013c72:	3304      	adds	r3, #4
 8013c74:	461a      	mov	r2, r3
 8013c76:	4620      	mov	r0, r4
 8013c78:	f7ff fa30 	bl	80130dc <tcp_eff_send_mss_netif>
 8013c7c:	4603      	mov	r3, r0
 8013c7e:	461a      	mov	r2, r3
 8013c80:	697b      	ldr	r3, [r7, #20]
 8013c82:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013c84:	2112      	movs	r1, #18
 8013c86:	6978      	ldr	r0, [r7, #20]
 8013c88:	f002 fc96 	bl	80165b8 <tcp_enqueue_flags>
 8013c8c:	4603      	mov	r3, r0
 8013c8e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8013c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d004      	beq.n	8013ca2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8013c98:	2100      	movs	r1, #0
 8013c9a:	6978      	ldr	r0, [r7, #20]
 8013c9c:	f7fd ff50 	bl	8011b40 <tcp_abandon>
      return;
 8013ca0:	e006      	b.n	8013cb0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8013ca2:	6978      	ldr	r0, [r7, #20]
 8013ca4:	f002 fd76 	bl	8016794 <tcp_output>
  return;
 8013ca8:	e001      	b.n	8013cae <tcp_listen_input+0x1be>
    return;
 8013caa:	bf00      	nop
 8013cac:	e000      	b.n	8013cb0 <tcp_listen_input+0x1c0>
  return;
 8013cae:	bf00      	nop
}
 8013cb0:	371c      	adds	r7, #28
 8013cb2:	46bd      	mov	sp, r7
 8013cb4:	bd90      	pop	{r4, r7, pc}
 8013cb6:	bf00      	nop
 8013cb8:	2000ec74 	.word	0x2000ec74
 8013cbc:	08023930 	.word	0x08023930
 8013cc0:	08023b28 	.word	0x08023b28
 8013cc4:	0802397c 	.word	0x0802397c
 8013cc8:	2000ec6c 	.word	0x2000ec6c
 8013ccc:	2000ec72 	.word	0x2000ec72
 8013cd0:	2000ec68 	.word	0x2000ec68
 8013cd4:	2000ec58 	.word	0x2000ec58
 8013cd8:	2000b380 	.word	0x2000b380
 8013cdc:	2000b384 	.word	0x2000b384
 8013ce0:	2000b370 	.word	0x2000b370
 8013ce4:	2000ec3c 	.word	0x2000ec3c
 8013ce8:	2000ec44 	.word	0x2000ec44

08013cec <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b086      	sub	sp, #24
 8013cf0:	af04      	add	r7, sp, #16
 8013cf2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013cf4:	4b2f      	ldr	r3, [pc, #188]	@ (8013db4 <tcp_timewait_input+0xc8>)
 8013cf6:	781b      	ldrb	r3, [r3, #0]
 8013cf8:	f003 0304 	and.w	r3, r3, #4
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d153      	bne.n	8013da8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013d00:	687b      	ldr	r3, [r7, #4]
 8013d02:	2b00      	cmp	r3, #0
 8013d04:	d106      	bne.n	8013d14 <tcp_timewait_input+0x28>
 8013d06:	4b2c      	ldr	r3, [pc, #176]	@ (8013db8 <tcp_timewait_input+0xcc>)
 8013d08:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8013d0c:	492b      	ldr	r1, [pc, #172]	@ (8013dbc <tcp_timewait_input+0xd0>)
 8013d0e:	482c      	ldr	r0, [pc, #176]	@ (8013dc0 <tcp_timewait_input+0xd4>)
 8013d10:	f00a f83c 	bl	801dd8c <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013d14:	4b27      	ldr	r3, [pc, #156]	@ (8013db4 <tcp_timewait_input+0xc8>)
 8013d16:	781b      	ldrb	r3, [r3, #0]
 8013d18:	f003 0302 	and.w	r3, r3, #2
 8013d1c:	2b00      	cmp	r3, #0
 8013d1e:	d02a      	beq.n	8013d76 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013d20:	4b28      	ldr	r3, [pc, #160]	@ (8013dc4 <tcp_timewait_input+0xd8>)
 8013d22:	681a      	ldr	r2, [r3, #0]
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d28:	1ad3      	subs	r3, r2, r3
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	db2d      	blt.n	8013d8a <tcp_timewait_input+0x9e>
 8013d2e:	4b25      	ldr	r3, [pc, #148]	@ (8013dc4 <tcp_timewait_input+0xd8>)
 8013d30:	681a      	ldr	r2, [r3, #0]
 8013d32:	687b      	ldr	r3, [r7, #4]
 8013d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013d36:	6879      	ldr	r1, [r7, #4]
 8013d38:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013d3a:	440b      	add	r3, r1
 8013d3c:	1ad3      	subs	r3, r2, r3
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	dc23      	bgt.n	8013d8a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d42:	4b21      	ldr	r3, [pc, #132]	@ (8013dc8 <tcp_timewait_input+0xdc>)
 8013d44:	6819      	ldr	r1, [r3, #0]
 8013d46:	4b21      	ldr	r3, [pc, #132]	@ (8013dcc <tcp_timewait_input+0xe0>)
 8013d48:	881b      	ldrh	r3, [r3, #0]
 8013d4a:	461a      	mov	r2, r3
 8013d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8013dc4 <tcp_timewait_input+0xd8>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013d52:	4b1f      	ldr	r3, [pc, #124]	@ (8013dd0 <tcp_timewait_input+0xe4>)
 8013d54:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d56:	885b      	ldrh	r3, [r3, #2]
 8013d58:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8013dd0 <tcp_timewait_input+0xe4>)
 8013d5c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013d5e:	8812      	ldrh	r2, [r2, #0]
 8013d60:	b292      	uxth	r2, r2
 8013d62:	9202      	str	r2, [sp, #8]
 8013d64:	9301      	str	r3, [sp, #4]
 8013d66:	4b1b      	ldr	r3, [pc, #108]	@ (8013dd4 <tcp_timewait_input+0xe8>)
 8013d68:	9300      	str	r3, [sp, #0]
 8013d6a:	4b1b      	ldr	r3, [pc, #108]	@ (8013dd8 <tcp_timewait_input+0xec>)
 8013d6c:	4602      	mov	r2, r0
 8013d6e:	6878      	ldr	r0, [r7, #4]
 8013d70:	f003 fac4 	bl	80172fc <tcp_rst>
      return;
 8013d74:	e01b      	b.n	8013dae <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8013d76:	4b0f      	ldr	r3, [pc, #60]	@ (8013db4 <tcp_timewait_input+0xc8>)
 8013d78:	781b      	ldrb	r3, [r3, #0]
 8013d7a:	f003 0301 	and.w	r3, r3, #1
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d003      	beq.n	8013d8a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8013d82:	4b16      	ldr	r3, [pc, #88]	@ (8013ddc <tcp_timewait_input+0xf0>)
 8013d84:	681a      	ldr	r2, [r3, #0]
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8013d8a:	4b10      	ldr	r3, [pc, #64]	@ (8013dcc <tcp_timewait_input+0xe0>)
 8013d8c:	881b      	ldrh	r3, [r3, #0]
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	d00c      	beq.n	8013dac <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	8b5b      	ldrh	r3, [r3, #26]
 8013d96:	f043 0302 	orr.w	r3, r3, #2
 8013d9a:	b29a      	uxth	r2, r3
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013da0:	6878      	ldr	r0, [r7, #4]
 8013da2:	f002 fcf7 	bl	8016794 <tcp_output>
  }
  return;
 8013da6:	e001      	b.n	8013dac <tcp_timewait_input+0xc0>
    return;
 8013da8:	bf00      	nop
 8013daa:	e000      	b.n	8013dae <tcp_timewait_input+0xc2>
  return;
 8013dac:	bf00      	nop
}
 8013dae:	3708      	adds	r7, #8
 8013db0:	46bd      	mov	sp, r7
 8013db2:	bd80      	pop	{r7, pc}
 8013db4:	2000ec74 	.word	0x2000ec74
 8013db8:	08023930 	.word	0x08023930
 8013dbc:	08023b48 	.word	0x08023b48
 8013dc0:	0802397c 	.word	0x0802397c
 8013dc4:	2000ec68 	.word	0x2000ec68
 8013dc8:	2000ec6c 	.word	0x2000ec6c
 8013dcc:	2000ec72 	.word	0x2000ec72
 8013dd0:	2000ec58 	.word	0x2000ec58
 8013dd4:	2000b380 	.word	0x2000b380
 8013dd8:	2000b384 	.word	0x2000b384
 8013ddc:	2000ec30 	.word	0x2000ec30

08013de0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013de0:	b590      	push	{r4, r7, lr}
 8013de2:	b08d      	sub	sp, #52	@ 0x34
 8013de4:	af04      	add	r7, sp, #16
 8013de6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013de8:	2300      	movs	r3, #0
 8013dea:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013dec:	2300      	movs	r3, #0
 8013dee:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d106      	bne.n	8013e04 <tcp_process+0x24>
 8013df6:	4b9d      	ldr	r3, [pc, #628]	@ (801406c <tcp_process+0x28c>)
 8013df8:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8013dfc:	499c      	ldr	r1, [pc, #624]	@ (8014070 <tcp_process+0x290>)
 8013dfe:	489d      	ldr	r0, [pc, #628]	@ (8014074 <tcp_process+0x294>)
 8013e00:	f009 ffc4 	bl	801dd8c <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013e04:	4b9c      	ldr	r3, [pc, #624]	@ (8014078 <tcp_process+0x298>)
 8013e06:	781b      	ldrb	r3, [r3, #0]
 8013e08:	f003 0304 	and.w	r3, r3, #4
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d04e      	beq.n	8013eae <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	7d1b      	ldrb	r3, [r3, #20]
 8013e14:	2b02      	cmp	r3, #2
 8013e16:	d108      	bne.n	8013e2a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8013e1c:	4b97      	ldr	r3, [pc, #604]	@ (801407c <tcp_process+0x29c>)
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	429a      	cmp	r2, r3
 8013e22:	d123      	bne.n	8013e6c <tcp_process+0x8c>
        acceptable = 1;
 8013e24:	2301      	movs	r3, #1
 8013e26:	76fb      	strb	r3, [r7, #27]
 8013e28:	e020      	b.n	8013e6c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013e2e:	4b94      	ldr	r3, [pc, #592]	@ (8014080 <tcp_process+0x2a0>)
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	429a      	cmp	r2, r3
 8013e34:	d102      	bne.n	8013e3c <tcp_process+0x5c>
        acceptable = 1;
 8013e36:	2301      	movs	r3, #1
 8013e38:	76fb      	strb	r3, [r7, #27]
 8013e3a:	e017      	b.n	8013e6c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013e3c:	4b90      	ldr	r3, [pc, #576]	@ (8014080 <tcp_process+0x2a0>)
 8013e3e:	681a      	ldr	r2, [r3, #0]
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e44:	1ad3      	subs	r3, r2, r3
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	db10      	blt.n	8013e6c <tcp_process+0x8c>
 8013e4a:	4b8d      	ldr	r3, [pc, #564]	@ (8014080 <tcp_process+0x2a0>)
 8013e4c:	681a      	ldr	r2, [r3, #0]
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013e52:	6879      	ldr	r1, [r7, #4]
 8013e54:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8013e56:	440b      	add	r3, r1
 8013e58:	1ad3      	subs	r3, r2, r3
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	dc06      	bgt.n	8013e6c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	8b5b      	ldrh	r3, [r3, #26]
 8013e62:	f043 0302 	orr.w	r3, r3, #2
 8013e66:	b29a      	uxth	r2, r3
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8013e6c:	7efb      	ldrb	r3, [r7, #27]
 8013e6e:	2b00      	cmp	r3, #0
 8013e70:	d01b      	beq.n	8013eaa <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	7d1b      	ldrb	r3, [r3, #20]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d106      	bne.n	8013e88 <tcp_process+0xa8>
 8013e7a:	4b7c      	ldr	r3, [pc, #496]	@ (801406c <tcp_process+0x28c>)
 8013e7c:	f44f 724e 	mov.w	r2, #824	@ 0x338
 8013e80:	4980      	ldr	r1, [pc, #512]	@ (8014084 <tcp_process+0x2a4>)
 8013e82:	487c      	ldr	r0, [pc, #496]	@ (8014074 <tcp_process+0x294>)
 8013e84:	f009 ff82 	bl	801dd8c <iprintf>
      recv_flags |= TF_RESET;
 8013e88:	4b7f      	ldr	r3, [pc, #508]	@ (8014088 <tcp_process+0x2a8>)
 8013e8a:	781b      	ldrb	r3, [r3, #0]
 8013e8c:	f043 0308 	orr.w	r3, r3, #8
 8013e90:	b2da      	uxtb	r2, r3
 8013e92:	4b7d      	ldr	r3, [pc, #500]	@ (8014088 <tcp_process+0x2a8>)
 8013e94:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	8b5b      	ldrh	r3, [r3, #26]
 8013e9a:	f023 0301 	bic.w	r3, r3, #1
 8013e9e:	b29a      	uxth	r2, r3
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8013ea4:	f06f 030d 	mvn.w	r3, #13
 8013ea8:	e37a      	b.n	80145a0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8013eaa:	2300      	movs	r3, #0
 8013eac:	e378      	b.n	80145a0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8013eae:	4b72      	ldr	r3, [pc, #456]	@ (8014078 <tcp_process+0x298>)
 8013eb0:	781b      	ldrb	r3, [r3, #0]
 8013eb2:	f003 0302 	and.w	r3, r3, #2
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d010      	beq.n	8013edc <tcp_process+0xfc>
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	7d1b      	ldrb	r3, [r3, #20]
 8013ebe:	2b02      	cmp	r3, #2
 8013ec0:	d00c      	beq.n	8013edc <tcp_process+0xfc>
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	7d1b      	ldrb	r3, [r3, #20]
 8013ec6:	2b03      	cmp	r3, #3
 8013ec8:	d008      	beq.n	8013edc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	8b5b      	ldrh	r3, [r3, #26]
 8013ece:	f043 0302 	orr.w	r3, r3, #2
 8013ed2:	b29a      	uxth	r2, r3
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013ed8:	2300      	movs	r3, #0
 8013eda:	e361      	b.n	80145a0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	8b5b      	ldrh	r3, [r3, #26]
 8013ee0:	f003 0310 	and.w	r3, r3, #16
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d103      	bne.n	8013ef0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013ee8:	4b68      	ldr	r3, [pc, #416]	@ (801408c <tcp_process+0x2ac>)
 8013eea:	681a      	ldr	r2, [r3, #0]
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	2200      	movs	r2, #0
 8013ef4:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	2200      	movs	r2, #0
 8013efc:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 8013f00:	6878      	ldr	r0, [r7, #4]
 8013f02:	f001 fc2b 	bl	801575c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	7d1b      	ldrb	r3, [r3, #20]
 8013f0a:	3b02      	subs	r3, #2
 8013f0c:	2b07      	cmp	r3, #7
 8013f0e:	f200 8337 	bhi.w	8014580 <tcp_process+0x7a0>
 8013f12:	a201      	add	r2, pc, #4	@ (adr r2, 8013f18 <tcp_process+0x138>)
 8013f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f18:	08013f39 	.word	0x08013f39
 8013f1c:	08014169 	.word	0x08014169
 8013f20:	080142e1 	.word	0x080142e1
 8013f24:	0801430b 	.word	0x0801430b
 8013f28:	0801442f 	.word	0x0801442f
 8013f2c:	080142e1 	.word	0x080142e1
 8013f30:	080144bb 	.word	0x080144bb
 8013f34:	0801454b 	.word	0x0801454b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013f38:	4b4f      	ldr	r3, [pc, #316]	@ (8014078 <tcp_process+0x298>)
 8013f3a:	781b      	ldrb	r3, [r3, #0]
 8013f3c:	f003 0310 	and.w	r3, r3, #16
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	f000 80e4 	beq.w	801410e <tcp_process+0x32e>
 8013f46:	4b4c      	ldr	r3, [pc, #304]	@ (8014078 <tcp_process+0x298>)
 8013f48:	781b      	ldrb	r3, [r3, #0]
 8013f4a:	f003 0302 	and.w	r3, r3, #2
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	f000 80dd 	beq.w	801410e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013f58:	1c5a      	adds	r2, r3, #1
 8013f5a:	4b48      	ldr	r3, [pc, #288]	@ (801407c <tcp_process+0x29c>)
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	429a      	cmp	r2, r3
 8013f60:	f040 80d5 	bne.w	801410e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013f64:	4b46      	ldr	r3, [pc, #280]	@ (8014080 <tcp_process+0x2a0>)
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	1c5a      	adds	r2, r3, #1
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 8013f76:	4b41      	ldr	r3, [pc, #260]	@ (801407c <tcp_process+0x29c>)
 8013f78:	681a      	ldr	r2, [r3, #0]
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8013f7e:	4b44      	ldr	r3, [pc, #272]	@ (8014090 <tcp_process+0x2b0>)
 8013f80:	681b      	ldr	r3, [r3, #0]
 8013f82:	89db      	ldrh	r3, [r3, #14]
 8013f84:	b29a      	uxth	r2, r3
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013f98:	4b39      	ldr	r3, [pc, #228]	@ (8014080 <tcp_process+0x2a0>)
 8013f9a:	681b      	ldr	r3, [r3, #0]
 8013f9c:	1e5a      	subs	r2, r3, #1
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 8013fa2:	687b      	ldr	r3, [r7, #4]
 8013fa4:	2204      	movs	r2, #4
 8013fa6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	3304      	adds	r3, #4
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f007 fa19 	bl	801b3e8 <ip4_route>
 8013fb6:	4601      	mov	r1, r0
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	3304      	adds	r3, #4
 8013fbc:	461a      	mov	r2, r3
 8013fbe:	4620      	mov	r0, r4
 8013fc0:	f7ff f88c 	bl	80130dc <tcp_eff_send_mss_netif>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	461a      	mov	r2, r3
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013fd0:	009a      	lsls	r2, r3, #2
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013fd6:	005b      	lsls	r3, r3, #1
 8013fd8:	f241 111c 	movw	r1, #4380	@ 0x111c
 8013fdc:	428b      	cmp	r3, r1
 8013fde:	bf38      	it	cc
 8013fe0:	460b      	movcc	r3, r1
 8013fe2:	429a      	cmp	r2, r3
 8013fe4:	d204      	bcs.n	8013ff0 <tcp_process+0x210>
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013fea:	009b      	lsls	r3, r3, #2
 8013fec:	b29b      	uxth	r3, r3
 8013fee:	e00d      	b.n	801400c <tcp_process+0x22c>
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8013ff4:	005b      	lsls	r3, r3, #1
 8013ff6:	f241 121c 	movw	r2, #4380	@ 0x111c
 8013ffa:	4293      	cmp	r3, r2
 8013ffc:	d904      	bls.n	8014008 <tcp_process+0x228>
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014002:	005b      	lsls	r3, r3, #1
 8014004:	b29b      	uxth	r3, r3
 8014006:	e001      	b.n	801400c <tcp_process+0x22c>
 8014008:	f241 131c 	movw	r3, #4380	@ 0x111c
 801400c:	687a      	ldr	r2, [r7, #4]
 801400e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014018:	2b00      	cmp	r3, #0
 801401a:	d106      	bne.n	801402a <tcp_process+0x24a>
 801401c:	4b13      	ldr	r3, [pc, #76]	@ (801406c <tcp_process+0x28c>)
 801401e:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 8014022:	491c      	ldr	r1, [pc, #112]	@ (8014094 <tcp_process+0x2b4>)
 8014024:	4813      	ldr	r0, [pc, #76]	@ (8014074 <tcp_process+0x294>)
 8014026:	f009 feb1 	bl	801dd8c <iprintf>
        --pcb->snd_queuelen;
 801402a:	687b      	ldr	r3, [r7, #4]
 801402c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014030:	3b01      	subs	r3, #1
 8014032:	b29a      	uxth	r2, r3
 8014034:	687b      	ldr	r3, [r7, #4]
 8014036:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801403a:	687b      	ldr	r3, [r7, #4]
 801403c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801403e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8014040:	69fb      	ldr	r3, [r7, #28]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d12a      	bne.n	801409c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801404a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801404c:	69fb      	ldr	r3, [r7, #28]
 801404e:	2b00      	cmp	r3, #0
 8014050:	d106      	bne.n	8014060 <tcp_process+0x280>
 8014052:	4b06      	ldr	r3, [pc, #24]	@ (801406c <tcp_process+0x28c>)
 8014054:	f44f 725d 	mov.w	r2, #884	@ 0x374
 8014058:	490f      	ldr	r1, [pc, #60]	@ (8014098 <tcp_process+0x2b8>)
 801405a:	4806      	ldr	r0, [pc, #24]	@ (8014074 <tcp_process+0x294>)
 801405c:	f009 fe96 	bl	801dd8c <iprintf>
          pcb->unsent = rseg->next;
 8014060:	69fb      	ldr	r3, [r7, #28]
 8014062:	681a      	ldr	r2, [r3, #0]
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	66da      	str	r2, [r3, #108]	@ 0x6c
 8014068:	e01c      	b.n	80140a4 <tcp_process+0x2c4>
 801406a:	bf00      	nop
 801406c:	08023930 	.word	0x08023930
 8014070:	08023b68 	.word	0x08023b68
 8014074:	0802397c 	.word	0x0802397c
 8014078:	2000ec74 	.word	0x2000ec74
 801407c:	2000ec6c 	.word	0x2000ec6c
 8014080:	2000ec68 	.word	0x2000ec68
 8014084:	08023b84 	.word	0x08023b84
 8014088:	2000ec75 	.word	0x2000ec75
 801408c:	2000ec30 	.word	0x2000ec30
 8014090:	2000ec58 	.word	0x2000ec58
 8014094:	08023ba4 	.word	0x08023ba4
 8014098:	08023bbc 	.word	0x08023bbc
        } else {
          pcb->unacked = rseg->next;
 801409c:	69fb      	ldr	r3, [r7, #28]
 801409e:	681a      	ldr	r2, [r3, #0]
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 80140a4:	69f8      	ldr	r0, [r7, #28]
 80140a6:	f7fe fc54 	bl	8012952 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d104      	bne.n	80140bc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80140b8:	861a      	strh	r2, [r3, #48]	@ 0x30
 80140ba:	e006      	b.n	80140ca <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	2200      	movs	r2, #0
 80140c0:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	2200      	movs	r2, #0
 80140c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80140d0:	2b00      	cmp	r3, #0
 80140d2:	d00a      	beq.n	80140ea <tcp_process+0x30a>
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80140da:	687a      	ldr	r2, [r7, #4]
 80140dc:	6910      	ldr	r0, [r2, #16]
 80140de:	2200      	movs	r2, #0
 80140e0:	6879      	ldr	r1, [r7, #4]
 80140e2:	4798      	blx	r3
 80140e4:	4603      	mov	r3, r0
 80140e6:	76bb      	strb	r3, [r7, #26]
 80140e8:	e001      	b.n	80140ee <tcp_process+0x30e>
 80140ea:	2300      	movs	r3, #0
 80140ec:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80140ee:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80140f2:	f113 0f0d 	cmn.w	r3, #13
 80140f6:	d102      	bne.n	80140fe <tcp_process+0x31e>
          return ERR_ABRT;
 80140f8:	f06f 030c 	mvn.w	r3, #12
 80140fc:	e250      	b.n	80145a0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	8b5b      	ldrh	r3, [r3, #26]
 8014102:	f043 0302 	orr.w	r3, r3, #2
 8014106:	b29a      	uxth	r2, r3
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801410c:	e23a      	b.n	8014584 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801410e:	4b98      	ldr	r3, [pc, #608]	@ (8014370 <tcp_process+0x590>)
 8014110:	781b      	ldrb	r3, [r3, #0]
 8014112:	f003 0310 	and.w	r3, r3, #16
 8014116:	2b00      	cmp	r3, #0
 8014118:	f000 8234 	beq.w	8014584 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801411c:	4b95      	ldr	r3, [pc, #596]	@ (8014374 <tcp_process+0x594>)
 801411e:	6819      	ldr	r1, [r3, #0]
 8014120:	4b95      	ldr	r3, [pc, #596]	@ (8014378 <tcp_process+0x598>)
 8014122:	881b      	ldrh	r3, [r3, #0]
 8014124:	461a      	mov	r2, r3
 8014126:	4b95      	ldr	r3, [pc, #596]	@ (801437c <tcp_process+0x59c>)
 8014128:	681b      	ldr	r3, [r3, #0]
 801412a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801412c:	4b94      	ldr	r3, [pc, #592]	@ (8014380 <tcp_process+0x5a0>)
 801412e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014130:	885b      	ldrh	r3, [r3, #2]
 8014132:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014134:	4a92      	ldr	r2, [pc, #584]	@ (8014380 <tcp_process+0x5a0>)
 8014136:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014138:	8812      	ldrh	r2, [r2, #0]
 801413a:	b292      	uxth	r2, r2
 801413c:	9202      	str	r2, [sp, #8]
 801413e:	9301      	str	r3, [sp, #4]
 8014140:	4b90      	ldr	r3, [pc, #576]	@ (8014384 <tcp_process+0x5a4>)
 8014142:	9300      	str	r3, [sp, #0]
 8014144:	4b90      	ldr	r3, [pc, #576]	@ (8014388 <tcp_process+0x5a8>)
 8014146:	4602      	mov	r2, r0
 8014148:	6878      	ldr	r0, [r7, #4]
 801414a:	f003 f8d7 	bl	80172fc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8014154:	2b05      	cmp	r3, #5
 8014156:	f200 8215 	bhi.w	8014584 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	2200      	movs	r2, #0
 801415e:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 8014160:	6878      	ldr	r0, [r7, #4]
 8014162:	f002 fea3 	bl	8016eac <tcp_rexmit_rto>
      break;
 8014166:	e20d      	b.n	8014584 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8014168:	4b81      	ldr	r3, [pc, #516]	@ (8014370 <tcp_process+0x590>)
 801416a:	781b      	ldrb	r3, [r3, #0]
 801416c:	f003 0310 	and.w	r3, r3, #16
 8014170:	2b00      	cmp	r3, #0
 8014172:	f000 80a1 	beq.w	80142b8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014176:	4b7f      	ldr	r3, [pc, #508]	@ (8014374 <tcp_process+0x594>)
 8014178:	681a      	ldr	r2, [r3, #0]
 801417a:	687b      	ldr	r3, [r7, #4]
 801417c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801417e:	1ad3      	subs	r3, r2, r3
 8014180:	3b01      	subs	r3, #1
 8014182:	2b00      	cmp	r3, #0
 8014184:	db7e      	blt.n	8014284 <tcp_process+0x4a4>
 8014186:	4b7b      	ldr	r3, [pc, #492]	@ (8014374 <tcp_process+0x594>)
 8014188:	681a      	ldr	r2, [r3, #0]
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801418e:	1ad3      	subs	r3, r2, r3
 8014190:	2b00      	cmp	r3, #0
 8014192:	dc77      	bgt.n	8014284 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	2204      	movs	r2, #4
 8014198:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801419e:	2b00      	cmp	r3, #0
 80141a0:	d102      	bne.n	80141a8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80141a2:	23fa      	movs	r3, #250	@ 0xfa
 80141a4:	76bb      	strb	r3, [r7, #26]
 80141a6:	e01d      	b.n	80141e4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80141ac:	699b      	ldr	r3, [r3, #24]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d106      	bne.n	80141c0 <tcp_process+0x3e0>
 80141b2:	4b76      	ldr	r3, [pc, #472]	@ (801438c <tcp_process+0x5ac>)
 80141b4:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 80141b8:	4975      	ldr	r1, [pc, #468]	@ (8014390 <tcp_process+0x5b0>)
 80141ba:	4876      	ldr	r0, [pc, #472]	@ (8014394 <tcp_process+0x5b4>)
 80141bc:	f009 fde6 	bl	801dd8c <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80141c4:	699b      	ldr	r3, [r3, #24]
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d00a      	beq.n	80141e0 <tcp_process+0x400>
 80141ca:	687b      	ldr	r3, [r7, #4]
 80141cc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80141ce:	699b      	ldr	r3, [r3, #24]
 80141d0:	687a      	ldr	r2, [r7, #4]
 80141d2:	6910      	ldr	r0, [r2, #16]
 80141d4:	2200      	movs	r2, #0
 80141d6:	6879      	ldr	r1, [r7, #4]
 80141d8:	4798      	blx	r3
 80141da:	4603      	mov	r3, r0
 80141dc:	76bb      	strb	r3, [r7, #26]
 80141de:	e001      	b.n	80141e4 <tcp_process+0x404>
 80141e0:	23f0      	movs	r3, #240	@ 0xf0
 80141e2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80141e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80141e8:	2b00      	cmp	r3, #0
 80141ea:	d00a      	beq.n	8014202 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80141ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80141f0:	f113 0f0d 	cmn.w	r3, #13
 80141f4:	d002      	beq.n	80141fc <tcp_process+0x41c>
              tcp_abort(pcb);
 80141f6:	6878      	ldr	r0, [r7, #4]
 80141f8:	f7fd fd60 	bl	8011cbc <tcp_abort>
            }
            return ERR_ABRT;
 80141fc:	f06f 030c 	mvn.w	r3, #12
 8014200:	e1ce      	b.n	80145a0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8014202:	6878      	ldr	r0, [r7, #4]
 8014204:	f000 fae0 	bl	80147c8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8014208:	4b63      	ldr	r3, [pc, #396]	@ (8014398 <tcp_process+0x5b8>)
 801420a:	881b      	ldrh	r3, [r3, #0]
 801420c:	2b00      	cmp	r3, #0
 801420e:	d005      	beq.n	801421c <tcp_process+0x43c>
            recv_acked--;
 8014210:	4b61      	ldr	r3, [pc, #388]	@ (8014398 <tcp_process+0x5b8>)
 8014212:	881b      	ldrh	r3, [r3, #0]
 8014214:	3b01      	subs	r3, #1
 8014216:	b29a      	uxth	r2, r3
 8014218:	4b5f      	ldr	r3, [pc, #380]	@ (8014398 <tcp_process+0x5b8>)
 801421a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014220:	009a      	lsls	r2, r3, #2
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014226:	005b      	lsls	r3, r3, #1
 8014228:	f241 111c 	movw	r1, #4380	@ 0x111c
 801422c:	428b      	cmp	r3, r1
 801422e:	bf38      	it	cc
 8014230:	460b      	movcc	r3, r1
 8014232:	429a      	cmp	r2, r3
 8014234:	d204      	bcs.n	8014240 <tcp_process+0x460>
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801423a:	009b      	lsls	r3, r3, #2
 801423c:	b29b      	uxth	r3, r3
 801423e:	e00d      	b.n	801425c <tcp_process+0x47c>
 8014240:	687b      	ldr	r3, [r7, #4]
 8014242:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014244:	005b      	lsls	r3, r3, #1
 8014246:	f241 121c 	movw	r2, #4380	@ 0x111c
 801424a:	4293      	cmp	r3, r2
 801424c:	d904      	bls.n	8014258 <tcp_process+0x478>
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014252:	005b      	lsls	r3, r3, #1
 8014254:	b29b      	uxth	r3, r3
 8014256:	e001      	b.n	801425c <tcp_process+0x47c>
 8014258:	f241 131c 	movw	r3, #4380	@ 0x111c
 801425c:	687a      	ldr	r2, [r7, #4]
 801425e:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014262:	4b4e      	ldr	r3, [pc, #312]	@ (801439c <tcp_process+0x5bc>)
 8014264:	781b      	ldrb	r3, [r3, #0]
 8014266:	f003 0320 	and.w	r3, r3, #32
 801426a:	2b00      	cmp	r3, #0
 801426c:	d037      	beq.n	80142de <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	8b5b      	ldrh	r3, [r3, #26]
 8014272:	f043 0302 	orr.w	r3, r3, #2
 8014276:	b29a      	uxth	r2, r3
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801427c:	687b      	ldr	r3, [r7, #4]
 801427e:	2207      	movs	r2, #7
 8014280:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014282:	e02c      	b.n	80142de <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014284:	4b3b      	ldr	r3, [pc, #236]	@ (8014374 <tcp_process+0x594>)
 8014286:	6819      	ldr	r1, [r3, #0]
 8014288:	4b3b      	ldr	r3, [pc, #236]	@ (8014378 <tcp_process+0x598>)
 801428a:	881b      	ldrh	r3, [r3, #0]
 801428c:	461a      	mov	r2, r3
 801428e:	4b3b      	ldr	r3, [pc, #236]	@ (801437c <tcp_process+0x59c>)
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014294:	4b3a      	ldr	r3, [pc, #232]	@ (8014380 <tcp_process+0x5a0>)
 8014296:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014298:	885b      	ldrh	r3, [r3, #2]
 801429a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801429c:	4a38      	ldr	r2, [pc, #224]	@ (8014380 <tcp_process+0x5a0>)
 801429e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80142a0:	8812      	ldrh	r2, [r2, #0]
 80142a2:	b292      	uxth	r2, r2
 80142a4:	9202      	str	r2, [sp, #8]
 80142a6:	9301      	str	r3, [sp, #4]
 80142a8:	4b36      	ldr	r3, [pc, #216]	@ (8014384 <tcp_process+0x5a4>)
 80142aa:	9300      	str	r3, [sp, #0]
 80142ac:	4b36      	ldr	r3, [pc, #216]	@ (8014388 <tcp_process+0x5a8>)
 80142ae:	4602      	mov	r2, r0
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f003 f823 	bl	80172fc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80142b6:	e167      	b.n	8014588 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80142b8:	4b2d      	ldr	r3, [pc, #180]	@ (8014370 <tcp_process+0x590>)
 80142ba:	781b      	ldrb	r3, [r3, #0]
 80142bc:	f003 0302 	and.w	r3, r3, #2
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	f000 8161 	beq.w	8014588 <tcp_process+0x7a8>
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80142ca:	1e5a      	subs	r2, r3, #1
 80142cc:	4b2b      	ldr	r3, [pc, #172]	@ (801437c <tcp_process+0x59c>)
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	429a      	cmp	r2, r3
 80142d2:	f040 8159 	bne.w	8014588 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80142d6:	6878      	ldr	r0, [r7, #4]
 80142d8:	f002 fe0a 	bl	8016ef0 <tcp_rexmit>
      break;
 80142dc:	e154      	b.n	8014588 <tcp_process+0x7a8>
 80142de:	e153      	b.n	8014588 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80142e0:	6878      	ldr	r0, [r7, #4]
 80142e2:	f000 fa71 	bl	80147c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80142e6:	4b2d      	ldr	r3, [pc, #180]	@ (801439c <tcp_process+0x5bc>)
 80142e8:	781b      	ldrb	r3, [r3, #0]
 80142ea:	f003 0320 	and.w	r3, r3, #32
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	f000 814c 	beq.w	801458c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	8b5b      	ldrh	r3, [r3, #26]
 80142f8:	f043 0302 	orr.w	r3, r3, #2
 80142fc:	b29a      	uxth	r2, r3
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	2207      	movs	r2, #7
 8014306:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014308:	e140      	b.n	801458c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801430a:	6878      	ldr	r0, [r7, #4]
 801430c:	f000 fa5c 	bl	80147c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014310:	4b22      	ldr	r3, [pc, #136]	@ (801439c <tcp_process+0x5bc>)
 8014312:	781b      	ldrb	r3, [r3, #0]
 8014314:	f003 0320 	and.w	r3, r3, #32
 8014318:	2b00      	cmp	r3, #0
 801431a:	d071      	beq.n	8014400 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801431c:	4b14      	ldr	r3, [pc, #80]	@ (8014370 <tcp_process+0x590>)
 801431e:	781b      	ldrb	r3, [r3, #0]
 8014320:	f003 0310 	and.w	r3, r3, #16
 8014324:	2b00      	cmp	r3, #0
 8014326:	d060      	beq.n	80143ea <tcp_process+0x60a>
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801432c:	4b11      	ldr	r3, [pc, #68]	@ (8014374 <tcp_process+0x594>)
 801432e:	681b      	ldr	r3, [r3, #0]
 8014330:	429a      	cmp	r2, r3
 8014332:	d15a      	bne.n	80143ea <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014338:	2b00      	cmp	r3, #0
 801433a:	d156      	bne.n	80143ea <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	8b5b      	ldrh	r3, [r3, #26]
 8014340:	f043 0302 	orr.w	r3, r3, #2
 8014344:	b29a      	uxth	r2, r3
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801434a:	6878      	ldr	r0, [r7, #4]
 801434c:	f7fe fdbc 	bl	8012ec8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014350:	4b13      	ldr	r3, [pc, #76]	@ (80143a0 <tcp_process+0x5c0>)
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	687a      	ldr	r2, [r7, #4]
 8014356:	429a      	cmp	r2, r3
 8014358:	d105      	bne.n	8014366 <tcp_process+0x586>
 801435a:	4b11      	ldr	r3, [pc, #68]	@ (80143a0 <tcp_process+0x5c0>)
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	68db      	ldr	r3, [r3, #12]
 8014360:	4a0f      	ldr	r2, [pc, #60]	@ (80143a0 <tcp_process+0x5c0>)
 8014362:	6013      	str	r3, [r2, #0]
 8014364:	e02e      	b.n	80143c4 <tcp_process+0x5e4>
 8014366:	4b0e      	ldr	r3, [pc, #56]	@ (80143a0 <tcp_process+0x5c0>)
 8014368:	681b      	ldr	r3, [r3, #0]
 801436a:	617b      	str	r3, [r7, #20]
 801436c:	e027      	b.n	80143be <tcp_process+0x5de>
 801436e:	bf00      	nop
 8014370:	2000ec74 	.word	0x2000ec74
 8014374:	2000ec6c 	.word	0x2000ec6c
 8014378:	2000ec72 	.word	0x2000ec72
 801437c:	2000ec68 	.word	0x2000ec68
 8014380:	2000ec58 	.word	0x2000ec58
 8014384:	2000b380 	.word	0x2000b380
 8014388:	2000b384 	.word	0x2000b384
 801438c:	08023930 	.word	0x08023930
 8014390:	08023bd0 	.word	0x08023bd0
 8014394:	0802397c 	.word	0x0802397c
 8014398:	2000ec70 	.word	0x2000ec70
 801439c:	2000ec75 	.word	0x2000ec75
 80143a0:	2000ec3c 	.word	0x2000ec3c
 80143a4:	697b      	ldr	r3, [r7, #20]
 80143a6:	68db      	ldr	r3, [r3, #12]
 80143a8:	687a      	ldr	r2, [r7, #4]
 80143aa:	429a      	cmp	r2, r3
 80143ac:	d104      	bne.n	80143b8 <tcp_process+0x5d8>
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	68da      	ldr	r2, [r3, #12]
 80143b2:	697b      	ldr	r3, [r7, #20]
 80143b4:	60da      	str	r2, [r3, #12]
 80143b6:	e005      	b.n	80143c4 <tcp_process+0x5e4>
 80143b8:	697b      	ldr	r3, [r7, #20]
 80143ba:	68db      	ldr	r3, [r3, #12]
 80143bc:	617b      	str	r3, [r7, #20]
 80143be:	697b      	ldr	r3, [r7, #20]
 80143c0:	2b00      	cmp	r3, #0
 80143c2:	d1ef      	bne.n	80143a4 <tcp_process+0x5c4>
 80143c4:	687b      	ldr	r3, [r7, #4]
 80143c6:	2200      	movs	r2, #0
 80143c8:	60da      	str	r2, [r3, #12]
 80143ca:	4b77      	ldr	r3, [pc, #476]	@ (80145a8 <tcp_process+0x7c8>)
 80143cc:	2201      	movs	r2, #1
 80143ce:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	220a      	movs	r2, #10
 80143d4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80143d6:	4b75      	ldr	r3, [pc, #468]	@ (80145ac <tcp_process+0x7cc>)
 80143d8:	681a      	ldr	r2, [r3, #0]
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	60da      	str	r2, [r3, #12]
 80143de:	4a73      	ldr	r2, [pc, #460]	@ (80145ac <tcp_process+0x7cc>)
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	6013      	str	r3, [r2, #0]
 80143e4:	f003 f94c 	bl	8017680 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80143e8:	e0d2      	b.n	8014590 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	8b5b      	ldrh	r3, [r3, #26]
 80143ee:	f043 0302 	orr.w	r3, r3, #2
 80143f2:	b29a      	uxth	r2, r3
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2208      	movs	r2, #8
 80143fc:	751a      	strb	r2, [r3, #20]
      break;
 80143fe:	e0c7      	b.n	8014590 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014400:	4b6b      	ldr	r3, [pc, #428]	@ (80145b0 <tcp_process+0x7d0>)
 8014402:	781b      	ldrb	r3, [r3, #0]
 8014404:	f003 0310 	and.w	r3, r3, #16
 8014408:	2b00      	cmp	r3, #0
 801440a:	f000 80c1 	beq.w	8014590 <tcp_process+0x7b0>
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014412:	4b68      	ldr	r3, [pc, #416]	@ (80145b4 <tcp_process+0x7d4>)
 8014414:	681b      	ldr	r3, [r3, #0]
 8014416:	429a      	cmp	r2, r3
 8014418:	f040 80ba 	bne.w	8014590 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801441c:	687b      	ldr	r3, [r7, #4]
 801441e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014420:	2b00      	cmp	r3, #0
 8014422:	f040 80b5 	bne.w	8014590 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	2206      	movs	r2, #6
 801442a:	751a      	strb	r2, [r3, #20]
      break;
 801442c:	e0b0      	b.n	8014590 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801442e:	6878      	ldr	r0, [r7, #4]
 8014430:	f000 f9ca 	bl	80147c8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8014434:	4b60      	ldr	r3, [pc, #384]	@ (80145b8 <tcp_process+0x7d8>)
 8014436:	781b      	ldrb	r3, [r3, #0]
 8014438:	f003 0320 	and.w	r3, r3, #32
 801443c:	2b00      	cmp	r3, #0
 801443e:	f000 80a9 	beq.w	8014594 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	8b5b      	ldrh	r3, [r3, #26]
 8014446:	f043 0302 	orr.w	r3, r3, #2
 801444a:	b29a      	uxth	r2, r3
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014450:	6878      	ldr	r0, [r7, #4]
 8014452:	f7fe fd39 	bl	8012ec8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014456:	4b59      	ldr	r3, [pc, #356]	@ (80145bc <tcp_process+0x7dc>)
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	687a      	ldr	r2, [r7, #4]
 801445c:	429a      	cmp	r2, r3
 801445e:	d105      	bne.n	801446c <tcp_process+0x68c>
 8014460:	4b56      	ldr	r3, [pc, #344]	@ (80145bc <tcp_process+0x7dc>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	68db      	ldr	r3, [r3, #12]
 8014466:	4a55      	ldr	r2, [pc, #340]	@ (80145bc <tcp_process+0x7dc>)
 8014468:	6013      	str	r3, [r2, #0]
 801446a:	e013      	b.n	8014494 <tcp_process+0x6b4>
 801446c:	4b53      	ldr	r3, [pc, #332]	@ (80145bc <tcp_process+0x7dc>)
 801446e:	681b      	ldr	r3, [r3, #0]
 8014470:	613b      	str	r3, [r7, #16]
 8014472:	e00c      	b.n	801448e <tcp_process+0x6ae>
 8014474:	693b      	ldr	r3, [r7, #16]
 8014476:	68db      	ldr	r3, [r3, #12]
 8014478:	687a      	ldr	r2, [r7, #4]
 801447a:	429a      	cmp	r2, r3
 801447c:	d104      	bne.n	8014488 <tcp_process+0x6a8>
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	68da      	ldr	r2, [r3, #12]
 8014482:	693b      	ldr	r3, [r7, #16]
 8014484:	60da      	str	r2, [r3, #12]
 8014486:	e005      	b.n	8014494 <tcp_process+0x6b4>
 8014488:	693b      	ldr	r3, [r7, #16]
 801448a:	68db      	ldr	r3, [r3, #12]
 801448c:	613b      	str	r3, [r7, #16]
 801448e:	693b      	ldr	r3, [r7, #16]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d1ef      	bne.n	8014474 <tcp_process+0x694>
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	2200      	movs	r2, #0
 8014498:	60da      	str	r2, [r3, #12]
 801449a:	4b43      	ldr	r3, [pc, #268]	@ (80145a8 <tcp_process+0x7c8>)
 801449c:	2201      	movs	r2, #1
 801449e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80144a0:	687b      	ldr	r3, [r7, #4]
 80144a2:	220a      	movs	r2, #10
 80144a4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80144a6:	4b41      	ldr	r3, [pc, #260]	@ (80145ac <tcp_process+0x7cc>)
 80144a8:	681a      	ldr	r2, [r3, #0]
 80144aa:	687b      	ldr	r3, [r7, #4]
 80144ac:	60da      	str	r2, [r3, #12]
 80144ae:	4a3f      	ldr	r2, [pc, #252]	@ (80145ac <tcp_process+0x7cc>)
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	6013      	str	r3, [r2, #0]
 80144b4:	f003 f8e4 	bl	8017680 <tcp_timer_needed>
      }
      break;
 80144b8:	e06c      	b.n	8014594 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80144ba:	6878      	ldr	r0, [r7, #4]
 80144bc:	f000 f984 	bl	80147c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80144c0:	4b3b      	ldr	r3, [pc, #236]	@ (80145b0 <tcp_process+0x7d0>)
 80144c2:	781b      	ldrb	r3, [r3, #0]
 80144c4:	f003 0310 	and.w	r3, r3, #16
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d065      	beq.n	8014598 <tcp_process+0x7b8>
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80144d0:	4b38      	ldr	r3, [pc, #224]	@ (80145b4 <tcp_process+0x7d4>)
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	429a      	cmp	r2, r3
 80144d6:	d15f      	bne.n	8014598 <tcp_process+0x7b8>
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80144dc:	2b00      	cmp	r3, #0
 80144de:	d15b      	bne.n	8014598 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f7fe fcf1 	bl	8012ec8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80144e6:	4b35      	ldr	r3, [pc, #212]	@ (80145bc <tcp_process+0x7dc>)
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	687a      	ldr	r2, [r7, #4]
 80144ec:	429a      	cmp	r2, r3
 80144ee:	d105      	bne.n	80144fc <tcp_process+0x71c>
 80144f0:	4b32      	ldr	r3, [pc, #200]	@ (80145bc <tcp_process+0x7dc>)
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	68db      	ldr	r3, [r3, #12]
 80144f6:	4a31      	ldr	r2, [pc, #196]	@ (80145bc <tcp_process+0x7dc>)
 80144f8:	6013      	str	r3, [r2, #0]
 80144fa:	e013      	b.n	8014524 <tcp_process+0x744>
 80144fc:	4b2f      	ldr	r3, [pc, #188]	@ (80145bc <tcp_process+0x7dc>)
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	60fb      	str	r3, [r7, #12]
 8014502:	e00c      	b.n	801451e <tcp_process+0x73e>
 8014504:	68fb      	ldr	r3, [r7, #12]
 8014506:	68db      	ldr	r3, [r3, #12]
 8014508:	687a      	ldr	r2, [r7, #4]
 801450a:	429a      	cmp	r2, r3
 801450c:	d104      	bne.n	8014518 <tcp_process+0x738>
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	68da      	ldr	r2, [r3, #12]
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	60da      	str	r2, [r3, #12]
 8014516:	e005      	b.n	8014524 <tcp_process+0x744>
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	68db      	ldr	r3, [r3, #12]
 801451c:	60fb      	str	r3, [r7, #12]
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d1ef      	bne.n	8014504 <tcp_process+0x724>
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	2200      	movs	r2, #0
 8014528:	60da      	str	r2, [r3, #12]
 801452a:	4b1f      	ldr	r3, [pc, #124]	@ (80145a8 <tcp_process+0x7c8>)
 801452c:	2201      	movs	r2, #1
 801452e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	220a      	movs	r2, #10
 8014534:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014536:	4b1d      	ldr	r3, [pc, #116]	@ (80145ac <tcp_process+0x7cc>)
 8014538:	681a      	ldr	r2, [r3, #0]
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	60da      	str	r2, [r3, #12]
 801453e:	4a1b      	ldr	r2, [pc, #108]	@ (80145ac <tcp_process+0x7cc>)
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	6013      	str	r3, [r2, #0]
 8014544:	f003 f89c 	bl	8017680 <tcp_timer_needed>
      }
      break;
 8014548:	e026      	b.n	8014598 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801454a:	6878      	ldr	r0, [r7, #4]
 801454c:	f000 f93c 	bl	80147c8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014550:	4b17      	ldr	r3, [pc, #92]	@ (80145b0 <tcp_process+0x7d0>)
 8014552:	781b      	ldrb	r3, [r3, #0]
 8014554:	f003 0310 	and.w	r3, r3, #16
 8014558:	2b00      	cmp	r3, #0
 801455a:	d01f      	beq.n	801459c <tcp_process+0x7bc>
 801455c:	687b      	ldr	r3, [r7, #4]
 801455e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8014560:	4b14      	ldr	r3, [pc, #80]	@ (80145b4 <tcp_process+0x7d4>)
 8014562:	681b      	ldr	r3, [r3, #0]
 8014564:	429a      	cmp	r2, r3
 8014566:	d119      	bne.n	801459c <tcp_process+0x7bc>
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801456c:	2b00      	cmp	r3, #0
 801456e:	d115      	bne.n	801459c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014570:	4b11      	ldr	r3, [pc, #68]	@ (80145b8 <tcp_process+0x7d8>)
 8014572:	781b      	ldrb	r3, [r3, #0]
 8014574:	f043 0310 	orr.w	r3, r3, #16
 8014578:	b2da      	uxtb	r2, r3
 801457a:	4b0f      	ldr	r3, [pc, #60]	@ (80145b8 <tcp_process+0x7d8>)
 801457c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801457e:	e00d      	b.n	801459c <tcp_process+0x7bc>
    default:
      break;
 8014580:	bf00      	nop
 8014582:	e00c      	b.n	801459e <tcp_process+0x7be>
      break;
 8014584:	bf00      	nop
 8014586:	e00a      	b.n	801459e <tcp_process+0x7be>
      break;
 8014588:	bf00      	nop
 801458a:	e008      	b.n	801459e <tcp_process+0x7be>
      break;
 801458c:	bf00      	nop
 801458e:	e006      	b.n	801459e <tcp_process+0x7be>
      break;
 8014590:	bf00      	nop
 8014592:	e004      	b.n	801459e <tcp_process+0x7be>
      break;
 8014594:	bf00      	nop
 8014596:	e002      	b.n	801459e <tcp_process+0x7be>
      break;
 8014598:	bf00      	nop
 801459a:	e000      	b.n	801459e <tcp_process+0x7be>
      break;
 801459c:	bf00      	nop
  }
  return ERR_OK;
 801459e:	2300      	movs	r3, #0
}
 80145a0:	4618      	mov	r0, r3
 80145a2:	3724      	adds	r7, #36	@ 0x24
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd90      	pop	{r4, r7, pc}
 80145a8:	2000ec44 	.word	0x2000ec44
 80145ac:	2000ec40 	.word	0x2000ec40
 80145b0:	2000ec74 	.word	0x2000ec74
 80145b4:	2000ec6c 	.word	0x2000ec6c
 80145b8:	2000ec75 	.word	0x2000ec75
 80145bc:	2000ec3c 	.word	0x2000ec3c

080145c0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80145c0:	b590      	push	{r4, r7, lr}
 80145c2:	b085      	sub	sp, #20
 80145c4:	af00      	add	r7, sp, #0
 80145c6:	6078      	str	r0, [r7, #4]
 80145c8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80145ca:	687b      	ldr	r3, [r7, #4]
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d106      	bne.n	80145de <tcp_oos_insert_segment+0x1e>
 80145d0:	4b3b      	ldr	r3, [pc, #236]	@ (80146c0 <tcp_oos_insert_segment+0x100>)
 80145d2:	f240 421f 	movw	r2, #1055	@ 0x41f
 80145d6:	493b      	ldr	r1, [pc, #236]	@ (80146c4 <tcp_oos_insert_segment+0x104>)
 80145d8:	483b      	ldr	r0, [pc, #236]	@ (80146c8 <tcp_oos_insert_segment+0x108>)
 80145da:	f009 fbd7 	bl	801dd8c <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80145de:	687b      	ldr	r3, [r7, #4]
 80145e0:	68db      	ldr	r3, [r3, #12]
 80145e2:	899b      	ldrh	r3, [r3, #12]
 80145e4:	b29b      	uxth	r3, r3
 80145e6:	4618      	mov	r0, r3
 80145e8:	f7fa fcf0 	bl	800efcc <lwip_htons>
 80145ec:	4603      	mov	r3, r0
 80145ee:	b2db      	uxtb	r3, r3
 80145f0:	f003 0301 	and.w	r3, r3, #1
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	d028      	beq.n	801464a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80145f8:	6838      	ldr	r0, [r7, #0]
 80145fa:	f7fe f995 	bl	8012928 <tcp_segs_free>
    next = NULL;
 80145fe:	2300      	movs	r3, #0
 8014600:	603b      	str	r3, [r7, #0]
 8014602:	e056      	b.n	80146b2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014604:	683b      	ldr	r3, [r7, #0]
 8014606:	68db      	ldr	r3, [r3, #12]
 8014608:	899b      	ldrh	r3, [r3, #12]
 801460a:	b29b      	uxth	r3, r3
 801460c:	4618      	mov	r0, r3
 801460e:	f7fa fcdd 	bl	800efcc <lwip_htons>
 8014612:	4603      	mov	r3, r0
 8014614:	b2db      	uxtb	r3, r3
 8014616:	f003 0301 	and.w	r3, r3, #1
 801461a:	2b00      	cmp	r3, #0
 801461c:	d00d      	beq.n	801463a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	68db      	ldr	r3, [r3, #12]
 8014622:	899b      	ldrh	r3, [r3, #12]
 8014624:	b29c      	uxth	r4, r3
 8014626:	2001      	movs	r0, #1
 8014628:	f7fa fcd0 	bl	800efcc <lwip_htons>
 801462c:	4603      	mov	r3, r0
 801462e:	461a      	mov	r2, r3
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	68db      	ldr	r3, [r3, #12]
 8014634:	4322      	orrs	r2, r4
 8014636:	b292      	uxth	r2, r2
 8014638:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014644:	68f8      	ldr	r0, [r7, #12]
 8014646:	f7fe f984 	bl	8012952 <tcp_seg_free>
    while (next &&
 801464a:	683b      	ldr	r3, [r7, #0]
 801464c:	2b00      	cmp	r3, #0
 801464e:	d00e      	beq.n	801466e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	891b      	ldrh	r3, [r3, #8]
 8014654:	461a      	mov	r2, r3
 8014656:	4b1d      	ldr	r3, [pc, #116]	@ (80146cc <tcp_oos_insert_segment+0x10c>)
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	441a      	add	r2, r3
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	68db      	ldr	r3, [r3, #12]
 8014660:	685b      	ldr	r3, [r3, #4]
 8014662:	6839      	ldr	r1, [r7, #0]
 8014664:	8909      	ldrh	r1, [r1, #8]
 8014666:	440b      	add	r3, r1
 8014668:	1ad3      	subs	r3, r2, r3
    while (next &&
 801466a:	2b00      	cmp	r3, #0
 801466c:	daca      	bge.n	8014604 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801466e:	683b      	ldr	r3, [r7, #0]
 8014670:	2b00      	cmp	r3, #0
 8014672:	d01e      	beq.n	80146b2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	891b      	ldrh	r3, [r3, #8]
 8014678:	461a      	mov	r2, r3
 801467a:	4b14      	ldr	r3, [pc, #80]	@ (80146cc <tcp_oos_insert_segment+0x10c>)
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	441a      	add	r2, r3
 8014680:	683b      	ldr	r3, [r7, #0]
 8014682:	68db      	ldr	r3, [r3, #12]
 8014684:	685b      	ldr	r3, [r3, #4]
 8014686:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014688:	2b00      	cmp	r3, #0
 801468a:	dd12      	ble.n	80146b2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	68db      	ldr	r3, [r3, #12]
 8014690:	685b      	ldr	r3, [r3, #4]
 8014692:	b29a      	uxth	r2, r3
 8014694:	4b0d      	ldr	r3, [pc, #52]	@ (80146cc <tcp_oos_insert_segment+0x10c>)
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	b29b      	uxth	r3, r3
 801469a:	1ad3      	subs	r3, r2, r3
 801469c:	b29a      	uxth	r2, r3
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	685a      	ldr	r2, [r3, #4]
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	891b      	ldrh	r3, [r3, #8]
 80146aa:	4619      	mov	r1, r3
 80146ac:	4610      	mov	r0, r2
 80146ae:	f7fc f9f3 	bl	8010a98 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	683a      	ldr	r2, [r7, #0]
 80146b6:	601a      	str	r2, [r3, #0]
}
 80146b8:	bf00      	nop
 80146ba:	3714      	adds	r7, #20
 80146bc:	46bd      	mov	sp, r7
 80146be:	bd90      	pop	{r4, r7, pc}
 80146c0:	08023930 	.word	0x08023930
 80146c4:	08023bf0 	.word	0x08023bf0
 80146c8:	0802397c 	.word	0x0802397c
 80146cc:	2000ec68 	.word	0x2000ec68

080146d0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80146d0:	b5b0      	push	{r4, r5, r7, lr}
 80146d2:	b086      	sub	sp, #24
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	60f8      	str	r0, [r7, #12]
 80146d8:	60b9      	str	r1, [r7, #8]
 80146da:	607a      	str	r2, [r7, #4]
 80146dc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80146de:	e03e      	b.n	801475e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80146e0:	68bb      	ldr	r3, [r7, #8]
 80146e2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80146e4:	68bb      	ldr	r3, [r7, #8]
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80146ea:	697b      	ldr	r3, [r7, #20]
 80146ec:	685b      	ldr	r3, [r3, #4]
 80146ee:	4618      	mov	r0, r3
 80146f0:	f7fc fc18 	bl	8010f24 <pbuf_clen>
 80146f4:	4603      	mov	r3, r0
 80146f6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80146f8:	68fb      	ldr	r3, [r7, #12]
 80146fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80146fe:	8a7a      	ldrh	r2, [r7, #18]
 8014700:	429a      	cmp	r2, r3
 8014702:	d906      	bls.n	8014712 <tcp_free_acked_segments+0x42>
 8014704:	4b2a      	ldr	r3, [pc, #168]	@ (80147b0 <tcp_free_acked_segments+0xe0>)
 8014706:	f240 4257 	movw	r2, #1111	@ 0x457
 801470a:	492a      	ldr	r1, [pc, #168]	@ (80147b4 <tcp_free_acked_segments+0xe4>)
 801470c:	482a      	ldr	r0, [pc, #168]	@ (80147b8 <tcp_free_acked_segments+0xe8>)
 801470e:	f009 fb3d 	bl	801dd8c <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8014718:	8a7b      	ldrh	r3, [r7, #18]
 801471a:	1ad3      	subs	r3, r2, r3
 801471c:	b29a      	uxth	r2, r3
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014724:	697b      	ldr	r3, [r7, #20]
 8014726:	891a      	ldrh	r2, [r3, #8]
 8014728:	4b24      	ldr	r3, [pc, #144]	@ (80147bc <tcp_free_acked_segments+0xec>)
 801472a:	881b      	ldrh	r3, [r3, #0]
 801472c:	4413      	add	r3, r2
 801472e:	b29a      	uxth	r2, r3
 8014730:	4b22      	ldr	r3, [pc, #136]	@ (80147bc <tcp_free_acked_segments+0xec>)
 8014732:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014734:	6978      	ldr	r0, [r7, #20]
 8014736:	f7fe f90c 	bl	8012952 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8014740:	2b00      	cmp	r3, #0
 8014742:	d00c      	beq.n	801475e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014744:	68bb      	ldr	r3, [r7, #8]
 8014746:	2b00      	cmp	r3, #0
 8014748:	d109      	bne.n	801475e <tcp_free_acked_segments+0x8e>
 801474a:	683b      	ldr	r3, [r7, #0]
 801474c:	2b00      	cmp	r3, #0
 801474e:	d106      	bne.n	801475e <tcp_free_acked_segments+0x8e>
 8014750:	4b17      	ldr	r3, [pc, #92]	@ (80147b0 <tcp_free_acked_segments+0xe0>)
 8014752:	f240 4261 	movw	r2, #1121	@ 0x461
 8014756:	491a      	ldr	r1, [pc, #104]	@ (80147c0 <tcp_free_acked_segments+0xf0>)
 8014758:	4817      	ldr	r0, [pc, #92]	@ (80147b8 <tcp_free_acked_segments+0xe8>)
 801475a:	f009 fb17 	bl	801dd8c <iprintf>
  while (seg_list != NULL &&
 801475e:	68bb      	ldr	r3, [r7, #8]
 8014760:	2b00      	cmp	r3, #0
 8014762:	d020      	beq.n	80147a6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014764:	68bb      	ldr	r3, [r7, #8]
 8014766:	68db      	ldr	r3, [r3, #12]
 8014768:	685b      	ldr	r3, [r3, #4]
 801476a:	4618      	mov	r0, r3
 801476c:	f7fa fc43 	bl	800eff6 <lwip_htonl>
 8014770:	4604      	mov	r4, r0
 8014772:	68bb      	ldr	r3, [r7, #8]
 8014774:	891b      	ldrh	r3, [r3, #8]
 8014776:	461d      	mov	r5, r3
 8014778:	68bb      	ldr	r3, [r7, #8]
 801477a:	68db      	ldr	r3, [r3, #12]
 801477c:	899b      	ldrh	r3, [r3, #12]
 801477e:	b29b      	uxth	r3, r3
 8014780:	4618      	mov	r0, r3
 8014782:	f7fa fc23 	bl	800efcc <lwip_htons>
 8014786:	4603      	mov	r3, r0
 8014788:	b2db      	uxtb	r3, r3
 801478a:	f003 0303 	and.w	r3, r3, #3
 801478e:	2b00      	cmp	r3, #0
 8014790:	d001      	beq.n	8014796 <tcp_free_acked_segments+0xc6>
 8014792:	2301      	movs	r3, #1
 8014794:	e000      	b.n	8014798 <tcp_free_acked_segments+0xc8>
 8014796:	2300      	movs	r3, #0
 8014798:	442b      	add	r3, r5
 801479a:	18e2      	adds	r2, r4, r3
 801479c:	4b09      	ldr	r3, [pc, #36]	@ (80147c4 <tcp_free_acked_segments+0xf4>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	dd9c      	ble.n	80146e0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80147a6:	68bb      	ldr	r3, [r7, #8]
}
 80147a8:	4618      	mov	r0, r3
 80147aa:	3718      	adds	r7, #24
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bdb0      	pop	{r4, r5, r7, pc}
 80147b0:	08023930 	.word	0x08023930
 80147b4:	08023c18 	.word	0x08023c18
 80147b8:	0802397c 	.word	0x0802397c
 80147bc:	2000ec70 	.word	0x2000ec70
 80147c0:	08023c40 	.word	0x08023c40
 80147c4:	2000ec6c 	.word	0x2000ec6c

080147c8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80147c8:	b5b0      	push	{r4, r5, r7, lr}
 80147ca:	b094      	sub	sp, #80	@ 0x50
 80147cc:	af00      	add	r7, sp, #0
 80147ce:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80147d0:	2300      	movs	r3, #0
 80147d2:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	2b00      	cmp	r3, #0
 80147d8:	d106      	bne.n	80147e8 <tcp_receive+0x20>
 80147da:	4b91      	ldr	r3, [pc, #580]	@ (8014a20 <tcp_receive+0x258>)
 80147dc:	f240 427b 	movw	r2, #1147	@ 0x47b
 80147e0:	4990      	ldr	r1, [pc, #576]	@ (8014a24 <tcp_receive+0x25c>)
 80147e2:	4891      	ldr	r0, [pc, #580]	@ (8014a28 <tcp_receive+0x260>)
 80147e4:	f009 fad2 	bl	801dd8c <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	7d1b      	ldrb	r3, [r3, #20]
 80147ec:	2b03      	cmp	r3, #3
 80147ee:	d806      	bhi.n	80147fe <tcp_receive+0x36>
 80147f0:	4b8b      	ldr	r3, [pc, #556]	@ (8014a20 <tcp_receive+0x258>)
 80147f2:	f240 427c 	movw	r2, #1148	@ 0x47c
 80147f6:	498d      	ldr	r1, [pc, #564]	@ (8014a2c <tcp_receive+0x264>)
 80147f8:	488b      	ldr	r0, [pc, #556]	@ (8014a28 <tcp_receive+0x260>)
 80147fa:	f009 fac7 	bl	801dd8c <iprintf>

  if (flags & TCP_ACK) {
 80147fe:	4b8c      	ldr	r3, [pc, #560]	@ (8014a30 <tcp_receive+0x268>)
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	f003 0310 	and.w	r3, r3, #16
 8014806:	2b00      	cmp	r3, #0
 8014808:	f000 8264 	beq.w	8014cd4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8014812:	461a      	mov	r2, r3
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014818:	4413      	add	r3, r2
 801481a:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801481c:	687b      	ldr	r3, [r7, #4]
 801481e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014820:	4b84      	ldr	r3, [pc, #528]	@ (8014a34 <tcp_receive+0x26c>)
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	1ad3      	subs	r3, r2, r3
 8014826:	2b00      	cmp	r3, #0
 8014828:	db1b      	blt.n	8014862 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801482e:	4b81      	ldr	r3, [pc, #516]	@ (8014a34 <tcp_receive+0x26c>)
 8014830:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014832:	429a      	cmp	r2, r3
 8014834:	d106      	bne.n	8014844 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801483a:	4b7f      	ldr	r3, [pc, #508]	@ (8014a38 <tcp_receive+0x270>)
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	1ad3      	subs	r3, r2, r3
 8014840:	2b00      	cmp	r3, #0
 8014842:	db0e      	blt.n	8014862 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014844:	687b      	ldr	r3, [r7, #4]
 8014846:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8014848:	4b7b      	ldr	r3, [pc, #492]	@ (8014a38 <tcp_receive+0x270>)
 801484a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801484c:	429a      	cmp	r2, r3
 801484e:	d125      	bne.n	801489c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014850:	4b7a      	ldr	r3, [pc, #488]	@ (8014a3c <tcp_receive+0x274>)
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	89db      	ldrh	r3, [r3, #14]
 8014856:	b29a      	uxth	r2, r3
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801485e:	429a      	cmp	r2, r3
 8014860:	d91c      	bls.n	801489c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014862:	4b76      	ldr	r3, [pc, #472]	@ (8014a3c <tcp_receive+0x274>)
 8014864:	681b      	ldr	r3, [r3, #0]
 8014866:	89db      	ldrh	r3, [r3, #14]
 8014868:	b29a      	uxth	r2, r3
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801487c:	429a      	cmp	r2, r3
 801487e:	d205      	bcs.n	801488c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 801488c:	4b69      	ldr	r3, [pc, #420]	@ (8014a34 <tcp_receive+0x26c>)
 801488e:	681a      	ldr	r2, [r3, #0]
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8014894:	4b68      	ldr	r3, [pc, #416]	@ (8014a38 <tcp_receive+0x270>)
 8014896:	681a      	ldr	r2, [r3, #0]
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801489c:	4b66      	ldr	r3, [pc, #408]	@ (8014a38 <tcp_receive+0x270>)
 801489e:	681a      	ldr	r2, [r3, #0]
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80148a4:	1ad3      	subs	r3, r2, r3
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	dc58      	bgt.n	801495c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80148aa:	4b65      	ldr	r3, [pc, #404]	@ (8014a40 <tcp_receive+0x278>)
 80148ac:	881b      	ldrh	r3, [r3, #0]
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d14b      	bne.n	801494a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80148b6:	687a      	ldr	r2, [r7, #4]
 80148b8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 80148bc:	4413      	add	r3, r2
 80148be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80148c0:	429a      	cmp	r2, r3
 80148c2:	d142      	bne.n	801494a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80148ca:	2b00      	cmp	r3, #0
 80148cc:	db3d      	blt.n	801494a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80148d2:	4b59      	ldr	r3, [pc, #356]	@ (8014a38 <tcp_receive+0x270>)
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	429a      	cmp	r2, r3
 80148d8:	d137      	bne.n	801494a <tcp_receive+0x182>
              found_dupack = 1;
 80148da:	2301      	movs	r3, #1
 80148dc:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80148e4:	2bff      	cmp	r3, #255	@ 0xff
 80148e6:	d007      	beq.n	80148f8 <tcp_receive+0x130>
                ++pcb->dupacks;
 80148e8:	687b      	ldr	r3, [r7, #4]
 80148ea:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80148ee:	3301      	adds	r3, #1
 80148f0:	b2da      	uxtb	r2, r3
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80148fe:	2b03      	cmp	r3, #3
 8014900:	d91b      	bls.n	801493a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801490c:	4413      	add	r3, r2
 801490e:	b29a      	uxth	r2, r3
 8014910:	687b      	ldr	r3, [r7, #4]
 8014912:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014916:	429a      	cmp	r2, r3
 8014918:	d30a      	bcc.n	8014930 <tcp_receive+0x168>
 801491a:	687b      	ldr	r3, [r7, #4]
 801491c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014924:	4413      	add	r3, r2
 8014926:	b29a      	uxth	r2, r3
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 801492e:	e004      	b.n	801493a <tcp_receive+0x172>
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014936:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 801493a:	687b      	ldr	r3, [r7, #4]
 801493c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8014940:	2b02      	cmp	r3, #2
 8014942:	d902      	bls.n	801494a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014944:	6878      	ldr	r0, [r7, #4]
 8014946:	f002 fb3f 	bl	8016fc8 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801494a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801494c:	2b00      	cmp	r3, #0
 801494e:	f040 8161 	bne.w	8014c14 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	2200      	movs	r2, #0
 8014956:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801495a:	e15b      	b.n	8014c14 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801495c:	4b36      	ldr	r3, [pc, #216]	@ (8014a38 <tcp_receive+0x270>)
 801495e:	681a      	ldr	r2, [r3, #0]
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014964:	1ad3      	subs	r3, r2, r3
 8014966:	3b01      	subs	r3, #1
 8014968:	2b00      	cmp	r3, #0
 801496a:	f2c0 814e 	blt.w	8014c0a <tcp_receive+0x442>
 801496e:	4b32      	ldr	r3, [pc, #200]	@ (8014a38 <tcp_receive+0x270>)
 8014970:	681a      	ldr	r2, [r3, #0]
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014976:	1ad3      	subs	r3, r2, r3
 8014978:	2b00      	cmp	r3, #0
 801497a:	f300 8146 	bgt.w	8014c0a <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	8b5b      	ldrh	r3, [r3, #26]
 8014982:	f003 0304 	and.w	r3, r3, #4
 8014986:	2b00      	cmp	r3, #0
 8014988:	d010      	beq.n	80149ac <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	8b5b      	ldrh	r3, [r3, #26]
 801498e:	f023 0304 	bic.w	r3, r3, #4
 8014992:	b29a      	uxth	r2, r3
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	2200      	movs	r2, #0
 80149a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	2200      	movs	r2, #0
 80149b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 80149ba:	10db      	asrs	r3, r3, #3
 80149bc:	b21b      	sxth	r3, r3
 80149be:	b29a      	uxth	r2, r3
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 80149c6:	b29b      	uxth	r3, r3
 80149c8:	4413      	add	r3, r2
 80149ca:	b29b      	uxth	r3, r3
 80149cc:	b21a      	sxth	r2, r3
 80149ce:	687b      	ldr	r3, [r7, #4]
 80149d0:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80149d4:	4b18      	ldr	r3, [pc, #96]	@ (8014a38 <tcp_receive+0x270>)
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	b29a      	uxth	r2, r3
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80149de:	b29b      	uxth	r3, r3
 80149e0:	1ad3      	subs	r3, r2, r3
 80149e2:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	2200      	movs	r2, #0
 80149e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 80149ec:	4b12      	ldr	r3, [pc, #72]	@ (8014a38 <tcp_receive+0x270>)
 80149ee:	681a      	ldr	r2, [r3, #0]
 80149f0:	687b      	ldr	r3, [r7, #4]
 80149f2:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	7d1b      	ldrb	r3, [r3, #20]
 80149f8:	2b03      	cmp	r3, #3
 80149fa:	f240 8097 	bls.w	8014b2c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80149fe:	687b      	ldr	r3, [r7, #4]
 8014a00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8014a0a:	429a      	cmp	r2, r3
 8014a0c:	d245      	bcs.n	8014a9a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	8b5b      	ldrh	r3, [r3, #26]
 8014a12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d014      	beq.n	8014a44 <tcp_receive+0x27c>
 8014a1a:	2301      	movs	r3, #1
 8014a1c:	e013      	b.n	8014a46 <tcp_receive+0x27e>
 8014a1e:	bf00      	nop
 8014a20:	08023930 	.word	0x08023930
 8014a24:	08023c60 	.word	0x08023c60
 8014a28:	0802397c 	.word	0x0802397c
 8014a2c:	08023c7c 	.word	0x08023c7c
 8014a30:	2000ec74 	.word	0x2000ec74
 8014a34:	2000ec68 	.word	0x2000ec68
 8014a38:	2000ec6c 	.word	0x2000ec6c
 8014a3c:	2000ec58 	.word	0x2000ec58
 8014a40:	2000ec72 	.word	0x2000ec72
 8014a44:	2302      	movs	r3, #2
 8014a46:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014a4a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8014a4e:	b29a      	uxth	r2, r3
 8014a50:	687b      	ldr	r3, [r7, #4]
 8014a52:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014a54:	fb12 f303 	smulbb	r3, r2, r3
 8014a58:	b29b      	uxth	r3, r3
 8014a5a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8014a5c:	4293      	cmp	r3, r2
 8014a5e:	bf28      	it	cs
 8014a60:	4613      	movcs	r3, r2
 8014a62:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014a6a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014a6c:	4413      	add	r3, r2
 8014a6e:	b29a      	uxth	r2, r3
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014a76:	429a      	cmp	r2, r3
 8014a78:	d309      	bcc.n	8014a8e <tcp_receive+0x2c6>
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014a80:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8014a82:	4413      	add	r3, r2
 8014a84:	b29a      	uxth	r2, r3
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014a8c:	e04e      	b.n	8014b2c <tcp_receive+0x364>
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014a94:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014a98:	e048      	b.n	8014b2c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014aa0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014aa2:	4413      	add	r3, r2
 8014aa4:	b29a      	uxth	r2, r3
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8014aac:	429a      	cmp	r2, r3
 8014aae:	d309      	bcc.n	8014ac4 <tcp_receive+0x2fc>
 8014ab0:	687b      	ldr	r3, [r7, #4]
 8014ab2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014ab6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8014ab8:	4413      	add	r3, r2
 8014aba:	b29a      	uxth	r2, r3
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8014ac2:	e004      	b.n	8014ace <tcp_receive+0x306>
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014aca:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014ada:	429a      	cmp	r2, r3
 8014adc:	d326      	bcc.n	8014b2c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014aea:	1ad3      	subs	r3, r2, r3
 8014aec:	b29a      	uxth	r2, r3
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014af4:	687b      	ldr	r3, [r7, #4]
 8014af6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014afe:	4413      	add	r3, r2
 8014b00:	b29a      	uxth	r2, r3
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8014b08:	429a      	cmp	r2, r3
 8014b0a:	d30a      	bcc.n	8014b22 <tcp_receive+0x35a>
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8014b16:	4413      	add	r3, r2
 8014b18:	b29a      	uxth	r2, r3
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8014b20:	e004      	b.n	8014b2c <tcp_receive+0x364>
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014b28:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014b2c:	687b      	ldr	r3, [r7, #4]
 8014b2e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b34:	4a98      	ldr	r2, [pc, #608]	@ (8014d98 <tcp_receive+0x5d0>)
 8014b36:	6878      	ldr	r0, [r7, #4]
 8014b38:	f7ff fdca 	bl	80146d0 <tcp_free_acked_segments>
 8014b3c:	4602      	mov	r2, r0
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b4a:	4a94      	ldr	r2, [pc, #592]	@ (8014d9c <tcp_receive+0x5d4>)
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f7ff fdbf 	bl	80146d0 <tcp_free_acked_segments>
 8014b52:	4602      	mov	r2, r0
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014b58:	687b      	ldr	r3, [r7, #4]
 8014b5a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d104      	bne.n	8014b6a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8014b60:	687b      	ldr	r3, [r7, #4]
 8014b62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014b66:	861a      	strh	r2, [r3, #48]	@ 0x30
 8014b68:	e002      	b.n	8014b70 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	2200      	movs	r2, #0
 8014b6e:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	2200      	movs	r2, #0
 8014b74:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014b7a:	2b00      	cmp	r3, #0
 8014b7c:	d103      	bne.n	8014b86 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	2200      	movs	r2, #0
 8014b82:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8014b8c:	4b84      	ldr	r3, [pc, #528]	@ (8014da0 <tcp_receive+0x5d8>)
 8014b8e:	881b      	ldrh	r3, [r3, #0]
 8014b90:	4413      	add	r3, r2
 8014b92:	b29a      	uxth	r2, r3
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	8b5b      	ldrh	r3, [r3, #26]
 8014b9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014ba2:	2b00      	cmp	r3, #0
 8014ba4:	d035      	beq.n	8014c12 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8014ba6:	687b      	ldr	r3, [r7, #4]
 8014ba8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014baa:	2b00      	cmp	r3, #0
 8014bac:	d118      	bne.n	8014be0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014bb2:	2b00      	cmp	r3, #0
 8014bb4:	d00c      	beq.n	8014bd0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014bbe:	68db      	ldr	r3, [r3, #12]
 8014bc0:	685b      	ldr	r3, [r3, #4]
 8014bc2:	4618      	mov	r0, r3
 8014bc4:	f7fa fa17 	bl	800eff6 <lwip_htonl>
 8014bc8:	4603      	mov	r3, r0
 8014bca:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014bcc:	2b00      	cmp	r3, #0
 8014bce:	dc20      	bgt.n	8014c12 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	8b5b      	ldrh	r3, [r3, #26]
 8014bd4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8014bd8:	b29a      	uxth	r2, r3
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014bde:	e018      	b.n	8014c12 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014be8:	68db      	ldr	r3, [r3, #12]
 8014bea:	685b      	ldr	r3, [r3, #4]
 8014bec:	4618      	mov	r0, r3
 8014bee:	f7fa fa02 	bl	800eff6 <lwip_htonl>
 8014bf2:	4603      	mov	r3, r0
 8014bf4:	1ae3      	subs	r3, r4, r3
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	dc0b      	bgt.n	8014c12 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	8b5b      	ldrh	r3, [r3, #26]
 8014bfe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8014c02:	b29a      	uxth	r2, r3
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014c08:	e003      	b.n	8014c12 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014c0a:	6878      	ldr	r0, [r7, #4]
 8014c0c:	f002 fbc8 	bl	80173a0 <tcp_send_empty_ack>
 8014c10:	e000      	b.n	8014c14 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014c12:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014c14:	687b      	ldr	r3, [r7, #4]
 8014c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d05b      	beq.n	8014cd4 <tcp_receive+0x50c>
 8014c1c:	687b      	ldr	r3, [r7, #4]
 8014c1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8014c20:	4b60      	ldr	r3, [pc, #384]	@ (8014da4 <tcp_receive+0x5dc>)
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	1ad3      	subs	r3, r2, r3
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	da54      	bge.n	8014cd4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014c2a:	4b5f      	ldr	r3, [pc, #380]	@ (8014da8 <tcp_receive+0x5e0>)
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	b29a      	uxth	r2, r3
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014c34:	b29b      	uxth	r3, r3
 8014c36:	1ad3      	subs	r3, r2, r3
 8014c38:	b29b      	uxth	r3, r3
 8014c3a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8014c3e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014c48:	10db      	asrs	r3, r3, #3
 8014c4a:	b21b      	sxth	r3, r3
 8014c4c:	b29b      	uxth	r3, r3
 8014c4e:	1ad3      	subs	r3, r2, r3
 8014c50:	b29b      	uxth	r3, r3
 8014c52:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014c5c:	b29a      	uxth	r2, r3
 8014c5e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8014c62:	4413      	add	r3, r2
 8014c64:	b29b      	uxth	r3, r3
 8014c66:	b21a      	sxth	r2, r3
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8014c6c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	da05      	bge.n	8014c80 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8014c74:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8014c78:	425b      	negs	r3, r3
 8014c7a:	b29b      	uxth	r3, r3
 8014c7c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8014c80:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014c8a:	109b      	asrs	r3, r3, #2
 8014c8c:	b21b      	sxth	r3, r3
 8014c8e:	b29b      	uxth	r3, r3
 8014c90:	1ad3      	subs	r3, r2, r3
 8014c92:	b29b      	uxth	r3, r3
 8014c94:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8014c98:	687b      	ldr	r3, [r7, #4]
 8014c9a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014c9e:	b29a      	uxth	r2, r3
 8014ca0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8014ca4:	4413      	add	r3, r2
 8014ca6:	b29b      	uxth	r3, r3
 8014ca8:	b21a      	sxth	r2, r3
 8014caa:	687b      	ldr	r3, [r7, #4]
 8014cac:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014cae:	687b      	ldr	r3, [r7, #4]
 8014cb0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8014cb4:	10db      	asrs	r3, r3, #3
 8014cb6:	b21b      	sxth	r3, r3
 8014cb8:	b29a      	uxth	r2, r3
 8014cba:	687b      	ldr	r3, [r7, #4]
 8014cbc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8014cc0:	b29b      	uxth	r3, r3
 8014cc2:	4413      	add	r3, r2
 8014cc4:	b29b      	uxth	r3, r3
 8014cc6:	b21a      	sxth	r2, r3
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	2200      	movs	r2, #0
 8014cd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014cd4:	4b35      	ldr	r3, [pc, #212]	@ (8014dac <tcp_receive+0x5e4>)
 8014cd6:	881b      	ldrh	r3, [r3, #0]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	f000 84df 	beq.w	801569c <tcp_receive+0xed4>
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	7d1b      	ldrb	r3, [r3, #20]
 8014ce2:	2b06      	cmp	r3, #6
 8014ce4:	f200 84da 	bhi.w	801569c <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014cec:	4b30      	ldr	r3, [pc, #192]	@ (8014db0 <tcp_receive+0x5e8>)
 8014cee:	681b      	ldr	r3, [r3, #0]
 8014cf0:	1ad3      	subs	r3, r2, r3
 8014cf2:	3b01      	subs	r3, #1
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	f2c0 808f 	blt.w	8014e18 <tcp_receive+0x650>
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8014dac <tcp_receive+0x5e4>)
 8014d00:	881b      	ldrh	r3, [r3, #0]
 8014d02:	4619      	mov	r1, r3
 8014d04:	4b2a      	ldr	r3, [pc, #168]	@ (8014db0 <tcp_receive+0x5e8>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	440b      	add	r3, r1
 8014d0a:	1ad3      	subs	r3, r2, r3
 8014d0c:	3301      	adds	r3, #1
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	f300 8082 	bgt.w	8014e18 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014d14:	4b27      	ldr	r3, [pc, #156]	@ (8014db4 <tcp_receive+0x5ec>)
 8014d16:	685b      	ldr	r3, [r3, #4]
 8014d18:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014d1e:	4b24      	ldr	r3, [pc, #144]	@ (8014db0 <tcp_receive+0x5e8>)
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	1ad3      	subs	r3, r2, r3
 8014d24:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014d26:	4b23      	ldr	r3, [pc, #140]	@ (8014db4 <tcp_receive+0x5ec>)
 8014d28:	685b      	ldr	r3, [r3, #4]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d106      	bne.n	8014d3c <tcp_receive+0x574>
 8014d2e:	4b22      	ldr	r3, [pc, #136]	@ (8014db8 <tcp_receive+0x5f0>)
 8014d30:	f240 5294 	movw	r2, #1428	@ 0x594
 8014d34:	4921      	ldr	r1, [pc, #132]	@ (8014dbc <tcp_receive+0x5f4>)
 8014d36:	4822      	ldr	r0, [pc, #136]	@ (8014dc0 <tcp_receive+0x5f8>)
 8014d38:	f009 f828 	bl	801dd8c <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d3e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8014d42:	4293      	cmp	r3, r2
 8014d44:	d906      	bls.n	8014d54 <tcp_receive+0x58c>
 8014d46:	4b1c      	ldr	r3, [pc, #112]	@ (8014db8 <tcp_receive+0x5f0>)
 8014d48:	f240 5295 	movw	r2, #1429	@ 0x595
 8014d4c:	491d      	ldr	r1, [pc, #116]	@ (8014dc4 <tcp_receive+0x5fc>)
 8014d4e:	481c      	ldr	r0, [pc, #112]	@ (8014dc0 <tcp_receive+0x5f8>)
 8014d50:	f009 f81c 	bl	801dd8c <iprintf>
      off = (u16_t)off32;
 8014d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d56:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014d5a:	4b16      	ldr	r3, [pc, #88]	@ (8014db4 <tcp_receive+0x5ec>)
 8014d5c:	685b      	ldr	r3, [r3, #4]
 8014d5e:	891b      	ldrh	r3, [r3, #8]
 8014d60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014d64:	429a      	cmp	r2, r3
 8014d66:	d906      	bls.n	8014d76 <tcp_receive+0x5ae>
 8014d68:	4b13      	ldr	r3, [pc, #76]	@ (8014db8 <tcp_receive+0x5f0>)
 8014d6a:	f240 5297 	movw	r2, #1431	@ 0x597
 8014d6e:	4916      	ldr	r1, [pc, #88]	@ (8014dc8 <tcp_receive+0x600>)
 8014d70:	4813      	ldr	r0, [pc, #76]	@ (8014dc0 <tcp_receive+0x5f8>)
 8014d72:	f009 f80b 	bl	801dd8c <iprintf>
      inseg.len -= off;
 8014d76:	4b0f      	ldr	r3, [pc, #60]	@ (8014db4 <tcp_receive+0x5ec>)
 8014d78:	891a      	ldrh	r2, [r3, #8]
 8014d7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014d7e:	1ad3      	subs	r3, r2, r3
 8014d80:	b29a      	uxth	r2, r3
 8014d82:	4b0c      	ldr	r3, [pc, #48]	@ (8014db4 <tcp_receive+0x5ec>)
 8014d84:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014d86:	4b0b      	ldr	r3, [pc, #44]	@ (8014db4 <tcp_receive+0x5ec>)
 8014d88:	685b      	ldr	r3, [r3, #4]
 8014d8a:	891a      	ldrh	r2, [r3, #8]
 8014d8c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014d90:	1ad3      	subs	r3, r2, r3
 8014d92:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 8014d94:	e02a      	b.n	8014dec <tcp_receive+0x624>
 8014d96:	bf00      	nop
 8014d98:	08023c98 	.word	0x08023c98
 8014d9c:	08023ca0 	.word	0x08023ca0
 8014da0:	2000ec70 	.word	0x2000ec70
 8014da4:	2000ec6c 	.word	0x2000ec6c
 8014da8:	2000ec30 	.word	0x2000ec30
 8014dac:	2000ec72 	.word	0x2000ec72
 8014db0:	2000ec68 	.word	0x2000ec68
 8014db4:	2000ec48 	.word	0x2000ec48
 8014db8:	08023930 	.word	0x08023930
 8014dbc:	08023ca8 	.word	0x08023ca8
 8014dc0:	0802397c 	.word	0x0802397c
 8014dc4:	08023cb8 	.word	0x08023cb8
 8014dc8:	08023cc8 	.word	0x08023cc8
        off -= p->len;
 8014dcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014dce:	895b      	ldrh	r3, [r3, #10]
 8014dd0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014dd4:	1ad3      	subs	r3, r2, r3
 8014dd6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8014dda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014ddc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8014dde:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8014de0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014de2:	2200      	movs	r2, #0
 8014de4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8014de6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8014dec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014dee:	895b      	ldrh	r3, [r3, #10]
 8014df0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8014df4:	429a      	cmp	r2, r3
 8014df6:	d8e9      	bhi.n	8014dcc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014df8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8014dfc:	4619      	mov	r1, r3
 8014dfe:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8014e00:	f7fb ff4a 	bl	8010c98 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014e04:	687b      	ldr	r3, [r7, #4]
 8014e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e08:	4a90      	ldr	r2, [pc, #576]	@ (801504c <tcp_receive+0x884>)
 8014e0a:	6013      	str	r3, [r2, #0]
 8014e0c:	4b90      	ldr	r3, [pc, #576]	@ (8015050 <tcp_receive+0x888>)
 8014e0e:	68db      	ldr	r3, [r3, #12]
 8014e10:	4a8e      	ldr	r2, [pc, #568]	@ (801504c <tcp_receive+0x884>)
 8014e12:	6812      	ldr	r2, [r2, #0]
 8014e14:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014e16:	e00d      	b.n	8014e34 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014e18:	4b8c      	ldr	r3, [pc, #560]	@ (801504c <tcp_receive+0x884>)
 8014e1a:	681a      	ldr	r2, [r3, #0]
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e20:	1ad3      	subs	r3, r2, r3
 8014e22:	2b00      	cmp	r3, #0
 8014e24:	da06      	bge.n	8014e34 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	8b5b      	ldrh	r3, [r3, #26]
 8014e2a:	f043 0302 	orr.w	r3, r3, #2
 8014e2e:	b29a      	uxth	r2, r3
 8014e30:	687b      	ldr	r3, [r7, #4]
 8014e32:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014e34:	4b85      	ldr	r3, [pc, #532]	@ (801504c <tcp_receive+0x884>)
 8014e36:	681a      	ldr	r2, [r3, #0]
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e3c:	1ad3      	subs	r3, r2, r3
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	f2c0 8427 	blt.w	8015692 <tcp_receive+0xeca>
 8014e44:	4b81      	ldr	r3, [pc, #516]	@ (801504c <tcp_receive+0x884>)
 8014e46:	681a      	ldr	r2, [r3, #0]
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014e4c:	6879      	ldr	r1, [r7, #4]
 8014e4e:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014e50:	440b      	add	r3, r1
 8014e52:	1ad3      	subs	r3, r2, r3
 8014e54:	3301      	adds	r3, #1
 8014e56:	2b00      	cmp	r3, #0
 8014e58:	f300 841b 	bgt.w	8015692 <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014e60:	4b7a      	ldr	r3, [pc, #488]	@ (801504c <tcp_receive+0x884>)
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	429a      	cmp	r2, r3
 8014e66:	f040 8298 	bne.w	801539a <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014e6a:	4b79      	ldr	r3, [pc, #484]	@ (8015050 <tcp_receive+0x888>)
 8014e6c:	891c      	ldrh	r4, [r3, #8]
 8014e6e:	4b78      	ldr	r3, [pc, #480]	@ (8015050 <tcp_receive+0x888>)
 8014e70:	68db      	ldr	r3, [r3, #12]
 8014e72:	899b      	ldrh	r3, [r3, #12]
 8014e74:	b29b      	uxth	r3, r3
 8014e76:	4618      	mov	r0, r3
 8014e78:	f7fa f8a8 	bl	800efcc <lwip_htons>
 8014e7c:	4603      	mov	r3, r0
 8014e7e:	b2db      	uxtb	r3, r3
 8014e80:	f003 0303 	and.w	r3, r3, #3
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d001      	beq.n	8014e8c <tcp_receive+0x6c4>
 8014e88:	2301      	movs	r3, #1
 8014e8a:	e000      	b.n	8014e8e <tcp_receive+0x6c6>
 8014e8c:	2300      	movs	r3, #0
 8014e8e:	4423      	add	r3, r4
 8014e90:	b29a      	uxth	r2, r3
 8014e92:	4b70      	ldr	r3, [pc, #448]	@ (8015054 <tcp_receive+0x88c>)
 8014e94:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014e9a:	4b6e      	ldr	r3, [pc, #440]	@ (8015054 <tcp_receive+0x88c>)
 8014e9c:	881b      	ldrh	r3, [r3, #0]
 8014e9e:	429a      	cmp	r2, r3
 8014ea0:	d274      	bcs.n	8014f8c <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014ea2:	4b6b      	ldr	r3, [pc, #428]	@ (8015050 <tcp_receive+0x888>)
 8014ea4:	68db      	ldr	r3, [r3, #12]
 8014ea6:	899b      	ldrh	r3, [r3, #12]
 8014ea8:	b29b      	uxth	r3, r3
 8014eaa:	4618      	mov	r0, r3
 8014eac:	f7fa f88e 	bl	800efcc <lwip_htons>
 8014eb0:	4603      	mov	r3, r0
 8014eb2:	b2db      	uxtb	r3, r3
 8014eb4:	f003 0301 	and.w	r3, r3, #1
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d01e      	beq.n	8014efa <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014ebc:	4b64      	ldr	r3, [pc, #400]	@ (8015050 <tcp_receive+0x888>)
 8014ebe:	68db      	ldr	r3, [r3, #12]
 8014ec0:	899b      	ldrh	r3, [r3, #12]
 8014ec2:	b29b      	uxth	r3, r3
 8014ec4:	b21b      	sxth	r3, r3
 8014ec6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8014eca:	b21c      	sxth	r4, r3
 8014ecc:	4b60      	ldr	r3, [pc, #384]	@ (8015050 <tcp_receive+0x888>)
 8014ece:	68db      	ldr	r3, [r3, #12]
 8014ed0:	899b      	ldrh	r3, [r3, #12]
 8014ed2:	b29b      	uxth	r3, r3
 8014ed4:	4618      	mov	r0, r3
 8014ed6:	f7fa f879 	bl	800efcc <lwip_htons>
 8014eda:	4603      	mov	r3, r0
 8014edc:	b2db      	uxtb	r3, r3
 8014ede:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 8014ee2:	b29b      	uxth	r3, r3
 8014ee4:	4618      	mov	r0, r3
 8014ee6:	f7fa f871 	bl	800efcc <lwip_htons>
 8014eea:	4603      	mov	r3, r0
 8014eec:	b21b      	sxth	r3, r3
 8014eee:	4323      	orrs	r3, r4
 8014ef0:	b21a      	sxth	r2, r3
 8014ef2:	4b57      	ldr	r3, [pc, #348]	@ (8015050 <tcp_receive+0x888>)
 8014ef4:	68db      	ldr	r3, [r3, #12]
 8014ef6:	b292      	uxth	r2, r2
 8014ef8:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8014efe:	4b54      	ldr	r3, [pc, #336]	@ (8015050 <tcp_receive+0x888>)
 8014f00:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014f02:	4b53      	ldr	r3, [pc, #332]	@ (8015050 <tcp_receive+0x888>)
 8014f04:	68db      	ldr	r3, [r3, #12]
 8014f06:	899b      	ldrh	r3, [r3, #12]
 8014f08:	b29b      	uxth	r3, r3
 8014f0a:	4618      	mov	r0, r3
 8014f0c:	f7fa f85e 	bl	800efcc <lwip_htons>
 8014f10:	4603      	mov	r3, r0
 8014f12:	b2db      	uxtb	r3, r3
 8014f14:	f003 0302 	and.w	r3, r3, #2
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d005      	beq.n	8014f28 <tcp_receive+0x760>
            inseg.len -= 1;
 8014f1c:	4b4c      	ldr	r3, [pc, #304]	@ (8015050 <tcp_receive+0x888>)
 8014f1e:	891b      	ldrh	r3, [r3, #8]
 8014f20:	3b01      	subs	r3, #1
 8014f22:	b29a      	uxth	r2, r3
 8014f24:	4b4a      	ldr	r3, [pc, #296]	@ (8015050 <tcp_receive+0x888>)
 8014f26:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014f28:	4b49      	ldr	r3, [pc, #292]	@ (8015050 <tcp_receive+0x888>)
 8014f2a:	685b      	ldr	r3, [r3, #4]
 8014f2c:	4a48      	ldr	r2, [pc, #288]	@ (8015050 <tcp_receive+0x888>)
 8014f2e:	8912      	ldrh	r2, [r2, #8]
 8014f30:	4611      	mov	r1, r2
 8014f32:	4618      	mov	r0, r3
 8014f34:	f7fb fdb0 	bl	8010a98 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014f38:	4b45      	ldr	r3, [pc, #276]	@ (8015050 <tcp_receive+0x888>)
 8014f3a:	891c      	ldrh	r4, [r3, #8]
 8014f3c:	4b44      	ldr	r3, [pc, #272]	@ (8015050 <tcp_receive+0x888>)
 8014f3e:	68db      	ldr	r3, [r3, #12]
 8014f40:	899b      	ldrh	r3, [r3, #12]
 8014f42:	b29b      	uxth	r3, r3
 8014f44:	4618      	mov	r0, r3
 8014f46:	f7fa f841 	bl	800efcc <lwip_htons>
 8014f4a:	4603      	mov	r3, r0
 8014f4c:	b2db      	uxtb	r3, r3
 8014f4e:	f003 0303 	and.w	r3, r3, #3
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d001      	beq.n	8014f5a <tcp_receive+0x792>
 8014f56:	2301      	movs	r3, #1
 8014f58:	e000      	b.n	8014f5c <tcp_receive+0x794>
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	4423      	add	r3, r4
 8014f5e:	b29a      	uxth	r2, r3
 8014f60:	4b3c      	ldr	r3, [pc, #240]	@ (8015054 <tcp_receive+0x88c>)
 8014f62:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014f64:	4b3b      	ldr	r3, [pc, #236]	@ (8015054 <tcp_receive+0x88c>)
 8014f66:	881b      	ldrh	r3, [r3, #0]
 8014f68:	461a      	mov	r2, r3
 8014f6a:	4b38      	ldr	r3, [pc, #224]	@ (801504c <tcp_receive+0x884>)
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	441a      	add	r2, r3
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f74:	6879      	ldr	r1, [r7, #4]
 8014f76:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8014f78:	440b      	add	r3, r1
 8014f7a:	429a      	cmp	r2, r3
 8014f7c:	d006      	beq.n	8014f8c <tcp_receive+0x7c4>
 8014f7e:	4b36      	ldr	r3, [pc, #216]	@ (8015058 <tcp_receive+0x890>)
 8014f80:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 8014f84:	4935      	ldr	r1, [pc, #212]	@ (801505c <tcp_receive+0x894>)
 8014f86:	4836      	ldr	r0, [pc, #216]	@ (8015060 <tcp_receive+0x898>)
 8014f88:	f008 ff00 	bl	801dd8c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	f000 80e6 	beq.w	8015162 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014f96:	4b2e      	ldr	r3, [pc, #184]	@ (8015050 <tcp_receive+0x888>)
 8014f98:	68db      	ldr	r3, [r3, #12]
 8014f9a:	899b      	ldrh	r3, [r3, #12]
 8014f9c:	b29b      	uxth	r3, r3
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	f7fa f814 	bl	800efcc <lwip_htons>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	b2db      	uxtb	r3, r3
 8014fa8:	f003 0301 	and.w	r3, r3, #1
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d010      	beq.n	8014fd2 <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014fb0:	e00a      	b.n	8014fc8 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014fb6:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014fbc:	681a      	ldr	r2, [r3, #0]
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 8014fc2:	68f8      	ldr	r0, [r7, #12]
 8014fc4:	f7fd fcc5 	bl	8012952 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014fc8:	687b      	ldr	r3, [r7, #4]
 8014fca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d1f0      	bne.n	8014fb2 <tcp_receive+0x7ea>
 8014fd0:	e0c7      	b.n	8015162 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014fd8:	e051      	b.n	801507e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014fdc:	68db      	ldr	r3, [r3, #12]
 8014fde:	899b      	ldrh	r3, [r3, #12]
 8014fe0:	b29b      	uxth	r3, r3
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f7f9 fff2 	bl	800efcc <lwip_htons>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	b2db      	uxtb	r3, r3
 8014fec:	f003 0301 	and.w	r3, r3, #1
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d03c      	beq.n	801506e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014ff4:	4b16      	ldr	r3, [pc, #88]	@ (8015050 <tcp_receive+0x888>)
 8014ff6:	68db      	ldr	r3, [r3, #12]
 8014ff8:	899b      	ldrh	r3, [r3, #12]
 8014ffa:	b29b      	uxth	r3, r3
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	f7f9 ffe5 	bl	800efcc <lwip_htons>
 8015002:	4603      	mov	r3, r0
 8015004:	b2db      	uxtb	r3, r3
 8015006:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801500a:	2b00      	cmp	r3, #0
 801500c:	d12f      	bne.n	801506e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801500e:	4b10      	ldr	r3, [pc, #64]	@ (8015050 <tcp_receive+0x888>)
 8015010:	68db      	ldr	r3, [r3, #12]
 8015012:	899b      	ldrh	r3, [r3, #12]
 8015014:	b29c      	uxth	r4, r3
 8015016:	2001      	movs	r0, #1
 8015018:	f7f9 ffd8 	bl	800efcc <lwip_htons>
 801501c:	4603      	mov	r3, r0
 801501e:	461a      	mov	r2, r3
 8015020:	4b0b      	ldr	r3, [pc, #44]	@ (8015050 <tcp_receive+0x888>)
 8015022:	68db      	ldr	r3, [r3, #12]
 8015024:	4322      	orrs	r2, r4
 8015026:	b292      	uxth	r2, r2
 8015028:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801502a:	4b09      	ldr	r3, [pc, #36]	@ (8015050 <tcp_receive+0x888>)
 801502c:	891c      	ldrh	r4, [r3, #8]
 801502e:	4b08      	ldr	r3, [pc, #32]	@ (8015050 <tcp_receive+0x888>)
 8015030:	68db      	ldr	r3, [r3, #12]
 8015032:	899b      	ldrh	r3, [r3, #12]
 8015034:	b29b      	uxth	r3, r3
 8015036:	4618      	mov	r0, r3
 8015038:	f7f9 ffc8 	bl	800efcc <lwip_htons>
 801503c:	4603      	mov	r3, r0
 801503e:	b2db      	uxtb	r3, r3
 8015040:	f003 0303 	and.w	r3, r3, #3
 8015044:	2b00      	cmp	r3, #0
 8015046:	d00d      	beq.n	8015064 <tcp_receive+0x89c>
 8015048:	2301      	movs	r3, #1
 801504a:	e00c      	b.n	8015066 <tcp_receive+0x89e>
 801504c:	2000ec68 	.word	0x2000ec68
 8015050:	2000ec48 	.word	0x2000ec48
 8015054:	2000ec72 	.word	0x2000ec72
 8015058:	08023930 	.word	0x08023930
 801505c:	08023cd8 	.word	0x08023cd8
 8015060:	0802397c 	.word	0x0802397c
 8015064:	2300      	movs	r3, #0
 8015066:	4423      	add	r3, r4
 8015068:	b29a      	uxth	r2, r3
 801506a:	4b98      	ldr	r3, [pc, #608]	@ (80152cc <tcp_receive+0xb04>)
 801506c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801506e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015070:	613b      	str	r3, [r7, #16]
              next = next->next;
 8015072:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 8015078:	6938      	ldr	r0, [r7, #16]
 801507a:	f7fd fc6a 	bl	8012952 <tcp_seg_free>
            while (next &&
 801507e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015080:	2b00      	cmp	r3, #0
 8015082:	d00e      	beq.n	80150a2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015084:	4b91      	ldr	r3, [pc, #580]	@ (80152cc <tcp_receive+0xb04>)
 8015086:	881b      	ldrh	r3, [r3, #0]
 8015088:	461a      	mov	r2, r3
 801508a:	4b91      	ldr	r3, [pc, #580]	@ (80152d0 <tcp_receive+0xb08>)
 801508c:	681b      	ldr	r3, [r3, #0]
 801508e:	441a      	add	r2, r3
 8015090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015092:	68db      	ldr	r3, [r3, #12]
 8015094:	685b      	ldr	r3, [r3, #4]
 8015096:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015098:	8909      	ldrh	r1, [r1, #8]
 801509a:	440b      	add	r3, r1
 801509c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801509e:	2b00      	cmp	r3, #0
 80150a0:	da9b      	bge.n	8014fda <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80150a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d059      	beq.n	801515c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80150a8:	4b88      	ldr	r3, [pc, #544]	@ (80152cc <tcp_receive+0xb04>)
 80150aa:	881b      	ldrh	r3, [r3, #0]
 80150ac:	461a      	mov	r2, r3
 80150ae:	4b88      	ldr	r3, [pc, #544]	@ (80152d0 <tcp_receive+0xb08>)
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	441a      	add	r2, r3
 80150b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80150b6:	68db      	ldr	r3, [r3, #12]
 80150b8:	685b      	ldr	r3, [r3, #4]
 80150ba:	1ad3      	subs	r3, r2, r3
            if (next &&
 80150bc:	2b00      	cmp	r3, #0
 80150be:	dd4d      	ble.n	801515c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80150c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80150c2:	68db      	ldr	r3, [r3, #12]
 80150c4:	685b      	ldr	r3, [r3, #4]
 80150c6:	b29a      	uxth	r2, r3
 80150c8:	4b81      	ldr	r3, [pc, #516]	@ (80152d0 <tcp_receive+0xb08>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	b29b      	uxth	r3, r3
 80150ce:	1ad3      	subs	r3, r2, r3
 80150d0:	b29a      	uxth	r2, r3
 80150d2:	4b80      	ldr	r3, [pc, #512]	@ (80152d4 <tcp_receive+0xb0c>)
 80150d4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80150d6:	4b7f      	ldr	r3, [pc, #508]	@ (80152d4 <tcp_receive+0xb0c>)
 80150d8:	68db      	ldr	r3, [r3, #12]
 80150da:	899b      	ldrh	r3, [r3, #12]
 80150dc:	b29b      	uxth	r3, r3
 80150de:	4618      	mov	r0, r3
 80150e0:	f7f9 ff74 	bl	800efcc <lwip_htons>
 80150e4:	4603      	mov	r3, r0
 80150e6:	b2db      	uxtb	r3, r3
 80150e8:	f003 0302 	and.w	r3, r3, #2
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d005      	beq.n	80150fc <tcp_receive+0x934>
                inseg.len -= 1;
 80150f0:	4b78      	ldr	r3, [pc, #480]	@ (80152d4 <tcp_receive+0xb0c>)
 80150f2:	891b      	ldrh	r3, [r3, #8]
 80150f4:	3b01      	subs	r3, #1
 80150f6:	b29a      	uxth	r2, r3
 80150f8:	4b76      	ldr	r3, [pc, #472]	@ (80152d4 <tcp_receive+0xb0c>)
 80150fa:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80150fc:	4b75      	ldr	r3, [pc, #468]	@ (80152d4 <tcp_receive+0xb0c>)
 80150fe:	685b      	ldr	r3, [r3, #4]
 8015100:	4a74      	ldr	r2, [pc, #464]	@ (80152d4 <tcp_receive+0xb0c>)
 8015102:	8912      	ldrh	r2, [r2, #8]
 8015104:	4611      	mov	r1, r2
 8015106:	4618      	mov	r0, r3
 8015108:	f7fb fcc6 	bl	8010a98 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801510c:	4b71      	ldr	r3, [pc, #452]	@ (80152d4 <tcp_receive+0xb0c>)
 801510e:	891c      	ldrh	r4, [r3, #8]
 8015110:	4b70      	ldr	r3, [pc, #448]	@ (80152d4 <tcp_receive+0xb0c>)
 8015112:	68db      	ldr	r3, [r3, #12]
 8015114:	899b      	ldrh	r3, [r3, #12]
 8015116:	b29b      	uxth	r3, r3
 8015118:	4618      	mov	r0, r3
 801511a:	f7f9 ff57 	bl	800efcc <lwip_htons>
 801511e:	4603      	mov	r3, r0
 8015120:	b2db      	uxtb	r3, r3
 8015122:	f003 0303 	and.w	r3, r3, #3
 8015126:	2b00      	cmp	r3, #0
 8015128:	d001      	beq.n	801512e <tcp_receive+0x966>
 801512a:	2301      	movs	r3, #1
 801512c:	e000      	b.n	8015130 <tcp_receive+0x968>
 801512e:	2300      	movs	r3, #0
 8015130:	4423      	add	r3, r4
 8015132:	b29a      	uxth	r2, r3
 8015134:	4b65      	ldr	r3, [pc, #404]	@ (80152cc <tcp_receive+0xb04>)
 8015136:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8015138:	4b64      	ldr	r3, [pc, #400]	@ (80152cc <tcp_receive+0xb04>)
 801513a:	881b      	ldrh	r3, [r3, #0]
 801513c:	461a      	mov	r2, r3
 801513e:	4b64      	ldr	r3, [pc, #400]	@ (80152d0 <tcp_receive+0xb08>)
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	441a      	add	r2, r3
 8015144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015146:	68db      	ldr	r3, [r3, #12]
 8015148:	685b      	ldr	r3, [r3, #4]
 801514a:	429a      	cmp	r2, r3
 801514c:	d006      	beq.n	801515c <tcp_receive+0x994>
 801514e:	4b62      	ldr	r3, [pc, #392]	@ (80152d8 <tcp_receive+0xb10>)
 8015150:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 8015154:	4961      	ldr	r1, [pc, #388]	@ (80152dc <tcp_receive+0xb14>)
 8015156:	4862      	ldr	r0, [pc, #392]	@ (80152e0 <tcp_receive+0xb18>)
 8015158:	f008 fe18 	bl	801dd8c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801515c:	687b      	ldr	r3, [r7, #4]
 801515e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8015160:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015162:	4b5a      	ldr	r3, [pc, #360]	@ (80152cc <tcp_receive+0xb04>)
 8015164:	881b      	ldrh	r3, [r3, #0]
 8015166:	461a      	mov	r2, r3
 8015168:	4b59      	ldr	r3, [pc, #356]	@ (80152d0 <tcp_receive+0xb08>)
 801516a:	681b      	ldr	r3, [r3, #0]
 801516c:	441a      	add	r2, r3
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015176:	4b55      	ldr	r3, [pc, #340]	@ (80152cc <tcp_receive+0xb04>)
 8015178:	881b      	ldrh	r3, [r3, #0]
 801517a:	429a      	cmp	r2, r3
 801517c:	d206      	bcs.n	801518c <tcp_receive+0x9c4>
 801517e:	4b56      	ldr	r3, [pc, #344]	@ (80152d8 <tcp_receive+0xb10>)
 8015180:	f240 6207 	movw	r2, #1543	@ 0x607
 8015184:	4957      	ldr	r1, [pc, #348]	@ (80152e4 <tcp_receive+0xb1c>)
 8015186:	4856      	ldr	r0, [pc, #344]	@ (80152e0 <tcp_receive+0xb18>)
 8015188:	f008 fe00 	bl	801dd8c <iprintf>
        pcb->rcv_wnd -= tcplen;
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015190:	4b4e      	ldr	r3, [pc, #312]	@ (80152cc <tcp_receive+0xb04>)
 8015192:	881b      	ldrh	r3, [r3, #0]
 8015194:	1ad3      	subs	r3, r2, r3
 8015196:	b29a      	uxth	r2, r3
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801519c:	6878      	ldr	r0, [r7, #4]
 801519e:	f7fc fd99 	bl	8011cd4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80151a2:	4b4c      	ldr	r3, [pc, #304]	@ (80152d4 <tcp_receive+0xb0c>)
 80151a4:	685b      	ldr	r3, [r3, #4]
 80151a6:	891b      	ldrh	r3, [r3, #8]
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	d006      	beq.n	80151ba <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80151ac:	4b49      	ldr	r3, [pc, #292]	@ (80152d4 <tcp_receive+0xb0c>)
 80151ae:	685b      	ldr	r3, [r3, #4]
 80151b0:	4a4d      	ldr	r2, [pc, #308]	@ (80152e8 <tcp_receive+0xb20>)
 80151b2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80151b4:	4b47      	ldr	r3, [pc, #284]	@ (80152d4 <tcp_receive+0xb0c>)
 80151b6:	2200      	movs	r2, #0
 80151b8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80151ba:	4b46      	ldr	r3, [pc, #280]	@ (80152d4 <tcp_receive+0xb0c>)
 80151bc:	68db      	ldr	r3, [r3, #12]
 80151be:	899b      	ldrh	r3, [r3, #12]
 80151c0:	b29b      	uxth	r3, r3
 80151c2:	4618      	mov	r0, r3
 80151c4:	f7f9 ff02 	bl	800efcc <lwip_htons>
 80151c8:	4603      	mov	r3, r0
 80151ca:	b2db      	uxtb	r3, r3
 80151cc:	f003 0301 	and.w	r3, r3, #1
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	f000 80b8 	beq.w	8015346 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80151d6:	4b45      	ldr	r3, [pc, #276]	@ (80152ec <tcp_receive+0xb24>)
 80151d8:	781b      	ldrb	r3, [r3, #0]
 80151da:	f043 0320 	orr.w	r3, r3, #32
 80151de:	b2da      	uxtb	r2, r3
 80151e0:	4b42      	ldr	r3, [pc, #264]	@ (80152ec <tcp_receive+0xb24>)
 80151e2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80151e4:	e0af      	b.n	8015346 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80151ea:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80151f0:	68db      	ldr	r3, [r3, #12]
 80151f2:	685b      	ldr	r3, [r3, #4]
 80151f4:	4a36      	ldr	r2, [pc, #216]	@ (80152d0 <tcp_receive+0xb08>)
 80151f6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80151f8:	68bb      	ldr	r3, [r7, #8]
 80151fa:	891b      	ldrh	r3, [r3, #8]
 80151fc:	461c      	mov	r4, r3
 80151fe:	68bb      	ldr	r3, [r7, #8]
 8015200:	68db      	ldr	r3, [r3, #12]
 8015202:	899b      	ldrh	r3, [r3, #12]
 8015204:	b29b      	uxth	r3, r3
 8015206:	4618      	mov	r0, r3
 8015208:	f7f9 fee0 	bl	800efcc <lwip_htons>
 801520c:	4603      	mov	r3, r0
 801520e:	b2db      	uxtb	r3, r3
 8015210:	f003 0303 	and.w	r3, r3, #3
 8015214:	2b00      	cmp	r3, #0
 8015216:	d001      	beq.n	801521c <tcp_receive+0xa54>
 8015218:	2301      	movs	r3, #1
 801521a:	e000      	b.n	801521e <tcp_receive+0xa56>
 801521c:	2300      	movs	r3, #0
 801521e:	191a      	adds	r2, r3, r4
 8015220:	687b      	ldr	r3, [r7, #4]
 8015222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015224:	441a      	add	r2, r3
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801522e:	461c      	mov	r4, r3
 8015230:	68bb      	ldr	r3, [r7, #8]
 8015232:	891b      	ldrh	r3, [r3, #8]
 8015234:	461d      	mov	r5, r3
 8015236:	68bb      	ldr	r3, [r7, #8]
 8015238:	68db      	ldr	r3, [r3, #12]
 801523a:	899b      	ldrh	r3, [r3, #12]
 801523c:	b29b      	uxth	r3, r3
 801523e:	4618      	mov	r0, r3
 8015240:	f7f9 fec4 	bl	800efcc <lwip_htons>
 8015244:	4603      	mov	r3, r0
 8015246:	b2db      	uxtb	r3, r3
 8015248:	f003 0303 	and.w	r3, r3, #3
 801524c:	2b00      	cmp	r3, #0
 801524e:	d001      	beq.n	8015254 <tcp_receive+0xa8c>
 8015250:	2301      	movs	r3, #1
 8015252:	e000      	b.n	8015256 <tcp_receive+0xa8e>
 8015254:	2300      	movs	r3, #0
 8015256:	442b      	add	r3, r5
 8015258:	429c      	cmp	r4, r3
 801525a:	d206      	bcs.n	801526a <tcp_receive+0xaa2>
 801525c:	4b1e      	ldr	r3, [pc, #120]	@ (80152d8 <tcp_receive+0xb10>)
 801525e:	f240 622b 	movw	r2, #1579	@ 0x62b
 8015262:	4923      	ldr	r1, [pc, #140]	@ (80152f0 <tcp_receive+0xb28>)
 8015264:	481e      	ldr	r0, [pc, #120]	@ (80152e0 <tcp_receive+0xb18>)
 8015266:	f008 fd91 	bl	801dd8c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801526a:	68bb      	ldr	r3, [r7, #8]
 801526c:	891b      	ldrh	r3, [r3, #8]
 801526e:	461c      	mov	r4, r3
 8015270:	68bb      	ldr	r3, [r7, #8]
 8015272:	68db      	ldr	r3, [r3, #12]
 8015274:	899b      	ldrh	r3, [r3, #12]
 8015276:	b29b      	uxth	r3, r3
 8015278:	4618      	mov	r0, r3
 801527a:	f7f9 fea7 	bl	800efcc <lwip_htons>
 801527e:	4603      	mov	r3, r0
 8015280:	b2db      	uxtb	r3, r3
 8015282:	f003 0303 	and.w	r3, r3, #3
 8015286:	2b00      	cmp	r3, #0
 8015288:	d001      	beq.n	801528e <tcp_receive+0xac6>
 801528a:	2301      	movs	r3, #1
 801528c:	e000      	b.n	8015290 <tcp_receive+0xac8>
 801528e:	2300      	movs	r3, #0
 8015290:	1919      	adds	r1, r3, r4
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8015296:	b28b      	uxth	r3, r1
 8015298:	1ad3      	subs	r3, r2, r3
 801529a:	b29a      	uxth	r2, r3
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80152a0:	6878      	ldr	r0, [r7, #4]
 80152a2:	f7fc fd17 	bl	8011cd4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80152a6:	68bb      	ldr	r3, [r7, #8]
 80152a8:	685b      	ldr	r3, [r3, #4]
 80152aa:	891b      	ldrh	r3, [r3, #8]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d028      	beq.n	8015302 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80152b0:	4b0d      	ldr	r3, [pc, #52]	@ (80152e8 <tcp_receive+0xb20>)
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	2b00      	cmp	r3, #0
 80152b6:	d01d      	beq.n	80152f4 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80152b8:	4b0b      	ldr	r3, [pc, #44]	@ (80152e8 <tcp_receive+0xb20>)
 80152ba:	681a      	ldr	r2, [r3, #0]
 80152bc:	68bb      	ldr	r3, [r7, #8]
 80152be:	685b      	ldr	r3, [r3, #4]
 80152c0:	4619      	mov	r1, r3
 80152c2:	4610      	mov	r0, r2
 80152c4:	f7fb fe6e 	bl	8010fa4 <pbuf_cat>
 80152c8:	e018      	b.n	80152fc <tcp_receive+0xb34>
 80152ca:	bf00      	nop
 80152cc:	2000ec72 	.word	0x2000ec72
 80152d0:	2000ec68 	.word	0x2000ec68
 80152d4:	2000ec48 	.word	0x2000ec48
 80152d8:	08023930 	.word	0x08023930
 80152dc:	08023d10 	.word	0x08023d10
 80152e0:	0802397c 	.word	0x0802397c
 80152e4:	08023d4c 	.word	0x08023d4c
 80152e8:	2000ec78 	.word	0x2000ec78
 80152ec:	2000ec75 	.word	0x2000ec75
 80152f0:	08023d6c 	.word	0x08023d6c
            } else {
              recv_data = cseg->p;
 80152f4:	68bb      	ldr	r3, [r7, #8]
 80152f6:	685b      	ldr	r3, [r3, #4]
 80152f8:	4a70      	ldr	r2, [pc, #448]	@ (80154bc <tcp_receive+0xcf4>)
 80152fa:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80152fc:	68bb      	ldr	r3, [r7, #8]
 80152fe:	2200      	movs	r2, #0
 8015300:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8015302:	68bb      	ldr	r3, [r7, #8]
 8015304:	68db      	ldr	r3, [r3, #12]
 8015306:	899b      	ldrh	r3, [r3, #12]
 8015308:	b29b      	uxth	r3, r3
 801530a:	4618      	mov	r0, r3
 801530c:	f7f9 fe5e 	bl	800efcc <lwip_htons>
 8015310:	4603      	mov	r3, r0
 8015312:	b2db      	uxtb	r3, r3
 8015314:	f003 0301 	and.w	r3, r3, #1
 8015318:	2b00      	cmp	r3, #0
 801531a:	d00d      	beq.n	8015338 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801531c:	4b68      	ldr	r3, [pc, #416]	@ (80154c0 <tcp_receive+0xcf8>)
 801531e:	781b      	ldrb	r3, [r3, #0]
 8015320:	f043 0320 	orr.w	r3, r3, #32
 8015324:	b2da      	uxtb	r2, r3
 8015326:	4b66      	ldr	r3, [pc, #408]	@ (80154c0 <tcp_receive+0xcf8>)
 8015328:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	7d1b      	ldrb	r3, [r3, #20]
 801532e:	2b04      	cmp	r3, #4
 8015330:	d102      	bne.n	8015338 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8015332:	687b      	ldr	r3, [r7, #4]
 8015334:	2207      	movs	r2, #7
 8015336:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8015338:	68bb      	ldr	r3, [r7, #8]
 801533a:	681a      	ldr	r2, [r3, #0]
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 8015340:	68b8      	ldr	r0, [r7, #8]
 8015342:	f7fd fb06 	bl	8012952 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801534a:	2b00      	cmp	r3, #0
 801534c:	d008      	beq.n	8015360 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015352:	68db      	ldr	r3, [r3, #12]
 8015354:	685a      	ldr	r2, [r3, #4]
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 801535a:	429a      	cmp	r2, r3
 801535c:	f43f af43 	beq.w	80151e6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	8b5b      	ldrh	r3, [r3, #26]
 8015364:	f003 0301 	and.w	r3, r3, #1
 8015368:	2b00      	cmp	r3, #0
 801536a:	d00e      	beq.n	801538a <tcp_receive+0xbc2>
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	8b5b      	ldrh	r3, [r3, #26]
 8015370:	f023 0301 	bic.w	r3, r3, #1
 8015374:	b29a      	uxth	r2, r3
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	835a      	strh	r2, [r3, #26]
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	8b5b      	ldrh	r3, [r3, #26]
 801537e:	f043 0302 	orr.w	r3, r3, #2
 8015382:	b29a      	uxth	r2, r3
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015388:	e187      	b.n	801569a <tcp_receive+0xed2>
        tcp_ack(pcb);
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	8b5b      	ldrh	r3, [r3, #26]
 801538e:	f043 0301 	orr.w	r3, r3, #1
 8015392:	b29a      	uxth	r2, r3
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015398:	e17f      	b.n	801569a <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801539a:	687b      	ldr	r3, [r7, #4]
 801539c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d106      	bne.n	80153b0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80153a2:	4848      	ldr	r0, [pc, #288]	@ (80154c4 <tcp_receive+0xcfc>)
 80153a4:	f7fd faee 	bl	8012984 <tcp_seg_copy>
 80153a8:	4602      	mov	r2, r0
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	675a      	str	r2, [r3, #116]	@ 0x74
 80153ae:	e16c      	b.n	801568a <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80153b0:	2300      	movs	r3, #0
 80153b2:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80153b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80153ba:	e156      	b.n	801566a <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 80153bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153be:	68db      	ldr	r3, [r3, #12]
 80153c0:	685a      	ldr	r2, [r3, #4]
 80153c2:	4b41      	ldr	r3, [pc, #260]	@ (80154c8 <tcp_receive+0xd00>)
 80153c4:	681b      	ldr	r3, [r3, #0]
 80153c6:	429a      	cmp	r2, r3
 80153c8:	d11d      	bne.n	8015406 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80153ca:	4b3e      	ldr	r3, [pc, #248]	@ (80154c4 <tcp_receive+0xcfc>)
 80153cc:	891a      	ldrh	r2, [r3, #8]
 80153ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80153d0:	891b      	ldrh	r3, [r3, #8]
 80153d2:	429a      	cmp	r2, r3
 80153d4:	f240 814e 	bls.w	8015674 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80153d8:	483a      	ldr	r0, [pc, #232]	@ (80154c4 <tcp_receive+0xcfc>)
 80153da:	f7fd fad3 	bl	8012984 <tcp_seg_copy>
 80153de:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80153e0:	697b      	ldr	r3, [r7, #20]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	f000 8148 	beq.w	8015678 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 80153e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153ea:	2b00      	cmp	r3, #0
 80153ec:	d003      	beq.n	80153f6 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80153ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153f0:	697a      	ldr	r2, [r7, #20]
 80153f2:	601a      	str	r2, [r3, #0]
 80153f4:	e002      	b.n	80153fc <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	697a      	ldr	r2, [r7, #20]
 80153fa:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80153fc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80153fe:	6978      	ldr	r0, [r7, #20]
 8015400:	f7ff f8de 	bl	80145c0 <tcp_oos_insert_segment>
                }
                break;
 8015404:	e138      	b.n	8015678 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8015406:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015408:	2b00      	cmp	r3, #0
 801540a:	d117      	bne.n	801543c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801540c:	4b2e      	ldr	r3, [pc, #184]	@ (80154c8 <tcp_receive+0xd00>)
 801540e:	681a      	ldr	r2, [r3, #0]
 8015410:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015412:	68db      	ldr	r3, [r3, #12]
 8015414:	685b      	ldr	r3, [r3, #4]
 8015416:	1ad3      	subs	r3, r2, r3
 8015418:	2b00      	cmp	r3, #0
 801541a:	da57      	bge.n	80154cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801541c:	4829      	ldr	r0, [pc, #164]	@ (80154c4 <tcp_receive+0xcfc>)
 801541e:	f7fd fab1 	bl	8012984 <tcp_seg_copy>
 8015422:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8015424:	69bb      	ldr	r3, [r7, #24]
 8015426:	2b00      	cmp	r3, #0
 8015428:	f000 8128 	beq.w	801567c <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	69ba      	ldr	r2, [r7, #24]
 8015430:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 8015432:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8015434:	69b8      	ldr	r0, [r7, #24]
 8015436:	f7ff f8c3 	bl	80145c0 <tcp_oos_insert_segment>
                  }
                  break;
 801543a:	e11f      	b.n	801567c <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801543c:	4b22      	ldr	r3, [pc, #136]	@ (80154c8 <tcp_receive+0xd00>)
 801543e:	681a      	ldr	r2, [r3, #0]
 8015440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015442:	68db      	ldr	r3, [r3, #12]
 8015444:	685b      	ldr	r3, [r3, #4]
 8015446:	1ad3      	subs	r3, r2, r3
 8015448:	3b01      	subs	r3, #1
 801544a:	2b00      	cmp	r3, #0
 801544c:	db3e      	blt.n	80154cc <tcp_receive+0xd04>
 801544e:	4b1e      	ldr	r3, [pc, #120]	@ (80154c8 <tcp_receive+0xd00>)
 8015450:	681a      	ldr	r2, [r3, #0]
 8015452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015454:	68db      	ldr	r3, [r3, #12]
 8015456:	685b      	ldr	r3, [r3, #4]
 8015458:	1ad3      	subs	r3, r2, r3
 801545a:	3301      	adds	r3, #1
 801545c:	2b00      	cmp	r3, #0
 801545e:	dc35      	bgt.n	80154cc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015460:	4818      	ldr	r0, [pc, #96]	@ (80154c4 <tcp_receive+0xcfc>)
 8015462:	f7fd fa8f 	bl	8012984 <tcp_seg_copy>
 8015466:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015468:	69fb      	ldr	r3, [r7, #28]
 801546a:	2b00      	cmp	r3, #0
 801546c:	f000 8108 	beq.w	8015680 <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015470:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015472:	68db      	ldr	r3, [r3, #12]
 8015474:	685b      	ldr	r3, [r3, #4]
 8015476:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015478:	8912      	ldrh	r2, [r2, #8]
 801547a:	441a      	add	r2, r3
 801547c:	4b12      	ldr	r3, [pc, #72]	@ (80154c8 <tcp_receive+0xd00>)
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	1ad3      	subs	r3, r2, r3
 8015482:	2b00      	cmp	r3, #0
 8015484:	dd12      	ble.n	80154ac <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015486:	4b10      	ldr	r3, [pc, #64]	@ (80154c8 <tcp_receive+0xd00>)
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	b29a      	uxth	r2, r3
 801548c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801548e:	68db      	ldr	r3, [r3, #12]
 8015490:	685b      	ldr	r3, [r3, #4]
 8015492:	b29b      	uxth	r3, r3
 8015494:	1ad3      	subs	r3, r2, r3
 8015496:	b29a      	uxth	r2, r3
 8015498:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801549a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801549c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801549e:	685a      	ldr	r2, [r3, #4]
 80154a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80154a2:	891b      	ldrh	r3, [r3, #8]
 80154a4:	4619      	mov	r1, r3
 80154a6:	4610      	mov	r0, r2
 80154a8:	f7fb faf6 	bl	8010a98 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80154ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80154ae:	69fa      	ldr	r2, [r7, #28]
 80154b0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80154b2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80154b4:	69f8      	ldr	r0, [r7, #28]
 80154b6:	f7ff f883 	bl	80145c0 <tcp_oos_insert_segment>
                  }
                  break;
 80154ba:	e0e1      	b.n	8015680 <tcp_receive+0xeb8>
 80154bc:	2000ec78 	.word	0x2000ec78
 80154c0:	2000ec75 	.word	0x2000ec75
 80154c4:	2000ec48 	.word	0x2000ec48
 80154c8:	2000ec68 	.word	0x2000ec68
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80154cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154ce:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80154d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154d2:	681b      	ldr	r3, [r3, #0]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	f040 80c5 	bne.w	8015664 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80154da:	4b7f      	ldr	r3, [pc, #508]	@ (80156d8 <tcp_receive+0xf10>)
 80154dc:	681a      	ldr	r2, [r3, #0]
 80154de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154e0:	68db      	ldr	r3, [r3, #12]
 80154e2:	685b      	ldr	r3, [r3, #4]
 80154e4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	f340 80bc 	ble.w	8015664 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80154ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80154ee:	68db      	ldr	r3, [r3, #12]
 80154f0:	899b      	ldrh	r3, [r3, #12]
 80154f2:	b29b      	uxth	r3, r3
 80154f4:	4618      	mov	r0, r3
 80154f6:	f7f9 fd69 	bl	800efcc <lwip_htons>
 80154fa:	4603      	mov	r3, r0
 80154fc:	b2db      	uxtb	r3, r3
 80154fe:	f003 0301 	and.w	r3, r3, #1
 8015502:	2b00      	cmp	r3, #0
 8015504:	f040 80be 	bne.w	8015684 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015508:	4874      	ldr	r0, [pc, #464]	@ (80156dc <tcp_receive+0xf14>)
 801550a:	f7fd fa3b 	bl	8012984 <tcp_seg_copy>
 801550e:	4602      	mov	r2, r0
 8015510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015512:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015516:	681b      	ldr	r3, [r3, #0]
 8015518:	2b00      	cmp	r3, #0
 801551a:	f000 80b5 	beq.w	8015688 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801551e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015520:	68db      	ldr	r3, [r3, #12]
 8015522:	685b      	ldr	r3, [r3, #4]
 8015524:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015526:	8912      	ldrh	r2, [r2, #8]
 8015528:	441a      	add	r2, r3
 801552a:	4b6b      	ldr	r3, [pc, #428]	@ (80156d8 <tcp_receive+0xf10>)
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	1ad3      	subs	r3, r2, r3
 8015530:	2b00      	cmp	r3, #0
 8015532:	dd12      	ble.n	801555a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015534:	4b68      	ldr	r3, [pc, #416]	@ (80156d8 <tcp_receive+0xf10>)
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	b29a      	uxth	r2, r3
 801553a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801553c:	68db      	ldr	r3, [r3, #12]
 801553e:	685b      	ldr	r3, [r3, #4]
 8015540:	b29b      	uxth	r3, r3
 8015542:	1ad3      	subs	r3, r2, r3
 8015544:	b29a      	uxth	r2, r3
 8015546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015548:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801554a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801554c:	685a      	ldr	r2, [r3, #4]
 801554e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015550:	891b      	ldrh	r3, [r3, #8]
 8015552:	4619      	mov	r1, r3
 8015554:	4610      	mov	r0, r2
 8015556:	f7fb fa9f 	bl	8010a98 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801555a:	4b61      	ldr	r3, [pc, #388]	@ (80156e0 <tcp_receive+0xf18>)
 801555c:	881b      	ldrh	r3, [r3, #0]
 801555e:	461a      	mov	r2, r3
 8015560:	4b5d      	ldr	r3, [pc, #372]	@ (80156d8 <tcp_receive+0xf10>)
 8015562:	681b      	ldr	r3, [r3, #0]
 8015564:	441a      	add	r2, r3
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801556a:	6879      	ldr	r1, [r7, #4]
 801556c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801556e:	440b      	add	r3, r1
 8015570:	1ad3      	subs	r3, r2, r3
 8015572:	2b00      	cmp	r3, #0
 8015574:	f340 8088 	ble.w	8015688 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801557a:	681b      	ldr	r3, [r3, #0]
 801557c:	68db      	ldr	r3, [r3, #12]
 801557e:	899b      	ldrh	r3, [r3, #12]
 8015580:	b29b      	uxth	r3, r3
 8015582:	4618      	mov	r0, r3
 8015584:	f7f9 fd22 	bl	800efcc <lwip_htons>
 8015588:	4603      	mov	r3, r0
 801558a:	b2db      	uxtb	r3, r3
 801558c:	f003 0301 	and.w	r3, r3, #1
 8015590:	2b00      	cmp	r3, #0
 8015592:	d021      	beq.n	80155d8 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015594:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	68db      	ldr	r3, [r3, #12]
 801559a:	899b      	ldrh	r3, [r3, #12]
 801559c:	b29b      	uxth	r3, r3
 801559e:	b21b      	sxth	r3, r3
 80155a0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80155a4:	b21c      	sxth	r4, r3
 80155a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	68db      	ldr	r3, [r3, #12]
 80155ac:	899b      	ldrh	r3, [r3, #12]
 80155ae:	b29b      	uxth	r3, r3
 80155b0:	4618      	mov	r0, r3
 80155b2:	f7f9 fd0b 	bl	800efcc <lwip_htons>
 80155b6:	4603      	mov	r3, r0
 80155b8:	b2db      	uxtb	r3, r3
 80155ba:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 80155be:	b29b      	uxth	r3, r3
 80155c0:	4618      	mov	r0, r3
 80155c2:	f7f9 fd03 	bl	800efcc <lwip_htons>
 80155c6:	4603      	mov	r3, r0
 80155c8:	b21b      	sxth	r3, r3
 80155ca:	4323      	orrs	r3, r4
 80155cc:	b21a      	sxth	r2, r3
 80155ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	68db      	ldr	r3, [r3, #12]
 80155d4:	b292      	uxth	r2, r2
 80155d6:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80155dc:	b29a      	uxth	r2, r3
 80155de:	687b      	ldr	r3, [r7, #4]
 80155e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80155e2:	4413      	add	r3, r2
 80155e4:	b299      	uxth	r1, r3
 80155e6:	4b3c      	ldr	r3, [pc, #240]	@ (80156d8 <tcp_receive+0xf10>)
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	b29a      	uxth	r2, r3
 80155ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155ee:	681b      	ldr	r3, [r3, #0]
 80155f0:	1a8a      	subs	r2, r1, r2
 80155f2:	b292      	uxth	r2, r2
 80155f4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80155f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	685a      	ldr	r2, [r3, #4]
 80155fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80155fe:	681b      	ldr	r3, [r3, #0]
 8015600:	891b      	ldrh	r3, [r3, #8]
 8015602:	4619      	mov	r1, r3
 8015604:	4610      	mov	r0, r2
 8015606:	f7fb fa47 	bl	8010a98 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801560a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	891c      	ldrh	r4, [r3, #8]
 8015610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	68db      	ldr	r3, [r3, #12]
 8015616:	899b      	ldrh	r3, [r3, #12]
 8015618:	b29b      	uxth	r3, r3
 801561a:	4618      	mov	r0, r3
 801561c:	f7f9 fcd6 	bl	800efcc <lwip_htons>
 8015620:	4603      	mov	r3, r0
 8015622:	b2db      	uxtb	r3, r3
 8015624:	f003 0303 	and.w	r3, r3, #3
 8015628:	2b00      	cmp	r3, #0
 801562a:	d001      	beq.n	8015630 <tcp_receive+0xe68>
 801562c:	2301      	movs	r3, #1
 801562e:	e000      	b.n	8015632 <tcp_receive+0xe6a>
 8015630:	2300      	movs	r3, #0
 8015632:	4423      	add	r3, r4
 8015634:	b29a      	uxth	r2, r3
 8015636:	4b2a      	ldr	r3, [pc, #168]	@ (80156e0 <tcp_receive+0xf18>)
 8015638:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801563a:	4b29      	ldr	r3, [pc, #164]	@ (80156e0 <tcp_receive+0xf18>)
 801563c:	881b      	ldrh	r3, [r3, #0]
 801563e:	461a      	mov	r2, r3
 8015640:	4b25      	ldr	r3, [pc, #148]	@ (80156d8 <tcp_receive+0xf10>)
 8015642:	681b      	ldr	r3, [r3, #0]
 8015644:	441a      	add	r2, r3
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801564a:	6879      	ldr	r1, [r7, #4]
 801564c:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 801564e:	440b      	add	r3, r1
 8015650:	429a      	cmp	r2, r3
 8015652:	d019      	beq.n	8015688 <tcp_receive+0xec0>
 8015654:	4b23      	ldr	r3, [pc, #140]	@ (80156e4 <tcp_receive+0xf1c>)
 8015656:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 801565a:	4923      	ldr	r1, [pc, #140]	@ (80156e8 <tcp_receive+0xf20>)
 801565c:	4823      	ldr	r0, [pc, #140]	@ (80156ec <tcp_receive+0xf24>)
 801565e:	f008 fb95 	bl	801dd8c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015662:	e011      	b.n	8015688 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015666:	681b      	ldr	r3, [r3, #0]
 8015668:	63bb      	str	r3, [r7, #56]	@ 0x38
 801566a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801566c:	2b00      	cmp	r3, #0
 801566e:	f47f aea5 	bne.w	80153bc <tcp_receive+0xbf4>
 8015672:	e00a      	b.n	801568a <tcp_receive+0xec2>
                break;
 8015674:	bf00      	nop
 8015676:	e008      	b.n	801568a <tcp_receive+0xec2>
                break;
 8015678:	bf00      	nop
 801567a:	e006      	b.n	801568a <tcp_receive+0xec2>
                  break;
 801567c:	bf00      	nop
 801567e:	e004      	b.n	801568a <tcp_receive+0xec2>
                  break;
 8015680:	bf00      	nop
 8015682:	e002      	b.n	801568a <tcp_receive+0xec2>
                  break;
 8015684:	bf00      	nop
 8015686:	e000      	b.n	801568a <tcp_receive+0xec2>
                break;
 8015688:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801568a:	6878      	ldr	r0, [r7, #4]
 801568c:	f001 fe88 	bl	80173a0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015690:	e003      	b.n	801569a <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015692:	6878      	ldr	r0, [r7, #4]
 8015694:	f001 fe84 	bl	80173a0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015698:	e01a      	b.n	80156d0 <tcp_receive+0xf08>
 801569a:	e019      	b.n	80156d0 <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801569c:	4b0e      	ldr	r3, [pc, #56]	@ (80156d8 <tcp_receive+0xf10>)
 801569e:	681a      	ldr	r2, [r3, #0]
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156a4:	1ad3      	subs	r3, r2, r3
 80156a6:	2b00      	cmp	r3, #0
 80156a8:	db0a      	blt.n	80156c0 <tcp_receive+0xef8>
 80156aa:	4b0b      	ldr	r3, [pc, #44]	@ (80156d8 <tcp_receive+0xf10>)
 80156ac:	681a      	ldr	r2, [r3, #0]
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80156b2:	6879      	ldr	r1, [r7, #4]
 80156b4:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80156b6:	440b      	add	r3, r1
 80156b8:	1ad3      	subs	r3, r2, r3
 80156ba:	3301      	adds	r3, #1
 80156bc:	2b00      	cmp	r3, #0
 80156be:	dd07      	ble.n	80156d0 <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	8b5b      	ldrh	r3, [r3, #26]
 80156c4:	f043 0302 	orr.w	r3, r3, #2
 80156c8:	b29a      	uxth	r2, r3
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80156ce:	e7ff      	b.n	80156d0 <tcp_receive+0xf08>
 80156d0:	bf00      	nop
 80156d2:	3750      	adds	r7, #80	@ 0x50
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bdb0      	pop	{r4, r5, r7, pc}
 80156d8:	2000ec68 	.word	0x2000ec68
 80156dc:	2000ec48 	.word	0x2000ec48
 80156e0:	2000ec72 	.word	0x2000ec72
 80156e4:	08023930 	.word	0x08023930
 80156e8:	08023cd8 	.word	0x08023cd8
 80156ec:	0802397c 	.word	0x0802397c

080156f0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80156f0:	b480      	push	{r7}
 80156f2:	b083      	sub	sp, #12
 80156f4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80156f6:	4b15      	ldr	r3, [pc, #84]	@ (801574c <tcp_get_next_optbyte+0x5c>)
 80156f8:	881b      	ldrh	r3, [r3, #0]
 80156fa:	1c5a      	adds	r2, r3, #1
 80156fc:	b291      	uxth	r1, r2
 80156fe:	4a13      	ldr	r2, [pc, #76]	@ (801574c <tcp_get_next_optbyte+0x5c>)
 8015700:	8011      	strh	r1, [r2, #0]
 8015702:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015704:	4b12      	ldr	r3, [pc, #72]	@ (8015750 <tcp_get_next_optbyte+0x60>)
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d004      	beq.n	8015716 <tcp_get_next_optbyte+0x26>
 801570c:	4b11      	ldr	r3, [pc, #68]	@ (8015754 <tcp_get_next_optbyte+0x64>)
 801570e:	881b      	ldrh	r3, [r3, #0]
 8015710:	88fa      	ldrh	r2, [r7, #6]
 8015712:	429a      	cmp	r2, r3
 8015714:	d208      	bcs.n	8015728 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015716:	4b10      	ldr	r3, [pc, #64]	@ (8015758 <tcp_get_next_optbyte+0x68>)
 8015718:	681b      	ldr	r3, [r3, #0]
 801571a:	3314      	adds	r3, #20
 801571c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801571e:	88fb      	ldrh	r3, [r7, #6]
 8015720:	683a      	ldr	r2, [r7, #0]
 8015722:	4413      	add	r3, r2
 8015724:	781b      	ldrb	r3, [r3, #0]
 8015726:	e00b      	b.n	8015740 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015728:	88fb      	ldrh	r3, [r7, #6]
 801572a:	b2da      	uxtb	r2, r3
 801572c:	4b09      	ldr	r3, [pc, #36]	@ (8015754 <tcp_get_next_optbyte+0x64>)
 801572e:	881b      	ldrh	r3, [r3, #0]
 8015730:	b2db      	uxtb	r3, r3
 8015732:	1ad3      	subs	r3, r2, r3
 8015734:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015736:	4b06      	ldr	r3, [pc, #24]	@ (8015750 <tcp_get_next_optbyte+0x60>)
 8015738:	681a      	ldr	r2, [r3, #0]
 801573a:	797b      	ldrb	r3, [r7, #5]
 801573c:	4413      	add	r3, r2
 801573e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015740:	4618      	mov	r0, r3
 8015742:	370c      	adds	r7, #12
 8015744:	46bd      	mov	sp, r7
 8015746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574a:	4770      	bx	lr
 801574c:	2000ec64 	.word	0x2000ec64
 8015750:	2000ec60 	.word	0x2000ec60
 8015754:	2000ec5e 	.word	0x2000ec5e
 8015758:	2000ec58 	.word	0x2000ec58

0801575c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801575c:	b580      	push	{r7, lr}
 801575e:	b084      	sub	sp, #16
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d106      	bne.n	8015778 <tcp_parseopt+0x1c>
 801576a:	4b32      	ldr	r3, [pc, #200]	@ (8015834 <tcp_parseopt+0xd8>)
 801576c:	f240 727d 	movw	r2, #1917	@ 0x77d
 8015770:	4931      	ldr	r1, [pc, #196]	@ (8015838 <tcp_parseopt+0xdc>)
 8015772:	4832      	ldr	r0, [pc, #200]	@ (801583c <tcp_parseopt+0xe0>)
 8015774:	f008 fb0a 	bl	801dd8c <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015778:	4b31      	ldr	r3, [pc, #196]	@ (8015840 <tcp_parseopt+0xe4>)
 801577a:	881b      	ldrh	r3, [r3, #0]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d056      	beq.n	801582e <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015780:	4b30      	ldr	r3, [pc, #192]	@ (8015844 <tcp_parseopt+0xe8>)
 8015782:	2200      	movs	r2, #0
 8015784:	801a      	strh	r2, [r3, #0]
 8015786:	e046      	b.n	8015816 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8015788:	f7ff ffb2 	bl	80156f0 <tcp_get_next_optbyte>
 801578c:	4603      	mov	r3, r0
 801578e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015790:	7bfb      	ldrb	r3, [r7, #15]
 8015792:	2b02      	cmp	r3, #2
 8015794:	d006      	beq.n	80157a4 <tcp_parseopt+0x48>
 8015796:	2b02      	cmp	r3, #2
 8015798:	dc2a      	bgt.n	80157f0 <tcp_parseopt+0x94>
 801579a:	2b00      	cmp	r3, #0
 801579c:	d042      	beq.n	8015824 <tcp_parseopt+0xc8>
 801579e:	2b01      	cmp	r3, #1
 80157a0:	d038      	beq.n	8015814 <tcp_parseopt+0xb8>
 80157a2:	e025      	b.n	80157f0 <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80157a4:	f7ff ffa4 	bl	80156f0 <tcp_get_next_optbyte>
 80157a8:	4603      	mov	r3, r0
 80157aa:	2b04      	cmp	r3, #4
 80157ac:	d13c      	bne.n	8015828 <tcp_parseopt+0xcc>
 80157ae:	4b25      	ldr	r3, [pc, #148]	@ (8015844 <tcp_parseopt+0xe8>)
 80157b0:	881b      	ldrh	r3, [r3, #0]
 80157b2:	3301      	adds	r3, #1
 80157b4:	4a22      	ldr	r2, [pc, #136]	@ (8015840 <tcp_parseopt+0xe4>)
 80157b6:	8812      	ldrh	r2, [r2, #0]
 80157b8:	4293      	cmp	r3, r2
 80157ba:	da35      	bge.n	8015828 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80157bc:	f7ff ff98 	bl	80156f0 <tcp_get_next_optbyte>
 80157c0:	4603      	mov	r3, r0
 80157c2:	021b      	lsls	r3, r3, #8
 80157c4:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80157c6:	f7ff ff93 	bl	80156f0 <tcp_get_next_optbyte>
 80157ca:	4603      	mov	r3, r0
 80157cc:	461a      	mov	r2, r3
 80157ce:	89bb      	ldrh	r3, [r7, #12]
 80157d0:	4313      	orrs	r3, r2
 80157d2:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80157d4:	89bb      	ldrh	r3, [r7, #12]
 80157d6:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80157da:	d804      	bhi.n	80157e6 <tcp_parseopt+0x8a>
 80157dc:	89bb      	ldrh	r3, [r7, #12]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d001      	beq.n	80157e6 <tcp_parseopt+0x8a>
 80157e2:	89ba      	ldrh	r2, [r7, #12]
 80157e4:	e001      	b.n	80157ea <tcp_parseopt+0x8e>
 80157e6:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 80157ee:	e012      	b.n	8015816 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80157f0:	f7ff ff7e 	bl	80156f0 <tcp_get_next_optbyte>
 80157f4:	4603      	mov	r3, r0
 80157f6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80157f8:	7afb      	ldrb	r3, [r7, #11]
 80157fa:	2b01      	cmp	r3, #1
 80157fc:	d916      	bls.n	801582c <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80157fe:	7afb      	ldrb	r3, [r7, #11]
 8015800:	b29a      	uxth	r2, r3
 8015802:	4b10      	ldr	r3, [pc, #64]	@ (8015844 <tcp_parseopt+0xe8>)
 8015804:	881b      	ldrh	r3, [r3, #0]
 8015806:	4413      	add	r3, r2
 8015808:	b29b      	uxth	r3, r3
 801580a:	3b02      	subs	r3, #2
 801580c:	b29a      	uxth	r2, r3
 801580e:	4b0d      	ldr	r3, [pc, #52]	@ (8015844 <tcp_parseopt+0xe8>)
 8015810:	801a      	strh	r2, [r3, #0]
 8015812:	e000      	b.n	8015816 <tcp_parseopt+0xba>
          break;
 8015814:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015816:	4b0b      	ldr	r3, [pc, #44]	@ (8015844 <tcp_parseopt+0xe8>)
 8015818:	881a      	ldrh	r2, [r3, #0]
 801581a:	4b09      	ldr	r3, [pc, #36]	@ (8015840 <tcp_parseopt+0xe4>)
 801581c:	881b      	ldrh	r3, [r3, #0]
 801581e:	429a      	cmp	r2, r3
 8015820:	d3b2      	bcc.n	8015788 <tcp_parseopt+0x2c>
 8015822:	e004      	b.n	801582e <tcp_parseopt+0xd2>
          return;
 8015824:	bf00      	nop
 8015826:	e002      	b.n	801582e <tcp_parseopt+0xd2>
            return;
 8015828:	bf00      	nop
 801582a:	e000      	b.n	801582e <tcp_parseopt+0xd2>
            return;
 801582c:	bf00      	nop
      }
    }
  }
}
 801582e:	3710      	adds	r7, #16
 8015830:	46bd      	mov	sp, r7
 8015832:	bd80      	pop	{r7, pc}
 8015834:	08023930 	.word	0x08023930
 8015838:	08023d94 	.word	0x08023d94
 801583c:	0802397c 	.word	0x0802397c
 8015840:	2000ec5c 	.word	0x2000ec5c
 8015844:	2000ec64 	.word	0x2000ec64

08015848 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015848:	b480      	push	{r7}
 801584a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801584c:	4b05      	ldr	r3, [pc, #20]	@ (8015864 <tcp_trigger_input_pcb_close+0x1c>)
 801584e:	781b      	ldrb	r3, [r3, #0]
 8015850:	f043 0310 	orr.w	r3, r3, #16
 8015854:	b2da      	uxtb	r2, r3
 8015856:	4b03      	ldr	r3, [pc, #12]	@ (8015864 <tcp_trigger_input_pcb_close+0x1c>)
 8015858:	701a      	strb	r2, [r3, #0]
}
 801585a:	bf00      	nop
 801585c:	46bd      	mov	sp, r7
 801585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015862:	4770      	bx	lr
 8015864:	2000ec75 	.word	0x2000ec75

08015868 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015868:	b580      	push	{r7, lr}
 801586a:	b084      	sub	sp, #16
 801586c:	af00      	add	r7, sp, #0
 801586e:	60f8      	str	r0, [r7, #12]
 8015870:	60b9      	str	r1, [r7, #8]
 8015872:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	2b00      	cmp	r3, #0
 8015878:	d00a      	beq.n	8015890 <tcp_route+0x28>
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	7a1b      	ldrb	r3, [r3, #8]
 801587e:	2b00      	cmp	r3, #0
 8015880:	d006      	beq.n	8015890 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015882:	68fb      	ldr	r3, [r7, #12]
 8015884:	7a1b      	ldrb	r3, [r3, #8]
 8015886:	4618      	mov	r0, r3
 8015888:	f7fa fefe 	bl	8010688 <netif_get_by_index>
 801588c:	4603      	mov	r3, r0
 801588e:	e003      	b.n	8015898 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015890:	6878      	ldr	r0, [r7, #4]
 8015892:	f005 fda9 	bl	801b3e8 <ip4_route>
 8015896:	4603      	mov	r3, r0
  }
}
 8015898:	4618      	mov	r0, r3
 801589a:	3710      	adds	r7, #16
 801589c:	46bd      	mov	sp, r7
 801589e:	bd80      	pop	{r7, pc}

080158a0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80158a0:	b590      	push	{r4, r7, lr}
 80158a2:	b087      	sub	sp, #28
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	60f8      	str	r0, [r7, #12]
 80158a8:	60b9      	str	r1, [r7, #8]
 80158aa:	603b      	str	r3, [r7, #0]
 80158ac:	4613      	mov	r3, r2
 80158ae:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d105      	bne.n	80158c2 <tcp_create_segment+0x22>
 80158b6:	4b43      	ldr	r3, [pc, #268]	@ (80159c4 <tcp_create_segment+0x124>)
 80158b8:	22a3      	movs	r2, #163	@ 0xa3
 80158ba:	4943      	ldr	r1, [pc, #268]	@ (80159c8 <tcp_create_segment+0x128>)
 80158bc:	4843      	ldr	r0, [pc, #268]	@ (80159cc <tcp_create_segment+0x12c>)
 80158be:	f008 fa65 	bl	801dd8c <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80158c2:	68bb      	ldr	r3, [r7, #8]
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d105      	bne.n	80158d4 <tcp_create_segment+0x34>
 80158c8:	4b3e      	ldr	r3, [pc, #248]	@ (80159c4 <tcp_create_segment+0x124>)
 80158ca:	22a4      	movs	r2, #164	@ 0xa4
 80158cc:	4940      	ldr	r1, [pc, #256]	@ (80159d0 <tcp_create_segment+0x130>)
 80158ce:	483f      	ldr	r0, [pc, #252]	@ (80159cc <tcp_create_segment+0x12c>)
 80158d0:	f008 fa5c 	bl	801dd8c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80158d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80158d8:	009b      	lsls	r3, r3, #2
 80158da:	b2db      	uxtb	r3, r3
 80158dc:	f003 0304 	and.w	r3, r3, #4
 80158e0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80158e2:	2003      	movs	r0, #3
 80158e4:	f7fa fb38 	bl	800ff58 <memp_malloc>
 80158e8:	6138      	str	r0, [r7, #16]
 80158ea:	693b      	ldr	r3, [r7, #16]
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d104      	bne.n	80158fa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80158f0:	68b8      	ldr	r0, [r7, #8]
 80158f2:	f7fb fa89 	bl	8010e08 <pbuf_free>
    return NULL;
 80158f6:	2300      	movs	r3, #0
 80158f8:	e060      	b.n	80159bc <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 80158fa:	693b      	ldr	r3, [r7, #16]
 80158fc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8015900:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015902:	693b      	ldr	r3, [r7, #16]
 8015904:	2200      	movs	r2, #0
 8015906:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015908:	693b      	ldr	r3, [r7, #16]
 801590a:	68ba      	ldr	r2, [r7, #8]
 801590c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801590e:	68bb      	ldr	r3, [r7, #8]
 8015910:	891a      	ldrh	r2, [r3, #8]
 8015912:	7dfb      	ldrb	r3, [r7, #23]
 8015914:	b29b      	uxth	r3, r3
 8015916:	429a      	cmp	r2, r3
 8015918:	d205      	bcs.n	8015926 <tcp_create_segment+0x86>
 801591a:	4b2a      	ldr	r3, [pc, #168]	@ (80159c4 <tcp_create_segment+0x124>)
 801591c:	22b0      	movs	r2, #176	@ 0xb0
 801591e:	492d      	ldr	r1, [pc, #180]	@ (80159d4 <tcp_create_segment+0x134>)
 8015920:	482a      	ldr	r0, [pc, #168]	@ (80159cc <tcp_create_segment+0x12c>)
 8015922:	f008 fa33 	bl	801dd8c <iprintf>
  seg->len = p->tot_len - optlen;
 8015926:	68bb      	ldr	r3, [r7, #8]
 8015928:	891a      	ldrh	r2, [r3, #8]
 801592a:	7dfb      	ldrb	r3, [r7, #23]
 801592c:	b29b      	uxth	r3, r3
 801592e:	1ad3      	subs	r3, r2, r3
 8015930:	b29a      	uxth	r2, r3
 8015932:	693b      	ldr	r3, [r7, #16]
 8015934:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015936:	2114      	movs	r1, #20
 8015938:	68b8      	ldr	r0, [r7, #8]
 801593a:	f7fb f99d 	bl	8010c78 <pbuf_add_header>
 801593e:	4603      	mov	r3, r0
 8015940:	2b00      	cmp	r3, #0
 8015942:	d004      	beq.n	801594e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015944:	6938      	ldr	r0, [r7, #16]
 8015946:	f7fd f804 	bl	8012952 <tcp_seg_free>
    return NULL;
 801594a:	2300      	movs	r3, #0
 801594c:	e036      	b.n	80159bc <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801594e:	693b      	ldr	r3, [r7, #16]
 8015950:	685b      	ldr	r3, [r3, #4]
 8015952:	685a      	ldr	r2, [r3, #4]
 8015954:	693b      	ldr	r3, [r7, #16]
 8015956:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	8ada      	ldrh	r2, [r3, #22]
 801595c:	693b      	ldr	r3, [r7, #16]
 801595e:	68dc      	ldr	r4, [r3, #12]
 8015960:	4610      	mov	r0, r2
 8015962:	f7f9 fb33 	bl	800efcc <lwip_htons>
 8015966:	4603      	mov	r3, r0
 8015968:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	8b1a      	ldrh	r2, [r3, #24]
 801596e:	693b      	ldr	r3, [r7, #16]
 8015970:	68dc      	ldr	r4, [r3, #12]
 8015972:	4610      	mov	r0, r2
 8015974:	f7f9 fb2a 	bl	800efcc <lwip_htons>
 8015978:	4603      	mov	r3, r0
 801597a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801597c:	693b      	ldr	r3, [r7, #16]
 801597e:	68dc      	ldr	r4, [r3, #12]
 8015980:	6838      	ldr	r0, [r7, #0]
 8015982:	f7f9 fb38 	bl	800eff6 <lwip_htonl>
 8015986:	4603      	mov	r3, r0
 8015988:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801598a:	7dfb      	ldrb	r3, [r7, #23]
 801598c:	089b      	lsrs	r3, r3, #2
 801598e:	b2db      	uxtb	r3, r3
 8015990:	3305      	adds	r3, #5
 8015992:	b29b      	uxth	r3, r3
 8015994:	031b      	lsls	r3, r3, #12
 8015996:	b29a      	uxth	r2, r3
 8015998:	79fb      	ldrb	r3, [r7, #7]
 801599a:	b29b      	uxth	r3, r3
 801599c:	4313      	orrs	r3, r2
 801599e:	b29a      	uxth	r2, r3
 80159a0:	693b      	ldr	r3, [r7, #16]
 80159a2:	68dc      	ldr	r4, [r3, #12]
 80159a4:	4610      	mov	r0, r2
 80159a6:	f7f9 fb11 	bl	800efcc <lwip_htons>
 80159aa:	4603      	mov	r3, r0
 80159ac:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80159ae:	693b      	ldr	r3, [r7, #16]
 80159b0:	68db      	ldr	r3, [r3, #12]
 80159b2:	2200      	movs	r2, #0
 80159b4:	749a      	strb	r2, [r3, #18]
 80159b6:	2200      	movs	r2, #0
 80159b8:	74da      	strb	r2, [r3, #19]
  return seg;
 80159ba:	693b      	ldr	r3, [r7, #16]
}
 80159bc:	4618      	mov	r0, r3
 80159be:	371c      	adds	r7, #28
 80159c0:	46bd      	mov	sp, r7
 80159c2:	bd90      	pop	{r4, r7, pc}
 80159c4:	08023db0 	.word	0x08023db0
 80159c8:	08023de4 	.word	0x08023de4
 80159cc:	08023e04 	.word	0x08023e04
 80159d0:	08023e2c 	.word	0x08023e2c
 80159d4:	08023e50 	.word	0x08023e50

080159d8 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 80159d8:	b580      	push	{r7, lr}
 80159da:	b086      	sub	sp, #24
 80159dc:	af00      	add	r7, sp, #0
 80159de:	607b      	str	r3, [r7, #4]
 80159e0:	4603      	mov	r3, r0
 80159e2:	73fb      	strb	r3, [r7, #15]
 80159e4:	460b      	mov	r3, r1
 80159e6:	81bb      	strh	r3, [r7, #12]
 80159e8:	4613      	mov	r3, r2
 80159ea:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 80159ec:	89bb      	ldrh	r3, [r7, #12]
 80159ee:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 80159f0:	687b      	ldr	r3, [r7, #4]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d105      	bne.n	8015a02 <tcp_pbuf_prealloc+0x2a>
 80159f6:	4b30      	ldr	r3, [pc, #192]	@ (8015ab8 <tcp_pbuf_prealloc+0xe0>)
 80159f8:	22e8      	movs	r2, #232	@ 0xe8
 80159fa:	4930      	ldr	r1, [pc, #192]	@ (8015abc <tcp_pbuf_prealloc+0xe4>)
 80159fc:	4830      	ldr	r0, [pc, #192]	@ (8015ac0 <tcp_pbuf_prealloc+0xe8>)
 80159fe:	f008 f9c5 	bl	801dd8c <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015a02:	6a3b      	ldr	r3, [r7, #32]
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d105      	bne.n	8015a14 <tcp_pbuf_prealloc+0x3c>
 8015a08:	4b2b      	ldr	r3, [pc, #172]	@ (8015ab8 <tcp_pbuf_prealloc+0xe0>)
 8015a0a:	22e9      	movs	r2, #233	@ 0xe9
 8015a0c:	492d      	ldr	r1, [pc, #180]	@ (8015ac4 <tcp_pbuf_prealloc+0xec>)
 8015a0e:	482c      	ldr	r0, [pc, #176]	@ (8015ac0 <tcp_pbuf_prealloc+0xe8>)
 8015a10:	f008 f9bc 	bl	801dd8c <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015a14:	89ba      	ldrh	r2, [r7, #12]
 8015a16:	897b      	ldrh	r3, [r7, #10]
 8015a18:	429a      	cmp	r2, r3
 8015a1a:	d221      	bcs.n	8015a60 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015a1c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8015a20:	f003 0302 	and.w	r3, r3, #2
 8015a24:	2b00      	cmp	r3, #0
 8015a26:	d111      	bne.n	8015a4c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015a28:	6a3b      	ldr	r3, [r7, #32]
 8015a2a:	8b5b      	ldrh	r3, [r3, #26]
 8015a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d115      	bne.n	8015a60 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015a34:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d007      	beq.n	8015a4c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015a3c:	6a3b      	ldr	r3, [r7, #32]
 8015a3e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
         (!first_seg ||
 8015a40:	2b00      	cmp	r3, #0
 8015a42:	d103      	bne.n	8015a4c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015a44:	6a3b      	ldr	r3, [r7, #32]
 8015a46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
          pcb->unsent != NULL ||
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d009      	beq.n	8015a60 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015a4c:	89bb      	ldrh	r3, [r7, #12]
 8015a4e:	f203 231b 	addw	r3, r3, #539	@ 0x21b
 8015a52:	f023 0203 	bic.w	r2, r3, #3
 8015a56:	897b      	ldrh	r3, [r7, #10]
 8015a58:	4293      	cmp	r3, r2
 8015a5a:	bf28      	it	cs
 8015a5c:	4613      	movcs	r3, r2
 8015a5e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015a60:	8af9      	ldrh	r1, [r7, #22]
 8015a62:	7bfb      	ldrb	r3, [r7, #15]
 8015a64:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015a68:	4618      	mov	r0, r3
 8015a6a:	f7fa feb7 	bl	80107dc <pbuf_alloc>
 8015a6e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015a70:	693b      	ldr	r3, [r7, #16]
 8015a72:	2b00      	cmp	r3, #0
 8015a74:	d101      	bne.n	8015a7a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015a76:	2300      	movs	r3, #0
 8015a78:	e019      	b.n	8015aae <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015a7a:	693b      	ldr	r3, [r7, #16]
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d006      	beq.n	8015a90 <tcp_pbuf_prealloc+0xb8>
 8015a82:	4b0d      	ldr	r3, [pc, #52]	@ (8015ab8 <tcp_pbuf_prealloc+0xe0>)
 8015a84:	f240 120b 	movw	r2, #267	@ 0x10b
 8015a88:	490f      	ldr	r1, [pc, #60]	@ (8015ac8 <tcp_pbuf_prealloc+0xf0>)
 8015a8a:	480d      	ldr	r0, [pc, #52]	@ (8015ac0 <tcp_pbuf_prealloc+0xe8>)
 8015a8c:	f008 f97e 	bl	801dd8c <iprintf>
  *oversize = p->len - length;
 8015a90:	693b      	ldr	r3, [r7, #16]
 8015a92:	895a      	ldrh	r2, [r3, #10]
 8015a94:	89bb      	ldrh	r3, [r7, #12]
 8015a96:	1ad3      	subs	r3, r2, r3
 8015a98:	b29a      	uxth	r2, r3
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015a9e:	693b      	ldr	r3, [r7, #16]
 8015aa0:	89ba      	ldrh	r2, [r7, #12]
 8015aa2:	811a      	strh	r2, [r3, #8]
 8015aa4:	693b      	ldr	r3, [r7, #16]
 8015aa6:	891a      	ldrh	r2, [r3, #8]
 8015aa8:	693b      	ldr	r3, [r7, #16]
 8015aaa:	815a      	strh	r2, [r3, #10]
  return p;
 8015aac:	693b      	ldr	r3, [r7, #16]
}
 8015aae:	4618      	mov	r0, r3
 8015ab0:	3718      	adds	r7, #24
 8015ab2:	46bd      	mov	sp, r7
 8015ab4:	bd80      	pop	{r7, pc}
 8015ab6:	bf00      	nop
 8015ab8:	08023db0 	.word	0x08023db0
 8015abc:	08023e68 	.word	0x08023e68
 8015ac0:	08023e04 	.word	0x08023e04
 8015ac4:	08023e8c 	.word	0x08023e8c
 8015ac8:	08023eac 	.word	0x08023eac

08015acc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015acc:	b580      	push	{r7, lr}
 8015ace:	b082      	sub	sp, #8
 8015ad0:	af00      	add	r7, sp, #0
 8015ad2:	6078      	str	r0, [r7, #4]
 8015ad4:	460b      	mov	r3, r1
 8015ad6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	2b00      	cmp	r3, #0
 8015adc:	d106      	bne.n	8015aec <tcp_write_checks+0x20>
 8015ade:	4b33      	ldr	r3, [pc, #204]	@ (8015bac <tcp_write_checks+0xe0>)
 8015ae0:	f240 1233 	movw	r2, #307	@ 0x133
 8015ae4:	4932      	ldr	r1, [pc, #200]	@ (8015bb0 <tcp_write_checks+0xe4>)
 8015ae6:	4833      	ldr	r0, [pc, #204]	@ (8015bb4 <tcp_write_checks+0xe8>)
 8015ae8:	f008 f950 	bl	801dd8c <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015aec:	687b      	ldr	r3, [r7, #4]
 8015aee:	7d1b      	ldrb	r3, [r3, #20]
 8015af0:	2b04      	cmp	r3, #4
 8015af2:	d00e      	beq.n	8015b12 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015af8:	2b07      	cmp	r3, #7
 8015afa:	d00a      	beq.n	8015b12 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015b00:	2b02      	cmp	r3, #2
 8015b02:	d006      	beq.n	8015b12 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015b08:	2b03      	cmp	r3, #3
 8015b0a:	d002      	beq.n	8015b12 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015b0c:	f06f 030a 	mvn.w	r3, #10
 8015b10:	e048      	b.n	8015ba4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015b12:	887b      	ldrh	r3, [r7, #2]
 8015b14:	2b00      	cmp	r3, #0
 8015b16:	d101      	bne.n	8015b1c <tcp_write_checks+0x50>
    return ERR_OK;
 8015b18:	2300      	movs	r3, #0
 8015b1a:	e043      	b.n	8015ba4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8015b22:	887a      	ldrh	r2, [r7, #2]
 8015b24:	429a      	cmp	r2, r3
 8015b26:	d909      	bls.n	8015b3c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	8b5b      	ldrh	r3, [r3, #26]
 8015b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015b30:	b29a      	uxth	r2, r3
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015b36:	f04f 33ff 	mov.w	r3, #4294967295
 8015b3a:	e033      	b.n	8015ba4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015b42:	2b08      	cmp	r3, #8
 8015b44:	d909      	bls.n	8015b5a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	8b5b      	ldrh	r3, [r3, #26]
 8015b4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8015b4e:	b29a      	uxth	r2, r3
 8015b50:	687b      	ldr	r3, [r7, #4]
 8015b52:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015b54:	f04f 33ff 	mov.w	r3, #4294967295
 8015b58:	e024      	b.n	8015ba4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d00f      	beq.n	8015b84 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d11a      	bne.n	8015ba2 <tcp_write_checks+0xd6>
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d116      	bne.n	8015ba2 <tcp_write_checks+0xd6>
 8015b74:	4b0d      	ldr	r3, [pc, #52]	@ (8015bac <tcp_write_checks+0xe0>)
 8015b76:	f240 1255 	movw	r2, #341	@ 0x155
 8015b7a:	490f      	ldr	r1, [pc, #60]	@ (8015bb8 <tcp_write_checks+0xec>)
 8015b7c:	480d      	ldr	r0, [pc, #52]	@ (8015bb4 <tcp_write_checks+0xe8>)
 8015b7e:	f008 f905 	bl	801dd8c <iprintf>
 8015b82:	e00e      	b.n	8015ba2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015b88:	2b00      	cmp	r3, #0
 8015b8a:	d103      	bne.n	8015b94 <tcp_write_checks+0xc8>
 8015b8c:	687b      	ldr	r3, [r7, #4]
 8015b8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d006      	beq.n	8015ba2 <tcp_write_checks+0xd6>
 8015b94:	4b05      	ldr	r3, [pc, #20]	@ (8015bac <tcp_write_checks+0xe0>)
 8015b96:	f44f 72ac 	mov.w	r2, #344	@ 0x158
 8015b9a:	4908      	ldr	r1, [pc, #32]	@ (8015bbc <tcp_write_checks+0xf0>)
 8015b9c:	4805      	ldr	r0, [pc, #20]	@ (8015bb4 <tcp_write_checks+0xe8>)
 8015b9e:	f008 f8f5 	bl	801dd8c <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8015ba2:	2300      	movs	r3, #0
}
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	3708      	adds	r7, #8
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd80      	pop	{r7, pc}
 8015bac:	08023db0 	.word	0x08023db0
 8015bb0:	08023ec0 	.word	0x08023ec0
 8015bb4:	08023e04 	.word	0x08023e04
 8015bb8:	08023ee0 	.word	0x08023ee0
 8015bbc:	08023f1c 	.word	0x08023f1c

08015bc0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015bc0:	b590      	push	{r4, r7, lr}
 8015bc2:	b09b      	sub	sp, #108	@ 0x6c
 8015bc4:	af04      	add	r7, sp, #16
 8015bc6:	60f8      	str	r0, [r7, #12]
 8015bc8:	60b9      	str	r1, [r7, #8]
 8015bca:	4611      	mov	r1, r2
 8015bcc:	461a      	mov	r2, r3
 8015bce:	460b      	mov	r3, r1
 8015bd0:	80fb      	strh	r3, [r7, #6]
 8015bd2:	4613      	mov	r3, r2
 8015bd4:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	657b      	str	r3, [r7, #84]	@ 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015bda:	2300      	movs	r3, #0
 8015bdc:	653b      	str	r3, [r7, #80]	@ 0x50
 8015bde:	2300      	movs	r3, #0
 8015be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015be2:	2300      	movs	r3, #0
 8015be4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015be6:	2300      	movs	r3, #0
 8015be8:	647b      	str	r3, [r7, #68]	@ 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015bea:	2300      	movs	r3, #0
 8015bec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015bfe:	2300      	movs	r3, #0
 8015c00:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8015c02:	68fb      	ldr	r3, [r7, #12]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d109      	bne.n	8015c1c <tcp_write+0x5c>
 8015c08:	4ba4      	ldr	r3, [pc, #656]	@ (8015e9c <tcp_write+0x2dc>)
 8015c0a:	f44f 72cf 	mov.w	r2, #414	@ 0x19e
 8015c0e:	49a4      	ldr	r1, [pc, #656]	@ (8015ea0 <tcp_write+0x2e0>)
 8015c10:	48a4      	ldr	r0, [pc, #656]	@ (8015ea4 <tcp_write+0x2e4>)
 8015c12:	f008 f8bb 	bl	801dd8c <iprintf>
 8015c16:	f06f 030f 	mvn.w	r3, #15
 8015c1a:	e32a      	b.n	8016272 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	@ 0x62
 8015c22:	085b      	lsrs	r3, r3, #1
 8015c24:	b29a      	uxth	r2, r3
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c2a:	4293      	cmp	r3, r2
 8015c2c:	bf28      	it	cs
 8015c2e:	4613      	movcs	r3, r2
 8015c30:	84bb      	strh	r3, [r7, #36]	@ 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8015c32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d102      	bne.n	8015c3e <tcp_write+0x7e>
 8015c38:	68fb      	ldr	r3, [r7, #12]
 8015c3a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c3c:	e000      	b.n	8015c40 <tcp_write+0x80>
 8015c3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8015c40:	84bb      	strh	r3, [r7, #36]	@ 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8015c42:	68bb      	ldr	r3, [r7, #8]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d109      	bne.n	8015c5c <tcp_write+0x9c>
 8015c48:	4b94      	ldr	r3, [pc, #592]	@ (8015e9c <tcp_write+0x2dc>)
 8015c4a:	f240 12ad 	movw	r2, #429	@ 0x1ad
 8015c4e:	4996      	ldr	r1, [pc, #600]	@ (8015ea8 <tcp_write+0x2e8>)
 8015c50:	4894      	ldr	r0, [pc, #592]	@ (8015ea4 <tcp_write+0x2e4>)
 8015c52:	f008 f89b 	bl	801dd8c <iprintf>
 8015c56:	f06f 030f 	mvn.w	r3, #15
 8015c5a:	e30a      	b.n	8016272 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015c5c:	88fb      	ldrh	r3, [r7, #6]
 8015c5e:	4619      	mov	r1, r3
 8015c60:	68f8      	ldr	r0, [r7, #12]
 8015c62:	f7ff ff33 	bl	8015acc <tcp_write_checks>
 8015c66:	4603      	mov	r3, r0
 8015c68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (err != ERR_OK) {
 8015c6c:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d002      	beq.n	8015c7a <tcp_write+0xba>
    return err;
 8015c74:	f997 3023 	ldrsb.w	r3, [r7, #35]	@ 0x23
 8015c78:	e2fb      	b.n	8016272 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015c80:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015c84:	2300      	movs	r3, #0
 8015c86:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8015c8a:	68fb      	ldr	r3, [r7, #12]
 8015c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	f000 80f6 	beq.w	8015e80 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015c94:	68fb      	ldr	r3, [r7, #12]
 8015c96:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015c98:	653b      	str	r3, [r7, #80]	@ 0x50
 8015c9a:	e002      	b.n	8015ca2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8015c9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015c9e:	681b      	ldr	r3, [r3, #0]
 8015ca0:	653b      	str	r3, [r7, #80]	@ 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015ca2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d1f8      	bne.n	8015c9c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8015caa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015cac:	7a9b      	ldrb	r3, [r3, #10]
 8015cae:	009b      	lsls	r3, r3, #2
 8015cb0:	b29b      	uxth	r3, r3
 8015cb2:	f003 0304 	and.w	r3, r3, #4
 8015cb6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8015cb8:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015cba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015cbc:	891b      	ldrh	r3, [r3, #8]
 8015cbe:	4619      	mov	r1, r3
 8015cc0:	8c3b      	ldrh	r3, [r7, #32]
 8015cc2:	440b      	add	r3, r1
 8015cc4:	429a      	cmp	r2, r3
 8015cc6:	da06      	bge.n	8015cd6 <tcp_write+0x116>
 8015cc8:	4b74      	ldr	r3, [pc, #464]	@ (8015e9c <tcp_write+0x2dc>)
 8015cca:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8015cce:	4977      	ldr	r1, [pc, #476]	@ (8015eac <tcp_write+0x2ec>)
 8015cd0:	4874      	ldr	r0, [pc, #464]	@ (8015ea4 <tcp_write+0x2e4>)
 8015cd2:	f008 f85b 	bl	801dd8c <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8015cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015cd8:	891a      	ldrh	r2, [r3, #8]
 8015cda:	8c3b      	ldrh	r3, [r7, #32]
 8015cdc:	4413      	add	r3, r2
 8015cde:	b29b      	uxth	r3, r3
 8015ce0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015ce2:	1ad3      	subs	r3, r2, r3
 8015ce4:	877b      	strh	r3, [r7, #58]	@ 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8015ce6:	68fb      	ldr	r3, [r7, #12]
 8015ce8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8015cec:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8015cee:	8a7b      	ldrh	r3, [r7, #18]
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d026      	beq.n	8015d42 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8015cf4:	8a7b      	ldrh	r3, [r7, #18]
 8015cf6:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015cf8:	429a      	cmp	r2, r3
 8015cfa:	d206      	bcs.n	8015d0a <tcp_write+0x14a>
 8015cfc:	4b67      	ldr	r3, [pc, #412]	@ (8015e9c <tcp_write+0x2dc>)
 8015cfe:	f44f 72fc 	mov.w	r2, #504	@ 0x1f8
 8015d02:	496b      	ldr	r1, [pc, #428]	@ (8015eb0 <tcp_write+0x2f0>)
 8015d04:	4867      	ldr	r0, [pc, #412]	@ (8015ea4 <tcp_write+0x2e4>)
 8015d06:	f008 f841 	bl	801dd8c <iprintf>
      seg = last_unsent;
 8015d0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8015d0e:	8a7b      	ldrh	r3, [r7, #18]
 8015d10:	88fa      	ldrh	r2, [r7, #6]
 8015d12:	4293      	cmp	r3, r2
 8015d14:	bf28      	it	cs
 8015d16:	4613      	movcs	r3, r2
 8015d18:	b29b      	uxth	r3, r3
 8015d1a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015d1c:	4293      	cmp	r3, r2
 8015d1e:	bf28      	it	cs
 8015d20:	4613      	movcs	r3, r2
 8015d22:	87fb      	strh	r3, [r7, #62]	@ 0x3e
      pos += oversize_used;
 8015d24:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015d28:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015d2a:	4413      	add	r3, r2
 8015d2c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      oversize -= oversize_used;
 8015d30:	8a7a      	ldrh	r2, [r7, #18]
 8015d32:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015d34:	1ad3      	subs	r3, r2, r3
 8015d36:	b29b      	uxth	r3, r3
 8015d38:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8015d3a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015d3c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8015d3e:	1ad3      	subs	r3, r2, r3
 8015d40:	877b      	strh	r3, [r7, #58]	@ 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8015d42:	8a7b      	ldrh	r3, [r7, #18]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d00b      	beq.n	8015d60 <tcp_write+0x1a0>
 8015d48:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015d4c:	88fb      	ldrh	r3, [r7, #6]
 8015d4e:	429a      	cmp	r2, r3
 8015d50:	d006      	beq.n	8015d60 <tcp_write+0x1a0>
 8015d52:	4b52      	ldr	r3, [pc, #328]	@ (8015e9c <tcp_write+0x2dc>)
 8015d54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015d58:	4956      	ldr	r1, [pc, #344]	@ (8015eb4 <tcp_write+0x2f4>)
 8015d5a:	4852      	ldr	r0, [pc, #328]	@ (8015ea4 <tcp_write+0x2e4>)
 8015d5c:	f008 f816 	bl	801dd8c <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8015d60:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015d64:	88fb      	ldrh	r3, [r7, #6]
 8015d66:	429a      	cmp	r2, r3
 8015d68:	f080 8167 	bcs.w	801603a <tcp_write+0x47a>
 8015d6c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	f000 8163 	beq.w	801603a <tcp_write+0x47a>
 8015d74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015d76:	891b      	ldrh	r3, [r3, #8]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	f000 815e 	beq.w	801603a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8015d7e:	88fa      	ldrh	r2, [r7, #6]
 8015d80:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015d84:	1ad2      	subs	r2, r2, r3
 8015d86:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8015d88:	4293      	cmp	r3, r2
 8015d8a:	bfa8      	it	ge
 8015d8c:	4613      	movge	r3, r2
 8015d8e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8015d90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015d92:	64fb      	str	r3, [r7, #76]	@ 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015d94:	797b      	ldrb	r3, [r7, #5]
 8015d96:	f003 0301 	and.w	r3, r3, #1
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d027      	beq.n	8015dee <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8015d9e:	f107 0012 	add.w	r0, r7, #18
 8015da2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8015da4:	8bf9      	ldrh	r1, [r7, #30]
 8015da6:	2301      	movs	r3, #1
 8015da8:	9302      	str	r3, [sp, #8]
 8015daa:	797b      	ldrb	r3, [r7, #5]
 8015dac:	9301      	str	r3, [sp, #4]
 8015dae:	68fb      	ldr	r3, [r7, #12]
 8015db0:	9300      	str	r3, [sp, #0]
 8015db2:	4603      	mov	r3, r0
 8015db4:	2000      	movs	r0, #0
 8015db6:	f7ff fe0f 	bl	80159d8 <tcp_pbuf_prealloc>
 8015dba:	6578      	str	r0, [r7, #84]	@ 0x54
 8015dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	f000 8225 	beq.w	801620e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8015dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015dc6:	6858      	ldr	r0, [r3, #4]
 8015dc8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015dcc:	68ba      	ldr	r2, [r7, #8]
 8015dce:	4413      	add	r3, r2
 8015dd0:	8bfa      	ldrh	r2, [r7, #30]
 8015dd2:	4619      	mov	r1, r3
 8015dd4:	f008 f961 	bl	801e09a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8015dd8:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8015dda:	f7fb f8a3 	bl	8010f24 <pbuf_clen>
 8015dde:	4603      	mov	r3, r0
 8015de0:	461a      	mov	r2, r3
 8015de2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015de6:	4413      	add	r3, r2
 8015de8:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8015dec:	e041      	b.n	8015e72 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8015dee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015df0:	685b      	ldr	r3, [r3, #4]
 8015df2:	637b      	str	r3, [r7, #52]	@ 0x34
 8015df4:	e002      	b.n	8015dfc <tcp_write+0x23c>
 8015df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015df8:	681b      	ldr	r3, [r3, #0]
 8015dfa:	637b      	str	r3, [r7, #52]	@ 0x34
 8015dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d1f8      	bne.n	8015df6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015e04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e06:	7b1b      	ldrb	r3, [r3, #12]
 8015e08:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8015e0c:	2b00      	cmp	r3, #0
 8015e0e:	d115      	bne.n	8015e3c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8015e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015e12:	685b      	ldr	r3, [r3, #4]
 8015e14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8015e16:	8952      	ldrh	r2, [r2, #10]
 8015e18:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015e1a:	68ba      	ldr	r2, [r7, #8]
 8015e1c:	429a      	cmp	r2, r3
 8015e1e:	d10d      	bne.n	8015e3c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8015e20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015e24:	2b00      	cmp	r3, #0
 8015e26:	d006      	beq.n	8015e36 <tcp_write+0x276>
 8015e28:	4b1c      	ldr	r3, [pc, #112]	@ (8015e9c <tcp_write+0x2dc>)
 8015e2a:	f240 2231 	movw	r2, #561	@ 0x231
 8015e2e:	4922      	ldr	r1, [pc, #136]	@ (8015eb8 <tcp_write+0x2f8>)
 8015e30:	481c      	ldr	r0, [pc, #112]	@ (8015ea4 <tcp_write+0x2e4>)
 8015e32:	f007 ffab 	bl	801dd8c <iprintf>
          extendlen = seglen;
 8015e36:	8bfb      	ldrh	r3, [r7, #30]
 8015e38:	87bb      	strh	r3, [r7, #60]	@ 0x3c
 8015e3a:	e01a      	b.n	8015e72 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8015e3c:	8bfb      	ldrh	r3, [r7, #30]
 8015e3e:	2201      	movs	r2, #1
 8015e40:	4619      	mov	r1, r3
 8015e42:	2000      	movs	r0, #0
 8015e44:	f7fa fcca 	bl	80107dc <pbuf_alloc>
 8015e48:	6578      	str	r0, [r7, #84]	@ 0x54
 8015e4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015e4c:	2b00      	cmp	r3, #0
 8015e4e:	f000 81e0 	beq.w	8016212 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8015e52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015e56:	68ba      	ldr	r2, [r7, #8]
 8015e58:	441a      	add	r2, r3
 8015e5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015e5c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8015e5e:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8015e60:	f7fb f860 	bl	8010f24 <pbuf_clen>
 8015e64:	4603      	mov	r3, r0
 8015e66:	461a      	mov	r2, r3
 8015e68:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015e6c:	4413      	add	r3, r2
 8015e6e:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8015e72:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8015e76:	8bfb      	ldrh	r3, [r7, #30]
 8015e78:	4413      	add	r3, r2
 8015e7a:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
 8015e7e:	e0dc      	b.n	801603a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8015e80:	68fb      	ldr	r3, [r7, #12]
 8015e82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	f000 80d7 	beq.w	801603a <tcp_write+0x47a>
 8015e8c:	4b03      	ldr	r3, [pc, #12]	@ (8015e9c <tcp_write+0x2dc>)
 8015e8e:	f240 224a 	movw	r2, #586	@ 0x24a
 8015e92:	490a      	ldr	r1, [pc, #40]	@ (8015ebc <tcp_write+0x2fc>)
 8015e94:	4803      	ldr	r0, [pc, #12]	@ (8015ea4 <tcp_write+0x2e4>)
 8015e96:	f007 ff79 	bl	801dd8c <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8015e9a:	e0ce      	b.n	801603a <tcp_write+0x47a>
 8015e9c:	08023db0 	.word	0x08023db0
 8015ea0:	08023f50 	.word	0x08023f50
 8015ea4:	08023e04 	.word	0x08023e04
 8015ea8:	08023f68 	.word	0x08023f68
 8015eac:	08023f9c 	.word	0x08023f9c
 8015eb0:	08023fb4 	.word	0x08023fb4
 8015eb4:	08023fd4 	.word	0x08023fd4
 8015eb8:	08023ff4 	.word	0x08023ff4
 8015ebc:	08024020 	.word	0x08024020
    struct pbuf *p;
    u16_t left = len - pos;
 8015ec0:	88fa      	ldrh	r2, [r7, #6]
 8015ec2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015ec6:	1ad3      	subs	r3, r2, r3
 8015ec8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8015eca:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8015ece:	b29b      	uxth	r3, r3
 8015ed0:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015ed2:	1ad3      	subs	r3, r2, r3
 8015ed4:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8015ed6:	8b7a      	ldrh	r2, [r7, #26]
 8015ed8:	8bbb      	ldrh	r3, [r7, #28]
 8015eda:	4293      	cmp	r3, r2
 8015edc:	bf28      	it	cs
 8015ede:	4613      	movcs	r3, r2
 8015ee0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8015ee2:	797b      	ldrb	r3, [r7, #5]
 8015ee4:	f003 0301 	and.w	r3, r3, #1
 8015ee8:	2b00      	cmp	r3, #0
 8015eea:	d036      	beq.n	8015f5a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8015eec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8015ef0:	b29a      	uxth	r2, r3
 8015ef2:	8b3b      	ldrh	r3, [r7, #24]
 8015ef4:	4413      	add	r3, r2
 8015ef6:	b299      	uxth	r1, r3
 8015ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	bf0c      	ite	eq
 8015efe:	2301      	moveq	r3, #1
 8015f00:	2300      	movne	r3, #0
 8015f02:	b2db      	uxtb	r3, r3
 8015f04:	f107 0012 	add.w	r0, r7, #18
 8015f08:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8015f0a:	9302      	str	r3, [sp, #8]
 8015f0c:	797b      	ldrb	r3, [r7, #5]
 8015f0e:	9301      	str	r3, [sp, #4]
 8015f10:	68fb      	ldr	r3, [r7, #12]
 8015f12:	9300      	str	r3, [sp, #0]
 8015f14:	4603      	mov	r3, r0
 8015f16:	2036      	movs	r0, #54	@ 0x36
 8015f18:	f7ff fd5e 	bl	80159d8 <tcp_pbuf_prealloc>
 8015f1c:	6338      	str	r0, [r7, #48]	@ 0x30
 8015f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	f000 8178 	beq.w	8016216 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8015f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f28:	895b      	ldrh	r3, [r3, #10]
 8015f2a:	8b3a      	ldrh	r2, [r7, #24]
 8015f2c:	429a      	cmp	r2, r3
 8015f2e:	d906      	bls.n	8015f3e <tcp_write+0x37e>
 8015f30:	4b8c      	ldr	r3, [pc, #560]	@ (8016164 <tcp_write+0x5a4>)
 8015f32:	f240 2266 	movw	r2, #614	@ 0x266
 8015f36:	498c      	ldr	r1, [pc, #560]	@ (8016168 <tcp_write+0x5a8>)
 8015f38:	488c      	ldr	r0, [pc, #560]	@ (801616c <tcp_write+0x5ac>)
 8015f3a:	f007 ff27 	bl	801dd8c <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8015f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015f40:	685a      	ldr	r2, [r3, #4]
 8015f42:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8015f46:	18d0      	adds	r0, r2, r3
 8015f48:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015f4c:	68ba      	ldr	r2, [r7, #8]
 8015f4e:	4413      	add	r3, r2
 8015f50:	8b3a      	ldrh	r2, [r7, #24]
 8015f52:	4619      	mov	r1, r3
 8015f54:	f008 f8a1 	bl	801e09a <memcpy>
 8015f58:	e02f      	b.n	8015fba <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8015f5a:	8a7b      	ldrh	r3, [r7, #18]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d006      	beq.n	8015f6e <tcp_write+0x3ae>
 8015f60:	4b80      	ldr	r3, [pc, #512]	@ (8016164 <tcp_write+0x5a4>)
 8015f62:	f240 2271 	movw	r2, #625	@ 0x271
 8015f66:	4982      	ldr	r1, [pc, #520]	@ (8016170 <tcp_write+0x5b0>)
 8015f68:	4880      	ldr	r0, [pc, #512]	@ (801616c <tcp_write+0x5ac>)
 8015f6a:	f007 ff0f 	bl	801dd8c <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8015f6e:	8b3b      	ldrh	r3, [r7, #24]
 8015f70:	2201      	movs	r2, #1
 8015f72:	4619      	mov	r1, r3
 8015f74:	2036      	movs	r0, #54	@ 0x36
 8015f76:	f7fa fc31 	bl	80107dc <pbuf_alloc>
 8015f7a:	6178      	str	r0, [r7, #20]
 8015f7c:	697b      	ldr	r3, [r7, #20]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	f000 814b 	beq.w	801621a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8015f84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015f88:	68ba      	ldr	r2, [r7, #8]
 8015f8a:	441a      	add	r2, r3
 8015f8c:	697b      	ldr	r3, [r7, #20]
 8015f8e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015f90:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8015f94:	b29b      	uxth	r3, r3
 8015f96:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8015f9a:	4619      	mov	r1, r3
 8015f9c:	2036      	movs	r0, #54	@ 0x36
 8015f9e:	f7fa fc1d 	bl	80107dc <pbuf_alloc>
 8015fa2:	6338      	str	r0, [r7, #48]	@ 0x30
 8015fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d103      	bne.n	8015fb2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8015faa:	6978      	ldr	r0, [r7, #20]
 8015fac:	f7fa ff2c 	bl	8010e08 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8015fb0:	e136      	b.n	8016220 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8015fb2:	6979      	ldr	r1, [r7, #20]
 8015fb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015fb6:	f7fa fff5 	bl	8010fa4 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8015fba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015fbc:	f7fa ffb2 	bl	8010f24 <pbuf_clen>
 8015fc0:	4603      	mov	r3, r0
 8015fc2:	461a      	mov	r2, r3
 8015fc4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015fc8:	4413      	add	r3, r2
 8015fca:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8015fce:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8015fd2:	2b09      	cmp	r3, #9
 8015fd4:	d903      	bls.n	8015fde <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8015fd6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8015fd8:	f7fa ff16 	bl	8010e08 <pbuf_free>
      goto memerr;
 8015fdc:	e120      	b.n	8016220 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8015fe2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8015fe6:	441a      	add	r2, r3
 8015fe8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015fec:	9300      	str	r3, [sp, #0]
 8015fee:	4613      	mov	r3, r2
 8015ff0:	2200      	movs	r2, #0
 8015ff2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015ff4:	68f8      	ldr	r0, [r7, #12]
 8015ff6:	f7ff fc53 	bl	80158a0 <tcp_create_segment>
 8015ffa:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8015ffc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015ffe:	2b00      	cmp	r3, #0
 8016000:	f000 810d 	beq.w	801621e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016006:	2b00      	cmp	r3, #0
 8016008:	d102      	bne.n	8016010 <tcp_write+0x450>
      queue = seg;
 801600a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801600c:	647b      	str	r3, [r7, #68]	@ 0x44
 801600e:	e00c      	b.n	801602a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8016010:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016012:	2b00      	cmp	r3, #0
 8016014:	d106      	bne.n	8016024 <tcp_write+0x464>
 8016016:	4b53      	ldr	r3, [pc, #332]	@ (8016164 <tcp_write+0x5a4>)
 8016018:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801601c:	4955      	ldr	r1, [pc, #340]	@ (8016174 <tcp_write+0x5b4>)
 801601e:	4853      	ldr	r0, [pc, #332]	@ (801616c <tcp_write+0x5ac>)
 8016020:	f007 feb4 	bl	801dd8c <iprintf>
      prev_seg->next = seg;
 8016024:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016026:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8016028:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801602a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801602c:	64bb      	str	r3, [r7, #72]	@ 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801602e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016032:	8b3b      	ldrh	r3, [r7, #24]
 8016034:	4413      	add	r3, r2
 8016036:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
  while (pos < len) {
 801603a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801603e:	88fb      	ldrh	r3, [r7, #6]
 8016040:	429a      	cmp	r2, r3
 8016042:	f4ff af3d 	bcc.w	8015ec0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016046:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016048:	2b00      	cmp	r3, #0
 801604a:	d02c      	beq.n	80160a6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801604c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801604e:	685b      	ldr	r3, [r3, #4]
 8016050:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016052:	e01e      	b.n	8016092 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8016054:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016056:	891a      	ldrh	r2, [r3, #8]
 8016058:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801605a:	4413      	add	r3, r2
 801605c:	b29a      	uxth	r2, r3
 801605e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016060:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016062:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016064:	681b      	ldr	r3, [r3, #0]
 8016066:	2b00      	cmp	r3, #0
 8016068:	d110      	bne.n	801608c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801606a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801606c:	685b      	ldr	r3, [r3, #4]
 801606e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016070:	8952      	ldrh	r2, [r2, #10]
 8016072:	4413      	add	r3, r2
 8016074:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8016076:	68b9      	ldr	r1, [r7, #8]
 8016078:	4618      	mov	r0, r3
 801607a:	f008 f80e 	bl	801e09a <memcpy>
        p->len += oversize_used;
 801607e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016080:	895a      	ldrh	r2, [r3, #10]
 8016082:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8016084:	4413      	add	r3, r2
 8016086:	b29a      	uxth	r2, r3
 8016088:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801608a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801608c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801608e:	681b      	ldr	r3, [r3, #0]
 8016090:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016094:	2b00      	cmp	r3, #0
 8016096:	d1dd      	bne.n	8016054 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016098:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801609a:	891a      	ldrh	r2, [r3, #8]
 801609c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801609e:	4413      	add	r3, r2
 80160a0:	b29a      	uxth	r2, r3
 80160a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80160a4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80160a6:	8a7a      	ldrh	r2, [r7, #18]
 80160a8:	68fb      	ldr	r3, [r7, #12]
 80160aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80160ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80160b0:	2b00      	cmp	r3, #0
 80160b2:	d018      	beq.n	80160e6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80160b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d106      	bne.n	80160c8 <tcp_write+0x508>
 80160ba:	4b2a      	ldr	r3, [pc, #168]	@ (8016164 <tcp_write+0x5a4>)
 80160bc:	f44f 7238 	mov.w	r2, #736	@ 0x2e0
 80160c0:	492d      	ldr	r1, [pc, #180]	@ (8016178 <tcp_write+0x5b8>)
 80160c2:	482a      	ldr	r0, [pc, #168]	@ (801616c <tcp_write+0x5ac>)
 80160c4:	f007 fe62 	bl	801dd8c <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80160c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80160ca:	685b      	ldr	r3, [r3, #4]
 80160cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80160ce:	4618      	mov	r0, r3
 80160d0:	f7fa ff68 	bl	8010fa4 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80160d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80160d6:	891a      	ldrh	r2, [r3, #8]
 80160d8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80160da:	891b      	ldrh	r3, [r3, #8]
 80160dc:	4413      	add	r3, r2
 80160de:	b29a      	uxth	r2, r3
 80160e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80160e2:	811a      	strh	r2, [r3, #8]
 80160e4:	e037      	b.n	8016156 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80160e6:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	d034      	beq.n	8016156 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80160ec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	d003      	beq.n	80160fa <tcp_write+0x53a>
 80160f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80160f4:	685b      	ldr	r3, [r3, #4]
 80160f6:	2b00      	cmp	r3, #0
 80160f8:	d106      	bne.n	8016108 <tcp_write+0x548>
 80160fa:	4b1a      	ldr	r3, [pc, #104]	@ (8016164 <tcp_write+0x5a4>)
 80160fc:	f240 22e6 	movw	r2, #742	@ 0x2e6
 8016100:	491e      	ldr	r1, [pc, #120]	@ (801617c <tcp_write+0x5bc>)
 8016102:	481a      	ldr	r0, [pc, #104]	@ (801616c <tcp_write+0x5ac>)
 8016104:	f007 fe42 	bl	801dd8c <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016108:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801610a:	685b      	ldr	r3, [r3, #4]
 801610c:	62bb      	str	r3, [r7, #40]	@ 0x28
 801610e:	e009      	b.n	8016124 <tcp_write+0x564>
      p->tot_len += extendlen;
 8016110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016112:	891a      	ldrh	r2, [r3, #8]
 8016114:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016116:	4413      	add	r3, r2
 8016118:	b29a      	uxth	r2, r3
 801611a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801611c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801611e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016126:	681b      	ldr	r3, [r3, #0]
 8016128:	2b00      	cmp	r3, #0
 801612a:	d1f1      	bne.n	8016110 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801612c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801612e:	891a      	ldrh	r2, [r3, #8]
 8016130:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016132:	4413      	add	r3, r2
 8016134:	b29a      	uxth	r2, r3
 8016136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016138:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801613a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801613c:	895a      	ldrh	r2, [r3, #10]
 801613e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8016140:	4413      	add	r3, r2
 8016142:	b29a      	uxth	r2, r3
 8016144:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016146:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8016148:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801614a:	891a      	ldrh	r2, [r3, #8]
 801614c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801614e:	4413      	add	r3, r2
 8016150:	b29a      	uxth	r2, r3
 8016152:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016154:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8016156:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016158:	2b00      	cmp	r3, #0
 801615a:	d111      	bne.n	8016180 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016160:	66da      	str	r2, [r3, #108]	@ 0x6c
 8016162:	e010      	b.n	8016186 <tcp_write+0x5c6>
 8016164:	08023db0 	.word	0x08023db0
 8016168:	08024050 	.word	0x08024050
 801616c:	08023e04 	.word	0x08023e04
 8016170:	08024090 	.word	0x08024090
 8016174:	080240a0 	.word	0x080240a0
 8016178:	080240b4 	.word	0x080240b4
 801617c:	080240ec 	.word	0x080240ec
  } else {
    last_unsent->next = queue;
 8016180:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016182:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016184:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8016186:	68fb      	ldr	r3, [r7, #12]
 8016188:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801618a:	88fb      	ldrh	r3, [r7, #6]
 801618c:	441a      	add	r2, r3
 801618e:	68fb      	ldr	r3, [r7, #12]
 8016190:	65da      	str	r2, [r3, #92]	@ 0x5c
  pcb->snd_buf -= len;
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8016198:	88fb      	ldrh	r3, [r7, #6]
 801619a:	1ad3      	subs	r3, r2, r3
 801619c:	b29a      	uxth	r2, r3
 801619e:	68fb      	ldr	r3, [r7, #12]
 80161a0:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
  pcb->snd_queuelen = queuelen;
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 80161aa:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d00e      	beq.n	80161d6 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80161bc:	2b00      	cmp	r3, #0
 80161be:	d10a      	bne.n	80161d6 <tcp_write+0x616>
 80161c0:	68fb      	ldr	r3, [r7, #12]
 80161c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80161c4:	2b00      	cmp	r3, #0
 80161c6:	d106      	bne.n	80161d6 <tcp_write+0x616>
 80161c8:	4b2c      	ldr	r3, [pc, #176]	@ (801627c <tcp_write+0x6bc>)
 80161ca:	f240 3212 	movw	r2, #786	@ 0x312
 80161ce:	492c      	ldr	r1, [pc, #176]	@ (8016280 <tcp_write+0x6c0>)
 80161d0:	482c      	ldr	r0, [pc, #176]	@ (8016284 <tcp_write+0x6c4>)
 80161d2:	f007 fddb 	bl	801dd8c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80161d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80161d8:	2b00      	cmp	r3, #0
 80161da:	d016      	beq.n	801620a <tcp_write+0x64a>
 80161dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80161de:	68db      	ldr	r3, [r3, #12]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d012      	beq.n	801620a <tcp_write+0x64a>
 80161e4:	797b      	ldrb	r3, [r7, #5]
 80161e6:	f003 0302 	and.w	r3, r3, #2
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d10d      	bne.n	801620a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80161ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80161f0:	68db      	ldr	r3, [r3, #12]
 80161f2:	899b      	ldrh	r3, [r3, #12]
 80161f4:	b29c      	uxth	r4, r3
 80161f6:	2008      	movs	r0, #8
 80161f8:	f7f8 fee8 	bl	800efcc <lwip_htons>
 80161fc:	4603      	mov	r3, r0
 80161fe:	461a      	mov	r2, r3
 8016200:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016202:	68db      	ldr	r3, [r3, #12]
 8016204:	4322      	orrs	r2, r4
 8016206:	b292      	uxth	r2, r2
 8016208:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801620a:	2300      	movs	r3, #0
 801620c:	e031      	b.n	8016272 <tcp_write+0x6b2>
          goto memerr;
 801620e:	bf00      	nop
 8016210:	e006      	b.n	8016220 <tcp_write+0x660>
            goto memerr;
 8016212:	bf00      	nop
 8016214:	e004      	b.n	8016220 <tcp_write+0x660>
        goto memerr;
 8016216:	bf00      	nop
 8016218:	e002      	b.n	8016220 <tcp_write+0x660>
        goto memerr;
 801621a:	bf00      	nop
 801621c:	e000      	b.n	8016220 <tcp_write+0x660>
      goto memerr;
 801621e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016220:	68fb      	ldr	r3, [r7, #12]
 8016222:	8b5b      	ldrh	r3, [r3, #26]
 8016224:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016228:	b29a      	uxth	r2, r3
 801622a:	68fb      	ldr	r3, [r7, #12]
 801622c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801622e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016230:	2b00      	cmp	r3, #0
 8016232:	d002      	beq.n	801623a <tcp_write+0x67a>
    pbuf_free(concat_p);
 8016234:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016236:	f7fa fde7 	bl	8010e08 <pbuf_free>
  }
  if (queue != NULL) {
 801623a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801623c:	2b00      	cmp	r3, #0
 801623e:	d002      	beq.n	8016246 <tcp_write+0x686>
    tcp_segs_free(queue);
 8016240:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8016242:	f7fc fb71 	bl	8012928 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801624c:	2b00      	cmp	r3, #0
 801624e:	d00e      	beq.n	801626e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016254:	2b00      	cmp	r3, #0
 8016256:	d10a      	bne.n	801626e <tcp_write+0x6ae>
 8016258:	68fb      	ldr	r3, [r7, #12]
 801625a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801625c:	2b00      	cmp	r3, #0
 801625e:	d106      	bne.n	801626e <tcp_write+0x6ae>
 8016260:	4b06      	ldr	r3, [pc, #24]	@ (801627c <tcp_write+0x6bc>)
 8016262:	f240 3227 	movw	r2, #807	@ 0x327
 8016266:	4906      	ldr	r1, [pc, #24]	@ (8016280 <tcp_write+0x6c0>)
 8016268:	4806      	ldr	r0, [pc, #24]	@ (8016284 <tcp_write+0x6c4>)
 801626a:	f007 fd8f 	bl	801dd8c <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801626e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016272:	4618      	mov	r0, r3
 8016274:	375c      	adds	r7, #92	@ 0x5c
 8016276:	46bd      	mov	sp, r7
 8016278:	bd90      	pop	{r4, r7, pc}
 801627a:	bf00      	nop
 801627c:	08023db0 	.word	0x08023db0
 8016280:	08024124 	.word	0x08024124
 8016284:	08023e04 	.word	0x08023e04

08016288 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016288:	b590      	push	{r4, r7, lr}
 801628a:	b08b      	sub	sp, #44	@ 0x2c
 801628c:	af02      	add	r7, sp, #8
 801628e:	6078      	str	r0, [r7, #4]
 8016290:	460b      	mov	r3, r1
 8016292:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016294:	2300      	movs	r3, #0
 8016296:	61fb      	str	r3, [r7, #28]
 8016298:	2300      	movs	r3, #0
 801629a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801629c:	2300      	movs	r3, #0
 801629e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	2b00      	cmp	r3, #0
 80162a4:	d106      	bne.n	80162b4 <tcp_split_unsent_seg+0x2c>
 80162a6:	4b95      	ldr	r3, [pc, #596]	@ (80164fc <tcp_split_unsent_seg+0x274>)
 80162a8:	f240 324b 	movw	r2, #843	@ 0x34b
 80162ac:	4994      	ldr	r1, [pc, #592]	@ (8016500 <tcp_split_unsent_seg+0x278>)
 80162ae:	4895      	ldr	r0, [pc, #596]	@ (8016504 <tcp_split_unsent_seg+0x27c>)
 80162b0:	f007 fd6c 	bl	801dd8c <iprintf>

  useg = pcb->unsent;
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80162b8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80162ba:	697b      	ldr	r3, [r7, #20]
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d102      	bne.n	80162c6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80162c0:	f04f 33ff 	mov.w	r3, #4294967295
 80162c4:	e116      	b.n	80164f4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80162c6:	887b      	ldrh	r3, [r7, #2]
 80162c8:	2b00      	cmp	r3, #0
 80162ca:	d109      	bne.n	80162e0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80162cc:	4b8b      	ldr	r3, [pc, #556]	@ (80164fc <tcp_split_unsent_seg+0x274>)
 80162ce:	f240 3253 	movw	r2, #851	@ 0x353
 80162d2:	498d      	ldr	r1, [pc, #564]	@ (8016508 <tcp_split_unsent_seg+0x280>)
 80162d4:	488b      	ldr	r0, [pc, #556]	@ (8016504 <tcp_split_unsent_seg+0x27c>)
 80162d6:	f007 fd59 	bl	801dd8c <iprintf>
    return ERR_VAL;
 80162da:	f06f 0305 	mvn.w	r3, #5
 80162de:	e109      	b.n	80164f4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80162e0:	697b      	ldr	r3, [r7, #20]
 80162e2:	891b      	ldrh	r3, [r3, #8]
 80162e4:	887a      	ldrh	r2, [r7, #2]
 80162e6:	429a      	cmp	r2, r3
 80162e8:	d301      	bcc.n	80162ee <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80162ea:	2300      	movs	r3, #0
 80162ec:	e102      	b.n	80164f4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80162ee:	687b      	ldr	r3, [r7, #4]
 80162f0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80162f2:	887a      	ldrh	r2, [r7, #2]
 80162f4:	429a      	cmp	r2, r3
 80162f6:	d906      	bls.n	8016306 <tcp_split_unsent_seg+0x7e>
 80162f8:	4b80      	ldr	r3, [pc, #512]	@ (80164fc <tcp_split_unsent_seg+0x274>)
 80162fa:	f240 325b 	movw	r2, #859	@ 0x35b
 80162fe:	4983      	ldr	r1, [pc, #524]	@ (801650c <tcp_split_unsent_seg+0x284>)
 8016300:	4880      	ldr	r0, [pc, #512]	@ (8016504 <tcp_split_unsent_seg+0x27c>)
 8016302:	f007 fd43 	bl	801dd8c <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016306:	697b      	ldr	r3, [r7, #20]
 8016308:	891b      	ldrh	r3, [r3, #8]
 801630a:	2b00      	cmp	r3, #0
 801630c:	d106      	bne.n	801631c <tcp_split_unsent_seg+0x94>
 801630e:	4b7b      	ldr	r3, [pc, #492]	@ (80164fc <tcp_split_unsent_seg+0x274>)
 8016310:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8016314:	497e      	ldr	r1, [pc, #504]	@ (8016510 <tcp_split_unsent_seg+0x288>)
 8016316:	487b      	ldr	r0, [pc, #492]	@ (8016504 <tcp_split_unsent_seg+0x27c>)
 8016318:	f007 fd38 	bl	801dd8c <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801631c:	697b      	ldr	r3, [r7, #20]
 801631e:	7a9b      	ldrb	r3, [r3, #10]
 8016320:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016322:	7bfb      	ldrb	r3, [r7, #15]
 8016324:	009b      	lsls	r3, r3, #2
 8016326:	b2db      	uxtb	r3, r3
 8016328:	f003 0304 	and.w	r3, r3, #4
 801632c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801632e:	697b      	ldr	r3, [r7, #20]
 8016330:	891a      	ldrh	r2, [r3, #8]
 8016332:	887b      	ldrh	r3, [r7, #2]
 8016334:	1ad3      	subs	r3, r2, r3
 8016336:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016338:	7bbb      	ldrb	r3, [r7, #14]
 801633a:	b29a      	uxth	r2, r3
 801633c:	89bb      	ldrh	r3, [r7, #12]
 801633e:	4413      	add	r3, r2
 8016340:	b29b      	uxth	r3, r3
 8016342:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016346:	4619      	mov	r1, r3
 8016348:	2036      	movs	r0, #54	@ 0x36
 801634a:	f7fa fa47 	bl	80107dc <pbuf_alloc>
 801634e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016350:	693b      	ldr	r3, [r7, #16]
 8016352:	2b00      	cmp	r3, #0
 8016354:	f000 80b7 	beq.w	80164c6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016358:	697b      	ldr	r3, [r7, #20]
 801635a:	685b      	ldr	r3, [r3, #4]
 801635c:	891a      	ldrh	r2, [r3, #8]
 801635e:	697b      	ldr	r3, [r7, #20]
 8016360:	891b      	ldrh	r3, [r3, #8]
 8016362:	1ad3      	subs	r3, r2, r3
 8016364:	b29a      	uxth	r2, r3
 8016366:	887b      	ldrh	r3, [r7, #2]
 8016368:	4413      	add	r3, r2
 801636a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801636c:	697b      	ldr	r3, [r7, #20]
 801636e:	6858      	ldr	r0, [r3, #4]
 8016370:	693b      	ldr	r3, [r7, #16]
 8016372:	685a      	ldr	r2, [r3, #4]
 8016374:	7bbb      	ldrb	r3, [r7, #14]
 8016376:	18d1      	adds	r1, r2, r3
 8016378:	897b      	ldrh	r3, [r7, #10]
 801637a:	89ba      	ldrh	r2, [r7, #12]
 801637c:	f7fa ff4a 	bl	8011214 <pbuf_copy_partial>
 8016380:	4603      	mov	r3, r0
 8016382:	461a      	mov	r2, r3
 8016384:	89bb      	ldrh	r3, [r7, #12]
 8016386:	4293      	cmp	r3, r2
 8016388:	f040 809f 	bne.w	80164ca <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801638c:	697b      	ldr	r3, [r7, #20]
 801638e:	68db      	ldr	r3, [r3, #12]
 8016390:	899b      	ldrh	r3, [r3, #12]
 8016392:	b29b      	uxth	r3, r3
 8016394:	4618      	mov	r0, r3
 8016396:	f7f8 fe19 	bl	800efcc <lwip_htons>
 801639a:	4603      	mov	r3, r0
 801639c:	b2db      	uxtb	r3, r3
 801639e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80163a2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80163a4:	2300      	movs	r3, #0
 80163a6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80163a8:	7efb      	ldrb	r3, [r7, #27]
 80163aa:	f003 0308 	and.w	r3, r3, #8
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d007      	beq.n	80163c2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80163b2:	7efb      	ldrb	r3, [r7, #27]
 80163b4:	f023 0308 	bic.w	r3, r3, #8
 80163b8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80163ba:	7ebb      	ldrb	r3, [r7, #26]
 80163bc:	f043 0308 	orr.w	r3, r3, #8
 80163c0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80163c2:	7efb      	ldrb	r3, [r7, #27]
 80163c4:	f003 0301 	and.w	r3, r3, #1
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d007      	beq.n	80163dc <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80163cc:	7efb      	ldrb	r3, [r7, #27]
 80163ce:	f023 0301 	bic.w	r3, r3, #1
 80163d2:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80163d4:	7ebb      	ldrb	r3, [r7, #26]
 80163d6:	f043 0301 	orr.w	r3, r3, #1
 80163da:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80163dc:	697b      	ldr	r3, [r7, #20]
 80163de:	68db      	ldr	r3, [r3, #12]
 80163e0:	685b      	ldr	r3, [r3, #4]
 80163e2:	4618      	mov	r0, r3
 80163e4:	f7f8 fe07 	bl	800eff6 <lwip_htonl>
 80163e8:	4602      	mov	r2, r0
 80163ea:	887b      	ldrh	r3, [r7, #2]
 80163ec:	18d1      	adds	r1, r2, r3
 80163ee:	7eba      	ldrb	r2, [r7, #26]
 80163f0:	7bfb      	ldrb	r3, [r7, #15]
 80163f2:	9300      	str	r3, [sp, #0]
 80163f4:	460b      	mov	r3, r1
 80163f6:	6939      	ldr	r1, [r7, #16]
 80163f8:	6878      	ldr	r0, [r7, #4]
 80163fa:	f7ff fa51 	bl	80158a0 <tcp_create_segment>
 80163fe:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016400:	69fb      	ldr	r3, [r7, #28]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d063      	beq.n	80164ce <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016406:	697b      	ldr	r3, [r7, #20]
 8016408:	685b      	ldr	r3, [r3, #4]
 801640a:	4618      	mov	r0, r3
 801640c:	f7fa fd8a 	bl	8010f24 <pbuf_clen>
 8016410:	4603      	mov	r3, r0
 8016412:	461a      	mov	r2, r3
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801641a:	1a9b      	subs	r3, r3, r2
 801641c:	b29a      	uxth	r2, r3
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016424:	697b      	ldr	r3, [r7, #20]
 8016426:	6858      	ldr	r0, [r3, #4]
 8016428:	697b      	ldr	r3, [r7, #20]
 801642a:	685b      	ldr	r3, [r3, #4]
 801642c:	891a      	ldrh	r2, [r3, #8]
 801642e:	89bb      	ldrh	r3, [r7, #12]
 8016430:	1ad3      	subs	r3, r2, r3
 8016432:	b29b      	uxth	r3, r3
 8016434:	4619      	mov	r1, r3
 8016436:	f7fa fb2f 	bl	8010a98 <pbuf_realloc>
  useg->len -= remainder;
 801643a:	697b      	ldr	r3, [r7, #20]
 801643c:	891a      	ldrh	r2, [r3, #8]
 801643e:	89bb      	ldrh	r3, [r7, #12]
 8016440:	1ad3      	subs	r3, r2, r3
 8016442:	b29a      	uxth	r2, r3
 8016444:	697b      	ldr	r3, [r7, #20]
 8016446:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016448:	697b      	ldr	r3, [r7, #20]
 801644a:	68db      	ldr	r3, [r3, #12]
 801644c:	899b      	ldrh	r3, [r3, #12]
 801644e:	b29c      	uxth	r4, r3
 8016450:	7efb      	ldrb	r3, [r7, #27]
 8016452:	b29b      	uxth	r3, r3
 8016454:	4618      	mov	r0, r3
 8016456:	f7f8 fdb9 	bl	800efcc <lwip_htons>
 801645a:	4603      	mov	r3, r0
 801645c:	461a      	mov	r2, r3
 801645e:	697b      	ldr	r3, [r7, #20]
 8016460:	68db      	ldr	r3, [r3, #12]
 8016462:	4322      	orrs	r2, r4
 8016464:	b292      	uxth	r2, r2
 8016466:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016468:	697b      	ldr	r3, [r7, #20]
 801646a:	685b      	ldr	r3, [r3, #4]
 801646c:	4618      	mov	r0, r3
 801646e:	f7fa fd59 	bl	8010f24 <pbuf_clen>
 8016472:	4603      	mov	r3, r0
 8016474:	461a      	mov	r2, r3
 8016476:	687b      	ldr	r3, [r7, #4]
 8016478:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801647c:	4413      	add	r3, r2
 801647e:	b29a      	uxth	r2, r3
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016486:	69fb      	ldr	r3, [r7, #28]
 8016488:	685b      	ldr	r3, [r3, #4]
 801648a:	4618      	mov	r0, r3
 801648c:	f7fa fd4a 	bl	8010f24 <pbuf_clen>
 8016490:	4603      	mov	r3, r0
 8016492:	461a      	mov	r2, r3
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801649a:	4413      	add	r3, r2
 801649c:	b29a      	uxth	r2, r3
 801649e:	687b      	ldr	r3, [r7, #4]
 80164a0:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80164a4:	697b      	ldr	r3, [r7, #20]
 80164a6:	681a      	ldr	r2, [r3, #0]
 80164a8:	69fb      	ldr	r3, [r7, #28]
 80164aa:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80164ac:	697b      	ldr	r3, [r7, #20]
 80164ae:	69fa      	ldr	r2, [r7, #28]
 80164b0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80164b2:	69fb      	ldr	r3, [r7, #28]
 80164b4:	681b      	ldr	r3, [r3, #0]
 80164b6:	2b00      	cmp	r3, #0
 80164b8:	d103      	bne.n	80164c2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80164ba:	687b      	ldr	r3, [r7, #4]
 80164bc:	2200      	movs	r2, #0
 80164be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80164c2:	2300      	movs	r3, #0
 80164c4:	e016      	b.n	80164f4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80164c6:	bf00      	nop
 80164c8:	e002      	b.n	80164d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80164ca:	bf00      	nop
 80164cc:	e000      	b.n	80164d0 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80164ce:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80164d0:	69fb      	ldr	r3, [r7, #28]
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d006      	beq.n	80164e4 <tcp_split_unsent_seg+0x25c>
 80164d6:	4b09      	ldr	r3, [pc, #36]	@ (80164fc <tcp_split_unsent_seg+0x274>)
 80164d8:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 80164dc:	490d      	ldr	r1, [pc, #52]	@ (8016514 <tcp_split_unsent_seg+0x28c>)
 80164de:	4809      	ldr	r0, [pc, #36]	@ (8016504 <tcp_split_unsent_seg+0x27c>)
 80164e0:	f007 fc54 	bl	801dd8c <iprintf>
  if (p != NULL) {
 80164e4:	693b      	ldr	r3, [r7, #16]
 80164e6:	2b00      	cmp	r3, #0
 80164e8:	d002      	beq.n	80164f0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80164ea:	6938      	ldr	r0, [r7, #16]
 80164ec:	f7fa fc8c 	bl	8010e08 <pbuf_free>
  }

  return ERR_MEM;
 80164f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80164f4:	4618      	mov	r0, r3
 80164f6:	3724      	adds	r7, #36	@ 0x24
 80164f8:	46bd      	mov	sp, r7
 80164fa:	bd90      	pop	{r4, r7, pc}
 80164fc:	08023db0 	.word	0x08023db0
 8016500:	08024144 	.word	0x08024144
 8016504:	08023e04 	.word	0x08023e04
 8016508:	08024168 	.word	0x08024168
 801650c:	0802418c 	.word	0x0802418c
 8016510:	0802419c 	.word	0x0802419c
 8016514:	080241ac 	.word	0x080241ac

08016518 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016518:	b590      	push	{r4, r7, lr}
 801651a:	b085      	sub	sp, #20
 801651c:	af00      	add	r7, sp, #0
 801651e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	2b00      	cmp	r3, #0
 8016524:	d106      	bne.n	8016534 <tcp_send_fin+0x1c>
 8016526:	4b21      	ldr	r3, [pc, #132]	@ (80165ac <tcp_send_fin+0x94>)
 8016528:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 801652c:	4920      	ldr	r1, [pc, #128]	@ (80165b0 <tcp_send_fin+0x98>)
 801652e:	4821      	ldr	r0, [pc, #132]	@ (80165b4 <tcp_send_fin+0x9c>)
 8016530:	f007 fc2c 	bl	801dd8c <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016534:	687b      	ldr	r3, [r7, #4]
 8016536:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016538:	2b00      	cmp	r3, #0
 801653a:	d02e      	beq.n	801659a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016540:	60fb      	str	r3, [r7, #12]
 8016542:	e002      	b.n	801654a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	2b00      	cmp	r3, #0
 8016550:	d1f8      	bne.n	8016544 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016552:	68fb      	ldr	r3, [r7, #12]
 8016554:	68db      	ldr	r3, [r3, #12]
 8016556:	899b      	ldrh	r3, [r3, #12]
 8016558:	b29b      	uxth	r3, r3
 801655a:	4618      	mov	r0, r3
 801655c:	f7f8 fd36 	bl	800efcc <lwip_htons>
 8016560:	4603      	mov	r3, r0
 8016562:	b2db      	uxtb	r3, r3
 8016564:	f003 0307 	and.w	r3, r3, #7
 8016568:	2b00      	cmp	r3, #0
 801656a:	d116      	bne.n	801659a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	68db      	ldr	r3, [r3, #12]
 8016570:	899b      	ldrh	r3, [r3, #12]
 8016572:	b29c      	uxth	r4, r3
 8016574:	2001      	movs	r0, #1
 8016576:	f7f8 fd29 	bl	800efcc <lwip_htons>
 801657a:	4603      	mov	r3, r0
 801657c:	461a      	mov	r2, r3
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	68db      	ldr	r3, [r3, #12]
 8016582:	4322      	orrs	r2, r4
 8016584:	b292      	uxth	r2, r2
 8016586:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	8b5b      	ldrh	r3, [r3, #26]
 801658c:	f043 0320 	orr.w	r3, r3, #32
 8016590:	b29a      	uxth	r2, r3
 8016592:	687b      	ldr	r3, [r7, #4]
 8016594:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016596:	2300      	movs	r3, #0
 8016598:	e004      	b.n	80165a4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801659a:	2101      	movs	r1, #1
 801659c:	6878      	ldr	r0, [r7, #4]
 801659e:	f000 f80b 	bl	80165b8 <tcp_enqueue_flags>
 80165a2:	4603      	mov	r3, r0
}
 80165a4:	4618      	mov	r0, r3
 80165a6:	3714      	adds	r7, #20
 80165a8:	46bd      	mov	sp, r7
 80165aa:	bd90      	pop	{r4, r7, pc}
 80165ac:	08023db0 	.word	0x08023db0
 80165b0:	080241b8 	.word	0x080241b8
 80165b4:	08023e04 	.word	0x08023e04

080165b8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80165b8:	b580      	push	{r7, lr}
 80165ba:	b08a      	sub	sp, #40	@ 0x28
 80165bc:	af02      	add	r7, sp, #8
 80165be:	6078      	str	r0, [r7, #4]
 80165c0:	460b      	mov	r3, r1
 80165c2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80165c4:	2300      	movs	r3, #0
 80165c6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80165c8:	2300      	movs	r3, #0
 80165ca:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80165cc:	78fb      	ldrb	r3, [r7, #3]
 80165ce:	f003 0303 	and.w	r3, r3, #3
 80165d2:	2b00      	cmp	r3, #0
 80165d4:	d106      	bne.n	80165e4 <tcp_enqueue_flags+0x2c>
 80165d6:	4b67      	ldr	r3, [pc, #412]	@ (8016774 <tcp_enqueue_flags+0x1bc>)
 80165d8:	f240 4211 	movw	r2, #1041	@ 0x411
 80165dc:	4966      	ldr	r1, [pc, #408]	@ (8016778 <tcp_enqueue_flags+0x1c0>)
 80165de:	4867      	ldr	r0, [pc, #412]	@ (801677c <tcp_enqueue_flags+0x1c4>)
 80165e0:	f007 fbd4 	bl	801dd8c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	2b00      	cmp	r3, #0
 80165e8:	d106      	bne.n	80165f8 <tcp_enqueue_flags+0x40>
 80165ea:	4b62      	ldr	r3, [pc, #392]	@ (8016774 <tcp_enqueue_flags+0x1bc>)
 80165ec:	f240 4213 	movw	r2, #1043	@ 0x413
 80165f0:	4963      	ldr	r1, [pc, #396]	@ (8016780 <tcp_enqueue_flags+0x1c8>)
 80165f2:	4862      	ldr	r0, [pc, #392]	@ (801677c <tcp_enqueue_flags+0x1c4>)
 80165f4:	f007 fbca 	bl	801dd8c <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80165f8:	78fb      	ldrb	r3, [r7, #3]
 80165fa:	f003 0302 	and.w	r3, r3, #2
 80165fe:	2b00      	cmp	r3, #0
 8016600:	d001      	beq.n	8016606 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016602:	2301      	movs	r3, #1
 8016604:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016606:	7ffb      	ldrb	r3, [r7, #31]
 8016608:	009b      	lsls	r3, r3, #2
 801660a:	b2db      	uxtb	r3, r3
 801660c:	f003 0304 	and.w	r3, r3, #4
 8016610:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016612:	7dfb      	ldrb	r3, [r7, #23]
 8016614:	b29b      	uxth	r3, r3
 8016616:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801661a:	4619      	mov	r1, r3
 801661c:	2036      	movs	r0, #54	@ 0x36
 801661e:	f7fa f8dd 	bl	80107dc <pbuf_alloc>
 8016622:	6138      	str	r0, [r7, #16]
 8016624:	693b      	ldr	r3, [r7, #16]
 8016626:	2b00      	cmp	r3, #0
 8016628:	d109      	bne.n	801663e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	8b5b      	ldrh	r3, [r3, #26]
 801662e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016632:	b29a      	uxth	r2, r3
 8016634:	687b      	ldr	r3, [r7, #4]
 8016636:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016638:	f04f 33ff 	mov.w	r3, #4294967295
 801663c:	e095      	b.n	801676a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801663e:	693b      	ldr	r3, [r7, #16]
 8016640:	895a      	ldrh	r2, [r3, #10]
 8016642:	7dfb      	ldrb	r3, [r7, #23]
 8016644:	b29b      	uxth	r3, r3
 8016646:	429a      	cmp	r2, r3
 8016648:	d206      	bcs.n	8016658 <tcp_enqueue_flags+0xa0>
 801664a:	4b4a      	ldr	r3, [pc, #296]	@ (8016774 <tcp_enqueue_flags+0x1bc>)
 801664c:	f240 4239 	movw	r2, #1081	@ 0x439
 8016650:	494c      	ldr	r1, [pc, #304]	@ (8016784 <tcp_enqueue_flags+0x1cc>)
 8016652:	484a      	ldr	r0, [pc, #296]	@ (801677c <tcp_enqueue_flags+0x1c4>)
 8016654:	f007 fb9a 	bl	801dd8c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 801665c:	78fa      	ldrb	r2, [r7, #3]
 801665e:	7ffb      	ldrb	r3, [r7, #31]
 8016660:	9300      	str	r3, [sp, #0]
 8016662:	460b      	mov	r3, r1
 8016664:	6939      	ldr	r1, [r7, #16]
 8016666:	6878      	ldr	r0, [r7, #4]
 8016668:	f7ff f91a 	bl	80158a0 <tcp_create_segment>
 801666c:	60f8      	str	r0, [r7, #12]
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	2b00      	cmp	r3, #0
 8016672:	d109      	bne.n	8016688 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016674:	687b      	ldr	r3, [r7, #4]
 8016676:	8b5b      	ldrh	r3, [r3, #26]
 8016678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801667c:	b29a      	uxth	r2, r3
 801667e:	687b      	ldr	r3, [r7, #4]
 8016680:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016682:	f04f 33ff 	mov.w	r3, #4294967295
 8016686:	e070      	b.n	801676a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	68db      	ldr	r3, [r3, #12]
 801668c:	f003 0303 	and.w	r3, r3, #3
 8016690:	2b00      	cmp	r3, #0
 8016692:	d006      	beq.n	80166a2 <tcp_enqueue_flags+0xea>
 8016694:	4b37      	ldr	r3, [pc, #220]	@ (8016774 <tcp_enqueue_flags+0x1bc>)
 8016696:	f240 4242 	movw	r2, #1090	@ 0x442
 801669a:	493b      	ldr	r1, [pc, #236]	@ (8016788 <tcp_enqueue_flags+0x1d0>)
 801669c:	4837      	ldr	r0, [pc, #220]	@ (801677c <tcp_enqueue_flags+0x1c4>)
 801669e:	f007 fb75 	bl	801dd8c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80166a2:	68fb      	ldr	r3, [r7, #12]
 80166a4:	891b      	ldrh	r3, [r3, #8]
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d006      	beq.n	80166b8 <tcp_enqueue_flags+0x100>
 80166aa:	4b32      	ldr	r3, [pc, #200]	@ (8016774 <tcp_enqueue_flags+0x1bc>)
 80166ac:	f240 4243 	movw	r2, #1091	@ 0x443
 80166b0:	4936      	ldr	r1, [pc, #216]	@ (801678c <tcp_enqueue_flags+0x1d4>)
 80166b2:	4832      	ldr	r0, [pc, #200]	@ (801677c <tcp_enqueue_flags+0x1c4>)
 80166b4:	f007 fb6a 	bl	801dd8c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80166b8:	687b      	ldr	r3, [r7, #4]
 80166ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d103      	bne.n	80166c8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	68fa      	ldr	r2, [r7, #12]
 80166c4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80166c6:	e00d      	b.n	80166e4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80166cc:	61bb      	str	r3, [r7, #24]
 80166ce:	e002      	b.n	80166d6 <tcp_enqueue_flags+0x11e>
 80166d0:	69bb      	ldr	r3, [r7, #24]
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	61bb      	str	r3, [r7, #24]
 80166d6:	69bb      	ldr	r3, [r7, #24]
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	2b00      	cmp	r3, #0
 80166dc:	d1f8      	bne.n	80166d0 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80166de:	69bb      	ldr	r3, [r7, #24]
 80166e0:	68fa      	ldr	r2, [r7, #12]
 80166e2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	2200      	movs	r2, #0
 80166e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80166ec:	78fb      	ldrb	r3, [r7, #3]
 80166ee:	f003 0302 	and.w	r3, r3, #2
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d104      	bne.n	8016700 <tcp_enqueue_flags+0x148>
 80166f6:	78fb      	ldrb	r3, [r7, #3]
 80166f8:	f003 0301 	and.w	r3, r3, #1
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d004      	beq.n	801670a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016700:	687b      	ldr	r3, [r7, #4]
 8016702:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016704:	1c5a      	adds	r2, r3, #1
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801670a:	78fb      	ldrb	r3, [r7, #3]
 801670c:	f003 0301 	and.w	r3, r3, #1
 8016710:	2b00      	cmp	r3, #0
 8016712:	d006      	beq.n	8016722 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	8b5b      	ldrh	r3, [r3, #26]
 8016718:	f043 0320 	orr.w	r3, r3, #32
 801671c:	b29a      	uxth	r2, r3
 801671e:	687b      	ldr	r3, [r7, #4]
 8016720:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016722:	68fb      	ldr	r3, [r7, #12]
 8016724:	685b      	ldr	r3, [r3, #4]
 8016726:	4618      	mov	r0, r3
 8016728:	f7fa fbfc 	bl	8010f24 <pbuf_clen>
 801672c:	4603      	mov	r3, r0
 801672e:	461a      	mov	r2, r3
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016736:	4413      	add	r3, r2
 8016738:	b29a      	uxth	r2, r3
 801673a:	687b      	ldr	r3, [r7, #4]
 801673c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016746:	2b00      	cmp	r3, #0
 8016748:	d00e      	beq.n	8016768 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801674e:	2b00      	cmp	r3, #0
 8016750:	d10a      	bne.n	8016768 <tcp_enqueue_flags+0x1b0>
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016756:	2b00      	cmp	r3, #0
 8016758:	d106      	bne.n	8016768 <tcp_enqueue_flags+0x1b0>
 801675a:	4b06      	ldr	r3, [pc, #24]	@ (8016774 <tcp_enqueue_flags+0x1bc>)
 801675c:	f240 4265 	movw	r2, #1125	@ 0x465
 8016760:	490b      	ldr	r1, [pc, #44]	@ (8016790 <tcp_enqueue_flags+0x1d8>)
 8016762:	4806      	ldr	r0, [pc, #24]	@ (801677c <tcp_enqueue_flags+0x1c4>)
 8016764:	f007 fb12 	bl	801dd8c <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016768:	2300      	movs	r3, #0
}
 801676a:	4618      	mov	r0, r3
 801676c:	3720      	adds	r7, #32
 801676e:	46bd      	mov	sp, r7
 8016770:	bd80      	pop	{r7, pc}
 8016772:	bf00      	nop
 8016774:	08023db0 	.word	0x08023db0
 8016778:	080241d4 	.word	0x080241d4
 801677c:	08023e04 	.word	0x08023e04
 8016780:	0802422c 	.word	0x0802422c
 8016784:	0802424c 	.word	0x0802424c
 8016788:	08024288 	.word	0x08024288
 801678c:	080242a0 	.word	0x080242a0
 8016790:	080242cc 	.word	0x080242cc

08016794 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016794:	b5b0      	push	{r4, r5, r7, lr}
 8016796:	b08a      	sub	sp, #40	@ 0x28
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801679c:	687b      	ldr	r3, [r7, #4]
 801679e:	2b00      	cmp	r3, #0
 80167a0:	d106      	bne.n	80167b0 <tcp_output+0x1c>
 80167a2:	4b8a      	ldr	r3, [pc, #552]	@ (80169cc <tcp_output+0x238>)
 80167a4:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 80167a8:	4989      	ldr	r1, [pc, #548]	@ (80169d0 <tcp_output+0x23c>)
 80167aa:	488a      	ldr	r0, [pc, #552]	@ (80169d4 <tcp_output+0x240>)
 80167ac:	f007 faee 	bl	801dd8c <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80167b0:	687b      	ldr	r3, [r7, #4]
 80167b2:	7d1b      	ldrb	r3, [r3, #20]
 80167b4:	2b01      	cmp	r3, #1
 80167b6:	d106      	bne.n	80167c6 <tcp_output+0x32>
 80167b8:	4b84      	ldr	r3, [pc, #528]	@ (80169cc <tcp_output+0x238>)
 80167ba:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 80167be:	4986      	ldr	r1, [pc, #536]	@ (80169d8 <tcp_output+0x244>)
 80167c0:	4884      	ldr	r0, [pc, #528]	@ (80169d4 <tcp_output+0x240>)
 80167c2:	f007 fae3 	bl	801dd8c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80167c6:	4b85      	ldr	r3, [pc, #532]	@ (80169dc <tcp_output+0x248>)
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	687a      	ldr	r2, [r7, #4]
 80167cc:	429a      	cmp	r2, r3
 80167ce:	d101      	bne.n	80167d4 <tcp_output+0x40>
    return ERR_OK;
 80167d0:	2300      	movs	r3, #0
 80167d2:	e1ce      	b.n	8016b72 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80167d4:	687b      	ldr	r3, [r7, #4]
 80167d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 80167da:	687b      	ldr	r3, [r7, #4]
 80167dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80167e0:	4293      	cmp	r3, r2
 80167e2:	bf28      	it	cs
 80167e4:	4613      	movcs	r3, r2
 80167e6:	b29b      	uxth	r3, r3
 80167e8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80167ee:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 80167f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80167f2:	2b00      	cmp	r3, #0
 80167f4:	d10b      	bne.n	801680e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	8b5b      	ldrh	r3, [r3, #26]
 80167fa:	f003 0302 	and.w	r3, r3, #2
 80167fe:	2b00      	cmp	r3, #0
 8016800:	f000 81aa 	beq.w	8016b58 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016804:	6878      	ldr	r0, [r7, #4]
 8016806:	f000 fdcb 	bl	80173a0 <tcp_send_empty_ack>
 801680a:	4603      	mov	r3, r0
 801680c:	e1b1      	b.n	8016b72 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801680e:	6879      	ldr	r1, [r7, #4]
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	3304      	adds	r3, #4
 8016814:	461a      	mov	r2, r3
 8016816:	6878      	ldr	r0, [r7, #4]
 8016818:	f7ff f826 	bl	8015868 <tcp_route>
 801681c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801681e:	697b      	ldr	r3, [r7, #20]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d102      	bne.n	801682a <tcp_output+0x96>
    return ERR_RTE;
 8016824:	f06f 0303 	mvn.w	r3, #3
 8016828:	e1a3      	b.n	8016b72 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801682a:	687b      	ldr	r3, [r7, #4]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d003      	beq.n	8016838 <tcp_output+0xa4>
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	681b      	ldr	r3, [r3, #0]
 8016834:	2b00      	cmp	r3, #0
 8016836:	d111      	bne.n	801685c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016838:	697b      	ldr	r3, [r7, #20]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d002      	beq.n	8016844 <tcp_output+0xb0>
 801683e:	697b      	ldr	r3, [r7, #20]
 8016840:	3304      	adds	r3, #4
 8016842:	e000      	b.n	8016846 <tcp_output+0xb2>
 8016844:	2300      	movs	r3, #0
 8016846:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016848:	693b      	ldr	r3, [r7, #16]
 801684a:	2b00      	cmp	r3, #0
 801684c:	d102      	bne.n	8016854 <tcp_output+0xc0>
      return ERR_RTE;
 801684e:	f06f 0303 	mvn.w	r3, #3
 8016852:	e18e      	b.n	8016b72 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016854:	693b      	ldr	r3, [r7, #16]
 8016856:	681a      	ldr	r2, [r3, #0]
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801685c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801685e:	68db      	ldr	r3, [r3, #12]
 8016860:	685b      	ldr	r3, [r3, #4]
 8016862:	4618      	mov	r0, r3
 8016864:	f7f8 fbc7 	bl	800eff6 <lwip_htonl>
 8016868:	4602      	mov	r2, r0
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801686e:	1ad3      	subs	r3, r2, r3
 8016870:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016872:	8912      	ldrh	r2, [r2, #8]
 8016874:	4413      	add	r3, r2
 8016876:	69ba      	ldr	r2, [r7, #24]
 8016878:	429a      	cmp	r2, r3
 801687a:	d227      	bcs.n	80168cc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801687c:	687b      	ldr	r3, [r7, #4]
 801687e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8016882:	461a      	mov	r2, r3
 8016884:	69bb      	ldr	r3, [r7, #24]
 8016886:	4293      	cmp	r3, r2
 8016888:	d114      	bne.n	80168b4 <tcp_output+0x120>
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801688e:	2b00      	cmp	r3, #0
 8016890:	d110      	bne.n	80168b4 <tcp_output+0x120>
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8016898:	2b00      	cmp	r3, #0
 801689a:	d10b      	bne.n	80168b4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2200      	movs	r2, #0
 80168a0:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2201      	movs	r2, #1
 80168a8:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	2200      	movs	r2, #0
 80168b0:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	8b5b      	ldrh	r3, [r3, #26]
 80168b8:	f003 0302 	and.w	r3, r3, #2
 80168bc:	2b00      	cmp	r3, #0
 80168be:	f000 814d 	beq.w	8016b5c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80168c2:	6878      	ldr	r0, [r7, #4]
 80168c4:	f000 fd6c 	bl	80173a0 <tcp_send_empty_ack>
 80168c8:	4603      	mov	r3, r0
 80168ca:	e152      	b.n	8016b72 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	2200      	movs	r2, #0
 80168d0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80168d8:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80168da:	6a3b      	ldr	r3, [r7, #32]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	f000 811c 	beq.w	8016b1a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80168e2:	e002      	b.n	80168ea <tcp_output+0x156>
 80168e4:	6a3b      	ldr	r3, [r7, #32]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	623b      	str	r3, [r7, #32]
 80168ea:	6a3b      	ldr	r3, [r7, #32]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	2b00      	cmp	r3, #0
 80168f0:	d1f8      	bne.n	80168e4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80168f2:	e112      	b.n	8016b1a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80168f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80168f6:	68db      	ldr	r3, [r3, #12]
 80168f8:	899b      	ldrh	r3, [r3, #12]
 80168fa:	b29b      	uxth	r3, r3
 80168fc:	4618      	mov	r0, r3
 80168fe:	f7f8 fb65 	bl	800efcc <lwip_htons>
 8016902:	4603      	mov	r3, r0
 8016904:	b2db      	uxtb	r3, r3
 8016906:	f003 0304 	and.w	r3, r3, #4
 801690a:	2b00      	cmp	r3, #0
 801690c:	d006      	beq.n	801691c <tcp_output+0x188>
 801690e:	4b2f      	ldr	r3, [pc, #188]	@ (80169cc <tcp_output+0x238>)
 8016910:	f240 5236 	movw	r2, #1334	@ 0x536
 8016914:	4932      	ldr	r1, [pc, #200]	@ (80169e0 <tcp_output+0x24c>)
 8016916:	482f      	ldr	r0, [pc, #188]	@ (80169d4 <tcp_output+0x240>)
 8016918:	f007 fa38 	bl	801dd8c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801691c:	687b      	ldr	r3, [r7, #4]
 801691e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016920:	2b00      	cmp	r3, #0
 8016922:	d01f      	beq.n	8016964 <tcp_output+0x1d0>
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	8b5b      	ldrh	r3, [r3, #26]
 8016928:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801692c:	2b00      	cmp	r3, #0
 801692e:	d119      	bne.n	8016964 <tcp_output+0x1d0>
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016934:	2b00      	cmp	r3, #0
 8016936:	d00b      	beq.n	8016950 <tcp_output+0x1bc>
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	2b00      	cmp	r3, #0
 8016940:	d110      	bne.n	8016964 <tcp_output+0x1d0>
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016946:	891a      	ldrh	r2, [r3, #8]
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801694c:	429a      	cmp	r2, r3
 801694e:	d209      	bcs.n	8016964 <tcp_output+0x1d0>
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8016956:	2b00      	cmp	r3, #0
 8016958:	d004      	beq.n	8016964 <tcp_output+0x1d0>
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016960:	2b08      	cmp	r3, #8
 8016962:	d901      	bls.n	8016968 <tcp_output+0x1d4>
 8016964:	2301      	movs	r3, #1
 8016966:	e000      	b.n	801696a <tcp_output+0x1d6>
 8016968:	2300      	movs	r3, #0
 801696a:	2b00      	cmp	r3, #0
 801696c:	d106      	bne.n	801697c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801696e:	687b      	ldr	r3, [r7, #4]
 8016970:	8b5b      	ldrh	r3, [r3, #26]
 8016972:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016976:	2b00      	cmp	r3, #0
 8016978:	f000 80e4 	beq.w	8016b44 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	7d1b      	ldrb	r3, [r3, #20]
 8016980:	2b02      	cmp	r3, #2
 8016982:	d00d      	beq.n	80169a0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016986:	68db      	ldr	r3, [r3, #12]
 8016988:	899b      	ldrh	r3, [r3, #12]
 801698a:	b29c      	uxth	r4, r3
 801698c:	2010      	movs	r0, #16
 801698e:	f7f8 fb1d 	bl	800efcc <lwip_htons>
 8016992:	4603      	mov	r3, r0
 8016994:	461a      	mov	r2, r3
 8016996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016998:	68db      	ldr	r3, [r3, #12]
 801699a:	4322      	orrs	r2, r4
 801699c:	b292      	uxth	r2, r2
 801699e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 80169a0:	697a      	ldr	r2, [r7, #20]
 80169a2:	6879      	ldr	r1, [r7, #4]
 80169a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80169a6:	f000 f909 	bl	8016bbc <tcp_output_segment>
 80169aa:	4603      	mov	r3, r0
 80169ac:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80169ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d016      	beq.n	80169e4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	8b5b      	ldrh	r3, [r3, #26]
 80169ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80169be:	b29a      	uxth	r2, r3
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	835a      	strh	r2, [r3, #26]
      return err;
 80169c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80169c8:	e0d3      	b.n	8016b72 <tcp_output+0x3de>
 80169ca:	bf00      	nop
 80169cc:	08023db0 	.word	0x08023db0
 80169d0:	080242f4 	.word	0x080242f4
 80169d4:	08023e04 	.word	0x08023e04
 80169d8:	0802430c 	.word	0x0802430c
 80169dc:	2000ec7c 	.word	0x2000ec7c
 80169e0:	08024334 	.word	0x08024334
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80169e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169e6:	681a      	ldr	r2, [r3, #0]
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	7d1b      	ldrb	r3, [r3, #20]
 80169f0:	2b02      	cmp	r3, #2
 80169f2:	d006      	beq.n	8016a02 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	8b5b      	ldrh	r3, [r3, #26]
 80169f8:	f023 0303 	bic.w	r3, r3, #3
 80169fc:	b29a      	uxth	r2, r3
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a04:	68db      	ldr	r3, [r3, #12]
 8016a06:	685b      	ldr	r3, [r3, #4]
 8016a08:	4618      	mov	r0, r3
 8016a0a:	f7f8 faf4 	bl	800eff6 <lwip_htonl>
 8016a0e:	4604      	mov	r4, r0
 8016a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a12:	891b      	ldrh	r3, [r3, #8]
 8016a14:	461d      	mov	r5, r3
 8016a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a18:	68db      	ldr	r3, [r3, #12]
 8016a1a:	899b      	ldrh	r3, [r3, #12]
 8016a1c:	b29b      	uxth	r3, r3
 8016a1e:	4618      	mov	r0, r3
 8016a20:	f7f8 fad4 	bl	800efcc <lwip_htons>
 8016a24:	4603      	mov	r3, r0
 8016a26:	b2db      	uxtb	r3, r3
 8016a28:	f003 0303 	and.w	r3, r3, #3
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d001      	beq.n	8016a34 <tcp_output+0x2a0>
 8016a30:	2301      	movs	r3, #1
 8016a32:	e000      	b.n	8016a36 <tcp_output+0x2a2>
 8016a34:	2300      	movs	r3, #0
 8016a36:	442b      	add	r3, r5
 8016a38:	4423      	add	r3, r4
 8016a3a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8016a40:	68bb      	ldr	r3, [r7, #8]
 8016a42:	1ad3      	subs	r3, r2, r3
 8016a44:	2b00      	cmp	r3, #0
 8016a46:	da02      	bge.n	8016a4e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	68ba      	ldr	r2, [r7, #8]
 8016a4c:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a50:	891b      	ldrh	r3, [r3, #8]
 8016a52:	461c      	mov	r4, r3
 8016a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a56:	68db      	ldr	r3, [r3, #12]
 8016a58:	899b      	ldrh	r3, [r3, #12]
 8016a5a:	b29b      	uxth	r3, r3
 8016a5c:	4618      	mov	r0, r3
 8016a5e:	f7f8 fab5 	bl	800efcc <lwip_htons>
 8016a62:	4603      	mov	r3, r0
 8016a64:	b2db      	uxtb	r3, r3
 8016a66:	f003 0303 	and.w	r3, r3, #3
 8016a6a:	2b00      	cmp	r3, #0
 8016a6c:	d001      	beq.n	8016a72 <tcp_output+0x2de>
 8016a6e:	2301      	movs	r3, #1
 8016a70:	e000      	b.n	8016a74 <tcp_output+0x2e0>
 8016a72:	2300      	movs	r3, #0
 8016a74:	4423      	add	r3, r4
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d049      	beq.n	8016b0e <tcp_output+0x37a>
      seg->next = NULL;
 8016a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a7c:	2200      	movs	r2, #0
 8016a7e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d105      	bne.n	8016a94 <tcp_output+0x300>
        pcb->unacked = seg;
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016a8c:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 8016a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a90:	623b      	str	r3, [r7, #32]
 8016a92:	e03f      	b.n	8016b14 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a96:	68db      	ldr	r3, [r3, #12]
 8016a98:	685b      	ldr	r3, [r3, #4]
 8016a9a:	4618      	mov	r0, r3
 8016a9c:	f7f8 faab 	bl	800eff6 <lwip_htonl>
 8016aa0:	4604      	mov	r4, r0
 8016aa2:	6a3b      	ldr	r3, [r7, #32]
 8016aa4:	68db      	ldr	r3, [r3, #12]
 8016aa6:	685b      	ldr	r3, [r3, #4]
 8016aa8:	4618      	mov	r0, r3
 8016aaa:	f7f8 faa4 	bl	800eff6 <lwip_htonl>
 8016aae:	4603      	mov	r3, r0
 8016ab0:	1ae3      	subs	r3, r4, r3
 8016ab2:	2b00      	cmp	r3, #0
 8016ab4:	da24      	bge.n	8016b00 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	3370      	adds	r3, #112	@ 0x70
 8016aba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016abc:	e002      	b.n	8016ac4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016abe:	69fb      	ldr	r3, [r7, #28]
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016ac4:	69fb      	ldr	r3, [r7, #28]
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d011      	beq.n	8016af0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016acc:	69fb      	ldr	r3, [r7, #28]
 8016ace:	681b      	ldr	r3, [r3, #0]
 8016ad0:	68db      	ldr	r3, [r3, #12]
 8016ad2:	685b      	ldr	r3, [r3, #4]
 8016ad4:	4618      	mov	r0, r3
 8016ad6:	f7f8 fa8e 	bl	800eff6 <lwip_htonl>
 8016ada:	4604      	mov	r4, r0
 8016adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ade:	68db      	ldr	r3, [r3, #12]
 8016ae0:	685b      	ldr	r3, [r3, #4]
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	f7f8 fa87 	bl	800eff6 <lwip_htonl>
 8016ae8:	4603      	mov	r3, r0
 8016aea:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	dbe6      	blt.n	8016abe <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016af0:	69fb      	ldr	r3, [r7, #28]
 8016af2:	681a      	ldr	r2, [r3, #0]
 8016af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016af6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016af8:	69fb      	ldr	r3, [r7, #28]
 8016afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016afc:	601a      	str	r2, [r3, #0]
 8016afe:	e009      	b.n	8016b14 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016b00:	6a3b      	ldr	r3, [r7, #32]
 8016b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016b04:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016b06:	6a3b      	ldr	r3, [r7, #32]
 8016b08:	681b      	ldr	r3, [r3, #0]
 8016b0a:	623b      	str	r3, [r7, #32]
 8016b0c:	e002      	b.n	8016b14 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016b0e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016b10:	f7fb ff1f 	bl	8012952 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b18:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 8016b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d012      	beq.n	8016b46 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b22:	68db      	ldr	r3, [r3, #12]
 8016b24:	685b      	ldr	r3, [r3, #4]
 8016b26:	4618      	mov	r0, r3
 8016b28:	f7f8 fa65 	bl	800eff6 <lwip_htonl>
 8016b2c:	4602      	mov	r2, r0
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016b32:	1ad3      	subs	r3, r2, r3
 8016b34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016b36:	8912      	ldrh	r2, [r2, #8]
 8016b38:	4413      	add	r3, r2
  while (seg != NULL &&
 8016b3a:	69ba      	ldr	r2, [r7, #24]
 8016b3c:	429a      	cmp	r2, r3
 8016b3e:	f4bf aed9 	bcs.w	80168f4 <tcp_output+0x160>
 8016b42:	e000      	b.n	8016b46 <tcp_output+0x3b2>
      break;
 8016b44:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016b4a:	2b00      	cmp	r3, #0
 8016b4c:	d108      	bne.n	8016b60 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	2200      	movs	r2, #0
 8016b52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8016b56:	e004      	b.n	8016b62 <tcp_output+0x3ce>
    goto output_done;
 8016b58:	bf00      	nop
 8016b5a:	e002      	b.n	8016b62 <tcp_output+0x3ce>
    goto output_done;
 8016b5c:	bf00      	nop
 8016b5e:	e000      	b.n	8016b62 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016b60:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8016b62:	687b      	ldr	r3, [r7, #4]
 8016b64:	8b5b      	ldrh	r3, [r3, #26]
 8016b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016b6a:	b29a      	uxth	r2, r3
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016b70:	2300      	movs	r3, #0
}
 8016b72:	4618      	mov	r0, r3
 8016b74:	3728      	adds	r7, #40	@ 0x28
 8016b76:	46bd      	mov	sp, r7
 8016b78:	bdb0      	pop	{r4, r5, r7, pc}
 8016b7a:	bf00      	nop

08016b7c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8016b7c:	b580      	push	{r7, lr}
 8016b7e:	b082      	sub	sp, #8
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8016b84:	687b      	ldr	r3, [r7, #4]
 8016b86:	2b00      	cmp	r3, #0
 8016b88:	d106      	bne.n	8016b98 <tcp_output_segment_busy+0x1c>
 8016b8a:	4b09      	ldr	r3, [pc, #36]	@ (8016bb0 <tcp_output_segment_busy+0x34>)
 8016b8c:	f240 529a 	movw	r2, #1434	@ 0x59a
 8016b90:	4908      	ldr	r1, [pc, #32]	@ (8016bb4 <tcp_output_segment_busy+0x38>)
 8016b92:	4809      	ldr	r0, [pc, #36]	@ (8016bb8 <tcp_output_segment_busy+0x3c>)
 8016b94:	f007 f8fa 	bl	801dd8c <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	685b      	ldr	r3, [r3, #4]
 8016b9c:	7b9b      	ldrb	r3, [r3, #14]
 8016b9e:	2b01      	cmp	r3, #1
 8016ba0:	d001      	beq.n	8016ba6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8016ba2:	2301      	movs	r3, #1
 8016ba4:	e000      	b.n	8016ba8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8016ba6:	2300      	movs	r3, #0
}
 8016ba8:	4618      	mov	r0, r3
 8016baa:	3708      	adds	r7, #8
 8016bac:	46bd      	mov	sp, r7
 8016bae:	bd80      	pop	{r7, pc}
 8016bb0:	08023db0 	.word	0x08023db0
 8016bb4:	0802434c 	.word	0x0802434c
 8016bb8:	08023e04 	.word	0x08023e04

08016bbc <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016bbc:	b5b0      	push	{r4, r5, r7, lr}
 8016bbe:	b08c      	sub	sp, #48	@ 0x30
 8016bc0:	af04      	add	r7, sp, #16
 8016bc2:	60f8      	str	r0, [r7, #12]
 8016bc4:	60b9      	str	r1, [r7, #8]
 8016bc6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	d106      	bne.n	8016bdc <tcp_output_segment+0x20>
 8016bce:	4b64      	ldr	r3, [pc, #400]	@ (8016d60 <tcp_output_segment+0x1a4>)
 8016bd0:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8016bd4:	4963      	ldr	r1, [pc, #396]	@ (8016d64 <tcp_output_segment+0x1a8>)
 8016bd6:	4864      	ldr	r0, [pc, #400]	@ (8016d68 <tcp_output_segment+0x1ac>)
 8016bd8:	f007 f8d8 	bl	801dd8c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016bdc:	68bb      	ldr	r3, [r7, #8]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d106      	bne.n	8016bf0 <tcp_output_segment+0x34>
 8016be2:	4b5f      	ldr	r3, [pc, #380]	@ (8016d60 <tcp_output_segment+0x1a4>)
 8016be4:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8016be8:	4960      	ldr	r1, [pc, #384]	@ (8016d6c <tcp_output_segment+0x1b0>)
 8016bea:	485f      	ldr	r0, [pc, #380]	@ (8016d68 <tcp_output_segment+0x1ac>)
 8016bec:	f007 f8ce 	bl	801dd8c <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d106      	bne.n	8016c04 <tcp_output_segment+0x48>
 8016bf6:	4b5a      	ldr	r3, [pc, #360]	@ (8016d60 <tcp_output_segment+0x1a4>)
 8016bf8:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 8016bfc:	495c      	ldr	r1, [pc, #368]	@ (8016d70 <tcp_output_segment+0x1b4>)
 8016bfe:	485a      	ldr	r0, [pc, #360]	@ (8016d68 <tcp_output_segment+0x1ac>)
 8016c00:	f007 f8c4 	bl	801dd8c <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8016c04:	68f8      	ldr	r0, [r7, #12]
 8016c06:	f7ff ffb9 	bl	8016b7c <tcp_output_segment_busy>
 8016c0a:	4603      	mov	r3, r0
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d001      	beq.n	8016c14 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016c10:	2300      	movs	r3, #0
 8016c12:	e0a1      	b.n	8016d58 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016c14:	68bb      	ldr	r3, [r7, #8]
 8016c16:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016c18:	68fb      	ldr	r3, [r7, #12]
 8016c1a:	68dc      	ldr	r4, [r3, #12]
 8016c1c:	4610      	mov	r0, r2
 8016c1e:	f7f8 f9ea 	bl	800eff6 <lwip_htonl>
 8016c22:	4603      	mov	r3, r0
 8016c24:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016c26:	68bb      	ldr	r3, [r7, #8]
 8016c28:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8016c2a:	68fb      	ldr	r3, [r7, #12]
 8016c2c:	68dc      	ldr	r4, [r3, #12]
 8016c2e:	4610      	mov	r0, r2
 8016c30:	f7f8 f9cc 	bl	800efcc <lwip_htons>
 8016c34:	4603      	mov	r3, r0
 8016c36:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016c38:	68bb      	ldr	r3, [r7, #8]
 8016c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016c3c:	68ba      	ldr	r2, [r7, #8]
 8016c3e:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8016c40:	441a      	add	r2, r3
 8016c42:	68bb      	ldr	r3, [r7, #8]
 8016c44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016c46:	68fb      	ldr	r3, [r7, #12]
 8016c48:	68db      	ldr	r3, [r3, #12]
 8016c4a:	3314      	adds	r3, #20
 8016c4c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016c4e:	68fb      	ldr	r3, [r7, #12]
 8016c50:	7a9b      	ldrb	r3, [r3, #10]
 8016c52:	f003 0301 	and.w	r3, r3, #1
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d015      	beq.n	8016c86 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016c5a:	68bb      	ldr	r3, [r7, #8]
 8016c5c:	3304      	adds	r3, #4
 8016c5e:	461a      	mov	r2, r3
 8016c60:	6879      	ldr	r1, [r7, #4]
 8016c62:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8016c66:	f7fc fa39 	bl	80130dc <tcp_eff_send_mss_netif>
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016c6e:	8b7b      	ldrh	r3, [r7, #26]
 8016c70:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8016c74:	4618      	mov	r0, r3
 8016c76:	f7f8 f9be 	bl	800eff6 <lwip_htonl>
 8016c7a:	4602      	mov	r2, r0
 8016c7c:	69fb      	ldr	r3, [r7, #28]
 8016c7e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016c80:	69fb      	ldr	r3, [r7, #28]
 8016c82:	3304      	adds	r3, #4
 8016c84:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016c86:	68bb      	ldr	r3, [r7, #8]
 8016c88:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8016c8c:	2b00      	cmp	r3, #0
 8016c8e:	da02      	bge.n	8016c96 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8016c90:	68bb      	ldr	r3, [r7, #8]
 8016c92:	2200      	movs	r2, #0
 8016c94:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8016c96:	68bb      	ldr	r3, [r7, #8]
 8016c98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	d10c      	bne.n	8016cb8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8016c9e:	4b35      	ldr	r3, [pc, #212]	@ (8016d74 <tcp_output_segment+0x1b8>)
 8016ca0:	681a      	ldr	r2, [r3, #0]
 8016ca2:	68bb      	ldr	r3, [r7, #8]
 8016ca4:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016ca6:	68fb      	ldr	r3, [r7, #12]
 8016ca8:	68db      	ldr	r3, [r3, #12]
 8016caa:	685b      	ldr	r3, [r3, #4]
 8016cac:	4618      	mov	r0, r3
 8016cae:	f7f8 f9a2 	bl	800eff6 <lwip_htonl>
 8016cb2:	4602      	mov	r2, r0
 8016cb4:	68bb      	ldr	r3, [r7, #8]
 8016cb6:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016cb8:	68fb      	ldr	r3, [r7, #12]
 8016cba:	68da      	ldr	r2, [r3, #12]
 8016cbc:	68fb      	ldr	r3, [r7, #12]
 8016cbe:	685b      	ldr	r3, [r3, #4]
 8016cc0:	685b      	ldr	r3, [r3, #4]
 8016cc2:	1ad3      	subs	r3, r2, r3
 8016cc4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	685b      	ldr	r3, [r3, #4]
 8016cca:	8959      	ldrh	r1, [r3, #10]
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	685b      	ldr	r3, [r3, #4]
 8016cd0:	8b3a      	ldrh	r2, [r7, #24]
 8016cd2:	1a8a      	subs	r2, r1, r2
 8016cd4:	b292      	uxth	r2, r2
 8016cd6:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016cd8:	68fb      	ldr	r3, [r7, #12]
 8016cda:	685b      	ldr	r3, [r3, #4]
 8016cdc:	8919      	ldrh	r1, [r3, #8]
 8016cde:	68fb      	ldr	r3, [r7, #12]
 8016ce0:	685b      	ldr	r3, [r3, #4]
 8016ce2:	8b3a      	ldrh	r2, [r7, #24]
 8016ce4:	1a8a      	subs	r2, r1, r2
 8016ce6:	b292      	uxth	r2, r2
 8016ce8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	685b      	ldr	r3, [r3, #4]
 8016cee:	68fa      	ldr	r2, [r7, #12]
 8016cf0:	68d2      	ldr	r2, [r2, #12]
 8016cf2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	68db      	ldr	r3, [r3, #12]
 8016cf8:	2200      	movs	r2, #0
 8016cfa:	741a      	strb	r2, [r3, #16]
 8016cfc:	2200      	movs	r2, #0
 8016cfe:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016d00:	68fb      	ldr	r3, [r7, #12]
 8016d02:	68da      	ldr	r2, [r3, #12]
 8016d04:	68fb      	ldr	r3, [r7, #12]
 8016d06:	7a9b      	ldrb	r3, [r3, #10]
 8016d08:	f003 0301 	and.w	r3, r3, #1
 8016d0c:	2b00      	cmp	r3, #0
 8016d0e:	d001      	beq.n	8016d14 <tcp_output_segment+0x158>
 8016d10:	2318      	movs	r3, #24
 8016d12:	e000      	b.n	8016d16 <tcp_output_segment+0x15a>
 8016d14:	2314      	movs	r3, #20
 8016d16:	4413      	add	r3, r2
 8016d18:	69fa      	ldr	r2, [r7, #28]
 8016d1a:	429a      	cmp	r2, r3
 8016d1c:	d006      	beq.n	8016d2c <tcp_output_segment+0x170>
 8016d1e:	4b10      	ldr	r3, [pc, #64]	@ (8016d60 <tcp_output_segment+0x1a4>)
 8016d20:	f240 621c 	movw	r2, #1564	@ 0x61c
 8016d24:	4914      	ldr	r1, [pc, #80]	@ (8016d78 <tcp_output_segment+0x1bc>)
 8016d26:	4810      	ldr	r0, [pc, #64]	@ (8016d68 <tcp_output_segment+0x1ac>)
 8016d28:	f007 f830 	bl	801dd8c <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	6858      	ldr	r0, [r3, #4]
 8016d30:	68b9      	ldr	r1, [r7, #8]
 8016d32:	68bb      	ldr	r3, [r7, #8]
 8016d34:	1d1c      	adds	r4, r3, #4
 8016d36:	68bb      	ldr	r3, [r7, #8]
 8016d38:	7add      	ldrb	r5, [r3, #11]
 8016d3a:	68bb      	ldr	r3, [r7, #8]
 8016d3c:	7a9b      	ldrb	r3, [r3, #10]
 8016d3e:	687a      	ldr	r2, [r7, #4]
 8016d40:	9202      	str	r2, [sp, #8]
 8016d42:	2206      	movs	r2, #6
 8016d44:	9201      	str	r2, [sp, #4]
 8016d46:	9300      	str	r3, [sp, #0]
 8016d48:	462b      	mov	r3, r5
 8016d4a:	4622      	mov	r2, r4
 8016d4c:	f004 fd28 	bl	801b7a0 <ip4_output_if>
 8016d50:	4603      	mov	r3, r0
 8016d52:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016d54:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016d58:	4618      	mov	r0, r3
 8016d5a:	3720      	adds	r7, #32
 8016d5c:	46bd      	mov	sp, r7
 8016d5e:	bdb0      	pop	{r4, r5, r7, pc}
 8016d60:	08023db0 	.word	0x08023db0
 8016d64:	08024374 	.word	0x08024374
 8016d68:	08023e04 	.word	0x08023e04
 8016d6c:	08024394 	.word	0x08024394
 8016d70:	080243b4 	.word	0x080243b4
 8016d74:	2000ec30 	.word	0x2000ec30
 8016d78:	080243d8 	.word	0x080243d8

08016d7c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016d7c:	b5b0      	push	{r4, r5, r7, lr}
 8016d7e:	b084      	sub	sp, #16
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8016d84:	687b      	ldr	r3, [r7, #4]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d106      	bne.n	8016d98 <tcp_rexmit_rto_prepare+0x1c>
 8016d8a:	4b31      	ldr	r3, [pc, #196]	@ (8016e50 <tcp_rexmit_rto_prepare+0xd4>)
 8016d8c:	f240 6263 	movw	r2, #1635	@ 0x663
 8016d90:	4930      	ldr	r1, [pc, #192]	@ (8016e54 <tcp_rexmit_rto_prepare+0xd8>)
 8016d92:	4831      	ldr	r0, [pc, #196]	@ (8016e58 <tcp_rexmit_rto_prepare+0xdc>)
 8016d94:	f006 fffa 	bl	801dd8c <iprintf>

  if (pcb->unacked == NULL) {
 8016d98:	687b      	ldr	r3, [r7, #4]
 8016d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d102      	bne.n	8016da6 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8016da0:	f06f 0305 	mvn.w	r3, #5
 8016da4:	e050      	b.n	8016e48 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016daa:	60fb      	str	r3, [r7, #12]
 8016dac:	e00b      	b.n	8016dc6 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8016dae:	68f8      	ldr	r0, [r7, #12]
 8016db0:	f7ff fee4 	bl	8016b7c <tcp_output_segment_busy>
 8016db4:	4603      	mov	r3, r0
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d002      	beq.n	8016dc0 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8016dba:	f06f 0305 	mvn.w	r3, #5
 8016dbe:	e043      	b.n	8016e48 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016dc0:	68fb      	ldr	r3, [r7, #12]
 8016dc2:	681b      	ldr	r3, [r3, #0]
 8016dc4:	60fb      	str	r3, [r7, #12]
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	681b      	ldr	r3, [r3, #0]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d1ef      	bne.n	8016dae <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8016dce:	68f8      	ldr	r0, [r7, #12]
 8016dd0:	f7ff fed4 	bl	8016b7c <tcp_output_segment_busy>
 8016dd4:	4603      	mov	r3, r0
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d002      	beq.n	8016de0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8016dda:	f06f 0305 	mvn.w	r3, #5
 8016dde:	e033      	b.n	8016e48 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8016de4:	68fb      	ldr	r3, [r7, #12]
 8016de6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8016dec:	687b      	ldr	r3, [r7, #4]
 8016dee:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	2200      	movs	r2, #0
 8016df4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8016df6:	687b      	ldr	r3, [r7, #4]
 8016df8:	8b5b      	ldrh	r3, [r3, #26]
 8016dfa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8016dfe:	b29a      	uxth	r2, r3
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016e04:	68fb      	ldr	r3, [r7, #12]
 8016e06:	68db      	ldr	r3, [r3, #12]
 8016e08:	685b      	ldr	r3, [r3, #4]
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	f7f8 f8f3 	bl	800eff6 <lwip_htonl>
 8016e10:	4604      	mov	r4, r0
 8016e12:	68fb      	ldr	r3, [r7, #12]
 8016e14:	891b      	ldrh	r3, [r3, #8]
 8016e16:	461d      	mov	r5, r3
 8016e18:	68fb      	ldr	r3, [r7, #12]
 8016e1a:	68db      	ldr	r3, [r3, #12]
 8016e1c:	899b      	ldrh	r3, [r3, #12]
 8016e1e:	b29b      	uxth	r3, r3
 8016e20:	4618      	mov	r0, r3
 8016e22:	f7f8 f8d3 	bl	800efcc <lwip_htons>
 8016e26:	4603      	mov	r3, r0
 8016e28:	b2db      	uxtb	r3, r3
 8016e2a:	f003 0303 	and.w	r3, r3, #3
 8016e2e:	2b00      	cmp	r3, #0
 8016e30:	d001      	beq.n	8016e36 <tcp_rexmit_rto_prepare+0xba>
 8016e32:	2301      	movs	r3, #1
 8016e34:	e000      	b.n	8016e38 <tcp_rexmit_rto_prepare+0xbc>
 8016e36:	2300      	movs	r3, #0
 8016e38:	442b      	add	r3, r5
 8016e3a:	18e2      	adds	r2, r4, r3
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	2200      	movs	r2, #0
 8016e44:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 8016e46:	2300      	movs	r3, #0
}
 8016e48:	4618      	mov	r0, r3
 8016e4a:	3710      	adds	r7, #16
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8016e50:	08023db0 	.word	0x08023db0
 8016e54:	080243ec 	.word	0x080243ec
 8016e58:	08023e04 	.word	0x08023e04

08016e5c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016e5c:	b580      	push	{r7, lr}
 8016e5e:	b082      	sub	sp, #8
 8016e60:	af00      	add	r7, sp, #0
 8016e62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d106      	bne.n	8016e78 <tcp_rexmit_rto_commit+0x1c>
 8016e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8016ea0 <tcp_rexmit_rto_commit+0x44>)
 8016e6c:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8016e70:	490c      	ldr	r1, [pc, #48]	@ (8016ea4 <tcp_rexmit_rto_commit+0x48>)
 8016e72:	480d      	ldr	r0, [pc, #52]	@ (8016ea8 <tcp_rexmit_rto_commit+0x4c>)
 8016e74:	f006 ff8a 	bl	801dd8c <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016e7e:	2bff      	cmp	r3, #255	@ 0xff
 8016e80:	d007      	beq.n	8016e92 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016e88:	3301      	adds	r3, #1
 8016e8a:	b2da      	uxtb	r2, r3
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8016e92:	6878      	ldr	r0, [r7, #4]
 8016e94:	f7ff fc7e 	bl	8016794 <tcp_output>
}
 8016e98:	bf00      	nop
 8016e9a:	3708      	adds	r7, #8
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	bd80      	pop	{r7, pc}
 8016ea0:	08023db0 	.word	0x08023db0
 8016ea4:	08024410 	.word	0x08024410
 8016ea8:	08023e04 	.word	0x08023e04

08016eac <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b082      	sub	sp, #8
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d106      	bne.n	8016ec8 <tcp_rexmit_rto+0x1c>
 8016eba:	4b0a      	ldr	r3, [pc, #40]	@ (8016ee4 <tcp_rexmit_rto+0x38>)
 8016ebc:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 8016ec0:	4909      	ldr	r1, [pc, #36]	@ (8016ee8 <tcp_rexmit_rto+0x3c>)
 8016ec2:	480a      	ldr	r0, [pc, #40]	@ (8016eec <tcp_rexmit_rto+0x40>)
 8016ec4:	f006 ff62 	bl	801dd8c <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8016ec8:	6878      	ldr	r0, [r7, #4]
 8016eca:	f7ff ff57 	bl	8016d7c <tcp_rexmit_rto_prepare>
 8016ece:	4603      	mov	r3, r0
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d102      	bne.n	8016eda <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8016ed4:	6878      	ldr	r0, [r7, #4]
 8016ed6:	f7ff ffc1 	bl	8016e5c <tcp_rexmit_rto_commit>
  }
}
 8016eda:	bf00      	nop
 8016edc:	3708      	adds	r7, #8
 8016ede:	46bd      	mov	sp, r7
 8016ee0:	bd80      	pop	{r7, pc}
 8016ee2:	bf00      	nop
 8016ee4:	08023db0 	.word	0x08023db0
 8016ee8:	08024434 	.word	0x08024434
 8016eec:	08023e04 	.word	0x08023e04

08016ef0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016ef0:	b590      	push	{r4, r7, lr}
 8016ef2:	b085      	sub	sp, #20
 8016ef4:	af00      	add	r7, sp, #0
 8016ef6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d106      	bne.n	8016f0c <tcp_rexmit+0x1c>
 8016efe:	4b2f      	ldr	r3, [pc, #188]	@ (8016fbc <tcp_rexmit+0xcc>)
 8016f00:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 8016f04:	492e      	ldr	r1, [pc, #184]	@ (8016fc0 <tcp_rexmit+0xd0>)
 8016f06:	482f      	ldr	r0, [pc, #188]	@ (8016fc4 <tcp_rexmit+0xd4>)
 8016f08:	f006 ff40 	bl	801dd8c <iprintf>

  if (pcb->unacked == NULL) {
 8016f0c:	687b      	ldr	r3, [r7, #4]
 8016f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	d102      	bne.n	8016f1a <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016f14:	f06f 0305 	mvn.w	r3, #5
 8016f18:	e04c      	b.n	8016fb4 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016f1e:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8016f20:	68b8      	ldr	r0, [r7, #8]
 8016f22:	f7ff fe2b 	bl	8016b7c <tcp_output_segment_busy>
 8016f26:	4603      	mov	r3, r0
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d002      	beq.n	8016f32 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016f2c:	f06f 0305 	mvn.w	r3, #5
 8016f30:	e040      	b.n	8016fb4 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8016f32:	68bb      	ldr	r3, [r7, #8]
 8016f34:	681a      	ldr	r2, [r3, #0]
 8016f36:	687b      	ldr	r3, [r7, #4]
 8016f38:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	336c      	adds	r3, #108	@ 0x6c
 8016f3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016f40:	e002      	b.n	8016f48 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016f48:	68fb      	ldr	r3, [r7, #12]
 8016f4a:	681b      	ldr	r3, [r3, #0]
 8016f4c:	2b00      	cmp	r3, #0
 8016f4e:	d011      	beq.n	8016f74 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016f50:	68fb      	ldr	r3, [r7, #12]
 8016f52:	681b      	ldr	r3, [r3, #0]
 8016f54:	68db      	ldr	r3, [r3, #12]
 8016f56:	685b      	ldr	r3, [r3, #4]
 8016f58:	4618      	mov	r0, r3
 8016f5a:	f7f8 f84c 	bl	800eff6 <lwip_htonl>
 8016f5e:	4604      	mov	r4, r0
 8016f60:	68bb      	ldr	r3, [r7, #8]
 8016f62:	68db      	ldr	r3, [r3, #12]
 8016f64:	685b      	ldr	r3, [r3, #4]
 8016f66:	4618      	mov	r0, r3
 8016f68:	f7f8 f845 	bl	800eff6 <lwip_htonl>
 8016f6c:	4603      	mov	r3, r0
 8016f6e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016f70:	2b00      	cmp	r3, #0
 8016f72:	dbe6      	blt.n	8016f42 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	681a      	ldr	r2, [r3, #0]
 8016f78:	68bb      	ldr	r3, [r7, #8]
 8016f7a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	68ba      	ldr	r2, [r7, #8]
 8016f80:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8016f82:	68bb      	ldr	r3, [r7, #8]
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d103      	bne.n	8016f92 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	2200      	movs	r2, #0
 8016f8e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016f98:	2bff      	cmp	r3, #255	@ 0xff
 8016f9a:	d007      	beq.n	8016fac <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016f9c:	687b      	ldr	r3, [r7, #4]
 8016f9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8016fa2:	3301      	adds	r3, #1
 8016fa4:	b2da      	uxtb	r2, r3
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	2200      	movs	r2, #0
 8016fb0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8016fb2:	2300      	movs	r3, #0
}
 8016fb4:	4618      	mov	r0, r3
 8016fb6:	3714      	adds	r7, #20
 8016fb8:	46bd      	mov	sp, r7
 8016fba:	bd90      	pop	{r4, r7, pc}
 8016fbc:	08023db0 	.word	0x08023db0
 8016fc0:	08024450 	.word	0x08024450
 8016fc4:	08023e04 	.word	0x08023e04

08016fc8 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b082      	sub	sp, #8
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d106      	bne.n	8016fe4 <tcp_rexmit_fast+0x1c>
 8016fd6:	4b2a      	ldr	r3, [pc, #168]	@ (8017080 <tcp_rexmit_fast+0xb8>)
 8016fd8:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8016fdc:	4929      	ldr	r1, [pc, #164]	@ (8017084 <tcp_rexmit_fast+0xbc>)
 8016fde:	482a      	ldr	r0, [pc, #168]	@ (8017088 <tcp_rexmit_fast+0xc0>)
 8016fe0:	f006 fed4 	bl	801dd8c <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d044      	beq.n	8017076 <tcp_rexmit_fast+0xae>
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	8b5b      	ldrh	r3, [r3, #26]
 8016ff0:	f003 0304 	and.w	r3, r3, #4
 8016ff4:	2b00      	cmp	r3, #0
 8016ff6:	d13e      	bne.n	8017076 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8016ff8:	6878      	ldr	r0, [r7, #4]
 8016ffa:	f7ff ff79 	bl	8016ef0 <tcp_rexmit>
 8016ffe:	4603      	mov	r3, r0
 8017000:	2b00      	cmp	r3, #0
 8017002:	d138      	bne.n	8017076 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017010:	4293      	cmp	r3, r2
 8017012:	bf28      	it	cs
 8017014:	4613      	movcs	r3, r2
 8017016:	b29b      	uxth	r3, r3
 8017018:	0fda      	lsrs	r2, r3, #31
 801701a:	4413      	add	r3, r2
 801701c:	105b      	asrs	r3, r3, #1
 801701e:	b29a      	uxth	r2, r3
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 801702c:	461a      	mov	r2, r3
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017032:	005b      	lsls	r3, r3, #1
 8017034:	429a      	cmp	r2, r3
 8017036:	d206      	bcs.n	8017046 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801703c:	005b      	lsls	r3, r3, #1
 801703e:	b29a      	uxth	r2, r3
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017046:	687b      	ldr	r3, [r7, #4]
 8017048:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 801704c:	687b      	ldr	r3, [r7, #4]
 801704e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017050:	4619      	mov	r1, r3
 8017052:	0049      	lsls	r1, r1, #1
 8017054:	440b      	add	r3, r1
 8017056:	b29b      	uxth	r3, r3
 8017058:	4413      	add	r3, r2
 801705a:	b29a      	uxth	r2, r3
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017062:	687b      	ldr	r3, [r7, #4]
 8017064:	8b5b      	ldrh	r3, [r3, #26]
 8017066:	f043 0304 	orr.w	r3, r3, #4
 801706a:	b29a      	uxth	r2, r3
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017070:	687b      	ldr	r3, [r7, #4]
 8017072:	2200      	movs	r2, #0
 8017074:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8017076:	bf00      	nop
 8017078:	3708      	adds	r7, #8
 801707a:	46bd      	mov	sp, r7
 801707c:	bd80      	pop	{r7, pc}
 801707e:	bf00      	nop
 8017080:	08023db0 	.word	0x08023db0
 8017084:	08024468 	.word	0x08024468
 8017088:	08023e04 	.word	0x08023e04

0801708c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801708c:	b580      	push	{r7, lr}
 801708e:	b086      	sub	sp, #24
 8017090:	af00      	add	r7, sp, #0
 8017092:	60f8      	str	r0, [r7, #12]
 8017094:	607b      	str	r3, [r7, #4]
 8017096:	460b      	mov	r3, r1
 8017098:	817b      	strh	r3, [r7, #10]
 801709a:	4613      	mov	r3, r2
 801709c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801709e:	897a      	ldrh	r2, [r7, #10]
 80170a0:	893b      	ldrh	r3, [r7, #8]
 80170a2:	4413      	add	r3, r2
 80170a4:	b29b      	uxth	r3, r3
 80170a6:	3314      	adds	r3, #20
 80170a8:	b29b      	uxth	r3, r3
 80170aa:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80170ae:	4619      	mov	r1, r3
 80170b0:	2022      	movs	r0, #34	@ 0x22
 80170b2:	f7f9 fb93 	bl	80107dc <pbuf_alloc>
 80170b6:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80170b8:	697b      	ldr	r3, [r7, #20]
 80170ba:	2b00      	cmp	r3, #0
 80170bc:	d04d      	beq.n	801715a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80170be:	897b      	ldrh	r3, [r7, #10]
 80170c0:	3313      	adds	r3, #19
 80170c2:	697a      	ldr	r2, [r7, #20]
 80170c4:	8952      	ldrh	r2, [r2, #10]
 80170c6:	4293      	cmp	r3, r2
 80170c8:	db06      	blt.n	80170d8 <tcp_output_alloc_header_common+0x4c>
 80170ca:	4b26      	ldr	r3, [pc, #152]	@ (8017164 <tcp_output_alloc_header_common+0xd8>)
 80170cc:	f240 7223 	movw	r2, #1827	@ 0x723
 80170d0:	4925      	ldr	r1, [pc, #148]	@ (8017168 <tcp_output_alloc_header_common+0xdc>)
 80170d2:	4826      	ldr	r0, [pc, #152]	@ (801716c <tcp_output_alloc_header_common+0xe0>)
 80170d4:	f006 fe5a 	bl	801dd8c <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80170d8:	697b      	ldr	r3, [r7, #20]
 80170da:	685b      	ldr	r3, [r3, #4]
 80170dc:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80170de:	8c3b      	ldrh	r3, [r7, #32]
 80170e0:	4618      	mov	r0, r3
 80170e2:	f7f7 ff73 	bl	800efcc <lwip_htons>
 80170e6:	4603      	mov	r3, r0
 80170e8:	461a      	mov	r2, r3
 80170ea:	693b      	ldr	r3, [r7, #16]
 80170ec:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80170ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80170f0:	4618      	mov	r0, r3
 80170f2:	f7f7 ff6b 	bl	800efcc <lwip_htons>
 80170f6:	4603      	mov	r3, r0
 80170f8:	461a      	mov	r2, r3
 80170fa:	693b      	ldr	r3, [r7, #16]
 80170fc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80170fe:	693b      	ldr	r3, [r7, #16]
 8017100:	687a      	ldr	r2, [r7, #4]
 8017102:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017104:	68f8      	ldr	r0, [r7, #12]
 8017106:	f7f7 ff76 	bl	800eff6 <lwip_htonl>
 801710a:	4602      	mov	r2, r0
 801710c:	693b      	ldr	r3, [r7, #16]
 801710e:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017110:	897b      	ldrh	r3, [r7, #10]
 8017112:	089b      	lsrs	r3, r3, #2
 8017114:	b29b      	uxth	r3, r3
 8017116:	3305      	adds	r3, #5
 8017118:	b29b      	uxth	r3, r3
 801711a:	031b      	lsls	r3, r3, #12
 801711c:	b29a      	uxth	r2, r3
 801711e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017122:	b29b      	uxth	r3, r3
 8017124:	4313      	orrs	r3, r2
 8017126:	b29b      	uxth	r3, r3
 8017128:	4618      	mov	r0, r3
 801712a:	f7f7 ff4f 	bl	800efcc <lwip_htons>
 801712e:	4603      	mov	r3, r0
 8017130:	461a      	mov	r2, r3
 8017132:	693b      	ldr	r3, [r7, #16]
 8017134:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017136:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017138:	4618      	mov	r0, r3
 801713a:	f7f7 ff47 	bl	800efcc <lwip_htons>
 801713e:	4603      	mov	r3, r0
 8017140:	461a      	mov	r2, r3
 8017142:	693b      	ldr	r3, [r7, #16]
 8017144:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017146:	693b      	ldr	r3, [r7, #16]
 8017148:	2200      	movs	r2, #0
 801714a:	741a      	strb	r2, [r3, #16]
 801714c:	2200      	movs	r2, #0
 801714e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017150:	693b      	ldr	r3, [r7, #16]
 8017152:	2200      	movs	r2, #0
 8017154:	749a      	strb	r2, [r3, #18]
 8017156:	2200      	movs	r2, #0
 8017158:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801715a:	697b      	ldr	r3, [r7, #20]
}
 801715c:	4618      	mov	r0, r3
 801715e:	3718      	adds	r7, #24
 8017160:	46bd      	mov	sp, r7
 8017162:	bd80      	pop	{r7, pc}
 8017164:	08023db0 	.word	0x08023db0
 8017168:	08024488 	.word	0x08024488
 801716c:	08023e04 	.word	0x08023e04

08017170 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017170:	b5b0      	push	{r4, r5, r7, lr}
 8017172:	b08a      	sub	sp, #40	@ 0x28
 8017174:	af04      	add	r7, sp, #16
 8017176:	60f8      	str	r0, [r7, #12]
 8017178:	607b      	str	r3, [r7, #4]
 801717a:	460b      	mov	r3, r1
 801717c:	817b      	strh	r3, [r7, #10]
 801717e:	4613      	mov	r3, r2
 8017180:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017182:	68fb      	ldr	r3, [r7, #12]
 8017184:	2b00      	cmp	r3, #0
 8017186:	d106      	bne.n	8017196 <tcp_output_alloc_header+0x26>
 8017188:	4b15      	ldr	r3, [pc, #84]	@ (80171e0 <tcp_output_alloc_header+0x70>)
 801718a:	f240 7242 	movw	r2, #1858	@ 0x742
 801718e:	4915      	ldr	r1, [pc, #84]	@ (80171e4 <tcp_output_alloc_header+0x74>)
 8017190:	4815      	ldr	r0, [pc, #84]	@ (80171e8 <tcp_output_alloc_header+0x78>)
 8017192:	f006 fdfb 	bl	801dd8c <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 801719a:	68fb      	ldr	r3, [r7, #12]
 801719c:	8adb      	ldrh	r3, [r3, #22]
 801719e:	68fa      	ldr	r2, [r7, #12]
 80171a0:	8b12      	ldrh	r2, [r2, #24]
 80171a2:	68f9      	ldr	r1, [r7, #12]
 80171a4:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 80171a6:	893d      	ldrh	r5, [r7, #8]
 80171a8:	897c      	ldrh	r4, [r7, #10]
 80171aa:	9103      	str	r1, [sp, #12]
 80171ac:	2110      	movs	r1, #16
 80171ae:	9102      	str	r1, [sp, #8]
 80171b0:	9201      	str	r2, [sp, #4]
 80171b2:	9300      	str	r3, [sp, #0]
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	462a      	mov	r2, r5
 80171b8:	4621      	mov	r1, r4
 80171ba:	f7ff ff67 	bl	801708c <tcp_output_alloc_header_common>
 80171be:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80171c0:	697b      	ldr	r3, [r7, #20]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d006      	beq.n	80171d4 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171ca:	68fa      	ldr	r2, [r7, #12]
 80171cc:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80171ce:	441a      	add	r2, r3
 80171d0:	68fb      	ldr	r3, [r7, #12]
 80171d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 80171d4:	697b      	ldr	r3, [r7, #20]
}
 80171d6:	4618      	mov	r0, r3
 80171d8:	3718      	adds	r7, #24
 80171da:	46bd      	mov	sp, r7
 80171dc:	bdb0      	pop	{r4, r5, r7, pc}
 80171de:	bf00      	nop
 80171e0:	08023db0 	.word	0x08023db0
 80171e4:	080244b8 	.word	0x080244b8
 80171e8:	08023e04 	.word	0x08023e04

080171ec <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80171ec:	b580      	push	{r7, lr}
 80171ee:	b088      	sub	sp, #32
 80171f0:	af00      	add	r7, sp, #0
 80171f2:	60f8      	str	r0, [r7, #12]
 80171f4:	60b9      	str	r1, [r7, #8]
 80171f6:	4611      	mov	r1, r2
 80171f8:	461a      	mov	r2, r3
 80171fa:	460b      	mov	r3, r1
 80171fc:	71fb      	strb	r3, [r7, #7]
 80171fe:	4613      	mov	r3, r2
 8017200:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8017202:	2300      	movs	r3, #0
 8017204:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017206:	68bb      	ldr	r3, [r7, #8]
 8017208:	2b00      	cmp	r3, #0
 801720a:	d106      	bne.n	801721a <tcp_output_fill_options+0x2e>
 801720c:	4b12      	ldr	r3, [pc, #72]	@ (8017258 <tcp_output_fill_options+0x6c>)
 801720e:	f240 7256 	movw	r2, #1878	@ 0x756
 8017212:	4912      	ldr	r1, [pc, #72]	@ (801725c <tcp_output_fill_options+0x70>)
 8017214:	4812      	ldr	r0, [pc, #72]	@ (8017260 <tcp_output_fill_options+0x74>)
 8017216:	f006 fdb9 	bl	801dd8c <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801721a:	68bb      	ldr	r3, [r7, #8]
 801721c:	685b      	ldr	r3, [r3, #4]
 801721e:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017220:	69bb      	ldr	r3, [r7, #24]
 8017222:	3314      	adds	r3, #20
 8017224:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017226:	8bfb      	ldrh	r3, [r7, #30]
 8017228:	009b      	lsls	r3, r3, #2
 801722a:	461a      	mov	r2, r3
 801722c:	79fb      	ldrb	r3, [r7, #7]
 801722e:	009b      	lsls	r3, r3, #2
 8017230:	f003 0304 	and.w	r3, r3, #4
 8017234:	4413      	add	r3, r2
 8017236:	3314      	adds	r3, #20
 8017238:	69ba      	ldr	r2, [r7, #24]
 801723a:	4413      	add	r3, r2
 801723c:	697a      	ldr	r2, [r7, #20]
 801723e:	429a      	cmp	r2, r3
 8017240:	d006      	beq.n	8017250 <tcp_output_fill_options+0x64>
 8017242:	4b05      	ldr	r3, [pc, #20]	@ (8017258 <tcp_output_fill_options+0x6c>)
 8017244:	f240 7275 	movw	r2, #1909	@ 0x775
 8017248:	4906      	ldr	r1, [pc, #24]	@ (8017264 <tcp_output_fill_options+0x78>)
 801724a:	4805      	ldr	r0, [pc, #20]	@ (8017260 <tcp_output_fill_options+0x74>)
 801724c:	f006 fd9e 	bl	801dd8c <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017250:	bf00      	nop
 8017252:	3720      	adds	r7, #32
 8017254:	46bd      	mov	sp, r7
 8017256:	bd80      	pop	{r7, pc}
 8017258:	08023db0 	.word	0x08023db0
 801725c:	080244e0 	.word	0x080244e0
 8017260:	08023e04 	.word	0x08023e04
 8017264:	080243d8 	.word	0x080243d8

08017268 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017268:	b580      	push	{r7, lr}
 801726a:	b08a      	sub	sp, #40	@ 0x28
 801726c:	af04      	add	r7, sp, #16
 801726e:	60f8      	str	r0, [r7, #12]
 8017270:	60b9      	str	r1, [r7, #8]
 8017272:	607a      	str	r2, [r7, #4]
 8017274:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017276:	68bb      	ldr	r3, [r7, #8]
 8017278:	2b00      	cmp	r3, #0
 801727a:	d106      	bne.n	801728a <tcp_output_control_segment+0x22>
 801727c:	4b1c      	ldr	r3, [pc, #112]	@ (80172f0 <tcp_output_control_segment+0x88>)
 801727e:	f240 7287 	movw	r2, #1927	@ 0x787
 8017282:	491c      	ldr	r1, [pc, #112]	@ (80172f4 <tcp_output_control_segment+0x8c>)
 8017284:	481c      	ldr	r0, [pc, #112]	@ (80172f8 <tcp_output_control_segment+0x90>)
 8017286:	f006 fd81 	bl	801dd8c <iprintf>

  netif = tcp_route(pcb, src, dst);
 801728a:	683a      	ldr	r2, [r7, #0]
 801728c:	6879      	ldr	r1, [r7, #4]
 801728e:	68f8      	ldr	r0, [r7, #12]
 8017290:	f7fe faea 	bl	8015868 <tcp_route>
 8017294:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017296:	693b      	ldr	r3, [r7, #16]
 8017298:	2b00      	cmp	r3, #0
 801729a:	d102      	bne.n	80172a2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801729c:	23fc      	movs	r3, #252	@ 0xfc
 801729e:	75fb      	strb	r3, [r7, #23]
 80172a0:	e01c      	b.n	80172dc <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80172a2:	68fb      	ldr	r3, [r7, #12]
 80172a4:	2b00      	cmp	r3, #0
 80172a6:	d006      	beq.n	80172b6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80172a8:	68fb      	ldr	r3, [r7, #12]
 80172aa:	7adb      	ldrb	r3, [r3, #11]
 80172ac:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80172ae:	68fb      	ldr	r3, [r7, #12]
 80172b0:	7a9b      	ldrb	r3, [r3, #10]
 80172b2:	757b      	strb	r3, [r7, #21]
 80172b4:	e003      	b.n	80172be <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80172b6:	23ff      	movs	r3, #255	@ 0xff
 80172b8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80172ba:	2300      	movs	r3, #0
 80172bc:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80172be:	7dba      	ldrb	r2, [r7, #22]
 80172c0:	693b      	ldr	r3, [r7, #16]
 80172c2:	9302      	str	r3, [sp, #8]
 80172c4:	2306      	movs	r3, #6
 80172c6:	9301      	str	r3, [sp, #4]
 80172c8:	7d7b      	ldrb	r3, [r7, #21]
 80172ca:	9300      	str	r3, [sp, #0]
 80172cc:	4613      	mov	r3, r2
 80172ce:	683a      	ldr	r2, [r7, #0]
 80172d0:	6879      	ldr	r1, [r7, #4]
 80172d2:	68b8      	ldr	r0, [r7, #8]
 80172d4:	f004 fa64 	bl	801b7a0 <ip4_output_if>
 80172d8:	4603      	mov	r3, r0
 80172da:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80172dc:	68b8      	ldr	r0, [r7, #8]
 80172de:	f7f9 fd93 	bl	8010e08 <pbuf_free>
  return err;
 80172e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80172e6:	4618      	mov	r0, r3
 80172e8:	3718      	adds	r7, #24
 80172ea:	46bd      	mov	sp, r7
 80172ec:	bd80      	pop	{r7, pc}
 80172ee:	bf00      	nop
 80172f0:	08023db0 	.word	0x08023db0
 80172f4:	08024508 	.word	0x08024508
 80172f8:	08023e04 	.word	0x08023e04

080172fc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80172fc:	b590      	push	{r4, r7, lr}
 80172fe:	b08b      	sub	sp, #44	@ 0x2c
 8017300:	af04      	add	r7, sp, #16
 8017302:	60f8      	str	r0, [r7, #12]
 8017304:	60b9      	str	r1, [r7, #8]
 8017306:	607a      	str	r2, [r7, #4]
 8017308:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801730a:	683b      	ldr	r3, [r7, #0]
 801730c:	2b00      	cmp	r3, #0
 801730e:	d106      	bne.n	801731e <tcp_rst+0x22>
 8017310:	4b1f      	ldr	r3, [pc, #124]	@ (8017390 <tcp_rst+0x94>)
 8017312:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8017316:	491f      	ldr	r1, [pc, #124]	@ (8017394 <tcp_rst+0x98>)
 8017318:	481f      	ldr	r0, [pc, #124]	@ (8017398 <tcp_rst+0x9c>)
 801731a:	f006 fd37 	bl	801dd8c <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801731e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017320:	2b00      	cmp	r3, #0
 8017322:	d106      	bne.n	8017332 <tcp_rst+0x36>
 8017324:	4b1a      	ldr	r3, [pc, #104]	@ (8017390 <tcp_rst+0x94>)
 8017326:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 801732a:	491c      	ldr	r1, [pc, #112]	@ (801739c <tcp_rst+0xa0>)
 801732c:	481a      	ldr	r0, [pc, #104]	@ (8017398 <tcp_rst+0x9c>)
 801732e:	f006 fd2d 	bl	801dd8c <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017332:	2300      	movs	r3, #0
 8017334:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017336:	f246 0308 	movw	r3, #24584	@ 0x6008
 801733a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801733c:	7dfb      	ldrb	r3, [r7, #23]
 801733e:	b29c      	uxth	r4, r3
 8017340:	68b8      	ldr	r0, [r7, #8]
 8017342:	f7f7 fe58 	bl	800eff6 <lwip_htonl>
 8017346:	4602      	mov	r2, r0
 8017348:	8abb      	ldrh	r3, [r7, #20]
 801734a:	9303      	str	r3, [sp, #12]
 801734c:	2314      	movs	r3, #20
 801734e:	9302      	str	r3, [sp, #8]
 8017350:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017352:	9301      	str	r3, [sp, #4]
 8017354:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017356:	9300      	str	r3, [sp, #0]
 8017358:	4613      	mov	r3, r2
 801735a:	2200      	movs	r2, #0
 801735c:	4621      	mov	r1, r4
 801735e:	6878      	ldr	r0, [r7, #4]
 8017360:	f7ff fe94 	bl	801708c <tcp_output_alloc_header_common>
 8017364:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017366:	693b      	ldr	r3, [r7, #16]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d00c      	beq.n	8017386 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801736c:	7dfb      	ldrb	r3, [r7, #23]
 801736e:	2200      	movs	r2, #0
 8017370:	6939      	ldr	r1, [r7, #16]
 8017372:	68f8      	ldr	r0, [r7, #12]
 8017374:	f7ff ff3a 	bl	80171ec <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801737a:	683a      	ldr	r2, [r7, #0]
 801737c:	6939      	ldr	r1, [r7, #16]
 801737e:	68f8      	ldr	r0, [r7, #12]
 8017380:	f7ff ff72 	bl	8017268 <tcp_output_control_segment>
 8017384:	e000      	b.n	8017388 <tcp_rst+0x8c>
    return;
 8017386:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017388:	371c      	adds	r7, #28
 801738a:	46bd      	mov	sp, r7
 801738c:	bd90      	pop	{r4, r7, pc}
 801738e:	bf00      	nop
 8017390:	08023db0 	.word	0x08023db0
 8017394:	08024534 	.word	0x08024534
 8017398:	08023e04 	.word	0x08023e04
 801739c:	08024550 	.word	0x08024550

080173a0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80173a0:	b590      	push	{r4, r7, lr}
 80173a2:	b087      	sub	sp, #28
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80173a8:	2300      	movs	r3, #0
 80173aa:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80173ac:	2300      	movs	r3, #0
 80173ae:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d106      	bne.n	80173c4 <tcp_send_empty_ack+0x24>
 80173b6:	4b28      	ldr	r3, [pc, #160]	@ (8017458 <tcp_send_empty_ack+0xb8>)
 80173b8:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 80173bc:	4927      	ldr	r1, [pc, #156]	@ (801745c <tcp_send_empty_ack+0xbc>)
 80173be:	4828      	ldr	r0, [pc, #160]	@ (8017460 <tcp_send_empty_ack+0xc0>)
 80173c0:	f006 fce4 	bl	801dd8c <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80173c4:	7dfb      	ldrb	r3, [r7, #23]
 80173c6:	009b      	lsls	r3, r3, #2
 80173c8:	b2db      	uxtb	r3, r3
 80173ca:	f003 0304 	and.w	r3, r3, #4
 80173ce:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80173d0:	7d7b      	ldrb	r3, [r7, #21]
 80173d2:	b29c      	uxth	r4, r3
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80173d8:	4618      	mov	r0, r3
 80173da:	f7f7 fe0c 	bl	800eff6 <lwip_htonl>
 80173de:	4603      	mov	r3, r0
 80173e0:	2200      	movs	r2, #0
 80173e2:	4621      	mov	r1, r4
 80173e4:	6878      	ldr	r0, [r7, #4]
 80173e6:	f7ff fec3 	bl	8017170 <tcp_output_alloc_header>
 80173ea:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80173ec:	693b      	ldr	r3, [r7, #16]
 80173ee:	2b00      	cmp	r3, #0
 80173f0:	d109      	bne.n	8017406 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80173f2:	687b      	ldr	r3, [r7, #4]
 80173f4:	8b5b      	ldrh	r3, [r3, #26]
 80173f6:	f043 0303 	orr.w	r3, r3, #3
 80173fa:	b29a      	uxth	r2, r3
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017400:	f06f 0301 	mvn.w	r3, #1
 8017404:	e023      	b.n	801744e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017406:	7dbb      	ldrb	r3, [r7, #22]
 8017408:	7dfa      	ldrb	r2, [r7, #23]
 801740a:	6939      	ldr	r1, [r7, #16]
 801740c:	6878      	ldr	r0, [r7, #4]
 801740e:	f7ff feed 	bl	80171ec <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017412:	687a      	ldr	r2, [r7, #4]
 8017414:	687b      	ldr	r3, [r7, #4]
 8017416:	3304      	adds	r3, #4
 8017418:	6939      	ldr	r1, [r7, #16]
 801741a:	6878      	ldr	r0, [r7, #4]
 801741c:	f7ff ff24 	bl	8017268 <tcp_output_control_segment>
 8017420:	4603      	mov	r3, r0
 8017422:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017424:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017428:	2b00      	cmp	r3, #0
 801742a:	d007      	beq.n	801743c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801742c:	687b      	ldr	r3, [r7, #4]
 801742e:	8b5b      	ldrh	r3, [r3, #26]
 8017430:	f043 0303 	orr.w	r3, r3, #3
 8017434:	b29a      	uxth	r2, r3
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	835a      	strh	r2, [r3, #26]
 801743a:	e006      	b.n	801744a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	8b5b      	ldrh	r3, [r3, #26]
 8017440:	f023 0303 	bic.w	r3, r3, #3
 8017444:	b29a      	uxth	r2, r3
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801744a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801744e:	4618      	mov	r0, r3
 8017450:	371c      	adds	r7, #28
 8017452:	46bd      	mov	sp, r7
 8017454:	bd90      	pop	{r4, r7, pc}
 8017456:	bf00      	nop
 8017458:	08023db0 	.word	0x08023db0
 801745c:	0802456c 	.word	0x0802456c
 8017460:	08023e04 	.word	0x08023e04

08017464 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017464:	b590      	push	{r4, r7, lr}
 8017466:	b087      	sub	sp, #28
 8017468:	af00      	add	r7, sp, #0
 801746a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801746c:	2300      	movs	r3, #0
 801746e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	2b00      	cmp	r3, #0
 8017474:	d106      	bne.n	8017484 <tcp_keepalive+0x20>
 8017476:	4b18      	ldr	r3, [pc, #96]	@ (80174d8 <tcp_keepalive+0x74>)
 8017478:	f640 0224 	movw	r2, #2084	@ 0x824
 801747c:	4917      	ldr	r1, [pc, #92]	@ (80174dc <tcp_keepalive+0x78>)
 801747e:	4818      	ldr	r0, [pc, #96]	@ (80174e0 <tcp_keepalive+0x7c>)
 8017480:	f006 fc84 	bl	801dd8c <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017484:	7dfb      	ldrb	r3, [r7, #23]
 8017486:	b29c      	uxth	r4, r3
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801748c:	3b01      	subs	r3, #1
 801748e:	4618      	mov	r0, r3
 8017490:	f7f7 fdb1 	bl	800eff6 <lwip_htonl>
 8017494:	4603      	mov	r3, r0
 8017496:	2200      	movs	r2, #0
 8017498:	4621      	mov	r1, r4
 801749a:	6878      	ldr	r0, [r7, #4]
 801749c:	f7ff fe68 	bl	8017170 <tcp_output_alloc_header>
 80174a0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80174a2:	693b      	ldr	r3, [r7, #16]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d102      	bne.n	80174ae <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80174a8:	f04f 33ff 	mov.w	r3, #4294967295
 80174ac:	e010      	b.n	80174d0 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80174ae:	7dfb      	ldrb	r3, [r7, #23]
 80174b0:	2200      	movs	r2, #0
 80174b2:	6939      	ldr	r1, [r7, #16]
 80174b4:	6878      	ldr	r0, [r7, #4]
 80174b6:	f7ff fe99 	bl	80171ec <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80174ba:	687a      	ldr	r2, [r7, #4]
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	3304      	adds	r3, #4
 80174c0:	6939      	ldr	r1, [r7, #16]
 80174c2:	6878      	ldr	r0, [r7, #4]
 80174c4:	f7ff fed0 	bl	8017268 <tcp_output_control_segment>
 80174c8:	4603      	mov	r3, r0
 80174ca:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80174cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80174d0:	4618      	mov	r0, r3
 80174d2:	371c      	adds	r7, #28
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bd90      	pop	{r4, r7, pc}
 80174d8:	08023db0 	.word	0x08023db0
 80174dc:	0802458c 	.word	0x0802458c
 80174e0:	08023e04 	.word	0x08023e04

080174e4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80174e4:	b590      	push	{r4, r7, lr}
 80174e6:	b08b      	sub	sp, #44	@ 0x2c
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80174ec:	2300      	movs	r3, #0
 80174ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	2b00      	cmp	r3, #0
 80174f6:	d106      	bne.n	8017506 <tcp_zero_window_probe+0x22>
 80174f8:	4b4c      	ldr	r3, [pc, #304]	@ (801762c <tcp_zero_window_probe+0x148>)
 80174fa:	f640 024f 	movw	r2, #2127	@ 0x84f
 80174fe:	494c      	ldr	r1, [pc, #304]	@ (8017630 <tcp_zero_window_probe+0x14c>)
 8017500:	484c      	ldr	r0, [pc, #304]	@ (8017634 <tcp_zero_window_probe+0x150>)
 8017502:	f006 fc43 	bl	801dd8c <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017506:	687b      	ldr	r3, [r7, #4]
 8017508:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801750a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801750c:	6a3b      	ldr	r3, [r7, #32]
 801750e:	2b00      	cmp	r3, #0
 8017510:	d101      	bne.n	8017516 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017512:	2300      	movs	r3, #0
 8017514:	e086      	b.n	8017624 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 801751c:	2bff      	cmp	r3, #255	@ 0xff
 801751e:	d007      	beq.n	8017530 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017526:	3301      	adds	r3, #1
 8017528:	b2da      	uxtb	r2, r3
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017530:	6a3b      	ldr	r3, [r7, #32]
 8017532:	68db      	ldr	r3, [r3, #12]
 8017534:	899b      	ldrh	r3, [r3, #12]
 8017536:	b29b      	uxth	r3, r3
 8017538:	4618      	mov	r0, r3
 801753a:	f7f7 fd47 	bl	800efcc <lwip_htons>
 801753e:	4603      	mov	r3, r0
 8017540:	b2db      	uxtb	r3, r3
 8017542:	f003 0301 	and.w	r3, r3, #1
 8017546:	2b00      	cmp	r3, #0
 8017548:	d005      	beq.n	8017556 <tcp_zero_window_probe+0x72>
 801754a:	6a3b      	ldr	r3, [r7, #32]
 801754c:	891b      	ldrh	r3, [r3, #8]
 801754e:	2b00      	cmp	r3, #0
 8017550:	d101      	bne.n	8017556 <tcp_zero_window_probe+0x72>
 8017552:	2301      	movs	r3, #1
 8017554:	e000      	b.n	8017558 <tcp_zero_window_probe+0x74>
 8017556:	2300      	movs	r3, #0
 8017558:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801755a:	7ffb      	ldrb	r3, [r7, #31]
 801755c:	2b00      	cmp	r3, #0
 801755e:	bf0c      	ite	eq
 8017560:	2301      	moveq	r3, #1
 8017562:	2300      	movne	r3, #0
 8017564:	b2db      	uxtb	r3, r3
 8017566:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017568:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801756c:	b299      	uxth	r1, r3
 801756e:	6a3b      	ldr	r3, [r7, #32]
 8017570:	68db      	ldr	r3, [r3, #12]
 8017572:	685b      	ldr	r3, [r3, #4]
 8017574:	8bba      	ldrh	r2, [r7, #28]
 8017576:	6878      	ldr	r0, [r7, #4]
 8017578:	f7ff fdfa 	bl	8017170 <tcp_output_alloc_header>
 801757c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801757e:	69bb      	ldr	r3, [r7, #24]
 8017580:	2b00      	cmp	r3, #0
 8017582:	d102      	bne.n	801758a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017584:	f04f 33ff 	mov.w	r3, #4294967295
 8017588:	e04c      	b.n	8017624 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801758a:	69bb      	ldr	r3, [r7, #24]
 801758c:	685b      	ldr	r3, [r3, #4]
 801758e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017590:	7ffb      	ldrb	r3, [r7, #31]
 8017592:	2b00      	cmp	r3, #0
 8017594:	d011      	beq.n	80175ba <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017596:	697b      	ldr	r3, [r7, #20]
 8017598:	899b      	ldrh	r3, [r3, #12]
 801759a:	b29b      	uxth	r3, r3
 801759c:	b21b      	sxth	r3, r3
 801759e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80175a2:	b21c      	sxth	r4, r3
 80175a4:	2011      	movs	r0, #17
 80175a6:	f7f7 fd11 	bl	800efcc <lwip_htons>
 80175aa:	4603      	mov	r3, r0
 80175ac:	b21b      	sxth	r3, r3
 80175ae:	4323      	orrs	r3, r4
 80175b0:	b21b      	sxth	r3, r3
 80175b2:	b29a      	uxth	r2, r3
 80175b4:	697b      	ldr	r3, [r7, #20]
 80175b6:	819a      	strh	r2, [r3, #12]
 80175b8:	e010      	b.n	80175dc <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80175ba:	69bb      	ldr	r3, [r7, #24]
 80175bc:	685b      	ldr	r3, [r3, #4]
 80175be:	3314      	adds	r3, #20
 80175c0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80175c2:	6a3b      	ldr	r3, [r7, #32]
 80175c4:	6858      	ldr	r0, [r3, #4]
 80175c6:	6a3b      	ldr	r3, [r7, #32]
 80175c8:	685b      	ldr	r3, [r3, #4]
 80175ca:	891a      	ldrh	r2, [r3, #8]
 80175cc:	6a3b      	ldr	r3, [r7, #32]
 80175ce:	891b      	ldrh	r3, [r3, #8]
 80175d0:	1ad3      	subs	r3, r2, r3
 80175d2:	b29b      	uxth	r3, r3
 80175d4:	2201      	movs	r2, #1
 80175d6:	6939      	ldr	r1, [r7, #16]
 80175d8:	f7f9 fe1c 	bl	8011214 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80175dc:	6a3b      	ldr	r3, [r7, #32]
 80175de:	68db      	ldr	r3, [r3, #12]
 80175e0:	685b      	ldr	r3, [r3, #4]
 80175e2:	4618      	mov	r0, r3
 80175e4:	f7f7 fd07 	bl	800eff6 <lwip_htonl>
 80175e8:	4603      	mov	r3, r0
 80175ea:	3301      	adds	r3, #1
 80175ec:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80175ee:	687b      	ldr	r3, [r7, #4]
 80175f0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80175f2:	68fb      	ldr	r3, [r7, #12]
 80175f4:	1ad3      	subs	r3, r2, r3
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	da02      	bge.n	8017600 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	68fa      	ldr	r2, [r7, #12]
 80175fe:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017600:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8017604:	2200      	movs	r2, #0
 8017606:	69b9      	ldr	r1, [r7, #24]
 8017608:	6878      	ldr	r0, [r7, #4]
 801760a:	f7ff fdef 	bl	80171ec <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801760e:	687a      	ldr	r2, [r7, #4]
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	3304      	adds	r3, #4
 8017614:	69b9      	ldr	r1, [r7, #24]
 8017616:	6878      	ldr	r0, [r7, #4]
 8017618:	f7ff fe26 	bl	8017268 <tcp_output_control_segment>
 801761c:	4603      	mov	r3, r0
 801761e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017620:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017624:	4618      	mov	r0, r3
 8017626:	372c      	adds	r7, #44	@ 0x2c
 8017628:	46bd      	mov	sp, r7
 801762a:	bd90      	pop	{r4, r7, pc}
 801762c:	08023db0 	.word	0x08023db0
 8017630:	080245a8 	.word	0x080245a8
 8017634:	08023e04 	.word	0x08023e04

08017638 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017638:	b580      	push	{r7, lr}
 801763a:	b082      	sub	sp, #8
 801763c:	af00      	add	r7, sp, #0
 801763e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017640:	f7fa f830 	bl	80116a4 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017644:	4b0a      	ldr	r3, [pc, #40]	@ (8017670 <tcpip_tcp_timer+0x38>)
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	2b00      	cmp	r3, #0
 801764a:	d103      	bne.n	8017654 <tcpip_tcp_timer+0x1c>
 801764c:	4b09      	ldr	r3, [pc, #36]	@ (8017674 <tcpip_tcp_timer+0x3c>)
 801764e:	681b      	ldr	r3, [r3, #0]
 8017650:	2b00      	cmp	r3, #0
 8017652:	d005      	beq.n	8017660 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017654:	2200      	movs	r2, #0
 8017656:	4908      	ldr	r1, [pc, #32]	@ (8017678 <tcpip_tcp_timer+0x40>)
 8017658:	20fa      	movs	r0, #250	@ 0xfa
 801765a:	f000 f8f3 	bl	8017844 <sys_timeout>
 801765e:	e003      	b.n	8017668 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017660:	4b06      	ldr	r3, [pc, #24]	@ (801767c <tcpip_tcp_timer+0x44>)
 8017662:	2200      	movs	r2, #0
 8017664:	601a      	str	r2, [r3, #0]
  }
}
 8017666:	bf00      	nop
 8017668:	bf00      	nop
 801766a:	3708      	adds	r7, #8
 801766c:	46bd      	mov	sp, r7
 801766e:	bd80      	pop	{r7, pc}
 8017670:	2000ec3c 	.word	0x2000ec3c
 8017674:	2000ec40 	.word	0x2000ec40
 8017678:	08017639 	.word	0x08017639
 801767c:	2000ec88 	.word	0x2000ec88

08017680 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017680:	b580      	push	{r7, lr}
 8017682:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017684:	4b0a      	ldr	r3, [pc, #40]	@ (80176b0 <tcp_timer_needed+0x30>)
 8017686:	681b      	ldr	r3, [r3, #0]
 8017688:	2b00      	cmp	r3, #0
 801768a:	d10f      	bne.n	80176ac <tcp_timer_needed+0x2c>
 801768c:	4b09      	ldr	r3, [pc, #36]	@ (80176b4 <tcp_timer_needed+0x34>)
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	2b00      	cmp	r3, #0
 8017692:	d103      	bne.n	801769c <tcp_timer_needed+0x1c>
 8017694:	4b08      	ldr	r3, [pc, #32]	@ (80176b8 <tcp_timer_needed+0x38>)
 8017696:	681b      	ldr	r3, [r3, #0]
 8017698:	2b00      	cmp	r3, #0
 801769a:	d007      	beq.n	80176ac <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801769c:	4b04      	ldr	r3, [pc, #16]	@ (80176b0 <tcp_timer_needed+0x30>)
 801769e:	2201      	movs	r2, #1
 80176a0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80176a2:	2200      	movs	r2, #0
 80176a4:	4905      	ldr	r1, [pc, #20]	@ (80176bc <tcp_timer_needed+0x3c>)
 80176a6:	20fa      	movs	r0, #250	@ 0xfa
 80176a8:	f000 f8cc 	bl	8017844 <sys_timeout>
  }
}
 80176ac:	bf00      	nop
 80176ae:	bd80      	pop	{r7, pc}
 80176b0:	2000ec88 	.word	0x2000ec88
 80176b4:	2000ec3c 	.word	0x2000ec3c
 80176b8:	2000ec40 	.word	0x2000ec40
 80176bc:	08017639 	.word	0x08017639

080176c0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80176c0:	b580      	push	{r7, lr}
 80176c2:	b086      	sub	sp, #24
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	60f8      	str	r0, [r7, #12]
 80176c8:	60b9      	str	r1, [r7, #8]
 80176ca:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80176cc:	200a      	movs	r0, #10
 80176ce:	f7f8 fc43 	bl	800ff58 <memp_malloc>
 80176d2:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80176d4:	693b      	ldr	r3, [r7, #16]
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d109      	bne.n	80176ee <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80176da:	693b      	ldr	r3, [r7, #16]
 80176dc:	2b00      	cmp	r3, #0
 80176de:	d151      	bne.n	8017784 <sys_timeout_abs+0xc4>
 80176e0:	4b2a      	ldr	r3, [pc, #168]	@ (801778c <sys_timeout_abs+0xcc>)
 80176e2:	22be      	movs	r2, #190	@ 0xbe
 80176e4:	492a      	ldr	r1, [pc, #168]	@ (8017790 <sys_timeout_abs+0xd0>)
 80176e6:	482b      	ldr	r0, [pc, #172]	@ (8017794 <sys_timeout_abs+0xd4>)
 80176e8:	f006 fb50 	bl	801dd8c <iprintf>
    return;
 80176ec:	e04a      	b.n	8017784 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80176ee:	693b      	ldr	r3, [r7, #16]
 80176f0:	2200      	movs	r2, #0
 80176f2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80176f4:	693b      	ldr	r3, [r7, #16]
 80176f6:	68ba      	ldr	r2, [r7, #8]
 80176f8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80176fa:	693b      	ldr	r3, [r7, #16]
 80176fc:	687a      	ldr	r2, [r7, #4]
 80176fe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017700:	693b      	ldr	r3, [r7, #16]
 8017702:	68fa      	ldr	r2, [r7, #12]
 8017704:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017706:	4b24      	ldr	r3, [pc, #144]	@ (8017798 <sys_timeout_abs+0xd8>)
 8017708:	681b      	ldr	r3, [r3, #0]
 801770a:	2b00      	cmp	r3, #0
 801770c:	d103      	bne.n	8017716 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801770e:	4a22      	ldr	r2, [pc, #136]	@ (8017798 <sys_timeout_abs+0xd8>)
 8017710:	693b      	ldr	r3, [r7, #16]
 8017712:	6013      	str	r3, [r2, #0]
    return;
 8017714:	e037      	b.n	8017786 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017716:	693b      	ldr	r3, [r7, #16]
 8017718:	685a      	ldr	r2, [r3, #4]
 801771a:	4b1f      	ldr	r3, [pc, #124]	@ (8017798 <sys_timeout_abs+0xd8>)
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	685b      	ldr	r3, [r3, #4]
 8017720:	1ad3      	subs	r3, r2, r3
 8017722:	0fdb      	lsrs	r3, r3, #31
 8017724:	f003 0301 	and.w	r3, r3, #1
 8017728:	b2db      	uxtb	r3, r3
 801772a:	2b00      	cmp	r3, #0
 801772c:	d007      	beq.n	801773e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801772e:	4b1a      	ldr	r3, [pc, #104]	@ (8017798 <sys_timeout_abs+0xd8>)
 8017730:	681a      	ldr	r2, [r3, #0]
 8017732:	693b      	ldr	r3, [r7, #16]
 8017734:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017736:	4a18      	ldr	r2, [pc, #96]	@ (8017798 <sys_timeout_abs+0xd8>)
 8017738:	693b      	ldr	r3, [r7, #16]
 801773a:	6013      	str	r3, [r2, #0]
 801773c:	e023      	b.n	8017786 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801773e:	4b16      	ldr	r3, [pc, #88]	@ (8017798 <sys_timeout_abs+0xd8>)
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	617b      	str	r3, [r7, #20]
 8017744:	e01a      	b.n	801777c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017746:	697b      	ldr	r3, [r7, #20]
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	2b00      	cmp	r3, #0
 801774c:	d00b      	beq.n	8017766 <sys_timeout_abs+0xa6>
 801774e:	693b      	ldr	r3, [r7, #16]
 8017750:	685a      	ldr	r2, [r3, #4]
 8017752:	697b      	ldr	r3, [r7, #20]
 8017754:	681b      	ldr	r3, [r3, #0]
 8017756:	685b      	ldr	r3, [r3, #4]
 8017758:	1ad3      	subs	r3, r2, r3
 801775a:	0fdb      	lsrs	r3, r3, #31
 801775c:	f003 0301 	and.w	r3, r3, #1
 8017760:	b2db      	uxtb	r3, r3
 8017762:	2b00      	cmp	r3, #0
 8017764:	d007      	beq.n	8017776 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017766:	697b      	ldr	r3, [r7, #20]
 8017768:	681a      	ldr	r2, [r3, #0]
 801776a:	693b      	ldr	r3, [r7, #16]
 801776c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801776e:	697b      	ldr	r3, [r7, #20]
 8017770:	693a      	ldr	r2, [r7, #16]
 8017772:	601a      	str	r2, [r3, #0]
        break;
 8017774:	e007      	b.n	8017786 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017776:	697b      	ldr	r3, [r7, #20]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	617b      	str	r3, [r7, #20]
 801777c:	697b      	ldr	r3, [r7, #20]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d1e1      	bne.n	8017746 <sys_timeout_abs+0x86>
 8017782:	e000      	b.n	8017786 <sys_timeout_abs+0xc6>
    return;
 8017784:	bf00      	nop
      }
    }
  }
}
 8017786:	3718      	adds	r7, #24
 8017788:	46bd      	mov	sp, r7
 801778a:	bd80      	pop	{r7, pc}
 801778c:	080245cc 	.word	0x080245cc
 8017790:	08024600 	.word	0x08024600
 8017794:	08024640 	.word	0x08024640
 8017798:	2000ec80 	.word	0x2000ec80

0801779c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801779c:	b580      	push	{r7, lr}
 801779e:	b086      	sub	sp, #24
 80177a0:	af00      	add	r7, sp, #0
 80177a2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80177a8:	697b      	ldr	r3, [r7, #20]
 80177aa:	685b      	ldr	r3, [r3, #4]
 80177ac:	4798      	blx	r3

  now = sys_now();
 80177ae:	f7ef ff03 	bl	80075b8 <sys_now>
 80177b2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80177b4:	697b      	ldr	r3, [r7, #20]
 80177b6:	681a      	ldr	r2, [r3, #0]
 80177b8:	4b0f      	ldr	r3, [pc, #60]	@ (80177f8 <lwip_cyclic_timer+0x5c>)
 80177ba:	681b      	ldr	r3, [r3, #0]
 80177bc:	4413      	add	r3, r2
 80177be:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80177c0:	68fa      	ldr	r2, [r7, #12]
 80177c2:	693b      	ldr	r3, [r7, #16]
 80177c4:	1ad3      	subs	r3, r2, r3
 80177c6:	0fdb      	lsrs	r3, r3, #31
 80177c8:	f003 0301 	and.w	r3, r3, #1
 80177cc:	b2db      	uxtb	r3, r3
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d009      	beq.n	80177e6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80177d2:	697b      	ldr	r3, [r7, #20]
 80177d4:	681a      	ldr	r2, [r3, #0]
 80177d6:	693b      	ldr	r3, [r7, #16]
 80177d8:	4413      	add	r3, r2
 80177da:	687a      	ldr	r2, [r7, #4]
 80177dc:	4907      	ldr	r1, [pc, #28]	@ (80177fc <lwip_cyclic_timer+0x60>)
 80177de:	4618      	mov	r0, r3
 80177e0:	f7ff ff6e 	bl	80176c0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80177e4:	e004      	b.n	80177f0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80177e6:	687a      	ldr	r2, [r7, #4]
 80177e8:	4904      	ldr	r1, [pc, #16]	@ (80177fc <lwip_cyclic_timer+0x60>)
 80177ea:	68f8      	ldr	r0, [r7, #12]
 80177ec:	f7ff ff68 	bl	80176c0 <sys_timeout_abs>
}
 80177f0:	bf00      	nop
 80177f2:	3718      	adds	r7, #24
 80177f4:	46bd      	mov	sp, r7
 80177f6:	bd80      	pop	{r7, pc}
 80177f8:	2000ec84 	.word	0x2000ec84
 80177fc:	0801779d 	.word	0x0801779d

08017800 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017800:	b580      	push	{r7, lr}
 8017802:	b082      	sub	sp, #8
 8017804:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017806:	2301      	movs	r3, #1
 8017808:	607b      	str	r3, [r7, #4]
 801780a:	e00e      	b.n	801782a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801780c:	4a0b      	ldr	r2, [pc, #44]	@ (801783c <sys_timeouts_init+0x3c>)
 801780e:	687b      	ldr	r3, [r7, #4]
 8017810:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	00db      	lsls	r3, r3, #3
 8017818:	4a08      	ldr	r2, [pc, #32]	@ (801783c <sys_timeouts_init+0x3c>)
 801781a:	4413      	add	r3, r2
 801781c:	461a      	mov	r2, r3
 801781e:	4908      	ldr	r1, [pc, #32]	@ (8017840 <sys_timeouts_init+0x40>)
 8017820:	f000 f810 	bl	8017844 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017824:	687b      	ldr	r3, [r7, #4]
 8017826:	3301      	adds	r3, #1
 8017828:	607b      	str	r3, [r7, #4]
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	2b05      	cmp	r3, #5
 801782e:	d9ed      	bls.n	801780c <sys_timeouts_init+0xc>
  }
}
 8017830:	bf00      	nop
 8017832:	bf00      	nop
 8017834:	3708      	adds	r7, #8
 8017836:	46bd      	mov	sp, r7
 8017838:	bd80      	pop	{r7, pc}
 801783a:	bf00      	nop
 801783c:	08025710 	.word	0x08025710
 8017840:	0801779d 	.word	0x0801779d

08017844 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b086      	sub	sp, #24
 8017848:	af00      	add	r7, sp, #0
 801784a:	60f8      	str	r0, [r7, #12]
 801784c:	60b9      	str	r1, [r7, #8]
 801784e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017850:	68fb      	ldr	r3, [r7, #12]
 8017852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8017856:	d306      	bcc.n	8017866 <sys_timeout+0x22>
 8017858:	4b0a      	ldr	r3, [pc, #40]	@ (8017884 <sys_timeout+0x40>)
 801785a:	f240 1229 	movw	r2, #297	@ 0x129
 801785e:	490a      	ldr	r1, [pc, #40]	@ (8017888 <sys_timeout+0x44>)
 8017860:	480a      	ldr	r0, [pc, #40]	@ (801788c <sys_timeout+0x48>)
 8017862:	f006 fa93 	bl	801dd8c <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017866:	f7ef fea7 	bl	80075b8 <sys_now>
 801786a:	4602      	mov	r2, r0
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	4413      	add	r3, r2
 8017870:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017872:	687a      	ldr	r2, [r7, #4]
 8017874:	68b9      	ldr	r1, [r7, #8]
 8017876:	6978      	ldr	r0, [r7, #20]
 8017878:	f7ff ff22 	bl	80176c0 <sys_timeout_abs>
#endif
}
 801787c:	bf00      	nop
 801787e:	3718      	adds	r7, #24
 8017880:	46bd      	mov	sp, r7
 8017882:	bd80      	pop	{r7, pc}
 8017884:	080245cc 	.word	0x080245cc
 8017888:	08024668 	.word	0x08024668
 801788c:	08024640 	.word	0x08024640

08017890 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017890:	b580      	push	{r7, lr}
 8017892:	b084      	sub	sp, #16
 8017894:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017896:	f7ef fe8f 	bl	80075b8 <sys_now>
 801789a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801789c:	4b17      	ldr	r3, [pc, #92]	@ (80178fc <sys_check_timeouts+0x6c>)
 801789e:	681b      	ldr	r3, [r3, #0]
 80178a0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 80178a2:	68bb      	ldr	r3, [r7, #8]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d022      	beq.n	80178ee <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 80178a8:	68bb      	ldr	r3, [r7, #8]
 80178aa:	685b      	ldr	r3, [r3, #4]
 80178ac:	68fa      	ldr	r2, [r7, #12]
 80178ae:	1ad3      	subs	r3, r2, r3
 80178b0:	0fdb      	lsrs	r3, r3, #31
 80178b2:	f003 0301 	and.w	r3, r3, #1
 80178b6:	b2db      	uxtb	r3, r3
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d11a      	bne.n	80178f2 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 80178bc:	68bb      	ldr	r3, [r7, #8]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	4a0e      	ldr	r2, [pc, #56]	@ (80178fc <sys_check_timeouts+0x6c>)
 80178c2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 80178c4:	68bb      	ldr	r3, [r7, #8]
 80178c6:	689b      	ldr	r3, [r3, #8]
 80178c8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 80178ca:	68bb      	ldr	r3, [r7, #8]
 80178cc:	68db      	ldr	r3, [r3, #12]
 80178ce:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 80178d0:	68bb      	ldr	r3, [r7, #8]
 80178d2:	685b      	ldr	r3, [r3, #4]
 80178d4:	4a0a      	ldr	r2, [pc, #40]	@ (8017900 <sys_check_timeouts+0x70>)
 80178d6:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80178d8:	68b9      	ldr	r1, [r7, #8]
 80178da:	200a      	movs	r0, #10
 80178dc:	f7f8 fbb2 	bl	8010044 <memp_free>
    if (handler != NULL) {
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	d0da      	beq.n	801789c <sys_check_timeouts+0xc>
      handler(arg);
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	6838      	ldr	r0, [r7, #0]
 80178ea:	4798      	blx	r3
  do {
 80178ec:	e7d6      	b.n	801789c <sys_check_timeouts+0xc>
      return;
 80178ee:	bf00      	nop
 80178f0:	e000      	b.n	80178f4 <sys_check_timeouts+0x64>
      return;
 80178f2:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80178f4:	3710      	adds	r7, #16
 80178f6:	46bd      	mov	sp, r7
 80178f8:	bd80      	pop	{r7, pc}
 80178fa:	bf00      	nop
 80178fc:	2000ec80 	.word	0x2000ec80
 8017900:	2000ec84 	.word	0x2000ec84

08017904 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8017904:	b580      	push	{r7, lr}
 8017906:	b082      	sub	sp, #8
 8017908:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801790a:	4b16      	ldr	r3, [pc, #88]	@ (8017964 <sys_timeouts_sleeptime+0x60>)
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	2b00      	cmp	r3, #0
 8017910:	d102      	bne.n	8017918 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8017912:	f04f 33ff 	mov.w	r3, #4294967295
 8017916:	e020      	b.n	801795a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8017918:	f7ef fe4e 	bl	80075b8 <sys_now>
 801791c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801791e:	4b11      	ldr	r3, [pc, #68]	@ (8017964 <sys_timeouts_sleeptime+0x60>)
 8017920:	681b      	ldr	r3, [r3, #0]
 8017922:	685a      	ldr	r2, [r3, #4]
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	1ad3      	subs	r3, r2, r3
 8017928:	0fdb      	lsrs	r3, r3, #31
 801792a:	f003 0301 	and.w	r3, r3, #1
 801792e:	b2db      	uxtb	r3, r3
 8017930:	2b00      	cmp	r3, #0
 8017932:	d001      	beq.n	8017938 <sys_timeouts_sleeptime+0x34>
    return 0;
 8017934:	2300      	movs	r3, #0
 8017936:	e010      	b.n	801795a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8017938:	4b0a      	ldr	r3, [pc, #40]	@ (8017964 <sys_timeouts_sleeptime+0x60>)
 801793a:	681b      	ldr	r3, [r3, #0]
 801793c:	685a      	ldr	r2, [r3, #4]
 801793e:	687b      	ldr	r3, [r7, #4]
 8017940:	1ad3      	subs	r3, r2, r3
 8017942:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8017944:	683b      	ldr	r3, [r7, #0]
 8017946:	2b00      	cmp	r3, #0
 8017948:	da06      	bge.n	8017958 <sys_timeouts_sleeptime+0x54>
 801794a:	4b07      	ldr	r3, [pc, #28]	@ (8017968 <sys_timeouts_sleeptime+0x64>)
 801794c:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8017950:	4906      	ldr	r1, [pc, #24]	@ (801796c <sys_timeouts_sleeptime+0x68>)
 8017952:	4807      	ldr	r0, [pc, #28]	@ (8017970 <sys_timeouts_sleeptime+0x6c>)
 8017954:	f006 fa1a 	bl	801dd8c <iprintf>
    return ret;
 8017958:	683b      	ldr	r3, [r7, #0]
  }
}
 801795a:	4618      	mov	r0, r3
 801795c:	3708      	adds	r7, #8
 801795e:	46bd      	mov	sp, r7
 8017960:	bd80      	pop	{r7, pc}
 8017962:	bf00      	nop
 8017964:	2000ec80 	.word	0x2000ec80
 8017968:	080245cc 	.word	0x080245cc
 801796c:	080246a0 	.word	0x080246a0
 8017970:	08024640 	.word	0x08024640

08017974 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017974:	b580      	push	{r7, lr}
 8017976:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017978:	f005 fa20 	bl	801cdbc <rand>
 801797c:	4603      	mov	r3, r0
 801797e:	b29b      	uxth	r3, r3
 8017980:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017984:	b29b      	uxth	r3, r3
 8017986:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 801798a:	b29a      	uxth	r2, r3
 801798c:	4b01      	ldr	r3, [pc, #4]	@ (8017994 <udp_init+0x20>)
 801798e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017990:	bf00      	nop
 8017992:	bd80      	pop	{r7, pc}
 8017994:	2000002c 	.word	0x2000002c

08017998 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8017998:	b480      	push	{r7}
 801799a:	b083      	sub	sp, #12
 801799c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801799e:	2300      	movs	r3, #0
 80179a0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 80179a2:	4b17      	ldr	r3, [pc, #92]	@ (8017a00 <udp_new_port+0x68>)
 80179a4:	881b      	ldrh	r3, [r3, #0]
 80179a6:	1c5a      	adds	r2, r3, #1
 80179a8:	b291      	uxth	r1, r2
 80179aa:	4a15      	ldr	r2, [pc, #84]	@ (8017a00 <udp_new_port+0x68>)
 80179ac:	8011      	strh	r1, [r2, #0]
 80179ae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80179b2:	4293      	cmp	r3, r2
 80179b4:	d103      	bne.n	80179be <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80179b6:	4b12      	ldr	r3, [pc, #72]	@ (8017a00 <udp_new_port+0x68>)
 80179b8:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 80179bc:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80179be:	4b11      	ldr	r3, [pc, #68]	@ (8017a04 <udp_new_port+0x6c>)
 80179c0:	681b      	ldr	r3, [r3, #0]
 80179c2:	603b      	str	r3, [r7, #0]
 80179c4:	e011      	b.n	80179ea <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80179c6:	683b      	ldr	r3, [r7, #0]
 80179c8:	8a5a      	ldrh	r2, [r3, #18]
 80179ca:	4b0d      	ldr	r3, [pc, #52]	@ (8017a00 <udp_new_port+0x68>)
 80179cc:	881b      	ldrh	r3, [r3, #0]
 80179ce:	429a      	cmp	r2, r3
 80179d0:	d108      	bne.n	80179e4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80179d2:	88fb      	ldrh	r3, [r7, #6]
 80179d4:	3301      	adds	r3, #1
 80179d6:	80fb      	strh	r3, [r7, #6]
 80179d8:	88fb      	ldrh	r3, [r7, #6]
 80179da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80179de:	d3e0      	bcc.n	80179a2 <udp_new_port+0xa>
        return 0;
 80179e0:	2300      	movs	r3, #0
 80179e2:	e007      	b.n	80179f4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80179e4:	683b      	ldr	r3, [r7, #0]
 80179e6:	68db      	ldr	r3, [r3, #12]
 80179e8:	603b      	str	r3, [r7, #0]
 80179ea:	683b      	ldr	r3, [r7, #0]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d1ea      	bne.n	80179c6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80179f0:	4b03      	ldr	r3, [pc, #12]	@ (8017a00 <udp_new_port+0x68>)
 80179f2:	881b      	ldrh	r3, [r3, #0]
}
 80179f4:	4618      	mov	r0, r3
 80179f6:	370c      	adds	r7, #12
 80179f8:	46bd      	mov	sp, r7
 80179fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179fe:	4770      	bx	lr
 8017a00:	2000002c 	.word	0x2000002c
 8017a04:	2000ec8c 	.word	0x2000ec8c

08017a08 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017a08:	b580      	push	{r7, lr}
 8017a0a:	b084      	sub	sp, #16
 8017a0c:	af00      	add	r7, sp, #0
 8017a0e:	60f8      	str	r0, [r7, #12]
 8017a10:	60b9      	str	r1, [r7, #8]
 8017a12:	4613      	mov	r3, r2
 8017a14:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017a16:	68fb      	ldr	r3, [r7, #12]
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d105      	bne.n	8017a28 <udp_input_local_match+0x20>
 8017a1c:	4b27      	ldr	r3, [pc, #156]	@ (8017abc <udp_input_local_match+0xb4>)
 8017a1e:	2287      	movs	r2, #135	@ 0x87
 8017a20:	4927      	ldr	r1, [pc, #156]	@ (8017ac0 <udp_input_local_match+0xb8>)
 8017a22:	4828      	ldr	r0, [pc, #160]	@ (8017ac4 <udp_input_local_match+0xbc>)
 8017a24:	f006 f9b2 	bl	801dd8c <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017a28:	68bb      	ldr	r3, [r7, #8]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d105      	bne.n	8017a3a <udp_input_local_match+0x32>
 8017a2e:	4b23      	ldr	r3, [pc, #140]	@ (8017abc <udp_input_local_match+0xb4>)
 8017a30:	2288      	movs	r2, #136	@ 0x88
 8017a32:	4925      	ldr	r1, [pc, #148]	@ (8017ac8 <udp_input_local_match+0xc0>)
 8017a34:	4823      	ldr	r0, [pc, #140]	@ (8017ac4 <udp_input_local_match+0xbc>)
 8017a36:	f006 f9a9 	bl	801dd8c <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	7a1b      	ldrb	r3, [r3, #8]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d00b      	beq.n	8017a5a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017a42:	68fb      	ldr	r3, [r7, #12]
 8017a44:	7a1a      	ldrb	r2, [r3, #8]
 8017a46:	4b21      	ldr	r3, [pc, #132]	@ (8017acc <udp_input_local_match+0xc4>)
 8017a48:	685b      	ldr	r3, [r3, #4]
 8017a4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8017a4e:	3301      	adds	r3, #1
 8017a50:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017a52:	429a      	cmp	r2, r3
 8017a54:	d001      	beq.n	8017a5a <udp_input_local_match+0x52>
    return 0;
 8017a56:	2300      	movs	r3, #0
 8017a58:	e02b      	b.n	8017ab2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017a5a:	79fb      	ldrb	r3, [r7, #7]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d018      	beq.n	8017a92 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017a60:	68fb      	ldr	r3, [r7, #12]
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d013      	beq.n	8017a8e <udp_input_local_match+0x86>
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	2b00      	cmp	r3, #0
 8017a6c:	d00f      	beq.n	8017a8e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017a6e:	4b17      	ldr	r3, [pc, #92]	@ (8017acc <udp_input_local_match+0xc4>)
 8017a70:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a76:	d00a      	beq.n	8017a8e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017a78:	68fb      	ldr	r3, [r7, #12]
 8017a7a:	681a      	ldr	r2, [r3, #0]
 8017a7c:	4b13      	ldr	r3, [pc, #76]	@ (8017acc <udp_input_local_match+0xc4>)
 8017a7e:	695b      	ldr	r3, [r3, #20]
 8017a80:	405a      	eors	r2, r3
 8017a82:	68bb      	ldr	r3, [r7, #8]
 8017a84:	3308      	adds	r3, #8
 8017a86:	681b      	ldr	r3, [r3, #0]
 8017a88:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017a8a:	2b00      	cmp	r3, #0
 8017a8c:	d110      	bne.n	8017ab0 <udp_input_local_match+0xa8>
          return 1;
 8017a8e:	2301      	movs	r3, #1
 8017a90:	e00f      	b.n	8017ab2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017a92:	68fb      	ldr	r3, [r7, #12]
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d009      	beq.n	8017aac <udp_input_local_match+0xa4>
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	681b      	ldr	r3, [r3, #0]
 8017a9c:	2b00      	cmp	r3, #0
 8017a9e:	d005      	beq.n	8017aac <udp_input_local_match+0xa4>
 8017aa0:	68fb      	ldr	r3, [r7, #12]
 8017aa2:	681a      	ldr	r2, [r3, #0]
 8017aa4:	4b09      	ldr	r3, [pc, #36]	@ (8017acc <udp_input_local_match+0xc4>)
 8017aa6:	695b      	ldr	r3, [r3, #20]
 8017aa8:	429a      	cmp	r2, r3
 8017aaa:	d101      	bne.n	8017ab0 <udp_input_local_match+0xa8>
        return 1;
 8017aac:	2301      	movs	r3, #1
 8017aae:	e000      	b.n	8017ab2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017ab0:	2300      	movs	r3, #0
}
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	3710      	adds	r7, #16
 8017ab6:	46bd      	mov	sp, r7
 8017ab8:	bd80      	pop	{r7, pc}
 8017aba:	bf00      	nop
 8017abc:	080246b4 	.word	0x080246b4
 8017ac0:	080246e4 	.word	0x080246e4
 8017ac4:	08024708 	.word	0x08024708
 8017ac8:	08024730 	.word	0x08024730
 8017acc:	2000b370 	.word	0x2000b370

08017ad0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017ad0:	b590      	push	{r4, r7, lr}
 8017ad2:	b08d      	sub	sp, #52	@ 0x34
 8017ad4:	af02      	add	r7, sp, #8
 8017ad6:	6078      	str	r0, [r7, #4]
 8017ad8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017ada:	2300      	movs	r3, #0
 8017adc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d105      	bne.n	8017af0 <udp_input+0x20>
 8017ae4:	4b7c      	ldr	r3, [pc, #496]	@ (8017cd8 <udp_input+0x208>)
 8017ae6:	22cf      	movs	r2, #207	@ 0xcf
 8017ae8:	497c      	ldr	r1, [pc, #496]	@ (8017cdc <udp_input+0x20c>)
 8017aea:	487d      	ldr	r0, [pc, #500]	@ (8017ce0 <udp_input+0x210>)
 8017aec:	f006 f94e 	bl	801dd8c <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017af0:	683b      	ldr	r3, [r7, #0]
 8017af2:	2b00      	cmp	r3, #0
 8017af4:	d105      	bne.n	8017b02 <udp_input+0x32>
 8017af6:	4b78      	ldr	r3, [pc, #480]	@ (8017cd8 <udp_input+0x208>)
 8017af8:	22d0      	movs	r2, #208	@ 0xd0
 8017afa:	497a      	ldr	r1, [pc, #488]	@ (8017ce4 <udp_input+0x214>)
 8017afc:	4878      	ldr	r0, [pc, #480]	@ (8017ce0 <udp_input+0x210>)
 8017afe:	f006 f945 	bl	801dd8c <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	895b      	ldrh	r3, [r3, #10]
 8017b06:	2b07      	cmp	r3, #7
 8017b08:	d803      	bhi.n	8017b12 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017b0a:	6878      	ldr	r0, [r7, #4]
 8017b0c:	f7f9 f97c 	bl	8010e08 <pbuf_free>
    goto end;
 8017b10:	e0de      	b.n	8017cd0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	685b      	ldr	r3, [r3, #4]
 8017b16:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017b18:	4b73      	ldr	r3, [pc, #460]	@ (8017ce8 <udp_input+0x218>)
 8017b1a:	695b      	ldr	r3, [r3, #20]
 8017b1c:	4a72      	ldr	r2, [pc, #456]	@ (8017ce8 <udp_input+0x218>)
 8017b1e:	6812      	ldr	r2, [r2, #0]
 8017b20:	4611      	mov	r1, r2
 8017b22:	4618      	mov	r0, r3
 8017b24:	f003 ff14 	bl	801b950 <ip4_addr_isbroadcast_u32>
 8017b28:	4603      	mov	r3, r0
 8017b2a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017b2c:	697b      	ldr	r3, [r7, #20]
 8017b2e:	881b      	ldrh	r3, [r3, #0]
 8017b30:	b29b      	uxth	r3, r3
 8017b32:	4618      	mov	r0, r3
 8017b34:	f7f7 fa4a 	bl	800efcc <lwip_htons>
 8017b38:	4603      	mov	r3, r0
 8017b3a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017b3c:	697b      	ldr	r3, [r7, #20]
 8017b3e:	885b      	ldrh	r3, [r3, #2]
 8017b40:	b29b      	uxth	r3, r3
 8017b42:	4618      	mov	r0, r3
 8017b44:	f7f7 fa42 	bl	800efcc <lwip_htons>
 8017b48:	4603      	mov	r3, r0
 8017b4a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017b4c:	2300      	movs	r3, #0
 8017b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 8017b50:	2300      	movs	r3, #0
 8017b52:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017b54:	2300      	movs	r3, #0
 8017b56:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017b58:	4b64      	ldr	r3, [pc, #400]	@ (8017cec <udp_input+0x21c>)
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8017b5e:	e054      	b.n	8017c0a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b62:	8a5b      	ldrh	r3, [r3, #18]
 8017b64:	89fa      	ldrh	r2, [r7, #14]
 8017b66:	429a      	cmp	r2, r3
 8017b68:	d14a      	bne.n	8017c00 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017b6a:	7cfb      	ldrb	r3, [r7, #19]
 8017b6c:	461a      	mov	r2, r3
 8017b6e:	6839      	ldr	r1, [r7, #0]
 8017b70:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017b72:	f7ff ff49 	bl	8017a08 <udp_input_local_match>
 8017b76:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d041      	beq.n	8017c00 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b7e:	7c1b      	ldrb	r3, [r3, #16]
 8017b80:	f003 0304 	and.w	r3, r3, #4
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	d11d      	bne.n	8017bc4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017b88:	69fb      	ldr	r3, [r7, #28]
 8017b8a:	2b00      	cmp	r3, #0
 8017b8c:	d102      	bne.n	8017b94 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b90:	61fb      	str	r3, [r7, #28]
 8017b92:	e017      	b.n	8017bc4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017b94:	7cfb      	ldrb	r3, [r7, #19]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d014      	beq.n	8017bc4 <udp_input+0xf4>
 8017b9a:	4b53      	ldr	r3, [pc, #332]	@ (8017ce8 <udp_input+0x218>)
 8017b9c:	695b      	ldr	r3, [r3, #20]
 8017b9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017ba2:	d10f      	bne.n	8017bc4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017ba4:	69fb      	ldr	r3, [r7, #28]
 8017ba6:	681a      	ldr	r2, [r3, #0]
 8017ba8:	683b      	ldr	r3, [r7, #0]
 8017baa:	3304      	adds	r3, #4
 8017bac:	681b      	ldr	r3, [r3, #0]
 8017bae:	429a      	cmp	r2, r3
 8017bb0:	d008      	beq.n	8017bc4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bb4:	681a      	ldr	r2, [r3, #0]
 8017bb6:	683b      	ldr	r3, [r7, #0]
 8017bb8:	3304      	adds	r3, #4
 8017bba:	681b      	ldr	r3, [r3, #0]
 8017bbc:	429a      	cmp	r2, r3
 8017bbe:	d101      	bne.n	8017bc4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bc2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bc6:	8a9b      	ldrh	r3, [r3, #20]
 8017bc8:	8a3a      	ldrh	r2, [r7, #16]
 8017bca:	429a      	cmp	r2, r3
 8017bcc:	d118      	bne.n	8017c00 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bd0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d005      	beq.n	8017be2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bd8:	685a      	ldr	r2, [r3, #4]
 8017bda:	4b43      	ldr	r3, [pc, #268]	@ (8017ce8 <udp_input+0x218>)
 8017bdc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017bde:	429a      	cmp	r2, r3
 8017be0:	d10e      	bne.n	8017c00 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017be2:	6a3b      	ldr	r3, [r7, #32]
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d014      	beq.n	8017c12 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bea:	68da      	ldr	r2, [r3, #12]
 8017bec:	6a3b      	ldr	r3, [r7, #32]
 8017bee:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017bf0:	4b3e      	ldr	r3, [pc, #248]	@ (8017cec <udp_input+0x21c>)
 8017bf2:	681a      	ldr	r2, [r3, #0]
 8017bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bf6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017bf8:	4a3c      	ldr	r2, [pc, #240]	@ (8017cec <udp_input+0x21c>)
 8017bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017bfc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017bfe:	e008      	b.n	8017c12 <udp_input+0x142>
      }
    }

    prev = pcb;
 8017c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c02:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c06:	68db      	ldr	r3, [r3, #12]
 8017c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8017c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d1a7      	bne.n	8017b60 <udp_input+0x90>
 8017c10:	e000      	b.n	8017c14 <udp_input+0x144>
        break;
 8017c12:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	d101      	bne.n	8017c1e <udp_input+0x14e>
    pcb = uncon_pcb;
 8017c1a:	69fb      	ldr	r3, [r7, #28]
 8017c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c20:	2b00      	cmp	r3, #0
 8017c22:	d002      	beq.n	8017c2a <udp_input+0x15a>
    for_us = 1;
 8017c24:	2301      	movs	r3, #1
 8017c26:	76fb      	strb	r3, [r7, #27]
 8017c28:	e00a      	b.n	8017c40 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017c2a:	683b      	ldr	r3, [r7, #0]
 8017c2c:	3304      	adds	r3, #4
 8017c2e:	681a      	ldr	r2, [r3, #0]
 8017c30:	4b2d      	ldr	r3, [pc, #180]	@ (8017ce8 <udp_input+0x218>)
 8017c32:	695b      	ldr	r3, [r3, #20]
 8017c34:	429a      	cmp	r2, r3
 8017c36:	bf0c      	ite	eq
 8017c38:	2301      	moveq	r3, #1
 8017c3a:	2300      	movne	r3, #0
 8017c3c:	b2db      	uxtb	r3, r3
 8017c3e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017c40:	7efb      	ldrb	r3, [r7, #27]
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d041      	beq.n	8017cca <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8017c46:	2108      	movs	r1, #8
 8017c48:	6878      	ldr	r0, [r7, #4]
 8017c4a:	f7f9 f825 	bl	8010c98 <pbuf_remove_header>
 8017c4e:	4603      	mov	r3, r0
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d00a      	beq.n	8017c6a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8017c54:	4b20      	ldr	r3, [pc, #128]	@ (8017cd8 <udp_input+0x208>)
 8017c56:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8017c5a:	4925      	ldr	r1, [pc, #148]	@ (8017cf0 <udp_input+0x220>)
 8017c5c:	4820      	ldr	r0, [pc, #128]	@ (8017ce0 <udp_input+0x210>)
 8017c5e:	f006 f895 	bl	801dd8c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8017c62:	6878      	ldr	r0, [r7, #4]
 8017c64:	f7f9 f8d0 	bl	8010e08 <pbuf_free>
      goto end;
 8017c68:	e032      	b.n	8017cd0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d012      	beq.n	8017c96 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c72:	699b      	ldr	r3, [r3, #24]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d00a      	beq.n	8017c8e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8017c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c7a:	699c      	ldr	r4, [r3, #24]
 8017c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017c7e:	69d8      	ldr	r0, [r3, #28]
 8017c80:	8a3b      	ldrh	r3, [r7, #16]
 8017c82:	9300      	str	r3, [sp, #0]
 8017c84:	4b1b      	ldr	r3, [pc, #108]	@ (8017cf4 <udp_input+0x224>)
 8017c86:	687a      	ldr	r2, [r7, #4]
 8017c88:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017c8a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8017c8c:	e021      	b.n	8017cd2 <udp_input+0x202>
        pbuf_free(p);
 8017c8e:	6878      	ldr	r0, [r7, #4]
 8017c90:	f7f9 f8ba 	bl	8010e08 <pbuf_free>
        goto end;
 8017c94:	e01c      	b.n	8017cd0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8017c96:	7cfb      	ldrb	r3, [r7, #19]
 8017c98:	2b00      	cmp	r3, #0
 8017c9a:	d112      	bne.n	8017cc2 <udp_input+0x1f2>
 8017c9c:	4b12      	ldr	r3, [pc, #72]	@ (8017ce8 <udp_input+0x218>)
 8017c9e:	695b      	ldr	r3, [r3, #20]
 8017ca0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017ca4:	2be0      	cmp	r3, #224	@ 0xe0
 8017ca6:	d00c      	beq.n	8017cc2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8017ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8017ce8 <udp_input+0x218>)
 8017caa:	899b      	ldrh	r3, [r3, #12]
 8017cac:	3308      	adds	r3, #8
 8017cae:	b29b      	uxth	r3, r3
 8017cb0:	b21b      	sxth	r3, r3
 8017cb2:	4619      	mov	r1, r3
 8017cb4:	6878      	ldr	r0, [r7, #4]
 8017cb6:	f7f9 f862 	bl	8010d7e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8017cba:	2103      	movs	r1, #3
 8017cbc:	6878      	ldr	r0, [r7, #4]
 8017cbe:	f003 fb09 	bl	801b2d4 <icmp_dest_unreach>
      pbuf_free(p);
 8017cc2:	6878      	ldr	r0, [r7, #4]
 8017cc4:	f7f9 f8a0 	bl	8010e08 <pbuf_free>
  return;
 8017cc8:	e003      	b.n	8017cd2 <udp_input+0x202>
    pbuf_free(p);
 8017cca:	6878      	ldr	r0, [r7, #4]
 8017ccc:	f7f9 f89c 	bl	8010e08 <pbuf_free>
  return;
 8017cd0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017cd2:	372c      	adds	r7, #44	@ 0x2c
 8017cd4:	46bd      	mov	sp, r7
 8017cd6:	bd90      	pop	{r4, r7, pc}
 8017cd8:	080246b4 	.word	0x080246b4
 8017cdc:	08024758 	.word	0x08024758
 8017ce0:	08024708 	.word	0x08024708
 8017ce4:	08024770 	.word	0x08024770
 8017ce8:	2000b370 	.word	0x2000b370
 8017cec:	2000ec8c 	.word	0x2000ec8c
 8017cf0:	0802478c 	.word	0x0802478c
 8017cf4:	2000b380 	.word	0x2000b380

08017cf8 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8017cf8:	b580      	push	{r7, lr}
 8017cfa:	b082      	sub	sp, #8
 8017cfc:	af00      	add	r7, sp, #0
 8017cfe:	6078      	str	r0, [r7, #4]
 8017d00:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	2b00      	cmp	r3, #0
 8017d06:	d109      	bne.n	8017d1c <udp_send+0x24>
 8017d08:	4b11      	ldr	r3, [pc, #68]	@ (8017d50 <udp_send+0x58>)
 8017d0a:	f240 12d5 	movw	r2, #469	@ 0x1d5
 8017d0e:	4911      	ldr	r1, [pc, #68]	@ (8017d54 <udp_send+0x5c>)
 8017d10:	4811      	ldr	r0, [pc, #68]	@ (8017d58 <udp_send+0x60>)
 8017d12:	f006 f83b 	bl	801dd8c <iprintf>
 8017d16:	f06f 030f 	mvn.w	r3, #15
 8017d1a:	e015      	b.n	8017d48 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8017d1c:	683b      	ldr	r3, [r7, #0]
 8017d1e:	2b00      	cmp	r3, #0
 8017d20:	d109      	bne.n	8017d36 <udp_send+0x3e>
 8017d22:	4b0b      	ldr	r3, [pc, #44]	@ (8017d50 <udp_send+0x58>)
 8017d24:	f44f 72eb 	mov.w	r2, #470	@ 0x1d6
 8017d28:	490c      	ldr	r1, [pc, #48]	@ (8017d5c <udp_send+0x64>)
 8017d2a:	480b      	ldr	r0, [pc, #44]	@ (8017d58 <udp_send+0x60>)
 8017d2c:	f006 f82e 	bl	801dd8c <iprintf>
 8017d30:	f06f 030f 	mvn.w	r3, #15
 8017d34:	e008      	b.n	8017d48 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	1d1a      	adds	r2, r3, #4
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	8a9b      	ldrh	r3, [r3, #20]
 8017d3e:	6839      	ldr	r1, [r7, #0]
 8017d40:	6878      	ldr	r0, [r7, #4]
 8017d42:	f000 f80d 	bl	8017d60 <udp_sendto>
 8017d46:	4603      	mov	r3, r0
}
 8017d48:	4618      	mov	r0, r3
 8017d4a:	3708      	adds	r7, #8
 8017d4c:	46bd      	mov	sp, r7
 8017d4e:	bd80      	pop	{r7, pc}
 8017d50:	080246b4 	.word	0x080246b4
 8017d54:	080247a8 	.word	0x080247a8
 8017d58:	08024708 	.word	0x08024708
 8017d5c:	080247c0 	.word	0x080247c0

08017d60 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8017d60:	b580      	push	{r7, lr}
 8017d62:	b088      	sub	sp, #32
 8017d64:	af02      	add	r7, sp, #8
 8017d66:	60f8      	str	r0, [r7, #12]
 8017d68:	60b9      	str	r1, [r7, #8]
 8017d6a:	607a      	str	r2, [r7, #4]
 8017d6c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d109      	bne.n	8017d88 <udp_sendto+0x28>
 8017d74:	4b23      	ldr	r3, [pc, #140]	@ (8017e04 <udp_sendto+0xa4>)
 8017d76:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8017d7a:	4923      	ldr	r1, [pc, #140]	@ (8017e08 <udp_sendto+0xa8>)
 8017d7c:	4823      	ldr	r0, [pc, #140]	@ (8017e0c <udp_sendto+0xac>)
 8017d7e:	f006 f805 	bl	801dd8c <iprintf>
 8017d82:	f06f 030f 	mvn.w	r3, #15
 8017d86:	e038      	b.n	8017dfa <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8017d88:	68bb      	ldr	r3, [r7, #8]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d109      	bne.n	8017da2 <udp_sendto+0x42>
 8017d8e:	4b1d      	ldr	r3, [pc, #116]	@ (8017e04 <udp_sendto+0xa4>)
 8017d90:	f240 2219 	movw	r2, #537	@ 0x219
 8017d94:	491e      	ldr	r1, [pc, #120]	@ (8017e10 <udp_sendto+0xb0>)
 8017d96:	481d      	ldr	r0, [pc, #116]	@ (8017e0c <udp_sendto+0xac>)
 8017d98:	f005 fff8 	bl	801dd8c <iprintf>
 8017d9c:	f06f 030f 	mvn.w	r3, #15
 8017da0:	e02b      	b.n	8017dfa <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d109      	bne.n	8017dbc <udp_sendto+0x5c>
 8017da8:	4b16      	ldr	r3, [pc, #88]	@ (8017e04 <udp_sendto+0xa4>)
 8017daa:	f240 221a 	movw	r2, #538	@ 0x21a
 8017dae:	4919      	ldr	r1, [pc, #100]	@ (8017e14 <udp_sendto+0xb4>)
 8017db0:	4816      	ldr	r0, [pc, #88]	@ (8017e0c <udp_sendto+0xac>)
 8017db2:	f005 ffeb 	bl	801dd8c <iprintf>
 8017db6:	f06f 030f 	mvn.w	r3, #15
 8017dba:	e01e      	b.n	8017dfa <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8017dbc:	68fb      	ldr	r3, [r7, #12]
 8017dbe:	7a1b      	ldrb	r3, [r3, #8]
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d006      	beq.n	8017dd2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8017dc4:	68fb      	ldr	r3, [r7, #12]
 8017dc6:	7a1b      	ldrb	r3, [r3, #8]
 8017dc8:	4618      	mov	r0, r3
 8017dca:	f7f8 fc5d 	bl	8010688 <netif_get_by_index>
 8017dce:	6178      	str	r0, [r7, #20]
 8017dd0:	e003      	b.n	8017dda <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8017dd2:	6878      	ldr	r0, [r7, #4]
 8017dd4:	f003 fb08 	bl	801b3e8 <ip4_route>
 8017dd8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8017dda:	697b      	ldr	r3, [r7, #20]
 8017ddc:	2b00      	cmp	r3, #0
 8017dde:	d102      	bne.n	8017de6 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8017de0:	f06f 0303 	mvn.w	r3, #3
 8017de4:	e009      	b.n	8017dfa <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8017de6:	887a      	ldrh	r2, [r7, #2]
 8017de8:	697b      	ldr	r3, [r7, #20]
 8017dea:	9300      	str	r3, [sp, #0]
 8017dec:	4613      	mov	r3, r2
 8017dee:	687a      	ldr	r2, [r7, #4]
 8017df0:	68b9      	ldr	r1, [r7, #8]
 8017df2:	68f8      	ldr	r0, [r7, #12]
 8017df4:	f000 f810 	bl	8017e18 <udp_sendto_if>
 8017df8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	3718      	adds	r7, #24
 8017dfe:	46bd      	mov	sp, r7
 8017e00:	bd80      	pop	{r7, pc}
 8017e02:	bf00      	nop
 8017e04:	080246b4 	.word	0x080246b4
 8017e08:	080247d8 	.word	0x080247d8
 8017e0c:	08024708 	.word	0x08024708
 8017e10:	080247f0 	.word	0x080247f0
 8017e14:	0802480c 	.word	0x0802480c

08017e18 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8017e18:	b580      	push	{r7, lr}
 8017e1a:	b088      	sub	sp, #32
 8017e1c:	af02      	add	r7, sp, #8
 8017e1e:	60f8      	str	r0, [r7, #12]
 8017e20:	60b9      	str	r1, [r7, #8]
 8017e22:	607a      	str	r2, [r7, #4]
 8017e24:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8017e26:	68fb      	ldr	r3, [r7, #12]
 8017e28:	2b00      	cmp	r3, #0
 8017e2a:	d109      	bne.n	8017e40 <udp_sendto_if+0x28>
 8017e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8017ee8 <udp_sendto_if+0xd0>)
 8017e2e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017e32:	492e      	ldr	r1, [pc, #184]	@ (8017eec <udp_sendto_if+0xd4>)
 8017e34:	482e      	ldr	r0, [pc, #184]	@ (8017ef0 <udp_sendto_if+0xd8>)
 8017e36:	f005 ffa9 	bl	801dd8c <iprintf>
 8017e3a:	f06f 030f 	mvn.w	r3, #15
 8017e3e:	e04f      	b.n	8017ee0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8017e40:	68bb      	ldr	r3, [r7, #8]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d109      	bne.n	8017e5a <udp_sendto_if+0x42>
 8017e46:	4b28      	ldr	r3, [pc, #160]	@ (8017ee8 <udp_sendto_if+0xd0>)
 8017e48:	f240 2281 	movw	r2, #641	@ 0x281
 8017e4c:	4929      	ldr	r1, [pc, #164]	@ (8017ef4 <udp_sendto_if+0xdc>)
 8017e4e:	4828      	ldr	r0, [pc, #160]	@ (8017ef0 <udp_sendto_if+0xd8>)
 8017e50:	f005 ff9c 	bl	801dd8c <iprintf>
 8017e54:	f06f 030f 	mvn.w	r3, #15
 8017e58:	e042      	b.n	8017ee0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d109      	bne.n	8017e74 <udp_sendto_if+0x5c>
 8017e60:	4b21      	ldr	r3, [pc, #132]	@ (8017ee8 <udp_sendto_if+0xd0>)
 8017e62:	f240 2282 	movw	r2, #642	@ 0x282
 8017e66:	4924      	ldr	r1, [pc, #144]	@ (8017ef8 <udp_sendto_if+0xe0>)
 8017e68:	4821      	ldr	r0, [pc, #132]	@ (8017ef0 <udp_sendto_if+0xd8>)
 8017e6a:	f005 ff8f 	bl	801dd8c <iprintf>
 8017e6e:	f06f 030f 	mvn.w	r3, #15
 8017e72:	e035      	b.n	8017ee0 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8017e74:	6a3b      	ldr	r3, [r7, #32]
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d109      	bne.n	8017e8e <udp_sendto_if+0x76>
 8017e7a:	4b1b      	ldr	r3, [pc, #108]	@ (8017ee8 <udp_sendto_if+0xd0>)
 8017e7c:	f240 2283 	movw	r2, #643	@ 0x283
 8017e80:	491e      	ldr	r1, [pc, #120]	@ (8017efc <udp_sendto_if+0xe4>)
 8017e82:	481b      	ldr	r0, [pc, #108]	@ (8017ef0 <udp_sendto_if+0xd8>)
 8017e84:	f005 ff82 	bl	801dd8c <iprintf>
 8017e88:	f06f 030f 	mvn.w	r3, #15
 8017e8c:	e028      	b.n	8017ee0 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e8e:	68fb      	ldr	r3, [r7, #12]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d009      	beq.n	8017ea8 <udp_sendto_if+0x90>
 8017e94:	68fb      	ldr	r3, [r7, #12]
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	2b00      	cmp	r3, #0
 8017e9a:	d005      	beq.n	8017ea8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	681b      	ldr	r3, [r3, #0]
 8017ea0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017ea4:	2be0      	cmp	r3, #224	@ 0xe0
 8017ea6:	d103      	bne.n	8017eb0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8017ea8:	6a3b      	ldr	r3, [r7, #32]
 8017eaa:	3304      	adds	r3, #4
 8017eac:	617b      	str	r3, [r7, #20]
 8017eae:	e00b      	b.n	8017ec8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8017eb0:	68fb      	ldr	r3, [r7, #12]
 8017eb2:	681a      	ldr	r2, [r3, #0]
 8017eb4:	6a3b      	ldr	r3, [r7, #32]
 8017eb6:	3304      	adds	r3, #4
 8017eb8:	681b      	ldr	r3, [r3, #0]
 8017eba:	429a      	cmp	r2, r3
 8017ebc:	d002      	beq.n	8017ec4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8017ebe:	f06f 0303 	mvn.w	r3, #3
 8017ec2:	e00d      	b.n	8017ee0 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8017ec4:	68fb      	ldr	r3, [r7, #12]
 8017ec6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8017ec8:	887a      	ldrh	r2, [r7, #2]
 8017eca:	697b      	ldr	r3, [r7, #20]
 8017ecc:	9301      	str	r3, [sp, #4]
 8017ece:	6a3b      	ldr	r3, [r7, #32]
 8017ed0:	9300      	str	r3, [sp, #0]
 8017ed2:	4613      	mov	r3, r2
 8017ed4:	687a      	ldr	r2, [r7, #4]
 8017ed6:	68b9      	ldr	r1, [r7, #8]
 8017ed8:	68f8      	ldr	r0, [r7, #12]
 8017eda:	f000 f811 	bl	8017f00 <udp_sendto_if_src>
 8017ede:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017ee0:	4618      	mov	r0, r3
 8017ee2:	3718      	adds	r7, #24
 8017ee4:	46bd      	mov	sp, r7
 8017ee6:	bd80      	pop	{r7, pc}
 8017ee8:	080246b4 	.word	0x080246b4
 8017eec:	08024828 	.word	0x08024828
 8017ef0:	08024708 	.word	0x08024708
 8017ef4:	08024844 	.word	0x08024844
 8017ef8:	08024860 	.word	0x08024860
 8017efc:	08024880 	.word	0x08024880

08017f00 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8017f00:	b580      	push	{r7, lr}
 8017f02:	b08c      	sub	sp, #48	@ 0x30
 8017f04:	af04      	add	r7, sp, #16
 8017f06:	60f8      	str	r0, [r7, #12]
 8017f08:	60b9      	str	r1, [r7, #8]
 8017f0a:	607a      	str	r2, [r7, #4]
 8017f0c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8017f0e:	68fb      	ldr	r3, [r7, #12]
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d109      	bne.n	8017f28 <udp_sendto_if_src+0x28>
 8017f14:	4b65      	ldr	r3, [pc, #404]	@ (80180ac <udp_sendto_if_src+0x1ac>)
 8017f16:	f240 22d1 	movw	r2, #721	@ 0x2d1
 8017f1a:	4965      	ldr	r1, [pc, #404]	@ (80180b0 <udp_sendto_if_src+0x1b0>)
 8017f1c:	4865      	ldr	r0, [pc, #404]	@ (80180b4 <udp_sendto_if_src+0x1b4>)
 8017f1e:	f005 ff35 	bl	801dd8c <iprintf>
 8017f22:	f06f 030f 	mvn.w	r3, #15
 8017f26:	e0bc      	b.n	80180a2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8017f28:	68bb      	ldr	r3, [r7, #8]
 8017f2a:	2b00      	cmp	r3, #0
 8017f2c:	d109      	bne.n	8017f42 <udp_sendto_if_src+0x42>
 8017f2e:	4b5f      	ldr	r3, [pc, #380]	@ (80180ac <udp_sendto_if_src+0x1ac>)
 8017f30:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8017f34:	4960      	ldr	r1, [pc, #384]	@ (80180b8 <udp_sendto_if_src+0x1b8>)
 8017f36:	485f      	ldr	r0, [pc, #380]	@ (80180b4 <udp_sendto_if_src+0x1b4>)
 8017f38:	f005 ff28 	bl	801dd8c <iprintf>
 8017f3c:	f06f 030f 	mvn.w	r3, #15
 8017f40:	e0af      	b.n	80180a2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017f42:	687b      	ldr	r3, [r7, #4]
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d109      	bne.n	8017f5c <udp_sendto_if_src+0x5c>
 8017f48:	4b58      	ldr	r3, [pc, #352]	@ (80180ac <udp_sendto_if_src+0x1ac>)
 8017f4a:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8017f4e:	495b      	ldr	r1, [pc, #364]	@ (80180bc <udp_sendto_if_src+0x1bc>)
 8017f50:	4858      	ldr	r0, [pc, #352]	@ (80180b4 <udp_sendto_if_src+0x1b4>)
 8017f52:	f005 ff1b 	bl	801dd8c <iprintf>
 8017f56:	f06f 030f 	mvn.w	r3, #15
 8017f5a:	e0a2      	b.n	80180a2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8017f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d109      	bne.n	8017f76 <udp_sendto_if_src+0x76>
 8017f62:	4b52      	ldr	r3, [pc, #328]	@ (80180ac <udp_sendto_if_src+0x1ac>)
 8017f64:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 8017f68:	4955      	ldr	r1, [pc, #340]	@ (80180c0 <udp_sendto_if_src+0x1c0>)
 8017f6a:	4852      	ldr	r0, [pc, #328]	@ (80180b4 <udp_sendto_if_src+0x1b4>)
 8017f6c:	f005 ff0e 	bl	801dd8c <iprintf>
 8017f70:	f06f 030f 	mvn.w	r3, #15
 8017f74:	e095      	b.n	80180a2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8017f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017f78:	2b00      	cmp	r3, #0
 8017f7a:	d109      	bne.n	8017f90 <udp_sendto_if_src+0x90>
 8017f7c:	4b4b      	ldr	r3, [pc, #300]	@ (80180ac <udp_sendto_if_src+0x1ac>)
 8017f7e:	f240 22d5 	movw	r2, #725	@ 0x2d5
 8017f82:	4950      	ldr	r1, [pc, #320]	@ (80180c4 <udp_sendto_if_src+0x1c4>)
 8017f84:	484b      	ldr	r0, [pc, #300]	@ (80180b4 <udp_sendto_if_src+0x1b4>)
 8017f86:	f005 ff01 	bl	801dd8c <iprintf>
 8017f8a:	f06f 030f 	mvn.w	r3, #15
 8017f8e:	e088      	b.n	80180a2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8017f90:	68fb      	ldr	r3, [r7, #12]
 8017f92:	8a5b      	ldrh	r3, [r3, #18]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	d10f      	bne.n	8017fb8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8017f98:	68f9      	ldr	r1, [r7, #12]
 8017f9a:	68fb      	ldr	r3, [r7, #12]
 8017f9c:	8a5b      	ldrh	r3, [r3, #18]
 8017f9e:	461a      	mov	r2, r3
 8017fa0:	68f8      	ldr	r0, [r7, #12]
 8017fa2:	f000 f893 	bl	80180cc <udp_bind>
 8017fa6:	4603      	mov	r3, r0
 8017fa8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8017faa:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d002      	beq.n	8017fb8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8017fb2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017fb6:	e074      	b.n	80180a2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8017fb8:	68bb      	ldr	r3, [r7, #8]
 8017fba:	891b      	ldrh	r3, [r3, #8]
 8017fbc:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8017fc0:	4293      	cmp	r3, r2
 8017fc2:	d902      	bls.n	8017fca <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8017fc4:	f04f 33ff 	mov.w	r3, #4294967295
 8017fc8:	e06b      	b.n	80180a2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8017fca:	2108      	movs	r1, #8
 8017fcc:	68b8      	ldr	r0, [r7, #8]
 8017fce:	f7f8 fe53 	bl	8010c78 <pbuf_add_header>
 8017fd2:	4603      	mov	r3, r0
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d015      	beq.n	8018004 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8017fd8:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017fdc:	2108      	movs	r1, #8
 8017fde:	2022      	movs	r0, #34	@ 0x22
 8017fe0:	f7f8 fbfc 	bl	80107dc <pbuf_alloc>
 8017fe4:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8017fe6:	69fb      	ldr	r3, [r7, #28]
 8017fe8:	2b00      	cmp	r3, #0
 8017fea:	d102      	bne.n	8017ff2 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8017fec:	f04f 33ff 	mov.w	r3, #4294967295
 8017ff0:	e057      	b.n	80180a2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8017ff2:	68bb      	ldr	r3, [r7, #8]
 8017ff4:	891b      	ldrh	r3, [r3, #8]
 8017ff6:	2b00      	cmp	r3, #0
 8017ff8:	d006      	beq.n	8018008 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8017ffa:	68b9      	ldr	r1, [r7, #8]
 8017ffc:	69f8      	ldr	r0, [r7, #28]
 8017ffe:	f7f9 f827 	bl	8011050 <pbuf_chain>
 8018002:	e001      	b.n	8018008 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8018004:	68bb      	ldr	r3, [r7, #8]
 8018006:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8018008:	69fb      	ldr	r3, [r7, #28]
 801800a:	895b      	ldrh	r3, [r3, #10]
 801800c:	2b07      	cmp	r3, #7
 801800e:	d806      	bhi.n	801801e <udp_sendto_if_src+0x11e>
 8018010:	4b26      	ldr	r3, [pc, #152]	@ (80180ac <udp_sendto_if_src+0x1ac>)
 8018012:	f240 320d 	movw	r2, #781	@ 0x30d
 8018016:	492c      	ldr	r1, [pc, #176]	@ (80180c8 <udp_sendto_if_src+0x1c8>)
 8018018:	4826      	ldr	r0, [pc, #152]	@ (80180b4 <udp_sendto_if_src+0x1b4>)
 801801a:	f005 feb7 	bl	801dd8c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801801e:	69fb      	ldr	r3, [r7, #28]
 8018020:	685b      	ldr	r3, [r3, #4]
 8018022:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	8a5b      	ldrh	r3, [r3, #18]
 8018028:	4618      	mov	r0, r3
 801802a:	f7f6 ffcf 	bl	800efcc <lwip_htons>
 801802e:	4603      	mov	r3, r0
 8018030:	461a      	mov	r2, r3
 8018032:	697b      	ldr	r3, [r7, #20]
 8018034:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8018036:	887b      	ldrh	r3, [r7, #2]
 8018038:	4618      	mov	r0, r3
 801803a:	f7f6 ffc7 	bl	800efcc <lwip_htons>
 801803e:	4603      	mov	r3, r0
 8018040:	461a      	mov	r2, r3
 8018042:	697b      	ldr	r3, [r7, #20]
 8018044:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8018046:	697b      	ldr	r3, [r7, #20]
 8018048:	2200      	movs	r2, #0
 801804a:	719a      	strb	r2, [r3, #6]
 801804c:	2200      	movs	r2, #0
 801804e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8018050:	69fb      	ldr	r3, [r7, #28]
 8018052:	891b      	ldrh	r3, [r3, #8]
 8018054:	4618      	mov	r0, r3
 8018056:	f7f6 ffb9 	bl	800efcc <lwip_htons>
 801805a:	4603      	mov	r3, r0
 801805c:	461a      	mov	r2, r3
 801805e:	697b      	ldr	r3, [r7, #20]
 8018060:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8018062:	2311      	movs	r3, #17
 8018064:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8018066:	68fb      	ldr	r3, [r7, #12]
 8018068:	7adb      	ldrb	r3, [r3, #11]
 801806a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801806c:	68fb      	ldr	r3, [r7, #12]
 801806e:	7a9b      	ldrb	r3, [r3, #10]
 8018070:	7cb9      	ldrb	r1, [r7, #18]
 8018072:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018074:	9202      	str	r2, [sp, #8]
 8018076:	7cfa      	ldrb	r2, [r7, #19]
 8018078:	9201      	str	r2, [sp, #4]
 801807a:	9300      	str	r3, [sp, #0]
 801807c:	460b      	mov	r3, r1
 801807e:	687a      	ldr	r2, [r7, #4]
 8018080:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018082:	69f8      	ldr	r0, [r7, #28]
 8018084:	f003 fbb6 	bl	801b7f4 <ip4_output_if_src>
 8018088:	4603      	mov	r3, r0
 801808a:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801808c:	69fa      	ldr	r2, [r7, #28]
 801808e:	68bb      	ldr	r3, [r7, #8]
 8018090:	429a      	cmp	r2, r3
 8018092:	d004      	beq.n	801809e <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8018094:	69f8      	ldr	r0, [r7, #28]
 8018096:	f7f8 feb7 	bl	8010e08 <pbuf_free>
    q = NULL;
 801809a:	2300      	movs	r3, #0
 801809c:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801809e:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80180a2:	4618      	mov	r0, r3
 80180a4:	3720      	adds	r7, #32
 80180a6:	46bd      	mov	sp, r7
 80180a8:	bd80      	pop	{r7, pc}
 80180aa:	bf00      	nop
 80180ac:	080246b4 	.word	0x080246b4
 80180b0:	080248a0 	.word	0x080248a0
 80180b4:	08024708 	.word	0x08024708
 80180b8:	080248c0 	.word	0x080248c0
 80180bc:	080248e0 	.word	0x080248e0
 80180c0:	08024904 	.word	0x08024904
 80180c4:	08024928 	.word	0x08024928
 80180c8:	0802494c 	.word	0x0802494c

080180cc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80180cc:	b580      	push	{r7, lr}
 80180ce:	b086      	sub	sp, #24
 80180d0:	af00      	add	r7, sp, #0
 80180d2:	60f8      	str	r0, [r7, #12]
 80180d4:	60b9      	str	r1, [r7, #8]
 80180d6:	4613      	mov	r3, r2
 80180d8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80180da:	68bb      	ldr	r3, [r7, #8]
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d101      	bne.n	80180e4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80180e0:	4b39      	ldr	r3, [pc, #228]	@ (80181c8 <udp_bind+0xfc>)
 80180e2:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80180e4:	68fb      	ldr	r3, [r7, #12]
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	d109      	bne.n	80180fe <udp_bind+0x32>
 80180ea:	4b38      	ldr	r3, [pc, #224]	@ (80181cc <udp_bind+0x100>)
 80180ec:	f240 32b7 	movw	r2, #951	@ 0x3b7
 80180f0:	4937      	ldr	r1, [pc, #220]	@ (80181d0 <udp_bind+0x104>)
 80180f2:	4838      	ldr	r0, [pc, #224]	@ (80181d4 <udp_bind+0x108>)
 80180f4:	f005 fe4a 	bl	801dd8c <iprintf>
 80180f8:	f06f 030f 	mvn.w	r3, #15
 80180fc:	e060      	b.n	80181c0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80180fe:	2300      	movs	r3, #0
 8018100:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018102:	4b35      	ldr	r3, [pc, #212]	@ (80181d8 <udp_bind+0x10c>)
 8018104:	681b      	ldr	r3, [r3, #0]
 8018106:	617b      	str	r3, [r7, #20]
 8018108:	e009      	b.n	801811e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801810a:	68fa      	ldr	r2, [r7, #12]
 801810c:	697b      	ldr	r3, [r7, #20]
 801810e:	429a      	cmp	r2, r3
 8018110:	d102      	bne.n	8018118 <udp_bind+0x4c>
      rebind = 1;
 8018112:	2301      	movs	r3, #1
 8018114:	74fb      	strb	r3, [r7, #19]
      break;
 8018116:	e005      	b.n	8018124 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018118:	697b      	ldr	r3, [r7, #20]
 801811a:	68db      	ldr	r3, [r3, #12]
 801811c:	617b      	str	r3, [r7, #20]
 801811e:	697b      	ldr	r3, [r7, #20]
 8018120:	2b00      	cmp	r3, #0
 8018122:	d1f2      	bne.n	801810a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018124:	88fb      	ldrh	r3, [r7, #6]
 8018126:	2b00      	cmp	r3, #0
 8018128:	d109      	bne.n	801813e <udp_bind+0x72>
    port = udp_new_port();
 801812a:	f7ff fc35 	bl	8017998 <udp_new_port>
 801812e:	4603      	mov	r3, r0
 8018130:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8018132:	88fb      	ldrh	r3, [r7, #6]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d12c      	bne.n	8018192 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8018138:	f06f 0307 	mvn.w	r3, #7
 801813c:	e040      	b.n	80181c0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801813e:	4b26      	ldr	r3, [pc, #152]	@ (80181d8 <udp_bind+0x10c>)
 8018140:	681b      	ldr	r3, [r3, #0]
 8018142:	617b      	str	r3, [r7, #20]
 8018144:	e022      	b.n	801818c <udp_bind+0xc0>
      if (pcb != ipcb) {
 8018146:	68fa      	ldr	r2, [r7, #12]
 8018148:	697b      	ldr	r3, [r7, #20]
 801814a:	429a      	cmp	r2, r3
 801814c:	d01b      	beq.n	8018186 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801814e:	697b      	ldr	r3, [r7, #20]
 8018150:	8a5b      	ldrh	r3, [r3, #18]
 8018152:	88fa      	ldrh	r2, [r7, #6]
 8018154:	429a      	cmp	r2, r3
 8018156:	d116      	bne.n	8018186 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018158:	697b      	ldr	r3, [r7, #20]
 801815a:	681a      	ldr	r2, [r3, #0]
 801815c:	68bb      	ldr	r3, [r7, #8]
 801815e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8018160:	429a      	cmp	r2, r3
 8018162:	d00d      	beq.n	8018180 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018164:	68bb      	ldr	r3, [r7, #8]
 8018166:	2b00      	cmp	r3, #0
 8018168:	d00a      	beq.n	8018180 <udp_bind+0xb4>
 801816a:	68bb      	ldr	r3, [r7, #8]
 801816c:	681b      	ldr	r3, [r3, #0]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d006      	beq.n	8018180 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018172:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018174:	2b00      	cmp	r3, #0
 8018176:	d003      	beq.n	8018180 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018178:	697b      	ldr	r3, [r7, #20]
 801817a:	681b      	ldr	r3, [r3, #0]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d102      	bne.n	8018186 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8018180:	f06f 0307 	mvn.w	r3, #7
 8018184:	e01c      	b.n	80181c0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018186:	697b      	ldr	r3, [r7, #20]
 8018188:	68db      	ldr	r3, [r3, #12]
 801818a:	617b      	str	r3, [r7, #20]
 801818c:	697b      	ldr	r3, [r7, #20]
 801818e:	2b00      	cmp	r3, #0
 8018190:	d1d9      	bne.n	8018146 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8018192:	68bb      	ldr	r3, [r7, #8]
 8018194:	2b00      	cmp	r3, #0
 8018196:	d002      	beq.n	801819e <udp_bind+0xd2>
 8018198:	68bb      	ldr	r3, [r7, #8]
 801819a:	681b      	ldr	r3, [r3, #0]
 801819c:	e000      	b.n	80181a0 <udp_bind+0xd4>
 801819e:	2300      	movs	r3, #0
 80181a0:	68fa      	ldr	r2, [r7, #12]
 80181a2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	88fa      	ldrh	r2, [r7, #6]
 80181a8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80181aa:	7cfb      	ldrb	r3, [r7, #19]
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d106      	bne.n	80181be <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80181b0:	4b09      	ldr	r3, [pc, #36]	@ (80181d8 <udp_bind+0x10c>)
 80181b2:	681a      	ldr	r2, [r3, #0]
 80181b4:	68fb      	ldr	r3, [r7, #12]
 80181b6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80181b8:	4a07      	ldr	r2, [pc, #28]	@ (80181d8 <udp_bind+0x10c>)
 80181ba:	68fb      	ldr	r3, [r7, #12]
 80181bc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80181be:	2300      	movs	r3, #0
}
 80181c0:	4618      	mov	r0, r3
 80181c2:	3718      	adds	r7, #24
 80181c4:	46bd      	mov	sp, r7
 80181c6:	bd80      	pop	{r7, pc}
 80181c8:	08025740 	.word	0x08025740
 80181cc:	080246b4 	.word	0x080246b4
 80181d0:	0802497c 	.word	0x0802497c
 80181d4:	08024708 	.word	0x08024708
 80181d8:	2000ec8c 	.word	0x2000ec8c

080181dc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80181dc:	b580      	push	{r7, lr}
 80181de:	b086      	sub	sp, #24
 80181e0:	af00      	add	r7, sp, #0
 80181e2:	60f8      	str	r0, [r7, #12]
 80181e4:	60b9      	str	r1, [r7, #8]
 80181e6:	4613      	mov	r3, r2
 80181e8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80181ea:	68fb      	ldr	r3, [r7, #12]
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d109      	bne.n	8018204 <udp_connect+0x28>
 80181f0:	4b2c      	ldr	r3, [pc, #176]	@ (80182a4 <udp_connect+0xc8>)
 80181f2:	f240 4235 	movw	r2, #1077	@ 0x435
 80181f6:	492c      	ldr	r1, [pc, #176]	@ (80182a8 <udp_connect+0xcc>)
 80181f8:	482c      	ldr	r0, [pc, #176]	@ (80182ac <udp_connect+0xd0>)
 80181fa:	f005 fdc7 	bl	801dd8c <iprintf>
 80181fe:	f06f 030f 	mvn.w	r3, #15
 8018202:	e04b      	b.n	801829c <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8018204:	68bb      	ldr	r3, [r7, #8]
 8018206:	2b00      	cmp	r3, #0
 8018208:	d109      	bne.n	801821e <udp_connect+0x42>
 801820a:	4b26      	ldr	r3, [pc, #152]	@ (80182a4 <udp_connect+0xc8>)
 801820c:	f240 4236 	movw	r2, #1078	@ 0x436
 8018210:	4927      	ldr	r1, [pc, #156]	@ (80182b0 <udp_connect+0xd4>)
 8018212:	4826      	ldr	r0, [pc, #152]	@ (80182ac <udp_connect+0xd0>)
 8018214:	f005 fdba 	bl	801dd8c <iprintf>
 8018218:	f06f 030f 	mvn.w	r3, #15
 801821c:	e03e      	b.n	801829c <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801821e:	68fb      	ldr	r3, [r7, #12]
 8018220:	8a5b      	ldrh	r3, [r3, #18]
 8018222:	2b00      	cmp	r3, #0
 8018224:	d10f      	bne.n	8018246 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018226:	68f9      	ldr	r1, [r7, #12]
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	8a5b      	ldrh	r3, [r3, #18]
 801822c:	461a      	mov	r2, r3
 801822e:	68f8      	ldr	r0, [r7, #12]
 8018230:	f7ff ff4c 	bl	80180cc <udp_bind>
 8018234:	4603      	mov	r3, r0
 8018236:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8018238:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801823c:	2b00      	cmp	r3, #0
 801823e:	d002      	beq.n	8018246 <udp_connect+0x6a>
      return err;
 8018240:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018244:	e02a      	b.n	801829c <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8018246:	68bb      	ldr	r3, [r7, #8]
 8018248:	2b00      	cmp	r3, #0
 801824a:	d002      	beq.n	8018252 <udp_connect+0x76>
 801824c:	68bb      	ldr	r3, [r7, #8]
 801824e:	681b      	ldr	r3, [r3, #0]
 8018250:	e000      	b.n	8018254 <udp_connect+0x78>
 8018252:	2300      	movs	r3, #0
 8018254:	68fa      	ldr	r2, [r7, #12]
 8018256:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8018258:	68fb      	ldr	r3, [r7, #12]
 801825a:	88fa      	ldrh	r2, [r7, #6]
 801825c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	7c1b      	ldrb	r3, [r3, #16]
 8018262:	f043 0304 	orr.w	r3, r3, #4
 8018266:	b2da      	uxtb	r2, r3
 8018268:	68fb      	ldr	r3, [r7, #12]
 801826a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801826c:	4b11      	ldr	r3, [pc, #68]	@ (80182b4 <udp_connect+0xd8>)
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	617b      	str	r3, [r7, #20]
 8018272:	e008      	b.n	8018286 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8018274:	68fa      	ldr	r2, [r7, #12]
 8018276:	697b      	ldr	r3, [r7, #20]
 8018278:	429a      	cmp	r2, r3
 801827a:	d101      	bne.n	8018280 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 801827c:	2300      	movs	r3, #0
 801827e:	e00d      	b.n	801829c <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018280:	697b      	ldr	r3, [r7, #20]
 8018282:	68db      	ldr	r3, [r3, #12]
 8018284:	617b      	str	r3, [r7, #20]
 8018286:	697b      	ldr	r3, [r7, #20]
 8018288:	2b00      	cmp	r3, #0
 801828a:	d1f3      	bne.n	8018274 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801828c:	4b09      	ldr	r3, [pc, #36]	@ (80182b4 <udp_connect+0xd8>)
 801828e:	681a      	ldr	r2, [r3, #0]
 8018290:	68fb      	ldr	r3, [r7, #12]
 8018292:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8018294:	4a07      	ldr	r2, [pc, #28]	@ (80182b4 <udp_connect+0xd8>)
 8018296:	68fb      	ldr	r3, [r7, #12]
 8018298:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 801829a:	2300      	movs	r3, #0
}
 801829c:	4618      	mov	r0, r3
 801829e:	3718      	adds	r7, #24
 80182a0:	46bd      	mov	sp, r7
 80182a2:	bd80      	pop	{r7, pc}
 80182a4:	080246b4 	.word	0x080246b4
 80182a8:	08024994 	.word	0x08024994
 80182ac:	08024708 	.word	0x08024708
 80182b0:	080249b0 	.word	0x080249b0
 80182b4:	2000ec8c 	.word	0x2000ec8c

080182b8 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80182b8:	b580      	push	{r7, lr}
 80182ba:	b082      	sub	sp, #8
 80182bc:	af00      	add	r7, sp, #0
 80182be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d107      	bne.n	80182d6 <udp_disconnect+0x1e>
 80182c6:	4b0d      	ldr	r3, [pc, #52]	@ (80182fc <udp_disconnect+0x44>)
 80182c8:	f240 426a 	movw	r2, #1130	@ 0x46a
 80182cc:	490c      	ldr	r1, [pc, #48]	@ (8018300 <udp_disconnect+0x48>)
 80182ce:	480d      	ldr	r0, [pc, #52]	@ (8018304 <udp_disconnect+0x4c>)
 80182d0:	f005 fd5c 	bl	801dd8c <iprintf>
 80182d4:	e00f      	b.n	80182f6 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	2200      	movs	r2, #0
 80182da:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	2200      	movs	r2, #0
 80182e0:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	2200      	movs	r2, #0
 80182e6:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	7c1b      	ldrb	r3, [r3, #16]
 80182ec:	f023 0304 	bic.w	r3, r3, #4
 80182f0:	b2da      	uxtb	r2, r3
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	741a      	strb	r2, [r3, #16]
}
 80182f6:	3708      	adds	r7, #8
 80182f8:	46bd      	mov	sp, r7
 80182fa:	bd80      	pop	{r7, pc}
 80182fc:	080246b4 	.word	0x080246b4
 8018300:	080249cc 	.word	0x080249cc
 8018304:	08024708 	.word	0x08024708

08018308 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8018308:	b580      	push	{r7, lr}
 801830a:	b084      	sub	sp, #16
 801830c:	af00      	add	r7, sp, #0
 801830e:	60f8      	str	r0, [r7, #12]
 8018310:	60b9      	str	r1, [r7, #8]
 8018312:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8018314:	68fb      	ldr	r3, [r7, #12]
 8018316:	2b00      	cmp	r3, #0
 8018318:	d107      	bne.n	801832a <udp_recv+0x22>
 801831a:	4b08      	ldr	r3, [pc, #32]	@ (801833c <udp_recv+0x34>)
 801831c:	f240 428a 	movw	r2, #1162	@ 0x48a
 8018320:	4907      	ldr	r1, [pc, #28]	@ (8018340 <udp_recv+0x38>)
 8018322:	4808      	ldr	r0, [pc, #32]	@ (8018344 <udp_recv+0x3c>)
 8018324:	f005 fd32 	bl	801dd8c <iprintf>
 8018328:	e005      	b.n	8018336 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	68ba      	ldr	r2, [r7, #8]
 801832e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8018330:	68fb      	ldr	r3, [r7, #12]
 8018332:	687a      	ldr	r2, [r7, #4]
 8018334:	61da      	str	r2, [r3, #28]
}
 8018336:	3710      	adds	r7, #16
 8018338:	46bd      	mov	sp, r7
 801833a:	bd80      	pop	{r7, pc}
 801833c:	080246b4 	.word	0x080246b4
 8018340:	080249e8 	.word	0x080249e8
 8018344:	08024708 	.word	0x08024708

08018348 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8018348:	b580      	push	{r7, lr}
 801834a:	b084      	sub	sp, #16
 801834c:	af00      	add	r7, sp, #0
 801834e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	2b00      	cmp	r3, #0
 8018354:	d107      	bne.n	8018366 <udp_remove+0x1e>
 8018356:	4b19      	ldr	r3, [pc, #100]	@ (80183bc <udp_remove+0x74>)
 8018358:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 801835c:	4918      	ldr	r1, [pc, #96]	@ (80183c0 <udp_remove+0x78>)
 801835e:	4819      	ldr	r0, [pc, #100]	@ (80183c4 <udp_remove+0x7c>)
 8018360:	f005 fd14 	bl	801dd8c <iprintf>
 8018364:	e026      	b.n	80183b4 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8018366:	4b18      	ldr	r3, [pc, #96]	@ (80183c8 <udp_remove+0x80>)
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	687a      	ldr	r2, [r7, #4]
 801836c:	429a      	cmp	r2, r3
 801836e:	d105      	bne.n	801837c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8018370:	4b15      	ldr	r3, [pc, #84]	@ (80183c8 <udp_remove+0x80>)
 8018372:	681b      	ldr	r3, [r3, #0]
 8018374:	68db      	ldr	r3, [r3, #12]
 8018376:	4a14      	ldr	r2, [pc, #80]	@ (80183c8 <udp_remove+0x80>)
 8018378:	6013      	str	r3, [r2, #0]
 801837a:	e017      	b.n	80183ac <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801837c:	4b12      	ldr	r3, [pc, #72]	@ (80183c8 <udp_remove+0x80>)
 801837e:	681b      	ldr	r3, [r3, #0]
 8018380:	60fb      	str	r3, [r7, #12]
 8018382:	e010      	b.n	80183a6 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	68db      	ldr	r3, [r3, #12]
 8018388:	2b00      	cmp	r3, #0
 801838a:	d009      	beq.n	80183a0 <udp_remove+0x58>
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	68db      	ldr	r3, [r3, #12]
 8018390:	687a      	ldr	r2, [r7, #4]
 8018392:	429a      	cmp	r2, r3
 8018394:	d104      	bne.n	80183a0 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	68da      	ldr	r2, [r3, #12]
 801839a:	68fb      	ldr	r3, [r7, #12]
 801839c:	60da      	str	r2, [r3, #12]
        break;
 801839e:	e005      	b.n	80183ac <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	68db      	ldr	r3, [r3, #12]
 80183a4:	60fb      	str	r3, [r7, #12]
 80183a6:	68fb      	ldr	r3, [r7, #12]
 80183a8:	2b00      	cmp	r3, #0
 80183aa:	d1eb      	bne.n	8018384 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80183ac:	6879      	ldr	r1, [r7, #4]
 80183ae:	2000      	movs	r0, #0
 80183b0:	f7f7 fe48 	bl	8010044 <memp_free>
}
 80183b4:	3710      	adds	r7, #16
 80183b6:	46bd      	mov	sp, r7
 80183b8:	bd80      	pop	{r7, pc}
 80183ba:	bf00      	nop
 80183bc:	080246b4 	.word	0x080246b4
 80183c0:	08024a00 	.word	0x08024a00
 80183c4:	08024708 	.word	0x08024708
 80183c8:	2000ec8c 	.word	0x2000ec8c

080183cc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80183cc:	b580      	push	{r7, lr}
 80183ce:	b082      	sub	sp, #8
 80183d0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80183d2:	2000      	movs	r0, #0
 80183d4:	f7f7 fdc0 	bl	800ff58 <memp_malloc>
 80183d8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d007      	beq.n	80183f0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80183e0:	2220      	movs	r2, #32
 80183e2:	2100      	movs	r1, #0
 80183e4:	6878      	ldr	r0, [r7, #4]
 80183e6:	f005 fd70 	bl	801deca <memset>
    pcb->ttl = UDP_TTL;
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	22ff      	movs	r2, #255	@ 0xff
 80183ee:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80183f0:	687b      	ldr	r3, [r7, #4]
}
 80183f2:	4618      	mov	r0, r3
 80183f4:	3708      	adds	r7, #8
 80183f6:	46bd      	mov	sp, r7
 80183f8:	bd80      	pop	{r7, pc}

080183fa <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80183fa:	b580      	push	{r7, lr}
 80183fc:	b084      	sub	sp, #16
 80183fe:	af00      	add	r7, sp, #0
 8018400:	4603      	mov	r3, r0
 8018402:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8018404:	f7ff ffe2 	bl	80183cc <udp_new>
 8018408:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801840a:	68fb      	ldr	r3, [r7, #12]
}
 801840c:	4618      	mov	r0, r3
 801840e:	3710      	adds	r7, #16
 8018410:	46bd      	mov	sp, r7
 8018412:	bd80      	pop	{r7, pc}

08018414 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018414:	b480      	push	{r7}
 8018416:	b085      	sub	sp, #20
 8018418:	af00      	add	r7, sp, #0
 801841a:	6078      	str	r0, [r7, #4]
 801841c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801841e:	687b      	ldr	r3, [r7, #4]
 8018420:	2b00      	cmp	r3, #0
 8018422:	d01e      	beq.n	8018462 <udp_netif_ip_addr_changed+0x4e>
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	681b      	ldr	r3, [r3, #0]
 8018428:	2b00      	cmp	r3, #0
 801842a:	d01a      	beq.n	8018462 <udp_netif_ip_addr_changed+0x4e>
 801842c:	683b      	ldr	r3, [r7, #0]
 801842e:	2b00      	cmp	r3, #0
 8018430:	d017      	beq.n	8018462 <udp_netif_ip_addr_changed+0x4e>
 8018432:	683b      	ldr	r3, [r7, #0]
 8018434:	681b      	ldr	r3, [r3, #0]
 8018436:	2b00      	cmp	r3, #0
 8018438:	d013      	beq.n	8018462 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801843a:	4b0d      	ldr	r3, [pc, #52]	@ (8018470 <udp_netif_ip_addr_changed+0x5c>)
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	60fb      	str	r3, [r7, #12]
 8018440:	e00c      	b.n	801845c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018442:	68fb      	ldr	r3, [r7, #12]
 8018444:	681a      	ldr	r2, [r3, #0]
 8018446:	687b      	ldr	r3, [r7, #4]
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	429a      	cmp	r2, r3
 801844c:	d103      	bne.n	8018456 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801844e:	683b      	ldr	r3, [r7, #0]
 8018450:	681a      	ldr	r2, [r3, #0]
 8018452:	68fb      	ldr	r3, [r7, #12]
 8018454:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018456:	68fb      	ldr	r3, [r7, #12]
 8018458:	68db      	ldr	r3, [r3, #12]
 801845a:	60fb      	str	r3, [r7, #12]
 801845c:	68fb      	ldr	r3, [r7, #12]
 801845e:	2b00      	cmp	r3, #0
 8018460:	d1ef      	bne.n	8018442 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018462:	bf00      	nop
 8018464:	3714      	adds	r7, #20
 8018466:	46bd      	mov	sp, r7
 8018468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801846c:	4770      	bx	lr
 801846e:	bf00      	nop
 8018470:	2000ec8c 	.word	0x2000ec8c

08018474 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8018474:	b580      	push	{r7, lr}
 8018476:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8018478:	4b20      	ldr	r3, [pc, #128]	@ (80184fc <dhcp_inc_pcb_refcount+0x88>)
 801847a:	781b      	ldrb	r3, [r3, #0]
 801847c:	2b00      	cmp	r3, #0
 801847e:	d133      	bne.n	80184e8 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8018480:	4b1f      	ldr	r3, [pc, #124]	@ (8018500 <dhcp_inc_pcb_refcount+0x8c>)
 8018482:	681b      	ldr	r3, [r3, #0]
 8018484:	2b00      	cmp	r3, #0
 8018486:	d005      	beq.n	8018494 <dhcp_inc_pcb_refcount+0x20>
 8018488:	4b1e      	ldr	r3, [pc, #120]	@ (8018504 <dhcp_inc_pcb_refcount+0x90>)
 801848a:	22e5      	movs	r2, #229	@ 0xe5
 801848c:	491e      	ldr	r1, [pc, #120]	@ (8018508 <dhcp_inc_pcb_refcount+0x94>)
 801848e:	481f      	ldr	r0, [pc, #124]	@ (801850c <dhcp_inc_pcb_refcount+0x98>)
 8018490:	f005 fc7c 	bl	801dd8c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8018494:	f7ff ff9a 	bl	80183cc <udp_new>
 8018498:	4603      	mov	r3, r0
 801849a:	4a19      	ldr	r2, [pc, #100]	@ (8018500 <dhcp_inc_pcb_refcount+0x8c>)
 801849c:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 801849e:	4b18      	ldr	r3, [pc, #96]	@ (8018500 <dhcp_inc_pcb_refcount+0x8c>)
 80184a0:	681b      	ldr	r3, [r3, #0]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d102      	bne.n	80184ac <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80184a6:	f04f 33ff 	mov.w	r3, #4294967295
 80184aa:	e024      	b.n	80184f6 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80184ac:	4b14      	ldr	r3, [pc, #80]	@ (8018500 <dhcp_inc_pcb_refcount+0x8c>)
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	7a5a      	ldrb	r2, [r3, #9]
 80184b2:	4b13      	ldr	r3, [pc, #76]	@ (8018500 <dhcp_inc_pcb_refcount+0x8c>)
 80184b4:	681b      	ldr	r3, [r3, #0]
 80184b6:	f042 0220 	orr.w	r2, r2, #32
 80184ba:	b2d2      	uxtb	r2, r2
 80184bc:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 80184be:	4b10      	ldr	r3, [pc, #64]	@ (8018500 <dhcp_inc_pcb_refcount+0x8c>)
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	2244      	movs	r2, #68	@ 0x44
 80184c4:	4912      	ldr	r1, [pc, #72]	@ (8018510 <dhcp_inc_pcb_refcount+0x9c>)
 80184c6:	4618      	mov	r0, r3
 80184c8:	f7ff fe00 	bl	80180cc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 80184cc:	4b0c      	ldr	r3, [pc, #48]	@ (8018500 <dhcp_inc_pcb_refcount+0x8c>)
 80184ce:	681b      	ldr	r3, [r3, #0]
 80184d0:	2243      	movs	r2, #67	@ 0x43
 80184d2:	490f      	ldr	r1, [pc, #60]	@ (8018510 <dhcp_inc_pcb_refcount+0x9c>)
 80184d4:	4618      	mov	r0, r3
 80184d6:	f7ff fe81 	bl	80181dc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80184da:	4b09      	ldr	r3, [pc, #36]	@ (8018500 <dhcp_inc_pcb_refcount+0x8c>)
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	2200      	movs	r2, #0
 80184e0:	490c      	ldr	r1, [pc, #48]	@ (8018514 <dhcp_inc_pcb_refcount+0xa0>)
 80184e2:	4618      	mov	r0, r3
 80184e4:	f7ff ff10 	bl	8018308 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80184e8:	4b04      	ldr	r3, [pc, #16]	@ (80184fc <dhcp_inc_pcb_refcount+0x88>)
 80184ea:	781b      	ldrb	r3, [r3, #0]
 80184ec:	3301      	adds	r3, #1
 80184ee:	b2da      	uxtb	r2, r3
 80184f0:	4b02      	ldr	r3, [pc, #8]	@ (80184fc <dhcp_inc_pcb_refcount+0x88>)
 80184f2:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80184f4:	2300      	movs	r3, #0
}
 80184f6:	4618      	mov	r0, r3
 80184f8:	bd80      	pop	{r7, pc}
 80184fa:	bf00      	nop
 80184fc:	2000ecc8 	.word	0x2000ecc8
 8018500:	2000ecc4 	.word	0x2000ecc4
 8018504:	08024a18 	.word	0x08024a18
 8018508:	08024a50 	.word	0x08024a50
 801850c:	08024a78 	.word	0x08024a78
 8018510:	08025740 	.word	0x08025740
 8018514:	08019e3d 	.word	0x08019e3d

08018518 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8018518:	b580      	push	{r7, lr}
 801851a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801851c:	4b0e      	ldr	r3, [pc, #56]	@ (8018558 <dhcp_dec_pcb_refcount+0x40>)
 801851e:	781b      	ldrb	r3, [r3, #0]
 8018520:	2b00      	cmp	r3, #0
 8018522:	d105      	bne.n	8018530 <dhcp_dec_pcb_refcount+0x18>
 8018524:	4b0d      	ldr	r3, [pc, #52]	@ (801855c <dhcp_dec_pcb_refcount+0x44>)
 8018526:	22ff      	movs	r2, #255	@ 0xff
 8018528:	490d      	ldr	r1, [pc, #52]	@ (8018560 <dhcp_dec_pcb_refcount+0x48>)
 801852a:	480e      	ldr	r0, [pc, #56]	@ (8018564 <dhcp_dec_pcb_refcount+0x4c>)
 801852c:	f005 fc2e 	bl	801dd8c <iprintf>
  dhcp_pcb_refcount--;
 8018530:	4b09      	ldr	r3, [pc, #36]	@ (8018558 <dhcp_dec_pcb_refcount+0x40>)
 8018532:	781b      	ldrb	r3, [r3, #0]
 8018534:	3b01      	subs	r3, #1
 8018536:	b2da      	uxtb	r2, r3
 8018538:	4b07      	ldr	r3, [pc, #28]	@ (8018558 <dhcp_dec_pcb_refcount+0x40>)
 801853a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801853c:	4b06      	ldr	r3, [pc, #24]	@ (8018558 <dhcp_dec_pcb_refcount+0x40>)
 801853e:	781b      	ldrb	r3, [r3, #0]
 8018540:	2b00      	cmp	r3, #0
 8018542:	d107      	bne.n	8018554 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8018544:	4b08      	ldr	r3, [pc, #32]	@ (8018568 <dhcp_dec_pcb_refcount+0x50>)
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	4618      	mov	r0, r3
 801854a:	f7ff fefd 	bl	8018348 <udp_remove>
    dhcp_pcb = NULL;
 801854e:	4b06      	ldr	r3, [pc, #24]	@ (8018568 <dhcp_dec_pcb_refcount+0x50>)
 8018550:	2200      	movs	r2, #0
 8018552:	601a      	str	r2, [r3, #0]
  }
}
 8018554:	bf00      	nop
 8018556:	bd80      	pop	{r7, pc}
 8018558:	2000ecc8 	.word	0x2000ecc8
 801855c:	08024a18 	.word	0x08024a18
 8018560:	08024aa0 	.word	0x08024aa0
 8018564:	08024a78 	.word	0x08024a78
 8018568:	2000ecc4 	.word	0x2000ecc4

0801856c <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 801856c:	b580      	push	{r7, lr}
 801856e:	b084      	sub	sp, #16
 8018570:	af00      	add	r7, sp, #0
 8018572:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018574:	687b      	ldr	r3, [r7, #4]
 8018576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018578:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801857a:	210c      	movs	r1, #12
 801857c:	68f8      	ldr	r0, [r7, #12]
 801857e:	f001 f86f 	bl	8019660 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8018582:	4b06      	ldr	r3, [pc, #24]	@ (801859c <dhcp_handle_nak+0x30>)
 8018584:	4a05      	ldr	r2, [pc, #20]	@ (801859c <dhcp_handle_nak+0x30>)
 8018586:	4905      	ldr	r1, [pc, #20]	@ (801859c <dhcp_handle_nak+0x30>)
 8018588:	6878      	ldr	r0, [r7, #4]
 801858a:	f7f7 fefd 	bl	8010388 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801858e:	6878      	ldr	r0, [r7, #4]
 8018590:	f000 fc68 	bl	8018e64 <dhcp_discover>
}
 8018594:	bf00      	nop
 8018596:	3710      	adds	r7, #16
 8018598:	46bd      	mov	sp, r7
 801859a:	bd80      	pop	{r7, pc}
 801859c:	08025740 	.word	0x08025740

080185a0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80185a0:	b580      	push	{r7, lr}
 80185a2:	b084      	sub	sp, #16
 80185a4:	af00      	add	r7, sp, #0
 80185a6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80185ac:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80185ae:	2108      	movs	r1, #8
 80185b0:	68f8      	ldr	r0, [r7, #12]
 80185b2:	f001 f855 	bl	8019660 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80185b6:	68fb      	ldr	r3, [r7, #12]
 80185b8:	331c      	adds	r3, #28
 80185ba:	2200      	movs	r2, #0
 80185bc:	4619      	mov	r1, r3
 80185be:	6878      	ldr	r0, [r7, #4]
 80185c0:	f002 fb86 	bl	801acd0 <etharp_query>
 80185c4:	4603      	mov	r3, r0
 80185c6:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	799b      	ldrb	r3, [r3, #6]
 80185cc:	2bff      	cmp	r3, #255	@ 0xff
 80185ce:	d005      	beq.n	80185dc <dhcp_check+0x3c>
    dhcp->tries++;
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	799b      	ldrb	r3, [r3, #6]
 80185d4:	3301      	adds	r3, #1
 80185d6:	b2da      	uxtb	r2, r3
 80185d8:	68fb      	ldr	r3, [r7, #12]
 80185da:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80185dc:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80185e0:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80185e2:	893b      	ldrh	r3, [r7, #8]
 80185e4:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80185e8:	4a06      	ldr	r2, [pc, #24]	@ (8018604 <dhcp_check+0x64>)
 80185ea:	fb82 1203 	smull	r1, r2, r2, r3
 80185ee:	1152      	asrs	r2, r2, #5
 80185f0:	17db      	asrs	r3, r3, #31
 80185f2:	1ad3      	subs	r3, r2, r3
 80185f4:	b29a      	uxth	r2, r3
 80185f6:	68fb      	ldr	r3, [r7, #12]
 80185f8:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80185fa:	bf00      	nop
 80185fc:	3710      	adds	r7, #16
 80185fe:	46bd      	mov	sp, r7
 8018600:	bd80      	pop	{r7, pc}
 8018602:	bf00      	nop
 8018604:	10624dd3 	.word	0x10624dd3

08018608 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8018608:	b580      	push	{r7, lr}
 801860a:	b084      	sub	sp, #16
 801860c:	af00      	add	r7, sp, #0
 801860e:	6078      	str	r0, [r7, #4]
 8018610:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018616:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8018618:	4b0c      	ldr	r3, [pc, #48]	@ (801864c <dhcp_handle_offer+0x44>)
 801861a:	789b      	ldrb	r3, [r3, #2]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d011      	beq.n	8018644 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	2200      	movs	r2, #0
 8018624:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8018626:	4b0a      	ldr	r3, [pc, #40]	@ (8018650 <dhcp_handle_offer+0x48>)
 8018628:	689b      	ldr	r3, [r3, #8]
 801862a:	4618      	mov	r0, r3
 801862c:	f7f6 fce3 	bl	800eff6 <lwip_htonl>
 8018630:	4602      	mov	r2, r0
 8018632:	68fb      	ldr	r3, [r7, #12]
 8018634:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8018636:	683b      	ldr	r3, [r7, #0]
 8018638:	691a      	ldr	r2, [r3, #16]
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801863e:	6878      	ldr	r0, [r7, #4]
 8018640:	f000 f808 	bl	8018654 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8018644:	bf00      	nop
 8018646:	3710      	adds	r7, #16
 8018648:	46bd      	mov	sp, r7
 801864a:	bd80      	pop	{r7, pc}
 801864c:	2000ecb8 	.word	0x2000ecb8
 8018650:	2000ec90 	.word	0x2000ec90

08018654 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8018654:	b5b0      	push	{r4, r5, r7, lr}
 8018656:	b08a      	sub	sp, #40	@ 0x28
 8018658:	af02      	add	r7, sp, #8
 801865a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801865c:	687b      	ldr	r3, [r7, #4]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d109      	bne.n	8018676 <dhcp_select+0x22>
 8018662:	4b71      	ldr	r3, [pc, #452]	@ (8018828 <dhcp_select+0x1d4>)
 8018664:	f240 1277 	movw	r2, #375	@ 0x177
 8018668:	4970      	ldr	r1, [pc, #448]	@ (801882c <dhcp_select+0x1d8>)
 801866a:	4871      	ldr	r0, [pc, #452]	@ (8018830 <dhcp_select+0x1dc>)
 801866c:	f005 fb8e 	bl	801dd8c <iprintf>
 8018670:	f06f 030f 	mvn.w	r3, #15
 8018674:	e0d3      	b.n	801881e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801867a:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 801867c:	69bb      	ldr	r3, [r7, #24]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d109      	bne.n	8018696 <dhcp_select+0x42>
 8018682:	4b69      	ldr	r3, [pc, #420]	@ (8018828 <dhcp_select+0x1d4>)
 8018684:	f240 1279 	movw	r2, #377	@ 0x179
 8018688:	496a      	ldr	r1, [pc, #424]	@ (8018834 <dhcp_select+0x1e0>)
 801868a:	4869      	ldr	r0, [pc, #420]	@ (8018830 <dhcp_select+0x1dc>)
 801868c:	f005 fb7e 	bl	801dd8c <iprintf>
 8018690:	f06f 0305 	mvn.w	r3, #5
 8018694:	e0c3      	b.n	801881e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8018696:	2101      	movs	r1, #1
 8018698:	69b8      	ldr	r0, [r7, #24]
 801869a:	f000 ffe1 	bl	8019660 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801869e:	f107 030c 	add.w	r3, r7, #12
 80186a2:	2203      	movs	r2, #3
 80186a4:	69b9      	ldr	r1, [r7, #24]
 80186a6:	6878      	ldr	r0, [r7, #4]
 80186a8:	f001 fc96 	bl	8019fd8 <dhcp_create_msg>
 80186ac:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80186ae:	697b      	ldr	r3, [r7, #20]
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	f000 8085 	beq.w	80187c0 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80186b6:	697b      	ldr	r3, [r7, #20]
 80186b8:	685b      	ldr	r3, [r3, #4]
 80186ba:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80186bc:	89b8      	ldrh	r0, [r7, #12]
 80186be:	693b      	ldr	r3, [r7, #16]
 80186c0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80186c4:	2302      	movs	r3, #2
 80186c6:	2239      	movs	r2, #57	@ 0x39
 80186c8:	f000 ffe4 	bl	8019694 <dhcp_option>
 80186cc:	4603      	mov	r3, r0
 80186ce:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80186d0:	89b8      	ldrh	r0, [r7, #12]
 80186d2:	693b      	ldr	r3, [r7, #16]
 80186d4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80186dc:	461a      	mov	r2, r3
 80186de:	f001 f833 	bl	8019748 <dhcp_option_short>
 80186e2:	4603      	mov	r3, r0
 80186e4:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80186e6:	89b8      	ldrh	r0, [r7, #12]
 80186e8:	693b      	ldr	r3, [r7, #16]
 80186ea:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80186ee:	2304      	movs	r3, #4
 80186f0:	2232      	movs	r2, #50	@ 0x32
 80186f2:	f000 ffcf 	bl	8019694 <dhcp_option>
 80186f6:	4603      	mov	r3, r0
 80186f8:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80186fa:	89bc      	ldrh	r4, [r7, #12]
 80186fc:	693b      	ldr	r3, [r7, #16]
 80186fe:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8018702:	69bb      	ldr	r3, [r7, #24]
 8018704:	69db      	ldr	r3, [r3, #28]
 8018706:	4618      	mov	r0, r3
 8018708:	f7f6 fc75 	bl	800eff6 <lwip_htonl>
 801870c:	4603      	mov	r3, r0
 801870e:	461a      	mov	r2, r3
 8018710:	4629      	mov	r1, r5
 8018712:	4620      	mov	r0, r4
 8018714:	f001 f84a 	bl	80197ac <dhcp_option_long>
 8018718:	4603      	mov	r3, r0
 801871a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801871c:	89b8      	ldrh	r0, [r7, #12]
 801871e:	693b      	ldr	r3, [r7, #16]
 8018720:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018724:	2304      	movs	r3, #4
 8018726:	2236      	movs	r2, #54	@ 0x36
 8018728:	f000 ffb4 	bl	8019694 <dhcp_option>
 801872c:	4603      	mov	r3, r0
 801872e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8018730:	89bc      	ldrh	r4, [r7, #12]
 8018732:	693b      	ldr	r3, [r7, #16]
 8018734:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8018738:	69bb      	ldr	r3, [r7, #24]
 801873a:	699b      	ldr	r3, [r3, #24]
 801873c:	4618      	mov	r0, r3
 801873e:	f7f6 fc5a 	bl	800eff6 <lwip_htonl>
 8018742:	4603      	mov	r3, r0
 8018744:	461a      	mov	r2, r3
 8018746:	4629      	mov	r1, r5
 8018748:	4620      	mov	r0, r4
 801874a:	f001 f82f 	bl	80197ac <dhcp_option_long>
 801874e:	4603      	mov	r3, r0
 8018750:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018752:	89b8      	ldrh	r0, [r7, #12]
 8018754:	693b      	ldr	r3, [r7, #16]
 8018756:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801875a:	2304      	movs	r3, #4
 801875c:	2237      	movs	r2, #55	@ 0x37
 801875e:	f000 ff99 	bl	8019694 <dhcp_option>
 8018762:	4603      	mov	r3, r0
 8018764:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018766:	2300      	movs	r3, #0
 8018768:	77bb      	strb	r3, [r7, #30]
 801876a:	e00e      	b.n	801878a <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801876c:	89b8      	ldrh	r0, [r7, #12]
 801876e:	693b      	ldr	r3, [r7, #16]
 8018770:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018774:	7fbb      	ldrb	r3, [r7, #30]
 8018776:	4a30      	ldr	r2, [pc, #192]	@ (8018838 <dhcp_select+0x1e4>)
 8018778:	5cd3      	ldrb	r3, [r2, r3]
 801877a:	461a      	mov	r2, r3
 801877c:	f000 ffbe 	bl	80196fc <dhcp_option_byte>
 8018780:	4603      	mov	r3, r0
 8018782:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018784:	7fbb      	ldrb	r3, [r7, #30]
 8018786:	3301      	adds	r3, #1
 8018788:	77bb      	strb	r3, [r7, #30]
 801878a:	7fbb      	ldrb	r3, [r7, #30]
 801878c:	2b03      	cmp	r3, #3
 801878e:	d9ed      	bls.n	801876c <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018790:	89b8      	ldrh	r0, [r7, #12]
 8018792:	693b      	ldr	r3, [r7, #16]
 8018794:	33f0      	adds	r3, #240	@ 0xf0
 8018796:	697a      	ldr	r2, [r7, #20]
 8018798:	4619      	mov	r1, r3
 801879a:	f001 fcf3 	bl	801a184 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801879e:	4b27      	ldr	r3, [pc, #156]	@ (801883c <dhcp_select+0x1e8>)
 80187a0:	6818      	ldr	r0, [r3, #0]
 80187a2:	4b27      	ldr	r3, [pc, #156]	@ (8018840 <dhcp_select+0x1ec>)
 80187a4:	9301      	str	r3, [sp, #4]
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	9300      	str	r3, [sp, #0]
 80187aa:	2343      	movs	r3, #67	@ 0x43
 80187ac:	4a25      	ldr	r2, [pc, #148]	@ (8018844 <dhcp_select+0x1f0>)
 80187ae:	6979      	ldr	r1, [r7, #20]
 80187b0:	f7ff fba6 	bl	8017f00 <udp_sendto_if_src>
 80187b4:	4603      	mov	r3, r0
 80187b6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80187b8:	6978      	ldr	r0, [r7, #20]
 80187ba:	f7f8 fb25 	bl	8010e08 <pbuf_free>
 80187be:	e001      	b.n	80187c4 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80187c0:	23ff      	movs	r3, #255	@ 0xff
 80187c2:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80187c4:	69bb      	ldr	r3, [r7, #24]
 80187c6:	799b      	ldrb	r3, [r3, #6]
 80187c8:	2bff      	cmp	r3, #255	@ 0xff
 80187ca:	d005      	beq.n	80187d8 <dhcp_select+0x184>
    dhcp->tries++;
 80187cc:	69bb      	ldr	r3, [r7, #24]
 80187ce:	799b      	ldrb	r3, [r3, #6]
 80187d0:	3301      	adds	r3, #1
 80187d2:	b2da      	uxtb	r2, r3
 80187d4:	69bb      	ldr	r3, [r7, #24]
 80187d6:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80187d8:	69bb      	ldr	r3, [r7, #24]
 80187da:	799b      	ldrb	r3, [r3, #6]
 80187dc:	2b05      	cmp	r3, #5
 80187de:	d80d      	bhi.n	80187fc <dhcp_select+0x1a8>
 80187e0:	69bb      	ldr	r3, [r7, #24]
 80187e2:	799b      	ldrb	r3, [r3, #6]
 80187e4:	461a      	mov	r2, r3
 80187e6:	2301      	movs	r3, #1
 80187e8:	4093      	lsls	r3, r2
 80187ea:	b29b      	uxth	r3, r3
 80187ec:	461a      	mov	r2, r3
 80187ee:	0152      	lsls	r2, r2, #5
 80187f0:	1ad2      	subs	r2, r2, r3
 80187f2:	0092      	lsls	r2, r2, #2
 80187f4:	4413      	add	r3, r2
 80187f6:	00db      	lsls	r3, r3, #3
 80187f8:	b29b      	uxth	r3, r3
 80187fa:	e001      	b.n	8018800 <dhcp_select+0x1ac>
 80187fc:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8018800:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018802:	89fb      	ldrh	r3, [r7, #14]
 8018804:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8018808:	4a0f      	ldr	r2, [pc, #60]	@ (8018848 <dhcp_select+0x1f4>)
 801880a:	fb82 1203 	smull	r1, r2, r2, r3
 801880e:	1152      	asrs	r2, r2, #5
 8018810:	17db      	asrs	r3, r3, #31
 8018812:	1ad3      	subs	r3, r2, r3
 8018814:	b29a      	uxth	r2, r3
 8018816:	69bb      	ldr	r3, [r7, #24]
 8018818:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801881a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801881e:	4618      	mov	r0, r3
 8018820:	3720      	adds	r7, #32
 8018822:	46bd      	mov	sp, r7
 8018824:	bdb0      	pop	{r4, r5, r7, pc}
 8018826:	bf00      	nop
 8018828:	08024a18 	.word	0x08024a18
 801882c:	08024ac4 	.word	0x08024ac4
 8018830:	08024a78 	.word	0x08024a78
 8018834:	08024ae0 	.word	0x08024ae0
 8018838:	20000030 	.word	0x20000030
 801883c:	2000ecc4 	.word	0x2000ecc4
 8018840:	08025740 	.word	0x08025740
 8018844:	08025744 	.word	0x08025744
 8018848:	10624dd3 	.word	0x10624dd3

0801884c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801884c:	b580      	push	{r7, lr}
 801884e:	b082      	sub	sp, #8
 8018850:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8018852:	4b27      	ldr	r3, [pc, #156]	@ (80188f0 <dhcp_coarse_tmr+0xa4>)
 8018854:	681b      	ldr	r3, [r3, #0]
 8018856:	607b      	str	r3, [r7, #4]
 8018858:	e042      	b.n	80188e0 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801885e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8018860:	683b      	ldr	r3, [r7, #0]
 8018862:	2b00      	cmp	r3, #0
 8018864:	d039      	beq.n	80188da <dhcp_coarse_tmr+0x8e>
 8018866:	683b      	ldr	r3, [r7, #0]
 8018868:	795b      	ldrb	r3, [r3, #5]
 801886a:	2b00      	cmp	r3, #0
 801886c:	d035      	beq.n	80188da <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801886e:	683b      	ldr	r3, [r7, #0]
 8018870:	8a9b      	ldrh	r3, [r3, #20]
 8018872:	2b00      	cmp	r3, #0
 8018874:	d012      	beq.n	801889c <dhcp_coarse_tmr+0x50>
 8018876:	683b      	ldr	r3, [r7, #0]
 8018878:	8a5b      	ldrh	r3, [r3, #18]
 801887a:	3301      	adds	r3, #1
 801887c:	b29a      	uxth	r2, r3
 801887e:	683b      	ldr	r3, [r7, #0]
 8018880:	825a      	strh	r2, [r3, #18]
 8018882:	683b      	ldr	r3, [r7, #0]
 8018884:	8a5a      	ldrh	r2, [r3, #18]
 8018886:	683b      	ldr	r3, [r7, #0]
 8018888:	8a9b      	ldrh	r3, [r3, #20]
 801888a:	429a      	cmp	r2, r3
 801888c:	d106      	bne.n	801889c <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801888e:	6878      	ldr	r0, [r7, #4]
 8018890:	f000 fe4c 	bl	801952c <dhcp_release_and_stop>
        dhcp_start(netif);
 8018894:	6878      	ldr	r0, [r7, #4]
 8018896:	f000 f989 	bl	8018bac <dhcp_start>
 801889a:	e01e      	b.n	80188da <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 801889c:	683b      	ldr	r3, [r7, #0]
 801889e:	8a1b      	ldrh	r3, [r3, #16]
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d00b      	beq.n	80188bc <dhcp_coarse_tmr+0x70>
 80188a4:	683b      	ldr	r3, [r7, #0]
 80188a6:	8a1b      	ldrh	r3, [r3, #16]
 80188a8:	1e5a      	subs	r2, r3, #1
 80188aa:	b291      	uxth	r1, r2
 80188ac:	683a      	ldr	r2, [r7, #0]
 80188ae:	8211      	strh	r1, [r2, #16]
 80188b0:	2b01      	cmp	r3, #1
 80188b2:	d103      	bne.n	80188bc <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80188b4:	6878      	ldr	r0, [r7, #4]
 80188b6:	f000 f8c6 	bl	8018a46 <dhcp_t2_timeout>
 80188ba:	e00e      	b.n	80188da <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80188bc:	683b      	ldr	r3, [r7, #0]
 80188be:	89db      	ldrh	r3, [r3, #14]
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d00a      	beq.n	80188da <dhcp_coarse_tmr+0x8e>
 80188c4:	683b      	ldr	r3, [r7, #0]
 80188c6:	89db      	ldrh	r3, [r3, #14]
 80188c8:	1e5a      	subs	r2, r3, #1
 80188ca:	b291      	uxth	r1, r2
 80188cc:	683a      	ldr	r2, [r7, #0]
 80188ce:	81d1      	strh	r1, [r2, #14]
 80188d0:	2b01      	cmp	r3, #1
 80188d2:	d102      	bne.n	80188da <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80188d4:	6878      	ldr	r0, [r7, #4]
 80188d6:	f000 f888 	bl	80189ea <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	607b      	str	r3, [r7, #4]
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d1b9      	bne.n	801885a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80188e6:	bf00      	nop
 80188e8:	bf00      	nop
 80188ea:	3708      	adds	r7, #8
 80188ec:	46bd      	mov	sp, r7
 80188ee:	bd80      	pop	{r7, pc}
 80188f0:	2000ec24 	.word	0x2000ec24

080188f4 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80188f4:	b580      	push	{r7, lr}
 80188f6:	b082      	sub	sp, #8
 80188f8:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80188fa:	4b16      	ldr	r3, [pc, #88]	@ (8018954 <dhcp_fine_tmr+0x60>)
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	607b      	str	r3, [r7, #4]
 8018900:	e020      	b.n	8018944 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018906:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8018908:	683b      	ldr	r3, [r7, #0]
 801890a:	2b00      	cmp	r3, #0
 801890c:	d017      	beq.n	801893e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801890e:	683b      	ldr	r3, [r7, #0]
 8018910:	891b      	ldrh	r3, [r3, #8]
 8018912:	2b01      	cmp	r3, #1
 8018914:	d906      	bls.n	8018924 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8018916:	683b      	ldr	r3, [r7, #0]
 8018918:	891b      	ldrh	r3, [r3, #8]
 801891a:	3b01      	subs	r3, #1
 801891c:	b29a      	uxth	r2, r3
 801891e:	683b      	ldr	r3, [r7, #0]
 8018920:	811a      	strh	r2, [r3, #8]
 8018922:	e00c      	b.n	801893e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8018924:	683b      	ldr	r3, [r7, #0]
 8018926:	891b      	ldrh	r3, [r3, #8]
 8018928:	2b01      	cmp	r3, #1
 801892a:	d108      	bne.n	801893e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801892c:	683b      	ldr	r3, [r7, #0]
 801892e:	891b      	ldrh	r3, [r3, #8]
 8018930:	3b01      	subs	r3, #1
 8018932:	b29a      	uxth	r2, r3
 8018934:	683b      	ldr	r3, [r7, #0]
 8018936:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8018938:	6878      	ldr	r0, [r7, #4]
 801893a:	f000 f80d 	bl	8018958 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801893e:	687b      	ldr	r3, [r7, #4]
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	607b      	str	r3, [r7, #4]
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	2b00      	cmp	r3, #0
 8018948:	d1db      	bne.n	8018902 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801894a:	bf00      	nop
 801894c:	bf00      	nop
 801894e:	3708      	adds	r7, #8
 8018950:	46bd      	mov	sp, r7
 8018952:	bd80      	pop	{r7, pc}
 8018954:	2000ec24 	.word	0x2000ec24

08018958 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8018958:	b580      	push	{r7, lr}
 801895a:	b084      	sub	sp, #16
 801895c:	af00      	add	r7, sp, #0
 801895e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018960:	687b      	ldr	r3, [r7, #4]
 8018962:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018964:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8018966:	68fb      	ldr	r3, [r7, #12]
 8018968:	795b      	ldrb	r3, [r3, #5]
 801896a:	2b0c      	cmp	r3, #12
 801896c:	d003      	beq.n	8018976 <dhcp_timeout+0x1e>
 801896e:	68fb      	ldr	r3, [r7, #12]
 8018970:	795b      	ldrb	r3, [r3, #5]
 8018972:	2b06      	cmp	r3, #6
 8018974:	d103      	bne.n	801897e <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8018976:	6878      	ldr	r0, [r7, #4]
 8018978:	f000 fa74 	bl	8018e64 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 801897c:	e031      	b.n	80189e2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801897e:	68fb      	ldr	r3, [r7, #12]
 8018980:	795b      	ldrb	r3, [r3, #5]
 8018982:	2b01      	cmp	r3, #1
 8018984:	d10e      	bne.n	80189a4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8018986:	68fb      	ldr	r3, [r7, #12]
 8018988:	799b      	ldrb	r3, [r3, #6]
 801898a:	2b05      	cmp	r3, #5
 801898c:	d803      	bhi.n	8018996 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801898e:	6878      	ldr	r0, [r7, #4]
 8018990:	f7ff fe60 	bl	8018654 <dhcp_select>
}
 8018994:	e025      	b.n	80189e2 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8018996:	6878      	ldr	r0, [r7, #4]
 8018998:	f000 fdc8 	bl	801952c <dhcp_release_and_stop>
      dhcp_start(netif);
 801899c:	6878      	ldr	r0, [r7, #4]
 801899e:	f000 f905 	bl	8018bac <dhcp_start>
}
 80189a2:	e01e      	b.n	80189e2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80189a4:	68fb      	ldr	r3, [r7, #12]
 80189a6:	795b      	ldrb	r3, [r3, #5]
 80189a8:	2b08      	cmp	r3, #8
 80189aa:	d10b      	bne.n	80189c4 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	799b      	ldrb	r3, [r3, #6]
 80189b0:	2b01      	cmp	r3, #1
 80189b2:	d803      	bhi.n	80189bc <dhcp_timeout+0x64>
      dhcp_check(netif);
 80189b4:	6878      	ldr	r0, [r7, #4]
 80189b6:	f7ff fdf3 	bl	80185a0 <dhcp_check>
}
 80189ba:	e012      	b.n	80189e2 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80189bc:	6878      	ldr	r0, [r7, #4]
 80189be:	f000 faf3 	bl	8018fa8 <dhcp_bind>
}
 80189c2:	e00e      	b.n	80189e2 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	795b      	ldrb	r3, [r3, #5]
 80189c8:	2b03      	cmp	r3, #3
 80189ca:	d10a      	bne.n	80189e2 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80189cc:	68fb      	ldr	r3, [r7, #12]
 80189ce:	799b      	ldrb	r3, [r3, #6]
 80189d0:	2b01      	cmp	r3, #1
 80189d2:	d803      	bhi.n	80189dc <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80189d4:	6878      	ldr	r0, [r7, #4]
 80189d6:	f000 fcf5 	bl	80193c4 <dhcp_reboot>
}
 80189da:	e002      	b.n	80189e2 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80189dc:	6878      	ldr	r0, [r7, #4]
 80189de:	f000 fa41 	bl	8018e64 <dhcp_discover>
}
 80189e2:	bf00      	nop
 80189e4:	3710      	adds	r7, #16
 80189e6:	46bd      	mov	sp, r7
 80189e8:	bd80      	pop	{r7, pc}

080189ea <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80189ea:	b580      	push	{r7, lr}
 80189ec:	b084      	sub	sp, #16
 80189ee:	af00      	add	r7, sp, #0
 80189f0:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80189f2:	687b      	ldr	r3, [r7, #4]
 80189f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80189f6:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80189f8:	68fb      	ldr	r3, [r7, #12]
 80189fa:	795b      	ldrb	r3, [r3, #5]
 80189fc:	2b01      	cmp	r3, #1
 80189fe:	d007      	beq.n	8018a10 <dhcp_t1_timeout+0x26>
 8018a00:	68fb      	ldr	r3, [r7, #12]
 8018a02:	795b      	ldrb	r3, [r3, #5]
 8018a04:	2b0a      	cmp	r3, #10
 8018a06:	d003      	beq.n	8018a10 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8018a08:	68fb      	ldr	r3, [r7, #12]
 8018a0a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018a0c:	2b05      	cmp	r3, #5
 8018a0e:	d116      	bne.n	8018a3e <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8018a10:	6878      	ldr	r0, [r7, #4]
 8018a12:	f000 fba3 	bl	801915c <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8018a16:	68fb      	ldr	r3, [r7, #12]
 8018a18:	899b      	ldrh	r3, [r3, #12]
 8018a1a:	461a      	mov	r2, r3
 8018a1c:	68fb      	ldr	r3, [r7, #12]
 8018a1e:	8a5b      	ldrh	r3, [r3, #18]
 8018a20:	1ad3      	subs	r3, r2, r3
 8018a22:	2b01      	cmp	r3, #1
 8018a24:	dd0b      	ble.n	8018a3e <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8018a26:	68fb      	ldr	r3, [r7, #12]
 8018a28:	899b      	ldrh	r3, [r3, #12]
 8018a2a:	461a      	mov	r2, r3
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	8a5b      	ldrh	r3, [r3, #18]
 8018a30:	1ad3      	subs	r3, r2, r3
 8018a32:	0fda      	lsrs	r2, r3, #31
 8018a34:	4413      	add	r3, r2
 8018a36:	105b      	asrs	r3, r3, #1
 8018a38:	b29a      	uxth	r2, r3
 8018a3a:	68fb      	ldr	r3, [r7, #12]
 8018a3c:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8018a3e:	bf00      	nop
 8018a40:	3710      	adds	r7, #16
 8018a42:	46bd      	mov	sp, r7
 8018a44:	bd80      	pop	{r7, pc}

08018a46 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8018a46:	b580      	push	{r7, lr}
 8018a48:	b084      	sub	sp, #16
 8018a4a:	af00      	add	r7, sp, #0
 8018a4c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018a52:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	795b      	ldrb	r3, [r3, #5]
 8018a58:	2b01      	cmp	r3, #1
 8018a5a:	d00b      	beq.n	8018a74 <dhcp_t2_timeout+0x2e>
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	795b      	ldrb	r3, [r3, #5]
 8018a60:	2b0a      	cmp	r3, #10
 8018a62:	d007      	beq.n	8018a74 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8018a68:	2b05      	cmp	r3, #5
 8018a6a:	d003      	beq.n	8018a74 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8018a6c:	68fb      	ldr	r3, [r7, #12]
 8018a6e:	795b      	ldrb	r3, [r3, #5]
 8018a70:	2b04      	cmp	r3, #4
 8018a72:	d116      	bne.n	8018aa2 <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8018a74:	6878      	ldr	r0, [r7, #4]
 8018a76:	f000 fc0b 	bl	8019290 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	8a9b      	ldrh	r3, [r3, #20]
 8018a7e:	461a      	mov	r2, r3
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	8a5b      	ldrh	r3, [r3, #18]
 8018a84:	1ad3      	subs	r3, r2, r3
 8018a86:	2b01      	cmp	r3, #1
 8018a88:	dd0b      	ble.n	8018aa2 <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8018a8a:	68fb      	ldr	r3, [r7, #12]
 8018a8c:	8a9b      	ldrh	r3, [r3, #20]
 8018a8e:	461a      	mov	r2, r3
 8018a90:	68fb      	ldr	r3, [r7, #12]
 8018a92:	8a5b      	ldrh	r3, [r3, #18]
 8018a94:	1ad3      	subs	r3, r2, r3
 8018a96:	0fda      	lsrs	r2, r3, #31
 8018a98:	4413      	add	r3, r2
 8018a9a:	105b      	asrs	r3, r3, #1
 8018a9c:	b29a      	uxth	r2, r3
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8018aa2:	bf00      	nop
 8018aa4:	3710      	adds	r7, #16
 8018aa6:	46bd      	mov	sp, r7
 8018aa8:	bd80      	pop	{r7, pc}
	...

08018aac <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8018aac:	b580      	push	{r7, lr}
 8018aae:	b086      	sub	sp, #24
 8018ab0:	af00      	add	r7, sp, #0
 8018ab2:	6078      	str	r0, [r7, #4]
 8018ab4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018aba:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8018abc:	693b      	ldr	r3, [r7, #16]
 8018abe:	2200      	movs	r2, #0
 8018ac0:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8018ac2:	693b      	ldr	r3, [r7, #16]
 8018ac4:	2200      	movs	r2, #0
 8018ac6:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8018ac8:	4b36      	ldr	r3, [pc, #216]	@ (8018ba4 <dhcp_handle_ack+0xf8>)
 8018aca:	78db      	ldrb	r3, [r3, #3]
 8018acc:	2b00      	cmp	r3, #0
 8018ace:	d003      	beq.n	8018ad8 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8018ad0:	4b35      	ldr	r3, [pc, #212]	@ (8018ba8 <dhcp_handle_ack+0xfc>)
 8018ad2:	68da      	ldr	r2, [r3, #12]
 8018ad4:	693b      	ldr	r3, [r7, #16]
 8018ad6:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8018ad8:	4b32      	ldr	r3, [pc, #200]	@ (8018ba4 <dhcp_handle_ack+0xf8>)
 8018ada:	791b      	ldrb	r3, [r3, #4]
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d004      	beq.n	8018aea <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8018ae0:	4b31      	ldr	r3, [pc, #196]	@ (8018ba8 <dhcp_handle_ack+0xfc>)
 8018ae2:	691a      	ldr	r2, [r3, #16]
 8018ae4:	693b      	ldr	r3, [r7, #16]
 8018ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8018ae8:	e004      	b.n	8018af4 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8018aea:	693b      	ldr	r3, [r7, #16]
 8018aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018aee:	085a      	lsrs	r2, r3, #1
 8018af0:	693b      	ldr	r3, [r7, #16]
 8018af2:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8018af4:	4b2b      	ldr	r3, [pc, #172]	@ (8018ba4 <dhcp_handle_ack+0xf8>)
 8018af6:	795b      	ldrb	r3, [r3, #5]
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d004      	beq.n	8018b06 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8018afc:	4b2a      	ldr	r3, [pc, #168]	@ (8018ba8 <dhcp_handle_ack+0xfc>)
 8018afe:	695a      	ldr	r2, [r3, #20]
 8018b00:	693b      	ldr	r3, [r7, #16]
 8018b02:	631a      	str	r2, [r3, #48]	@ 0x30
 8018b04:	e007      	b.n	8018b16 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8018b06:	693b      	ldr	r3, [r7, #16]
 8018b08:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8018b0a:	4613      	mov	r3, r2
 8018b0c:	00db      	lsls	r3, r3, #3
 8018b0e:	1a9b      	subs	r3, r3, r2
 8018b10:	08da      	lsrs	r2, r3, #3
 8018b12:	693b      	ldr	r3, [r7, #16]
 8018b14:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8018b16:	683b      	ldr	r3, [r7, #0]
 8018b18:	691a      	ldr	r2, [r3, #16]
 8018b1a:	693b      	ldr	r3, [r7, #16]
 8018b1c:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8018b1e:	4b21      	ldr	r3, [pc, #132]	@ (8018ba4 <dhcp_handle_ack+0xf8>)
 8018b20:	799b      	ldrb	r3, [r3, #6]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d00b      	beq.n	8018b3e <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8018b26:	4b20      	ldr	r3, [pc, #128]	@ (8018ba8 <dhcp_handle_ack+0xfc>)
 8018b28:	699b      	ldr	r3, [r3, #24]
 8018b2a:	4618      	mov	r0, r3
 8018b2c:	f7f6 fa63 	bl	800eff6 <lwip_htonl>
 8018b30:	4602      	mov	r2, r0
 8018b32:	693b      	ldr	r3, [r7, #16]
 8018b34:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8018b36:	693b      	ldr	r3, [r7, #16]
 8018b38:	2201      	movs	r2, #1
 8018b3a:	71da      	strb	r2, [r3, #7]
 8018b3c:	e002      	b.n	8018b44 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8018b3e:	693b      	ldr	r3, [r7, #16]
 8018b40:	2200      	movs	r2, #0
 8018b42:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8018b44:	4b17      	ldr	r3, [pc, #92]	@ (8018ba4 <dhcp_handle_ack+0xf8>)
 8018b46:	79db      	ldrb	r3, [r3, #7]
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	d007      	beq.n	8018b5c <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8018b4c:	4b16      	ldr	r3, [pc, #88]	@ (8018ba8 <dhcp_handle_ack+0xfc>)
 8018b4e:	69db      	ldr	r3, [r3, #28]
 8018b50:	4618      	mov	r0, r3
 8018b52:	f7f6 fa50 	bl	800eff6 <lwip_htonl>
 8018b56:	4602      	mov	r2, r0
 8018b58:	693b      	ldr	r3, [r7, #16]
 8018b5a:	625a      	str	r2, [r3, #36]	@ 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8018b5c:	2300      	movs	r3, #0
 8018b5e:	75fb      	strb	r3, [r7, #23]
 8018b60:	e013      	b.n	8018b8a <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 8018b62:	7dfb      	ldrb	r3, [r7, #23]
 8018b64:	3308      	adds	r3, #8
 8018b66:	4a10      	ldr	r2, [pc, #64]	@ (8018ba8 <dhcp_handle_ack+0xfc>)
 8018b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018b6c:	4618      	mov	r0, r3
 8018b6e:	f7f6 fa42 	bl	800eff6 <lwip_htonl>
 8018b72:	4603      	mov	r3, r0
 8018b74:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 8018b76:	f107 020c 	add.w	r2, r7, #12
 8018b7a:	7dfb      	ldrb	r3, [r7, #23]
 8018b7c:	4611      	mov	r1, r2
 8018b7e:	4618      	mov	r0, r3
 8018b80:	f7f6 fa5a 	bl	800f038 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8018b84:	7dfb      	ldrb	r3, [r7, #23]
 8018b86:	3301      	adds	r3, #1
 8018b88:	75fb      	strb	r3, [r7, #23]
 8018b8a:	7dfb      	ldrb	r3, [r7, #23]
 8018b8c:	2b01      	cmp	r3, #1
 8018b8e:	d805      	bhi.n	8018b9c <dhcp_handle_ack+0xf0>
 8018b90:	7dfb      	ldrb	r3, [r7, #23]
 8018b92:	3308      	adds	r3, #8
 8018b94:	4a03      	ldr	r2, [pc, #12]	@ (8018ba4 <dhcp_handle_ack+0xf8>)
 8018b96:	5cd3      	ldrb	r3, [r2, r3]
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d1e2      	bne.n	8018b62 <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8018b9c:	bf00      	nop
 8018b9e:	3718      	adds	r7, #24
 8018ba0:	46bd      	mov	sp, r7
 8018ba2:	bd80      	pop	{r7, pc}
 8018ba4:	2000ecb8 	.word	0x2000ecb8
 8018ba8:	2000ec90 	.word	0x2000ec90

08018bac <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8018bac:	b580      	push	{r7, lr}
 8018bae:	b084      	sub	sp, #16
 8018bb0:	af00      	add	r7, sp, #0
 8018bb2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8018bb4:	687b      	ldr	r3, [r7, #4]
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d109      	bne.n	8018bce <dhcp_start+0x22>
 8018bba:	4b37      	ldr	r3, [pc, #220]	@ (8018c98 <dhcp_start+0xec>)
 8018bbc:	f240 22e7 	movw	r2, #743	@ 0x2e7
 8018bc0:	4936      	ldr	r1, [pc, #216]	@ (8018c9c <dhcp_start+0xf0>)
 8018bc2:	4837      	ldr	r0, [pc, #220]	@ (8018ca0 <dhcp_start+0xf4>)
 8018bc4:	f005 f8e2 	bl	801dd8c <iprintf>
 8018bc8:	f06f 030f 	mvn.w	r3, #15
 8018bcc:	e060      	b.n	8018c90 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8018bce:	687b      	ldr	r3, [r7, #4]
 8018bd0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018bd4:	f003 0301 	and.w	r3, r3, #1
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d109      	bne.n	8018bf0 <dhcp_start+0x44>
 8018bdc:	4b2e      	ldr	r3, [pc, #184]	@ (8018c98 <dhcp_start+0xec>)
 8018bde:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 8018be2:	4930      	ldr	r1, [pc, #192]	@ (8018ca4 <dhcp_start+0xf8>)
 8018be4:	482e      	ldr	r0, [pc, #184]	@ (8018ca0 <dhcp_start+0xf4>)
 8018be6:	f005 f8d1 	bl	801dd8c <iprintf>
 8018bea:	f06f 030f 	mvn.w	r3, #15
 8018bee:	e04f      	b.n	8018c90 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018bf4:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8018bf6:	687b      	ldr	r3, [r7, #4]
 8018bf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018bfa:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 8018bfe:	d202      	bcs.n	8018c06 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8018c00:	f04f 33ff 	mov.w	r3, #4294967295
 8018c04:	e044      	b.n	8018c90 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d10d      	bne.n	8018c28 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8018c0c:	2034      	movs	r0, #52	@ 0x34
 8018c0e:	f7f6 ffff 	bl	800fc10 <mem_malloc>
 8018c12:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8018c14:	68fb      	ldr	r3, [r7, #12]
 8018c16:	2b00      	cmp	r3, #0
 8018c18:	d102      	bne.n	8018c20 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8018c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8018c1e:	e037      	b.n	8018c90 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8018c20:	687b      	ldr	r3, [r7, #4]
 8018c22:	68fa      	ldr	r2, [r7, #12]
 8018c24:	625a      	str	r2, [r3, #36]	@ 0x24
 8018c26:	e005      	b.n	8018c34 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	791b      	ldrb	r3, [r3, #4]
 8018c2c:	2b00      	cmp	r3, #0
 8018c2e:	d001      	beq.n	8018c34 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8018c30:	f7ff fc72 	bl	8018518 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8018c34:	2234      	movs	r2, #52	@ 0x34
 8018c36:	2100      	movs	r1, #0
 8018c38:	68f8      	ldr	r0, [r7, #12]
 8018c3a:	f005 f946 	bl	801deca <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8018c3e:	f7ff fc19 	bl	8018474 <dhcp_inc_pcb_refcount>
 8018c42:	4603      	mov	r3, r0
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	d002      	beq.n	8018c4e <dhcp_start+0xa2>
    return ERR_MEM;
 8018c48:	f04f 33ff 	mov.w	r3, #4294967295
 8018c4c:	e020      	b.n	8018c90 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8018c4e:	68fb      	ldr	r3, [r7, #12]
 8018c50:	2201      	movs	r2, #1
 8018c52:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018c5a:	f003 0304 	and.w	r3, r3, #4
 8018c5e:	2b00      	cmp	r3, #0
 8018c60:	d105      	bne.n	8018c6e <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8018c62:	2102      	movs	r1, #2
 8018c64:	68f8      	ldr	r0, [r7, #12]
 8018c66:	f000 fcfb 	bl	8019660 <dhcp_set_state>
    return ERR_OK;
 8018c6a:	2300      	movs	r3, #0
 8018c6c:	e010      	b.n	8018c90 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8018c6e:	6878      	ldr	r0, [r7, #4]
 8018c70:	f000 f8f8 	bl	8018e64 <dhcp_discover>
 8018c74:	4603      	mov	r3, r0
 8018c76:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8018c78:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d005      	beq.n	8018c8c <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8018c80:	6878      	ldr	r0, [r7, #4]
 8018c82:	f000 fc53 	bl	801952c <dhcp_release_and_stop>
    return ERR_MEM;
 8018c86:	f04f 33ff 	mov.w	r3, #4294967295
 8018c8a:	e001      	b.n	8018c90 <dhcp_start+0xe4>
  }
  return result;
 8018c8c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8018c90:	4618      	mov	r0, r3
 8018c92:	3710      	adds	r7, #16
 8018c94:	46bd      	mov	sp, r7
 8018c96:	bd80      	pop	{r7, pc}
 8018c98:	08024a18 	.word	0x08024a18
 8018c9c:	08024afc 	.word	0x08024afc
 8018ca0:	08024a78 	.word	0x08024a78
 8018ca4:	08024b40 	.word	0x08024b40

08018ca8 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8018ca8:	b580      	push	{r7, lr}
 8018caa:	b084      	sub	sp, #16
 8018cac:	af00      	add	r7, sp, #0
 8018cae:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018cb0:	687b      	ldr	r3, [r7, #4]
 8018cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018cb4:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8018cb6:	68fb      	ldr	r3, [r7, #12]
 8018cb8:	2b00      	cmp	r3, #0
 8018cba:	d025      	beq.n	8018d08 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	795b      	ldrb	r3, [r3, #5]
 8018cc0:	2b0a      	cmp	r3, #10
 8018cc2:	d008      	beq.n	8018cd6 <dhcp_network_changed+0x2e>
 8018cc4:	2b0a      	cmp	r3, #10
 8018cc6:	dc0d      	bgt.n	8018ce4 <dhcp_network_changed+0x3c>
 8018cc8:	2b00      	cmp	r3, #0
 8018cca:	d01f      	beq.n	8018d0c <dhcp_network_changed+0x64>
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	db09      	blt.n	8018ce4 <dhcp_network_changed+0x3c>
 8018cd0:	3b03      	subs	r3, #3
 8018cd2:	2b02      	cmp	r3, #2
 8018cd4:	d806      	bhi.n	8018ce4 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 8018cd6:	68fb      	ldr	r3, [r7, #12]
 8018cd8:	2200      	movs	r2, #0
 8018cda:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8018cdc:	6878      	ldr	r0, [r7, #4]
 8018cde:	f000 fb71 	bl	80193c4 <dhcp_reboot>
      break;
 8018ce2:	e014      	b.n	8018d0e <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 8018ce4:	68fb      	ldr	r3, [r7, #12]
 8018ce6:	795b      	ldrb	r3, [r3, #5]
 8018ce8:	2b0c      	cmp	r3, #12
 8018cea:	d906      	bls.n	8018cfa <dhcp_network_changed+0x52>
 8018cec:	4b09      	ldr	r3, [pc, #36]	@ (8018d14 <dhcp_network_changed+0x6c>)
 8018cee:	f240 326d 	movw	r2, #877	@ 0x36d
 8018cf2:	4909      	ldr	r1, [pc, #36]	@ (8018d18 <dhcp_network_changed+0x70>)
 8018cf4:	4809      	ldr	r0, [pc, #36]	@ (8018d1c <dhcp_network_changed+0x74>)
 8018cf6:	f005 f849 	bl	801dd8c <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8018cfa:	68fb      	ldr	r3, [r7, #12]
 8018cfc:	2200      	movs	r2, #0
 8018cfe:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8018d00:	6878      	ldr	r0, [r7, #4]
 8018d02:	f000 f8af 	bl	8018e64 <dhcp_discover>
      break;
 8018d06:	e002      	b.n	8018d0e <dhcp_network_changed+0x66>
    return;
 8018d08:	bf00      	nop
 8018d0a:	e000      	b.n	8018d0e <dhcp_network_changed+0x66>
      break;
 8018d0c:	bf00      	nop
  }
}
 8018d0e:	3710      	adds	r7, #16
 8018d10:	46bd      	mov	sp, r7
 8018d12:	bd80      	pop	{r7, pc}
 8018d14:	08024a18 	.word	0x08024a18
 8018d18:	08024b64 	.word	0x08024b64
 8018d1c:	08024a78 	.word	0x08024a78

08018d20 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8018d20:	b580      	push	{r7, lr}
 8018d22:	b084      	sub	sp, #16
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
 8018d28:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	2b00      	cmp	r3, #0
 8018d2e:	d107      	bne.n	8018d40 <dhcp_arp_reply+0x20>
 8018d30:	4b0e      	ldr	r3, [pc, #56]	@ (8018d6c <dhcp_arp_reply+0x4c>)
 8018d32:	f240 328b 	movw	r2, #907	@ 0x38b
 8018d36:	490e      	ldr	r1, [pc, #56]	@ (8018d70 <dhcp_arp_reply+0x50>)
 8018d38:	480e      	ldr	r0, [pc, #56]	@ (8018d74 <dhcp_arp_reply+0x54>)
 8018d3a:	f005 f827 	bl	801dd8c <iprintf>
 8018d3e:	e012      	b.n	8018d66 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8018d40:	687b      	ldr	r3, [r7, #4]
 8018d42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d44:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8018d46:	68fb      	ldr	r3, [r7, #12]
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	d00c      	beq.n	8018d66 <dhcp_arp_reply+0x46>
 8018d4c:	68fb      	ldr	r3, [r7, #12]
 8018d4e:	795b      	ldrb	r3, [r3, #5]
 8018d50:	2b08      	cmp	r3, #8
 8018d52:	d108      	bne.n	8018d66 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8018d54:	683b      	ldr	r3, [r7, #0]
 8018d56:	681a      	ldr	r2, [r3, #0]
 8018d58:	68fb      	ldr	r3, [r7, #12]
 8018d5a:	69db      	ldr	r3, [r3, #28]
 8018d5c:	429a      	cmp	r2, r3
 8018d5e:	d102      	bne.n	8018d66 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8018d60:	6878      	ldr	r0, [r7, #4]
 8018d62:	f000 f809 	bl	8018d78 <dhcp_decline>
    }
  }
}
 8018d66:	3710      	adds	r7, #16
 8018d68:	46bd      	mov	sp, r7
 8018d6a:	bd80      	pop	{r7, pc}
 8018d6c:	08024a18 	.word	0x08024a18
 8018d70:	08024afc 	.word	0x08024afc
 8018d74:	08024a78 	.word	0x08024a78

08018d78 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8018d78:	b5b0      	push	{r4, r5, r7, lr}
 8018d7a:	b08a      	sub	sp, #40	@ 0x28
 8018d7c:	af02      	add	r7, sp, #8
 8018d7e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018d84:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8018d86:	210c      	movs	r1, #12
 8018d88:	69b8      	ldr	r0, [r7, #24]
 8018d8a:	f000 fc69 	bl	8019660 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8018d8e:	f107 030c 	add.w	r3, r7, #12
 8018d92:	2204      	movs	r2, #4
 8018d94:	69b9      	ldr	r1, [r7, #24]
 8018d96:	6878      	ldr	r0, [r7, #4]
 8018d98:	f001 f91e 	bl	8019fd8 <dhcp_create_msg>
 8018d9c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8018d9e:	697b      	ldr	r3, [r7, #20]
 8018da0:	2b00      	cmp	r3, #0
 8018da2:	d035      	beq.n	8018e10 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018da4:	697b      	ldr	r3, [r7, #20]
 8018da6:	685b      	ldr	r3, [r3, #4]
 8018da8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8018daa:	89b8      	ldrh	r0, [r7, #12]
 8018dac:	693b      	ldr	r3, [r7, #16]
 8018dae:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018db2:	2304      	movs	r3, #4
 8018db4:	2232      	movs	r2, #50	@ 0x32
 8018db6:	f000 fc6d 	bl	8019694 <dhcp_option>
 8018dba:	4603      	mov	r3, r0
 8018dbc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8018dbe:	89bc      	ldrh	r4, [r7, #12]
 8018dc0:	693b      	ldr	r3, [r7, #16]
 8018dc2:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8018dc6:	69bb      	ldr	r3, [r7, #24]
 8018dc8:	69db      	ldr	r3, [r3, #28]
 8018dca:	4618      	mov	r0, r3
 8018dcc:	f7f6 f913 	bl	800eff6 <lwip_htonl>
 8018dd0:	4603      	mov	r3, r0
 8018dd2:	461a      	mov	r2, r3
 8018dd4:	4629      	mov	r1, r5
 8018dd6:	4620      	mov	r0, r4
 8018dd8:	f000 fce8 	bl	80197ac <dhcp_option_long>
 8018ddc:	4603      	mov	r3, r0
 8018dde:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018de0:	89b8      	ldrh	r0, [r7, #12]
 8018de2:	693b      	ldr	r3, [r7, #16]
 8018de4:	33f0      	adds	r3, #240	@ 0xf0
 8018de6:	697a      	ldr	r2, [r7, #20]
 8018de8:	4619      	mov	r1, r3
 8018dea:	f001 f9cb 	bl	801a184 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8018dee:	4b19      	ldr	r3, [pc, #100]	@ (8018e54 <dhcp_decline+0xdc>)
 8018df0:	6818      	ldr	r0, [r3, #0]
 8018df2:	4b19      	ldr	r3, [pc, #100]	@ (8018e58 <dhcp_decline+0xe0>)
 8018df4:	9301      	str	r3, [sp, #4]
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	9300      	str	r3, [sp, #0]
 8018dfa:	2343      	movs	r3, #67	@ 0x43
 8018dfc:	4a17      	ldr	r2, [pc, #92]	@ (8018e5c <dhcp_decline+0xe4>)
 8018dfe:	6979      	ldr	r1, [r7, #20]
 8018e00:	f7ff f87e 	bl	8017f00 <udp_sendto_if_src>
 8018e04:	4603      	mov	r3, r0
 8018e06:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8018e08:	6978      	ldr	r0, [r7, #20]
 8018e0a:	f7f7 fffd 	bl	8010e08 <pbuf_free>
 8018e0e:	e001      	b.n	8018e14 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8018e10:	23ff      	movs	r3, #255	@ 0xff
 8018e12:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8018e14:	69bb      	ldr	r3, [r7, #24]
 8018e16:	799b      	ldrb	r3, [r3, #6]
 8018e18:	2bff      	cmp	r3, #255	@ 0xff
 8018e1a:	d005      	beq.n	8018e28 <dhcp_decline+0xb0>
    dhcp->tries++;
 8018e1c:	69bb      	ldr	r3, [r7, #24]
 8018e1e:	799b      	ldrb	r3, [r3, #6]
 8018e20:	3301      	adds	r3, #1
 8018e22:	b2da      	uxtb	r2, r3
 8018e24:	69bb      	ldr	r3, [r7, #24]
 8018e26:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8018e28:	f242 7310 	movw	r3, #10000	@ 0x2710
 8018e2c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018e2e:	89fb      	ldrh	r3, [r7, #14]
 8018e30:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8018e34:	4a0a      	ldr	r2, [pc, #40]	@ (8018e60 <dhcp_decline+0xe8>)
 8018e36:	fb82 1203 	smull	r1, r2, r2, r3
 8018e3a:	1152      	asrs	r2, r2, #5
 8018e3c:	17db      	asrs	r3, r3, #31
 8018e3e:	1ad3      	subs	r3, r2, r3
 8018e40:	b29a      	uxth	r2, r3
 8018e42:	69bb      	ldr	r3, [r7, #24]
 8018e44:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018e46:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018e4a:	4618      	mov	r0, r3
 8018e4c:	3720      	adds	r7, #32
 8018e4e:	46bd      	mov	sp, r7
 8018e50:	bdb0      	pop	{r4, r5, r7, pc}
 8018e52:	bf00      	nop
 8018e54:	2000ecc4 	.word	0x2000ecc4
 8018e58:	08025740 	.word	0x08025740
 8018e5c:	08025744 	.word	0x08025744
 8018e60:	10624dd3 	.word	0x10624dd3

08018e64 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8018e64:	b580      	push	{r7, lr}
 8018e66:	b08a      	sub	sp, #40	@ 0x28
 8018e68:	af02      	add	r7, sp, #8
 8018e6a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018e6c:	687b      	ldr	r3, [r7, #4]
 8018e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018e70:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8018e72:	2300      	movs	r3, #0
 8018e74:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8018e76:	69bb      	ldr	r3, [r7, #24]
 8018e78:	2200      	movs	r2, #0
 8018e7a:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8018e7c:	2106      	movs	r1, #6
 8018e7e:	69b8      	ldr	r0, [r7, #24]
 8018e80:	f000 fbee 	bl	8019660 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8018e84:	f107 0308 	add.w	r3, r7, #8
 8018e88:	2201      	movs	r2, #1
 8018e8a:	69b9      	ldr	r1, [r7, #24]
 8018e8c:	6878      	ldr	r0, [r7, #4]
 8018e8e:	f001 f8a3 	bl	8019fd8 <dhcp_create_msg>
 8018e92:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8018e94:	693b      	ldr	r3, [r7, #16]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d04b      	beq.n	8018f32 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8018e9a:	693b      	ldr	r3, [r7, #16]
 8018e9c:	685b      	ldr	r3, [r3, #4]
 8018e9e:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8018ea0:	8938      	ldrh	r0, [r7, #8]
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018ea8:	2302      	movs	r3, #2
 8018eaa:	2239      	movs	r2, #57	@ 0x39
 8018eac:	f000 fbf2 	bl	8019694 <dhcp_option>
 8018eb0:	4603      	mov	r3, r0
 8018eb2:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8018eb4:	8938      	ldrh	r0, [r7, #8]
 8018eb6:	68fb      	ldr	r3, [r7, #12]
 8018eb8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018ec0:	461a      	mov	r2, r3
 8018ec2:	f000 fc41 	bl	8019748 <dhcp_option_short>
 8018ec6:	4603      	mov	r3, r0
 8018ec8:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8018eca:	8938      	ldrh	r0, [r7, #8]
 8018ecc:	68fb      	ldr	r3, [r7, #12]
 8018ece:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018ed2:	2304      	movs	r3, #4
 8018ed4:	2237      	movs	r2, #55	@ 0x37
 8018ed6:	f000 fbdd 	bl	8019694 <dhcp_option>
 8018eda:	4603      	mov	r3, r0
 8018edc:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018ede:	2300      	movs	r3, #0
 8018ee0:	77fb      	strb	r3, [r7, #31]
 8018ee2:	e00e      	b.n	8018f02 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8018ee4:	8938      	ldrh	r0, [r7, #8]
 8018ee6:	68fb      	ldr	r3, [r7, #12]
 8018ee8:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8018eec:	7ffb      	ldrb	r3, [r7, #31]
 8018eee:	4a29      	ldr	r2, [pc, #164]	@ (8018f94 <dhcp_discover+0x130>)
 8018ef0:	5cd3      	ldrb	r3, [r2, r3]
 8018ef2:	461a      	mov	r2, r3
 8018ef4:	f000 fc02 	bl	80196fc <dhcp_option_byte>
 8018ef8:	4603      	mov	r3, r0
 8018efa:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8018efc:	7ffb      	ldrb	r3, [r7, #31]
 8018efe:	3301      	adds	r3, #1
 8018f00:	77fb      	strb	r3, [r7, #31]
 8018f02:	7ffb      	ldrb	r3, [r7, #31]
 8018f04:	2b03      	cmp	r3, #3
 8018f06:	d9ed      	bls.n	8018ee4 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8018f08:	8938      	ldrh	r0, [r7, #8]
 8018f0a:	68fb      	ldr	r3, [r7, #12]
 8018f0c:	33f0      	adds	r3, #240	@ 0xf0
 8018f0e:	693a      	ldr	r2, [r7, #16]
 8018f10:	4619      	mov	r1, r3
 8018f12:	f001 f937 	bl	801a184 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8018f16:	4b20      	ldr	r3, [pc, #128]	@ (8018f98 <dhcp_discover+0x134>)
 8018f18:	6818      	ldr	r0, [r3, #0]
 8018f1a:	4b20      	ldr	r3, [pc, #128]	@ (8018f9c <dhcp_discover+0x138>)
 8018f1c:	9301      	str	r3, [sp, #4]
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	9300      	str	r3, [sp, #0]
 8018f22:	2343      	movs	r3, #67	@ 0x43
 8018f24:	4a1e      	ldr	r2, [pc, #120]	@ (8018fa0 <dhcp_discover+0x13c>)
 8018f26:	6939      	ldr	r1, [r7, #16]
 8018f28:	f7fe ffea 	bl	8017f00 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8018f2c:	6938      	ldr	r0, [r7, #16]
 8018f2e:	f7f7 ff6b 	bl	8010e08 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8018f32:	69bb      	ldr	r3, [r7, #24]
 8018f34:	799b      	ldrb	r3, [r3, #6]
 8018f36:	2bff      	cmp	r3, #255	@ 0xff
 8018f38:	d005      	beq.n	8018f46 <dhcp_discover+0xe2>
    dhcp->tries++;
 8018f3a:	69bb      	ldr	r3, [r7, #24]
 8018f3c:	799b      	ldrb	r3, [r3, #6]
 8018f3e:	3301      	adds	r3, #1
 8018f40:	b2da      	uxtb	r2, r3
 8018f42:	69bb      	ldr	r3, [r7, #24]
 8018f44:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8018f46:	69bb      	ldr	r3, [r7, #24]
 8018f48:	799b      	ldrb	r3, [r3, #6]
 8018f4a:	2b05      	cmp	r3, #5
 8018f4c:	d80d      	bhi.n	8018f6a <dhcp_discover+0x106>
 8018f4e:	69bb      	ldr	r3, [r7, #24]
 8018f50:	799b      	ldrb	r3, [r3, #6]
 8018f52:	461a      	mov	r2, r3
 8018f54:	2301      	movs	r3, #1
 8018f56:	4093      	lsls	r3, r2
 8018f58:	b29b      	uxth	r3, r3
 8018f5a:	461a      	mov	r2, r3
 8018f5c:	0152      	lsls	r2, r2, #5
 8018f5e:	1ad2      	subs	r2, r2, r3
 8018f60:	0092      	lsls	r2, r2, #2
 8018f62:	4413      	add	r3, r2
 8018f64:	00db      	lsls	r3, r3, #3
 8018f66:	b29b      	uxth	r3, r3
 8018f68:	e001      	b.n	8018f6e <dhcp_discover+0x10a>
 8018f6a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8018f6e:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018f70:	897b      	ldrh	r3, [r7, #10]
 8018f72:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8018f76:	4a0b      	ldr	r2, [pc, #44]	@ (8018fa4 <dhcp_discover+0x140>)
 8018f78:	fb82 1203 	smull	r1, r2, r2, r3
 8018f7c:	1152      	asrs	r2, r2, #5
 8018f7e:	17db      	asrs	r3, r3, #31
 8018f80:	1ad3      	subs	r3, r2, r3
 8018f82:	b29a      	uxth	r2, r3
 8018f84:	69bb      	ldr	r3, [r7, #24]
 8018f86:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8018f88:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018f8c:	4618      	mov	r0, r3
 8018f8e:	3720      	adds	r7, #32
 8018f90:	46bd      	mov	sp, r7
 8018f92:	bd80      	pop	{r7, pc}
 8018f94:	20000030 	.word	0x20000030
 8018f98:	2000ecc4 	.word	0x2000ecc4
 8018f9c:	08025740 	.word	0x08025740
 8018fa0:	08025744 	.word	0x08025744
 8018fa4:	10624dd3 	.word	0x10624dd3

08018fa8 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8018fa8:	b580      	push	{r7, lr}
 8018faa:	b088      	sub	sp, #32
 8018fac:	af00      	add	r7, sp, #0
 8018fae:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8018fb0:	687b      	ldr	r3, [r7, #4]
 8018fb2:	2b00      	cmp	r3, #0
 8018fb4:	d107      	bne.n	8018fc6 <dhcp_bind+0x1e>
 8018fb6:	4b64      	ldr	r3, [pc, #400]	@ (8019148 <dhcp_bind+0x1a0>)
 8018fb8:	f240 4215 	movw	r2, #1045	@ 0x415
 8018fbc:	4963      	ldr	r1, [pc, #396]	@ (801914c <dhcp_bind+0x1a4>)
 8018fbe:	4864      	ldr	r0, [pc, #400]	@ (8019150 <dhcp_bind+0x1a8>)
 8018fc0:	f004 fee4 	bl	801dd8c <iprintf>
 8018fc4:	e0bc      	b.n	8019140 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018fca:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8018fcc:	69bb      	ldr	r3, [r7, #24]
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d107      	bne.n	8018fe2 <dhcp_bind+0x3a>
 8018fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8019148 <dhcp_bind+0x1a0>)
 8018fd4:	f240 4217 	movw	r2, #1047	@ 0x417
 8018fd8:	495e      	ldr	r1, [pc, #376]	@ (8019154 <dhcp_bind+0x1ac>)
 8018fda:	485d      	ldr	r0, [pc, #372]	@ (8019150 <dhcp_bind+0x1a8>)
 8018fdc:	f004 fed6 	bl	801dd8c <iprintf>
 8018fe0:	e0ae      	b.n	8019140 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8018fe2:	69bb      	ldr	r3, [r7, #24]
 8018fe4:	2200      	movs	r2, #0
 8018fe6:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8018fe8:	69bb      	ldr	r3, [r7, #24]
 8018fea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018ff0:	d019      	beq.n	8019026 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8018ff2:	69bb      	ldr	r3, [r7, #24]
 8018ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ff6:	331e      	adds	r3, #30
 8018ff8:	4a57      	ldr	r2, [pc, #348]	@ (8019158 <dhcp_bind+0x1b0>)
 8018ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8018ffe:	095b      	lsrs	r3, r3, #5
 8019000:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8019002:	69fb      	ldr	r3, [r7, #28]
 8019004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019008:	d302      	bcc.n	8019010 <dhcp_bind+0x68>
      timeout = 0xffff;
 801900a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801900e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8019010:	69fb      	ldr	r3, [r7, #28]
 8019012:	b29a      	uxth	r2, r3
 8019014:	69bb      	ldr	r3, [r7, #24]
 8019016:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8019018:	69bb      	ldr	r3, [r7, #24]
 801901a:	8a9b      	ldrh	r3, [r3, #20]
 801901c:	2b00      	cmp	r3, #0
 801901e:	d102      	bne.n	8019026 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8019020:	69bb      	ldr	r3, [r7, #24]
 8019022:	2201      	movs	r2, #1
 8019024:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8019026:	69bb      	ldr	r3, [r7, #24]
 8019028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801902a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801902e:	d01d      	beq.n	801906c <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019030:	69bb      	ldr	r3, [r7, #24]
 8019032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019034:	331e      	adds	r3, #30
 8019036:	4a48      	ldr	r2, [pc, #288]	@ (8019158 <dhcp_bind+0x1b0>)
 8019038:	fba2 2303 	umull	r2, r3, r2, r3
 801903c:	095b      	lsrs	r3, r3, #5
 801903e:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8019040:	69fb      	ldr	r3, [r7, #28]
 8019042:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019046:	d302      	bcc.n	801904e <dhcp_bind+0xa6>
      timeout = 0xffff;
 8019048:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801904c:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 801904e:	69fb      	ldr	r3, [r7, #28]
 8019050:	b29a      	uxth	r2, r3
 8019052:	69bb      	ldr	r3, [r7, #24]
 8019054:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8019056:	69bb      	ldr	r3, [r7, #24]
 8019058:	895b      	ldrh	r3, [r3, #10]
 801905a:	2b00      	cmp	r3, #0
 801905c:	d102      	bne.n	8019064 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 801905e:	69bb      	ldr	r3, [r7, #24]
 8019060:	2201      	movs	r2, #1
 8019062:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8019064:	69bb      	ldr	r3, [r7, #24]
 8019066:	895a      	ldrh	r2, [r3, #10]
 8019068:	69bb      	ldr	r3, [r7, #24]
 801906a:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 801906c:	69bb      	ldr	r3, [r7, #24]
 801906e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019074:	d01d      	beq.n	80190b2 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019076:	69bb      	ldr	r3, [r7, #24]
 8019078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801907a:	331e      	adds	r3, #30
 801907c:	4a36      	ldr	r2, [pc, #216]	@ (8019158 <dhcp_bind+0x1b0>)
 801907e:	fba2 2303 	umull	r2, r3, r2, r3
 8019082:	095b      	lsrs	r3, r3, #5
 8019084:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8019086:	69fb      	ldr	r3, [r7, #28]
 8019088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801908c:	d302      	bcc.n	8019094 <dhcp_bind+0xec>
      timeout = 0xffff;
 801908e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019092:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8019094:	69fb      	ldr	r3, [r7, #28]
 8019096:	b29a      	uxth	r2, r3
 8019098:	69bb      	ldr	r3, [r7, #24]
 801909a:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 801909c:	69bb      	ldr	r3, [r7, #24]
 801909e:	899b      	ldrh	r3, [r3, #12]
 80190a0:	2b00      	cmp	r3, #0
 80190a2:	d102      	bne.n	80190aa <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 80190a4:	69bb      	ldr	r3, [r7, #24]
 80190a6:	2201      	movs	r2, #1
 80190a8:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 80190aa:	69bb      	ldr	r3, [r7, #24]
 80190ac:	899a      	ldrh	r2, [r3, #12]
 80190ae:	69bb      	ldr	r3, [r7, #24]
 80190b0:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 80190b2:	69bb      	ldr	r3, [r7, #24]
 80190b4:	895a      	ldrh	r2, [r3, #10]
 80190b6:	69bb      	ldr	r3, [r7, #24]
 80190b8:	899b      	ldrh	r3, [r3, #12]
 80190ba:	429a      	cmp	r2, r3
 80190bc:	d306      	bcc.n	80190cc <dhcp_bind+0x124>
 80190be:	69bb      	ldr	r3, [r7, #24]
 80190c0:	899b      	ldrh	r3, [r3, #12]
 80190c2:	2b00      	cmp	r3, #0
 80190c4:	d002      	beq.n	80190cc <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 80190c6:	69bb      	ldr	r3, [r7, #24]
 80190c8:	2200      	movs	r2, #0
 80190ca:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 80190cc:	69bb      	ldr	r3, [r7, #24]
 80190ce:	79db      	ldrb	r3, [r3, #7]
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d003      	beq.n	80190dc <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 80190d4:	69bb      	ldr	r3, [r7, #24]
 80190d6:	6a1b      	ldr	r3, [r3, #32]
 80190d8:	613b      	str	r3, [r7, #16]
 80190da:	e014      	b.n	8019106 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 80190dc:	69bb      	ldr	r3, [r7, #24]
 80190de:	331c      	adds	r3, #28
 80190e0:	781b      	ldrb	r3, [r3, #0]
 80190e2:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 80190e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	db02      	blt.n	80190f2 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 80190ec:	23ff      	movs	r3, #255	@ 0xff
 80190ee:	613b      	str	r3, [r7, #16]
 80190f0:	e009      	b.n	8019106 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 80190f2:	7dfb      	ldrb	r3, [r7, #23]
 80190f4:	2bbf      	cmp	r3, #191	@ 0xbf
 80190f6:	d903      	bls.n	8019100 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 80190f8:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 80190fc:	613b      	str	r3, [r7, #16]
 80190fe:	e002      	b.n	8019106 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8019100:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019104:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8019106:	69bb      	ldr	r3, [r7, #24]
 8019108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801910a:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	2b00      	cmp	r3, #0
 8019110:	d108      	bne.n	8019124 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8019112:	69bb      	ldr	r3, [r7, #24]
 8019114:	69da      	ldr	r2, [r3, #28]
 8019116:	693b      	ldr	r3, [r7, #16]
 8019118:	4013      	ands	r3, r2
 801911a:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 801911c:	68fb      	ldr	r3, [r7, #12]
 801911e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8019122:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8019124:	210a      	movs	r1, #10
 8019126:	69b8      	ldr	r0, [r7, #24]
 8019128:	f000 fa9a 	bl	8019660 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 801912c:	69bb      	ldr	r3, [r7, #24]
 801912e:	f103 011c 	add.w	r1, r3, #28
 8019132:	f107 030c 	add.w	r3, r7, #12
 8019136:	f107 0210 	add.w	r2, r7, #16
 801913a:	6878      	ldr	r0, [r7, #4]
 801913c:	f7f7 f924 	bl	8010388 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8019140:	3720      	adds	r7, #32
 8019142:	46bd      	mov	sp, r7
 8019144:	bd80      	pop	{r7, pc}
 8019146:	bf00      	nop
 8019148:	08024a18 	.word	0x08024a18
 801914c:	08024b78 	.word	0x08024b78
 8019150:	08024a78 	.word	0x08024a78
 8019154:	08024b94 	.word	0x08024b94
 8019158:	88888889 	.word	0x88888889

0801915c <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 801915c:	b580      	push	{r7, lr}
 801915e:	b08a      	sub	sp, #40	@ 0x28
 8019160:	af02      	add	r7, sp, #8
 8019162:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019164:	687b      	ldr	r3, [r7, #4]
 8019166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019168:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 801916a:	2105      	movs	r1, #5
 801916c:	69b8      	ldr	r0, [r7, #24]
 801916e:	f000 fa77 	bl	8019660 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019172:	f107 030c 	add.w	r3, r7, #12
 8019176:	2203      	movs	r2, #3
 8019178:	69b9      	ldr	r1, [r7, #24]
 801917a:	6878      	ldr	r0, [r7, #4]
 801917c:	f000 ff2c 	bl	8019fd8 <dhcp_create_msg>
 8019180:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019182:	697b      	ldr	r3, [r7, #20]
 8019184:	2b00      	cmp	r3, #0
 8019186:	d04e      	beq.n	8019226 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019188:	697b      	ldr	r3, [r7, #20]
 801918a:	685b      	ldr	r3, [r3, #4]
 801918c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801918e:	89b8      	ldrh	r0, [r7, #12]
 8019190:	693b      	ldr	r3, [r7, #16]
 8019192:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019196:	2302      	movs	r3, #2
 8019198:	2239      	movs	r2, #57	@ 0x39
 801919a:	f000 fa7b 	bl	8019694 <dhcp_option>
 801919e:	4603      	mov	r3, r0
 80191a0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80191a2:	89b8      	ldrh	r0, [r7, #12]
 80191a4:	693b      	ldr	r3, [r7, #16]
 80191a6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80191aa:	687b      	ldr	r3, [r7, #4]
 80191ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80191ae:	461a      	mov	r2, r3
 80191b0:	f000 faca 	bl	8019748 <dhcp_option_short>
 80191b4:	4603      	mov	r3, r0
 80191b6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80191b8:	89b8      	ldrh	r0, [r7, #12]
 80191ba:	693b      	ldr	r3, [r7, #16]
 80191bc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80191c0:	2304      	movs	r3, #4
 80191c2:	2237      	movs	r2, #55	@ 0x37
 80191c4:	f000 fa66 	bl	8019694 <dhcp_option>
 80191c8:	4603      	mov	r3, r0
 80191ca:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80191cc:	2300      	movs	r3, #0
 80191ce:	77bb      	strb	r3, [r7, #30]
 80191d0:	e00e      	b.n	80191f0 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80191d2:	89b8      	ldrh	r0, [r7, #12]
 80191d4:	693b      	ldr	r3, [r7, #16]
 80191d6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80191da:	7fbb      	ldrb	r3, [r7, #30]
 80191dc:	4a29      	ldr	r2, [pc, #164]	@ (8019284 <dhcp_renew+0x128>)
 80191de:	5cd3      	ldrb	r3, [r2, r3]
 80191e0:	461a      	mov	r2, r3
 80191e2:	f000 fa8b 	bl	80196fc <dhcp_option_byte>
 80191e6:	4603      	mov	r3, r0
 80191e8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80191ea:	7fbb      	ldrb	r3, [r7, #30]
 80191ec:	3301      	adds	r3, #1
 80191ee:	77bb      	strb	r3, [r7, #30]
 80191f0:	7fbb      	ldrb	r3, [r7, #30]
 80191f2:	2b03      	cmp	r3, #3
 80191f4:	d9ed      	bls.n	80191d2 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80191f6:	89b8      	ldrh	r0, [r7, #12]
 80191f8:	693b      	ldr	r3, [r7, #16]
 80191fa:	33f0      	adds	r3, #240	@ 0xf0
 80191fc:	697a      	ldr	r2, [r7, #20]
 80191fe:	4619      	mov	r1, r3
 8019200:	f000 ffc0 	bl	801a184 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019204:	4b20      	ldr	r3, [pc, #128]	@ (8019288 <dhcp_renew+0x12c>)
 8019206:	6818      	ldr	r0, [r3, #0]
 8019208:	69bb      	ldr	r3, [r7, #24]
 801920a:	f103 0218 	add.w	r2, r3, #24
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	9300      	str	r3, [sp, #0]
 8019212:	2343      	movs	r3, #67	@ 0x43
 8019214:	6979      	ldr	r1, [r7, #20]
 8019216:	f7fe fdff 	bl	8017e18 <udp_sendto_if>
 801921a:	4603      	mov	r3, r0
 801921c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801921e:	6978      	ldr	r0, [r7, #20]
 8019220:	f7f7 fdf2 	bl	8010e08 <pbuf_free>
 8019224:	e001      	b.n	801922a <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019226:	23ff      	movs	r3, #255	@ 0xff
 8019228:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801922a:	69bb      	ldr	r3, [r7, #24]
 801922c:	799b      	ldrb	r3, [r3, #6]
 801922e:	2bff      	cmp	r3, #255	@ 0xff
 8019230:	d005      	beq.n	801923e <dhcp_renew+0xe2>
    dhcp->tries++;
 8019232:	69bb      	ldr	r3, [r7, #24]
 8019234:	799b      	ldrb	r3, [r3, #6]
 8019236:	3301      	adds	r3, #1
 8019238:	b2da      	uxtb	r2, r3
 801923a:	69bb      	ldr	r3, [r7, #24]
 801923c:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 801923e:	69bb      	ldr	r3, [r7, #24]
 8019240:	799b      	ldrb	r3, [r3, #6]
 8019242:	2b09      	cmp	r3, #9
 8019244:	d809      	bhi.n	801925a <dhcp_renew+0xfe>
 8019246:	69bb      	ldr	r3, [r7, #24]
 8019248:	799b      	ldrb	r3, [r3, #6]
 801924a:	461a      	mov	r2, r3
 801924c:	0152      	lsls	r2, r2, #5
 801924e:	1ad2      	subs	r2, r2, r3
 8019250:	0092      	lsls	r2, r2, #2
 8019252:	4413      	add	r3, r2
 8019254:	011b      	lsls	r3, r3, #4
 8019256:	b29b      	uxth	r3, r3
 8019258:	e001      	b.n	801925e <dhcp_renew+0x102>
 801925a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801925e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019260:	89fb      	ldrh	r3, [r7, #14]
 8019262:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019266:	4a09      	ldr	r2, [pc, #36]	@ (801928c <dhcp_renew+0x130>)
 8019268:	fb82 1203 	smull	r1, r2, r2, r3
 801926c:	1152      	asrs	r2, r2, #5
 801926e:	17db      	asrs	r3, r3, #31
 8019270:	1ad3      	subs	r3, r2, r3
 8019272:	b29a      	uxth	r2, r3
 8019274:	69bb      	ldr	r3, [r7, #24]
 8019276:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019278:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801927c:	4618      	mov	r0, r3
 801927e:	3720      	adds	r7, #32
 8019280:	46bd      	mov	sp, r7
 8019282:	bd80      	pop	{r7, pc}
 8019284:	20000030 	.word	0x20000030
 8019288:	2000ecc4 	.word	0x2000ecc4
 801928c:	10624dd3 	.word	0x10624dd3

08019290 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8019290:	b580      	push	{r7, lr}
 8019292:	b08a      	sub	sp, #40	@ 0x28
 8019294:	af02      	add	r7, sp, #8
 8019296:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801929c:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801929e:	2104      	movs	r1, #4
 80192a0:	69b8      	ldr	r0, [r7, #24]
 80192a2:	f000 f9dd 	bl	8019660 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80192a6:	f107 030c 	add.w	r3, r7, #12
 80192aa:	2203      	movs	r2, #3
 80192ac:	69b9      	ldr	r1, [r7, #24]
 80192ae:	6878      	ldr	r0, [r7, #4]
 80192b0:	f000 fe92 	bl	8019fd8 <dhcp_create_msg>
 80192b4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80192b6:	697b      	ldr	r3, [r7, #20]
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d04c      	beq.n	8019356 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80192bc:	697b      	ldr	r3, [r7, #20]
 80192be:	685b      	ldr	r3, [r3, #4]
 80192c0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80192c2:	89b8      	ldrh	r0, [r7, #12]
 80192c4:	693b      	ldr	r3, [r7, #16]
 80192c6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80192ca:	2302      	movs	r3, #2
 80192cc:	2239      	movs	r2, #57	@ 0x39
 80192ce:	f000 f9e1 	bl	8019694 <dhcp_option>
 80192d2:	4603      	mov	r3, r0
 80192d4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80192d6:	89b8      	ldrh	r0, [r7, #12]
 80192d8:	693b      	ldr	r3, [r7, #16]
 80192da:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80192e2:	461a      	mov	r2, r3
 80192e4:	f000 fa30 	bl	8019748 <dhcp_option_short>
 80192e8:	4603      	mov	r3, r0
 80192ea:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80192ec:	89b8      	ldrh	r0, [r7, #12]
 80192ee:	693b      	ldr	r3, [r7, #16]
 80192f0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80192f4:	2304      	movs	r3, #4
 80192f6:	2237      	movs	r2, #55	@ 0x37
 80192f8:	f000 f9cc 	bl	8019694 <dhcp_option>
 80192fc:	4603      	mov	r3, r0
 80192fe:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019300:	2300      	movs	r3, #0
 8019302:	77bb      	strb	r3, [r7, #30]
 8019304:	e00e      	b.n	8019324 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019306:	89b8      	ldrh	r0, [r7, #12]
 8019308:	693b      	ldr	r3, [r7, #16]
 801930a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801930e:	7fbb      	ldrb	r3, [r7, #30]
 8019310:	4a28      	ldr	r2, [pc, #160]	@ (80193b4 <dhcp_rebind+0x124>)
 8019312:	5cd3      	ldrb	r3, [r2, r3]
 8019314:	461a      	mov	r2, r3
 8019316:	f000 f9f1 	bl	80196fc <dhcp_option_byte>
 801931a:	4603      	mov	r3, r0
 801931c:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801931e:	7fbb      	ldrb	r3, [r7, #30]
 8019320:	3301      	adds	r3, #1
 8019322:	77bb      	strb	r3, [r7, #30]
 8019324:	7fbb      	ldrb	r3, [r7, #30]
 8019326:	2b03      	cmp	r3, #3
 8019328:	d9ed      	bls.n	8019306 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801932a:	89b8      	ldrh	r0, [r7, #12]
 801932c:	693b      	ldr	r3, [r7, #16]
 801932e:	33f0      	adds	r3, #240	@ 0xf0
 8019330:	697a      	ldr	r2, [r7, #20]
 8019332:	4619      	mov	r1, r3
 8019334:	f000 ff26 	bl	801a184 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019338:	4b1f      	ldr	r3, [pc, #124]	@ (80193b8 <dhcp_rebind+0x128>)
 801933a:	6818      	ldr	r0, [r3, #0]
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	9300      	str	r3, [sp, #0]
 8019340:	2343      	movs	r3, #67	@ 0x43
 8019342:	4a1e      	ldr	r2, [pc, #120]	@ (80193bc <dhcp_rebind+0x12c>)
 8019344:	6979      	ldr	r1, [r7, #20]
 8019346:	f7fe fd67 	bl	8017e18 <udp_sendto_if>
 801934a:	4603      	mov	r3, r0
 801934c:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801934e:	6978      	ldr	r0, [r7, #20]
 8019350:	f7f7 fd5a 	bl	8010e08 <pbuf_free>
 8019354:	e001      	b.n	801935a <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019356:	23ff      	movs	r3, #255	@ 0xff
 8019358:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801935a:	69bb      	ldr	r3, [r7, #24]
 801935c:	799b      	ldrb	r3, [r3, #6]
 801935e:	2bff      	cmp	r3, #255	@ 0xff
 8019360:	d005      	beq.n	801936e <dhcp_rebind+0xde>
    dhcp->tries++;
 8019362:	69bb      	ldr	r3, [r7, #24]
 8019364:	799b      	ldrb	r3, [r3, #6]
 8019366:	3301      	adds	r3, #1
 8019368:	b2da      	uxtb	r2, r3
 801936a:	69bb      	ldr	r3, [r7, #24]
 801936c:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 801936e:	69bb      	ldr	r3, [r7, #24]
 8019370:	799b      	ldrb	r3, [r3, #6]
 8019372:	2b09      	cmp	r3, #9
 8019374:	d809      	bhi.n	801938a <dhcp_rebind+0xfa>
 8019376:	69bb      	ldr	r3, [r7, #24]
 8019378:	799b      	ldrb	r3, [r3, #6]
 801937a:	461a      	mov	r2, r3
 801937c:	0152      	lsls	r2, r2, #5
 801937e:	1ad2      	subs	r2, r2, r3
 8019380:	0092      	lsls	r2, r2, #2
 8019382:	4413      	add	r3, r2
 8019384:	00db      	lsls	r3, r3, #3
 8019386:	b29b      	uxth	r3, r3
 8019388:	e001      	b.n	801938e <dhcp_rebind+0xfe>
 801938a:	f242 7310 	movw	r3, #10000	@ 0x2710
 801938e:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019390:	89fb      	ldrh	r3, [r7, #14]
 8019392:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019396:	4a0a      	ldr	r2, [pc, #40]	@ (80193c0 <dhcp_rebind+0x130>)
 8019398:	fb82 1203 	smull	r1, r2, r2, r3
 801939c:	1152      	asrs	r2, r2, #5
 801939e:	17db      	asrs	r3, r3, #31
 80193a0:	1ad3      	subs	r3, r2, r3
 80193a2:	b29a      	uxth	r2, r3
 80193a4:	69bb      	ldr	r3, [r7, #24]
 80193a6:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80193a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80193ac:	4618      	mov	r0, r3
 80193ae:	3720      	adds	r7, #32
 80193b0:	46bd      	mov	sp, r7
 80193b2:	bd80      	pop	{r7, pc}
 80193b4:	20000030 	.word	0x20000030
 80193b8:	2000ecc4 	.word	0x2000ecc4
 80193bc:	08025744 	.word	0x08025744
 80193c0:	10624dd3 	.word	0x10624dd3

080193c4 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80193c4:	b5b0      	push	{r4, r5, r7, lr}
 80193c6:	b08a      	sub	sp, #40	@ 0x28
 80193c8:	af02      	add	r7, sp, #8
 80193ca:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80193cc:	687b      	ldr	r3, [r7, #4]
 80193ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80193d0:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80193d2:	2103      	movs	r1, #3
 80193d4:	69b8      	ldr	r0, [r7, #24]
 80193d6:	f000 f943 	bl	8019660 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80193da:	f107 030c 	add.w	r3, r7, #12
 80193de:	2203      	movs	r2, #3
 80193e0:	69b9      	ldr	r1, [r7, #24]
 80193e2:	6878      	ldr	r0, [r7, #4]
 80193e4:	f000 fdf8 	bl	8019fd8 <dhcp_create_msg>
 80193e8:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80193ea:	697b      	ldr	r3, [r7, #20]
 80193ec:	2b00      	cmp	r3, #0
 80193ee:	d066      	beq.n	80194be <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80193f0:	697b      	ldr	r3, [r7, #20]
 80193f2:	685b      	ldr	r3, [r3, #4]
 80193f4:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80193f6:	89b8      	ldrh	r0, [r7, #12]
 80193f8:	693b      	ldr	r3, [r7, #16]
 80193fa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80193fe:	2302      	movs	r3, #2
 8019400:	2239      	movs	r2, #57	@ 0x39
 8019402:	f000 f947 	bl	8019694 <dhcp_option>
 8019406:	4603      	mov	r3, r0
 8019408:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801940a:	89b8      	ldrh	r0, [r7, #12]
 801940c:	693b      	ldr	r3, [r7, #16]
 801940e:	33f0      	adds	r3, #240	@ 0xf0
 8019410:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8019414:	4619      	mov	r1, r3
 8019416:	f000 f997 	bl	8019748 <dhcp_option_short>
 801941a:	4603      	mov	r3, r0
 801941c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 801941e:	89b8      	ldrh	r0, [r7, #12]
 8019420:	693b      	ldr	r3, [r7, #16]
 8019422:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019426:	2304      	movs	r3, #4
 8019428:	2232      	movs	r2, #50	@ 0x32
 801942a:	f000 f933 	bl	8019694 <dhcp_option>
 801942e:	4603      	mov	r3, r0
 8019430:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8019432:	89bc      	ldrh	r4, [r7, #12]
 8019434:	693b      	ldr	r3, [r7, #16]
 8019436:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 801943a:	69bb      	ldr	r3, [r7, #24]
 801943c:	69db      	ldr	r3, [r3, #28]
 801943e:	4618      	mov	r0, r3
 8019440:	f7f5 fdd9 	bl	800eff6 <lwip_htonl>
 8019444:	4603      	mov	r3, r0
 8019446:	461a      	mov	r2, r3
 8019448:	4629      	mov	r1, r5
 801944a:	4620      	mov	r0, r4
 801944c:	f000 f9ae 	bl	80197ac <dhcp_option_long>
 8019450:	4603      	mov	r3, r0
 8019452:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019454:	89b8      	ldrh	r0, [r7, #12]
 8019456:	693b      	ldr	r3, [r7, #16]
 8019458:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801945c:	2304      	movs	r3, #4
 801945e:	2237      	movs	r2, #55	@ 0x37
 8019460:	f000 f918 	bl	8019694 <dhcp_option>
 8019464:	4603      	mov	r3, r0
 8019466:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019468:	2300      	movs	r3, #0
 801946a:	77bb      	strb	r3, [r7, #30]
 801946c:	e00e      	b.n	801948c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801946e:	89b8      	ldrh	r0, [r7, #12]
 8019470:	693b      	ldr	r3, [r7, #16]
 8019472:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019476:	7fbb      	ldrb	r3, [r7, #30]
 8019478:	4a28      	ldr	r2, [pc, #160]	@ (801951c <dhcp_reboot+0x158>)
 801947a:	5cd3      	ldrb	r3, [r2, r3]
 801947c:	461a      	mov	r2, r3
 801947e:	f000 f93d 	bl	80196fc <dhcp_option_byte>
 8019482:	4603      	mov	r3, r0
 8019484:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019486:	7fbb      	ldrb	r3, [r7, #30]
 8019488:	3301      	adds	r3, #1
 801948a:	77bb      	strb	r3, [r7, #30]
 801948c:	7fbb      	ldrb	r3, [r7, #30]
 801948e:	2b03      	cmp	r3, #3
 8019490:	d9ed      	bls.n	801946e <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019492:	89b8      	ldrh	r0, [r7, #12]
 8019494:	693b      	ldr	r3, [r7, #16]
 8019496:	33f0      	adds	r3, #240	@ 0xf0
 8019498:	697a      	ldr	r2, [r7, #20]
 801949a:	4619      	mov	r1, r3
 801949c:	f000 fe72 	bl	801a184 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80194a0:	4b1f      	ldr	r3, [pc, #124]	@ (8019520 <dhcp_reboot+0x15c>)
 80194a2:	6818      	ldr	r0, [r3, #0]
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	9300      	str	r3, [sp, #0]
 80194a8:	2343      	movs	r3, #67	@ 0x43
 80194aa:	4a1e      	ldr	r2, [pc, #120]	@ (8019524 <dhcp_reboot+0x160>)
 80194ac:	6979      	ldr	r1, [r7, #20]
 80194ae:	f7fe fcb3 	bl	8017e18 <udp_sendto_if>
 80194b2:	4603      	mov	r3, r0
 80194b4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80194b6:	6978      	ldr	r0, [r7, #20]
 80194b8:	f7f7 fca6 	bl	8010e08 <pbuf_free>
 80194bc:	e001      	b.n	80194c2 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80194be:	23ff      	movs	r3, #255	@ 0xff
 80194c0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80194c2:	69bb      	ldr	r3, [r7, #24]
 80194c4:	799b      	ldrb	r3, [r3, #6]
 80194c6:	2bff      	cmp	r3, #255	@ 0xff
 80194c8:	d005      	beq.n	80194d6 <dhcp_reboot+0x112>
    dhcp->tries++;
 80194ca:	69bb      	ldr	r3, [r7, #24]
 80194cc:	799b      	ldrb	r3, [r3, #6]
 80194ce:	3301      	adds	r3, #1
 80194d0:	b2da      	uxtb	r2, r3
 80194d2:	69bb      	ldr	r3, [r7, #24]
 80194d4:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80194d6:	69bb      	ldr	r3, [r7, #24]
 80194d8:	799b      	ldrb	r3, [r3, #6]
 80194da:	2b09      	cmp	r3, #9
 80194dc:	d809      	bhi.n	80194f2 <dhcp_reboot+0x12e>
 80194de:	69bb      	ldr	r3, [r7, #24]
 80194e0:	799b      	ldrb	r3, [r3, #6]
 80194e2:	461a      	mov	r2, r3
 80194e4:	0152      	lsls	r2, r2, #5
 80194e6:	1ad2      	subs	r2, r2, r3
 80194e8:	0092      	lsls	r2, r2, #2
 80194ea:	4413      	add	r3, r2
 80194ec:	00db      	lsls	r3, r3, #3
 80194ee:	b29b      	uxth	r3, r3
 80194f0:	e001      	b.n	80194f6 <dhcp_reboot+0x132>
 80194f2:	f242 7310 	movw	r3, #10000	@ 0x2710
 80194f6:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80194f8:	89fb      	ldrh	r3, [r7, #14]
 80194fa:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80194fe:	4a0a      	ldr	r2, [pc, #40]	@ (8019528 <dhcp_reboot+0x164>)
 8019500:	fb82 1203 	smull	r1, r2, r2, r3
 8019504:	1152      	asrs	r2, r2, #5
 8019506:	17db      	asrs	r3, r3, #31
 8019508:	1ad3      	subs	r3, r2, r3
 801950a:	b29a      	uxth	r2, r3
 801950c:	69bb      	ldr	r3, [r7, #24]
 801950e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019510:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019514:	4618      	mov	r0, r3
 8019516:	3720      	adds	r7, #32
 8019518:	46bd      	mov	sp, r7
 801951a:	bdb0      	pop	{r4, r5, r7, pc}
 801951c:	20000030 	.word	0x20000030
 8019520:	2000ecc4 	.word	0x2000ecc4
 8019524:	08025744 	.word	0x08025744
 8019528:	10624dd3 	.word	0x10624dd3

0801952c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801952c:	b5b0      	push	{r4, r5, r7, lr}
 801952e:	b08a      	sub	sp, #40	@ 0x28
 8019530:	af02      	add	r7, sp, #8
 8019532:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019534:	687b      	ldr	r3, [r7, #4]
 8019536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019538:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801953a:	69fb      	ldr	r3, [r7, #28]
 801953c:	2b00      	cmp	r3, #0
 801953e:	f000 8084 	beq.w	801964a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8019542:	69fb      	ldr	r3, [r7, #28]
 8019544:	795b      	ldrb	r3, [r3, #5]
 8019546:	2b00      	cmp	r3, #0
 8019548:	f000 8081 	beq.w	801964e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801954c:	69fb      	ldr	r3, [r7, #28]
 801954e:	699b      	ldr	r3, [r3, #24]
 8019550:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8019552:	69fb      	ldr	r3, [r7, #28]
 8019554:	2200      	movs	r2, #0
 8019556:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8019558:	69fb      	ldr	r3, [r7, #28]
 801955a:	2200      	movs	r2, #0
 801955c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801955e:	69fb      	ldr	r3, [r7, #28]
 8019560:	2200      	movs	r2, #0
 8019562:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8019564:	69fb      	ldr	r3, [r7, #28]
 8019566:	2200      	movs	r2, #0
 8019568:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801956a:	69fb      	ldr	r3, [r7, #28]
 801956c:	2200      	movs	r2, #0
 801956e:	631a      	str	r2, [r3, #48]	@ 0x30
 8019570:	69fb      	ldr	r3, [r7, #28]
 8019572:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019574:	69fb      	ldr	r3, [r7, #28]
 8019576:	62da      	str	r2, [r3, #44]	@ 0x2c
 8019578:	69fb      	ldr	r3, [r7, #28]
 801957a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801957c:	69fb      	ldr	r3, [r7, #28]
 801957e:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8019580:	69fb      	ldr	r3, [r7, #28]
 8019582:	2200      	movs	r2, #0
 8019584:	829a      	strh	r2, [r3, #20]
 8019586:	69fb      	ldr	r3, [r7, #28]
 8019588:	8a9a      	ldrh	r2, [r3, #20]
 801958a:	69fb      	ldr	r3, [r7, #28]
 801958c:	825a      	strh	r2, [r3, #18]
 801958e:	69fb      	ldr	r3, [r7, #28]
 8019590:	8a5a      	ldrh	r2, [r3, #18]
 8019592:	69fb      	ldr	r3, [r7, #28]
 8019594:	821a      	strh	r2, [r3, #16]
 8019596:	69fb      	ldr	r3, [r7, #28]
 8019598:	8a1a      	ldrh	r2, [r3, #16]
 801959a:	69fb      	ldr	r3, [r7, #28]
 801959c:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 801959e:	6878      	ldr	r0, [r7, #4]
 80195a0:	f000 fe1e 	bl	801a1e0 <dhcp_supplied_address>
 80195a4:	4603      	mov	r3, r0
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d03b      	beq.n	8019622 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80195aa:	f107 030e 	add.w	r3, r7, #14
 80195ae:	2207      	movs	r2, #7
 80195b0:	69f9      	ldr	r1, [r7, #28]
 80195b2:	6878      	ldr	r0, [r7, #4]
 80195b4:	f000 fd10 	bl	8019fd8 <dhcp_create_msg>
 80195b8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80195ba:	69bb      	ldr	r3, [r7, #24]
 80195bc:	2b00      	cmp	r3, #0
 80195be:	d030      	beq.n	8019622 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80195c0:	69bb      	ldr	r3, [r7, #24]
 80195c2:	685b      	ldr	r3, [r3, #4]
 80195c4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80195c6:	89f8      	ldrh	r0, [r7, #14]
 80195c8:	697b      	ldr	r3, [r7, #20]
 80195ca:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80195ce:	2304      	movs	r3, #4
 80195d0:	2236      	movs	r2, #54	@ 0x36
 80195d2:	f000 f85f 	bl	8019694 <dhcp_option>
 80195d6:	4603      	mov	r3, r0
 80195d8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80195da:	89fc      	ldrh	r4, [r7, #14]
 80195dc:	697b      	ldr	r3, [r7, #20]
 80195de:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80195e2:	693b      	ldr	r3, [r7, #16]
 80195e4:	4618      	mov	r0, r3
 80195e6:	f7f5 fd06 	bl	800eff6 <lwip_htonl>
 80195ea:	4603      	mov	r3, r0
 80195ec:	461a      	mov	r2, r3
 80195ee:	4629      	mov	r1, r5
 80195f0:	4620      	mov	r0, r4
 80195f2:	f000 f8db 	bl	80197ac <dhcp_option_long>
 80195f6:	4603      	mov	r3, r0
 80195f8:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80195fa:	89f8      	ldrh	r0, [r7, #14]
 80195fc:	697b      	ldr	r3, [r7, #20]
 80195fe:	33f0      	adds	r3, #240	@ 0xf0
 8019600:	69ba      	ldr	r2, [r7, #24]
 8019602:	4619      	mov	r1, r3
 8019604:	f000 fdbe 	bl	801a184 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019608:	4b13      	ldr	r3, [pc, #76]	@ (8019658 <dhcp_release_and_stop+0x12c>)
 801960a:	6818      	ldr	r0, [r3, #0]
 801960c:	f107 0210 	add.w	r2, r7, #16
 8019610:	687b      	ldr	r3, [r7, #4]
 8019612:	9300      	str	r3, [sp, #0]
 8019614:	2343      	movs	r3, #67	@ 0x43
 8019616:	69b9      	ldr	r1, [r7, #24]
 8019618:	f7fe fbfe 	bl	8017e18 <udp_sendto_if>
      pbuf_free(p_out);
 801961c:	69b8      	ldr	r0, [r7, #24]
 801961e:	f7f7 fbf3 	bl	8010e08 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8019622:	4b0e      	ldr	r3, [pc, #56]	@ (801965c <dhcp_release_and_stop+0x130>)
 8019624:	4a0d      	ldr	r2, [pc, #52]	@ (801965c <dhcp_release_and_stop+0x130>)
 8019626:	490d      	ldr	r1, [pc, #52]	@ (801965c <dhcp_release_and_stop+0x130>)
 8019628:	6878      	ldr	r0, [r7, #4]
 801962a:	f7f6 fead 	bl	8010388 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801962e:	2100      	movs	r1, #0
 8019630:	69f8      	ldr	r0, [r7, #28]
 8019632:	f000 f815 	bl	8019660 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8019636:	69fb      	ldr	r3, [r7, #28]
 8019638:	791b      	ldrb	r3, [r3, #4]
 801963a:	2b00      	cmp	r3, #0
 801963c:	d008      	beq.n	8019650 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801963e:	f7fe ff6b 	bl	8018518 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8019642:	69fb      	ldr	r3, [r7, #28]
 8019644:	2200      	movs	r2, #0
 8019646:	711a      	strb	r2, [r3, #4]
 8019648:	e002      	b.n	8019650 <dhcp_release_and_stop+0x124>
    return;
 801964a:	bf00      	nop
 801964c:	e000      	b.n	8019650 <dhcp_release_and_stop+0x124>
    return;
 801964e:	bf00      	nop
  }
}
 8019650:	3720      	adds	r7, #32
 8019652:	46bd      	mov	sp, r7
 8019654:	bdb0      	pop	{r4, r5, r7, pc}
 8019656:	bf00      	nop
 8019658:	2000ecc4 	.word	0x2000ecc4
 801965c:	08025740 	.word	0x08025740

08019660 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8019660:	b480      	push	{r7}
 8019662:	b083      	sub	sp, #12
 8019664:	af00      	add	r7, sp, #0
 8019666:	6078      	str	r0, [r7, #4]
 8019668:	460b      	mov	r3, r1
 801966a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	795b      	ldrb	r3, [r3, #5]
 8019670:	78fa      	ldrb	r2, [r7, #3]
 8019672:	429a      	cmp	r2, r3
 8019674:	d008      	beq.n	8019688 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	78fa      	ldrb	r2, [r7, #3]
 801967a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	2200      	movs	r2, #0
 8019680:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	2200      	movs	r2, #0
 8019686:	811a      	strh	r2, [r3, #8]
  }
}
 8019688:	bf00      	nop
 801968a:	370c      	adds	r7, #12
 801968c:	46bd      	mov	sp, r7
 801968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019692:	4770      	bx	lr

08019694 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8019694:	b580      	push	{r7, lr}
 8019696:	b082      	sub	sp, #8
 8019698:	af00      	add	r7, sp, #0
 801969a:	6039      	str	r1, [r7, #0]
 801969c:	4611      	mov	r1, r2
 801969e:	461a      	mov	r2, r3
 80196a0:	4603      	mov	r3, r0
 80196a2:	80fb      	strh	r3, [r7, #6]
 80196a4:	460b      	mov	r3, r1
 80196a6:	717b      	strb	r3, [r7, #5]
 80196a8:	4613      	mov	r3, r2
 80196aa:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80196ac:	88fa      	ldrh	r2, [r7, #6]
 80196ae:	793b      	ldrb	r3, [r7, #4]
 80196b0:	4413      	add	r3, r2
 80196b2:	3302      	adds	r3, #2
 80196b4:	2b44      	cmp	r3, #68	@ 0x44
 80196b6:	d906      	bls.n	80196c6 <dhcp_option+0x32>
 80196b8:	4b0d      	ldr	r3, [pc, #52]	@ (80196f0 <dhcp_option+0x5c>)
 80196ba:	f240 529a 	movw	r2, #1434	@ 0x59a
 80196be:	490d      	ldr	r1, [pc, #52]	@ (80196f4 <dhcp_option+0x60>)
 80196c0:	480d      	ldr	r0, [pc, #52]	@ (80196f8 <dhcp_option+0x64>)
 80196c2:	f004 fb63 	bl	801dd8c <iprintf>
  options[options_out_len++] = option_type;
 80196c6:	88fb      	ldrh	r3, [r7, #6]
 80196c8:	1c5a      	adds	r2, r3, #1
 80196ca:	80fa      	strh	r2, [r7, #6]
 80196cc:	461a      	mov	r2, r3
 80196ce:	683b      	ldr	r3, [r7, #0]
 80196d0:	4413      	add	r3, r2
 80196d2:	797a      	ldrb	r2, [r7, #5]
 80196d4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80196d6:	88fb      	ldrh	r3, [r7, #6]
 80196d8:	1c5a      	adds	r2, r3, #1
 80196da:	80fa      	strh	r2, [r7, #6]
 80196dc:	461a      	mov	r2, r3
 80196de:	683b      	ldr	r3, [r7, #0]
 80196e0:	4413      	add	r3, r2
 80196e2:	793a      	ldrb	r2, [r7, #4]
 80196e4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80196e6:	88fb      	ldrh	r3, [r7, #6]
}
 80196e8:	4618      	mov	r0, r3
 80196ea:	3708      	adds	r7, #8
 80196ec:	46bd      	mov	sp, r7
 80196ee:	bd80      	pop	{r7, pc}
 80196f0:	08024a18 	.word	0x08024a18
 80196f4:	08024bac 	.word	0x08024bac
 80196f8:	08024a78 	.word	0x08024a78

080196fc <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 80196fc:	b580      	push	{r7, lr}
 80196fe:	b082      	sub	sp, #8
 8019700:	af00      	add	r7, sp, #0
 8019702:	4603      	mov	r3, r0
 8019704:	6039      	str	r1, [r7, #0]
 8019706:	80fb      	strh	r3, [r7, #6]
 8019708:	4613      	mov	r3, r2
 801970a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801970c:	88fb      	ldrh	r3, [r7, #6]
 801970e:	2b43      	cmp	r3, #67	@ 0x43
 8019710:	d906      	bls.n	8019720 <dhcp_option_byte+0x24>
 8019712:	4b0a      	ldr	r3, [pc, #40]	@ (801973c <dhcp_option_byte+0x40>)
 8019714:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 8019718:	4909      	ldr	r1, [pc, #36]	@ (8019740 <dhcp_option_byte+0x44>)
 801971a:	480a      	ldr	r0, [pc, #40]	@ (8019744 <dhcp_option_byte+0x48>)
 801971c:	f004 fb36 	bl	801dd8c <iprintf>
  options[options_out_len++] = value;
 8019720:	88fb      	ldrh	r3, [r7, #6]
 8019722:	1c5a      	adds	r2, r3, #1
 8019724:	80fa      	strh	r2, [r7, #6]
 8019726:	461a      	mov	r2, r3
 8019728:	683b      	ldr	r3, [r7, #0]
 801972a:	4413      	add	r3, r2
 801972c:	797a      	ldrb	r2, [r7, #5]
 801972e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019730:	88fb      	ldrh	r3, [r7, #6]
}
 8019732:	4618      	mov	r0, r3
 8019734:	3708      	adds	r7, #8
 8019736:	46bd      	mov	sp, r7
 8019738:	bd80      	pop	{r7, pc}
 801973a:	bf00      	nop
 801973c:	08024a18 	.word	0x08024a18
 8019740:	08024bf0 	.word	0x08024bf0
 8019744:	08024a78 	.word	0x08024a78

08019748 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8019748:	b580      	push	{r7, lr}
 801974a:	b082      	sub	sp, #8
 801974c:	af00      	add	r7, sp, #0
 801974e:	4603      	mov	r3, r0
 8019750:	6039      	str	r1, [r7, #0]
 8019752:	80fb      	strh	r3, [r7, #6]
 8019754:	4613      	mov	r3, r2
 8019756:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8019758:	88fb      	ldrh	r3, [r7, #6]
 801975a:	3302      	adds	r3, #2
 801975c:	2b44      	cmp	r3, #68	@ 0x44
 801975e:	d906      	bls.n	801976e <dhcp_option_short+0x26>
 8019760:	4b0f      	ldr	r3, [pc, #60]	@ (80197a0 <dhcp_option_short+0x58>)
 8019762:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 8019766:	490f      	ldr	r1, [pc, #60]	@ (80197a4 <dhcp_option_short+0x5c>)
 8019768:	480f      	ldr	r0, [pc, #60]	@ (80197a8 <dhcp_option_short+0x60>)
 801976a:	f004 fb0f 	bl	801dd8c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801976e:	88bb      	ldrh	r3, [r7, #4]
 8019770:	0a1b      	lsrs	r3, r3, #8
 8019772:	b29a      	uxth	r2, r3
 8019774:	88fb      	ldrh	r3, [r7, #6]
 8019776:	1c59      	adds	r1, r3, #1
 8019778:	80f9      	strh	r1, [r7, #6]
 801977a:	4619      	mov	r1, r3
 801977c:	683b      	ldr	r3, [r7, #0]
 801977e:	440b      	add	r3, r1
 8019780:	b2d2      	uxtb	r2, r2
 8019782:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8019784:	88fb      	ldrh	r3, [r7, #6]
 8019786:	1c5a      	adds	r2, r3, #1
 8019788:	80fa      	strh	r2, [r7, #6]
 801978a:	461a      	mov	r2, r3
 801978c:	683b      	ldr	r3, [r7, #0]
 801978e:	4413      	add	r3, r2
 8019790:	88ba      	ldrh	r2, [r7, #4]
 8019792:	b2d2      	uxtb	r2, r2
 8019794:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8019796:	88fb      	ldrh	r3, [r7, #6]
}
 8019798:	4618      	mov	r0, r3
 801979a:	3708      	adds	r7, #8
 801979c:	46bd      	mov	sp, r7
 801979e:	bd80      	pop	{r7, pc}
 80197a0:	08024a18 	.word	0x08024a18
 80197a4:	08024c28 	.word	0x08024c28
 80197a8:	08024a78 	.word	0x08024a78

080197ac <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80197ac:	b580      	push	{r7, lr}
 80197ae:	b084      	sub	sp, #16
 80197b0:	af00      	add	r7, sp, #0
 80197b2:	4603      	mov	r3, r0
 80197b4:	60b9      	str	r1, [r7, #8]
 80197b6:	607a      	str	r2, [r7, #4]
 80197b8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80197ba:	89fb      	ldrh	r3, [r7, #14]
 80197bc:	3304      	adds	r3, #4
 80197be:	2b44      	cmp	r3, #68	@ 0x44
 80197c0:	d906      	bls.n	80197d0 <dhcp_option_long+0x24>
 80197c2:	4b19      	ldr	r3, [pc, #100]	@ (8019828 <dhcp_option_long+0x7c>)
 80197c4:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 80197c8:	4918      	ldr	r1, [pc, #96]	@ (801982c <dhcp_option_long+0x80>)
 80197ca:	4819      	ldr	r0, [pc, #100]	@ (8019830 <dhcp_option_long+0x84>)
 80197cc:	f004 fade 	bl	801dd8c <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	0e1a      	lsrs	r2, r3, #24
 80197d4:	89fb      	ldrh	r3, [r7, #14]
 80197d6:	1c59      	adds	r1, r3, #1
 80197d8:	81f9      	strh	r1, [r7, #14]
 80197da:	4619      	mov	r1, r3
 80197dc:	68bb      	ldr	r3, [r7, #8]
 80197de:	440b      	add	r3, r1
 80197e0:	b2d2      	uxtb	r2, r2
 80197e2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80197e4:	687b      	ldr	r3, [r7, #4]
 80197e6:	0c1a      	lsrs	r2, r3, #16
 80197e8:	89fb      	ldrh	r3, [r7, #14]
 80197ea:	1c59      	adds	r1, r3, #1
 80197ec:	81f9      	strh	r1, [r7, #14]
 80197ee:	4619      	mov	r1, r3
 80197f0:	68bb      	ldr	r3, [r7, #8]
 80197f2:	440b      	add	r3, r1
 80197f4:	b2d2      	uxtb	r2, r2
 80197f6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 80197f8:	687b      	ldr	r3, [r7, #4]
 80197fa:	0a1a      	lsrs	r2, r3, #8
 80197fc:	89fb      	ldrh	r3, [r7, #14]
 80197fe:	1c59      	adds	r1, r3, #1
 8019800:	81f9      	strh	r1, [r7, #14]
 8019802:	4619      	mov	r1, r3
 8019804:	68bb      	ldr	r3, [r7, #8]
 8019806:	440b      	add	r3, r1
 8019808:	b2d2      	uxtb	r2, r2
 801980a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801980c:	89fb      	ldrh	r3, [r7, #14]
 801980e:	1c5a      	adds	r2, r3, #1
 8019810:	81fa      	strh	r2, [r7, #14]
 8019812:	461a      	mov	r2, r3
 8019814:	68bb      	ldr	r3, [r7, #8]
 8019816:	4413      	add	r3, r2
 8019818:	687a      	ldr	r2, [r7, #4]
 801981a:	b2d2      	uxtb	r2, r2
 801981c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801981e:	89fb      	ldrh	r3, [r7, #14]
}
 8019820:	4618      	mov	r0, r3
 8019822:	3710      	adds	r7, #16
 8019824:	46bd      	mov	sp, r7
 8019826:	bd80      	pop	{r7, pc}
 8019828:	08024a18 	.word	0x08024a18
 801982c:	08024c64 	.word	0x08024c64
 8019830:	08024a78 	.word	0x08024a78

08019834 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8019834:	b580      	push	{r7, lr}
 8019836:	b090      	sub	sp, #64	@ 0x40
 8019838:	af00      	add	r7, sp, #0
 801983a:	6078      	str	r0, [r7, #4]
 801983c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801983e:	2300      	movs	r3, #0
 8019840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 8019842:	2300      	movs	r3, #0
 8019844:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8019846:	220a      	movs	r2, #10
 8019848:	2100      	movs	r1, #0
 801984a:	48ba      	ldr	r0, [pc, #744]	@ (8019b34 <dhcp_parse_reply+0x300>)
 801984c:	f004 fb3d 	bl	801deca <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8019850:	687b      	ldr	r3, [r7, #4]
 8019852:	895b      	ldrh	r3, [r3, #10]
 8019854:	2b2b      	cmp	r3, #43	@ 0x2b
 8019856:	d802      	bhi.n	801985e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8019858:	f06f 0301 	mvn.w	r3, #1
 801985c:	e2ea      	b.n	8019e34 <dhcp_parse_reply+0x600>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	685b      	ldr	r3, [r3, #4]
 8019862:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8019864:	23f0      	movs	r3, #240	@ 0xf0
 8019866:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8019868:	687b      	ldr	r3, [r7, #4]
 801986a:	891b      	ldrh	r3, [r3, #8]
 801986c:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8019872:	e00c      	b.n	801988e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8019874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019876:	895b      	ldrh	r3, [r3, #10]
 8019878:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801987a:	1ad3      	subs	r3, r2, r3
 801987c:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801987e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019880:	895b      	ldrh	r3, [r3, #10]
 8019882:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8019884:	1ad3      	subs	r3, r2, r3
 8019886:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 8019888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801988e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019890:	2b00      	cmp	r3, #0
 8019892:	d004      	beq.n	801989e <dhcp_parse_reply+0x6a>
 8019894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019896:	895b      	ldrh	r3, [r3, #10]
 8019898:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801989a:	429a      	cmp	r2, r3
 801989c:	d2ea      	bcs.n	8019874 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801989e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d102      	bne.n	80198aa <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80198a4:	f06f 0301 	mvn.w	r3, #1
 80198a8:	e2c4      	b.n	8019e34 <dhcp_parse_reply+0x600>
  }
  offset = options_idx;
 80198aa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80198ac:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 80198ae:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80198b0:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 80198b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80198b4:	685b      	ldr	r3, [r3, #4]
 80198b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80198b8:	e267      	b.n	8019d8a <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 80198ba:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80198bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80198be:	4413      	add	r3, r2
 80198c0:	781b      	ldrb	r3, [r3, #0]
 80198c2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80198c4:	2300      	movs	r3, #0
 80198c6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 80198ca:	f04f 33ff 	mov.w	r3, #4294967295
 80198ce:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80198d0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80198d2:	3302      	adds	r3, #2
 80198d4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80198d6:	8bfa      	ldrh	r2, [r7, #30]
 80198d8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80198da:	429a      	cmp	r2, r3
 80198dc:	d202      	bcs.n	80198e4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80198de:	f06f 0301 	mvn.w	r3, #1
 80198e2:	e2a7      	b.n	8019e34 <dhcp_parse_reply+0x600>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80198e4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80198e6:	3301      	adds	r3, #1
 80198e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80198ea:	8952      	ldrh	r2, [r2, #10]
 80198ec:	4293      	cmp	r3, r2
 80198ee:	da07      	bge.n	8019900 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 80198f0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80198f2:	3301      	adds	r3, #1
 80198f4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80198f6:	4413      	add	r3, r2
 80198f8:	781b      	ldrb	r3, [r3, #0]
 80198fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80198fe:	e00b      	b.n	8019918 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8019900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019902:	681b      	ldr	r3, [r3, #0]
 8019904:	2b00      	cmp	r3, #0
 8019906:	d004      	beq.n	8019912 <dhcp_parse_reply+0xde>
 8019908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801990a:	681b      	ldr	r3, [r3, #0]
 801990c:	685b      	ldr	r3, [r3, #4]
 801990e:	781b      	ldrb	r3, [r3, #0]
 8019910:	e000      	b.n	8019914 <dhcp_parse_reply+0xe0>
 8019912:	2300      	movs	r3, #0
 8019914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8019918:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801991c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 8019920:	7dfb      	ldrb	r3, [r7, #23]
 8019922:	2b3b      	cmp	r3, #59	@ 0x3b
 8019924:	f200 815a 	bhi.w	8019bdc <dhcp_parse_reply+0x3a8>
 8019928:	a201      	add	r2, pc, #4	@ (adr r2, 8019930 <dhcp_parse_reply+0xfc>)
 801992a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801992e:	bf00      	nop
 8019930:	08019a21 	.word	0x08019a21
 8019934:	08019a31 	.word	0x08019a31
 8019938:	08019bdd 	.word	0x08019bdd
 801993c:	08019a53 	.word	0x08019a53
 8019940:	08019bdd 	.word	0x08019bdd
 8019944:	08019bdd 	.word	0x08019bdd
 8019948:	08019a7f 	.word	0x08019a7f
 801994c:	08019bdd 	.word	0x08019bdd
 8019950:	08019bdd 	.word	0x08019bdd
 8019954:	08019bdd 	.word	0x08019bdd
 8019958:	08019bdd 	.word	0x08019bdd
 801995c:	08019bdd 	.word	0x08019bdd
 8019960:	08019bdd 	.word	0x08019bdd
 8019964:	08019bdd 	.word	0x08019bdd
 8019968:	08019bdd 	.word	0x08019bdd
 801996c:	08019bdd 	.word	0x08019bdd
 8019970:	08019bdd 	.word	0x08019bdd
 8019974:	08019bdd 	.word	0x08019bdd
 8019978:	08019bdd 	.word	0x08019bdd
 801997c:	08019bdd 	.word	0x08019bdd
 8019980:	08019bdd 	.word	0x08019bdd
 8019984:	08019bdd 	.word	0x08019bdd
 8019988:	08019bdd 	.word	0x08019bdd
 801998c:	08019bdd 	.word	0x08019bdd
 8019990:	08019bdd 	.word	0x08019bdd
 8019994:	08019bdd 	.word	0x08019bdd
 8019998:	08019bdd 	.word	0x08019bdd
 801999c:	08019bdd 	.word	0x08019bdd
 80199a0:	08019bdd 	.word	0x08019bdd
 80199a4:	08019bdd 	.word	0x08019bdd
 80199a8:	08019bdd 	.word	0x08019bdd
 80199ac:	08019bdd 	.word	0x08019bdd
 80199b0:	08019bdd 	.word	0x08019bdd
 80199b4:	08019bdd 	.word	0x08019bdd
 80199b8:	08019bdd 	.word	0x08019bdd
 80199bc:	08019bdd 	.word	0x08019bdd
 80199c0:	08019bdd 	.word	0x08019bdd
 80199c4:	08019bdd 	.word	0x08019bdd
 80199c8:	08019bdd 	.word	0x08019bdd
 80199cc:	08019bdd 	.word	0x08019bdd
 80199d0:	08019bdd 	.word	0x08019bdd
 80199d4:	08019bdd 	.word	0x08019bdd
 80199d8:	08019bdd 	.word	0x08019bdd
 80199dc:	08019bdd 	.word	0x08019bdd
 80199e0:	08019bdd 	.word	0x08019bdd
 80199e4:	08019bdd 	.word	0x08019bdd
 80199e8:	08019bdd 	.word	0x08019bdd
 80199ec:	08019bdd 	.word	0x08019bdd
 80199f0:	08019bdd 	.word	0x08019bdd
 80199f4:	08019bdd 	.word	0x08019bdd
 80199f8:	08019bdd 	.word	0x08019bdd
 80199fc:	08019ad5 	.word	0x08019ad5
 8019a00:	08019af7 	.word	0x08019af7
 8019a04:	08019b55 	.word	0x08019b55
 8019a08:	08019b77 	.word	0x08019b77
 8019a0c:	08019bdd 	.word	0x08019bdd
 8019a10:	08019bdd 	.word	0x08019bdd
 8019a14:	08019bdd 	.word	0x08019bdd
 8019a18:	08019b99 	.word	0x08019b99
 8019a1c:	08019bbb 	.word	0x08019bbb
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8019a20:	2300      	movs	r3, #0
 8019a22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019a26:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a2a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 8019a2e:	e0d9      	b.n	8019be4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019a30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a34:	2b04      	cmp	r3, #4
 8019a36:	d009      	beq.n	8019a4c <dhcp_parse_reply+0x218>
 8019a38:	4b3f      	ldr	r3, [pc, #252]	@ (8019b38 <dhcp_parse_reply+0x304>)
 8019a3a:	f240 622e 	movw	r2, #1582	@ 0x62e
 8019a3e:	493f      	ldr	r1, [pc, #252]	@ (8019b3c <dhcp_parse_reply+0x308>)
 8019a40:	483f      	ldr	r0, [pc, #252]	@ (8019b40 <dhcp_parse_reply+0x30c>)
 8019a42:	f004 f9a3 	bl	801dd8c <iprintf>
 8019a46:	f06f 0305 	mvn.w	r3, #5
 8019a4a:	e1f3      	b.n	8019e34 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8019a4c:	2306      	movs	r3, #6
 8019a4e:	623b      	str	r3, [r7, #32]
        break;
 8019a50:	e0c8      	b.n	8019be4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8019a52:	2304      	movs	r3, #4
 8019a54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8019a58:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019a5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019a60:	429a      	cmp	r2, r3
 8019a62:	d209      	bcs.n	8019a78 <dhcp_parse_reply+0x244>
 8019a64:	4b34      	ldr	r3, [pc, #208]	@ (8019b38 <dhcp_parse_reply+0x304>)
 8019a66:	f240 6233 	movw	r2, #1587	@ 0x633
 8019a6a:	4936      	ldr	r1, [pc, #216]	@ (8019b44 <dhcp_parse_reply+0x310>)
 8019a6c:	4834      	ldr	r0, [pc, #208]	@ (8019b40 <dhcp_parse_reply+0x30c>)
 8019a6e:	f004 f98d 	bl	801dd8c <iprintf>
 8019a72:	f06f 0305 	mvn.w	r3, #5
 8019a76:	e1dd      	b.n	8019e34 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8019a78:	2307      	movs	r3, #7
 8019a7a:	623b      	str	r3, [r7, #32]
        break;
 8019a7c:	e0b2      	b.n	8019be4 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 8019a7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019a82:	f003 0303 	and.w	r3, r3, #3
 8019a86:	b2db      	uxtb	r3, r3
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d009      	beq.n	8019aa0 <dhcp_parse_reply+0x26c>
 8019a8c:	4b2a      	ldr	r3, [pc, #168]	@ (8019b38 <dhcp_parse_reply+0x304>)
 8019a8e:	f240 6239 	movw	r2, #1593	@ 0x639
 8019a92:	492d      	ldr	r1, [pc, #180]	@ (8019b48 <dhcp_parse_reply+0x314>)
 8019a94:	482a      	ldr	r0, [pc, #168]	@ (8019b40 <dhcp_parse_reply+0x30c>)
 8019a96:	f004 f979 	bl	801dd8c <iprintf>
 8019a9a:	f06f 0305 	mvn.w	r3, #5
 8019a9e:	e1c9      	b.n	8019e34 <dhcp_parse_reply+0x600>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 8019aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019aa4:	2b08      	cmp	r3, #8
 8019aa6:	bf28      	it	cs
 8019aa8:	2308      	movcs	r3, #8
 8019aaa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8019aae:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019ab2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019ab6:	429a      	cmp	r2, r3
 8019ab8:	d209      	bcs.n	8019ace <dhcp_parse_reply+0x29a>
 8019aba:	4b1f      	ldr	r3, [pc, #124]	@ (8019b38 <dhcp_parse_reply+0x304>)
 8019abc:	f240 623c 	movw	r2, #1596	@ 0x63c
 8019ac0:	4920      	ldr	r1, [pc, #128]	@ (8019b44 <dhcp_parse_reply+0x310>)
 8019ac2:	481f      	ldr	r0, [pc, #124]	@ (8019b40 <dhcp_parse_reply+0x30c>)
 8019ac4:	f004 f962 	bl	801dd8c <iprintf>
 8019ac8:	f06f 0305 	mvn.w	r3, #5
 8019acc:	e1b2      	b.n	8019e34 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 8019ace:	2308      	movs	r3, #8
 8019ad0:	623b      	str	r3, [r7, #32]
        break;
 8019ad2:	e087      	b.n	8019be4 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019ad4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019ad8:	2b04      	cmp	r3, #4
 8019ada:	d009      	beq.n	8019af0 <dhcp_parse_reply+0x2bc>
 8019adc:	4b16      	ldr	r3, [pc, #88]	@ (8019b38 <dhcp_parse_reply+0x304>)
 8019ade:	f240 6241 	movw	r2, #1601	@ 0x641
 8019ae2:	4916      	ldr	r1, [pc, #88]	@ (8019b3c <dhcp_parse_reply+0x308>)
 8019ae4:	4816      	ldr	r0, [pc, #88]	@ (8019b40 <dhcp_parse_reply+0x30c>)
 8019ae6:	f004 f951 	bl	801dd8c <iprintf>
 8019aea:	f06f 0305 	mvn.w	r3, #5
 8019aee:	e1a1      	b.n	8019e34 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8019af0:	2303      	movs	r3, #3
 8019af2:	623b      	str	r3, [r7, #32]
        break;
 8019af4:	e076      	b.n	8019be4 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8019af6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019afa:	2b01      	cmp	r3, #1
 8019afc:	d009      	beq.n	8019b12 <dhcp_parse_reply+0x2de>
 8019afe:	4b0e      	ldr	r3, [pc, #56]	@ (8019b38 <dhcp_parse_reply+0x304>)
 8019b00:	f240 624f 	movw	r2, #1615	@ 0x64f
 8019b04:	4911      	ldr	r1, [pc, #68]	@ (8019b4c <dhcp_parse_reply+0x318>)
 8019b06:	480e      	ldr	r0, [pc, #56]	@ (8019b40 <dhcp_parse_reply+0x30c>)
 8019b08:	f004 f940 	bl	801dd8c <iprintf>
 8019b0c:	f06f 0305 	mvn.w	r3, #5
 8019b10:	e190      	b.n	8019e34 <dhcp_parse_reply+0x600>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8019b12:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8019b14:	2bf0      	cmp	r3, #240	@ 0xf0
 8019b16:	d009      	beq.n	8019b2c <dhcp_parse_reply+0x2f8>
 8019b18:	4b07      	ldr	r3, [pc, #28]	@ (8019b38 <dhcp_parse_reply+0x304>)
 8019b1a:	f240 6251 	movw	r2, #1617	@ 0x651
 8019b1e:	490c      	ldr	r1, [pc, #48]	@ (8019b50 <dhcp_parse_reply+0x31c>)
 8019b20:	4807      	ldr	r0, [pc, #28]	@ (8019b40 <dhcp_parse_reply+0x30c>)
 8019b22:	f004 f933 	bl	801dd8c <iprintf>
 8019b26:	f06f 0305 	mvn.w	r3, #5
 8019b2a:	e183      	b.n	8019e34 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8019b2c:	2300      	movs	r3, #0
 8019b2e:	623b      	str	r3, [r7, #32]
        break;
 8019b30:	e058      	b.n	8019be4 <dhcp_parse_reply+0x3b0>
 8019b32:	bf00      	nop
 8019b34:	2000ecb8 	.word	0x2000ecb8
 8019b38:	08024a18 	.word	0x08024a18
 8019b3c:	08024ca0 	.word	0x08024ca0
 8019b40:	08024a78 	.word	0x08024a78
 8019b44:	08024cac 	.word	0x08024cac
 8019b48:	08024cc0 	.word	0x08024cc0
 8019b4c:	08024cd0 	.word	0x08024cd0
 8019b50:	08024cdc 	.word	0x08024cdc
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8019b54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019b58:	2b01      	cmp	r3, #1
 8019b5a:	d009      	beq.n	8019b70 <dhcp_parse_reply+0x33c>
 8019b5c:	4b9d      	ldr	r3, [pc, #628]	@ (8019dd4 <dhcp_parse_reply+0x5a0>)
 8019b5e:	f240 6255 	movw	r2, #1621	@ 0x655
 8019b62:	499d      	ldr	r1, [pc, #628]	@ (8019dd8 <dhcp_parse_reply+0x5a4>)
 8019b64:	489d      	ldr	r0, [pc, #628]	@ (8019ddc <dhcp_parse_reply+0x5a8>)
 8019b66:	f004 f911 	bl	801dd8c <iprintf>
 8019b6a:	f06f 0305 	mvn.w	r3, #5
 8019b6e:	e161      	b.n	8019e34 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8019b70:	2301      	movs	r3, #1
 8019b72:	623b      	str	r3, [r7, #32]
        break;
 8019b74:	e036      	b.n	8019be4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019b76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019b7a:	2b04      	cmp	r3, #4
 8019b7c:	d009      	beq.n	8019b92 <dhcp_parse_reply+0x35e>
 8019b7e:	4b95      	ldr	r3, [pc, #596]	@ (8019dd4 <dhcp_parse_reply+0x5a0>)
 8019b80:	f240 6259 	movw	r2, #1625	@ 0x659
 8019b84:	4996      	ldr	r1, [pc, #600]	@ (8019de0 <dhcp_parse_reply+0x5ac>)
 8019b86:	4895      	ldr	r0, [pc, #596]	@ (8019ddc <dhcp_parse_reply+0x5a8>)
 8019b88:	f004 f900 	bl	801dd8c <iprintf>
 8019b8c:	f06f 0305 	mvn.w	r3, #5
 8019b90:	e150      	b.n	8019e34 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8019b92:	2302      	movs	r3, #2
 8019b94:	623b      	str	r3, [r7, #32]
        break;
 8019b96:	e025      	b.n	8019be4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019b98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019b9c:	2b04      	cmp	r3, #4
 8019b9e:	d009      	beq.n	8019bb4 <dhcp_parse_reply+0x380>
 8019ba0:	4b8c      	ldr	r3, [pc, #560]	@ (8019dd4 <dhcp_parse_reply+0x5a0>)
 8019ba2:	f240 625d 	movw	r2, #1629	@ 0x65d
 8019ba6:	498e      	ldr	r1, [pc, #568]	@ (8019de0 <dhcp_parse_reply+0x5ac>)
 8019ba8:	488c      	ldr	r0, [pc, #560]	@ (8019ddc <dhcp_parse_reply+0x5a8>)
 8019baa:	f004 f8ef 	bl	801dd8c <iprintf>
 8019bae:	f06f 0305 	mvn.w	r3, #5
 8019bb2:	e13f      	b.n	8019e34 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T1;
 8019bb4:	2304      	movs	r3, #4
 8019bb6:	623b      	str	r3, [r7, #32]
        break;
 8019bb8:	e014      	b.n	8019be4 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8019bba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019bbe:	2b04      	cmp	r3, #4
 8019bc0:	d009      	beq.n	8019bd6 <dhcp_parse_reply+0x3a2>
 8019bc2:	4b84      	ldr	r3, [pc, #528]	@ (8019dd4 <dhcp_parse_reply+0x5a0>)
 8019bc4:	f240 6261 	movw	r2, #1633	@ 0x661
 8019bc8:	4985      	ldr	r1, [pc, #532]	@ (8019de0 <dhcp_parse_reply+0x5ac>)
 8019bca:	4884      	ldr	r0, [pc, #528]	@ (8019ddc <dhcp_parse_reply+0x5a8>)
 8019bcc:	f004 f8de 	bl	801dd8c <iprintf>
 8019bd0:	f06f 0305 	mvn.w	r3, #5
 8019bd4:	e12e      	b.n	8019e34 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T2;
 8019bd6:	2305      	movs	r3, #5
 8019bd8:	623b      	str	r3, [r7, #32]
        break;
 8019bda:	e003      	b.n	8019be4 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 8019bdc:	2300      	movs	r3, #0
 8019bde:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8019be2:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8019be4:	7dfb      	ldrb	r3, [r7, #23]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d103      	bne.n	8019bf2 <dhcp_parse_reply+0x3be>
      offset++;
 8019bea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019bec:	3301      	adds	r3, #1
 8019bee:	877b      	strh	r3, [r7, #58]	@ 0x3a
 8019bf0:	e0a1      	b.n	8019d36 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8019bf2:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019bf8:	4413      	add	r3, r2
 8019bfa:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 8019bfe:	4293      	cmp	r3, r2
 8019c00:	dd02      	ble.n	8019c08 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 8019c02:	f06f 0301 	mvn.w	r3, #1
 8019c06:	e115      	b.n	8019e34 <dhcp_parse_reply+0x600>
      }
      offset = (u16_t)(offset + len + 2);
 8019c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019c0c:	b29a      	uxth	r2, r3
 8019c0e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019c10:	4413      	add	r3, r2
 8019c12:	b29b      	uxth	r3, r3
 8019c14:	3302      	adds	r3, #2
 8019c16:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 8019c18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019c1c:	2b00      	cmp	r3, #0
 8019c1e:	f000 808a 	beq.w	8019d36 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 8019c22:	2300      	movs	r3, #0
 8019c24:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8019c26:	6a3b      	ldr	r3, [r7, #32]
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	db02      	blt.n	8019c32 <dhcp_parse_reply+0x3fe>
 8019c2c:	6a3b      	ldr	r3, [r7, #32]
 8019c2e:	2b09      	cmp	r3, #9
 8019c30:	dd06      	ble.n	8019c40 <dhcp_parse_reply+0x40c>
 8019c32:	4b68      	ldr	r3, [pc, #416]	@ (8019dd4 <dhcp_parse_reply+0x5a0>)
 8019c34:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 8019c38:	496a      	ldr	r1, [pc, #424]	@ (8019de4 <dhcp_parse_reply+0x5b0>)
 8019c3a:	4868      	ldr	r0, [pc, #416]	@ (8019ddc <dhcp_parse_reply+0x5a8>)
 8019c3c:	f004 f8a6 	bl	801dd8c <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8019c40:	4a69      	ldr	r2, [pc, #420]	@ (8019de8 <dhcp_parse_reply+0x5b4>)
 8019c42:	6a3b      	ldr	r3, [r7, #32]
 8019c44:	4413      	add	r3, r2
 8019c46:	781b      	ldrb	r3, [r3, #0]
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d174      	bne.n	8019d36 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 8019c4c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019c50:	2b04      	cmp	r3, #4
 8019c52:	bf28      	it	cs
 8019c54:	2304      	movcs	r3, #4
 8019c56:	b2db      	uxtb	r3, r3
 8019c58:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8019c5a:	8bfb      	ldrh	r3, [r7, #30]
 8019c5c:	8aba      	ldrh	r2, [r7, #20]
 8019c5e:	f107 0108 	add.w	r1, r7, #8
 8019c62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8019c64:	f7f7 fad6 	bl	8011214 <pbuf_copy_partial>
 8019c68:	4603      	mov	r3, r0
 8019c6a:	461a      	mov	r2, r3
 8019c6c:	8abb      	ldrh	r3, [r7, #20]
 8019c6e:	4293      	cmp	r3, r2
 8019c70:	d002      	beq.n	8019c78 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 8019c72:	f06f 0301 	mvn.w	r3, #1
 8019c76:	e0dd      	b.n	8019e34 <dhcp_parse_reply+0x600>
          }
          if (decode_len > 4) {
 8019c78:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019c7c:	2b04      	cmp	r3, #4
 8019c7e:	d933      	bls.n	8019ce8 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8019c80:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019c84:	f003 0303 	and.w	r3, r3, #3
 8019c88:	b2db      	uxtb	r3, r3
 8019c8a:	2b00      	cmp	r3, #0
 8019c8c:	d009      	beq.n	8019ca2 <dhcp_parse_reply+0x46e>
 8019c8e:	4b51      	ldr	r3, [pc, #324]	@ (8019dd4 <dhcp_parse_reply+0x5a0>)
 8019c90:	f240 6281 	movw	r2, #1665	@ 0x681
 8019c94:	4955      	ldr	r1, [pc, #340]	@ (8019dec <dhcp_parse_reply+0x5b8>)
 8019c96:	4851      	ldr	r0, [pc, #324]	@ (8019ddc <dhcp_parse_reply+0x5a8>)
 8019c98:	f004 f878 	bl	801dd8c <iprintf>
 8019c9c:	f06f 0305 	mvn.w	r3, #5
 8019ca0:	e0c8      	b.n	8019e34 <dhcp_parse_reply+0x600>
            dhcp_got_option(dhcp, decode_idx);
 8019ca2:	4a51      	ldr	r2, [pc, #324]	@ (8019de8 <dhcp_parse_reply+0x5b4>)
 8019ca4:	6a3b      	ldr	r3, [r7, #32]
 8019ca6:	4413      	add	r3, r2
 8019ca8:	2201      	movs	r2, #1
 8019caa:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8019cac:	68bb      	ldr	r3, [r7, #8]
 8019cae:	4618      	mov	r0, r3
 8019cb0:	f7f5 f9a1 	bl	800eff6 <lwip_htonl>
 8019cb4:	4602      	mov	r2, r0
 8019cb6:	494e      	ldr	r1, [pc, #312]	@ (8019df0 <dhcp_parse_reply+0x5bc>)
 8019cb8:	6a3b      	ldr	r3, [r7, #32]
 8019cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8019cbe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019cc2:	3b04      	subs	r3, #4
 8019cc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8019cc8:	8bfb      	ldrh	r3, [r7, #30]
 8019cca:	3304      	adds	r3, #4
 8019ccc:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8019cce:	8a7a      	ldrh	r2, [r7, #18]
 8019cd0:	8bfb      	ldrh	r3, [r7, #30]
 8019cd2:	429a      	cmp	r2, r3
 8019cd4:	d202      	bcs.n	8019cdc <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 8019cd6:	f06f 0301 	mvn.w	r3, #1
 8019cda:	e0ab      	b.n	8019e34 <dhcp_parse_reply+0x600>
            }
            val_offset = next_val_offset;
 8019cdc:	8a7b      	ldrh	r3, [r7, #18]
 8019cde:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8019ce0:	6a3b      	ldr	r3, [r7, #32]
 8019ce2:	3301      	adds	r3, #1
 8019ce4:	623b      	str	r3, [r7, #32]
            goto decode_next;
 8019ce6:	e79e      	b.n	8019c26 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 8019ce8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019cec:	2b04      	cmp	r3, #4
 8019cee:	d106      	bne.n	8019cfe <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 8019cf0:	68bb      	ldr	r3, [r7, #8]
 8019cf2:	4618      	mov	r0, r3
 8019cf4:	f7f5 f97f 	bl	800eff6 <lwip_htonl>
 8019cf8:	4603      	mov	r3, r0
 8019cfa:	60bb      	str	r3, [r7, #8]
 8019cfc:	e011      	b.n	8019d22 <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8019cfe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8019d02:	2b01      	cmp	r3, #1
 8019d04:	d009      	beq.n	8019d1a <dhcp_parse_reply+0x4e6>
 8019d06:	4b33      	ldr	r3, [pc, #204]	@ (8019dd4 <dhcp_parse_reply+0x5a0>)
 8019d08:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 8019d0c:	4939      	ldr	r1, [pc, #228]	@ (8019df4 <dhcp_parse_reply+0x5c0>)
 8019d0e:	4833      	ldr	r0, [pc, #204]	@ (8019ddc <dhcp_parse_reply+0x5a8>)
 8019d10:	f004 f83c 	bl	801dd8c <iprintf>
 8019d14:	f06f 0305 	mvn.w	r3, #5
 8019d18:	e08c      	b.n	8019e34 <dhcp_parse_reply+0x600>
            value = ((u8_t *)&value)[0];
 8019d1a:	f107 0308 	add.w	r3, r7, #8
 8019d1e:	781b      	ldrb	r3, [r3, #0]
 8019d20:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 8019d22:	4a31      	ldr	r2, [pc, #196]	@ (8019de8 <dhcp_parse_reply+0x5b4>)
 8019d24:	6a3b      	ldr	r3, [r7, #32]
 8019d26:	4413      	add	r3, r2
 8019d28:	2201      	movs	r2, #1
 8019d2a:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8019d2c:	68ba      	ldr	r2, [r7, #8]
 8019d2e:	4930      	ldr	r1, [pc, #192]	@ (8019df0 <dhcp_parse_reply+0x5bc>)
 8019d30:	6a3b      	ldr	r3, [r7, #32]
 8019d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 8019d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d38:	895b      	ldrh	r3, [r3, #10]
 8019d3a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019d3c:	429a      	cmp	r2, r3
 8019d3e:	d324      	bcc.n	8019d8a <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 8019d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d42:	895b      	ldrh	r3, [r3, #10]
 8019d44:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019d46:	1ad3      	subs	r3, r2, r3
 8019d48:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8019d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d4c:	895b      	ldrh	r3, [r3, #10]
 8019d4e:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8019d50:	1ad3      	subs	r3, r2, r3
 8019d52:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 8019d54:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019d56:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8019d58:	429a      	cmp	r2, r3
 8019d5a:	d213      	bcs.n	8019d84 <dhcp_parse_reply+0x550>
        q = q->next;
 8019d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8019d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d64:	2b00      	cmp	r3, #0
 8019d66:	d109      	bne.n	8019d7c <dhcp_parse_reply+0x548>
 8019d68:	4b1a      	ldr	r3, [pc, #104]	@ (8019dd4 <dhcp_parse_reply+0x5a0>)
 8019d6a:	f240 629d 	movw	r2, #1693	@ 0x69d
 8019d6e:	4922      	ldr	r1, [pc, #136]	@ (8019df8 <dhcp_parse_reply+0x5c4>)
 8019d70:	481a      	ldr	r0, [pc, #104]	@ (8019ddc <dhcp_parse_reply+0x5a8>)
 8019d72:	f004 f80b 	bl	801dd8c <iprintf>
 8019d76:	f06f 0305 	mvn.w	r3, #5
 8019d7a:	e05b      	b.n	8019e34 <dhcp_parse_reply+0x600>
        options = (u8_t *)q->payload;
 8019d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d7e:	685b      	ldr	r3, [r3, #4]
 8019d80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8019d82:	e002      	b.n	8019d8a <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8019d84:	f06f 0301 	mvn.w	r3, #1
 8019d88:	e054      	b.n	8019e34 <dhcp_parse_reply+0x600>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8019d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d00a      	beq.n	8019da6 <dhcp_parse_reply+0x572>
 8019d90:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 8019d92:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8019d94:	429a      	cmp	r2, r3
 8019d96:	d206      	bcs.n	8019da6 <dhcp_parse_reply+0x572>
 8019d98:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8019d9a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8019d9c:	4413      	add	r3, r2
 8019d9e:	781b      	ldrb	r3, [r3, #0]
 8019da0:	2bff      	cmp	r3, #255	@ 0xff
 8019da2:	f47f ad8a 	bne.w	80198ba <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8019da6:	4b10      	ldr	r3, [pc, #64]	@ (8019de8 <dhcp_parse_reply+0x5b4>)
 8019da8:	781b      	ldrb	r3, [r3, #0]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d02d      	beq.n	8019e0a <dhcp_parse_reply+0x5d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8019dae:	4b10      	ldr	r3, [pc, #64]	@ (8019df0 <dhcp_parse_reply+0x5bc>)
 8019db0:	681b      	ldr	r3, [r3, #0]
 8019db2:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8019db4:	4b0c      	ldr	r3, [pc, #48]	@ (8019de8 <dhcp_parse_reply+0x5b4>)
 8019db6:	2200      	movs	r2, #0
 8019db8:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8019dba:	68fb      	ldr	r3, [r7, #12]
 8019dbc:	2b01      	cmp	r3, #1
 8019dbe:	d102      	bne.n	8019dc6 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 8019dc0:	2301      	movs	r3, #1
 8019dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8019dc4:	e021      	b.n	8019e0a <dhcp_parse_reply+0x5d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8019dc6:	68fb      	ldr	r3, [r7, #12]
 8019dc8:	2b02      	cmp	r3, #2
 8019dca:	d117      	bne.n	8019dfc <dhcp_parse_reply+0x5c8>
      parse_sname_as_options = 1;
 8019dcc:	2301      	movs	r3, #1
 8019dce:	62bb      	str	r3, [r7, #40]	@ 0x28
 8019dd0:	e01b      	b.n	8019e0a <dhcp_parse_reply+0x5d6>
 8019dd2:	bf00      	nop
 8019dd4:	08024a18 	.word	0x08024a18
 8019dd8:	08024cd0 	.word	0x08024cd0
 8019ddc:	08024a78 	.word	0x08024a78
 8019de0:	08024ca0 	.word	0x08024ca0
 8019de4:	08024cf4 	.word	0x08024cf4
 8019de8:	2000ecb8 	.word	0x2000ecb8
 8019dec:	08024d08 	.word	0x08024d08
 8019df0:	2000ec90 	.word	0x2000ec90
 8019df4:	08024d20 	.word	0x08024d20
 8019df8:	08024d34 	.word	0x08024d34
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8019dfc:	68fb      	ldr	r3, [r7, #12]
 8019dfe:	2b03      	cmp	r3, #3
 8019e00:	d103      	bne.n	8019e0a <dhcp_parse_reply+0x5d6>
      parse_sname_as_options = 1;
 8019e02:	2301      	movs	r3, #1
 8019e04:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 8019e06:	2301      	movs	r3, #1
 8019e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8019e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8019e0c:	2b00      	cmp	r3, #0
 8019e0e:	d006      	beq.n	8019e1e <dhcp_parse_reply+0x5ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8019e10:	2300      	movs	r3, #0
 8019e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 8019e14:	236c      	movs	r3, #108	@ 0x6c
 8019e16:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8019e18:	23ec      	movs	r3, #236	@ 0xec
 8019e1a:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 8019e1c:	e527      	b.n	801986e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 8019e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019e20:	2b00      	cmp	r3, #0
 8019e22:	d006      	beq.n	8019e32 <dhcp_parse_reply+0x5fe>
    parse_sname_as_options = 0;
 8019e24:	2300      	movs	r3, #0
 8019e26:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 8019e28:	232c      	movs	r3, #44	@ 0x2c
 8019e2a:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8019e2c:	236c      	movs	r3, #108	@ 0x6c
 8019e2e:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 8019e30:	e51d      	b.n	801986e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8019e32:	2300      	movs	r3, #0
}
 8019e34:	4618      	mov	r0, r3
 8019e36:	3740      	adds	r7, #64	@ 0x40
 8019e38:	46bd      	mov	sp, r7
 8019e3a:	bd80      	pop	{r7, pc}

08019e3c <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8019e3c:	b580      	push	{r7, lr}
 8019e3e:	b08a      	sub	sp, #40	@ 0x28
 8019e40:	af00      	add	r7, sp, #0
 8019e42:	60f8      	str	r0, [r7, #12]
 8019e44:	60b9      	str	r1, [r7, #8]
 8019e46:	607a      	str	r2, [r7, #4]
 8019e48:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8019e4a:	4b60      	ldr	r3, [pc, #384]	@ (8019fcc <dhcp_recv+0x190>)
 8019e4c:	685b      	ldr	r3, [r3, #4]
 8019e4e:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019e50:	6a3b      	ldr	r3, [r7, #32]
 8019e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019e54:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8019e56:	687b      	ldr	r3, [r7, #4]
 8019e58:	685b      	ldr	r3, [r3, #4]
 8019e5a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8019e5c:	69fb      	ldr	r3, [r7, #28]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	f000 809d 	beq.w	8019f9e <dhcp_recv+0x162>
 8019e64:	69fb      	ldr	r3, [r7, #28]
 8019e66:	791b      	ldrb	r3, [r3, #4]
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	f000 8098 	beq.w	8019f9e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	895b      	ldrh	r3, [r3, #10]
 8019e72:	2b2b      	cmp	r3, #43	@ 0x2b
 8019e74:	f240 8095 	bls.w	8019fa2 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8019e78:	69bb      	ldr	r3, [r7, #24]
 8019e7a:	781b      	ldrb	r3, [r3, #0]
 8019e7c:	2b02      	cmp	r3, #2
 8019e7e:	f040 8092 	bne.w	8019fa6 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8019e82:	2300      	movs	r3, #0
 8019e84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019e88:	e012      	b.n	8019eb0 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8019e8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e8e:	6a3a      	ldr	r2, [r7, #32]
 8019e90:	4413      	add	r3, r2
 8019e92:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 8019e96:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019e9a:	69b9      	ldr	r1, [r7, #24]
 8019e9c:	440b      	add	r3, r1
 8019e9e:	7f1b      	ldrb	r3, [r3, #28]
 8019ea0:	429a      	cmp	r2, r3
 8019ea2:	f040 8082 	bne.w	8019faa <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8019ea6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019eaa:	3301      	adds	r3, #1
 8019eac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8019eb0:	6a3b      	ldr	r3, [r7, #32]
 8019eb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8019eb6:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019eba:	429a      	cmp	r2, r3
 8019ebc:	d203      	bcs.n	8019ec6 <dhcp_recv+0x8a>
 8019ebe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019ec2:	2b05      	cmp	r3, #5
 8019ec4:	d9e1      	bls.n	8019e8a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8019ec6:	69bb      	ldr	r3, [r7, #24]
 8019ec8:	685b      	ldr	r3, [r3, #4]
 8019eca:	4618      	mov	r0, r3
 8019ecc:	f7f5 f893 	bl	800eff6 <lwip_htonl>
 8019ed0:	4602      	mov	r2, r0
 8019ed2:	69fb      	ldr	r3, [r7, #28]
 8019ed4:	681b      	ldr	r3, [r3, #0]
 8019ed6:	429a      	cmp	r2, r3
 8019ed8:	d169      	bne.n	8019fae <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 8019eda:	69f9      	ldr	r1, [r7, #28]
 8019edc:	6878      	ldr	r0, [r7, #4]
 8019ede:	f7ff fca9 	bl	8019834 <dhcp_parse_reply>
 8019ee2:	4603      	mov	r3, r0
 8019ee4:	2b00      	cmp	r3, #0
 8019ee6:	d164      	bne.n	8019fb2 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8019ee8:	4b39      	ldr	r3, [pc, #228]	@ (8019fd0 <dhcp_recv+0x194>)
 8019eea:	785b      	ldrb	r3, [r3, #1]
 8019eec:	2b00      	cmp	r3, #0
 8019eee:	d062      	beq.n	8019fb6 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8019ef0:	687b      	ldr	r3, [r7, #4]
 8019ef2:	685b      	ldr	r3, [r3, #4]
 8019ef4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8019ef6:	4b37      	ldr	r3, [pc, #220]	@ (8019fd4 <dhcp_recv+0x198>)
 8019ef8:	685b      	ldr	r3, [r3, #4]
 8019efa:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8019efc:	7cfb      	ldrb	r3, [r7, #19]
 8019efe:	2b05      	cmp	r3, #5
 8019f00:	d12a      	bne.n	8019f58 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8019f02:	69fb      	ldr	r3, [r7, #28]
 8019f04:	795b      	ldrb	r3, [r3, #5]
 8019f06:	2b01      	cmp	r3, #1
 8019f08:	d112      	bne.n	8019f30 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 8019f0a:	6979      	ldr	r1, [r7, #20]
 8019f0c:	6a38      	ldr	r0, [r7, #32]
 8019f0e:	f7fe fdcd 	bl	8018aac <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8019f12:	6a3b      	ldr	r3, [r7, #32]
 8019f14:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019f18:	f003 0308 	and.w	r3, r3, #8
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d003      	beq.n	8019f28 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8019f20:	6a38      	ldr	r0, [r7, #32]
 8019f22:	f7fe fb3d 	bl	80185a0 <dhcp_check>
 8019f26:	e049      	b.n	8019fbc <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8019f28:	6a38      	ldr	r0, [r7, #32]
 8019f2a:	f7ff f83d 	bl	8018fa8 <dhcp_bind>
 8019f2e:	e045      	b.n	8019fbc <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8019f30:	69fb      	ldr	r3, [r7, #28]
 8019f32:	795b      	ldrb	r3, [r3, #5]
 8019f34:	2b03      	cmp	r3, #3
 8019f36:	d007      	beq.n	8019f48 <dhcp_recv+0x10c>
 8019f38:	69fb      	ldr	r3, [r7, #28]
 8019f3a:	795b      	ldrb	r3, [r3, #5]
 8019f3c:	2b04      	cmp	r3, #4
 8019f3e:	d003      	beq.n	8019f48 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8019f40:	69fb      	ldr	r3, [r7, #28]
 8019f42:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8019f44:	2b05      	cmp	r3, #5
 8019f46:	d139      	bne.n	8019fbc <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 8019f48:	6979      	ldr	r1, [r7, #20]
 8019f4a:	6a38      	ldr	r0, [r7, #32]
 8019f4c:	f7fe fdae 	bl	8018aac <dhcp_handle_ack>
      dhcp_bind(netif);
 8019f50:	6a38      	ldr	r0, [r7, #32]
 8019f52:	f7ff f829 	bl	8018fa8 <dhcp_bind>
 8019f56:	e031      	b.n	8019fbc <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8019f58:	7cfb      	ldrb	r3, [r7, #19]
 8019f5a:	2b06      	cmp	r3, #6
 8019f5c:	d113      	bne.n	8019f86 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8019f5e:	69fb      	ldr	r3, [r7, #28]
 8019f60:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8019f62:	2b03      	cmp	r3, #3
 8019f64:	d00b      	beq.n	8019f7e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8019f66:	69fb      	ldr	r3, [r7, #28]
 8019f68:	795b      	ldrb	r3, [r3, #5]
 8019f6a:	2b01      	cmp	r3, #1
 8019f6c:	d007      	beq.n	8019f7e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8019f6e:	69fb      	ldr	r3, [r7, #28]
 8019f70:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8019f72:	2b04      	cmp	r3, #4
 8019f74:	d003      	beq.n	8019f7e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8019f76:	69fb      	ldr	r3, [r7, #28]
 8019f78:	795b      	ldrb	r3, [r3, #5]
 8019f7a:	2b05      	cmp	r3, #5
 8019f7c:	d103      	bne.n	8019f86 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8019f7e:	6a38      	ldr	r0, [r7, #32]
 8019f80:	f7fe faf4 	bl	801856c <dhcp_handle_nak>
 8019f84:	e01a      	b.n	8019fbc <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8019f86:	7cfb      	ldrb	r3, [r7, #19]
 8019f88:	2b02      	cmp	r3, #2
 8019f8a:	d116      	bne.n	8019fba <dhcp_recv+0x17e>
 8019f8c:	69fb      	ldr	r3, [r7, #28]
 8019f8e:	795b      	ldrb	r3, [r3, #5]
 8019f90:	2b06      	cmp	r3, #6
 8019f92:	d112      	bne.n	8019fba <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8019f94:	6979      	ldr	r1, [r7, #20]
 8019f96:	6a38      	ldr	r0, [r7, #32]
 8019f98:	f7fe fb36 	bl	8018608 <dhcp_handle_offer>
 8019f9c:	e00e      	b.n	8019fbc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019f9e:	bf00      	nop
 8019fa0:	e00c      	b.n	8019fbc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019fa2:	bf00      	nop
 8019fa4:	e00a      	b.n	8019fbc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019fa6:	bf00      	nop
 8019fa8:	e008      	b.n	8019fbc <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8019faa:	bf00      	nop
 8019fac:	e006      	b.n	8019fbc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019fae:	bf00      	nop
 8019fb0:	e004      	b.n	8019fbc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019fb2:	bf00      	nop
 8019fb4:	e002      	b.n	8019fbc <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8019fb6:	bf00      	nop
 8019fb8:	e000      	b.n	8019fbc <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8019fba:	bf00      	nop
  pbuf_free(p);
 8019fbc:	6878      	ldr	r0, [r7, #4]
 8019fbe:	f7f6 ff23 	bl	8010e08 <pbuf_free>
}
 8019fc2:	bf00      	nop
 8019fc4:	3728      	adds	r7, #40	@ 0x28
 8019fc6:	46bd      	mov	sp, r7
 8019fc8:	bd80      	pop	{r7, pc}
 8019fca:	bf00      	nop
 8019fcc:	2000b370 	.word	0x2000b370
 8019fd0:	2000ecb8 	.word	0x2000ecb8
 8019fd4:	2000ec90 	.word	0x2000ec90

08019fd8 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	b088      	sub	sp, #32
 8019fdc:	af00      	add	r7, sp, #0
 8019fde:	60f8      	str	r0, [r7, #12]
 8019fe0:	60b9      	str	r1, [r7, #8]
 8019fe2:	603b      	str	r3, [r7, #0]
 8019fe4:	4613      	mov	r3, r2
 8019fe6:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8019fe8:	68fb      	ldr	r3, [r7, #12]
 8019fea:	2b00      	cmp	r3, #0
 8019fec:	d108      	bne.n	801a000 <dhcp_create_msg+0x28>
 8019fee:	4b5f      	ldr	r3, [pc, #380]	@ (801a16c <dhcp_create_msg+0x194>)
 8019ff0:	f240 7269 	movw	r2, #1897	@ 0x769
 8019ff4:	495e      	ldr	r1, [pc, #376]	@ (801a170 <dhcp_create_msg+0x198>)
 8019ff6:	485f      	ldr	r0, [pc, #380]	@ (801a174 <dhcp_create_msg+0x19c>)
 8019ff8:	f003 fec8 	bl	801dd8c <iprintf>
 8019ffc:	2300      	movs	r3, #0
 8019ffe:	e0b1      	b.n	801a164 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801a000:	68bb      	ldr	r3, [r7, #8]
 801a002:	2b00      	cmp	r3, #0
 801a004:	d108      	bne.n	801a018 <dhcp_create_msg+0x40>
 801a006:	4b59      	ldr	r3, [pc, #356]	@ (801a16c <dhcp_create_msg+0x194>)
 801a008:	f240 726a 	movw	r2, #1898	@ 0x76a
 801a00c:	495a      	ldr	r1, [pc, #360]	@ (801a178 <dhcp_create_msg+0x1a0>)
 801a00e:	4859      	ldr	r0, [pc, #356]	@ (801a174 <dhcp_create_msg+0x19c>)
 801a010:	f003 febc 	bl	801dd8c <iprintf>
 801a014:	2300      	movs	r3, #0
 801a016:	e0a5      	b.n	801a164 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801a018:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a01c:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801a020:	2036      	movs	r0, #54	@ 0x36
 801a022:	f7f6 fbdb 	bl	80107dc <pbuf_alloc>
 801a026:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801a028:	69bb      	ldr	r3, [r7, #24]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d101      	bne.n	801a032 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801a02e:	2300      	movs	r3, #0
 801a030:	e098      	b.n	801a164 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801a032:	69bb      	ldr	r3, [r7, #24]
 801a034:	895b      	ldrh	r3, [r3, #10]
 801a036:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801a03a:	d206      	bcs.n	801a04a <dhcp_create_msg+0x72>
 801a03c:	4b4b      	ldr	r3, [pc, #300]	@ (801a16c <dhcp_create_msg+0x194>)
 801a03e:	f240 7271 	movw	r2, #1905	@ 0x771
 801a042:	494e      	ldr	r1, [pc, #312]	@ (801a17c <dhcp_create_msg+0x1a4>)
 801a044:	484b      	ldr	r0, [pc, #300]	@ (801a174 <dhcp_create_msg+0x19c>)
 801a046:	f003 fea1 	bl	801dd8c <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801a04a:	79fb      	ldrb	r3, [r7, #7]
 801a04c:	2b03      	cmp	r3, #3
 801a04e:	d103      	bne.n	801a058 <dhcp_create_msg+0x80>
 801a050:	68bb      	ldr	r3, [r7, #8]
 801a052:	795b      	ldrb	r3, [r3, #5]
 801a054:	2b03      	cmp	r3, #3
 801a056:	d10d      	bne.n	801a074 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801a058:	68bb      	ldr	r3, [r7, #8]
 801a05a:	799b      	ldrb	r3, [r3, #6]
 801a05c:	2b00      	cmp	r3, #0
 801a05e:	d105      	bne.n	801a06c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801a060:	f002 feac 	bl	801cdbc <rand>
 801a064:	4603      	mov	r3, r0
 801a066:	461a      	mov	r2, r3
 801a068:	4b45      	ldr	r3, [pc, #276]	@ (801a180 <dhcp_create_msg+0x1a8>)
 801a06a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801a06c:	4b44      	ldr	r3, [pc, #272]	@ (801a180 <dhcp_create_msg+0x1a8>)
 801a06e:	681a      	ldr	r2, [r3, #0]
 801a070:	68bb      	ldr	r3, [r7, #8]
 801a072:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801a074:	69bb      	ldr	r3, [r7, #24]
 801a076:	685b      	ldr	r3, [r3, #4]
 801a078:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801a07a:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801a07e:	2100      	movs	r1, #0
 801a080:	6978      	ldr	r0, [r7, #20]
 801a082:	f003 ff22 	bl	801deca <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801a086:	697b      	ldr	r3, [r7, #20]
 801a088:	2201      	movs	r2, #1
 801a08a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801a08c:	697b      	ldr	r3, [r7, #20]
 801a08e:	2201      	movs	r2, #1
 801a090:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801a092:	68fb      	ldr	r3, [r7, #12]
 801a094:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801a098:	697b      	ldr	r3, [r7, #20]
 801a09a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801a09c:	68bb      	ldr	r3, [r7, #8]
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	4618      	mov	r0, r3
 801a0a2:	f7f4 ffa8 	bl	800eff6 <lwip_htonl>
 801a0a6:	4602      	mov	r2, r0
 801a0a8:	697b      	ldr	r3, [r7, #20]
 801a0aa:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801a0ac:	79fb      	ldrb	r3, [r7, #7]
 801a0ae:	2b08      	cmp	r3, #8
 801a0b0:	d010      	beq.n	801a0d4 <dhcp_create_msg+0xfc>
 801a0b2:	79fb      	ldrb	r3, [r7, #7]
 801a0b4:	2b04      	cmp	r3, #4
 801a0b6:	d00d      	beq.n	801a0d4 <dhcp_create_msg+0xfc>
 801a0b8:	79fb      	ldrb	r3, [r7, #7]
 801a0ba:	2b07      	cmp	r3, #7
 801a0bc:	d00a      	beq.n	801a0d4 <dhcp_create_msg+0xfc>
 801a0be:	79fb      	ldrb	r3, [r7, #7]
 801a0c0:	2b03      	cmp	r3, #3
 801a0c2:	d10c      	bne.n	801a0de <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801a0c4:	68bb      	ldr	r3, [r7, #8]
 801a0c6:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801a0c8:	2b05      	cmp	r3, #5
 801a0ca:	d003      	beq.n	801a0d4 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801a0cc:	68bb      	ldr	r3, [r7, #8]
 801a0ce:	795b      	ldrb	r3, [r3, #5]
 801a0d0:	2b04      	cmp	r3, #4
 801a0d2:	d104      	bne.n	801a0de <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801a0d4:	68fb      	ldr	r3, [r7, #12]
 801a0d6:	3304      	adds	r3, #4
 801a0d8:	681a      	ldr	r2, [r3, #0]
 801a0da:	697b      	ldr	r3, [r7, #20]
 801a0dc:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a0de:	2300      	movs	r3, #0
 801a0e0:	83fb      	strh	r3, [r7, #30]
 801a0e2:	e00c      	b.n	801a0fe <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801a0e4:	8bfa      	ldrh	r2, [r7, #30]
 801a0e6:	8bfb      	ldrh	r3, [r7, #30]
 801a0e8:	68f9      	ldr	r1, [r7, #12]
 801a0ea:	440a      	add	r2, r1
 801a0ec:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 801a0f0:	697a      	ldr	r2, [r7, #20]
 801a0f2:	4413      	add	r3, r2
 801a0f4:	460a      	mov	r2, r1
 801a0f6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a0f8:	8bfb      	ldrh	r3, [r7, #30]
 801a0fa:	3301      	adds	r3, #1
 801a0fc:	83fb      	strh	r3, [r7, #30]
 801a0fe:	8bfb      	ldrh	r3, [r7, #30]
 801a100:	2b05      	cmp	r3, #5
 801a102:	d9ef      	bls.n	801a0e4 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801a104:	697b      	ldr	r3, [r7, #20]
 801a106:	2200      	movs	r2, #0
 801a108:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801a10c:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801a110:	2200      	movs	r2, #0
 801a112:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801a116:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801a11a:	2200      	movs	r2, #0
 801a11c:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801a120:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801a124:	2200      	movs	r2, #0
 801a126:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801a12a:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801a12e:	697b      	ldr	r3, [r7, #20]
 801a130:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a134:	2301      	movs	r3, #1
 801a136:	2235      	movs	r2, #53	@ 0x35
 801a138:	2000      	movs	r0, #0
 801a13a:	f7ff faab 	bl	8019694 <dhcp_option>
 801a13e:	4603      	mov	r3, r0
 801a140:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801a142:	697b      	ldr	r3, [r7, #20]
 801a144:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801a148:	79fa      	ldrb	r2, [r7, #7]
 801a14a:	8a7b      	ldrh	r3, [r7, #18]
 801a14c:	4618      	mov	r0, r3
 801a14e:	f7ff fad5 	bl	80196fc <dhcp_option_byte>
 801a152:	4603      	mov	r3, r0
 801a154:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801a156:	683b      	ldr	r3, [r7, #0]
 801a158:	2b00      	cmp	r3, #0
 801a15a:	d002      	beq.n	801a162 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801a15c:	683b      	ldr	r3, [r7, #0]
 801a15e:	8a7a      	ldrh	r2, [r7, #18]
 801a160:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801a162:	69bb      	ldr	r3, [r7, #24]
}
 801a164:	4618      	mov	r0, r3
 801a166:	3720      	adds	r7, #32
 801a168:	46bd      	mov	sp, r7
 801a16a:	bd80      	pop	{r7, pc}
 801a16c:	08024a18 	.word	0x08024a18
 801a170:	08024d48 	.word	0x08024d48
 801a174:	08024a78 	.word	0x08024a78
 801a178:	08024d68 	.word	0x08024d68
 801a17c:	08024d88 	.word	0x08024d88
 801a180:	2000eccc 	.word	0x2000eccc

0801a184 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801a184:	b580      	push	{r7, lr}
 801a186:	b084      	sub	sp, #16
 801a188:	af00      	add	r7, sp, #0
 801a18a:	4603      	mov	r3, r0
 801a18c:	60b9      	str	r1, [r7, #8]
 801a18e:	607a      	str	r2, [r7, #4]
 801a190:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801a192:	89fb      	ldrh	r3, [r7, #14]
 801a194:	1c5a      	adds	r2, r3, #1
 801a196:	81fa      	strh	r2, [r7, #14]
 801a198:	461a      	mov	r2, r3
 801a19a:	68bb      	ldr	r3, [r7, #8]
 801a19c:	4413      	add	r3, r2
 801a19e:	22ff      	movs	r2, #255	@ 0xff
 801a1a0:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801a1a2:	e007      	b.n	801a1b4 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801a1a4:	89fb      	ldrh	r3, [r7, #14]
 801a1a6:	1c5a      	adds	r2, r3, #1
 801a1a8:	81fa      	strh	r2, [r7, #14]
 801a1aa:	461a      	mov	r2, r3
 801a1ac:	68bb      	ldr	r3, [r7, #8]
 801a1ae:	4413      	add	r3, r2
 801a1b0:	2200      	movs	r2, #0
 801a1b2:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801a1b4:	89fb      	ldrh	r3, [r7, #14]
 801a1b6:	2b43      	cmp	r3, #67	@ 0x43
 801a1b8:	d904      	bls.n	801a1c4 <dhcp_option_trailer+0x40>
 801a1ba:	89fb      	ldrh	r3, [r7, #14]
 801a1bc:	f003 0303 	and.w	r3, r3, #3
 801a1c0:	2b00      	cmp	r3, #0
 801a1c2:	d002      	beq.n	801a1ca <dhcp_option_trailer+0x46>
 801a1c4:	89fb      	ldrh	r3, [r7, #14]
 801a1c6:	2b43      	cmp	r3, #67	@ 0x43
 801a1c8:	d9ec      	bls.n	801a1a4 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801a1ca:	89fb      	ldrh	r3, [r7, #14]
 801a1cc:	33f0      	adds	r3, #240	@ 0xf0
 801a1ce:	b29b      	uxth	r3, r3
 801a1d0:	4619      	mov	r1, r3
 801a1d2:	6878      	ldr	r0, [r7, #4]
 801a1d4:	f7f6 fc60 	bl	8010a98 <pbuf_realloc>
}
 801a1d8:	bf00      	nop
 801a1da:	3710      	adds	r7, #16
 801a1dc:	46bd      	mov	sp, r7
 801a1de:	bd80      	pop	{r7, pc}

0801a1e0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801a1e0:	b480      	push	{r7}
 801a1e2:	b085      	sub	sp, #20
 801a1e4:	af00      	add	r7, sp, #0
 801a1e6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801a1e8:	687b      	ldr	r3, [r7, #4]
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d017      	beq.n	801a21e <dhcp_supplied_address+0x3e>
 801a1ee:	687b      	ldr	r3, [r7, #4]
 801a1f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a1f2:	2b00      	cmp	r3, #0
 801a1f4:	d013      	beq.n	801a21e <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a1fa:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801a1fc:	68fb      	ldr	r3, [r7, #12]
 801a1fe:	795b      	ldrb	r3, [r3, #5]
 801a200:	2b0a      	cmp	r3, #10
 801a202:	d007      	beq.n	801a214 <dhcp_supplied_address+0x34>
 801a204:	68fb      	ldr	r3, [r7, #12]
 801a206:	795b      	ldrb	r3, [r3, #5]
 801a208:	2b05      	cmp	r3, #5
 801a20a:	d003      	beq.n	801a214 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801a20c:	68fb      	ldr	r3, [r7, #12]
 801a20e:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801a210:	2b04      	cmp	r3, #4
 801a212:	d101      	bne.n	801a218 <dhcp_supplied_address+0x38>
 801a214:	2301      	movs	r3, #1
 801a216:	e000      	b.n	801a21a <dhcp_supplied_address+0x3a>
 801a218:	2300      	movs	r3, #0
 801a21a:	b2db      	uxtb	r3, r3
 801a21c:	e000      	b.n	801a220 <dhcp_supplied_address+0x40>
  }
  return 0;
 801a21e:	2300      	movs	r3, #0
}
 801a220:	4618      	mov	r0, r3
 801a222:	3714      	adds	r7, #20
 801a224:	46bd      	mov	sp, r7
 801a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a22a:	4770      	bx	lr

0801a22c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a22c:	b580      	push	{r7, lr}
 801a22e:	b082      	sub	sp, #8
 801a230:	af00      	add	r7, sp, #0
 801a232:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a234:	4915      	ldr	r1, [pc, #84]	@ (801a28c <etharp_free_entry+0x60>)
 801a236:	687a      	ldr	r2, [r7, #4]
 801a238:	4613      	mov	r3, r2
 801a23a:	005b      	lsls	r3, r3, #1
 801a23c:	4413      	add	r3, r2
 801a23e:	00db      	lsls	r3, r3, #3
 801a240:	440b      	add	r3, r1
 801a242:	681b      	ldr	r3, [r3, #0]
 801a244:	2b00      	cmp	r3, #0
 801a246:	d013      	beq.n	801a270 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a248:	4910      	ldr	r1, [pc, #64]	@ (801a28c <etharp_free_entry+0x60>)
 801a24a:	687a      	ldr	r2, [r7, #4]
 801a24c:	4613      	mov	r3, r2
 801a24e:	005b      	lsls	r3, r3, #1
 801a250:	4413      	add	r3, r2
 801a252:	00db      	lsls	r3, r3, #3
 801a254:	440b      	add	r3, r1
 801a256:	681b      	ldr	r3, [r3, #0]
 801a258:	4618      	mov	r0, r3
 801a25a:	f7f6 fdd5 	bl	8010e08 <pbuf_free>
    arp_table[i].q = NULL;
 801a25e:	490b      	ldr	r1, [pc, #44]	@ (801a28c <etharp_free_entry+0x60>)
 801a260:	687a      	ldr	r2, [r7, #4]
 801a262:	4613      	mov	r3, r2
 801a264:	005b      	lsls	r3, r3, #1
 801a266:	4413      	add	r3, r2
 801a268:	00db      	lsls	r3, r3, #3
 801a26a:	440b      	add	r3, r1
 801a26c:	2200      	movs	r2, #0
 801a26e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a270:	4906      	ldr	r1, [pc, #24]	@ (801a28c <etharp_free_entry+0x60>)
 801a272:	687a      	ldr	r2, [r7, #4]
 801a274:	4613      	mov	r3, r2
 801a276:	005b      	lsls	r3, r3, #1
 801a278:	4413      	add	r3, r2
 801a27a:	00db      	lsls	r3, r3, #3
 801a27c:	440b      	add	r3, r1
 801a27e:	3314      	adds	r3, #20
 801a280:	2200      	movs	r2, #0
 801a282:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a284:	bf00      	nop
 801a286:	3708      	adds	r7, #8
 801a288:	46bd      	mov	sp, r7
 801a28a:	bd80      	pop	{r7, pc}
 801a28c:	2000ecd0 	.word	0x2000ecd0

0801a290 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a290:	b580      	push	{r7, lr}
 801a292:	b082      	sub	sp, #8
 801a294:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a296:	2300      	movs	r3, #0
 801a298:	607b      	str	r3, [r7, #4]
 801a29a:	e096      	b.n	801a3ca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a29c:	494f      	ldr	r1, [pc, #316]	@ (801a3dc <etharp_tmr+0x14c>)
 801a29e:	687a      	ldr	r2, [r7, #4]
 801a2a0:	4613      	mov	r3, r2
 801a2a2:	005b      	lsls	r3, r3, #1
 801a2a4:	4413      	add	r3, r2
 801a2a6:	00db      	lsls	r3, r3, #3
 801a2a8:	440b      	add	r3, r1
 801a2aa:	3314      	adds	r3, #20
 801a2ac:	781b      	ldrb	r3, [r3, #0]
 801a2ae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a2b0:	78fb      	ldrb	r3, [r7, #3]
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	f000 8086 	beq.w	801a3c4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a2b8:	4948      	ldr	r1, [pc, #288]	@ (801a3dc <etharp_tmr+0x14c>)
 801a2ba:	687a      	ldr	r2, [r7, #4]
 801a2bc:	4613      	mov	r3, r2
 801a2be:	005b      	lsls	r3, r3, #1
 801a2c0:	4413      	add	r3, r2
 801a2c2:	00db      	lsls	r3, r3, #3
 801a2c4:	440b      	add	r3, r1
 801a2c6:	3312      	adds	r3, #18
 801a2c8:	881b      	ldrh	r3, [r3, #0]
 801a2ca:	3301      	adds	r3, #1
 801a2cc:	b298      	uxth	r0, r3
 801a2ce:	4943      	ldr	r1, [pc, #268]	@ (801a3dc <etharp_tmr+0x14c>)
 801a2d0:	687a      	ldr	r2, [r7, #4]
 801a2d2:	4613      	mov	r3, r2
 801a2d4:	005b      	lsls	r3, r3, #1
 801a2d6:	4413      	add	r3, r2
 801a2d8:	00db      	lsls	r3, r3, #3
 801a2da:	440b      	add	r3, r1
 801a2dc:	3312      	adds	r3, #18
 801a2de:	4602      	mov	r2, r0
 801a2e0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a2e2:	493e      	ldr	r1, [pc, #248]	@ (801a3dc <etharp_tmr+0x14c>)
 801a2e4:	687a      	ldr	r2, [r7, #4]
 801a2e6:	4613      	mov	r3, r2
 801a2e8:	005b      	lsls	r3, r3, #1
 801a2ea:	4413      	add	r3, r2
 801a2ec:	00db      	lsls	r3, r3, #3
 801a2ee:	440b      	add	r3, r1
 801a2f0:	3312      	adds	r3, #18
 801a2f2:	881b      	ldrh	r3, [r3, #0]
 801a2f4:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801a2f8:	d215      	bcs.n	801a326 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a2fa:	4938      	ldr	r1, [pc, #224]	@ (801a3dc <etharp_tmr+0x14c>)
 801a2fc:	687a      	ldr	r2, [r7, #4]
 801a2fe:	4613      	mov	r3, r2
 801a300:	005b      	lsls	r3, r3, #1
 801a302:	4413      	add	r3, r2
 801a304:	00db      	lsls	r3, r3, #3
 801a306:	440b      	add	r3, r1
 801a308:	3314      	adds	r3, #20
 801a30a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a30c:	2b01      	cmp	r3, #1
 801a30e:	d10e      	bne.n	801a32e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a310:	4932      	ldr	r1, [pc, #200]	@ (801a3dc <etharp_tmr+0x14c>)
 801a312:	687a      	ldr	r2, [r7, #4]
 801a314:	4613      	mov	r3, r2
 801a316:	005b      	lsls	r3, r3, #1
 801a318:	4413      	add	r3, r2
 801a31a:	00db      	lsls	r3, r3, #3
 801a31c:	440b      	add	r3, r1
 801a31e:	3312      	adds	r3, #18
 801a320:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a322:	2b04      	cmp	r3, #4
 801a324:	d903      	bls.n	801a32e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a326:	6878      	ldr	r0, [r7, #4]
 801a328:	f7ff ff80 	bl	801a22c <etharp_free_entry>
 801a32c:	e04a      	b.n	801a3c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a32e:	492b      	ldr	r1, [pc, #172]	@ (801a3dc <etharp_tmr+0x14c>)
 801a330:	687a      	ldr	r2, [r7, #4]
 801a332:	4613      	mov	r3, r2
 801a334:	005b      	lsls	r3, r3, #1
 801a336:	4413      	add	r3, r2
 801a338:	00db      	lsls	r3, r3, #3
 801a33a:	440b      	add	r3, r1
 801a33c:	3314      	adds	r3, #20
 801a33e:	781b      	ldrb	r3, [r3, #0]
 801a340:	2b03      	cmp	r3, #3
 801a342:	d10a      	bne.n	801a35a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a344:	4925      	ldr	r1, [pc, #148]	@ (801a3dc <etharp_tmr+0x14c>)
 801a346:	687a      	ldr	r2, [r7, #4]
 801a348:	4613      	mov	r3, r2
 801a34a:	005b      	lsls	r3, r3, #1
 801a34c:	4413      	add	r3, r2
 801a34e:	00db      	lsls	r3, r3, #3
 801a350:	440b      	add	r3, r1
 801a352:	3314      	adds	r3, #20
 801a354:	2204      	movs	r2, #4
 801a356:	701a      	strb	r2, [r3, #0]
 801a358:	e034      	b.n	801a3c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a35a:	4920      	ldr	r1, [pc, #128]	@ (801a3dc <etharp_tmr+0x14c>)
 801a35c:	687a      	ldr	r2, [r7, #4]
 801a35e:	4613      	mov	r3, r2
 801a360:	005b      	lsls	r3, r3, #1
 801a362:	4413      	add	r3, r2
 801a364:	00db      	lsls	r3, r3, #3
 801a366:	440b      	add	r3, r1
 801a368:	3314      	adds	r3, #20
 801a36a:	781b      	ldrb	r3, [r3, #0]
 801a36c:	2b04      	cmp	r3, #4
 801a36e:	d10a      	bne.n	801a386 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a370:	491a      	ldr	r1, [pc, #104]	@ (801a3dc <etharp_tmr+0x14c>)
 801a372:	687a      	ldr	r2, [r7, #4]
 801a374:	4613      	mov	r3, r2
 801a376:	005b      	lsls	r3, r3, #1
 801a378:	4413      	add	r3, r2
 801a37a:	00db      	lsls	r3, r3, #3
 801a37c:	440b      	add	r3, r1
 801a37e:	3314      	adds	r3, #20
 801a380:	2202      	movs	r2, #2
 801a382:	701a      	strb	r2, [r3, #0]
 801a384:	e01e      	b.n	801a3c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a386:	4915      	ldr	r1, [pc, #84]	@ (801a3dc <etharp_tmr+0x14c>)
 801a388:	687a      	ldr	r2, [r7, #4]
 801a38a:	4613      	mov	r3, r2
 801a38c:	005b      	lsls	r3, r3, #1
 801a38e:	4413      	add	r3, r2
 801a390:	00db      	lsls	r3, r3, #3
 801a392:	440b      	add	r3, r1
 801a394:	3314      	adds	r3, #20
 801a396:	781b      	ldrb	r3, [r3, #0]
 801a398:	2b01      	cmp	r3, #1
 801a39a:	d113      	bne.n	801a3c4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a39c:	490f      	ldr	r1, [pc, #60]	@ (801a3dc <etharp_tmr+0x14c>)
 801a39e:	687a      	ldr	r2, [r7, #4]
 801a3a0:	4613      	mov	r3, r2
 801a3a2:	005b      	lsls	r3, r3, #1
 801a3a4:	4413      	add	r3, r2
 801a3a6:	00db      	lsls	r3, r3, #3
 801a3a8:	440b      	add	r3, r1
 801a3aa:	3308      	adds	r3, #8
 801a3ac:	6818      	ldr	r0, [r3, #0]
 801a3ae:	687a      	ldr	r2, [r7, #4]
 801a3b0:	4613      	mov	r3, r2
 801a3b2:	005b      	lsls	r3, r3, #1
 801a3b4:	4413      	add	r3, r2
 801a3b6:	00db      	lsls	r3, r3, #3
 801a3b8:	4a08      	ldr	r2, [pc, #32]	@ (801a3dc <etharp_tmr+0x14c>)
 801a3ba:	4413      	add	r3, r2
 801a3bc:	3304      	adds	r3, #4
 801a3be:	4619      	mov	r1, r3
 801a3c0:	f000 fe72 	bl	801b0a8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	3301      	adds	r3, #1
 801a3c8:	607b      	str	r3, [r7, #4]
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	2b09      	cmp	r3, #9
 801a3ce:	f77f af65 	ble.w	801a29c <etharp_tmr+0xc>
      }
    }
  }
}
 801a3d2:	bf00      	nop
 801a3d4:	bf00      	nop
 801a3d6:	3708      	adds	r7, #8
 801a3d8:	46bd      	mov	sp, r7
 801a3da:	bd80      	pop	{r7, pc}
 801a3dc:	2000ecd0 	.word	0x2000ecd0

0801a3e0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a3e0:	b580      	push	{r7, lr}
 801a3e2:	b08a      	sub	sp, #40	@ 0x28
 801a3e4:	af00      	add	r7, sp, #0
 801a3e6:	60f8      	str	r0, [r7, #12]
 801a3e8:	460b      	mov	r3, r1
 801a3ea:	607a      	str	r2, [r7, #4]
 801a3ec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a3ee:	230a      	movs	r3, #10
 801a3f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801a3f2:	230a      	movs	r3, #10
 801a3f4:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a3f6:	230a      	movs	r3, #10
 801a3f8:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801a3fa:	2300      	movs	r3, #0
 801a3fc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a3fe:	230a      	movs	r3, #10
 801a400:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a402:	2300      	movs	r3, #0
 801a404:	83bb      	strh	r3, [r7, #28]
 801a406:	2300      	movs	r3, #0
 801a408:	837b      	strh	r3, [r7, #26]
 801a40a:	2300      	movs	r3, #0
 801a40c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a40e:	2300      	movs	r3, #0
 801a410:	843b      	strh	r3, [r7, #32]
 801a412:	e0ae      	b.n	801a572 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a414:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a418:	49a6      	ldr	r1, [pc, #664]	@ (801a6b4 <etharp_find_entry+0x2d4>)
 801a41a:	4613      	mov	r3, r2
 801a41c:	005b      	lsls	r3, r3, #1
 801a41e:	4413      	add	r3, r2
 801a420:	00db      	lsls	r3, r3, #3
 801a422:	440b      	add	r3, r1
 801a424:	3314      	adds	r3, #20
 801a426:	781b      	ldrb	r3, [r3, #0]
 801a428:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a42a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a42e:	2b0a      	cmp	r3, #10
 801a430:	d105      	bne.n	801a43e <etharp_find_entry+0x5e>
 801a432:	7dfb      	ldrb	r3, [r7, #23]
 801a434:	2b00      	cmp	r3, #0
 801a436:	d102      	bne.n	801a43e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a438:	8c3b      	ldrh	r3, [r7, #32]
 801a43a:	847b      	strh	r3, [r7, #34]	@ 0x22
 801a43c:	e095      	b.n	801a56a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a43e:	7dfb      	ldrb	r3, [r7, #23]
 801a440:	2b00      	cmp	r3, #0
 801a442:	f000 8092 	beq.w	801a56a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a446:	7dfb      	ldrb	r3, [r7, #23]
 801a448:	2b01      	cmp	r3, #1
 801a44a:	d009      	beq.n	801a460 <etharp_find_entry+0x80>
 801a44c:	7dfb      	ldrb	r3, [r7, #23]
 801a44e:	2b01      	cmp	r3, #1
 801a450:	d806      	bhi.n	801a460 <etharp_find_entry+0x80>
 801a452:	4b99      	ldr	r3, [pc, #612]	@ (801a6b8 <etharp_find_entry+0x2d8>)
 801a454:	f240 1223 	movw	r2, #291	@ 0x123
 801a458:	4998      	ldr	r1, [pc, #608]	@ (801a6bc <etharp_find_entry+0x2dc>)
 801a45a:	4899      	ldr	r0, [pc, #612]	@ (801a6c0 <etharp_find_entry+0x2e0>)
 801a45c:	f003 fc96 	bl	801dd8c <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a460:	68fb      	ldr	r3, [r7, #12]
 801a462:	2b00      	cmp	r3, #0
 801a464:	d020      	beq.n	801a4a8 <etharp_find_entry+0xc8>
 801a466:	68fb      	ldr	r3, [r7, #12]
 801a468:	6819      	ldr	r1, [r3, #0]
 801a46a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a46e:	4891      	ldr	r0, [pc, #580]	@ (801a6b4 <etharp_find_entry+0x2d4>)
 801a470:	4613      	mov	r3, r2
 801a472:	005b      	lsls	r3, r3, #1
 801a474:	4413      	add	r3, r2
 801a476:	00db      	lsls	r3, r3, #3
 801a478:	4403      	add	r3, r0
 801a47a:	3304      	adds	r3, #4
 801a47c:	681b      	ldr	r3, [r3, #0]
 801a47e:	4299      	cmp	r1, r3
 801a480:	d112      	bne.n	801a4a8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	2b00      	cmp	r3, #0
 801a486:	d00c      	beq.n	801a4a2 <etharp_find_entry+0xc2>
 801a488:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a48c:	4989      	ldr	r1, [pc, #548]	@ (801a6b4 <etharp_find_entry+0x2d4>)
 801a48e:	4613      	mov	r3, r2
 801a490:	005b      	lsls	r3, r3, #1
 801a492:	4413      	add	r3, r2
 801a494:	00db      	lsls	r3, r3, #3
 801a496:	440b      	add	r3, r1
 801a498:	3308      	adds	r3, #8
 801a49a:	681b      	ldr	r3, [r3, #0]
 801a49c:	687a      	ldr	r2, [r7, #4]
 801a49e:	429a      	cmp	r2, r3
 801a4a0:	d102      	bne.n	801a4a8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a4a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a4a6:	e100      	b.n	801a6aa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a4a8:	7dfb      	ldrb	r3, [r7, #23]
 801a4aa:	2b01      	cmp	r3, #1
 801a4ac:	d140      	bne.n	801a530 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a4ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4b2:	4980      	ldr	r1, [pc, #512]	@ (801a6b4 <etharp_find_entry+0x2d4>)
 801a4b4:	4613      	mov	r3, r2
 801a4b6:	005b      	lsls	r3, r3, #1
 801a4b8:	4413      	add	r3, r2
 801a4ba:	00db      	lsls	r3, r3, #3
 801a4bc:	440b      	add	r3, r1
 801a4be:	681b      	ldr	r3, [r3, #0]
 801a4c0:	2b00      	cmp	r3, #0
 801a4c2:	d01a      	beq.n	801a4fa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a4c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4c8:	497a      	ldr	r1, [pc, #488]	@ (801a6b4 <etharp_find_entry+0x2d4>)
 801a4ca:	4613      	mov	r3, r2
 801a4cc:	005b      	lsls	r3, r3, #1
 801a4ce:	4413      	add	r3, r2
 801a4d0:	00db      	lsls	r3, r3, #3
 801a4d2:	440b      	add	r3, r1
 801a4d4:	3312      	adds	r3, #18
 801a4d6:	881b      	ldrh	r3, [r3, #0]
 801a4d8:	8bba      	ldrh	r2, [r7, #28]
 801a4da:	429a      	cmp	r2, r3
 801a4dc:	d845      	bhi.n	801a56a <etharp_find_entry+0x18a>
            old_queue = i;
 801a4de:	8c3b      	ldrh	r3, [r7, #32]
 801a4e0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a4e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4e6:	4973      	ldr	r1, [pc, #460]	@ (801a6b4 <etharp_find_entry+0x2d4>)
 801a4e8:	4613      	mov	r3, r2
 801a4ea:	005b      	lsls	r3, r3, #1
 801a4ec:	4413      	add	r3, r2
 801a4ee:	00db      	lsls	r3, r3, #3
 801a4f0:	440b      	add	r3, r1
 801a4f2:	3312      	adds	r3, #18
 801a4f4:	881b      	ldrh	r3, [r3, #0]
 801a4f6:	83bb      	strh	r3, [r7, #28]
 801a4f8:	e037      	b.n	801a56a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a4fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4fe:	496d      	ldr	r1, [pc, #436]	@ (801a6b4 <etharp_find_entry+0x2d4>)
 801a500:	4613      	mov	r3, r2
 801a502:	005b      	lsls	r3, r3, #1
 801a504:	4413      	add	r3, r2
 801a506:	00db      	lsls	r3, r3, #3
 801a508:	440b      	add	r3, r1
 801a50a:	3312      	adds	r3, #18
 801a50c:	881b      	ldrh	r3, [r3, #0]
 801a50e:	8b7a      	ldrh	r2, [r7, #26]
 801a510:	429a      	cmp	r2, r3
 801a512:	d82a      	bhi.n	801a56a <etharp_find_entry+0x18a>
            old_pending = i;
 801a514:	8c3b      	ldrh	r3, [r7, #32]
 801a516:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801a518:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a51c:	4965      	ldr	r1, [pc, #404]	@ (801a6b4 <etharp_find_entry+0x2d4>)
 801a51e:	4613      	mov	r3, r2
 801a520:	005b      	lsls	r3, r3, #1
 801a522:	4413      	add	r3, r2
 801a524:	00db      	lsls	r3, r3, #3
 801a526:	440b      	add	r3, r1
 801a528:	3312      	adds	r3, #18
 801a52a:	881b      	ldrh	r3, [r3, #0]
 801a52c:	837b      	strh	r3, [r7, #26]
 801a52e:	e01c      	b.n	801a56a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a530:	7dfb      	ldrb	r3, [r7, #23]
 801a532:	2b01      	cmp	r3, #1
 801a534:	d919      	bls.n	801a56a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a536:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a53a:	495e      	ldr	r1, [pc, #376]	@ (801a6b4 <etharp_find_entry+0x2d4>)
 801a53c:	4613      	mov	r3, r2
 801a53e:	005b      	lsls	r3, r3, #1
 801a540:	4413      	add	r3, r2
 801a542:	00db      	lsls	r3, r3, #3
 801a544:	440b      	add	r3, r1
 801a546:	3312      	adds	r3, #18
 801a548:	881b      	ldrh	r3, [r3, #0]
 801a54a:	8b3a      	ldrh	r2, [r7, #24]
 801a54c:	429a      	cmp	r2, r3
 801a54e:	d80c      	bhi.n	801a56a <etharp_find_entry+0x18a>
            old_stable = i;
 801a550:	8c3b      	ldrh	r3, [r7, #32]
 801a552:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801a554:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a558:	4956      	ldr	r1, [pc, #344]	@ (801a6b4 <etharp_find_entry+0x2d4>)
 801a55a:	4613      	mov	r3, r2
 801a55c:	005b      	lsls	r3, r3, #1
 801a55e:	4413      	add	r3, r2
 801a560:	00db      	lsls	r3, r3, #3
 801a562:	440b      	add	r3, r1
 801a564:	3312      	adds	r3, #18
 801a566:	881b      	ldrh	r3, [r3, #0]
 801a568:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a56a:	8c3b      	ldrh	r3, [r7, #32]
 801a56c:	3301      	adds	r3, #1
 801a56e:	b29b      	uxth	r3, r3
 801a570:	843b      	strh	r3, [r7, #32]
 801a572:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a576:	2b09      	cmp	r3, #9
 801a578:	f77f af4c 	ble.w	801a414 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a57c:	7afb      	ldrb	r3, [r7, #11]
 801a57e:	f003 0302 	and.w	r3, r3, #2
 801a582:	2b00      	cmp	r3, #0
 801a584:	d108      	bne.n	801a598 <etharp_find_entry+0x1b8>
 801a586:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a58a:	2b0a      	cmp	r3, #10
 801a58c:	d107      	bne.n	801a59e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a58e:	7afb      	ldrb	r3, [r7, #11]
 801a590:	f003 0301 	and.w	r3, r3, #1
 801a594:	2b00      	cmp	r3, #0
 801a596:	d102      	bne.n	801a59e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a598:	f04f 33ff 	mov.w	r3, #4294967295
 801a59c:	e085      	b.n	801a6aa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a59e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801a5a2:	2b09      	cmp	r3, #9
 801a5a4:	dc02      	bgt.n	801a5ac <etharp_find_entry+0x1cc>
    i = empty;
 801a5a6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801a5a8:	843b      	strh	r3, [r7, #32]
 801a5aa:	e039      	b.n	801a620 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a5ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801a5b0:	2b09      	cmp	r3, #9
 801a5b2:	dc14      	bgt.n	801a5de <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a5b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801a5b6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a5b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a5bc:	493d      	ldr	r1, [pc, #244]	@ (801a6b4 <etharp_find_entry+0x2d4>)
 801a5be:	4613      	mov	r3, r2
 801a5c0:	005b      	lsls	r3, r3, #1
 801a5c2:	4413      	add	r3, r2
 801a5c4:	00db      	lsls	r3, r3, #3
 801a5c6:	440b      	add	r3, r1
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	2b00      	cmp	r3, #0
 801a5cc:	d018      	beq.n	801a600 <etharp_find_entry+0x220>
 801a5ce:	4b3a      	ldr	r3, [pc, #232]	@ (801a6b8 <etharp_find_entry+0x2d8>)
 801a5d0:	f240 126d 	movw	r2, #365	@ 0x16d
 801a5d4:	493b      	ldr	r1, [pc, #236]	@ (801a6c4 <etharp_find_entry+0x2e4>)
 801a5d6:	483a      	ldr	r0, [pc, #232]	@ (801a6c0 <etharp_find_entry+0x2e0>)
 801a5d8:	f003 fbd8 	bl	801dd8c <iprintf>
 801a5dc:	e010      	b.n	801a600 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a5de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801a5e2:	2b09      	cmp	r3, #9
 801a5e4:	dc02      	bgt.n	801a5ec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a5e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801a5e8:	843b      	strh	r3, [r7, #32]
 801a5ea:	e009      	b.n	801a600 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a5ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a5f0:	2b09      	cmp	r3, #9
 801a5f2:	dc02      	bgt.n	801a5fa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a5f4:	8bfb      	ldrh	r3, [r7, #30]
 801a5f6:	843b      	strh	r3, [r7, #32]
 801a5f8:	e002      	b.n	801a600 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a5fa:	f04f 33ff 	mov.w	r3, #4294967295
 801a5fe:	e054      	b.n	801a6aa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a600:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a604:	2b09      	cmp	r3, #9
 801a606:	dd06      	ble.n	801a616 <etharp_find_entry+0x236>
 801a608:	4b2b      	ldr	r3, [pc, #172]	@ (801a6b8 <etharp_find_entry+0x2d8>)
 801a60a:	f240 127f 	movw	r2, #383	@ 0x17f
 801a60e:	492e      	ldr	r1, [pc, #184]	@ (801a6c8 <etharp_find_entry+0x2e8>)
 801a610:	482b      	ldr	r0, [pc, #172]	@ (801a6c0 <etharp_find_entry+0x2e0>)
 801a612:	f003 fbbb 	bl	801dd8c <iprintf>
    etharp_free_entry(i);
 801a616:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a61a:	4618      	mov	r0, r3
 801a61c:	f7ff fe06 	bl	801a22c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a620:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a624:	2b09      	cmp	r3, #9
 801a626:	dd06      	ble.n	801a636 <etharp_find_entry+0x256>
 801a628:	4b23      	ldr	r3, [pc, #140]	@ (801a6b8 <etharp_find_entry+0x2d8>)
 801a62a:	f240 1283 	movw	r2, #387	@ 0x183
 801a62e:	4926      	ldr	r1, [pc, #152]	@ (801a6c8 <etharp_find_entry+0x2e8>)
 801a630:	4823      	ldr	r0, [pc, #140]	@ (801a6c0 <etharp_find_entry+0x2e0>)
 801a632:	f003 fbab 	bl	801dd8c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a636:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a63a:	491e      	ldr	r1, [pc, #120]	@ (801a6b4 <etharp_find_entry+0x2d4>)
 801a63c:	4613      	mov	r3, r2
 801a63e:	005b      	lsls	r3, r3, #1
 801a640:	4413      	add	r3, r2
 801a642:	00db      	lsls	r3, r3, #3
 801a644:	440b      	add	r3, r1
 801a646:	3314      	adds	r3, #20
 801a648:	781b      	ldrb	r3, [r3, #0]
 801a64a:	2b00      	cmp	r3, #0
 801a64c:	d006      	beq.n	801a65c <etharp_find_entry+0x27c>
 801a64e:	4b1a      	ldr	r3, [pc, #104]	@ (801a6b8 <etharp_find_entry+0x2d8>)
 801a650:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801a654:	491d      	ldr	r1, [pc, #116]	@ (801a6cc <etharp_find_entry+0x2ec>)
 801a656:	481a      	ldr	r0, [pc, #104]	@ (801a6c0 <etharp_find_entry+0x2e0>)
 801a658:	f003 fb98 	bl	801dd8c <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a65c:	68fb      	ldr	r3, [r7, #12]
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d00b      	beq.n	801a67a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a662:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a666:	68fb      	ldr	r3, [r7, #12]
 801a668:	6819      	ldr	r1, [r3, #0]
 801a66a:	4812      	ldr	r0, [pc, #72]	@ (801a6b4 <etharp_find_entry+0x2d4>)
 801a66c:	4613      	mov	r3, r2
 801a66e:	005b      	lsls	r3, r3, #1
 801a670:	4413      	add	r3, r2
 801a672:	00db      	lsls	r3, r3, #3
 801a674:	4403      	add	r3, r0
 801a676:	3304      	adds	r3, #4
 801a678:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a67a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a67e:	490d      	ldr	r1, [pc, #52]	@ (801a6b4 <etharp_find_entry+0x2d4>)
 801a680:	4613      	mov	r3, r2
 801a682:	005b      	lsls	r3, r3, #1
 801a684:	4413      	add	r3, r2
 801a686:	00db      	lsls	r3, r3, #3
 801a688:	440b      	add	r3, r1
 801a68a:	3312      	adds	r3, #18
 801a68c:	2200      	movs	r2, #0
 801a68e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a690:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a694:	4907      	ldr	r1, [pc, #28]	@ (801a6b4 <etharp_find_entry+0x2d4>)
 801a696:	4613      	mov	r3, r2
 801a698:	005b      	lsls	r3, r3, #1
 801a69a:	4413      	add	r3, r2
 801a69c:	00db      	lsls	r3, r3, #3
 801a69e:	440b      	add	r3, r1
 801a6a0:	3308      	adds	r3, #8
 801a6a2:	687a      	ldr	r2, [r7, #4]
 801a6a4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801a6a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801a6aa:	4618      	mov	r0, r3
 801a6ac:	3728      	adds	r7, #40	@ 0x28
 801a6ae:	46bd      	mov	sp, r7
 801a6b0:	bd80      	pop	{r7, pc}
 801a6b2:	bf00      	nop
 801a6b4:	2000ecd0 	.word	0x2000ecd0
 801a6b8:	08024dc8 	.word	0x08024dc8
 801a6bc:	08024e00 	.word	0x08024e00
 801a6c0:	08024e40 	.word	0x08024e40
 801a6c4:	08024e68 	.word	0x08024e68
 801a6c8:	08024e80 	.word	0x08024e80
 801a6cc:	08024e94 	.word	0x08024e94

0801a6d0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a6d0:	b580      	push	{r7, lr}
 801a6d2:	b088      	sub	sp, #32
 801a6d4:	af02      	add	r7, sp, #8
 801a6d6:	60f8      	str	r0, [r7, #12]
 801a6d8:	60b9      	str	r1, [r7, #8]
 801a6da:	607a      	str	r2, [r7, #4]
 801a6dc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a6de:	68fb      	ldr	r3, [r7, #12]
 801a6e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a6e4:	2b06      	cmp	r3, #6
 801a6e6:	d006      	beq.n	801a6f6 <etharp_update_arp_entry+0x26>
 801a6e8:	4b48      	ldr	r3, [pc, #288]	@ (801a80c <etharp_update_arp_entry+0x13c>)
 801a6ea:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801a6ee:	4948      	ldr	r1, [pc, #288]	@ (801a810 <etharp_update_arp_entry+0x140>)
 801a6f0:	4848      	ldr	r0, [pc, #288]	@ (801a814 <etharp_update_arp_entry+0x144>)
 801a6f2:	f003 fb4b 	bl	801dd8c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a6f6:	68bb      	ldr	r3, [r7, #8]
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d012      	beq.n	801a722 <etharp_update_arp_entry+0x52>
 801a6fc:	68bb      	ldr	r3, [r7, #8]
 801a6fe:	681b      	ldr	r3, [r3, #0]
 801a700:	2b00      	cmp	r3, #0
 801a702:	d00e      	beq.n	801a722 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a704:	68bb      	ldr	r3, [r7, #8]
 801a706:	681b      	ldr	r3, [r3, #0]
 801a708:	68f9      	ldr	r1, [r7, #12]
 801a70a:	4618      	mov	r0, r3
 801a70c:	f001 f920 	bl	801b950 <ip4_addr_isbroadcast_u32>
 801a710:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a712:	2b00      	cmp	r3, #0
 801a714:	d105      	bne.n	801a722 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a716:	68bb      	ldr	r3, [r7, #8]
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a71e:	2be0      	cmp	r3, #224	@ 0xe0
 801a720:	d102      	bne.n	801a728 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a722:	f06f 030f 	mvn.w	r3, #15
 801a726:	e06c      	b.n	801a802 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a728:	78fb      	ldrb	r3, [r7, #3]
 801a72a:	68fa      	ldr	r2, [r7, #12]
 801a72c:	4619      	mov	r1, r3
 801a72e:	68b8      	ldr	r0, [r7, #8]
 801a730:	f7ff fe56 	bl	801a3e0 <etharp_find_entry>
 801a734:	4603      	mov	r3, r0
 801a736:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a738:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a73c:	2b00      	cmp	r3, #0
 801a73e:	da02      	bge.n	801a746 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a740:	8afb      	ldrh	r3, [r7, #22]
 801a742:	b25b      	sxtb	r3, r3
 801a744:	e05d      	b.n	801a802 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a746:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a74a:	4933      	ldr	r1, [pc, #204]	@ (801a818 <etharp_update_arp_entry+0x148>)
 801a74c:	4613      	mov	r3, r2
 801a74e:	005b      	lsls	r3, r3, #1
 801a750:	4413      	add	r3, r2
 801a752:	00db      	lsls	r3, r3, #3
 801a754:	440b      	add	r3, r1
 801a756:	3314      	adds	r3, #20
 801a758:	2202      	movs	r2, #2
 801a75a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a75c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a760:	492d      	ldr	r1, [pc, #180]	@ (801a818 <etharp_update_arp_entry+0x148>)
 801a762:	4613      	mov	r3, r2
 801a764:	005b      	lsls	r3, r3, #1
 801a766:	4413      	add	r3, r2
 801a768:	00db      	lsls	r3, r3, #3
 801a76a:	440b      	add	r3, r1
 801a76c:	3308      	adds	r3, #8
 801a76e:	68fa      	ldr	r2, [r7, #12]
 801a770:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a772:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a776:	4613      	mov	r3, r2
 801a778:	005b      	lsls	r3, r3, #1
 801a77a:	4413      	add	r3, r2
 801a77c:	00db      	lsls	r3, r3, #3
 801a77e:	3308      	adds	r3, #8
 801a780:	4a25      	ldr	r2, [pc, #148]	@ (801a818 <etharp_update_arp_entry+0x148>)
 801a782:	4413      	add	r3, r2
 801a784:	3304      	adds	r3, #4
 801a786:	2206      	movs	r2, #6
 801a788:	6879      	ldr	r1, [r7, #4]
 801a78a:	4618      	mov	r0, r3
 801a78c:	f003 fc85 	bl	801e09a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a790:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a794:	4920      	ldr	r1, [pc, #128]	@ (801a818 <etharp_update_arp_entry+0x148>)
 801a796:	4613      	mov	r3, r2
 801a798:	005b      	lsls	r3, r3, #1
 801a79a:	4413      	add	r3, r2
 801a79c:	00db      	lsls	r3, r3, #3
 801a79e:	440b      	add	r3, r1
 801a7a0:	3312      	adds	r3, #18
 801a7a2:	2200      	movs	r2, #0
 801a7a4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a7a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a7aa:	491b      	ldr	r1, [pc, #108]	@ (801a818 <etharp_update_arp_entry+0x148>)
 801a7ac:	4613      	mov	r3, r2
 801a7ae:	005b      	lsls	r3, r3, #1
 801a7b0:	4413      	add	r3, r2
 801a7b2:	00db      	lsls	r3, r3, #3
 801a7b4:	440b      	add	r3, r1
 801a7b6:	681b      	ldr	r3, [r3, #0]
 801a7b8:	2b00      	cmp	r3, #0
 801a7ba:	d021      	beq.n	801a800 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a7bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a7c0:	4915      	ldr	r1, [pc, #84]	@ (801a818 <etharp_update_arp_entry+0x148>)
 801a7c2:	4613      	mov	r3, r2
 801a7c4:	005b      	lsls	r3, r3, #1
 801a7c6:	4413      	add	r3, r2
 801a7c8:	00db      	lsls	r3, r3, #3
 801a7ca:	440b      	add	r3, r1
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a7d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a7d4:	4910      	ldr	r1, [pc, #64]	@ (801a818 <etharp_update_arp_entry+0x148>)
 801a7d6:	4613      	mov	r3, r2
 801a7d8:	005b      	lsls	r3, r3, #1
 801a7da:	4413      	add	r3, r2
 801a7dc:	00db      	lsls	r3, r3, #3
 801a7de:	440b      	add	r3, r1
 801a7e0:	2200      	movs	r2, #0
 801a7e2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a7e4:	68fb      	ldr	r3, [r7, #12]
 801a7e6:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801a7ea:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801a7ee:	9300      	str	r3, [sp, #0]
 801a7f0:	687b      	ldr	r3, [r7, #4]
 801a7f2:	6939      	ldr	r1, [r7, #16]
 801a7f4:	68f8      	ldr	r0, [r7, #12]
 801a7f6:	f002 f8e3 	bl	801c9c0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a7fa:	6938      	ldr	r0, [r7, #16]
 801a7fc:	f7f6 fb04 	bl	8010e08 <pbuf_free>
  }
  return ERR_OK;
 801a800:	2300      	movs	r3, #0
}
 801a802:	4618      	mov	r0, r3
 801a804:	3718      	adds	r7, #24
 801a806:	46bd      	mov	sp, r7
 801a808:	bd80      	pop	{r7, pc}
 801a80a:	bf00      	nop
 801a80c:	08024dc8 	.word	0x08024dc8
 801a810:	08024ec0 	.word	0x08024ec0
 801a814:	08024e40 	.word	0x08024e40
 801a818:	2000ecd0 	.word	0x2000ecd0

0801a81c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801a81c:	b580      	push	{r7, lr}
 801a81e:	b084      	sub	sp, #16
 801a820:	af00      	add	r7, sp, #0
 801a822:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a824:	2300      	movs	r3, #0
 801a826:	60fb      	str	r3, [r7, #12]
 801a828:	e01e      	b.n	801a868 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801a82a:	4913      	ldr	r1, [pc, #76]	@ (801a878 <etharp_cleanup_netif+0x5c>)
 801a82c:	68fa      	ldr	r2, [r7, #12]
 801a82e:	4613      	mov	r3, r2
 801a830:	005b      	lsls	r3, r3, #1
 801a832:	4413      	add	r3, r2
 801a834:	00db      	lsls	r3, r3, #3
 801a836:	440b      	add	r3, r1
 801a838:	3314      	adds	r3, #20
 801a83a:	781b      	ldrb	r3, [r3, #0]
 801a83c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801a83e:	7afb      	ldrb	r3, [r7, #11]
 801a840:	2b00      	cmp	r3, #0
 801a842:	d00e      	beq.n	801a862 <etharp_cleanup_netif+0x46>
 801a844:	490c      	ldr	r1, [pc, #48]	@ (801a878 <etharp_cleanup_netif+0x5c>)
 801a846:	68fa      	ldr	r2, [r7, #12]
 801a848:	4613      	mov	r3, r2
 801a84a:	005b      	lsls	r3, r3, #1
 801a84c:	4413      	add	r3, r2
 801a84e:	00db      	lsls	r3, r3, #3
 801a850:	440b      	add	r3, r1
 801a852:	3308      	adds	r3, #8
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	687a      	ldr	r2, [r7, #4]
 801a858:	429a      	cmp	r2, r3
 801a85a:	d102      	bne.n	801a862 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801a85c:	68f8      	ldr	r0, [r7, #12]
 801a85e:	f7ff fce5 	bl	801a22c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a862:	68fb      	ldr	r3, [r7, #12]
 801a864:	3301      	adds	r3, #1
 801a866:	60fb      	str	r3, [r7, #12]
 801a868:	68fb      	ldr	r3, [r7, #12]
 801a86a:	2b09      	cmp	r3, #9
 801a86c:	dddd      	ble.n	801a82a <etharp_cleanup_netif+0xe>
    }
  }
}
 801a86e:	bf00      	nop
 801a870:	bf00      	nop
 801a872:	3710      	adds	r7, #16
 801a874:	46bd      	mov	sp, r7
 801a876:	bd80      	pop	{r7, pc}
 801a878:	2000ecd0 	.word	0x2000ecd0

0801a87c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a87c:	b5b0      	push	{r4, r5, r7, lr}
 801a87e:	b08a      	sub	sp, #40	@ 0x28
 801a880:	af04      	add	r7, sp, #16
 801a882:	6078      	str	r0, [r7, #4]
 801a884:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a886:	683b      	ldr	r3, [r7, #0]
 801a888:	2b00      	cmp	r3, #0
 801a88a:	d107      	bne.n	801a89c <etharp_input+0x20>
 801a88c:	4b3f      	ldr	r3, [pc, #252]	@ (801a98c <etharp_input+0x110>)
 801a88e:	f240 228a 	movw	r2, #650	@ 0x28a
 801a892:	493f      	ldr	r1, [pc, #252]	@ (801a990 <etharp_input+0x114>)
 801a894:	483f      	ldr	r0, [pc, #252]	@ (801a994 <etharp_input+0x118>)
 801a896:	f003 fa79 	bl	801dd8c <iprintf>
 801a89a:	e074      	b.n	801a986 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801a89c:	687b      	ldr	r3, [r7, #4]
 801a89e:	685b      	ldr	r3, [r3, #4]
 801a8a0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a8a2:	693b      	ldr	r3, [r7, #16]
 801a8a4:	881b      	ldrh	r3, [r3, #0]
 801a8a6:	b29b      	uxth	r3, r3
 801a8a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a8ac:	d10c      	bne.n	801a8c8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a8ae:	693b      	ldr	r3, [r7, #16]
 801a8b0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a8b2:	2b06      	cmp	r3, #6
 801a8b4:	d108      	bne.n	801a8c8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a8b6:	693b      	ldr	r3, [r7, #16]
 801a8b8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a8ba:	2b04      	cmp	r3, #4
 801a8bc:	d104      	bne.n	801a8c8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a8be:	693b      	ldr	r3, [r7, #16]
 801a8c0:	885b      	ldrh	r3, [r3, #2]
 801a8c2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a8c4:	2b08      	cmp	r3, #8
 801a8c6:	d003      	beq.n	801a8d0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a8c8:	6878      	ldr	r0, [r7, #4]
 801a8ca:	f7f6 fa9d 	bl	8010e08 <pbuf_free>
    return;
 801a8ce:	e05a      	b.n	801a986 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a8d0:	693b      	ldr	r3, [r7, #16]
 801a8d2:	330e      	adds	r3, #14
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a8d8:	693b      	ldr	r3, [r7, #16]
 801a8da:	3318      	adds	r3, #24
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a8e0:	683b      	ldr	r3, [r7, #0]
 801a8e2:	3304      	adds	r3, #4
 801a8e4:	681b      	ldr	r3, [r3, #0]
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d102      	bne.n	801a8f0 <etharp_input+0x74>
    for_us = 0;
 801a8ea:	2300      	movs	r3, #0
 801a8ec:	75fb      	strb	r3, [r7, #23]
 801a8ee:	e009      	b.n	801a904 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a8f0:	68ba      	ldr	r2, [r7, #8]
 801a8f2:	683b      	ldr	r3, [r7, #0]
 801a8f4:	3304      	adds	r3, #4
 801a8f6:	681b      	ldr	r3, [r3, #0]
 801a8f8:	429a      	cmp	r2, r3
 801a8fa:	bf0c      	ite	eq
 801a8fc:	2301      	moveq	r3, #1
 801a8fe:	2300      	movne	r3, #0
 801a900:	b2db      	uxtb	r3, r3
 801a902:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a904:	693b      	ldr	r3, [r7, #16]
 801a906:	f103 0208 	add.w	r2, r3, #8
 801a90a:	7dfb      	ldrb	r3, [r7, #23]
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d001      	beq.n	801a914 <etharp_input+0x98>
 801a910:	2301      	movs	r3, #1
 801a912:	e000      	b.n	801a916 <etharp_input+0x9a>
 801a914:	2302      	movs	r3, #2
 801a916:	f107 010c 	add.w	r1, r7, #12
 801a91a:	6838      	ldr	r0, [r7, #0]
 801a91c:	f7ff fed8 	bl	801a6d0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a920:	693b      	ldr	r3, [r7, #16]
 801a922:	88db      	ldrh	r3, [r3, #6]
 801a924:	b29b      	uxth	r3, r3
 801a926:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801a92a:	d003      	beq.n	801a934 <etharp_input+0xb8>
 801a92c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801a930:	d01e      	beq.n	801a970 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a932:	e025      	b.n	801a980 <etharp_input+0x104>
      if (for_us) {
 801a934:	7dfb      	ldrb	r3, [r7, #23]
 801a936:	2b00      	cmp	r3, #0
 801a938:	d021      	beq.n	801a97e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a93a:	683b      	ldr	r3, [r7, #0]
 801a93c:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801a940:	693b      	ldr	r3, [r7, #16]
 801a942:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a946:	683b      	ldr	r3, [r7, #0]
 801a948:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 801a94c:	683b      	ldr	r3, [r7, #0]
 801a94e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a950:	693a      	ldr	r2, [r7, #16]
 801a952:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a954:	2102      	movs	r1, #2
 801a956:	9103      	str	r1, [sp, #12]
 801a958:	f107 010c 	add.w	r1, r7, #12
 801a95c:	9102      	str	r1, [sp, #8]
 801a95e:	9201      	str	r2, [sp, #4]
 801a960:	9300      	str	r3, [sp, #0]
 801a962:	462b      	mov	r3, r5
 801a964:	4622      	mov	r2, r4
 801a966:	4601      	mov	r1, r0
 801a968:	6838      	ldr	r0, [r7, #0]
 801a96a:	f000 faef 	bl	801af4c <etharp_raw>
      break;
 801a96e:	e006      	b.n	801a97e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801a970:	f107 030c 	add.w	r3, r7, #12
 801a974:	4619      	mov	r1, r3
 801a976:	6838      	ldr	r0, [r7, #0]
 801a978:	f7fe f9d2 	bl	8018d20 <dhcp_arp_reply>
      break;
 801a97c:	e000      	b.n	801a980 <etharp_input+0x104>
      break;
 801a97e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a980:	6878      	ldr	r0, [r7, #4]
 801a982:	f7f6 fa41 	bl	8010e08 <pbuf_free>
}
 801a986:	3718      	adds	r7, #24
 801a988:	46bd      	mov	sp, r7
 801a98a:	bdb0      	pop	{r4, r5, r7, pc}
 801a98c:	08024dc8 	.word	0x08024dc8
 801a990:	08024f18 	.word	0x08024f18
 801a994:	08024e40 	.word	0x08024e40

0801a998 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a998:	b580      	push	{r7, lr}
 801a99a:	b086      	sub	sp, #24
 801a99c:	af02      	add	r7, sp, #8
 801a99e:	60f8      	str	r0, [r7, #12]
 801a9a0:	60b9      	str	r1, [r7, #8]
 801a9a2:	4613      	mov	r3, r2
 801a9a4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a9a6:	79fa      	ldrb	r2, [r7, #7]
 801a9a8:	4944      	ldr	r1, [pc, #272]	@ (801aabc <etharp_output_to_arp_index+0x124>)
 801a9aa:	4613      	mov	r3, r2
 801a9ac:	005b      	lsls	r3, r3, #1
 801a9ae:	4413      	add	r3, r2
 801a9b0:	00db      	lsls	r3, r3, #3
 801a9b2:	440b      	add	r3, r1
 801a9b4:	3314      	adds	r3, #20
 801a9b6:	781b      	ldrb	r3, [r3, #0]
 801a9b8:	2b01      	cmp	r3, #1
 801a9ba:	d806      	bhi.n	801a9ca <etharp_output_to_arp_index+0x32>
 801a9bc:	4b40      	ldr	r3, [pc, #256]	@ (801aac0 <etharp_output_to_arp_index+0x128>)
 801a9be:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801a9c2:	4940      	ldr	r1, [pc, #256]	@ (801aac4 <etharp_output_to_arp_index+0x12c>)
 801a9c4:	4840      	ldr	r0, [pc, #256]	@ (801aac8 <etharp_output_to_arp_index+0x130>)
 801a9c6:	f003 f9e1 	bl	801dd8c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a9ca:	79fa      	ldrb	r2, [r7, #7]
 801a9cc:	493b      	ldr	r1, [pc, #236]	@ (801aabc <etharp_output_to_arp_index+0x124>)
 801a9ce:	4613      	mov	r3, r2
 801a9d0:	005b      	lsls	r3, r3, #1
 801a9d2:	4413      	add	r3, r2
 801a9d4:	00db      	lsls	r3, r3, #3
 801a9d6:	440b      	add	r3, r1
 801a9d8:	3314      	adds	r3, #20
 801a9da:	781b      	ldrb	r3, [r3, #0]
 801a9dc:	2b02      	cmp	r3, #2
 801a9de:	d153      	bne.n	801aa88 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a9e0:	79fa      	ldrb	r2, [r7, #7]
 801a9e2:	4936      	ldr	r1, [pc, #216]	@ (801aabc <etharp_output_to_arp_index+0x124>)
 801a9e4:	4613      	mov	r3, r2
 801a9e6:	005b      	lsls	r3, r3, #1
 801a9e8:	4413      	add	r3, r2
 801a9ea:	00db      	lsls	r3, r3, #3
 801a9ec:	440b      	add	r3, r1
 801a9ee:	3312      	adds	r3, #18
 801a9f0:	881b      	ldrh	r3, [r3, #0]
 801a9f2:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801a9f6:	d919      	bls.n	801aa2c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a9f8:	79fa      	ldrb	r2, [r7, #7]
 801a9fa:	4613      	mov	r3, r2
 801a9fc:	005b      	lsls	r3, r3, #1
 801a9fe:	4413      	add	r3, r2
 801aa00:	00db      	lsls	r3, r3, #3
 801aa02:	4a2e      	ldr	r2, [pc, #184]	@ (801aabc <etharp_output_to_arp_index+0x124>)
 801aa04:	4413      	add	r3, r2
 801aa06:	3304      	adds	r3, #4
 801aa08:	4619      	mov	r1, r3
 801aa0a:	68f8      	ldr	r0, [r7, #12]
 801aa0c:	f000 fb4c 	bl	801b0a8 <etharp_request>
 801aa10:	4603      	mov	r3, r0
 801aa12:	2b00      	cmp	r3, #0
 801aa14:	d138      	bne.n	801aa88 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801aa16:	79fa      	ldrb	r2, [r7, #7]
 801aa18:	4928      	ldr	r1, [pc, #160]	@ (801aabc <etharp_output_to_arp_index+0x124>)
 801aa1a:	4613      	mov	r3, r2
 801aa1c:	005b      	lsls	r3, r3, #1
 801aa1e:	4413      	add	r3, r2
 801aa20:	00db      	lsls	r3, r3, #3
 801aa22:	440b      	add	r3, r1
 801aa24:	3314      	adds	r3, #20
 801aa26:	2203      	movs	r2, #3
 801aa28:	701a      	strb	r2, [r3, #0]
 801aa2a:	e02d      	b.n	801aa88 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801aa2c:	79fa      	ldrb	r2, [r7, #7]
 801aa2e:	4923      	ldr	r1, [pc, #140]	@ (801aabc <etharp_output_to_arp_index+0x124>)
 801aa30:	4613      	mov	r3, r2
 801aa32:	005b      	lsls	r3, r3, #1
 801aa34:	4413      	add	r3, r2
 801aa36:	00db      	lsls	r3, r3, #3
 801aa38:	440b      	add	r3, r1
 801aa3a:	3312      	adds	r3, #18
 801aa3c:	881b      	ldrh	r3, [r3, #0]
 801aa3e:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801aa42:	d321      	bcc.n	801aa88 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801aa44:	79fa      	ldrb	r2, [r7, #7]
 801aa46:	4613      	mov	r3, r2
 801aa48:	005b      	lsls	r3, r3, #1
 801aa4a:	4413      	add	r3, r2
 801aa4c:	00db      	lsls	r3, r3, #3
 801aa4e:	4a1b      	ldr	r2, [pc, #108]	@ (801aabc <etharp_output_to_arp_index+0x124>)
 801aa50:	4413      	add	r3, r2
 801aa52:	1d19      	adds	r1, r3, #4
 801aa54:	79fa      	ldrb	r2, [r7, #7]
 801aa56:	4613      	mov	r3, r2
 801aa58:	005b      	lsls	r3, r3, #1
 801aa5a:	4413      	add	r3, r2
 801aa5c:	00db      	lsls	r3, r3, #3
 801aa5e:	3308      	adds	r3, #8
 801aa60:	4a16      	ldr	r2, [pc, #88]	@ (801aabc <etharp_output_to_arp_index+0x124>)
 801aa62:	4413      	add	r3, r2
 801aa64:	3304      	adds	r3, #4
 801aa66:	461a      	mov	r2, r3
 801aa68:	68f8      	ldr	r0, [r7, #12]
 801aa6a:	f000 fafb 	bl	801b064 <etharp_request_dst>
 801aa6e:	4603      	mov	r3, r0
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d109      	bne.n	801aa88 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801aa74:	79fa      	ldrb	r2, [r7, #7]
 801aa76:	4911      	ldr	r1, [pc, #68]	@ (801aabc <etharp_output_to_arp_index+0x124>)
 801aa78:	4613      	mov	r3, r2
 801aa7a:	005b      	lsls	r3, r3, #1
 801aa7c:	4413      	add	r3, r2
 801aa7e:	00db      	lsls	r3, r3, #3
 801aa80:	440b      	add	r3, r1
 801aa82:	3314      	adds	r3, #20
 801aa84:	2203      	movs	r2, #3
 801aa86:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801aa88:	68fb      	ldr	r3, [r7, #12]
 801aa8a:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 801aa8e:	79fa      	ldrb	r2, [r7, #7]
 801aa90:	4613      	mov	r3, r2
 801aa92:	005b      	lsls	r3, r3, #1
 801aa94:	4413      	add	r3, r2
 801aa96:	00db      	lsls	r3, r3, #3
 801aa98:	3308      	adds	r3, #8
 801aa9a:	4a08      	ldr	r2, [pc, #32]	@ (801aabc <etharp_output_to_arp_index+0x124>)
 801aa9c:	4413      	add	r3, r2
 801aa9e:	3304      	adds	r3, #4
 801aaa0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801aaa4:	9200      	str	r2, [sp, #0]
 801aaa6:	460a      	mov	r2, r1
 801aaa8:	68b9      	ldr	r1, [r7, #8]
 801aaaa:	68f8      	ldr	r0, [r7, #12]
 801aaac:	f001 ff88 	bl	801c9c0 <ethernet_output>
 801aab0:	4603      	mov	r3, r0
}
 801aab2:	4618      	mov	r0, r3
 801aab4:	3710      	adds	r7, #16
 801aab6:	46bd      	mov	sp, r7
 801aab8:	bd80      	pop	{r7, pc}
 801aaba:	bf00      	nop
 801aabc:	2000ecd0 	.word	0x2000ecd0
 801aac0:	08024dc8 	.word	0x08024dc8
 801aac4:	08024f38 	.word	0x08024f38
 801aac8:	08024e40 	.word	0x08024e40

0801aacc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801aacc:	b580      	push	{r7, lr}
 801aace:	b08a      	sub	sp, #40	@ 0x28
 801aad0:	af02      	add	r7, sp, #8
 801aad2:	60f8      	str	r0, [r7, #12]
 801aad4:	60b9      	str	r1, [r7, #8]
 801aad6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801aad8:	687b      	ldr	r3, [r7, #4]
 801aada:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801aadc:	68fb      	ldr	r3, [r7, #12]
 801aade:	2b00      	cmp	r3, #0
 801aae0:	d106      	bne.n	801aaf0 <etharp_output+0x24>
 801aae2:	4b73      	ldr	r3, [pc, #460]	@ (801acb0 <etharp_output+0x1e4>)
 801aae4:	f240 321e 	movw	r2, #798	@ 0x31e
 801aae8:	4972      	ldr	r1, [pc, #456]	@ (801acb4 <etharp_output+0x1e8>)
 801aaea:	4873      	ldr	r0, [pc, #460]	@ (801acb8 <etharp_output+0x1ec>)
 801aaec:	f003 f94e 	bl	801dd8c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801aaf0:	68bb      	ldr	r3, [r7, #8]
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	d106      	bne.n	801ab04 <etharp_output+0x38>
 801aaf6:	4b6e      	ldr	r3, [pc, #440]	@ (801acb0 <etharp_output+0x1e4>)
 801aaf8:	f240 321f 	movw	r2, #799	@ 0x31f
 801aafc:	496f      	ldr	r1, [pc, #444]	@ (801acbc <etharp_output+0x1f0>)
 801aafe:	486e      	ldr	r0, [pc, #440]	@ (801acb8 <etharp_output+0x1ec>)
 801ab00:	f003 f944 	bl	801dd8c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801ab04:	687b      	ldr	r3, [r7, #4]
 801ab06:	2b00      	cmp	r3, #0
 801ab08:	d106      	bne.n	801ab18 <etharp_output+0x4c>
 801ab0a:	4b69      	ldr	r3, [pc, #420]	@ (801acb0 <etharp_output+0x1e4>)
 801ab0c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801ab10:	496b      	ldr	r1, [pc, #428]	@ (801acc0 <etharp_output+0x1f4>)
 801ab12:	4869      	ldr	r0, [pc, #420]	@ (801acb8 <etharp_output+0x1ec>)
 801ab14:	f003 f93a 	bl	801dd8c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801ab18:	687b      	ldr	r3, [r7, #4]
 801ab1a:	681b      	ldr	r3, [r3, #0]
 801ab1c:	68f9      	ldr	r1, [r7, #12]
 801ab1e:	4618      	mov	r0, r3
 801ab20:	f000 ff16 	bl	801b950 <ip4_addr_isbroadcast_u32>
 801ab24:	4603      	mov	r3, r0
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d002      	beq.n	801ab30 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801ab2a:	4b66      	ldr	r3, [pc, #408]	@ (801acc4 <etharp_output+0x1f8>)
 801ab2c:	61fb      	str	r3, [r7, #28]
 801ab2e:	e0af      	b.n	801ac90 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801ab30:	687b      	ldr	r3, [r7, #4]
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801ab38:	2be0      	cmp	r3, #224	@ 0xe0
 801ab3a:	d118      	bne.n	801ab6e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801ab3c:	2301      	movs	r3, #1
 801ab3e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801ab40:	2300      	movs	r3, #0
 801ab42:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801ab44:	235e      	movs	r3, #94	@ 0x5e
 801ab46:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801ab48:	687b      	ldr	r3, [r7, #4]
 801ab4a:	3301      	adds	r3, #1
 801ab4c:	781b      	ldrb	r3, [r3, #0]
 801ab4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ab52:	b2db      	uxtb	r3, r3
 801ab54:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	3302      	adds	r3, #2
 801ab5a:	781b      	ldrb	r3, [r3, #0]
 801ab5c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	3303      	adds	r3, #3
 801ab62:	781b      	ldrb	r3, [r3, #0]
 801ab64:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801ab66:	f107 0310 	add.w	r3, r7, #16
 801ab6a:	61fb      	str	r3, [r7, #28]
 801ab6c:	e090      	b.n	801ac90 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ab6e:	687b      	ldr	r3, [r7, #4]
 801ab70:	681a      	ldr	r2, [r3, #0]
 801ab72:	68fb      	ldr	r3, [r7, #12]
 801ab74:	3304      	adds	r3, #4
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	405a      	eors	r2, r3
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	3308      	adds	r3, #8
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	4013      	ands	r3, r2
 801ab82:	2b00      	cmp	r3, #0
 801ab84:	d012      	beq.n	801abac <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801ab86:	687b      	ldr	r3, [r7, #4]
 801ab88:	681b      	ldr	r3, [r3, #0]
 801ab8a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ab8c:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801ab90:	4293      	cmp	r3, r2
 801ab92:	d00b      	beq.n	801abac <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801ab94:	68fb      	ldr	r3, [r7, #12]
 801ab96:	330c      	adds	r3, #12
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	2b00      	cmp	r3, #0
 801ab9c:	d003      	beq.n	801aba6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801ab9e:	68fb      	ldr	r3, [r7, #12]
 801aba0:	330c      	adds	r3, #12
 801aba2:	61bb      	str	r3, [r7, #24]
 801aba4:	e002      	b.n	801abac <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801aba6:	f06f 0303 	mvn.w	r3, #3
 801abaa:	e07d      	b.n	801aca8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801abac:	4b46      	ldr	r3, [pc, #280]	@ (801acc8 <etharp_output+0x1fc>)
 801abae:	781b      	ldrb	r3, [r3, #0]
 801abb0:	4619      	mov	r1, r3
 801abb2:	4a46      	ldr	r2, [pc, #280]	@ (801accc <etharp_output+0x200>)
 801abb4:	460b      	mov	r3, r1
 801abb6:	005b      	lsls	r3, r3, #1
 801abb8:	440b      	add	r3, r1
 801abba:	00db      	lsls	r3, r3, #3
 801abbc:	4413      	add	r3, r2
 801abbe:	3314      	adds	r3, #20
 801abc0:	781b      	ldrb	r3, [r3, #0]
 801abc2:	2b01      	cmp	r3, #1
 801abc4:	d925      	bls.n	801ac12 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801abc6:	4b40      	ldr	r3, [pc, #256]	@ (801acc8 <etharp_output+0x1fc>)
 801abc8:	781b      	ldrb	r3, [r3, #0]
 801abca:	4619      	mov	r1, r3
 801abcc:	4a3f      	ldr	r2, [pc, #252]	@ (801accc <etharp_output+0x200>)
 801abce:	460b      	mov	r3, r1
 801abd0:	005b      	lsls	r3, r3, #1
 801abd2:	440b      	add	r3, r1
 801abd4:	00db      	lsls	r3, r3, #3
 801abd6:	4413      	add	r3, r2
 801abd8:	3308      	adds	r3, #8
 801abda:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801abdc:	68fa      	ldr	r2, [r7, #12]
 801abde:	429a      	cmp	r2, r3
 801abe0:	d117      	bne.n	801ac12 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801abe2:	69bb      	ldr	r3, [r7, #24]
 801abe4:	681a      	ldr	r2, [r3, #0]
 801abe6:	4b38      	ldr	r3, [pc, #224]	@ (801acc8 <etharp_output+0x1fc>)
 801abe8:	781b      	ldrb	r3, [r3, #0]
 801abea:	4618      	mov	r0, r3
 801abec:	4937      	ldr	r1, [pc, #220]	@ (801accc <etharp_output+0x200>)
 801abee:	4603      	mov	r3, r0
 801abf0:	005b      	lsls	r3, r3, #1
 801abf2:	4403      	add	r3, r0
 801abf4:	00db      	lsls	r3, r3, #3
 801abf6:	440b      	add	r3, r1
 801abf8:	3304      	adds	r3, #4
 801abfa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801abfc:	429a      	cmp	r2, r3
 801abfe:	d108      	bne.n	801ac12 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801ac00:	4b31      	ldr	r3, [pc, #196]	@ (801acc8 <etharp_output+0x1fc>)
 801ac02:	781b      	ldrb	r3, [r3, #0]
 801ac04:	461a      	mov	r2, r3
 801ac06:	68b9      	ldr	r1, [r7, #8]
 801ac08:	68f8      	ldr	r0, [r7, #12]
 801ac0a:	f7ff fec5 	bl	801a998 <etharp_output_to_arp_index>
 801ac0e:	4603      	mov	r3, r0
 801ac10:	e04a      	b.n	801aca8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ac12:	2300      	movs	r3, #0
 801ac14:	75fb      	strb	r3, [r7, #23]
 801ac16:	e031      	b.n	801ac7c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ac18:	7dfa      	ldrb	r2, [r7, #23]
 801ac1a:	492c      	ldr	r1, [pc, #176]	@ (801accc <etharp_output+0x200>)
 801ac1c:	4613      	mov	r3, r2
 801ac1e:	005b      	lsls	r3, r3, #1
 801ac20:	4413      	add	r3, r2
 801ac22:	00db      	lsls	r3, r3, #3
 801ac24:	440b      	add	r3, r1
 801ac26:	3314      	adds	r3, #20
 801ac28:	781b      	ldrb	r3, [r3, #0]
 801ac2a:	2b01      	cmp	r3, #1
 801ac2c:	d923      	bls.n	801ac76 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801ac2e:	7dfa      	ldrb	r2, [r7, #23]
 801ac30:	4926      	ldr	r1, [pc, #152]	@ (801accc <etharp_output+0x200>)
 801ac32:	4613      	mov	r3, r2
 801ac34:	005b      	lsls	r3, r3, #1
 801ac36:	4413      	add	r3, r2
 801ac38:	00db      	lsls	r3, r3, #3
 801ac3a:	440b      	add	r3, r1
 801ac3c:	3308      	adds	r3, #8
 801ac3e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ac40:	68fa      	ldr	r2, [r7, #12]
 801ac42:	429a      	cmp	r2, r3
 801ac44:	d117      	bne.n	801ac76 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801ac46:	69bb      	ldr	r3, [r7, #24]
 801ac48:	6819      	ldr	r1, [r3, #0]
 801ac4a:	7dfa      	ldrb	r2, [r7, #23]
 801ac4c:	481f      	ldr	r0, [pc, #124]	@ (801accc <etharp_output+0x200>)
 801ac4e:	4613      	mov	r3, r2
 801ac50:	005b      	lsls	r3, r3, #1
 801ac52:	4413      	add	r3, r2
 801ac54:	00db      	lsls	r3, r3, #3
 801ac56:	4403      	add	r3, r0
 801ac58:	3304      	adds	r3, #4
 801ac5a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801ac5c:	4299      	cmp	r1, r3
 801ac5e:	d10a      	bne.n	801ac76 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801ac60:	4a19      	ldr	r2, [pc, #100]	@ (801acc8 <etharp_output+0x1fc>)
 801ac62:	7dfb      	ldrb	r3, [r7, #23]
 801ac64:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801ac66:	7dfb      	ldrb	r3, [r7, #23]
 801ac68:	461a      	mov	r2, r3
 801ac6a:	68b9      	ldr	r1, [r7, #8]
 801ac6c:	68f8      	ldr	r0, [r7, #12]
 801ac6e:	f7ff fe93 	bl	801a998 <etharp_output_to_arp_index>
 801ac72:	4603      	mov	r3, r0
 801ac74:	e018      	b.n	801aca8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ac76:	7dfb      	ldrb	r3, [r7, #23]
 801ac78:	3301      	adds	r3, #1
 801ac7a:	75fb      	strb	r3, [r7, #23]
 801ac7c:	7dfb      	ldrb	r3, [r7, #23]
 801ac7e:	2b09      	cmp	r3, #9
 801ac80:	d9ca      	bls.n	801ac18 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801ac82:	68ba      	ldr	r2, [r7, #8]
 801ac84:	69b9      	ldr	r1, [r7, #24]
 801ac86:	68f8      	ldr	r0, [r7, #12]
 801ac88:	f000 f822 	bl	801acd0 <etharp_query>
 801ac8c:	4603      	mov	r3, r0
 801ac8e:	e00b      	b.n	801aca8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801ac90:	68fb      	ldr	r3, [r7, #12]
 801ac92:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801ac96:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801ac9a:	9300      	str	r3, [sp, #0]
 801ac9c:	69fb      	ldr	r3, [r7, #28]
 801ac9e:	68b9      	ldr	r1, [r7, #8]
 801aca0:	68f8      	ldr	r0, [r7, #12]
 801aca2:	f001 fe8d 	bl	801c9c0 <ethernet_output>
 801aca6:	4603      	mov	r3, r0
}
 801aca8:	4618      	mov	r0, r3
 801acaa:	3720      	adds	r7, #32
 801acac:	46bd      	mov	sp, r7
 801acae:	bd80      	pop	{r7, pc}
 801acb0:	08024dc8 	.word	0x08024dc8
 801acb4:	08024f18 	.word	0x08024f18
 801acb8:	08024e40 	.word	0x08024e40
 801acbc:	08024f68 	.word	0x08024f68
 801acc0:	08024f08 	.word	0x08024f08
 801acc4:	08025748 	.word	0x08025748
 801acc8:	2000edc0 	.word	0x2000edc0
 801accc:	2000ecd0 	.word	0x2000ecd0

0801acd0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801acd0:	b580      	push	{r7, lr}
 801acd2:	b08c      	sub	sp, #48	@ 0x30
 801acd4:	af02      	add	r7, sp, #8
 801acd6:	60f8      	str	r0, [r7, #12]
 801acd8:	60b9      	str	r1, [r7, #8]
 801acda:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	332a      	adds	r3, #42	@ 0x2a
 801ace0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801ace2:	23ff      	movs	r3, #255	@ 0xff
 801ace4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801ace8:	2300      	movs	r3, #0
 801acea:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801acec:	68bb      	ldr	r3, [r7, #8]
 801acee:	681b      	ldr	r3, [r3, #0]
 801acf0:	68f9      	ldr	r1, [r7, #12]
 801acf2:	4618      	mov	r0, r3
 801acf4:	f000 fe2c 	bl	801b950 <ip4_addr_isbroadcast_u32>
 801acf8:	4603      	mov	r3, r0
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d10c      	bne.n	801ad18 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801acfe:	68bb      	ldr	r3, [r7, #8]
 801ad00:	681b      	ldr	r3, [r3, #0]
 801ad02:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ad06:	2be0      	cmp	r3, #224	@ 0xe0
 801ad08:	d006      	beq.n	801ad18 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ad0a:	68bb      	ldr	r3, [r7, #8]
 801ad0c:	2b00      	cmp	r3, #0
 801ad0e:	d003      	beq.n	801ad18 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801ad10:	68bb      	ldr	r3, [r7, #8]
 801ad12:	681b      	ldr	r3, [r3, #0]
 801ad14:	2b00      	cmp	r3, #0
 801ad16:	d102      	bne.n	801ad1e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ad18:	f06f 030f 	mvn.w	r3, #15
 801ad1c:	e101      	b.n	801af22 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801ad1e:	68fa      	ldr	r2, [r7, #12]
 801ad20:	2101      	movs	r1, #1
 801ad22:	68b8      	ldr	r0, [r7, #8]
 801ad24:	f7ff fb5c 	bl	801a3e0 <etharp_find_entry>
 801ad28:	4603      	mov	r3, r0
 801ad2a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801ad2c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ad30:	2b00      	cmp	r3, #0
 801ad32:	da02      	bge.n	801ad3a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801ad34:	8a7b      	ldrh	r3, [r7, #18]
 801ad36:	b25b      	sxtb	r3, r3
 801ad38:	e0f3      	b.n	801af22 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801ad3a:	8a7b      	ldrh	r3, [r7, #18]
 801ad3c:	2b7e      	cmp	r3, #126	@ 0x7e
 801ad3e:	d906      	bls.n	801ad4e <etharp_query+0x7e>
 801ad40:	4b7a      	ldr	r3, [pc, #488]	@ (801af2c <etharp_query+0x25c>)
 801ad42:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801ad46:	497a      	ldr	r1, [pc, #488]	@ (801af30 <etharp_query+0x260>)
 801ad48:	487a      	ldr	r0, [pc, #488]	@ (801af34 <etharp_query+0x264>)
 801ad4a:	f003 f81f 	bl	801dd8c <iprintf>
  i = (netif_addr_idx_t)i_err;
 801ad4e:	8a7b      	ldrh	r3, [r7, #18]
 801ad50:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801ad52:	7c7a      	ldrb	r2, [r7, #17]
 801ad54:	4978      	ldr	r1, [pc, #480]	@ (801af38 <etharp_query+0x268>)
 801ad56:	4613      	mov	r3, r2
 801ad58:	005b      	lsls	r3, r3, #1
 801ad5a:	4413      	add	r3, r2
 801ad5c:	00db      	lsls	r3, r3, #3
 801ad5e:	440b      	add	r3, r1
 801ad60:	3314      	adds	r3, #20
 801ad62:	781b      	ldrb	r3, [r3, #0]
 801ad64:	2b00      	cmp	r3, #0
 801ad66:	d115      	bne.n	801ad94 <etharp_query+0xc4>
    is_new_entry = 1;
 801ad68:	2301      	movs	r3, #1
 801ad6a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ad6c:	7c7a      	ldrb	r2, [r7, #17]
 801ad6e:	4972      	ldr	r1, [pc, #456]	@ (801af38 <etharp_query+0x268>)
 801ad70:	4613      	mov	r3, r2
 801ad72:	005b      	lsls	r3, r3, #1
 801ad74:	4413      	add	r3, r2
 801ad76:	00db      	lsls	r3, r3, #3
 801ad78:	440b      	add	r3, r1
 801ad7a:	3314      	adds	r3, #20
 801ad7c:	2201      	movs	r2, #1
 801ad7e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801ad80:	7c7a      	ldrb	r2, [r7, #17]
 801ad82:	496d      	ldr	r1, [pc, #436]	@ (801af38 <etharp_query+0x268>)
 801ad84:	4613      	mov	r3, r2
 801ad86:	005b      	lsls	r3, r3, #1
 801ad88:	4413      	add	r3, r2
 801ad8a:	00db      	lsls	r3, r3, #3
 801ad8c:	440b      	add	r3, r1
 801ad8e:	3308      	adds	r3, #8
 801ad90:	68fa      	ldr	r2, [r7, #12]
 801ad92:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ad94:	7c7a      	ldrb	r2, [r7, #17]
 801ad96:	4968      	ldr	r1, [pc, #416]	@ (801af38 <etharp_query+0x268>)
 801ad98:	4613      	mov	r3, r2
 801ad9a:	005b      	lsls	r3, r3, #1
 801ad9c:	4413      	add	r3, r2
 801ad9e:	00db      	lsls	r3, r3, #3
 801ada0:	440b      	add	r3, r1
 801ada2:	3314      	adds	r3, #20
 801ada4:	781b      	ldrb	r3, [r3, #0]
 801ada6:	2b01      	cmp	r3, #1
 801ada8:	d011      	beq.n	801adce <etharp_query+0xfe>
 801adaa:	7c7a      	ldrb	r2, [r7, #17]
 801adac:	4962      	ldr	r1, [pc, #392]	@ (801af38 <etharp_query+0x268>)
 801adae:	4613      	mov	r3, r2
 801adb0:	005b      	lsls	r3, r3, #1
 801adb2:	4413      	add	r3, r2
 801adb4:	00db      	lsls	r3, r3, #3
 801adb6:	440b      	add	r3, r1
 801adb8:	3314      	adds	r3, #20
 801adba:	781b      	ldrb	r3, [r3, #0]
 801adbc:	2b01      	cmp	r3, #1
 801adbe:	d806      	bhi.n	801adce <etharp_query+0xfe>
 801adc0:	4b5a      	ldr	r3, [pc, #360]	@ (801af2c <etharp_query+0x25c>)
 801adc2:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801adc6:	495d      	ldr	r1, [pc, #372]	@ (801af3c <etharp_query+0x26c>)
 801adc8:	485a      	ldr	r0, [pc, #360]	@ (801af34 <etharp_query+0x264>)
 801adca:	f002 ffdf 	bl	801dd8c <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801adce:	6a3b      	ldr	r3, [r7, #32]
 801add0:	2b00      	cmp	r3, #0
 801add2:	d102      	bne.n	801adda <etharp_query+0x10a>
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	2b00      	cmp	r3, #0
 801add8:	d10c      	bne.n	801adf4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801adda:	68b9      	ldr	r1, [r7, #8]
 801addc:	68f8      	ldr	r0, [r7, #12]
 801adde:	f000 f963 	bl	801b0a8 <etharp_request>
 801ade2:	4603      	mov	r3, r0
 801ade4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	2b00      	cmp	r3, #0
 801adec:	d102      	bne.n	801adf4 <etharp_query+0x124>
      return result;
 801adee:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801adf2:	e096      	b.n	801af22 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	2b00      	cmp	r3, #0
 801adf8:	d106      	bne.n	801ae08 <etharp_query+0x138>
 801adfa:	4b4c      	ldr	r3, [pc, #304]	@ (801af2c <etharp_query+0x25c>)
 801adfc:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801ae00:	494f      	ldr	r1, [pc, #316]	@ (801af40 <etharp_query+0x270>)
 801ae02:	484c      	ldr	r0, [pc, #304]	@ (801af34 <etharp_query+0x264>)
 801ae04:	f002 ffc2 	bl	801dd8c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801ae08:	7c7a      	ldrb	r2, [r7, #17]
 801ae0a:	494b      	ldr	r1, [pc, #300]	@ (801af38 <etharp_query+0x268>)
 801ae0c:	4613      	mov	r3, r2
 801ae0e:	005b      	lsls	r3, r3, #1
 801ae10:	4413      	add	r3, r2
 801ae12:	00db      	lsls	r3, r3, #3
 801ae14:	440b      	add	r3, r1
 801ae16:	3314      	adds	r3, #20
 801ae18:	781b      	ldrb	r3, [r3, #0]
 801ae1a:	2b01      	cmp	r3, #1
 801ae1c:	d917      	bls.n	801ae4e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801ae1e:	4a49      	ldr	r2, [pc, #292]	@ (801af44 <etharp_query+0x274>)
 801ae20:	7c7b      	ldrb	r3, [r7, #17]
 801ae22:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801ae24:	7c7a      	ldrb	r2, [r7, #17]
 801ae26:	4613      	mov	r3, r2
 801ae28:	005b      	lsls	r3, r3, #1
 801ae2a:	4413      	add	r3, r2
 801ae2c:	00db      	lsls	r3, r3, #3
 801ae2e:	3308      	adds	r3, #8
 801ae30:	4a41      	ldr	r2, [pc, #260]	@ (801af38 <etharp_query+0x268>)
 801ae32:	4413      	add	r3, r2
 801ae34:	3304      	adds	r3, #4
 801ae36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801ae3a:	9200      	str	r2, [sp, #0]
 801ae3c:	697a      	ldr	r2, [r7, #20]
 801ae3e:	6879      	ldr	r1, [r7, #4]
 801ae40:	68f8      	ldr	r0, [r7, #12]
 801ae42:	f001 fdbd 	bl	801c9c0 <ethernet_output>
 801ae46:	4603      	mov	r3, r0
 801ae48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801ae4c:	e067      	b.n	801af1e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ae4e:	7c7a      	ldrb	r2, [r7, #17]
 801ae50:	4939      	ldr	r1, [pc, #228]	@ (801af38 <etharp_query+0x268>)
 801ae52:	4613      	mov	r3, r2
 801ae54:	005b      	lsls	r3, r3, #1
 801ae56:	4413      	add	r3, r2
 801ae58:	00db      	lsls	r3, r3, #3
 801ae5a:	440b      	add	r3, r1
 801ae5c:	3314      	adds	r3, #20
 801ae5e:	781b      	ldrb	r3, [r3, #0]
 801ae60:	2b01      	cmp	r3, #1
 801ae62:	d15c      	bne.n	801af1e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801ae64:	2300      	movs	r3, #0
 801ae66:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ae6c:	e01c      	b.n	801aea8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801ae6e:	69fb      	ldr	r3, [r7, #28]
 801ae70:	895a      	ldrh	r2, [r3, #10]
 801ae72:	69fb      	ldr	r3, [r7, #28]
 801ae74:	891b      	ldrh	r3, [r3, #8]
 801ae76:	429a      	cmp	r2, r3
 801ae78:	d10a      	bne.n	801ae90 <etharp_query+0x1c0>
 801ae7a:	69fb      	ldr	r3, [r7, #28]
 801ae7c:	681b      	ldr	r3, [r3, #0]
 801ae7e:	2b00      	cmp	r3, #0
 801ae80:	d006      	beq.n	801ae90 <etharp_query+0x1c0>
 801ae82:	4b2a      	ldr	r3, [pc, #168]	@ (801af2c <etharp_query+0x25c>)
 801ae84:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801ae88:	492f      	ldr	r1, [pc, #188]	@ (801af48 <etharp_query+0x278>)
 801ae8a:	482a      	ldr	r0, [pc, #168]	@ (801af34 <etharp_query+0x264>)
 801ae8c:	f002 ff7e 	bl	801dd8c <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801ae90:	69fb      	ldr	r3, [r7, #28]
 801ae92:	7b1b      	ldrb	r3, [r3, #12]
 801ae94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ae98:	2b00      	cmp	r3, #0
 801ae9a:	d002      	beq.n	801aea2 <etharp_query+0x1d2>
        copy_needed = 1;
 801ae9c:	2301      	movs	r3, #1
 801ae9e:	61bb      	str	r3, [r7, #24]
        break;
 801aea0:	e005      	b.n	801aeae <etharp_query+0x1de>
      }
      p = p->next;
 801aea2:	69fb      	ldr	r3, [r7, #28]
 801aea4:	681b      	ldr	r3, [r3, #0]
 801aea6:	61fb      	str	r3, [r7, #28]
    while (p) {
 801aea8:	69fb      	ldr	r3, [r7, #28]
 801aeaa:	2b00      	cmp	r3, #0
 801aeac:	d1df      	bne.n	801ae6e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801aeae:	69bb      	ldr	r3, [r7, #24]
 801aeb0:	2b00      	cmp	r3, #0
 801aeb2:	d007      	beq.n	801aec4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801aeb4:	687a      	ldr	r2, [r7, #4]
 801aeb6:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801aeba:	200e      	movs	r0, #14
 801aebc:	f7f6 fb54 	bl	8011568 <pbuf_clone>
 801aec0:	61f8      	str	r0, [r7, #28]
 801aec2:	e004      	b.n	801aece <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801aec8:	69f8      	ldr	r0, [r7, #28]
 801aeca:	f7f6 f843 	bl	8010f54 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801aece:	69fb      	ldr	r3, [r7, #28]
 801aed0:	2b00      	cmp	r3, #0
 801aed2:	d021      	beq.n	801af18 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801aed4:	7c7a      	ldrb	r2, [r7, #17]
 801aed6:	4918      	ldr	r1, [pc, #96]	@ (801af38 <etharp_query+0x268>)
 801aed8:	4613      	mov	r3, r2
 801aeda:	005b      	lsls	r3, r3, #1
 801aedc:	4413      	add	r3, r2
 801aede:	00db      	lsls	r3, r3, #3
 801aee0:	440b      	add	r3, r1
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	d00a      	beq.n	801aefe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801aee8:	7c7a      	ldrb	r2, [r7, #17]
 801aeea:	4913      	ldr	r1, [pc, #76]	@ (801af38 <etharp_query+0x268>)
 801aeec:	4613      	mov	r3, r2
 801aeee:	005b      	lsls	r3, r3, #1
 801aef0:	4413      	add	r3, r2
 801aef2:	00db      	lsls	r3, r3, #3
 801aef4:	440b      	add	r3, r1
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	4618      	mov	r0, r3
 801aefa:	f7f5 ff85 	bl	8010e08 <pbuf_free>
      }
      arp_table[i].q = p;
 801aefe:	7c7a      	ldrb	r2, [r7, #17]
 801af00:	490d      	ldr	r1, [pc, #52]	@ (801af38 <etharp_query+0x268>)
 801af02:	4613      	mov	r3, r2
 801af04:	005b      	lsls	r3, r3, #1
 801af06:	4413      	add	r3, r2
 801af08:	00db      	lsls	r3, r3, #3
 801af0a:	440b      	add	r3, r1
 801af0c:	69fa      	ldr	r2, [r7, #28]
 801af0e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801af10:	2300      	movs	r3, #0
 801af12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801af16:	e002      	b.n	801af1e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801af18:	23ff      	movs	r3, #255	@ 0xff
 801af1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801af1e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801af22:	4618      	mov	r0, r3
 801af24:	3728      	adds	r7, #40	@ 0x28
 801af26:	46bd      	mov	sp, r7
 801af28:	bd80      	pop	{r7, pc}
 801af2a:	bf00      	nop
 801af2c:	08024dc8 	.word	0x08024dc8
 801af30:	08024f74 	.word	0x08024f74
 801af34:	08024e40 	.word	0x08024e40
 801af38:	2000ecd0 	.word	0x2000ecd0
 801af3c:	08024f84 	.word	0x08024f84
 801af40:	08024f68 	.word	0x08024f68
 801af44:	2000edc0 	.word	0x2000edc0
 801af48:	08024fac 	.word	0x08024fac

0801af4c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801af4c:	b580      	push	{r7, lr}
 801af4e:	b08a      	sub	sp, #40	@ 0x28
 801af50:	af02      	add	r7, sp, #8
 801af52:	60f8      	str	r0, [r7, #12]
 801af54:	60b9      	str	r1, [r7, #8]
 801af56:	607a      	str	r2, [r7, #4]
 801af58:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801af5a:	2300      	movs	r3, #0
 801af5c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801af5e:	68fb      	ldr	r3, [r7, #12]
 801af60:	2b00      	cmp	r3, #0
 801af62:	d106      	bne.n	801af72 <etharp_raw+0x26>
 801af64:	4b3a      	ldr	r3, [pc, #232]	@ (801b050 <etharp_raw+0x104>)
 801af66:	f240 4257 	movw	r2, #1111	@ 0x457
 801af6a:	493a      	ldr	r1, [pc, #232]	@ (801b054 <etharp_raw+0x108>)
 801af6c:	483a      	ldr	r0, [pc, #232]	@ (801b058 <etharp_raw+0x10c>)
 801af6e:	f002 ff0d 	bl	801dd8c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801af72:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801af76:	211c      	movs	r1, #28
 801af78:	200e      	movs	r0, #14
 801af7a:	f7f5 fc2f 	bl	80107dc <pbuf_alloc>
 801af7e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801af80:	69bb      	ldr	r3, [r7, #24]
 801af82:	2b00      	cmp	r3, #0
 801af84:	d102      	bne.n	801af8c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801af86:	f04f 33ff 	mov.w	r3, #4294967295
 801af8a:	e05d      	b.n	801b048 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801af8c:	69bb      	ldr	r3, [r7, #24]
 801af8e:	895b      	ldrh	r3, [r3, #10]
 801af90:	2b1b      	cmp	r3, #27
 801af92:	d806      	bhi.n	801afa2 <etharp_raw+0x56>
 801af94:	4b2e      	ldr	r3, [pc, #184]	@ (801b050 <etharp_raw+0x104>)
 801af96:	f240 4262 	movw	r2, #1122	@ 0x462
 801af9a:	4930      	ldr	r1, [pc, #192]	@ (801b05c <etharp_raw+0x110>)
 801af9c:	482e      	ldr	r0, [pc, #184]	@ (801b058 <etharp_raw+0x10c>)
 801af9e:	f002 fef5 	bl	801dd8c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801afa2:	69bb      	ldr	r3, [r7, #24]
 801afa4:	685b      	ldr	r3, [r3, #4]
 801afa6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801afa8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801afaa:	4618      	mov	r0, r3
 801afac:	f7f4 f80e 	bl	800efcc <lwip_htons>
 801afb0:	4603      	mov	r3, r0
 801afb2:	461a      	mov	r2, r3
 801afb4:	697b      	ldr	r3, [r7, #20]
 801afb6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801afb8:	68fb      	ldr	r3, [r7, #12]
 801afba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801afbe:	2b06      	cmp	r3, #6
 801afc0:	d006      	beq.n	801afd0 <etharp_raw+0x84>
 801afc2:	4b23      	ldr	r3, [pc, #140]	@ (801b050 <etharp_raw+0x104>)
 801afc4:	f240 4269 	movw	r2, #1129	@ 0x469
 801afc8:	4925      	ldr	r1, [pc, #148]	@ (801b060 <etharp_raw+0x114>)
 801afca:	4823      	ldr	r0, [pc, #140]	@ (801b058 <etharp_raw+0x10c>)
 801afcc:	f002 fede 	bl	801dd8c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801afd0:	697b      	ldr	r3, [r7, #20]
 801afd2:	3308      	adds	r3, #8
 801afd4:	2206      	movs	r2, #6
 801afd6:	6839      	ldr	r1, [r7, #0]
 801afd8:	4618      	mov	r0, r3
 801afda:	f003 f85e 	bl	801e09a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801afde:	697b      	ldr	r3, [r7, #20]
 801afe0:	3312      	adds	r3, #18
 801afe2:	2206      	movs	r2, #6
 801afe4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801afe6:	4618      	mov	r0, r3
 801afe8:	f003 f857 	bl	801e09a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801afec:	697b      	ldr	r3, [r7, #20]
 801afee:	330e      	adds	r3, #14
 801aff0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801aff2:	6812      	ldr	r2, [r2, #0]
 801aff4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801aff6:	697b      	ldr	r3, [r7, #20]
 801aff8:	3318      	adds	r3, #24
 801affa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801affc:	6812      	ldr	r2, [r2, #0]
 801affe:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801b000:	697b      	ldr	r3, [r7, #20]
 801b002:	2200      	movs	r2, #0
 801b004:	701a      	strb	r2, [r3, #0]
 801b006:	2200      	movs	r2, #0
 801b008:	f042 0201 	orr.w	r2, r2, #1
 801b00c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b00e:	697b      	ldr	r3, [r7, #20]
 801b010:	2200      	movs	r2, #0
 801b012:	f042 0208 	orr.w	r2, r2, #8
 801b016:	709a      	strb	r2, [r3, #2]
 801b018:	2200      	movs	r2, #0
 801b01a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801b01c:	697b      	ldr	r3, [r7, #20]
 801b01e:	2206      	movs	r2, #6
 801b020:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801b022:	697b      	ldr	r3, [r7, #20]
 801b024:	2204      	movs	r2, #4
 801b026:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b028:	f640 0306 	movw	r3, #2054	@ 0x806
 801b02c:	9300      	str	r3, [sp, #0]
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	68ba      	ldr	r2, [r7, #8]
 801b032:	69b9      	ldr	r1, [r7, #24]
 801b034:	68f8      	ldr	r0, [r7, #12]
 801b036:	f001 fcc3 	bl	801c9c0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801b03a:	69b8      	ldr	r0, [r7, #24]
 801b03c:	f7f5 fee4 	bl	8010e08 <pbuf_free>
  p = NULL;
 801b040:	2300      	movs	r3, #0
 801b042:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801b044:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b048:	4618      	mov	r0, r3
 801b04a:	3720      	adds	r7, #32
 801b04c:	46bd      	mov	sp, r7
 801b04e:	bd80      	pop	{r7, pc}
 801b050:	08024dc8 	.word	0x08024dc8
 801b054:	08024f18 	.word	0x08024f18
 801b058:	08024e40 	.word	0x08024e40
 801b05c:	08024fc8 	.word	0x08024fc8
 801b060:	08024ffc 	.word	0x08024ffc

0801b064 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801b064:	b580      	push	{r7, lr}
 801b066:	b088      	sub	sp, #32
 801b068:	af04      	add	r7, sp, #16
 801b06a:	60f8      	str	r0, [r7, #12]
 801b06c:	60b9      	str	r1, [r7, #8]
 801b06e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b070:	68fb      	ldr	r3, [r7, #12]
 801b072:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b076:	68fb      	ldr	r3, [r7, #12]
 801b078:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801b07c:	68fb      	ldr	r3, [r7, #12]
 801b07e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b080:	2201      	movs	r2, #1
 801b082:	9203      	str	r2, [sp, #12]
 801b084:	68ba      	ldr	r2, [r7, #8]
 801b086:	9202      	str	r2, [sp, #8]
 801b088:	4a06      	ldr	r2, [pc, #24]	@ (801b0a4 <etharp_request_dst+0x40>)
 801b08a:	9201      	str	r2, [sp, #4]
 801b08c:	9300      	str	r3, [sp, #0]
 801b08e:	4603      	mov	r3, r0
 801b090:	687a      	ldr	r2, [r7, #4]
 801b092:	68f8      	ldr	r0, [r7, #12]
 801b094:	f7ff ff5a 	bl	801af4c <etharp_raw>
 801b098:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801b09a:	4618      	mov	r0, r3
 801b09c:	3710      	adds	r7, #16
 801b09e:	46bd      	mov	sp, r7
 801b0a0:	bd80      	pop	{r7, pc}
 801b0a2:	bf00      	nop
 801b0a4:	08025750 	.word	0x08025750

0801b0a8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b0a8:	b580      	push	{r7, lr}
 801b0aa:	b082      	sub	sp, #8
 801b0ac:	af00      	add	r7, sp, #0
 801b0ae:	6078      	str	r0, [r7, #4]
 801b0b0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801b0b2:	4a05      	ldr	r2, [pc, #20]	@ (801b0c8 <etharp_request+0x20>)
 801b0b4:	6839      	ldr	r1, [r7, #0]
 801b0b6:	6878      	ldr	r0, [r7, #4]
 801b0b8:	f7ff ffd4 	bl	801b064 <etharp_request_dst>
 801b0bc:	4603      	mov	r3, r0
}
 801b0be:	4618      	mov	r0, r3
 801b0c0:	3708      	adds	r7, #8
 801b0c2:	46bd      	mov	sp, r7
 801b0c4:	bd80      	pop	{r7, pc}
 801b0c6:	bf00      	nop
 801b0c8:	08025748 	.word	0x08025748

0801b0cc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801b0cc:	b580      	push	{r7, lr}
 801b0ce:	b08e      	sub	sp, #56	@ 0x38
 801b0d0:	af04      	add	r7, sp, #16
 801b0d2:	6078      	str	r0, [r7, #4]
 801b0d4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801b0d6:	4b79      	ldr	r3, [pc, #484]	@ (801b2bc <icmp_input+0x1f0>)
 801b0d8:	689b      	ldr	r3, [r3, #8]
 801b0da:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801b0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b0de:	781b      	ldrb	r3, [r3, #0]
 801b0e0:	f003 030f 	and.w	r3, r3, #15
 801b0e4:	b2db      	uxtb	r3, r3
 801b0e6:	009b      	lsls	r3, r3, #2
 801b0e8:	b2db      	uxtb	r3, r3
 801b0ea:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801b0ec:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b0ee:	2b13      	cmp	r3, #19
 801b0f0:	f240 80cd 	bls.w	801b28e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801b0f4:	687b      	ldr	r3, [r7, #4]
 801b0f6:	895b      	ldrh	r3, [r3, #10]
 801b0f8:	2b03      	cmp	r3, #3
 801b0fa:	f240 80ca 	bls.w	801b292 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	685b      	ldr	r3, [r3, #4]
 801b102:	781b      	ldrb	r3, [r3, #0]
 801b104:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801b108:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801b10c:	2b00      	cmp	r3, #0
 801b10e:	f000 80b7 	beq.w	801b280 <icmp_input+0x1b4>
 801b112:	2b08      	cmp	r3, #8
 801b114:	f040 80b7 	bne.w	801b286 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b118:	4b69      	ldr	r3, [pc, #420]	@ (801b2c0 <icmp_input+0x1f4>)
 801b11a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b11c:	4b67      	ldr	r3, [pc, #412]	@ (801b2bc <icmp_input+0x1f0>)
 801b11e:	695b      	ldr	r3, [r3, #20]
 801b120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b124:	2be0      	cmp	r3, #224	@ 0xe0
 801b126:	f000 80bb 	beq.w	801b2a0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b12a:	4b64      	ldr	r3, [pc, #400]	@ (801b2bc <icmp_input+0x1f0>)
 801b12c:	695b      	ldr	r3, [r3, #20]
 801b12e:	4a63      	ldr	r2, [pc, #396]	@ (801b2bc <icmp_input+0x1f0>)
 801b130:	6812      	ldr	r2, [r2, #0]
 801b132:	4611      	mov	r1, r2
 801b134:	4618      	mov	r0, r3
 801b136:	f000 fc0b 	bl	801b950 <ip4_addr_isbroadcast_u32>
 801b13a:	4603      	mov	r3, r0
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	f040 80b1 	bne.w	801b2a4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b142:	687b      	ldr	r3, [r7, #4]
 801b144:	891b      	ldrh	r3, [r3, #8]
 801b146:	2b07      	cmp	r3, #7
 801b148:	f240 80a5 	bls.w	801b296 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b14c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b14e:	330e      	adds	r3, #14
 801b150:	4619      	mov	r1, r3
 801b152:	6878      	ldr	r0, [r7, #4]
 801b154:	f7f5 fd90 	bl	8010c78 <pbuf_add_header>
 801b158:	4603      	mov	r3, r0
 801b15a:	2b00      	cmp	r3, #0
 801b15c:	d04b      	beq.n	801b1f6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	891a      	ldrh	r2, [r3, #8]
 801b162:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b164:	4413      	add	r3, r2
 801b166:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	891b      	ldrh	r3, [r3, #8]
 801b16c:	8b7a      	ldrh	r2, [r7, #26]
 801b16e:	429a      	cmp	r2, r3
 801b170:	f0c0 809a 	bcc.w	801b2a8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b174:	8b7b      	ldrh	r3, [r7, #26]
 801b176:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b17a:	4619      	mov	r1, r3
 801b17c:	200e      	movs	r0, #14
 801b17e:	f7f5 fb2d 	bl	80107dc <pbuf_alloc>
 801b182:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b184:	697b      	ldr	r3, [r7, #20]
 801b186:	2b00      	cmp	r3, #0
 801b188:	f000 8090 	beq.w	801b2ac <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b18c:	697b      	ldr	r3, [r7, #20]
 801b18e:	895b      	ldrh	r3, [r3, #10]
 801b190:	461a      	mov	r2, r3
 801b192:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b194:	3308      	adds	r3, #8
 801b196:	429a      	cmp	r2, r3
 801b198:	d203      	bcs.n	801b1a2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b19a:	6978      	ldr	r0, [r7, #20]
 801b19c:	f7f5 fe34 	bl	8010e08 <pbuf_free>
          goto icmperr;
 801b1a0:	e085      	b.n	801b2ae <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b1a2:	697b      	ldr	r3, [r7, #20]
 801b1a4:	685b      	ldr	r3, [r3, #4]
 801b1a6:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801b1a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801b1aa:	4618      	mov	r0, r3
 801b1ac:	f002 ff75 	bl	801e09a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b1b0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b1b2:	4619      	mov	r1, r3
 801b1b4:	6978      	ldr	r0, [r7, #20]
 801b1b6:	f7f5 fd6f 	bl	8010c98 <pbuf_remove_header>
 801b1ba:	4603      	mov	r3, r0
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d009      	beq.n	801b1d4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b1c0:	4b40      	ldr	r3, [pc, #256]	@ (801b2c4 <icmp_input+0x1f8>)
 801b1c2:	22b6      	movs	r2, #182	@ 0xb6
 801b1c4:	4940      	ldr	r1, [pc, #256]	@ (801b2c8 <icmp_input+0x1fc>)
 801b1c6:	4841      	ldr	r0, [pc, #260]	@ (801b2cc <icmp_input+0x200>)
 801b1c8:	f002 fde0 	bl	801dd8c <iprintf>
          pbuf_free(r);
 801b1cc:	6978      	ldr	r0, [r7, #20]
 801b1ce:	f7f5 fe1b 	bl	8010e08 <pbuf_free>
          goto icmperr;
 801b1d2:	e06c      	b.n	801b2ae <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b1d4:	6879      	ldr	r1, [r7, #4]
 801b1d6:	6978      	ldr	r0, [r7, #20]
 801b1d8:	f7f5 ff4a 	bl	8011070 <pbuf_copy>
 801b1dc:	4603      	mov	r3, r0
 801b1de:	2b00      	cmp	r3, #0
 801b1e0:	d003      	beq.n	801b1ea <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b1e2:	6978      	ldr	r0, [r7, #20]
 801b1e4:	f7f5 fe10 	bl	8010e08 <pbuf_free>
          goto icmperr;
 801b1e8:	e061      	b.n	801b2ae <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801b1ea:	6878      	ldr	r0, [r7, #4]
 801b1ec:	f7f5 fe0c 	bl	8010e08 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b1f0:	697b      	ldr	r3, [r7, #20]
 801b1f2:	607b      	str	r3, [r7, #4]
 801b1f4:	e00f      	b.n	801b216 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b1f6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b1f8:	330e      	adds	r3, #14
 801b1fa:	4619      	mov	r1, r3
 801b1fc:	6878      	ldr	r0, [r7, #4]
 801b1fe:	f7f5 fd4b 	bl	8010c98 <pbuf_remove_header>
 801b202:	4603      	mov	r3, r0
 801b204:	2b00      	cmp	r3, #0
 801b206:	d006      	beq.n	801b216 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b208:	4b2e      	ldr	r3, [pc, #184]	@ (801b2c4 <icmp_input+0x1f8>)
 801b20a:	22c7      	movs	r2, #199	@ 0xc7
 801b20c:	4930      	ldr	r1, [pc, #192]	@ (801b2d0 <icmp_input+0x204>)
 801b20e:	482f      	ldr	r0, [pc, #188]	@ (801b2cc <icmp_input+0x200>)
 801b210:	f002 fdbc 	bl	801dd8c <iprintf>
          goto icmperr;
 801b214:	e04b      	b.n	801b2ae <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b216:	687b      	ldr	r3, [r7, #4]
 801b218:	685b      	ldr	r3, [r3, #4]
 801b21a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b21c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801b21e:	4619      	mov	r1, r3
 801b220:	6878      	ldr	r0, [r7, #4]
 801b222:	f7f5 fd29 	bl	8010c78 <pbuf_add_header>
 801b226:	4603      	mov	r3, r0
 801b228:	2b00      	cmp	r3, #0
 801b22a:	d12b      	bne.n	801b284 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	685b      	ldr	r3, [r3, #4]
 801b230:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b232:	69fb      	ldr	r3, [r7, #28]
 801b234:	681a      	ldr	r2, [r3, #0]
 801b236:	68fb      	ldr	r3, [r7, #12]
 801b238:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b23a:	4b20      	ldr	r3, [pc, #128]	@ (801b2bc <icmp_input+0x1f0>)
 801b23c:	691a      	ldr	r2, [r3, #16]
 801b23e:	68fb      	ldr	r3, [r7, #12]
 801b240:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b242:	693b      	ldr	r3, [r7, #16]
 801b244:	2200      	movs	r2, #0
 801b246:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801b248:	693b      	ldr	r3, [r7, #16]
 801b24a:	2200      	movs	r2, #0
 801b24c:	709a      	strb	r2, [r3, #2]
 801b24e:	2200      	movs	r2, #0
 801b250:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b252:	68fb      	ldr	r3, [r7, #12]
 801b254:	22ff      	movs	r2, #255	@ 0xff
 801b256:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b258:	68fb      	ldr	r3, [r7, #12]
 801b25a:	2200      	movs	r2, #0
 801b25c:	729a      	strb	r2, [r3, #10]
 801b25e:	2200      	movs	r2, #0
 801b260:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b262:	683b      	ldr	r3, [r7, #0]
 801b264:	9302      	str	r3, [sp, #8]
 801b266:	2301      	movs	r3, #1
 801b268:	9301      	str	r3, [sp, #4]
 801b26a:	2300      	movs	r3, #0
 801b26c:	9300      	str	r3, [sp, #0]
 801b26e:	23ff      	movs	r3, #255	@ 0xff
 801b270:	2200      	movs	r2, #0
 801b272:	69f9      	ldr	r1, [r7, #28]
 801b274:	6878      	ldr	r0, [r7, #4]
 801b276:	f000 fa93 	bl	801b7a0 <ip4_output_if>
 801b27a:	4603      	mov	r3, r0
 801b27c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b27e:	e001      	b.n	801b284 <icmp_input+0x1b8>
      break;
 801b280:	bf00      	nop
 801b282:	e000      	b.n	801b286 <icmp_input+0x1ba>
      break;
 801b284:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b286:	6878      	ldr	r0, [r7, #4]
 801b288:	f7f5 fdbe 	bl	8010e08 <pbuf_free>
  return;
 801b28c:	e013      	b.n	801b2b6 <icmp_input+0x1ea>
    goto lenerr;
 801b28e:	bf00      	nop
 801b290:	e002      	b.n	801b298 <icmp_input+0x1cc>
    goto lenerr;
 801b292:	bf00      	nop
 801b294:	e000      	b.n	801b298 <icmp_input+0x1cc>
        goto lenerr;
 801b296:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b298:	6878      	ldr	r0, [r7, #4]
 801b29a:	f7f5 fdb5 	bl	8010e08 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b29e:	e00a      	b.n	801b2b6 <icmp_input+0x1ea>
        goto icmperr;
 801b2a0:	bf00      	nop
 801b2a2:	e004      	b.n	801b2ae <icmp_input+0x1e2>
        goto icmperr;
 801b2a4:	bf00      	nop
 801b2a6:	e002      	b.n	801b2ae <icmp_input+0x1e2>
          goto icmperr;
 801b2a8:	bf00      	nop
 801b2aa:	e000      	b.n	801b2ae <icmp_input+0x1e2>
          goto icmperr;
 801b2ac:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b2ae:	6878      	ldr	r0, [r7, #4]
 801b2b0:	f7f5 fdaa 	bl	8010e08 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b2b4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b2b6:	3728      	adds	r7, #40	@ 0x28
 801b2b8:	46bd      	mov	sp, r7
 801b2ba:	bd80      	pop	{r7, pc}
 801b2bc:	2000b370 	.word	0x2000b370
 801b2c0:	2000b384 	.word	0x2000b384
 801b2c4:	08025040 	.word	0x08025040
 801b2c8:	08025078 	.word	0x08025078
 801b2cc:	080250b0 	.word	0x080250b0
 801b2d0:	080250d8 	.word	0x080250d8

0801b2d4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b2d4:	b580      	push	{r7, lr}
 801b2d6:	b082      	sub	sp, #8
 801b2d8:	af00      	add	r7, sp, #0
 801b2da:	6078      	str	r0, [r7, #4]
 801b2dc:	460b      	mov	r3, r1
 801b2de:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b2e0:	78fb      	ldrb	r3, [r7, #3]
 801b2e2:	461a      	mov	r2, r3
 801b2e4:	2103      	movs	r1, #3
 801b2e6:	6878      	ldr	r0, [r7, #4]
 801b2e8:	f000 f814 	bl	801b314 <icmp_send_response>
}
 801b2ec:	bf00      	nop
 801b2ee:	3708      	adds	r7, #8
 801b2f0:	46bd      	mov	sp, r7
 801b2f2:	bd80      	pop	{r7, pc}

0801b2f4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b2f4:	b580      	push	{r7, lr}
 801b2f6:	b082      	sub	sp, #8
 801b2f8:	af00      	add	r7, sp, #0
 801b2fa:	6078      	str	r0, [r7, #4]
 801b2fc:	460b      	mov	r3, r1
 801b2fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b300:	78fb      	ldrb	r3, [r7, #3]
 801b302:	461a      	mov	r2, r3
 801b304:	210b      	movs	r1, #11
 801b306:	6878      	ldr	r0, [r7, #4]
 801b308:	f000 f804 	bl	801b314 <icmp_send_response>
}
 801b30c:	bf00      	nop
 801b30e:	3708      	adds	r7, #8
 801b310:	46bd      	mov	sp, r7
 801b312:	bd80      	pop	{r7, pc}

0801b314 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b314:	b580      	push	{r7, lr}
 801b316:	b08c      	sub	sp, #48	@ 0x30
 801b318:	af04      	add	r7, sp, #16
 801b31a:	6078      	str	r0, [r7, #4]
 801b31c:	460b      	mov	r3, r1
 801b31e:	70fb      	strb	r3, [r7, #3]
 801b320:	4613      	mov	r3, r2
 801b322:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b324:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b328:	2124      	movs	r1, #36	@ 0x24
 801b32a:	2022      	movs	r0, #34	@ 0x22
 801b32c:	f7f5 fa56 	bl	80107dc <pbuf_alloc>
 801b330:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b332:	69fb      	ldr	r3, [r7, #28]
 801b334:	2b00      	cmp	r3, #0
 801b336:	d04c      	beq.n	801b3d2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b338:	69fb      	ldr	r3, [r7, #28]
 801b33a:	895b      	ldrh	r3, [r3, #10]
 801b33c:	2b23      	cmp	r3, #35	@ 0x23
 801b33e:	d806      	bhi.n	801b34e <icmp_send_response+0x3a>
 801b340:	4b26      	ldr	r3, [pc, #152]	@ (801b3dc <icmp_send_response+0xc8>)
 801b342:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801b346:	4926      	ldr	r1, [pc, #152]	@ (801b3e0 <icmp_send_response+0xcc>)
 801b348:	4826      	ldr	r0, [pc, #152]	@ (801b3e4 <icmp_send_response+0xd0>)
 801b34a:	f002 fd1f 	bl	801dd8c <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	685b      	ldr	r3, [r3, #4]
 801b352:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b354:	69fb      	ldr	r3, [r7, #28]
 801b356:	685b      	ldr	r3, [r3, #4]
 801b358:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b35a:	697b      	ldr	r3, [r7, #20]
 801b35c:	78fa      	ldrb	r2, [r7, #3]
 801b35e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b360:	697b      	ldr	r3, [r7, #20]
 801b362:	78ba      	ldrb	r2, [r7, #2]
 801b364:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b366:	697b      	ldr	r3, [r7, #20]
 801b368:	2200      	movs	r2, #0
 801b36a:	711a      	strb	r2, [r3, #4]
 801b36c:	2200      	movs	r2, #0
 801b36e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b370:	697b      	ldr	r3, [r7, #20]
 801b372:	2200      	movs	r2, #0
 801b374:	719a      	strb	r2, [r3, #6]
 801b376:	2200      	movs	r2, #0
 801b378:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b37a:	69fb      	ldr	r3, [r7, #28]
 801b37c:	685b      	ldr	r3, [r3, #4]
 801b37e:	f103 0008 	add.w	r0, r3, #8
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	685b      	ldr	r3, [r3, #4]
 801b386:	221c      	movs	r2, #28
 801b388:	4619      	mov	r1, r3
 801b38a:	f002 fe86 	bl	801e09a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b38e:	69bb      	ldr	r3, [r7, #24]
 801b390:	68db      	ldr	r3, [r3, #12]
 801b392:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b394:	f107 030c 	add.w	r3, r7, #12
 801b398:	4618      	mov	r0, r3
 801b39a:	f000 f825 	bl	801b3e8 <ip4_route>
 801b39e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b3a0:	693b      	ldr	r3, [r7, #16]
 801b3a2:	2b00      	cmp	r3, #0
 801b3a4:	d011      	beq.n	801b3ca <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b3a6:	697b      	ldr	r3, [r7, #20]
 801b3a8:	2200      	movs	r2, #0
 801b3aa:	709a      	strb	r2, [r3, #2]
 801b3ac:	2200      	movs	r2, #0
 801b3ae:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b3b0:	f107 020c 	add.w	r2, r7, #12
 801b3b4:	693b      	ldr	r3, [r7, #16]
 801b3b6:	9302      	str	r3, [sp, #8]
 801b3b8:	2301      	movs	r3, #1
 801b3ba:	9301      	str	r3, [sp, #4]
 801b3bc:	2300      	movs	r3, #0
 801b3be:	9300      	str	r3, [sp, #0]
 801b3c0:	23ff      	movs	r3, #255	@ 0xff
 801b3c2:	2100      	movs	r1, #0
 801b3c4:	69f8      	ldr	r0, [r7, #28]
 801b3c6:	f000 f9eb 	bl	801b7a0 <ip4_output_if>
  }
  pbuf_free(q);
 801b3ca:	69f8      	ldr	r0, [r7, #28]
 801b3cc:	f7f5 fd1c 	bl	8010e08 <pbuf_free>
 801b3d0:	e000      	b.n	801b3d4 <icmp_send_response+0xc0>
    return;
 801b3d2:	bf00      	nop
}
 801b3d4:	3720      	adds	r7, #32
 801b3d6:	46bd      	mov	sp, r7
 801b3d8:	bd80      	pop	{r7, pc}
 801b3da:	bf00      	nop
 801b3dc:	08025040 	.word	0x08025040
 801b3e0:	0802510c 	.word	0x0802510c
 801b3e4:	080250b0 	.word	0x080250b0

0801b3e8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b3e8:	b480      	push	{r7}
 801b3ea:	b085      	sub	sp, #20
 801b3ec:	af00      	add	r7, sp, #0
 801b3ee:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b3f0:	4b33      	ldr	r3, [pc, #204]	@ (801b4c0 <ip4_route+0xd8>)
 801b3f2:	681b      	ldr	r3, [r3, #0]
 801b3f4:	60fb      	str	r3, [r7, #12]
 801b3f6:	e036      	b.n	801b466 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b3f8:	68fb      	ldr	r3, [r7, #12]
 801b3fa:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b3fe:	f003 0301 	and.w	r3, r3, #1
 801b402:	b2db      	uxtb	r3, r3
 801b404:	2b00      	cmp	r3, #0
 801b406:	d02b      	beq.n	801b460 <ip4_route+0x78>
 801b408:	68fb      	ldr	r3, [r7, #12]
 801b40a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b40e:	089b      	lsrs	r3, r3, #2
 801b410:	f003 0301 	and.w	r3, r3, #1
 801b414:	b2db      	uxtb	r3, r3
 801b416:	2b00      	cmp	r3, #0
 801b418:	d022      	beq.n	801b460 <ip4_route+0x78>
 801b41a:	68fb      	ldr	r3, [r7, #12]
 801b41c:	3304      	adds	r3, #4
 801b41e:	681b      	ldr	r3, [r3, #0]
 801b420:	2b00      	cmp	r3, #0
 801b422:	d01d      	beq.n	801b460 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	681a      	ldr	r2, [r3, #0]
 801b428:	68fb      	ldr	r3, [r7, #12]
 801b42a:	3304      	adds	r3, #4
 801b42c:	681b      	ldr	r3, [r3, #0]
 801b42e:	405a      	eors	r2, r3
 801b430:	68fb      	ldr	r3, [r7, #12]
 801b432:	3308      	adds	r3, #8
 801b434:	681b      	ldr	r3, [r3, #0]
 801b436:	4013      	ands	r3, r2
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d101      	bne.n	801b440 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b43c:	68fb      	ldr	r3, [r7, #12]
 801b43e:	e038      	b.n	801b4b2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b440:	68fb      	ldr	r3, [r7, #12]
 801b442:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b446:	f003 0302 	and.w	r3, r3, #2
 801b44a:	2b00      	cmp	r3, #0
 801b44c:	d108      	bne.n	801b460 <ip4_route+0x78>
 801b44e:	687b      	ldr	r3, [r7, #4]
 801b450:	681a      	ldr	r2, [r3, #0]
 801b452:	68fb      	ldr	r3, [r7, #12]
 801b454:	330c      	adds	r3, #12
 801b456:	681b      	ldr	r3, [r3, #0]
 801b458:	429a      	cmp	r2, r3
 801b45a:	d101      	bne.n	801b460 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b45c:	68fb      	ldr	r3, [r7, #12]
 801b45e:	e028      	b.n	801b4b2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b460:	68fb      	ldr	r3, [r7, #12]
 801b462:	681b      	ldr	r3, [r3, #0]
 801b464:	60fb      	str	r3, [r7, #12]
 801b466:	68fb      	ldr	r3, [r7, #12]
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d1c5      	bne.n	801b3f8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b46c:	4b15      	ldr	r3, [pc, #84]	@ (801b4c4 <ip4_route+0xdc>)
 801b46e:	681b      	ldr	r3, [r3, #0]
 801b470:	2b00      	cmp	r3, #0
 801b472:	d01a      	beq.n	801b4aa <ip4_route+0xc2>
 801b474:	4b13      	ldr	r3, [pc, #76]	@ (801b4c4 <ip4_route+0xdc>)
 801b476:	681b      	ldr	r3, [r3, #0]
 801b478:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b47c:	f003 0301 	and.w	r3, r3, #1
 801b480:	2b00      	cmp	r3, #0
 801b482:	d012      	beq.n	801b4aa <ip4_route+0xc2>
 801b484:	4b0f      	ldr	r3, [pc, #60]	@ (801b4c4 <ip4_route+0xdc>)
 801b486:	681b      	ldr	r3, [r3, #0]
 801b488:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b48c:	f003 0304 	and.w	r3, r3, #4
 801b490:	2b00      	cmp	r3, #0
 801b492:	d00a      	beq.n	801b4aa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b494:	4b0b      	ldr	r3, [pc, #44]	@ (801b4c4 <ip4_route+0xdc>)
 801b496:	681b      	ldr	r3, [r3, #0]
 801b498:	3304      	adds	r3, #4
 801b49a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b49c:	2b00      	cmp	r3, #0
 801b49e:	d004      	beq.n	801b4aa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b4a0:	687b      	ldr	r3, [r7, #4]
 801b4a2:	681b      	ldr	r3, [r3, #0]
 801b4a4:	b2db      	uxtb	r3, r3
 801b4a6:	2b7f      	cmp	r3, #127	@ 0x7f
 801b4a8:	d101      	bne.n	801b4ae <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b4aa:	2300      	movs	r3, #0
 801b4ac:	e001      	b.n	801b4b2 <ip4_route+0xca>
  }

  return netif_default;
 801b4ae:	4b05      	ldr	r3, [pc, #20]	@ (801b4c4 <ip4_route+0xdc>)
 801b4b0:	681b      	ldr	r3, [r3, #0]
}
 801b4b2:	4618      	mov	r0, r3
 801b4b4:	3714      	adds	r7, #20
 801b4b6:	46bd      	mov	sp, r7
 801b4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4bc:	4770      	bx	lr
 801b4be:	bf00      	nop
 801b4c0:	2000ec24 	.word	0x2000ec24
 801b4c4:	2000ec28 	.word	0x2000ec28

0801b4c8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b4c8:	b580      	push	{r7, lr}
 801b4ca:	b082      	sub	sp, #8
 801b4cc:	af00      	add	r7, sp, #0
 801b4ce:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b4d6:	f003 0301 	and.w	r3, r3, #1
 801b4da:	b2db      	uxtb	r3, r3
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	d016      	beq.n	801b50e <ip4_input_accept+0x46>
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	3304      	adds	r3, #4
 801b4e4:	681b      	ldr	r3, [r3, #0]
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d011      	beq.n	801b50e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b4ea:	4b0b      	ldr	r3, [pc, #44]	@ (801b518 <ip4_input_accept+0x50>)
 801b4ec:	695a      	ldr	r2, [r3, #20]
 801b4ee:	687b      	ldr	r3, [r7, #4]
 801b4f0:	3304      	adds	r3, #4
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	429a      	cmp	r2, r3
 801b4f6:	d008      	beq.n	801b50a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b4f8:	4b07      	ldr	r3, [pc, #28]	@ (801b518 <ip4_input_accept+0x50>)
 801b4fa:	695b      	ldr	r3, [r3, #20]
 801b4fc:	6879      	ldr	r1, [r7, #4]
 801b4fe:	4618      	mov	r0, r3
 801b500:	f000 fa26 	bl	801b950 <ip4_addr_isbroadcast_u32>
 801b504:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b506:	2b00      	cmp	r3, #0
 801b508:	d001      	beq.n	801b50e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b50a:	2301      	movs	r3, #1
 801b50c:	e000      	b.n	801b510 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b50e:	2300      	movs	r3, #0
}
 801b510:	4618      	mov	r0, r3
 801b512:	3708      	adds	r7, #8
 801b514:	46bd      	mov	sp, r7
 801b516:	bd80      	pop	{r7, pc}
 801b518:	2000b370 	.word	0x2000b370

0801b51c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b51c:	b580      	push	{r7, lr}
 801b51e:	b088      	sub	sp, #32
 801b520:	af00      	add	r7, sp, #0
 801b522:	6078      	str	r0, [r7, #4]
 801b524:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801b526:	2301      	movs	r3, #1
 801b528:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	685b      	ldr	r3, [r3, #4]
 801b52e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801b530:	69fb      	ldr	r3, [r7, #28]
 801b532:	781b      	ldrb	r3, [r3, #0]
 801b534:	091b      	lsrs	r3, r3, #4
 801b536:	b2db      	uxtb	r3, r3
 801b538:	2b04      	cmp	r3, #4
 801b53a:	d004      	beq.n	801b546 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b53c:	6878      	ldr	r0, [r7, #4]
 801b53e:	f7f5 fc63 	bl	8010e08 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b542:	2300      	movs	r3, #0
 801b544:	e123      	b.n	801b78e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b546:	69fb      	ldr	r3, [r7, #28]
 801b548:	781b      	ldrb	r3, [r3, #0]
 801b54a:	f003 030f 	and.w	r3, r3, #15
 801b54e:	b2db      	uxtb	r3, r3
 801b550:	009b      	lsls	r3, r3, #2
 801b552:	b2db      	uxtb	r3, r3
 801b554:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b556:	69fb      	ldr	r3, [r7, #28]
 801b558:	885b      	ldrh	r3, [r3, #2]
 801b55a:	b29b      	uxth	r3, r3
 801b55c:	4618      	mov	r0, r3
 801b55e:	f7f3 fd35 	bl	800efcc <lwip_htons>
 801b562:	4603      	mov	r3, r0
 801b564:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b566:	687b      	ldr	r3, [r7, #4]
 801b568:	891b      	ldrh	r3, [r3, #8]
 801b56a:	8a3a      	ldrh	r2, [r7, #16]
 801b56c:	429a      	cmp	r2, r3
 801b56e:	d204      	bcs.n	801b57a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801b570:	8a3b      	ldrh	r3, [r7, #16]
 801b572:	4619      	mov	r1, r3
 801b574:	6878      	ldr	r0, [r7, #4]
 801b576:	f7f5 fa8f 	bl	8010a98 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b57a:	687b      	ldr	r3, [r7, #4]
 801b57c:	895b      	ldrh	r3, [r3, #10]
 801b57e:	8a7a      	ldrh	r2, [r7, #18]
 801b580:	429a      	cmp	r2, r3
 801b582:	d807      	bhi.n	801b594 <ip4_input+0x78>
 801b584:	687b      	ldr	r3, [r7, #4]
 801b586:	891b      	ldrh	r3, [r3, #8]
 801b588:	8a3a      	ldrh	r2, [r7, #16]
 801b58a:	429a      	cmp	r2, r3
 801b58c:	d802      	bhi.n	801b594 <ip4_input+0x78>
 801b58e:	8a7b      	ldrh	r3, [r7, #18]
 801b590:	2b13      	cmp	r3, #19
 801b592:	d804      	bhi.n	801b59e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b594:	6878      	ldr	r0, [r7, #4]
 801b596:	f7f5 fc37 	bl	8010e08 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b59a:	2300      	movs	r3, #0
 801b59c:	e0f7      	b.n	801b78e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b59e:	69fb      	ldr	r3, [r7, #28]
 801b5a0:	691b      	ldr	r3, [r3, #16]
 801b5a2:	4a7d      	ldr	r2, [pc, #500]	@ (801b798 <ip4_input+0x27c>)
 801b5a4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b5a6:	69fb      	ldr	r3, [r7, #28]
 801b5a8:	68db      	ldr	r3, [r3, #12]
 801b5aa:	4a7b      	ldr	r2, [pc, #492]	@ (801b798 <ip4_input+0x27c>)
 801b5ac:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b5ae:	4b7a      	ldr	r3, [pc, #488]	@ (801b798 <ip4_input+0x27c>)
 801b5b0:	695b      	ldr	r3, [r3, #20]
 801b5b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b5b6:	2be0      	cmp	r3, #224	@ 0xe0
 801b5b8:	d112      	bne.n	801b5e0 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b5ba:	683b      	ldr	r3, [r7, #0]
 801b5bc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b5c0:	f003 0301 	and.w	r3, r3, #1
 801b5c4:	b2db      	uxtb	r3, r3
 801b5c6:	2b00      	cmp	r3, #0
 801b5c8:	d007      	beq.n	801b5da <ip4_input+0xbe>
 801b5ca:	683b      	ldr	r3, [r7, #0]
 801b5cc:	3304      	adds	r3, #4
 801b5ce:	681b      	ldr	r3, [r3, #0]
 801b5d0:	2b00      	cmp	r3, #0
 801b5d2:	d002      	beq.n	801b5da <ip4_input+0xbe>
      netif = inp;
 801b5d4:	683b      	ldr	r3, [r7, #0]
 801b5d6:	61bb      	str	r3, [r7, #24]
 801b5d8:	e02a      	b.n	801b630 <ip4_input+0x114>
    } else {
      netif = NULL;
 801b5da:	2300      	movs	r3, #0
 801b5dc:	61bb      	str	r3, [r7, #24]
 801b5de:	e027      	b.n	801b630 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b5e0:	6838      	ldr	r0, [r7, #0]
 801b5e2:	f7ff ff71 	bl	801b4c8 <ip4_input_accept>
 801b5e6:	4603      	mov	r3, r0
 801b5e8:	2b00      	cmp	r3, #0
 801b5ea:	d002      	beq.n	801b5f2 <ip4_input+0xd6>
      netif = inp;
 801b5ec:	683b      	ldr	r3, [r7, #0]
 801b5ee:	61bb      	str	r3, [r7, #24]
 801b5f0:	e01e      	b.n	801b630 <ip4_input+0x114>
    } else {
      netif = NULL;
 801b5f2:	2300      	movs	r3, #0
 801b5f4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b5f6:	4b68      	ldr	r3, [pc, #416]	@ (801b798 <ip4_input+0x27c>)
 801b5f8:	695b      	ldr	r3, [r3, #20]
 801b5fa:	b2db      	uxtb	r3, r3
 801b5fc:	2b7f      	cmp	r3, #127	@ 0x7f
 801b5fe:	d017      	beq.n	801b630 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b600:	4b66      	ldr	r3, [pc, #408]	@ (801b79c <ip4_input+0x280>)
 801b602:	681b      	ldr	r3, [r3, #0]
 801b604:	61bb      	str	r3, [r7, #24]
 801b606:	e00e      	b.n	801b626 <ip4_input+0x10a>
          if (netif == inp) {
 801b608:	69ba      	ldr	r2, [r7, #24]
 801b60a:	683b      	ldr	r3, [r7, #0]
 801b60c:	429a      	cmp	r2, r3
 801b60e:	d006      	beq.n	801b61e <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b610:	69b8      	ldr	r0, [r7, #24]
 801b612:	f7ff ff59 	bl	801b4c8 <ip4_input_accept>
 801b616:	4603      	mov	r3, r0
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d108      	bne.n	801b62e <ip4_input+0x112>
 801b61c:	e000      	b.n	801b620 <ip4_input+0x104>
            continue;
 801b61e:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b620:	69bb      	ldr	r3, [r7, #24]
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	61bb      	str	r3, [r7, #24]
 801b626:	69bb      	ldr	r3, [r7, #24]
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d1ed      	bne.n	801b608 <ip4_input+0xec>
 801b62c:	e000      	b.n	801b630 <ip4_input+0x114>
            break;
 801b62e:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801b630:	69bb      	ldr	r3, [r7, #24]
 801b632:	2b00      	cmp	r3, #0
 801b634:	d111      	bne.n	801b65a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801b636:	69fb      	ldr	r3, [r7, #28]
 801b638:	7a5b      	ldrb	r3, [r3, #9]
 801b63a:	2b11      	cmp	r3, #17
 801b63c:	d10d      	bne.n	801b65a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801b63e:	8a7b      	ldrh	r3, [r7, #18]
 801b640:	69fa      	ldr	r2, [r7, #28]
 801b642:	4413      	add	r3, r2
 801b644:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801b646:	68fb      	ldr	r3, [r7, #12]
 801b648:	885b      	ldrh	r3, [r3, #2]
 801b64a:	b29b      	uxth	r3, r3
 801b64c:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801b650:	d103      	bne.n	801b65a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801b652:	683b      	ldr	r3, [r7, #0]
 801b654:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801b656:	2300      	movs	r3, #0
 801b658:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801b65a:	697b      	ldr	r3, [r7, #20]
 801b65c:	2b00      	cmp	r3, #0
 801b65e:	d017      	beq.n	801b690 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801b660:	4b4d      	ldr	r3, [pc, #308]	@ (801b798 <ip4_input+0x27c>)
 801b662:	691b      	ldr	r3, [r3, #16]
 801b664:	2b00      	cmp	r3, #0
 801b666:	d013      	beq.n	801b690 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b668:	4b4b      	ldr	r3, [pc, #300]	@ (801b798 <ip4_input+0x27c>)
 801b66a:	691b      	ldr	r3, [r3, #16]
 801b66c:	6839      	ldr	r1, [r7, #0]
 801b66e:	4618      	mov	r0, r3
 801b670:	f000 f96e 	bl	801b950 <ip4_addr_isbroadcast_u32>
 801b674:	4603      	mov	r3, r0
 801b676:	2b00      	cmp	r3, #0
 801b678:	d105      	bne.n	801b686 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801b67a:	4b47      	ldr	r3, [pc, #284]	@ (801b798 <ip4_input+0x27c>)
 801b67c:	691b      	ldr	r3, [r3, #16]
 801b67e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b682:	2be0      	cmp	r3, #224	@ 0xe0
 801b684:	d104      	bne.n	801b690 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801b686:	6878      	ldr	r0, [r7, #4]
 801b688:	f7f5 fbbe 	bl	8010e08 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801b68c:	2300      	movs	r3, #0
 801b68e:	e07e      	b.n	801b78e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801b690:	69bb      	ldr	r3, [r7, #24]
 801b692:	2b00      	cmp	r3, #0
 801b694:	d104      	bne.n	801b6a0 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801b696:	6878      	ldr	r0, [r7, #4]
 801b698:	f7f5 fbb6 	bl	8010e08 <pbuf_free>
    return ERR_OK;
 801b69c:	2300      	movs	r3, #0
 801b69e:	e076      	b.n	801b78e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801b6a0:	69fb      	ldr	r3, [r7, #28]
 801b6a2:	88db      	ldrh	r3, [r3, #6]
 801b6a4:	b29b      	uxth	r3, r3
 801b6a6:	461a      	mov	r2, r3
 801b6a8:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801b6ac:	4013      	ands	r3, r2
 801b6ae:	2b00      	cmp	r3, #0
 801b6b0:	d00b      	beq.n	801b6ca <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801b6b2:	6878      	ldr	r0, [r7, #4]
 801b6b4:	f000 fdbc 	bl	801c230 <ip4_reass>
 801b6b8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801b6ba:	687b      	ldr	r3, [r7, #4]
 801b6bc:	2b00      	cmp	r3, #0
 801b6be:	d101      	bne.n	801b6c4 <ip4_input+0x1a8>
      return ERR_OK;
 801b6c0:	2300      	movs	r3, #0
 801b6c2:	e064      	b.n	801b78e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801b6c4:	687b      	ldr	r3, [r7, #4]
 801b6c6:	685b      	ldr	r3, [r3, #4]
 801b6c8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801b6ca:	4a33      	ldr	r2, [pc, #204]	@ (801b798 <ip4_input+0x27c>)
 801b6cc:	69bb      	ldr	r3, [r7, #24]
 801b6ce:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801b6d0:	4a31      	ldr	r2, [pc, #196]	@ (801b798 <ip4_input+0x27c>)
 801b6d2:	683b      	ldr	r3, [r7, #0]
 801b6d4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801b6d6:	4a30      	ldr	r2, [pc, #192]	@ (801b798 <ip4_input+0x27c>)
 801b6d8:	69fb      	ldr	r3, [r7, #28]
 801b6da:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801b6dc:	69fb      	ldr	r3, [r7, #28]
 801b6de:	781b      	ldrb	r3, [r3, #0]
 801b6e0:	f003 030f 	and.w	r3, r3, #15
 801b6e4:	b2db      	uxtb	r3, r3
 801b6e6:	009b      	lsls	r3, r3, #2
 801b6e8:	b2db      	uxtb	r3, r3
 801b6ea:	461a      	mov	r2, r3
 801b6ec:	4b2a      	ldr	r3, [pc, #168]	@ (801b798 <ip4_input+0x27c>)
 801b6ee:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801b6f0:	8a7b      	ldrh	r3, [r7, #18]
 801b6f2:	4619      	mov	r1, r3
 801b6f4:	6878      	ldr	r0, [r7, #4]
 801b6f6:	f7f5 facf 	bl	8010c98 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801b6fa:	69fb      	ldr	r3, [r7, #28]
 801b6fc:	7a5b      	ldrb	r3, [r3, #9]
 801b6fe:	2b11      	cmp	r3, #17
 801b700:	d006      	beq.n	801b710 <ip4_input+0x1f4>
 801b702:	2b11      	cmp	r3, #17
 801b704:	dc13      	bgt.n	801b72e <ip4_input+0x212>
 801b706:	2b01      	cmp	r3, #1
 801b708:	d00c      	beq.n	801b724 <ip4_input+0x208>
 801b70a:	2b06      	cmp	r3, #6
 801b70c:	d005      	beq.n	801b71a <ip4_input+0x1fe>
 801b70e:	e00e      	b.n	801b72e <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b710:	6839      	ldr	r1, [r7, #0]
 801b712:	6878      	ldr	r0, [r7, #4]
 801b714:	f7fc f9dc 	bl	8017ad0 <udp_input>
        break;
 801b718:	e026      	b.n	801b768 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b71a:	6839      	ldr	r1, [r7, #0]
 801b71c:	6878      	ldr	r0, [r7, #4]
 801b71e:	f7f7 fd9b 	bl	8013258 <tcp_input>
        break;
 801b722:	e021      	b.n	801b768 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b724:	6839      	ldr	r1, [r7, #0]
 801b726:	6878      	ldr	r0, [r7, #4]
 801b728:	f7ff fcd0 	bl	801b0cc <icmp_input>
        break;
 801b72c:	e01c      	b.n	801b768 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b72e:	4b1a      	ldr	r3, [pc, #104]	@ (801b798 <ip4_input+0x27c>)
 801b730:	695b      	ldr	r3, [r3, #20]
 801b732:	69b9      	ldr	r1, [r7, #24]
 801b734:	4618      	mov	r0, r3
 801b736:	f000 f90b 	bl	801b950 <ip4_addr_isbroadcast_u32>
 801b73a:	4603      	mov	r3, r0
 801b73c:	2b00      	cmp	r3, #0
 801b73e:	d10f      	bne.n	801b760 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b740:	4b15      	ldr	r3, [pc, #84]	@ (801b798 <ip4_input+0x27c>)
 801b742:	695b      	ldr	r3, [r3, #20]
 801b744:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b748:	2be0      	cmp	r3, #224	@ 0xe0
 801b74a:	d009      	beq.n	801b760 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b74c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b750:	4619      	mov	r1, r3
 801b752:	6878      	ldr	r0, [r7, #4]
 801b754:	f7f5 fb13 	bl	8010d7e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b758:	2102      	movs	r1, #2
 801b75a:	6878      	ldr	r0, [r7, #4]
 801b75c:	f7ff fdba 	bl	801b2d4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b760:	6878      	ldr	r0, [r7, #4]
 801b762:	f7f5 fb51 	bl	8010e08 <pbuf_free>
        break;
 801b766:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b768:	4b0b      	ldr	r3, [pc, #44]	@ (801b798 <ip4_input+0x27c>)
 801b76a:	2200      	movs	r2, #0
 801b76c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b76e:	4b0a      	ldr	r3, [pc, #40]	@ (801b798 <ip4_input+0x27c>)
 801b770:	2200      	movs	r2, #0
 801b772:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b774:	4b08      	ldr	r3, [pc, #32]	@ (801b798 <ip4_input+0x27c>)
 801b776:	2200      	movs	r2, #0
 801b778:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b77a:	4b07      	ldr	r3, [pc, #28]	@ (801b798 <ip4_input+0x27c>)
 801b77c:	2200      	movs	r2, #0
 801b77e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b780:	4b05      	ldr	r3, [pc, #20]	@ (801b798 <ip4_input+0x27c>)
 801b782:	2200      	movs	r2, #0
 801b784:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b786:	4b04      	ldr	r3, [pc, #16]	@ (801b798 <ip4_input+0x27c>)
 801b788:	2200      	movs	r2, #0
 801b78a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b78c:	2300      	movs	r3, #0
}
 801b78e:	4618      	mov	r0, r3
 801b790:	3720      	adds	r7, #32
 801b792:	46bd      	mov	sp, r7
 801b794:	bd80      	pop	{r7, pc}
 801b796:	bf00      	nop
 801b798:	2000b370 	.word	0x2000b370
 801b79c:	2000ec24 	.word	0x2000ec24

0801b7a0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b7a0:	b580      	push	{r7, lr}
 801b7a2:	b08a      	sub	sp, #40	@ 0x28
 801b7a4:	af04      	add	r7, sp, #16
 801b7a6:	60f8      	str	r0, [r7, #12]
 801b7a8:	60b9      	str	r1, [r7, #8]
 801b7aa:	607a      	str	r2, [r7, #4]
 801b7ac:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b7ae:	68bb      	ldr	r3, [r7, #8]
 801b7b0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b7b2:	687b      	ldr	r3, [r7, #4]
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d009      	beq.n	801b7cc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b7b8:	68bb      	ldr	r3, [r7, #8]
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	d003      	beq.n	801b7c6 <ip4_output_if+0x26>
 801b7be:	68bb      	ldr	r3, [r7, #8]
 801b7c0:	681b      	ldr	r3, [r3, #0]
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	d102      	bne.n	801b7cc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b7c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7c8:	3304      	adds	r3, #4
 801b7ca:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b7cc:	78fa      	ldrb	r2, [r7, #3]
 801b7ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b7d0:	9302      	str	r3, [sp, #8]
 801b7d2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801b7d6:	9301      	str	r3, [sp, #4]
 801b7d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b7dc:	9300      	str	r3, [sp, #0]
 801b7de:	4613      	mov	r3, r2
 801b7e0:	687a      	ldr	r2, [r7, #4]
 801b7e2:	6979      	ldr	r1, [r7, #20]
 801b7e4:	68f8      	ldr	r0, [r7, #12]
 801b7e6:	f000 f805 	bl	801b7f4 <ip4_output_if_src>
 801b7ea:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b7ec:	4618      	mov	r0, r3
 801b7ee:	3718      	adds	r7, #24
 801b7f0:	46bd      	mov	sp, r7
 801b7f2:	bd80      	pop	{r7, pc}

0801b7f4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b7f4:	b580      	push	{r7, lr}
 801b7f6:	b088      	sub	sp, #32
 801b7f8:	af00      	add	r7, sp, #0
 801b7fa:	60f8      	str	r0, [r7, #12]
 801b7fc:	60b9      	str	r1, [r7, #8]
 801b7fe:	607a      	str	r2, [r7, #4]
 801b800:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b802:	68fb      	ldr	r3, [r7, #12]
 801b804:	7b9b      	ldrb	r3, [r3, #14]
 801b806:	2b01      	cmp	r3, #1
 801b808:	d006      	beq.n	801b818 <ip4_output_if_src+0x24>
 801b80a:	4b4b      	ldr	r3, [pc, #300]	@ (801b938 <ip4_output_if_src+0x144>)
 801b80c:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801b810:	494a      	ldr	r1, [pc, #296]	@ (801b93c <ip4_output_if_src+0x148>)
 801b812:	484b      	ldr	r0, [pc, #300]	@ (801b940 <ip4_output_if_src+0x14c>)
 801b814:	f002 faba 	bl	801dd8c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b818:	687b      	ldr	r3, [r7, #4]
 801b81a:	2b00      	cmp	r3, #0
 801b81c:	d060      	beq.n	801b8e0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b81e:	2314      	movs	r3, #20
 801b820:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b822:	2114      	movs	r1, #20
 801b824:	68f8      	ldr	r0, [r7, #12]
 801b826:	f7f5 fa27 	bl	8010c78 <pbuf_add_header>
 801b82a:	4603      	mov	r3, r0
 801b82c:	2b00      	cmp	r3, #0
 801b82e:	d002      	beq.n	801b836 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b830:	f06f 0301 	mvn.w	r3, #1
 801b834:	e07c      	b.n	801b930 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b836:	68fb      	ldr	r3, [r7, #12]
 801b838:	685b      	ldr	r3, [r3, #4]
 801b83a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b83c:	68fb      	ldr	r3, [r7, #12]
 801b83e:	895b      	ldrh	r3, [r3, #10]
 801b840:	2b13      	cmp	r3, #19
 801b842:	d806      	bhi.n	801b852 <ip4_output_if_src+0x5e>
 801b844:	4b3c      	ldr	r3, [pc, #240]	@ (801b938 <ip4_output_if_src+0x144>)
 801b846:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801b84a:	493e      	ldr	r1, [pc, #248]	@ (801b944 <ip4_output_if_src+0x150>)
 801b84c:	483c      	ldr	r0, [pc, #240]	@ (801b940 <ip4_output_if_src+0x14c>)
 801b84e:	f002 fa9d 	bl	801dd8c <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b852:	69fb      	ldr	r3, [r7, #28]
 801b854:	78fa      	ldrb	r2, [r7, #3]
 801b856:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b858:	69fb      	ldr	r3, [r7, #28]
 801b85a:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801b85e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b860:	687b      	ldr	r3, [r7, #4]
 801b862:	681a      	ldr	r2, [r3, #0]
 801b864:	69fb      	ldr	r3, [r7, #28]
 801b866:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b868:	8b7b      	ldrh	r3, [r7, #26]
 801b86a:	089b      	lsrs	r3, r3, #2
 801b86c:	b29b      	uxth	r3, r3
 801b86e:	b2db      	uxtb	r3, r3
 801b870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801b874:	b2da      	uxtb	r2, r3
 801b876:	69fb      	ldr	r3, [r7, #28]
 801b878:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b87a:	69fb      	ldr	r3, [r7, #28]
 801b87c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801b880:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b882:	68fb      	ldr	r3, [r7, #12]
 801b884:	891b      	ldrh	r3, [r3, #8]
 801b886:	4618      	mov	r0, r3
 801b888:	f7f3 fba0 	bl	800efcc <lwip_htons>
 801b88c:	4603      	mov	r3, r0
 801b88e:	461a      	mov	r2, r3
 801b890:	69fb      	ldr	r3, [r7, #28]
 801b892:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b894:	69fb      	ldr	r3, [r7, #28]
 801b896:	2200      	movs	r2, #0
 801b898:	719a      	strb	r2, [r3, #6]
 801b89a:	2200      	movs	r2, #0
 801b89c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b89e:	4b2a      	ldr	r3, [pc, #168]	@ (801b948 <ip4_output_if_src+0x154>)
 801b8a0:	881b      	ldrh	r3, [r3, #0]
 801b8a2:	4618      	mov	r0, r3
 801b8a4:	f7f3 fb92 	bl	800efcc <lwip_htons>
 801b8a8:	4603      	mov	r3, r0
 801b8aa:	461a      	mov	r2, r3
 801b8ac:	69fb      	ldr	r3, [r7, #28]
 801b8ae:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b8b0:	4b25      	ldr	r3, [pc, #148]	@ (801b948 <ip4_output_if_src+0x154>)
 801b8b2:	881b      	ldrh	r3, [r3, #0]
 801b8b4:	3301      	adds	r3, #1
 801b8b6:	b29a      	uxth	r2, r3
 801b8b8:	4b23      	ldr	r3, [pc, #140]	@ (801b948 <ip4_output_if_src+0x154>)
 801b8ba:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b8bc:	68bb      	ldr	r3, [r7, #8]
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d104      	bne.n	801b8cc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b8c2:	4b22      	ldr	r3, [pc, #136]	@ (801b94c <ip4_output_if_src+0x158>)
 801b8c4:	681a      	ldr	r2, [r3, #0]
 801b8c6:	69fb      	ldr	r3, [r7, #28]
 801b8c8:	60da      	str	r2, [r3, #12]
 801b8ca:	e003      	b.n	801b8d4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b8cc:	68bb      	ldr	r3, [r7, #8]
 801b8ce:	681a      	ldr	r2, [r3, #0]
 801b8d0:	69fb      	ldr	r3, [r7, #28]
 801b8d2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b8d4:	69fb      	ldr	r3, [r7, #28]
 801b8d6:	2200      	movs	r2, #0
 801b8d8:	729a      	strb	r2, [r3, #10]
 801b8da:	2200      	movs	r2, #0
 801b8dc:	72da      	strb	r2, [r3, #11]
 801b8de:	e00f      	b.n	801b900 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	895b      	ldrh	r3, [r3, #10]
 801b8e4:	2b13      	cmp	r3, #19
 801b8e6:	d802      	bhi.n	801b8ee <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b8e8:	f06f 0301 	mvn.w	r3, #1
 801b8ec:	e020      	b.n	801b930 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b8ee:	68fb      	ldr	r3, [r7, #12]
 801b8f0:	685b      	ldr	r3, [r3, #4]
 801b8f2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b8f4:	69fb      	ldr	r3, [r7, #28]
 801b8f6:	691b      	ldr	r3, [r3, #16]
 801b8f8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b8fa:	f107 0314 	add.w	r3, r7, #20
 801b8fe:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b902:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801b904:	2b00      	cmp	r3, #0
 801b906:	d00c      	beq.n	801b922 <ip4_output_if_src+0x12e>
 801b908:	68fb      	ldr	r3, [r7, #12]
 801b90a:	891a      	ldrh	r2, [r3, #8]
 801b90c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b90e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801b910:	429a      	cmp	r2, r3
 801b912:	d906      	bls.n	801b922 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b914:	687a      	ldr	r2, [r7, #4]
 801b916:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801b918:	68f8      	ldr	r0, [r7, #12]
 801b91a:	f000 fe7d 	bl	801c618 <ip4_frag>
 801b91e:	4603      	mov	r3, r0
 801b920:	e006      	b.n	801b930 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b924:	695b      	ldr	r3, [r3, #20]
 801b926:	687a      	ldr	r2, [r7, #4]
 801b928:	68f9      	ldr	r1, [r7, #12]
 801b92a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801b92c:	4798      	blx	r3
 801b92e:	4603      	mov	r3, r0
}
 801b930:	4618      	mov	r0, r3
 801b932:	3720      	adds	r7, #32
 801b934:	46bd      	mov	sp, r7
 801b936:	bd80      	pop	{r7, pc}
 801b938:	08025138 	.word	0x08025138
 801b93c:	0802516c 	.word	0x0802516c
 801b940:	08025178 	.word	0x08025178
 801b944:	080251a0 	.word	0x080251a0
 801b948:	2000edc2 	.word	0x2000edc2
 801b94c:	08025740 	.word	0x08025740

0801b950 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b950:	b480      	push	{r7}
 801b952:	b085      	sub	sp, #20
 801b954:	af00      	add	r7, sp, #0
 801b956:	6078      	str	r0, [r7, #4]
 801b958:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b95e:	687b      	ldr	r3, [r7, #4]
 801b960:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b964:	d002      	beq.n	801b96c <ip4_addr_isbroadcast_u32+0x1c>
 801b966:	687b      	ldr	r3, [r7, #4]
 801b968:	2b00      	cmp	r3, #0
 801b96a:	d101      	bne.n	801b970 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b96c:	2301      	movs	r3, #1
 801b96e:	e02a      	b.n	801b9c6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b970:	683b      	ldr	r3, [r7, #0]
 801b972:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801b976:	f003 0302 	and.w	r3, r3, #2
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d101      	bne.n	801b982 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b97e:	2300      	movs	r3, #0
 801b980:	e021      	b.n	801b9c6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b982:	683b      	ldr	r3, [r7, #0]
 801b984:	3304      	adds	r3, #4
 801b986:	681b      	ldr	r3, [r3, #0]
 801b988:	687a      	ldr	r2, [r7, #4]
 801b98a:	429a      	cmp	r2, r3
 801b98c:	d101      	bne.n	801b992 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b98e:	2300      	movs	r3, #0
 801b990:	e019      	b.n	801b9c6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b992:	68fa      	ldr	r2, [r7, #12]
 801b994:	683b      	ldr	r3, [r7, #0]
 801b996:	3304      	adds	r3, #4
 801b998:	681b      	ldr	r3, [r3, #0]
 801b99a:	405a      	eors	r2, r3
 801b99c:	683b      	ldr	r3, [r7, #0]
 801b99e:	3308      	adds	r3, #8
 801b9a0:	681b      	ldr	r3, [r3, #0]
 801b9a2:	4013      	ands	r3, r2
 801b9a4:	2b00      	cmp	r3, #0
 801b9a6:	d10d      	bne.n	801b9c4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b9a8:	683b      	ldr	r3, [r7, #0]
 801b9aa:	3308      	adds	r3, #8
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	43da      	mvns	r2, r3
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b9b4:	683b      	ldr	r3, [r7, #0]
 801b9b6:	3308      	adds	r3, #8
 801b9b8:	681b      	ldr	r3, [r3, #0]
 801b9ba:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b9bc:	429a      	cmp	r2, r3
 801b9be:	d101      	bne.n	801b9c4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b9c0:	2301      	movs	r3, #1
 801b9c2:	e000      	b.n	801b9c6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b9c4:	2300      	movs	r3, #0
  }
}
 801b9c6:	4618      	mov	r0, r3
 801b9c8:	3714      	adds	r7, #20
 801b9ca:	46bd      	mov	sp, r7
 801b9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9d0:	4770      	bx	lr
	...

0801b9d4 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 801b9d4:	b580      	push	{r7, lr}
 801b9d6:	b08a      	sub	sp, #40	@ 0x28
 801b9d8:	af00      	add	r7, sp, #0
 801b9da:	6078      	str	r0, [r7, #4]
 801b9dc:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 801b9de:	f107 030c 	add.w	r3, r7, #12
 801b9e2:	61fb      	str	r3, [r7, #28]

  c = *cp;
 801b9e4:	687b      	ldr	r3, [r7, #4]
 801b9e6:	781b      	ldrb	r3, [r3, #0]
 801b9e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 801b9ec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801b9f0:	3301      	adds	r3, #1
 801b9f2:	4a89      	ldr	r2, [pc, #548]	@ (801bc18 <ip4addr_aton+0x244>)
 801b9f4:	4413      	add	r3, r2
 801b9f6:	781b      	ldrb	r3, [r3, #0]
 801b9f8:	f003 0304 	and.w	r3, r3, #4
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	d101      	bne.n	801ba04 <ip4addr_aton+0x30>
      return 0;
 801ba00:	2300      	movs	r3, #0
 801ba02:	e105      	b.n	801bc10 <ip4addr_aton+0x23c>
    }
    val = 0;
 801ba04:	2300      	movs	r3, #0
 801ba06:	627b      	str	r3, [r7, #36]	@ 0x24
    base = 10;
 801ba08:	230a      	movs	r3, #10
 801ba0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if (c == '0') {
 801ba0e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ba12:	2b30      	cmp	r3, #48	@ 0x30
 801ba14:	d11c      	bne.n	801ba50 <ip4addr_aton+0x7c>
      c = *++cp;
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	3301      	adds	r3, #1
 801ba1a:	607b      	str	r3, [r7, #4]
 801ba1c:	687b      	ldr	r3, [r7, #4]
 801ba1e:	781b      	ldrb	r3, [r3, #0]
 801ba20:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (c == 'x' || c == 'X') {
 801ba24:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ba28:	2b78      	cmp	r3, #120	@ 0x78
 801ba2a:	d003      	beq.n	801ba34 <ip4addr_aton+0x60>
 801ba2c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ba30:	2b58      	cmp	r3, #88	@ 0x58
 801ba32:	d10a      	bne.n	801ba4a <ip4addr_aton+0x76>
        base = 16;
 801ba34:	2310      	movs	r3, #16
 801ba36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        c = *++cp;
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	3301      	adds	r3, #1
 801ba3e:	607b      	str	r3, [r7, #4]
 801ba40:	687b      	ldr	r3, [r7, #4]
 801ba42:	781b      	ldrb	r3, [r3, #0]
 801ba44:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801ba48:	e002      	b.n	801ba50 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 801ba4a:	2308      	movs	r3, #8
 801ba4c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 801ba50:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ba54:	3301      	adds	r3, #1
 801ba56:	4a70      	ldr	r2, [pc, #448]	@ (801bc18 <ip4addr_aton+0x244>)
 801ba58:	4413      	add	r3, r2
 801ba5a:	781b      	ldrb	r3, [r3, #0]
 801ba5c:	f003 0304 	and.w	r3, r3, #4
 801ba60:	2b00      	cmp	r3, #0
 801ba62:	d011      	beq.n	801ba88 <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 801ba64:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ba68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ba6a:	fb03 f202 	mul.w	r2, r3, r2
 801ba6e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ba72:	4413      	add	r3, r2
 801ba74:	3b30      	subs	r3, #48	@ 0x30
 801ba76:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	3301      	adds	r3, #1
 801ba7c:	607b      	str	r3, [r7, #4]
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	781b      	ldrb	r3, [r3, #0]
 801ba82:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 801ba86:	e7e3      	b.n	801ba50 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 801ba88:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ba8c:	2b10      	cmp	r3, #16
 801ba8e:	d127      	bne.n	801bae0 <ip4addr_aton+0x10c>
 801ba90:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801ba94:	3301      	adds	r3, #1
 801ba96:	4a60      	ldr	r2, [pc, #384]	@ (801bc18 <ip4addr_aton+0x244>)
 801ba98:	4413      	add	r3, r2
 801ba9a:	781b      	ldrb	r3, [r3, #0]
 801ba9c:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 801baa0:	2b00      	cmp	r3, #0
 801baa2:	d01d      	beq.n	801bae0 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 801baa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801baa6:	011b      	lsls	r3, r3, #4
 801baa8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801baac:	f102 010a 	add.w	r1, r2, #10
 801bab0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 801bab4:	3201      	adds	r2, #1
 801bab6:	4858      	ldr	r0, [pc, #352]	@ (801bc18 <ip4addr_aton+0x244>)
 801bab8:	4402      	add	r2, r0
 801baba:	7812      	ldrb	r2, [r2, #0]
 801babc:	f002 0203 	and.w	r2, r2, #3
 801bac0:	2a02      	cmp	r2, #2
 801bac2:	d101      	bne.n	801bac8 <ip4addr_aton+0xf4>
 801bac4:	2261      	movs	r2, #97	@ 0x61
 801bac6:	e000      	b.n	801baca <ip4addr_aton+0xf6>
 801bac8:	2241      	movs	r2, #65	@ 0x41
 801baca:	1a8a      	subs	r2, r1, r2
 801bacc:	4313      	orrs	r3, r2
 801bace:	627b      	str	r3, [r7, #36]	@ 0x24
        c = *++cp;
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	3301      	adds	r3, #1
 801bad4:	607b      	str	r3, [r7, #4]
 801bad6:	687b      	ldr	r3, [r7, #4]
 801bad8:	781b      	ldrb	r3, [r3, #0]
 801bada:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
      if (lwip_isdigit(c)) {
 801bade:	e7b7      	b.n	801ba50 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 801bae0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801bae4:	2b2e      	cmp	r3, #46	@ 0x2e
 801bae6:	d114      	bne.n	801bb12 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801bae8:	f107 030c 	add.w	r3, r7, #12
 801baec:	330c      	adds	r3, #12
 801baee:	69fa      	ldr	r2, [r7, #28]
 801baf0:	429a      	cmp	r2, r3
 801baf2:	d301      	bcc.n	801baf8 <ip4addr_aton+0x124>
        return 0;
 801baf4:	2300      	movs	r3, #0
 801baf6:	e08b      	b.n	801bc10 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801baf8:	69fb      	ldr	r3, [r7, #28]
 801bafa:	1d1a      	adds	r2, r3, #4
 801bafc:	61fa      	str	r2, [r7, #28]
 801bafe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bb00:	601a      	str	r2, [r3, #0]
      c = *++cp;
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	3301      	adds	r3, #1
 801bb06:	607b      	str	r3, [r7, #4]
 801bb08:	687b      	ldr	r3, [r7, #4]
 801bb0a:	781b      	ldrb	r3, [r3, #0]
 801bb0c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    if (!lwip_isdigit(c)) {
 801bb10:	e76c      	b.n	801b9ec <ip4addr_aton+0x18>
    } else {
      break;
 801bb12:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 801bb14:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	d00b      	beq.n	801bb34 <ip4addr_aton+0x160>
 801bb1c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 801bb20:	3301      	adds	r3, #1
 801bb22:	4a3d      	ldr	r2, [pc, #244]	@ (801bc18 <ip4addr_aton+0x244>)
 801bb24:	4413      	add	r3, r2
 801bb26:	781b      	ldrb	r3, [r3, #0]
 801bb28:	f003 0308 	and.w	r3, r3, #8
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d101      	bne.n	801bb34 <ip4addr_aton+0x160>
    return 0;
 801bb30:	2300      	movs	r3, #0
 801bb32:	e06d      	b.n	801bc10 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 801bb34:	f107 030c 	add.w	r3, r7, #12
 801bb38:	69fa      	ldr	r2, [r7, #28]
 801bb3a:	1ad3      	subs	r3, r2, r3
 801bb3c:	109b      	asrs	r3, r3, #2
 801bb3e:	3301      	adds	r3, #1
 801bb40:	2b04      	cmp	r3, #4
 801bb42:	d853      	bhi.n	801bbec <ip4addr_aton+0x218>
 801bb44:	a201      	add	r2, pc, #4	@ (adr r2, 801bb4c <ip4addr_aton+0x178>)
 801bb46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bb4a:	bf00      	nop
 801bb4c:	0801bb61 	.word	0x0801bb61
 801bb50:	0801bbfb 	.word	0x0801bbfb
 801bb54:	0801bb65 	.word	0x0801bb65
 801bb58:	0801bb87 	.word	0x0801bb87
 801bb5c:	0801bbb5 	.word	0x0801bbb5

    case 0:
      return 0;       /* initial nondigit */
 801bb60:	2300      	movs	r3, #0
 801bb62:	e055      	b.n	801bc10 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 801bb64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801bb6a:	d301      	bcc.n	801bb70 <ip4addr_aton+0x19c>
        return 0;
 801bb6c:	2300      	movs	r3, #0
 801bb6e:	e04f      	b.n	801bc10 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 801bb70:	68fb      	ldr	r3, [r7, #12]
 801bb72:	2bff      	cmp	r3, #255	@ 0xff
 801bb74:	d901      	bls.n	801bb7a <ip4addr_aton+0x1a6>
        return 0;
 801bb76:	2300      	movs	r3, #0
 801bb78:	e04a      	b.n	801bc10 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801bb7a:	68fb      	ldr	r3, [r7, #12]
 801bb7c:	061b      	lsls	r3, r3, #24
 801bb7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bb80:	4313      	orrs	r3, r2
 801bb82:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801bb84:	e03a      	b.n	801bbfc <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 801bb86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bb8c:	d301      	bcc.n	801bb92 <ip4addr_aton+0x1be>
        return 0;
 801bb8e:	2300      	movs	r3, #0
 801bb90:	e03e      	b.n	801bc10 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 801bb92:	68fb      	ldr	r3, [r7, #12]
 801bb94:	2bff      	cmp	r3, #255	@ 0xff
 801bb96:	d802      	bhi.n	801bb9e <ip4addr_aton+0x1ca>
 801bb98:	693b      	ldr	r3, [r7, #16]
 801bb9a:	2bff      	cmp	r3, #255	@ 0xff
 801bb9c:	d901      	bls.n	801bba2 <ip4addr_aton+0x1ce>
        return 0;
 801bb9e:	2300      	movs	r3, #0
 801bba0:	e036      	b.n	801bc10 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 801bba2:	68fb      	ldr	r3, [r7, #12]
 801bba4:	061a      	lsls	r2, r3, #24
 801bba6:	693b      	ldr	r3, [r7, #16]
 801bba8:	041b      	lsls	r3, r3, #16
 801bbaa:	4313      	orrs	r3, r2
 801bbac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bbae:	4313      	orrs	r3, r2
 801bbb0:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801bbb2:	e023      	b.n	801bbfc <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 801bbb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bbb6:	2bff      	cmp	r3, #255	@ 0xff
 801bbb8:	d901      	bls.n	801bbbe <ip4addr_aton+0x1ea>
        return 0;
 801bbba:	2300      	movs	r3, #0
 801bbbc:	e028      	b.n	801bc10 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 801bbbe:	68fb      	ldr	r3, [r7, #12]
 801bbc0:	2bff      	cmp	r3, #255	@ 0xff
 801bbc2:	d805      	bhi.n	801bbd0 <ip4addr_aton+0x1fc>
 801bbc4:	693b      	ldr	r3, [r7, #16]
 801bbc6:	2bff      	cmp	r3, #255	@ 0xff
 801bbc8:	d802      	bhi.n	801bbd0 <ip4addr_aton+0x1fc>
 801bbca:	697b      	ldr	r3, [r7, #20]
 801bbcc:	2bff      	cmp	r3, #255	@ 0xff
 801bbce:	d901      	bls.n	801bbd4 <ip4addr_aton+0x200>
        return 0;
 801bbd0:	2300      	movs	r3, #0
 801bbd2:	e01d      	b.n	801bc10 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 801bbd4:	68fb      	ldr	r3, [r7, #12]
 801bbd6:	061a      	lsls	r2, r3, #24
 801bbd8:	693b      	ldr	r3, [r7, #16]
 801bbda:	041b      	lsls	r3, r3, #16
 801bbdc:	431a      	orrs	r2, r3
 801bbde:	697b      	ldr	r3, [r7, #20]
 801bbe0:	021b      	lsls	r3, r3, #8
 801bbe2:	4313      	orrs	r3, r2
 801bbe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801bbe6:	4313      	orrs	r3, r2
 801bbe8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801bbea:	e007      	b.n	801bbfc <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 801bbec:	4b0b      	ldr	r3, [pc, #44]	@ (801bc1c <ip4addr_aton+0x248>)
 801bbee:	22f9      	movs	r2, #249	@ 0xf9
 801bbf0:	490b      	ldr	r1, [pc, #44]	@ (801bc20 <ip4addr_aton+0x24c>)
 801bbf2:	480c      	ldr	r0, [pc, #48]	@ (801bc24 <ip4addr_aton+0x250>)
 801bbf4:	f002 f8ca 	bl	801dd8c <iprintf>
      break;
 801bbf8:	e000      	b.n	801bbfc <ip4addr_aton+0x228>
      break;
 801bbfa:	bf00      	nop
  }
  if (addr) {
 801bbfc:	683b      	ldr	r3, [r7, #0]
 801bbfe:	2b00      	cmp	r3, #0
 801bc00:	d005      	beq.n	801bc0e <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 801bc02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801bc04:	f7f3 f9f7 	bl	800eff6 <lwip_htonl>
 801bc08:	4602      	mov	r2, r0
 801bc0a:	683b      	ldr	r3, [r7, #0]
 801bc0c:	601a      	str	r2, [r3, #0]
  }
  return 1;
 801bc0e:	2301      	movs	r3, #1
}
 801bc10:	4618      	mov	r0, r3
 801bc12:	3728      	adds	r7, #40	@ 0x28
 801bc14:	46bd      	mov	sp, r7
 801bc16:	bd80      	pop	{r7, pc}
 801bc18:	080257c5 	.word	0x080257c5
 801bc1c:	080251d0 	.word	0x080251d0
 801bc20:	0802520c 	.word	0x0802520c
 801bc24:	08025218 	.word	0x08025218

0801bc28 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801bc28:	b580      	push	{r7, lr}
 801bc2a:	b084      	sub	sp, #16
 801bc2c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801bc2e:	2300      	movs	r3, #0
 801bc30:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801bc32:	4b12      	ldr	r3, [pc, #72]	@ (801bc7c <ip_reass_tmr+0x54>)
 801bc34:	681b      	ldr	r3, [r3, #0]
 801bc36:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801bc38:	e018      	b.n	801bc6c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801bc3a:	68fb      	ldr	r3, [r7, #12]
 801bc3c:	7fdb      	ldrb	r3, [r3, #31]
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d00b      	beq.n	801bc5a <ip_reass_tmr+0x32>
      r->timer--;
 801bc42:	68fb      	ldr	r3, [r7, #12]
 801bc44:	7fdb      	ldrb	r3, [r3, #31]
 801bc46:	3b01      	subs	r3, #1
 801bc48:	b2da      	uxtb	r2, r3
 801bc4a:	68fb      	ldr	r3, [r7, #12]
 801bc4c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801bc4e:	68fb      	ldr	r3, [r7, #12]
 801bc50:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801bc52:	68fb      	ldr	r3, [r7, #12]
 801bc54:	681b      	ldr	r3, [r3, #0]
 801bc56:	60fb      	str	r3, [r7, #12]
 801bc58:	e008      	b.n	801bc6c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801bc5a:	68fb      	ldr	r3, [r7, #12]
 801bc5c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801bc5e:	68fb      	ldr	r3, [r7, #12]
 801bc60:	681b      	ldr	r3, [r3, #0]
 801bc62:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801bc64:	68b9      	ldr	r1, [r7, #8]
 801bc66:	6878      	ldr	r0, [r7, #4]
 801bc68:	f000 f80a 	bl	801bc80 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801bc6c:	68fb      	ldr	r3, [r7, #12]
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d1e3      	bne.n	801bc3a <ip_reass_tmr+0x12>
    }
  }
}
 801bc72:	bf00      	nop
 801bc74:	bf00      	nop
 801bc76:	3710      	adds	r7, #16
 801bc78:	46bd      	mov	sp, r7
 801bc7a:	bd80      	pop	{r7, pc}
 801bc7c:	2000edc4 	.word	0x2000edc4

0801bc80 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801bc80:	b580      	push	{r7, lr}
 801bc82:	b088      	sub	sp, #32
 801bc84:	af00      	add	r7, sp, #0
 801bc86:	6078      	str	r0, [r7, #4]
 801bc88:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801bc8a:	2300      	movs	r3, #0
 801bc8c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801bc8e:	683a      	ldr	r2, [r7, #0]
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	429a      	cmp	r2, r3
 801bc94:	d105      	bne.n	801bca2 <ip_reass_free_complete_datagram+0x22>
 801bc96:	4b45      	ldr	r3, [pc, #276]	@ (801bdac <ip_reass_free_complete_datagram+0x12c>)
 801bc98:	22ab      	movs	r2, #171	@ 0xab
 801bc9a:	4945      	ldr	r1, [pc, #276]	@ (801bdb0 <ip_reass_free_complete_datagram+0x130>)
 801bc9c:	4845      	ldr	r0, [pc, #276]	@ (801bdb4 <ip_reass_free_complete_datagram+0x134>)
 801bc9e:	f002 f875 	bl	801dd8c <iprintf>
  if (prev != NULL) {
 801bca2:	683b      	ldr	r3, [r7, #0]
 801bca4:	2b00      	cmp	r3, #0
 801bca6:	d00a      	beq.n	801bcbe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801bca8:	683b      	ldr	r3, [r7, #0]
 801bcaa:	681b      	ldr	r3, [r3, #0]
 801bcac:	687a      	ldr	r2, [r7, #4]
 801bcae:	429a      	cmp	r2, r3
 801bcb0:	d005      	beq.n	801bcbe <ip_reass_free_complete_datagram+0x3e>
 801bcb2:	4b3e      	ldr	r3, [pc, #248]	@ (801bdac <ip_reass_free_complete_datagram+0x12c>)
 801bcb4:	22ad      	movs	r2, #173	@ 0xad
 801bcb6:	4940      	ldr	r1, [pc, #256]	@ (801bdb8 <ip_reass_free_complete_datagram+0x138>)
 801bcb8:	483e      	ldr	r0, [pc, #248]	@ (801bdb4 <ip_reass_free_complete_datagram+0x134>)
 801bcba:	f002 f867 	bl	801dd8c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	685b      	ldr	r3, [r3, #4]
 801bcc2:	685b      	ldr	r3, [r3, #4]
 801bcc4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801bcc6:	697b      	ldr	r3, [r7, #20]
 801bcc8:	889b      	ldrh	r3, [r3, #4]
 801bcca:	b29b      	uxth	r3, r3
 801bccc:	2b00      	cmp	r3, #0
 801bcce:	d12a      	bne.n	801bd26 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801bcd0:	687b      	ldr	r3, [r7, #4]
 801bcd2:	685b      	ldr	r3, [r3, #4]
 801bcd4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801bcd6:	697b      	ldr	r3, [r7, #20]
 801bcd8:	681a      	ldr	r2, [r3, #0]
 801bcda:	687b      	ldr	r3, [r7, #4]
 801bcdc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801bcde:	69bb      	ldr	r3, [r7, #24]
 801bce0:	6858      	ldr	r0, [r3, #4]
 801bce2:	687b      	ldr	r3, [r7, #4]
 801bce4:	3308      	adds	r3, #8
 801bce6:	2214      	movs	r2, #20
 801bce8:	4619      	mov	r1, r3
 801bcea:	f002 f9d6 	bl	801e09a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801bcee:	2101      	movs	r1, #1
 801bcf0:	69b8      	ldr	r0, [r7, #24]
 801bcf2:	f7ff faff 	bl	801b2f4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801bcf6:	69b8      	ldr	r0, [r7, #24]
 801bcf8:	f7f5 f914 	bl	8010f24 <pbuf_clen>
 801bcfc:	4603      	mov	r3, r0
 801bcfe:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801bd00:	8bfa      	ldrh	r2, [r7, #30]
 801bd02:	8a7b      	ldrh	r3, [r7, #18]
 801bd04:	4413      	add	r3, r2
 801bd06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bd0a:	db05      	blt.n	801bd18 <ip_reass_free_complete_datagram+0x98>
 801bd0c:	4b27      	ldr	r3, [pc, #156]	@ (801bdac <ip_reass_free_complete_datagram+0x12c>)
 801bd0e:	22bc      	movs	r2, #188	@ 0xbc
 801bd10:	492a      	ldr	r1, [pc, #168]	@ (801bdbc <ip_reass_free_complete_datagram+0x13c>)
 801bd12:	4828      	ldr	r0, [pc, #160]	@ (801bdb4 <ip_reass_free_complete_datagram+0x134>)
 801bd14:	f002 f83a 	bl	801dd8c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801bd18:	8bfa      	ldrh	r2, [r7, #30]
 801bd1a:	8a7b      	ldrh	r3, [r7, #18]
 801bd1c:	4413      	add	r3, r2
 801bd1e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801bd20:	69b8      	ldr	r0, [r7, #24]
 801bd22:	f7f5 f871 	bl	8010e08 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801bd26:	687b      	ldr	r3, [r7, #4]
 801bd28:	685b      	ldr	r3, [r3, #4]
 801bd2a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801bd2c:	e01f      	b.n	801bd6e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801bd2e:	69bb      	ldr	r3, [r7, #24]
 801bd30:	685b      	ldr	r3, [r3, #4]
 801bd32:	617b      	str	r3, [r7, #20]
    pcur = p;
 801bd34:	69bb      	ldr	r3, [r7, #24]
 801bd36:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801bd38:	697b      	ldr	r3, [r7, #20]
 801bd3a:	681b      	ldr	r3, [r3, #0]
 801bd3c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801bd3e:	68f8      	ldr	r0, [r7, #12]
 801bd40:	f7f5 f8f0 	bl	8010f24 <pbuf_clen>
 801bd44:	4603      	mov	r3, r0
 801bd46:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801bd48:	8bfa      	ldrh	r2, [r7, #30]
 801bd4a:	8a7b      	ldrh	r3, [r7, #18]
 801bd4c:	4413      	add	r3, r2
 801bd4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bd52:	db05      	blt.n	801bd60 <ip_reass_free_complete_datagram+0xe0>
 801bd54:	4b15      	ldr	r3, [pc, #84]	@ (801bdac <ip_reass_free_complete_datagram+0x12c>)
 801bd56:	22cc      	movs	r2, #204	@ 0xcc
 801bd58:	4918      	ldr	r1, [pc, #96]	@ (801bdbc <ip_reass_free_complete_datagram+0x13c>)
 801bd5a:	4816      	ldr	r0, [pc, #88]	@ (801bdb4 <ip_reass_free_complete_datagram+0x134>)
 801bd5c:	f002 f816 	bl	801dd8c <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801bd60:	8bfa      	ldrh	r2, [r7, #30]
 801bd62:	8a7b      	ldrh	r3, [r7, #18]
 801bd64:	4413      	add	r3, r2
 801bd66:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801bd68:	68f8      	ldr	r0, [r7, #12]
 801bd6a:	f7f5 f84d 	bl	8010e08 <pbuf_free>
  while (p != NULL) {
 801bd6e:	69bb      	ldr	r3, [r7, #24]
 801bd70:	2b00      	cmp	r3, #0
 801bd72:	d1dc      	bne.n	801bd2e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801bd74:	6839      	ldr	r1, [r7, #0]
 801bd76:	6878      	ldr	r0, [r7, #4]
 801bd78:	f000 f8c2 	bl	801bf00 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801bd7c:	4b10      	ldr	r3, [pc, #64]	@ (801bdc0 <ip_reass_free_complete_datagram+0x140>)
 801bd7e:	881b      	ldrh	r3, [r3, #0]
 801bd80:	8bfa      	ldrh	r2, [r7, #30]
 801bd82:	429a      	cmp	r2, r3
 801bd84:	d905      	bls.n	801bd92 <ip_reass_free_complete_datagram+0x112>
 801bd86:	4b09      	ldr	r3, [pc, #36]	@ (801bdac <ip_reass_free_complete_datagram+0x12c>)
 801bd88:	22d2      	movs	r2, #210	@ 0xd2
 801bd8a:	490e      	ldr	r1, [pc, #56]	@ (801bdc4 <ip_reass_free_complete_datagram+0x144>)
 801bd8c:	4809      	ldr	r0, [pc, #36]	@ (801bdb4 <ip_reass_free_complete_datagram+0x134>)
 801bd8e:	f001 fffd 	bl	801dd8c <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801bd92:	4b0b      	ldr	r3, [pc, #44]	@ (801bdc0 <ip_reass_free_complete_datagram+0x140>)
 801bd94:	881a      	ldrh	r2, [r3, #0]
 801bd96:	8bfb      	ldrh	r3, [r7, #30]
 801bd98:	1ad3      	subs	r3, r2, r3
 801bd9a:	b29a      	uxth	r2, r3
 801bd9c:	4b08      	ldr	r3, [pc, #32]	@ (801bdc0 <ip_reass_free_complete_datagram+0x140>)
 801bd9e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801bda0:	8bfb      	ldrh	r3, [r7, #30]
}
 801bda2:	4618      	mov	r0, r3
 801bda4:	3720      	adds	r7, #32
 801bda6:	46bd      	mov	sp, r7
 801bda8:	bd80      	pop	{r7, pc}
 801bdaa:	bf00      	nop
 801bdac:	08025240 	.word	0x08025240
 801bdb0:	0802527c 	.word	0x0802527c
 801bdb4:	08025288 	.word	0x08025288
 801bdb8:	080252b0 	.word	0x080252b0
 801bdbc:	080252c4 	.word	0x080252c4
 801bdc0:	2000edc8 	.word	0x2000edc8
 801bdc4:	080252e4 	.word	0x080252e4

0801bdc8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801bdc8:	b580      	push	{r7, lr}
 801bdca:	b08a      	sub	sp, #40	@ 0x28
 801bdcc:	af00      	add	r7, sp, #0
 801bdce:	6078      	str	r0, [r7, #4]
 801bdd0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801bdd2:	2300      	movs	r3, #0
 801bdd4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801bdd6:	2300      	movs	r3, #0
 801bdd8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801bdda:	2300      	movs	r3, #0
 801bddc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801bdde:	2300      	movs	r3, #0
 801bde0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801bde2:	2300      	movs	r3, #0
 801bde4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801bde6:	4b28      	ldr	r3, [pc, #160]	@ (801be88 <ip_reass_remove_oldest_datagram+0xc0>)
 801bde8:	681b      	ldr	r3, [r3, #0]
 801bdea:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801bdec:	e030      	b.n	801be50 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801bdee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdf0:	695a      	ldr	r2, [r3, #20]
 801bdf2:	687b      	ldr	r3, [r7, #4]
 801bdf4:	68db      	ldr	r3, [r3, #12]
 801bdf6:	429a      	cmp	r2, r3
 801bdf8:	d10c      	bne.n	801be14 <ip_reass_remove_oldest_datagram+0x4c>
 801bdfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdfc:	699a      	ldr	r2, [r3, #24]
 801bdfe:	687b      	ldr	r3, [r7, #4]
 801be00:	691b      	ldr	r3, [r3, #16]
 801be02:	429a      	cmp	r2, r3
 801be04:	d106      	bne.n	801be14 <ip_reass_remove_oldest_datagram+0x4c>
 801be06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be08:	899a      	ldrh	r2, [r3, #12]
 801be0a:	687b      	ldr	r3, [r7, #4]
 801be0c:	889b      	ldrh	r3, [r3, #4]
 801be0e:	b29b      	uxth	r3, r3
 801be10:	429a      	cmp	r2, r3
 801be12:	d014      	beq.n	801be3e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801be14:	693b      	ldr	r3, [r7, #16]
 801be16:	3301      	adds	r3, #1
 801be18:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801be1a:	6a3b      	ldr	r3, [r7, #32]
 801be1c:	2b00      	cmp	r3, #0
 801be1e:	d104      	bne.n	801be2a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801be20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be22:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801be24:	69fb      	ldr	r3, [r7, #28]
 801be26:	61bb      	str	r3, [r7, #24]
 801be28:	e009      	b.n	801be3e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801be2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be2c:	7fda      	ldrb	r2, [r3, #31]
 801be2e:	6a3b      	ldr	r3, [r7, #32]
 801be30:	7fdb      	ldrb	r3, [r3, #31]
 801be32:	429a      	cmp	r2, r3
 801be34:	d803      	bhi.n	801be3e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801be36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be38:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801be3a:	69fb      	ldr	r3, [r7, #28]
 801be3c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801be3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be40:	681b      	ldr	r3, [r3, #0]
 801be42:	2b00      	cmp	r3, #0
 801be44:	d001      	beq.n	801be4a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801be46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be48:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801be4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be4c:	681b      	ldr	r3, [r3, #0]
 801be4e:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801be50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be52:	2b00      	cmp	r3, #0
 801be54:	d1cb      	bne.n	801bdee <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801be56:	6a3b      	ldr	r3, [r7, #32]
 801be58:	2b00      	cmp	r3, #0
 801be5a:	d008      	beq.n	801be6e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801be5c:	69b9      	ldr	r1, [r7, #24]
 801be5e:	6a38      	ldr	r0, [r7, #32]
 801be60:	f7ff ff0e 	bl	801bc80 <ip_reass_free_complete_datagram>
 801be64:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801be66:	697a      	ldr	r2, [r7, #20]
 801be68:	68fb      	ldr	r3, [r7, #12]
 801be6a:	4413      	add	r3, r2
 801be6c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801be6e:	697a      	ldr	r2, [r7, #20]
 801be70:	683b      	ldr	r3, [r7, #0]
 801be72:	429a      	cmp	r2, r3
 801be74:	da02      	bge.n	801be7c <ip_reass_remove_oldest_datagram+0xb4>
 801be76:	693b      	ldr	r3, [r7, #16]
 801be78:	2b01      	cmp	r3, #1
 801be7a:	dcac      	bgt.n	801bdd6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801be7c:	697b      	ldr	r3, [r7, #20]
}
 801be7e:	4618      	mov	r0, r3
 801be80:	3728      	adds	r7, #40	@ 0x28
 801be82:	46bd      	mov	sp, r7
 801be84:	bd80      	pop	{r7, pc}
 801be86:	bf00      	nop
 801be88:	2000edc4 	.word	0x2000edc4

0801be8c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801be8c:	b580      	push	{r7, lr}
 801be8e:	b084      	sub	sp, #16
 801be90:	af00      	add	r7, sp, #0
 801be92:	6078      	str	r0, [r7, #4]
 801be94:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801be96:	2004      	movs	r0, #4
 801be98:	f7f4 f85e 	bl	800ff58 <memp_malloc>
 801be9c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801be9e:	68fb      	ldr	r3, [r7, #12]
 801bea0:	2b00      	cmp	r3, #0
 801bea2:	d110      	bne.n	801bec6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801bea4:	6839      	ldr	r1, [r7, #0]
 801bea6:	6878      	ldr	r0, [r7, #4]
 801bea8:	f7ff ff8e 	bl	801bdc8 <ip_reass_remove_oldest_datagram>
 801beac:	4602      	mov	r2, r0
 801beae:	683b      	ldr	r3, [r7, #0]
 801beb0:	4293      	cmp	r3, r2
 801beb2:	dc03      	bgt.n	801bebc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801beb4:	2004      	movs	r0, #4
 801beb6:	f7f4 f84f 	bl	800ff58 <memp_malloc>
 801beba:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801bebc:	68fb      	ldr	r3, [r7, #12]
 801bebe:	2b00      	cmp	r3, #0
 801bec0:	d101      	bne.n	801bec6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801bec2:	2300      	movs	r3, #0
 801bec4:	e016      	b.n	801bef4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801bec6:	2220      	movs	r2, #32
 801bec8:	2100      	movs	r1, #0
 801beca:	68f8      	ldr	r0, [r7, #12]
 801becc:	f001 fffd 	bl	801deca <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801bed0:	68fb      	ldr	r3, [r7, #12]
 801bed2:	220f      	movs	r2, #15
 801bed4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801bed6:	4b09      	ldr	r3, [pc, #36]	@ (801befc <ip_reass_enqueue_new_datagram+0x70>)
 801bed8:	681a      	ldr	r2, [r3, #0]
 801beda:	68fb      	ldr	r3, [r7, #12]
 801bedc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801bede:	4a07      	ldr	r2, [pc, #28]	@ (801befc <ip_reass_enqueue_new_datagram+0x70>)
 801bee0:	68fb      	ldr	r3, [r7, #12]
 801bee2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801bee4:	68fb      	ldr	r3, [r7, #12]
 801bee6:	3308      	adds	r3, #8
 801bee8:	2214      	movs	r2, #20
 801beea:	6879      	ldr	r1, [r7, #4]
 801beec:	4618      	mov	r0, r3
 801beee:	f002 f8d4 	bl	801e09a <memcpy>
  return ipr;
 801bef2:	68fb      	ldr	r3, [r7, #12]
}
 801bef4:	4618      	mov	r0, r3
 801bef6:	3710      	adds	r7, #16
 801bef8:	46bd      	mov	sp, r7
 801befa:	bd80      	pop	{r7, pc}
 801befc:	2000edc4 	.word	0x2000edc4

0801bf00 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801bf00:	b580      	push	{r7, lr}
 801bf02:	b082      	sub	sp, #8
 801bf04:	af00      	add	r7, sp, #0
 801bf06:	6078      	str	r0, [r7, #4]
 801bf08:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801bf0a:	4b10      	ldr	r3, [pc, #64]	@ (801bf4c <ip_reass_dequeue_datagram+0x4c>)
 801bf0c:	681b      	ldr	r3, [r3, #0]
 801bf0e:	687a      	ldr	r2, [r7, #4]
 801bf10:	429a      	cmp	r2, r3
 801bf12:	d104      	bne.n	801bf1e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	681b      	ldr	r3, [r3, #0]
 801bf18:	4a0c      	ldr	r2, [pc, #48]	@ (801bf4c <ip_reass_dequeue_datagram+0x4c>)
 801bf1a:	6013      	str	r3, [r2, #0]
 801bf1c:	e00d      	b.n	801bf3a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801bf1e:	683b      	ldr	r3, [r7, #0]
 801bf20:	2b00      	cmp	r3, #0
 801bf22:	d106      	bne.n	801bf32 <ip_reass_dequeue_datagram+0x32>
 801bf24:	4b0a      	ldr	r3, [pc, #40]	@ (801bf50 <ip_reass_dequeue_datagram+0x50>)
 801bf26:	f240 1245 	movw	r2, #325	@ 0x145
 801bf2a:	490a      	ldr	r1, [pc, #40]	@ (801bf54 <ip_reass_dequeue_datagram+0x54>)
 801bf2c:	480a      	ldr	r0, [pc, #40]	@ (801bf58 <ip_reass_dequeue_datagram+0x58>)
 801bf2e:	f001 ff2d 	bl	801dd8c <iprintf>
    prev->next = ipr->next;
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	681a      	ldr	r2, [r3, #0]
 801bf36:	683b      	ldr	r3, [r7, #0]
 801bf38:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801bf3a:	6879      	ldr	r1, [r7, #4]
 801bf3c:	2004      	movs	r0, #4
 801bf3e:	f7f4 f881 	bl	8010044 <memp_free>
}
 801bf42:	bf00      	nop
 801bf44:	3708      	adds	r7, #8
 801bf46:	46bd      	mov	sp, r7
 801bf48:	bd80      	pop	{r7, pc}
 801bf4a:	bf00      	nop
 801bf4c:	2000edc4 	.word	0x2000edc4
 801bf50:	08025240 	.word	0x08025240
 801bf54:	08025308 	.word	0x08025308
 801bf58:	08025288 	.word	0x08025288

0801bf5c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801bf5c:	b580      	push	{r7, lr}
 801bf5e:	b08c      	sub	sp, #48	@ 0x30
 801bf60:	af00      	add	r7, sp, #0
 801bf62:	60f8      	str	r0, [r7, #12]
 801bf64:	60b9      	str	r1, [r7, #8]
 801bf66:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801bf68:	2300      	movs	r3, #0
 801bf6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801bf6c:	2301      	movs	r3, #1
 801bf6e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801bf70:	68bb      	ldr	r3, [r7, #8]
 801bf72:	685b      	ldr	r3, [r3, #4]
 801bf74:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bf76:	69fb      	ldr	r3, [r7, #28]
 801bf78:	885b      	ldrh	r3, [r3, #2]
 801bf7a:	b29b      	uxth	r3, r3
 801bf7c:	4618      	mov	r0, r3
 801bf7e:	f7f3 f825 	bl	800efcc <lwip_htons>
 801bf82:	4603      	mov	r3, r0
 801bf84:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801bf86:	69fb      	ldr	r3, [r7, #28]
 801bf88:	781b      	ldrb	r3, [r3, #0]
 801bf8a:	f003 030f 	and.w	r3, r3, #15
 801bf8e:	b2db      	uxtb	r3, r3
 801bf90:	009b      	lsls	r3, r3, #2
 801bf92:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801bf94:	7e7b      	ldrb	r3, [r7, #25]
 801bf96:	b29b      	uxth	r3, r3
 801bf98:	8b7a      	ldrh	r2, [r7, #26]
 801bf9a:	429a      	cmp	r2, r3
 801bf9c:	d202      	bcs.n	801bfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bf9e:	f04f 33ff 	mov.w	r3, #4294967295
 801bfa2:	e135      	b.n	801c210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801bfa4:	7e7b      	ldrb	r3, [r7, #25]
 801bfa6:	b29b      	uxth	r3, r3
 801bfa8:	8b7a      	ldrh	r2, [r7, #26]
 801bfaa:	1ad3      	subs	r3, r2, r3
 801bfac:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801bfae:	69fb      	ldr	r3, [r7, #28]
 801bfb0:	88db      	ldrh	r3, [r3, #6]
 801bfb2:	b29b      	uxth	r3, r3
 801bfb4:	4618      	mov	r0, r3
 801bfb6:	f7f3 f809 	bl	800efcc <lwip_htons>
 801bfba:	4603      	mov	r3, r0
 801bfbc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bfc0:	b29b      	uxth	r3, r3
 801bfc2:	00db      	lsls	r3, r3, #3
 801bfc4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801bfc6:	68bb      	ldr	r3, [r7, #8]
 801bfc8:	685b      	ldr	r3, [r3, #4]
 801bfca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801bfcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfce:	2200      	movs	r2, #0
 801bfd0:	701a      	strb	r2, [r3, #0]
 801bfd2:	2200      	movs	r2, #0
 801bfd4:	705a      	strb	r2, [r3, #1]
 801bfd6:	2200      	movs	r2, #0
 801bfd8:	709a      	strb	r2, [r3, #2]
 801bfda:	2200      	movs	r2, #0
 801bfdc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801bfde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfe0:	8afa      	ldrh	r2, [r7, #22]
 801bfe2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801bfe4:	8afa      	ldrh	r2, [r7, #22]
 801bfe6:	8b7b      	ldrh	r3, [r7, #26]
 801bfe8:	4413      	add	r3, r2
 801bfea:	b29a      	uxth	r2, r3
 801bfec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bfee:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801bff0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bff2:	88db      	ldrh	r3, [r3, #6]
 801bff4:	b29b      	uxth	r3, r3
 801bff6:	8afa      	ldrh	r2, [r7, #22]
 801bff8:	429a      	cmp	r2, r3
 801bffa:	d902      	bls.n	801c002 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bffc:	f04f 33ff 	mov.w	r3, #4294967295
 801c000:	e106      	b.n	801c210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801c002:	68fb      	ldr	r3, [r7, #12]
 801c004:	685b      	ldr	r3, [r3, #4]
 801c006:	627b      	str	r3, [r7, #36]	@ 0x24
 801c008:	e068      	b.n	801c0dc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801c00a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c00c:	685b      	ldr	r3, [r3, #4]
 801c00e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801c010:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c012:	889b      	ldrh	r3, [r3, #4]
 801c014:	b29a      	uxth	r2, r3
 801c016:	693b      	ldr	r3, [r7, #16]
 801c018:	889b      	ldrh	r3, [r3, #4]
 801c01a:	b29b      	uxth	r3, r3
 801c01c:	429a      	cmp	r2, r3
 801c01e:	d235      	bcs.n	801c08c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801c020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c024:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801c026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c028:	2b00      	cmp	r3, #0
 801c02a:	d020      	beq.n	801c06e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c02c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c02e:	889b      	ldrh	r3, [r3, #4]
 801c030:	b29a      	uxth	r2, r3
 801c032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c034:	88db      	ldrh	r3, [r3, #6]
 801c036:	b29b      	uxth	r3, r3
 801c038:	429a      	cmp	r2, r3
 801c03a:	d307      	bcc.n	801c04c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801c03c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c03e:	88db      	ldrh	r3, [r3, #6]
 801c040:	b29a      	uxth	r2, r3
 801c042:	693b      	ldr	r3, [r7, #16]
 801c044:	889b      	ldrh	r3, [r3, #4]
 801c046:	b29b      	uxth	r3, r3
 801c048:	429a      	cmp	r2, r3
 801c04a:	d902      	bls.n	801c052 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c04c:	f04f 33ff 	mov.w	r3, #4294967295
 801c050:	e0de      	b.n	801c210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801c052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c054:	68ba      	ldr	r2, [r7, #8]
 801c056:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801c058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c05a:	88db      	ldrh	r3, [r3, #6]
 801c05c:	b29a      	uxth	r2, r3
 801c05e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c060:	889b      	ldrh	r3, [r3, #4]
 801c062:	b29b      	uxth	r3, r3
 801c064:	429a      	cmp	r2, r3
 801c066:	d03d      	beq.n	801c0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c068:	2300      	movs	r3, #0
 801c06a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801c06c:	e03a      	b.n	801c0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801c06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c070:	88db      	ldrh	r3, [r3, #6]
 801c072:	b29a      	uxth	r2, r3
 801c074:	693b      	ldr	r3, [r7, #16]
 801c076:	889b      	ldrh	r3, [r3, #4]
 801c078:	b29b      	uxth	r3, r3
 801c07a:	429a      	cmp	r2, r3
 801c07c:	d902      	bls.n	801c084 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c07e:	f04f 33ff 	mov.w	r3, #4294967295
 801c082:	e0c5      	b.n	801c210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801c084:	68fb      	ldr	r3, [r7, #12]
 801c086:	68ba      	ldr	r2, [r7, #8]
 801c088:	605a      	str	r2, [r3, #4]
      break;
 801c08a:	e02b      	b.n	801c0e4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801c08c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c08e:	889b      	ldrh	r3, [r3, #4]
 801c090:	b29a      	uxth	r2, r3
 801c092:	693b      	ldr	r3, [r7, #16]
 801c094:	889b      	ldrh	r3, [r3, #4]
 801c096:	b29b      	uxth	r3, r3
 801c098:	429a      	cmp	r2, r3
 801c09a:	d102      	bne.n	801c0a2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c09c:	f04f 33ff 	mov.w	r3, #4294967295
 801c0a0:	e0b6      	b.n	801c210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801c0a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0a4:	889b      	ldrh	r3, [r3, #4]
 801c0a6:	b29a      	uxth	r2, r3
 801c0a8:	693b      	ldr	r3, [r7, #16]
 801c0aa:	88db      	ldrh	r3, [r3, #6]
 801c0ac:	b29b      	uxth	r3, r3
 801c0ae:	429a      	cmp	r2, r3
 801c0b0:	d202      	bcs.n	801c0b8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c0b2:	f04f 33ff 	mov.w	r3, #4294967295
 801c0b6:	e0ab      	b.n	801c210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801c0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0ba:	2b00      	cmp	r3, #0
 801c0bc:	d009      	beq.n	801c0d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801c0be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0c0:	88db      	ldrh	r3, [r3, #6]
 801c0c2:	b29a      	uxth	r2, r3
 801c0c4:	693b      	ldr	r3, [r7, #16]
 801c0c6:	889b      	ldrh	r3, [r3, #4]
 801c0c8:	b29b      	uxth	r3, r3
 801c0ca:	429a      	cmp	r2, r3
 801c0cc:	d001      	beq.n	801c0d2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c0ce:	2300      	movs	r3, #0
 801c0d0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801c0d2:	693b      	ldr	r3, [r7, #16]
 801c0d4:	681b      	ldr	r3, [r3, #0]
 801c0d6:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801c0d8:	693b      	ldr	r3, [r7, #16]
 801c0da:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801c0dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	d193      	bne.n	801c00a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801c0e2:	e000      	b.n	801c0e6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801c0e4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801c0e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0e8:	2b00      	cmp	r3, #0
 801c0ea:	d12d      	bne.n	801c148 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801c0ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0ee:	2b00      	cmp	r3, #0
 801c0f0:	d01c      	beq.n	801c12c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c0f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c0f4:	88db      	ldrh	r3, [r3, #6]
 801c0f6:	b29a      	uxth	r2, r3
 801c0f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c0fa:	889b      	ldrh	r3, [r3, #4]
 801c0fc:	b29b      	uxth	r3, r3
 801c0fe:	429a      	cmp	r2, r3
 801c100:	d906      	bls.n	801c110 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801c102:	4b45      	ldr	r3, [pc, #276]	@ (801c218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c104:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801c108:	4944      	ldr	r1, [pc, #272]	@ (801c21c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801c10a:	4845      	ldr	r0, [pc, #276]	@ (801c220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c10c:	f001 fe3e 	bl	801dd8c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801c110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c112:	68ba      	ldr	r2, [r7, #8]
 801c114:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801c116:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c118:	88db      	ldrh	r3, [r3, #6]
 801c11a:	b29a      	uxth	r2, r3
 801c11c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c11e:	889b      	ldrh	r3, [r3, #4]
 801c120:	b29b      	uxth	r3, r3
 801c122:	429a      	cmp	r2, r3
 801c124:	d010      	beq.n	801c148 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801c126:	2300      	movs	r3, #0
 801c128:	623b      	str	r3, [r7, #32]
 801c12a:	e00d      	b.n	801c148 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801c12c:	68fb      	ldr	r3, [r7, #12]
 801c12e:	685b      	ldr	r3, [r3, #4]
 801c130:	2b00      	cmp	r3, #0
 801c132:	d006      	beq.n	801c142 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801c134:	4b38      	ldr	r3, [pc, #224]	@ (801c218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c136:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801c13a:	493a      	ldr	r1, [pc, #232]	@ (801c224 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801c13c:	4838      	ldr	r0, [pc, #224]	@ (801c220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c13e:	f001 fe25 	bl	801dd8c <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801c142:	68fb      	ldr	r3, [r7, #12]
 801c144:	68ba      	ldr	r2, [r7, #8]
 801c146:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	2b00      	cmp	r3, #0
 801c14c:	d105      	bne.n	801c15a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801c14e:	68fb      	ldr	r3, [r7, #12]
 801c150:	7f9b      	ldrb	r3, [r3, #30]
 801c152:	f003 0301 	and.w	r3, r3, #1
 801c156:	2b00      	cmp	r3, #0
 801c158:	d059      	beq.n	801c20e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801c15a:	6a3b      	ldr	r3, [r7, #32]
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d04f      	beq.n	801c200 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801c160:	68fb      	ldr	r3, [r7, #12]
 801c162:	685b      	ldr	r3, [r3, #4]
 801c164:	2b00      	cmp	r3, #0
 801c166:	d006      	beq.n	801c176 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801c168:	68fb      	ldr	r3, [r7, #12]
 801c16a:	685b      	ldr	r3, [r3, #4]
 801c16c:	685b      	ldr	r3, [r3, #4]
 801c16e:	889b      	ldrh	r3, [r3, #4]
 801c170:	b29b      	uxth	r3, r3
 801c172:	2b00      	cmp	r3, #0
 801c174:	d002      	beq.n	801c17c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801c176:	2300      	movs	r3, #0
 801c178:	623b      	str	r3, [r7, #32]
 801c17a:	e041      	b.n	801c200 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801c17c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c17e:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801c180:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c182:	681b      	ldr	r3, [r3, #0]
 801c184:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c186:	e012      	b.n	801c1ae <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801c188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c18a:	685b      	ldr	r3, [r3, #4]
 801c18c:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801c18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c190:	88db      	ldrh	r3, [r3, #6]
 801c192:	b29a      	uxth	r2, r3
 801c194:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c196:	889b      	ldrh	r3, [r3, #4]
 801c198:	b29b      	uxth	r3, r3
 801c19a:	429a      	cmp	r2, r3
 801c19c:	d002      	beq.n	801c1a4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801c19e:	2300      	movs	r3, #0
 801c1a0:	623b      	str	r3, [r7, #32]
            break;
 801c1a2:	e007      	b.n	801c1b4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801c1a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1a6:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801c1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1aa:	681b      	ldr	r3, [r3, #0]
 801c1ac:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c1ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1b0:	2b00      	cmp	r3, #0
 801c1b2:	d1e9      	bne.n	801c188 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801c1b4:	6a3b      	ldr	r3, [r7, #32]
 801c1b6:	2b00      	cmp	r3, #0
 801c1b8:	d022      	beq.n	801c200 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801c1ba:	68fb      	ldr	r3, [r7, #12]
 801c1bc:	685b      	ldr	r3, [r3, #4]
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d106      	bne.n	801c1d0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801c1c2:	4b15      	ldr	r3, [pc, #84]	@ (801c218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c1c4:	f240 12df 	movw	r2, #479	@ 0x1df
 801c1c8:	4917      	ldr	r1, [pc, #92]	@ (801c228 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c1ca:	4815      	ldr	r0, [pc, #84]	@ (801c220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c1cc:	f001 fdde 	bl	801dd8c <iprintf>
          LWIP_ASSERT("sanity check",
 801c1d0:	68fb      	ldr	r3, [r7, #12]
 801c1d2:	685b      	ldr	r3, [r3, #4]
 801c1d4:	685b      	ldr	r3, [r3, #4]
 801c1d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c1d8:	429a      	cmp	r2, r3
 801c1da:	d106      	bne.n	801c1ea <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801c1dc:	4b0e      	ldr	r3, [pc, #56]	@ (801c218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c1de:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801c1e2:	4911      	ldr	r1, [pc, #68]	@ (801c228 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c1e4:	480e      	ldr	r0, [pc, #56]	@ (801c220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c1e6:	f001 fdd1 	bl	801dd8c <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801c1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	2b00      	cmp	r3, #0
 801c1f0:	d006      	beq.n	801c200 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801c1f2:	4b09      	ldr	r3, [pc, #36]	@ (801c218 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c1f4:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801c1f8:	490c      	ldr	r1, [pc, #48]	@ (801c22c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801c1fa:	4809      	ldr	r0, [pc, #36]	@ (801c220 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c1fc:	f001 fdc6 	bl	801dd8c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801c200:	6a3b      	ldr	r3, [r7, #32]
 801c202:	2b00      	cmp	r3, #0
 801c204:	bf14      	ite	ne
 801c206:	2301      	movne	r3, #1
 801c208:	2300      	moveq	r3, #0
 801c20a:	b2db      	uxtb	r3, r3
 801c20c:	e000      	b.n	801c210 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801c20e:	2300      	movs	r3, #0
}
 801c210:	4618      	mov	r0, r3
 801c212:	3730      	adds	r7, #48	@ 0x30
 801c214:	46bd      	mov	sp, r7
 801c216:	bd80      	pop	{r7, pc}
 801c218:	08025240 	.word	0x08025240
 801c21c:	08025324 	.word	0x08025324
 801c220:	08025288 	.word	0x08025288
 801c224:	08025344 	.word	0x08025344
 801c228:	0802537c 	.word	0x0802537c
 801c22c:	0802538c 	.word	0x0802538c

0801c230 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801c230:	b580      	push	{r7, lr}
 801c232:	b08e      	sub	sp, #56	@ 0x38
 801c234:	af00      	add	r7, sp, #0
 801c236:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801c238:	687b      	ldr	r3, [r7, #4]
 801c23a:	685b      	ldr	r3, [r3, #4]
 801c23c:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801c23e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c240:	781b      	ldrb	r3, [r3, #0]
 801c242:	f003 030f 	and.w	r3, r3, #15
 801c246:	b2db      	uxtb	r3, r3
 801c248:	009b      	lsls	r3, r3, #2
 801c24a:	b2db      	uxtb	r3, r3
 801c24c:	2b14      	cmp	r3, #20
 801c24e:	f040 8171 	bne.w	801c534 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801c252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c254:	88db      	ldrh	r3, [r3, #6]
 801c256:	b29b      	uxth	r3, r3
 801c258:	4618      	mov	r0, r3
 801c25a:	f7f2 feb7 	bl	800efcc <lwip_htons>
 801c25e:	4603      	mov	r3, r0
 801c260:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c264:	b29b      	uxth	r3, r3
 801c266:	00db      	lsls	r3, r3, #3
 801c268:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c26a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c26c:	885b      	ldrh	r3, [r3, #2]
 801c26e:	b29b      	uxth	r3, r3
 801c270:	4618      	mov	r0, r3
 801c272:	f7f2 feab 	bl	800efcc <lwip_htons>
 801c276:	4603      	mov	r3, r0
 801c278:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801c27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c27c:	781b      	ldrb	r3, [r3, #0]
 801c27e:	f003 030f 	and.w	r3, r3, #15
 801c282:	b2db      	uxtb	r3, r3
 801c284:	009b      	lsls	r3, r3, #2
 801c286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801c28a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c28e:	b29b      	uxth	r3, r3
 801c290:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c292:	429a      	cmp	r2, r3
 801c294:	f0c0 8150 	bcc.w	801c538 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801c298:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801c29c:	b29b      	uxth	r3, r3
 801c29e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801c2a0:	1ad3      	subs	r3, r2, r3
 801c2a2:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801c2a4:	6878      	ldr	r0, [r7, #4]
 801c2a6:	f7f4 fe3d 	bl	8010f24 <pbuf_clen>
 801c2aa:	4603      	mov	r3, r0
 801c2ac:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c2ae:	4b8c      	ldr	r3, [pc, #560]	@ (801c4e0 <ip4_reass+0x2b0>)
 801c2b0:	881b      	ldrh	r3, [r3, #0]
 801c2b2:	461a      	mov	r2, r3
 801c2b4:	8c3b      	ldrh	r3, [r7, #32]
 801c2b6:	4413      	add	r3, r2
 801c2b8:	2b0a      	cmp	r3, #10
 801c2ba:	dd10      	ble.n	801c2de <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c2bc:	8c3b      	ldrh	r3, [r7, #32]
 801c2be:	4619      	mov	r1, r3
 801c2c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c2c2:	f7ff fd81 	bl	801bdc8 <ip_reass_remove_oldest_datagram>
 801c2c6:	4603      	mov	r3, r0
 801c2c8:	2b00      	cmp	r3, #0
 801c2ca:	f000 8137 	beq.w	801c53c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801c2ce:	4b84      	ldr	r3, [pc, #528]	@ (801c4e0 <ip4_reass+0x2b0>)
 801c2d0:	881b      	ldrh	r3, [r3, #0]
 801c2d2:	461a      	mov	r2, r3
 801c2d4:	8c3b      	ldrh	r3, [r7, #32]
 801c2d6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c2d8:	2b0a      	cmp	r3, #10
 801c2da:	f300 812f 	bgt.w	801c53c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c2de:	4b81      	ldr	r3, [pc, #516]	@ (801c4e4 <ip4_reass+0x2b4>)
 801c2e0:	681b      	ldr	r3, [r3, #0]
 801c2e2:	633b      	str	r3, [r7, #48]	@ 0x30
 801c2e4:	e015      	b.n	801c312 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c2e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c2e8:	695a      	ldr	r2, [r3, #20]
 801c2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2ec:	68db      	ldr	r3, [r3, #12]
 801c2ee:	429a      	cmp	r2, r3
 801c2f0:	d10c      	bne.n	801c30c <ip4_reass+0xdc>
 801c2f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c2f4:	699a      	ldr	r2, [r3, #24]
 801c2f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c2f8:	691b      	ldr	r3, [r3, #16]
 801c2fa:	429a      	cmp	r2, r3
 801c2fc:	d106      	bne.n	801c30c <ip4_reass+0xdc>
 801c2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c300:	899a      	ldrh	r2, [r3, #12]
 801c302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c304:	889b      	ldrh	r3, [r3, #4]
 801c306:	b29b      	uxth	r3, r3
 801c308:	429a      	cmp	r2, r3
 801c30a:	d006      	beq.n	801c31a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c30e:	681b      	ldr	r3, [r3, #0]
 801c310:	633b      	str	r3, [r7, #48]	@ 0x30
 801c312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c314:	2b00      	cmp	r3, #0
 801c316:	d1e6      	bne.n	801c2e6 <ip4_reass+0xb6>
 801c318:	e000      	b.n	801c31c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801c31a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801c31c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c31e:	2b00      	cmp	r3, #0
 801c320:	d109      	bne.n	801c336 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801c322:	8c3b      	ldrh	r3, [r7, #32]
 801c324:	4619      	mov	r1, r3
 801c326:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c328:	f7ff fdb0 	bl	801be8c <ip_reass_enqueue_new_datagram>
 801c32c:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801c32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c330:	2b00      	cmp	r3, #0
 801c332:	d11c      	bne.n	801c36e <ip4_reass+0x13e>
      goto nullreturn;
 801c334:	e105      	b.n	801c542 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c338:	88db      	ldrh	r3, [r3, #6]
 801c33a:	b29b      	uxth	r3, r3
 801c33c:	4618      	mov	r0, r3
 801c33e:	f7f2 fe45 	bl	800efcc <lwip_htons>
 801c342:	4603      	mov	r3, r0
 801c344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c348:	2b00      	cmp	r3, #0
 801c34a:	d110      	bne.n	801c36e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c34e:	89db      	ldrh	r3, [r3, #14]
 801c350:	4618      	mov	r0, r3
 801c352:	f7f2 fe3b 	bl	800efcc <lwip_htons>
 801c356:	4603      	mov	r3, r0
 801c358:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	d006      	beq.n	801c36e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c362:	3308      	adds	r3, #8
 801c364:	2214      	movs	r2, #20
 801c366:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801c368:	4618      	mov	r0, r3
 801c36a:	f001 fe96 	bl	801e09a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c36e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c370:	88db      	ldrh	r3, [r3, #6]
 801c372:	b29b      	uxth	r3, r3
 801c374:	f003 0320 	and.w	r3, r3, #32
 801c378:	2b00      	cmp	r3, #0
 801c37a:	bf0c      	ite	eq
 801c37c:	2301      	moveq	r3, #1
 801c37e:	2300      	movne	r3, #0
 801c380:	b2db      	uxtb	r3, r3
 801c382:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801c384:	69fb      	ldr	r3, [r7, #28]
 801c386:	2b00      	cmp	r3, #0
 801c388:	d00e      	beq.n	801c3a8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801c38a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c38c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c38e:	4413      	add	r3, r2
 801c390:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c392:	8b7a      	ldrh	r2, [r7, #26]
 801c394:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801c396:	429a      	cmp	r2, r3
 801c398:	f0c0 80a0 	bcc.w	801c4dc <ip4_reass+0x2ac>
 801c39c:	8b7b      	ldrh	r3, [r7, #26]
 801c39e:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801c3a2:	4293      	cmp	r3, r2
 801c3a4:	f200 809a 	bhi.w	801c4dc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c3a8:	69fa      	ldr	r2, [r7, #28]
 801c3aa:	6879      	ldr	r1, [r7, #4]
 801c3ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c3ae:	f7ff fdd5 	bl	801bf5c <ip_reass_chain_frag_into_datagram_and_validate>
 801c3b2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c3b4:	697b      	ldr	r3, [r7, #20]
 801c3b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c3ba:	f000 809b 	beq.w	801c4f4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c3be:	4b48      	ldr	r3, [pc, #288]	@ (801c4e0 <ip4_reass+0x2b0>)
 801c3c0:	881a      	ldrh	r2, [r3, #0]
 801c3c2:	8c3b      	ldrh	r3, [r7, #32]
 801c3c4:	4413      	add	r3, r2
 801c3c6:	b29a      	uxth	r2, r3
 801c3c8:	4b45      	ldr	r3, [pc, #276]	@ (801c4e0 <ip4_reass+0x2b0>)
 801c3ca:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c3cc:	69fb      	ldr	r3, [r7, #28]
 801c3ce:	2b00      	cmp	r3, #0
 801c3d0:	d00d      	beq.n	801c3ee <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c3d2:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801c3d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801c3d6:	4413      	add	r3, r2
 801c3d8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c3da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3dc:	8a7a      	ldrh	r2, [r7, #18]
 801c3de:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c3e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3e2:	7f9b      	ldrb	r3, [r3, #30]
 801c3e4:	f043 0301 	orr.w	r3, r3, #1
 801c3e8:	b2da      	uxtb	r2, r3
 801c3ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3ec:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c3ee:	697b      	ldr	r3, [r7, #20]
 801c3f0:	2b01      	cmp	r3, #1
 801c3f2:	d171      	bne.n	801c4d8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c3f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3f6:	8b9b      	ldrh	r3, [r3, #28]
 801c3f8:	3314      	adds	r3, #20
 801c3fa:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c3fe:	685b      	ldr	r3, [r3, #4]
 801c400:	685b      	ldr	r3, [r3, #4]
 801c402:	681b      	ldr	r3, [r3, #0]
 801c404:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c408:	685b      	ldr	r3, [r3, #4]
 801c40a:	685b      	ldr	r3, [r3, #4]
 801c40c:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c410:	3308      	adds	r3, #8
 801c412:	2214      	movs	r2, #20
 801c414:	4619      	mov	r1, r3
 801c416:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801c418:	f001 fe3f 	bl	801e09a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c41c:	8a3b      	ldrh	r3, [r7, #16]
 801c41e:	4618      	mov	r0, r3
 801c420:	f7f2 fdd4 	bl	800efcc <lwip_htons>
 801c424:	4603      	mov	r3, r0
 801c426:	461a      	mov	r2, r3
 801c428:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c42a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c42e:	2200      	movs	r2, #0
 801c430:	719a      	strb	r2, [r3, #6]
 801c432:	2200      	movs	r2, #0
 801c434:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c438:	2200      	movs	r2, #0
 801c43a:	729a      	strb	r2, [r3, #10]
 801c43c:	2200      	movs	r2, #0
 801c43e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c442:	685b      	ldr	r3, [r3, #4]
 801c444:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c446:	e00d      	b.n	801c464 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c44a:	685b      	ldr	r3, [r3, #4]
 801c44c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c44e:	2114      	movs	r1, #20
 801c450:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801c452:	f7f4 fc21 	bl	8010c98 <pbuf_remove_header>
      pbuf_cat(p, r);
 801c456:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c458:	6878      	ldr	r0, [r7, #4]
 801c45a:	f7f4 fda3 	bl	8010fa4 <pbuf_cat>
      r = iprh->next_pbuf;
 801c45e:	68fb      	ldr	r3, [r7, #12]
 801c460:	681b      	ldr	r3, [r3, #0]
 801c462:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801c464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c466:	2b00      	cmp	r3, #0
 801c468:	d1ee      	bne.n	801c448 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c46a:	4b1e      	ldr	r3, [pc, #120]	@ (801c4e4 <ip4_reass+0x2b4>)
 801c46c:	681b      	ldr	r3, [r3, #0]
 801c46e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c470:	429a      	cmp	r2, r3
 801c472:	d102      	bne.n	801c47a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c474:	2300      	movs	r3, #0
 801c476:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c478:	e010      	b.n	801c49c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c47a:	4b1a      	ldr	r3, [pc, #104]	@ (801c4e4 <ip4_reass+0x2b4>)
 801c47c:	681b      	ldr	r3, [r3, #0]
 801c47e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c480:	e007      	b.n	801c492 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c482:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c484:	681b      	ldr	r3, [r3, #0]
 801c486:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c488:	429a      	cmp	r2, r3
 801c48a:	d006      	beq.n	801c49a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c48e:	681b      	ldr	r3, [r3, #0]
 801c490:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c494:	2b00      	cmp	r3, #0
 801c496:	d1f4      	bne.n	801c482 <ip4_reass+0x252>
 801c498:	e000      	b.n	801c49c <ip4_reass+0x26c>
          break;
 801c49a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c49c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c49e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c4a0:	f7ff fd2e 	bl	801bf00 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c4a4:	6878      	ldr	r0, [r7, #4]
 801c4a6:	f7f4 fd3d 	bl	8010f24 <pbuf_clen>
 801c4aa:	4603      	mov	r3, r0
 801c4ac:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c4ae:	4b0c      	ldr	r3, [pc, #48]	@ (801c4e0 <ip4_reass+0x2b0>)
 801c4b0:	881b      	ldrh	r3, [r3, #0]
 801c4b2:	8c3a      	ldrh	r2, [r7, #32]
 801c4b4:	429a      	cmp	r2, r3
 801c4b6:	d906      	bls.n	801c4c6 <ip4_reass+0x296>
 801c4b8:	4b0b      	ldr	r3, [pc, #44]	@ (801c4e8 <ip4_reass+0x2b8>)
 801c4ba:	f240 229b 	movw	r2, #667	@ 0x29b
 801c4be:	490b      	ldr	r1, [pc, #44]	@ (801c4ec <ip4_reass+0x2bc>)
 801c4c0:	480b      	ldr	r0, [pc, #44]	@ (801c4f0 <ip4_reass+0x2c0>)
 801c4c2:	f001 fc63 	bl	801dd8c <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c4c6:	4b06      	ldr	r3, [pc, #24]	@ (801c4e0 <ip4_reass+0x2b0>)
 801c4c8:	881a      	ldrh	r2, [r3, #0]
 801c4ca:	8c3b      	ldrh	r3, [r7, #32]
 801c4cc:	1ad3      	subs	r3, r2, r3
 801c4ce:	b29a      	uxth	r2, r3
 801c4d0:	4b03      	ldr	r3, [pc, #12]	@ (801c4e0 <ip4_reass+0x2b0>)
 801c4d2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	e038      	b.n	801c54a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c4d8:	2300      	movs	r3, #0
 801c4da:	e036      	b.n	801c54a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c4dc:	bf00      	nop
 801c4de:	e00a      	b.n	801c4f6 <ip4_reass+0x2c6>
 801c4e0:	2000edc8 	.word	0x2000edc8
 801c4e4:	2000edc4 	.word	0x2000edc4
 801c4e8:	08025240 	.word	0x08025240
 801c4ec:	080253b0 	.word	0x080253b0
 801c4f0:	08025288 	.word	0x08025288
    goto nullreturn_ipr;
 801c4f4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	d106      	bne.n	801c50a <ip4_reass+0x2da>
 801c4fc:	4b15      	ldr	r3, [pc, #84]	@ (801c554 <ip4_reass+0x324>)
 801c4fe:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801c502:	4915      	ldr	r1, [pc, #84]	@ (801c558 <ip4_reass+0x328>)
 801c504:	4815      	ldr	r0, [pc, #84]	@ (801c55c <ip4_reass+0x32c>)
 801c506:	f001 fc41 	bl	801dd8c <iprintf>
  if (ipr->p == NULL) {
 801c50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c50c:	685b      	ldr	r3, [r3, #4]
 801c50e:	2b00      	cmp	r3, #0
 801c510:	d116      	bne.n	801c540 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c512:	4b13      	ldr	r3, [pc, #76]	@ (801c560 <ip4_reass+0x330>)
 801c514:	681b      	ldr	r3, [r3, #0]
 801c516:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801c518:	429a      	cmp	r2, r3
 801c51a:	d006      	beq.n	801c52a <ip4_reass+0x2fa>
 801c51c:	4b0d      	ldr	r3, [pc, #52]	@ (801c554 <ip4_reass+0x324>)
 801c51e:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801c522:	4910      	ldr	r1, [pc, #64]	@ (801c564 <ip4_reass+0x334>)
 801c524:	480d      	ldr	r0, [pc, #52]	@ (801c55c <ip4_reass+0x32c>)
 801c526:	f001 fc31 	bl	801dd8c <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c52a:	2100      	movs	r1, #0
 801c52c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c52e:	f7ff fce7 	bl	801bf00 <ip_reass_dequeue_datagram>
 801c532:	e006      	b.n	801c542 <ip4_reass+0x312>
    goto nullreturn;
 801c534:	bf00      	nop
 801c536:	e004      	b.n	801c542 <ip4_reass+0x312>
    goto nullreturn;
 801c538:	bf00      	nop
 801c53a:	e002      	b.n	801c542 <ip4_reass+0x312>
      goto nullreturn;
 801c53c:	bf00      	nop
 801c53e:	e000      	b.n	801c542 <ip4_reass+0x312>
  }

nullreturn:
 801c540:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c542:	6878      	ldr	r0, [r7, #4]
 801c544:	f7f4 fc60 	bl	8010e08 <pbuf_free>
  return NULL;
 801c548:	2300      	movs	r3, #0
}
 801c54a:	4618      	mov	r0, r3
 801c54c:	3738      	adds	r7, #56	@ 0x38
 801c54e:	46bd      	mov	sp, r7
 801c550:	bd80      	pop	{r7, pc}
 801c552:	bf00      	nop
 801c554:	08025240 	.word	0x08025240
 801c558:	080253cc 	.word	0x080253cc
 801c55c:	08025288 	.word	0x08025288
 801c560:	2000edc4 	.word	0x2000edc4
 801c564:	080253d8 	.word	0x080253d8

0801c568 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c568:	b580      	push	{r7, lr}
 801c56a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c56c:	2005      	movs	r0, #5
 801c56e:	f7f3 fcf3 	bl	800ff58 <memp_malloc>
 801c572:	4603      	mov	r3, r0
}
 801c574:	4618      	mov	r0, r3
 801c576:	bd80      	pop	{r7, pc}

0801c578 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c578:	b580      	push	{r7, lr}
 801c57a:	b082      	sub	sp, #8
 801c57c:	af00      	add	r7, sp, #0
 801c57e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	2b00      	cmp	r3, #0
 801c584:	d106      	bne.n	801c594 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c586:	4b07      	ldr	r3, [pc, #28]	@ (801c5a4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c588:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801c58c:	4906      	ldr	r1, [pc, #24]	@ (801c5a8 <ip_frag_free_pbuf_custom_ref+0x30>)
 801c58e:	4807      	ldr	r0, [pc, #28]	@ (801c5ac <ip_frag_free_pbuf_custom_ref+0x34>)
 801c590:	f001 fbfc 	bl	801dd8c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c594:	6879      	ldr	r1, [r7, #4]
 801c596:	2005      	movs	r0, #5
 801c598:	f7f3 fd54 	bl	8010044 <memp_free>
}
 801c59c:	bf00      	nop
 801c59e:	3708      	adds	r7, #8
 801c5a0:	46bd      	mov	sp, r7
 801c5a2:	bd80      	pop	{r7, pc}
 801c5a4:	08025240 	.word	0x08025240
 801c5a8:	080253f8 	.word	0x080253f8
 801c5ac:	08025288 	.word	0x08025288

0801c5b0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c5b0:	b580      	push	{r7, lr}
 801c5b2:	b084      	sub	sp, #16
 801c5b4:	af00      	add	r7, sp, #0
 801c5b6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c5b8:	687b      	ldr	r3, [r7, #4]
 801c5ba:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	2b00      	cmp	r3, #0
 801c5c0:	d106      	bne.n	801c5d0 <ipfrag_free_pbuf_custom+0x20>
 801c5c2:	4b11      	ldr	r3, [pc, #68]	@ (801c608 <ipfrag_free_pbuf_custom+0x58>)
 801c5c4:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801c5c8:	4910      	ldr	r1, [pc, #64]	@ (801c60c <ipfrag_free_pbuf_custom+0x5c>)
 801c5ca:	4811      	ldr	r0, [pc, #68]	@ (801c610 <ipfrag_free_pbuf_custom+0x60>)
 801c5cc:	f001 fbde 	bl	801dd8c <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c5d0:	68fa      	ldr	r2, [r7, #12]
 801c5d2:	687b      	ldr	r3, [r7, #4]
 801c5d4:	429a      	cmp	r2, r3
 801c5d6:	d006      	beq.n	801c5e6 <ipfrag_free_pbuf_custom+0x36>
 801c5d8:	4b0b      	ldr	r3, [pc, #44]	@ (801c608 <ipfrag_free_pbuf_custom+0x58>)
 801c5da:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801c5de:	490d      	ldr	r1, [pc, #52]	@ (801c614 <ipfrag_free_pbuf_custom+0x64>)
 801c5e0:	480b      	ldr	r0, [pc, #44]	@ (801c610 <ipfrag_free_pbuf_custom+0x60>)
 801c5e2:	f001 fbd3 	bl	801dd8c <iprintf>
  if (pcr->original != NULL) {
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	695b      	ldr	r3, [r3, #20]
 801c5ea:	2b00      	cmp	r3, #0
 801c5ec:	d004      	beq.n	801c5f8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c5ee:	68fb      	ldr	r3, [r7, #12]
 801c5f0:	695b      	ldr	r3, [r3, #20]
 801c5f2:	4618      	mov	r0, r3
 801c5f4:	f7f4 fc08 	bl	8010e08 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c5f8:	68f8      	ldr	r0, [r7, #12]
 801c5fa:	f7ff ffbd 	bl	801c578 <ip_frag_free_pbuf_custom_ref>
}
 801c5fe:	bf00      	nop
 801c600:	3710      	adds	r7, #16
 801c602:	46bd      	mov	sp, r7
 801c604:	bd80      	pop	{r7, pc}
 801c606:	bf00      	nop
 801c608:	08025240 	.word	0x08025240
 801c60c:	08025404 	.word	0x08025404
 801c610:	08025288 	.word	0x08025288
 801c614:	08025410 	.word	0x08025410

0801c618 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c618:	b580      	push	{r7, lr}
 801c61a:	b094      	sub	sp, #80	@ 0x50
 801c61c:	af02      	add	r7, sp, #8
 801c61e:	60f8      	str	r0, [r7, #12]
 801c620:	60b9      	str	r1, [r7, #8]
 801c622:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c624:	2300      	movs	r3, #0
 801c626:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c62a:	68bb      	ldr	r3, [r7, #8]
 801c62c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c62e:	3b14      	subs	r3, #20
 801c630:	2b00      	cmp	r3, #0
 801c632:	da00      	bge.n	801c636 <ip4_frag+0x1e>
 801c634:	3307      	adds	r3, #7
 801c636:	10db      	asrs	r3, r3, #3
 801c638:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801c63a:	2314      	movs	r3, #20
 801c63c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c63e:	68fb      	ldr	r3, [r7, #12]
 801c640:	685b      	ldr	r3, [r3, #4]
 801c642:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801c644:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c646:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801c648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c64a:	781b      	ldrb	r3, [r3, #0]
 801c64c:	f003 030f 	and.w	r3, r3, #15
 801c650:	b2db      	uxtb	r3, r3
 801c652:	009b      	lsls	r3, r3, #2
 801c654:	b2db      	uxtb	r3, r3
 801c656:	2b14      	cmp	r3, #20
 801c658:	d002      	beq.n	801c660 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801c65a:	f06f 0305 	mvn.w	r3, #5
 801c65e:	e110      	b.n	801c882 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801c660:	68fb      	ldr	r3, [r7, #12]
 801c662:	895b      	ldrh	r3, [r3, #10]
 801c664:	2b13      	cmp	r3, #19
 801c666:	d809      	bhi.n	801c67c <ip4_frag+0x64>
 801c668:	4b88      	ldr	r3, [pc, #544]	@ (801c88c <ip4_frag+0x274>)
 801c66a:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801c66e:	4988      	ldr	r1, [pc, #544]	@ (801c890 <ip4_frag+0x278>)
 801c670:	4888      	ldr	r0, [pc, #544]	@ (801c894 <ip4_frag+0x27c>)
 801c672:	f001 fb8b 	bl	801dd8c <iprintf>
 801c676:	f06f 0305 	mvn.w	r3, #5
 801c67a:	e102      	b.n	801c882 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c67c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c67e:	88db      	ldrh	r3, [r3, #6]
 801c680:	b29b      	uxth	r3, r3
 801c682:	4618      	mov	r0, r3
 801c684:	f7f2 fca2 	bl	800efcc <lwip_htons>
 801c688:	4603      	mov	r3, r0
 801c68a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801c68c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c68e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c692:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801c696:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c698:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c69c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801c69e:	68fb      	ldr	r3, [r7, #12]
 801c6a0:	891b      	ldrh	r3, [r3, #8]
 801c6a2:	3b14      	subs	r3, #20
 801c6a4:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801c6a8:	e0e1      	b.n	801c86e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801c6aa:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c6ac:	00db      	lsls	r3, r3, #3
 801c6ae:	b29b      	uxth	r3, r3
 801c6b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c6b4:	4293      	cmp	r3, r2
 801c6b6:	bf28      	it	cs
 801c6b8:	4613      	movcs	r3, r2
 801c6ba:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c6bc:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801c6c0:	2114      	movs	r1, #20
 801c6c2:	200e      	movs	r0, #14
 801c6c4:	f7f4 f88a 	bl	80107dc <pbuf_alloc>
 801c6c8:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801c6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6cc:	2b00      	cmp	r3, #0
 801c6ce:	f000 80d5 	beq.w	801c87c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6d4:	895b      	ldrh	r3, [r3, #10]
 801c6d6:	2b13      	cmp	r3, #19
 801c6d8:	d806      	bhi.n	801c6e8 <ip4_frag+0xd0>
 801c6da:	4b6c      	ldr	r3, [pc, #432]	@ (801c88c <ip4_frag+0x274>)
 801c6dc:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801c6e0:	496d      	ldr	r1, [pc, #436]	@ (801c898 <ip4_frag+0x280>)
 801c6e2:	486c      	ldr	r0, [pc, #432]	@ (801c894 <ip4_frag+0x27c>)
 801c6e4:	f001 fb52 	bl	801dd8c <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6ea:	685b      	ldr	r3, [r3, #4]
 801c6ec:	2214      	movs	r2, #20
 801c6ee:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801c6f0:	4618      	mov	r0, r3
 801c6f2:	f001 fcd2 	bl	801e09a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c6f8:	685b      	ldr	r3, [r3, #4]
 801c6fa:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801c6fc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c6fe:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801c702:	e064      	b.n	801c7ce <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801c704:	68fb      	ldr	r3, [r7, #12]
 801c706:	895a      	ldrh	r2, [r3, #10]
 801c708:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c70a:	1ad3      	subs	r3, r2, r3
 801c70c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801c70e:	68fb      	ldr	r3, [r7, #12]
 801c710:	895b      	ldrh	r3, [r3, #10]
 801c712:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c714:	429a      	cmp	r2, r3
 801c716:	d906      	bls.n	801c726 <ip4_frag+0x10e>
 801c718:	4b5c      	ldr	r3, [pc, #368]	@ (801c88c <ip4_frag+0x274>)
 801c71a:	f240 322d 	movw	r2, #813	@ 0x32d
 801c71e:	495f      	ldr	r1, [pc, #380]	@ (801c89c <ip4_frag+0x284>)
 801c720:	485c      	ldr	r0, [pc, #368]	@ (801c894 <ip4_frag+0x27c>)
 801c722:	f001 fb33 	bl	801dd8c <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c726:	8bfa      	ldrh	r2, [r7, #30]
 801c728:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c72c:	4293      	cmp	r3, r2
 801c72e:	bf28      	it	cs
 801c730:	4613      	movcs	r3, r2
 801c732:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c736:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c73a:	2b00      	cmp	r3, #0
 801c73c:	d105      	bne.n	801c74a <ip4_frag+0x132>
        poff = 0;
 801c73e:	2300      	movs	r3, #0
 801c740:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	681b      	ldr	r3, [r3, #0]
 801c746:	60fb      	str	r3, [r7, #12]
        continue;
 801c748:	e041      	b.n	801c7ce <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801c74a:	f7ff ff0d 	bl	801c568 <ip_frag_alloc_pbuf_custom_ref>
 801c74e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801c750:	69bb      	ldr	r3, [r7, #24]
 801c752:	2b00      	cmp	r3, #0
 801c754:	d103      	bne.n	801c75e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801c756:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c758:	f7f4 fb56 	bl	8010e08 <pbuf_free>
        goto memerr;
 801c75c:	e08f      	b.n	801c87e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c75e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801c760:	68fb      	ldr	r3, [r7, #12]
 801c762:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c764:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801c766:	4413      	add	r3, r2
 801c768:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801c76c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801c770:	9201      	str	r2, [sp, #4]
 801c772:	9300      	str	r3, [sp, #0]
 801c774:	4603      	mov	r3, r0
 801c776:	2241      	movs	r2, #65	@ 0x41
 801c778:	2000      	movs	r0, #0
 801c77a:	f7f4 f959 	bl	8010a30 <pbuf_alloced_custom>
 801c77e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801c780:	697b      	ldr	r3, [r7, #20]
 801c782:	2b00      	cmp	r3, #0
 801c784:	d106      	bne.n	801c794 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c786:	69b8      	ldr	r0, [r7, #24]
 801c788:	f7ff fef6 	bl	801c578 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c78c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c78e:	f7f4 fb3b 	bl	8010e08 <pbuf_free>
        goto memerr;
 801c792:	e074      	b.n	801c87e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801c794:	68f8      	ldr	r0, [r7, #12]
 801c796:	f7f4 fbdd 	bl	8010f54 <pbuf_ref>
      pcr->original = p;
 801c79a:	69bb      	ldr	r3, [r7, #24]
 801c79c:	68fa      	ldr	r2, [r7, #12]
 801c79e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c7a0:	69bb      	ldr	r3, [r7, #24]
 801c7a2:	4a3f      	ldr	r2, [pc, #252]	@ (801c8a0 <ip4_frag+0x288>)
 801c7a4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801c7a6:	6979      	ldr	r1, [r7, #20]
 801c7a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c7aa:	f7f4 fbfb 	bl	8010fa4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801c7ae:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801c7b2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c7b6:	1ad3      	subs	r3, r2, r3
 801c7b8:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801c7bc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c7c0:	2b00      	cmp	r3, #0
 801c7c2:	d004      	beq.n	801c7ce <ip4_frag+0x1b6>
        poff = 0;
 801c7c4:	2300      	movs	r3, #0
 801c7c6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801c7c8:	68fb      	ldr	r3, [r7, #12]
 801c7ca:	681b      	ldr	r3, [r3, #0]
 801c7cc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801c7ce:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801c7d2:	2b00      	cmp	r3, #0
 801c7d4:	d196      	bne.n	801c704 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801c7d6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801c7d8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801c7dc:	4413      	add	r3, r2
 801c7de:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c7e0:	68bb      	ldr	r3, [r7, #8]
 801c7e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c7e4:	f1a3 0213 	sub.w	r2, r3, #19
 801c7e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c7ec:	429a      	cmp	r2, r3
 801c7ee:	bfcc      	ite	gt
 801c7f0:	2301      	movgt	r3, #1
 801c7f2:	2300      	movle	r3, #0
 801c7f4:	b2db      	uxtb	r3, r3
 801c7f6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c7f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801c7fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c800:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801c802:	6a3b      	ldr	r3, [r7, #32]
 801c804:	2b00      	cmp	r3, #0
 801c806:	d002      	beq.n	801c80e <ip4_frag+0x1f6>
 801c808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c80a:	2b00      	cmp	r3, #0
 801c80c:	d003      	beq.n	801c816 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801c80e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c810:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801c814:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c816:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801c818:	4618      	mov	r0, r3
 801c81a:	f7f2 fbd7 	bl	800efcc <lwip_htons>
 801c81e:	4603      	mov	r3, r0
 801c820:	461a      	mov	r2, r3
 801c822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c824:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801c826:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c828:	3314      	adds	r3, #20
 801c82a:	b29b      	uxth	r3, r3
 801c82c:	4618      	mov	r0, r3
 801c82e:	f7f2 fbcd 	bl	800efcc <lwip_htons>
 801c832:	4603      	mov	r3, r0
 801c834:	461a      	mov	r2, r3
 801c836:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c838:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801c83a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c83c:	2200      	movs	r2, #0
 801c83e:	729a      	strb	r2, [r3, #10]
 801c840:	2200      	movs	r2, #0
 801c842:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c844:	68bb      	ldr	r3, [r7, #8]
 801c846:	695b      	ldr	r3, [r3, #20]
 801c848:	687a      	ldr	r2, [r7, #4]
 801c84a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801c84c:	68b8      	ldr	r0, [r7, #8]
 801c84e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c850:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801c852:	f7f4 fad9 	bl	8010e08 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801c856:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801c85a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801c85c:	1ad3      	subs	r3, r2, r3
 801c85e:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801c862:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801c866:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801c868:	4413      	add	r3, r2
 801c86a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801c86e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801c872:	2b00      	cmp	r3, #0
 801c874:	f47f af19 	bne.w	801c6aa <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c878:	2300      	movs	r3, #0
 801c87a:	e002      	b.n	801c882 <ip4_frag+0x26a>
      goto memerr;
 801c87c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c87e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c882:	4618      	mov	r0, r3
 801c884:	3748      	adds	r7, #72	@ 0x48
 801c886:	46bd      	mov	sp, r7
 801c888:	bd80      	pop	{r7, pc}
 801c88a:	bf00      	nop
 801c88c:	08025240 	.word	0x08025240
 801c890:	0802541c 	.word	0x0802541c
 801c894:	08025288 	.word	0x08025288
 801c898:	08025438 	.word	0x08025438
 801c89c:	08025458 	.word	0x08025458
 801c8a0:	0801c5b1 	.word	0x0801c5b1

0801c8a4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c8a4:	b580      	push	{r7, lr}
 801c8a6:	b086      	sub	sp, #24
 801c8a8:	af00      	add	r7, sp, #0
 801c8aa:	6078      	str	r0, [r7, #4]
 801c8ac:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801c8ae:	230e      	movs	r3, #14
 801c8b0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	895b      	ldrh	r3, [r3, #10]
 801c8b6:	2b0e      	cmp	r3, #14
 801c8b8:	d96e      	bls.n	801c998 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	7bdb      	ldrb	r3, [r3, #15]
 801c8be:	2b00      	cmp	r3, #0
 801c8c0:	d106      	bne.n	801c8d0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801c8c2:	683b      	ldr	r3, [r7, #0]
 801c8c4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801c8c8:	3301      	adds	r3, #1
 801c8ca:	b2da      	uxtb	r2, r3
 801c8cc:	687b      	ldr	r3, [r7, #4]
 801c8ce:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c8d0:	687b      	ldr	r3, [r7, #4]
 801c8d2:	685b      	ldr	r3, [r3, #4]
 801c8d4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c8d6:	693b      	ldr	r3, [r7, #16]
 801c8d8:	7b1a      	ldrb	r2, [r3, #12]
 801c8da:	7b5b      	ldrb	r3, [r3, #13]
 801c8dc:	021b      	lsls	r3, r3, #8
 801c8de:	4313      	orrs	r3, r2
 801c8e0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c8e2:	693b      	ldr	r3, [r7, #16]
 801c8e4:	781b      	ldrb	r3, [r3, #0]
 801c8e6:	f003 0301 	and.w	r3, r3, #1
 801c8ea:	2b00      	cmp	r3, #0
 801c8ec:	d023      	beq.n	801c936 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c8ee:	693b      	ldr	r3, [r7, #16]
 801c8f0:	781b      	ldrb	r3, [r3, #0]
 801c8f2:	2b01      	cmp	r3, #1
 801c8f4:	d10f      	bne.n	801c916 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c8f6:	693b      	ldr	r3, [r7, #16]
 801c8f8:	785b      	ldrb	r3, [r3, #1]
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d11b      	bne.n	801c936 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c8fe:	693b      	ldr	r3, [r7, #16]
 801c900:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c902:	2b5e      	cmp	r3, #94	@ 0x5e
 801c904:	d117      	bne.n	801c936 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801c906:	687b      	ldr	r3, [r7, #4]
 801c908:	7b5b      	ldrb	r3, [r3, #13]
 801c90a:	f043 0310 	orr.w	r3, r3, #16
 801c90e:	b2da      	uxtb	r2, r3
 801c910:	687b      	ldr	r3, [r7, #4]
 801c912:	735a      	strb	r2, [r3, #13]
 801c914:	e00f      	b.n	801c936 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c916:	693b      	ldr	r3, [r7, #16]
 801c918:	2206      	movs	r2, #6
 801c91a:	4928      	ldr	r1, [pc, #160]	@ (801c9bc <ethernet_input+0x118>)
 801c91c:	4618      	mov	r0, r3
 801c91e:	f001 faaa 	bl	801de76 <memcmp>
 801c922:	4603      	mov	r3, r0
 801c924:	2b00      	cmp	r3, #0
 801c926:	d106      	bne.n	801c936 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c928:	687b      	ldr	r3, [r7, #4]
 801c92a:	7b5b      	ldrb	r3, [r3, #13]
 801c92c:	f043 0308 	orr.w	r3, r3, #8
 801c930:	b2da      	uxtb	r2, r3
 801c932:	687b      	ldr	r3, [r7, #4]
 801c934:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801c936:	89fb      	ldrh	r3, [r7, #14]
 801c938:	2b08      	cmp	r3, #8
 801c93a:	d003      	beq.n	801c944 <ethernet_input+0xa0>
 801c93c:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801c940:	d014      	beq.n	801c96c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801c942:	e032      	b.n	801c9aa <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c944:	683b      	ldr	r3, [r7, #0]
 801c946:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801c94a:	f003 0308 	and.w	r3, r3, #8
 801c94e:	2b00      	cmp	r3, #0
 801c950:	d024      	beq.n	801c99c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c952:	8afb      	ldrh	r3, [r7, #22]
 801c954:	4619      	mov	r1, r3
 801c956:	6878      	ldr	r0, [r7, #4]
 801c958:	f7f4 f99e 	bl	8010c98 <pbuf_remove_header>
 801c95c:	4603      	mov	r3, r0
 801c95e:	2b00      	cmp	r3, #0
 801c960:	d11e      	bne.n	801c9a0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c962:	6839      	ldr	r1, [r7, #0]
 801c964:	6878      	ldr	r0, [r7, #4]
 801c966:	f7fe fdd9 	bl	801b51c <ip4_input>
      break;
 801c96a:	e013      	b.n	801c994 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c96c:	683b      	ldr	r3, [r7, #0]
 801c96e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801c972:	f003 0308 	and.w	r3, r3, #8
 801c976:	2b00      	cmp	r3, #0
 801c978:	d014      	beq.n	801c9a4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c97a:	8afb      	ldrh	r3, [r7, #22]
 801c97c:	4619      	mov	r1, r3
 801c97e:	6878      	ldr	r0, [r7, #4]
 801c980:	f7f4 f98a 	bl	8010c98 <pbuf_remove_header>
 801c984:	4603      	mov	r3, r0
 801c986:	2b00      	cmp	r3, #0
 801c988:	d10e      	bne.n	801c9a8 <ethernet_input+0x104>
        etharp_input(p, netif);
 801c98a:	6839      	ldr	r1, [r7, #0]
 801c98c:	6878      	ldr	r0, [r7, #4]
 801c98e:	f7fd ff75 	bl	801a87c <etharp_input>
      break;
 801c992:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c994:	2300      	movs	r3, #0
 801c996:	e00c      	b.n	801c9b2 <ethernet_input+0x10e>
    goto free_and_return;
 801c998:	bf00      	nop
 801c99a:	e006      	b.n	801c9aa <ethernet_input+0x106>
        goto free_and_return;
 801c99c:	bf00      	nop
 801c99e:	e004      	b.n	801c9aa <ethernet_input+0x106>
        goto free_and_return;
 801c9a0:	bf00      	nop
 801c9a2:	e002      	b.n	801c9aa <ethernet_input+0x106>
        goto free_and_return;
 801c9a4:	bf00      	nop
 801c9a6:	e000      	b.n	801c9aa <ethernet_input+0x106>
        goto free_and_return;
 801c9a8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c9aa:	6878      	ldr	r0, [r7, #4]
 801c9ac:	f7f4 fa2c 	bl	8010e08 <pbuf_free>
  return ERR_OK;
 801c9b0:	2300      	movs	r3, #0
}
 801c9b2:	4618      	mov	r0, r3
 801c9b4:	3718      	adds	r7, #24
 801c9b6:	46bd      	mov	sp, r7
 801c9b8:	bd80      	pop	{r7, pc}
 801c9ba:	bf00      	nop
 801c9bc:	08025748 	.word	0x08025748

0801c9c0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c9c0:	b580      	push	{r7, lr}
 801c9c2:	b086      	sub	sp, #24
 801c9c4:	af00      	add	r7, sp, #0
 801c9c6:	60f8      	str	r0, [r7, #12]
 801c9c8:	60b9      	str	r1, [r7, #8]
 801c9ca:	607a      	str	r2, [r7, #4]
 801c9cc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c9ce:	8c3b      	ldrh	r3, [r7, #32]
 801c9d0:	4618      	mov	r0, r3
 801c9d2:	f7f2 fafb 	bl	800efcc <lwip_htons>
 801c9d6:	4603      	mov	r3, r0
 801c9d8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c9da:	210e      	movs	r1, #14
 801c9dc:	68b8      	ldr	r0, [r7, #8]
 801c9de:	f7f4 f94b 	bl	8010c78 <pbuf_add_header>
 801c9e2:	4603      	mov	r3, r0
 801c9e4:	2b00      	cmp	r3, #0
 801c9e6:	d125      	bne.n	801ca34 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c9e8:	68bb      	ldr	r3, [r7, #8]
 801c9ea:	685b      	ldr	r3, [r3, #4]
 801c9ec:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c9ee:	693b      	ldr	r3, [r7, #16]
 801c9f0:	8afa      	ldrh	r2, [r7, #22]
 801c9f2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c9f4:	693b      	ldr	r3, [r7, #16]
 801c9f6:	2206      	movs	r2, #6
 801c9f8:	6839      	ldr	r1, [r7, #0]
 801c9fa:	4618      	mov	r0, r3
 801c9fc:	f001 fb4d 	bl	801e09a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801ca00:	693b      	ldr	r3, [r7, #16]
 801ca02:	3306      	adds	r3, #6
 801ca04:	2206      	movs	r2, #6
 801ca06:	6879      	ldr	r1, [r7, #4]
 801ca08:	4618      	mov	r0, r3
 801ca0a:	f001 fb46 	bl	801e09a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801ca0e:	68fb      	ldr	r3, [r7, #12]
 801ca10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ca14:	2b06      	cmp	r3, #6
 801ca16:	d006      	beq.n	801ca26 <ethernet_output+0x66>
 801ca18:	4b0a      	ldr	r3, [pc, #40]	@ (801ca44 <ethernet_output+0x84>)
 801ca1a:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801ca1e:	490a      	ldr	r1, [pc, #40]	@ (801ca48 <ethernet_output+0x88>)
 801ca20:	480a      	ldr	r0, [pc, #40]	@ (801ca4c <ethernet_output+0x8c>)
 801ca22:	f001 f9b3 	bl	801dd8c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801ca26:	68fb      	ldr	r3, [r7, #12]
 801ca28:	699b      	ldr	r3, [r3, #24]
 801ca2a:	68b9      	ldr	r1, [r7, #8]
 801ca2c:	68f8      	ldr	r0, [r7, #12]
 801ca2e:	4798      	blx	r3
 801ca30:	4603      	mov	r3, r0
 801ca32:	e002      	b.n	801ca3a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801ca34:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801ca36:	f06f 0301 	mvn.w	r3, #1
}
 801ca3a:	4618      	mov	r0, r3
 801ca3c:	3718      	adds	r7, #24
 801ca3e:	46bd      	mov	sp, r7
 801ca40:	bd80      	pop	{r7, pc}
 801ca42:	bf00      	nop
 801ca44:	08025468 	.word	0x08025468
 801ca48:	080254a0 	.word	0x080254a0
 801ca4c:	080254d4 	.word	0x080254d4

0801ca50 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801ca50:	b580      	push	{r7, lr}
 801ca52:	b082      	sub	sp, #8
 801ca54:	af00      	add	r7, sp, #0
 801ca56:	6078      	str	r0, [r7, #4]
 801ca58:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801ca5a:	683b      	ldr	r3, [r7, #0]
 801ca5c:	2200      	movs	r2, #0
 801ca5e:	2104      	movs	r1, #4
 801ca60:	4618      	mov	r0, r3
 801ca62:	f7eb fbdf 	bl	8008224 <osMessageQueueNew>
 801ca66:	4602      	mov	r2, r0
 801ca68:	687b      	ldr	r3, [r7, #4]
 801ca6a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801ca6c:	687b      	ldr	r3, [r7, #4]
 801ca6e:	681b      	ldr	r3, [r3, #0]
 801ca70:	2b00      	cmp	r3, #0
 801ca72:	d102      	bne.n	801ca7a <sys_mbox_new+0x2a>
    return ERR_MEM;
 801ca74:	f04f 33ff 	mov.w	r3, #4294967295
 801ca78:	e000      	b.n	801ca7c <sys_mbox_new+0x2c>

  return ERR_OK;
 801ca7a:	2300      	movs	r3, #0
}
 801ca7c:	4618      	mov	r0, r3
 801ca7e:	3708      	adds	r7, #8
 801ca80:	46bd      	mov	sp, r7
 801ca82:	bd80      	pop	{r7, pc}

0801ca84 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801ca84:	b580      	push	{r7, lr}
 801ca86:	b082      	sub	sp, #8
 801ca88:	af00      	add	r7, sp, #0
 801ca8a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 801ca8c:	687b      	ldr	r3, [r7, #4]
 801ca8e:	681b      	ldr	r3, [r3, #0]
 801ca90:	4618      	mov	r0, r3
 801ca92:	f7eb fcf9 	bl	8008488 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 801ca96:	687b      	ldr	r3, [r7, #4]
 801ca98:	681b      	ldr	r3, [r3, #0]
 801ca9a:	4618      	mov	r0, r3
 801ca9c:	f7eb fd14 	bl	80084c8 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801caa0:	bf00      	nop
 801caa2:	3708      	adds	r7, #8
 801caa4:	46bd      	mov	sp, r7
 801caa6:	bd80      	pop	{r7, pc}

0801caa8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801caa8:	b580      	push	{r7, lr}
 801caaa:	b084      	sub	sp, #16
 801caac:	af00      	add	r7, sp, #0
 801caae:	6078      	str	r0, [r7, #4]
 801cab0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	6818      	ldr	r0, [r3, #0]
 801cab6:	4639      	mov	r1, r7
 801cab8:	2300      	movs	r3, #0
 801caba:	2200      	movs	r2, #0
 801cabc:	f7eb fc26 	bl	800830c <osMessageQueuePut>
 801cac0:	4603      	mov	r3, r0
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d102      	bne.n	801cacc <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801cac6:	2300      	movs	r3, #0
 801cac8:	73fb      	strb	r3, [r7, #15]
 801caca:	e001      	b.n	801cad0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801cacc:	23ff      	movs	r3, #255	@ 0xff
 801cace:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801cad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801cad4:	4618      	mov	r0, r3
 801cad6:	3710      	adds	r7, #16
 801cad8:	46bd      	mov	sp, r7
 801cada:	bd80      	pop	{r7, pc}

0801cadc <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801cadc:	b580      	push	{r7, lr}
 801cade:	b086      	sub	sp, #24
 801cae0:	af00      	add	r7, sp, #0
 801cae2:	60f8      	str	r0, [r7, #12]
 801cae4:	60b9      	str	r1, [r7, #8]
 801cae6:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801cae8:	f7eb f888 	bl	8007bfc <osKernelGetTickCount>
 801caec:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801caee:	687b      	ldr	r3, [r7, #4]
 801caf0:	2b00      	cmp	r3, #0
 801caf2:	d013      	beq.n	801cb1c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801caf4:	68fb      	ldr	r3, [r7, #12]
 801caf6:	6818      	ldr	r0, [r3, #0]
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	2200      	movs	r2, #0
 801cafc:	68b9      	ldr	r1, [r7, #8]
 801cafe:	f7eb fc65 	bl	80083cc <osMessageQueueGet>
 801cb02:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801cb04:	693b      	ldr	r3, [r7, #16]
 801cb06:	2b00      	cmp	r3, #0
 801cb08:	d105      	bne.n	801cb16 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801cb0a:	f7eb f877 	bl	8007bfc <osKernelGetTickCount>
 801cb0e:	4602      	mov	r2, r0
 801cb10:	697b      	ldr	r3, [r7, #20]
 801cb12:	1ad3      	subs	r3, r2, r3
 801cb14:	e00f      	b.n	801cb36 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801cb16:	f04f 33ff 	mov.w	r3, #4294967295
 801cb1a:	e00c      	b.n	801cb36 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801cb1c:	68fb      	ldr	r3, [r7, #12]
 801cb1e:	6818      	ldr	r0, [r3, #0]
 801cb20:	f04f 33ff 	mov.w	r3, #4294967295
 801cb24:	2200      	movs	r2, #0
 801cb26:	68b9      	ldr	r1, [r7, #8]
 801cb28:	f7eb fc50 	bl	80083cc <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801cb2c:	f7eb f866 	bl	8007bfc <osKernelGetTickCount>
 801cb30:	4602      	mov	r2, r0
 801cb32:	697b      	ldr	r3, [r7, #20]
 801cb34:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801cb36:	4618      	mov	r0, r3
 801cb38:	3718      	adds	r7, #24
 801cb3a:	46bd      	mov	sp, r7
 801cb3c:	bd80      	pop	{r7, pc}

0801cb3e <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801cb3e:	b580      	push	{r7, lr}
 801cb40:	b082      	sub	sp, #8
 801cb42:	af00      	add	r7, sp, #0
 801cb44:	6078      	str	r0, [r7, #4]
 801cb46:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 801cb48:	687b      	ldr	r3, [r7, #4]
 801cb4a:	6818      	ldr	r0, [r3, #0]
 801cb4c:	2300      	movs	r3, #0
 801cb4e:	2200      	movs	r2, #0
 801cb50:	6839      	ldr	r1, [r7, #0]
 801cb52:	f7eb fc3b 	bl	80083cc <osMessageQueueGet>
 801cb56:	4603      	mov	r3, r0
 801cb58:	2b00      	cmp	r3, #0
 801cb5a:	d101      	bne.n	801cb60 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 801cb5c:	2300      	movs	r3, #0
 801cb5e:	e001      	b.n	801cb64 <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801cb60:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801cb64:	4618      	mov	r0, r3
 801cb66:	3708      	adds	r7, #8
 801cb68:	46bd      	mov	sp, r7
 801cb6a:	bd80      	pop	{r7, pc}

0801cb6c <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801cb6c:	b480      	push	{r7}
 801cb6e:	b083      	sub	sp, #12
 801cb70:	af00      	add	r7, sp, #0
 801cb72:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801cb74:	687b      	ldr	r3, [r7, #4]
 801cb76:	681b      	ldr	r3, [r3, #0]
 801cb78:	2b00      	cmp	r3, #0
 801cb7a:	d101      	bne.n	801cb80 <sys_mbox_valid+0x14>
    return 0;
 801cb7c:	2300      	movs	r3, #0
 801cb7e:	e000      	b.n	801cb82 <sys_mbox_valid+0x16>
  else
    return 1;
 801cb80:	2301      	movs	r3, #1
}
 801cb82:	4618      	mov	r0, r3
 801cb84:	370c      	adds	r7, #12
 801cb86:	46bd      	mov	sp, r7
 801cb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb8c:	4770      	bx	lr

0801cb8e <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801cb8e:	b480      	push	{r7}
 801cb90:	b083      	sub	sp, #12
 801cb92:	af00      	add	r7, sp, #0
 801cb94:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	2200      	movs	r2, #0
 801cb9a:	601a      	str	r2, [r3, #0]
}
 801cb9c:	bf00      	nop
 801cb9e:	370c      	adds	r7, #12
 801cba0:	46bd      	mov	sp, r7
 801cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cba6:	4770      	bx	lr

0801cba8 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801cba8:	b580      	push	{r7, lr}
 801cbaa:	b082      	sub	sp, #8
 801cbac:	af00      	add	r7, sp, #0
 801cbae:	6078      	str	r0, [r7, #4]
 801cbb0:	460b      	mov	r3, r1
 801cbb2:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 801cbb4:	78fb      	ldrb	r3, [r7, #3]
 801cbb6:	2200      	movs	r2, #0
 801cbb8:	4619      	mov	r1, r3
 801cbba:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801cbbe:	f7eb f9ee 	bl	8007f9e <osSemaphoreNew>
 801cbc2:	4602      	mov	r2, r0
 801cbc4:	687b      	ldr	r3, [r7, #4]
 801cbc6:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 801cbc8:	687b      	ldr	r3, [r7, #4]
 801cbca:	681b      	ldr	r3, [r3, #0]
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	d102      	bne.n	801cbd6 <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801cbd0:	f04f 33ff 	mov.w	r3, #4294967295
 801cbd4:	e009      	b.n	801cbea <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 801cbd6:	78fb      	ldrb	r3, [r7, #3]
 801cbd8:	2b00      	cmp	r3, #0
 801cbda:	d105      	bne.n	801cbe8 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 801cbdc:	687b      	ldr	r3, [r7, #4]
 801cbde:	681b      	ldr	r3, [r3, #0]
 801cbe0:	2100      	movs	r1, #0
 801cbe2:	4618      	mov	r0, r3
 801cbe4:	f7eb fa64 	bl	80080b0 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801cbe8:	2300      	movs	r3, #0
}
 801cbea:	4618      	mov	r0, r3
 801cbec:	3708      	adds	r7, #8
 801cbee:	46bd      	mov	sp, r7
 801cbf0:	bd80      	pop	{r7, pc}

0801cbf2 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801cbf2:	b580      	push	{r7, lr}
 801cbf4:	b084      	sub	sp, #16
 801cbf6:	af00      	add	r7, sp, #0
 801cbf8:	6078      	str	r0, [r7, #4]
 801cbfa:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 801cbfc:	f7ea fffe 	bl	8007bfc <osKernelGetTickCount>
 801cc00:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 801cc02:	683b      	ldr	r3, [r7, #0]
 801cc04:	2b00      	cmp	r3, #0
 801cc06:	d011      	beq.n	801cc2c <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	681b      	ldr	r3, [r3, #0]
 801cc0c:	6839      	ldr	r1, [r7, #0]
 801cc0e:	4618      	mov	r0, r3
 801cc10:	f7eb fa4e 	bl	80080b0 <osSemaphoreAcquire>
 801cc14:	4603      	mov	r3, r0
 801cc16:	2b00      	cmp	r3, #0
 801cc18:	d105      	bne.n	801cc26 <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 801cc1a:	f7ea ffef 	bl	8007bfc <osKernelGetTickCount>
 801cc1e:	4602      	mov	r2, r0
 801cc20:	68fb      	ldr	r3, [r7, #12]
 801cc22:	1ad3      	subs	r3, r2, r3
 801cc24:	e012      	b.n	801cc4c <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801cc26:	f04f 33ff 	mov.w	r3, #4294967295
 801cc2a:	e00f      	b.n	801cc4c <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 801cc2c:	bf00      	nop
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	681b      	ldr	r3, [r3, #0]
 801cc32:	f04f 31ff 	mov.w	r1, #4294967295
 801cc36:	4618      	mov	r0, r3
 801cc38:	f7eb fa3a 	bl	80080b0 <osSemaphoreAcquire>
 801cc3c:	4603      	mov	r3, r0
 801cc3e:	2b00      	cmp	r3, #0
 801cc40:	d1f5      	bne.n	801cc2e <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 801cc42:	f7ea ffdb 	bl	8007bfc <osKernelGetTickCount>
 801cc46:	4602      	mov	r2, r0
 801cc48:	68fb      	ldr	r3, [r7, #12]
 801cc4a:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801cc4c:	4618      	mov	r0, r3
 801cc4e:	3710      	adds	r7, #16
 801cc50:	46bd      	mov	sp, r7
 801cc52:	bd80      	pop	{r7, pc}

0801cc54 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801cc54:	b580      	push	{r7, lr}
 801cc56:	b082      	sub	sp, #8
 801cc58:	af00      	add	r7, sp, #0
 801cc5a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	681b      	ldr	r3, [r3, #0]
 801cc60:	4618      	mov	r0, r3
 801cc62:	f7eb fa77 	bl	8008154 <osSemaphoreRelease>
}
 801cc66:	bf00      	nop
 801cc68:	3708      	adds	r7, #8
 801cc6a:	46bd      	mov	sp, r7
 801cc6c:	bd80      	pop	{r7, pc}

0801cc6e <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801cc6e:	b580      	push	{r7, lr}
 801cc70:	b082      	sub	sp, #8
 801cc72:	af00      	add	r7, sp, #0
 801cc74:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801cc76:	687b      	ldr	r3, [r7, #4]
 801cc78:	681b      	ldr	r3, [r3, #0]
 801cc7a:	4618      	mov	r0, r3
 801cc7c:	f7eb faae 	bl	80081dc <osSemaphoreDelete>
}
 801cc80:	bf00      	nop
 801cc82:	3708      	adds	r7, #8
 801cc84:	46bd      	mov	sp, r7
 801cc86:	bd80      	pop	{r7, pc}

0801cc88 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801cc88:	b480      	push	{r7}
 801cc8a:	b083      	sub	sp, #12
 801cc8c:	af00      	add	r7, sp, #0
 801cc8e:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801cc90:	687b      	ldr	r3, [r7, #4]
 801cc92:	681b      	ldr	r3, [r3, #0]
 801cc94:	2b00      	cmp	r3, #0
 801cc96:	d101      	bne.n	801cc9c <sys_sem_valid+0x14>
    return 0;
 801cc98:	2300      	movs	r3, #0
 801cc9a:	e000      	b.n	801cc9e <sys_sem_valid+0x16>
  else
    return 1;
 801cc9c:	2301      	movs	r3, #1
}
 801cc9e:	4618      	mov	r0, r3
 801cca0:	370c      	adds	r7, #12
 801cca2:	46bd      	mov	sp, r7
 801cca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cca8:	4770      	bx	lr

0801ccaa <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801ccaa:	b480      	push	{r7}
 801ccac:	b083      	sub	sp, #12
 801ccae:	af00      	add	r7, sp, #0
 801ccb0:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801ccb2:	687b      	ldr	r3, [r7, #4]
 801ccb4:	2200      	movs	r2, #0
 801ccb6:	601a      	str	r2, [r3, #0]
}
 801ccb8:	bf00      	nop
 801ccba:	370c      	adds	r7, #12
 801ccbc:	46bd      	mov	sp, r7
 801ccbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccc2:	4770      	bx	lr

0801ccc4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801ccc4:	b580      	push	{r7, lr}
 801ccc6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801ccc8:	2000      	movs	r0, #0
 801ccca:	f7eb f85a 	bl	8007d82 <osMutexNew>
 801ccce:	4603      	mov	r3, r0
 801ccd0:	4a01      	ldr	r2, [pc, #4]	@ (801ccd8 <sys_init+0x14>)
 801ccd2:	6013      	str	r3, [r2, #0]
#endif
}
 801ccd4:	bf00      	nop
 801ccd6:	bd80      	pop	{r7, pc}
 801ccd8:	2000edcc 	.word	0x2000edcc

0801ccdc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801ccdc:	b580      	push	{r7, lr}
 801ccde:	b082      	sub	sp, #8
 801cce0:	af00      	add	r7, sp, #0
 801cce2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801cce4:	2000      	movs	r0, #0
 801cce6:	f7eb f84c 	bl	8007d82 <osMutexNew>
 801ccea:	4602      	mov	r2, r0
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	2b00      	cmp	r3, #0
 801ccf6:	d102      	bne.n	801ccfe <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801ccf8:	f04f 33ff 	mov.w	r3, #4294967295
 801ccfc:	e000      	b.n	801cd00 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801ccfe:	2300      	movs	r3, #0
}
 801cd00:	4618      	mov	r0, r3
 801cd02:	3708      	adds	r7, #8
 801cd04:	46bd      	mov	sp, r7
 801cd06:	bd80      	pop	{r7, pc}

0801cd08 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801cd08:	b580      	push	{r7, lr}
 801cd0a:	b082      	sub	sp, #8
 801cd0c:	af00      	add	r7, sp, #0
 801cd0e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801cd10:	687b      	ldr	r3, [r7, #4]
 801cd12:	681b      	ldr	r3, [r3, #0]
 801cd14:	f04f 31ff 	mov.w	r1, #4294967295
 801cd18:	4618      	mov	r0, r3
 801cd1a:	f7eb f8b8 	bl	8007e8e <osMutexAcquire>
#endif
}
 801cd1e:	bf00      	nop
 801cd20:	3708      	adds	r7, #8
 801cd22:	46bd      	mov	sp, r7
 801cd24:	bd80      	pop	{r7, pc}

0801cd26 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801cd26:	b580      	push	{r7, lr}
 801cd28:	b082      	sub	sp, #8
 801cd2a:	af00      	add	r7, sp, #0
 801cd2c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801cd2e:	687b      	ldr	r3, [r7, #4]
 801cd30:	681b      	ldr	r3, [r3, #0]
 801cd32:	4618      	mov	r0, r3
 801cd34:	f7eb f8f6 	bl	8007f24 <osMutexRelease>
}
 801cd38:	bf00      	nop
 801cd3a:	3708      	adds	r7, #8
 801cd3c:	46bd      	mov	sp, r7
 801cd3e:	bd80      	pop	{r7, pc}

0801cd40 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801cd40:	b580      	push	{r7, lr}
 801cd42:	b08e      	sub	sp, #56	@ 0x38
 801cd44:	af00      	add	r7, sp, #0
 801cd46:	60f8      	str	r0, [r7, #12]
 801cd48:	60b9      	str	r1, [r7, #8]
 801cd4a:	607a      	str	r2, [r7, #4]
 801cd4c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801cd4e:	f107 0314 	add.w	r3, r7, #20
 801cd52:	2224      	movs	r2, #36	@ 0x24
 801cd54:	2100      	movs	r1, #0
 801cd56:	4618      	mov	r0, r3
 801cd58:	f001 f8b7 	bl	801deca <memset>
 801cd5c:	68fb      	ldr	r3, [r7, #12]
 801cd5e:	617b      	str	r3, [r7, #20]
 801cd60:	683b      	ldr	r3, [r7, #0]
 801cd62:	62bb      	str	r3, [r7, #40]	@ 0x28
 801cd64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801cd66:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801cd68:	f107 0314 	add.w	r3, r7, #20
 801cd6c:	461a      	mov	r2, r3
 801cd6e:	6879      	ldr	r1, [r7, #4]
 801cd70:	68b8      	ldr	r0, [r7, #8]
 801cd72:	f7ea ff58 	bl	8007c26 <osThreadNew>
 801cd76:	4603      	mov	r3, r0
#endif
}
 801cd78:	4618      	mov	r0, r3
 801cd7a:	3738      	adds	r7, #56	@ 0x38
 801cd7c:	46bd      	mov	sp, r7
 801cd7e:	bd80      	pop	{r7, pc}

0801cd80 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801cd80:	b580      	push	{r7, lr}
 801cd82:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801cd84:	4b04      	ldr	r3, [pc, #16]	@ (801cd98 <sys_arch_protect+0x18>)
 801cd86:	681b      	ldr	r3, [r3, #0]
 801cd88:	f04f 31ff 	mov.w	r1, #4294967295
 801cd8c:	4618      	mov	r0, r3
 801cd8e:	f7eb f87e 	bl	8007e8e <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801cd92:	2301      	movs	r3, #1
}
 801cd94:	4618      	mov	r0, r3
 801cd96:	bd80      	pop	{r7, pc}
 801cd98:	2000edcc 	.word	0x2000edcc

0801cd9c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801cd9c:	b580      	push	{r7, lr}
 801cd9e:	b082      	sub	sp, #8
 801cda0:	af00      	add	r7, sp, #0
 801cda2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801cda4:	4b04      	ldr	r3, [pc, #16]	@ (801cdb8 <sys_arch_unprotect+0x1c>)
 801cda6:	681b      	ldr	r3, [r3, #0]
 801cda8:	4618      	mov	r0, r3
 801cdaa:	f7eb f8bb 	bl	8007f24 <osMutexRelease>
}
 801cdae:	bf00      	nop
 801cdb0:	3708      	adds	r7, #8
 801cdb2:	46bd      	mov	sp, r7
 801cdb4:	bd80      	pop	{r7, pc}
 801cdb6:	bf00      	nop
 801cdb8:	2000edcc 	.word	0x2000edcc

0801cdbc <rand>:
 801cdbc:	4b16      	ldr	r3, [pc, #88]	@ (801ce18 <rand+0x5c>)
 801cdbe:	b510      	push	{r4, lr}
 801cdc0:	681c      	ldr	r4, [r3, #0]
 801cdc2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801cdc4:	b9b3      	cbnz	r3, 801cdf4 <rand+0x38>
 801cdc6:	2018      	movs	r0, #24
 801cdc8:	f002 f830 	bl	801ee2c <malloc>
 801cdcc:	4602      	mov	r2, r0
 801cdce:	6320      	str	r0, [r4, #48]	@ 0x30
 801cdd0:	b920      	cbnz	r0, 801cddc <rand+0x20>
 801cdd2:	4b12      	ldr	r3, [pc, #72]	@ (801ce1c <rand+0x60>)
 801cdd4:	4812      	ldr	r0, [pc, #72]	@ (801ce20 <rand+0x64>)
 801cdd6:	2152      	movs	r1, #82	@ 0x52
 801cdd8:	f001 f974 	bl	801e0c4 <__assert_func>
 801cddc:	4911      	ldr	r1, [pc, #68]	@ (801ce24 <rand+0x68>)
 801cdde:	4b12      	ldr	r3, [pc, #72]	@ (801ce28 <rand+0x6c>)
 801cde0:	e9c0 1300 	strd	r1, r3, [r0]
 801cde4:	4b11      	ldr	r3, [pc, #68]	@ (801ce2c <rand+0x70>)
 801cde6:	6083      	str	r3, [r0, #8]
 801cde8:	230b      	movs	r3, #11
 801cdea:	8183      	strh	r3, [r0, #12]
 801cdec:	2100      	movs	r1, #0
 801cdee:	2001      	movs	r0, #1
 801cdf0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801cdf4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801cdf6:	480e      	ldr	r0, [pc, #56]	@ (801ce30 <rand+0x74>)
 801cdf8:	690b      	ldr	r3, [r1, #16]
 801cdfa:	694c      	ldr	r4, [r1, #20]
 801cdfc:	4a0d      	ldr	r2, [pc, #52]	@ (801ce34 <rand+0x78>)
 801cdfe:	4358      	muls	r0, r3
 801ce00:	fb02 0004 	mla	r0, r2, r4, r0
 801ce04:	fba3 3202 	umull	r3, r2, r3, r2
 801ce08:	3301      	adds	r3, #1
 801ce0a:	eb40 0002 	adc.w	r0, r0, r2
 801ce0e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801ce12:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801ce16:	bd10      	pop	{r4, pc}
 801ce18:	20000040 	.word	0x20000040
 801ce1c:	08025756 	.word	0x08025756
 801ce20:	0802576d 	.word	0x0802576d
 801ce24:	abcd330e 	.word	0xabcd330e
 801ce28:	e66d1234 	.word	0xe66d1234
 801ce2c:	0005deec 	.word	0x0005deec
 801ce30:	5851f42d 	.word	0x5851f42d
 801ce34:	4c957f2d 	.word	0x4c957f2d

0801ce38 <_strtol_l.constprop.0>:
 801ce38:	2b24      	cmp	r3, #36	@ 0x24
 801ce3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ce3e:	4686      	mov	lr, r0
 801ce40:	4690      	mov	r8, r2
 801ce42:	d801      	bhi.n	801ce48 <_strtol_l.constprop.0+0x10>
 801ce44:	2b01      	cmp	r3, #1
 801ce46:	d106      	bne.n	801ce56 <_strtol_l.constprop.0+0x1e>
 801ce48:	f001 f8fa 	bl	801e040 <__errno>
 801ce4c:	2316      	movs	r3, #22
 801ce4e:	6003      	str	r3, [r0, #0]
 801ce50:	2000      	movs	r0, #0
 801ce52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ce56:	4834      	ldr	r0, [pc, #208]	@ (801cf28 <_strtol_l.constprop.0+0xf0>)
 801ce58:	460d      	mov	r5, r1
 801ce5a:	462a      	mov	r2, r5
 801ce5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ce60:	5d06      	ldrb	r6, [r0, r4]
 801ce62:	f016 0608 	ands.w	r6, r6, #8
 801ce66:	d1f8      	bne.n	801ce5a <_strtol_l.constprop.0+0x22>
 801ce68:	2c2d      	cmp	r4, #45	@ 0x2d
 801ce6a:	d12d      	bne.n	801cec8 <_strtol_l.constprop.0+0x90>
 801ce6c:	782c      	ldrb	r4, [r5, #0]
 801ce6e:	2601      	movs	r6, #1
 801ce70:	1c95      	adds	r5, r2, #2
 801ce72:	f033 0210 	bics.w	r2, r3, #16
 801ce76:	d109      	bne.n	801ce8c <_strtol_l.constprop.0+0x54>
 801ce78:	2c30      	cmp	r4, #48	@ 0x30
 801ce7a:	d12a      	bne.n	801ced2 <_strtol_l.constprop.0+0x9a>
 801ce7c:	782a      	ldrb	r2, [r5, #0]
 801ce7e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801ce82:	2a58      	cmp	r2, #88	@ 0x58
 801ce84:	d125      	bne.n	801ced2 <_strtol_l.constprop.0+0x9a>
 801ce86:	786c      	ldrb	r4, [r5, #1]
 801ce88:	2310      	movs	r3, #16
 801ce8a:	3502      	adds	r5, #2
 801ce8c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801ce90:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ce94:	2200      	movs	r2, #0
 801ce96:	fbbc f9f3 	udiv	r9, ip, r3
 801ce9a:	4610      	mov	r0, r2
 801ce9c:	fb03 ca19 	mls	sl, r3, r9, ip
 801cea0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801cea4:	2f09      	cmp	r7, #9
 801cea6:	d81b      	bhi.n	801cee0 <_strtol_l.constprop.0+0xa8>
 801cea8:	463c      	mov	r4, r7
 801ceaa:	42a3      	cmp	r3, r4
 801ceac:	dd27      	ble.n	801cefe <_strtol_l.constprop.0+0xc6>
 801ceae:	1c57      	adds	r7, r2, #1
 801ceb0:	d007      	beq.n	801cec2 <_strtol_l.constprop.0+0x8a>
 801ceb2:	4581      	cmp	r9, r0
 801ceb4:	d320      	bcc.n	801cef8 <_strtol_l.constprop.0+0xc0>
 801ceb6:	d101      	bne.n	801cebc <_strtol_l.constprop.0+0x84>
 801ceb8:	45a2      	cmp	sl, r4
 801ceba:	db1d      	blt.n	801cef8 <_strtol_l.constprop.0+0xc0>
 801cebc:	fb00 4003 	mla	r0, r0, r3, r4
 801cec0:	2201      	movs	r2, #1
 801cec2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801cec6:	e7eb      	b.n	801cea0 <_strtol_l.constprop.0+0x68>
 801cec8:	2c2b      	cmp	r4, #43	@ 0x2b
 801ceca:	bf04      	itt	eq
 801cecc:	782c      	ldrbeq	r4, [r5, #0]
 801cece:	1c95      	addeq	r5, r2, #2
 801ced0:	e7cf      	b.n	801ce72 <_strtol_l.constprop.0+0x3a>
 801ced2:	2b00      	cmp	r3, #0
 801ced4:	d1da      	bne.n	801ce8c <_strtol_l.constprop.0+0x54>
 801ced6:	2c30      	cmp	r4, #48	@ 0x30
 801ced8:	bf0c      	ite	eq
 801ceda:	2308      	moveq	r3, #8
 801cedc:	230a      	movne	r3, #10
 801cede:	e7d5      	b.n	801ce8c <_strtol_l.constprop.0+0x54>
 801cee0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801cee4:	2f19      	cmp	r7, #25
 801cee6:	d801      	bhi.n	801ceec <_strtol_l.constprop.0+0xb4>
 801cee8:	3c37      	subs	r4, #55	@ 0x37
 801ceea:	e7de      	b.n	801ceaa <_strtol_l.constprop.0+0x72>
 801ceec:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801cef0:	2f19      	cmp	r7, #25
 801cef2:	d804      	bhi.n	801cefe <_strtol_l.constprop.0+0xc6>
 801cef4:	3c57      	subs	r4, #87	@ 0x57
 801cef6:	e7d8      	b.n	801ceaa <_strtol_l.constprop.0+0x72>
 801cef8:	f04f 32ff 	mov.w	r2, #4294967295
 801cefc:	e7e1      	b.n	801cec2 <_strtol_l.constprop.0+0x8a>
 801cefe:	1c53      	adds	r3, r2, #1
 801cf00:	d108      	bne.n	801cf14 <_strtol_l.constprop.0+0xdc>
 801cf02:	2322      	movs	r3, #34	@ 0x22
 801cf04:	f8ce 3000 	str.w	r3, [lr]
 801cf08:	4660      	mov	r0, ip
 801cf0a:	f1b8 0f00 	cmp.w	r8, #0
 801cf0e:	d0a0      	beq.n	801ce52 <_strtol_l.constprop.0+0x1a>
 801cf10:	1e69      	subs	r1, r5, #1
 801cf12:	e006      	b.n	801cf22 <_strtol_l.constprop.0+0xea>
 801cf14:	b106      	cbz	r6, 801cf18 <_strtol_l.constprop.0+0xe0>
 801cf16:	4240      	negs	r0, r0
 801cf18:	f1b8 0f00 	cmp.w	r8, #0
 801cf1c:	d099      	beq.n	801ce52 <_strtol_l.constprop.0+0x1a>
 801cf1e:	2a00      	cmp	r2, #0
 801cf20:	d1f6      	bne.n	801cf10 <_strtol_l.constprop.0+0xd8>
 801cf22:	f8c8 1000 	str.w	r1, [r8]
 801cf26:	e794      	b.n	801ce52 <_strtol_l.constprop.0+0x1a>
 801cf28:	080257c6 	.word	0x080257c6

0801cf2c <_strtol_r>:
 801cf2c:	f7ff bf84 	b.w	801ce38 <_strtol_l.constprop.0>

0801cf30 <__cvt>:
 801cf30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801cf34:	ec57 6b10 	vmov	r6, r7, d0
 801cf38:	2f00      	cmp	r7, #0
 801cf3a:	460c      	mov	r4, r1
 801cf3c:	4619      	mov	r1, r3
 801cf3e:	463b      	mov	r3, r7
 801cf40:	bfbb      	ittet	lt
 801cf42:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801cf46:	461f      	movlt	r7, r3
 801cf48:	2300      	movge	r3, #0
 801cf4a:	232d      	movlt	r3, #45	@ 0x2d
 801cf4c:	700b      	strb	r3, [r1, #0]
 801cf4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cf50:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801cf54:	4691      	mov	r9, r2
 801cf56:	f023 0820 	bic.w	r8, r3, #32
 801cf5a:	bfbc      	itt	lt
 801cf5c:	4632      	movlt	r2, r6
 801cf5e:	4616      	movlt	r6, r2
 801cf60:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801cf64:	d005      	beq.n	801cf72 <__cvt+0x42>
 801cf66:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801cf6a:	d100      	bne.n	801cf6e <__cvt+0x3e>
 801cf6c:	3401      	adds	r4, #1
 801cf6e:	2102      	movs	r1, #2
 801cf70:	e000      	b.n	801cf74 <__cvt+0x44>
 801cf72:	2103      	movs	r1, #3
 801cf74:	ab03      	add	r3, sp, #12
 801cf76:	9301      	str	r3, [sp, #4]
 801cf78:	ab02      	add	r3, sp, #8
 801cf7a:	9300      	str	r3, [sp, #0]
 801cf7c:	ec47 6b10 	vmov	d0, r6, r7
 801cf80:	4653      	mov	r3, sl
 801cf82:	4622      	mov	r2, r4
 801cf84:	f001 f944 	bl	801e210 <_dtoa_r>
 801cf88:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801cf8c:	4605      	mov	r5, r0
 801cf8e:	d119      	bne.n	801cfc4 <__cvt+0x94>
 801cf90:	f019 0f01 	tst.w	r9, #1
 801cf94:	d00e      	beq.n	801cfb4 <__cvt+0x84>
 801cf96:	eb00 0904 	add.w	r9, r0, r4
 801cf9a:	2200      	movs	r2, #0
 801cf9c:	2300      	movs	r3, #0
 801cf9e:	4630      	mov	r0, r6
 801cfa0:	4639      	mov	r1, r7
 801cfa2:	f7e3 fd91 	bl	8000ac8 <__aeabi_dcmpeq>
 801cfa6:	b108      	cbz	r0, 801cfac <__cvt+0x7c>
 801cfa8:	f8cd 900c 	str.w	r9, [sp, #12]
 801cfac:	2230      	movs	r2, #48	@ 0x30
 801cfae:	9b03      	ldr	r3, [sp, #12]
 801cfb0:	454b      	cmp	r3, r9
 801cfb2:	d31e      	bcc.n	801cff2 <__cvt+0xc2>
 801cfb4:	9b03      	ldr	r3, [sp, #12]
 801cfb6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801cfb8:	1b5b      	subs	r3, r3, r5
 801cfba:	4628      	mov	r0, r5
 801cfbc:	6013      	str	r3, [r2, #0]
 801cfbe:	b004      	add	sp, #16
 801cfc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801cfc4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801cfc8:	eb00 0904 	add.w	r9, r0, r4
 801cfcc:	d1e5      	bne.n	801cf9a <__cvt+0x6a>
 801cfce:	7803      	ldrb	r3, [r0, #0]
 801cfd0:	2b30      	cmp	r3, #48	@ 0x30
 801cfd2:	d10a      	bne.n	801cfea <__cvt+0xba>
 801cfd4:	2200      	movs	r2, #0
 801cfd6:	2300      	movs	r3, #0
 801cfd8:	4630      	mov	r0, r6
 801cfda:	4639      	mov	r1, r7
 801cfdc:	f7e3 fd74 	bl	8000ac8 <__aeabi_dcmpeq>
 801cfe0:	b918      	cbnz	r0, 801cfea <__cvt+0xba>
 801cfe2:	f1c4 0401 	rsb	r4, r4, #1
 801cfe6:	f8ca 4000 	str.w	r4, [sl]
 801cfea:	f8da 3000 	ldr.w	r3, [sl]
 801cfee:	4499      	add	r9, r3
 801cff0:	e7d3      	b.n	801cf9a <__cvt+0x6a>
 801cff2:	1c59      	adds	r1, r3, #1
 801cff4:	9103      	str	r1, [sp, #12]
 801cff6:	701a      	strb	r2, [r3, #0]
 801cff8:	e7d9      	b.n	801cfae <__cvt+0x7e>

0801cffa <__exponent>:
 801cffa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801cffc:	2900      	cmp	r1, #0
 801cffe:	bfba      	itte	lt
 801d000:	4249      	neglt	r1, r1
 801d002:	232d      	movlt	r3, #45	@ 0x2d
 801d004:	232b      	movge	r3, #43	@ 0x2b
 801d006:	2909      	cmp	r1, #9
 801d008:	7002      	strb	r2, [r0, #0]
 801d00a:	7043      	strb	r3, [r0, #1]
 801d00c:	dd29      	ble.n	801d062 <__exponent+0x68>
 801d00e:	f10d 0307 	add.w	r3, sp, #7
 801d012:	461d      	mov	r5, r3
 801d014:	270a      	movs	r7, #10
 801d016:	461a      	mov	r2, r3
 801d018:	fbb1 f6f7 	udiv	r6, r1, r7
 801d01c:	fb07 1416 	mls	r4, r7, r6, r1
 801d020:	3430      	adds	r4, #48	@ 0x30
 801d022:	f802 4c01 	strb.w	r4, [r2, #-1]
 801d026:	460c      	mov	r4, r1
 801d028:	2c63      	cmp	r4, #99	@ 0x63
 801d02a:	f103 33ff 	add.w	r3, r3, #4294967295
 801d02e:	4631      	mov	r1, r6
 801d030:	dcf1      	bgt.n	801d016 <__exponent+0x1c>
 801d032:	3130      	adds	r1, #48	@ 0x30
 801d034:	1e94      	subs	r4, r2, #2
 801d036:	f803 1c01 	strb.w	r1, [r3, #-1]
 801d03a:	1c41      	adds	r1, r0, #1
 801d03c:	4623      	mov	r3, r4
 801d03e:	42ab      	cmp	r3, r5
 801d040:	d30a      	bcc.n	801d058 <__exponent+0x5e>
 801d042:	f10d 0309 	add.w	r3, sp, #9
 801d046:	1a9b      	subs	r3, r3, r2
 801d048:	42ac      	cmp	r4, r5
 801d04a:	bf88      	it	hi
 801d04c:	2300      	movhi	r3, #0
 801d04e:	3302      	adds	r3, #2
 801d050:	4403      	add	r3, r0
 801d052:	1a18      	subs	r0, r3, r0
 801d054:	b003      	add	sp, #12
 801d056:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d058:	f813 6b01 	ldrb.w	r6, [r3], #1
 801d05c:	f801 6f01 	strb.w	r6, [r1, #1]!
 801d060:	e7ed      	b.n	801d03e <__exponent+0x44>
 801d062:	2330      	movs	r3, #48	@ 0x30
 801d064:	3130      	adds	r1, #48	@ 0x30
 801d066:	7083      	strb	r3, [r0, #2]
 801d068:	70c1      	strb	r1, [r0, #3]
 801d06a:	1d03      	adds	r3, r0, #4
 801d06c:	e7f1      	b.n	801d052 <__exponent+0x58>
	...

0801d070 <_printf_float>:
 801d070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d074:	b08d      	sub	sp, #52	@ 0x34
 801d076:	460c      	mov	r4, r1
 801d078:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801d07c:	4616      	mov	r6, r2
 801d07e:	461f      	mov	r7, r3
 801d080:	4605      	mov	r5, r0
 801d082:	f000 ff3d 	bl	801df00 <_localeconv_r>
 801d086:	6803      	ldr	r3, [r0, #0]
 801d088:	9304      	str	r3, [sp, #16]
 801d08a:	4618      	mov	r0, r3
 801d08c:	f7e3 f8f0 	bl	8000270 <strlen>
 801d090:	2300      	movs	r3, #0
 801d092:	930a      	str	r3, [sp, #40]	@ 0x28
 801d094:	f8d8 3000 	ldr.w	r3, [r8]
 801d098:	9005      	str	r0, [sp, #20]
 801d09a:	3307      	adds	r3, #7
 801d09c:	f023 0307 	bic.w	r3, r3, #7
 801d0a0:	f103 0208 	add.w	r2, r3, #8
 801d0a4:	f894 a018 	ldrb.w	sl, [r4, #24]
 801d0a8:	f8d4 b000 	ldr.w	fp, [r4]
 801d0ac:	f8c8 2000 	str.w	r2, [r8]
 801d0b0:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d0b4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801d0b8:	9307      	str	r3, [sp, #28]
 801d0ba:	f8cd 8018 	str.w	r8, [sp, #24]
 801d0be:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801d0c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d0c6:	4b9c      	ldr	r3, [pc, #624]	@ (801d338 <_printf_float+0x2c8>)
 801d0c8:	f04f 32ff 	mov.w	r2, #4294967295
 801d0cc:	f7e3 fd2e 	bl	8000b2c <__aeabi_dcmpun>
 801d0d0:	bb70      	cbnz	r0, 801d130 <_printf_float+0xc0>
 801d0d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d0d6:	4b98      	ldr	r3, [pc, #608]	@ (801d338 <_printf_float+0x2c8>)
 801d0d8:	f04f 32ff 	mov.w	r2, #4294967295
 801d0dc:	f7e3 fd08 	bl	8000af0 <__aeabi_dcmple>
 801d0e0:	bb30      	cbnz	r0, 801d130 <_printf_float+0xc0>
 801d0e2:	2200      	movs	r2, #0
 801d0e4:	2300      	movs	r3, #0
 801d0e6:	4640      	mov	r0, r8
 801d0e8:	4649      	mov	r1, r9
 801d0ea:	f7e3 fcf7 	bl	8000adc <__aeabi_dcmplt>
 801d0ee:	b110      	cbz	r0, 801d0f6 <_printf_float+0x86>
 801d0f0:	232d      	movs	r3, #45	@ 0x2d
 801d0f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d0f6:	4a91      	ldr	r2, [pc, #580]	@ (801d33c <_printf_float+0x2cc>)
 801d0f8:	4b91      	ldr	r3, [pc, #580]	@ (801d340 <_printf_float+0x2d0>)
 801d0fa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801d0fe:	bf94      	ite	ls
 801d100:	4690      	movls	r8, r2
 801d102:	4698      	movhi	r8, r3
 801d104:	2303      	movs	r3, #3
 801d106:	6123      	str	r3, [r4, #16]
 801d108:	f02b 0304 	bic.w	r3, fp, #4
 801d10c:	6023      	str	r3, [r4, #0]
 801d10e:	f04f 0900 	mov.w	r9, #0
 801d112:	9700      	str	r7, [sp, #0]
 801d114:	4633      	mov	r3, r6
 801d116:	aa0b      	add	r2, sp, #44	@ 0x2c
 801d118:	4621      	mov	r1, r4
 801d11a:	4628      	mov	r0, r5
 801d11c:	f000 f9d2 	bl	801d4c4 <_printf_common>
 801d120:	3001      	adds	r0, #1
 801d122:	f040 808d 	bne.w	801d240 <_printf_float+0x1d0>
 801d126:	f04f 30ff 	mov.w	r0, #4294967295
 801d12a:	b00d      	add	sp, #52	@ 0x34
 801d12c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d130:	4642      	mov	r2, r8
 801d132:	464b      	mov	r3, r9
 801d134:	4640      	mov	r0, r8
 801d136:	4649      	mov	r1, r9
 801d138:	f7e3 fcf8 	bl	8000b2c <__aeabi_dcmpun>
 801d13c:	b140      	cbz	r0, 801d150 <_printf_float+0xe0>
 801d13e:	464b      	mov	r3, r9
 801d140:	2b00      	cmp	r3, #0
 801d142:	bfbc      	itt	lt
 801d144:	232d      	movlt	r3, #45	@ 0x2d
 801d146:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801d14a:	4a7e      	ldr	r2, [pc, #504]	@ (801d344 <_printf_float+0x2d4>)
 801d14c:	4b7e      	ldr	r3, [pc, #504]	@ (801d348 <_printf_float+0x2d8>)
 801d14e:	e7d4      	b.n	801d0fa <_printf_float+0x8a>
 801d150:	6863      	ldr	r3, [r4, #4]
 801d152:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801d156:	9206      	str	r2, [sp, #24]
 801d158:	1c5a      	adds	r2, r3, #1
 801d15a:	d13b      	bne.n	801d1d4 <_printf_float+0x164>
 801d15c:	2306      	movs	r3, #6
 801d15e:	6063      	str	r3, [r4, #4]
 801d160:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801d164:	2300      	movs	r3, #0
 801d166:	6022      	str	r2, [r4, #0]
 801d168:	9303      	str	r3, [sp, #12]
 801d16a:	ab0a      	add	r3, sp, #40	@ 0x28
 801d16c:	e9cd a301 	strd	sl, r3, [sp, #4]
 801d170:	ab09      	add	r3, sp, #36	@ 0x24
 801d172:	9300      	str	r3, [sp, #0]
 801d174:	6861      	ldr	r1, [r4, #4]
 801d176:	ec49 8b10 	vmov	d0, r8, r9
 801d17a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801d17e:	4628      	mov	r0, r5
 801d180:	f7ff fed6 	bl	801cf30 <__cvt>
 801d184:	9b06      	ldr	r3, [sp, #24]
 801d186:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d188:	2b47      	cmp	r3, #71	@ 0x47
 801d18a:	4680      	mov	r8, r0
 801d18c:	d129      	bne.n	801d1e2 <_printf_float+0x172>
 801d18e:	1cc8      	adds	r0, r1, #3
 801d190:	db02      	blt.n	801d198 <_printf_float+0x128>
 801d192:	6863      	ldr	r3, [r4, #4]
 801d194:	4299      	cmp	r1, r3
 801d196:	dd41      	ble.n	801d21c <_printf_float+0x1ac>
 801d198:	f1aa 0a02 	sub.w	sl, sl, #2
 801d19c:	fa5f fa8a 	uxtb.w	sl, sl
 801d1a0:	3901      	subs	r1, #1
 801d1a2:	4652      	mov	r2, sl
 801d1a4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801d1a8:	9109      	str	r1, [sp, #36]	@ 0x24
 801d1aa:	f7ff ff26 	bl	801cffa <__exponent>
 801d1ae:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d1b0:	1813      	adds	r3, r2, r0
 801d1b2:	2a01      	cmp	r2, #1
 801d1b4:	4681      	mov	r9, r0
 801d1b6:	6123      	str	r3, [r4, #16]
 801d1b8:	dc02      	bgt.n	801d1c0 <_printf_float+0x150>
 801d1ba:	6822      	ldr	r2, [r4, #0]
 801d1bc:	07d2      	lsls	r2, r2, #31
 801d1be:	d501      	bpl.n	801d1c4 <_printf_float+0x154>
 801d1c0:	3301      	adds	r3, #1
 801d1c2:	6123      	str	r3, [r4, #16]
 801d1c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801d1c8:	2b00      	cmp	r3, #0
 801d1ca:	d0a2      	beq.n	801d112 <_printf_float+0xa2>
 801d1cc:	232d      	movs	r3, #45	@ 0x2d
 801d1ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d1d2:	e79e      	b.n	801d112 <_printf_float+0xa2>
 801d1d4:	9a06      	ldr	r2, [sp, #24]
 801d1d6:	2a47      	cmp	r2, #71	@ 0x47
 801d1d8:	d1c2      	bne.n	801d160 <_printf_float+0xf0>
 801d1da:	2b00      	cmp	r3, #0
 801d1dc:	d1c0      	bne.n	801d160 <_printf_float+0xf0>
 801d1de:	2301      	movs	r3, #1
 801d1e0:	e7bd      	b.n	801d15e <_printf_float+0xee>
 801d1e2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d1e6:	d9db      	bls.n	801d1a0 <_printf_float+0x130>
 801d1e8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801d1ec:	d118      	bne.n	801d220 <_printf_float+0x1b0>
 801d1ee:	2900      	cmp	r1, #0
 801d1f0:	6863      	ldr	r3, [r4, #4]
 801d1f2:	dd0b      	ble.n	801d20c <_printf_float+0x19c>
 801d1f4:	6121      	str	r1, [r4, #16]
 801d1f6:	b913      	cbnz	r3, 801d1fe <_printf_float+0x18e>
 801d1f8:	6822      	ldr	r2, [r4, #0]
 801d1fa:	07d0      	lsls	r0, r2, #31
 801d1fc:	d502      	bpl.n	801d204 <_printf_float+0x194>
 801d1fe:	3301      	adds	r3, #1
 801d200:	440b      	add	r3, r1
 801d202:	6123      	str	r3, [r4, #16]
 801d204:	65a1      	str	r1, [r4, #88]	@ 0x58
 801d206:	f04f 0900 	mov.w	r9, #0
 801d20a:	e7db      	b.n	801d1c4 <_printf_float+0x154>
 801d20c:	b913      	cbnz	r3, 801d214 <_printf_float+0x1a4>
 801d20e:	6822      	ldr	r2, [r4, #0]
 801d210:	07d2      	lsls	r2, r2, #31
 801d212:	d501      	bpl.n	801d218 <_printf_float+0x1a8>
 801d214:	3302      	adds	r3, #2
 801d216:	e7f4      	b.n	801d202 <_printf_float+0x192>
 801d218:	2301      	movs	r3, #1
 801d21a:	e7f2      	b.n	801d202 <_printf_float+0x192>
 801d21c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801d220:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d222:	4299      	cmp	r1, r3
 801d224:	db05      	blt.n	801d232 <_printf_float+0x1c2>
 801d226:	6823      	ldr	r3, [r4, #0]
 801d228:	6121      	str	r1, [r4, #16]
 801d22a:	07d8      	lsls	r0, r3, #31
 801d22c:	d5ea      	bpl.n	801d204 <_printf_float+0x194>
 801d22e:	1c4b      	adds	r3, r1, #1
 801d230:	e7e7      	b.n	801d202 <_printf_float+0x192>
 801d232:	2900      	cmp	r1, #0
 801d234:	bfd4      	ite	le
 801d236:	f1c1 0202 	rsble	r2, r1, #2
 801d23a:	2201      	movgt	r2, #1
 801d23c:	4413      	add	r3, r2
 801d23e:	e7e0      	b.n	801d202 <_printf_float+0x192>
 801d240:	6823      	ldr	r3, [r4, #0]
 801d242:	055a      	lsls	r2, r3, #21
 801d244:	d407      	bmi.n	801d256 <_printf_float+0x1e6>
 801d246:	6923      	ldr	r3, [r4, #16]
 801d248:	4642      	mov	r2, r8
 801d24a:	4631      	mov	r1, r6
 801d24c:	4628      	mov	r0, r5
 801d24e:	47b8      	blx	r7
 801d250:	3001      	adds	r0, #1
 801d252:	d12b      	bne.n	801d2ac <_printf_float+0x23c>
 801d254:	e767      	b.n	801d126 <_printf_float+0xb6>
 801d256:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d25a:	f240 80dd 	bls.w	801d418 <_printf_float+0x3a8>
 801d25e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d262:	2200      	movs	r2, #0
 801d264:	2300      	movs	r3, #0
 801d266:	f7e3 fc2f 	bl	8000ac8 <__aeabi_dcmpeq>
 801d26a:	2800      	cmp	r0, #0
 801d26c:	d033      	beq.n	801d2d6 <_printf_float+0x266>
 801d26e:	4a37      	ldr	r2, [pc, #220]	@ (801d34c <_printf_float+0x2dc>)
 801d270:	2301      	movs	r3, #1
 801d272:	4631      	mov	r1, r6
 801d274:	4628      	mov	r0, r5
 801d276:	47b8      	blx	r7
 801d278:	3001      	adds	r0, #1
 801d27a:	f43f af54 	beq.w	801d126 <_printf_float+0xb6>
 801d27e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801d282:	4543      	cmp	r3, r8
 801d284:	db02      	blt.n	801d28c <_printf_float+0x21c>
 801d286:	6823      	ldr	r3, [r4, #0]
 801d288:	07d8      	lsls	r0, r3, #31
 801d28a:	d50f      	bpl.n	801d2ac <_printf_float+0x23c>
 801d28c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d290:	4631      	mov	r1, r6
 801d292:	4628      	mov	r0, r5
 801d294:	47b8      	blx	r7
 801d296:	3001      	adds	r0, #1
 801d298:	f43f af45 	beq.w	801d126 <_printf_float+0xb6>
 801d29c:	f04f 0900 	mov.w	r9, #0
 801d2a0:	f108 38ff 	add.w	r8, r8, #4294967295
 801d2a4:	f104 0a1a 	add.w	sl, r4, #26
 801d2a8:	45c8      	cmp	r8, r9
 801d2aa:	dc09      	bgt.n	801d2c0 <_printf_float+0x250>
 801d2ac:	6823      	ldr	r3, [r4, #0]
 801d2ae:	079b      	lsls	r3, r3, #30
 801d2b0:	f100 8103 	bmi.w	801d4ba <_printf_float+0x44a>
 801d2b4:	68e0      	ldr	r0, [r4, #12]
 801d2b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d2b8:	4298      	cmp	r0, r3
 801d2ba:	bfb8      	it	lt
 801d2bc:	4618      	movlt	r0, r3
 801d2be:	e734      	b.n	801d12a <_printf_float+0xba>
 801d2c0:	2301      	movs	r3, #1
 801d2c2:	4652      	mov	r2, sl
 801d2c4:	4631      	mov	r1, r6
 801d2c6:	4628      	mov	r0, r5
 801d2c8:	47b8      	blx	r7
 801d2ca:	3001      	adds	r0, #1
 801d2cc:	f43f af2b 	beq.w	801d126 <_printf_float+0xb6>
 801d2d0:	f109 0901 	add.w	r9, r9, #1
 801d2d4:	e7e8      	b.n	801d2a8 <_printf_float+0x238>
 801d2d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d2d8:	2b00      	cmp	r3, #0
 801d2da:	dc39      	bgt.n	801d350 <_printf_float+0x2e0>
 801d2dc:	4a1b      	ldr	r2, [pc, #108]	@ (801d34c <_printf_float+0x2dc>)
 801d2de:	2301      	movs	r3, #1
 801d2e0:	4631      	mov	r1, r6
 801d2e2:	4628      	mov	r0, r5
 801d2e4:	47b8      	blx	r7
 801d2e6:	3001      	adds	r0, #1
 801d2e8:	f43f af1d 	beq.w	801d126 <_printf_float+0xb6>
 801d2ec:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801d2f0:	ea59 0303 	orrs.w	r3, r9, r3
 801d2f4:	d102      	bne.n	801d2fc <_printf_float+0x28c>
 801d2f6:	6823      	ldr	r3, [r4, #0]
 801d2f8:	07d9      	lsls	r1, r3, #31
 801d2fa:	d5d7      	bpl.n	801d2ac <_printf_float+0x23c>
 801d2fc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d300:	4631      	mov	r1, r6
 801d302:	4628      	mov	r0, r5
 801d304:	47b8      	blx	r7
 801d306:	3001      	adds	r0, #1
 801d308:	f43f af0d 	beq.w	801d126 <_printf_float+0xb6>
 801d30c:	f04f 0a00 	mov.w	sl, #0
 801d310:	f104 0b1a 	add.w	fp, r4, #26
 801d314:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d316:	425b      	negs	r3, r3
 801d318:	4553      	cmp	r3, sl
 801d31a:	dc01      	bgt.n	801d320 <_printf_float+0x2b0>
 801d31c:	464b      	mov	r3, r9
 801d31e:	e793      	b.n	801d248 <_printf_float+0x1d8>
 801d320:	2301      	movs	r3, #1
 801d322:	465a      	mov	r2, fp
 801d324:	4631      	mov	r1, r6
 801d326:	4628      	mov	r0, r5
 801d328:	47b8      	blx	r7
 801d32a:	3001      	adds	r0, #1
 801d32c:	f43f aefb 	beq.w	801d126 <_printf_float+0xb6>
 801d330:	f10a 0a01 	add.w	sl, sl, #1
 801d334:	e7ee      	b.n	801d314 <_printf_float+0x2a4>
 801d336:	bf00      	nop
 801d338:	7fefffff 	.word	0x7fefffff
 801d33c:	080258c6 	.word	0x080258c6
 801d340:	080258ca 	.word	0x080258ca
 801d344:	080258ce 	.word	0x080258ce
 801d348:	080258d2 	.word	0x080258d2
 801d34c:	080258d6 	.word	0x080258d6
 801d350:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d352:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d356:	4553      	cmp	r3, sl
 801d358:	bfa8      	it	ge
 801d35a:	4653      	movge	r3, sl
 801d35c:	2b00      	cmp	r3, #0
 801d35e:	4699      	mov	r9, r3
 801d360:	dc36      	bgt.n	801d3d0 <_printf_float+0x360>
 801d362:	f04f 0b00 	mov.w	fp, #0
 801d366:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d36a:	f104 021a 	add.w	r2, r4, #26
 801d36e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801d370:	9306      	str	r3, [sp, #24]
 801d372:	eba3 0309 	sub.w	r3, r3, r9
 801d376:	455b      	cmp	r3, fp
 801d378:	dc31      	bgt.n	801d3de <_printf_float+0x36e>
 801d37a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d37c:	459a      	cmp	sl, r3
 801d37e:	dc3a      	bgt.n	801d3f6 <_printf_float+0x386>
 801d380:	6823      	ldr	r3, [r4, #0]
 801d382:	07da      	lsls	r2, r3, #31
 801d384:	d437      	bmi.n	801d3f6 <_printf_float+0x386>
 801d386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d388:	ebaa 0903 	sub.w	r9, sl, r3
 801d38c:	9b06      	ldr	r3, [sp, #24]
 801d38e:	ebaa 0303 	sub.w	r3, sl, r3
 801d392:	4599      	cmp	r9, r3
 801d394:	bfa8      	it	ge
 801d396:	4699      	movge	r9, r3
 801d398:	f1b9 0f00 	cmp.w	r9, #0
 801d39c:	dc33      	bgt.n	801d406 <_printf_float+0x396>
 801d39e:	f04f 0800 	mov.w	r8, #0
 801d3a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801d3a6:	f104 0b1a 	add.w	fp, r4, #26
 801d3aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d3ac:	ebaa 0303 	sub.w	r3, sl, r3
 801d3b0:	eba3 0309 	sub.w	r3, r3, r9
 801d3b4:	4543      	cmp	r3, r8
 801d3b6:	f77f af79 	ble.w	801d2ac <_printf_float+0x23c>
 801d3ba:	2301      	movs	r3, #1
 801d3bc:	465a      	mov	r2, fp
 801d3be:	4631      	mov	r1, r6
 801d3c0:	4628      	mov	r0, r5
 801d3c2:	47b8      	blx	r7
 801d3c4:	3001      	adds	r0, #1
 801d3c6:	f43f aeae 	beq.w	801d126 <_printf_float+0xb6>
 801d3ca:	f108 0801 	add.w	r8, r8, #1
 801d3ce:	e7ec      	b.n	801d3aa <_printf_float+0x33a>
 801d3d0:	4642      	mov	r2, r8
 801d3d2:	4631      	mov	r1, r6
 801d3d4:	4628      	mov	r0, r5
 801d3d6:	47b8      	blx	r7
 801d3d8:	3001      	adds	r0, #1
 801d3da:	d1c2      	bne.n	801d362 <_printf_float+0x2f2>
 801d3dc:	e6a3      	b.n	801d126 <_printf_float+0xb6>
 801d3de:	2301      	movs	r3, #1
 801d3e0:	4631      	mov	r1, r6
 801d3e2:	4628      	mov	r0, r5
 801d3e4:	9206      	str	r2, [sp, #24]
 801d3e6:	47b8      	blx	r7
 801d3e8:	3001      	adds	r0, #1
 801d3ea:	f43f ae9c 	beq.w	801d126 <_printf_float+0xb6>
 801d3ee:	9a06      	ldr	r2, [sp, #24]
 801d3f0:	f10b 0b01 	add.w	fp, fp, #1
 801d3f4:	e7bb      	b.n	801d36e <_printf_float+0x2fe>
 801d3f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d3fa:	4631      	mov	r1, r6
 801d3fc:	4628      	mov	r0, r5
 801d3fe:	47b8      	blx	r7
 801d400:	3001      	adds	r0, #1
 801d402:	d1c0      	bne.n	801d386 <_printf_float+0x316>
 801d404:	e68f      	b.n	801d126 <_printf_float+0xb6>
 801d406:	9a06      	ldr	r2, [sp, #24]
 801d408:	464b      	mov	r3, r9
 801d40a:	4442      	add	r2, r8
 801d40c:	4631      	mov	r1, r6
 801d40e:	4628      	mov	r0, r5
 801d410:	47b8      	blx	r7
 801d412:	3001      	adds	r0, #1
 801d414:	d1c3      	bne.n	801d39e <_printf_float+0x32e>
 801d416:	e686      	b.n	801d126 <_printf_float+0xb6>
 801d418:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801d41c:	f1ba 0f01 	cmp.w	sl, #1
 801d420:	dc01      	bgt.n	801d426 <_printf_float+0x3b6>
 801d422:	07db      	lsls	r3, r3, #31
 801d424:	d536      	bpl.n	801d494 <_printf_float+0x424>
 801d426:	2301      	movs	r3, #1
 801d428:	4642      	mov	r2, r8
 801d42a:	4631      	mov	r1, r6
 801d42c:	4628      	mov	r0, r5
 801d42e:	47b8      	blx	r7
 801d430:	3001      	adds	r0, #1
 801d432:	f43f ae78 	beq.w	801d126 <_printf_float+0xb6>
 801d436:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801d43a:	4631      	mov	r1, r6
 801d43c:	4628      	mov	r0, r5
 801d43e:	47b8      	blx	r7
 801d440:	3001      	adds	r0, #1
 801d442:	f43f ae70 	beq.w	801d126 <_printf_float+0xb6>
 801d446:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801d44a:	2200      	movs	r2, #0
 801d44c:	2300      	movs	r3, #0
 801d44e:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d452:	f7e3 fb39 	bl	8000ac8 <__aeabi_dcmpeq>
 801d456:	b9c0      	cbnz	r0, 801d48a <_printf_float+0x41a>
 801d458:	4653      	mov	r3, sl
 801d45a:	f108 0201 	add.w	r2, r8, #1
 801d45e:	4631      	mov	r1, r6
 801d460:	4628      	mov	r0, r5
 801d462:	47b8      	blx	r7
 801d464:	3001      	adds	r0, #1
 801d466:	d10c      	bne.n	801d482 <_printf_float+0x412>
 801d468:	e65d      	b.n	801d126 <_printf_float+0xb6>
 801d46a:	2301      	movs	r3, #1
 801d46c:	465a      	mov	r2, fp
 801d46e:	4631      	mov	r1, r6
 801d470:	4628      	mov	r0, r5
 801d472:	47b8      	blx	r7
 801d474:	3001      	adds	r0, #1
 801d476:	f43f ae56 	beq.w	801d126 <_printf_float+0xb6>
 801d47a:	f108 0801 	add.w	r8, r8, #1
 801d47e:	45d0      	cmp	r8, sl
 801d480:	dbf3      	blt.n	801d46a <_printf_float+0x3fa>
 801d482:	464b      	mov	r3, r9
 801d484:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801d488:	e6df      	b.n	801d24a <_printf_float+0x1da>
 801d48a:	f04f 0800 	mov.w	r8, #0
 801d48e:	f104 0b1a 	add.w	fp, r4, #26
 801d492:	e7f4      	b.n	801d47e <_printf_float+0x40e>
 801d494:	2301      	movs	r3, #1
 801d496:	4642      	mov	r2, r8
 801d498:	e7e1      	b.n	801d45e <_printf_float+0x3ee>
 801d49a:	2301      	movs	r3, #1
 801d49c:	464a      	mov	r2, r9
 801d49e:	4631      	mov	r1, r6
 801d4a0:	4628      	mov	r0, r5
 801d4a2:	47b8      	blx	r7
 801d4a4:	3001      	adds	r0, #1
 801d4a6:	f43f ae3e 	beq.w	801d126 <_printf_float+0xb6>
 801d4aa:	f108 0801 	add.w	r8, r8, #1
 801d4ae:	68e3      	ldr	r3, [r4, #12]
 801d4b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d4b2:	1a5b      	subs	r3, r3, r1
 801d4b4:	4543      	cmp	r3, r8
 801d4b6:	dcf0      	bgt.n	801d49a <_printf_float+0x42a>
 801d4b8:	e6fc      	b.n	801d2b4 <_printf_float+0x244>
 801d4ba:	f04f 0800 	mov.w	r8, #0
 801d4be:	f104 0919 	add.w	r9, r4, #25
 801d4c2:	e7f4      	b.n	801d4ae <_printf_float+0x43e>

0801d4c4 <_printf_common>:
 801d4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d4c8:	4616      	mov	r6, r2
 801d4ca:	4698      	mov	r8, r3
 801d4cc:	688a      	ldr	r2, [r1, #8]
 801d4ce:	690b      	ldr	r3, [r1, #16]
 801d4d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d4d4:	4293      	cmp	r3, r2
 801d4d6:	bfb8      	it	lt
 801d4d8:	4613      	movlt	r3, r2
 801d4da:	6033      	str	r3, [r6, #0]
 801d4dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d4e0:	4607      	mov	r7, r0
 801d4e2:	460c      	mov	r4, r1
 801d4e4:	b10a      	cbz	r2, 801d4ea <_printf_common+0x26>
 801d4e6:	3301      	adds	r3, #1
 801d4e8:	6033      	str	r3, [r6, #0]
 801d4ea:	6823      	ldr	r3, [r4, #0]
 801d4ec:	0699      	lsls	r1, r3, #26
 801d4ee:	bf42      	ittt	mi
 801d4f0:	6833      	ldrmi	r3, [r6, #0]
 801d4f2:	3302      	addmi	r3, #2
 801d4f4:	6033      	strmi	r3, [r6, #0]
 801d4f6:	6825      	ldr	r5, [r4, #0]
 801d4f8:	f015 0506 	ands.w	r5, r5, #6
 801d4fc:	d106      	bne.n	801d50c <_printf_common+0x48>
 801d4fe:	f104 0a19 	add.w	sl, r4, #25
 801d502:	68e3      	ldr	r3, [r4, #12]
 801d504:	6832      	ldr	r2, [r6, #0]
 801d506:	1a9b      	subs	r3, r3, r2
 801d508:	42ab      	cmp	r3, r5
 801d50a:	dc26      	bgt.n	801d55a <_printf_common+0x96>
 801d50c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d510:	6822      	ldr	r2, [r4, #0]
 801d512:	3b00      	subs	r3, #0
 801d514:	bf18      	it	ne
 801d516:	2301      	movne	r3, #1
 801d518:	0692      	lsls	r2, r2, #26
 801d51a:	d42b      	bmi.n	801d574 <_printf_common+0xb0>
 801d51c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d520:	4641      	mov	r1, r8
 801d522:	4638      	mov	r0, r7
 801d524:	47c8      	blx	r9
 801d526:	3001      	adds	r0, #1
 801d528:	d01e      	beq.n	801d568 <_printf_common+0xa4>
 801d52a:	6823      	ldr	r3, [r4, #0]
 801d52c:	6922      	ldr	r2, [r4, #16]
 801d52e:	f003 0306 	and.w	r3, r3, #6
 801d532:	2b04      	cmp	r3, #4
 801d534:	bf02      	ittt	eq
 801d536:	68e5      	ldreq	r5, [r4, #12]
 801d538:	6833      	ldreq	r3, [r6, #0]
 801d53a:	1aed      	subeq	r5, r5, r3
 801d53c:	68a3      	ldr	r3, [r4, #8]
 801d53e:	bf0c      	ite	eq
 801d540:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d544:	2500      	movne	r5, #0
 801d546:	4293      	cmp	r3, r2
 801d548:	bfc4      	itt	gt
 801d54a:	1a9b      	subgt	r3, r3, r2
 801d54c:	18ed      	addgt	r5, r5, r3
 801d54e:	2600      	movs	r6, #0
 801d550:	341a      	adds	r4, #26
 801d552:	42b5      	cmp	r5, r6
 801d554:	d11a      	bne.n	801d58c <_printf_common+0xc8>
 801d556:	2000      	movs	r0, #0
 801d558:	e008      	b.n	801d56c <_printf_common+0xa8>
 801d55a:	2301      	movs	r3, #1
 801d55c:	4652      	mov	r2, sl
 801d55e:	4641      	mov	r1, r8
 801d560:	4638      	mov	r0, r7
 801d562:	47c8      	blx	r9
 801d564:	3001      	adds	r0, #1
 801d566:	d103      	bne.n	801d570 <_printf_common+0xac>
 801d568:	f04f 30ff 	mov.w	r0, #4294967295
 801d56c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d570:	3501      	adds	r5, #1
 801d572:	e7c6      	b.n	801d502 <_printf_common+0x3e>
 801d574:	18e1      	adds	r1, r4, r3
 801d576:	1c5a      	adds	r2, r3, #1
 801d578:	2030      	movs	r0, #48	@ 0x30
 801d57a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d57e:	4422      	add	r2, r4
 801d580:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d584:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d588:	3302      	adds	r3, #2
 801d58a:	e7c7      	b.n	801d51c <_printf_common+0x58>
 801d58c:	2301      	movs	r3, #1
 801d58e:	4622      	mov	r2, r4
 801d590:	4641      	mov	r1, r8
 801d592:	4638      	mov	r0, r7
 801d594:	47c8      	blx	r9
 801d596:	3001      	adds	r0, #1
 801d598:	d0e6      	beq.n	801d568 <_printf_common+0xa4>
 801d59a:	3601      	adds	r6, #1
 801d59c:	e7d9      	b.n	801d552 <_printf_common+0x8e>
	...

0801d5a0 <_printf_i>:
 801d5a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d5a4:	7e0f      	ldrb	r7, [r1, #24]
 801d5a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d5a8:	2f78      	cmp	r7, #120	@ 0x78
 801d5aa:	4691      	mov	r9, r2
 801d5ac:	4680      	mov	r8, r0
 801d5ae:	460c      	mov	r4, r1
 801d5b0:	469a      	mov	sl, r3
 801d5b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d5b6:	d807      	bhi.n	801d5c8 <_printf_i+0x28>
 801d5b8:	2f62      	cmp	r7, #98	@ 0x62
 801d5ba:	d80a      	bhi.n	801d5d2 <_printf_i+0x32>
 801d5bc:	2f00      	cmp	r7, #0
 801d5be:	f000 80d2 	beq.w	801d766 <_printf_i+0x1c6>
 801d5c2:	2f58      	cmp	r7, #88	@ 0x58
 801d5c4:	f000 80b9 	beq.w	801d73a <_printf_i+0x19a>
 801d5c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d5cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d5d0:	e03a      	b.n	801d648 <_printf_i+0xa8>
 801d5d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d5d6:	2b15      	cmp	r3, #21
 801d5d8:	d8f6      	bhi.n	801d5c8 <_printf_i+0x28>
 801d5da:	a101      	add	r1, pc, #4	@ (adr r1, 801d5e0 <_printf_i+0x40>)
 801d5dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d5e0:	0801d639 	.word	0x0801d639
 801d5e4:	0801d64d 	.word	0x0801d64d
 801d5e8:	0801d5c9 	.word	0x0801d5c9
 801d5ec:	0801d5c9 	.word	0x0801d5c9
 801d5f0:	0801d5c9 	.word	0x0801d5c9
 801d5f4:	0801d5c9 	.word	0x0801d5c9
 801d5f8:	0801d64d 	.word	0x0801d64d
 801d5fc:	0801d5c9 	.word	0x0801d5c9
 801d600:	0801d5c9 	.word	0x0801d5c9
 801d604:	0801d5c9 	.word	0x0801d5c9
 801d608:	0801d5c9 	.word	0x0801d5c9
 801d60c:	0801d74d 	.word	0x0801d74d
 801d610:	0801d677 	.word	0x0801d677
 801d614:	0801d707 	.word	0x0801d707
 801d618:	0801d5c9 	.word	0x0801d5c9
 801d61c:	0801d5c9 	.word	0x0801d5c9
 801d620:	0801d76f 	.word	0x0801d76f
 801d624:	0801d5c9 	.word	0x0801d5c9
 801d628:	0801d677 	.word	0x0801d677
 801d62c:	0801d5c9 	.word	0x0801d5c9
 801d630:	0801d5c9 	.word	0x0801d5c9
 801d634:	0801d70f 	.word	0x0801d70f
 801d638:	6833      	ldr	r3, [r6, #0]
 801d63a:	1d1a      	adds	r2, r3, #4
 801d63c:	681b      	ldr	r3, [r3, #0]
 801d63e:	6032      	str	r2, [r6, #0]
 801d640:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d644:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d648:	2301      	movs	r3, #1
 801d64a:	e09d      	b.n	801d788 <_printf_i+0x1e8>
 801d64c:	6833      	ldr	r3, [r6, #0]
 801d64e:	6820      	ldr	r0, [r4, #0]
 801d650:	1d19      	adds	r1, r3, #4
 801d652:	6031      	str	r1, [r6, #0]
 801d654:	0606      	lsls	r6, r0, #24
 801d656:	d501      	bpl.n	801d65c <_printf_i+0xbc>
 801d658:	681d      	ldr	r5, [r3, #0]
 801d65a:	e003      	b.n	801d664 <_printf_i+0xc4>
 801d65c:	0645      	lsls	r5, r0, #25
 801d65e:	d5fb      	bpl.n	801d658 <_printf_i+0xb8>
 801d660:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d664:	2d00      	cmp	r5, #0
 801d666:	da03      	bge.n	801d670 <_printf_i+0xd0>
 801d668:	232d      	movs	r3, #45	@ 0x2d
 801d66a:	426d      	negs	r5, r5
 801d66c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d670:	4859      	ldr	r0, [pc, #356]	@ (801d7d8 <_printf_i+0x238>)
 801d672:	230a      	movs	r3, #10
 801d674:	e011      	b.n	801d69a <_printf_i+0xfa>
 801d676:	6821      	ldr	r1, [r4, #0]
 801d678:	6833      	ldr	r3, [r6, #0]
 801d67a:	0608      	lsls	r0, r1, #24
 801d67c:	f853 5b04 	ldr.w	r5, [r3], #4
 801d680:	d402      	bmi.n	801d688 <_printf_i+0xe8>
 801d682:	0649      	lsls	r1, r1, #25
 801d684:	bf48      	it	mi
 801d686:	b2ad      	uxthmi	r5, r5
 801d688:	2f6f      	cmp	r7, #111	@ 0x6f
 801d68a:	4853      	ldr	r0, [pc, #332]	@ (801d7d8 <_printf_i+0x238>)
 801d68c:	6033      	str	r3, [r6, #0]
 801d68e:	bf14      	ite	ne
 801d690:	230a      	movne	r3, #10
 801d692:	2308      	moveq	r3, #8
 801d694:	2100      	movs	r1, #0
 801d696:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d69a:	6866      	ldr	r6, [r4, #4]
 801d69c:	60a6      	str	r6, [r4, #8]
 801d69e:	2e00      	cmp	r6, #0
 801d6a0:	bfa2      	ittt	ge
 801d6a2:	6821      	ldrge	r1, [r4, #0]
 801d6a4:	f021 0104 	bicge.w	r1, r1, #4
 801d6a8:	6021      	strge	r1, [r4, #0]
 801d6aa:	b90d      	cbnz	r5, 801d6b0 <_printf_i+0x110>
 801d6ac:	2e00      	cmp	r6, #0
 801d6ae:	d04b      	beq.n	801d748 <_printf_i+0x1a8>
 801d6b0:	4616      	mov	r6, r2
 801d6b2:	fbb5 f1f3 	udiv	r1, r5, r3
 801d6b6:	fb03 5711 	mls	r7, r3, r1, r5
 801d6ba:	5dc7      	ldrb	r7, [r0, r7]
 801d6bc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d6c0:	462f      	mov	r7, r5
 801d6c2:	42bb      	cmp	r3, r7
 801d6c4:	460d      	mov	r5, r1
 801d6c6:	d9f4      	bls.n	801d6b2 <_printf_i+0x112>
 801d6c8:	2b08      	cmp	r3, #8
 801d6ca:	d10b      	bne.n	801d6e4 <_printf_i+0x144>
 801d6cc:	6823      	ldr	r3, [r4, #0]
 801d6ce:	07df      	lsls	r7, r3, #31
 801d6d0:	d508      	bpl.n	801d6e4 <_printf_i+0x144>
 801d6d2:	6923      	ldr	r3, [r4, #16]
 801d6d4:	6861      	ldr	r1, [r4, #4]
 801d6d6:	4299      	cmp	r1, r3
 801d6d8:	bfde      	ittt	le
 801d6da:	2330      	movle	r3, #48	@ 0x30
 801d6dc:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d6e0:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d6e4:	1b92      	subs	r2, r2, r6
 801d6e6:	6122      	str	r2, [r4, #16]
 801d6e8:	f8cd a000 	str.w	sl, [sp]
 801d6ec:	464b      	mov	r3, r9
 801d6ee:	aa03      	add	r2, sp, #12
 801d6f0:	4621      	mov	r1, r4
 801d6f2:	4640      	mov	r0, r8
 801d6f4:	f7ff fee6 	bl	801d4c4 <_printf_common>
 801d6f8:	3001      	adds	r0, #1
 801d6fa:	d14a      	bne.n	801d792 <_printf_i+0x1f2>
 801d6fc:	f04f 30ff 	mov.w	r0, #4294967295
 801d700:	b004      	add	sp, #16
 801d702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d706:	6823      	ldr	r3, [r4, #0]
 801d708:	f043 0320 	orr.w	r3, r3, #32
 801d70c:	6023      	str	r3, [r4, #0]
 801d70e:	4833      	ldr	r0, [pc, #204]	@ (801d7dc <_printf_i+0x23c>)
 801d710:	2778      	movs	r7, #120	@ 0x78
 801d712:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d716:	6823      	ldr	r3, [r4, #0]
 801d718:	6831      	ldr	r1, [r6, #0]
 801d71a:	061f      	lsls	r7, r3, #24
 801d71c:	f851 5b04 	ldr.w	r5, [r1], #4
 801d720:	d402      	bmi.n	801d728 <_printf_i+0x188>
 801d722:	065f      	lsls	r7, r3, #25
 801d724:	bf48      	it	mi
 801d726:	b2ad      	uxthmi	r5, r5
 801d728:	6031      	str	r1, [r6, #0]
 801d72a:	07d9      	lsls	r1, r3, #31
 801d72c:	bf44      	itt	mi
 801d72e:	f043 0320 	orrmi.w	r3, r3, #32
 801d732:	6023      	strmi	r3, [r4, #0]
 801d734:	b11d      	cbz	r5, 801d73e <_printf_i+0x19e>
 801d736:	2310      	movs	r3, #16
 801d738:	e7ac      	b.n	801d694 <_printf_i+0xf4>
 801d73a:	4827      	ldr	r0, [pc, #156]	@ (801d7d8 <_printf_i+0x238>)
 801d73c:	e7e9      	b.n	801d712 <_printf_i+0x172>
 801d73e:	6823      	ldr	r3, [r4, #0]
 801d740:	f023 0320 	bic.w	r3, r3, #32
 801d744:	6023      	str	r3, [r4, #0]
 801d746:	e7f6      	b.n	801d736 <_printf_i+0x196>
 801d748:	4616      	mov	r6, r2
 801d74a:	e7bd      	b.n	801d6c8 <_printf_i+0x128>
 801d74c:	6833      	ldr	r3, [r6, #0]
 801d74e:	6825      	ldr	r5, [r4, #0]
 801d750:	6961      	ldr	r1, [r4, #20]
 801d752:	1d18      	adds	r0, r3, #4
 801d754:	6030      	str	r0, [r6, #0]
 801d756:	062e      	lsls	r6, r5, #24
 801d758:	681b      	ldr	r3, [r3, #0]
 801d75a:	d501      	bpl.n	801d760 <_printf_i+0x1c0>
 801d75c:	6019      	str	r1, [r3, #0]
 801d75e:	e002      	b.n	801d766 <_printf_i+0x1c6>
 801d760:	0668      	lsls	r0, r5, #25
 801d762:	d5fb      	bpl.n	801d75c <_printf_i+0x1bc>
 801d764:	8019      	strh	r1, [r3, #0]
 801d766:	2300      	movs	r3, #0
 801d768:	6123      	str	r3, [r4, #16]
 801d76a:	4616      	mov	r6, r2
 801d76c:	e7bc      	b.n	801d6e8 <_printf_i+0x148>
 801d76e:	6833      	ldr	r3, [r6, #0]
 801d770:	1d1a      	adds	r2, r3, #4
 801d772:	6032      	str	r2, [r6, #0]
 801d774:	681e      	ldr	r6, [r3, #0]
 801d776:	6862      	ldr	r2, [r4, #4]
 801d778:	2100      	movs	r1, #0
 801d77a:	4630      	mov	r0, r6
 801d77c:	f7e2 fd28 	bl	80001d0 <memchr>
 801d780:	b108      	cbz	r0, 801d786 <_printf_i+0x1e6>
 801d782:	1b80      	subs	r0, r0, r6
 801d784:	6060      	str	r0, [r4, #4]
 801d786:	6863      	ldr	r3, [r4, #4]
 801d788:	6123      	str	r3, [r4, #16]
 801d78a:	2300      	movs	r3, #0
 801d78c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d790:	e7aa      	b.n	801d6e8 <_printf_i+0x148>
 801d792:	6923      	ldr	r3, [r4, #16]
 801d794:	4632      	mov	r2, r6
 801d796:	4649      	mov	r1, r9
 801d798:	4640      	mov	r0, r8
 801d79a:	47d0      	blx	sl
 801d79c:	3001      	adds	r0, #1
 801d79e:	d0ad      	beq.n	801d6fc <_printf_i+0x15c>
 801d7a0:	6823      	ldr	r3, [r4, #0]
 801d7a2:	079b      	lsls	r3, r3, #30
 801d7a4:	d413      	bmi.n	801d7ce <_printf_i+0x22e>
 801d7a6:	68e0      	ldr	r0, [r4, #12]
 801d7a8:	9b03      	ldr	r3, [sp, #12]
 801d7aa:	4298      	cmp	r0, r3
 801d7ac:	bfb8      	it	lt
 801d7ae:	4618      	movlt	r0, r3
 801d7b0:	e7a6      	b.n	801d700 <_printf_i+0x160>
 801d7b2:	2301      	movs	r3, #1
 801d7b4:	4632      	mov	r2, r6
 801d7b6:	4649      	mov	r1, r9
 801d7b8:	4640      	mov	r0, r8
 801d7ba:	47d0      	blx	sl
 801d7bc:	3001      	adds	r0, #1
 801d7be:	d09d      	beq.n	801d6fc <_printf_i+0x15c>
 801d7c0:	3501      	adds	r5, #1
 801d7c2:	68e3      	ldr	r3, [r4, #12]
 801d7c4:	9903      	ldr	r1, [sp, #12]
 801d7c6:	1a5b      	subs	r3, r3, r1
 801d7c8:	42ab      	cmp	r3, r5
 801d7ca:	dcf2      	bgt.n	801d7b2 <_printf_i+0x212>
 801d7cc:	e7eb      	b.n	801d7a6 <_printf_i+0x206>
 801d7ce:	2500      	movs	r5, #0
 801d7d0:	f104 0619 	add.w	r6, r4, #25
 801d7d4:	e7f5      	b.n	801d7c2 <_printf_i+0x222>
 801d7d6:	bf00      	nop
 801d7d8:	080258d8 	.word	0x080258d8
 801d7dc:	080258e9 	.word	0x080258e9

0801d7e0 <_scanf_float>:
 801d7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7e4:	b087      	sub	sp, #28
 801d7e6:	4617      	mov	r7, r2
 801d7e8:	9303      	str	r3, [sp, #12]
 801d7ea:	688b      	ldr	r3, [r1, #8]
 801d7ec:	1e5a      	subs	r2, r3, #1
 801d7ee:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801d7f2:	bf81      	itttt	hi
 801d7f4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801d7f8:	eb03 0b05 	addhi.w	fp, r3, r5
 801d7fc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801d800:	608b      	strhi	r3, [r1, #8]
 801d802:	680b      	ldr	r3, [r1, #0]
 801d804:	460a      	mov	r2, r1
 801d806:	f04f 0500 	mov.w	r5, #0
 801d80a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801d80e:	f842 3b1c 	str.w	r3, [r2], #28
 801d812:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801d816:	4680      	mov	r8, r0
 801d818:	460c      	mov	r4, r1
 801d81a:	bf98      	it	ls
 801d81c:	f04f 0b00 	movls.w	fp, #0
 801d820:	9201      	str	r2, [sp, #4]
 801d822:	4616      	mov	r6, r2
 801d824:	46aa      	mov	sl, r5
 801d826:	46a9      	mov	r9, r5
 801d828:	9502      	str	r5, [sp, #8]
 801d82a:	68a2      	ldr	r2, [r4, #8]
 801d82c:	b152      	cbz	r2, 801d844 <_scanf_float+0x64>
 801d82e:	683b      	ldr	r3, [r7, #0]
 801d830:	781b      	ldrb	r3, [r3, #0]
 801d832:	2b4e      	cmp	r3, #78	@ 0x4e
 801d834:	d864      	bhi.n	801d900 <_scanf_float+0x120>
 801d836:	2b40      	cmp	r3, #64	@ 0x40
 801d838:	d83c      	bhi.n	801d8b4 <_scanf_float+0xd4>
 801d83a:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801d83e:	b2c8      	uxtb	r0, r1
 801d840:	280e      	cmp	r0, #14
 801d842:	d93a      	bls.n	801d8ba <_scanf_float+0xda>
 801d844:	f1b9 0f00 	cmp.w	r9, #0
 801d848:	d003      	beq.n	801d852 <_scanf_float+0x72>
 801d84a:	6823      	ldr	r3, [r4, #0]
 801d84c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801d850:	6023      	str	r3, [r4, #0]
 801d852:	f10a 3aff 	add.w	sl, sl, #4294967295
 801d856:	f1ba 0f01 	cmp.w	sl, #1
 801d85a:	f200 8117 	bhi.w	801da8c <_scanf_float+0x2ac>
 801d85e:	9b01      	ldr	r3, [sp, #4]
 801d860:	429e      	cmp	r6, r3
 801d862:	f200 8108 	bhi.w	801da76 <_scanf_float+0x296>
 801d866:	2001      	movs	r0, #1
 801d868:	b007      	add	sp, #28
 801d86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d86e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801d872:	2a0d      	cmp	r2, #13
 801d874:	d8e6      	bhi.n	801d844 <_scanf_float+0x64>
 801d876:	a101      	add	r1, pc, #4	@ (adr r1, 801d87c <_scanf_float+0x9c>)
 801d878:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801d87c:	0801d9c3 	.word	0x0801d9c3
 801d880:	0801d845 	.word	0x0801d845
 801d884:	0801d845 	.word	0x0801d845
 801d888:	0801d845 	.word	0x0801d845
 801d88c:	0801da23 	.word	0x0801da23
 801d890:	0801d9fb 	.word	0x0801d9fb
 801d894:	0801d845 	.word	0x0801d845
 801d898:	0801d845 	.word	0x0801d845
 801d89c:	0801d9d1 	.word	0x0801d9d1
 801d8a0:	0801d845 	.word	0x0801d845
 801d8a4:	0801d845 	.word	0x0801d845
 801d8a8:	0801d845 	.word	0x0801d845
 801d8ac:	0801d845 	.word	0x0801d845
 801d8b0:	0801d989 	.word	0x0801d989
 801d8b4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801d8b8:	e7db      	b.n	801d872 <_scanf_float+0x92>
 801d8ba:	290e      	cmp	r1, #14
 801d8bc:	d8c2      	bhi.n	801d844 <_scanf_float+0x64>
 801d8be:	a001      	add	r0, pc, #4	@ (adr r0, 801d8c4 <_scanf_float+0xe4>)
 801d8c0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801d8c4:	0801d979 	.word	0x0801d979
 801d8c8:	0801d845 	.word	0x0801d845
 801d8cc:	0801d979 	.word	0x0801d979
 801d8d0:	0801da0f 	.word	0x0801da0f
 801d8d4:	0801d845 	.word	0x0801d845
 801d8d8:	0801d921 	.word	0x0801d921
 801d8dc:	0801d95f 	.word	0x0801d95f
 801d8e0:	0801d95f 	.word	0x0801d95f
 801d8e4:	0801d95f 	.word	0x0801d95f
 801d8e8:	0801d95f 	.word	0x0801d95f
 801d8ec:	0801d95f 	.word	0x0801d95f
 801d8f0:	0801d95f 	.word	0x0801d95f
 801d8f4:	0801d95f 	.word	0x0801d95f
 801d8f8:	0801d95f 	.word	0x0801d95f
 801d8fc:	0801d95f 	.word	0x0801d95f
 801d900:	2b6e      	cmp	r3, #110	@ 0x6e
 801d902:	d809      	bhi.n	801d918 <_scanf_float+0x138>
 801d904:	2b60      	cmp	r3, #96	@ 0x60
 801d906:	d8b2      	bhi.n	801d86e <_scanf_float+0x8e>
 801d908:	2b54      	cmp	r3, #84	@ 0x54
 801d90a:	d07b      	beq.n	801da04 <_scanf_float+0x224>
 801d90c:	2b59      	cmp	r3, #89	@ 0x59
 801d90e:	d199      	bne.n	801d844 <_scanf_float+0x64>
 801d910:	2d07      	cmp	r5, #7
 801d912:	d197      	bne.n	801d844 <_scanf_float+0x64>
 801d914:	2508      	movs	r5, #8
 801d916:	e02c      	b.n	801d972 <_scanf_float+0x192>
 801d918:	2b74      	cmp	r3, #116	@ 0x74
 801d91a:	d073      	beq.n	801da04 <_scanf_float+0x224>
 801d91c:	2b79      	cmp	r3, #121	@ 0x79
 801d91e:	e7f6      	b.n	801d90e <_scanf_float+0x12e>
 801d920:	6821      	ldr	r1, [r4, #0]
 801d922:	05c8      	lsls	r0, r1, #23
 801d924:	d51b      	bpl.n	801d95e <_scanf_float+0x17e>
 801d926:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801d92a:	6021      	str	r1, [r4, #0]
 801d92c:	f109 0901 	add.w	r9, r9, #1
 801d930:	f1bb 0f00 	cmp.w	fp, #0
 801d934:	d003      	beq.n	801d93e <_scanf_float+0x15e>
 801d936:	3201      	adds	r2, #1
 801d938:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d93c:	60a2      	str	r2, [r4, #8]
 801d93e:	68a3      	ldr	r3, [r4, #8]
 801d940:	3b01      	subs	r3, #1
 801d942:	60a3      	str	r3, [r4, #8]
 801d944:	6923      	ldr	r3, [r4, #16]
 801d946:	3301      	adds	r3, #1
 801d948:	6123      	str	r3, [r4, #16]
 801d94a:	687b      	ldr	r3, [r7, #4]
 801d94c:	3b01      	subs	r3, #1
 801d94e:	2b00      	cmp	r3, #0
 801d950:	607b      	str	r3, [r7, #4]
 801d952:	f340 8087 	ble.w	801da64 <_scanf_float+0x284>
 801d956:	683b      	ldr	r3, [r7, #0]
 801d958:	3301      	adds	r3, #1
 801d95a:	603b      	str	r3, [r7, #0]
 801d95c:	e765      	b.n	801d82a <_scanf_float+0x4a>
 801d95e:	eb1a 0105 	adds.w	r1, sl, r5
 801d962:	f47f af6f 	bne.w	801d844 <_scanf_float+0x64>
 801d966:	6822      	ldr	r2, [r4, #0]
 801d968:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801d96c:	6022      	str	r2, [r4, #0]
 801d96e:	460d      	mov	r5, r1
 801d970:	468a      	mov	sl, r1
 801d972:	f806 3b01 	strb.w	r3, [r6], #1
 801d976:	e7e2      	b.n	801d93e <_scanf_float+0x15e>
 801d978:	6822      	ldr	r2, [r4, #0]
 801d97a:	0610      	lsls	r0, r2, #24
 801d97c:	f57f af62 	bpl.w	801d844 <_scanf_float+0x64>
 801d980:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801d984:	6022      	str	r2, [r4, #0]
 801d986:	e7f4      	b.n	801d972 <_scanf_float+0x192>
 801d988:	f1ba 0f00 	cmp.w	sl, #0
 801d98c:	d10e      	bne.n	801d9ac <_scanf_float+0x1cc>
 801d98e:	f1b9 0f00 	cmp.w	r9, #0
 801d992:	d10e      	bne.n	801d9b2 <_scanf_float+0x1d2>
 801d994:	6822      	ldr	r2, [r4, #0]
 801d996:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801d99a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801d99e:	d108      	bne.n	801d9b2 <_scanf_float+0x1d2>
 801d9a0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801d9a4:	6022      	str	r2, [r4, #0]
 801d9a6:	f04f 0a01 	mov.w	sl, #1
 801d9aa:	e7e2      	b.n	801d972 <_scanf_float+0x192>
 801d9ac:	f1ba 0f02 	cmp.w	sl, #2
 801d9b0:	d055      	beq.n	801da5e <_scanf_float+0x27e>
 801d9b2:	2d01      	cmp	r5, #1
 801d9b4:	d002      	beq.n	801d9bc <_scanf_float+0x1dc>
 801d9b6:	2d04      	cmp	r5, #4
 801d9b8:	f47f af44 	bne.w	801d844 <_scanf_float+0x64>
 801d9bc:	3501      	adds	r5, #1
 801d9be:	b2ed      	uxtb	r5, r5
 801d9c0:	e7d7      	b.n	801d972 <_scanf_float+0x192>
 801d9c2:	f1ba 0f01 	cmp.w	sl, #1
 801d9c6:	f47f af3d 	bne.w	801d844 <_scanf_float+0x64>
 801d9ca:	f04f 0a02 	mov.w	sl, #2
 801d9ce:	e7d0      	b.n	801d972 <_scanf_float+0x192>
 801d9d0:	b97d      	cbnz	r5, 801d9f2 <_scanf_float+0x212>
 801d9d2:	f1b9 0f00 	cmp.w	r9, #0
 801d9d6:	f47f af38 	bne.w	801d84a <_scanf_float+0x6a>
 801d9da:	6822      	ldr	r2, [r4, #0]
 801d9dc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801d9e0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801d9e4:	f040 8108 	bne.w	801dbf8 <_scanf_float+0x418>
 801d9e8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801d9ec:	6022      	str	r2, [r4, #0]
 801d9ee:	2501      	movs	r5, #1
 801d9f0:	e7bf      	b.n	801d972 <_scanf_float+0x192>
 801d9f2:	2d03      	cmp	r5, #3
 801d9f4:	d0e2      	beq.n	801d9bc <_scanf_float+0x1dc>
 801d9f6:	2d05      	cmp	r5, #5
 801d9f8:	e7de      	b.n	801d9b8 <_scanf_float+0x1d8>
 801d9fa:	2d02      	cmp	r5, #2
 801d9fc:	f47f af22 	bne.w	801d844 <_scanf_float+0x64>
 801da00:	2503      	movs	r5, #3
 801da02:	e7b6      	b.n	801d972 <_scanf_float+0x192>
 801da04:	2d06      	cmp	r5, #6
 801da06:	f47f af1d 	bne.w	801d844 <_scanf_float+0x64>
 801da0a:	2507      	movs	r5, #7
 801da0c:	e7b1      	b.n	801d972 <_scanf_float+0x192>
 801da0e:	6822      	ldr	r2, [r4, #0]
 801da10:	0591      	lsls	r1, r2, #22
 801da12:	f57f af17 	bpl.w	801d844 <_scanf_float+0x64>
 801da16:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801da1a:	6022      	str	r2, [r4, #0]
 801da1c:	f8cd 9008 	str.w	r9, [sp, #8]
 801da20:	e7a7      	b.n	801d972 <_scanf_float+0x192>
 801da22:	6822      	ldr	r2, [r4, #0]
 801da24:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801da28:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801da2c:	d006      	beq.n	801da3c <_scanf_float+0x25c>
 801da2e:	0550      	lsls	r0, r2, #21
 801da30:	f57f af08 	bpl.w	801d844 <_scanf_float+0x64>
 801da34:	f1b9 0f00 	cmp.w	r9, #0
 801da38:	f000 80de 	beq.w	801dbf8 <_scanf_float+0x418>
 801da3c:	0591      	lsls	r1, r2, #22
 801da3e:	bf58      	it	pl
 801da40:	9902      	ldrpl	r1, [sp, #8]
 801da42:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801da46:	bf58      	it	pl
 801da48:	eba9 0101 	subpl.w	r1, r9, r1
 801da4c:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801da50:	bf58      	it	pl
 801da52:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801da56:	6022      	str	r2, [r4, #0]
 801da58:	f04f 0900 	mov.w	r9, #0
 801da5c:	e789      	b.n	801d972 <_scanf_float+0x192>
 801da5e:	f04f 0a03 	mov.w	sl, #3
 801da62:	e786      	b.n	801d972 <_scanf_float+0x192>
 801da64:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801da68:	4639      	mov	r1, r7
 801da6a:	4640      	mov	r0, r8
 801da6c:	4798      	blx	r3
 801da6e:	2800      	cmp	r0, #0
 801da70:	f43f aedb 	beq.w	801d82a <_scanf_float+0x4a>
 801da74:	e6e6      	b.n	801d844 <_scanf_float+0x64>
 801da76:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801da7a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801da7e:	463a      	mov	r2, r7
 801da80:	4640      	mov	r0, r8
 801da82:	4798      	blx	r3
 801da84:	6923      	ldr	r3, [r4, #16]
 801da86:	3b01      	subs	r3, #1
 801da88:	6123      	str	r3, [r4, #16]
 801da8a:	e6e8      	b.n	801d85e <_scanf_float+0x7e>
 801da8c:	1e6b      	subs	r3, r5, #1
 801da8e:	2b06      	cmp	r3, #6
 801da90:	d824      	bhi.n	801dadc <_scanf_float+0x2fc>
 801da92:	2d02      	cmp	r5, #2
 801da94:	d836      	bhi.n	801db04 <_scanf_float+0x324>
 801da96:	9b01      	ldr	r3, [sp, #4]
 801da98:	429e      	cmp	r6, r3
 801da9a:	f67f aee4 	bls.w	801d866 <_scanf_float+0x86>
 801da9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801daa2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801daa6:	463a      	mov	r2, r7
 801daa8:	4640      	mov	r0, r8
 801daaa:	4798      	blx	r3
 801daac:	6923      	ldr	r3, [r4, #16]
 801daae:	3b01      	subs	r3, #1
 801dab0:	6123      	str	r3, [r4, #16]
 801dab2:	e7f0      	b.n	801da96 <_scanf_float+0x2b6>
 801dab4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801dab8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801dabc:	463a      	mov	r2, r7
 801dabe:	4640      	mov	r0, r8
 801dac0:	4798      	blx	r3
 801dac2:	6923      	ldr	r3, [r4, #16]
 801dac4:	3b01      	subs	r3, #1
 801dac6:	6123      	str	r3, [r4, #16]
 801dac8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dacc:	fa5f fa8a 	uxtb.w	sl, sl
 801dad0:	f1ba 0f02 	cmp.w	sl, #2
 801dad4:	d1ee      	bne.n	801dab4 <_scanf_float+0x2d4>
 801dad6:	3d03      	subs	r5, #3
 801dad8:	b2ed      	uxtb	r5, r5
 801dada:	1b76      	subs	r6, r6, r5
 801dadc:	6823      	ldr	r3, [r4, #0]
 801dade:	05da      	lsls	r2, r3, #23
 801dae0:	d530      	bpl.n	801db44 <_scanf_float+0x364>
 801dae2:	055b      	lsls	r3, r3, #21
 801dae4:	d511      	bpl.n	801db0a <_scanf_float+0x32a>
 801dae6:	9b01      	ldr	r3, [sp, #4]
 801dae8:	429e      	cmp	r6, r3
 801daea:	f67f aebc 	bls.w	801d866 <_scanf_float+0x86>
 801daee:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801daf2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801daf6:	463a      	mov	r2, r7
 801daf8:	4640      	mov	r0, r8
 801dafa:	4798      	blx	r3
 801dafc:	6923      	ldr	r3, [r4, #16]
 801dafe:	3b01      	subs	r3, #1
 801db00:	6123      	str	r3, [r4, #16]
 801db02:	e7f0      	b.n	801dae6 <_scanf_float+0x306>
 801db04:	46aa      	mov	sl, r5
 801db06:	46b3      	mov	fp, r6
 801db08:	e7de      	b.n	801dac8 <_scanf_float+0x2e8>
 801db0a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801db0e:	6923      	ldr	r3, [r4, #16]
 801db10:	2965      	cmp	r1, #101	@ 0x65
 801db12:	f103 33ff 	add.w	r3, r3, #4294967295
 801db16:	f106 35ff 	add.w	r5, r6, #4294967295
 801db1a:	6123      	str	r3, [r4, #16]
 801db1c:	d00c      	beq.n	801db38 <_scanf_float+0x358>
 801db1e:	2945      	cmp	r1, #69	@ 0x45
 801db20:	d00a      	beq.n	801db38 <_scanf_float+0x358>
 801db22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801db26:	463a      	mov	r2, r7
 801db28:	4640      	mov	r0, r8
 801db2a:	4798      	blx	r3
 801db2c:	6923      	ldr	r3, [r4, #16]
 801db2e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801db32:	3b01      	subs	r3, #1
 801db34:	1eb5      	subs	r5, r6, #2
 801db36:	6123      	str	r3, [r4, #16]
 801db38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801db3c:	463a      	mov	r2, r7
 801db3e:	4640      	mov	r0, r8
 801db40:	4798      	blx	r3
 801db42:	462e      	mov	r6, r5
 801db44:	6822      	ldr	r2, [r4, #0]
 801db46:	f012 0210 	ands.w	r2, r2, #16
 801db4a:	d001      	beq.n	801db50 <_scanf_float+0x370>
 801db4c:	2000      	movs	r0, #0
 801db4e:	e68b      	b.n	801d868 <_scanf_float+0x88>
 801db50:	7032      	strb	r2, [r6, #0]
 801db52:	6823      	ldr	r3, [r4, #0]
 801db54:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801db58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801db5c:	d11c      	bne.n	801db98 <_scanf_float+0x3b8>
 801db5e:	9b02      	ldr	r3, [sp, #8]
 801db60:	454b      	cmp	r3, r9
 801db62:	eba3 0209 	sub.w	r2, r3, r9
 801db66:	d123      	bne.n	801dbb0 <_scanf_float+0x3d0>
 801db68:	9901      	ldr	r1, [sp, #4]
 801db6a:	2200      	movs	r2, #0
 801db6c:	4640      	mov	r0, r8
 801db6e:	f002 fcc7 	bl	8020500 <_strtod_r>
 801db72:	9b03      	ldr	r3, [sp, #12]
 801db74:	6821      	ldr	r1, [r4, #0]
 801db76:	681b      	ldr	r3, [r3, #0]
 801db78:	f011 0f02 	tst.w	r1, #2
 801db7c:	ec57 6b10 	vmov	r6, r7, d0
 801db80:	f103 0204 	add.w	r2, r3, #4
 801db84:	d01f      	beq.n	801dbc6 <_scanf_float+0x3e6>
 801db86:	9903      	ldr	r1, [sp, #12]
 801db88:	600a      	str	r2, [r1, #0]
 801db8a:	681b      	ldr	r3, [r3, #0]
 801db8c:	e9c3 6700 	strd	r6, r7, [r3]
 801db90:	68e3      	ldr	r3, [r4, #12]
 801db92:	3301      	adds	r3, #1
 801db94:	60e3      	str	r3, [r4, #12]
 801db96:	e7d9      	b.n	801db4c <_scanf_float+0x36c>
 801db98:	9b04      	ldr	r3, [sp, #16]
 801db9a:	2b00      	cmp	r3, #0
 801db9c:	d0e4      	beq.n	801db68 <_scanf_float+0x388>
 801db9e:	9905      	ldr	r1, [sp, #20]
 801dba0:	230a      	movs	r3, #10
 801dba2:	3101      	adds	r1, #1
 801dba4:	4640      	mov	r0, r8
 801dba6:	f7ff f9c1 	bl	801cf2c <_strtol_r>
 801dbaa:	9b04      	ldr	r3, [sp, #16]
 801dbac:	9e05      	ldr	r6, [sp, #20]
 801dbae:	1ac2      	subs	r2, r0, r3
 801dbb0:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801dbb4:	429e      	cmp	r6, r3
 801dbb6:	bf28      	it	cs
 801dbb8:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801dbbc:	4910      	ldr	r1, [pc, #64]	@ (801dc00 <_scanf_float+0x420>)
 801dbbe:	4630      	mov	r0, r6
 801dbc0:	f000 f8f6 	bl	801ddb0 <siprintf>
 801dbc4:	e7d0      	b.n	801db68 <_scanf_float+0x388>
 801dbc6:	f011 0f04 	tst.w	r1, #4
 801dbca:	9903      	ldr	r1, [sp, #12]
 801dbcc:	600a      	str	r2, [r1, #0]
 801dbce:	d1dc      	bne.n	801db8a <_scanf_float+0x3aa>
 801dbd0:	681d      	ldr	r5, [r3, #0]
 801dbd2:	4632      	mov	r2, r6
 801dbd4:	463b      	mov	r3, r7
 801dbd6:	4630      	mov	r0, r6
 801dbd8:	4639      	mov	r1, r7
 801dbda:	f7e2 ffa7 	bl	8000b2c <__aeabi_dcmpun>
 801dbde:	b128      	cbz	r0, 801dbec <_scanf_float+0x40c>
 801dbe0:	4808      	ldr	r0, [pc, #32]	@ (801dc04 <_scanf_float+0x424>)
 801dbe2:	f000 fa69 	bl	801e0b8 <nanf>
 801dbe6:	ed85 0a00 	vstr	s0, [r5]
 801dbea:	e7d1      	b.n	801db90 <_scanf_float+0x3b0>
 801dbec:	4630      	mov	r0, r6
 801dbee:	4639      	mov	r1, r7
 801dbf0:	f7e2 fffa 	bl	8000be8 <__aeabi_d2f>
 801dbf4:	6028      	str	r0, [r5, #0]
 801dbf6:	e7cb      	b.n	801db90 <_scanf_float+0x3b0>
 801dbf8:	f04f 0900 	mov.w	r9, #0
 801dbfc:	e629      	b.n	801d852 <_scanf_float+0x72>
 801dbfe:	bf00      	nop
 801dc00:	080258fa 	.word	0x080258fa
 801dc04:	0802593a 	.word	0x0802593a

0801dc08 <std>:
 801dc08:	2300      	movs	r3, #0
 801dc0a:	b510      	push	{r4, lr}
 801dc0c:	4604      	mov	r4, r0
 801dc0e:	e9c0 3300 	strd	r3, r3, [r0]
 801dc12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dc16:	6083      	str	r3, [r0, #8]
 801dc18:	8181      	strh	r1, [r0, #12]
 801dc1a:	6643      	str	r3, [r0, #100]	@ 0x64
 801dc1c:	81c2      	strh	r2, [r0, #14]
 801dc1e:	6183      	str	r3, [r0, #24]
 801dc20:	4619      	mov	r1, r3
 801dc22:	2208      	movs	r2, #8
 801dc24:	305c      	adds	r0, #92	@ 0x5c
 801dc26:	f000 f950 	bl	801deca <memset>
 801dc2a:	4b0d      	ldr	r3, [pc, #52]	@ (801dc60 <std+0x58>)
 801dc2c:	6263      	str	r3, [r4, #36]	@ 0x24
 801dc2e:	4b0d      	ldr	r3, [pc, #52]	@ (801dc64 <std+0x5c>)
 801dc30:	62a3      	str	r3, [r4, #40]	@ 0x28
 801dc32:	4b0d      	ldr	r3, [pc, #52]	@ (801dc68 <std+0x60>)
 801dc34:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801dc36:	4b0d      	ldr	r3, [pc, #52]	@ (801dc6c <std+0x64>)
 801dc38:	6323      	str	r3, [r4, #48]	@ 0x30
 801dc3a:	4b0d      	ldr	r3, [pc, #52]	@ (801dc70 <std+0x68>)
 801dc3c:	6224      	str	r4, [r4, #32]
 801dc3e:	429c      	cmp	r4, r3
 801dc40:	d006      	beq.n	801dc50 <std+0x48>
 801dc42:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801dc46:	4294      	cmp	r4, r2
 801dc48:	d002      	beq.n	801dc50 <std+0x48>
 801dc4a:	33d0      	adds	r3, #208	@ 0xd0
 801dc4c:	429c      	cmp	r4, r3
 801dc4e:	d105      	bne.n	801dc5c <std+0x54>
 801dc50:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801dc54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc58:	f000 ba1c 	b.w	801e094 <__retarget_lock_init_recursive>
 801dc5c:	bd10      	pop	{r4, pc}
 801dc5e:	bf00      	nop
 801dc60:	0801ddf1 	.word	0x0801ddf1
 801dc64:	0801de13 	.word	0x0801de13
 801dc68:	0801de4b 	.word	0x0801de4b
 801dc6c:	0801de6f 	.word	0x0801de6f
 801dc70:	2000edd0 	.word	0x2000edd0

0801dc74 <stdio_exit_handler>:
 801dc74:	4a02      	ldr	r2, [pc, #8]	@ (801dc80 <stdio_exit_handler+0xc>)
 801dc76:	4903      	ldr	r1, [pc, #12]	@ (801dc84 <stdio_exit_handler+0x10>)
 801dc78:	4803      	ldr	r0, [pc, #12]	@ (801dc88 <stdio_exit_handler+0x14>)
 801dc7a:	f000 b869 	b.w	801dd50 <_fwalk_sglue>
 801dc7e:	bf00      	nop
 801dc80:	20000034 	.word	0x20000034
 801dc84:	08020b49 	.word	0x08020b49
 801dc88:	20000044 	.word	0x20000044

0801dc8c <cleanup_stdio>:
 801dc8c:	6841      	ldr	r1, [r0, #4]
 801dc8e:	4b0c      	ldr	r3, [pc, #48]	@ (801dcc0 <cleanup_stdio+0x34>)
 801dc90:	4299      	cmp	r1, r3
 801dc92:	b510      	push	{r4, lr}
 801dc94:	4604      	mov	r4, r0
 801dc96:	d001      	beq.n	801dc9c <cleanup_stdio+0x10>
 801dc98:	f002 ff56 	bl	8020b48 <_fflush_r>
 801dc9c:	68a1      	ldr	r1, [r4, #8]
 801dc9e:	4b09      	ldr	r3, [pc, #36]	@ (801dcc4 <cleanup_stdio+0x38>)
 801dca0:	4299      	cmp	r1, r3
 801dca2:	d002      	beq.n	801dcaa <cleanup_stdio+0x1e>
 801dca4:	4620      	mov	r0, r4
 801dca6:	f002 ff4f 	bl	8020b48 <_fflush_r>
 801dcaa:	68e1      	ldr	r1, [r4, #12]
 801dcac:	4b06      	ldr	r3, [pc, #24]	@ (801dcc8 <cleanup_stdio+0x3c>)
 801dcae:	4299      	cmp	r1, r3
 801dcb0:	d004      	beq.n	801dcbc <cleanup_stdio+0x30>
 801dcb2:	4620      	mov	r0, r4
 801dcb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcb8:	f002 bf46 	b.w	8020b48 <_fflush_r>
 801dcbc:	bd10      	pop	{r4, pc}
 801dcbe:	bf00      	nop
 801dcc0:	2000edd0 	.word	0x2000edd0
 801dcc4:	2000ee38 	.word	0x2000ee38
 801dcc8:	2000eea0 	.word	0x2000eea0

0801dccc <global_stdio_init.part.0>:
 801dccc:	b510      	push	{r4, lr}
 801dcce:	4b0b      	ldr	r3, [pc, #44]	@ (801dcfc <global_stdio_init.part.0+0x30>)
 801dcd0:	4c0b      	ldr	r4, [pc, #44]	@ (801dd00 <global_stdio_init.part.0+0x34>)
 801dcd2:	4a0c      	ldr	r2, [pc, #48]	@ (801dd04 <global_stdio_init.part.0+0x38>)
 801dcd4:	601a      	str	r2, [r3, #0]
 801dcd6:	4620      	mov	r0, r4
 801dcd8:	2200      	movs	r2, #0
 801dcda:	2104      	movs	r1, #4
 801dcdc:	f7ff ff94 	bl	801dc08 <std>
 801dce0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801dce4:	2201      	movs	r2, #1
 801dce6:	2109      	movs	r1, #9
 801dce8:	f7ff ff8e 	bl	801dc08 <std>
 801dcec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801dcf0:	2202      	movs	r2, #2
 801dcf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcf6:	2112      	movs	r1, #18
 801dcf8:	f7ff bf86 	b.w	801dc08 <std>
 801dcfc:	2000ef08 	.word	0x2000ef08
 801dd00:	2000edd0 	.word	0x2000edd0
 801dd04:	0801dc75 	.word	0x0801dc75

0801dd08 <__sfp_lock_acquire>:
 801dd08:	4801      	ldr	r0, [pc, #4]	@ (801dd10 <__sfp_lock_acquire+0x8>)
 801dd0a:	f000 b9c4 	b.w	801e096 <__retarget_lock_acquire_recursive>
 801dd0e:	bf00      	nop
 801dd10:	2000ef11 	.word	0x2000ef11

0801dd14 <__sfp_lock_release>:
 801dd14:	4801      	ldr	r0, [pc, #4]	@ (801dd1c <__sfp_lock_release+0x8>)
 801dd16:	f000 b9bf 	b.w	801e098 <__retarget_lock_release_recursive>
 801dd1a:	bf00      	nop
 801dd1c:	2000ef11 	.word	0x2000ef11

0801dd20 <__sinit>:
 801dd20:	b510      	push	{r4, lr}
 801dd22:	4604      	mov	r4, r0
 801dd24:	f7ff fff0 	bl	801dd08 <__sfp_lock_acquire>
 801dd28:	6a23      	ldr	r3, [r4, #32]
 801dd2a:	b11b      	cbz	r3, 801dd34 <__sinit+0x14>
 801dd2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dd30:	f7ff bff0 	b.w	801dd14 <__sfp_lock_release>
 801dd34:	4b04      	ldr	r3, [pc, #16]	@ (801dd48 <__sinit+0x28>)
 801dd36:	6223      	str	r3, [r4, #32]
 801dd38:	4b04      	ldr	r3, [pc, #16]	@ (801dd4c <__sinit+0x2c>)
 801dd3a:	681b      	ldr	r3, [r3, #0]
 801dd3c:	2b00      	cmp	r3, #0
 801dd3e:	d1f5      	bne.n	801dd2c <__sinit+0xc>
 801dd40:	f7ff ffc4 	bl	801dccc <global_stdio_init.part.0>
 801dd44:	e7f2      	b.n	801dd2c <__sinit+0xc>
 801dd46:	bf00      	nop
 801dd48:	0801dc8d 	.word	0x0801dc8d
 801dd4c:	2000ef08 	.word	0x2000ef08

0801dd50 <_fwalk_sglue>:
 801dd50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd54:	4607      	mov	r7, r0
 801dd56:	4688      	mov	r8, r1
 801dd58:	4614      	mov	r4, r2
 801dd5a:	2600      	movs	r6, #0
 801dd5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dd60:	f1b9 0901 	subs.w	r9, r9, #1
 801dd64:	d505      	bpl.n	801dd72 <_fwalk_sglue+0x22>
 801dd66:	6824      	ldr	r4, [r4, #0]
 801dd68:	2c00      	cmp	r4, #0
 801dd6a:	d1f7      	bne.n	801dd5c <_fwalk_sglue+0xc>
 801dd6c:	4630      	mov	r0, r6
 801dd6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd72:	89ab      	ldrh	r3, [r5, #12]
 801dd74:	2b01      	cmp	r3, #1
 801dd76:	d907      	bls.n	801dd88 <_fwalk_sglue+0x38>
 801dd78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dd7c:	3301      	adds	r3, #1
 801dd7e:	d003      	beq.n	801dd88 <_fwalk_sglue+0x38>
 801dd80:	4629      	mov	r1, r5
 801dd82:	4638      	mov	r0, r7
 801dd84:	47c0      	blx	r8
 801dd86:	4306      	orrs	r6, r0
 801dd88:	3568      	adds	r5, #104	@ 0x68
 801dd8a:	e7e9      	b.n	801dd60 <_fwalk_sglue+0x10>

0801dd8c <iprintf>:
 801dd8c:	b40f      	push	{r0, r1, r2, r3}
 801dd8e:	b507      	push	{r0, r1, r2, lr}
 801dd90:	4906      	ldr	r1, [pc, #24]	@ (801ddac <iprintf+0x20>)
 801dd92:	ab04      	add	r3, sp, #16
 801dd94:	6808      	ldr	r0, [r1, #0]
 801dd96:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd9a:	6881      	ldr	r1, [r0, #8]
 801dd9c:	9301      	str	r3, [sp, #4]
 801dd9e:	f002 fd37 	bl	8020810 <_vfiprintf_r>
 801dda2:	b003      	add	sp, #12
 801dda4:	f85d eb04 	ldr.w	lr, [sp], #4
 801dda8:	b004      	add	sp, #16
 801ddaa:	4770      	bx	lr
 801ddac:	20000040 	.word	0x20000040

0801ddb0 <siprintf>:
 801ddb0:	b40e      	push	{r1, r2, r3}
 801ddb2:	b500      	push	{lr}
 801ddb4:	b09c      	sub	sp, #112	@ 0x70
 801ddb6:	ab1d      	add	r3, sp, #116	@ 0x74
 801ddb8:	9002      	str	r0, [sp, #8]
 801ddba:	9006      	str	r0, [sp, #24]
 801ddbc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801ddc0:	4809      	ldr	r0, [pc, #36]	@ (801dde8 <siprintf+0x38>)
 801ddc2:	9107      	str	r1, [sp, #28]
 801ddc4:	9104      	str	r1, [sp, #16]
 801ddc6:	4909      	ldr	r1, [pc, #36]	@ (801ddec <siprintf+0x3c>)
 801ddc8:	f853 2b04 	ldr.w	r2, [r3], #4
 801ddcc:	9105      	str	r1, [sp, #20]
 801ddce:	6800      	ldr	r0, [r0, #0]
 801ddd0:	9301      	str	r3, [sp, #4]
 801ddd2:	a902      	add	r1, sp, #8
 801ddd4:	f002 fbf6 	bl	80205c4 <_svfiprintf_r>
 801ddd8:	9b02      	ldr	r3, [sp, #8]
 801ddda:	2200      	movs	r2, #0
 801dddc:	701a      	strb	r2, [r3, #0]
 801ddde:	b01c      	add	sp, #112	@ 0x70
 801dde0:	f85d eb04 	ldr.w	lr, [sp], #4
 801dde4:	b003      	add	sp, #12
 801dde6:	4770      	bx	lr
 801dde8:	20000040 	.word	0x20000040
 801ddec:	ffff0208 	.word	0xffff0208

0801ddf0 <__sread>:
 801ddf0:	b510      	push	{r4, lr}
 801ddf2:	460c      	mov	r4, r1
 801ddf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ddf8:	f000 f8fe 	bl	801dff8 <_read_r>
 801ddfc:	2800      	cmp	r0, #0
 801ddfe:	bfab      	itete	ge
 801de00:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801de02:	89a3      	ldrhlt	r3, [r4, #12]
 801de04:	181b      	addge	r3, r3, r0
 801de06:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801de0a:	bfac      	ite	ge
 801de0c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801de0e:	81a3      	strhlt	r3, [r4, #12]
 801de10:	bd10      	pop	{r4, pc}

0801de12 <__swrite>:
 801de12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801de16:	461f      	mov	r7, r3
 801de18:	898b      	ldrh	r3, [r1, #12]
 801de1a:	05db      	lsls	r3, r3, #23
 801de1c:	4605      	mov	r5, r0
 801de1e:	460c      	mov	r4, r1
 801de20:	4616      	mov	r6, r2
 801de22:	d505      	bpl.n	801de30 <__swrite+0x1e>
 801de24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de28:	2302      	movs	r3, #2
 801de2a:	2200      	movs	r2, #0
 801de2c:	f000 f8d2 	bl	801dfd4 <_lseek_r>
 801de30:	89a3      	ldrh	r3, [r4, #12]
 801de32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801de36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801de3a:	81a3      	strh	r3, [r4, #12]
 801de3c:	4632      	mov	r2, r6
 801de3e:	463b      	mov	r3, r7
 801de40:	4628      	mov	r0, r5
 801de42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801de46:	f000 b8e9 	b.w	801e01c <_write_r>

0801de4a <__sseek>:
 801de4a:	b510      	push	{r4, lr}
 801de4c:	460c      	mov	r4, r1
 801de4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de52:	f000 f8bf 	bl	801dfd4 <_lseek_r>
 801de56:	1c43      	adds	r3, r0, #1
 801de58:	89a3      	ldrh	r3, [r4, #12]
 801de5a:	bf15      	itete	ne
 801de5c:	6560      	strne	r0, [r4, #84]	@ 0x54
 801de5e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801de62:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801de66:	81a3      	strheq	r3, [r4, #12]
 801de68:	bf18      	it	ne
 801de6a:	81a3      	strhne	r3, [r4, #12]
 801de6c:	bd10      	pop	{r4, pc}

0801de6e <__sclose>:
 801de6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801de72:	f000 b849 	b.w	801df08 <_close_r>

0801de76 <memcmp>:
 801de76:	b510      	push	{r4, lr}
 801de78:	3901      	subs	r1, #1
 801de7a:	4402      	add	r2, r0
 801de7c:	4290      	cmp	r0, r2
 801de7e:	d101      	bne.n	801de84 <memcmp+0xe>
 801de80:	2000      	movs	r0, #0
 801de82:	e005      	b.n	801de90 <memcmp+0x1a>
 801de84:	7803      	ldrb	r3, [r0, #0]
 801de86:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801de8a:	42a3      	cmp	r3, r4
 801de8c:	d001      	beq.n	801de92 <memcmp+0x1c>
 801de8e:	1b18      	subs	r0, r3, r4
 801de90:	bd10      	pop	{r4, pc}
 801de92:	3001      	adds	r0, #1
 801de94:	e7f2      	b.n	801de7c <memcmp+0x6>

0801de96 <memmove>:
 801de96:	4288      	cmp	r0, r1
 801de98:	b510      	push	{r4, lr}
 801de9a:	eb01 0402 	add.w	r4, r1, r2
 801de9e:	d902      	bls.n	801dea6 <memmove+0x10>
 801dea0:	4284      	cmp	r4, r0
 801dea2:	4623      	mov	r3, r4
 801dea4:	d807      	bhi.n	801deb6 <memmove+0x20>
 801dea6:	1e43      	subs	r3, r0, #1
 801dea8:	42a1      	cmp	r1, r4
 801deaa:	d008      	beq.n	801debe <memmove+0x28>
 801deac:	f811 2b01 	ldrb.w	r2, [r1], #1
 801deb0:	f803 2f01 	strb.w	r2, [r3, #1]!
 801deb4:	e7f8      	b.n	801dea8 <memmove+0x12>
 801deb6:	4402      	add	r2, r0
 801deb8:	4601      	mov	r1, r0
 801deba:	428a      	cmp	r2, r1
 801debc:	d100      	bne.n	801dec0 <memmove+0x2a>
 801debe:	bd10      	pop	{r4, pc}
 801dec0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801dec4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801dec8:	e7f7      	b.n	801deba <memmove+0x24>

0801deca <memset>:
 801deca:	4402      	add	r2, r0
 801decc:	4603      	mov	r3, r0
 801dece:	4293      	cmp	r3, r2
 801ded0:	d100      	bne.n	801ded4 <memset+0xa>
 801ded2:	4770      	bx	lr
 801ded4:	f803 1b01 	strb.w	r1, [r3], #1
 801ded8:	e7f9      	b.n	801dece <memset+0x4>

0801deda <strncmp>:
 801deda:	b510      	push	{r4, lr}
 801dedc:	b16a      	cbz	r2, 801defa <strncmp+0x20>
 801dede:	3901      	subs	r1, #1
 801dee0:	1884      	adds	r4, r0, r2
 801dee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dee6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801deea:	429a      	cmp	r2, r3
 801deec:	d103      	bne.n	801def6 <strncmp+0x1c>
 801deee:	42a0      	cmp	r0, r4
 801def0:	d001      	beq.n	801def6 <strncmp+0x1c>
 801def2:	2a00      	cmp	r2, #0
 801def4:	d1f5      	bne.n	801dee2 <strncmp+0x8>
 801def6:	1ad0      	subs	r0, r2, r3
 801def8:	bd10      	pop	{r4, pc}
 801defa:	4610      	mov	r0, r2
 801defc:	e7fc      	b.n	801def8 <strncmp+0x1e>
	...

0801df00 <_localeconv_r>:
 801df00:	4800      	ldr	r0, [pc, #0]	@ (801df04 <_localeconv_r+0x4>)
 801df02:	4770      	bx	lr
 801df04:	20000180 	.word	0x20000180

0801df08 <_close_r>:
 801df08:	b538      	push	{r3, r4, r5, lr}
 801df0a:	4d06      	ldr	r5, [pc, #24]	@ (801df24 <_close_r+0x1c>)
 801df0c:	2300      	movs	r3, #0
 801df0e:	4604      	mov	r4, r0
 801df10:	4608      	mov	r0, r1
 801df12:	602b      	str	r3, [r5, #0]
 801df14:	f7e3 fd3a 	bl	800198c <_close>
 801df18:	1c43      	adds	r3, r0, #1
 801df1a:	d102      	bne.n	801df22 <_close_r+0x1a>
 801df1c:	682b      	ldr	r3, [r5, #0]
 801df1e:	b103      	cbz	r3, 801df22 <_close_r+0x1a>
 801df20:	6023      	str	r3, [r4, #0]
 801df22:	bd38      	pop	{r3, r4, r5, pc}
 801df24:	2000ef0c 	.word	0x2000ef0c

0801df28 <_reclaim_reent>:
 801df28:	4b29      	ldr	r3, [pc, #164]	@ (801dfd0 <_reclaim_reent+0xa8>)
 801df2a:	681b      	ldr	r3, [r3, #0]
 801df2c:	4283      	cmp	r3, r0
 801df2e:	b570      	push	{r4, r5, r6, lr}
 801df30:	4604      	mov	r4, r0
 801df32:	d04b      	beq.n	801dfcc <_reclaim_reent+0xa4>
 801df34:	69c3      	ldr	r3, [r0, #28]
 801df36:	b1ab      	cbz	r3, 801df64 <_reclaim_reent+0x3c>
 801df38:	68db      	ldr	r3, [r3, #12]
 801df3a:	b16b      	cbz	r3, 801df58 <_reclaim_reent+0x30>
 801df3c:	2500      	movs	r5, #0
 801df3e:	69e3      	ldr	r3, [r4, #28]
 801df40:	68db      	ldr	r3, [r3, #12]
 801df42:	5959      	ldr	r1, [r3, r5]
 801df44:	2900      	cmp	r1, #0
 801df46:	d13b      	bne.n	801dfc0 <_reclaim_reent+0x98>
 801df48:	3504      	adds	r5, #4
 801df4a:	2d80      	cmp	r5, #128	@ 0x80
 801df4c:	d1f7      	bne.n	801df3e <_reclaim_reent+0x16>
 801df4e:	69e3      	ldr	r3, [r4, #28]
 801df50:	4620      	mov	r0, r4
 801df52:	68d9      	ldr	r1, [r3, #12]
 801df54:	f000 ff20 	bl	801ed98 <_free_r>
 801df58:	69e3      	ldr	r3, [r4, #28]
 801df5a:	6819      	ldr	r1, [r3, #0]
 801df5c:	b111      	cbz	r1, 801df64 <_reclaim_reent+0x3c>
 801df5e:	4620      	mov	r0, r4
 801df60:	f000 ff1a 	bl	801ed98 <_free_r>
 801df64:	6961      	ldr	r1, [r4, #20]
 801df66:	b111      	cbz	r1, 801df6e <_reclaim_reent+0x46>
 801df68:	4620      	mov	r0, r4
 801df6a:	f000 ff15 	bl	801ed98 <_free_r>
 801df6e:	69e1      	ldr	r1, [r4, #28]
 801df70:	b111      	cbz	r1, 801df78 <_reclaim_reent+0x50>
 801df72:	4620      	mov	r0, r4
 801df74:	f000 ff10 	bl	801ed98 <_free_r>
 801df78:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801df7a:	b111      	cbz	r1, 801df82 <_reclaim_reent+0x5a>
 801df7c:	4620      	mov	r0, r4
 801df7e:	f000 ff0b 	bl	801ed98 <_free_r>
 801df82:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801df84:	b111      	cbz	r1, 801df8c <_reclaim_reent+0x64>
 801df86:	4620      	mov	r0, r4
 801df88:	f000 ff06 	bl	801ed98 <_free_r>
 801df8c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801df8e:	b111      	cbz	r1, 801df96 <_reclaim_reent+0x6e>
 801df90:	4620      	mov	r0, r4
 801df92:	f000 ff01 	bl	801ed98 <_free_r>
 801df96:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801df98:	b111      	cbz	r1, 801dfa0 <_reclaim_reent+0x78>
 801df9a:	4620      	mov	r0, r4
 801df9c:	f000 fefc 	bl	801ed98 <_free_r>
 801dfa0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801dfa2:	b111      	cbz	r1, 801dfaa <_reclaim_reent+0x82>
 801dfa4:	4620      	mov	r0, r4
 801dfa6:	f000 fef7 	bl	801ed98 <_free_r>
 801dfaa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801dfac:	b111      	cbz	r1, 801dfb4 <_reclaim_reent+0x8c>
 801dfae:	4620      	mov	r0, r4
 801dfb0:	f000 fef2 	bl	801ed98 <_free_r>
 801dfb4:	6a23      	ldr	r3, [r4, #32]
 801dfb6:	b14b      	cbz	r3, 801dfcc <_reclaim_reent+0xa4>
 801dfb8:	4620      	mov	r0, r4
 801dfba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801dfbe:	4718      	bx	r3
 801dfc0:	680e      	ldr	r6, [r1, #0]
 801dfc2:	4620      	mov	r0, r4
 801dfc4:	f000 fee8 	bl	801ed98 <_free_r>
 801dfc8:	4631      	mov	r1, r6
 801dfca:	e7bb      	b.n	801df44 <_reclaim_reent+0x1c>
 801dfcc:	bd70      	pop	{r4, r5, r6, pc}
 801dfce:	bf00      	nop
 801dfd0:	20000040 	.word	0x20000040

0801dfd4 <_lseek_r>:
 801dfd4:	b538      	push	{r3, r4, r5, lr}
 801dfd6:	4d07      	ldr	r5, [pc, #28]	@ (801dff4 <_lseek_r+0x20>)
 801dfd8:	4604      	mov	r4, r0
 801dfda:	4608      	mov	r0, r1
 801dfdc:	4611      	mov	r1, r2
 801dfde:	2200      	movs	r2, #0
 801dfe0:	602a      	str	r2, [r5, #0]
 801dfe2:	461a      	mov	r2, r3
 801dfe4:	f7e3 fcf9 	bl	80019da <_lseek>
 801dfe8:	1c43      	adds	r3, r0, #1
 801dfea:	d102      	bne.n	801dff2 <_lseek_r+0x1e>
 801dfec:	682b      	ldr	r3, [r5, #0]
 801dfee:	b103      	cbz	r3, 801dff2 <_lseek_r+0x1e>
 801dff0:	6023      	str	r3, [r4, #0]
 801dff2:	bd38      	pop	{r3, r4, r5, pc}
 801dff4:	2000ef0c 	.word	0x2000ef0c

0801dff8 <_read_r>:
 801dff8:	b538      	push	{r3, r4, r5, lr}
 801dffa:	4d07      	ldr	r5, [pc, #28]	@ (801e018 <_read_r+0x20>)
 801dffc:	4604      	mov	r4, r0
 801dffe:	4608      	mov	r0, r1
 801e000:	4611      	mov	r1, r2
 801e002:	2200      	movs	r2, #0
 801e004:	602a      	str	r2, [r5, #0]
 801e006:	461a      	mov	r2, r3
 801e008:	f7e3 fc87 	bl	800191a <_read>
 801e00c:	1c43      	adds	r3, r0, #1
 801e00e:	d102      	bne.n	801e016 <_read_r+0x1e>
 801e010:	682b      	ldr	r3, [r5, #0]
 801e012:	b103      	cbz	r3, 801e016 <_read_r+0x1e>
 801e014:	6023      	str	r3, [r4, #0]
 801e016:	bd38      	pop	{r3, r4, r5, pc}
 801e018:	2000ef0c 	.word	0x2000ef0c

0801e01c <_write_r>:
 801e01c:	b538      	push	{r3, r4, r5, lr}
 801e01e:	4d07      	ldr	r5, [pc, #28]	@ (801e03c <_write_r+0x20>)
 801e020:	4604      	mov	r4, r0
 801e022:	4608      	mov	r0, r1
 801e024:	4611      	mov	r1, r2
 801e026:	2200      	movs	r2, #0
 801e028:	602a      	str	r2, [r5, #0]
 801e02a:	461a      	mov	r2, r3
 801e02c:	f7e3 fc92 	bl	8001954 <_write>
 801e030:	1c43      	adds	r3, r0, #1
 801e032:	d102      	bne.n	801e03a <_write_r+0x1e>
 801e034:	682b      	ldr	r3, [r5, #0]
 801e036:	b103      	cbz	r3, 801e03a <_write_r+0x1e>
 801e038:	6023      	str	r3, [r4, #0]
 801e03a:	bd38      	pop	{r3, r4, r5, pc}
 801e03c:	2000ef0c 	.word	0x2000ef0c

0801e040 <__errno>:
 801e040:	4b01      	ldr	r3, [pc, #4]	@ (801e048 <__errno+0x8>)
 801e042:	6818      	ldr	r0, [r3, #0]
 801e044:	4770      	bx	lr
 801e046:	bf00      	nop
 801e048:	20000040 	.word	0x20000040

0801e04c <__libc_init_array>:
 801e04c:	b570      	push	{r4, r5, r6, lr}
 801e04e:	4d0d      	ldr	r5, [pc, #52]	@ (801e084 <__libc_init_array+0x38>)
 801e050:	4c0d      	ldr	r4, [pc, #52]	@ (801e088 <__libc_init_array+0x3c>)
 801e052:	1b64      	subs	r4, r4, r5
 801e054:	10a4      	asrs	r4, r4, #2
 801e056:	2600      	movs	r6, #0
 801e058:	42a6      	cmp	r6, r4
 801e05a:	d109      	bne.n	801e070 <__libc_init_array+0x24>
 801e05c:	4d0b      	ldr	r5, [pc, #44]	@ (801e08c <__libc_init_array+0x40>)
 801e05e:	4c0c      	ldr	r4, [pc, #48]	@ (801e090 <__libc_init_array+0x44>)
 801e060:	f003 faca 	bl	80215f8 <_init>
 801e064:	1b64      	subs	r4, r4, r5
 801e066:	10a4      	asrs	r4, r4, #2
 801e068:	2600      	movs	r6, #0
 801e06a:	42a6      	cmp	r6, r4
 801e06c:	d105      	bne.n	801e07a <__libc_init_array+0x2e>
 801e06e:	bd70      	pop	{r4, r5, r6, pc}
 801e070:	f855 3b04 	ldr.w	r3, [r5], #4
 801e074:	4798      	blx	r3
 801e076:	3601      	adds	r6, #1
 801e078:	e7ee      	b.n	801e058 <__libc_init_array+0xc>
 801e07a:	f855 3b04 	ldr.w	r3, [r5], #4
 801e07e:	4798      	blx	r3
 801e080:	3601      	adds	r6, #1
 801e082:	e7f2      	b.n	801e06a <__libc_init_array+0x1e>
 801e084:	08025be4 	.word	0x08025be4
 801e088:	08025be4 	.word	0x08025be4
 801e08c:	08025be4 	.word	0x08025be4
 801e090:	08025be8 	.word	0x08025be8

0801e094 <__retarget_lock_init_recursive>:
 801e094:	4770      	bx	lr

0801e096 <__retarget_lock_acquire_recursive>:
 801e096:	4770      	bx	lr

0801e098 <__retarget_lock_release_recursive>:
 801e098:	4770      	bx	lr

0801e09a <memcpy>:
 801e09a:	440a      	add	r2, r1
 801e09c:	4291      	cmp	r1, r2
 801e09e:	f100 33ff 	add.w	r3, r0, #4294967295
 801e0a2:	d100      	bne.n	801e0a6 <memcpy+0xc>
 801e0a4:	4770      	bx	lr
 801e0a6:	b510      	push	{r4, lr}
 801e0a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e0ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e0b0:	4291      	cmp	r1, r2
 801e0b2:	d1f9      	bne.n	801e0a8 <memcpy+0xe>
 801e0b4:	bd10      	pop	{r4, pc}
	...

0801e0b8 <nanf>:
 801e0b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801e0c0 <nanf+0x8>
 801e0bc:	4770      	bx	lr
 801e0be:	bf00      	nop
 801e0c0:	7fc00000 	.word	0x7fc00000

0801e0c4 <__assert_func>:
 801e0c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801e0c6:	4614      	mov	r4, r2
 801e0c8:	461a      	mov	r2, r3
 801e0ca:	4b09      	ldr	r3, [pc, #36]	@ (801e0f0 <__assert_func+0x2c>)
 801e0cc:	681b      	ldr	r3, [r3, #0]
 801e0ce:	4605      	mov	r5, r0
 801e0d0:	68d8      	ldr	r0, [r3, #12]
 801e0d2:	b954      	cbnz	r4, 801e0ea <__assert_func+0x26>
 801e0d4:	4b07      	ldr	r3, [pc, #28]	@ (801e0f4 <__assert_func+0x30>)
 801e0d6:	461c      	mov	r4, r3
 801e0d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801e0dc:	9100      	str	r1, [sp, #0]
 801e0de:	462b      	mov	r3, r5
 801e0e0:	4905      	ldr	r1, [pc, #20]	@ (801e0f8 <__assert_func+0x34>)
 801e0e2:	f002 fd59 	bl	8020b98 <fiprintf>
 801e0e6:	f002 fe17 	bl	8020d18 <abort>
 801e0ea:	4b04      	ldr	r3, [pc, #16]	@ (801e0fc <__assert_func+0x38>)
 801e0ec:	e7f4      	b.n	801e0d8 <__assert_func+0x14>
 801e0ee:	bf00      	nop
 801e0f0:	20000040 	.word	0x20000040
 801e0f4:	0802593a 	.word	0x0802593a
 801e0f8:	0802590c 	.word	0x0802590c
 801e0fc:	080258ff 	.word	0x080258ff

0801e100 <quorem>:
 801e100:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e104:	6903      	ldr	r3, [r0, #16]
 801e106:	690c      	ldr	r4, [r1, #16]
 801e108:	42a3      	cmp	r3, r4
 801e10a:	4607      	mov	r7, r0
 801e10c:	db7e      	blt.n	801e20c <quorem+0x10c>
 801e10e:	3c01      	subs	r4, #1
 801e110:	f101 0814 	add.w	r8, r1, #20
 801e114:	00a3      	lsls	r3, r4, #2
 801e116:	f100 0514 	add.w	r5, r0, #20
 801e11a:	9300      	str	r3, [sp, #0]
 801e11c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e120:	9301      	str	r3, [sp, #4]
 801e122:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801e126:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e12a:	3301      	adds	r3, #1
 801e12c:	429a      	cmp	r2, r3
 801e12e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801e132:	fbb2 f6f3 	udiv	r6, r2, r3
 801e136:	d32e      	bcc.n	801e196 <quorem+0x96>
 801e138:	f04f 0a00 	mov.w	sl, #0
 801e13c:	46c4      	mov	ip, r8
 801e13e:	46ae      	mov	lr, r5
 801e140:	46d3      	mov	fp, sl
 801e142:	f85c 3b04 	ldr.w	r3, [ip], #4
 801e146:	b298      	uxth	r0, r3
 801e148:	fb06 a000 	mla	r0, r6, r0, sl
 801e14c:	0c02      	lsrs	r2, r0, #16
 801e14e:	0c1b      	lsrs	r3, r3, #16
 801e150:	fb06 2303 	mla	r3, r6, r3, r2
 801e154:	f8de 2000 	ldr.w	r2, [lr]
 801e158:	b280      	uxth	r0, r0
 801e15a:	b292      	uxth	r2, r2
 801e15c:	1a12      	subs	r2, r2, r0
 801e15e:	445a      	add	r2, fp
 801e160:	f8de 0000 	ldr.w	r0, [lr]
 801e164:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801e168:	b29b      	uxth	r3, r3
 801e16a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801e16e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801e172:	b292      	uxth	r2, r2
 801e174:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801e178:	45e1      	cmp	r9, ip
 801e17a:	f84e 2b04 	str.w	r2, [lr], #4
 801e17e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801e182:	d2de      	bcs.n	801e142 <quorem+0x42>
 801e184:	9b00      	ldr	r3, [sp, #0]
 801e186:	58eb      	ldr	r3, [r5, r3]
 801e188:	b92b      	cbnz	r3, 801e196 <quorem+0x96>
 801e18a:	9b01      	ldr	r3, [sp, #4]
 801e18c:	3b04      	subs	r3, #4
 801e18e:	429d      	cmp	r5, r3
 801e190:	461a      	mov	r2, r3
 801e192:	d32f      	bcc.n	801e1f4 <quorem+0xf4>
 801e194:	613c      	str	r4, [r7, #16]
 801e196:	4638      	mov	r0, r7
 801e198:	f001 f9c2 	bl	801f520 <__mcmp>
 801e19c:	2800      	cmp	r0, #0
 801e19e:	db25      	blt.n	801e1ec <quorem+0xec>
 801e1a0:	4629      	mov	r1, r5
 801e1a2:	2000      	movs	r0, #0
 801e1a4:	f858 2b04 	ldr.w	r2, [r8], #4
 801e1a8:	f8d1 c000 	ldr.w	ip, [r1]
 801e1ac:	fa1f fe82 	uxth.w	lr, r2
 801e1b0:	fa1f f38c 	uxth.w	r3, ip
 801e1b4:	eba3 030e 	sub.w	r3, r3, lr
 801e1b8:	4403      	add	r3, r0
 801e1ba:	0c12      	lsrs	r2, r2, #16
 801e1bc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801e1c0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801e1c4:	b29b      	uxth	r3, r3
 801e1c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801e1ca:	45c1      	cmp	r9, r8
 801e1cc:	f841 3b04 	str.w	r3, [r1], #4
 801e1d0:	ea4f 4022 	mov.w	r0, r2, asr #16
 801e1d4:	d2e6      	bcs.n	801e1a4 <quorem+0xa4>
 801e1d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801e1da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801e1de:	b922      	cbnz	r2, 801e1ea <quorem+0xea>
 801e1e0:	3b04      	subs	r3, #4
 801e1e2:	429d      	cmp	r5, r3
 801e1e4:	461a      	mov	r2, r3
 801e1e6:	d30b      	bcc.n	801e200 <quorem+0x100>
 801e1e8:	613c      	str	r4, [r7, #16]
 801e1ea:	3601      	adds	r6, #1
 801e1ec:	4630      	mov	r0, r6
 801e1ee:	b003      	add	sp, #12
 801e1f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1f4:	6812      	ldr	r2, [r2, #0]
 801e1f6:	3b04      	subs	r3, #4
 801e1f8:	2a00      	cmp	r2, #0
 801e1fa:	d1cb      	bne.n	801e194 <quorem+0x94>
 801e1fc:	3c01      	subs	r4, #1
 801e1fe:	e7c6      	b.n	801e18e <quorem+0x8e>
 801e200:	6812      	ldr	r2, [r2, #0]
 801e202:	3b04      	subs	r3, #4
 801e204:	2a00      	cmp	r2, #0
 801e206:	d1ef      	bne.n	801e1e8 <quorem+0xe8>
 801e208:	3c01      	subs	r4, #1
 801e20a:	e7ea      	b.n	801e1e2 <quorem+0xe2>
 801e20c:	2000      	movs	r0, #0
 801e20e:	e7ee      	b.n	801e1ee <quorem+0xee>

0801e210 <_dtoa_r>:
 801e210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e214:	69c7      	ldr	r7, [r0, #28]
 801e216:	b099      	sub	sp, #100	@ 0x64
 801e218:	ed8d 0b02 	vstr	d0, [sp, #8]
 801e21c:	ec55 4b10 	vmov	r4, r5, d0
 801e220:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801e222:	9109      	str	r1, [sp, #36]	@ 0x24
 801e224:	4683      	mov	fp, r0
 801e226:	920e      	str	r2, [sp, #56]	@ 0x38
 801e228:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e22a:	b97f      	cbnz	r7, 801e24c <_dtoa_r+0x3c>
 801e22c:	2010      	movs	r0, #16
 801e22e:	f000 fdfd 	bl	801ee2c <malloc>
 801e232:	4602      	mov	r2, r0
 801e234:	f8cb 001c 	str.w	r0, [fp, #28]
 801e238:	b920      	cbnz	r0, 801e244 <_dtoa_r+0x34>
 801e23a:	4ba7      	ldr	r3, [pc, #668]	@ (801e4d8 <_dtoa_r+0x2c8>)
 801e23c:	21ef      	movs	r1, #239	@ 0xef
 801e23e:	48a7      	ldr	r0, [pc, #668]	@ (801e4dc <_dtoa_r+0x2cc>)
 801e240:	f7ff ff40 	bl	801e0c4 <__assert_func>
 801e244:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801e248:	6007      	str	r7, [r0, #0]
 801e24a:	60c7      	str	r7, [r0, #12]
 801e24c:	f8db 301c 	ldr.w	r3, [fp, #28]
 801e250:	6819      	ldr	r1, [r3, #0]
 801e252:	b159      	cbz	r1, 801e26c <_dtoa_r+0x5c>
 801e254:	685a      	ldr	r2, [r3, #4]
 801e256:	604a      	str	r2, [r1, #4]
 801e258:	2301      	movs	r3, #1
 801e25a:	4093      	lsls	r3, r2
 801e25c:	608b      	str	r3, [r1, #8]
 801e25e:	4658      	mov	r0, fp
 801e260:	f000 feda 	bl	801f018 <_Bfree>
 801e264:	f8db 301c 	ldr.w	r3, [fp, #28]
 801e268:	2200      	movs	r2, #0
 801e26a:	601a      	str	r2, [r3, #0]
 801e26c:	1e2b      	subs	r3, r5, #0
 801e26e:	bfb9      	ittee	lt
 801e270:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801e274:	9303      	strlt	r3, [sp, #12]
 801e276:	2300      	movge	r3, #0
 801e278:	6033      	strge	r3, [r6, #0]
 801e27a:	9f03      	ldr	r7, [sp, #12]
 801e27c:	4b98      	ldr	r3, [pc, #608]	@ (801e4e0 <_dtoa_r+0x2d0>)
 801e27e:	bfbc      	itt	lt
 801e280:	2201      	movlt	r2, #1
 801e282:	6032      	strlt	r2, [r6, #0]
 801e284:	43bb      	bics	r3, r7
 801e286:	d112      	bne.n	801e2ae <_dtoa_r+0x9e>
 801e288:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e28a:	f242 730f 	movw	r3, #9999	@ 0x270f
 801e28e:	6013      	str	r3, [r2, #0]
 801e290:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801e294:	4323      	orrs	r3, r4
 801e296:	f000 854d 	beq.w	801ed34 <_dtoa_r+0xb24>
 801e29a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e29c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801e4f4 <_dtoa_r+0x2e4>
 801e2a0:	2b00      	cmp	r3, #0
 801e2a2:	f000 854f 	beq.w	801ed44 <_dtoa_r+0xb34>
 801e2a6:	f10a 0303 	add.w	r3, sl, #3
 801e2aa:	f000 bd49 	b.w	801ed40 <_dtoa_r+0xb30>
 801e2ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 801e2b2:	2200      	movs	r2, #0
 801e2b4:	ec51 0b17 	vmov	r0, r1, d7
 801e2b8:	2300      	movs	r3, #0
 801e2ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801e2be:	f7e2 fc03 	bl	8000ac8 <__aeabi_dcmpeq>
 801e2c2:	4680      	mov	r8, r0
 801e2c4:	b158      	cbz	r0, 801e2de <_dtoa_r+0xce>
 801e2c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e2c8:	2301      	movs	r3, #1
 801e2ca:	6013      	str	r3, [r2, #0]
 801e2cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e2ce:	b113      	cbz	r3, 801e2d6 <_dtoa_r+0xc6>
 801e2d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801e2d2:	4b84      	ldr	r3, [pc, #528]	@ (801e4e4 <_dtoa_r+0x2d4>)
 801e2d4:	6013      	str	r3, [r2, #0]
 801e2d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801e4f8 <_dtoa_r+0x2e8>
 801e2da:	f000 bd33 	b.w	801ed44 <_dtoa_r+0xb34>
 801e2de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801e2e2:	aa16      	add	r2, sp, #88	@ 0x58
 801e2e4:	a917      	add	r1, sp, #92	@ 0x5c
 801e2e6:	4658      	mov	r0, fp
 801e2e8:	f001 fa3a 	bl	801f760 <__d2b>
 801e2ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801e2f0:	4681      	mov	r9, r0
 801e2f2:	2e00      	cmp	r6, #0
 801e2f4:	d077      	beq.n	801e3e6 <_dtoa_r+0x1d6>
 801e2f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e2f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801e2fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e304:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801e308:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801e30c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801e310:	4619      	mov	r1, r3
 801e312:	2200      	movs	r2, #0
 801e314:	4b74      	ldr	r3, [pc, #464]	@ (801e4e8 <_dtoa_r+0x2d8>)
 801e316:	f7e1 ffb7 	bl	8000288 <__aeabi_dsub>
 801e31a:	a369      	add	r3, pc, #420	@ (adr r3, 801e4c0 <_dtoa_r+0x2b0>)
 801e31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e320:	f7e2 f96a 	bl	80005f8 <__aeabi_dmul>
 801e324:	a368      	add	r3, pc, #416	@ (adr r3, 801e4c8 <_dtoa_r+0x2b8>)
 801e326:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e32a:	f7e1 ffaf 	bl	800028c <__adddf3>
 801e32e:	4604      	mov	r4, r0
 801e330:	4630      	mov	r0, r6
 801e332:	460d      	mov	r5, r1
 801e334:	f7e2 f8f6 	bl	8000524 <__aeabi_i2d>
 801e338:	a365      	add	r3, pc, #404	@ (adr r3, 801e4d0 <_dtoa_r+0x2c0>)
 801e33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e33e:	f7e2 f95b 	bl	80005f8 <__aeabi_dmul>
 801e342:	4602      	mov	r2, r0
 801e344:	460b      	mov	r3, r1
 801e346:	4620      	mov	r0, r4
 801e348:	4629      	mov	r1, r5
 801e34a:	f7e1 ff9f 	bl	800028c <__adddf3>
 801e34e:	4604      	mov	r4, r0
 801e350:	460d      	mov	r5, r1
 801e352:	f7e2 fc01 	bl	8000b58 <__aeabi_d2iz>
 801e356:	2200      	movs	r2, #0
 801e358:	4607      	mov	r7, r0
 801e35a:	2300      	movs	r3, #0
 801e35c:	4620      	mov	r0, r4
 801e35e:	4629      	mov	r1, r5
 801e360:	f7e2 fbbc 	bl	8000adc <__aeabi_dcmplt>
 801e364:	b140      	cbz	r0, 801e378 <_dtoa_r+0x168>
 801e366:	4638      	mov	r0, r7
 801e368:	f7e2 f8dc 	bl	8000524 <__aeabi_i2d>
 801e36c:	4622      	mov	r2, r4
 801e36e:	462b      	mov	r3, r5
 801e370:	f7e2 fbaa 	bl	8000ac8 <__aeabi_dcmpeq>
 801e374:	b900      	cbnz	r0, 801e378 <_dtoa_r+0x168>
 801e376:	3f01      	subs	r7, #1
 801e378:	2f16      	cmp	r7, #22
 801e37a:	d851      	bhi.n	801e420 <_dtoa_r+0x210>
 801e37c:	4b5b      	ldr	r3, [pc, #364]	@ (801e4ec <_dtoa_r+0x2dc>)
 801e37e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e382:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e386:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e38a:	f7e2 fba7 	bl	8000adc <__aeabi_dcmplt>
 801e38e:	2800      	cmp	r0, #0
 801e390:	d048      	beq.n	801e424 <_dtoa_r+0x214>
 801e392:	3f01      	subs	r7, #1
 801e394:	2300      	movs	r3, #0
 801e396:	9312      	str	r3, [sp, #72]	@ 0x48
 801e398:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801e39a:	1b9b      	subs	r3, r3, r6
 801e39c:	1e5a      	subs	r2, r3, #1
 801e39e:	bf44      	itt	mi
 801e3a0:	f1c3 0801 	rsbmi	r8, r3, #1
 801e3a4:	2300      	movmi	r3, #0
 801e3a6:	9208      	str	r2, [sp, #32]
 801e3a8:	bf54      	ite	pl
 801e3aa:	f04f 0800 	movpl.w	r8, #0
 801e3ae:	9308      	strmi	r3, [sp, #32]
 801e3b0:	2f00      	cmp	r7, #0
 801e3b2:	db39      	blt.n	801e428 <_dtoa_r+0x218>
 801e3b4:	9b08      	ldr	r3, [sp, #32]
 801e3b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 801e3b8:	443b      	add	r3, r7
 801e3ba:	9308      	str	r3, [sp, #32]
 801e3bc:	2300      	movs	r3, #0
 801e3be:	930a      	str	r3, [sp, #40]	@ 0x28
 801e3c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e3c2:	2b09      	cmp	r3, #9
 801e3c4:	d864      	bhi.n	801e490 <_dtoa_r+0x280>
 801e3c6:	2b05      	cmp	r3, #5
 801e3c8:	bfc4      	itt	gt
 801e3ca:	3b04      	subgt	r3, #4
 801e3cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801e3ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e3d0:	f1a3 0302 	sub.w	r3, r3, #2
 801e3d4:	bfcc      	ite	gt
 801e3d6:	2400      	movgt	r4, #0
 801e3d8:	2401      	movle	r4, #1
 801e3da:	2b03      	cmp	r3, #3
 801e3dc:	d863      	bhi.n	801e4a6 <_dtoa_r+0x296>
 801e3de:	e8df f003 	tbb	[pc, r3]
 801e3e2:	372a      	.short	0x372a
 801e3e4:	5535      	.short	0x5535
 801e3e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801e3ea:	441e      	add	r6, r3
 801e3ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801e3f0:	2b20      	cmp	r3, #32
 801e3f2:	bfc1      	itttt	gt
 801e3f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801e3f8:	409f      	lslgt	r7, r3
 801e3fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801e3fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 801e402:	bfd6      	itet	le
 801e404:	f1c3 0320 	rsble	r3, r3, #32
 801e408:	ea47 0003 	orrgt.w	r0, r7, r3
 801e40c:	fa04 f003 	lslle.w	r0, r4, r3
 801e410:	f7e2 f878 	bl	8000504 <__aeabi_ui2d>
 801e414:	2201      	movs	r2, #1
 801e416:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801e41a:	3e01      	subs	r6, #1
 801e41c:	9214      	str	r2, [sp, #80]	@ 0x50
 801e41e:	e777      	b.n	801e310 <_dtoa_r+0x100>
 801e420:	2301      	movs	r3, #1
 801e422:	e7b8      	b.n	801e396 <_dtoa_r+0x186>
 801e424:	9012      	str	r0, [sp, #72]	@ 0x48
 801e426:	e7b7      	b.n	801e398 <_dtoa_r+0x188>
 801e428:	427b      	negs	r3, r7
 801e42a:	930a      	str	r3, [sp, #40]	@ 0x28
 801e42c:	2300      	movs	r3, #0
 801e42e:	eba8 0807 	sub.w	r8, r8, r7
 801e432:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e434:	e7c4      	b.n	801e3c0 <_dtoa_r+0x1b0>
 801e436:	2300      	movs	r3, #0
 801e438:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e43a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	dc35      	bgt.n	801e4ac <_dtoa_r+0x29c>
 801e440:	2301      	movs	r3, #1
 801e442:	9300      	str	r3, [sp, #0]
 801e444:	9307      	str	r3, [sp, #28]
 801e446:	461a      	mov	r2, r3
 801e448:	920e      	str	r2, [sp, #56]	@ 0x38
 801e44a:	e00b      	b.n	801e464 <_dtoa_r+0x254>
 801e44c:	2301      	movs	r3, #1
 801e44e:	e7f3      	b.n	801e438 <_dtoa_r+0x228>
 801e450:	2300      	movs	r3, #0
 801e452:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e454:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e456:	18fb      	adds	r3, r7, r3
 801e458:	9300      	str	r3, [sp, #0]
 801e45a:	3301      	adds	r3, #1
 801e45c:	2b01      	cmp	r3, #1
 801e45e:	9307      	str	r3, [sp, #28]
 801e460:	bfb8      	it	lt
 801e462:	2301      	movlt	r3, #1
 801e464:	f8db 001c 	ldr.w	r0, [fp, #28]
 801e468:	2100      	movs	r1, #0
 801e46a:	2204      	movs	r2, #4
 801e46c:	f102 0514 	add.w	r5, r2, #20
 801e470:	429d      	cmp	r5, r3
 801e472:	d91f      	bls.n	801e4b4 <_dtoa_r+0x2a4>
 801e474:	6041      	str	r1, [r0, #4]
 801e476:	4658      	mov	r0, fp
 801e478:	f000 fd8e 	bl	801ef98 <_Balloc>
 801e47c:	4682      	mov	sl, r0
 801e47e:	2800      	cmp	r0, #0
 801e480:	d13c      	bne.n	801e4fc <_dtoa_r+0x2ec>
 801e482:	4b1b      	ldr	r3, [pc, #108]	@ (801e4f0 <_dtoa_r+0x2e0>)
 801e484:	4602      	mov	r2, r0
 801e486:	f240 11af 	movw	r1, #431	@ 0x1af
 801e48a:	e6d8      	b.n	801e23e <_dtoa_r+0x2e>
 801e48c:	2301      	movs	r3, #1
 801e48e:	e7e0      	b.n	801e452 <_dtoa_r+0x242>
 801e490:	2401      	movs	r4, #1
 801e492:	2300      	movs	r3, #0
 801e494:	9309      	str	r3, [sp, #36]	@ 0x24
 801e496:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e498:	f04f 33ff 	mov.w	r3, #4294967295
 801e49c:	9300      	str	r3, [sp, #0]
 801e49e:	9307      	str	r3, [sp, #28]
 801e4a0:	2200      	movs	r2, #0
 801e4a2:	2312      	movs	r3, #18
 801e4a4:	e7d0      	b.n	801e448 <_dtoa_r+0x238>
 801e4a6:	2301      	movs	r3, #1
 801e4a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e4aa:	e7f5      	b.n	801e498 <_dtoa_r+0x288>
 801e4ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e4ae:	9300      	str	r3, [sp, #0]
 801e4b0:	9307      	str	r3, [sp, #28]
 801e4b2:	e7d7      	b.n	801e464 <_dtoa_r+0x254>
 801e4b4:	3101      	adds	r1, #1
 801e4b6:	0052      	lsls	r2, r2, #1
 801e4b8:	e7d8      	b.n	801e46c <_dtoa_r+0x25c>
 801e4ba:	bf00      	nop
 801e4bc:	f3af 8000 	nop.w
 801e4c0:	636f4361 	.word	0x636f4361
 801e4c4:	3fd287a7 	.word	0x3fd287a7
 801e4c8:	8b60c8b3 	.word	0x8b60c8b3
 801e4cc:	3fc68a28 	.word	0x3fc68a28
 801e4d0:	509f79fb 	.word	0x509f79fb
 801e4d4:	3fd34413 	.word	0x3fd34413
 801e4d8:	08025756 	.word	0x08025756
 801e4dc:	08025948 	.word	0x08025948
 801e4e0:	7ff00000 	.word	0x7ff00000
 801e4e4:	080258d7 	.word	0x080258d7
 801e4e8:	3ff80000 	.word	0x3ff80000
 801e4ec:	08025a40 	.word	0x08025a40
 801e4f0:	080259a0 	.word	0x080259a0
 801e4f4:	08025944 	.word	0x08025944
 801e4f8:	080258d6 	.word	0x080258d6
 801e4fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 801e500:	6018      	str	r0, [r3, #0]
 801e502:	9b07      	ldr	r3, [sp, #28]
 801e504:	2b0e      	cmp	r3, #14
 801e506:	f200 80a4 	bhi.w	801e652 <_dtoa_r+0x442>
 801e50a:	2c00      	cmp	r4, #0
 801e50c:	f000 80a1 	beq.w	801e652 <_dtoa_r+0x442>
 801e510:	2f00      	cmp	r7, #0
 801e512:	dd33      	ble.n	801e57c <_dtoa_r+0x36c>
 801e514:	4bad      	ldr	r3, [pc, #692]	@ (801e7cc <_dtoa_r+0x5bc>)
 801e516:	f007 020f 	and.w	r2, r7, #15
 801e51a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e51e:	ed93 7b00 	vldr	d7, [r3]
 801e522:	05f8      	lsls	r0, r7, #23
 801e524:	ed8d 7b04 	vstr	d7, [sp, #16]
 801e528:	ea4f 1427 	mov.w	r4, r7, asr #4
 801e52c:	d516      	bpl.n	801e55c <_dtoa_r+0x34c>
 801e52e:	4ba8      	ldr	r3, [pc, #672]	@ (801e7d0 <_dtoa_r+0x5c0>)
 801e530:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e534:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801e538:	f7e2 f988 	bl	800084c <__aeabi_ddiv>
 801e53c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e540:	f004 040f 	and.w	r4, r4, #15
 801e544:	2603      	movs	r6, #3
 801e546:	4da2      	ldr	r5, [pc, #648]	@ (801e7d0 <_dtoa_r+0x5c0>)
 801e548:	b954      	cbnz	r4, 801e560 <_dtoa_r+0x350>
 801e54a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801e54e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e552:	f7e2 f97b 	bl	800084c <__aeabi_ddiv>
 801e556:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e55a:	e028      	b.n	801e5ae <_dtoa_r+0x39e>
 801e55c:	2602      	movs	r6, #2
 801e55e:	e7f2      	b.n	801e546 <_dtoa_r+0x336>
 801e560:	07e1      	lsls	r1, r4, #31
 801e562:	d508      	bpl.n	801e576 <_dtoa_r+0x366>
 801e564:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801e568:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e56c:	f7e2 f844 	bl	80005f8 <__aeabi_dmul>
 801e570:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801e574:	3601      	adds	r6, #1
 801e576:	1064      	asrs	r4, r4, #1
 801e578:	3508      	adds	r5, #8
 801e57a:	e7e5      	b.n	801e548 <_dtoa_r+0x338>
 801e57c:	f000 80d2 	beq.w	801e724 <_dtoa_r+0x514>
 801e580:	427c      	negs	r4, r7
 801e582:	4b92      	ldr	r3, [pc, #584]	@ (801e7cc <_dtoa_r+0x5bc>)
 801e584:	4d92      	ldr	r5, [pc, #584]	@ (801e7d0 <_dtoa_r+0x5c0>)
 801e586:	f004 020f 	and.w	r2, r4, #15
 801e58a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801e58e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e592:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801e596:	f7e2 f82f 	bl	80005f8 <__aeabi_dmul>
 801e59a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e59e:	1124      	asrs	r4, r4, #4
 801e5a0:	2300      	movs	r3, #0
 801e5a2:	2602      	movs	r6, #2
 801e5a4:	2c00      	cmp	r4, #0
 801e5a6:	f040 80b2 	bne.w	801e70e <_dtoa_r+0x4fe>
 801e5aa:	2b00      	cmp	r3, #0
 801e5ac:	d1d3      	bne.n	801e556 <_dtoa_r+0x346>
 801e5ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801e5b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801e5b4:	2b00      	cmp	r3, #0
 801e5b6:	f000 80b7 	beq.w	801e728 <_dtoa_r+0x518>
 801e5ba:	4b86      	ldr	r3, [pc, #536]	@ (801e7d4 <_dtoa_r+0x5c4>)
 801e5bc:	2200      	movs	r2, #0
 801e5be:	4620      	mov	r0, r4
 801e5c0:	4629      	mov	r1, r5
 801e5c2:	f7e2 fa8b 	bl	8000adc <__aeabi_dcmplt>
 801e5c6:	2800      	cmp	r0, #0
 801e5c8:	f000 80ae 	beq.w	801e728 <_dtoa_r+0x518>
 801e5cc:	9b07      	ldr	r3, [sp, #28]
 801e5ce:	2b00      	cmp	r3, #0
 801e5d0:	f000 80aa 	beq.w	801e728 <_dtoa_r+0x518>
 801e5d4:	9b00      	ldr	r3, [sp, #0]
 801e5d6:	2b00      	cmp	r3, #0
 801e5d8:	dd37      	ble.n	801e64a <_dtoa_r+0x43a>
 801e5da:	1e7b      	subs	r3, r7, #1
 801e5dc:	9304      	str	r3, [sp, #16]
 801e5de:	4620      	mov	r0, r4
 801e5e0:	4b7d      	ldr	r3, [pc, #500]	@ (801e7d8 <_dtoa_r+0x5c8>)
 801e5e2:	2200      	movs	r2, #0
 801e5e4:	4629      	mov	r1, r5
 801e5e6:	f7e2 f807 	bl	80005f8 <__aeabi_dmul>
 801e5ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e5ee:	9c00      	ldr	r4, [sp, #0]
 801e5f0:	3601      	adds	r6, #1
 801e5f2:	4630      	mov	r0, r6
 801e5f4:	f7e1 ff96 	bl	8000524 <__aeabi_i2d>
 801e5f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e5fc:	f7e1 fffc 	bl	80005f8 <__aeabi_dmul>
 801e600:	4b76      	ldr	r3, [pc, #472]	@ (801e7dc <_dtoa_r+0x5cc>)
 801e602:	2200      	movs	r2, #0
 801e604:	f7e1 fe42 	bl	800028c <__adddf3>
 801e608:	4605      	mov	r5, r0
 801e60a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801e60e:	2c00      	cmp	r4, #0
 801e610:	f040 808d 	bne.w	801e72e <_dtoa_r+0x51e>
 801e614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e618:	4b71      	ldr	r3, [pc, #452]	@ (801e7e0 <_dtoa_r+0x5d0>)
 801e61a:	2200      	movs	r2, #0
 801e61c:	f7e1 fe34 	bl	8000288 <__aeabi_dsub>
 801e620:	4602      	mov	r2, r0
 801e622:	460b      	mov	r3, r1
 801e624:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e628:	462a      	mov	r2, r5
 801e62a:	4633      	mov	r3, r6
 801e62c:	f7e2 fa74 	bl	8000b18 <__aeabi_dcmpgt>
 801e630:	2800      	cmp	r0, #0
 801e632:	f040 828b 	bne.w	801eb4c <_dtoa_r+0x93c>
 801e636:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e63a:	462a      	mov	r2, r5
 801e63c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801e640:	f7e2 fa4c 	bl	8000adc <__aeabi_dcmplt>
 801e644:	2800      	cmp	r0, #0
 801e646:	f040 8128 	bne.w	801e89a <_dtoa_r+0x68a>
 801e64a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801e64e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801e652:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e654:	2b00      	cmp	r3, #0
 801e656:	f2c0 815a 	blt.w	801e90e <_dtoa_r+0x6fe>
 801e65a:	2f0e      	cmp	r7, #14
 801e65c:	f300 8157 	bgt.w	801e90e <_dtoa_r+0x6fe>
 801e660:	4b5a      	ldr	r3, [pc, #360]	@ (801e7cc <_dtoa_r+0x5bc>)
 801e662:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801e666:	ed93 7b00 	vldr	d7, [r3]
 801e66a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	ed8d 7b00 	vstr	d7, [sp]
 801e672:	da03      	bge.n	801e67c <_dtoa_r+0x46c>
 801e674:	9b07      	ldr	r3, [sp, #28]
 801e676:	2b00      	cmp	r3, #0
 801e678:	f340 8101 	ble.w	801e87e <_dtoa_r+0x66e>
 801e67c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801e680:	4656      	mov	r6, sl
 801e682:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e686:	4620      	mov	r0, r4
 801e688:	4629      	mov	r1, r5
 801e68a:	f7e2 f8df 	bl	800084c <__aeabi_ddiv>
 801e68e:	f7e2 fa63 	bl	8000b58 <__aeabi_d2iz>
 801e692:	4680      	mov	r8, r0
 801e694:	f7e1 ff46 	bl	8000524 <__aeabi_i2d>
 801e698:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e69c:	f7e1 ffac 	bl	80005f8 <__aeabi_dmul>
 801e6a0:	4602      	mov	r2, r0
 801e6a2:	460b      	mov	r3, r1
 801e6a4:	4620      	mov	r0, r4
 801e6a6:	4629      	mov	r1, r5
 801e6a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801e6ac:	f7e1 fdec 	bl	8000288 <__aeabi_dsub>
 801e6b0:	f806 4b01 	strb.w	r4, [r6], #1
 801e6b4:	9d07      	ldr	r5, [sp, #28]
 801e6b6:	eba6 040a 	sub.w	r4, r6, sl
 801e6ba:	42a5      	cmp	r5, r4
 801e6bc:	4602      	mov	r2, r0
 801e6be:	460b      	mov	r3, r1
 801e6c0:	f040 8117 	bne.w	801e8f2 <_dtoa_r+0x6e2>
 801e6c4:	f7e1 fde2 	bl	800028c <__adddf3>
 801e6c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e6cc:	4604      	mov	r4, r0
 801e6ce:	460d      	mov	r5, r1
 801e6d0:	f7e2 fa22 	bl	8000b18 <__aeabi_dcmpgt>
 801e6d4:	2800      	cmp	r0, #0
 801e6d6:	f040 80f9 	bne.w	801e8cc <_dtoa_r+0x6bc>
 801e6da:	e9dd 2300 	ldrd	r2, r3, [sp]
 801e6de:	4620      	mov	r0, r4
 801e6e0:	4629      	mov	r1, r5
 801e6e2:	f7e2 f9f1 	bl	8000ac8 <__aeabi_dcmpeq>
 801e6e6:	b118      	cbz	r0, 801e6f0 <_dtoa_r+0x4e0>
 801e6e8:	f018 0f01 	tst.w	r8, #1
 801e6ec:	f040 80ee 	bne.w	801e8cc <_dtoa_r+0x6bc>
 801e6f0:	4649      	mov	r1, r9
 801e6f2:	4658      	mov	r0, fp
 801e6f4:	f000 fc90 	bl	801f018 <_Bfree>
 801e6f8:	2300      	movs	r3, #0
 801e6fa:	7033      	strb	r3, [r6, #0]
 801e6fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801e6fe:	3701      	adds	r7, #1
 801e700:	601f      	str	r7, [r3, #0]
 801e702:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e704:	2b00      	cmp	r3, #0
 801e706:	f000 831d 	beq.w	801ed44 <_dtoa_r+0xb34>
 801e70a:	601e      	str	r6, [r3, #0]
 801e70c:	e31a      	b.n	801ed44 <_dtoa_r+0xb34>
 801e70e:	07e2      	lsls	r2, r4, #31
 801e710:	d505      	bpl.n	801e71e <_dtoa_r+0x50e>
 801e712:	e9d5 2300 	ldrd	r2, r3, [r5]
 801e716:	f7e1 ff6f 	bl	80005f8 <__aeabi_dmul>
 801e71a:	3601      	adds	r6, #1
 801e71c:	2301      	movs	r3, #1
 801e71e:	1064      	asrs	r4, r4, #1
 801e720:	3508      	adds	r5, #8
 801e722:	e73f      	b.n	801e5a4 <_dtoa_r+0x394>
 801e724:	2602      	movs	r6, #2
 801e726:	e742      	b.n	801e5ae <_dtoa_r+0x39e>
 801e728:	9c07      	ldr	r4, [sp, #28]
 801e72a:	9704      	str	r7, [sp, #16]
 801e72c:	e761      	b.n	801e5f2 <_dtoa_r+0x3e2>
 801e72e:	4b27      	ldr	r3, [pc, #156]	@ (801e7cc <_dtoa_r+0x5bc>)
 801e730:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e732:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801e736:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801e73a:	4454      	add	r4, sl
 801e73c:	2900      	cmp	r1, #0
 801e73e:	d053      	beq.n	801e7e8 <_dtoa_r+0x5d8>
 801e740:	4928      	ldr	r1, [pc, #160]	@ (801e7e4 <_dtoa_r+0x5d4>)
 801e742:	2000      	movs	r0, #0
 801e744:	f7e2 f882 	bl	800084c <__aeabi_ddiv>
 801e748:	4633      	mov	r3, r6
 801e74a:	462a      	mov	r2, r5
 801e74c:	f7e1 fd9c 	bl	8000288 <__aeabi_dsub>
 801e750:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e754:	4656      	mov	r6, sl
 801e756:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e75a:	f7e2 f9fd 	bl	8000b58 <__aeabi_d2iz>
 801e75e:	4605      	mov	r5, r0
 801e760:	f7e1 fee0 	bl	8000524 <__aeabi_i2d>
 801e764:	4602      	mov	r2, r0
 801e766:	460b      	mov	r3, r1
 801e768:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e76c:	f7e1 fd8c 	bl	8000288 <__aeabi_dsub>
 801e770:	3530      	adds	r5, #48	@ 0x30
 801e772:	4602      	mov	r2, r0
 801e774:	460b      	mov	r3, r1
 801e776:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e77a:	f806 5b01 	strb.w	r5, [r6], #1
 801e77e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e782:	f7e2 f9ab 	bl	8000adc <__aeabi_dcmplt>
 801e786:	2800      	cmp	r0, #0
 801e788:	d171      	bne.n	801e86e <_dtoa_r+0x65e>
 801e78a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e78e:	4911      	ldr	r1, [pc, #68]	@ (801e7d4 <_dtoa_r+0x5c4>)
 801e790:	2000      	movs	r0, #0
 801e792:	f7e1 fd79 	bl	8000288 <__aeabi_dsub>
 801e796:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e79a:	f7e2 f99f 	bl	8000adc <__aeabi_dcmplt>
 801e79e:	2800      	cmp	r0, #0
 801e7a0:	f040 8095 	bne.w	801e8ce <_dtoa_r+0x6be>
 801e7a4:	42a6      	cmp	r6, r4
 801e7a6:	f43f af50 	beq.w	801e64a <_dtoa_r+0x43a>
 801e7aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e7ae:	4b0a      	ldr	r3, [pc, #40]	@ (801e7d8 <_dtoa_r+0x5c8>)
 801e7b0:	2200      	movs	r2, #0
 801e7b2:	f7e1 ff21 	bl	80005f8 <__aeabi_dmul>
 801e7b6:	4b08      	ldr	r3, [pc, #32]	@ (801e7d8 <_dtoa_r+0x5c8>)
 801e7b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e7bc:	2200      	movs	r2, #0
 801e7be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e7c2:	f7e1 ff19 	bl	80005f8 <__aeabi_dmul>
 801e7c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e7ca:	e7c4      	b.n	801e756 <_dtoa_r+0x546>
 801e7cc:	08025a40 	.word	0x08025a40
 801e7d0:	08025a18 	.word	0x08025a18
 801e7d4:	3ff00000 	.word	0x3ff00000
 801e7d8:	40240000 	.word	0x40240000
 801e7dc:	401c0000 	.word	0x401c0000
 801e7e0:	40140000 	.word	0x40140000
 801e7e4:	3fe00000 	.word	0x3fe00000
 801e7e8:	4631      	mov	r1, r6
 801e7ea:	4628      	mov	r0, r5
 801e7ec:	f7e1 ff04 	bl	80005f8 <__aeabi_dmul>
 801e7f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801e7f4:	9415      	str	r4, [sp, #84]	@ 0x54
 801e7f6:	4656      	mov	r6, sl
 801e7f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e7fc:	f7e2 f9ac 	bl	8000b58 <__aeabi_d2iz>
 801e800:	4605      	mov	r5, r0
 801e802:	f7e1 fe8f 	bl	8000524 <__aeabi_i2d>
 801e806:	4602      	mov	r2, r0
 801e808:	460b      	mov	r3, r1
 801e80a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e80e:	f7e1 fd3b 	bl	8000288 <__aeabi_dsub>
 801e812:	3530      	adds	r5, #48	@ 0x30
 801e814:	f806 5b01 	strb.w	r5, [r6], #1
 801e818:	4602      	mov	r2, r0
 801e81a:	460b      	mov	r3, r1
 801e81c:	42a6      	cmp	r6, r4
 801e81e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801e822:	f04f 0200 	mov.w	r2, #0
 801e826:	d124      	bne.n	801e872 <_dtoa_r+0x662>
 801e828:	4bac      	ldr	r3, [pc, #688]	@ (801eadc <_dtoa_r+0x8cc>)
 801e82a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801e82e:	f7e1 fd2d 	bl	800028c <__adddf3>
 801e832:	4602      	mov	r2, r0
 801e834:	460b      	mov	r3, r1
 801e836:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e83a:	f7e2 f96d 	bl	8000b18 <__aeabi_dcmpgt>
 801e83e:	2800      	cmp	r0, #0
 801e840:	d145      	bne.n	801e8ce <_dtoa_r+0x6be>
 801e842:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801e846:	49a5      	ldr	r1, [pc, #660]	@ (801eadc <_dtoa_r+0x8cc>)
 801e848:	2000      	movs	r0, #0
 801e84a:	f7e1 fd1d 	bl	8000288 <__aeabi_dsub>
 801e84e:	4602      	mov	r2, r0
 801e850:	460b      	mov	r3, r1
 801e852:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801e856:	f7e2 f941 	bl	8000adc <__aeabi_dcmplt>
 801e85a:	2800      	cmp	r0, #0
 801e85c:	f43f aef5 	beq.w	801e64a <_dtoa_r+0x43a>
 801e860:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801e862:	1e73      	subs	r3, r6, #1
 801e864:	9315      	str	r3, [sp, #84]	@ 0x54
 801e866:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801e86a:	2b30      	cmp	r3, #48	@ 0x30
 801e86c:	d0f8      	beq.n	801e860 <_dtoa_r+0x650>
 801e86e:	9f04      	ldr	r7, [sp, #16]
 801e870:	e73e      	b.n	801e6f0 <_dtoa_r+0x4e0>
 801e872:	4b9b      	ldr	r3, [pc, #620]	@ (801eae0 <_dtoa_r+0x8d0>)
 801e874:	f7e1 fec0 	bl	80005f8 <__aeabi_dmul>
 801e878:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e87c:	e7bc      	b.n	801e7f8 <_dtoa_r+0x5e8>
 801e87e:	d10c      	bne.n	801e89a <_dtoa_r+0x68a>
 801e880:	4b98      	ldr	r3, [pc, #608]	@ (801eae4 <_dtoa_r+0x8d4>)
 801e882:	2200      	movs	r2, #0
 801e884:	e9dd 0100 	ldrd	r0, r1, [sp]
 801e888:	f7e1 feb6 	bl	80005f8 <__aeabi_dmul>
 801e88c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801e890:	f7e2 f938 	bl	8000b04 <__aeabi_dcmpge>
 801e894:	2800      	cmp	r0, #0
 801e896:	f000 8157 	beq.w	801eb48 <_dtoa_r+0x938>
 801e89a:	2400      	movs	r4, #0
 801e89c:	4625      	mov	r5, r4
 801e89e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e8a0:	43db      	mvns	r3, r3
 801e8a2:	9304      	str	r3, [sp, #16]
 801e8a4:	4656      	mov	r6, sl
 801e8a6:	2700      	movs	r7, #0
 801e8a8:	4621      	mov	r1, r4
 801e8aa:	4658      	mov	r0, fp
 801e8ac:	f000 fbb4 	bl	801f018 <_Bfree>
 801e8b0:	2d00      	cmp	r5, #0
 801e8b2:	d0dc      	beq.n	801e86e <_dtoa_r+0x65e>
 801e8b4:	b12f      	cbz	r7, 801e8c2 <_dtoa_r+0x6b2>
 801e8b6:	42af      	cmp	r7, r5
 801e8b8:	d003      	beq.n	801e8c2 <_dtoa_r+0x6b2>
 801e8ba:	4639      	mov	r1, r7
 801e8bc:	4658      	mov	r0, fp
 801e8be:	f000 fbab 	bl	801f018 <_Bfree>
 801e8c2:	4629      	mov	r1, r5
 801e8c4:	4658      	mov	r0, fp
 801e8c6:	f000 fba7 	bl	801f018 <_Bfree>
 801e8ca:	e7d0      	b.n	801e86e <_dtoa_r+0x65e>
 801e8cc:	9704      	str	r7, [sp, #16]
 801e8ce:	4633      	mov	r3, r6
 801e8d0:	461e      	mov	r6, r3
 801e8d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801e8d6:	2a39      	cmp	r2, #57	@ 0x39
 801e8d8:	d107      	bne.n	801e8ea <_dtoa_r+0x6da>
 801e8da:	459a      	cmp	sl, r3
 801e8dc:	d1f8      	bne.n	801e8d0 <_dtoa_r+0x6c0>
 801e8de:	9a04      	ldr	r2, [sp, #16]
 801e8e0:	3201      	adds	r2, #1
 801e8e2:	9204      	str	r2, [sp, #16]
 801e8e4:	2230      	movs	r2, #48	@ 0x30
 801e8e6:	f88a 2000 	strb.w	r2, [sl]
 801e8ea:	781a      	ldrb	r2, [r3, #0]
 801e8ec:	3201      	adds	r2, #1
 801e8ee:	701a      	strb	r2, [r3, #0]
 801e8f0:	e7bd      	b.n	801e86e <_dtoa_r+0x65e>
 801e8f2:	4b7b      	ldr	r3, [pc, #492]	@ (801eae0 <_dtoa_r+0x8d0>)
 801e8f4:	2200      	movs	r2, #0
 801e8f6:	f7e1 fe7f 	bl	80005f8 <__aeabi_dmul>
 801e8fa:	2200      	movs	r2, #0
 801e8fc:	2300      	movs	r3, #0
 801e8fe:	4604      	mov	r4, r0
 801e900:	460d      	mov	r5, r1
 801e902:	f7e2 f8e1 	bl	8000ac8 <__aeabi_dcmpeq>
 801e906:	2800      	cmp	r0, #0
 801e908:	f43f aebb 	beq.w	801e682 <_dtoa_r+0x472>
 801e90c:	e6f0      	b.n	801e6f0 <_dtoa_r+0x4e0>
 801e90e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801e910:	2a00      	cmp	r2, #0
 801e912:	f000 80db 	beq.w	801eacc <_dtoa_r+0x8bc>
 801e916:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e918:	2a01      	cmp	r2, #1
 801e91a:	f300 80bf 	bgt.w	801ea9c <_dtoa_r+0x88c>
 801e91e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e920:	2a00      	cmp	r2, #0
 801e922:	f000 80b7 	beq.w	801ea94 <_dtoa_r+0x884>
 801e926:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801e92a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801e92c:	4646      	mov	r6, r8
 801e92e:	9a08      	ldr	r2, [sp, #32]
 801e930:	2101      	movs	r1, #1
 801e932:	441a      	add	r2, r3
 801e934:	4658      	mov	r0, fp
 801e936:	4498      	add	r8, r3
 801e938:	9208      	str	r2, [sp, #32]
 801e93a:	f000 fc6b 	bl	801f214 <__i2b>
 801e93e:	4605      	mov	r5, r0
 801e940:	b15e      	cbz	r6, 801e95a <_dtoa_r+0x74a>
 801e942:	9b08      	ldr	r3, [sp, #32]
 801e944:	2b00      	cmp	r3, #0
 801e946:	dd08      	ble.n	801e95a <_dtoa_r+0x74a>
 801e948:	42b3      	cmp	r3, r6
 801e94a:	9a08      	ldr	r2, [sp, #32]
 801e94c:	bfa8      	it	ge
 801e94e:	4633      	movge	r3, r6
 801e950:	eba8 0803 	sub.w	r8, r8, r3
 801e954:	1af6      	subs	r6, r6, r3
 801e956:	1ad3      	subs	r3, r2, r3
 801e958:	9308      	str	r3, [sp, #32]
 801e95a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e95c:	b1f3      	cbz	r3, 801e99c <_dtoa_r+0x78c>
 801e95e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e960:	2b00      	cmp	r3, #0
 801e962:	f000 80b7 	beq.w	801ead4 <_dtoa_r+0x8c4>
 801e966:	b18c      	cbz	r4, 801e98c <_dtoa_r+0x77c>
 801e968:	4629      	mov	r1, r5
 801e96a:	4622      	mov	r2, r4
 801e96c:	4658      	mov	r0, fp
 801e96e:	f000 fd11 	bl	801f394 <__pow5mult>
 801e972:	464a      	mov	r2, r9
 801e974:	4601      	mov	r1, r0
 801e976:	4605      	mov	r5, r0
 801e978:	4658      	mov	r0, fp
 801e97a:	f000 fc61 	bl	801f240 <__multiply>
 801e97e:	4649      	mov	r1, r9
 801e980:	9004      	str	r0, [sp, #16]
 801e982:	4658      	mov	r0, fp
 801e984:	f000 fb48 	bl	801f018 <_Bfree>
 801e988:	9b04      	ldr	r3, [sp, #16]
 801e98a:	4699      	mov	r9, r3
 801e98c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e98e:	1b1a      	subs	r2, r3, r4
 801e990:	d004      	beq.n	801e99c <_dtoa_r+0x78c>
 801e992:	4649      	mov	r1, r9
 801e994:	4658      	mov	r0, fp
 801e996:	f000 fcfd 	bl	801f394 <__pow5mult>
 801e99a:	4681      	mov	r9, r0
 801e99c:	2101      	movs	r1, #1
 801e99e:	4658      	mov	r0, fp
 801e9a0:	f000 fc38 	bl	801f214 <__i2b>
 801e9a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e9a6:	4604      	mov	r4, r0
 801e9a8:	2b00      	cmp	r3, #0
 801e9aa:	f000 81cf 	beq.w	801ed4c <_dtoa_r+0xb3c>
 801e9ae:	461a      	mov	r2, r3
 801e9b0:	4601      	mov	r1, r0
 801e9b2:	4658      	mov	r0, fp
 801e9b4:	f000 fcee 	bl	801f394 <__pow5mult>
 801e9b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e9ba:	2b01      	cmp	r3, #1
 801e9bc:	4604      	mov	r4, r0
 801e9be:	f300 8095 	bgt.w	801eaec <_dtoa_r+0x8dc>
 801e9c2:	9b02      	ldr	r3, [sp, #8]
 801e9c4:	2b00      	cmp	r3, #0
 801e9c6:	f040 8087 	bne.w	801ead8 <_dtoa_r+0x8c8>
 801e9ca:	9b03      	ldr	r3, [sp, #12]
 801e9cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801e9d0:	2b00      	cmp	r3, #0
 801e9d2:	f040 8089 	bne.w	801eae8 <_dtoa_r+0x8d8>
 801e9d6:	9b03      	ldr	r3, [sp, #12]
 801e9d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801e9dc:	0d1b      	lsrs	r3, r3, #20
 801e9de:	051b      	lsls	r3, r3, #20
 801e9e0:	b12b      	cbz	r3, 801e9ee <_dtoa_r+0x7de>
 801e9e2:	9b08      	ldr	r3, [sp, #32]
 801e9e4:	3301      	adds	r3, #1
 801e9e6:	9308      	str	r3, [sp, #32]
 801e9e8:	f108 0801 	add.w	r8, r8, #1
 801e9ec:	2301      	movs	r3, #1
 801e9ee:	930a      	str	r3, [sp, #40]	@ 0x28
 801e9f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801e9f2:	2b00      	cmp	r3, #0
 801e9f4:	f000 81b0 	beq.w	801ed58 <_dtoa_r+0xb48>
 801e9f8:	6923      	ldr	r3, [r4, #16]
 801e9fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801e9fe:	6918      	ldr	r0, [r3, #16]
 801ea00:	f000 fbbc 	bl	801f17c <__hi0bits>
 801ea04:	f1c0 0020 	rsb	r0, r0, #32
 801ea08:	9b08      	ldr	r3, [sp, #32]
 801ea0a:	4418      	add	r0, r3
 801ea0c:	f010 001f 	ands.w	r0, r0, #31
 801ea10:	d077      	beq.n	801eb02 <_dtoa_r+0x8f2>
 801ea12:	f1c0 0320 	rsb	r3, r0, #32
 801ea16:	2b04      	cmp	r3, #4
 801ea18:	dd6b      	ble.n	801eaf2 <_dtoa_r+0x8e2>
 801ea1a:	9b08      	ldr	r3, [sp, #32]
 801ea1c:	f1c0 001c 	rsb	r0, r0, #28
 801ea20:	4403      	add	r3, r0
 801ea22:	4480      	add	r8, r0
 801ea24:	4406      	add	r6, r0
 801ea26:	9308      	str	r3, [sp, #32]
 801ea28:	f1b8 0f00 	cmp.w	r8, #0
 801ea2c:	dd05      	ble.n	801ea3a <_dtoa_r+0x82a>
 801ea2e:	4649      	mov	r1, r9
 801ea30:	4642      	mov	r2, r8
 801ea32:	4658      	mov	r0, fp
 801ea34:	f000 fd08 	bl	801f448 <__lshift>
 801ea38:	4681      	mov	r9, r0
 801ea3a:	9b08      	ldr	r3, [sp, #32]
 801ea3c:	2b00      	cmp	r3, #0
 801ea3e:	dd05      	ble.n	801ea4c <_dtoa_r+0x83c>
 801ea40:	4621      	mov	r1, r4
 801ea42:	461a      	mov	r2, r3
 801ea44:	4658      	mov	r0, fp
 801ea46:	f000 fcff 	bl	801f448 <__lshift>
 801ea4a:	4604      	mov	r4, r0
 801ea4c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ea4e:	2b00      	cmp	r3, #0
 801ea50:	d059      	beq.n	801eb06 <_dtoa_r+0x8f6>
 801ea52:	4621      	mov	r1, r4
 801ea54:	4648      	mov	r0, r9
 801ea56:	f000 fd63 	bl	801f520 <__mcmp>
 801ea5a:	2800      	cmp	r0, #0
 801ea5c:	da53      	bge.n	801eb06 <_dtoa_r+0x8f6>
 801ea5e:	1e7b      	subs	r3, r7, #1
 801ea60:	9304      	str	r3, [sp, #16]
 801ea62:	4649      	mov	r1, r9
 801ea64:	2300      	movs	r3, #0
 801ea66:	220a      	movs	r2, #10
 801ea68:	4658      	mov	r0, fp
 801ea6a:	f000 faf7 	bl	801f05c <__multadd>
 801ea6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ea70:	4681      	mov	r9, r0
 801ea72:	2b00      	cmp	r3, #0
 801ea74:	f000 8172 	beq.w	801ed5c <_dtoa_r+0xb4c>
 801ea78:	2300      	movs	r3, #0
 801ea7a:	4629      	mov	r1, r5
 801ea7c:	220a      	movs	r2, #10
 801ea7e:	4658      	mov	r0, fp
 801ea80:	f000 faec 	bl	801f05c <__multadd>
 801ea84:	9b00      	ldr	r3, [sp, #0]
 801ea86:	2b00      	cmp	r3, #0
 801ea88:	4605      	mov	r5, r0
 801ea8a:	dc67      	bgt.n	801eb5c <_dtoa_r+0x94c>
 801ea8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ea8e:	2b02      	cmp	r3, #2
 801ea90:	dc41      	bgt.n	801eb16 <_dtoa_r+0x906>
 801ea92:	e063      	b.n	801eb5c <_dtoa_r+0x94c>
 801ea94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ea96:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801ea9a:	e746      	b.n	801e92a <_dtoa_r+0x71a>
 801ea9c:	9b07      	ldr	r3, [sp, #28]
 801ea9e:	1e5c      	subs	r4, r3, #1
 801eaa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eaa2:	42a3      	cmp	r3, r4
 801eaa4:	bfbf      	itttt	lt
 801eaa6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801eaa8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801eaaa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801eaac:	1ae3      	sublt	r3, r4, r3
 801eaae:	bfb4      	ite	lt
 801eab0:	18d2      	addlt	r2, r2, r3
 801eab2:	1b1c      	subge	r4, r3, r4
 801eab4:	9b07      	ldr	r3, [sp, #28]
 801eab6:	bfbc      	itt	lt
 801eab8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801eaba:	2400      	movlt	r4, #0
 801eabc:	2b00      	cmp	r3, #0
 801eabe:	bfb5      	itete	lt
 801eac0:	eba8 0603 	sublt.w	r6, r8, r3
 801eac4:	9b07      	ldrge	r3, [sp, #28]
 801eac6:	2300      	movlt	r3, #0
 801eac8:	4646      	movge	r6, r8
 801eaca:	e730      	b.n	801e92e <_dtoa_r+0x71e>
 801eacc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801eace:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801ead0:	4646      	mov	r6, r8
 801ead2:	e735      	b.n	801e940 <_dtoa_r+0x730>
 801ead4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ead6:	e75c      	b.n	801e992 <_dtoa_r+0x782>
 801ead8:	2300      	movs	r3, #0
 801eada:	e788      	b.n	801e9ee <_dtoa_r+0x7de>
 801eadc:	3fe00000 	.word	0x3fe00000
 801eae0:	40240000 	.word	0x40240000
 801eae4:	40140000 	.word	0x40140000
 801eae8:	9b02      	ldr	r3, [sp, #8]
 801eaea:	e780      	b.n	801e9ee <_dtoa_r+0x7de>
 801eaec:	2300      	movs	r3, #0
 801eaee:	930a      	str	r3, [sp, #40]	@ 0x28
 801eaf0:	e782      	b.n	801e9f8 <_dtoa_r+0x7e8>
 801eaf2:	d099      	beq.n	801ea28 <_dtoa_r+0x818>
 801eaf4:	9a08      	ldr	r2, [sp, #32]
 801eaf6:	331c      	adds	r3, #28
 801eaf8:	441a      	add	r2, r3
 801eafa:	4498      	add	r8, r3
 801eafc:	441e      	add	r6, r3
 801eafe:	9208      	str	r2, [sp, #32]
 801eb00:	e792      	b.n	801ea28 <_dtoa_r+0x818>
 801eb02:	4603      	mov	r3, r0
 801eb04:	e7f6      	b.n	801eaf4 <_dtoa_r+0x8e4>
 801eb06:	9b07      	ldr	r3, [sp, #28]
 801eb08:	9704      	str	r7, [sp, #16]
 801eb0a:	2b00      	cmp	r3, #0
 801eb0c:	dc20      	bgt.n	801eb50 <_dtoa_r+0x940>
 801eb0e:	9300      	str	r3, [sp, #0]
 801eb10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eb12:	2b02      	cmp	r3, #2
 801eb14:	dd1e      	ble.n	801eb54 <_dtoa_r+0x944>
 801eb16:	9b00      	ldr	r3, [sp, #0]
 801eb18:	2b00      	cmp	r3, #0
 801eb1a:	f47f aec0 	bne.w	801e89e <_dtoa_r+0x68e>
 801eb1e:	4621      	mov	r1, r4
 801eb20:	2205      	movs	r2, #5
 801eb22:	4658      	mov	r0, fp
 801eb24:	f000 fa9a 	bl	801f05c <__multadd>
 801eb28:	4601      	mov	r1, r0
 801eb2a:	4604      	mov	r4, r0
 801eb2c:	4648      	mov	r0, r9
 801eb2e:	f000 fcf7 	bl	801f520 <__mcmp>
 801eb32:	2800      	cmp	r0, #0
 801eb34:	f77f aeb3 	ble.w	801e89e <_dtoa_r+0x68e>
 801eb38:	4656      	mov	r6, sl
 801eb3a:	2331      	movs	r3, #49	@ 0x31
 801eb3c:	f806 3b01 	strb.w	r3, [r6], #1
 801eb40:	9b04      	ldr	r3, [sp, #16]
 801eb42:	3301      	adds	r3, #1
 801eb44:	9304      	str	r3, [sp, #16]
 801eb46:	e6ae      	b.n	801e8a6 <_dtoa_r+0x696>
 801eb48:	9c07      	ldr	r4, [sp, #28]
 801eb4a:	9704      	str	r7, [sp, #16]
 801eb4c:	4625      	mov	r5, r4
 801eb4e:	e7f3      	b.n	801eb38 <_dtoa_r+0x928>
 801eb50:	9b07      	ldr	r3, [sp, #28]
 801eb52:	9300      	str	r3, [sp, #0]
 801eb54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eb56:	2b00      	cmp	r3, #0
 801eb58:	f000 8104 	beq.w	801ed64 <_dtoa_r+0xb54>
 801eb5c:	2e00      	cmp	r6, #0
 801eb5e:	dd05      	ble.n	801eb6c <_dtoa_r+0x95c>
 801eb60:	4629      	mov	r1, r5
 801eb62:	4632      	mov	r2, r6
 801eb64:	4658      	mov	r0, fp
 801eb66:	f000 fc6f 	bl	801f448 <__lshift>
 801eb6a:	4605      	mov	r5, r0
 801eb6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801eb6e:	2b00      	cmp	r3, #0
 801eb70:	d05a      	beq.n	801ec28 <_dtoa_r+0xa18>
 801eb72:	6869      	ldr	r1, [r5, #4]
 801eb74:	4658      	mov	r0, fp
 801eb76:	f000 fa0f 	bl	801ef98 <_Balloc>
 801eb7a:	4606      	mov	r6, r0
 801eb7c:	b928      	cbnz	r0, 801eb8a <_dtoa_r+0x97a>
 801eb7e:	4b84      	ldr	r3, [pc, #528]	@ (801ed90 <_dtoa_r+0xb80>)
 801eb80:	4602      	mov	r2, r0
 801eb82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801eb86:	f7ff bb5a 	b.w	801e23e <_dtoa_r+0x2e>
 801eb8a:	692a      	ldr	r2, [r5, #16]
 801eb8c:	3202      	adds	r2, #2
 801eb8e:	0092      	lsls	r2, r2, #2
 801eb90:	f105 010c 	add.w	r1, r5, #12
 801eb94:	300c      	adds	r0, #12
 801eb96:	f7ff fa80 	bl	801e09a <memcpy>
 801eb9a:	2201      	movs	r2, #1
 801eb9c:	4631      	mov	r1, r6
 801eb9e:	4658      	mov	r0, fp
 801eba0:	f000 fc52 	bl	801f448 <__lshift>
 801eba4:	f10a 0301 	add.w	r3, sl, #1
 801eba8:	9307      	str	r3, [sp, #28]
 801ebaa:	9b00      	ldr	r3, [sp, #0]
 801ebac:	4453      	add	r3, sl
 801ebae:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ebb0:	9b02      	ldr	r3, [sp, #8]
 801ebb2:	f003 0301 	and.w	r3, r3, #1
 801ebb6:	462f      	mov	r7, r5
 801ebb8:	930a      	str	r3, [sp, #40]	@ 0x28
 801ebba:	4605      	mov	r5, r0
 801ebbc:	9b07      	ldr	r3, [sp, #28]
 801ebbe:	4621      	mov	r1, r4
 801ebc0:	3b01      	subs	r3, #1
 801ebc2:	4648      	mov	r0, r9
 801ebc4:	9300      	str	r3, [sp, #0]
 801ebc6:	f7ff fa9b 	bl	801e100 <quorem>
 801ebca:	4639      	mov	r1, r7
 801ebcc:	9002      	str	r0, [sp, #8]
 801ebce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801ebd2:	4648      	mov	r0, r9
 801ebd4:	f000 fca4 	bl	801f520 <__mcmp>
 801ebd8:	462a      	mov	r2, r5
 801ebda:	9008      	str	r0, [sp, #32]
 801ebdc:	4621      	mov	r1, r4
 801ebde:	4658      	mov	r0, fp
 801ebe0:	f000 fcba 	bl	801f558 <__mdiff>
 801ebe4:	68c2      	ldr	r2, [r0, #12]
 801ebe6:	4606      	mov	r6, r0
 801ebe8:	bb02      	cbnz	r2, 801ec2c <_dtoa_r+0xa1c>
 801ebea:	4601      	mov	r1, r0
 801ebec:	4648      	mov	r0, r9
 801ebee:	f000 fc97 	bl	801f520 <__mcmp>
 801ebf2:	4602      	mov	r2, r0
 801ebf4:	4631      	mov	r1, r6
 801ebf6:	4658      	mov	r0, fp
 801ebf8:	920e      	str	r2, [sp, #56]	@ 0x38
 801ebfa:	f000 fa0d 	bl	801f018 <_Bfree>
 801ebfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ec00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ec02:	9e07      	ldr	r6, [sp, #28]
 801ec04:	ea43 0102 	orr.w	r1, r3, r2
 801ec08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ec0a:	4319      	orrs	r1, r3
 801ec0c:	d110      	bne.n	801ec30 <_dtoa_r+0xa20>
 801ec0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801ec12:	d029      	beq.n	801ec68 <_dtoa_r+0xa58>
 801ec14:	9b08      	ldr	r3, [sp, #32]
 801ec16:	2b00      	cmp	r3, #0
 801ec18:	dd02      	ble.n	801ec20 <_dtoa_r+0xa10>
 801ec1a:	9b02      	ldr	r3, [sp, #8]
 801ec1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801ec20:	9b00      	ldr	r3, [sp, #0]
 801ec22:	f883 8000 	strb.w	r8, [r3]
 801ec26:	e63f      	b.n	801e8a8 <_dtoa_r+0x698>
 801ec28:	4628      	mov	r0, r5
 801ec2a:	e7bb      	b.n	801eba4 <_dtoa_r+0x994>
 801ec2c:	2201      	movs	r2, #1
 801ec2e:	e7e1      	b.n	801ebf4 <_dtoa_r+0x9e4>
 801ec30:	9b08      	ldr	r3, [sp, #32]
 801ec32:	2b00      	cmp	r3, #0
 801ec34:	db04      	blt.n	801ec40 <_dtoa_r+0xa30>
 801ec36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ec38:	430b      	orrs	r3, r1
 801ec3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801ec3c:	430b      	orrs	r3, r1
 801ec3e:	d120      	bne.n	801ec82 <_dtoa_r+0xa72>
 801ec40:	2a00      	cmp	r2, #0
 801ec42:	dded      	ble.n	801ec20 <_dtoa_r+0xa10>
 801ec44:	4649      	mov	r1, r9
 801ec46:	2201      	movs	r2, #1
 801ec48:	4658      	mov	r0, fp
 801ec4a:	f000 fbfd 	bl	801f448 <__lshift>
 801ec4e:	4621      	mov	r1, r4
 801ec50:	4681      	mov	r9, r0
 801ec52:	f000 fc65 	bl	801f520 <__mcmp>
 801ec56:	2800      	cmp	r0, #0
 801ec58:	dc03      	bgt.n	801ec62 <_dtoa_r+0xa52>
 801ec5a:	d1e1      	bne.n	801ec20 <_dtoa_r+0xa10>
 801ec5c:	f018 0f01 	tst.w	r8, #1
 801ec60:	d0de      	beq.n	801ec20 <_dtoa_r+0xa10>
 801ec62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801ec66:	d1d8      	bne.n	801ec1a <_dtoa_r+0xa0a>
 801ec68:	9a00      	ldr	r2, [sp, #0]
 801ec6a:	2339      	movs	r3, #57	@ 0x39
 801ec6c:	7013      	strb	r3, [r2, #0]
 801ec6e:	4633      	mov	r3, r6
 801ec70:	461e      	mov	r6, r3
 801ec72:	3b01      	subs	r3, #1
 801ec74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801ec78:	2a39      	cmp	r2, #57	@ 0x39
 801ec7a:	d052      	beq.n	801ed22 <_dtoa_r+0xb12>
 801ec7c:	3201      	adds	r2, #1
 801ec7e:	701a      	strb	r2, [r3, #0]
 801ec80:	e612      	b.n	801e8a8 <_dtoa_r+0x698>
 801ec82:	2a00      	cmp	r2, #0
 801ec84:	dd07      	ble.n	801ec96 <_dtoa_r+0xa86>
 801ec86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801ec8a:	d0ed      	beq.n	801ec68 <_dtoa_r+0xa58>
 801ec8c:	9a00      	ldr	r2, [sp, #0]
 801ec8e:	f108 0301 	add.w	r3, r8, #1
 801ec92:	7013      	strb	r3, [r2, #0]
 801ec94:	e608      	b.n	801e8a8 <_dtoa_r+0x698>
 801ec96:	9b07      	ldr	r3, [sp, #28]
 801ec98:	9a07      	ldr	r2, [sp, #28]
 801ec9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801ec9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801eca0:	4293      	cmp	r3, r2
 801eca2:	d028      	beq.n	801ecf6 <_dtoa_r+0xae6>
 801eca4:	4649      	mov	r1, r9
 801eca6:	2300      	movs	r3, #0
 801eca8:	220a      	movs	r2, #10
 801ecaa:	4658      	mov	r0, fp
 801ecac:	f000 f9d6 	bl	801f05c <__multadd>
 801ecb0:	42af      	cmp	r7, r5
 801ecb2:	4681      	mov	r9, r0
 801ecb4:	f04f 0300 	mov.w	r3, #0
 801ecb8:	f04f 020a 	mov.w	r2, #10
 801ecbc:	4639      	mov	r1, r7
 801ecbe:	4658      	mov	r0, fp
 801ecc0:	d107      	bne.n	801ecd2 <_dtoa_r+0xac2>
 801ecc2:	f000 f9cb 	bl	801f05c <__multadd>
 801ecc6:	4607      	mov	r7, r0
 801ecc8:	4605      	mov	r5, r0
 801ecca:	9b07      	ldr	r3, [sp, #28]
 801eccc:	3301      	adds	r3, #1
 801ecce:	9307      	str	r3, [sp, #28]
 801ecd0:	e774      	b.n	801ebbc <_dtoa_r+0x9ac>
 801ecd2:	f000 f9c3 	bl	801f05c <__multadd>
 801ecd6:	4629      	mov	r1, r5
 801ecd8:	4607      	mov	r7, r0
 801ecda:	2300      	movs	r3, #0
 801ecdc:	220a      	movs	r2, #10
 801ecde:	4658      	mov	r0, fp
 801ece0:	f000 f9bc 	bl	801f05c <__multadd>
 801ece4:	4605      	mov	r5, r0
 801ece6:	e7f0      	b.n	801ecca <_dtoa_r+0xaba>
 801ece8:	9b00      	ldr	r3, [sp, #0]
 801ecea:	2b00      	cmp	r3, #0
 801ecec:	bfcc      	ite	gt
 801ecee:	461e      	movgt	r6, r3
 801ecf0:	2601      	movle	r6, #1
 801ecf2:	4456      	add	r6, sl
 801ecf4:	2700      	movs	r7, #0
 801ecf6:	4649      	mov	r1, r9
 801ecf8:	2201      	movs	r2, #1
 801ecfa:	4658      	mov	r0, fp
 801ecfc:	f000 fba4 	bl	801f448 <__lshift>
 801ed00:	4621      	mov	r1, r4
 801ed02:	4681      	mov	r9, r0
 801ed04:	f000 fc0c 	bl	801f520 <__mcmp>
 801ed08:	2800      	cmp	r0, #0
 801ed0a:	dcb0      	bgt.n	801ec6e <_dtoa_r+0xa5e>
 801ed0c:	d102      	bne.n	801ed14 <_dtoa_r+0xb04>
 801ed0e:	f018 0f01 	tst.w	r8, #1
 801ed12:	d1ac      	bne.n	801ec6e <_dtoa_r+0xa5e>
 801ed14:	4633      	mov	r3, r6
 801ed16:	461e      	mov	r6, r3
 801ed18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ed1c:	2a30      	cmp	r2, #48	@ 0x30
 801ed1e:	d0fa      	beq.n	801ed16 <_dtoa_r+0xb06>
 801ed20:	e5c2      	b.n	801e8a8 <_dtoa_r+0x698>
 801ed22:	459a      	cmp	sl, r3
 801ed24:	d1a4      	bne.n	801ec70 <_dtoa_r+0xa60>
 801ed26:	9b04      	ldr	r3, [sp, #16]
 801ed28:	3301      	adds	r3, #1
 801ed2a:	9304      	str	r3, [sp, #16]
 801ed2c:	2331      	movs	r3, #49	@ 0x31
 801ed2e:	f88a 3000 	strb.w	r3, [sl]
 801ed32:	e5b9      	b.n	801e8a8 <_dtoa_r+0x698>
 801ed34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ed36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801ed94 <_dtoa_r+0xb84>
 801ed3a:	b11b      	cbz	r3, 801ed44 <_dtoa_r+0xb34>
 801ed3c:	f10a 0308 	add.w	r3, sl, #8
 801ed40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ed42:	6013      	str	r3, [r2, #0]
 801ed44:	4650      	mov	r0, sl
 801ed46:	b019      	add	sp, #100	@ 0x64
 801ed48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ed4e:	2b01      	cmp	r3, #1
 801ed50:	f77f ae37 	ble.w	801e9c2 <_dtoa_r+0x7b2>
 801ed54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ed56:	930a      	str	r3, [sp, #40]	@ 0x28
 801ed58:	2001      	movs	r0, #1
 801ed5a:	e655      	b.n	801ea08 <_dtoa_r+0x7f8>
 801ed5c:	9b00      	ldr	r3, [sp, #0]
 801ed5e:	2b00      	cmp	r3, #0
 801ed60:	f77f aed6 	ble.w	801eb10 <_dtoa_r+0x900>
 801ed64:	4656      	mov	r6, sl
 801ed66:	4621      	mov	r1, r4
 801ed68:	4648      	mov	r0, r9
 801ed6a:	f7ff f9c9 	bl	801e100 <quorem>
 801ed6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801ed72:	f806 8b01 	strb.w	r8, [r6], #1
 801ed76:	9b00      	ldr	r3, [sp, #0]
 801ed78:	eba6 020a 	sub.w	r2, r6, sl
 801ed7c:	4293      	cmp	r3, r2
 801ed7e:	ddb3      	ble.n	801ece8 <_dtoa_r+0xad8>
 801ed80:	4649      	mov	r1, r9
 801ed82:	2300      	movs	r3, #0
 801ed84:	220a      	movs	r2, #10
 801ed86:	4658      	mov	r0, fp
 801ed88:	f000 f968 	bl	801f05c <__multadd>
 801ed8c:	4681      	mov	r9, r0
 801ed8e:	e7ea      	b.n	801ed66 <_dtoa_r+0xb56>
 801ed90:	080259a0 	.word	0x080259a0
 801ed94:	0802593b 	.word	0x0802593b

0801ed98 <_free_r>:
 801ed98:	b538      	push	{r3, r4, r5, lr}
 801ed9a:	4605      	mov	r5, r0
 801ed9c:	2900      	cmp	r1, #0
 801ed9e:	d041      	beq.n	801ee24 <_free_r+0x8c>
 801eda0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801eda4:	1f0c      	subs	r4, r1, #4
 801eda6:	2b00      	cmp	r3, #0
 801eda8:	bfb8      	it	lt
 801edaa:	18e4      	addlt	r4, r4, r3
 801edac:	f000 f8e8 	bl	801ef80 <__malloc_lock>
 801edb0:	4a1d      	ldr	r2, [pc, #116]	@ (801ee28 <_free_r+0x90>)
 801edb2:	6813      	ldr	r3, [r2, #0]
 801edb4:	b933      	cbnz	r3, 801edc4 <_free_r+0x2c>
 801edb6:	6063      	str	r3, [r4, #4]
 801edb8:	6014      	str	r4, [r2, #0]
 801edba:	4628      	mov	r0, r5
 801edbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801edc0:	f000 b8e4 	b.w	801ef8c <__malloc_unlock>
 801edc4:	42a3      	cmp	r3, r4
 801edc6:	d908      	bls.n	801edda <_free_r+0x42>
 801edc8:	6820      	ldr	r0, [r4, #0]
 801edca:	1821      	adds	r1, r4, r0
 801edcc:	428b      	cmp	r3, r1
 801edce:	bf01      	itttt	eq
 801edd0:	6819      	ldreq	r1, [r3, #0]
 801edd2:	685b      	ldreq	r3, [r3, #4]
 801edd4:	1809      	addeq	r1, r1, r0
 801edd6:	6021      	streq	r1, [r4, #0]
 801edd8:	e7ed      	b.n	801edb6 <_free_r+0x1e>
 801edda:	461a      	mov	r2, r3
 801eddc:	685b      	ldr	r3, [r3, #4]
 801edde:	b10b      	cbz	r3, 801ede4 <_free_r+0x4c>
 801ede0:	42a3      	cmp	r3, r4
 801ede2:	d9fa      	bls.n	801edda <_free_r+0x42>
 801ede4:	6811      	ldr	r1, [r2, #0]
 801ede6:	1850      	adds	r0, r2, r1
 801ede8:	42a0      	cmp	r0, r4
 801edea:	d10b      	bne.n	801ee04 <_free_r+0x6c>
 801edec:	6820      	ldr	r0, [r4, #0]
 801edee:	4401      	add	r1, r0
 801edf0:	1850      	adds	r0, r2, r1
 801edf2:	4283      	cmp	r3, r0
 801edf4:	6011      	str	r1, [r2, #0]
 801edf6:	d1e0      	bne.n	801edba <_free_r+0x22>
 801edf8:	6818      	ldr	r0, [r3, #0]
 801edfa:	685b      	ldr	r3, [r3, #4]
 801edfc:	6053      	str	r3, [r2, #4]
 801edfe:	4408      	add	r0, r1
 801ee00:	6010      	str	r0, [r2, #0]
 801ee02:	e7da      	b.n	801edba <_free_r+0x22>
 801ee04:	d902      	bls.n	801ee0c <_free_r+0x74>
 801ee06:	230c      	movs	r3, #12
 801ee08:	602b      	str	r3, [r5, #0]
 801ee0a:	e7d6      	b.n	801edba <_free_r+0x22>
 801ee0c:	6820      	ldr	r0, [r4, #0]
 801ee0e:	1821      	adds	r1, r4, r0
 801ee10:	428b      	cmp	r3, r1
 801ee12:	bf04      	itt	eq
 801ee14:	6819      	ldreq	r1, [r3, #0]
 801ee16:	685b      	ldreq	r3, [r3, #4]
 801ee18:	6063      	str	r3, [r4, #4]
 801ee1a:	bf04      	itt	eq
 801ee1c:	1809      	addeq	r1, r1, r0
 801ee1e:	6021      	streq	r1, [r4, #0]
 801ee20:	6054      	str	r4, [r2, #4]
 801ee22:	e7ca      	b.n	801edba <_free_r+0x22>
 801ee24:	bd38      	pop	{r3, r4, r5, pc}
 801ee26:	bf00      	nop
 801ee28:	2000ef18 	.word	0x2000ef18

0801ee2c <malloc>:
 801ee2c:	4b02      	ldr	r3, [pc, #8]	@ (801ee38 <malloc+0xc>)
 801ee2e:	4601      	mov	r1, r0
 801ee30:	6818      	ldr	r0, [r3, #0]
 801ee32:	f000 b825 	b.w	801ee80 <_malloc_r>
 801ee36:	bf00      	nop
 801ee38:	20000040 	.word	0x20000040

0801ee3c <sbrk_aligned>:
 801ee3c:	b570      	push	{r4, r5, r6, lr}
 801ee3e:	4e0f      	ldr	r6, [pc, #60]	@ (801ee7c <sbrk_aligned+0x40>)
 801ee40:	460c      	mov	r4, r1
 801ee42:	6831      	ldr	r1, [r6, #0]
 801ee44:	4605      	mov	r5, r0
 801ee46:	b911      	cbnz	r1, 801ee4e <sbrk_aligned+0x12>
 801ee48:	f001 ff4c 	bl	8020ce4 <_sbrk_r>
 801ee4c:	6030      	str	r0, [r6, #0]
 801ee4e:	4621      	mov	r1, r4
 801ee50:	4628      	mov	r0, r5
 801ee52:	f001 ff47 	bl	8020ce4 <_sbrk_r>
 801ee56:	1c43      	adds	r3, r0, #1
 801ee58:	d103      	bne.n	801ee62 <sbrk_aligned+0x26>
 801ee5a:	f04f 34ff 	mov.w	r4, #4294967295
 801ee5e:	4620      	mov	r0, r4
 801ee60:	bd70      	pop	{r4, r5, r6, pc}
 801ee62:	1cc4      	adds	r4, r0, #3
 801ee64:	f024 0403 	bic.w	r4, r4, #3
 801ee68:	42a0      	cmp	r0, r4
 801ee6a:	d0f8      	beq.n	801ee5e <sbrk_aligned+0x22>
 801ee6c:	1a21      	subs	r1, r4, r0
 801ee6e:	4628      	mov	r0, r5
 801ee70:	f001 ff38 	bl	8020ce4 <_sbrk_r>
 801ee74:	3001      	adds	r0, #1
 801ee76:	d1f2      	bne.n	801ee5e <sbrk_aligned+0x22>
 801ee78:	e7ef      	b.n	801ee5a <sbrk_aligned+0x1e>
 801ee7a:	bf00      	nop
 801ee7c:	2000ef14 	.word	0x2000ef14

0801ee80 <_malloc_r>:
 801ee80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ee84:	1ccd      	adds	r5, r1, #3
 801ee86:	f025 0503 	bic.w	r5, r5, #3
 801ee8a:	3508      	adds	r5, #8
 801ee8c:	2d0c      	cmp	r5, #12
 801ee8e:	bf38      	it	cc
 801ee90:	250c      	movcc	r5, #12
 801ee92:	2d00      	cmp	r5, #0
 801ee94:	4606      	mov	r6, r0
 801ee96:	db01      	blt.n	801ee9c <_malloc_r+0x1c>
 801ee98:	42a9      	cmp	r1, r5
 801ee9a:	d904      	bls.n	801eea6 <_malloc_r+0x26>
 801ee9c:	230c      	movs	r3, #12
 801ee9e:	6033      	str	r3, [r6, #0]
 801eea0:	2000      	movs	r0, #0
 801eea2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801eea6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801ef7c <_malloc_r+0xfc>
 801eeaa:	f000 f869 	bl	801ef80 <__malloc_lock>
 801eeae:	f8d8 3000 	ldr.w	r3, [r8]
 801eeb2:	461c      	mov	r4, r3
 801eeb4:	bb44      	cbnz	r4, 801ef08 <_malloc_r+0x88>
 801eeb6:	4629      	mov	r1, r5
 801eeb8:	4630      	mov	r0, r6
 801eeba:	f7ff ffbf 	bl	801ee3c <sbrk_aligned>
 801eebe:	1c43      	adds	r3, r0, #1
 801eec0:	4604      	mov	r4, r0
 801eec2:	d158      	bne.n	801ef76 <_malloc_r+0xf6>
 801eec4:	f8d8 4000 	ldr.w	r4, [r8]
 801eec8:	4627      	mov	r7, r4
 801eeca:	2f00      	cmp	r7, #0
 801eecc:	d143      	bne.n	801ef56 <_malloc_r+0xd6>
 801eece:	2c00      	cmp	r4, #0
 801eed0:	d04b      	beq.n	801ef6a <_malloc_r+0xea>
 801eed2:	6823      	ldr	r3, [r4, #0]
 801eed4:	4639      	mov	r1, r7
 801eed6:	4630      	mov	r0, r6
 801eed8:	eb04 0903 	add.w	r9, r4, r3
 801eedc:	f001 ff02 	bl	8020ce4 <_sbrk_r>
 801eee0:	4581      	cmp	r9, r0
 801eee2:	d142      	bne.n	801ef6a <_malloc_r+0xea>
 801eee4:	6821      	ldr	r1, [r4, #0]
 801eee6:	1a6d      	subs	r5, r5, r1
 801eee8:	4629      	mov	r1, r5
 801eeea:	4630      	mov	r0, r6
 801eeec:	f7ff ffa6 	bl	801ee3c <sbrk_aligned>
 801eef0:	3001      	adds	r0, #1
 801eef2:	d03a      	beq.n	801ef6a <_malloc_r+0xea>
 801eef4:	6823      	ldr	r3, [r4, #0]
 801eef6:	442b      	add	r3, r5
 801eef8:	6023      	str	r3, [r4, #0]
 801eefa:	f8d8 3000 	ldr.w	r3, [r8]
 801eefe:	685a      	ldr	r2, [r3, #4]
 801ef00:	bb62      	cbnz	r2, 801ef5c <_malloc_r+0xdc>
 801ef02:	f8c8 7000 	str.w	r7, [r8]
 801ef06:	e00f      	b.n	801ef28 <_malloc_r+0xa8>
 801ef08:	6822      	ldr	r2, [r4, #0]
 801ef0a:	1b52      	subs	r2, r2, r5
 801ef0c:	d420      	bmi.n	801ef50 <_malloc_r+0xd0>
 801ef0e:	2a0b      	cmp	r2, #11
 801ef10:	d917      	bls.n	801ef42 <_malloc_r+0xc2>
 801ef12:	1961      	adds	r1, r4, r5
 801ef14:	42a3      	cmp	r3, r4
 801ef16:	6025      	str	r5, [r4, #0]
 801ef18:	bf18      	it	ne
 801ef1a:	6059      	strne	r1, [r3, #4]
 801ef1c:	6863      	ldr	r3, [r4, #4]
 801ef1e:	bf08      	it	eq
 801ef20:	f8c8 1000 	streq.w	r1, [r8]
 801ef24:	5162      	str	r2, [r4, r5]
 801ef26:	604b      	str	r3, [r1, #4]
 801ef28:	4630      	mov	r0, r6
 801ef2a:	f000 f82f 	bl	801ef8c <__malloc_unlock>
 801ef2e:	f104 000b 	add.w	r0, r4, #11
 801ef32:	1d23      	adds	r3, r4, #4
 801ef34:	f020 0007 	bic.w	r0, r0, #7
 801ef38:	1ac2      	subs	r2, r0, r3
 801ef3a:	bf1c      	itt	ne
 801ef3c:	1a1b      	subne	r3, r3, r0
 801ef3e:	50a3      	strne	r3, [r4, r2]
 801ef40:	e7af      	b.n	801eea2 <_malloc_r+0x22>
 801ef42:	6862      	ldr	r2, [r4, #4]
 801ef44:	42a3      	cmp	r3, r4
 801ef46:	bf0c      	ite	eq
 801ef48:	f8c8 2000 	streq.w	r2, [r8]
 801ef4c:	605a      	strne	r2, [r3, #4]
 801ef4e:	e7eb      	b.n	801ef28 <_malloc_r+0xa8>
 801ef50:	4623      	mov	r3, r4
 801ef52:	6864      	ldr	r4, [r4, #4]
 801ef54:	e7ae      	b.n	801eeb4 <_malloc_r+0x34>
 801ef56:	463c      	mov	r4, r7
 801ef58:	687f      	ldr	r7, [r7, #4]
 801ef5a:	e7b6      	b.n	801eeca <_malloc_r+0x4a>
 801ef5c:	461a      	mov	r2, r3
 801ef5e:	685b      	ldr	r3, [r3, #4]
 801ef60:	42a3      	cmp	r3, r4
 801ef62:	d1fb      	bne.n	801ef5c <_malloc_r+0xdc>
 801ef64:	2300      	movs	r3, #0
 801ef66:	6053      	str	r3, [r2, #4]
 801ef68:	e7de      	b.n	801ef28 <_malloc_r+0xa8>
 801ef6a:	230c      	movs	r3, #12
 801ef6c:	6033      	str	r3, [r6, #0]
 801ef6e:	4630      	mov	r0, r6
 801ef70:	f000 f80c 	bl	801ef8c <__malloc_unlock>
 801ef74:	e794      	b.n	801eea0 <_malloc_r+0x20>
 801ef76:	6005      	str	r5, [r0, #0]
 801ef78:	e7d6      	b.n	801ef28 <_malloc_r+0xa8>
 801ef7a:	bf00      	nop
 801ef7c:	2000ef18 	.word	0x2000ef18

0801ef80 <__malloc_lock>:
 801ef80:	4801      	ldr	r0, [pc, #4]	@ (801ef88 <__malloc_lock+0x8>)
 801ef82:	f7ff b888 	b.w	801e096 <__retarget_lock_acquire_recursive>
 801ef86:	bf00      	nop
 801ef88:	2000ef10 	.word	0x2000ef10

0801ef8c <__malloc_unlock>:
 801ef8c:	4801      	ldr	r0, [pc, #4]	@ (801ef94 <__malloc_unlock+0x8>)
 801ef8e:	f7ff b883 	b.w	801e098 <__retarget_lock_release_recursive>
 801ef92:	bf00      	nop
 801ef94:	2000ef10 	.word	0x2000ef10

0801ef98 <_Balloc>:
 801ef98:	b570      	push	{r4, r5, r6, lr}
 801ef9a:	69c6      	ldr	r6, [r0, #28]
 801ef9c:	4604      	mov	r4, r0
 801ef9e:	460d      	mov	r5, r1
 801efa0:	b976      	cbnz	r6, 801efc0 <_Balloc+0x28>
 801efa2:	2010      	movs	r0, #16
 801efa4:	f7ff ff42 	bl	801ee2c <malloc>
 801efa8:	4602      	mov	r2, r0
 801efaa:	61e0      	str	r0, [r4, #28]
 801efac:	b920      	cbnz	r0, 801efb8 <_Balloc+0x20>
 801efae:	4b18      	ldr	r3, [pc, #96]	@ (801f010 <_Balloc+0x78>)
 801efb0:	4818      	ldr	r0, [pc, #96]	@ (801f014 <_Balloc+0x7c>)
 801efb2:	216b      	movs	r1, #107	@ 0x6b
 801efb4:	f7ff f886 	bl	801e0c4 <__assert_func>
 801efb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801efbc:	6006      	str	r6, [r0, #0]
 801efbe:	60c6      	str	r6, [r0, #12]
 801efc0:	69e6      	ldr	r6, [r4, #28]
 801efc2:	68f3      	ldr	r3, [r6, #12]
 801efc4:	b183      	cbz	r3, 801efe8 <_Balloc+0x50>
 801efc6:	69e3      	ldr	r3, [r4, #28]
 801efc8:	68db      	ldr	r3, [r3, #12]
 801efca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801efce:	b9b8      	cbnz	r0, 801f000 <_Balloc+0x68>
 801efd0:	2101      	movs	r1, #1
 801efd2:	fa01 f605 	lsl.w	r6, r1, r5
 801efd6:	1d72      	adds	r2, r6, #5
 801efd8:	0092      	lsls	r2, r2, #2
 801efda:	4620      	mov	r0, r4
 801efdc:	f001 fea3 	bl	8020d26 <_calloc_r>
 801efe0:	b160      	cbz	r0, 801effc <_Balloc+0x64>
 801efe2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801efe6:	e00e      	b.n	801f006 <_Balloc+0x6e>
 801efe8:	2221      	movs	r2, #33	@ 0x21
 801efea:	2104      	movs	r1, #4
 801efec:	4620      	mov	r0, r4
 801efee:	f001 fe9a 	bl	8020d26 <_calloc_r>
 801eff2:	69e3      	ldr	r3, [r4, #28]
 801eff4:	60f0      	str	r0, [r6, #12]
 801eff6:	68db      	ldr	r3, [r3, #12]
 801eff8:	2b00      	cmp	r3, #0
 801effa:	d1e4      	bne.n	801efc6 <_Balloc+0x2e>
 801effc:	2000      	movs	r0, #0
 801effe:	bd70      	pop	{r4, r5, r6, pc}
 801f000:	6802      	ldr	r2, [r0, #0]
 801f002:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801f006:	2300      	movs	r3, #0
 801f008:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801f00c:	e7f7      	b.n	801effe <_Balloc+0x66>
 801f00e:	bf00      	nop
 801f010:	08025756 	.word	0x08025756
 801f014:	080259b1 	.word	0x080259b1

0801f018 <_Bfree>:
 801f018:	b570      	push	{r4, r5, r6, lr}
 801f01a:	69c6      	ldr	r6, [r0, #28]
 801f01c:	4605      	mov	r5, r0
 801f01e:	460c      	mov	r4, r1
 801f020:	b976      	cbnz	r6, 801f040 <_Bfree+0x28>
 801f022:	2010      	movs	r0, #16
 801f024:	f7ff ff02 	bl	801ee2c <malloc>
 801f028:	4602      	mov	r2, r0
 801f02a:	61e8      	str	r0, [r5, #28]
 801f02c:	b920      	cbnz	r0, 801f038 <_Bfree+0x20>
 801f02e:	4b09      	ldr	r3, [pc, #36]	@ (801f054 <_Bfree+0x3c>)
 801f030:	4809      	ldr	r0, [pc, #36]	@ (801f058 <_Bfree+0x40>)
 801f032:	218f      	movs	r1, #143	@ 0x8f
 801f034:	f7ff f846 	bl	801e0c4 <__assert_func>
 801f038:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f03c:	6006      	str	r6, [r0, #0]
 801f03e:	60c6      	str	r6, [r0, #12]
 801f040:	b13c      	cbz	r4, 801f052 <_Bfree+0x3a>
 801f042:	69eb      	ldr	r3, [r5, #28]
 801f044:	6862      	ldr	r2, [r4, #4]
 801f046:	68db      	ldr	r3, [r3, #12]
 801f048:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801f04c:	6021      	str	r1, [r4, #0]
 801f04e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801f052:	bd70      	pop	{r4, r5, r6, pc}
 801f054:	08025756 	.word	0x08025756
 801f058:	080259b1 	.word	0x080259b1

0801f05c <__multadd>:
 801f05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f060:	690d      	ldr	r5, [r1, #16]
 801f062:	4607      	mov	r7, r0
 801f064:	460c      	mov	r4, r1
 801f066:	461e      	mov	r6, r3
 801f068:	f101 0c14 	add.w	ip, r1, #20
 801f06c:	2000      	movs	r0, #0
 801f06e:	f8dc 3000 	ldr.w	r3, [ip]
 801f072:	b299      	uxth	r1, r3
 801f074:	fb02 6101 	mla	r1, r2, r1, r6
 801f078:	0c1e      	lsrs	r6, r3, #16
 801f07a:	0c0b      	lsrs	r3, r1, #16
 801f07c:	fb02 3306 	mla	r3, r2, r6, r3
 801f080:	b289      	uxth	r1, r1
 801f082:	3001      	adds	r0, #1
 801f084:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801f088:	4285      	cmp	r5, r0
 801f08a:	f84c 1b04 	str.w	r1, [ip], #4
 801f08e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801f092:	dcec      	bgt.n	801f06e <__multadd+0x12>
 801f094:	b30e      	cbz	r6, 801f0da <__multadd+0x7e>
 801f096:	68a3      	ldr	r3, [r4, #8]
 801f098:	42ab      	cmp	r3, r5
 801f09a:	dc19      	bgt.n	801f0d0 <__multadd+0x74>
 801f09c:	6861      	ldr	r1, [r4, #4]
 801f09e:	4638      	mov	r0, r7
 801f0a0:	3101      	adds	r1, #1
 801f0a2:	f7ff ff79 	bl	801ef98 <_Balloc>
 801f0a6:	4680      	mov	r8, r0
 801f0a8:	b928      	cbnz	r0, 801f0b6 <__multadd+0x5a>
 801f0aa:	4602      	mov	r2, r0
 801f0ac:	4b0c      	ldr	r3, [pc, #48]	@ (801f0e0 <__multadd+0x84>)
 801f0ae:	480d      	ldr	r0, [pc, #52]	@ (801f0e4 <__multadd+0x88>)
 801f0b0:	21ba      	movs	r1, #186	@ 0xba
 801f0b2:	f7ff f807 	bl	801e0c4 <__assert_func>
 801f0b6:	6922      	ldr	r2, [r4, #16]
 801f0b8:	3202      	adds	r2, #2
 801f0ba:	f104 010c 	add.w	r1, r4, #12
 801f0be:	0092      	lsls	r2, r2, #2
 801f0c0:	300c      	adds	r0, #12
 801f0c2:	f7fe ffea 	bl	801e09a <memcpy>
 801f0c6:	4621      	mov	r1, r4
 801f0c8:	4638      	mov	r0, r7
 801f0ca:	f7ff ffa5 	bl	801f018 <_Bfree>
 801f0ce:	4644      	mov	r4, r8
 801f0d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801f0d4:	3501      	adds	r5, #1
 801f0d6:	615e      	str	r6, [r3, #20]
 801f0d8:	6125      	str	r5, [r4, #16]
 801f0da:	4620      	mov	r0, r4
 801f0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f0e0:	080259a0 	.word	0x080259a0
 801f0e4:	080259b1 	.word	0x080259b1

0801f0e8 <__s2b>:
 801f0e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f0ec:	460c      	mov	r4, r1
 801f0ee:	4615      	mov	r5, r2
 801f0f0:	461f      	mov	r7, r3
 801f0f2:	2209      	movs	r2, #9
 801f0f4:	3308      	adds	r3, #8
 801f0f6:	4606      	mov	r6, r0
 801f0f8:	fb93 f3f2 	sdiv	r3, r3, r2
 801f0fc:	2100      	movs	r1, #0
 801f0fe:	2201      	movs	r2, #1
 801f100:	429a      	cmp	r2, r3
 801f102:	db09      	blt.n	801f118 <__s2b+0x30>
 801f104:	4630      	mov	r0, r6
 801f106:	f7ff ff47 	bl	801ef98 <_Balloc>
 801f10a:	b940      	cbnz	r0, 801f11e <__s2b+0x36>
 801f10c:	4602      	mov	r2, r0
 801f10e:	4b19      	ldr	r3, [pc, #100]	@ (801f174 <__s2b+0x8c>)
 801f110:	4819      	ldr	r0, [pc, #100]	@ (801f178 <__s2b+0x90>)
 801f112:	21d3      	movs	r1, #211	@ 0xd3
 801f114:	f7fe ffd6 	bl	801e0c4 <__assert_func>
 801f118:	0052      	lsls	r2, r2, #1
 801f11a:	3101      	adds	r1, #1
 801f11c:	e7f0      	b.n	801f100 <__s2b+0x18>
 801f11e:	9b08      	ldr	r3, [sp, #32]
 801f120:	6143      	str	r3, [r0, #20]
 801f122:	2d09      	cmp	r5, #9
 801f124:	f04f 0301 	mov.w	r3, #1
 801f128:	6103      	str	r3, [r0, #16]
 801f12a:	dd16      	ble.n	801f15a <__s2b+0x72>
 801f12c:	f104 0909 	add.w	r9, r4, #9
 801f130:	46c8      	mov	r8, r9
 801f132:	442c      	add	r4, r5
 801f134:	f818 3b01 	ldrb.w	r3, [r8], #1
 801f138:	4601      	mov	r1, r0
 801f13a:	3b30      	subs	r3, #48	@ 0x30
 801f13c:	220a      	movs	r2, #10
 801f13e:	4630      	mov	r0, r6
 801f140:	f7ff ff8c 	bl	801f05c <__multadd>
 801f144:	45a0      	cmp	r8, r4
 801f146:	d1f5      	bne.n	801f134 <__s2b+0x4c>
 801f148:	f1a5 0408 	sub.w	r4, r5, #8
 801f14c:	444c      	add	r4, r9
 801f14e:	1b2d      	subs	r5, r5, r4
 801f150:	1963      	adds	r3, r4, r5
 801f152:	42bb      	cmp	r3, r7
 801f154:	db04      	blt.n	801f160 <__s2b+0x78>
 801f156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f15a:	340a      	adds	r4, #10
 801f15c:	2509      	movs	r5, #9
 801f15e:	e7f6      	b.n	801f14e <__s2b+0x66>
 801f160:	f814 3b01 	ldrb.w	r3, [r4], #1
 801f164:	4601      	mov	r1, r0
 801f166:	3b30      	subs	r3, #48	@ 0x30
 801f168:	220a      	movs	r2, #10
 801f16a:	4630      	mov	r0, r6
 801f16c:	f7ff ff76 	bl	801f05c <__multadd>
 801f170:	e7ee      	b.n	801f150 <__s2b+0x68>
 801f172:	bf00      	nop
 801f174:	080259a0 	.word	0x080259a0
 801f178:	080259b1 	.word	0x080259b1

0801f17c <__hi0bits>:
 801f17c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801f180:	4603      	mov	r3, r0
 801f182:	bf36      	itet	cc
 801f184:	0403      	lslcc	r3, r0, #16
 801f186:	2000      	movcs	r0, #0
 801f188:	2010      	movcc	r0, #16
 801f18a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801f18e:	bf3c      	itt	cc
 801f190:	021b      	lslcc	r3, r3, #8
 801f192:	3008      	addcc	r0, #8
 801f194:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801f198:	bf3c      	itt	cc
 801f19a:	011b      	lslcc	r3, r3, #4
 801f19c:	3004      	addcc	r0, #4
 801f19e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f1a2:	bf3c      	itt	cc
 801f1a4:	009b      	lslcc	r3, r3, #2
 801f1a6:	3002      	addcc	r0, #2
 801f1a8:	2b00      	cmp	r3, #0
 801f1aa:	db05      	blt.n	801f1b8 <__hi0bits+0x3c>
 801f1ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801f1b0:	f100 0001 	add.w	r0, r0, #1
 801f1b4:	bf08      	it	eq
 801f1b6:	2020      	moveq	r0, #32
 801f1b8:	4770      	bx	lr

0801f1ba <__lo0bits>:
 801f1ba:	6803      	ldr	r3, [r0, #0]
 801f1bc:	4602      	mov	r2, r0
 801f1be:	f013 0007 	ands.w	r0, r3, #7
 801f1c2:	d00b      	beq.n	801f1dc <__lo0bits+0x22>
 801f1c4:	07d9      	lsls	r1, r3, #31
 801f1c6:	d421      	bmi.n	801f20c <__lo0bits+0x52>
 801f1c8:	0798      	lsls	r0, r3, #30
 801f1ca:	bf49      	itett	mi
 801f1cc:	085b      	lsrmi	r3, r3, #1
 801f1ce:	089b      	lsrpl	r3, r3, #2
 801f1d0:	2001      	movmi	r0, #1
 801f1d2:	6013      	strmi	r3, [r2, #0]
 801f1d4:	bf5c      	itt	pl
 801f1d6:	6013      	strpl	r3, [r2, #0]
 801f1d8:	2002      	movpl	r0, #2
 801f1da:	4770      	bx	lr
 801f1dc:	b299      	uxth	r1, r3
 801f1de:	b909      	cbnz	r1, 801f1e4 <__lo0bits+0x2a>
 801f1e0:	0c1b      	lsrs	r3, r3, #16
 801f1e2:	2010      	movs	r0, #16
 801f1e4:	b2d9      	uxtb	r1, r3
 801f1e6:	b909      	cbnz	r1, 801f1ec <__lo0bits+0x32>
 801f1e8:	3008      	adds	r0, #8
 801f1ea:	0a1b      	lsrs	r3, r3, #8
 801f1ec:	0719      	lsls	r1, r3, #28
 801f1ee:	bf04      	itt	eq
 801f1f0:	091b      	lsreq	r3, r3, #4
 801f1f2:	3004      	addeq	r0, #4
 801f1f4:	0799      	lsls	r1, r3, #30
 801f1f6:	bf04      	itt	eq
 801f1f8:	089b      	lsreq	r3, r3, #2
 801f1fa:	3002      	addeq	r0, #2
 801f1fc:	07d9      	lsls	r1, r3, #31
 801f1fe:	d403      	bmi.n	801f208 <__lo0bits+0x4e>
 801f200:	085b      	lsrs	r3, r3, #1
 801f202:	f100 0001 	add.w	r0, r0, #1
 801f206:	d003      	beq.n	801f210 <__lo0bits+0x56>
 801f208:	6013      	str	r3, [r2, #0]
 801f20a:	4770      	bx	lr
 801f20c:	2000      	movs	r0, #0
 801f20e:	4770      	bx	lr
 801f210:	2020      	movs	r0, #32
 801f212:	4770      	bx	lr

0801f214 <__i2b>:
 801f214:	b510      	push	{r4, lr}
 801f216:	460c      	mov	r4, r1
 801f218:	2101      	movs	r1, #1
 801f21a:	f7ff febd 	bl	801ef98 <_Balloc>
 801f21e:	4602      	mov	r2, r0
 801f220:	b928      	cbnz	r0, 801f22e <__i2b+0x1a>
 801f222:	4b05      	ldr	r3, [pc, #20]	@ (801f238 <__i2b+0x24>)
 801f224:	4805      	ldr	r0, [pc, #20]	@ (801f23c <__i2b+0x28>)
 801f226:	f240 1145 	movw	r1, #325	@ 0x145
 801f22a:	f7fe ff4b 	bl	801e0c4 <__assert_func>
 801f22e:	2301      	movs	r3, #1
 801f230:	6144      	str	r4, [r0, #20]
 801f232:	6103      	str	r3, [r0, #16]
 801f234:	bd10      	pop	{r4, pc}
 801f236:	bf00      	nop
 801f238:	080259a0 	.word	0x080259a0
 801f23c:	080259b1 	.word	0x080259b1

0801f240 <__multiply>:
 801f240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f244:	4614      	mov	r4, r2
 801f246:	690a      	ldr	r2, [r1, #16]
 801f248:	6923      	ldr	r3, [r4, #16]
 801f24a:	429a      	cmp	r2, r3
 801f24c:	bfa8      	it	ge
 801f24e:	4623      	movge	r3, r4
 801f250:	460f      	mov	r7, r1
 801f252:	bfa4      	itt	ge
 801f254:	460c      	movge	r4, r1
 801f256:	461f      	movge	r7, r3
 801f258:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801f25c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801f260:	68a3      	ldr	r3, [r4, #8]
 801f262:	6861      	ldr	r1, [r4, #4]
 801f264:	eb0a 0609 	add.w	r6, sl, r9
 801f268:	42b3      	cmp	r3, r6
 801f26a:	b085      	sub	sp, #20
 801f26c:	bfb8      	it	lt
 801f26e:	3101      	addlt	r1, #1
 801f270:	f7ff fe92 	bl	801ef98 <_Balloc>
 801f274:	b930      	cbnz	r0, 801f284 <__multiply+0x44>
 801f276:	4602      	mov	r2, r0
 801f278:	4b44      	ldr	r3, [pc, #272]	@ (801f38c <__multiply+0x14c>)
 801f27a:	4845      	ldr	r0, [pc, #276]	@ (801f390 <__multiply+0x150>)
 801f27c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801f280:	f7fe ff20 	bl	801e0c4 <__assert_func>
 801f284:	f100 0514 	add.w	r5, r0, #20
 801f288:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801f28c:	462b      	mov	r3, r5
 801f28e:	2200      	movs	r2, #0
 801f290:	4543      	cmp	r3, r8
 801f292:	d321      	bcc.n	801f2d8 <__multiply+0x98>
 801f294:	f107 0114 	add.w	r1, r7, #20
 801f298:	f104 0214 	add.w	r2, r4, #20
 801f29c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801f2a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801f2a4:	9302      	str	r3, [sp, #8]
 801f2a6:	1b13      	subs	r3, r2, r4
 801f2a8:	3b15      	subs	r3, #21
 801f2aa:	f023 0303 	bic.w	r3, r3, #3
 801f2ae:	3304      	adds	r3, #4
 801f2b0:	f104 0715 	add.w	r7, r4, #21
 801f2b4:	42ba      	cmp	r2, r7
 801f2b6:	bf38      	it	cc
 801f2b8:	2304      	movcc	r3, #4
 801f2ba:	9301      	str	r3, [sp, #4]
 801f2bc:	9b02      	ldr	r3, [sp, #8]
 801f2be:	9103      	str	r1, [sp, #12]
 801f2c0:	428b      	cmp	r3, r1
 801f2c2:	d80c      	bhi.n	801f2de <__multiply+0x9e>
 801f2c4:	2e00      	cmp	r6, #0
 801f2c6:	dd03      	ble.n	801f2d0 <__multiply+0x90>
 801f2c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801f2cc:	2b00      	cmp	r3, #0
 801f2ce:	d05b      	beq.n	801f388 <__multiply+0x148>
 801f2d0:	6106      	str	r6, [r0, #16]
 801f2d2:	b005      	add	sp, #20
 801f2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2d8:	f843 2b04 	str.w	r2, [r3], #4
 801f2dc:	e7d8      	b.n	801f290 <__multiply+0x50>
 801f2de:	f8b1 a000 	ldrh.w	sl, [r1]
 801f2e2:	f1ba 0f00 	cmp.w	sl, #0
 801f2e6:	d024      	beq.n	801f332 <__multiply+0xf2>
 801f2e8:	f104 0e14 	add.w	lr, r4, #20
 801f2ec:	46a9      	mov	r9, r5
 801f2ee:	f04f 0c00 	mov.w	ip, #0
 801f2f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 801f2f6:	f8d9 3000 	ldr.w	r3, [r9]
 801f2fa:	fa1f fb87 	uxth.w	fp, r7
 801f2fe:	b29b      	uxth	r3, r3
 801f300:	fb0a 330b 	mla	r3, sl, fp, r3
 801f304:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801f308:	f8d9 7000 	ldr.w	r7, [r9]
 801f30c:	4463      	add	r3, ip
 801f30e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f312:	fb0a c70b 	mla	r7, sl, fp, ip
 801f316:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801f31a:	b29b      	uxth	r3, r3
 801f31c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f320:	4572      	cmp	r2, lr
 801f322:	f849 3b04 	str.w	r3, [r9], #4
 801f326:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801f32a:	d8e2      	bhi.n	801f2f2 <__multiply+0xb2>
 801f32c:	9b01      	ldr	r3, [sp, #4]
 801f32e:	f845 c003 	str.w	ip, [r5, r3]
 801f332:	9b03      	ldr	r3, [sp, #12]
 801f334:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801f338:	3104      	adds	r1, #4
 801f33a:	f1b9 0f00 	cmp.w	r9, #0
 801f33e:	d021      	beq.n	801f384 <__multiply+0x144>
 801f340:	682b      	ldr	r3, [r5, #0]
 801f342:	f104 0c14 	add.w	ip, r4, #20
 801f346:	46ae      	mov	lr, r5
 801f348:	f04f 0a00 	mov.w	sl, #0
 801f34c:	f8bc b000 	ldrh.w	fp, [ip]
 801f350:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801f354:	fb09 770b 	mla	r7, r9, fp, r7
 801f358:	4457      	add	r7, sl
 801f35a:	b29b      	uxth	r3, r3
 801f35c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801f360:	f84e 3b04 	str.w	r3, [lr], #4
 801f364:	f85c 3b04 	ldr.w	r3, [ip], #4
 801f368:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f36c:	f8be 3000 	ldrh.w	r3, [lr]
 801f370:	fb09 330a 	mla	r3, r9, sl, r3
 801f374:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801f378:	4562      	cmp	r2, ip
 801f37a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801f37e:	d8e5      	bhi.n	801f34c <__multiply+0x10c>
 801f380:	9f01      	ldr	r7, [sp, #4]
 801f382:	51eb      	str	r3, [r5, r7]
 801f384:	3504      	adds	r5, #4
 801f386:	e799      	b.n	801f2bc <__multiply+0x7c>
 801f388:	3e01      	subs	r6, #1
 801f38a:	e79b      	b.n	801f2c4 <__multiply+0x84>
 801f38c:	080259a0 	.word	0x080259a0
 801f390:	080259b1 	.word	0x080259b1

0801f394 <__pow5mult>:
 801f394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801f398:	4615      	mov	r5, r2
 801f39a:	f012 0203 	ands.w	r2, r2, #3
 801f39e:	4607      	mov	r7, r0
 801f3a0:	460e      	mov	r6, r1
 801f3a2:	d007      	beq.n	801f3b4 <__pow5mult+0x20>
 801f3a4:	4c25      	ldr	r4, [pc, #148]	@ (801f43c <__pow5mult+0xa8>)
 801f3a6:	3a01      	subs	r2, #1
 801f3a8:	2300      	movs	r3, #0
 801f3aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801f3ae:	f7ff fe55 	bl	801f05c <__multadd>
 801f3b2:	4606      	mov	r6, r0
 801f3b4:	10ad      	asrs	r5, r5, #2
 801f3b6:	d03d      	beq.n	801f434 <__pow5mult+0xa0>
 801f3b8:	69fc      	ldr	r4, [r7, #28]
 801f3ba:	b97c      	cbnz	r4, 801f3dc <__pow5mult+0x48>
 801f3bc:	2010      	movs	r0, #16
 801f3be:	f7ff fd35 	bl	801ee2c <malloc>
 801f3c2:	4602      	mov	r2, r0
 801f3c4:	61f8      	str	r0, [r7, #28]
 801f3c6:	b928      	cbnz	r0, 801f3d4 <__pow5mult+0x40>
 801f3c8:	4b1d      	ldr	r3, [pc, #116]	@ (801f440 <__pow5mult+0xac>)
 801f3ca:	481e      	ldr	r0, [pc, #120]	@ (801f444 <__pow5mult+0xb0>)
 801f3cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801f3d0:	f7fe fe78 	bl	801e0c4 <__assert_func>
 801f3d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801f3d8:	6004      	str	r4, [r0, #0]
 801f3da:	60c4      	str	r4, [r0, #12]
 801f3dc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801f3e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801f3e4:	b94c      	cbnz	r4, 801f3fa <__pow5mult+0x66>
 801f3e6:	f240 2171 	movw	r1, #625	@ 0x271
 801f3ea:	4638      	mov	r0, r7
 801f3ec:	f7ff ff12 	bl	801f214 <__i2b>
 801f3f0:	2300      	movs	r3, #0
 801f3f2:	f8c8 0008 	str.w	r0, [r8, #8]
 801f3f6:	4604      	mov	r4, r0
 801f3f8:	6003      	str	r3, [r0, #0]
 801f3fa:	f04f 0900 	mov.w	r9, #0
 801f3fe:	07eb      	lsls	r3, r5, #31
 801f400:	d50a      	bpl.n	801f418 <__pow5mult+0x84>
 801f402:	4631      	mov	r1, r6
 801f404:	4622      	mov	r2, r4
 801f406:	4638      	mov	r0, r7
 801f408:	f7ff ff1a 	bl	801f240 <__multiply>
 801f40c:	4631      	mov	r1, r6
 801f40e:	4680      	mov	r8, r0
 801f410:	4638      	mov	r0, r7
 801f412:	f7ff fe01 	bl	801f018 <_Bfree>
 801f416:	4646      	mov	r6, r8
 801f418:	106d      	asrs	r5, r5, #1
 801f41a:	d00b      	beq.n	801f434 <__pow5mult+0xa0>
 801f41c:	6820      	ldr	r0, [r4, #0]
 801f41e:	b938      	cbnz	r0, 801f430 <__pow5mult+0x9c>
 801f420:	4622      	mov	r2, r4
 801f422:	4621      	mov	r1, r4
 801f424:	4638      	mov	r0, r7
 801f426:	f7ff ff0b 	bl	801f240 <__multiply>
 801f42a:	6020      	str	r0, [r4, #0]
 801f42c:	f8c0 9000 	str.w	r9, [r0]
 801f430:	4604      	mov	r4, r0
 801f432:	e7e4      	b.n	801f3fe <__pow5mult+0x6a>
 801f434:	4630      	mov	r0, r6
 801f436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801f43a:	bf00      	nop
 801f43c:	08025a0c 	.word	0x08025a0c
 801f440:	08025756 	.word	0x08025756
 801f444:	080259b1 	.word	0x080259b1

0801f448 <__lshift>:
 801f448:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f44c:	460c      	mov	r4, r1
 801f44e:	6849      	ldr	r1, [r1, #4]
 801f450:	6923      	ldr	r3, [r4, #16]
 801f452:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801f456:	68a3      	ldr	r3, [r4, #8]
 801f458:	4607      	mov	r7, r0
 801f45a:	4691      	mov	r9, r2
 801f45c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801f460:	f108 0601 	add.w	r6, r8, #1
 801f464:	42b3      	cmp	r3, r6
 801f466:	db0b      	blt.n	801f480 <__lshift+0x38>
 801f468:	4638      	mov	r0, r7
 801f46a:	f7ff fd95 	bl	801ef98 <_Balloc>
 801f46e:	4605      	mov	r5, r0
 801f470:	b948      	cbnz	r0, 801f486 <__lshift+0x3e>
 801f472:	4602      	mov	r2, r0
 801f474:	4b28      	ldr	r3, [pc, #160]	@ (801f518 <__lshift+0xd0>)
 801f476:	4829      	ldr	r0, [pc, #164]	@ (801f51c <__lshift+0xd4>)
 801f478:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801f47c:	f7fe fe22 	bl	801e0c4 <__assert_func>
 801f480:	3101      	adds	r1, #1
 801f482:	005b      	lsls	r3, r3, #1
 801f484:	e7ee      	b.n	801f464 <__lshift+0x1c>
 801f486:	2300      	movs	r3, #0
 801f488:	f100 0114 	add.w	r1, r0, #20
 801f48c:	f100 0210 	add.w	r2, r0, #16
 801f490:	4618      	mov	r0, r3
 801f492:	4553      	cmp	r3, sl
 801f494:	db33      	blt.n	801f4fe <__lshift+0xb6>
 801f496:	6920      	ldr	r0, [r4, #16]
 801f498:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801f49c:	f104 0314 	add.w	r3, r4, #20
 801f4a0:	f019 091f 	ands.w	r9, r9, #31
 801f4a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801f4a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801f4ac:	d02b      	beq.n	801f506 <__lshift+0xbe>
 801f4ae:	f1c9 0e20 	rsb	lr, r9, #32
 801f4b2:	468a      	mov	sl, r1
 801f4b4:	2200      	movs	r2, #0
 801f4b6:	6818      	ldr	r0, [r3, #0]
 801f4b8:	fa00 f009 	lsl.w	r0, r0, r9
 801f4bc:	4310      	orrs	r0, r2
 801f4be:	f84a 0b04 	str.w	r0, [sl], #4
 801f4c2:	f853 2b04 	ldr.w	r2, [r3], #4
 801f4c6:	459c      	cmp	ip, r3
 801f4c8:	fa22 f20e 	lsr.w	r2, r2, lr
 801f4cc:	d8f3      	bhi.n	801f4b6 <__lshift+0x6e>
 801f4ce:	ebac 0304 	sub.w	r3, ip, r4
 801f4d2:	3b15      	subs	r3, #21
 801f4d4:	f023 0303 	bic.w	r3, r3, #3
 801f4d8:	3304      	adds	r3, #4
 801f4da:	f104 0015 	add.w	r0, r4, #21
 801f4de:	4584      	cmp	ip, r0
 801f4e0:	bf38      	it	cc
 801f4e2:	2304      	movcc	r3, #4
 801f4e4:	50ca      	str	r2, [r1, r3]
 801f4e6:	b10a      	cbz	r2, 801f4ec <__lshift+0xa4>
 801f4e8:	f108 0602 	add.w	r6, r8, #2
 801f4ec:	3e01      	subs	r6, #1
 801f4ee:	4638      	mov	r0, r7
 801f4f0:	612e      	str	r6, [r5, #16]
 801f4f2:	4621      	mov	r1, r4
 801f4f4:	f7ff fd90 	bl	801f018 <_Bfree>
 801f4f8:	4628      	mov	r0, r5
 801f4fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f4fe:	f842 0f04 	str.w	r0, [r2, #4]!
 801f502:	3301      	adds	r3, #1
 801f504:	e7c5      	b.n	801f492 <__lshift+0x4a>
 801f506:	3904      	subs	r1, #4
 801f508:	f853 2b04 	ldr.w	r2, [r3], #4
 801f50c:	f841 2f04 	str.w	r2, [r1, #4]!
 801f510:	459c      	cmp	ip, r3
 801f512:	d8f9      	bhi.n	801f508 <__lshift+0xc0>
 801f514:	e7ea      	b.n	801f4ec <__lshift+0xa4>
 801f516:	bf00      	nop
 801f518:	080259a0 	.word	0x080259a0
 801f51c:	080259b1 	.word	0x080259b1

0801f520 <__mcmp>:
 801f520:	690a      	ldr	r2, [r1, #16]
 801f522:	4603      	mov	r3, r0
 801f524:	6900      	ldr	r0, [r0, #16]
 801f526:	1a80      	subs	r0, r0, r2
 801f528:	b530      	push	{r4, r5, lr}
 801f52a:	d10e      	bne.n	801f54a <__mcmp+0x2a>
 801f52c:	3314      	adds	r3, #20
 801f52e:	3114      	adds	r1, #20
 801f530:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801f534:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801f538:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801f53c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801f540:	4295      	cmp	r5, r2
 801f542:	d003      	beq.n	801f54c <__mcmp+0x2c>
 801f544:	d205      	bcs.n	801f552 <__mcmp+0x32>
 801f546:	f04f 30ff 	mov.w	r0, #4294967295
 801f54a:	bd30      	pop	{r4, r5, pc}
 801f54c:	42a3      	cmp	r3, r4
 801f54e:	d3f3      	bcc.n	801f538 <__mcmp+0x18>
 801f550:	e7fb      	b.n	801f54a <__mcmp+0x2a>
 801f552:	2001      	movs	r0, #1
 801f554:	e7f9      	b.n	801f54a <__mcmp+0x2a>
	...

0801f558 <__mdiff>:
 801f558:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f55c:	4689      	mov	r9, r1
 801f55e:	4606      	mov	r6, r0
 801f560:	4611      	mov	r1, r2
 801f562:	4648      	mov	r0, r9
 801f564:	4614      	mov	r4, r2
 801f566:	f7ff ffdb 	bl	801f520 <__mcmp>
 801f56a:	1e05      	subs	r5, r0, #0
 801f56c:	d112      	bne.n	801f594 <__mdiff+0x3c>
 801f56e:	4629      	mov	r1, r5
 801f570:	4630      	mov	r0, r6
 801f572:	f7ff fd11 	bl	801ef98 <_Balloc>
 801f576:	4602      	mov	r2, r0
 801f578:	b928      	cbnz	r0, 801f586 <__mdiff+0x2e>
 801f57a:	4b3f      	ldr	r3, [pc, #252]	@ (801f678 <__mdiff+0x120>)
 801f57c:	f240 2137 	movw	r1, #567	@ 0x237
 801f580:	483e      	ldr	r0, [pc, #248]	@ (801f67c <__mdiff+0x124>)
 801f582:	f7fe fd9f 	bl	801e0c4 <__assert_func>
 801f586:	2301      	movs	r3, #1
 801f588:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801f58c:	4610      	mov	r0, r2
 801f58e:	b003      	add	sp, #12
 801f590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f594:	bfbc      	itt	lt
 801f596:	464b      	movlt	r3, r9
 801f598:	46a1      	movlt	r9, r4
 801f59a:	4630      	mov	r0, r6
 801f59c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801f5a0:	bfba      	itte	lt
 801f5a2:	461c      	movlt	r4, r3
 801f5a4:	2501      	movlt	r5, #1
 801f5a6:	2500      	movge	r5, #0
 801f5a8:	f7ff fcf6 	bl	801ef98 <_Balloc>
 801f5ac:	4602      	mov	r2, r0
 801f5ae:	b918      	cbnz	r0, 801f5b8 <__mdiff+0x60>
 801f5b0:	4b31      	ldr	r3, [pc, #196]	@ (801f678 <__mdiff+0x120>)
 801f5b2:	f240 2145 	movw	r1, #581	@ 0x245
 801f5b6:	e7e3      	b.n	801f580 <__mdiff+0x28>
 801f5b8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801f5bc:	6926      	ldr	r6, [r4, #16]
 801f5be:	60c5      	str	r5, [r0, #12]
 801f5c0:	f109 0310 	add.w	r3, r9, #16
 801f5c4:	f109 0514 	add.w	r5, r9, #20
 801f5c8:	f104 0e14 	add.w	lr, r4, #20
 801f5cc:	f100 0b14 	add.w	fp, r0, #20
 801f5d0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801f5d4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801f5d8:	9301      	str	r3, [sp, #4]
 801f5da:	46d9      	mov	r9, fp
 801f5dc:	f04f 0c00 	mov.w	ip, #0
 801f5e0:	9b01      	ldr	r3, [sp, #4]
 801f5e2:	f85e 0b04 	ldr.w	r0, [lr], #4
 801f5e6:	f853 af04 	ldr.w	sl, [r3, #4]!
 801f5ea:	9301      	str	r3, [sp, #4]
 801f5ec:	fa1f f38a 	uxth.w	r3, sl
 801f5f0:	4619      	mov	r1, r3
 801f5f2:	b283      	uxth	r3, r0
 801f5f4:	1acb      	subs	r3, r1, r3
 801f5f6:	0c00      	lsrs	r0, r0, #16
 801f5f8:	4463      	add	r3, ip
 801f5fa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 801f5fe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 801f602:	b29b      	uxth	r3, r3
 801f604:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801f608:	4576      	cmp	r6, lr
 801f60a:	f849 3b04 	str.w	r3, [r9], #4
 801f60e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f612:	d8e5      	bhi.n	801f5e0 <__mdiff+0x88>
 801f614:	1b33      	subs	r3, r6, r4
 801f616:	3b15      	subs	r3, #21
 801f618:	f023 0303 	bic.w	r3, r3, #3
 801f61c:	3415      	adds	r4, #21
 801f61e:	3304      	adds	r3, #4
 801f620:	42a6      	cmp	r6, r4
 801f622:	bf38      	it	cc
 801f624:	2304      	movcc	r3, #4
 801f626:	441d      	add	r5, r3
 801f628:	445b      	add	r3, fp
 801f62a:	461e      	mov	r6, r3
 801f62c:	462c      	mov	r4, r5
 801f62e:	4544      	cmp	r4, r8
 801f630:	d30e      	bcc.n	801f650 <__mdiff+0xf8>
 801f632:	f108 0103 	add.w	r1, r8, #3
 801f636:	1b49      	subs	r1, r1, r5
 801f638:	f021 0103 	bic.w	r1, r1, #3
 801f63c:	3d03      	subs	r5, #3
 801f63e:	45a8      	cmp	r8, r5
 801f640:	bf38      	it	cc
 801f642:	2100      	movcc	r1, #0
 801f644:	440b      	add	r3, r1
 801f646:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f64a:	b191      	cbz	r1, 801f672 <__mdiff+0x11a>
 801f64c:	6117      	str	r7, [r2, #16]
 801f64e:	e79d      	b.n	801f58c <__mdiff+0x34>
 801f650:	f854 1b04 	ldr.w	r1, [r4], #4
 801f654:	46e6      	mov	lr, ip
 801f656:	0c08      	lsrs	r0, r1, #16
 801f658:	fa1c fc81 	uxtah	ip, ip, r1
 801f65c:	4471      	add	r1, lr
 801f65e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801f662:	b289      	uxth	r1, r1
 801f664:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801f668:	f846 1b04 	str.w	r1, [r6], #4
 801f66c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 801f670:	e7dd      	b.n	801f62e <__mdiff+0xd6>
 801f672:	3f01      	subs	r7, #1
 801f674:	e7e7      	b.n	801f646 <__mdiff+0xee>
 801f676:	bf00      	nop
 801f678:	080259a0 	.word	0x080259a0
 801f67c:	080259b1 	.word	0x080259b1

0801f680 <__ulp>:
 801f680:	b082      	sub	sp, #8
 801f682:	ed8d 0b00 	vstr	d0, [sp]
 801f686:	9a01      	ldr	r2, [sp, #4]
 801f688:	4b0f      	ldr	r3, [pc, #60]	@ (801f6c8 <__ulp+0x48>)
 801f68a:	4013      	ands	r3, r2
 801f68c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 801f690:	2b00      	cmp	r3, #0
 801f692:	dc08      	bgt.n	801f6a6 <__ulp+0x26>
 801f694:	425b      	negs	r3, r3
 801f696:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 801f69a:	ea4f 5223 	mov.w	r2, r3, asr #20
 801f69e:	da04      	bge.n	801f6aa <__ulp+0x2a>
 801f6a0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801f6a4:	4113      	asrs	r3, r2
 801f6a6:	2200      	movs	r2, #0
 801f6a8:	e008      	b.n	801f6bc <__ulp+0x3c>
 801f6aa:	f1a2 0314 	sub.w	r3, r2, #20
 801f6ae:	2b1e      	cmp	r3, #30
 801f6b0:	bfda      	itte	le
 801f6b2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801f6b6:	40da      	lsrle	r2, r3
 801f6b8:	2201      	movgt	r2, #1
 801f6ba:	2300      	movs	r3, #0
 801f6bc:	4619      	mov	r1, r3
 801f6be:	4610      	mov	r0, r2
 801f6c0:	ec41 0b10 	vmov	d0, r0, r1
 801f6c4:	b002      	add	sp, #8
 801f6c6:	4770      	bx	lr
 801f6c8:	7ff00000 	.word	0x7ff00000

0801f6cc <__b2d>:
 801f6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f6d0:	6906      	ldr	r6, [r0, #16]
 801f6d2:	f100 0814 	add.w	r8, r0, #20
 801f6d6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 801f6da:	1f37      	subs	r7, r6, #4
 801f6dc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801f6e0:	4610      	mov	r0, r2
 801f6e2:	f7ff fd4b 	bl	801f17c <__hi0bits>
 801f6e6:	f1c0 0320 	rsb	r3, r0, #32
 801f6ea:	280a      	cmp	r0, #10
 801f6ec:	600b      	str	r3, [r1, #0]
 801f6ee:	491b      	ldr	r1, [pc, #108]	@ (801f75c <__b2d+0x90>)
 801f6f0:	dc15      	bgt.n	801f71e <__b2d+0x52>
 801f6f2:	f1c0 0c0b 	rsb	ip, r0, #11
 801f6f6:	fa22 f30c 	lsr.w	r3, r2, ip
 801f6fa:	45b8      	cmp	r8, r7
 801f6fc:	ea43 0501 	orr.w	r5, r3, r1
 801f700:	bf34      	ite	cc
 801f702:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801f706:	2300      	movcs	r3, #0
 801f708:	3015      	adds	r0, #21
 801f70a:	fa02 f000 	lsl.w	r0, r2, r0
 801f70e:	fa23 f30c 	lsr.w	r3, r3, ip
 801f712:	4303      	orrs	r3, r0
 801f714:	461c      	mov	r4, r3
 801f716:	ec45 4b10 	vmov	d0, r4, r5
 801f71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f71e:	45b8      	cmp	r8, r7
 801f720:	bf3a      	itte	cc
 801f722:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801f726:	f1a6 0708 	subcc.w	r7, r6, #8
 801f72a:	2300      	movcs	r3, #0
 801f72c:	380b      	subs	r0, #11
 801f72e:	d012      	beq.n	801f756 <__b2d+0x8a>
 801f730:	f1c0 0120 	rsb	r1, r0, #32
 801f734:	fa23 f401 	lsr.w	r4, r3, r1
 801f738:	4082      	lsls	r2, r0
 801f73a:	4322      	orrs	r2, r4
 801f73c:	4547      	cmp	r7, r8
 801f73e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801f742:	bf8c      	ite	hi
 801f744:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 801f748:	2200      	movls	r2, #0
 801f74a:	4083      	lsls	r3, r0
 801f74c:	40ca      	lsrs	r2, r1
 801f74e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801f752:	4313      	orrs	r3, r2
 801f754:	e7de      	b.n	801f714 <__b2d+0x48>
 801f756:	ea42 0501 	orr.w	r5, r2, r1
 801f75a:	e7db      	b.n	801f714 <__b2d+0x48>
 801f75c:	3ff00000 	.word	0x3ff00000

0801f760 <__d2b>:
 801f760:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801f764:	460f      	mov	r7, r1
 801f766:	2101      	movs	r1, #1
 801f768:	ec59 8b10 	vmov	r8, r9, d0
 801f76c:	4616      	mov	r6, r2
 801f76e:	f7ff fc13 	bl	801ef98 <_Balloc>
 801f772:	4604      	mov	r4, r0
 801f774:	b930      	cbnz	r0, 801f784 <__d2b+0x24>
 801f776:	4602      	mov	r2, r0
 801f778:	4b23      	ldr	r3, [pc, #140]	@ (801f808 <__d2b+0xa8>)
 801f77a:	4824      	ldr	r0, [pc, #144]	@ (801f80c <__d2b+0xac>)
 801f77c:	f240 310f 	movw	r1, #783	@ 0x30f
 801f780:	f7fe fca0 	bl	801e0c4 <__assert_func>
 801f784:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801f788:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801f78c:	b10d      	cbz	r5, 801f792 <__d2b+0x32>
 801f78e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801f792:	9301      	str	r3, [sp, #4]
 801f794:	f1b8 0300 	subs.w	r3, r8, #0
 801f798:	d023      	beq.n	801f7e2 <__d2b+0x82>
 801f79a:	4668      	mov	r0, sp
 801f79c:	9300      	str	r3, [sp, #0]
 801f79e:	f7ff fd0c 	bl	801f1ba <__lo0bits>
 801f7a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801f7a6:	b1d0      	cbz	r0, 801f7de <__d2b+0x7e>
 801f7a8:	f1c0 0320 	rsb	r3, r0, #32
 801f7ac:	fa02 f303 	lsl.w	r3, r2, r3
 801f7b0:	430b      	orrs	r3, r1
 801f7b2:	40c2      	lsrs	r2, r0
 801f7b4:	6163      	str	r3, [r4, #20]
 801f7b6:	9201      	str	r2, [sp, #4]
 801f7b8:	9b01      	ldr	r3, [sp, #4]
 801f7ba:	61a3      	str	r3, [r4, #24]
 801f7bc:	2b00      	cmp	r3, #0
 801f7be:	bf0c      	ite	eq
 801f7c0:	2201      	moveq	r2, #1
 801f7c2:	2202      	movne	r2, #2
 801f7c4:	6122      	str	r2, [r4, #16]
 801f7c6:	b1a5      	cbz	r5, 801f7f2 <__d2b+0x92>
 801f7c8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 801f7cc:	4405      	add	r5, r0
 801f7ce:	603d      	str	r5, [r7, #0]
 801f7d0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 801f7d4:	6030      	str	r0, [r6, #0]
 801f7d6:	4620      	mov	r0, r4
 801f7d8:	b003      	add	sp, #12
 801f7da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f7de:	6161      	str	r1, [r4, #20]
 801f7e0:	e7ea      	b.n	801f7b8 <__d2b+0x58>
 801f7e2:	a801      	add	r0, sp, #4
 801f7e4:	f7ff fce9 	bl	801f1ba <__lo0bits>
 801f7e8:	9b01      	ldr	r3, [sp, #4]
 801f7ea:	6163      	str	r3, [r4, #20]
 801f7ec:	3020      	adds	r0, #32
 801f7ee:	2201      	movs	r2, #1
 801f7f0:	e7e8      	b.n	801f7c4 <__d2b+0x64>
 801f7f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801f7f6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801f7fa:	6038      	str	r0, [r7, #0]
 801f7fc:	6918      	ldr	r0, [r3, #16]
 801f7fe:	f7ff fcbd 	bl	801f17c <__hi0bits>
 801f802:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801f806:	e7e5      	b.n	801f7d4 <__d2b+0x74>
 801f808:	080259a0 	.word	0x080259a0
 801f80c:	080259b1 	.word	0x080259b1

0801f810 <__ratio>:
 801f810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f814:	b085      	sub	sp, #20
 801f816:	e9cd 1000 	strd	r1, r0, [sp]
 801f81a:	a902      	add	r1, sp, #8
 801f81c:	f7ff ff56 	bl	801f6cc <__b2d>
 801f820:	9800      	ldr	r0, [sp, #0]
 801f822:	a903      	add	r1, sp, #12
 801f824:	ec55 4b10 	vmov	r4, r5, d0
 801f828:	f7ff ff50 	bl	801f6cc <__b2d>
 801f82c:	9b01      	ldr	r3, [sp, #4]
 801f82e:	6919      	ldr	r1, [r3, #16]
 801f830:	9b00      	ldr	r3, [sp, #0]
 801f832:	691b      	ldr	r3, [r3, #16]
 801f834:	1ac9      	subs	r1, r1, r3
 801f836:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 801f83a:	1a9b      	subs	r3, r3, r2
 801f83c:	ec5b ab10 	vmov	sl, fp, d0
 801f840:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801f844:	2b00      	cmp	r3, #0
 801f846:	bfce      	itee	gt
 801f848:	462a      	movgt	r2, r5
 801f84a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801f84e:	465a      	movle	r2, fp
 801f850:	462f      	mov	r7, r5
 801f852:	46d9      	mov	r9, fp
 801f854:	bfcc      	ite	gt
 801f856:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801f85a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 801f85e:	464b      	mov	r3, r9
 801f860:	4652      	mov	r2, sl
 801f862:	4620      	mov	r0, r4
 801f864:	4639      	mov	r1, r7
 801f866:	f7e0 fff1 	bl	800084c <__aeabi_ddiv>
 801f86a:	ec41 0b10 	vmov	d0, r0, r1
 801f86e:	b005      	add	sp, #20
 801f870:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f874 <__copybits>:
 801f874:	3901      	subs	r1, #1
 801f876:	b570      	push	{r4, r5, r6, lr}
 801f878:	1149      	asrs	r1, r1, #5
 801f87a:	6914      	ldr	r4, [r2, #16]
 801f87c:	3101      	adds	r1, #1
 801f87e:	f102 0314 	add.w	r3, r2, #20
 801f882:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801f886:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801f88a:	1f05      	subs	r5, r0, #4
 801f88c:	42a3      	cmp	r3, r4
 801f88e:	d30c      	bcc.n	801f8aa <__copybits+0x36>
 801f890:	1aa3      	subs	r3, r4, r2
 801f892:	3b11      	subs	r3, #17
 801f894:	f023 0303 	bic.w	r3, r3, #3
 801f898:	3211      	adds	r2, #17
 801f89a:	42a2      	cmp	r2, r4
 801f89c:	bf88      	it	hi
 801f89e:	2300      	movhi	r3, #0
 801f8a0:	4418      	add	r0, r3
 801f8a2:	2300      	movs	r3, #0
 801f8a4:	4288      	cmp	r0, r1
 801f8a6:	d305      	bcc.n	801f8b4 <__copybits+0x40>
 801f8a8:	bd70      	pop	{r4, r5, r6, pc}
 801f8aa:	f853 6b04 	ldr.w	r6, [r3], #4
 801f8ae:	f845 6f04 	str.w	r6, [r5, #4]!
 801f8b2:	e7eb      	b.n	801f88c <__copybits+0x18>
 801f8b4:	f840 3b04 	str.w	r3, [r0], #4
 801f8b8:	e7f4      	b.n	801f8a4 <__copybits+0x30>

0801f8ba <__any_on>:
 801f8ba:	f100 0214 	add.w	r2, r0, #20
 801f8be:	6900      	ldr	r0, [r0, #16]
 801f8c0:	114b      	asrs	r3, r1, #5
 801f8c2:	4298      	cmp	r0, r3
 801f8c4:	b510      	push	{r4, lr}
 801f8c6:	db11      	blt.n	801f8ec <__any_on+0x32>
 801f8c8:	dd0a      	ble.n	801f8e0 <__any_on+0x26>
 801f8ca:	f011 011f 	ands.w	r1, r1, #31
 801f8ce:	d007      	beq.n	801f8e0 <__any_on+0x26>
 801f8d0:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801f8d4:	fa24 f001 	lsr.w	r0, r4, r1
 801f8d8:	fa00 f101 	lsl.w	r1, r0, r1
 801f8dc:	428c      	cmp	r4, r1
 801f8de:	d10b      	bne.n	801f8f8 <__any_on+0x3e>
 801f8e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801f8e4:	4293      	cmp	r3, r2
 801f8e6:	d803      	bhi.n	801f8f0 <__any_on+0x36>
 801f8e8:	2000      	movs	r0, #0
 801f8ea:	bd10      	pop	{r4, pc}
 801f8ec:	4603      	mov	r3, r0
 801f8ee:	e7f7      	b.n	801f8e0 <__any_on+0x26>
 801f8f0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801f8f4:	2900      	cmp	r1, #0
 801f8f6:	d0f5      	beq.n	801f8e4 <__any_on+0x2a>
 801f8f8:	2001      	movs	r0, #1
 801f8fa:	e7f6      	b.n	801f8ea <__any_on+0x30>

0801f8fc <sulp>:
 801f8fc:	b570      	push	{r4, r5, r6, lr}
 801f8fe:	4604      	mov	r4, r0
 801f900:	460d      	mov	r5, r1
 801f902:	ec45 4b10 	vmov	d0, r4, r5
 801f906:	4616      	mov	r6, r2
 801f908:	f7ff feba 	bl	801f680 <__ulp>
 801f90c:	ec51 0b10 	vmov	r0, r1, d0
 801f910:	b17e      	cbz	r6, 801f932 <sulp+0x36>
 801f912:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801f916:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 801f91a:	2b00      	cmp	r3, #0
 801f91c:	dd09      	ble.n	801f932 <sulp+0x36>
 801f91e:	051b      	lsls	r3, r3, #20
 801f920:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 801f924:	2400      	movs	r4, #0
 801f926:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 801f92a:	4622      	mov	r2, r4
 801f92c:	462b      	mov	r3, r5
 801f92e:	f7e0 fe63 	bl	80005f8 <__aeabi_dmul>
 801f932:	ec41 0b10 	vmov	d0, r0, r1
 801f936:	bd70      	pop	{r4, r5, r6, pc}

0801f938 <_strtod_l>:
 801f938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f93c:	b09f      	sub	sp, #124	@ 0x7c
 801f93e:	460c      	mov	r4, r1
 801f940:	9217      	str	r2, [sp, #92]	@ 0x5c
 801f942:	2200      	movs	r2, #0
 801f944:	921a      	str	r2, [sp, #104]	@ 0x68
 801f946:	9005      	str	r0, [sp, #20]
 801f948:	f04f 0a00 	mov.w	sl, #0
 801f94c:	f04f 0b00 	mov.w	fp, #0
 801f950:	460a      	mov	r2, r1
 801f952:	9219      	str	r2, [sp, #100]	@ 0x64
 801f954:	7811      	ldrb	r1, [r2, #0]
 801f956:	292b      	cmp	r1, #43	@ 0x2b
 801f958:	d04a      	beq.n	801f9f0 <_strtod_l+0xb8>
 801f95a:	d838      	bhi.n	801f9ce <_strtod_l+0x96>
 801f95c:	290d      	cmp	r1, #13
 801f95e:	d832      	bhi.n	801f9c6 <_strtod_l+0x8e>
 801f960:	2908      	cmp	r1, #8
 801f962:	d832      	bhi.n	801f9ca <_strtod_l+0x92>
 801f964:	2900      	cmp	r1, #0
 801f966:	d03b      	beq.n	801f9e0 <_strtod_l+0xa8>
 801f968:	2200      	movs	r2, #0
 801f96a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801f96c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 801f96e:	782a      	ldrb	r2, [r5, #0]
 801f970:	2a30      	cmp	r2, #48	@ 0x30
 801f972:	f040 80b3 	bne.w	801fadc <_strtod_l+0x1a4>
 801f976:	786a      	ldrb	r2, [r5, #1]
 801f978:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801f97c:	2a58      	cmp	r2, #88	@ 0x58
 801f97e:	d16e      	bne.n	801fa5e <_strtod_l+0x126>
 801f980:	9302      	str	r3, [sp, #8]
 801f982:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f984:	9301      	str	r3, [sp, #4]
 801f986:	ab1a      	add	r3, sp, #104	@ 0x68
 801f988:	9300      	str	r3, [sp, #0]
 801f98a:	4a8e      	ldr	r2, [pc, #568]	@ (801fbc4 <_strtod_l+0x28c>)
 801f98c:	9805      	ldr	r0, [sp, #20]
 801f98e:	ab1b      	add	r3, sp, #108	@ 0x6c
 801f990:	a919      	add	r1, sp, #100	@ 0x64
 801f992:	f001 fa43 	bl	8020e1c <__gethex>
 801f996:	f010 060f 	ands.w	r6, r0, #15
 801f99a:	4604      	mov	r4, r0
 801f99c:	d005      	beq.n	801f9aa <_strtod_l+0x72>
 801f99e:	2e06      	cmp	r6, #6
 801f9a0:	d128      	bne.n	801f9f4 <_strtod_l+0xbc>
 801f9a2:	3501      	adds	r5, #1
 801f9a4:	2300      	movs	r3, #0
 801f9a6:	9519      	str	r5, [sp, #100]	@ 0x64
 801f9a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f9aa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f9ac:	2b00      	cmp	r3, #0
 801f9ae:	f040 858e 	bne.w	80204ce <_strtod_l+0xb96>
 801f9b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f9b4:	b1cb      	cbz	r3, 801f9ea <_strtod_l+0xb2>
 801f9b6:	4652      	mov	r2, sl
 801f9b8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 801f9bc:	ec43 2b10 	vmov	d0, r2, r3
 801f9c0:	b01f      	add	sp, #124	@ 0x7c
 801f9c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9c6:	2920      	cmp	r1, #32
 801f9c8:	d1ce      	bne.n	801f968 <_strtod_l+0x30>
 801f9ca:	3201      	adds	r2, #1
 801f9cc:	e7c1      	b.n	801f952 <_strtod_l+0x1a>
 801f9ce:	292d      	cmp	r1, #45	@ 0x2d
 801f9d0:	d1ca      	bne.n	801f968 <_strtod_l+0x30>
 801f9d2:	2101      	movs	r1, #1
 801f9d4:	910b      	str	r1, [sp, #44]	@ 0x2c
 801f9d6:	1c51      	adds	r1, r2, #1
 801f9d8:	9119      	str	r1, [sp, #100]	@ 0x64
 801f9da:	7852      	ldrb	r2, [r2, #1]
 801f9dc:	2a00      	cmp	r2, #0
 801f9de:	d1c5      	bne.n	801f96c <_strtod_l+0x34>
 801f9e0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f9e2:	9419      	str	r4, [sp, #100]	@ 0x64
 801f9e4:	2b00      	cmp	r3, #0
 801f9e6:	f040 8570 	bne.w	80204ca <_strtod_l+0xb92>
 801f9ea:	4652      	mov	r2, sl
 801f9ec:	465b      	mov	r3, fp
 801f9ee:	e7e5      	b.n	801f9bc <_strtod_l+0x84>
 801f9f0:	2100      	movs	r1, #0
 801f9f2:	e7ef      	b.n	801f9d4 <_strtod_l+0x9c>
 801f9f4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801f9f6:	b13a      	cbz	r2, 801fa08 <_strtod_l+0xd0>
 801f9f8:	2135      	movs	r1, #53	@ 0x35
 801f9fa:	a81c      	add	r0, sp, #112	@ 0x70
 801f9fc:	f7ff ff3a 	bl	801f874 <__copybits>
 801fa00:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801fa02:	9805      	ldr	r0, [sp, #20]
 801fa04:	f7ff fb08 	bl	801f018 <_Bfree>
 801fa08:	3e01      	subs	r6, #1
 801fa0a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801fa0c:	2e04      	cmp	r6, #4
 801fa0e:	d806      	bhi.n	801fa1e <_strtod_l+0xe6>
 801fa10:	e8df f006 	tbb	[pc, r6]
 801fa14:	201d0314 	.word	0x201d0314
 801fa18:	14          	.byte	0x14
 801fa19:	00          	.byte	0x00
 801fa1a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 801fa1e:	05e1      	lsls	r1, r4, #23
 801fa20:	bf48      	it	mi
 801fa22:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 801fa26:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 801fa2a:	0d1b      	lsrs	r3, r3, #20
 801fa2c:	051b      	lsls	r3, r3, #20
 801fa2e:	2b00      	cmp	r3, #0
 801fa30:	d1bb      	bne.n	801f9aa <_strtod_l+0x72>
 801fa32:	f7fe fb05 	bl	801e040 <__errno>
 801fa36:	2322      	movs	r3, #34	@ 0x22
 801fa38:	6003      	str	r3, [r0, #0]
 801fa3a:	e7b6      	b.n	801f9aa <_strtod_l+0x72>
 801fa3c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 801fa40:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 801fa44:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 801fa48:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801fa4c:	e7e7      	b.n	801fa1e <_strtod_l+0xe6>
 801fa4e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 801fbcc <_strtod_l+0x294>
 801fa52:	e7e4      	b.n	801fa1e <_strtod_l+0xe6>
 801fa54:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 801fa58:	f04f 3aff 	mov.w	sl, #4294967295
 801fa5c:	e7df      	b.n	801fa1e <_strtod_l+0xe6>
 801fa5e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fa60:	1c5a      	adds	r2, r3, #1
 801fa62:	9219      	str	r2, [sp, #100]	@ 0x64
 801fa64:	785b      	ldrb	r3, [r3, #1]
 801fa66:	2b30      	cmp	r3, #48	@ 0x30
 801fa68:	d0f9      	beq.n	801fa5e <_strtod_l+0x126>
 801fa6a:	2b00      	cmp	r3, #0
 801fa6c:	d09d      	beq.n	801f9aa <_strtod_l+0x72>
 801fa6e:	2301      	movs	r3, #1
 801fa70:	9309      	str	r3, [sp, #36]	@ 0x24
 801fa72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fa74:	930c      	str	r3, [sp, #48]	@ 0x30
 801fa76:	2300      	movs	r3, #0
 801fa78:	9308      	str	r3, [sp, #32]
 801fa7a:	930a      	str	r3, [sp, #40]	@ 0x28
 801fa7c:	461f      	mov	r7, r3
 801fa7e:	220a      	movs	r2, #10
 801fa80:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801fa82:	7805      	ldrb	r5, [r0, #0]
 801fa84:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 801fa88:	b2d9      	uxtb	r1, r3
 801fa8a:	2909      	cmp	r1, #9
 801fa8c:	d928      	bls.n	801fae0 <_strtod_l+0x1a8>
 801fa8e:	494e      	ldr	r1, [pc, #312]	@ (801fbc8 <_strtod_l+0x290>)
 801fa90:	2201      	movs	r2, #1
 801fa92:	f7fe fa22 	bl	801deda <strncmp>
 801fa96:	2800      	cmp	r0, #0
 801fa98:	d032      	beq.n	801fb00 <_strtod_l+0x1c8>
 801fa9a:	2000      	movs	r0, #0
 801fa9c:	462a      	mov	r2, r5
 801fa9e:	4681      	mov	r9, r0
 801faa0:	463d      	mov	r5, r7
 801faa2:	4603      	mov	r3, r0
 801faa4:	2a65      	cmp	r2, #101	@ 0x65
 801faa6:	d001      	beq.n	801faac <_strtod_l+0x174>
 801faa8:	2a45      	cmp	r2, #69	@ 0x45
 801faaa:	d114      	bne.n	801fad6 <_strtod_l+0x19e>
 801faac:	b91d      	cbnz	r5, 801fab6 <_strtod_l+0x17e>
 801faae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fab0:	4302      	orrs	r2, r0
 801fab2:	d095      	beq.n	801f9e0 <_strtod_l+0xa8>
 801fab4:	2500      	movs	r5, #0
 801fab6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 801fab8:	1c62      	adds	r2, r4, #1
 801faba:	9219      	str	r2, [sp, #100]	@ 0x64
 801fabc:	7862      	ldrb	r2, [r4, #1]
 801fabe:	2a2b      	cmp	r2, #43	@ 0x2b
 801fac0:	d077      	beq.n	801fbb2 <_strtod_l+0x27a>
 801fac2:	2a2d      	cmp	r2, #45	@ 0x2d
 801fac4:	d07b      	beq.n	801fbbe <_strtod_l+0x286>
 801fac6:	f04f 0c00 	mov.w	ip, #0
 801faca:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 801face:	2909      	cmp	r1, #9
 801fad0:	f240 8082 	bls.w	801fbd8 <_strtod_l+0x2a0>
 801fad4:	9419      	str	r4, [sp, #100]	@ 0x64
 801fad6:	f04f 0800 	mov.w	r8, #0
 801fada:	e0a2      	b.n	801fc22 <_strtod_l+0x2ea>
 801fadc:	2300      	movs	r3, #0
 801fade:	e7c7      	b.n	801fa70 <_strtod_l+0x138>
 801fae0:	2f08      	cmp	r7, #8
 801fae2:	bfd5      	itete	le
 801fae4:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 801fae6:	9908      	ldrgt	r1, [sp, #32]
 801fae8:	fb02 3301 	mlale	r3, r2, r1, r3
 801faec:	fb02 3301 	mlagt	r3, r2, r1, r3
 801faf0:	f100 0001 	add.w	r0, r0, #1
 801faf4:	bfd4      	ite	le
 801faf6:	930a      	strle	r3, [sp, #40]	@ 0x28
 801faf8:	9308      	strgt	r3, [sp, #32]
 801fafa:	3701      	adds	r7, #1
 801fafc:	9019      	str	r0, [sp, #100]	@ 0x64
 801fafe:	e7bf      	b.n	801fa80 <_strtod_l+0x148>
 801fb00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fb02:	1c5a      	adds	r2, r3, #1
 801fb04:	9219      	str	r2, [sp, #100]	@ 0x64
 801fb06:	785a      	ldrb	r2, [r3, #1]
 801fb08:	b37f      	cbz	r7, 801fb6a <_strtod_l+0x232>
 801fb0a:	4681      	mov	r9, r0
 801fb0c:	463d      	mov	r5, r7
 801fb0e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 801fb12:	2b09      	cmp	r3, #9
 801fb14:	d912      	bls.n	801fb3c <_strtod_l+0x204>
 801fb16:	2301      	movs	r3, #1
 801fb18:	e7c4      	b.n	801faa4 <_strtod_l+0x16c>
 801fb1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fb1c:	1c5a      	adds	r2, r3, #1
 801fb1e:	9219      	str	r2, [sp, #100]	@ 0x64
 801fb20:	785a      	ldrb	r2, [r3, #1]
 801fb22:	3001      	adds	r0, #1
 801fb24:	2a30      	cmp	r2, #48	@ 0x30
 801fb26:	d0f8      	beq.n	801fb1a <_strtod_l+0x1e2>
 801fb28:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 801fb2c:	2b08      	cmp	r3, #8
 801fb2e:	f200 84d3 	bhi.w	80204d8 <_strtod_l+0xba0>
 801fb32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fb34:	930c      	str	r3, [sp, #48]	@ 0x30
 801fb36:	4681      	mov	r9, r0
 801fb38:	2000      	movs	r0, #0
 801fb3a:	4605      	mov	r5, r0
 801fb3c:	3a30      	subs	r2, #48	@ 0x30
 801fb3e:	f100 0301 	add.w	r3, r0, #1
 801fb42:	d02a      	beq.n	801fb9a <_strtod_l+0x262>
 801fb44:	4499      	add	r9, r3
 801fb46:	eb00 0c05 	add.w	ip, r0, r5
 801fb4a:	462b      	mov	r3, r5
 801fb4c:	210a      	movs	r1, #10
 801fb4e:	4563      	cmp	r3, ip
 801fb50:	d10d      	bne.n	801fb6e <_strtod_l+0x236>
 801fb52:	1c69      	adds	r1, r5, #1
 801fb54:	4401      	add	r1, r0
 801fb56:	4428      	add	r0, r5
 801fb58:	2808      	cmp	r0, #8
 801fb5a:	dc16      	bgt.n	801fb8a <_strtod_l+0x252>
 801fb5c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fb5e:	230a      	movs	r3, #10
 801fb60:	fb03 2300 	mla	r3, r3, r0, r2
 801fb64:	930a      	str	r3, [sp, #40]	@ 0x28
 801fb66:	2300      	movs	r3, #0
 801fb68:	e018      	b.n	801fb9c <_strtod_l+0x264>
 801fb6a:	4638      	mov	r0, r7
 801fb6c:	e7da      	b.n	801fb24 <_strtod_l+0x1ec>
 801fb6e:	2b08      	cmp	r3, #8
 801fb70:	f103 0301 	add.w	r3, r3, #1
 801fb74:	dc03      	bgt.n	801fb7e <_strtod_l+0x246>
 801fb76:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801fb78:	434e      	muls	r6, r1
 801fb7a:	960a      	str	r6, [sp, #40]	@ 0x28
 801fb7c:	e7e7      	b.n	801fb4e <_strtod_l+0x216>
 801fb7e:	2b10      	cmp	r3, #16
 801fb80:	bfde      	ittt	le
 801fb82:	9e08      	ldrle	r6, [sp, #32]
 801fb84:	434e      	mulle	r6, r1
 801fb86:	9608      	strle	r6, [sp, #32]
 801fb88:	e7e1      	b.n	801fb4e <_strtod_l+0x216>
 801fb8a:	280f      	cmp	r0, #15
 801fb8c:	dceb      	bgt.n	801fb66 <_strtod_l+0x22e>
 801fb8e:	9808      	ldr	r0, [sp, #32]
 801fb90:	230a      	movs	r3, #10
 801fb92:	fb03 2300 	mla	r3, r3, r0, r2
 801fb96:	9308      	str	r3, [sp, #32]
 801fb98:	e7e5      	b.n	801fb66 <_strtod_l+0x22e>
 801fb9a:	4629      	mov	r1, r5
 801fb9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801fb9e:	1c50      	adds	r0, r2, #1
 801fba0:	9019      	str	r0, [sp, #100]	@ 0x64
 801fba2:	7852      	ldrb	r2, [r2, #1]
 801fba4:	4618      	mov	r0, r3
 801fba6:	460d      	mov	r5, r1
 801fba8:	e7b1      	b.n	801fb0e <_strtod_l+0x1d6>
 801fbaa:	f04f 0900 	mov.w	r9, #0
 801fbae:	2301      	movs	r3, #1
 801fbb0:	e77d      	b.n	801faae <_strtod_l+0x176>
 801fbb2:	f04f 0c00 	mov.w	ip, #0
 801fbb6:	1ca2      	adds	r2, r4, #2
 801fbb8:	9219      	str	r2, [sp, #100]	@ 0x64
 801fbba:	78a2      	ldrb	r2, [r4, #2]
 801fbbc:	e785      	b.n	801faca <_strtod_l+0x192>
 801fbbe:	f04f 0c01 	mov.w	ip, #1
 801fbc2:	e7f8      	b.n	801fbb6 <_strtod_l+0x27e>
 801fbc4:	08025b20 	.word	0x08025b20
 801fbc8:	08025b08 	.word	0x08025b08
 801fbcc:	7ff00000 	.word	0x7ff00000
 801fbd0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801fbd2:	1c51      	adds	r1, r2, #1
 801fbd4:	9119      	str	r1, [sp, #100]	@ 0x64
 801fbd6:	7852      	ldrb	r2, [r2, #1]
 801fbd8:	2a30      	cmp	r2, #48	@ 0x30
 801fbda:	d0f9      	beq.n	801fbd0 <_strtod_l+0x298>
 801fbdc:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 801fbe0:	2908      	cmp	r1, #8
 801fbe2:	f63f af78 	bhi.w	801fad6 <_strtod_l+0x19e>
 801fbe6:	3a30      	subs	r2, #48	@ 0x30
 801fbe8:	920e      	str	r2, [sp, #56]	@ 0x38
 801fbea:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801fbec:	920f      	str	r2, [sp, #60]	@ 0x3c
 801fbee:	f04f 080a 	mov.w	r8, #10
 801fbf2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801fbf4:	1c56      	adds	r6, r2, #1
 801fbf6:	9619      	str	r6, [sp, #100]	@ 0x64
 801fbf8:	7852      	ldrb	r2, [r2, #1]
 801fbfa:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 801fbfe:	f1be 0f09 	cmp.w	lr, #9
 801fc02:	d939      	bls.n	801fc78 <_strtod_l+0x340>
 801fc04:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801fc06:	1a76      	subs	r6, r6, r1
 801fc08:	2e08      	cmp	r6, #8
 801fc0a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 801fc0e:	dc03      	bgt.n	801fc18 <_strtod_l+0x2e0>
 801fc10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801fc12:	4588      	cmp	r8, r1
 801fc14:	bfa8      	it	ge
 801fc16:	4688      	movge	r8, r1
 801fc18:	f1bc 0f00 	cmp.w	ip, #0
 801fc1c:	d001      	beq.n	801fc22 <_strtod_l+0x2ea>
 801fc1e:	f1c8 0800 	rsb	r8, r8, #0
 801fc22:	2d00      	cmp	r5, #0
 801fc24:	d14e      	bne.n	801fcc4 <_strtod_l+0x38c>
 801fc26:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801fc28:	4308      	orrs	r0, r1
 801fc2a:	f47f aebe 	bne.w	801f9aa <_strtod_l+0x72>
 801fc2e:	2b00      	cmp	r3, #0
 801fc30:	f47f aed6 	bne.w	801f9e0 <_strtod_l+0xa8>
 801fc34:	2a69      	cmp	r2, #105	@ 0x69
 801fc36:	d028      	beq.n	801fc8a <_strtod_l+0x352>
 801fc38:	dc25      	bgt.n	801fc86 <_strtod_l+0x34e>
 801fc3a:	2a49      	cmp	r2, #73	@ 0x49
 801fc3c:	d025      	beq.n	801fc8a <_strtod_l+0x352>
 801fc3e:	2a4e      	cmp	r2, #78	@ 0x4e
 801fc40:	f47f aece 	bne.w	801f9e0 <_strtod_l+0xa8>
 801fc44:	499b      	ldr	r1, [pc, #620]	@ (801feb4 <_strtod_l+0x57c>)
 801fc46:	a819      	add	r0, sp, #100	@ 0x64
 801fc48:	f001 fb0a 	bl	8021260 <__match>
 801fc4c:	2800      	cmp	r0, #0
 801fc4e:	f43f aec7 	beq.w	801f9e0 <_strtod_l+0xa8>
 801fc52:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fc54:	781b      	ldrb	r3, [r3, #0]
 801fc56:	2b28      	cmp	r3, #40	@ 0x28
 801fc58:	d12e      	bne.n	801fcb8 <_strtod_l+0x380>
 801fc5a:	4997      	ldr	r1, [pc, #604]	@ (801feb8 <_strtod_l+0x580>)
 801fc5c:	aa1c      	add	r2, sp, #112	@ 0x70
 801fc5e:	a819      	add	r0, sp, #100	@ 0x64
 801fc60:	f001 fb12 	bl	8021288 <__hexnan>
 801fc64:	2805      	cmp	r0, #5
 801fc66:	d127      	bne.n	801fcb8 <_strtod_l+0x380>
 801fc68:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801fc6a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 801fc6e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 801fc72:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 801fc76:	e698      	b.n	801f9aa <_strtod_l+0x72>
 801fc78:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801fc7a:	fb08 2101 	mla	r1, r8, r1, r2
 801fc7e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 801fc82:	920e      	str	r2, [sp, #56]	@ 0x38
 801fc84:	e7b5      	b.n	801fbf2 <_strtod_l+0x2ba>
 801fc86:	2a6e      	cmp	r2, #110	@ 0x6e
 801fc88:	e7da      	b.n	801fc40 <_strtod_l+0x308>
 801fc8a:	498c      	ldr	r1, [pc, #560]	@ (801febc <_strtod_l+0x584>)
 801fc8c:	a819      	add	r0, sp, #100	@ 0x64
 801fc8e:	f001 fae7 	bl	8021260 <__match>
 801fc92:	2800      	cmp	r0, #0
 801fc94:	f43f aea4 	beq.w	801f9e0 <_strtod_l+0xa8>
 801fc98:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fc9a:	4989      	ldr	r1, [pc, #548]	@ (801fec0 <_strtod_l+0x588>)
 801fc9c:	3b01      	subs	r3, #1
 801fc9e:	a819      	add	r0, sp, #100	@ 0x64
 801fca0:	9319      	str	r3, [sp, #100]	@ 0x64
 801fca2:	f001 fadd 	bl	8021260 <__match>
 801fca6:	b910      	cbnz	r0, 801fcae <_strtod_l+0x376>
 801fca8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801fcaa:	3301      	adds	r3, #1
 801fcac:	9319      	str	r3, [sp, #100]	@ 0x64
 801fcae:	f8df b220 	ldr.w	fp, [pc, #544]	@ 801fed0 <_strtod_l+0x598>
 801fcb2:	f04f 0a00 	mov.w	sl, #0
 801fcb6:	e678      	b.n	801f9aa <_strtod_l+0x72>
 801fcb8:	4882      	ldr	r0, [pc, #520]	@ (801fec4 <_strtod_l+0x58c>)
 801fcba:	f001 f825 	bl	8020d08 <nan>
 801fcbe:	ec5b ab10 	vmov	sl, fp, d0
 801fcc2:	e672      	b.n	801f9aa <_strtod_l+0x72>
 801fcc4:	eba8 0309 	sub.w	r3, r8, r9
 801fcc8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801fcca:	9309      	str	r3, [sp, #36]	@ 0x24
 801fccc:	2f00      	cmp	r7, #0
 801fcce:	bf08      	it	eq
 801fcd0:	462f      	moveq	r7, r5
 801fcd2:	2d10      	cmp	r5, #16
 801fcd4:	462c      	mov	r4, r5
 801fcd6:	bfa8      	it	ge
 801fcd8:	2410      	movge	r4, #16
 801fcda:	f7e0 fc13 	bl	8000504 <__aeabi_ui2d>
 801fcde:	2d09      	cmp	r5, #9
 801fce0:	4682      	mov	sl, r0
 801fce2:	468b      	mov	fp, r1
 801fce4:	dc13      	bgt.n	801fd0e <_strtod_l+0x3d6>
 801fce6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fce8:	2b00      	cmp	r3, #0
 801fcea:	f43f ae5e 	beq.w	801f9aa <_strtod_l+0x72>
 801fcee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fcf0:	dd78      	ble.n	801fde4 <_strtod_l+0x4ac>
 801fcf2:	2b16      	cmp	r3, #22
 801fcf4:	dc5f      	bgt.n	801fdb6 <_strtod_l+0x47e>
 801fcf6:	4974      	ldr	r1, [pc, #464]	@ (801fec8 <_strtod_l+0x590>)
 801fcf8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801fcfc:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd00:	4652      	mov	r2, sl
 801fd02:	465b      	mov	r3, fp
 801fd04:	f7e0 fc78 	bl	80005f8 <__aeabi_dmul>
 801fd08:	4682      	mov	sl, r0
 801fd0a:	468b      	mov	fp, r1
 801fd0c:	e64d      	b.n	801f9aa <_strtod_l+0x72>
 801fd0e:	4b6e      	ldr	r3, [pc, #440]	@ (801fec8 <_strtod_l+0x590>)
 801fd10:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801fd14:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 801fd18:	f7e0 fc6e 	bl	80005f8 <__aeabi_dmul>
 801fd1c:	4682      	mov	sl, r0
 801fd1e:	9808      	ldr	r0, [sp, #32]
 801fd20:	468b      	mov	fp, r1
 801fd22:	f7e0 fbef 	bl	8000504 <__aeabi_ui2d>
 801fd26:	4602      	mov	r2, r0
 801fd28:	460b      	mov	r3, r1
 801fd2a:	4650      	mov	r0, sl
 801fd2c:	4659      	mov	r1, fp
 801fd2e:	f7e0 faad 	bl	800028c <__adddf3>
 801fd32:	2d0f      	cmp	r5, #15
 801fd34:	4682      	mov	sl, r0
 801fd36:	468b      	mov	fp, r1
 801fd38:	ddd5      	ble.n	801fce6 <_strtod_l+0x3ae>
 801fd3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fd3c:	1b2c      	subs	r4, r5, r4
 801fd3e:	441c      	add	r4, r3
 801fd40:	2c00      	cmp	r4, #0
 801fd42:	f340 8096 	ble.w	801fe72 <_strtod_l+0x53a>
 801fd46:	f014 030f 	ands.w	r3, r4, #15
 801fd4a:	d00a      	beq.n	801fd62 <_strtod_l+0x42a>
 801fd4c:	495e      	ldr	r1, [pc, #376]	@ (801fec8 <_strtod_l+0x590>)
 801fd4e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801fd52:	4652      	mov	r2, sl
 801fd54:	465b      	mov	r3, fp
 801fd56:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fd5a:	f7e0 fc4d 	bl	80005f8 <__aeabi_dmul>
 801fd5e:	4682      	mov	sl, r0
 801fd60:	468b      	mov	fp, r1
 801fd62:	f034 040f 	bics.w	r4, r4, #15
 801fd66:	d073      	beq.n	801fe50 <_strtod_l+0x518>
 801fd68:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 801fd6c:	dd48      	ble.n	801fe00 <_strtod_l+0x4c8>
 801fd6e:	2400      	movs	r4, #0
 801fd70:	46a0      	mov	r8, r4
 801fd72:	940a      	str	r4, [sp, #40]	@ 0x28
 801fd74:	46a1      	mov	r9, r4
 801fd76:	9a05      	ldr	r2, [sp, #20]
 801fd78:	f8df b154 	ldr.w	fp, [pc, #340]	@ 801fed0 <_strtod_l+0x598>
 801fd7c:	2322      	movs	r3, #34	@ 0x22
 801fd7e:	6013      	str	r3, [r2, #0]
 801fd80:	f04f 0a00 	mov.w	sl, #0
 801fd84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fd86:	2b00      	cmp	r3, #0
 801fd88:	f43f ae0f 	beq.w	801f9aa <_strtod_l+0x72>
 801fd8c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801fd8e:	9805      	ldr	r0, [sp, #20]
 801fd90:	f7ff f942 	bl	801f018 <_Bfree>
 801fd94:	9805      	ldr	r0, [sp, #20]
 801fd96:	4649      	mov	r1, r9
 801fd98:	f7ff f93e 	bl	801f018 <_Bfree>
 801fd9c:	9805      	ldr	r0, [sp, #20]
 801fd9e:	4641      	mov	r1, r8
 801fda0:	f7ff f93a 	bl	801f018 <_Bfree>
 801fda4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801fda6:	9805      	ldr	r0, [sp, #20]
 801fda8:	f7ff f936 	bl	801f018 <_Bfree>
 801fdac:	9805      	ldr	r0, [sp, #20]
 801fdae:	4621      	mov	r1, r4
 801fdb0:	f7ff f932 	bl	801f018 <_Bfree>
 801fdb4:	e5f9      	b.n	801f9aa <_strtod_l+0x72>
 801fdb6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801fdb8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 801fdbc:	4293      	cmp	r3, r2
 801fdbe:	dbbc      	blt.n	801fd3a <_strtod_l+0x402>
 801fdc0:	4c41      	ldr	r4, [pc, #260]	@ (801fec8 <_strtod_l+0x590>)
 801fdc2:	f1c5 050f 	rsb	r5, r5, #15
 801fdc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801fdca:	4652      	mov	r2, sl
 801fdcc:	465b      	mov	r3, fp
 801fdce:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fdd2:	f7e0 fc11 	bl	80005f8 <__aeabi_dmul>
 801fdd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fdd8:	1b5d      	subs	r5, r3, r5
 801fdda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801fdde:	e9d4 2300 	ldrd	r2, r3, [r4]
 801fde2:	e78f      	b.n	801fd04 <_strtod_l+0x3cc>
 801fde4:	3316      	adds	r3, #22
 801fde6:	dba8      	blt.n	801fd3a <_strtod_l+0x402>
 801fde8:	4b37      	ldr	r3, [pc, #220]	@ (801fec8 <_strtod_l+0x590>)
 801fdea:	eba9 0808 	sub.w	r8, r9, r8
 801fdee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 801fdf2:	e9d8 2300 	ldrd	r2, r3, [r8]
 801fdf6:	4650      	mov	r0, sl
 801fdf8:	4659      	mov	r1, fp
 801fdfa:	f7e0 fd27 	bl	800084c <__aeabi_ddiv>
 801fdfe:	e783      	b.n	801fd08 <_strtod_l+0x3d0>
 801fe00:	4b32      	ldr	r3, [pc, #200]	@ (801fecc <_strtod_l+0x594>)
 801fe02:	9308      	str	r3, [sp, #32]
 801fe04:	2300      	movs	r3, #0
 801fe06:	1124      	asrs	r4, r4, #4
 801fe08:	4650      	mov	r0, sl
 801fe0a:	4659      	mov	r1, fp
 801fe0c:	461e      	mov	r6, r3
 801fe0e:	2c01      	cmp	r4, #1
 801fe10:	dc21      	bgt.n	801fe56 <_strtod_l+0x51e>
 801fe12:	b10b      	cbz	r3, 801fe18 <_strtod_l+0x4e0>
 801fe14:	4682      	mov	sl, r0
 801fe16:	468b      	mov	fp, r1
 801fe18:	492c      	ldr	r1, [pc, #176]	@ (801fecc <_strtod_l+0x594>)
 801fe1a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 801fe1e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 801fe22:	4652      	mov	r2, sl
 801fe24:	465b      	mov	r3, fp
 801fe26:	e9d1 0100 	ldrd	r0, r1, [r1]
 801fe2a:	f7e0 fbe5 	bl	80005f8 <__aeabi_dmul>
 801fe2e:	4b28      	ldr	r3, [pc, #160]	@ (801fed0 <_strtod_l+0x598>)
 801fe30:	460a      	mov	r2, r1
 801fe32:	400b      	ands	r3, r1
 801fe34:	4927      	ldr	r1, [pc, #156]	@ (801fed4 <_strtod_l+0x59c>)
 801fe36:	428b      	cmp	r3, r1
 801fe38:	4682      	mov	sl, r0
 801fe3a:	d898      	bhi.n	801fd6e <_strtod_l+0x436>
 801fe3c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 801fe40:	428b      	cmp	r3, r1
 801fe42:	bf86      	itte	hi
 801fe44:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 801fed8 <_strtod_l+0x5a0>
 801fe48:	f04f 3aff 	movhi.w	sl, #4294967295
 801fe4c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 801fe50:	2300      	movs	r3, #0
 801fe52:	9308      	str	r3, [sp, #32]
 801fe54:	e07a      	b.n	801ff4c <_strtod_l+0x614>
 801fe56:	07e2      	lsls	r2, r4, #31
 801fe58:	d505      	bpl.n	801fe66 <_strtod_l+0x52e>
 801fe5a:	9b08      	ldr	r3, [sp, #32]
 801fe5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe60:	f7e0 fbca 	bl	80005f8 <__aeabi_dmul>
 801fe64:	2301      	movs	r3, #1
 801fe66:	9a08      	ldr	r2, [sp, #32]
 801fe68:	3208      	adds	r2, #8
 801fe6a:	3601      	adds	r6, #1
 801fe6c:	1064      	asrs	r4, r4, #1
 801fe6e:	9208      	str	r2, [sp, #32]
 801fe70:	e7cd      	b.n	801fe0e <_strtod_l+0x4d6>
 801fe72:	d0ed      	beq.n	801fe50 <_strtod_l+0x518>
 801fe74:	4264      	negs	r4, r4
 801fe76:	f014 020f 	ands.w	r2, r4, #15
 801fe7a:	d00a      	beq.n	801fe92 <_strtod_l+0x55a>
 801fe7c:	4b12      	ldr	r3, [pc, #72]	@ (801fec8 <_strtod_l+0x590>)
 801fe7e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801fe82:	4650      	mov	r0, sl
 801fe84:	4659      	mov	r1, fp
 801fe86:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fe8a:	f7e0 fcdf 	bl	800084c <__aeabi_ddiv>
 801fe8e:	4682      	mov	sl, r0
 801fe90:	468b      	mov	fp, r1
 801fe92:	1124      	asrs	r4, r4, #4
 801fe94:	d0dc      	beq.n	801fe50 <_strtod_l+0x518>
 801fe96:	2c1f      	cmp	r4, #31
 801fe98:	dd20      	ble.n	801fedc <_strtod_l+0x5a4>
 801fe9a:	2400      	movs	r4, #0
 801fe9c:	46a0      	mov	r8, r4
 801fe9e:	940a      	str	r4, [sp, #40]	@ 0x28
 801fea0:	46a1      	mov	r9, r4
 801fea2:	9a05      	ldr	r2, [sp, #20]
 801fea4:	2322      	movs	r3, #34	@ 0x22
 801fea6:	f04f 0a00 	mov.w	sl, #0
 801feaa:	f04f 0b00 	mov.w	fp, #0
 801feae:	6013      	str	r3, [r2, #0]
 801feb0:	e768      	b.n	801fd84 <_strtod_l+0x44c>
 801feb2:	bf00      	nop
 801feb4:	080258d3 	.word	0x080258d3
 801feb8:	08025b0c 	.word	0x08025b0c
 801febc:	080258cb 	.word	0x080258cb
 801fec0:	0802593e 	.word	0x0802593e
 801fec4:	0802593a 	.word	0x0802593a
 801fec8:	08025a40 	.word	0x08025a40
 801fecc:	08025a18 	.word	0x08025a18
 801fed0:	7ff00000 	.word	0x7ff00000
 801fed4:	7ca00000 	.word	0x7ca00000
 801fed8:	7fefffff 	.word	0x7fefffff
 801fedc:	f014 0310 	ands.w	r3, r4, #16
 801fee0:	bf18      	it	ne
 801fee2:	236a      	movne	r3, #106	@ 0x6a
 801fee4:	4ea9      	ldr	r6, [pc, #676]	@ (802018c <_strtod_l+0x854>)
 801fee6:	9308      	str	r3, [sp, #32]
 801fee8:	4650      	mov	r0, sl
 801feea:	4659      	mov	r1, fp
 801feec:	2300      	movs	r3, #0
 801feee:	07e2      	lsls	r2, r4, #31
 801fef0:	d504      	bpl.n	801fefc <_strtod_l+0x5c4>
 801fef2:	e9d6 2300 	ldrd	r2, r3, [r6]
 801fef6:	f7e0 fb7f 	bl	80005f8 <__aeabi_dmul>
 801fefa:	2301      	movs	r3, #1
 801fefc:	1064      	asrs	r4, r4, #1
 801fefe:	f106 0608 	add.w	r6, r6, #8
 801ff02:	d1f4      	bne.n	801feee <_strtod_l+0x5b6>
 801ff04:	b10b      	cbz	r3, 801ff0a <_strtod_l+0x5d2>
 801ff06:	4682      	mov	sl, r0
 801ff08:	468b      	mov	fp, r1
 801ff0a:	9b08      	ldr	r3, [sp, #32]
 801ff0c:	b1b3      	cbz	r3, 801ff3c <_strtod_l+0x604>
 801ff0e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 801ff12:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 801ff16:	2b00      	cmp	r3, #0
 801ff18:	4659      	mov	r1, fp
 801ff1a:	dd0f      	ble.n	801ff3c <_strtod_l+0x604>
 801ff1c:	2b1f      	cmp	r3, #31
 801ff1e:	dd55      	ble.n	801ffcc <_strtod_l+0x694>
 801ff20:	2b34      	cmp	r3, #52	@ 0x34
 801ff22:	bfde      	ittt	le
 801ff24:	f04f 33ff 	movle.w	r3, #4294967295
 801ff28:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 801ff2c:	4093      	lslle	r3, r2
 801ff2e:	f04f 0a00 	mov.w	sl, #0
 801ff32:	bfcc      	ite	gt
 801ff34:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 801ff38:	ea03 0b01 	andle.w	fp, r3, r1
 801ff3c:	2200      	movs	r2, #0
 801ff3e:	2300      	movs	r3, #0
 801ff40:	4650      	mov	r0, sl
 801ff42:	4659      	mov	r1, fp
 801ff44:	f7e0 fdc0 	bl	8000ac8 <__aeabi_dcmpeq>
 801ff48:	2800      	cmp	r0, #0
 801ff4a:	d1a6      	bne.n	801fe9a <_strtod_l+0x562>
 801ff4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ff4e:	9300      	str	r3, [sp, #0]
 801ff50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801ff52:	9805      	ldr	r0, [sp, #20]
 801ff54:	462b      	mov	r3, r5
 801ff56:	463a      	mov	r2, r7
 801ff58:	f7ff f8c6 	bl	801f0e8 <__s2b>
 801ff5c:	900a      	str	r0, [sp, #40]	@ 0x28
 801ff5e:	2800      	cmp	r0, #0
 801ff60:	f43f af05 	beq.w	801fd6e <_strtod_l+0x436>
 801ff64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ff66:	2a00      	cmp	r2, #0
 801ff68:	eba9 0308 	sub.w	r3, r9, r8
 801ff6c:	bfa8      	it	ge
 801ff6e:	2300      	movge	r3, #0
 801ff70:	9312      	str	r3, [sp, #72]	@ 0x48
 801ff72:	2400      	movs	r4, #0
 801ff74:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 801ff78:	9316      	str	r3, [sp, #88]	@ 0x58
 801ff7a:	46a0      	mov	r8, r4
 801ff7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ff7e:	9805      	ldr	r0, [sp, #20]
 801ff80:	6859      	ldr	r1, [r3, #4]
 801ff82:	f7ff f809 	bl	801ef98 <_Balloc>
 801ff86:	4681      	mov	r9, r0
 801ff88:	2800      	cmp	r0, #0
 801ff8a:	f43f aef4 	beq.w	801fd76 <_strtod_l+0x43e>
 801ff8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ff90:	691a      	ldr	r2, [r3, #16]
 801ff92:	3202      	adds	r2, #2
 801ff94:	f103 010c 	add.w	r1, r3, #12
 801ff98:	0092      	lsls	r2, r2, #2
 801ff9a:	300c      	adds	r0, #12
 801ff9c:	f7fe f87d 	bl	801e09a <memcpy>
 801ffa0:	ec4b ab10 	vmov	d0, sl, fp
 801ffa4:	9805      	ldr	r0, [sp, #20]
 801ffa6:	aa1c      	add	r2, sp, #112	@ 0x70
 801ffa8:	a91b      	add	r1, sp, #108	@ 0x6c
 801ffaa:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 801ffae:	f7ff fbd7 	bl	801f760 <__d2b>
 801ffb2:	901a      	str	r0, [sp, #104]	@ 0x68
 801ffb4:	2800      	cmp	r0, #0
 801ffb6:	f43f aede 	beq.w	801fd76 <_strtod_l+0x43e>
 801ffba:	9805      	ldr	r0, [sp, #20]
 801ffbc:	2101      	movs	r1, #1
 801ffbe:	f7ff f929 	bl	801f214 <__i2b>
 801ffc2:	4680      	mov	r8, r0
 801ffc4:	b948      	cbnz	r0, 801ffda <_strtod_l+0x6a2>
 801ffc6:	f04f 0800 	mov.w	r8, #0
 801ffca:	e6d4      	b.n	801fd76 <_strtod_l+0x43e>
 801ffcc:	f04f 32ff 	mov.w	r2, #4294967295
 801ffd0:	fa02 f303 	lsl.w	r3, r2, r3
 801ffd4:	ea03 0a0a 	and.w	sl, r3, sl
 801ffd8:	e7b0      	b.n	801ff3c <_strtod_l+0x604>
 801ffda:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 801ffdc:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801ffde:	2d00      	cmp	r5, #0
 801ffe0:	bfab      	itete	ge
 801ffe2:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 801ffe4:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 801ffe6:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 801ffe8:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 801ffea:	bfac      	ite	ge
 801ffec:	18ef      	addge	r7, r5, r3
 801ffee:	1b5e      	sublt	r6, r3, r5
 801fff0:	9b08      	ldr	r3, [sp, #32]
 801fff2:	1aed      	subs	r5, r5, r3
 801fff4:	4415      	add	r5, r2
 801fff6:	4b66      	ldr	r3, [pc, #408]	@ (8020190 <_strtod_l+0x858>)
 801fff8:	3d01      	subs	r5, #1
 801fffa:	429d      	cmp	r5, r3
 801fffc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8020000:	da50      	bge.n	80200a4 <_strtod_l+0x76c>
 8020002:	1b5b      	subs	r3, r3, r5
 8020004:	2b1f      	cmp	r3, #31
 8020006:	eba2 0203 	sub.w	r2, r2, r3
 802000a:	f04f 0101 	mov.w	r1, #1
 802000e:	dc3d      	bgt.n	802008c <_strtod_l+0x754>
 8020010:	fa01 f303 	lsl.w	r3, r1, r3
 8020014:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020016:	2300      	movs	r3, #0
 8020018:	9310      	str	r3, [sp, #64]	@ 0x40
 802001a:	18bd      	adds	r5, r7, r2
 802001c:	9b08      	ldr	r3, [sp, #32]
 802001e:	42af      	cmp	r7, r5
 8020020:	4416      	add	r6, r2
 8020022:	441e      	add	r6, r3
 8020024:	463b      	mov	r3, r7
 8020026:	bfa8      	it	ge
 8020028:	462b      	movge	r3, r5
 802002a:	42b3      	cmp	r3, r6
 802002c:	bfa8      	it	ge
 802002e:	4633      	movge	r3, r6
 8020030:	2b00      	cmp	r3, #0
 8020032:	bfc2      	ittt	gt
 8020034:	1aed      	subgt	r5, r5, r3
 8020036:	1af6      	subgt	r6, r6, r3
 8020038:	1aff      	subgt	r7, r7, r3
 802003a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 802003c:	2b00      	cmp	r3, #0
 802003e:	dd16      	ble.n	802006e <_strtod_l+0x736>
 8020040:	4641      	mov	r1, r8
 8020042:	9805      	ldr	r0, [sp, #20]
 8020044:	461a      	mov	r2, r3
 8020046:	f7ff f9a5 	bl	801f394 <__pow5mult>
 802004a:	4680      	mov	r8, r0
 802004c:	2800      	cmp	r0, #0
 802004e:	d0ba      	beq.n	801ffc6 <_strtod_l+0x68e>
 8020050:	4601      	mov	r1, r0
 8020052:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020054:	9805      	ldr	r0, [sp, #20]
 8020056:	f7ff f8f3 	bl	801f240 <__multiply>
 802005a:	900e      	str	r0, [sp, #56]	@ 0x38
 802005c:	2800      	cmp	r0, #0
 802005e:	f43f ae8a 	beq.w	801fd76 <_strtod_l+0x43e>
 8020062:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020064:	9805      	ldr	r0, [sp, #20]
 8020066:	f7fe ffd7 	bl	801f018 <_Bfree>
 802006a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802006c:	931a      	str	r3, [sp, #104]	@ 0x68
 802006e:	2d00      	cmp	r5, #0
 8020070:	dc1d      	bgt.n	80200ae <_strtod_l+0x776>
 8020072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020074:	2b00      	cmp	r3, #0
 8020076:	dd23      	ble.n	80200c0 <_strtod_l+0x788>
 8020078:	4649      	mov	r1, r9
 802007a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 802007c:	9805      	ldr	r0, [sp, #20]
 802007e:	f7ff f989 	bl	801f394 <__pow5mult>
 8020082:	4681      	mov	r9, r0
 8020084:	b9e0      	cbnz	r0, 80200c0 <_strtod_l+0x788>
 8020086:	f04f 0900 	mov.w	r9, #0
 802008a:	e674      	b.n	801fd76 <_strtod_l+0x43e>
 802008c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8020090:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8020094:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8020098:	35e2      	adds	r5, #226	@ 0xe2
 802009a:	fa01 f305 	lsl.w	r3, r1, r5
 802009e:	9310      	str	r3, [sp, #64]	@ 0x40
 80200a0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80200a2:	e7ba      	b.n	802001a <_strtod_l+0x6e2>
 80200a4:	2300      	movs	r3, #0
 80200a6:	9310      	str	r3, [sp, #64]	@ 0x40
 80200a8:	2301      	movs	r3, #1
 80200aa:	9313      	str	r3, [sp, #76]	@ 0x4c
 80200ac:	e7b5      	b.n	802001a <_strtod_l+0x6e2>
 80200ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80200b0:	9805      	ldr	r0, [sp, #20]
 80200b2:	462a      	mov	r2, r5
 80200b4:	f7ff f9c8 	bl	801f448 <__lshift>
 80200b8:	901a      	str	r0, [sp, #104]	@ 0x68
 80200ba:	2800      	cmp	r0, #0
 80200bc:	d1d9      	bne.n	8020072 <_strtod_l+0x73a>
 80200be:	e65a      	b.n	801fd76 <_strtod_l+0x43e>
 80200c0:	2e00      	cmp	r6, #0
 80200c2:	dd07      	ble.n	80200d4 <_strtod_l+0x79c>
 80200c4:	4649      	mov	r1, r9
 80200c6:	9805      	ldr	r0, [sp, #20]
 80200c8:	4632      	mov	r2, r6
 80200ca:	f7ff f9bd 	bl	801f448 <__lshift>
 80200ce:	4681      	mov	r9, r0
 80200d0:	2800      	cmp	r0, #0
 80200d2:	d0d8      	beq.n	8020086 <_strtod_l+0x74e>
 80200d4:	2f00      	cmp	r7, #0
 80200d6:	dd08      	ble.n	80200ea <_strtod_l+0x7b2>
 80200d8:	4641      	mov	r1, r8
 80200da:	9805      	ldr	r0, [sp, #20]
 80200dc:	463a      	mov	r2, r7
 80200de:	f7ff f9b3 	bl	801f448 <__lshift>
 80200e2:	4680      	mov	r8, r0
 80200e4:	2800      	cmp	r0, #0
 80200e6:	f43f ae46 	beq.w	801fd76 <_strtod_l+0x43e>
 80200ea:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80200ec:	9805      	ldr	r0, [sp, #20]
 80200ee:	464a      	mov	r2, r9
 80200f0:	f7ff fa32 	bl	801f558 <__mdiff>
 80200f4:	4604      	mov	r4, r0
 80200f6:	2800      	cmp	r0, #0
 80200f8:	f43f ae3d 	beq.w	801fd76 <_strtod_l+0x43e>
 80200fc:	68c3      	ldr	r3, [r0, #12]
 80200fe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020100:	2300      	movs	r3, #0
 8020102:	60c3      	str	r3, [r0, #12]
 8020104:	4641      	mov	r1, r8
 8020106:	f7ff fa0b 	bl	801f520 <__mcmp>
 802010a:	2800      	cmp	r0, #0
 802010c:	da46      	bge.n	802019c <_strtod_l+0x864>
 802010e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020110:	ea53 030a 	orrs.w	r3, r3, sl
 8020114:	d16c      	bne.n	80201f0 <_strtod_l+0x8b8>
 8020116:	f3cb 0313 	ubfx	r3, fp, #0, #20
 802011a:	2b00      	cmp	r3, #0
 802011c:	d168      	bne.n	80201f0 <_strtod_l+0x8b8>
 802011e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020122:	0d1b      	lsrs	r3, r3, #20
 8020124:	051b      	lsls	r3, r3, #20
 8020126:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802012a:	d961      	bls.n	80201f0 <_strtod_l+0x8b8>
 802012c:	6963      	ldr	r3, [r4, #20]
 802012e:	b913      	cbnz	r3, 8020136 <_strtod_l+0x7fe>
 8020130:	6923      	ldr	r3, [r4, #16]
 8020132:	2b01      	cmp	r3, #1
 8020134:	dd5c      	ble.n	80201f0 <_strtod_l+0x8b8>
 8020136:	4621      	mov	r1, r4
 8020138:	2201      	movs	r2, #1
 802013a:	9805      	ldr	r0, [sp, #20]
 802013c:	f7ff f984 	bl	801f448 <__lshift>
 8020140:	4641      	mov	r1, r8
 8020142:	4604      	mov	r4, r0
 8020144:	f7ff f9ec 	bl	801f520 <__mcmp>
 8020148:	2800      	cmp	r0, #0
 802014a:	dd51      	ble.n	80201f0 <_strtod_l+0x8b8>
 802014c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020150:	9a08      	ldr	r2, [sp, #32]
 8020152:	0d1b      	lsrs	r3, r3, #20
 8020154:	051b      	lsls	r3, r3, #20
 8020156:	2a00      	cmp	r2, #0
 8020158:	d06b      	beq.n	8020232 <_strtod_l+0x8fa>
 802015a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 802015e:	d868      	bhi.n	8020232 <_strtod_l+0x8fa>
 8020160:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8020164:	f67f ae9d 	bls.w	801fea2 <_strtod_l+0x56a>
 8020168:	4b0a      	ldr	r3, [pc, #40]	@ (8020194 <_strtod_l+0x85c>)
 802016a:	4650      	mov	r0, sl
 802016c:	4659      	mov	r1, fp
 802016e:	2200      	movs	r2, #0
 8020170:	f7e0 fa42 	bl	80005f8 <__aeabi_dmul>
 8020174:	4b08      	ldr	r3, [pc, #32]	@ (8020198 <_strtod_l+0x860>)
 8020176:	400b      	ands	r3, r1
 8020178:	4682      	mov	sl, r0
 802017a:	468b      	mov	fp, r1
 802017c:	2b00      	cmp	r3, #0
 802017e:	f47f ae05 	bne.w	801fd8c <_strtod_l+0x454>
 8020182:	9a05      	ldr	r2, [sp, #20]
 8020184:	2322      	movs	r3, #34	@ 0x22
 8020186:	6013      	str	r3, [r2, #0]
 8020188:	e600      	b.n	801fd8c <_strtod_l+0x454>
 802018a:	bf00      	nop
 802018c:	08025b38 	.word	0x08025b38
 8020190:	fffffc02 	.word	0xfffffc02
 8020194:	39500000 	.word	0x39500000
 8020198:	7ff00000 	.word	0x7ff00000
 802019c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80201a0:	d165      	bne.n	802026e <_strtod_l+0x936>
 80201a2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80201a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80201a8:	b35a      	cbz	r2, 8020202 <_strtod_l+0x8ca>
 80201aa:	4a9f      	ldr	r2, [pc, #636]	@ (8020428 <_strtod_l+0xaf0>)
 80201ac:	4293      	cmp	r3, r2
 80201ae:	d12b      	bne.n	8020208 <_strtod_l+0x8d0>
 80201b0:	9b08      	ldr	r3, [sp, #32]
 80201b2:	4651      	mov	r1, sl
 80201b4:	b303      	cbz	r3, 80201f8 <_strtod_l+0x8c0>
 80201b6:	4b9d      	ldr	r3, [pc, #628]	@ (802042c <_strtod_l+0xaf4>)
 80201b8:	465a      	mov	r2, fp
 80201ba:	4013      	ands	r3, r2
 80201bc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80201c0:	f04f 32ff 	mov.w	r2, #4294967295
 80201c4:	d81b      	bhi.n	80201fe <_strtod_l+0x8c6>
 80201c6:	0d1b      	lsrs	r3, r3, #20
 80201c8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80201cc:	fa02 f303 	lsl.w	r3, r2, r3
 80201d0:	4299      	cmp	r1, r3
 80201d2:	d119      	bne.n	8020208 <_strtod_l+0x8d0>
 80201d4:	4b96      	ldr	r3, [pc, #600]	@ (8020430 <_strtod_l+0xaf8>)
 80201d6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80201d8:	429a      	cmp	r2, r3
 80201da:	d102      	bne.n	80201e2 <_strtod_l+0x8aa>
 80201dc:	3101      	adds	r1, #1
 80201de:	f43f adca 	beq.w	801fd76 <_strtod_l+0x43e>
 80201e2:	4b92      	ldr	r3, [pc, #584]	@ (802042c <_strtod_l+0xaf4>)
 80201e4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80201e6:	401a      	ands	r2, r3
 80201e8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80201ec:	f04f 0a00 	mov.w	sl, #0
 80201f0:	9b08      	ldr	r3, [sp, #32]
 80201f2:	2b00      	cmp	r3, #0
 80201f4:	d1b8      	bne.n	8020168 <_strtod_l+0x830>
 80201f6:	e5c9      	b.n	801fd8c <_strtod_l+0x454>
 80201f8:	f04f 33ff 	mov.w	r3, #4294967295
 80201fc:	e7e8      	b.n	80201d0 <_strtod_l+0x898>
 80201fe:	4613      	mov	r3, r2
 8020200:	e7e6      	b.n	80201d0 <_strtod_l+0x898>
 8020202:	ea53 030a 	orrs.w	r3, r3, sl
 8020206:	d0a1      	beq.n	802014c <_strtod_l+0x814>
 8020208:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 802020a:	b1db      	cbz	r3, 8020244 <_strtod_l+0x90c>
 802020c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802020e:	4213      	tst	r3, r2
 8020210:	d0ee      	beq.n	80201f0 <_strtod_l+0x8b8>
 8020212:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020214:	9a08      	ldr	r2, [sp, #32]
 8020216:	4650      	mov	r0, sl
 8020218:	4659      	mov	r1, fp
 802021a:	b1bb      	cbz	r3, 802024c <_strtod_l+0x914>
 802021c:	f7ff fb6e 	bl	801f8fc <sulp>
 8020220:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020224:	ec53 2b10 	vmov	r2, r3, d0
 8020228:	f7e0 f830 	bl	800028c <__adddf3>
 802022c:	4682      	mov	sl, r0
 802022e:	468b      	mov	fp, r1
 8020230:	e7de      	b.n	80201f0 <_strtod_l+0x8b8>
 8020232:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8020236:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 802023a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 802023e:	f04f 3aff 	mov.w	sl, #4294967295
 8020242:	e7d5      	b.n	80201f0 <_strtod_l+0x8b8>
 8020244:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020246:	ea13 0f0a 	tst.w	r3, sl
 802024a:	e7e1      	b.n	8020210 <_strtod_l+0x8d8>
 802024c:	f7ff fb56 	bl	801f8fc <sulp>
 8020250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020254:	ec53 2b10 	vmov	r2, r3, d0
 8020258:	f7e0 f816 	bl	8000288 <__aeabi_dsub>
 802025c:	2200      	movs	r2, #0
 802025e:	2300      	movs	r3, #0
 8020260:	4682      	mov	sl, r0
 8020262:	468b      	mov	fp, r1
 8020264:	f7e0 fc30 	bl	8000ac8 <__aeabi_dcmpeq>
 8020268:	2800      	cmp	r0, #0
 802026a:	d0c1      	beq.n	80201f0 <_strtod_l+0x8b8>
 802026c:	e619      	b.n	801fea2 <_strtod_l+0x56a>
 802026e:	4641      	mov	r1, r8
 8020270:	4620      	mov	r0, r4
 8020272:	f7ff facd 	bl	801f810 <__ratio>
 8020276:	ec57 6b10 	vmov	r6, r7, d0
 802027a:	2200      	movs	r2, #0
 802027c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8020280:	4630      	mov	r0, r6
 8020282:	4639      	mov	r1, r7
 8020284:	f7e0 fc34 	bl	8000af0 <__aeabi_dcmple>
 8020288:	2800      	cmp	r0, #0
 802028a:	d06f      	beq.n	802036c <_strtod_l+0xa34>
 802028c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802028e:	2b00      	cmp	r3, #0
 8020290:	d17a      	bne.n	8020388 <_strtod_l+0xa50>
 8020292:	f1ba 0f00 	cmp.w	sl, #0
 8020296:	d158      	bne.n	802034a <_strtod_l+0xa12>
 8020298:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 802029a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 802029e:	2b00      	cmp	r3, #0
 80202a0:	d15a      	bne.n	8020358 <_strtod_l+0xa20>
 80202a2:	4b64      	ldr	r3, [pc, #400]	@ (8020434 <_strtod_l+0xafc>)
 80202a4:	2200      	movs	r2, #0
 80202a6:	4630      	mov	r0, r6
 80202a8:	4639      	mov	r1, r7
 80202aa:	f7e0 fc17 	bl	8000adc <__aeabi_dcmplt>
 80202ae:	2800      	cmp	r0, #0
 80202b0:	d159      	bne.n	8020366 <_strtod_l+0xa2e>
 80202b2:	4630      	mov	r0, r6
 80202b4:	4639      	mov	r1, r7
 80202b6:	4b60      	ldr	r3, [pc, #384]	@ (8020438 <_strtod_l+0xb00>)
 80202b8:	2200      	movs	r2, #0
 80202ba:	f7e0 f99d 	bl	80005f8 <__aeabi_dmul>
 80202be:	4606      	mov	r6, r0
 80202c0:	460f      	mov	r7, r1
 80202c2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80202c6:	9606      	str	r6, [sp, #24]
 80202c8:	9307      	str	r3, [sp, #28]
 80202ca:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80202ce:	4d57      	ldr	r5, [pc, #348]	@ (802042c <_strtod_l+0xaf4>)
 80202d0:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80202d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80202d6:	401d      	ands	r5, r3
 80202d8:	4b58      	ldr	r3, [pc, #352]	@ (802043c <_strtod_l+0xb04>)
 80202da:	429d      	cmp	r5, r3
 80202dc:	f040 80b2 	bne.w	8020444 <_strtod_l+0xb0c>
 80202e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80202e2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80202e6:	ec4b ab10 	vmov	d0, sl, fp
 80202ea:	f7ff f9c9 	bl	801f680 <__ulp>
 80202ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80202f2:	ec51 0b10 	vmov	r0, r1, d0
 80202f6:	f7e0 f97f 	bl	80005f8 <__aeabi_dmul>
 80202fa:	4652      	mov	r2, sl
 80202fc:	465b      	mov	r3, fp
 80202fe:	f7df ffc5 	bl	800028c <__adddf3>
 8020302:	460b      	mov	r3, r1
 8020304:	4949      	ldr	r1, [pc, #292]	@ (802042c <_strtod_l+0xaf4>)
 8020306:	4a4e      	ldr	r2, [pc, #312]	@ (8020440 <_strtod_l+0xb08>)
 8020308:	4019      	ands	r1, r3
 802030a:	4291      	cmp	r1, r2
 802030c:	4682      	mov	sl, r0
 802030e:	d942      	bls.n	8020396 <_strtod_l+0xa5e>
 8020310:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020312:	4b47      	ldr	r3, [pc, #284]	@ (8020430 <_strtod_l+0xaf8>)
 8020314:	429a      	cmp	r2, r3
 8020316:	d103      	bne.n	8020320 <_strtod_l+0x9e8>
 8020318:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 802031a:	3301      	adds	r3, #1
 802031c:	f43f ad2b 	beq.w	801fd76 <_strtod_l+0x43e>
 8020320:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8020430 <_strtod_l+0xaf8>
 8020324:	f04f 3aff 	mov.w	sl, #4294967295
 8020328:	991a      	ldr	r1, [sp, #104]	@ 0x68
 802032a:	9805      	ldr	r0, [sp, #20]
 802032c:	f7fe fe74 	bl	801f018 <_Bfree>
 8020330:	9805      	ldr	r0, [sp, #20]
 8020332:	4649      	mov	r1, r9
 8020334:	f7fe fe70 	bl	801f018 <_Bfree>
 8020338:	9805      	ldr	r0, [sp, #20]
 802033a:	4641      	mov	r1, r8
 802033c:	f7fe fe6c 	bl	801f018 <_Bfree>
 8020340:	9805      	ldr	r0, [sp, #20]
 8020342:	4621      	mov	r1, r4
 8020344:	f7fe fe68 	bl	801f018 <_Bfree>
 8020348:	e618      	b.n	801ff7c <_strtod_l+0x644>
 802034a:	f1ba 0f01 	cmp.w	sl, #1
 802034e:	d103      	bne.n	8020358 <_strtod_l+0xa20>
 8020350:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020352:	2b00      	cmp	r3, #0
 8020354:	f43f ada5 	beq.w	801fea2 <_strtod_l+0x56a>
 8020358:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8020408 <_strtod_l+0xad0>
 802035c:	4f35      	ldr	r7, [pc, #212]	@ (8020434 <_strtod_l+0xafc>)
 802035e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020362:	2600      	movs	r6, #0
 8020364:	e7b1      	b.n	80202ca <_strtod_l+0x992>
 8020366:	4f34      	ldr	r7, [pc, #208]	@ (8020438 <_strtod_l+0xb00>)
 8020368:	2600      	movs	r6, #0
 802036a:	e7aa      	b.n	80202c2 <_strtod_l+0x98a>
 802036c:	4b32      	ldr	r3, [pc, #200]	@ (8020438 <_strtod_l+0xb00>)
 802036e:	4630      	mov	r0, r6
 8020370:	4639      	mov	r1, r7
 8020372:	2200      	movs	r2, #0
 8020374:	f7e0 f940 	bl	80005f8 <__aeabi_dmul>
 8020378:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802037a:	4606      	mov	r6, r0
 802037c:	460f      	mov	r7, r1
 802037e:	2b00      	cmp	r3, #0
 8020380:	d09f      	beq.n	80202c2 <_strtod_l+0x98a>
 8020382:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8020386:	e7a0      	b.n	80202ca <_strtod_l+0x992>
 8020388:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8020410 <_strtod_l+0xad8>
 802038c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020390:	ec57 6b17 	vmov	r6, r7, d7
 8020394:	e799      	b.n	80202ca <_strtod_l+0x992>
 8020396:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 802039a:	9b08      	ldr	r3, [sp, #32]
 802039c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80203a0:	2b00      	cmp	r3, #0
 80203a2:	d1c1      	bne.n	8020328 <_strtod_l+0x9f0>
 80203a4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80203a8:	0d1b      	lsrs	r3, r3, #20
 80203aa:	051b      	lsls	r3, r3, #20
 80203ac:	429d      	cmp	r5, r3
 80203ae:	d1bb      	bne.n	8020328 <_strtod_l+0x9f0>
 80203b0:	4630      	mov	r0, r6
 80203b2:	4639      	mov	r1, r7
 80203b4:	f7e0 fc80 	bl	8000cb8 <__aeabi_d2lz>
 80203b8:	f7e0 f8f0 	bl	800059c <__aeabi_l2d>
 80203bc:	4602      	mov	r2, r0
 80203be:	460b      	mov	r3, r1
 80203c0:	4630      	mov	r0, r6
 80203c2:	4639      	mov	r1, r7
 80203c4:	f7df ff60 	bl	8000288 <__aeabi_dsub>
 80203c8:	460b      	mov	r3, r1
 80203ca:	4602      	mov	r2, r0
 80203cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80203d0:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80203d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80203d6:	ea46 060a 	orr.w	r6, r6, sl
 80203da:	431e      	orrs	r6, r3
 80203dc:	d06f      	beq.n	80204be <_strtod_l+0xb86>
 80203de:	a30e      	add	r3, pc, #56	@ (adr r3, 8020418 <_strtod_l+0xae0>)
 80203e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80203e4:	f7e0 fb7a 	bl	8000adc <__aeabi_dcmplt>
 80203e8:	2800      	cmp	r0, #0
 80203ea:	f47f accf 	bne.w	801fd8c <_strtod_l+0x454>
 80203ee:	a30c      	add	r3, pc, #48	@ (adr r3, 8020420 <_strtod_l+0xae8>)
 80203f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80203f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80203f8:	f7e0 fb8e 	bl	8000b18 <__aeabi_dcmpgt>
 80203fc:	2800      	cmp	r0, #0
 80203fe:	d093      	beq.n	8020328 <_strtod_l+0x9f0>
 8020400:	e4c4      	b.n	801fd8c <_strtod_l+0x454>
 8020402:	bf00      	nop
 8020404:	f3af 8000 	nop.w
 8020408:	00000000 	.word	0x00000000
 802040c:	bff00000 	.word	0xbff00000
 8020410:	00000000 	.word	0x00000000
 8020414:	3ff00000 	.word	0x3ff00000
 8020418:	94a03595 	.word	0x94a03595
 802041c:	3fdfffff 	.word	0x3fdfffff
 8020420:	35afe535 	.word	0x35afe535
 8020424:	3fe00000 	.word	0x3fe00000
 8020428:	000fffff 	.word	0x000fffff
 802042c:	7ff00000 	.word	0x7ff00000
 8020430:	7fefffff 	.word	0x7fefffff
 8020434:	3ff00000 	.word	0x3ff00000
 8020438:	3fe00000 	.word	0x3fe00000
 802043c:	7fe00000 	.word	0x7fe00000
 8020440:	7c9fffff 	.word	0x7c9fffff
 8020444:	9b08      	ldr	r3, [sp, #32]
 8020446:	b323      	cbz	r3, 8020492 <_strtod_l+0xb5a>
 8020448:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 802044c:	d821      	bhi.n	8020492 <_strtod_l+0xb5a>
 802044e:	a328      	add	r3, pc, #160	@ (adr r3, 80204f0 <_strtod_l+0xbb8>)
 8020450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020454:	4630      	mov	r0, r6
 8020456:	4639      	mov	r1, r7
 8020458:	f7e0 fb4a 	bl	8000af0 <__aeabi_dcmple>
 802045c:	b1a0      	cbz	r0, 8020488 <_strtod_l+0xb50>
 802045e:	4639      	mov	r1, r7
 8020460:	4630      	mov	r0, r6
 8020462:	f7e0 fba1 	bl	8000ba8 <__aeabi_d2uiz>
 8020466:	2801      	cmp	r0, #1
 8020468:	bf38      	it	cc
 802046a:	2001      	movcc	r0, #1
 802046c:	f7e0 f84a 	bl	8000504 <__aeabi_ui2d>
 8020470:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020472:	4606      	mov	r6, r0
 8020474:	460f      	mov	r7, r1
 8020476:	b9fb      	cbnz	r3, 80204b8 <_strtod_l+0xb80>
 8020478:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 802047c:	9014      	str	r0, [sp, #80]	@ 0x50
 802047e:	9315      	str	r3, [sp, #84]	@ 0x54
 8020480:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8020484:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8020488:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 802048a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 802048e:	1b5b      	subs	r3, r3, r5
 8020490:	9311      	str	r3, [sp, #68]	@ 0x44
 8020492:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8020496:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 802049a:	f7ff f8f1 	bl	801f680 <__ulp>
 802049e:	4650      	mov	r0, sl
 80204a0:	ec53 2b10 	vmov	r2, r3, d0
 80204a4:	4659      	mov	r1, fp
 80204a6:	f7e0 f8a7 	bl	80005f8 <__aeabi_dmul>
 80204aa:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80204ae:	f7df feed 	bl	800028c <__adddf3>
 80204b2:	4682      	mov	sl, r0
 80204b4:	468b      	mov	fp, r1
 80204b6:	e770      	b.n	802039a <_strtod_l+0xa62>
 80204b8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80204bc:	e7e0      	b.n	8020480 <_strtod_l+0xb48>
 80204be:	a30e      	add	r3, pc, #56	@ (adr r3, 80204f8 <_strtod_l+0xbc0>)
 80204c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80204c4:	f7e0 fb0a 	bl	8000adc <__aeabi_dcmplt>
 80204c8:	e798      	b.n	80203fc <_strtod_l+0xac4>
 80204ca:	2300      	movs	r3, #0
 80204cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80204ce:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80204d0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80204d2:	6013      	str	r3, [r2, #0]
 80204d4:	f7ff ba6d 	b.w	801f9b2 <_strtod_l+0x7a>
 80204d8:	2a65      	cmp	r2, #101	@ 0x65
 80204da:	f43f ab66 	beq.w	801fbaa <_strtod_l+0x272>
 80204de:	2a45      	cmp	r2, #69	@ 0x45
 80204e0:	f43f ab63 	beq.w	801fbaa <_strtod_l+0x272>
 80204e4:	2301      	movs	r3, #1
 80204e6:	f7ff bb9e 	b.w	801fc26 <_strtod_l+0x2ee>
 80204ea:	bf00      	nop
 80204ec:	f3af 8000 	nop.w
 80204f0:	ffc00000 	.word	0xffc00000
 80204f4:	41dfffff 	.word	0x41dfffff
 80204f8:	94a03595 	.word	0x94a03595
 80204fc:	3fcfffff 	.word	0x3fcfffff

08020500 <_strtod_r>:
 8020500:	4b01      	ldr	r3, [pc, #4]	@ (8020508 <_strtod_r+0x8>)
 8020502:	f7ff ba19 	b.w	801f938 <_strtod_l>
 8020506:	bf00      	nop
 8020508:	20000090 	.word	0x20000090

0802050c <__ssputs_r>:
 802050c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020510:	688e      	ldr	r6, [r1, #8]
 8020512:	461f      	mov	r7, r3
 8020514:	42be      	cmp	r6, r7
 8020516:	680b      	ldr	r3, [r1, #0]
 8020518:	4682      	mov	sl, r0
 802051a:	460c      	mov	r4, r1
 802051c:	4690      	mov	r8, r2
 802051e:	d82d      	bhi.n	802057c <__ssputs_r+0x70>
 8020520:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020524:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8020528:	d026      	beq.n	8020578 <__ssputs_r+0x6c>
 802052a:	6965      	ldr	r5, [r4, #20]
 802052c:	6909      	ldr	r1, [r1, #16]
 802052e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020532:	eba3 0901 	sub.w	r9, r3, r1
 8020536:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802053a:	1c7b      	adds	r3, r7, #1
 802053c:	444b      	add	r3, r9
 802053e:	106d      	asrs	r5, r5, #1
 8020540:	429d      	cmp	r5, r3
 8020542:	bf38      	it	cc
 8020544:	461d      	movcc	r5, r3
 8020546:	0553      	lsls	r3, r2, #21
 8020548:	d527      	bpl.n	802059a <__ssputs_r+0x8e>
 802054a:	4629      	mov	r1, r5
 802054c:	f7fe fc98 	bl	801ee80 <_malloc_r>
 8020550:	4606      	mov	r6, r0
 8020552:	b360      	cbz	r0, 80205ae <__ssputs_r+0xa2>
 8020554:	6921      	ldr	r1, [r4, #16]
 8020556:	464a      	mov	r2, r9
 8020558:	f7fd fd9f 	bl	801e09a <memcpy>
 802055c:	89a3      	ldrh	r3, [r4, #12]
 802055e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8020562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020566:	81a3      	strh	r3, [r4, #12]
 8020568:	6126      	str	r6, [r4, #16]
 802056a:	6165      	str	r5, [r4, #20]
 802056c:	444e      	add	r6, r9
 802056e:	eba5 0509 	sub.w	r5, r5, r9
 8020572:	6026      	str	r6, [r4, #0]
 8020574:	60a5      	str	r5, [r4, #8]
 8020576:	463e      	mov	r6, r7
 8020578:	42be      	cmp	r6, r7
 802057a:	d900      	bls.n	802057e <__ssputs_r+0x72>
 802057c:	463e      	mov	r6, r7
 802057e:	6820      	ldr	r0, [r4, #0]
 8020580:	4632      	mov	r2, r6
 8020582:	4641      	mov	r1, r8
 8020584:	f7fd fc87 	bl	801de96 <memmove>
 8020588:	68a3      	ldr	r3, [r4, #8]
 802058a:	1b9b      	subs	r3, r3, r6
 802058c:	60a3      	str	r3, [r4, #8]
 802058e:	6823      	ldr	r3, [r4, #0]
 8020590:	4433      	add	r3, r6
 8020592:	6023      	str	r3, [r4, #0]
 8020594:	2000      	movs	r0, #0
 8020596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802059a:	462a      	mov	r2, r5
 802059c:	f000 ff21 	bl	80213e2 <_realloc_r>
 80205a0:	4606      	mov	r6, r0
 80205a2:	2800      	cmp	r0, #0
 80205a4:	d1e0      	bne.n	8020568 <__ssputs_r+0x5c>
 80205a6:	6921      	ldr	r1, [r4, #16]
 80205a8:	4650      	mov	r0, sl
 80205aa:	f7fe fbf5 	bl	801ed98 <_free_r>
 80205ae:	230c      	movs	r3, #12
 80205b0:	f8ca 3000 	str.w	r3, [sl]
 80205b4:	89a3      	ldrh	r3, [r4, #12]
 80205b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80205ba:	81a3      	strh	r3, [r4, #12]
 80205bc:	f04f 30ff 	mov.w	r0, #4294967295
 80205c0:	e7e9      	b.n	8020596 <__ssputs_r+0x8a>
	...

080205c4 <_svfiprintf_r>:
 80205c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205c8:	4698      	mov	r8, r3
 80205ca:	898b      	ldrh	r3, [r1, #12]
 80205cc:	061b      	lsls	r3, r3, #24
 80205ce:	b09d      	sub	sp, #116	@ 0x74
 80205d0:	4607      	mov	r7, r0
 80205d2:	460d      	mov	r5, r1
 80205d4:	4614      	mov	r4, r2
 80205d6:	d510      	bpl.n	80205fa <_svfiprintf_r+0x36>
 80205d8:	690b      	ldr	r3, [r1, #16]
 80205da:	b973      	cbnz	r3, 80205fa <_svfiprintf_r+0x36>
 80205dc:	2140      	movs	r1, #64	@ 0x40
 80205de:	f7fe fc4f 	bl	801ee80 <_malloc_r>
 80205e2:	6028      	str	r0, [r5, #0]
 80205e4:	6128      	str	r0, [r5, #16]
 80205e6:	b930      	cbnz	r0, 80205f6 <_svfiprintf_r+0x32>
 80205e8:	230c      	movs	r3, #12
 80205ea:	603b      	str	r3, [r7, #0]
 80205ec:	f04f 30ff 	mov.w	r0, #4294967295
 80205f0:	b01d      	add	sp, #116	@ 0x74
 80205f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80205f6:	2340      	movs	r3, #64	@ 0x40
 80205f8:	616b      	str	r3, [r5, #20]
 80205fa:	2300      	movs	r3, #0
 80205fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80205fe:	2320      	movs	r3, #32
 8020600:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020604:	f8cd 800c 	str.w	r8, [sp, #12]
 8020608:	2330      	movs	r3, #48	@ 0x30
 802060a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80207a8 <_svfiprintf_r+0x1e4>
 802060e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020612:	f04f 0901 	mov.w	r9, #1
 8020616:	4623      	mov	r3, r4
 8020618:	469a      	mov	sl, r3
 802061a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802061e:	b10a      	cbz	r2, 8020624 <_svfiprintf_r+0x60>
 8020620:	2a25      	cmp	r2, #37	@ 0x25
 8020622:	d1f9      	bne.n	8020618 <_svfiprintf_r+0x54>
 8020624:	ebba 0b04 	subs.w	fp, sl, r4
 8020628:	d00b      	beq.n	8020642 <_svfiprintf_r+0x7e>
 802062a:	465b      	mov	r3, fp
 802062c:	4622      	mov	r2, r4
 802062e:	4629      	mov	r1, r5
 8020630:	4638      	mov	r0, r7
 8020632:	f7ff ff6b 	bl	802050c <__ssputs_r>
 8020636:	3001      	adds	r0, #1
 8020638:	f000 80a7 	beq.w	802078a <_svfiprintf_r+0x1c6>
 802063c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802063e:	445a      	add	r2, fp
 8020640:	9209      	str	r2, [sp, #36]	@ 0x24
 8020642:	f89a 3000 	ldrb.w	r3, [sl]
 8020646:	2b00      	cmp	r3, #0
 8020648:	f000 809f 	beq.w	802078a <_svfiprintf_r+0x1c6>
 802064c:	2300      	movs	r3, #0
 802064e:	f04f 32ff 	mov.w	r2, #4294967295
 8020652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8020656:	f10a 0a01 	add.w	sl, sl, #1
 802065a:	9304      	str	r3, [sp, #16]
 802065c:	9307      	str	r3, [sp, #28]
 802065e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8020662:	931a      	str	r3, [sp, #104]	@ 0x68
 8020664:	4654      	mov	r4, sl
 8020666:	2205      	movs	r2, #5
 8020668:	f814 1b01 	ldrb.w	r1, [r4], #1
 802066c:	484e      	ldr	r0, [pc, #312]	@ (80207a8 <_svfiprintf_r+0x1e4>)
 802066e:	f7df fdaf 	bl	80001d0 <memchr>
 8020672:	9a04      	ldr	r2, [sp, #16]
 8020674:	b9d8      	cbnz	r0, 80206ae <_svfiprintf_r+0xea>
 8020676:	06d0      	lsls	r0, r2, #27
 8020678:	bf44      	itt	mi
 802067a:	2320      	movmi	r3, #32
 802067c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8020680:	0711      	lsls	r1, r2, #28
 8020682:	bf44      	itt	mi
 8020684:	232b      	movmi	r3, #43	@ 0x2b
 8020686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802068a:	f89a 3000 	ldrb.w	r3, [sl]
 802068e:	2b2a      	cmp	r3, #42	@ 0x2a
 8020690:	d015      	beq.n	80206be <_svfiprintf_r+0xfa>
 8020692:	9a07      	ldr	r2, [sp, #28]
 8020694:	4654      	mov	r4, sl
 8020696:	2000      	movs	r0, #0
 8020698:	f04f 0c0a 	mov.w	ip, #10
 802069c:	4621      	mov	r1, r4
 802069e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80206a2:	3b30      	subs	r3, #48	@ 0x30
 80206a4:	2b09      	cmp	r3, #9
 80206a6:	d94b      	bls.n	8020740 <_svfiprintf_r+0x17c>
 80206a8:	b1b0      	cbz	r0, 80206d8 <_svfiprintf_r+0x114>
 80206aa:	9207      	str	r2, [sp, #28]
 80206ac:	e014      	b.n	80206d8 <_svfiprintf_r+0x114>
 80206ae:	eba0 0308 	sub.w	r3, r0, r8
 80206b2:	fa09 f303 	lsl.w	r3, r9, r3
 80206b6:	4313      	orrs	r3, r2
 80206b8:	9304      	str	r3, [sp, #16]
 80206ba:	46a2      	mov	sl, r4
 80206bc:	e7d2      	b.n	8020664 <_svfiprintf_r+0xa0>
 80206be:	9b03      	ldr	r3, [sp, #12]
 80206c0:	1d19      	adds	r1, r3, #4
 80206c2:	681b      	ldr	r3, [r3, #0]
 80206c4:	9103      	str	r1, [sp, #12]
 80206c6:	2b00      	cmp	r3, #0
 80206c8:	bfbb      	ittet	lt
 80206ca:	425b      	neglt	r3, r3
 80206cc:	f042 0202 	orrlt.w	r2, r2, #2
 80206d0:	9307      	strge	r3, [sp, #28]
 80206d2:	9307      	strlt	r3, [sp, #28]
 80206d4:	bfb8      	it	lt
 80206d6:	9204      	strlt	r2, [sp, #16]
 80206d8:	7823      	ldrb	r3, [r4, #0]
 80206da:	2b2e      	cmp	r3, #46	@ 0x2e
 80206dc:	d10a      	bne.n	80206f4 <_svfiprintf_r+0x130>
 80206de:	7863      	ldrb	r3, [r4, #1]
 80206e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80206e2:	d132      	bne.n	802074a <_svfiprintf_r+0x186>
 80206e4:	9b03      	ldr	r3, [sp, #12]
 80206e6:	1d1a      	adds	r2, r3, #4
 80206e8:	681b      	ldr	r3, [r3, #0]
 80206ea:	9203      	str	r2, [sp, #12]
 80206ec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80206f0:	3402      	adds	r4, #2
 80206f2:	9305      	str	r3, [sp, #20]
 80206f4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80207b8 <_svfiprintf_r+0x1f4>
 80206f8:	7821      	ldrb	r1, [r4, #0]
 80206fa:	2203      	movs	r2, #3
 80206fc:	4650      	mov	r0, sl
 80206fe:	f7df fd67 	bl	80001d0 <memchr>
 8020702:	b138      	cbz	r0, 8020714 <_svfiprintf_r+0x150>
 8020704:	9b04      	ldr	r3, [sp, #16]
 8020706:	eba0 000a 	sub.w	r0, r0, sl
 802070a:	2240      	movs	r2, #64	@ 0x40
 802070c:	4082      	lsls	r2, r0
 802070e:	4313      	orrs	r3, r2
 8020710:	3401      	adds	r4, #1
 8020712:	9304      	str	r3, [sp, #16]
 8020714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020718:	4824      	ldr	r0, [pc, #144]	@ (80207ac <_svfiprintf_r+0x1e8>)
 802071a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802071e:	2206      	movs	r2, #6
 8020720:	f7df fd56 	bl	80001d0 <memchr>
 8020724:	2800      	cmp	r0, #0
 8020726:	d036      	beq.n	8020796 <_svfiprintf_r+0x1d2>
 8020728:	4b21      	ldr	r3, [pc, #132]	@ (80207b0 <_svfiprintf_r+0x1ec>)
 802072a:	bb1b      	cbnz	r3, 8020774 <_svfiprintf_r+0x1b0>
 802072c:	9b03      	ldr	r3, [sp, #12]
 802072e:	3307      	adds	r3, #7
 8020730:	f023 0307 	bic.w	r3, r3, #7
 8020734:	3308      	adds	r3, #8
 8020736:	9303      	str	r3, [sp, #12]
 8020738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802073a:	4433      	add	r3, r6
 802073c:	9309      	str	r3, [sp, #36]	@ 0x24
 802073e:	e76a      	b.n	8020616 <_svfiprintf_r+0x52>
 8020740:	fb0c 3202 	mla	r2, ip, r2, r3
 8020744:	460c      	mov	r4, r1
 8020746:	2001      	movs	r0, #1
 8020748:	e7a8      	b.n	802069c <_svfiprintf_r+0xd8>
 802074a:	2300      	movs	r3, #0
 802074c:	3401      	adds	r4, #1
 802074e:	9305      	str	r3, [sp, #20]
 8020750:	4619      	mov	r1, r3
 8020752:	f04f 0c0a 	mov.w	ip, #10
 8020756:	4620      	mov	r0, r4
 8020758:	f810 2b01 	ldrb.w	r2, [r0], #1
 802075c:	3a30      	subs	r2, #48	@ 0x30
 802075e:	2a09      	cmp	r2, #9
 8020760:	d903      	bls.n	802076a <_svfiprintf_r+0x1a6>
 8020762:	2b00      	cmp	r3, #0
 8020764:	d0c6      	beq.n	80206f4 <_svfiprintf_r+0x130>
 8020766:	9105      	str	r1, [sp, #20]
 8020768:	e7c4      	b.n	80206f4 <_svfiprintf_r+0x130>
 802076a:	fb0c 2101 	mla	r1, ip, r1, r2
 802076e:	4604      	mov	r4, r0
 8020770:	2301      	movs	r3, #1
 8020772:	e7f0      	b.n	8020756 <_svfiprintf_r+0x192>
 8020774:	ab03      	add	r3, sp, #12
 8020776:	9300      	str	r3, [sp, #0]
 8020778:	462a      	mov	r2, r5
 802077a:	4b0e      	ldr	r3, [pc, #56]	@ (80207b4 <_svfiprintf_r+0x1f0>)
 802077c:	a904      	add	r1, sp, #16
 802077e:	4638      	mov	r0, r7
 8020780:	f7fc fc76 	bl	801d070 <_printf_float>
 8020784:	1c42      	adds	r2, r0, #1
 8020786:	4606      	mov	r6, r0
 8020788:	d1d6      	bne.n	8020738 <_svfiprintf_r+0x174>
 802078a:	89ab      	ldrh	r3, [r5, #12]
 802078c:	065b      	lsls	r3, r3, #25
 802078e:	f53f af2d 	bmi.w	80205ec <_svfiprintf_r+0x28>
 8020792:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020794:	e72c      	b.n	80205f0 <_svfiprintf_r+0x2c>
 8020796:	ab03      	add	r3, sp, #12
 8020798:	9300      	str	r3, [sp, #0]
 802079a:	462a      	mov	r2, r5
 802079c:	4b05      	ldr	r3, [pc, #20]	@ (80207b4 <_svfiprintf_r+0x1f0>)
 802079e:	a904      	add	r1, sp, #16
 80207a0:	4638      	mov	r0, r7
 80207a2:	f7fc fefd 	bl	801d5a0 <_printf_i>
 80207a6:	e7ed      	b.n	8020784 <_svfiprintf_r+0x1c0>
 80207a8:	08025b60 	.word	0x08025b60
 80207ac:	08025b6a 	.word	0x08025b6a
 80207b0:	0801d071 	.word	0x0801d071
 80207b4:	0802050d 	.word	0x0802050d
 80207b8:	08025b66 	.word	0x08025b66

080207bc <__sfputc_r>:
 80207bc:	6893      	ldr	r3, [r2, #8]
 80207be:	3b01      	subs	r3, #1
 80207c0:	2b00      	cmp	r3, #0
 80207c2:	b410      	push	{r4}
 80207c4:	6093      	str	r3, [r2, #8]
 80207c6:	da08      	bge.n	80207da <__sfputc_r+0x1e>
 80207c8:	6994      	ldr	r4, [r2, #24]
 80207ca:	42a3      	cmp	r3, r4
 80207cc:	db01      	blt.n	80207d2 <__sfputc_r+0x16>
 80207ce:	290a      	cmp	r1, #10
 80207d0:	d103      	bne.n	80207da <__sfputc_r+0x1e>
 80207d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80207d6:	f000 b9f1 	b.w	8020bbc <__swbuf_r>
 80207da:	6813      	ldr	r3, [r2, #0]
 80207dc:	1c58      	adds	r0, r3, #1
 80207de:	6010      	str	r0, [r2, #0]
 80207e0:	7019      	strb	r1, [r3, #0]
 80207e2:	4608      	mov	r0, r1
 80207e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80207e8:	4770      	bx	lr

080207ea <__sfputs_r>:
 80207ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80207ec:	4606      	mov	r6, r0
 80207ee:	460f      	mov	r7, r1
 80207f0:	4614      	mov	r4, r2
 80207f2:	18d5      	adds	r5, r2, r3
 80207f4:	42ac      	cmp	r4, r5
 80207f6:	d101      	bne.n	80207fc <__sfputs_r+0x12>
 80207f8:	2000      	movs	r0, #0
 80207fa:	e007      	b.n	802080c <__sfputs_r+0x22>
 80207fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8020800:	463a      	mov	r2, r7
 8020802:	4630      	mov	r0, r6
 8020804:	f7ff ffda 	bl	80207bc <__sfputc_r>
 8020808:	1c43      	adds	r3, r0, #1
 802080a:	d1f3      	bne.n	80207f4 <__sfputs_r+0xa>
 802080c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08020810 <_vfiprintf_r>:
 8020810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020814:	460d      	mov	r5, r1
 8020816:	b09d      	sub	sp, #116	@ 0x74
 8020818:	4614      	mov	r4, r2
 802081a:	4698      	mov	r8, r3
 802081c:	4606      	mov	r6, r0
 802081e:	b118      	cbz	r0, 8020828 <_vfiprintf_r+0x18>
 8020820:	6a03      	ldr	r3, [r0, #32]
 8020822:	b90b      	cbnz	r3, 8020828 <_vfiprintf_r+0x18>
 8020824:	f7fd fa7c 	bl	801dd20 <__sinit>
 8020828:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802082a:	07d9      	lsls	r1, r3, #31
 802082c:	d405      	bmi.n	802083a <_vfiprintf_r+0x2a>
 802082e:	89ab      	ldrh	r3, [r5, #12]
 8020830:	059a      	lsls	r2, r3, #22
 8020832:	d402      	bmi.n	802083a <_vfiprintf_r+0x2a>
 8020834:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020836:	f7fd fc2e 	bl	801e096 <__retarget_lock_acquire_recursive>
 802083a:	89ab      	ldrh	r3, [r5, #12]
 802083c:	071b      	lsls	r3, r3, #28
 802083e:	d501      	bpl.n	8020844 <_vfiprintf_r+0x34>
 8020840:	692b      	ldr	r3, [r5, #16]
 8020842:	b99b      	cbnz	r3, 802086c <_vfiprintf_r+0x5c>
 8020844:	4629      	mov	r1, r5
 8020846:	4630      	mov	r0, r6
 8020848:	f000 f9f6 	bl	8020c38 <__swsetup_r>
 802084c:	b170      	cbz	r0, 802086c <_vfiprintf_r+0x5c>
 802084e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8020850:	07dc      	lsls	r4, r3, #31
 8020852:	d504      	bpl.n	802085e <_vfiprintf_r+0x4e>
 8020854:	f04f 30ff 	mov.w	r0, #4294967295
 8020858:	b01d      	add	sp, #116	@ 0x74
 802085a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802085e:	89ab      	ldrh	r3, [r5, #12]
 8020860:	0598      	lsls	r0, r3, #22
 8020862:	d4f7      	bmi.n	8020854 <_vfiprintf_r+0x44>
 8020864:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020866:	f7fd fc17 	bl	801e098 <__retarget_lock_release_recursive>
 802086a:	e7f3      	b.n	8020854 <_vfiprintf_r+0x44>
 802086c:	2300      	movs	r3, #0
 802086e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020870:	2320      	movs	r3, #32
 8020872:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8020876:	f8cd 800c 	str.w	r8, [sp, #12]
 802087a:	2330      	movs	r3, #48	@ 0x30
 802087c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8020a2c <_vfiprintf_r+0x21c>
 8020880:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8020884:	f04f 0901 	mov.w	r9, #1
 8020888:	4623      	mov	r3, r4
 802088a:	469a      	mov	sl, r3
 802088c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8020890:	b10a      	cbz	r2, 8020896 <_vfiprintf_r+0x86>
 8020892:	2a25      	cmp	r2, #37	@ 0x25
 8020894:	d1f9      	bne.n	802088a <_vfiprintf_r+0x7a>
 8020896:	ebba 0b04 	subs.w	fp, sl, r4
 802089a:	d00b      	beq.n	80208b4 <_vfiprintf_r+0xa4>
 802089c:	465b      	mov	r3, fp
 802089e:	4622      	mov	r2, r4
 80208a0:	4629      	mov	r1, r5
 80208a2:	4630      	mov	r0, r6
 80208a4:	f7ff ffa1 	bl	80207ea <__sfputs_r>
 80208a8:	3001      	adds	r0, #1
 80208aa:	f000 80a7 	beq.w	80209fc <_vfiprintf_r+0x1ec>
 80208ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80208b0:	445a      	add	r2, fp
 80208b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80208b4:	f89a 3000 	ldrb.w	r3, [sl]
 80208b8:	2b00      	cmp	r3, #0
 80208ba:	f000 809f 	beq.w	80209fc <_vfiprintf_r+0x1ec>
 80208be:	2300      	movs	r3, #0
 80208c0:	f04f 32ff 	mov.w	r2, #4294967295
 80208c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80208c8:	f10a 0a01 	add.w	sl, sl, #1
 80208cc:	9304      	str	r3, [sp, #16]
 80208ce:	9307      	str	r3, [sp, #28]
 80208d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80208d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80208d6:	4654      	mov	r4, sl
 80208d8:	2205      	movs	r2, #5
 80208da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80208de:	4853      	ldr	r0, [pc, #332]	@ (8020a2c <_vfiprintf_r+0x21c>)
 80208e0:	f7df fc76 	bl	80001d0 <memchr>
 80208e4:	9a04      	ldr	r2, [sp, #16]
 80208e6:	b9d8      	cbnz	r0, 8020920 <_vfiprintf_r+0x110>
 80208e8:	06d1      	lsls	r1, r2, #27
 80208ea:	bf44      	itt	mi
 80208ec:	2320      	movmi	r3, #32
 80208ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80208f2:	0713      	lsls	r3, r2, #28
 80208f4:	bf44      	itt	mi
 80208f6:	232b      	movmi	r3, #43	@ 0x2b
 80208f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80208fc:	f89a 3000 	ldrb.w	r3, [sl]
 8020900:	2b2a      	cmp	r3, #42	@ 0x2a
 8020902:	d015      	beq.n	8020930 <_vfiprintf_r+0x120>
 8020904:	9a07      	ldr	r2, [sp, #28]
 8020906:	4654      	mov	r4, sl
 8020908:	2000      	movs	r0, #0
 802090a:	f04f 0c0a 	mov.w	ip, #10
 802090e:	4621      	mov	r1, r4
 8020910:	f811 3b01 	ldrb.w	r3, [r1], #1
 8020914:	3b30      	subs	r3, #48	@ 0x30
 8020916:	2b09      	cmp	r3, #9
 8020918:	d94b      	bls.n	80209b2 <_vfiprintf_r+0x1a2>
 802091a:	b1b0      	cbz	r0, 802094a <_vfiprintf_r+0x13a>
 802091c:	9207      	str	r2, [sp, #28]
 802091e:	e014      	b.n	802094a <_vfiprintf_r+0x13a>
 8020920:	eba0 0308 	sub.w	r3, r0, r8
 8020924:	fa09 f303 	lsl.w	r3, r9, r3
 8020928:	4313      	orrs	r3, r2
 802092a:	9304      	str	r3, [sp, #16]
 802092c:	46a2      	mov	sl, r4
 802092e:	e7d2      	b.n	80208d6 <_vfiprintf_r+0xc6>
 8020930:	9b03      	ldr	r3, [sp, #12]
 8020932:	1d19      	adds	r1, r3, #4
 8020934:	681b      	ldr	r3, [r3, #0]
 8020936:	9103      	str	r1, [sp, #12]
 8020938:	2b00      	cmp	r3, #0
 802093a:	bfbb      	ittet	lt
 802093c:	425b      	neglt	r3, r3
 802093e:	f042 0202 	orrlt.w	r2, r2, #2
 8020942:	9307      	strge	r3, [sp, #28]
 8020944:	9307      	strlt	r3, [sp, #28]
 8020946:	bfb8      	it	lt
 8020948:	9204      	strlt	r2, [sp, #16]
 802094a:	7823      	ldrb	r3, [r4, #0]
 802094c:	2b2e      	cmp	r3, #46	@ 0x2e
 802094e:	d10a      	bne.n	8020966 <_vfiprintf_r+0x156>
 8020950:	7863      	ldrb	r3, [r4, #1]
 8020952:	2b2a      	cmp	r3, #42	@ 0x2a
 8020954:	d132      	bne.n	80209bc <_vfiprintf_r+0x1ac>
 8020956:	9b03      	ldr	r3, [sp, #12]
 8020958:	1d1a      	adds	r2, r3, #4
 802095a:	681b      	ldr	r3, [r3, #0]
 802095c:	9203      	str	r2, [sp, #12]
 802095e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8020962:	3402      	adds	r4, #2
 8020964:	9305      	str	r3, [sp, #20]
 8020966:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8020a3c <_vfiprintf_r+0x22c>
 802096a:	7821      	ldrb	r1, [r4, #0]
 802096c:	2203      	movs	r2, #3
 802096e:	4650      	mov	r0, sl
 8020970:	f7df fc2e 	bl	80001d0 <memchr>
 8020974:	b138      	cbz	r0, 8020986 <_vfiprintf_r+0x176>
 8020976:	9b04      	ldr	r3, [sp, #16]
 8020978:	eba0 000a 	sub.w	r0, r0, sl
 802097c:	2240      	movs	r2, #64	@ 0x40
 802097e:	4082      	lsls	r2, r0
 8020980:	4313      	orrs	r3, r2
 8020982:	3401      	adds	r4, #1
 8020984:	9304      	str	r3, [sp, #16]
 8020986:	f814 1b01 	ldrb.w	r1, [r4], #1
 802098a:	4829      	ldr	r0, [pc, #164]	@ (8020a30 <_vfiprintf_r+0x220>)
 802098c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8020990:	2206      	movs	r2, #6
 8020992:	f7df fc1d 	bl	80001d0 <memchr>
 8020996:	2800      	cmp	r0, #0
 8020998:	d03f      	beq.n	8020a1a <_vfiprintf_r+0x20a>
 802099a:	4b26      	ldr	r3, [pc, #152]	@ (8020a34 <_vfiprintf_r+0x224>)
 802099c:	bb1b      	cbnz	r3, 80209e6 <_vfiprintf_r+0x1d6>
 802099e:	9b03      	ldr	r3, [sp, #12]
 80209a0:	3307      	adds	r3, #7
 80209a2:	f023 0307 	bic.w	r3, r3, #7
 80209a6:	3308      	adds	r3, #8
 80209a8:	9303      	str	r3, [sp, #12]
 80209aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80209ac:	443b      	add	r3, r7
 80209ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80209b0:	e76a      	b.n	8020888 <_vfiprintf_r+0x78>
 80209b2:	fb0c 3202 	mla	r2, ip, r2, r3
 80209b6:	460c      	mov	r4, r1
 80209b8:	2001      	movs	r0, #1
 80209ba:	e7a8      	b.n	802090e <_vfiprintf_r+0xfe>
 80209bc:	2300      	movs	r3, #0
 80209be:	3401      	adds	r4, #1
 80209c0:	9305      	str	r3, [sp, #20]
 80209c2:	4619      	mov	r1, r3
 80209c4:	f04f 0c0a 	mov.w	ip, #10
 80209c8:	4620      	mov	r0, r4
 80209ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80209ce:	3a30      	subs	r2, #48	@ 0x30
 80209d0:	2a09      	cmp	r2, #9
 80209d2:	d903      	bls.n	80209dc <_vfiprintf_r+0x1cc>
 80209d4:	2b00      	cmp	r3, #0
 80209d6:	d0c6      	beq.n	8020966 <_vfiprintf_r+0x156>
 80209d8:	9105      	str	r1, [sp, #20]
 80209da:	e7c4      	b.n	8020966 <_vfiprintf_r+0x156>
 80209dc:	fb0c 2101 	mla	r1, ip, r1, r2
 80209e0:	4604      	mov	r4, r0
 80209e2:	2301      	movs	r3, #1
 80209e4:	e7f0      	b.n	80209c8 <_vfiprintf_r+0x1b8>
 80209e6:	ab03      	add	r3, sp, #12
 80209e8:	9300      	str	r3, [sp, #0]
 80209ea:	462a      	mov	r2, r5
 80209ec:	4b12      	ldr	r3, [pc, #72]	@ (8020a38 <_vfiprintf_r+0x228>)
 80209ee:	a904      	add	r1, sp, #16
 80209f0:	4630      	mov	r0, r6
 80209f2:	f7fc fb3d 	bl	801d070 <_printf_float>
 80209f6:	4607      	mov	r7, r0
 80209f8:	1c78      	adds	r0, r7, #1
 80209fa:	d1d6      	bne.n	80209aa <_vfiprintf_r+0x19a>
 80209fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80209fe:	07d9      	lsls	r1, r3, #31
 8020a00:	d405      	bmi.n	8020a0e <_vfiprintf_r+0x1fe>
 8020a02:	89ab      	ldrh	r3, [r5, #12]
 8020a04:	059a      	lsls	r2, r3, #22
 8020a06:	d402      	bmi.n	8020a0e <_vfiprintf_r+0x1fe>
 8020a08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8020a0a:	f7fd fb45 	bl	801e098 <__retarget_lock_release_recursive>
 8020a0e:	89ab      	ldrh	r3, [r5, #12]
 8020a10:	065b      	lsls	r3, r3, #25
 8020a12:	f53f af1f 	bmi.w	8020854 <_vfiprintf_r+0x44>
 8020a16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8020a18:	e71e      	b.n	8020858 <_vfiprintf_r+0x48>
 8020a1a:	ab03      	add	r3, sp, #12
 8020a1c:	9300      	str	r3, [sp, #0]
 8020a1e:	462a      	mov	r2, r5
 8020a20:	4b05      	ldr	r3, [pc, #20]	@ (8020a38 <_vfiprintf_r+0x228>)
 8020a22:	a904      	add	r1, sp, #16
 8020a24:	4630      	mov	r0, r6
 8020a26:	f7fc fdbb 	bl	801d5a0 <_printf_i>
 8020a2a:	e7e4      	b.n	80209f6 <_vfiprintf_r+0x1e6>
 8020a2c:	08025b60 	.word	0x08025b60
 8020a30:	08025b6a 	.word	0x08025b6a
 8020a34:	0801d071 	.word	0x0801d071
 8020a38:	080207eb 	.word	0x080207eb
 8020a3c:	08025b66 	.word	0x08025b66

08020a40 <__sflush_r>:
 8020a40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020a48:	0716      	lsls	r6, r2, #28
 8020a4a:	4605      	mov	r5, r0
 8020a4c:	460c      	mov	r4, r1
 8020a4e:	d454      	bmi.n	8020afa <__sflush_r+0xba>
 8020a50:	684b      	ldr	r3, [r1, #4]
 8020a52:	2b00      	cmp	r3, #0
 8020a54:	dc02      	bgt.n	8020a5c <__sflush_r+0x1c>
 8020a56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8020a58:	2b00      	cmp	r3, #0
 8020a5a:	dd48      	ble.n	8020aee <__sflush_r+0xae>
 8020a5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020a5e:	2e00      	cmp	r6, #0
 8020a60:	d045      	beq.n	8020aee <__sflush_r+0xae>
 8020a62:	2300      	movs	r3, #0
 8020a64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8020a68:	682f      	ldr	r7, [r5, #0]
 8020a6a:	6a21      	ldr	r1, [r4, #32]
 8020a6c:	602b      	str	r3, [r5, #0]
 8020a6e:	d030      	beq.n	8020ad2 <__sflush_r+0x92>
 8020a70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8020a72:	89a3      	ldrh	r3, [r4, #12]
 8020a74:	0759      	lsls	r1, r3, #29
 8020a76:	d505      	bpl.n	8020a84 <__sflush_r+0x44>
 8020a78:	6863      	ldr	r3, [r4, #4]
 8020a7a:	1ad2      	subs	r2, r2, r3
 8020a7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8020a7e:	b10b      	cbz	r3, 8020a84 <__sflush_r+0x44>
 8020a80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8020a82:	1ad2      	subs	r2, r2, r3
 8020a84:	2300      	movs	r3, #0
 8020a86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8020a88:	6a21      	ldr	r1, [r4, #32]
 8020a8a:	4628      	mov	r0, r5
 8020a8c:	47b0      	blx	r6
 8020a8e:	1c43      	adds	r3, r0, #1
 8020a90:	89a3      	ldrh	r3, [r4, #12]
 8020a92:	d106      	bne.n	8020aa2 <__sflush_r+0x62>
 8020a94:	6829      	ldr	r1, [r5, #0]
 8020a96:	291d      	cmp	r1, #29
 8020a98:	d82b      	bhi.n	8020af2 <__sflush_r+0xb2>
 8020a9a:	4a2a      	ldr	r2, [pc, #168]	@ (8020b44 <__sflush_r+0x104>)
 8020a9c:	410a      	asrs	r2, r1
 8020a9e:	07d6      	lsls	r6, r2, #31
 8020aa0:	d427      	bmi.n	8020af2 <__sflush_r+0xb2>
 8020aa2:	2200      	movs	r2, #0
 8020aa4:	6062      	str	r2, [r4, #4]
 8020aa6:	04d9      	lsls	r1, r3, #19
 8020aa8:	6922      	ldr	r2, [r4, #16]
 8020aaa:	6022      	str	r2, [r4, #0]
 8020aac:	d504      	bpl.n	8020ab8 <__sflush_r+0x78>
 8020aae:	1c42      	adds	r2, r0, #1
 8020ab0:	d101      	bne.n	8020ab6 <__sflush_r+0x76>
 8020ab2:	682b      	ldr	r3, [r5, #0]
 8020ab4:	b903      	cbnz	r3, 8020ab8 <__sflush_r+0x78>
 8020ab6:	6560      	str	r0, [r4, #84]	@ 0x54
 8020ab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020aba:	602f      	str	r7, [r5, #0]
 8020abc:	b1b9      	cbz	r1, 8020aee <__sflush_r+0xae>
 8020abe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020ac2:	4299      	cmp	r1, r3
 8020ac4:	d002      	beq.n	8020acc <__sflush_r+0x8c>
 8020ac6:	4628      	mov	r0, r5
 8020ac8:	f7fe f966 	bl	801ed98 <_free_r>
 8020acc:	2300      	movs	r3, #0
 8020ace:	6363      	str	r3, [r4, #52]	@ 0x34
 8020ad0:	e00d      	b.n	8020aee <__sflush_r+0xae>
 8020ad2:	2301      	movs	r3, #1
 8020ad4:	4628      	mov	r0, r5
 8020ad6:	47b0      	blx	r6
 8020ad8:	4602      	mov	r2, r0
 8020ada:	1c50      	adds	r0, r2, #1
 8020adc:	d1c9      	bne.n	8020a72 <__sflush_r+0x32>
 8020ade:	682b      	ldr	r3, [r5, #0]
 8020ae0:	2b00      	cmp	r3, #0
 8020ae2:	d0c6      	beq.n	8020a72 <__sflush_r+0x32>
 8020ae4:	2b1d      	cmp	r3, #29
 8020ae6:	d001      	beq.n	8020aec <__sflush_r+0xac>
 8020ae8:	2b16      	cmp	r3, #22
 8020aea:	d11e      	bne.n	8020b2a <__sflush_r+0xea>
 8020aec:	602f      	str	r7, [r5, #0]
 8020aee:	2000      	movs	r0, #0
 8020af0:	e022      	b.n	8020b38 <__sflush_r+0xf8>
 8020af2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020af6:	b21b      	sxth	r3, r3
 8020af8:	e01b      	b.n	8020b32 <__sflush_r+0xf2>
 8020afa:	690f      	ldr	r7, [r1, #16]
 8020afc:	2f00      	cmp	r7, #0
 8020afe:	d0f6      	beq.n	8020aee <__sflush_r+0xae>
 8020b00:	0793      	lsls	r3, r2, #30
 8020b02:	680e      	ldr	r6, [r1, #0]
 8020b04:	bf08      	it	eq
 8020b06:	694b      	ldreq	r3, [r1, #20]
 8020b08:	600f      	str	r7, [r1, #0]
 8020b0a:	bf18      	it	ne
 8020b0c:	2300      	movne	r3, #0
 8020b0e:	eba6 0807 	sub.w	r8, r6, r7
 8020b12:	608b      	str	r3, [r1, #8]
 8020b14:	f1b8 0f00 	cmp.w	r8, #0
 8020b18:	dde9      	ble.n	8020aee <__sflush_r+0xae>
 8020b1a:	6a21      	ldr	r1, [r4, #32]
 8020b1c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8020b1e:	4643      	mov	r3, r8
 8020b20:	463a      	mov	r2, r7
 8020b22:	4628      	mov	r0, r5
 8020b24:	47b0      	blx	r6
 8020b26:	2800      	cmp	r0, #0
 8020b28:	dc08      	bgt.n	8020b3c <__sflush_r+0xfc>
 8020b2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020b2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020b32:	81a3      	strh	r3, [r4, #12]
 8020b34:	f04f 30ff 	mov.w	r0, #4294967295
 8020b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020b3c:	4407      	add	r7, r0
 8020b3e:	eba8 0800 	sub.w	r8, r8, r0
 8020b42:	e7e7      	b.n	8020b14 <__sflush_r+0xd4>
 8020b44:	dfbffffe 	.word	0xdfbffffe

08020b48 <_fflush_r>:
 8020b48:	b538      	push	{r3, r4, r5, lr}
 8020b4a:	690b      	ldr	r3, [r1, #16]
 8020b4c:	4605      	mov	r5, r0
 8020b4e:	460c      	mov	r4, r1
 8020b50:	b913      	cbnz	r3, 8020b58 <_fflush_r+0x10>
 8020b52:	2500      	movs	r5, #0
 8020b54:	4628      	mov	r0, r5
 8020b56:	bd38      	pop	{r3, r4, r5, pc}
 8020b58:	b118      	cbz	r0, 8020b62 <_fflush_r+0x1a>
 8020b5a:	6a03      	ldr	r3, [r0, #32]
 8020b5c:	b90b      	cbnz	r3, 8020b62 <_fflush_r+0x1a>
 8020b5e:	f7fd f8df 	bl	801dd20 <__sinit>
 8020b62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020b66:	2b00      	cmp	r3, #0
 8020b68:	d0f3      	beq.n	8020b52 <_fflush_r+0xa>
 8020b6a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8020b6c:	07d0      	lsls	r0, r2, #31
 8020b6e:	d404      	bmi.n	8020b7a <_fflush_r+0x32>
 8020b70:	0599      	lsls	r1, r3, #22
 8020b72:	d402      	bmi.n	8020b7a <_fflush_r+0x32>
 8020b74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020b76:	f7fd fa8e 	bl	801e096 <__retarget_lock_acquire_recursive>
 8020b7a:	4628      	mov	r0, r5
 8020b7c:	4621      	mov	r1, r4
 8020b7e:	f7ff ff5f 	bl	8020a40 <__sflush_r>
 8020b82:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8020b84:	07da      	lsls	r2, r3, #31
 8020b86:	4605      	mov	r5, r0
 8020b88:	d4e4      	bmi.n	8020b54 <_fflush_r+0xc>
 8020b8a:	89a3      	ldrh	r3, [r4, #12]
 8020b8c:	059b      	lsls	r3, r3, #22
 8020b8e:	d4e1      	bmi.n	8020b54 <_fflush_r+0xc>
 8020b90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8020b92:	f7fd fa81 	bl	801e098 <__retarget_lock_release_recursive>
 8020b96:	e7dd      	b.n	8020b54 <_fflush_r+0xc>

08020b98 <fiprintf>:
 8020b98:	b40e      	push	{r1, r2, r3}
 8020b9a:	b503      	push	{r0, r1, lr}
 8020b9c:	4601      	mov	r1, r0
 8020b9e:	ab03      	add	r3, sp, #12
 8020ba0:	4805      	ldr	r0, [pc, #20]	@ (8020bb8 <fiprintf+0x20>)
 8020ba2:	f853 2b04 	ldr.w	r2, [r3], #4
 8020ba6:	6800      	ldr	r0, [r0, #0]
 8020ba8:	9301      	str	r3, [sp, #4]
 8020baa:	f7ff fe31 	bl	8020810 <_vfiprintf_r>
 8020bae:	b002      	add	sp, #8
 8020bb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8020bb4:	b003      	add	sp, #12
 8020bb6:	4770      	bx	lr
 8020bb8:	20000040 	.word	0x20000040

08020bbc <__swbuf_r>:
 8020bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020bbe:	460e      	mov	r6, r1
 8020bc0:	4614      	mov	r4, r2
 8020bc2:	4605      	mov	r5, r0
 8020bc4:	b118      	cbz	r0, 8020bce <__swbuf_r+0x12>
 8020bc6:	6a03      	ldr	r3, [r0, #32]
 8020bc8:	b90b      	cbnz	r3, 8020bce <__swbuf_r+0x12>
 8020bca:	f7fd f8a9 	bl	801dd20 <__sinit>
 8020bce:	69a3      	ldr	r3, [r4, #24]
 8020bd0:	60a3      	str	r3, [r4, #8]
 8020bd2:	89a3      	ldrh	r3, [r4, #12]
 8020bd4:	071a      	lsls	r2, r3, #28
 8020bd6:	d501      	bpl.n	8020bdc <__swbuf_r+0x20>
 8020bd8:	6923      	ldr	r3, [r4, #16]
 8020bda:	b943      	cbnz	r3, 8020bee <__swbuf_r+0x32>
 8020bdc:	4621      	mov	r1, r4
 8020bde:	4628      	mov	r0, r5
 8020be0:	f000 f82a 	bl	8020c38 <__swsetup_r>
 8020be4:	b118      	cbz	r0, 8020bee <__swbuf_r+0x32>
 8020be6:	f04f 37ff 	mov.w	r7, #4294967295
 8020bea:	4638      	mov	r0, r7
 8020bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020bee:	6823      	ldr	r3, [r4, #0]
 8020bf0:	6922      	ldr	r2, [r4, #16]
 8020bf2:	1a98      	subs	r0, r3, r2
 8020bf4:	6963      	ldr	r3, [r4, #20]
 8020bf6:	b2f6      	uxtb	r6, r6
 8020bf8:	4283      	cmp	r3, r0
 8020bfa:	4637      	mov	r7, r6
 8020bfc:	dc05      	bgt.n	8020c0a <__swbuf_r+0x4e>
 8020bfe:	4621      	mov	r1, r4
 8020c00:	4628      	mov	r0, r5
 8020c02:	f7ff ffa1 	bl	8020b48 <_fflush_r>
 8020c06:	2800      	cmp	r0, #0
 8020c08:	d1ed      	bne.n	8020be6 <__swbuf_r+0x2a>
 8020c0a:	68a3      	ldr	r3, [r4, #8]
 8020c0c:	3b01      	subs	r3, #1
 8020c0e:	60a3      	str	r3, [r4, #8]
 8020c10:	6823      	ldr	r3, [r4, #0]
 8020c12:	1c5a      	adds	r2, r3, #1
 8020c14:	6022      	str	r2, [r4, #0]
 8020c16:	701e      	strb	r6, [r3, #0]
 8020c18:	6962      	ldr	r2, [r4, #20]
 8020c1a:	1c43      	adds	r3, r0, #1
 8020c1c:	429a      	cmp	r2, r3
 8020c1e:	d004      	beq.n	8020c2a <__swbuf_r+0x6e>
 8020c20:	89a3      	ldrh	r3, [r4, #12]
 8020c22:	07db      	lsls	r3, r3, #31
 8020c24:	d5e1      	bpl.n	8020bea <__swbuf_r+0x2e>
 8020c26:	2e0a      	cmp	r6, #10
 8020c28:	d1df      	bne.n	8020bea <__swbuf_r+0x2e>
 8020c2a:	4621      	mov	r1, r4
 8020c2c:	4628      	mov	r0, r5
 8020c2e:	f7ff ff8b 	bl	8020b48 <_fflush_r>
 8020c32:	2800      	cmp	r0, #0
 8020c34:	d0d9      	beq.n	8020bea <__swbuf_r+0x2e>
 8020c36:	e7d6      	b.n	8020be6 <__swbuf_r+0x2a>

08020c38 <__swsetup_r>:
 8020c38:	b538      	push	{r3, r4, r5, lr}
 8020c3a:	4b29      	ldr	r3, [pc, #164]	@ (8020ce0 <__swsetup_r+0xa8>)
 8020c3c:	4605      	mov	r5, r0
 8020c3e:	6818      	ldr	r0, [r3, #0]
 8020c40:	460c      	mov	r4, r1
 8020c42:	b118      	cbz	r0, 8020c4c <__swsetup_r+0x14>
 8020c44:	6a03      	ldr	r3, [r0, #32]
 8020c46:	b90b      	cbnz	r3, 8020c4c <__swsetup_r+0x14>
 8020c48:	f7fd f86a 	bl	801dd20 <__sinit>
 8020c4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020c50:	0719      	lsls	r1, r3, #28
 8020c52:	d422      	bmi.n	8020c9a <__swsetup_r+0x62>
 8020c54:	06da      	lsls	r2, r3, #27
 8020c56:	d407      	bmi.n	8020c68 <__swsetup_r+0x30>
 8020c58:	2209      	movs	r2, #9
 8020c5a:	602a      	str	r2, [r5, #0]
 8020c5c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020c60:	81a3      	strh	r3, [r4, #12]
 8020c62:	f04f 30ff 	mov.w	r0, #4294967295
 8020c66:	e033      	b.n	8020cd0 <__swsetup_r+0x98>
 8020c68:	0758      	lsls	r0, r3, #29
 8020c6a:	d512      	bpl.n	8020c92 <__swsetup_r+0x5a>
 8020c6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020c6e:	b141      	cbz	r1, 8020c82 <__swsetup_r+0x4a>
 8020c70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020c74:	4299      	cmp	r1, r3
 8020c76:	d002      	beq.n	8020c7e <__swsetup_r+0x46>
 8020c78:	4628      	mov	r0, r5
 8020c7a:	f7fe f88d 	bl	801ed98 <_free_r>
 8020c7e:	2300      	movs	r3, #0
 8020c80:	6363      	str	r3, [r4, #52]	@ 0x34
 8020c82:	89a3      	ldrh	r3, [r4, #12]
 8020c84:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8020c88:	81a3      	strh	r3, [r4, #12]
 8020c8a:	2300      	movs	r3, #0
 8020c8c:	6063      	str	r3, [r4, #4]
 8020c8e:	6923      	ldr	r3, [r4, #16]
 8020c90:	6023      	str	r3, [r4, #0]
 8020c92:	89a3      	ldrh	r3, [r4, #12]
 8020c94:	f043 0308 	orr.w	r3, r3, #8
 8020c98:	81a3      	strh	r3, [r4, #12]
 8020c9a:	6923      	ldr	r3, [r4, #16]
 8020c9c:	b94b      	cbnz	r3, 8020cb2 <__swsetup_r+0x7a>
 8020c9e:	89a3      	ldrh	r3, [r4, #12]
 8020ca0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8020ca4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020ca8:	d003      	beq.n	8020cb2 <__swsetup_r+0x7a>
 8020caa:	4621      	mov	r1, r4
 8020cac:	4628      	mov	r0, r5
 8020cae:	f000 fbf9 	bl	80214a4 <__smakebuf_r>
 8020cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020cb6:	f013 0201 	ands.w	r2, r3, #1
 8020cba:	d00a      	beq.n	8020cd2 <__swsetup_r+0x9a>
 8020cbc:	2200      	movs	r2, #0
 8020cbe:	60a2      	str	r2, [r4, #8]
 8020cc0:	6962      	ldr	r2, [r4, #20]
 8020cc2:	4252      	negs	r2, r2
 8020cc4:	61a2      	str	r2, [r4, #24]
 8020cc6:	6922      	ldr	r2, [r4, #16]
 8020cc8:	b942      	cbnz	r2, 8020cdc <__swsetup_r+0xa4>
 8020cca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8020cce:	d1c5      	bne.n	8020c5c <__swsetup_r+0x24>
 8020cd0:	bd38      	pop	{r3, r4, r5, pc}
 8020cd2:	0799      	lsls	r1, r3, #30
 8020cd4:	bf58      	it	pl
 8020cd6:	6962      	ldrpl	r2, [r4, #20]
 8020cd8:	60a2      	str	r2, [r4, #8]
 8020cda:	e7f4      	b.n	8020cc6 <__swsetup_r+0x8e>
 8020cdc:	2000      	movs	r0, #0
 8020cde:	e7f7      	b.n	8020cd0 <__swsetup_r+0x98>
 8020ce0:	20000040 	.word	0x20000040

08020ce4 <_sbrk_r>:
 8020ce4:	b538      	push	{r3, r4, r5, lr}
 8020ce6:	4d06      	ldr	r5, [pc, #24]	@ (8020d00 <_sbrk_r+0x1c>)
 8020ce8:	2300      	movs	r3, #0
 8020cea:	4604      	mov	r4, r0
 8020cec:	4608      	mov	r0, r1
 8020cee:	602b      	str	r3, [r5, #0]
 8020cf0:	f7e0 fe80 	bl	80019f4 <_sbrk>
 8020cf4:	1c43      	adds	r3, r0, #1
 8020cf6:	d102      	bne.n	8020cfe <_sbrk_r+0x1a>
 8020cf8:	682b      	ldr	r3, [r5, #0]
 8020cfa:	b103      	cbz	r3, 8020cfe <_sbrk_r+0x1a>
 8020cfc:	6023      	str	r3, [r4, #0]
 8020cfe:	bd38      	pop	{r3, r4, r5, pc}
 8020d00:	2000ef0c 	.word	0x2000ef0c
 8020d04:	00000000 	.word	0x00000000

08020d08 <nan>:
 8020d08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8020d10 <nan+0x8>
 8020d0c:	4770      	bx	lr
 8020d0e:	bf00      	nop
 8020d10:	00000000 	.word	0x00000000
 8020d14:	7ff80000 	.word	0x7ff80000

08020d18 <abort>:
 8020d18:	b508      	push	{r3, lr}
 8020d1a:	2006      	movs	r0, #6
 8020d1c:	f000 fc26 	bl	802156c <raise>
 8020d20:	2001      	movs	r0, #1
 8020d22:	f7e0 fdef 	bl	8001904 <_exit>

08020d26 <_calloc_r>:
 8020d26:	b570      	push	{r4, r5, r6, lr}
 8020d28:	fba1 5402 	umull	r5, r4, r1, r2
 8020d2c:	b93c      	cbnz	r4, 8020d3e <_calloc_r+0x18>
 8020d2e:	4629      	mov	r1, r5
 8020d30:	f7fe f8a6 	bl	801ee80 <_malloc_r>
 8020d34:	4606      	mov	r6, r0
 8020d36:	b928      	cbnz	r0, 8020d44 <_calloc_r+0x1e>
 8020d38:	2600      	movs	r6, #0
 8020d3a:	4630      	mov	r0, r6
 8020d3c:	bd70      	pop	{r4, r5, r6, pc}
 8020d3e:	220c      	movs	r2, #12
 8020d40:	6002      	str	r2, [r0, #0]
 8020d42:	e7f9      	b.n	8020d38 <_calloc_r+0x12>
 8020d44:	462a      	mov	r2, r5
 8020d46:	4621      	mov	r1, r4
 8020d48:	f7fd f8bf 	bl	801deca <memset>
 8020d4c:	e7f5      	b.n	8020d3a <_calloc_r+0x14>

08020d4e <rshift>:
 8020d4e:	6903      	ldr	r3, [r0, #16]
 8020d50:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8020d54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020d58:	ea4f 1261 	mov.w	r2, r1, asr #5
 8020d5c:	f100 0414 	add.w	r4, r0, #20
 8020d60:	dd45      	ble.n	8020dee <rshift+0xa0>
 8020d62:	f011 011f 	ands.w	r1, r1, #31
 8020d66:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8020d6a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8020d6e:	d10c      	bne.n	8020d8a <rshift+0x3c>
 8020d70:	f100 0710 	add.w	r7, r0, #16
 8020d74:	4629      	mov	r1, r5
 8020d76:	42b1      	cmp	r1, r6
 8020d78:	d334      	bcc.n	8020de4 <rshift+0x96>
 8020d7a:	1a9b      	subs	r3, r3, r2
 8020d7c:	009b      	lsls	r3, r3, #2
 8020d7e:	1eea      	subs	r2, r5, #3
 8020d80:	4296      	cmp	r6, r2
 8020d82:	bf38      	it	cc
 8020d84:	2300      	movcc	r3, #0
 8020d86:	4423      	add	r3, r4
 8020d88:	e015      	b.n	8020db6 <rshift+0x68>
 8020d8a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8020d8e:	f1c1 0820 	rsb	r8, r1, #32
 8020d92:	40cf      	lsrs	r7, r1
 8020d94:	f105 0e04 	add.w	lr, r5, #4
 8020d98:	46a1      	mov	r9, r4
 8020d9a:	4576      	cmp	r6, lr
 8020d9c:	46f4      	mov	ip, lr
 8020d9e:	d815      	bhi.n	8020dcc <rshift+0x7e>
 8020da0:	1a9a      	subs	r2, r3, r2
 8020da2:	0092      	lsls	r2, r2, #2
 8020da4:	3a04      	subs	r2, #4
 8020da6:	3501      	adds	r5, #1
 8020da8:	42ae      	cmp	r6, r5
 8020daa:	bf38      	it	cc
 8020dac:	2200      	movcc	r2, #0
 8020dae:	18a3      	adds	r3, r4, r2
 8020db0:	50a7      	str	r7, [r4, r2]
 8020db2:	b107      	cbz	r7, 8020db6 <rshift+0x68>
 8020db4:	3304      	adds	r3, #4
 8020db6:	1b1a      	subs	r2, r3, r4
 8020db8:	42a3      	cmp	r3, r4
 8020dba:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8020dbe:	bf08      	it	eq
 8020dc0:	2300      	moveq	r3, #0
 8020dc2:	6102      	str	r2, [r0, #16]
 8020dc4:	bf08      	it	eq
 8020dc6:	6143      	streq	r3, [r0, #20]
 8020dc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8020dcc:	f8dc c000 	ldr.w	ip, [ip]
 8020dd0:	fa0c fc08 	lsl.w	ip, ip, r8
 8020dd4:	ea4c 0707 	orr.w	r7, ip, r7
 8020dd8:	f849 7b04 	str.w	r7, [r9], #4
 8020ddc:	f85e 7b04 	ldr.w	r7, [lr], #4
 8020de0:	40cf      	lsrs	r7, r1
 8020de2:	e7da      	b.n	8020d9a <rshift+0x4c>
 8020de4:	f851 cb04 	ldr.w	ip, [r1], #4
 8020de8:	f847 cf04 	str.w	ip, [r7, #4]!
 8020dec:	e7c3      	b.n	8020d76 <rshift+0x28>
 8020dee:	4623      	mov	r3, r4
 8020df0:	e7e1      	b.n	8020db6 <rshift+0x68>

08020df2 <__hexdig_fun>:
 8020df2:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8020df6:	2b09      	cmp	r3, #9
 8020df8:	d802      	bhi.n	8020e00 <__hexdig_fun+0xe>
 8020dfa:	3820      	subs	r0, #32
 8020dfc:	b2c0      	uxtb	r0, r0
 8020dfe:	4770      	bx	lr
 8020e00:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8020e04:	2b05      	cmp	r3, #5
 8020e06:	d801      	bhi.n	8020e0c <__hexdig_fun+0x1a>
 8020e08:	3847      	subs	r0, #71	@ 0x47
 8020e0a:	e7f7      	b.n	8020dfc <__hexdig_fun+0xa>
 8020e0c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8020e10:	2b05      	cmp	r3, #5
 8020e12:	d801      	bhi.n	8020e18 <__hexdig_fun+0x26>
 8020e14:	3827      	subs	r0, #39	@ 0x27
 8020e16:	e7f1      	b.n	8020dfc <__hexdig_fun+0xa>
 8020e18:	2000      	movs	r0, #0
 8020e1a:	4770      	bx	lr

08020e1c <__gethex>:
 8020e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020e20:	b085      	sub	sp, #20
 8020e22:	468a      	mov	sl, r1
 8020e24:	9302      	str	r3, [sp, #8]
 8020e26:	680b      	ldr	r3, [r1, #0]
 8020e28:	9001      	str	r0, [sp, #4]
 8020e2a:	4690      	mov	r8, r2
 8020e2c:	1c9c      	adds	r4, r3, #2
 8020e2e:	46a1      	mov	r9, r4
 8020e30:	f814 0b01 	ldrb.w	r0, [r4], #1
 8020e34:	2830      	cmp	r0, #48	@ 0x30
 8020e36:	d0fa      	beq.n	8020e2e <__gethex+0x12>
 8020e38:	eba9 0303 	sub.w	r3, r9, r3
 8020e3c:	f1a3 0b02 	sub.w	fp, r3, #2
 8020e40:	f7ff ffd7 	bl	8020df2 <__hexdig_fun>
 8020e44:	4605      	mov	r5, r0
 8020e46:	2800      	cmp	r0, #0
 8020e48:	d168      	bne.n	8020f1c <__gethex+0x100>
 8020e4a:	49a0      	ldr	r1, [pc, #640]	@ (80210cc <__gethex+0x2b0>)
 8020e4c:	2201      	movs	r2, #1
 8020e4e:	4648      	mov	r0, r9
 8020e50:	f7fd f843 	bl	801deda <strncmp>
 8020e54:	4607      	mov	r7, r0
 8020e56:	2800      	cmp	r0, #0
 8020e58:	d167      	bne.n	8020f2a <__gethex+0x10e>
 8020e5a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8020e5e:	4626      	mov	r6, r4
 8020e60:	f7ff ffc7 	bl	8020df2 <__hexdig_fun>
 8020e64:	2800      	cmp	r0, #0
 8020e66:	d062      	beq.n	8020f2e <__gethex+0x112>
 8020e68:	4623      	mov	r3, r4
 8020e6a:	7818      	ldrb	r0, [r3, #0]
 8020e6c:	2830      	cmp	r0, #48	@ 0x30
 8020e6e:	4699      	mov	r9, r3
 8020e70:	f103 0301 	add.w	r3, r3, #1
 8020e74:	d0f9      	beq.n	8020e6a <__gethex+0x4e>
 8020e76:	f7ff ffbc 	bl	8020df2 <__hexdig_fun>
 8020e7a:	fab0 f580 	clz	r5, r0
 8020e7e:	096d      	lsrs	r5, r5, #5
 8020e80:	f04f 0b01 	mov.w	fp, #1
 8020e84:	464a      	mov	r2, r9
 8020e86:	4616      	mov	r6, r2
 8020e88:	3201      	adds	r2, #1
 8020e8a:	7830      	ldrb	r0, [r6, #0]
 8020e8c:	f7ff ffb1 	bl	8020df2 <__hexdig_fun>
 8020e90:	2800      	cmp	r0, #0
 8020e92:	d1f8      	bne.n	8020e86 <__gethex+0x6a>
 8020e94:	498d      	ldr	r1, [pc, #564]	@ (80210cc <__gethex+0x2b0>)
 8020e96:	2201      	movs	r2, #1
 8020e98:	4630      	mov	r0, r6
 8020e9a:	f7fd f81e 	bl	801deda <strncmp>
 8020e9e:	2800      	cmp	r0, #0
 8020ea0:	d13f      	bne.n	8020f22 <__gethex+0x106>
 8020ea2:	b944      	cbnz	r4, 8020eb6 <__gethex+0x9a>
 8020ea4:	1c74      	adds	r4, r6, #1
 8020ea6:	4622      	mov	r2, r4
 8020ea8:	4616      	mov	r6, r2
 8020eaa:	3201      	adds	r2, #1
 8020eac:	7830      	ldrb	r0, [r6, #0]
 8020eae:	f7ff ffa0 	bl	8020df2 <__hexdig_fun>
 8020eb2:	2800      	cmp	r0, #0
 8020eb4:	d1f8      	bne.n	8020ea8 <__gethex+0x8c>
 8020eb6:	1ba4      	subs	r4, r4, r6
 8020eb8:	00a7      	lsls	r7, r4, #2
 8020eba:	7833      	ldrb	r3, [r6, #0]
 8020ebc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8020ec0:	2b50      	cmp	r3, #80	@ 0x50
 8020ec2:	d13e      	bne.n	8020f42 <__gethex+0x126>
 8020ec4:	7873      	ldrb	r3, [r6, #1]
 8020ec6:	2b2b      	cmp	r3, #43	@ 0x2b
 8020ec8:	d033      	beq.n	8020f32 <__gethex+0x116>
 8020eca:	2b2d      	cmp	r3, #45	@ 0x2d
 8020ecc:	d034      	beq.n	8020f38 <__gethex+0x11c>
 8020ece:	1c71      	adds	r1, r6, #1
 8020ed0:	2400      	movs	r4, #0
 8020ed2:	7808      	ldrb	r0, [r1, #0]
 8020ed4:	f7ff ff8d 	bl	8020df2 <__hexdig_fun>
 8020ed8:	1e43      	subs	r3, r0, #1
 8020eda:	b2db      	uxtb	r3, r3
 8020edc:	2b18      	cmp	r3, #24
 8020ede:	d830      	bhi.n	8020f42 <__gethex+0x126>
 8020ee0:	f1a0 0210 	sub.w	r2, r0, #16
 8020ee4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8020ee8:	f7ff ff83 	bl	8020df2 <__hexdig_fun>
 8020eec:	f100 3cff 	add.w	ip, r0, #4294967295
 8020ef0:	fa5f fc8c 	uxtb.w	ip, ip
 8020ef4:	f1bc 0f18 	cmp.w	ip, #24
 8020ef8:	f04f 030a 	mov.w	r3, #10
 8020efc:	d91e      	bls.n	8020f3c <__gethex+0x120>
 8020efe:	b104      	cbz	r4, 8020f02 <__gethex+0xe6>
 8020f00:	4252      	negs	r2, r2
 8020f02:	4417      	add	r7, r2
 8020f04:	f8ca 1000 	str.w	r1, [sl]
 8020f08:	b1ed      	cbz	r5, 8020f46 <__gethex+0x12a>
 8020f0a:	f1bb 0f00 	cmp.w	fp, #0
 8020f0e:	bf0c      	ite	eq
 8020f10:	2506      	moveq	r5, #6
 8020f12:	2500      	movne	r5, #0
 8020f14:	4628      	mov	r0, r5
 8020f16:	b005      	add	sp, #20
 8020f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020f1c:	2500      	movs	r5, #0
 8020f1e:	462c      	mov	r4, r5
 8020f20:	e7b0      	b.n	8020e84 <__gethex+0x68>
 8020f22:	2c00      	cmp	r4, #0
 8020f24:	d1c7      	bne.n	8020eb6 <__gethex+0x9a>
 8020f26:	4627      	mov	r7, r4
 8020f28:	e7c7      	b.n	8020eba <__gethex+0x9e>
 8020f2a:	464e      	mov	r6, r9
 8020f2c:	462f      	mov	r7, r5
 8020f2e:	2501      	movs	r5, #1
 8020f30:	e7c3      	b.n	8020eba <__gethex+0x9e>
 8020f32:	2400      	movs	r4, #0
 8020f34:	1cb1      	adds	r1, r6, #2
 8020f36:	e7cc      	b.n	8020ed2 <__gethex+0xb6>
 8020f38:	2401      	movs	r4, #1
 8020f3a:	e7fb      	b.n	8020f34 <__gethex+0x118>
 8020f3c:	fb03 0002 	mla	r0, r3, r2, r0
 8020f40:	e7ce      	b.n	8020ee0 <__gethex+0xc4>
 8020f42:	4631      	mov	r1, r6
 8020f44:	e7de      	b.n	8020f04 <__gethex+0xe8>
 8020f46:	eba6 0309 	sub.w	r3, r6, r9
 8020f4a:	3b01      	subs	r3, #1
 8020f4c:	4629      	mov	r1, r5
 8020f4e:	2b07      	cmp	r3, #7
 8020f50:	dc0a      	bgt.n	8020f68 <__gethex+0x14c>
 8020f52:	9801      	ldr	r0, [sp, #4]
 8020f54:	f7fe f820 	bl	801ef98 <_Balloc>
 8020f58:	4604      	mov	r4, r0
 8020f5a:	b940      	cbnz	r0, 8020f6e <__gethex+0x152>
 8020f5c:	4b5c      	ldr	r3, [pc, #368]	@ (80210d0 <__gethex+0x2b4>)
 8020f5e:	4602      	mov	r2, r0
 8020f60:	21e4      	movs	r1, #228	@ 0xe4
 8020f62:	485c      	ldr	r0, [pc, #368]	@ (80210d4 <__gethex+0x2b8>)
 8020f64:	f7fd f8ae 	bl	801e0c4 <__assert_func>
 8020f68:	3101      	adds	r1, #1
 8020f6a:	105b      	asrs	r3, r3, #1
 8020f6c:	e7ef      	b.n	8020f4e <__gethex+0x132>
 8020f6e:	f100 0a14 	add.w	sl, r0, #20
 8020f72:	2300      	movs	r3, #0
 8020f74:	4655      	mov	r5, sl
 8020f76:	469b      	mov	fp, r3
 8020f78:	45b1      	cmp	r9, r6
 8020f7a:	d337      	bcc.n	8020fec <__gethex+0x1d0>
 8020f7c:	f845 bb04 	str.w	fp, [r5], #4
 8020f80:	eba5 050a 	sub.w	r5, r5, sl
 8020f84:	10ad      	asrs	r5, r5, #2
 8020f86:	6125      	str	r5, [r4, #16]
 8020f88:	4658      	mov	r0, fp
 8020f8a:	f7fe f8f7 	bl	801f17c <__hi0bits>
 8020f8e:	016d      	lsls	r5, r5, #5
 8020f90:	f8d8 6000 	ldr.w	r6, [r8]
 8020f94:	1a2d      	subs	r5, r5, r0
 8020f96:	42b5      	cmp	r5, r6
 8020f98:	dd54      	ble.n	8021044 <__gethex+0x228>
 8020f9a:	1bad      	subs	r5, r5, r6
 8020f9c:	4629      	mov	r1, r5
 8020f9e:	4620      	mov	r0, r4
 8020fa0:	f7fe fc8b 	bl	801f8ba <__any_on>
 8020fa4:	4681      	mov	r9, r0
 8020fa6:	b178      	cbz	r0, 8020fc8 <__gethex+0x1ac>
 8020fa8:	1e6b      	subs	r3, r5, #1
 8020faa:	1159      	asrs	r1, r3, #5
 8020fac:	f003 021f 	and.w	r2, r3, #31
 8020fb0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8020fb4:	f04f 0901 	mov.w	r9, #1
 8020fb8:	fa09 f202 	lsl.w	r2, r9, r2
 8020fbc:	420a      	tst	r2, r1
 8020fbe:	d003      	beq.n	8020fc8 <__gethex+0x1ac>
 8020fc0:	454b      	cmp	r3, r9
 8020fc2:	dc36      	bgt.n	8021032 <__gethex+0x216>
 8020fc4:	f04f 0902 	mov.w	r9, #2
 8020fc8:	4629      	mov	r1, r5
 8020fca:	4620      	mov	r0, r4
 8020fcc:	f7ff febf 	bl	8020d4e <rshift>
 8020fd0:	442f      	add	r7, r5
 8020fd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8020fd6:	42bb      	cmp	r3, r7
 8020fd8:	da42      	bge.n	8021060 <__gethex+0x244>
 8020fda:	9801      	ldr	r0, [sp, #4]
 8020fdc:	4621      	mov	r1, r4
 8020fde:	f7fe f81b 	bl	801f018 <_Bfree>
 8020fe2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020fe4:	2300      	movs	r3, #0
 8020fe6:	6013      	str	r3, [r2, #0]
 8020fe8:	25a3      	movs	r5, #163	@ 0xa3
 8020fea:	e793      	b.n	8020f14 <__gethex+0xf8>
 8020fec:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8020ff0:	2a2e      	cmp	r2, #46	@ 0x2e
 8020ff2:	d012      	beq.n	802101a <__gethex+0x1fe>
 8020ff4:	2b20      	cmp	r3, #32
 8020ff6:	d104      	bne.n	8021002 <__gethex+0x1e6>
 8020ff8:	f845 bb04 	str.w	fp, [r5], #4
 8020ffc:	f04f 0b00 	mov.w	fp, #0
 8021000:	465b      	mov	r3, fp
 8021002:	7830      	ldrb	r0, [r6, #0]
 8021004:	9303      	str	r3, [sp, #12]
 8021006:	f7ff fef4 	bl	8020df2 <__hexdig_fun>
 802100a:	9b03      	ldr	r3, [sp, #12]
 802100c:	f000 000f 	and.w	r0, r0, #15
 8021010:	4098      	lsls	r0, r3
 8021012:	ea4b 0b00 	orr.w	fp, fp, r0
 8021016:	3304      	adds	r3, #4
 8021018:	e7ae      	b.n	8020f78 <__gethex+0x15c>
 802101a:	45b1      	cmp	r9, r6
 802101c:	d8ea      	bhi.n	8020ff4 <__gethex+0x1d8>
 802101e:	492b      	ldr	r1, [pc, #172]	@ (80210cc <__gethex+0x2b0>)
 8021020:	9303      	str	r3, [sp, #12]
 8021022:	2201      	movs	r2, #1
 8021024:	4630      	mov	r0, r6
 8021026:	f7fc ff58 	bl	801deda <strncmp>
 802102a:	9b03      	ldr	r3, [sp, #12]
 802102c:	2800      	cmp	r0, #0
 802102e:	d1e1      	bne.n	8020ff4 <__gethex+0x1d8>
 8021030:	e7a2      	b.n	8020f78 <__gethex+0x15c>
 8021032:	1ea9      	subs	r1, r5, #2
 8021034:	4620      	mov	r0, r4
 8021036:	f7fe fc40 	bl	801f8ba <__any_on>
 802103a:	2800      	cmp	r0, #0
 802103c:	d0c2      	beq.n	8020fc4 <__gethex+0x1a8>
 802103e:	f04f 0903 	mov.w	r9, #3
 8021042:	e7c1      	b.n	8020fc8 <__gethex+0x1ac>
 8021044:	da09      	bge.n	802105a <__gethex+0x23e>
 8021046:	1b75      	subs	r5, r6, r5
 8021048:	4621      	mov	r1, r4
 802104a:	9801      	ldr	r0, [sp, #4]
 802104c:	462a      	mov	r2, r5
 802104e:	f7fe f9fb 	bl	801f448 <__lshift>
 8021052:	1b7f      	subs	r7, r7, r5
 8021054:	4604      	mov	r4, r0
 8021056:	f100 0a14 	add.w	sl, r0, #20
 802105a:	f04f 0900 	mov.w	r9, #0
 802105e:	e7b8      	b.n	8020fd2 <__gethex+0x1b6>
 8021060:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8021064:	42bd      	cmp	r5, r7
 8021066:	dd6f      	ble.n	8021148 <__gethex+0x32c>
 8021068:	1bed      	subs	r5, r5, r7
 802106a:	42ae      	cmp	r6, r5
 802106c:	dc34      	bgt.n	80210d8 <__gethex+0x2bc>
 802106e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8021072:	2b02      	cmp	r3, #2
 8021074:	d022      	beq.n	80210bc <__gethex+0x2a0>
 8021076:	2b03      	cmp	r3, #3
 8021078:	d024      	beq.n	80210c4 <__gethex+0x2a8>
 802107a:	2b01      	cmp	r3, #1
 802107c:	d115      	bne.n	80210aa <__gethex+0x28e>
 802107e:	42ae      	cmp	r6, r5
 8021080:	d113      	bne.n	80210aa <__gethex+0x28e>
 8021082:	2e01      	cmp	r6, #1
 8021084:	d10b      	bne.n	802109e <__gethex+0x282>
 8021086:	9a02      	ldr	r2, [sp, #8]
 8021088:	f8d8 3004 	ldr.w	r3, [r8, #4]
 802108c:	6013      	str	r3, [r2, #0]
 802108e:	2301      	movs	r3, #1
 8021090:	6123      	str	r3, [r4, #16]
 8021092:	f8ca 3000 	str.w	r3, [sl]
 8021096:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021098:	2562      	movs	r5, #98	@ 0x62
 802109a:	601c      	str	r4, [r3, #0]
 802109c:	e73a      	b.n	8020f14 <__gethex+0xf8>
 802109e:	1e71      	subs	r1, r6, #1
 80210a0:	4620      	mov	r0, r4
 80210a2:	f7fe fc0a 	bl	801f8ba <__any_on>
 80210a6:	2800      	cmp	r0, #0
 80210a8:	d1ed      	bne.n	8021086 <__gethex+0x26a>
 80210aa:	9801      	ldr	r0, [sp, #4]
 80210ac:	4621      	mov	r1, r4
 80210ae:	f7fd ffb3 	bl	801f018 <_Bfree>
 80210b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80210b4:	2300      	movs	r3, #0
 80210b6:	6013      	str	r3, [r2, #0]
 80210b8:	2550      	movs	r5, #80	@ 0x50
 80210ba:	e72b      	b.n	8020f14 <__gethex+0xf8>
 80210bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80210be:	2b00      	cmp	r3, #0
 80210c0:	d1f3      	bne.n	80210aa <__gethex+0x28e>
 80210c2:	e7e0      	b.n	8021086 <__gethex+0x26a>
 80210c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80210c6:	2b00      	cmp	r3, #0
 80210c8:	d1dd      	bne.n	8021086 <__gethex+0x26a>
 80210ca:	e7ee      	b.n	80210aa <__gethex+0x28e>
 80210cc:	08025b08 	.word	0x08025b08
 80210d0:	080259a0 	.word	0x080259a0
 80210d4:	08025b79 	.word	0x08025b79
 80210d8:	1e6f      	subs	r7, r5, #1
 80210da:	f1b9 0f00 	cmp.w	r9, #0
 80210de:	d130      	bne.n	8021142 <__gethex+0x326>
 80210e0:	b127      	cbz	r7, 80210ec <__gethex+0x2d0>
 80210e2:	4639      	mov	r1, r7
 80210e4:	4620      	mov	r0, r4
 80210e6:	f7fe fbe8 	bl	801f8ba <__any_on>
 80210ea:	4681      	mov	r9, r0
 80210ec:	117a      	asrs	r2, r7, #5
 80210ee:	2301      	movs	r3, #1
 80210f0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80210f4:	f007 071f 	and.w	r7, r7, #31
 80210f8:	40bb      	lsls	r3, r7
 80210fa:	4213      	tst	r3, r2
 80210fc:	4629      	mov	r1, r5
 80210fe:	4620      	mov	r0, r4
 8021100:	bf18      	it	ne
 8021102:	f049 0902 	orrne.w	r9, r9, #2
 8021106:	f7ff fe22 	bl	8020d4e <rshift>
 802110a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 802110e:	1b76      	subs	r6, r6, r5
 8021110:	2502      	movs	r5, #2
 8021112:	f1b9 0f00 	cmp.w	r9, #0
 8021116:	d047      	beq.n	80211a8 <__gethex+0x38c>
 8021118:	f8d8 300c 	ldr.w	r3, [r8, #12]
 802111c:	2b02      	cmp	r3, #2
 802111e:	d015      	beq.n	802114c <__gethex+0x330>
 8021120:	2b03      	cmp	r3, #3
 8021122:	d017      	beq.n	8021154 <__gethex+0x338>
 8021124:	2b01      	cmp	r3, #1
 8021126:	d109      	bne.n	802113c <__gethex+0x320>
 8021128:	f019 0f02 	tst.w	r9, #2
 802112c:	d006      	beq.n	802113c <__gethex+0x320>
 802112e:	f8da 3000 	ldr.w	r3, [sl]
 8021132:	ea49 0903 	orr.w	r9, r9, r3
 8021136:	f019 0f01 	tst.w	r9, #1
 802113a:	d10e      	bne.n	802115a <__gethex+0x33e>
 802113c:	f045 0510 	orr.w	r5, r5, #16
 8021140:	e032      	b.n	80211a8 <__gethex+0x38c>
 8021142:	f04f 0901 	mov.w	r9, #1
 8021146:	e7d1      	b.n	80210ec <__gethex+0x2d0>
 8021148:	2501      	movs	r5, #1
 802114a:	e7e2      	b.n	8021112 <__gethex+0x2f6>
 802114c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802114e:	f1c3 0301 	rsb	r3, r3, #1
 8021152:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021156:	2b00      	cmp	r3, #0
 8021158:	d0f0      	beq.n	802113c <__gethex+0x320>
 802115a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 802115e:	f104 0314 	add.w	r3, r4, #20
 8021162:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8021166:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 802116a:	f04f 0c00 	mov.w	ip, #0
 802116e:	4618      	mov	r0, r3
 8021170:	f853 2b04 	ldr.w	r2, [r3], #4
 8021174:	f1b2 3fff 	cmp.w	r2, #4294967295
 8021178:	d01b      	beq.n	80211b2 <__gethex+0x396>
 802117a:	3201      	adds	r2, #1
 802117c:	6002      	str	r2, [r0, #0]
 802117e:	2d02      	cmp	r5, #2
 8021180:	f104 0314 	add.w	r3, r4, #20
 8021184:	d13c      	bne.n	8021200 <__gethex+0x3e4>
 8021186:	f8d8 2000 	ldr.w	r2, [r8]
 802118a:	3a01      	subs	r2, #1
 802118c:	42b2      	cmp	r2, r6
 802118e:	d109      	bne.n	80211a4 <__gethex+0x388>
 8021190:	1171      	asrs	r1, r6, #5
 8021192:	2201      	movs	r2, #1
 8021194:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021198:	f006 061f 	and.w	r6, r6, #31
 802119c:	fa02 f606 	lsl.w	r6, r2, r6
 80211a0:	421e      	tst	r6, r3
 80211a2:	d13a      	bne.n	802121a <__gethex+0x3fe>
 80211a4:	f045 0520 	orr.w	r5, r5, #32
 80211a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80211aa:	601c      	str	r4, [r3, #0]
 80211ac:	9b02      	ldr	r3, [sp, #8]
 80211ae:	601f      	str	r7, [r3, #0]
 80211b0:	e6b0      	b.n	8020f14 <__gethex+0xf8>
 80211b2:	4299      	cmp	r1, r3
 80211b4:	f843 cc04 	str.w	ip, [r3, #-4]
 80211b8:	d8d9      	bhi.n	802116e <__gethex+0x352>
 80211ba:	68a3      	ldr	r3, [r4, #8]
 80211bc:	459b      	cmp	fp, r3
 80211be:	db17      	blt.n	80211f0 <__gethex+0x3d4>
 80211c0:	6861      	ldr	r1, [r4, #4]
 80211c2:	9801      	ldr	r0, [sp, #4]
 80211c4:	3101      	adds	r1, #1
 80211c6:	f7fd fee7 	bl	801ef98 <_Balloc>
 80211ca:	4681      	mov	r9, r0
 80211cc:	b918      	cbnz	r0, 80211d6 <__gethex+0x3ba>
 80211ce:	4b1a      	ldr	r3, [pc, #104]	@ (8021238 <__gethex+0x41c>)
 80211d0:	4602      	mov	r2, r0
 80211d2:	2184      	movs	r1, #132	@ 0x84
 80211d4:	e6c5      	b.n	8020f62 <__gethex+0x146>
 80211d6:	6922      	ldr	r2, [r4, #16]
 80211d8:	3202      	adds	r2, #2
 80211da:	f104 010c 	add.w	r1, r4, #12
 80211de:	0092      	lsls	r2, r2, #2
 80211e0:	300c      	adds	r0, #12
 80211e2:	f7fc ff5a 	bl	801e09a <memcpy>
 80211e6:	4621      	mov	r1, r4
 80211e8:	9801      	ldr	r0, [sp, #4]
 80211ea:	f7fd ff15 	bl	801f018 <_Bfree>
 80211ee:	464c      	mov	r4, r9
 80211f0:	6923      	ldr	r3, [r4, #16]
 80211f2:	1c5a      	adds	r2, r3, #1
 80211f4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80211f8:	6122      	str	r2, [r4, #16]
 80211fa:	2201      	movs	r2, #1
 80211fc:	615a      	str	r2, [r3, #20]
 80211fe:	e7be      	b.n	802117e <__gethex+0x362>
 8021200:	6922      	ldr	r2, [r4, #16]
 8021202:	455a      	cmp	r2, fp
 8021204:	dd0b      	ble.n	802121e <__gethex+0x402>
 8021206:	2101      	movs	r1, #1
 8021208:	4620      	mov	r0, r4
 802120a:	f7ff fda0 	bl	8020d4e <rshift>
 802120e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021212:	3701      	adds	r7, #1
 8021214:	42bb      	cmp	r3, r7
 8021216:	f6ff aee0 	blt.w	8020fda <__gethex+0x1be>
 802121a:	2501      	movs	r5, #1
 802121c:	e7c2      	b.n	80211a4 <__gethex+0x388>
 802121e:	f016 061f 	ands.w	r6, r6, #31
 8021222:	d0fa      	beq.n	802121a <__gethex+0x3fe>
 8021224:	4453      	add	r3, sl
 8021226:	f1c6 0620 	rsb	r6, r6, #32
 802122a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 802122e:	f7fd ffa5 	bl	801f17c <__hi0bits>
 8021232:	42b0      	cmp	r0, r6
 8021234:	dbe7      	blt.n	8021206 <__gethex+0x3ea>
 8021236:	e7f0      	b.n	802121a <__gethex+0x3fe>
 8021238:	080259a0 	.word	0x080259a0

0802123c <L_shift>:
 802123c:	f1c2 0208 	rsb	r2, r2, #8
 8021240:	0092      	lsls	r2, r2, #2
 8021242:	b570      	push	{r4, r5, r6, lr}
 8021244:	f1c2 0620 	rsb	r6, r2, #32
 8021248:	6843      	ldr	r3, [r0, #4]
 802124a:	6804      	ldr	r4, [r0, #0]
 802124c:	fa03 f506 	lsl.w	r5, r3, r6
 8021250:	432c      	orrs	r4, r5
 8021252:	40d3      	lsrs	r3, r2
 8021254:	6004      	str	r4, [r0, #0]
 8021256:	f840 3f04 	str.w	r3, [r0, #4]!
 802125a:	4288      	cmp	r0, r1
 802125c:	d3f4      	bcc.n	8021248 <L_shift+0xc>
 802125e:	bd70      	pop	{r4, r5, r6, pc}

08021260 <__match>:
 8021260:	b530      	push	{r4, r5, lr}
 8021262:	6803      	ldr	r3, [r0, #0]
 8021264:	3301      	adds	r3, #1
 8021266:	f811 4b01 	ldrb.w	r4, [r1], #1
 802126a:	b914      	cbnz	r4, 8021272 <__match+0x12>
 802126c:	6003      	str	r3, [r0, #0]
 802126e:	2001      	movs	r0, #1
 8021270:	bd30      	pop	{r4, r5, pc}
 8021272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021276:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 802127a:	2d19      	cmp	r5, #25
 802127c:	bf98      	it	ls
 802127e:	3220      	addls	r2, #32
 8021280:	42a2      	cmp	r2, r4
 8021282:	d0f0      	beq.n	8021266 <__match+0x6>
 8021284:	2000      	movs	r0, #0
 8021286:	e7f3      	b.n	8021270 <__match+0x10>

08021288 <__hexnan>:
 8021288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802128c:	680b      	ldr	r3, [r1, #0]
 802128e:	6801      	ldr	r1, [r0, #0]
 8021290:	115e      	asrs	r6, r3, #5
 8021292:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8021296:	f013 031f 	ands.w	r3, r3, #31
 802129a:	b087      	sub	sp, #28
 802129c:	bf18      	it	ne
 802129e:	3604      	addne	r6, #4
 80212a0:	2500      	movs	r5, #0
 80212a2:	1f37      	subs	r7, r6, #4
 80212a4:	4682      	mov	sl, r0
 80212a6:	4690      	mov	r8, r2
 80212a8:	9301      	str	r3, [sp, #4]
 80212aa:	f846 5c04 	str.w	r5, [r6, #-4]
 80212ae:	46b9      	mov	r9, r7
 80212b0:	463c      	mov	r4, r7
 80212b2:	9502      	str	r5, [sp, #8]
 80212b4:	46ab      	mov	fp, r5
 80212b6:	784a      	ldrb	r2, [r1, #1]
 80212b8:	1c4b      	adds	r3, r1, #1
 80212ba:	9303      	str	r3, [sp, #12]
 80212bc:	b342      	cbz	r2, 8021310 <__hexnan+0x88>
 80212be:	4610      	mov	r0, r2
 80212c0:	9105      	str	r1, [sp, #20]
 80212c2:	9204      	str	r2, [sp, #16]
 80212c4:	f7ff fd95 	bl	8020df2 <__hexdig_fun>
 80212c8:	2800      	cmp	r0, #0
 80212ca:	d151      	bne.n	8021370 <__hexnan+0xe8>
 80212cc:	9a04      	ldr	r2, [sp, #16]
 80212ce:	9905      	ldr	r1, [sp, #20]
 80212d0:	2a20      	cmp	r2, #32
 80212d2:	d818      	bhi.n	8021306 <__hexnan+0x7e>
 80212d4:	9b02      	ldr	r3, [sp, #8]
 80212d6:	459b      	cmp	fp, r3
 80212d8:	dd13      	ble.n	8021302 <__hexnan+0x7a>
 80212da:	454c      	cmp	r4, r9
 80212dc:	d206      	bcs.n	80212ec <__hexnan+0x64>
 80212de:	2d07      	cmp	r5, #7
 80212e0:	dc04      	bgt.n	80212ec <__hexnan+0x64>
 80212e2:	462a      	mov	r2, r5
 80212e4:	4649      	mov	r1, r9
 80212e6:	4620      	mov	r0, r4
 80212e8:	f7ff ffa8 	bl	802123c <L_shift>
 80212ec:	4544      	cmp	r4, r8
 80212ee:	d952      	bls.n	8021396 <__hexnan+0x10e>
 80212f0:	2300      	movs	r3, #0
 80212f2:	f1a4 0904 	sub.w	r9, r4, #4
 80212f6:	f844 3c04 	str.w	r3, [r4, #-4]
 80212fa:	f8cd b008 	str.w	fp, [sp, #8]
 80212fe:	464c      	mov	r4, r9
 8021300:	461d      	mov	r5, r3
 8021302:	9903      	ldr	r1, [sp, #12]
 8021304:	e7d7      	b.n	80212b6 <__hexnan+0x2e>
 8021306:	2a29      	cmp	r2, #41	@ 0x29
 8021308:	d157      	bne.n	80213ba <__hexnan+0x132>
 802130a:	3102      	adds	r1, #2
 802130c:	f8ca 1000 	str.w	r1, [sl]
 8021310:	f1bb 0f00 	cmp.w	fp, #0
 8021314:	d051      	beq.n	80213ba <__hexnan+0x132>
 8021316:	454c      	cmp	r4, r9
 8021318:	d206      	bcs.n	8021328 <__hexnan+0xa0>
 802131a:	2d07      	cmp	r5, #7
 802131c:	dc04      	bgt.n	8021328 <__hexnan+0xa0>
 802131e:	462a      	mov	r2, r5
 8021320:	4649      	mov	r1, r9
 8021322:	4620      	mov	r0, r4
 8021324:	f7ff ff8a 	bl	802123c <L_shift>
 8021328:	4544      	cmp	r4, r8
 802132a:	d936      	bls.n	802139a <__hexnan+0x112>
 802132c:	f1a8 0204 	sub.w	r2, r8, #4
 8021330:	4623      	mov	r3, r4
 8021332:	f853 1b04 	ldr.w	r1, [r3], #4
 8021336:	f842 1f04 	str.w	r1, [r2, #4]!
 802133a:	429f      	cmp	r7, r3
 802133c:	d2f9      	bcs.n	8021332 <__hexnan+0xaa>
 802133e:	1b3b      	subs	r3, r7, r4
 8021340:	f023 0303 	bic.w	r3, r3, #3
 8021344:	3304      	adds	r3, #4
 8021346:	3401      	adds	r4, #1
 8021348:	3e03      	subs	r6, #3
 802134a:	42b4      	cmp	r4, r6
 802134c:	bf88      	it	hi
 802134e:	2304      	movhi	r3, #4
 8021350:	4443      	add	r3, r8
 8021352:	2200      	movs	r2, #0
 8021354:	f843 2b04 	str.w	r2, [r3], #4
 8021358:	429f      	cmp	r7, r3
 802135a:	d2fb      	bcs.n	8021354 <__hexnan+0xcc>
 802135c:	683b      	ldr	r3, [r7, #0]
 802135e:	b91b      	cbnz	r3, 8021368 <__hexnan+0xe0>
 8021360:	4547      	cmp	r7, r8
 8021362:	d128      	bne.n	80213b6 <__hexnan+0x12e>
 8021364:	2301      	movs	r3, #1
 8021366:	603b      	str	r3, [r7, #0]
 8021368:	2005      	movs	r0, #5
 802136a:	b007      	add	sp, #28
 802136c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021370:	3501      	adds	r5, #1
 8021372:	2d08      	cmp	r5, #8
 8021374:	f10b 0b01 	add.w	fp, fp, #1
 8021378:	dd06      	ble.n	8021388 <__hexnan+0x100>
 802137a:	4544      	cmp	r4, r8
 802137c:	d9c1      	bls.n	8021302 <__hexnan+0x7a>
 802137e:	2300      	movs	r3, #0
 8021380:	f844 3c04 	str.w	r3, [r4, #-4]
 8021384:	2501      	movs	r5, #1
 8021386:	3c04      	subs	r4, #4
 8021388:	6822      	ldr	r2, [r4, #0]
 802138a:	f000 000f 	and.w	r0, r0, #15
 802138e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8021392:	6020      	str	r0, [r4, #0]
 8021394:	e7b5      	b.n	8021302 <__hexnan+0x7a>
 8021396:	2508      	movs	r5, #8
 8021398:	e7b3      	b.n	8021302 <__hexnan+0x7a>
 802139a:	9b01      	ldr	r3, [sp, #4]
 802139c:	2b00      	cmp	r3, #0
 802139e:	d0dd      	beq.n	802135c <__hexnan+0xd4>
 80213a0:	f1c3 0320 	rsb	r3, r3, #32
 80213a4:	f04f 32ff 	mov.w	r2, #4294967295
 80213a8:	40da      	lsrs	r2, r3
 80213aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80213ae:	4013      	ands	r3, r2
 80213b0:	f846 3c04 	str.w	r3, [r6, #-4]
 80213b4:	e7d2      	b.n	802135c <__hexnan+0xd4>
 80213b6:	3f04      	subs	r7, #4
 80213b8:	e7d0      	b.n	802135c <__hexnan+0xd4>
 80213ba:	2004      	movs	r0, #4
 80213bc:	e7d5      	b.n	802136a <__hexnan+0xe2>

080213be <__ascii_mbtowc>:
 80213be:	b082      	sub	sp, #8
 80213c0:	b901      	cbnz	r1, 80213c4 <__ascii_mbtowc+0x6>
 80213c2:	a901      	add	r1, sp, #4
 80213c4:	b142      	cbz	r2, 80213d8 <__ascii_mbtowc+0x1a>
 80213c6:	b14b      	cbz	r3, 80213dc <__ascii_mbtowc+0x1e>
 80213c8:	7813      	ldrb	r3, [r2, #0]
 80213ca:	600b      	str	r3, [r1, #0]
 80213cc:	7812      	ldrb	r2, [r2, #0]
 80213ce:	1e10      	subs	r0, r2, #0
 80213d0:	bf18      	it	ne
 80213d2:	2001      	movne	r0, #1
 80213d4:	b002      	add	sp, #8
 80213d6:	4770      	bx	lr
 80213d8:	4610      	mov	r0, r2
 80213da:	e7fb      	b.n	80213d4 <__ascii_mbtowc+0x16>
 80213dc:	f06f 0001 	mvn.w	r0, #1
 80213e0:	e7f8      	b.n	80213d4 <__ascii_mbtowc+0x16>

080213e2 <_realloc_r>:
 80213e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80213e6:	4680      	mov	r8, r0
 80213e8:	4615      	mov	r5, r2
 80213ea:	460c      	mov	r4, r1
 80213ec:	b921      	cbnz	r1, 80213f8 <_realloc_r+0x16>
 80213ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80213f2:	4611      	mov	r1, r2
 80213f4:	f7fd bd44 	b.w	801ee80 <_malloc_r>
 80213f8:	b92a      	cbnz	r2, 8021406 <_realloc_r+0x24>
 80213fa:	f7fd fccd 	bl	801ed98 <_free_r>
 80213fe:	2400      	movs	r4, #0
 8021400:	4620      	mov	r0, r4
 8021402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021406:	f000 f8ef 	bl	80215e8 <_malloc_usable_size_r>
 802140a:	4285      	cmp	r5, r0
 802140c:	4606      	mov	r6, r0
 802140e:	d802      	bhi.n	8021416 <_realloc_r+0x34>
 8021410:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8021414:	d8f4      	bhi.n	8021400 <_realloc_r+0x1e>
 8021416:	4629      	mov	r1, r5
 8021418:	4640      	mov	r0, r8
 802141a:	f7fd fd31 	bl	801ee80 <_malloc_r>
 802141e:	4607      	mov	r7, r0
 8021420:	2800      	cmp	r0, #0
 8021422:	d0ec      	beq.n	80213fe <_realloc_r+0x1c>
 8021424:	42b5      	cmp	r5, r6
 8021426:	462a      	mov	r2, r5
 8021428:	4621      	mov	r1, r4
 802142a:	bf28      	it	cs
 802142c:	4632      	movcs	r2, r6
 802142e:	f7fc fe34 	bl	801e09a <memcpy>
 8021432:	4621      	mov	r1, r4
 8021434:	4640      	mov	r0, r8
 8021436:	f7fd fcaf 	bl	801ed98 <_free_r>
 802143a:	463c      	mov	r4, r7
 802143c:	e7e0      	b.n	8021400 <_realloc_r+0x1e>

0802143e <__ascii_wctomb>:
 802143e:	4603      	mov	r3, r0
 8021440:	4608      	mov	r0, r1
 8021442:	b141      	cbz	r1, 8021456 <__ascii_wctomb+0x18>
 8021444:	2aff      	cmp	r2, #255	@ 0xff
 8021446:	d904      	bls.n	8021452 <__ascii_wctomb+0x14>
 8021448:	228a      	movs	r2, #138	@ 0x8a
 802144a:	601a      	str	r2, [r3, #0]
 802144c:	f04f 30ff 	mov.w	r0, #4294967295
 8021450:	4770      	bx	lr
 8021452:	700a      	strb	r2, [r1, #0]
 8021454:	2001      	movs	r0, #1
 8021456:	4770      	bx	lr

08021458 <__swhatbuf_r>:
 8021458:	b570      	push	{r4, r5, r6, lr}
 802145a:	460c      	mov	r4, r1
 802145c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021460:	2900      	cmp	r1, #0
 8021462:	b096      	sub	sp, #88	@ 0x58
 8021464:	4615      	mov	r5, r2
 8021466:	461e      	mov	r6, r3
 8021468:	da0d      	bge.n	8021486 <__swhatbuf_r+0x2e>
 802146a:	89a3      	ldrh	r3, [r4, #12]
 802146c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021470:	f04f 0100 	mov.w	r1, #0
 8021474:	bf14      	ite	ne
 8021476:	2340      	movne	r3, #64	@ 0x40
 8021478:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 802147c:	2000      	movs	r0, #0
 802147e:	6031      	str	r1, [r6, #0]
 8021480:	602b      	str	r3, [r5, #0]
 8021482:	b016      	add	sp, #88	@ 0x58
 8021484:	bd70      	pop	{r4, r5, r6, pc}
 8021486:	466a      	mov	r2, sp
 8021488:	f000 f878 	bl	802157c <_fstat_r>
 802148c:	2800      	cmp	r0, #0
 802148e:	dbec      	blt.n	802146a <__swhatbuf_r+0x12>
 8021490:	9901      	ldr	r1, [sp, #4]
 8021492:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8021496:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 802149a:	4259      	negs	r1, r3
 802149c:	4159      	adcs	r1, r3
 802149e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80214a2:	e7eb      	b.n	802147c <__swhatbuf_r+0x24>

080214a4 <__smakebuf_r>:
 80214a4:	898b      	ldrh	r3, [r1, #12]
 80214a6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80214a8:	079d      	lsls	r5, r3, #30
 80214aa:	4606      	mov	r6, r0
 80214ac:	460c      	mov	r4, r1
 80214ae:	d507      	bpl.n	80214c0 <__smakebuf_r+0x1c>
 80214b0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80214b4:	6023      	str	r3, [r4, #0]
 80214b6:	6123      	str	r3, [r4, #16]
 80214b8:	2301      	movs	r3, #1
 80214ba:	6163      	str	r3, [r4, #20]
 80214bc:	b003      	add	sp, #12
 80214be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80214c0:	ab01      	add	r3, sp, #4
 80214c2:	466a      	mov	r2, sp
 80214c4:	f7ff ffc8 	bl	8021458 <__swhatbuf_r>
 80214c8:	9f00      	ldr	r7, [sp, #0]
 80214ca:	4605      	mov	r5, r0
 80214cc:	4639      	mov	r1, r7
 80214ce:	4630      	mov	r0, r6
 80214d0:	f7fd fcd6 	bl	801ee80 <_malloc_r>
 80214d4:	b948      	cbnz	r0, 80214ea <__smakebuf_r+0x46>
 80214d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80214da:	059a      	lsls	r2, r3, #22
 80214dc:	d4ee      	bmi.n	80214bc <__smakebuf_r+0x18>
 80214de:	f023 0303 	bic.w	r3, r3, #3
 80214e2:	f043 0302 	orr.w	r3, r3, #2
 80214e6:	81a3      	strh	r3, [r4, #12]
 80214e8:	e7e2      	b.n	80214b0 <__smakebuf_r+0xc>
 80214ea:	89a3      	ldrh	r3, [r4, #12]
 80214ec:	6020      	str	r0, [r4, #0]
 80214ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80214f2:	81a3      	strh	r3, [r4, #12]
 80214f4:	9b01      	ldr	r3, [sp, #4]
 80214f6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80214fa:	b15b      	cbz	r3, 8021514 <__smakebuf_r+0x70>
 80214fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021500:	4630      	mov	r0, r6
 8021502:	f000 f84d 	bl	80215a0 <_isatty_r>
 8021506:	b128      	cbz	r0, 8021514 <__smakebuf_r+0x70>
 8021508:	89a3      	ldrh	r3, [r4, #12]
 802150a:	f023 0303 	bic.w	r3, r3, #3
 802150e:	f043 0301 	orr.w	r3, r3, #1
 8021512:	81a3      	strh	r3, [r4, #12]
 8021514:	89a3      	ldrh	r3, [r4, #12]
 8021516:	431d      	orrs	r5, r3
 8021518:	81a5      	strh	r5, [r4, #12]
 802151a:	e7cf      	b.n	80214bc <__smakebuf_r+0x18>

0802151c <_raise_r>:
 802151c:	291f      	cmp	r1, #31
 802151e:	b538      	push	{r3, r4, r5, lr}
 8021520:	4605      	mov	r5, r0
 8021522:	460c      	mov	r4, r1
 8021524:	d904      	bls.n	8021530 <_raise_r+0x14>
 8021526:	2316      	movs	r3, #22
 8021528:	6003      	str	r3, [r0, #0]
 802152a:	f04f 30ff 	mov.w	r0, #4294967295
 802152e:	bd38      	pop	{r3, r4, r5, pc}
 8021530:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8021532:	b112      	cbz	r2, 802153a <_raise_r+0x1e>
 8021534:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021538:	b94b      	cbnz	r3, 802154e <_raise_r+0x32>
 802153a:	4628      	mov	r0, r5
 802153c:	f000 f852 	bl	80215e4 <_getpid_r>
 8021540:	4622      	mov	r2, r4
 8021542:	4601      	mov	r1, r0
 8021544:	4628      	mov	r0, r5
 8021546:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802154a:	f000 b839 	b.w	80215c0 <_kill_r>
 802154e:	2b01      	cmp	r3, #1
 8021550:	d00a      	beq.n	8021568 <_raise_r+0x4c>
 8021552:	1c59      	adds	r1, r3, #1
 8021554:	d103      	bne.n	802155e <_raise_r+0x42>
 8021556:	2316      	movs	r3, #22
 8021558:	6003      	str	r3, [r0, #0]
 802155a:	2001      	movs	r0, #1
 802155c:	e7e7      	b.n	802152e <_raise_r+0x12>
 802155e:	2100      	movs	r1, #0
 8021560:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8021564:	4620      	mov	r0, r4
 8021566:	4798      	blx	r3
 8021568:	2000      	movs	r0, #0
 802156a:	e7e0      	b.n	802152e <_raise_r+0x12>

0802156c <raise>:
 802156c:	4b02      	ldr	r3, [pc, #8]	@ (8021578 <raise+0xc>)
 802156e:	4601      	mov	r1, r0
 8021570:	6818      	ldr	r0, [r3, #0]
 8021572:	f7ff bfd3 	b.w	802151c <_raise_r>
 8021576:	bf00      	nop
 8021578:	20000040 	.word	0x20000040

0802157c <_fstat_r>:
 802157c:	b538      	push	{r3, r4, r5, lr}
 802157e:	4d07      	ldr	r5, [pc, #28]	@ (802159c <_fstat_r+0x20>)
 8021580:	2300      	movs	r3, #0
 8021582:	4604      	mov	r4, r0
 8021584:	4608      	mov	r0, r1
 8021586:	4611      	mov	r1, r2
 8021588:	602b      	str	r3, [r5, #0]
 802158a:	f7e0 fa0b 	bl	80019a4 <_fstat>
 802158e:	1c43      	adds	r3, r0, #1
 8021590:	d102      	bne.n	8021598 <_fstat_r+0x1c>
 8021592:	682b      	ldr	r3, [r5, #0]
 8021594:	b103      	cbz	r3, 8021598 <_fstat_r+0x1c>
 8021596:	6023      	str	r3, [r4, #0]
 8021598:	bd38      	pop	{r3, r4, r5, pc}
 802159a:	bf00      	nop
 802159c:	2000ef0c 	.word	0x2000ef0c

080215a0 <_isatty_r>:
 80215a0:	b538      	push	{r3, r4, r5, lr}
 80215a2:	4d06      	ldr	r5, [pc, #24]	@ (80215bc <_isatty_r+0x1c>)
 80215a4:	2300      	movs	r3, #0
 80215a6:	4604      	mov	r4, r0
 80215a8:	4608      	mov	r0, r1
 80215aa:	602b      	str	r3, [r5, #0]
 80215ac:	f7e0 fa0a 	bl	80019c4 <_isatty>
 80215b0:	1c43      	adds	r3, r0, #1
 80215b2:	d102      	bne.n	80215ba <_isatty_r+0x1a>
 80215b4:	682b      	ldr	r3, [r5, #0]
 80215b6:	b103      	cbz	r3, 80215ba <_isatty_r+0x1a>
 80215b8:	6023      	str	r3, [r4, #0]
 80215ba:	bd38      	pop	{r3, r4, r5, pc}
 80215bc:	2000ef0c 	.word	0x2000ef0c

080215c0 <_kill_r>:
 80215c0:	b538      	push	{r3, r4, r5, lr}
 80215c2:	4d07      	ldr	r5, [pc, #28]	@ (80215e0 <_kill_r+0x20>)
 80215c4:	2300      	movs	r3, #0
 80215c6:	4604      	mov	r4, r0
 80215c8:	4608      	mov	r0, r1
 80215ca:	4611      	mov	r1, r2
 80215cc:	602b      	str	r3, [r5, #0]
 80215ce:	f7e0 f987 	bl	80018e0 <_kill>
 80215d2:	1c43      	adds	r3, r0, #1
 80215d4:	d102      	bne.n	80215dc <_kill_r+0x1c>
 80215d6:	682b      	ldr	r3, [r5, #0]
 80215d8:	b103      	cbz	r3, 80215dc <_kill_r+0x1c>
 80215da:	6023      	str	r3, [r4, #0]
 80215dc:	bd38      	pop	{r3, r4, r5, pc}
 80215de:	bf00      	nop
 80215e0:	2000ef0c 	.word	0x2000ef0c

080215e4 <_getpid_r>:
 80215e4:	f7e0 b974 	b.w	80018d0 <_getpid>

080215e8 <_malloc_usable_size_r>:
 80215e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80215ec:	1f18      	subs	r0, r3, #4
 80215ee:	2b00      	cmp	r3, #0
 80215f0:	bfbc      	itt	lt
 80215f2:	580b      	ldrlt	r3, [r1, r0]
 80215f4:	18c0      	addlt	r0, r0, r3
 80215f6:	4770      	bx	lr

080215f8 <_init>:
 80215f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80215fa:	bf00      	nop
 80215fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80215fe:	bc08      	pop	{r3}
 8021600:	469e      	mov	lr, r3
 8021602:	4770      	bx	lr

08021604 <_fini>:
 8021604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021606:	bf00      	nop
 8021608:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802160a:	bc08      	pop	{r3}
 802160c:	469e      	mov	lr, r3
 802160e:	4770      	bx	lr
