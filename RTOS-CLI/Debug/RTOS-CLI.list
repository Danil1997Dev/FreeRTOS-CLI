
RTOS-CLI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00021b10  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003ae4  08021ca0  08021ca0  00022ca0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08025784  08025784  00027218  2**0
                  CONTENTS
  4 .ARM          00000008  08025784  08025784  00026784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802578c  0802578c  00027218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802578c  0802578c  0002678c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08025790  08025790  00026790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  08025794  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00027218  2**0
                  CONTENTS
 10 .bss          0001b0e8  20000218  20000218  00027218  2**2
                  ALLOC
 11 ._user_heap_stack 00002000  2001b300  2001b300  00027218  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00027218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003f4d0  00000000  00000000  00027248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a13a  00000000  00000000  00066718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002ef0  00000000  00000000  00070858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000024e3  00000000  00000000  00073748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00039de7  00000000  00000000  00075c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0004a9c7  00000000  00000000  000afa12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00105af5  00000000  00000000  000fa3d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001ffece  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000d5cc  00000000  00000000  001fff14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000049  00000000  00000000  0020d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08021c88 	.word	0x08021c88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08021c88 	.word	0x08021c88

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <FreeRTOS_CLIRegisterCommand>:
/*-----------------------------------------------------------*/

#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    BaseType_t FreeRTOS_CLIRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister )
    {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFAIL;
 8000fec:	2300      	movs	r3, #0
 8000fee:	617b      	str	r3, [r7, #20]
        CLI_Definition_List_Item_t * pxNewListItem;

        /* Check the parameter is not NULL. */
        configASSERT( pxCommandToRegister != NULL );
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d10b      	bne.n	800100e <FreeRTOS_CLIRegisterCommand+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ffa:	f383 8811 	msr	BASEPRI, r3
 8000ffe:	f3bf 8f6f 	isb	sy
 8001002:	f3bf 8f4f 	dsb	sy
 8001006:	60fb      	str	r3, [r7, #12]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001008:	bf00      	nop
 800100a:	bf00      	nop
 800100c:	e7fd      	b.n	800100a <FreeRTOS_CLIRegisterCommand+0x26>

        /* Create a new list item that will reference the command being registered. */
        pxNewListItem = ( CLI_Definition_List_Item_t * ) pvPortMalloc( sizeof( CLI_Definition_List_Item_t ) );
 800100e:	2008      	movs	r0, #8
 8001010:	f00f f8b4 	bl	801017c <pvPortMalloc>
 8001014:	6138      	str	r0, [r7, #16]
        configASSERT( pxNewListItem != NULL );
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d10b      	bne.n	8001034 <FreeRTOS_CLIRegisterCommand+0x50>
	__asm volatile
 800101c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001020:	f383 8811 	msr	BASEPRI, r3
 8001024:	f3bf 8f6f 	isb	sy
 8001028:	f3bf 8f4f 	dsb	sy
 800102c:	60bb      	str	r3, [r7, #8]
}
 800102e:	bf00      	nop
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <FreeRTOS_CLIRegisterCommand+0x4c>

        if( pxNewListItem != NULL )
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d005      	beq.n	8001046 <FreeRTOS_CLIRegisterCommand+0x62>
        {
            prvRegisterCommand( pxCommandToRegister, pxNewListItem );
 800103a:	6939      	ldr	r1, [r7, #16]
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f8e7 	bl	8001210 <prvRegisterCommand>
            xReturn = pdPASS;
 8001042:	2301      	movs	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 8001046:	697b      	ldr	r3, [r7, #20]
    }
 8001048:	4618      	mov	r0, r3
 800104a:	3718      	adds	r7, #24
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <FreeRTOS_CLIProcessCommand>:
/*-----------------------------------------------------------*/

BaseType_t FreeRTOS_CLIProcessCommand( const char * const pcCommandInput,
                                       char * pcWriteBuffer,
                                       size_t xWriteBufferLen )
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn = pdTRUE;
 800105c:	2301      	movs	r3, #1
 800105e:	61fb      	str	r3, [r7, #28]
    size_t xCommandStringLength;

    /* Note:  This function is not re-entrant.  It must not be called from more
     * thank one task. */

    if( pxCommand == NULL )
 8001060:	4b3a      	ldr	r3, [pc, #232]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d141      	bne.n	80010ec <FreeRTOS_CLIProcessCommand+0x9c>
    {
        /* Search for the command string in the list of registered commands. */
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 8001068:	4b38      	ldr	r3, [pc, #224]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800106a:	4a39      	ldr	r2, [pc, #228]	@ (8001150 <FreeRTOS_CLIProcessCommand+0x100>)
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e037      	b.n	80010e0 <FreeRTOS_CLIProcessCommand+0x90>
        {
            pcRegisteredCommandString = pxCommand->pxCommandLineDefinition->pcCommand;
 8001070:	4b36      	ldr	r3, [pc, #216]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	61bb      	str	r3, [r7, #24]
            xCommandStringLength = strlen( pcRegisteredCommandString );
 800107a:	69b8      	ldr	r0, [r7, #24]
 800107c:	f7ff f8f8 	bl	8000270 <strlen>
 8001080:	6178      	str	r0, [r7, #20]

            /* To ensure the string lengths match exactly, so as not to pick up
             * a sub-string of a longer command, check the byte after the expected
             * end of the string is either the end of the string or a space before
             * a parameter. */
            if( strncmp( pcCommandInput, pcRegisteredCommandString, xCommandStringLength ) == 0 )
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	69b9      	ldr	r1, [r7, #24]
 8001086:	68f8      	ldr	r0, [r7, #12]
 8001088:	f01d fc83 	bl	801e992 <strncmp>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d121      	bne.n	80010d6 <FreeRTOS_CLIProcessCommand+0x86>
            {
                if( ( pcCommandInput[ xCommandStringLength ] == ' ' ) || ( pcCommandInput[ xCommandStringLength ] == 0x00 ) )
 8001092:	68fa      	ldr	r2, [r7, #12]
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	4413      	add	r3, r2
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	2b20      	cmp	r3, #32
 800109c:	d005      	beq.n	80010aa <FreeRTOS_CLIProcessCommand+0x5a>
 800109e:	68fa      	ldr	r2, [r7, #12]
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	4413      	add	r3, r2
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d115      	bne.n	80010d6 <FreeRTOS_CLIProcessCommand+0x86>
                {
                    /* The command has been found.  Check it has the expected
                     * number of parameters.  If cExpectedNumberOfParameters is -1,
                     * then there could be a variable number of parameters and no
                     * check is made. */
                    if( pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters >= 0 )
 80010aa:	4b28      	ldr	r3, [pc, #160]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	db18      	blt.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
                    {
                        if( prvGetNumberOfParameters( pcCommandInput ) != pxCommand->pxCommandLineDefinition->cExpectedNumberOfParameters )
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f000 f911 	bl	80012e0 <prvGetNumberOfParameters>
 80010be:	4603      	mov	r3, r0
 80010c0:	461a      	mov	r2, r3
 80010c2:	4b22      	ldr	r3, [pc, #136]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d00c      	beq.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
                        {
                            xReturn = pdFALSE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
                        }
                    }

                    break;
 80010d4:	e009      	b.n	80010ea <FreeRTOS_CLIProcessCommand+0x9a>
        for( pxCommand = &xRegisteredCommands; pxCommand != NULL; pxCommand = pxCommand->pxNext )
 80010d6:	4b1d      	ldr	r3, [pc, #116]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4a1b      	ldr	r2, [pc, #108]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b1a      	ldr	r3, [pc, #104]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1c3      	bne.n	8001070 <FreeRTOS_CLIProcessCommand+0x20>
 80010e8:	e000      	b.n	80010ec <FreeRTOS_CLIProcessCommand+0x9c>
                    break;
 80010ea:	bf00      	nop
                }
            }
        }
    }

    if( ( pxCommand != NULL ) && ( xReturn == pdFALSE ) )
 80010ec:	4b17      	ldr	r3, [pc, #92]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00b      	beq.n	800110c <FreeRTOS_CLIProcessCommand+0xbc>
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d108      	bne.n	800110c <FreeRTOS_CLIProcessCommand+0xbc>
    {
        /* The command was found, but the number of parameters with the command
         * was incorrect. */
        strncpy( pcWriteBuffer, "Incorrect command parameter(s).  Enter \"help\" to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	4915      	ldr	r1, [pc, #84]	@ (8001154 <FreeRTOS_CLIProcessCommand+0x104>)
 80010fe:	68b8      	ldr	r0, [r7, #8]
 8001100:	f01d fc59 	bl	801e9b6 <strncpy>
        pxCommand = NULL;
 8001104:	4b11      	ldr	r3, [pc, #68]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e01a      	b.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
    }
    else if( pxCommand != NULL )
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00f      	beq.n	8001134 <FreeRTOS_CLIProcessCommand+0xe4>
    {
        /* Call the callback function that is registered to this command. */
        xReturn = pxCommand->pxCommandLineDefinition->pxCommandInterpreter( pcWriteBuffer, xWriteBufferLen, pcCommandInput );
 8001114:	4b0d      	ldr	r3, [pc, #52]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	6879      	ldr	r1, [r7, #4]
 8001120:	68b8      	ldr	r0, [r7, #8]
 8001122:	4798      	blx	r3
 8001124:	61f8      	str	r0, [r7, #28]

        /* If xReturn is pdFALSE, then no further strings will be returned
         * after this one, and	pxCommand can be reset to NULL ready to search
         * for the next entered command. */
        if( xReturn == pdFALSE )
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d10a      	bne.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
        {
            pxCommand = NULL;
 800112c:	4b07      	ldr	r3, [pc, #28]	@ (800114c <FreeRTOS_CLIProcessCommand+0xfc>)
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	e006      	b.n	8001142 <FreeRTOS_CLIProcessCommand+0xf2>
        }
    }
    else
    {
        /* pxCommand was NULL, the command was not found. */
        strncpy( pcWriteBuffer, "Command not recognised.  Enter 'help' to view a list of available commands.\r\n\r\n", xWriteBufferLen );
 8001134:	687a      	ldr	r2, [r7, #4]
 8001136:	4908      	ldr	r1, [pc, #32]	@ (8001158 <FreeRTOS_CLIProcessCommand+0x108>)
 8001138:	68b8      	ldr	r0, [r7, #8]
 800113a:	f01d fc3c 	bl	801e9b6 <strncpy>
        xReturn = pdFALSE;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    }

    return xReturn;
 8001142:	69fb      	ldr	r3, [r7, #28]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3720      	adds	r7, #32
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000234 	.word	0x20000234
 8001150:	20000000 	.word	0x20000000
 8001154:	08021cd8 	.word	0x08021cd8
 8001158:	08021d30 	.word	0x08021d30

0800115c <FreeRTOS_CLIGetParameter>:
/*-----------------------------------------------------------*/

const char * FreeRTOS_CLIGetParameter( const char * pcCommandString,
                                       UBaseType_t uxWantedParameter,
                                       BaseType_t * pxParameterStringLength )
{
 800115c:	b480      	push	{r7}
 800115e:	b087      	sub	sp, #28
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
    UBaseType_t uxParametersFound = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
    const char * pcReturn = NULL;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]

    *pxParameterStringLength = 0;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	601a      	str	r2, [r3, #0]

    while( uxParametersFound < uxWantedParameter )
 8001176:	e03b      	b.n	80011f0 <FreeRTOS_CLIGetParameter+0x94>
    {
        /* Index the character pointer past the current word.  If this is the start
         * of the command string then the first word is the command itself. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
        {
            pcCommandString++;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3301      	adds	r3, #1
 800117c:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d007      	beq.n	8001196 <FreeRTOS_CLIGetParameter+0x3a>
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	2b20      	cmp	r3, #32
 800118c:	d1f4      	bne.n	8001178 <FreeRTOS_CLIGetParameter+0x1c>
        }

        /* Find the start of the next string. */
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 800118e:	e002      	b.n	8001196 <FreeRTOS_CLIGetParameter+0x3a>
        {
            pcCommandString++;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3301      	adds	r3, #1
 8001194:	60fb      	str	r3, [r7, #12]
        while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) == ' ' ) )
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <FreeRTOS_CLIGetParameter+0x4a>
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b20      	cmp	r3, #32
 80011a4:	d0f4      	beq.n	8001190 <FreeRTOS_CLIGetParameter+0x34>
        }

        /* Was a string found? */
        if( *pcCommandString != 0x00 )
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	781b      	ldrb	r3, [r3, #0]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d025      	beq.n	80011fa <FreeRTOS_CLIGetParameter+0x9e>
        {
            /* Is this the start of the required parameter? */
            uxParametersFound++;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]

            if( uxParametersFound == uxWantedParameter )
 80011b4:	697a      	ldr	r2, [r7, #20]
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d119      	bne.n	80011f0 <FreeRTOS_CLIGetParameter+0x94>
            {
                /* How long is the parameter? */
                pcReturn = pcCommandString;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	613b      	str	r3, [r7, #16]

                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80011c0:	e007      	b.n	80011d2 <FreeRTOS_CLIGetParameter+0x76>
                {
                    ( *pxParameterStringLength )++;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	1c5a      	adds	r2, r3, #1
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	601a      	str	r2, [r3, #0]
                    pcCommandString++;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	3301      	adds	r3, #1
 80011d0:	60fb      	str	r3, [r7, #12]
                while( ( ( *pcCommandString ) != 0x00 ) && ( ( *pcCommandString ) != ' ' ) )
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d003      	beq.n	80011e2 <FreeRTOS_CLIGetParameter+0x86>
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b20      	cmp	r3, #32
 80011e0:	d1ef      	bne.n	80011c2 <FreeRTOS_CLIGetParameter+0x66>
                }

                if( *pxParameterStringLength == 0 )
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d109      	bne.n	80011fe <FreeRTOS_CLIGetParameter+0xa2>
                {
                    pcReturn = NULL;
 80011ea:	2300      	movs	r3, #0
 80011ec:	613b      	str	r3, [r7, #16]
                }

                break;
 80011ee:	e006      	b.n	80011fe <FreeRTOS_CLIGetParameter+0xa2>
    while( uxParametersFound < uxWantedParameter )
 80011f0:	697a      	ldr	r2, [r7, #20]
 80011f2:	68bb      	ldr	r3, [r7, #8]
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d3c2      	bcc.n	800117e <FreeRTOS_CLIGetParameter+0x22>
 80011f8:	e002      	b.n	8001200 <FreeRTOS_CLIGetParameter+0xa4>
            }
        }
        else
        {
            break;
 80011fa:	bf00      	nop
 80011fc:	e000      	b.n	8001200 <FreeRTOS_CLIGetParameter+0xa4>
                break;
 80011fe:	bf00      	nop
        }
    }

    return pcReturn;
 8001200:	693b      	ldr	r3, [r7, #16]
}
 8001202:	4618      	mov	r0, r3
 8001204:	371c      	adds	r7, #28
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
	...

08001210 <prvRegisterCommand>:
/*-----------------------------------------------------------*/

static void prvRegisterCommand( const CLI_Command_Definition_t * const pxCommandToRegister,
                                CLI_Definition_List_Item_t * pxCliDefinitionListItemBuffer )
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
    static CLI_Definition_List_Item_t * pxLastCommandInList = &xRegisteredCommands;

    /* Check the parameters are not NULL. */
    configASSERT( pxCommandToRegister != NULL );
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d10b      	bne.n	8001238 <prvRegisterCommand+0x28>
	__asm volatile
 8001220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001224:	f383 8811 	msr	BASEPRI, r3
 8001228:	f3bf 8f6f 	isb	sy
 800122c:	f3bf 8f4f 	dsb	sy
 8001230:	60fb      	str	r3, [r7, #12]
}
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <prvRegisterCommand+0x24>
    configASSERT( pxCliDefinitionListItemBuffer != NULL );
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d10b      	bne.n	8001256 <prvRegisterCommand+0x46>
	__asm volatile
 800123e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001242:	f383 8811 	msr	BASEPRI, r3
 8001246:	f3bf 8f6f 	isb	sy
 800124a:	f3bf 8f4f 	dsb	sy
 800124e:	60bb      	str	r3, [r7, #8]
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	e7fd      	b.n	8001252 <prvRegisterCommand+0x42>

    taskENTER_CRITICAL();
 8001256:	f00e fe6f 	bl	800ff38 <vPortEnterCritical>
    {
        /* Reference the command being registered from the newly created
         * list item. */
        pxCliDefinitionListItemBuffer->pxCommandLineDefinition = pxCommandToRegister;
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	601a      	str	r2, [r3, #0]

        /* The new list item will get added to the end of the list, so
         * pxNext has nowhere to point. */
        pxCliDefinitionListItemBuffer->pxNext = NULL;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]

        /* Add the newly created list item to the end of the already existing
         * list. */
        pxLastCommandInList->pxNext = pxCliDefinitionListItemBuffer;
 8001266:	4b06      	ldr	r3, [pc, #24]	@ (8001280 <prvRegisterCommand+0x70>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	605a      	str	r2, [r3, #4]

        /* Set the end of list marker to the new list item. */
        pxLastCommandInList = pxCliDefinitionListItemBuffer;
 800126e:	4a04      	ldr	r2, [pc, #16]	@ (8001280 <prvRegisterCommand+0x70>)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	6013      	str	r3, [r2, #0]
    }
    taskEXIT_CRITICAL();
 8001274:	f00e fe92 	bl	800ff9c <vPortExitCritical>
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20000008 	.word	0x20000008

08001284 <prvHelpCommand>:
/*-----------------------------------------------------------*/

static BaseType_t prvHelpCommand( char * pcWriteBuffer,
                                  size_t xWriteBufferLen,
                                  const char * pcCommandString )
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
    static const CLI_Definition_List_Item_t * pxCommand = NULL;
    BaseType_t xReturn;

    ( void ) pcCommandString;

    if( pxCommand == NULL )
 8001290:	4b11      	ldr	r3, [pc, #68]	@ (80012d8 <prvHelpCommand+0x54>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <prvHelpCommand+0x1a>
    {
        /* Reset the pxCommand pointer back to the start of the list. */
        pxCommand = &xRegisteredCommands;
 8001298:	4b0f      	ldr	r3, [pc, #60]	@ (80012d8 <prvHelpCommand+0x54>)
 800129a:	4a10      	ldr	r2, [pc, #64]	@ (80012dc <prvHelpCommand+0x58>)
 800129c:	601a      	str	r2, [r3, #0]
    }

    /* Return the next command help string, before moving the pointer on to
     * the next command in the list. */
    strncpy( pcWriteBuffer, pxCommand->pxCommandLineDefinition->pcHelpString, xWriteBufferLen );
 800129e:	4b0e      	ldr	r3, [pc, #56]	@ (80012d8 <prvHelpCommand+0x54>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	4619      	mov	r1, r3
 80012aa:	68f8      	ldr	r0, [r7, #12]
 80012ac:	f01d fb83 	bl	801e9b6 <strncpy>
    pxCommand = pxCommand->pxNext;
 80012b0:	4b09      	ldr	r3, [pc, #36]	@ (80012d8 <prvHelpCommand+0x54>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	4a08      	ldr	r2, [pc, #32]	@ (80012d8 <prvHelpCommand+0x54>)
 80012b8:	6013      	str	r3, [r2, #0]

    if( pxCommand == NULL )
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <prvHelpCommand+0x54>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d102      	bne.n	80012c8 <prvHelpCommand+0x44>
    {
        /* There are no more commands in the list, so there will be no more
         *  strings to return after this one and pdFALSE should be returned. */
        xReturn = pdFALSE;
 80012c2:	2300      	movs	r3, #0
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	e001      	b.n	80012cc <prvHelpCommand+0x48>
    }
    else
    {
        xReturn = pdTRUE;
 80012c8:	2301      	movs	r3, #1
 80012ca:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 80012cc:	697b      	ldr	r3, [r7, #20]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000238 	.word	0x20000238
 80012dc:	20000000 	.word	0x20000000

080012e0 <prvGetNumberOfParameters>:
/*-----------------------------------------------------------*/

static int8_t prvGetNumberOfParameters( const char * pcCommandString )
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
    int8_t cParameters = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	73fb      	strb	r3, [r7, #15]
    BaseType_t xLastCharacterWasSpace = pdFALSE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]

    /* Count the number of space delimited words in pcCommandString. */
    while( *pcCommandString != 0x00 )
 80012f0:	e014      	b.n	800131c <prvGetNumberOfParameters+0x3c>
    {
        if( ( *pcCommandString ) == ' ' )
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	2b20      	cmp	r3, #32
 80012f8:	d10b      	bne.n	8001312 <prvGetNumberOfParameters+0x32>
        {
            if( xLastCharacterWasSpace != pdTRUE )
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d00a      	beq.n	8001316 <prvGetNumberOfParameters+0x36>
            {
                cParameters++;
 8001300:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001304:	b2db      	uxtb	r3, r3
 8001306:	3301      	adds	r3, #1
 8001308:	b2db      	uxtb	r3, r3
 800130a:	73fb      	strb	r3, [r7, #15]
                xLastCharacterWasSpace = pdTRUE;
 800130c:	2301      	movs	r3, #1
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	e001      	b.n	8001316 <prvGetNumberOfParameters+0x36>
            }
        }
        else
        {
            xLastCharacterWasSpace = pdFALSE;
 8001312:	2300      	movs	r3, #0
 8001314:	60bb      	str	r3, [r7, #8]
        }

        pcCommandString++;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3301      	adds	r3, #1
 800131a:	607b      	str	r3, [r7, #4]
    while( *pcCommandString != 0x00 )
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d1e6      	bne.n	80012f2 <prvGetNumberOfParameters+0x12>
    }

    /* If the command string ended with spaces, then there will have been too
     * many parameters counted. */
    if( xLastCharacterWasSpace == pdTRUE )
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d105      	bne.n	8001336 <prvGetNumberOfParameters+0x56>
    {
        cParameters--;
 800132a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800132e:	b2db      	uxtb	r3, r3
 8001330:	3b01      	subs	r3, #1
 8001332:	b2db      	uxtb	r3, r3
 8001334:	73fb      	strb	r3, [r7, #15]
    }

    /* The value returned is one less than the number of space delimited words,
     * as the first word should be the command itself. */
    return cParameters;
 8001336:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <_write>:
/* CLI escape sequences*/
uint8_t backspace[] = "\b \b";
uint8_t backspace_tt[] = " \b";

int _write(int file, char *data, int len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
    UNUSED(file);
    // Transmit data using UART2
    for (int i = 0; i < len; i++)
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e00b      	b.n	8001372 <_write+0x2a>
    {
        // Send the character
    	HAL_UART_Transmit(&huart3, (const uint8_t*)&data[i], 1, 0xffff);
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	68ba      	ldr	r2, [r7, #8]
 800135e:	18d1      	adds	r1, r2, r3
 8001360:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001364:	2201      	movs	r2, #1
 8001366:	4807      	ldr	r0, [pc, #28]	@ (8001384 <_write+0x3c>)
 8001368:	f005 fe92 	bl	8007090 <HAL_UART_Transmit>
    for (int i = 0; i < len; i++)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	3301      	adds	r3, #1
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	429a      	cmp	r2, r3
 8001378:	dbef      	blt.n	800135a <_write+0x12>
        // Wait for the transmit buffer to be empty
//        while (!(USART3->ISR & USART_ISR_TXE));
    }
    return len;
 800137a:	687b      	ldr	r3, [r7, #4]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	2000c480 	.word	0x2000c480

08001388 <cmd_clearScreen>:
//*****************************************************************************
BaseType_t cmd_clearScreen(char *pcWriteBuffer, size_t xWriteBufferLen,
                                  const char *pcCommandString)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
    /* Remove compile time warnings about unused parameters, and check the
	write buffer is not NULL.  NOTE - for simplicity, this example assumes the
	write buffer length is adequate, so does not check for buffer overflows. */
    (void)pcCommandString;
    (void)xWriteBufferLen;
    memset(pcWriteBuffer, 0x00, xWriteBufferLen);
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	2100      	movs	r1, #0
 8001398:	68f8      	ldr	r0, [r7, #12]
 800139a:	f01d fae5 	bl	801e968 <memset>
    cliWrite("\033[2J\033[1;1H");
 800139e:	4804      	ldr	r0, [pc, #16]	@ (80013b0 <cmd_clearScreen+0x28>)
 80013a0:	f000 f8d0 	bl	8001544 <cliWrite>
//    printf("\033[2J\033[1;1H");
    return pdFALSE;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3710      	adds	r7, #16
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	08021d8c 	.word	0x08021d8c

080013b4 <cmd_fs>:
//*****************************************************************************
BaseType_t cmd_fs(char *pcWriteBuffer, size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
 80013b4:	b5b0      	push	{r4, r5, r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
    const char *pcParameter1;
    BaseType_t xParameter1StringLength;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 80013c0:	f107 0310 	add.w	r3, r7, #16
 80013c4:	461a      	mov	r2, r3
 80013c6:	2101      	movs	r1, #1
 80013c8:	6878      	ldr	r0, [r7, #4]
 80013ca:	f7ff fec7 	bl	800115c <FreeRTOS_CLIGetParameter>
 80013ce:	6178      	str	r0, [r7, #20]
                          1,
                          /* Store the parameter string length. */
						  &xParameter1StringLength
                        );

    if (pcParameter1 == (const char *)"-m")
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	4a1e      	ldr	r2, [pc, #120]	@ (800144c <cmd_fs+0x98>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d104      	bne.n	80013e2 <cmd_fs+0x2e>
    {
    	mount_fs(&fs, FS_MOUNT);
 80013d8:	2101      	movs	r1, #1
 80013da:	481d      	ldr	r0, [pc, #116]	@ (8001450 <cmd_fs+0x9c>)
 80013dc:	f007 fbaa 	bl	8008b34 <mount_fs>
 80013e0:	e013      	b.n	800140a <cmd_fs+0x56>

    }
    else if (pcParameter1 == (const char *)"-u")
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001454 <cmd_fs+0xa0>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d104      	bne.n	80013f4 <cmd_fs+0x40>
    {
    	mount_fs(&fs, FS_UNMOUNT);
 80013ea:	2102      	movs	r1, #2
 80013ec:	4818      	ldr	r0, [pc, #96]	@ (8001450 <cmd_fs+0x9c>)
 80013ee:	f007 fba1 	bl	8008b34 <mount_fs>
 80013f2:	e00a      	b.n	800140a <cmd_fs+0x56>

    }
    else
    {

    	strcpy(pcWriteBuffer, (char *)"incorrect parameter");
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	4a18      	ldr	r2, [pc, #96]	@ (8001458 <cmd_fs+0xa4>)
 80013f8:	461d      	mov	r5, r3
 80013fa:	4614      	mov	r4, r2
 80013fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013fe:	6028      	str	r0, [r5, #0]
 8001400:	6069      	str	r1, [r5, #4]
 8001402:	60aa      	str	r2, [r5, #8]
 8001404:	60eb      	str	r3, [r5, #12]
 8001406:	6820      	ldr	r0, [r4, #0]
 8001408:	6128      	str	r0, [r5, #16]
    }
//    xSemaphoreGive(fsSemHandle);
//    vTaskPrioritySet(vFatFSTaskHandle, osPriorityHigh);
//    taskYIELD();
    cliTaskHandle = xTaskGetCurrentTaskHandle();
 800140a:	f00d fe09 	bl	800f020 <xTaskGetCurrentTaskHandle>
 800140e:	4603      	mov	r3, r0
 8001410:	4a12      	ldr	r2, [pc, #72]	@ (800145c <cmd_fs+0xa8>)
 8001412:	6013      	str	r3, [r2, #0]
    xTaskNotifyGive(vFatFSTaskHandle);
 8001414:	4b12      	ldr	r3, [pc, #72]	@ (8001460 <cmd_fs+0xac>)
 8001416:	6818      	ldr	r0, [r3, #0]
 8001418:	2300      	movs	r3, #0
 800141a:	2202      	movs	r2, #2
 800141c:	2100      	movs	r1, #0
 800141e:	f00d ffe9 	bl	800f3f4 <xTaskGenericNotify>
    ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001422:	f04f 31ff 	mov.w	r1, #4294967295
 8001426:	2001      	movs	r0, #1
 8001428:	f00d ff98 	bl	800f35c <ulTaskNotifyTake>
    cliWrite((char *)"\r\nfs comlited\r\n");
 800142c:	480d      	ldr	r0, [pc, #52]	@ (8001464 <cmd_fs+0xb0>)
 800142e:	f000 f889 	bl	8001544 <cliWrite>
    strcpy(pcWriteBuffer, (char *)"fs good");
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	490c      	ldr	r1, [pc, #48]	@ (8001468 <cmd_fs+0xb4>)
 8001436:	461a      	mov	r2, r3
 8001438:	460b      	mov	r3, r1
 800143a:	cb03      	ldmia	r3!, {r0, r1}
 800143c:	6010      	str	r0, [r2, #0]
 800143e:	6051      	str	r1, [r2, #4]

    return pdFALSE;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bdb0      	pop	{r4, r5, r7, pc}
 800144a:	bf00      	nop
 800144c:	08021d98 	.word	0x08021d98
 8001450:	2000c594 	.word	0x2000c594
 8001454:	08021d9c 	.word	0x08021d9c
 8001458:	08021da0 	.word	0x08021da0
 800145c:	2000023c 	.word	0x2000023c
 8001460:	2000b010 	.word	0x2000b010
 8001464:	08021db4 	.word	0x08021db4
 8001468:	08021dc4 	.word	0x08021dc4

0800146c <cmd_connect>:
//*****************************************************************************
BaseType_t cmd_connect(char *pcWriteBuffer, size_t xWriteBufferLen,
                                 const char *pcCommandString)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b08b      	sub	sp, #44	@ 0x2c
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
    BaseType_t xParameter1StringLength, xParameter2StringLength;
    char *addr_len;

    /* Obtain the name of the source file, and the length of its name, from
    the command string. The name of the source file is the first parameter. */
    pcParameter1 = FreeRTOS_CLIGetParameter
 8001478:	f107 0318 	add.w	r3, r7, #24
 800147c:	461a      	mov	r2, r3
 800147e:	2101      	movs	r1, #1
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f7ff fe6b 	bl	800115c <FreeRTOS_CLIGetParameter>
 8001486:	6278      	str	r0, [r7, #36]	@ 0x24
                          1,
                          /* Store the parameter string length. */
						  &xParameter1StringLength
                        );

    pcParameter2 = FreeRTOS_CLIGetParameter
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	461a      	mov	r2, r3
 800148e:	2102      	movs	r1, #2
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fe63 	bl	800115c <FreeRTOS_CLIGetParameter>
 8001496:	6238      	str	r0, [r7, #32]
                          2,
                          /* Store the parameter string length. */
						  &xParameter2StringLength
                        );

    remout_port = atoi(pcParameter2);
 8001498:	6a38      	ldr	r0, [r7, #32]
 800149a:	f01b ff96 	bl	801d3ca <atoi>
 800149e:	4603      	mov	r3, r0
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <cmd_connect+0x88>)
 80014a4:	801a      	strh	r2, [r3, #0]
    addr_len = strstr(pcParameter1, " ");
 80014a6:	2120      	movs	r1, #32
 80014a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80014aa:	f01d fa65 	bl	801e978 <strchr>
 80014ae:	61f8      	str	r0, [r7, #28]
    *addr_len = '\0';
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	2200      	movs	r2, #0
 80014b4:	701a      	strb	r2, [r3, #0]
    remout_ip = (char *)pcParameter1;
 80014b6:	4a10      	ldr	r2, [pc, #64]	@ (80014f8 <cmd_connect+0x8c>)
 80014b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ba:	6013      	str	r3, [r2, #0]

//    uint8_t string[] = cli_prompt;//\r\nConnected!\r\n
    cliWrite((char *)"Connection...\r\n");
 80014bc:	480f      	ldr	r0, [pc, #60]	@ (80014fc <cmd_connect+0x90>)
 80014be:	f000 f841 	bl	8001544 <cliWrite>
    xSemaphoreGive(connectSemHandle);
 80014c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001500 <cmd_connect+0x94>)
 80014c4:	6818      	ldr	r0, [r3, #0]
 80014c6:	2300      	movs	r3, #0
 80014c8:	2200      	movs	r2, #0
 80014ca:	2100      	movs	r1, #0
 80014cc:	f00c f8a8 	bl	800d620 <xQueueGenericSend>
    strcpy(pcWriteBuffer, (char *)"\r\nConnected!\r\n");
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	4a0c      	ldr	r2, [pc, #48]	@ (8001504 <cmd_connect+0x98>)
 80014d4:	461c      	mov	r4, r3
 80014d6:	4613      	mov	r3, r2
 80014d8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80014da:	6020      	str	r0, [r4, #0]
 80014dc:	6061      	str	r1, [r4, #4]
 80014de:	60a2      	str	r2, [r4, #8]
 80014e0:	881a      	ldrh	r2, [r3, #0]
 80014e2:	789b      	ldrb	r3, [r3, #2]
 80014e4:	81a2      	strh	r2, [r4, #12]
 80014e6:	73a3      	strb	r3, [r4, #14]

    return pdFALSE;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	372c      	adds	r7, #44	@ 0x2c
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd90      	pop	{r4, r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000a74 	.word	0x20000a74
 80014f8:	20000010 	.word	0x20000010
 80014fc:	08021dcc 	.word	0x08021dcc
 8001500:	2000c288 	.word	0x2000c288
 8001504:	08021ddc 	.word	0x08021ddc

08001508 <vRegisterCLICommands>:
    {
        .pcCommand = NULL /* simply used as delimeter for end of array*/
    }
};

void vRegisterCLICommands(void){
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
    //itterate thourgh the list of commands and register them
    for (int i = 0; xCommandList[i].pcCommand != NULL; i++)
 800150e:	2300      	movs	r3, #0
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	e009      	b.n	8001528 <vRegisterCLICommands+0x20>
    {
        FreeRTOS_CLIRegisterCommand(&xCommandList[i]);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	011b      	lsls	r3, r3, #4
 8001518:	4a09      	ldr	r2, [pc, #36]	@ (8001540 <vRegisterCLICommands+0x38>)
 800151a:	4413      	add	r3, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fd61 	bl	8000fe4 <FreeRTOS_CLIRegisterCommand>
    for (int i = 0; xCommandList[i].pcCommand != NULL; i++)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3301      	adds	r3, #1
 8001526:	607b      	str	r3, [r7, #4]
 8001528:	4a05      	ldr	r2, [pc, #20]	@ (8001540 <vRegisterCLICommands+0x38>)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	4413      	add	r3, r2
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1ee      	bne.n	8001514 <vRegisterCLICommands+0xc>
    }
}
 8001536:	bf00      	nop
 8001538:	bf00      	nop
 800153a:	3708      	adds	r7, #8
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	08024f94 	.word	0x08024f94

08001544 <cliWrite>:
/*************************************************************************************************/
void cliWrite(const char *str)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
   printf("%s", str);
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4806      	ldr	r0, [pc, #24]	@ (8001568 <cliWrite+0x24>)
 8001550:	f01d f8d6 	bl	801e700 <iprintf>
   // flush stdout
   fflush(stdout);
 8001554:	4b05      	ldr	r3, [pc, #20]	@ (800156c <cliWrite+0x28>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	4618      	mov	r0, r3
 800155c:	f01c fffa 	bl	801e554 <fflush>
}
 8001560:	bf00      	nop
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	08021eb4 	.word	0x08021eb4
 800156c:	2000005c 	.word	0x2000005c

08001570 <handleNewline>:
/*************************************************************************************************/
void handleNewline(const char *const pcInputString, char *cOutputBuffer, uint8_t *cInputIndex)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b086      	sub	sp, #24
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
    cliWrite("\r\n");
 800157c:	4810      	ldr	r0, [pc, #64]	@ (80015c0 <handleNewline+0x50>)
 800157e:	f7ff ffe1 	bl	8001544 <cliWrite>

    BaseType_t xMoreDataToFollow;
    do
    {
        xMoreDataToFollow = FreeRTOS_CLIProcessCommand(pcInputString, cOutputBuffer, configCOMMAND_INT_MAX_OUTPUT_SIZE);
 8001582:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001586:	68b9      	ldr	r1, [r7, #8]
 8001588:	68f8      	ldr	r0, [r7, #12]
 800158a:	f7ff fd61 	bl	8001050 <FreeRTOS_CLIProcessCommand>
 800158e:	6178      	str	r0, [r7, #20]
        cliWrite(cOutputBuffer);
 8001590:	68b8      	ldr	r0, [r7, #8]
 8001592:	f7ff ffd7 	bl	8001544 <cliWrite>
    } while (xMoreDataToFollow != pdFALSE);
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1f2      	bne.n	8001582 <handleNewline+0x12>

    cliWrite(cli_prompt);
 800159c:	4b09      	ldr	r3, [pc, #36]	@ (80015c4 <handleNewline+0x54>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7ff ffcf 	bl	8001544 <cliWrite>
    *cInputIndex = 0;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
    memset((void*)pcInputString, 0x00, MAX_INPUT_LENGTH);
 80015ac:	2232      	movs	r2, #50	@ 0x32
 80015ae:	2100      	movs	r1, #0
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f01d f9d9 	bl	801e968 <memset>
}
 80015b6:	bf00      	nop
 80015b8:	3718      	adds	r7, #24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	08021eb8 	.word	0x08021eb8
 80015c4:	2000000c 	.word	0x2000000c

080015c8 <handleBackspace>:
/*************************************************************************************************/
void handleBackspace(uint8_t *cInputIndex, char *pcInputString)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	6039      	str	r1, [r7, #0]
    if (*cInputIndex > 0)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d010      	beq.n	80015fc <handleBackspace+0x34>
    {
        (*cInputIndex)--;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	3b01      	subs	r3, #1
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	701a      	strb	r2, [r3, #0]
        pcInputString[*cInputIndex] = '\0';
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]

#if USING_VS_CODE_TERMINAL
        cliWrite((char *)backspace);
#elif USING_OTHER_TERMINAL
        cliWrite((char *)backspace_tt);
 80015f4:	4807      	ldr	r0, [pc, #28]	@ (8001614 <handleBackspace+0x4c>)
 80015f6:	f7ff ffa5 	bl	8001544 <cliWrite>
#if USING_OTHER_TERMINAL
        uint8_t right[] = "\x1b\x5b\x43";
        cliWrite((char *)right);
#endif
    }
}
 80015fa:	e006      	b.n	800160a <handleBackspace+0x42>
        uint8_t right[] = "\x1b\x5b\x43";
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <handleBackspace+0x50>)
 80015fe:	60fb      	str	r3, [r7, #12]
        cliWrite((char *)right);
 8001600:	f107 030c 	add.w	r3, r7, #12
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff9d 	bl	8001544 <cliWrite>
}
 800160a:	bf00      	nop
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000014 	.word	0x20000014
 8001618:	00435b1b 	.word	0x00435b1b

0800161c <handleCharacterInput>:
/*************************************************************************************************/
void handleCharacterInput(uint8_t *cInputIndex, char *pcInputString)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
    if (cRxedChar == '\r')
 8001626:	4b14      	ldr	r3, [pc, #80]	@ (8001678 <handleCharacterInput+0x5c>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b0d      	cmp	r3, #13
 800162c:	d01f      	beq.n	800166e <handleCharacterInput+0x52>
    {
        return;
    }
    else if (cRxedChar == (uint8_t)0x08 || cRxedChar == (uint8_t)0x7F)
 800162e:	4b12      	ldr	r3, [pc, #72]	@ (8001678 <handleCharacterInput+0x5c>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b08      	cmp	r3, #8
 8001634:	d003      	beq.n	800163e <handleCharacterInput+0x22>
 8001636:	4b10      	ldr	r3, [pc, #64]	@ (8001678 <handleCharacterInput+0x5c>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b7f      	cmp	r3, #127	@ 0x7f
 800163c:	d104      	bne.n	8001648 <handleCharacterInput+0x2c>
    {
        handleBackspace(cInputIndex, pcInputString);
 800163e:	6839      	ldr	r1, [r7, #0]
 8001640:	6878      	ldr	r0, [r7, #4]
 8001642:	f7ff ffc1 	bl	80015c8 <handleBackspace>
 8001646:	e013      	b.n	8001670 <handleCharacterInput+0x54>
    }
    else
    {
        if (*cInputIndex < MAX_INPUT_LENGTH)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	781b      	ldrb	r3, [r3, #0]
 800164c:	2b31      	cmp	r3, #49	@ 0x31
 800164e:	d80f      	bhi.n	8001670 <handleCharacterInput+0x54>
        {
            pcInputString[*cInputIndex] = cRxedChar;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	4413      	add	r3, r2
 800165a:	4a07      	ldr	r2, [pc, #28]	@ (8001678 <handleCharacterInput+0x5c>)
 800165c:	7812      	ldrb	r2, [r2, #0]
 800165e:	701a      	strb	r2, [r3, #0]
            (*cInputIndex)++;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	3301      	adds	r3, #1
 8001666:	b2da      	uxtb	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	701a      	strb	r2, [r3, #0]
 800166c:	e000      	b.n	8001670 <handleCharacterInput+0x54>
        return;
 800166e:	bf00      	nop
        }
    }
}
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000a72 	.word	0x20000a72

0800167c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	607b      	str	r3, [r7, #4]
 8001686:	4b1f      	ldr	r3, [pc, #124]	@ (8001704 <MX_DMA_Init+0x88>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168a:	4a1e      	ldr	r2, [pc, #120]	@ (8001704 <MX_DMA_Init+0x88>)
 800168c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001690:	6313      	str	r3, [r2, #48]	@ 0x30
 8001692:	4b1c      	ldr	r3, [pc, #112]	@ (8001704 <MX_DMA_Init+0x88>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
 80016a2:	4b18      	ldr	r3, [pc, #96]	@ (8001704 <MX_DMA_Init+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a17      	ldr	r2, [pc, #92]	@ (8001704 <MX_DMA_Init+0x88>)
 80016a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <MX_DMA_Init+0x88>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80016ba:	2200      	movs	r2, #0
 80016bc:	2105      	movs	r1, #5
 80016be:	200c      	movs	r0, #12
 80016c0:	f001 f986 	bl	80029d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80016c4:	200c      	movs	r0, #12
 80016c6:	f001 f99f 	bl	8002a08 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80016ca:	2200      	movs	r2, #0
 80016cc:	2105      	movs	r1, #5
 80016ce:	200e      	movs	r0, #14
 80016d0:	f001 f97e 	bl	80029d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80016d4:	200e      	movs	r0, #14
 80016d6:	f001 f997 	bl	8002a08 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80016da:	2200      	movs	r2, #0
 80016dc:	2105      	movs	r1, #5
 80016de:	203b      	movs	r0, #59	@ 0x3b
 80016e0:	f001 f976 	bl	80029d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80016e4:	203b      	movs	r0, #59	@ 0x3b
 80016e6:	f001 f98f 	bl	8002a08 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80016ea:	2200      	movs	r2, #0
 80016ec:	2105      	movs	r1, #5
 80016ee:	2045      	movs	r0, #69	@ 0x45
 80016f0:	f001 f96e 	bl	80029d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80016f4:	2045      	movs	r0, #69	@ 0x45
 80016f6:	f001 f987 	bl	8002a08 <HAL_NVIC_EnableIRQ>

}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0

}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8001716:	b480      	push	{r7}
 8001718:	af00      	add	r7, sp, #0
return 0;
 800171a:	2300      	movs	r3, #0
}
 800171c:	4618      	mov	r0, r3
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
	...

08001728 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of printMux */
  printMuxHandle = osMutexNew(&printMux_attributes);
 800172c:	482b      	ldr	r0, [pc, #172]	@ (80017dc <MX_FREERTOS_Init+0xb4>)
 800172e:	f00b f8a0 	bl	800c872 <osMutexNew>
 8001732:	4603      	mov	r3, r0
 8001734:	4a2a      	ldr	r2, [pc, #168]	@ (80017e0 <MX_FREERTOS_Init+0xb8>)
 8001736:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of connectSem */
  connectSemHandle = osSemaphoreNew(1, 0, &connectSem_attributes);
 8001738:	4a2a      	ldr	r2, [pc, #168]	@ (80017e4 <MX_FREERTOS_Init+0xbc>)
 800173a:	2100      	movs	r1, #0
 800173c:	2001      	movs	r0, #1
 800173e:	f00b f9a6 	bl	800ca8e <osSemaphoreNew>
 8001742:	4603      	mov	r3, r0
 8001744:	4a28      	ldr	r2, [pc, #160]	@ (80017e8 <MX_FREERTOS_Init+0xc0>)
 8001746:	6013      	str	r3, [r2, #0]

  /* creation of uartConfigSem */
  uartConfigSemHandle = osSemaphoreNew(1, 0, &uartConfigSem_attributes);
 8001748:	4a28      	ldr	r2, [pc, #160]	@ (80017ec <MX_FREERTOS_Init+0xc4>)
 800174a:	2100      	movs	r1, #0
 800174c:	2001      	movs	r0, #1
 800174e:	f00b f99e 	bl	800ca8e <osSemaphoreNew>
 8001752:	4603      	mov	r3, r0
 8001754:	4a26      	ldr	r2, [pc, #152]	@ (80017f0 <MX_FREERTOS_Init+0xc8>)
 8001756:	6013      	str	r3, [r2, #0]

  /* creation of fsSem */
  fsSemHandle = osSemaphoreNew(1, 0, &fsSem_attributes);
 8001758:	4a26      	ldr	r2, [pc, #152]	@ (80017f4 <MX_FREERTOS_Init+0xcc>)
 800175a:	2100      	movs	r1, #0
 800175c:	2001      	movs	r0, #1
 800175e:	f00b f996 	bl	800ca8e <osSemaphoreNew>
 8001762:	4603      	mov	r3, r0
 8001764:	4a24      	ldr	r2, [pc, #144]	@ (80017f8 <MX_FREERTOS_Init+0xd0>)
 8001766:	6013      	str	r3, [r2, #0]

  /* creation of printSem */
  printSemHandle = osSemaphoreNew(1, 0, &printSem_attributes);
 8001768:	4a24      	ldr	r2, [pc, #144]	@ (80017fc <MX_FREERTOS_Init+0xd4>)
 800176a:	2100      	movs	r1, #0
 800176c:	2001      	movs	r0, #1
 800176e:	f00b f98e 	bl	800ca8e <osSemaphoreNew>
 8001772:	4603      	mov	r3, r0
 8001774:	4a22      	ldr	r2, [pc, #136]	@ (8001800 <MX_FREERTOS_Init+0xd8>)
 8001776:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of structFSQueue */
  structFSQueueHandle = osMessageQueueNew (16, sizeof(fatfs_struct_t), &structFSQueue_attributes);
 8001778:	4a22      	ldr	r2, [pc, #136]	@ (8001804 <MX_FREERTOS_Init+0xdc>)
 800177a:	210c      	movs	r1, #12
 800177c:	2010      	movs	r0, #16
 800177e:	f00b fac9 	bl	800cd14 <osMessageQueueNew>
 8001782:	4603      	mov	r3, r0
 8001784:	4a20      	ldr	r2, [pc, #128]	@ (8001808 <MX_FREERTOS_Init+0xe0>)
 8001786:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of vInitTask */
  vInitTaskHandle = osThreadNew(vStartInitTask, NULL, &vInitTask_attributes);
 8001788:	4a20      	ldr	r2, [pc, #128]	@ (800180c <MX_FREERTOS_Init+0xe4>)
 800178a:	2100      	movs	r1, #0
 800178c:	4820      	ldr	r0, [pc, #128]	@ (8001810 <MX_FREERTOS_Init+0xe8>)
 800178e:	f00a ffc2 	bl	800c716 <osThreadNew>
 8001792:	4603      	mov	r3, r0
 8001794:	4a1f      	ldr	r2, [pc, #124]	@ (8001814 <MX_FREERTOS_Init+0xec>)
 8001796:	6013      	str	r3, [r2, #0]

  /* creation of vCmdTask */
  vCmdTaskHandle = osThreadNew(vStartCmdTask, NULL, &vCmdTask_attributes);
 8001798:	4a1f      	ldr	r2, [pc, #124]	@ (8001818 <MX_FREERTOS_Init+0xf0>)
 800179a:	2100      	movs	r1, #0
 800179c:	481f      	ldr	r0, [pc, #124]	@ (800181c <MX_FREERTOS_Init+0xf4>)
 800179e:	f00a ffba 	bl	800c716 <osThreadNew>
 80017a2:	4603      	mov	r3, r0
 80017a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <MX_FREERTOS_Init+0xf8>)
 80017a6:	6013      	str	r3, [r2, #0]

  /* creation of vClientTask */
  vClientTaskHandle = osThreadNew(vStartClientTask, NULL, &vClientTask_attributes);
 80017a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001824 <MX_FREERTOS_Init+0xfc>)
 80017aa:	2100      	movs	r1, #0
 80017ac:	481e      	ldr	r0, [pc, #120]	@ (8001828 <MX_FREERTOS_Init+0x100>)
 80017ae:	f00a ffb2 	bl	800c716 <osThreadNew>
 80017b2:	4603      	mov	r3, r0
 80017b4:	4a1d      	ldr	r2, [pc, #116]	@ (800182c <MX_FREERTOS_Init+0x104>)
 80017b6:	6013      	str	r3, [r2, #0]

  /* creation of vFatFSTask */
  vFatFSTaskHandle = osThreadNew(vStartFatFSTask, NULL, &vFatFSTask_attributes);
 80017b8:	4a1d      	ldr	r2, [pc, #116]	@ (8001830 <MX_FREERTOS_Init+0x108>)
 80017ba:	2100      	movs	r1, #0
 80017bc:	481d      	ldr	r0, [pc, #116]	@ (8001834 <MX_FREERTOS_Init+0x10c>)
 80017be:	f00a ffaa 	bl	800c716 <osThreadNew>
 80017c2:	4603      	mov	r3, r0
 80017c4:	4a1c      	ldr	r2, [pc, #112]	@ (8001838 <MX_FREERTOS_Init+0x110>)
 80017c6:	6013      	str	r3, [r2, #0]

  /* creation of vPrintTask */
  vPrintTaskHandle = osThreadNew(StartPrintTask, NULL, &vPrintTask_attributes);
 80017c8:	4a1c      	ldr	r2, [pc, #112]	@ (800183c <MX_FREERTOS_Init+0x114>)
 80017ca:	2100      	movs	r1, #0
 80017cc:	481c      	ldr	r0, [pc, #112]	@ (8001840 <MX_FREERTOS_Init+0x118>)
 80017ce:	f00a ffa2 	bl	800c716 <osThreadNew>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4a1b      	ldr	r2, [pc, #108]	@ (8001844 <MX_FREERTOS_Init+0x11c>)
 80017d6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	080250a0 	.word	0x080250a0
 80017e0:	2000c284 	.word	0x2000c284
 80017e4:	080250b0 	.word	0x080250b0
 80017e8:	2000c288 	.word	0x2000c288
 80017ec:	080250c0 	.word	0x080250c0
 80017f0:	2000c28c 	.word	0x2000c28c
 80017f4:	080250d0 	.word	0x080250d0
 80017f8:	2000c290 	.word	0x2000c290
 80017fc:	080250e0 	.word	0x080250e0
 8001800:	2000c294 	.word	0x2000c294
 8001804:	08025088 	.word	0x08025088
 8001808:	2000c170 	.word	0x2000c170
 800180c:	08024fd4 	.word	0x08024fd4
 8001810:	08001849 	.word	0x08001849
 8001814:	20001e00 	.word	0x20001e00
 8001818:	08024ff8 	.word	0x08024ff8
 800181c:	08001861 	.word	0x08001861
 8001820:	200026b0 	.word	0x200026b0
 8001824:	0802501c 	.word	0x0802501c
 8001828:	080018ed 	.word	0x080018ed
 800182c:	2000a760 	.word	0x2000a760
 8001830:	08025040 	.word	0x08025040
 8001834:	08001901 	.word	0x08001901
 8001838:	2000b010 	.word	0x2000b010
 800183c:	08025064 	.word	0x08025064
 8001840:	080019b9 	.word	0x080019b9
 8001844:	2000b8c0 	.word	0x2000b8c0

08001848 <vStartInitTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_vStartInitTask */
void vStartInitTask(void *argument)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001850:	f007 fc9a 	bl	8009188 <MX_LWIP_Init>
  /* USER CODE BEGIN vStartInitTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(10000);
 8001854:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001858:	f00a fff0 	bl	800c83c <osDelay>
 800185c:	e7fa      	b.n	8001854 <vStartInitTask+0xc>
	...

08001860 <vStartCmdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStartCmdTask */
void vStartCmdTask(void *argument)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStartCmdTask */
    uint8_t cInputIndex = 0; // simply used to keep track of the index of the input string
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]
    vRegisterCLICommands();
 800186c:	f7ff fe4c 	bl	8001508 <vRegisterCLICommands>
    HAL_UART_Transmit(&huart3, (uint8_t*)"Start cli\r\n", sizeof("Start cli\r\n"), 0xffff);
 8001870:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001874:	220c      	movs	r2, #12
 8001876:	4916      	ldr	r1, [pc, #88]	@ (80018d0 <vStartCmdTask+0x70>)
 8001878:	4816      	ldr	r0, [pc, #88]	@ (80018d4 <vStartCmdTask+0x74>)
 800187a:	f005 fc09 	bl	8007090 <HAL_UART_Transmit>
    cliWrite(cli_prompt);
 800187e:	4b16      	ldr	r3, [pc, #88]	@ (80018d8 <vStartCmdTask+0x78>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fe5e 	bl	8001544 <cliWrite>

    for (;;)
    {
  	    xSemaphoreTake(uartConfigSemHandle, portMAX_DELAY);
 8001888:	4b14      	ldr	r3, [pc, #80]	@ (80018dc <vStartCmdTask+0x7c>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f04f 31ff 	mov.w	r1, #4294967295
 8001890:	4618      	mov	r0, r3
 8001892:	f00c f9d7 	bl	800dc44 <xQueueSemaphoreTake>
        //echo recevied char
//        cRxedChar = receivedValue & 0xFF;

        cliWrite((char *)&cRxedChar);
 8001896:	4812      	ldr	r0, [pc, #72]	@ (80018e0 <vStartCmdTask+0x80>)
 8001898:	f7ff fe54 	bl	8001544 <cliWrite>
        if (cRxedChar == '\r' || cRxedChar == '\n')
 800189c:	4b10      	ldr	r3, [pc, #64]	@ (80018e0 <vStartCmdTask+0x80>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b0d      	cmp	r3, #13
 80018a2:	d003      	beq.n	80018ac <vStartCmdTask+0x4c>
 80018a4:	4b0e      	ldr	r3, [pc, #56]	@ (80018e0 <vStartCmdTask+0x80>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b0a      	cmp	r3, #10
 80018aa:	d107      	bne.n	80018bc <vStartCmdTask+0x5c>
        {
            // user pressed enter, process the command
            handleNewline(pcInputString, cOutputBuffer, &cInputIndex);
 80018ac:	f107 030f 	add.w	r3, r7, #15
 80018b0:	461a      	mov	r2, r3
 80018b2:	490c      	ldr	r1, [pc, #48]	@ (80018e4 <vStartCmdTask+0x84>)
 80018b4:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <vStartCmdTask+0x88>)
 80018b6:	f7ff fe5b 	bl	8001570 <handleNewline>
 80018ba:	e005      	b.n	80018c8 <vStartCmdTask+0x68>
        }
        else
        {
            // user pressed a character add it to the input string
            handleCharacterInput(&cInputIndex, pcInputString);
 80018bc:	f107 030f 	add.w	r3, r7, #15
 80018c0:	4909      	ldr	r1, [pc, #36]	@ (80018e8 <vStartCmdTask+0x88>)
 80018c2:	4618      	mov	r0, r3
 80018c4:	f7ff feaa 	bl	800161c <handleCharacterInput>
        }
        osDelay(100);
 80018c8:	2064      	movs	r0, #100	@ 0x64
 80018ca:	f00a ffb7 	bl	800c83c <osDelay>
  	    xSemaphoreTake(uartConfigSemHandle, portMAX_DELAY);
 80018ce:	e7db      	b.n	8001888 <vStartCmdTask+0x28>
 80018d0:	08021f44 	.word	0x08021f44
 80018d4:	2000c480 	.word	0x2000c480
 80018d8:	2000000c 	.word	0x2000000c
 80018dc:	2000c28c 	.word	0x2000c28c
 80018e0:	20000a72 	.word	0x20000a72
 80018e4:	20000240 	.word	0x20000240
 80018e8:	20000a40 	.word	0x20000a40

080018ec <vStartClientTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStartClientTask */
void vStartClientTask(void *argument)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vStartClientTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(100000);
 80018f4:	4801      	ldr	r0, [pc, #4]	@ (80018fc <vStartClientTask+0x10>)
 80018f6:	f00a ffa1 	bl	800c83c <osDelay>
 80018fa:	e7fb      	b.n	80018f4 <vStartClientTask+0x8>
 80018fc:	000186a0 	.word	0x000186a0

08001900 <vStartFatFSTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_vStartFatFSTask */
void vStartFatFSTask(void *argument)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//	  xSemaphoreTake(fsSemHandle, portMAX_DELAY);
//	  switch ( ) {
//		case 1 ... 2:
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8001908:	f04f 31ff 	mov.w	r1, #4294967295
 800190c:	2001      	movs	r0, #1
 800190e:	f00d fd25 	bl	800f35c <ulTaskNotifyTake>
			if (mount_fs(&fs, 1) != 0)
 8001912:	2101      	movs	r1, #1
 8001914:	481d      	ldr	r0, [pc, #116]	@ (800198c <vStartFatFSTask+0x8c>)
 8001916:	f007 f90d 	bl	8008b34 <mount_fs>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <vStartFatFSTask+0x26>
			{
				cliWrite("Failed mount\r\n");
 8001920:	481b      	ldr	r0, [pc, #108]	@ (8001990 <vStartFatFSTask+0x90>)
 8001922:	f7ff fe0f 	bl	8001544 <cliWrite>
			}
			cliWrite("Success mount\r\n");
 8001926:	481b      	ldr	r0, [pc, #108]	@ (8001994 <vStartFatFSTask+0x94>)
 8001928:	f7ff fe0c 	bl	8001544 <cliWrite>
//			osDelay(3000);
			for (int i = 0;i < 100;i++)
 800192c:	2300      	movs	r3, #0
 800192e:	60fb      	str	r3, [r7, #12]
 8001930:	e006      	b.n	8001940 <vStartFatFSTask+0x40>
			{
				write_fs("WolfFile.txt", "Work on Wolf lib5\r\n");
 8001932:	4919      	ldr	r1, [pc, #100]	@ (8001998 <vStartFatFSTask+0x98>)
 8001934:	4819      	ldr	r0, [pc, #100]	@ (800199c <vStartFatFSTask+0x9c>)
 8001936:	f007 f93d 	bl	8008bb4 <write_fs>
			for (int i = 0;i < 100;i++)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	3301      	adds	r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	2b63      	cmp	r3, #99	@ 0x63
 8001944:	ddf5      	ble.n	8001932 <vStartFatFSTask+0x32>

			}
			cliWrite("Success writed\r\n");
 8001946:	4816      	ldr	r0, [pc, #88]	@ (80019a0 <vStartFatFSTask+0xa0>)
 8001948:	f7ff fdfc 	bl	8001544 <cliWrite>

			read_fs("binance.pem", buf, LEN_CERT_FILE);
 800194c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001950:	4914      	ldr	r1, [pc, #80]	@ (80019a4 <vStartFatFSTask+0xa4>)
 8001952:	4815      	ldr	r0, [pc, #84]	@ (80019a8 <vStartFatFSTask+0xa8>)
 8001954:	f007 f984 	bl	8008c60 <read_fs>

			cliWrite((char *)buf);
 8001958:	4812      	ldr	r0, [pc, #72]	@ (80019a4 <vStartFatFSTask+0xa4>)
 800195a:	f7ff fdf3 	bl	8001544 <cliWrite>
			cliWrite("\r\n");
 800195e:	4813      	ldr	r0, [pc, #76]	@ (80019ac <vStartFatFSTask+0xac>)
 8001960:	f7ff fdf0 	bl	8001544 <cliWrite>
//			vTaskPrioritySet(vFatFSTaskHandle, osPriorityNormal);
			xTaskNotifyGive(cliTaskHandle);
 8001964:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <vStartFatFSTask+0xb0>)
 8001966:	6818      	ldr	r0, [r3, #0]
 8001968:	2300      	movs	r3, #0
 800196a:	2202      	movs	r2, #2
 800196c:	2100      	movs	r1, #0
 800196e:	f00d fd41 	bl	800f3f4 <xTaskGenericNotify>
			taskYIELD();
 8001972:	4b10      	ldr	r3, [pc, #64]	@ (80019b4 <vStartFatFSTask+0xb4>)
 8001974:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	f3bf 8f4f 	dsb	sy
 800197e:	f3bf 8f6f 	isb	sy
//			res_fs = write_fs(&text[0], &text[1]);
//			break;
//		default:
//			break;
//	}
    osDelay(500);
 8001982:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001986:	f00a ff59 	bl	800c83c <osDelay>
	  ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800198a:	e7bd      	b.n	8001908 <vStartFatFSTask+0x8>
 800198c:	2000c594 	.word	0x2000c594
 8001990:	08021f50 	.word	0x08021f50
 8001994:	08021f60 	.word	0x08021f60
 8001998:	08021f70 	.word	0x08021f70
 800199c:	08021f84 	.word	0x08021f84
 80019a0:	08021f94 	.word	0x08021f94
 80019a4:	20000a78 	.word	0x20000a78
 80019a8:	08021fa8 	.word	0x08021fa8
 80019ac:	08021fb4 	.word	0x08021fb4
 80019b0:	2000023c 	.word	0x2000023c
 80019b4:	e000ed04 	.word	0xe000ed04

080019b8 <StartPrintTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPrintTask */
void StartPrintTask(void *argument)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPrintTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019c0:	2001      	movs	r0, #1
 80019c2:	f00a ff3b 	bl	800c83c <osDelay>
 80019c6:	e7fb      	b.n	80019c0 <StartPrintTask+0x8>

080019c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b087      	sub	sp, #28
 80019cc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	4b25      	ldr	r3, [pc, #148]	@ (8001a68 <MX_GPIO_Init+0xa0>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a24      	ldr	r2, [pc, #144]	@ (8001a68 <MX_GPIO_Init+0xa0>)
 80019d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b22      	ldr	r3, [pc, #136]	@ (8001a68 <MX_GPIO_Init+0xa0>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	613b      	str	r3, [r7, #16]
 80019ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001a68 <MX_GPIO_Init+0xa0>)
 80019f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019f2:	4a1d      	ldr	r2, [pc, #116]	@ (8001a68 <MX_GPIO_Init+0xa0>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80019fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001a68 <MX_GPIO_Init+0xa0>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	4b17      	ldr	r3, [pc, #92]	@ (8001a68 <MX_GPIO_Init+0xa0>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0e:	4a16      	ldr	r2, [pc, #88]	@ (8001a68 <MX_GPIO_Init+0xa0>)
 8001a10:	f043 0301 	orr.w	r3, r3, #1
 8001a14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a16:	4b14      	ldr	r3, [pc, #80]	@ (8001a68 <MX_GPIO_Init+0xa0>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	f003 0301 	and.w	r3, r3, #1
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	4b10      	ldr	r3, [pc, #64]	@ (8001a68 <MX_GPIO_Init+0xa0>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a68 <MX_GPIO_Init+0xa0>)
 8001a2c:	f043 0302 	orr.w	r3, r3, #2
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b0d      	ldr	r3, [pc, #52]	@ (8001a68 <MX_GPIO_Init+0xa0>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	607b      	str	r3, [r7, #4]
 8001a42:	4b09      	ldr	r3, [pc, #36]	@ (8001a68 <MX_GPIO_Init+0xa0>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a08      	ldr	r2, [pc, #32]	@ (8001a68 <MX_GPIO_Init+0xa0>)
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b06      	ldr	r3, [pc, #24]	@ (8001a68 <MX_GPIO_Init+0xa0>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	607b      	str	r3, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]

}
 8001a5a:	bf00      	nop
 8001a5c:	371c      	adds	r7, #28
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	40023800 	.word	0x40023800

08001a6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a70:	f000 fe90 	bl	8002794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a74:	f000 f822 	bl	8001abc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a78:	f7ff ffa6 	bl	80019c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a7c:	f7ff fdfe 	bl	800167c <MX_DMA_Init>
  MX_TIM5_Init();
 8001a80:	f000 fbe2 	bl	8002248 <MX_TIM5_Init>
  MX_RNG_Init();
 8001a84:	f000 f89c 	bl	8001bc0 <MX_RNG_Init>
  MX_USART3_UART_Init();
 8001a88:	f000 fc54 	bl	8002334 <MX_USART3_UART_Init>
  MX_SDIO_SD_Init();
 8001a8c:	f000 f8d4 	bl	8001c38 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001a90:	f007 f836 	bl	8008b00 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
// HAL_UART_Transmit(&huart3, (uint8_t *)"Start\n\r", sizeof("Start\n\r"), 0xffff);
  HAL_UART_Receive_IT(&huart3, pcRxedChar, 1);
 8001a94:	4b07      	ldr	r3, [pc, #28]	@ (8001ab4 <main+0x48>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	4806      	ldr	r0, [pc, #24]	@ (8001ab8 <main+0x4c>)
 8001a9e:	f005 fb82 	bl	80071a6 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001aa2:	f00a fdb7 	bl	800c614 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001aa6:	f7ff fe3f 	bl	8001728 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001aaa:	f00a fdf9 	bl	800c6a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001aae:	bf00      	nop
 8001ab0:	e7fd      	b.n	8001aae <main+0x42>
 8001ab2:	bf00      	nop
 8001ab4:	2000001c 	.word	0x2000001c
 8001ab8:	2000c480 	.word	0x2000c480

08001abc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b094      	sub	sp, #80	@ 0x50
 8001ac0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ac2:	f107 0320 	add.w	r3, r7, #32
 8001ac6:	2230      	movs	r2, #48	@ 0x30
 8001ac8:	2100      	movs	r1, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	f01c ff4c 	bl	801e968 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ad0:	f107 030c 	add.w	r3, r7, #12
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	605a      	str	r2, [r3, #4]
 8001ada:	609a      	str	r2, [r3, #8]
 8001adc:	60da      	str	r2, [r3, #12]
 8001ade:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
 8001ae4:	4b28      	ldr	r3, [pc, #160]	@ (8001b88 <SystemClock_Config+0xcc>)
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	4a27      	ldr	r2, [pc, #156]	@ (8001b88 <SystemClock_Config+0xcc>)
 8001aea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aee:	6413      	str	r3, [r2, #64]	@ 0x40
 8001af0:	4b25      	ldr	r3, [pc, #148]	@ (8001b88 <SystemClock_Config+0xcc>)
 8001af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001afc:	2300      	movs	r3, #0
 8001afe:	607b      	str	r3, [r7, #4]
 8001b00:	4b22      	ldr	r3, [pc, #136]	@ (8001b8c <SystemClock_Config+0xd0>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a21      	ldr	r2, [pc, #132]	@ (8001b8c <SystemClock_Config+0xd0>)
 8001b06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8001b8c <SystemClock_Config+0xd0>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b20:	2310      	movs	r3, #16
 8001b22:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b24:	2302      	movs	r3, #2
 8001b26:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001b2c:	2308      	movs	r3, #8
 8001b2e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b30:	23a8      	movs	r3, #168	@ 0xa8
 8001b32:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b34:	2302      	movs	r3, #2
 8001b36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b38:	2307      	movs	r3, #7
 8001b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b3c:	f107 0320 	add.w	r3, r7, #32
 8001b40:	4618      	mov	r0, r3
 8001b42:	f002 ff91 	bl	8004a68 <HAL_RCC_OscConfig>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b4c:	f000 f832 	bl	8001bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b50:	230f      	movs	r3, #15
 8001b52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b54:	2302      	movs	r3, #2
 8001b56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001b5c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001b60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001b62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001b68:	f107 030c 	add.w	r3, r7, #12
 8001b6c:	2105      	movs	r1, #5
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f003 f9f2 	bl	8004f58 <HAL_RCC_ClockConfig>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001b7a:	f000 f81b 	bl	8001bb4 <Error_Handler>
  }
}
 8001b7e:	bf00      	nop
 8001b80:	3750      	adds	r7, #80	@ 0x50
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40007000 	.word	0x40007000

08001b90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a04      	ldr	r2, [pc, #16]	@ (8001bb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d101      	bne.n	8001ba6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ba2:	f000 fe19 	bl	80027d8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40010000 	.word	0x40010000

08001bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bb8:	b672      	cpsid	i
}
 8001bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bbc:	bf00      	nop
 8001bbe:	e7fd      	b.n	8001bbc <Error_Handler+0x8>

08001bc0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <MX_RNG_Init+0x20>)
 8001bc6:	4a07      	ldr	r2, [pc, #28]	@ (8001be4 <MX_RNG_Init+0x24>)
 8001bc8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001bca:	4805      	ldr	r0, [pc, #20]	@ (8001be0 <MX_RNG_Init+0x20>)
 8001bcc:	f003 fbd6 	bl	800537c <HAL_RNG_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001bd6:	f7ff ffed 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	2000c298 	.word	0x2000c298
 8001be4:	50060800 	.word	0x50060800

08001be8 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0e      	ldr	r2, [pc, #56]	@ (8001c30 <HAL_RNG_MspInit+0x48>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d115      	bne.n	8001c26 <HAL_RNG_MspInit+0x3e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	60fb      	str	r3, [r7, #12]
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	@ (8001c34 <HAL_RNG_MspInit+0x4c>)
 8001c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c02:	4a0c      	ldr	r2, [pc, #48]	@ (8001c34 <HAL_RNG_MspInit+0x4c>)
 8001c04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c08:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <HAL_RNG_MspInit+0x4c>)
 8001c0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]

    /* RNG interrupt Init */
    HAL_NVIC_SetPriority(HASH_RNG_IRQn, 5, 0);
 8001c16:	2200      	movs	r2, #0
 8001c18:	2105      	movs	r1, #5
 8001c1a:	2050      	movs	r0, #80	@ 0x50
 8001c1c:	f000 fed8 	bl	80029d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HASH_RNG_IRQn);
 8001c20:	2050      	movs	r0, #80	@ 0x50
 8001c22:	f000 fef1 	bl	8002a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8001c26:	bf00      	nop
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	50060800 	.word	0x50060800
 8001c34:	40023800 	.word	0x40023800

08001c38 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <MX_SDIO_SD_Init+0x38>)
 8001c3e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c74 <MX_SDIO_SD_Init+0x3c>)
 8001c40:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001c42:	4b0b      	ldr	r3, [pc, #44]	@ (8001c70 <MX_SDIO_SD_Init+0x38>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001c48:	4b09      	ldr	r3, [pc, #36]	@ (8001c70 <MX_SDIO_SD_Init+0x38>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001c4e:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <MX_SDIO_SD_Init+0x38>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001c54:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <MX_SDIO_SD_Init+0x38>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001c5a:	4b05      	ldr	r3, [pc, #20]	@ (8001c70 <MX_SDIO_SD_Init+0x38>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001c60:	4b03      	ldr	r3, [pc, #12]	@ (8001c70 <MX_SDIO_SD_Init+0x38>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr
 8001c70:	2000c2a8 	.word	0x2000c2a8
 8001c74:	40012c00 	.word	0x40012c00

08001c78 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08a      	sub	sp, #40	@ 0x28
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c80:	f107 0314 	add.w	r3, r7, #20
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a68      	ldr	r2, [pc, #416]	@ (8001e38 <HAL_SD_MspInit+0x1c0>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	f040 80ca 	bne.w	8001e30 <HAL_SD_MspInit+0x1b8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	613b      	str	r3, [r7, #16]
 8001ca0:	4b66      	ldr	r3, [pc, #408]	@ (8001e3c <HAL_SD_MspInit+0x1c4>)
 8001ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ca4:	4a65      	ldr	r2, [pc, #404]	@ (8001e3c <HAL_SD_MspInit+0x1c4>)
 8001ca6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001caa:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cac:	4b63      	ldr	r3, [pc, #396]	@ (8001e3c <HAL_SD_MspInit+0x1c4>)
 8001cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cb4:	613b      	str	r3, [r7, #16]
 8001cb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
 8001cbc:	4b5f      	ldr	r3, [pc, #380]	@ (8001e3c <HAL_SD_MspInit+0x1c4>)
 8001cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc0:	4a5e      	ldr	r2, [pc, #376]	@ (8001e3c <HAL_SD_MspInit+0x1c4>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc8:	4b5c      	ldr	r3, [pc, #368]	@ (8001e3c <HAL_SD_MspInit+0x1c4>)
 8001cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ccc:	f003 0304 	and.w	r3, r3, #4
 8001cd0:	60fb      	str	r3, [r7, #12]
 8001cd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
 8001cd8:	4b58      	ldr	r3, [pc, #352]	@ (8001e3c <HAL_SD_MspInit+0x1c4>)
 8001cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cdc:	4a57      	ldr	r2, [pc, #348]	@ (8001e3c <HAL_SD_MspInit+0x1c4>)
 8001cde:	f043 0308 	orr.w	r3, r3, #8
 8001ce2:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce4:	4b55      	ldr	r3, [pc, #340]	@ (8001e3c <HAL_SD_MspInit+0x1c4>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	60bb      	str	r3, [r7, #8]
 8001cee:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PC8     ------> SDIO_D0
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_12;
 8001cf0:	f44f 5388 	mov.w	r3, #4352	@ 0x1100
 8001cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cfe:	2303      	movs	r3, #3
 8001d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001d02:	230c      	movs	r3, #12
 8001d04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d06:	f107 0314 	add.w	r3, r7, #20
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	484c      	ldr	r0, [pc, #304]	@ (8001e40 <HAL_SD_MspInit+0x1c8>)
 8001d0e:	f002 fd0f 	bl	8004730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001d12:	2304      	movs	r3, #4
 8001d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d16:	2302      	movs	r3, #2
 8001d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001d22:	230c      	movs	r3, #12
 8001d24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4845      	ldr	r0, [pc, #276]	@ (8001e44 <HAL_SD_MspInit+0x1cc>)
 8001d2e:	f002 fcff 	bl	8004730 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8001d32:	4b45      	ldr	r3, [pc, #276]	@ (8001e48 <HAL_SD_MspInit+0x1d0>)
 8001d34:	4a45      	ldr	r2, [pc, #276]	@ (8001e4c <HAL_SD_MspInit+0x1d4>)
 8001d36:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8001d38:	4b43      	ldr	r3, [pc, #268]	@ (8001e48 <HAL_SD_MspInit+0x1d0>)
 8001d3a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001d3e:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d40:	4b41      	ldr	r3, [pc, #260]	@ (8001e48 <HAL_SD_MspInit+0x1d0>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d46:	4b40      	ldr	r3, [pc, #256]	@ (8001e48 <HAL_SD_MspInit+0x1d0>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d4c:	4b3e      	ldr	r3, [pc, #248]	@ (8001e48 <HAL_SD_MspInit+0x1d0>)
 8001d4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d52:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d54:	4b3c      	ldr	r3, [pc, #240]	@ (8001e48 <HAL_SD_MspInit+0x1d0>)
 8001d56:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001d5a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d5c:	4b3a      	ldr	r3, [pc, #232]	@ (8001e48 <HAL_SD_MspInit+0x1d0>)
 8001d5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d62:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8001d64:	4b38      	ldr	r3, [pc, #224]	@ (8001e48 <HAL_SD_MspInit+0x1d0>)
 8001d66:	2220      	movs	r2, #32
 8001d68:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001d6a:	4b37      	ldr	r3, [pc, #220]	@ (8001e48 <HAL_SD_MspInit+0x1d0>)
 8001d6c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001d70:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001d72:	4b35      	ldr	r3, [pc, #212]	@ (8001e48 <HAL_SD_MspInit+0x1d0>)
 8001d74:	2204      	movs	r2, #4
 8001d76:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001d78:	4b33      	ldr	r3, [pc, #204]	@ (8001e48 <HAL_SD_MspInit+0x1d0>)
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001d7e:	4b32      	ldr	r3, [pc, #200]	@ (8001e48 <HAL_SD_MspInit+0x1d0>)
 8001d80:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001d84:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001d86:	4b30      	ldr	r3, [pc, #192]	@ (8001e48 <HAL_SD_MspInit+0x1d0>)
 8001d88:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001d8c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8001d8e:	482e      	ldr	r0, [pc, #184]	@ (8001e48 <HAL_SD_MspInit+0x1d0>)
 8001d90:	f000 fe48 	bl	8002a24 <HAL_DMA_Init>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <HAL_SD_MspInit+0x126>
    {
      Error_Handler();
 8001d9a:	f7ff ff0b 	bl	8001bb4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a29      	ldr	r2, [pc, #164]	@ (8001e48 <HAL_SD_MspInit+0x1d0>)
 8001da2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001da4:	4a28      	ldr	r2, [pc, #160]	@ (8001e48 <HAL_SD_MspInit+0x1d0>)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8001daa:	4b29      	ldr	r3, [pc, #164]	@ (8001e50 <HAL_SD_MspInit+0x1d8>)
 8001dac:	4a29      	ldr	r2, [pc, #164]	@ (8001e54 <HAL_SD_MspInit+0x1dc>)
 8001dae:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8001db0:	4b27      	ldr	r3, [pc, #156]	@ (8001e50 <HAL_SD_MspInit+0x1d8>)
 8001db2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001db6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001db8:	4b25      	ldr	r3, [pc, #148]	@ (8001e50 <HAL_SD_MspInit+0x1d8>)
 8001dba:	2240      	movs	r2, #64	@ 0x40
 8001dbc:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001dbe:	4b24      	ldr	r3, [pc, #144]	@ (8001e50 <HAL_SD_MspInit+0x1d8>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001dc4:	4b22      	ldr	r3, [pc, #136]	@ (8001e50 <HAL_SD_MspInit+0x1d8>)
 8001dc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dca:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001dcc:	4b20      	ldr	r3, [pc, #128]	@ (8001e50 <HAL_SD_MspInit+0x1d8>)
 8001dce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001dd2:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	@ (8001e50 <HAL_SD_MspInit+0x1d8>)
 8001dd6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001dda:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8001ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e50 <HAL_SD_MspInit+0x1d8>)
 8001dde:	2220      	movs	r2, #32
 8001de0:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001de2:	4b1b      	ldr	r3, [pc, #108]	@ (8001e50 <HAL_SD_MspInit+0x1d8>)
 8001de4:	2200      	movs	r2, #0
 8001de6:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001de8:	4b19      	ldr	r3, [pc, #100]	@ (8001e50 <HAL_SD_MspInit+0x1d8>)
 8001dea:	2204      	movs	r2, #4
 8001dec:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001dee:	4b18      	ldr	r3, [pc, #96]	@ (8001e50 <HAL_SD_MspInit+0x1d8>)
 8001df0:	2203      	movs	r2, #3
 8001df2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001df4:	4b16      	ldr	r3, [pc, #88]	@ (8001e50 <HAL_SD_MspInit+0x1d8>)
 8001df6:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8001dfa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	@ (8001e50 <HAL_SD_MspInit+0x1d8>)
 8001dfe:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001e02:	631a      	str	r2, [r3, #48]	@ 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8001e04:	4812      	ldr	r0, [pc, #72]	@ (8001e50 <HAL_SD_MspInit+0x1d8>)
 8001e06:	f000 fe0d 	bl	8002a24 <HAL_DMA_Init>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_SD_MspInit+0x19c>
    {
      Error_Handler();
 8001e10:	f7ff fed0 	bl	8001bb4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a0e      	ldr	r2, [pc, #56]	@ (8001e50 <HAL_SD_MspInit+0x1d8>)
 8001e18:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e1a:	4a0d      	ldr	r2, [pc, #52]	@ (8001e50 <HAL_SD_MspInit+0x1d8>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 5, 0);
 8001e20:	2200      	movs	r2, #0
 8001e22:	2105      	movs	r1, #5
 8001e24:	2031      	movs	r0, #49	@ 0x31
 8001e26:	f000 fdd3 	bl	80029d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001e2a:	2031      	movs	r0, #49	@ 0x31
 8001e2c:	f000 fdec 	bl	8002a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001e30:	bf00      	nop
 8001e32:	3728      	adds	r7, #40	@ 0x28
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40012c00 	.word	0x40012c00
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40020800 	.word	0x40020800
 8001e44:	40020c00 	.word	0x40020c00
 8001e48:	2000c32c 	.word	0x2000c32c
 8001e4c:	40026458 	.word	0x40026458
 8001e50:	2000c38c 	.word	0x2000c38c
 8001e54:	400264a0 	.word	0x400264a0

08001e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	607b      	str	r3, [r7, #4]
 8001e62:	4b16      	ldr	r3, [pc, #88]	@ (8001ebc <HAL_MspInit+0x64>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e66:	4a15      	ldr	r2, [pc, #84]	@ (8001ebc <HAL_MspInit+0x64>)
 8001e68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e6e:	4b13      	ldr	r3, [pc, #76]	@ (8001ebc <HAL_MspInit+0x64>)
 8001e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e76:	607b      	str	r3, [r7, #4]
 8001e78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	4b0f      	ldr	r3, [pc, #60]	@ (8001ebc <HAL_MspInit+0x64>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	4a0e      	ldr	r2, [pc, #56]	@ (8001ebc <HAL_MspInit+0x64>)
 8001e84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001ebc <HAL_MspInit+0x64>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e92:	603b      	str	r3, [r7, #0]
 8001e94:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e96:	2200      	movs	r2, #0
 8001e98:	210f      	movs	r1, #15
 8001e9a:	f06f 0001 	mvn.w	r0, #1
 8001e9e:	f000 fd97 	bl	80029d0 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2105      	movs	r1, #5
 8001ea6:	2005      	movs	r0, #5
 8001ea8:	f000 fd92 	bl	80029d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001eac:	2005      	movs	r0, #5
 8001eae:	f000 fdab 	bl	8002a08 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb2:	bf00      	nop
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800

08001ec0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08c      	sub	sp, #48	@ 0x30
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	4b2f      	ldr	r3, [pc, #188]	@ (8001f94 <HAL_InitTick+0xd4>)
 8001ed6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed8:	4a2e      	ldr	r2, [pc, #184]	@ (8001f94 <HAL_InitTick+0xd4>)
 8001eda:	f043 0301 	orr.w	r3, r3, #1
 8001ede:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ee0:	4b2c      	ldr	r3, [pc, #176]	@ (8001f94 <HAL_InitTick+0xd4>)
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee4:	f003 0301 	and.w	r3, r3, #1
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001eec:	f107 020c 	add.w	r2, r7, #12
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f003 fa0e 	bl	8005318 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001efc:	f003 f9f8 	bl	80052f0 <HAL_RCC_GetPCLK2Freq>
 8001f00:	4603      	mov	r3, r0
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f08:	4a23      	ldr	r2, [pc, #140]	@ (8001f98 <HAL_InitTick+0xd8>)
 8001f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f0e:	0c9b      	lsrs	r3, r3, #18
 8001f10:	3b01      	subs	r3, #1
 8001f12:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001f14:	4b21      	ldr	r3, [pc, #132]	@ (8001f9c <HAL_InitTick+0xdc>)
 8001f16:	4a22      	ldr	r2, [pc, #136]	@ (8001fa0 <HAL_InitTick+0xe0>)
 8001f18:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001f1a:	4b20      	ldr	r3, [pc, #128]	@ (8001f9c <HAL_InitTick+0xdc>)
 8001f1c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001f20:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001f22:	4a1e      	ldr	r2, [pc, #120]	@ (8001f9c <HAL_InitTick+0xdc>)
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001f28:	4b1c      	ldr	r3, [pc, #112]	@ (8001f9c <HAL_InitTick+0xdc>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	@ (8001f9c <HAL_InitTick+0xdc>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f34:	4b19      	ldr	r3, [pc, #100]	@ (8001f9c <HAL_InitTick+0xdc>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f3a:	4818      	ldr	r0, [pc, #96]	@ (8001f9c <HAL_InitTick+0xdc>)
 8001f3c:	f004 fbe2 	bl	8006704 <HAL_TIM_Base_Init>
 8001f40:	4603      	mov	r3, r0
 8001f42:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001f46:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d11b      	bne.n	8001f86 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f4e:	4813      	ldr	r0, [pc, #76]	@ (8001f9c <HAL_InitTick+0xdc>)
 8001f50:	f004 fc28 	bl	80067a4 <HAL_TIM_Base_Start_IT>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001f5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d111      	bne.n	8001f86 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f62:	2019      	movs	r0, #25
 8001f64:	f000 fd50 	bl	8002a08 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b0f      	cmp	r3, #15
 8001f6c:	d808      	bhi.n	8001f80 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001f6e:	2200      	movs	r2, #0
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	2019      	movs	r0, #25
 8001f74:	f000 fd2c 	bl	80029d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f78:	4a0a      	ldr	r2, [pc, #40]	@ (8001fa4 <HAL_InitTick+0xe4>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e002      	b.n	8001f86 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3730      	adds	r7, #48	@ 0x30
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	40023800 	.word	0x40023800
 8001f98:	431bde83 	.word	0x431bde83
 8001f9c:	2000c3ec 	.word	0x2000c3ec
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	20000020 	.word	0x20000020

08001fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <NMI_Handler+0x4>

08001fb0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <HardFault_Handler+0x4>

08001fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <MemManage_Handler+0x4>

08001fc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc4:	bf00      	nop
 8001fc6:	e7fd      	b.n	8001fc4 <BusFault_Handler+0x4>

08001fc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <UsageFault_Handler+0x4>

08001fd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ff0:	4802      	ldr	r0, [pc, #8]	@ (8001ffc <DMA1_Stream1_IRQHandler+0x10>)
 8001ff2:	f000 feaf 	bl	8002d54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	2000c4c8 	.word	0x2000c4c8

08002000 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002004:	4802      	ldr	r0, [pc, #8]	@ (8002010 <DMA1_Stream3_IRQHandler+0x10>)
 8002006:	f000 fea5 	bl	8002d54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2000c528 	.word	0x2000c528

08002014 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002018:	4802      	ldr	r0, [pc, #8]	@ (8002024 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800201a:	f004 fc33 	bl	8006884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	2000c3ec 	.word	0x2000c3ec

08002028 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800202c:	4802      	ldr	r0, [pc, #8]	@ (8002038 <USART3_IRQHandler+0x10>)
 800202e:	f005 f8df 	bl	80071f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	2000c480 	.word	0x2000c480

0800203c <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002040:	4802      	ldr	r0, [pc, #8]	@ (800204c <SDIO_IRQHandler+0x10>)
 8002042:	f003 fca7 	bl	8005994 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	2000c2a8 	.word	0x2000c2a8

08002050 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002054:	4802      	ldr	r0, [pc, #8]	@ (8002060 <TIM5_IRQHandler+0x10>)
 8002056:	f004 fc15 	bl	8006884 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	2000c438 	.word	0x2000c438

08002064 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8002068:	4802      	ldr	r0, [pc, #8]	@ (8002074 <DMA2_Stream3_IRQHandler+0x10>)
 800206a:	f000 fe73 	bl	8002d54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000c32c 	.word	0x2000c32c

08002078 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <ETH_IRQHandler+0x10>)
 800207e:	f001 fc6d 	bl	800395c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20011308 	.word	0x20011308

0800208c <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002090:	4802      	ldr	r0, [pc, #8]	@ (800209c <ETH_WKUP_IRQHandler+0x10>)
 8002092:	f001 fc63 	bl	800395c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20011308 	.word	0x20011308

080020a0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80020a4:	4802      	ldr	r0, [pc, #8]	@ (80020b0 <DMA2_Stream6_IRQHandler+0x10>)
 80020a6:	f000 fe55 	bl	8002d54 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	2000c38c 	.word	0x2000c38c

080020b4 <HASH_RNG_IRQHandler>:

/**
  * @brief This function handles HASH and RNG global interrupts.
  */
void HASH_RNG_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HASH_RNG_IRQn 0 */

  /* USER CODE END HASH_RNG_IRQn 0 */
  HAL_RNG_IRQHandler(&hrng);
 80020b8:	4802      	ldr	r0, [pc, #8]	@ (80020c4 <HASH_RNG_IRQHandler+0x10>)
 80020ba:	f003 f989 	bl	80053d0 <HAL_RNG_IRQHandler>
  /* USER CODE BEGIN HASH_RNG_IRQn 1 */

  /* USER CODE END HASH_RNG_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	2000c298 	.word	0x2000c298

080020c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  return 1;
 80020cc:	2301      	movs	r3, #1
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr

080020d8 <_kill>:

int _kill(int pid, int sig)
{
 80020d8:	b480      	push	{r7}
 80020da:	b083      	sub	sp, #12
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020e2:	4b05      	ldr	r3, [pc, #20]	@ (80020f8 <_kill+0x20>)
 80020e4:	2216      	movs	r2, #22
 80020e6:	601a      	str	r2, [r3, #0]
  return -1;
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	370c      	adds	r7, #12
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	2001b2f8 	.word	0x2001b2f8

080020fc <_exit>:

void _exit (int status)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002104:	f04f 31ff 	mov.w	r1, #4294967295
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f7ff ffe5 	bl	80020d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800210e:	bf00      	nop
 8002110:	e7fd      	b.n	800210e <_exit+0x12>

08002112 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b086      	sub	sp, #24
 8002116:	af00      	add	r7, sp, #0
 8002118:	60f8      	str	r0, [r7, #12]
 800211a:	60b9      	str	r1, [r7, #8]
 800211c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800211e:	2300      	movs	r3, #0
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	e00a      	b.n	800213a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002124:	f3af 8000 	nop.w
 8002128:	4601      	mov	r1, r0
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	60ba      	str	r2, [r7, #8]
 8002130:	b2ca      	uxtb	r2, r1
 8002132:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	3301      	adds	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
 800213a:	697a      	ldr	r2, [r7, #20]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	429a      	cmp	r2, r3
 8002140:	dbf0      	blt.n	8002124 <_read+0x12>
  }

  return len;
 8002142:	687b      	ldr	r3, [r7, #4]
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <_close>:
  }
  return len;
}

int _close(int file)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002154:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002158:	4618      	mov	r0, r3
 800215a:	370c      	adds	r7, #12
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002164:	b480      	push	{r7}
 8002166:	b083      	sub	sp, #12
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002174:	605a      	str	r2, [r3, #4]
  return 0;
 8002176:	2300      	movs	r3, #0
}
 8002178:	4618      	mov	r0, r3
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <_isatty>:

int _isatty(int file)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800218c:	2301      	movs	r3, #1
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800219a:	b480      	push	{r7}
 800219c:	b085      	sub	sp, #20
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3714      	adds	r7, #20
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b087      	sub	sp, #28
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021bc:	4a14      	ldr	r2, [pc, #80]	@ (8002210 <_sbrk+0x5c>)
 80021be:	4b15      	ldr	r3, [pc, #84]	@ (8002214 <_sbrk+0x60>)
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021c8:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <_sbrk+0x64>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d102      	bne.n	80021d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d0:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <_sbrk+0x64>)
 80021d2:	4a12      	ldr	r2, [pc, #72]	@ (800221c <_sbrk+0x68>)
 80021d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021d6:	4b10      	ldr	r3, [pc, #64]	@ (8002218 <_sbrk+0x64>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d205      	bcs.n	80021f0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80021e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <_sbrk+0x6c>)
 80021e6:	220c      	movs	r2, #12
 80021e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021ea:	f04f 33ff 	mov.w	r3, #4294967295
 80021ee:	e009      	b.n	8002204 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f0:	4b09      	ldr	r3, [pc, #36]	@ (8002218 <_sbrk+0x64>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021f6:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <_sbrk+0x64>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4413      	add	r3, r2
 80021fe:	4a06      	ldr	r2, [pc, #24]	@ (8002218 <_sbrk+0x64>)
 8002200:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002202:	68fb      	ldr	r3, [r7, #12]
}
 8002204:	4618      	mov	r0, r3
 8002206:	371c      	adds	r7, #28
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	20020000 	.word	0x20020000
 8002214:	00001000 	.word	0x00001000
 8002218:	2000c434 	.word	0x2000c434
 800221c:	2001b300 	.word	0x2001b300
 8002220:	2001b2f8 	.word	0x2001b2f8

08002224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002228:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <SystemInit+0x20>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222e:	4a05      	ldr	r2, [pc, #20]	@ (8002244 <SystemInit+0x20>)
 8002230:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002234:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <MX_TIM5_Init>:

TIM_HandleTypeDef htim5;

/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b086      	sub	sp, #24
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800224e:	f107 0308 	add.w	r3, r7, #8
 8002252:	2200      	movs	r2, #0
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	605a      	str	r2, [r3, #4]
 8002258:	609a      	str	r2, [r3, #8]
 800225a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800225c:	463b      	mov	r3, r7
 800225e:	2200      	movs	r2, #0
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002264:	4b1d      	ldr	r3, [pc, #116]	@ (80022dc <MX_TIM5_Init+0x94>)
 8002266:	4a1e      	ldr	r2, [pc, #120]	@ (80022e0 <MX_TIM5_Init+0x98>)
 8002268:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 599;
 800226a:	4b1c      	ldr	r3, [pc, #112]	@ (80022dc <MX_TIM5_Init+0x94>)
 800226c:	f240 2257 	movw	r2, #599	@ 0x257
 8002270:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002272:	4b1a      	ldr	r3, [pc, #104]	@ (80022dc <MX_TIM5_Init+0x94>)
 8002274:	2200      	movs	r2, #0
 8002276:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002278:	4b18      	ldr	r3, [pc, #96]	@ (80022dc <MX_TIM5_Init+0x94>)
 800227a:	f04f 32ff 	mov.w	r2, #4294967295
 800227e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002280:	4b16      	ldr	r3, [pc, #88]	@ (80022dc <MX_TIM5_Init+0x94>)
 8002282:	2200      	movs	r2, #0
 8002284:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002286:	4b15      	ldr	r3, [pc, #84]	@ (80022dc <MX_TIM5_Init+0x94>)
 8002288:	2200      	movs	r2, #0
 800228a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800228c:	4813      	ldr	r0, [pc, #76]	@ (80022dc <MX_TIM5_Init+0x94>)
 800228e:	f004 fa39 	bl	8006704 <HAL_TIM_Base_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002298:	f7ff fc8c 	bl	8001bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800229c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80022a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80022a2:	f107 0308 	add.w	r3, r7, #8
 80022a6:	4619      	mov	r1, r3
 80022a8:	480c      	ldr	r0, [pc, #48]	@ (80022dc <MX_TIM5_Init+0x94>)
 80022aa:	f004 fbdb 	bl	8006a64 <HAL_TIM_ConfigClockSource>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d001      	beq.n	80022b8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80022b4:	f7ff fc7e 	bl	8001bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022b8:	2300      	movs	r3, #0
 80022ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022bc:	2300      	movs	r3, #0
 80022be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80022c0:	463b      	mov	r3, r7
 80022c2:	4619      	mov	r1, r3
 80022c4:	4805      	ldr	r0, [pc, #20]	@ (80022dc <MX_TIM5_Init+0x94>)
 80022c6:	f004 fe03 	bl	8006ed0 <HAL_TIMEx_MasterConfigSynchronization>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80022d0:	f7ff fc70 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80022d4:	bf00      	nop
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	2000c438 	.word	0x2000c438
 80022e0:	40000c00 	.word	0x40000c00

080022e4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM5)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	4a0e      	ldr	r2, [pc, #56]	@ (800232c <HAL_TIM_Base_MspInit+0x48>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d115      	bne.n	8002322 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* TIM5 clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002330 <HAL_TIM_Base_MspInit+0x4c>)
 80022fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fe:	4a0c      	ldr	r2, [pc, #48]	@ (8002330 <HAL_TIM_Base_MspInit+0x4c>)
 8002300:	f043 0308 	orr.w	r3, r3, #8
 8002304:	6413      	str	r3, [r2, #64]	@ 0x40
 8002306:	4b0a      	ldr	r3, [pc, #40]	@ (8002330 <HAL_TIM_Base_MspInit+0x4c>)
 8002308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]

    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 8002312:	2200      	movs	r2, #0
 8002314:	2105      	movs	r1, #5
 8002316:	2032      	movs	r0, #50	@ 0x32
 8002318:	f000 fb5a 	bl	80029d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800231c:	2032      	movs	r0, #50	@ 0x32
 800231e:	f000 fb73 	bl	8002a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002322:	bf00      	nop
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	40000c00 	.word	0x40000c00
 8002330:	40023800 	.word	0x40023800

08002334 <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_tx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002338:	4b11      	ldr	r3, [pc, #68]	@ (8002380 <MX_USART3_UART_Init+0x4c>)
 800233a:	4a12      	ldr	r2, [pc, #72]	@ (8002384 <MX_USART3_UART_Init+0x50>)
 800233c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800233e:	4b10      	ldr	r3, [pc, #64]	@ (8002380 <MX_USART3_UART_Init+0x4c>)
 8002340:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002344:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002346:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <MX_USART3_UART_Init+0x4c>)
 8002348:	2200      	movs	r2, #0
 800234a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800234c:	4b0c      	ldr	r3, [pc, #48]	@ (8002380 <MX_USART3_UART_Init+0x4c>)
 800234e:	2200      	movs	r2, #0
 8002350:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002352:	4b0b      	ldr	r3, [pc, #44]	@ (8002380 <MX_USART3_UART_Init+0x4c>)
 8002354:	2200      	movs	r2, #0
 8002356:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002358:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <MX_USART3_UART_Init+0x4c>)
 800235a:	220c      	movs	r2, #12
 800235c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800235e:	4b08      	ldr	r3, [pc, #32]	@ (8002380 <MX_USART3_UART_Init+0x4c>)
 8002360:	2200      	movs	r2, #0
 8002362:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002364:	4b06      	ldr	r3, [pc, #24]	@ (8002380 <MX_USART3_UART_Init+0x4c>)
 8002366:	2200      	movs	r2, #0
 8002368:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800236a:	4805      	ldr	r0, [pc, #20]	@ (8002380 <MX_USART3_UART_Init+0x4c>)
 800236c:	f004 fe40 	bl	8006ff0 <HAL_UART_Init>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d001      	beq.n	800237a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002376:	f7ff fc1d 	bl	8001bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000c480 	.word	0x2000c480
 8002384:	40004800 	.word	0x40004800

08002388 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b08a      	sub	sp, #40	@ 0x28
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002390:	f107 0314 	add.w	r3, r7, #20
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a4c      	ldr	r2, [pc, #304]	@ (80024d8 <HAL_UART_MspInit+0x150>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	f040 8091 	bne.w	80024ce <HAL_UART_MspInit+0x146>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80023ac:	2300      	movs	r3, #0
 80023ae:	613b      	str	r3, [r7, #16]
 80023b0:	4b4a      	ldr	r3, [pc, #296]	@ (80024dc <HAL_UART_MspInit+0x154>)
 80023b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b4:	4a49      	ldr	r2, [pc, #292]	@ (80024dc <HAL_UART_MspInit+0x154>)
 80023b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80023bc:	4b47      	ldr	r3, [pc, #284]	@ (80024dc <HAL_UART_MspInit+0x154>)
 80023be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	4b43      	ldr	r3, [pc, #268]	@ (80024dc <HAL_UART_MspInit+0x154>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d0:	4a42      	ldr	r2, [pc, #264]	@ (80024dc <HAL_UART_MspInit+0x154>)
 80023d2:	f043 0308 	orr.w	r3, r3, #8
 80023d6:	6313      	str	r3, [r2, #48]	@ 0x30
 80023d8:	4b40      	ldr	r3, [pc, #256]	@ (80024dc <HAL_UART_MspInit+0x154>)
 80023da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023dc:	f003 0308 	and.w	r3, r3, #8
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023e4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80023e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	2302      	movs	r3, #2
 80023ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80023f6:	2307      	movs	r3, #7
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023fa:	f107 0314 	add.w	r3, r7, #20
 80023fe:	4619      	mov	r1, r3
 8002400:	4837      	ldr	r0, [pc, #220]	@ (80024e0 <HAL_UART_MspInit+0x158>)
 8002402:	f002 f995 	bl	8004730 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002406:	4b37      	ldr	r3, [pc, #220]	@ (80024e4 <HAL_UART_MspInit+0x15c>)
 8002408:	4a37      	ldr	r2, [pc, #220]	@ (80024e8 <HAL_UART_MspInit+0x160>)
 800240a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800240c:	4b35      	ldr	r3, [pc, #212]	@ (80024e4 <HAL_UART_MspInit+0x15c>)
 800240e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002412:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002414:	4b33      	ldr	r3, [pc, #204]	@ (80024e4 <HAL_UART_MspInit+0x15c>)
 8002416:	2200      	movs	r2, #0
 8002418:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800241a:	4b32      	ldr	r3, [pc, #200]	@ (80024e4 <HAL_UART_MspInit+0x15c>)
 800241c:	2200      	movs	r2, #0
 800241e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002420:	4b30      	ldr	r3, [pc, #192]	@ (80024e4 <HAL_UART_MspInit+0x15c>)
 8002422:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002426:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002428:	4b2e      	ldr	r3, [pc, #184]	@ (80024e4 <HAL_UART_MspInit+0x15c>)
 800242a:	2200      	movs	r2, #0
 800242c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800242e:	4b2d      	ldr	r3, [pc, #180]	@ (80024e4 <HAL_UART_MspInit+0x15c>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002434:	4b2b      	ldr	r3, [pc, #172]	@ (80024e4 <HAL_UART_MspInit+0x15c>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800243a:	4b2a      	ldr	r3, [pc, #168]	@ (80024e4 <HAL_UART_MspInit+0x15c>)
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002440:	4b28      	ldr	r3, [pc, #160]	@ (80024e4 <HAL_UART_MspInit+0x15c>)
 8002442:	2200      	movs	r2, #0
 8002444:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002446:	4827      	ldr	r0, [pc, #156]	@ (80024e4 <HAL_UART_MspInit+0x15c>)
 8002448:	f000 faec 	bl	8002a24 <HAL_DMA_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002452:	f7ff fbaf 	bl	8001bb4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a22      	ldr	r2, [pc, #136]	@ (80024e4 <HAL_UART_MspInit+0x15c>)
 800245a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800245c:	4a21      	ldr	r2, [pc, #132]	@ (80024e4 <HAL_UART_MspInit+0x15c>)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 8002462:	4b22      	ldr	r3, [pc, #136]	@ (80024ec <HAL_UART_MspInit+0x164>)
 8002464:	4a22      	ldr	r2, [pc, #136]	@ (80024f0 <HAL_UART_MspInit+0x168>)
 8002466:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8002468:	4b20      	ldr	r3, [pc, #128]	@ (80024ec <HAL_UART_MspInit+0x164>)
 800246a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800246e:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002470:	4b1e      	ldr	r3, [pc, #120]	@ (80024ec <HAL_UART_MspInit+0x164>)
 8002472:	2240      	movs	r2, #64	@ 0x40
 8002474:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002476:	4b1d      	ldr	r3, [pc, #116]	@ (80024ec <HAL_UART_MspInit+0x164>)
 8002478:	2200      	movs	r2, #0
 800247a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800247c:	4b1b      	ldr	r3, [pc, #108]	@ (80024ec <HAL_UART_MspInit+0x164>)
 800247e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002482:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002484:	4b19      	ldr	r3, [pc, #100]	@ (80024ec <HAL_UART_MspInit+0x164>)
 8002486:	2200      	movs	r2, #0
 8002488:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800248a:	4b18      	ldr	r3, [pc, #96]	@ (80024ec <HAL_UART_MspInit+0x164>)
 800248c:	2200      	movs	r2, #0
 800248e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002490:	4b16      	ldr	r3, [pc, #88]	@ (80024ec <HAL_UART_MspInit+0x164>)
 8002492:	2200      	movs	r2, #0
 8002494:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002496:	4b15      	ldr	r3, [pc, #84]	@ (80024ec <HAL_UART_MspInit+0x164>)
 8002498:	2200      	movs	r2, #0
 800249a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800249c:	4b13      	ldr	r3, [pc, #76]	@ (80024ec <HAL_UART_MspInit+0x164>)
 800249e:	2200      	movs	r2, #0
 80024a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80024a2:	4812      	ldr	r0, [pc, #72]	@ (80024ec <HAL_UART_MspInit+0x164>)
 80024a4:	f000 fabe 	bl	8002a24 <HAL_DMA_Init>
 80024a8:	4603      	mov	r3, r0
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d001      	beq.n	80024b2 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80024ae:	f7ff fb81 	bl	8001bb4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a0d      	ldr	r2, [pc, #52]	@ (80024ec <HAL_UART_MspInit+0x164>)
 80024b6:	639a      	str	r2, [r3, #56]	@ 0x38
 80024b8:	4a0c      	ldr	r2, [pc, #48]	@ (80024ec <HAL_UART_MspInit+0x164>)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80024be:	2200      	movs	r2, #0
 80024c0:	2105      	movs	r1, #5
 80024c2:	2027      	movs	r0, #39	@ 0x27
 80024c4:	f000 fa84 	bl	80029d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024c8:	2027      	movs	r0, #39	@ 0x27
 80024ca:	f000 fa9d 	bl	8002a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024ce:	bf00      	nop
 80024d0:	3728      	adds	r7, #40	@ 0x28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40004800 	.word	0x40004800
 80024dc:	40023800 	.word	0x40023800
 80024e0:	40020c00 	.word	0x40020c00
 80024e4:	2000c4c8 	.word	0x2000c4c8
 80024e8:	40026028 	.word	0x40026028
 80024ec:	2000c528 	.word	0x2000c528
 80024f0:	40026058 	.word	0x40026058

080024f4 <HAL_UART_RxCpltCallback>:
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]

	BaseType_t pxHigherPriorityTaskWoken = pdFALSE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60fb      	str	r3, [r7, #12]
	HAL_UART_Receive_IT(&huart3, pcRxedChar, 1);
 8002500:	4b09      	ldr	r3, [pc, #36]	@ (8002528 <HAL_UART_RxCpltCallback+0x34>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	2201      	movs	r2, #1
 8002506:	4619      	mov	r1, r3
 8002508:	4808      	ldr	r0, [pc, #32]	@ (800252c <HAL_UART_RxCpltCallback+0x38>)
 800250a:	f004 fe4c 	bl	80071a6 <HAL_UART_Receive_IT>
	xSemaphoreGiveFromISR(uartConfigSemHandle, &pxHigherPriorityTaskWoken);
 800250e:	4b08      	ldr	r3, [pc, #32]	@ (8002530 <HAL_UART_RxCpltCallback+0x3c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f107 020c 	add.w	r2, r7, #12
 8002516:	4611      	mov	r1, r2
 8002518:	4618      	mov	r0, r3
 800251a:	f00b fa21 	bl	800d960 <xQueueGiveFromISR>

}
 800251e:	bf00      	nop
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	2000001c 	.word	0x2000001c
 800252c:	2000c480 	.word	0x2000c480
 8002530:	2000c28c 	.word	0x2000c28c

08002534 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack     /* set stack pointer */
 8002534:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800256c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002538:	f7ff fe74 	bl	8002224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800253c:	480c      	ldr	r0, [pc, #48]	@ (8002570 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800253e:	490d      	ldr	r1, [pc, #52]	@ (8002574 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002540:	4a0d      	ldr	r2, [pc, #52]	@ (8002578 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002542:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002544:	e002      	b.n	800254c <LoopCopyDataInit>

08002546 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002546:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002548:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800254a:	3304      	adds	r3, #4

0800254c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800254c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800254e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002550:	d3f9      	bcc.n	8002546 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002552:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002554:	4c0a      	ldr	r4, [pc, #40]	@ (8002580 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002556:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002558:	e001      	b.n	800255e <LoopFillZerobss>

0800255a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800255a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800255c:	3204      	adds	r2, #4

0800255e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800255e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002560:	d3fb      	bcc.n	800255a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002562:	f01c fb35 	bl	801ebd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002566:	f7ff fa81 	bl	8001a6c <main>
  bx  lr    
 800256a:	4770      	bx	lr
   ldr   sp, =_estack     /* set stack pointer */
 800256c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002570:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002574:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8002578:	08025794 	.word	0x08025794
  ldr r2, =_sbss
 800257c:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8002580:	2001b300 	.word	0x2001b300

08002584 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002584:	e7fe      	b.n	8002584 <ADC_IRQHandler>

08002586 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8002586:	b480      	push	{r7}
 8002588:	b083      	sub	sp, #12
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
 800258e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00b      	beq.n	80025ae <DP83848_RegisterBusIO+0x28>
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d007      	beq.n	80025ae <DP83848_RegisterBusIO+0x28>
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <DP83848_RegisterBusIO+0x28>
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d102      	bne.n	80025b4 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 80025ae:	f04f 33ff 	mov.w	r3, #4294967295
 80025b2:	e014      	b.n	80025de <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685a      	ldr	r2, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	68da      	ldr	r2, [r3, #12]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	691a      	ldr	r2, [r3, #16]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <DP83848_Init>:
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ADDRESS_ERROR if cannot find device address
  *         DP83848_STATUS_READ_ERROR if connot read register
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b086      	sub	sp, #24
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	2300      	movs	r3, #0
 80025f8:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 80025fa:	2300      	movs	r3, #0
 80025fc:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d139      	bne.n	800267a <DP83848_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d002      	beq.n	8002614 <DP83848_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2220      	movs	r2, #32
 8002618:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 800261a:	2300      	movs	r3, #0
 800261c:	617b      	str	r3, [r7, #20]
 800261e:	e01c      	b.n	800265a <DP83848_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	695b      	ldr	r3, [r3, #20]
 8002624:	f107 020c 	add.w	r2, r7, #12
 8002628:	2119      	movs	r1, #25
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	4798      	blx	r3
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	da03      	bge.n	800263c <DP83848_Init+0x52>
       {
         status = DP83848_STATUS_READ_ERROR;
 8002634:	f06f 0304 	mvn.w	r3, #4
 8002638:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 800263a:	e00b      	b.n	8002654 <DP83848_Init+0x6a>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	697a      	ldr	r2, [r7, #20]
 8002644:	429a      	cmp	r2, r3
 8002646:	d105      	bne.n	8002654 <DP83848_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	697a      	ldr	r2, [r7, #20]
 800264c:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
         break;
 8002652:	e005      	b.n	8002660 <DP83848_Init+0x76>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	3301      	adds	r3, #1
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2b1f      	cmp	r3, #31
 800265e:	d9df      	bls.n	8002620 <DP83848_Init+0x36>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b1f      	cmp	r3, #31
 8002666:	d902      	bls.n	800266e <DP83848_Init+0x84>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8002668:	f06f 0302 	mvn.w	r3, #2
 800266c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d102      	bne.n	800267a <DP83848_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 800267a:	693b      	ldr	r3, [r7, #16]
 }
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b084      	sub	sp, #16
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800268c:	2300      	movs	r3, #0
 800268e:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	695b      	ldr	r3, [r3, #20]
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	6810      	ldr	r0, [r2, #0]
 8002698:	f107 020c 	add.w	r2, r7, #12
 800269c:	2101      	movs	r1, #1
 800269e:	4798      	blx	r3
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	da02      	bge.n	80026ac <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 80026a6:	f06f 0304 	mvn.w	r3, #4
 80026aa:	e06e      	b.n	800278a <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	695b      	ldr	r3, [r3, #20]
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	6810      	ldr	r0, [r2, #0]
 80026b4:	f107 020c 	add.w	r2, r7, #12
 80026b8:	2101      	movs	r1, #1
 80026ba:	4798      	blx	r3
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	da02      	bge.n	80026c8 <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 80026c2:	f06f 0304 	mvn.w	r3, #4
 80026c6:	e060      	b.n	800278a <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e059      	b.n	800278a <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6810      	ldr	r0, [r2, #0]
 80026de:	f107 020c 	add.w	r2, r7, #12
 80026e2:	2100      	movs	r1, #0
 80026e4:	4798      	blx	r3
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	da02      	bge.n	80026f2 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 80026ec:	f06f 0304 	mvn.w	r3, #4
 80026f0:	e04b      	b.n	800278a <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d11b      	bne.n	8002734 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d006      	beq.n	8002714 <DP83848_GetLinkState+0x90>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8002710:	2302      	movs	r3, #2
 8002712:	e03a      	b.n	800278a <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 800271e:	2303      	movs	r3, #3
 8002720:	e033      	b.n	800278a <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d001      	beq.n	8002730 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 800272c:	2304      	movs	r3, #4
 800272e:	e02c      	b.n	800278a <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8002730:	2305      	movs	r3, #5
 8002732:	e02a      	b.n	800278a <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6810      	ldr	r0, [r2, #0]
 800273c:	f107 020c 	add.w	r2, r7, #12
 8002740:	2110      	movs	r1, #16
 8002742:	4798      	blx	r3
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	da02      	bge.n	8002750 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 800274a:	f06f 0304 	mvn.w	r3, #4
 800274e:	e01c      	b.n	800278a <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f003 0310 	and.w	r3, r3, #16
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 800275a:	2306      	movs	r3, #6
 800275c:	e015      	b.n	800278a <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	f003 0306 	and.w	r3, r3, #6
 8002764:	2b04      	cmp	r3, #4
 8002766:	d101      	bne.n	800276c <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8002768:	2302      	movs	r3, #2
 800276a:	e00e      	b.n	800278a <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	f003 0306 	and.w	r3, r3, #6
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8002776:	2303      	movs	r3, #3
 8002778:	e007      	b.n	800278a <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f003 0306 	and.w	r3, r3, #6
 8002780:	2b06      	cmp	r3, #6
 8002782:	d101      	bne.n	8002788 <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8002784:	2304      	movs	r3, #4
 8002786:	e000      	b.n	800278a <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8002788:	2305      	movs	r3, #5
    }
  }
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002798:	4b0e      	ldr	r3, [pc, #56]	@ (80027d4 <HAL_Init+0x40>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0d      	ldr	r2, [pc, #52]	@ (80027d4 <HAL_Init+0x40>)
 800279e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027a4:	4b0b      	ldr	r3, [pc, #44]	@ (80027d4 <HAL_Init+0x40>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a0a      	ldr	r2, [pc, #40]	@ (80027d4 <HAL_Init+0x40>)
 80027aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027b0:	4b08      	ldr	r3, [pc, #32]	@ (80027d4 <HAL_Init+0x40>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a07      	ldr	r2, [pc, #28]	@ (80027d4 <HAL_Init+0x40>)
 80027b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027bc:	2003      	movs	r0, #3
 80027be:	f000 f8fc 	bl	80029ba <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027c2:	200f      	movs	r0, #15
 80027c4:	f7ff fb7c 	bl	8001ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027c8:	f7ff fb46 	bl	8001e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	40023c00 	.word	0x40023c00

080027d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027dc:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_IncTick+0x20>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	461a      	mov	r2, r3
 80027e2:	4b06      	ldr	r3, [pc, #24]	@ (80027fc <HAL_IncTick+0x24>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4413      	add	r3, r2
 80027e8:	4a04      	ldr	r2, [pc, #16]	@ (80027fc <HAL_IncTick+0x24>)
 80027ea:	6013      	str	r3, [r2, #0]
}
 80027ec:	bf00      	nop
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	20000024 	.word	0x20000024
 80027fc:	2000c588 	.word	0x2000c588

08002800 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return uwTick;
 8002804:	4b03      	ldr	r3, [pc, #12]	@ (8002814 <HAL_GetTick+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	2000c588 	.word	0x2000c588

08002818 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b084      	sub	sp, #16
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002820:	f7ff ffee 	bl	8002800 <HAL_GetTick>
 8002824:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002830:	d005      	beq.n	800283e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002832:	4b0a      	ldr	r3, [pc, #40]	@ (800285c <HAL_Delay+0x44>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	461a      	mov	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4413      	add	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800283e:	bf00      	nop
 8002840:	f7ff ffde 	bl	8002800 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	429a      	cmp	r2, r3
 800284e:	d8f7      	bhi.n	8002840 <HAL_Delay+0x28>
  {
  }
}
 8002850:	bf00      	nop
 8002852:	bf00      	nop
 8002854:	3710      	adds	r7, #16
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000024 	.word	0x20000024

08002860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002870:	4b0c      	ldr	r3, [pc, #48]	@ (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800287c:	4013      	ands	r3, r2
 800287e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002888:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800288c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002892:	4a04      	ldr	r2, [pc, #16]	@ (80028a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	60d3      	str	r3, [r2, #12]
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000ed00 	.word	0xe000ed00

080028a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028ac:	4b04      	ldr	r3, [pc, #16]	@ (80028c0 <__NVIC_GetPriorityGrouping+0x18>)
 80028ae:	68db      	ldr	r3, [r3, #12]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	f003 0307 	and.w	r3, r3, #7
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	e000ed00 	.word	0xe000ed00

080028c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	4603      	mov	r3, r0
 80028cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80028ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	db0b      	blt.n	80028ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	f003 021f 	and.w	r2, r3, #31
 80028dc:	4907      	ldr	r1, [pc, #28]	@ (80028fc <__NVIC_EnableIRQ+0x38>)
 80028de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80028e2:	095b      	lsrs	r3, r3, #5
 80028e4:	2001      	movs	r0, #1
 80028e6:	fa00 f202 	lsl.w	r2, r0, r2
 80028ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80028ee:	bf00      	nop
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
 80028fa:	bf00      	nop
 80028fc:	e000e100 	.word	0xe000e100

08002900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	4603      	mov	r3, r0
 8002908:	6039      	str	r1, [r7, #0]
 800290a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800290c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002910:	2b00      	cmp	r3, #0
 8002912:	db0a      	blt.n	800292a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	b2da      	uxtb	r2, r3
 8002918:	490c      	ldr	r1, [pc, #48]	@ (800294c <__NVIC_SetPriority+0x4c>)
 800291a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291e:	0112      	lsls	r2, r2, #4
 8002920:	b2d2      	uxtb	r2, r2
 8002922:	440b      	add	r3, r1
 8002924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002928:	e00a      	b.n	8002940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	b2da      	uxtb	r2, r3
 800292e:	4908      	ldr	r1, [pc, #32]	@ (8002950 <__NVIC_SetPriority+0x50>)
 8002930:	79fb      	ldrb	r3, [r7, #7]
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	3b04      	subs	r3, #4
 8002938:	0112      	lsls	r2, r2, #4
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	440b      	add	r3, r1
 800293e:	761a      	strb	r2, [r3, #24]
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	e000e100 	.word	0xe000e100
 8002950:	e000ed00 	.word	0xe000ed00

08002954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002954:	b480      	push	{r7}
 8002956:	b089      	sub	sp, #36	@ 0x24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f003 0307 	and.w	r3, r3, #7
 8002966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	f1c3 0307 	rsb	r3, r3, #7
 800296e:	2b04      	cmp	r3, #4
 8002970:	bf28      	it	cs
 8002972:	2304      	movcs	r3, #4
 8002974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	3304      	adds	r3, #4
 800297a:	2b06      	cmp	r3, #6
 800297c:	d902      	bls.n	8002984 <NVIC_EncodePriority+0x30>
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	3b03      	subs	r3, #3
 8002982:	e000      	b.n	8002986 <NVIC_EncodePriority+0x32>
 8002984:	2300      	movs	r3, #0
 8002986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002988:	f04f 32ff 	mov.w	r2, #4294967295
 800298c:	69bb      	ldr	r3, [r7, #24]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	43da      	mvns	r2, r3
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	401a      	ands	r2, r3
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800299c:	f04f 31ff 	mov.w	r1, #4294967295
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	fa01 f303 	lsl.w	r3, r1, r3
 80029a6:	43d9      	mvns	r1, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029ac:	4313      	orrs	r3, r2
         );
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3724      	adds	r7, #36	@ 0x24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b082      	sub	sp, #8
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ff4c 	bl	8002860 <__NVIC_SetPriorityGrouping>
}
 80029c8:	bf00      	nop
 80029ca:	3708      	adds	r7, #8
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80029de:	2300      	movs	r3, #0
 80029e0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80029e2:	f7ff ff61 	bl	80028a8 <__NVIC_GetPriorityGrouping>
 80029e6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	6978      	ldr	r0, [r7, #20]
 80029ee:	f7ff ffb1 	bl	8002954 <NVIC_EncodePriority>
 80029f2:	4602      	mov	r2, r0
 80029f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80029f8:	4611      	mov	r1, r2
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff ff80 	bl	8002900 <__NVIC_SetPriority>
}
 8002a00:	bf00      	nop
 8002a02:	3718      	adds	r7, #24
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}

08002a08 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7ff ff54 	bl	80028c4 <__NVIC_EnableIRQ>
}
 8002a1c:	bf00      	nop
 8002a1e:	3708      	adds	r7, #8
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002a30:	f7ff fee6 	bl	8002800 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d101      	bne.n	8002a40 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e099      	b.n	8002b74 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f022 0201 	bic.w	r2, r2, #1
 8002a5e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a60:	e00f      	b.n	8002a82 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a62:	f7ff fecd 	bl	8002800 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b05      	cmp	r3, #5
 8002a6e:	d908      	bls.n	8002a82 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2220      	movs	r2, #32
 8002a74:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2203      	movs	r2, #3
 8002a7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e078      	b.n	8002b74 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d1e8      	bne.n	8002a62 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a98:	697a      	ldr	r2, [r7, #20]
 8002a9a:	4b38      	ldr	r3, [pc, #224]	@ (8002b7c <HAL_DMA_Init+0x158>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002aae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002aba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ac6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a1b      	ldr	r3, [r3, #32]
 8002acc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d107      	bne.n	8002aec <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	697a      	ldr	r2, [r7, #20]
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695b      	ldr	r3, [r3, #20]
 8002afa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	f023 0307 	bic.w	r3, r3, #7
 8002b02:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d117      	bne.n	8002b46 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1a:	697a      	ldr	r2, [r7, #20]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d00e      	beq.n	8002b46 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f000 fb0d 	bl	8003148 <DMA_CheckFifoParam>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d008      	beq.n	8002b46 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2240      	movs	r2, #64	@ 0x40
 8002b38:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002b42:	2301      	movs	r3, #1
 8002b44:	e016      	b.n	8002b74 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	697a      	ldr	r2, [r7, #20]
 8002b4c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fac4 	bl	80030dc <DMA_CalcBaseAndBitshift>
 8002b54:	4603      	mov	r3, r0
 8002b56:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b5c:	223f      	movs	r2, #63	@ 0x3f
 8002b5e:	409a      	lsls	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3718      	adds	r7, #24
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	f010803f 	.word	0xf010803f

08002b80 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
 8002b8c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b96:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d101      	bne.n	8002ba6 <HAL_DMA_Start_IT+0x26>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e040      	b.n	8002c28 <HAL_DMA_Start_IT+0xa8>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d12f      	bne.n	8002c1a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2202      	movs	r2, #2
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	687a      	ldr	r2, [r7, #4]
 8002bcc:	68b9      	ldr	r1, [r7, #8]
 8002bce:	68f8      	ldr	r0, [r7, #12]
 8002bd0:	f000 fa56 	bl	8003080 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd8:	223f      	movs	r2, #63	@ 0x3f
 8002bda:	409a      	lsls	r2, r3
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0216 	orr.w	r2, r2, #22
 8002bee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d007      	beq.n	8002c08 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0208 	orr.w	r2, r2, #8
 8002c06:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	e005      	b.n	8002c26 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c22:	2302      	movs	r3, #2
 8002c24:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c3c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c3e:	f7ff fddf 	bl	8002800 <HAL_GetTick>
 8002c42:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d008      	beq.n	8002c62 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e052      	b.n	8002d08 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0216 	bic.w	r2, r2, #22
 8002c70:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	695a      	ldr	r2, [r3, #20]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c80:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d103      	bne.n	8002c92 <HAL_DMA_Abort+0x62>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d007      	beq.n	8002ca2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0208 	bic.w	r2, r2, #8
 8002ca0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f022 0201 	bic.w	r2, r2, #1
 8002cb0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cb2:	e013      	b.n	8002cdc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cb4:	f7ff fda4 	bl	8002800 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b05      	cmp	r3, #5
 8002cc0:	d90c      	bls.n	8002cdc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2203      	movs	r2, #3
 8002ccc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002cd8:	2303      	movs	r3, #3
 8002cda:	e015      	b.n	8002d08 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0301 	and.w	r3, r3, #1
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1e4      	bne.n	8002cb4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cee:	223f      	movs	r2, #63	@ 0x3f
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d06:	2300      	movs	r3, #0
}
 8002d08:	4618      	mov	r0, r3
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bd80      	pop	{r7, pc}

08002d10 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d1e:	b2db      	uxtb	r3, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d004      	beq.n	8002d2e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2280      	movs	r2, #128	@ 0x80
 8002d28:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e00c      	b.n	8002d48 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2205      	movs	r2, #5
 8002d32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0201 	bic.w	r2, r2, #1
 8002d44:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d46:	2300      	movs	r3, #0
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b086      	sub	sp, #24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d60:	4b8e      	ldr	r3, [pc, #568]	@ (8002f9c <HAL_DMA_IRQHandler+0x248>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a8e      	ldr	r2, [pc, #568]	@ (8002fa0 <HAL_DMA_IRQHandler+0x24c>)
 8002d66:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6a:	0a9b      	lsrs	r3, r3, #10
 8002d6c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d72:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d7e:	2208      	movs	r2, #8
 8002d80:	409a      	lsls	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	4013      	ands	r3, r2
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d01a      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d013      	beq.n	8002dc0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0204 	bic.w	r2, r2, #4
 8002da6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dac:	2208      	movs	r2, #8
 8002dae:	409a      	lsls	r2, r3
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db8:	f043 0201 	orr.w	r2, r3, #1
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d012      	beq.n	8002df6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	695b      	ldr	r3, [r3, #20]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00b      	beq.n	8002df6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002de2:	2201      	movs	r2, #1
 8002de4:	409a      	lsls	r2, r3
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dee:	f043 0202 	orr.w	r2, r3, #2
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4013      	ands	r3, r2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d012      	beq.n	8002e2c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d00b      	beq.n	8002e2c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e18:	2204      	movs	r2, #4
 8002e1a:	409a      	lsls	r2, r3
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e24:	f043 0204 	orr.w	r2, r3, #4
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e30:	2210      	movs	r2, #16
 8002e32:	409a      	lsls	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	4013      	ands	r3, r2
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d043      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d03c      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e4e:	2210      	movs	r2, #16
 8002e50:	409a      	lsls	r2, r3
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d018      	beq.n	8002e96 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d108      	bne.n	8002e84 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d024      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	4798      	blx	r3
 8002e82:	e01f      	b.n	8002ec4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d01b      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	4798      	blx	r3
 8002e94:	e016      	b.n	8002ec4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d107      	bne.n	8002eb4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f022 0208 	bic.w	r2, r2, #8
 8002eb2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d003      	beq.n	8002ec4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec8:	2220      	movs	r2, #32
 8002eca:	409a      	lsls	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 808f 	beq.w	8002ff4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0310 	and.w	r3, r3, #16
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 8087 	beq.w	8002ff4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eea:	2220      	movs	r2, #32
 8002eec:	409a      	lsls	r2, r3
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b05      	cmp	r3, #5
 8002efc:	d136      	bne.n	8002f6c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f022 0216 	bic.w	r2, r2, #22
 8002f0c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695a      	ldr	r2, [r3, #20]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f1c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d103      	bne.n	8002f2e <HAL_DMA_IRQHandler+0x1da>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d007      	beq.n	8002f3e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0208 	bic.w	r2, r2, #8
 8002f3c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f42:	223f      	movs	r2, #63	@ 0x3f
 8002f44:	409a      	lsls	r2, r3
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d07e      	beq.n	8003060 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	4798      	blx	r3
        }
        return;
 8002f6a:	e079      	b.n	8003060 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d01d      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10d      	bne.n	8002fa4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d031      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	4798      	blx	r3
 8002f98:	e02c      	b.n	8002ff4 <HAL_DMA_IRQHandler+0x2a0>
 8002f9a:	bf00      	nop
 8002f9c:	20000018 	.word	0x20000018
 8002fa0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d023      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	4798      	blx	r3
 8002fb4:	e01e      	b.n	8002ff4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10f      	bne.n	8002fe4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0210 	bic.w	r2, r2, #16
 8002fd2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d032      	beq.n	8003062 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003000:	f003 0301 	and.w	r3, r3, #1
 8003004:	2b00      	cmp	r3, #0
 8003006:	d022      	beq.n	800304e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2205      	movs	r2, #5
 800300c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	3301      	adds	r3, #1
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	429a      	cmp	r2, r3
 800302a:	d307      	bcc.n	800303c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f2      	bne.n	8003020 <HAL_DMA_IRQHandler+0x2cc>
 800303a:	e000      	b.n	800303e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800303c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	4798      	blx	r3
 800305e:	e000      	b.n	8003062 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003060:	bf00      	nop
    }
  }
}
 8003062:	3718      	adds	r7, #24
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003068:	b480      	push	{r7}
 800306a:	b083      	sub	sp, #12
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003074:	4618      	mov	r0, r3
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003080:	b480      	push	{r7}
 8003082:	b085      	sub	sp, #20
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
 800308c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800309c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	683a      	ldr	r2, [r7, #0]
 80030a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b40      	cmp	r3, #64	@ 0x40
 80030ac:	d108      	bne.n	80030c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68ba      	ldr	r2, [r7, #8]
 80030bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030be:	e007      	b.n	80030d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	60da      	str	r2, [r3, #12]
}
 80030d0:	bf00      	nop
 80030d2:	3714      	adds	r7, #20
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	b2db      	uxtb	r3, r3
 80030ea:	3b10      	subs	r3, #16
 80030ec:	4a14      	ldr	r2, [pc, #80]	@ (8003140 <DMA_CalcBaseAndBitshift+0x64>)
 80030ee:	fba2 2303 	umull	r2, r3, r2, r3
 80030f2:	091b      	lsrs	r3, r3, #4
 80030f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80030f6:	4a13      	ldr	r2, [pc, #76]	@ (8003144 <DMA_CalcBaseAndBitshift+0x68>)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	4413      	add	r3, r2
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b03      	cmp	r3, #3
 8003108:	d909      	bls.n	800311e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003112:	f023 0303 	bic.w	r3, r3, #3
 8003116:	1d1a      	adds	r2, r3, #4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	659a      	str	r2, [r3, #88]	@ 0x58
 800311c:	e007      	b.n	800312e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003126:	f023 0303 	bic.w	r3, r3, #3
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003132:	4618      	mov	r0, r3
 8003134:	3714      	adds	r7, #20
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	aaaaaaab 	.word	0xaaaaaaab
 8003144:	08025108 	.word	0x08025108

08003148 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003148:	b480      	push	{r7}
 800314a:	b085      	sub	sp, #20
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003150:	2300      	movs	r3, #0
 8003152:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003158:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d11f      	bne.n	80031a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b03      	cmp	r3, #3
 8003166:	d856      	bhi.n	8003216 <DMA_CheckFifoParam+0xce>
 8003168:	a201      	add	r2, pc, #4	@ (adr r2, 8003170 <DMA_CheckFifoParam+0x28>)
 800316a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800316e:	bf00      	nop
 8003170:	08003181 	.word	0x08003181
 8003174:	08003193 	.word	0x08003193
 8003178:	08003181 	.word	0x08003181
 800317c:	08003217 	.word	0x08003217
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003184:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d046      	beq.n	800321a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003190:	e043      	b.n	800321a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003196:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800319a:	d140      	bne.n	800321e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031a0:	e03d      	b.n	800321e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80031aa:	d121      	bne.n	80031f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b03      	cmp	r3, #3
 80031b0:	d837      	bhi.n	8003222 <DMA_CheckFifoParam+0xda>
 80031b2:	a201      	add	r2, pc, #4	@ (adr r2, 80031b8 <DMA_CheckFifoParam+0x70>)
 80031b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031b8:	080031c9 	.word	0x080031c9
 80031bc:	080031cf 	.word	0x080031cf
 80031c0:	080031c9 	.word	0x080031c9
 80031c4:	080031e1 	.word	0x080031e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	73fb      	strb	r3, [r7, #15]
      break;
 80031cc:	e030      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d025      	beq.n	8003226 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031de:	e022      	b.n	8003226 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031e4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80031e8:	d11f      	bne.n	800322a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80031ee:	e01c      	b.n	800322a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d903      	bls.n	80031fe <DMA_CheckFifoParam+0xb6>
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	2b03      	cmp	r3, #3
 80031fa:	d003      	beq.n	8003204 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80031fc:	e018      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	73fb      	strb	r3, [r7, #15]
      break;
 8003202:	e015      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003208:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00e      	beq.n	800322e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	73fb      	strb	r3, [r7, #15]
      break;
 8003214:	e00b      	b.n	800322e <DMA_CheckFifoParam+0xe6>
      break;
 8003216:	bf00      	nop
 8003218:	e00a      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      break;
 800321a:	bf00      	nop
 800321c:	e008      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      break;
 800321e:	bf00      	nop
 8003220:	e006      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      break;
 8003222:	bf00      	nop
 8003224:	e004      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      break;
 8003226:	bf00      	nop
 8003228:	e002      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      break;   
 800322a:	bf00      	nop
 800322c:	e000      	b.n	8003230 <DMA_CheckFifoParam+0xe8>
      break;
 800322e:	bf00      	nop
    }
  } 
  
  return status; 
 8003230:	7bfb      	ldrb	r3, [r7, #15]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3714      	adds	r7, #20
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop

08003240 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e08a      	b.n	8003368 <HAL_ETH_Init+0x128>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003258:	2b00      	cmp	r3, #0
 800325a:	d106      	bne.n	800326a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2223      	movs	r2, #35	@ 0x23
 8003260:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003264:	6878      	ldr	r0, [r7, #4]
 8003266:	f006 faad 	bl	80097c4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326a:	2300      	movs	r3, #0
 800326c:	60bb      	str	r3, [r7, #8]
 800326e:	4b40      	ldr	r3, [pc, #256]	@ (8003370 <HAL_ETH_Init+0x130>)
 8003270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003272:	4a3f      	ldr	r2, [pc, #252]	@ (8003370 <HAL_ETH_Init+0x130>)
 8003274:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003278:	6453      	str	r3, [r2, #68]	@ 0x44
 800327a:	4b3d      	ldr	r3, [pc, #244]	@ (8003370 <HAL_ETH_Init+0x130>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003282:	60bb      	str	r3, [r7, #8]
 8003284:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8003286:	4b3b      	ldr	r3, [pc, #236]	@ (8003374 <HAL_ETH_Init+0x134>)
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	4a3a      	ldr	r2, [pc, #232]	@ (8003374 <HAL_ETH_Init+0x134>)
 800328c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003290:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8003292:	4b38      	ldr	r3, [pc, #224]	@ (8003374 <HAL_ETH_Init+0x134>)
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	4936      	ldr	r1, [pc, #216]	@ (8003374 <HAL_ETH_Init+0x134>)
 800329c:	4313      	orrs	r3, r2
 800329e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80032a0:	4b34      	ldr	r3, [pc, #208]	@ (8003374 <HAL_ETH_Init+0x134>)
 80032a2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	f043 0301 	orr.w	r3, r3, #1
 80032b6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80032ba:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032bc:	f7ff faa0 	bl	8002800 <HAL_GetTick>
 80032c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80032c2:	e011      	b.n	80032e8 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80032c4:	f7ff fa9c 	bl	8002800 <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80032d2:	d909      	bls.n	80032e8 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2204      	movs	r2, #4
 80032d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	22e0      	movs	r2, #224	@ 0xe0
 80032e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e03f      	b.n	8003368 <HAL_ETH_Init+0x128>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1e4      	bne.n	80032c4 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80032fa:	6878      	ldr	r0, [r7, #4]
 80032fc:	f000 ff5a 	bl	80041b4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f001 f805 	bl	8004310 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f001 f85b 	bl	80043c2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	461a      	mov	r2, r3
 8003312:	2100      	movs	r1, #0
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f000 ffc3 	bl	80042a0 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f442 7202 	orr.w	r2, r2, #520	@ 0x208
 8003328:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	6812      	ldr	r2, [r2, #0]
 8003336:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800333a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800333e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f442 1203 	orr.w	r2, r2, #2146304	@ 0x20c000
 8003352:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2210      	movs	r2, #16
 8003362:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40023800 	.word	0x40023800
 8003374:	40013800 	.word	0x40013800

08003378 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003386:	2b10      	cmp	r3, #16
 8003388:	d161      	bne.n	800344e <HAL_ETH_Start_IT+0xd6>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2223      	movs	r2, #35	@ 0x23
 800338e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2204      	movs	r2, #4
 800339c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f000 f9f4 	bl	800378c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80033ac:	2001      	movs	r0, #1
 80033ae:	f7ff fa33 	bl	8002818 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80033cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80033d0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	f043 0302 	orr.w	r3, r3, #2
 80033e4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80033e8:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fd7e 	bl	8003eec <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0208 	orr.w	r2, r2, #8
 80033fe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003408:	2001      	movs	r0, #1
 800340a:	f7ff fa05 	bl	8002818 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	68fa      	ldr	r2, [r7, #12]
 8003414:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0204 	orr.w	r2, r2, #4
 8003424:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800342e:	69db      	ldr	r3, [r3, #28]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	f443 33d0 	orr.w	r3, r3, #106496	@ 0x1a000
 8003438:	f043 03c1 	orr.w	r3, r3, #193	@ 0xc1
 800343c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003440:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2223      	movs	r2, #35	@ 0x23
 8003446:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    return HAL_OK;
 800344a:	2300      	movs	r3, #0
 800344c:	e000      	b.n	8003450 <HAL_ETH_Start_IT+0xd8>
  }
  else
  {
    return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
  }
}
 8003450:	4618      	mov	r0, r3
 8003452:	3710      	adds	r7, #16
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b086      	sub	sp, #24
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003466:	2b23      	cmp	r3, #35	@ 0x23
 8003468:	d170      	bne.n	800354c <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2223      	movs	r2, #35	@ 0x23
 800346e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800347a:	69db      	ldr	r3, [r3, #28]
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	f423 33d0 	bic.w	r3, r3, #106496	@ 0x1a000
 8003484:	f023 03c1 	bic.w	r3, r3, #193	@ 0xc1
 8003488:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800348c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	6812      	ldr	r2, [r2, #0]
 800349c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80034a0:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034a4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80034ae:	699b      	ldr	r3, [r3, #24]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6812      	ldr	r2, [r2, #0]
 80034b4:	f023 0302 	bic.w	r3, r3, #2
 80034b8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80034bc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f022 0204 	bic.w	r2, r2, #4
 80034cc:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80034d6:	2001      	movs	r0, #1
 80034d8:	f7ff f99e 	bl	8002818 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f000 fd01 	bl	8003eec <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0208 	bic.w	r2, r2, #8
 80034f8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003502:	2001      	movs	r0, #1
 8003504:	f7ff f988 	bl	8002818 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	693a      	ldr	r2, [r7, #16]
 800350e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	e00e      	b.n	8003534 <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	3212      	adds	r2, #18
 800351c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003520:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	3301      	adds	r3, #1
 8003532:	617b      	str	r3, [r7, #20]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	2b03      	cmp	r3, #3
 8003538:	d9ed      	bls.n	8003516 <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	659a      	str	r2, [r3, #88]	@ 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2210      	movs	r2, #16
 8003544:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Return function status */
    return HAL_OK;
 8003548:	2300      	movs	r3, #0
 800354a:	e000      	b.n	800354e <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
  }
}
 800354e:	4618      	mov	r0, r3
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
 800355e:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d109      	bne.n	800357a <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800356c:	f043 0201 	orr.w	r2, r3, #1
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e045      	b.n	8003606 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003580:	2b23      	cmp	r3, #35	@ 0x23
 8003582:	d13f      	bne.n	8003604 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800358c:	2201      	movs	r2, #1
 800358e:	6839      	ldr	r1, [r7, #0]
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 ff85 	bl	80044a0 <ETH_Prepare_Tx_Descriptors>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d009      	beq.n	80035b0 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a2:	f043 0202 	orr.w	r2, r3, #2
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e02a      	b.n	8003606 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 80035b0:	f3bf 8f4f 	dsb	sy
}
 80035b4:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035ba:	1c5a      	adds	r2, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	629a      	str	r2, [r3, #40]	@ 0x28
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c4:	2b03      	cmp	r3, #3
 80035c6:	d904      	bls.n	80035d2 <HAL_ETH_Transmit_IT+0x7c>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035cc:	1f1a      	subs	r2, r3, #4
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00d      	beq.n	8003600 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035ec:	461a      	mov	r2, r3
 80035ee:	2304      	movs	r3, #4
 80035f0:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80035fa:	461a      	mov	r2, r3
 80035fc:	2300      	movs	r3, #0
 80035fe:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8003600:	2300      	movs	r3, #0
 8003602:	e000      	b.n	8003606 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
  }
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b088      	sub	sp, #32
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
 8003616:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d109      	bne.n	800363a <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800362c:	f043 0201 	orr.w	r2, r3, #1
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e0a4      	b.n	8003784 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003640:	2b23      	cmp	r3, #35	@ 0x23
 8003642:	d001      	beq.n	8003648 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e09d      	b.n	8003784 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800364c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	69fa      	ldr	r2, [r7, #28]
 8003652:	3212      	adds	r2, #18
 8003654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003658:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800365e:	f1c3 0304 	rsb	r3, r3, #4
 8003662:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003664:	e066      	b.n	8003734 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8003672:	69bb      	ldr	r3, [r7, #24]
 8003674:	69da      	ldr	r2, [r3, #28]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	679a      	str	r2, [r3, #120]	@ 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <HAL_ETH_ReadData+0x88>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d03c      	beq.n	8003710 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d005      	beq.n	80036ae <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2200      	movs	r2, #0
 80036a6:	661a      	str	r2, [r3, #96]	@ 0x60
        heth->RxDescList.RxDataLength = 0;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	665a      	str	r2, [r3, #100]	@ 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	0c1b      	lsrs	r3, r3, #16
 80036b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80036b8:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80036ba:	69bb      	ldr	r3, [r7, #24]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d005      	beq.n	80036d2 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Packet ready */
        rxdataready = 1;
 80036ce:	2301      	movs	r3, #1
 80036d0:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	689a      	ldr	r2, [r3, #8]
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f103 007c 	add.w	r0, r3, #124	@ 0x7c
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f103 0180 	add.w	r1, r3, #128	@ 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80036e6:	69bb      	ldr	r3, [r7, #24]
 80036e8:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80036ea:	461a      	mov	r2, r3
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	f006 fa2a 	bl	8009b48 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f8:	1c5a      	adds	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	661a      	str	r2, [r3, #96]	@ 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	441a      	add	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	665a      	str	r2, [r3, #100]	@ 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	2200      	movs	r2, #0
 800370e:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	3301      	adds	r3, #1
 8003714:	61fb      	str	r3, [r7, #28]
 8003716:	69fb      	ldr	r3, [r7, #28]
 8003718:	2b03      	cmp	r3, #3
 800371a:	d902      	bls.n	8003722 <HAL_ETH_ReadData+0x114>
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	3b04      	subs	r3, #4
 8003720:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	69fa      	ldr	r2, [r7, #28]
 8003726:	3212      	adds	r2, #18
 8003728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800372c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	3301      	adds	r3, #1
 8003732:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8003738:	2b00      	cmp	r3, #0
 800373a:	db06      	blt.n	800374a <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	429a      	cmp	r2, r3
 8003742:	d202      	bcs.n	800374a <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8003744:	7cfb      	ldrb	r3, [r7, #19]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d08d      	beq.n	8003666 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	441a      	add	r2, r3
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	66da      	str	r2, [r3, #108]	@ 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f000 f814 	bl	800378c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	69fa      	ldr	r2, [r7, #28]
 8003768:	65da      	str	r2, [r3, #92]	@ 0x5c

  if (rxdataready == 1U)
 800376a:	7cfb      	ldrb	r3, [r7, #19]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d108      	bne.n	8003782 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	e000      	b.n	8003784 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
}
 8003784:	4618      	mov	r0, r3
 8003786:	3720      	adds	r7, #32
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8003794:	2300      	movs	r3, #0
 8003796:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8003798:	2301      	movs	r3, #1
 800379a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80037a0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	3212      	adds	r2, #18
 80037a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037ac:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037b2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80037b4:	e044      	b.n	8003840 <ETH_UpdateDescriptor+0xb4>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	6a1b      	ldr	r3, [r3, #32]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d112      	bne.n	80037e4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80037be:	f107 0308 	add.w	r3, r7, #8
 80037c2:	4618      	mov	r0, r3
 80037c4:	f006 f990 	bl	8009ae8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	74fb      	strb	r3, [r7, #19]
 80037d2:	e007      	b.n	80037e4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	461a      	mov	r2, r3
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	461a      	mov	r2, r3
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80037e4:	7cfb      	ldrb	r3, [r7, #19]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d02a      	beq.n	8003840 <ETH_UpdateDescriptor+0xb4>
    {
      if (heth->RxDescList.ItMode == 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d108      	bne.n	8003804 <ETH_UpdateDescriptor+0x78>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	6053      	str	r3, [r2, #4]
 8003802:	e005      	b.n	8003810 <ETH_UpdateDescriptor+0x84>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	695b      	ldr	r3, [r3, #20]
 8003808:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	3301      	adds	r3, #1
 8003820:	61fb      	str	r3, [r7, #28]
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	2b03      	cmp	r3, #3
 8003826:	d902      	bls.n	800382e <ETH_UpdateDescriptor+0xa2>
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	3b04      	subs	r3, #4
 800382c:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	69fa      	ldr	r2, [r7, #28]
 8003832:	3212      	adds	r2, #18
 8003834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003838:	617b      	str	r3, [r7, #20]
      desccount--;
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	3b01      	subs	r3, #1
 800383e:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d002      	beq.n	800384c <ETH_UpdateDescriptor+0xc0>
 8003846:	7cfb      	ldrb	r3, [r7, #19]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1b4      	bne.n	80037b6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003850:	69ba      	ldr	r2, [r7, #24]
 8003852:	429a      	cmp	r2, r3
 8003854:	d01a      	beq.n	800388c <ETH_UpdateDescriptor+0x100>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	3301      	adds	r3, #1
 800385a:	f003 0303 	and.w	r3, r3, #3
 800385e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8003860:	f3bf 8f5f 	dmb	sy
}
 8003864:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6919      	ldr	r1, [r3, #16]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4613      	mov	r3, r2
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	18ca      	adds	r2, r1, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800387e:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	69fa      	ldr	r2, [r7, #28]
 8003884:	669a      	str	r2, [r3, #104]	@ 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	66da      	str	r2, [r3, #108]	@ 0x6c
  }
}
 800388c:	bf00      	nop
 800388e:	3720      	adds	r7, #32
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	3318      	adds	r3, #24
 80038a0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038a6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ac:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80038ae:	2301      	movs	r3, #1
 80038b0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80038b2:	e047      	b.n	8003944 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	3b01      	subs	r3, #1
 80038bc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	3304      	adds	r3, #4
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10a      	bne.n	80038e4 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	3301      	adds	r3, #1
 80038d2:	613b      	str	r3, [r7, #16]
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d902      	bls.n	80038e0 <HAL_ETH_ReleaseTxPacket+0x4c>
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	3b04      	subs	r3, #4
 80038de:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80038e4:	7bbb      	ldrb	r3, [r7, #14]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d02c      	beq.n	8003944 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68d9      	ldr	r1, [r3, #12]
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	440b      	add	r3, r1
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	db1f      	blt.n	8003940 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	3304      	adds	r3, #4
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	4618      	mov	r0, r3
 800390e:	f006 f95b 	bl	8009bc8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	693b      	ldr	r3, [r7, #16]
 8003916:	3304      	adds	r3, #4
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	2200      	movs	r2, #0
 800391e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	3301      	adds	r3, #1
 8003924:	613b      	str	r3, [r7, #16]
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	2b03      	cmp	r3, #3
 800392a:	d902      	bls.n	8003932 <HAL_ETH_ReleaseTxPacket+0x9e>
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	3b04      	subs	r3, #4
 8003930:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	629a      	str	r2, [r3, #40]	@ 0x28
        dmatxdesclist->releaseIndex = idx;
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	693a      	ldr	r2, [r7, #16]
 800393c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800393e:	e001      	b.n	8003944 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_ETH_ReleaseTxPacket+0xbc>
 800394a:	7bfb      	ldrb	r3, [r7, #15]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1b1      	bne.n	80038b4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3718      	adds	r7, #24
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396a:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8003984:	4b4b      	ldr	r3, [pc, #300]	@ (8003ab4 <HAL_ETH_IRQHandler+0x158>)
 8003986:	695b      	ldr	r3, [r3, #20]
 8003988:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00e      	beq.n	80039b2 <HAL_ETH_IRQHandler+0x56>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800399a:	2b00      	cmp	r3, #0
 800399c:	d009      	beq.n	80039b2 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039a6:	461a      	mov	r2, r3
 80039a8:	4b43      	ldr	r3, [pc, #268]	@ (8003ab8 <HAL_ETH_IRQHandler+0x15c>)
 80039aa:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f005 fc49 	bl	8009244 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d00f      	beq.n	80039dc <HAL_ETH_IRQHandler+0x80>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80039ce:	461a      	mov	r2, r3
 80039d0:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 80039d4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f005 fc44 	bl	8009264 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d042      	beq.n	8003a6c <HAL_ETH_IRQHandler+0x110>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d03d      	beq.n	8003a6c <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039f6:	f043 0208 	orr.w	r2, r3, #8
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8003a00:	693b      	ldr	r3, [r7, #16]
 8003a02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d01a      	beq.n	8003a40 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a12:	695a      	ldr	r2, [r3, #20]
 8003a14:	4b29      	ldr	r3, [pc, #164]	@ (8003abc <HAL_ETH_IRQHandler+0x160>)
 8003a16:	4013      	ands	r3, r2
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	6812      	ldr	r2, [r2, #0]
 8003a2c:	f423 33c0 	bic.w	r3, r3, #98304	@ 0x18000
 8003a30:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003a34:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	22e0      	movs	r2, #224	@ 0xe0
 8003a3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8003a3e:	e012      	b.n	8003a66 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a48:	695a      	ldr	r2, [r3, #20]
 8003a4a:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003a4e:	4013      	ands	r3, r2
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f248 6380 	movw	r3, #34432	@ 0x8680
 8003a64:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f005 fc0c 	bl	8009284 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00e      	beq.n	8003a94 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7c:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 f81a 	bl	8003ac0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d006      	beq.n	8003aac <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8003a9e:	4b05      	ldr	r3, [pc, #20]	@ (8003ab4 <HAL_ETH_IRQHandler+0x158>)
 8003aa0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8003aa4:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 f814 	bl	8003ad4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8003aac:	bf00      	nop
 8003aae:	3718      	adds	r7, #24
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	40013c00 	.word	0x40013c00
 8003ab8:	00010040 	.word	0x00010040
 8003abc:	007e2000 	.word	0x007e2000

08003ac0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f003 031c 	and.w	r3, r3, #28
 8003b04:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	02db      	lsls	r3, r3, #11
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	697a      	ldr	r2, [r7, #20]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	019b      	lsls	r3, r3, #6
 8003b16:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f023 0302 	bic.w	r3, r3, #2
 8003b26:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	697a      	ldr	r2, [r7, #20]
 8003b36:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8003b38:	f7fe fe62 	bl	8002800 <HAL_GetTick>
 8003b3c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003b3e:	e00d      	b.n	8003b5c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8003b40:	f7fe fe5e 	bl	8002800 <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b4e:	d301      	bcc.n	8003b54 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	e010      	b.n	8003b76 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1ec      	bne.n	8003b40 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	461a      	mov	r2, r3
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8003b74:	2300      	movs	r3, #0
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3718      	adds	r7, #24
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b086      	sub	sp, #24
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
 8003b8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f003 031c 	and.w	r3, r3, #28
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	02db      	lsls	r3, r3, #11
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	019b      	lsls	r3, r3, #6
 8003bac:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8003bb0:	697a      	ldr	r2, [r7, #20]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f043 0302 	orr.w	r3, r3, #2
 8003bbc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003bbe:	697b      	ldr	r3, [r7, #20]
 8003bc0:	f043 0301 	orr.w	r3, r3, #1
 8003bc4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003bd8:	f7fe fe12 	bl	8002800 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003bde:	e00d      	b.n	8003bfc <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8003be0:	f7fe fe0e 	bl	8002800 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bee:	d301      	bcc.n	8003bf4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e009      	b.n	8003c08 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1ec      	bne.n	8003be0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8003c06:	2300      	movs	r3, #0
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3718      	adds	r7, #24
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	bd80      	pop	{r7, pc}

08003c10 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b083      	sub	sp, #12
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d101      	bne.n	8003c24 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e0e6      	b.n	8003df2 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0310 	and.w	r3, r3, #16
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	bf14      	ite	ne
 8003c32:	2301      	movne	r3, #1
 8003c34:	2300      	moveq	r3, #0
 8003c36:	b2db      	uxtb	r3, r3
 8003c38:	461a      	mov	r2, r3
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	625a      	str	r2, [r3, #36]	@ 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf0c      	ite	eq
 8003c5c:	2301      	moveq	r3, #1
 8003c5e:	2300      	movne	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
                                        ? ENABLE : DISABLE;
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	bf0c      	ite	eq
 8003c92:	2301      	moveq	r3, #1
 8003c94:	2300      	movne	r3, #0
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	461a      	mov	r2, r3
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	bf14      	ite	ne
 8003cac:	2301      	movne	r3, #1
 8003cae:	2300      	moveq	r3, #0
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 6200 	and.w	r2, r3, #2048	@ 0x800
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	bf0c      	ite	eq
 8003cfc:	2301      	moveq	r3, #1
 8003cfe:	2300      	movne	r3, #0
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	461a      	mov	r2, r3
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	bf14      	ite	ne
 8003d16:	2301      	movne	r3, #1
 8003d18:	2300      	moveq	r3, #0
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	461a      	mov	r2, r3
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 2260 	and.w	r2, r3, #917504	@ 0xe0000
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	bf14      	ite	ne
 8003d3e:	2301      	movne	r3, #1
 8003d40:	2300      	moveq	r3, #0
 8003d42:	b2db      	uxtb	r3, r3
 8003d44:	461a      	mov	r2, r3
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	bf14      	ite	ne
 8003d58:	2301      	movne	r3, #1
 8003d5a:	2300      	moveq	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	461a      	mov	r2, r3
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	bf14      	ite	ne
 8003d72:	2301      	movne	r3, #1
 8003d74:	2300      	moveq	r3, #0
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	699b      	ldr	r3, [r3, #24]
 8003d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	bf0c      	ite	eq
 8003d8e:	2301      	moveq	r3, #1
 8003d90:	2300      	movne	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	461a      	mov	r2, r3
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	651a      	str	r2, [r3, #80]	@ 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	0c1b      	lsrs	r3, r3, #16
 8003db2:	b29a      	uxth	r2, r3
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	649a      	str	r2, [r3, #72]	@ 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f003 0304 	and.w	r3, r3, #4
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	bf14      	ite	ne
 8003dc6:	2301      	movne	r3, #1
 8003dc8:	2300      	moveq	r3, #0
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	461a      	mov	r2, r3
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	bf14      	ite	ne
 8003de2:	2301      	movne	r3, #1
 8003de4:	2300      	moveq	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

  return HAL_OK;
 8003df0:	2300      	movs	r3, #0
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	370c      	adds	r7, #12
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr

08003dfe <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	6078      	str	r0, [r7, #4]
 8003e06:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e00b      	b.n	8003e2a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003e18:	2b10      	cmp	r3, #16
 8003e1a:	d105      	bne.n	8003e28 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8003e1c:	6839      	ldr	r1, [r7, #0]
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f000 f88a 	bl	8003f38 <ETH_SetMACConfig>

    return HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	e000      	b.n	8003e2a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
  }
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
	...

08003e34 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 031c 	bic.w	r3, r3, #28
 8003e4a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003e4c:	f001 fa30 	bl	80052b0 <HAL_RCC_GetHCLKFreq>
 8003e50:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	4a14      	ldr	r2, [pc, #80]	@ (8003ea8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d804      	bhi.n	8003e64 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	f043 0308 	orr.w	r3, r3, #8
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	e019      	b.n	8003e98 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	4a11      	ldr	r2, [pc, #68]	@ (8003eac <HAL_ETH_SetMDIOClockRange+0x78>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d204      	bcs.n	8003e76 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f043 030c 	orr.w	r3, r3, #12
 8003e72:	60fb      	str	r3, [r7, #12]
 8003e74:	e010      	b.n	8003e98 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	4a0d      	ldr	r2, [pc, #52]	@ (8003eb0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d90c      	bls.n	8003e98 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	4a0c      	ldr	r2, [pc, #48]	@ (8003eb4 <HAL_ETH_SetMDIOClockRange+0x80>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d804      	bhi.n	8003e90 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f043 0304 	orr.w	r3, r3, #4
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	e003      	b.n	8003e98 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f043 0310 	orr.w	r3, r3, #16
 8003e96:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	611a      	str	r2, [r3, #16]
}
 8003ea0:	bf00      	nop
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	02160ebf 	.word	0x02160ebf
 8003eac:	03938700 	.word	0x03938700
 8003eb0:	05f5e0ff 	.word	0x05f5e0ff
 8003eb4:	08f0d17f 	.word	0x08f0d17f

08003eb8 <HAL_ETH_GetError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH Error Code
  */
uint32_t HAL_ETH_GetError(const ETH_HandleTypeDef *heth)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  return heth->ErrorCode;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b083      	sub	sp, #12
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	6812      	ldr	r2, [r2, #0]
 8003f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f0a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f0e:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003f1c:	2001      	movs	r0, #1
 8003f1e:	f7fe fc7b 	bl	8002818 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8003f2c:	6193      	str	r3, [r2, #24]
}
 8003f2e:	bf00      	nop
 8003f30:	3710      	adds	r7, #16
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
	...

08003f38 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	4b53      	ldr	r3, [pc, #332]	@ (800409c <ETH_SetMACConfig+0x164>)
 8003f4e:	4013      	ands	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	7b9b      	ldrb	r3, [r3, #14]
 8003f56:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	7c12      	ldrb	r2, [r2, #16]
 8003f5c:	2a00      	cmp	r2, #0
 8003f5e:	d102      	bne.n	8003f66 <ETH_SetMACConfig+0x2e>
 8003f60:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8003f64:	e000      	b.n	8003f68 <ETH_SetMACConfig+0x30>
 8003f66:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003f68:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	7c52      	ldrb	r2, [r2, #17]
 8003f6e:	2a00      	cmp	r2, #0
 8003f70:	d102      	bne.n	8003f78 <ETH_SetMACConfig+0x40>
 8003f72:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8003f76:	e000      	b.n	8003f7a <ETH_SetMACConfig+0x42>
 8003f78:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8003f7a:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8003f80:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	7fdb      	ldrb	r3, [r3, #31]
 8003f86:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8003f88:	431a      	orrs	r2, r3
                        macconf->Speed |
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8003f8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003f90:	683a      	ldr	r2, [r7, #0]
 8003f92:	7f92      	ldrb	r2, [r2, #30]
 8003f94:	2a00      	cmp	r2, #0
 8003f96:	d102      	bne.n	8003f9e <ETH_SetMACConfig+0x66>
 8003f98:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f9c:	e000      	b.n	8003fa0 <ETH_SetMACConfig+0x68>
 8003f9e:	2200      	movs	r2, #0
                        macconf->Speed |
 8003fa0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	7f1b      	ldrb	r3, [r3, #28]
 8003fa6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8003fa8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8003fae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	791b      	ldrb	r3, [r3, #4]
 8003fb4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8003fb6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003fb8:	683a      	ldr	r2, [r7, #0]
 8003fba:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003fbe:	2a00      	cmp	r2, #0
 8003fc0:	d102      	bne.n	8003fc8 <ETH_SetMACConfig+0x90>
 8003fc2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003fc6:	e000      	b.n	8003fca <ETH_SetMACConfig+0x92>
 8003fc8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8003fca:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	7bdb      	ldrb	r3, [r3, #15]
 8003fd0:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8003fd2:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8003fd8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fe0:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003ffa:	2001      	movs	r0, #1
 8003ffc:	f7fe fc0c 	bl	8002818 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68fa      	ldr	r2, [r7, #12]
 8004006:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	699b      	ldr	r3, [r3, #24]
 800400e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	f64f 7341 	movw	r3, #65345	@ 0xff41
 8004016:	4013      	ands	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800401e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8004026:	2a00      	cmp	r2, #0
 8004028:	d101      	bne.n	800402e <ETH_SetMACConfig+0xf6>
 800402a:	2280      	movs	r2, #128	@ 0x80
 800402c:	e000      	b.n	8004030 <ETH_SetMACConfig+0xf8>
 800402e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8004030:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8004036:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8004038:	683a      	ldr	r2, [r7, #0]
 800403a:	f892 2055 	ldrb.w	r2, [r2, #85]	@ 0x55
 800403e:	2a01      	cmp	r2, #1
 8004040:	d101      	bne.n	8004046 <ETH_SetMACConfig+0x10e>
 8004042:	2208      	movs	r2, #8
 8004044:	e000      	b.n	8004048 <ETH_SetMACConfig+0x110>
 8004046:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8004048:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	f892 2056 	ldrb.w	r2, [r2, #86]	@ 0x56
 8004050:	2a01      	cmp	r2, #1
 8004052:	d101      	bne.n	8004058 <ETH_SetMACConfig+0x120>
 8004054:	2204      	movs	r2, #4
 8004056:	e000      	b.n	800405a <ETH_SetMACConfig+0x122>
 8004058:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800405a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800405c:	683a      	ldr	r2, [r7, #0]
 800405e:	f892 2054 	ldrb.w	r2, [r2, #84]	@ 0x54
 8004062:	2a01      	cmp	r2, #1
 8004064:	d101      	bne.n	800406a <ETH_SetMACConfig+0x132>
 8004066:	2202      	movs	r2, #2
 8004068:	e000      	b.n	800406c <ETH_SetMACConfig+0x134>
 800406a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800406c:	4313      	orrs	r3, r2
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4313      	orrs	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004084:	2001      	movs	r0, #1
 8004086:	f7fe fbc7 	bl	8002818 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	619a      	str	r2, [r3, #24]
}
 8004092:	bf00      	nop
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}
 800409a:	bf00      	nop
 800409c:	fd20810f 	.word	0xfd20810f

080040a0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	4b3d      	ldr	r3, [pc, #244]	@ (80041b0 <ETH_SetDMAConfig+0x110>)
 80040ba:	4013      	ands	r3, r2
 80040bc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	7b1b      	ldrb	r3, [r3, #12]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d102      	bne.n	80040cc <ETH_SetDMAConfig+0x2c>
 80040c6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80040ca:	e000      	b.n	80040ce <ETH_SetDMAConfig+0x2e>
 80040cc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	7b5b      	ldrb	r3, [r3, #13]
 80040d2:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80040d4:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	7f52      	ldrb	r2, [r2, #29]
 80040da:	2a00      	cmp	r2, #0
 80040dc:	d102      	bne.n	80040e4 <ETH_SetDMAConfig+0x44>
 80040de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80040e2:	e000      	b.n	80040e6 <ETH_SetDMAConfig+0x46>
 80040e4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80040e6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	7b9b      	ldrb	r3, [r3, #14]
 80040ec:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80040ee:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80040f4:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	7f1b      	ldrb	r3, [r3, #28]
 80040fa:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80040fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	7f9b      	ldrb	r3, [r3, #30]
 8004102:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8004104:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800410a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004112:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8004114:	4313      	orrs	r3, r2
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004124:	461a      	mov	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004136:	2001      	movs	r0, #1
 8004138:	f7fe fb6e 	bl	8002818 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004144:	461a      	mov	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	791b      	ldrb	r3, [r3, #4]
 800414e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8004154:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800415a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8004160:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004168:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800416a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004170:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8004172:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8004178:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6812      	ldr	r2, [r2, #0]
 800417e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004182:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8004186:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8004194:	2001      	movs	r0, #1
 8004196:	f7fe fb3f 	bl	8002818 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80041a2:	461a      	mov	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6013      	str	r3, [r2, #0]
}
 80041a8:	bf00      	nop
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	f8de3f23 	.word	0xf8de3f23

080041b4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b0a6      	sub	sp, #152	@ 0x98
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  macDefaultConf.Jabber = ENABLE;
 80041c2:	2301      	movs	r3, #1
 80041c4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80041c8:	2300      	movs	r3, #0
 80041ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80041cc:	2300      	movs	r3, #0
 80041ce:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80041d2:	2301      	movs	r3, #1
 80041d4:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80041d8:	2300      	movs	r3, #0
 80041da:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80041ea:	2300      	movs	r3, #0
 80041ec:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80041f6:	2300      	movs	r3, #0
 80041f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80041fa:	2300      	movs	r3, #0
 80041fc:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8004200:	2300      	movs	r3, #0
 8004202:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8004204:	2300      	movs	r3, #0
 8004206:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800420a:	2300      	movs	r3, #0
 800420c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004210:	2300      	movs	r3, #0
 8004212:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004216:	2300      	movs	r3, #0
 8004218:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800421c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004220:	64bb      	str	r3, [r7, #72]	@ 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004222:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004226:	64fb      	str	r3, [r7, #76]	@ 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004228:	2300      	movs	r3, #0
 800422a:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800422e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8004232:	4619      	mov	r1, r3
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7ff fe7f 	bl	8003f38 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800423a:	2301      	movs	r3, #1
 800423c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800423e:	2301      	movs	r3, #1
 8004240:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8004242:	2301      	movs	r3, #1
 8004244:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8004248:	2301      	movs	r3, #1
 800424a:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800424c:	2300      	movs	r3, #0
 800424e:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8004250:	2300      	movs	r3, #0
 8004252:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8004256:	2300      	movs	r3, #0
 8004258:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800425c:	2300      	movs	r3, #0
 800425e:	62bb      	str	r3, [r7, #40]	@ 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8004260:	2301      	movs	r3, #1
 8004262:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004266:	2301      	movs	r3, #1
 8004268:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800426a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800426e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004270:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004274:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004276:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800427a:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800427c:	2301      	movs	r3, #1
 800427e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8004282:	2300      	movs	r3, #0
 8004284:	633b      	str	r3, [r7, #48]	@ 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8004286:	2300      	movs	r3, #0
 8004288:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800428a:	f107 0308 	add.w	r3, r7, #8
 800428e:	4619      	mov	r1, r3
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f7ff ff05 	bl	80040a0 <ETH_SetDMAConfig>
}
 8004296:	bf00      	nop
 8004298:	3798      	adds	r7, #152	@ 0x98
 800429a:	46bd      	mov	sp, r7
 800429c:	bd80      	pop	{r7, pc}
	...

080042a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b087      	sub	sp, #28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3305      	adds	r3, #5
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	021b      	lsls	r3, r3, #8
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	3204      	adds	r2, #4
 80042b8:	7812      	ldrb	r2, [r2, #0]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	4b11      	ldr	r3, [pc, #68]	@ (8004308 <ETH_MACAddressConfig+0x68>)
 80042c2:	4413      	add	r3, r2
 80042c4:	461a      	mov	r2, r3
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3303      	adds	r3, #3
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	061a      	lsls	r2, r3, #24
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3302      	adds	r3, #2
 80042d6:	781b      	ldrb	r3, [r3, #0]
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3301      	adds	r3, #1
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	021b      	lsls	r3, r3, #8
 80042e4:	4313      	orrs	r3, r2
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	7812      	ldrb	r2, [r2, #0]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	4b06      	ldr	r3, [pc, #24]	@ (800430c <ETH_MACAddressConfig+0x6c>)
 80042f2:	4413      	add	r3, r2
 80042f4:	461a      	mov	r2, r3
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	6013      	str	r3, [r2, #0]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	40028040 	.word	0x40028040
 800430c:	40028044 	.word	0x40028044

08004310 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004310:	b480      	push	{r7}
 8004312:	b085      	sub	sp, #20
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004318:	2300      	movs	r3, #0
 800431a:	60fb      	str	r3, [r7, #12]
 800431c:	e03e      	b.n	800439c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68d9      	ldr	r1, [r3, #12]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	00db      	lsls	r3, r3, #3
 800432c:	440b      	add	r3, r1
 800432e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2200      	movs	r2, #0
 8004334:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	2200      	movs	r2, #0
 800433a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2200      	movs	r2, #0
 8004340:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	2200      	movs	r2, #0
 8004346:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004348:	68b9      	ldr	r1, [r7, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	3206      	adds	r2, #6
 8004350:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d80c      	bhi.n	8004380 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68d9      	ldr	r1, [r3, #12]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	1c5a      	adds	r2, r3, #1
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	00db      	lsls	r3, r3, #3
 8004376:	440b      	add	r3, r1
 8004378:	461a      	mov	r2, r3
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	60da      	str	r2, [r3, #12]
 800437e:	e004      	b.n	800438a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	461a      	mov	r2, r3
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f443 0240 	orr.w	r2, r3, #12582912	@ 0xc00000
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	3301      	adds	r3, #1
 800439a:	60fb      	str	r3, [r7, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b03      	cmp	r3, #3
 80043a0:	d9bd      	bls.n	800431e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68da      	ldr	r2, [r3, #12]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80043b4:	611a      	str	r2, [r3, #16]
}
 80043b6:	bf00      	nop
 80043b8:	3714      	adds	r7, #20
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr

080043c2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b085      	sub	sp, #20
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	e048      	b.n	8004462 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6919      	ldr	r1, [r3, #16]
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	4613      	mov	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	4413      	add	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	440b      	add	r3, r1
 80043e0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	2200      	movs	r2, #0
 80043ec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2200      	movs	r2, #0
 80043f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2200      	movs	r2, #0
 80043f8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	2200      	movs	r2, #0
 80043fe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	2200      	movs	r2, #0
 8004404:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800440c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004426:	68b9      	ldr	r1, [r7, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	3212      	adds	r2, #18
 800442e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b02      	cmp	r3, #2
 8004436:	d80c      	bhi.n	8004452 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6919      	ldr	r1, [r3, #16]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	1c5a      	adds	r2, r3, #1
 8004440:	4613      	mov	r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	4413      	add	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	440b      	add	r3, r1
 800444a:	461a      	mov	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	60da      	str	r2, [r3, #12]
 8004450:	e004      	b.n	800445c <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	461a      	mov	r2, r3
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3301      	adds	r3, #1
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2b03      	cmp	r3, #3
 8004466:	d9b3      	bls.n	80043d0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	691a      	ldr	r2, [r3, #16]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004492:	60da      	str	r2, [r3, #12]
}
 8004494:	bf00      	nop
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b091      	sub	sp, #68	@ 0x44
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	3318      	adds	r3, #24
 80044b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 80044b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80044b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80044be:	2300      	movs	r3, #0
 80044c0:	637b      	str	r3, [r7, #52]	@ 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80044c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80044c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044ca:	633b      	str	r3, [r7, #48]	@ 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t           bd_count = 0;
 80044d2:	2300      	movs	r3, #0
 80044d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80044d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80044de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80044e2:	d007      	beq.n	80044f4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80044e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044e8:	3304      	adds	r3, #4
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	4413      	add	r3, r2
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d001      	beq.n	80044f8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80044f4:	2302      	movs	r3, #2
 80044f6:	e115      	b.n	8004724 <ETH_Prepare_Tx_Descriptors+0x284>
  }


  descnbr += 1U;
 80044f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044fa:	3301      	adds	r3, #1
 80044fc:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80044fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	461a      	mov	r2, r3
 8004504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004506:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8004508:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8004510:	f023 031f 	bic.w	r3, r3, #31
 8004514:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004516:	6852      	ldr	r2, [r2, #4]
 8004518:	431a      	orrs	r2, r3
 800451a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0301 	and.w	r3, r3, #1
 8004526:	2b00      	cmp	r3, #0
 8004528:	d008      	beq.n	800453c <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800452a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	431a      	orrs	r2, r3
 8004538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f003 0320 	and.w	r3, r3, #32
 8004544:	2b00      	cmp	r3, #0
 8004546:	d008      	beq.n	800455a <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8004548:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	431a      	orrs	r2, r3
 8004556:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004558:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800455a:	68bb      	ldr	r3, [r7, #8]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	d005      	beq.n	8004572 <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8004566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800456e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004570:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8004572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800457a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800457c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800457e:	e084      	b.n	800468a <ETH_Prepare_Tx_Descriptors+0x1ea>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8004580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8004588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d006      	beq.n	80045a0 <ETH_Prepare_Tx_Descriptors+0x100>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8004592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800459a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	e005      	b.n	80045ac <ETH_Prepare_Tx_Descriptors+0x10c>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80045a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80045a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045aa:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80045ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ae:	3301      	adds	r3, #1
 80045b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80045b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045b4:	2b03      	cmp	r3, #3
 80045b6:	d902      	bls.n	80045be <ETH_Prepare_Tx_Descriptors+0x11e>
 80045b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045ba:	3b04      	subs	r3, #4
 80045bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80045be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045c6:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80045c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80045d4:	d007      	beq.n	80045e6 <ETH_Prepare_Tx_Descriptors+0x146>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80045d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045da:	3304      	adds	r3, #4
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4413      	add	r3, r2
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d029      	beq.n	800463a <ETH_Prepare_Tx_Descriptors+0x19a>
    {
      descidx = firstdescidx;
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80045ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045f2:	633b      	str	r3, [r7, #48]	@ 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80045f4:	2300      	movs	r3, #0
 80045f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80045f8:	e019      	b.n	800462e <ETH_Prepare_Tx_Descriptors+0x18e>
  __ASM volatile ("dmb 0xF":::"memory");
 80045fa:	f3bf 8f5f 	dmb	sy
}
 80045fe:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8004600:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460a:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800460c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800460e:	3301      	adds	r3, #1
 8004610:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004614:	2b03      	cmp	r3, #3
 8004616:	d902      	bls.n	800461e <ETH_Prepare_Tx_Descriptors+0x17e>
 8004618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800461a:	3b04      	subs	r3, #4
 800461c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800461e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004620:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004626:	633b      	str	r3, [r7, #48]	@ 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8004628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800462a:	3301      	adds	r3, #1
 800462c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800462e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004632:	429a      	cmp	r2, r3
 8004634:	d3e1      	bcc.n	80045fa <ETH_Prepare_Tx_Descriptors+0x15a>
      }

      return HAL_ETH_ERROR_BUSY;
 8004636:	2302      	movs	r3, #2
 8004638:	e074      	b.n	8004724 <ETH_Prepare_Tx_Descriptors+0x284>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800463a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004644:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8004646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004648:	3301      	adds	r3, #1
 800464a:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800464c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8004652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	461a      	mov	r2, r3
 8004658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800465c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f423 53ff 	bic.w	r3, r3, #8160	@ 0x1fe0
 8004664:	f023 031f 	bic.w	r3, r3, #31
 8004668:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800466a:	6852      	ldr	r2, [r2, #4]
 800466c:	431a      	orrs	r2, r3
 800466e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004670:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8004672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004674:	3301      	adds	r3, #1
 8004676:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8004678:	f3bf 8f5f 	dmb	sy
}
 800467c:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800467e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004688:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800468a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	f47f af76 	bne.w	8004580 <ETH_Prepare_Tx_Descriptors+0xe0>
  }

  if (ItMode != ((uint32_t)RESET))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d006      	beq.n	80046a8 <ETH_Prepare_Tx_Descriptors+0x208>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800469a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80046a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a4:	601a      	str	r2, [r3, #0]
 80046a6:	e005      	b.n	80046b4 <ETH_Prepare_Tx_Descriptors+0x214>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80046a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80046b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b2:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80046b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80046bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046be:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80046c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046c2:	6a3a      	ldr	r2, [r7, #32]
 80046c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046c8:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80046ca:	f3bf 8f5f 	dmb	sy
}
 80046ce:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80046d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80046d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046da:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80046dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046e4:	3304      	adds	r3, #4
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80046ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ee:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046f0:	611a      	str	r2, [r3, #16]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80046f2:	f3ef 8310 	mrs	r3, PRIMASK
 80046f6:	613b      	str	r3, [r7, #16]
  return(result);
 80046f8:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80046fa:	61fb      	str	r3, [r7, #28]
 80046fc:	2301      	movs	r3, #1
 80046fe:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f383 8810 	msr	PRIMASK, r3
}
 8004706:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8004708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800470a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800470c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470e:	4413      	add	r3, r2
 8004710:	1c5a      	adds	r2, r3, #1
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004714:	629a      	str	r2, [r3, #40]	@ 0x28
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800471a:	69bb      	ldr	r3, [r7, #24]
 800471c:	f383 8810 	msr	PRIMASK, r3
}
 8004720:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3744      	adds	r7, #68	@ 0x44
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr

08004730 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004730:	b480      	push	{r7}
 8004732:	b089      	sub	sp, #36	@ 0x24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800473a:	2300      	movs	r3, #0
 800473c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800473e:	2300      	movs	r3, #0
 8004740:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004742:	2300      	movs	r3, #0
 8004744:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004746:	2300      	movs	r3, #0
 8004748:	61fb      	str	r3, [r7, #28]
 800474a:	e16b      	b.n	8004a24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800474c:	2201      	movs	r2, #1
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	fa02 f303 	lsl.w	r3, r2, r3
 8004754:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4013      	ands	r3, r2
 800475e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	429a      	cmp	r2, r3
 8004766:	f040 815a 	bne.w	8004a1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f003 0303 	and.w	r3, r3, #3
 8004772:	2b01      	cmp	r3, #1
 8004774:	d005      	beq.n	8004782 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800477e:	2b02      	cmp	r3, #2
 8004780:	d130      	bne.n	80047e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	005b      	lsls	r3, r3, #1
 800478c:	2203      	movs	r2, #3
 800478e:	fa02 f303 	lsl.w	r3, r2, r3
 8004792:	43db      	mvns	r3, r3
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	4013      	ands	r3, r2
 8004798:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	69fb      	ldr	r3, [r7, #28]
 80047a0:	005b      	lsls	r3, r3, #1
 80047a2:	fa02 f303 	lsl.w	r3, r2, r3
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	4313      	orrs	r3, r2
 80047aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	69ba      	ldr	r2, [r7, #24]
 80047b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047b8:	2201      	movs	r2, #1
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	43db      	mvns	r3, r3
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	4013      	ands	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	091b      	lsrs	r3, r3, #4
 80047ce:	f003 0201 	and.w	r2, r3, #1
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69ba      	ldr	r2, [r7, #24]
 80047e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	f003 0303 	and.w	r3, r3, #3
 80047ec:	2b03      	cmp	r3, #3
 80047ee:	d017      	beq.n	8004820 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	005b      	lsls	r3, r3, #1
 80047fa:	2203      	movs	r2, #3
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	43db      	mvns	r3, r3
 8004802:	69ba      	ldr	r2, [r7, #24]
 8004804:	4013      	ands	r3, r2
 8004806:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4313      	orrs	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f003 0303 	and.w	r3, r3, #3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d123      	bne.n	8004874 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	08da      	lsrs	r2, r3, #3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	3208      	adds	r2, #8
 8004834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004838:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	f003 0307 	and.w	r3, r3, #7
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	220f      	movs	r2, #15
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	43db      	mvns	r3, r3
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	4013      	ands	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	691a      	ldr	r2, [r3, #16]
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f003 0307 	and.w	r3, r3, #7
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4313      	orrs	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	08da      	lsrs	r2, r3, #3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3208      	adds	r2, #8
 800486e:	69b9      	ldr	r1, [r7, #24]
 8004870:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	2203      	movs	r2, #3
 8004880:	fa02 f303 	lsl.w	r3, r2, r3
 8004884:	43db      	mvns	r3, r3
 8004886:	69ba      	ldr	r2, [r7, #24]
 8004888:	4013      	ands	r3, r2
 800488a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	f003 0203 	and.w	r2, r3, #3
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4313      	orrs	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 80b4 	beq.w	8004a1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048b6:	2300      	movs	r3, #0
 80048b8:	60fb      	str	r3, [r7, #12]
 80048ba:	4b60      	ldr	r3, [pc, #384]	@ (8004a3c <HAL_GPIO_Init+0x30c>)
 80048bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048be:	4a5f      	ldr	r2, [pc, #380]	@ (8004a3c <HAL_GPIO_Init+0x30c>)
 80048c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80048c6:	4b5d      	ldr	r3, [pc, #372]	@ (8004a3c <HAL_GPIO_Init+0x30c>)
 80048c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048d2:	4a5b      	ldr	r2, [pc, #364]	@ (8004a40 <HAL_GPIO_Init+0x310>)
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	089b      	lsrs	r3, r3, #2
 80048d8:	3302      	adds	r3, #2
 80048da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	220f      	movs	r2, #15
 80048ea:	fa02 f303 	lsl.w	r3, r2, r3
 80048ee:	43db      	mvns	r3, r3
 80048f0:	69ba      	ldr	r2, [r7, #24]
 80048f2:	4013      	ands	r3, r2
 80048f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a52      	ldr	r2, [pc, #328]	@ (8004a44 <HAL_GPIO_Init+0x314>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d02b      	beq.n	8004956 <HAL_GPIO_Init+0x226>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a51      	ldr	r2, [pc, #324]	@ (8004a48 <HAL_GPIO_Init+0x318>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d025      	beq.n	8004952 <HAL_GPIO_Init+0x222>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a50      	ldr	r2, [pc, #320]	@ (8004a4c <HAL_GPIO_Init+0x31c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d01f      	beq.n	800494e <HAL_GPIO_Init+0x21e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a4f      	ldr	r2, [pc, #316]	@ (8004a50 <HAL_GPIO_Init+0x320>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d019      	beq.n	800494a <HAL_GPIO_Init+0x21a>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a4e      	ldr	r2, [pc, #312]	@ (8004a54 <HAL_GPIO_Init+0x324>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d013      	beq.n	8004946 <HAL_GPIO_Init+0x216>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a4d      	ldr	r2, [pc, #308]	@ (8004a58 <HAL_GPIO_Init+0x328>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d00d      	beq.n	8004942 <HAL_GPIO_Init+0x212>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a4c      	ldr	r2, [pc, #304]	@ (8004a5c <HAL_GPIO_Init+0x32c>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d007      	beq.n	800493e <HAL_GPIO_Init+0x20e>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a4b      	ldr	r2, [pc, #300]	@ (8004a60 <HAL_GPIO_Init+0x330>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d101      	bne.n	800493a <HAL_GPIO_Init+0x20a>
 8004936:	2307      	movs	r3, #7
 8004938:	e00e      	b.n	8004958 <HAL_GPIO_Init+0x228>
 800493a:	2308      	movs	r3, #8
 800493c:	e00c      	b.n	8004958 <HAL_GPIO_Init+0x228>
 800493e:	2306      	movs	r3, #6
 8004940:	e00a      	b.n	8004958 <HAL_GPIO_Init+0x228>
 8004942:	2305      	movs	r3, #5
 8004944:	e008      	b.n	8004958 <HAL_GPIO_Init+0x228>
 8004946:	2304      	movs	r3, #4
 8004948:	e006      	b.n	8004958 <HAL_GPIO_Init+0x228>
 800494a:	2303      	movs	r3, #3
 800494c:	e004      	b.n	8004958 <HAL_GPIO_Init+0x228>
 800494e:	2302      	movs	r3, #2
 8004950:	e002      	b.n	8004958 <HAL_GPIO_Init+0x228>
 8004952:	2301      	movs	r3, #1
 8004954:	e000      	b.n	8004958 <HAL_GPIO_Init+0x228>
 8004956:	2300      	movs	r3, #0
 8004958:	69fa      	ldr	r2, [r7, #28]
 800495a:	f002 0203 	and.w	r2, r2, #3
 800495e:	0092      	lsls	r2, r2, #2
 8004960:	4093      	lsls	r3, r2
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	4313      	orrs	r3, r2
 8004966:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004968:	4935      	ldr	r1, [pc, #212]	@ (8004a40 <HAL_GPIO_Init+0x310>)
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	089b      	lsrs	r3, r3, #2
 800496e:	3302      	adds	r3, #2
 8004970:	69ba      	ldr	r2, [r7, #24]
 8004972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004976:	4b3b      	ldr	r3, [pc, #236]	@ (8004a64 <HAL_GPIO_Init+0x334>)
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	43db      	mvns	r3, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4013      	ands	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4313      	orrs	r3, r2
 8004998:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800499a:	4a32      	ldr	r2, [pc, #200]	@ (8004a64 <HAL_GPIO_Init+0x334>)
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049a0:	4b30      	ldr	r3, [pc, #192]	@ (8004a64 <HAL_GPIO_Init+0x334>)
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	43db      	mvns	r3, r3
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	4013      	ands	r3, r2
 80049ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049c4:	4a27      	ldr	r2, [pc, #156]	@ (8004a64 <HAL_GPIO_Init+0x334>)
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049ca:	4b26      	ldr	r3, [pc, #152]	@ (8004a64 <HAL_GPIO_Init+0x334>)
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	43db      	mvns	r3, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4013      	ands	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049ee:	4a1d      	ldr	r2, [pc, #116]	@ (8004a64 <HAL_GPIO_Init+0x334>)
 80049f0:	69bb      	ldr	r3, [r7, #24]
 80049f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004a64 <HAL_GPIO_Init+0x334>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	43db      	mvns	r3, r3
 80049fe:	69ba      	ldr	r2, [r7, #24]
 8004a00:	4013      	ands	r3, r2
 8004a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d003      	beq.n	8004a18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a18:	4a12      	ldr	r2, [pc, #72]	@ (8004a64 <HAL_GPIO_Init+0x334>)
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	3301      	adds	r3, #1
 8004a22:	61fb      	str	r3, [r7, #28]
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	2b0f      	cmp	r3, #15
 8004a28:	f67f ae90 	bls.w	800474c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a2c:	bf00      	nop
 8004a2e:	bf00      	nop
 8004a30:	3724      	adds	r7, #36	@ 0x24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a38:	4770      	bx	lr
 8004a3a:	bf00      	nop
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	40013800 	.word	0x40013800
 8004a44:	40020000 	.word	0x40020000
 8004a48:	40020400 	.word	0x40020400
 8004a4c:	40020800 	.word	0x40020800
 8004a50:	40020c00 	.word	0x40020c00
 8004a54:	40021000 	.word	0x40021000
 8004a58:	40021400 	.word	0x40021400
 8004a5c:	40021800 	.word	0x40021800
 8004a60:	40021c00 	.word	0x40021c00
 8004a64:	40013c00 	.word	0x40013c00

08004a68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b086      	sub	sp, #24
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d101      	bne.n	8004a7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e267      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d075      	beq.n	8004b72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a86:	4b88      	ldr	r3, [pc, #544]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f003 030c 	and.w	r3, r3, #12
 8004a8e:	2b04      	cmp	r3, #4
 8004a90:	d00c      	beq.n	8004aac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a92:	4b85      	ldr	r3, [pc, #532]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a9a:	2b08      	cmp	r3, #8
 8004a9c:	d112      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a9e:	4b82      	ldr	r3, [pc, #520]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004aa6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004aaa:	d10b      	bne.n	8004ac4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aac:	4b7e      	ldr	r3, [pc, #504]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d05b      	beq.n	8004b70 <HAL_RCC_OscConfig+0x108>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d157      	bne.n	8004b70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e242      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004acc:	d106      	bne.n	8004adc <HAL_RCC_OscConfig+0x74>
 8004ace:	4b76      	ldr	r3, [pc, #472]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a75      	ldr	r2, [pc, #468]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e01d      	b.n	8004b18 <HAL_RCC_OscConfig+0xb0>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004ae4:	d10c      	bne.n	8004b00 <HAL_RCC_OscConfig+0x98>
 8004ae6:	4b70      	ldr	r3, [pc, #448]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a6f      	ldr	r2, [pc, #444]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004aec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	4b6d      	ldr	r3, [pc, #436]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a6c      	ldr	r2, [pc, #432]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004af8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	e00b      	b.n	8004b18 <HAL_RCC_OscConfig+0xb0>
 8004b00:	4b69      	ldr	r3, [pc, #420]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a68      	ldr	r2, [pc, #416]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	4b66      	ldr	r3, [pc, #408]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a65      	ldr	r2, [pc, #404]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d013      	beq.n	8004b48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b20:	f7fd fe6e 	bl	8002800 <HAL_GetTick>
 8004b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b28:	f7fd fe6a 	bl	8002800 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b64      	cmp	r3, #100	@ 0x64
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e207      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b3a:	4b5b      	ldr	r3, [pc, #364]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0f0      	beq.n	8004b28 <HAL_RCC_OscConfig+0xc0>
 8004b46:	e014      	b.n	8004b72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b48:	f7fd fe5a 	bl	8002800 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b50:	f7fd fe56 	bl	8002800 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b64      	cmp	r3, #100	@ 0x64
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e1f3      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b62:	4b51      	ldr	r3, [pc, #324]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0xe8>
 8004b6e:	e000      	b.n	8004b72 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d063      	beq.n	8004c46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	f003 030c 	and.w	r3, r3, #12
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00b      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b8a:	4b47      	ldr	r3, [pc, #284]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d11c      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b96:	4b44      	ldr	r3, [pc, #272]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d116      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ba2:	4b41      	ldr	r3, [pc, #260]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d005      	beq.n	8004bba <HAL_RCC_OscConfig+0x152>
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	68db      	ldr	r3, [r3, #12]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d001      	beq.n	8004bba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e1c7      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bba:	4b3b      	ldr	r3, [pc, #236]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	4937      	ldr	r1, [pc, #220]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bce:	e03a      	b.n	8004c46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d020      	beq.n	8004c1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bd8:	4b34      	ldr	r3, [pc, #208]	@ (8004cac <HAL_RCC_OscConfig+0x244>)
 8004bda:	2201      	movs	r2, #1
 8004bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bde:	f7fd fe0f 	bl	8002800 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004be4:	e008      	b.n	8004bf8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be6:	f7fd fe0b 	bl	8002800 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d901      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	e1a8      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf8:	4b2b      	ldr	r3, [pc, #172]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d0f0      	beq.n	8004be6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c04:	4b28      	ldr	r3, [pc, #160]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	4925      	ldr	r1, [pc, #148]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	600b      	str	r3, [r1, #0]
 8004c18:	e015      	b.n	8004c46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c1a:	4b24      	ldr	r3, [pc, #144]	@ (8004cac <HAL_RCC_OscConfig+0x244>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c20:	f7fd fdee 	bl	8002800 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c26:	e008      	b.n	8004c3a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c28:	f7fd fdea 	bl	8002800 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	2b02      	cmp	r3, #2
 8004c34:	d901      	bls.n	8004c3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c36:	2303      	movs	r3, #3
 8004c38:	e187      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f003 0302 	and.w	r3, r3, #2
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d1f0      	bne.n	8004c28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0308 	and.w	r3, r3, #8
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d036      	beq.n	8004cc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	695b      	ldr	r3, [r3, #20]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d016      	beq.n	8004c88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c5a:	4b15      	ldr	r3, [pc, #84]	@ (8004cb0 <HAL_RCC_OscConfig+0x248>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c60:	f7fd fdce 	bl	8002800 <HAL_GetTick>
 8004c64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c66:	e008      	b.n	8004c7a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c68:	f7fd fdca 	bl	8002800 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d901      	bls.n	8004c7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c76:	2303      	movs	r3, #3
 8004c78:	e167      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ca8 <HAL_RCC_OscConfig+0x240>)
 8004c7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c7e:	f003 0302 	and.w	r3, r3, #2
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d0f0      	beq.n	8004c68 <HAL_RCC_OscConfig+0x200>
 8004c86:	e01b      	b.n	8004cc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c88:	4b09      	ldr	r3, [pc, #36]	@ (8004cb0 <HAL_RCC_OscConfig+0x248>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c8e:	f7fd fdb7 	bl	8002800 <HAL_GetTick>
 8004c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c94:	e00e      	b.n	8004cb4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c96:	f7fd fdb3 	bl	8002800 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d907      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e150      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
 8004ca8:	40023800 	.word	0x40023800
 8004cac:	42470000 	.word	0x42470000
 8004cb0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb4:	4b88      	ldr	r3, [pc, #544]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004cb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1ea      	bne.n	8004c96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0304 	and.w	r3, r3, #4
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 8097 	beq.w	8004dfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cd2:	4b81      	ldr	r3, [pc, #516]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d10f      	bne.n	8004cfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cde:	2300      	movs	r3, #0
 8004ce0:	60bb      	str	r3, [r7, #8]
 8004ce2:	4b7d      	ldr	r3, [pc, #500]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce6:	4a7c      	ldr	r2, [pc, #496]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004ce8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cec:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cee:	4b7a      	ldr	r3, [pc, #488]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cf6:	60bb      	str	r3, [r7, #8]
 8004cf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cfe:	4b77      	ldr	r3, [pc, #476]	@ (8004edc <HAL_RCC_OscConfig+0x474>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d118      	bne.n	8004d3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d0a:	4b74      	ldr	r3, [pc, #464]	@ (8004edc <HAL_RCC_OscConfig+0x474>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a73      	ldr	r2, [pc, #460]	@ (8004edc <HAL_RCC_OscConfig+0x474>)
 8004d10:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d16:	f7fd fd73 	bl	8002800 <HAL_GetTick>
 8004d1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d1e:	f7fd fd6f 	bl	8002800 <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e10c      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d30:	4b6a      	ldr	r3, [pc, #424]	@ (8004edc <HAL_RCC_OscConfig+0x474>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f0      	beq.n	8004d1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d106      	bne.n	8004d52 <HAL_RCC_OscConfig+0x2ea>
 8004d44:	4b64      	ldr	r3, [pc, #400]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d48:	4a63      	ldr	r2, [pc, #396]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d4a:	f043 0301 	orr.w	r3, r3, #1
 8004d4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d50:	e01c      	b.n	8004d8c <HAL_RCC_OscConfig+0x324>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2b05      	cmp	r3, #5
 8004d58:	d10c      	bne.n	8004d74 <HAL_RCC_OscConfig+0x30c>
 8004d5a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d5e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d60:	f043 0304 	orr.w	r3, r3, #4
 8004d64:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d66:	4b5c      	ldr	r3, [pc, #368]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6a:	4a5b      	ldr	r2, [pc, #364]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d6c:	f043 0301 	orr.w	r3, r3, #1
 8004d70:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d72:	e00b      	b.n	8004d8c <HAL_RCC_OscConfig+0x324>
 8004d74:	4b58      	ldr	r3, [pc, #352]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d78:	4a57      	ldr	r2, [pc, #348]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d7a:	f023 0301 	bic.w	r3, r3, #1
 8004d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d80:	4b55      	ldr	r3, [pc, #340]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d84:	4a54      	ldr	r2, [pc, #336]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004d86:	f023 0304 	bic.w	r3, r3, #4
 8004d8a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d015      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d94:	f7fd fd34 	bl	8002800 <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d9a:	e00a      	b.n	8004db2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d9c:	f7fd fd30 	bl	8002800 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d901      	bls.n	8004db2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004dae:	2303      	movs	r3, #3
 8004db0:	e0cb      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004db2:	4b49      	ldr	r3, [pc, #292]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d0ee      	beq.n	8004d9c <HAL_RCC_OscConfig+0x334>
 8004dbe:	e014      	b.n	8004dea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dc0:	f7fd fd1e 	bl	8002800 <HAL_GetTick>
 8004dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dc6:	e00a      	b.n	8004dde <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dc8:	f7fd fd1a 	bl	8002800 <HAL_GetTick>
 8004dcc:	4602      	mov	r2, r0
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	1ad3      	subs	r3, r2, r3
 8004dd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e0b5      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dde:	4b3e      	ldr	r3, [pc, #248]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004de0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1ee      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dea:	7dfb      	ldrb	r3, [r7, #23]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d105      	bne.n	8004dfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004df0:	4b39      	ldr	r3, [pc, #228]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df4:	4a38      	ldr	r2, [pc, #224]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	699b      	ldr	r3, [r3, #24]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	f000 80a1 	beq.w	8004f48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e06:	4b34      	ldr	r3, [pc, #208]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	f003 030c 	and.w	r3, r3, #12
 8004e0e:	2b08      	cmp	r3, #8
 8004e10:	d05c      	beq.n	8004ecc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	2b02      	cmp	r3, #2
 8004e18:	d141      	bne.n	8004e9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e1a:	4b31      	ldr	r3, [pc, #196]	@ (8004ee0 <HAL_RCC_OscConfig+0x478>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e20:	f7fd fcee 	bl	8002800 <HAL_GetTick>
 8004e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e26:	e008      	b.n	8004e3a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e28:	f7fd fcea 	bl	8002800 <HAL_GetTick>
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	2b02      	cmp	r3, #2
 8004e34:	d901      	bls.n	8004e3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e087      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e3a:	4b27      	ldr	r3, [pc, #156]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1f0      	bne.n	8004e28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	69da      	ldr	r2, [r3, #28]
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e54:	019b      	lsls	r3, r3, #6
 8004e56:	431a      	orrs	r2, r3
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e5c:	085b      	lsrs	r3, r3, #1
 8004e5e:	3b01      	subs	r3, #1
 8004e60:	041b      	lsls	r3, r3, #16
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e68:	061b      	lsls	r3, r3, #24
 8004e6a:	491b      	ldr	r1, [pc, #108]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e70:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee0 <HAL_RCC_OscConfig+0x478>)
 8004e72:	2201      	movs	r2, #1
 8004e74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e76:	f7fd fcc3 	bl	8002800 <HAL_GetTick>
 8004e7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e7c:	e008      	b.n	8004e90 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e7e:	f7fd fcbf 	bl	8002800 <HAL_GetTick>
 8004e82:	4602      	mov	r2, r0
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad3      	subs	r3, r2, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d901      	bls.n	8004e90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e8c:	2303      	movs	r3, #3
 8004e8e:	e05c      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e90:	4b11      	ldr	r3, [pc, #68]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d0f0      	beq.n	8004e7e <HAL_RCC_OscConfig+0x416>
 8004e9c:	e054      	b.n	8004f48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e9e:	4b10      	ldr	r3, [pc, #64]	@ (8004ee0 <HAL_RCC_OscConfig+0x478>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea4:	f7fd fcac 	bl	8002800 <HAL_GetTick>
 8004ea8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eac:	f7fd fca8 	bl	8002800 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e045      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ebe:	4b06      	ldr	r3, [pc, #24]	@ (8004ed8 <HAL_RCC_OscConfig+0x470>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1f0      	bne.n	8004eac <HAL_RCC_OscConfig+0x444>
 8004eca:	e03d      	b.n	8004f48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	699b      	ldr	r3, [r3, #24]
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d107      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e038      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
 8004ed8:	40023800 	.word	0x40023800
 8004edc:	40007000 	.word	0x40007000
 8004ee0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f54 <HAL_RCC_OscConfig+0x4ec>)
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	699b      	ldr	r3, [r3, #24]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d028      	beq.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d121      	bne.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f0a:	429a      	cmp	r2, r3
 8004f0c:	d11a      	bne.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f14:	4013      	ands	r3, r2
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d111      	bne.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f2a:	085b      	lsrs	r3, r3, #1
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f30:	429a      	cmp	r2, r3
 8004f32:	d107      	bne.n	8004f44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d001      	beq.n	8004f48 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f44:	2301      	movs	r3, #1
 8004f46:	e000      	b.n	8004f4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f48:	2300      	movs	r3, #0
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3718      	adds	r7, #24
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	40023800 	.word	0x40023800

08004f58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b084      	sub	sp, #16
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0cc      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f6c:	4b68      	ldr	r3, [pc, #416]	@ (8005110 <HAL_RCC_ClockConfig+0x1b8>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	683a      	ldr	r2, [r7, #0]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d90c      	bls.n	8004f94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7a:	4b65      	ldr	r3, [pc, #404]	@ (8005110 <HAL_RCC_ClockConfig+0x1b8>)
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	b2d2      	uxtb	r2, r2
 8004f80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f82:	4b63      	ldr	r3, [pc, #396]	@ (8005110 <HAL_RCC_ClockConfig+0x1b8>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0307 	and.w	r3, r3, #7
 8004f8a:	683a      	ldr	r2, [r7, #0]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d001      	beq.n	8004f94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e0b8      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f003 0302 	and.w	r3, r3, #2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d020      	beq.n	8004fe2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d005      	beq.n	8004fb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fac:	4b59      	ldr	r3, [pc, #356]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	4a58      	ldr	r2, [pc, #352]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004fb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d005      	beq.n	8004fd0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fc4:	4b53      	ldr	r3, [pc, #332]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	4a52      	ldr	r2, [pc, #328]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004fca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004fce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd0:	4b50      	ldr	r3, [pc, #320]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	494d      	ldr	r1, [pc, #308]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d044      	beq.n	8005078 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d107      	bne.n	8005006 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ff6:	4b47      	ldr	r3, [pc, #284]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d119      	bne.n	8005036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005002:	2301      	movs	r3, #1
 8005004:	e07f      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	2b02      	cmp	r3, #2
 800500c:	d003      	beq.n	8005016 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005012:	2b03      	cmp	r3, #3
 8005014:	d107      	bne.n	8005026 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005016:	4b3f      	ldr	r3, [pc, #252]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d109      	bne.n	8005036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e06f      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005026:	4b3b      	ldr	r3, [pc, #236]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e067      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005036:	4b37      	ldr	r3, [pc, #220]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	f023 0203 	bic.w	r2, r3, #3
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4934      	ldr	r1, [pc, #208]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	4313      	orrs	r3, r2
 8005046:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005048:	f7fd fbda 	bl	8002800 <HAL_GetTick>
 800504c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800504e:	e00a      	b.n	8005066 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005050:	f7fd fbd6 	bl	8002800 <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e04f      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005066:	4b2b      	ldr	r3, [pc, #172]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	f003 020c 	and.w	r2, r3, #12
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	009b      	lsls	r3, r3, #2
 8005074:	429a      	cmp	r2, r3
 8005076:	d1eb      	bne.n	8005050 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005078:	4b25      	ldr	r3, [pc, #148]	@ (8005110 <HAL_RCC_ClockConfig+0x1b8>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	429a      	cmp	r2, r3
 8005084:	d20c      	bcs.n	80050a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005086:	4b22      	ldr	r3, [pc, #136]	@ (8005110 <HAL_RCC_ClockConfig+0x1b8>)
 8005088:	683a      	ldr	r2, [r7, #0]
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800508e:	4b20      	ldr	r3, [pc, #128]	@ (8005110 <HAL_RCC_ClockConfig+0x1b8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0307 	and.w	r3, r3, #7
 8005096:	683a      	ldr	r2, [r7, #0]
 8005098:	429a      	cmp	r2, r3
 800509a:	d001      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e032      	b.n	8005106 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d008      	beq.n	80050be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050ac:	4b19      	ldr	r3, [pc, #100]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	4916      	ldr	r1, [pc, #88]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0308 	and.w	r3, r3, #8
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d009      	beq.n	80050de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050ca:	4b12      	ldr	r3, [pc, #72]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	00db      	lsls	r3, r3, #3
 80050d8:	490e      	ldr	r1, [pc, #56]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050de:	f000 f821 	bl	8005124 <HAL_RCC_GetSysClockFreq>
 80050e2:	4602      	mov	r2, r0
 80050e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005114 <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	091b      	lsrs	r3, r3, #4
 80050ea:	f003 030f 	and.w	r3, r3, #15
 80050ee:	490a      	ldr	r1, [pc, #40]	@ (8005118 <HAL_RCC_ClockConfig+0x1c0>)
 80050f0:	5ccb      	ldrb	r3, [r1, r3]
 80050f2:	fa22 f303 	lsr.w	r3, r2, r3
 80050f6:	4a09      	ldr	r2, [pc, #36]	@ (800511c <HAL_RCC_ClockConfig+0x1c4>)
 80050f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80050fa:	4b09      	ldr	r3, [pc, #36]	@ (8005120 <HAL_RCC_ClockConfig+0x1c8>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fc fede 	bl	8001ec0 <HAL_InitTick>

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3710      	adds	r7, #16
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	40023c00 	.word	0x40023c00
 8005114:	40023800 	.word	0x40023800
 8005118:	080250f0 	.word	0x080250f0
 800511c:	20000018 	.word	0x20000018
 8005120:	20000020 	.word	0x20000020

08005124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005124:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005128:	b090      	sub	sp, #64	@ 0x40
 800512a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005130:	2300      	movs	r3, #0
 8005132:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005134:	2300      	movs	r3, #0
 8005136:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800513c:	4b59      	ldr	r3, [pc, #356]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 030c 	and.w	r3, r3, #12
 8005144:	2b08      	cmp	r3, #8
 8005146:	d00d      	beq.n	8005164 <HAL_RCC_GetSysClockFreq+0x40>
 8005148:	2b08      	cmp	r3, #8
 800514a:	f200 80a1 	bhi.w	8005290 <HAL_RCC_GetSysClockFreq+0x16c>
 800514e:	2b00      	cmp	r3, #0
 8005150:	d002      	beq.n	8005158 <HAL_RCC_GetSysClockFreq+0x34>
 8005152:	2b04      	cmp	r3, #4
 8005154:	d003      	beq.n	800515e <HAL_RCC_GetSysClockFreq+0x3a>
 8005156:	e09b      	b.n	8005290 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005158:	4b53      	ldr	r3, [pc, #332]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800515a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800515c:	e09b      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800515e:	4b53      	ldr	r3, [pc, #332]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x188>)
 8005160:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005162:	e098      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005164:	4b4f      	ldr	r3, [pc, #316]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800516c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800516e:	4b4d      	ldr	r3, [pc, #308]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d028      	beq.n	80051cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800517a:	4b4a      	ldr	r3, [pc, #296]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	099b      	lsrs	r3, r3, #6
 8005180:	2200      	movs	r2, #0
 8005182:	623b      	str	r3, [r7, #32]
 8005184:	627a      	str	r2, [r7, #36]	@ 0x24
 8005186:	6a3b      	ldr	r3, [r7, #32]
 8005188:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800518c:	2100      	movs	r1, #0
 800518e:	4b47      	ldr	r3, [pc, #284]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x188>)
 8005190:	fb03 f201 	mul.w	r2, r3, r1
 8005194:	2300      	movs	r3, #0
 8005196:	fb00 f303 	mul.w	r3, r0, r3
 800519a:	4413      	add	r3, r2
 800519c:	4a43      	ldr	r2, [pc, #268]	@ (80052ac <HAL_RCC_GetSysClockFreq+0x188>)
 800519e:	fba0 1202 	umull	r1, r2, r0, r2
 80051a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051a4:	460a      	mov	r2, r1
 80051a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80051a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051aa:	4413      	add	r3, r2
 80051ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b0:	2200      	movs	r2, #0
 80051b2:	61bb      	str	r3, [r7, #24]
 80051b4:	61fa      	str	r2, [r7, #28]
 80051b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80051be:	f7fb fd63 	bl	8000c88 <__aeabi_uldivmod>
 80051c2:	4602      	mov	r2, r0
 80051c4:	460b      	mov	r3, r1
 80051c6:	4613      	mov	r3, r2
 80051c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051ca:	e053      	b.n	8005274 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051cc:	4b35      	ldr	r3, [pc, #212]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	099b      	lsrs	r3, r3, #6
 80051d2:	2200      	movs	r2, #0
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	617a      	str	r2, [r7, #20]
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80051de:	f04f 0b00 	mov.w	fp, #0
 80051e2:	4652      	mov	r2, sl
 80051e4:	465b      	mov	r3, fp
 80051e6:	f04f 0000 	mov.w	r0, #0
 80051ea:	f04f 0100 	mov.w	r1, #0
 80051ee:	0159      	lsls	r1, r3, #5
 80051f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051f4:	0150      	lsls	r0, r2, #5
 80051f6:	4602      	mov	r2, r0
 80051f8:	460b      	mov	r3, r1
 80051fa:	ebb2 080a 	subs.w	r8, r2, sl
 80051fe:	eb63 090b 	sbc.w	r9, r3, fp
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800520e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005212:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005216:	ebb2 0408 	subs.w	r4, r2, r8
 800521a:	eb63 0509 	sbc.w	r5, r3, r9
 800521e:	f04f 0200 	mov.w	r2, #0
 8005222:	f04f 0300 	mov.w	r3, #0
 8005226:	00eb      	lsls	r3, r5, #3
 8005228:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800522c:	00e2      	lsls	r2, r4, #3
 800522e:	4614      	mov	r4, r2
 8005230:	461d      	mov	r5, r3
 8005232:	eb14 030a 	adds.w	r3, r4, sl
 8005236:	603b      	str	r3, [r7, #0]
 8005238:	eb45 030b 	adc.w	r3, r5, fp
 800523c:	607b      	str	r3, [r7, #4]
 800523e:	f04f 0200 	mov.w	r2, #0
 8005242:	f04f 0300 	mov.w	r3, #0
 8005246:	e9d7 4500 	ldrd	r4, r5, [r7]
 800524a:	4629      	mov	r1, r5
 800524c:	028b      	lsls	r3, r1, #10
 800524e:	4621      	mov	r1, r4
 8005250:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005254:	4621      	mov	r1, r4
 8005256:	028a      	lsls	r2, r1, #10
 8005258:	4610      	mov	r0, r2
 800525a:	4619      	mov	r1, r3
 800525c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800525e:	2200      	movs	r2, #0
 8005260:	60bb      	str	r3, [r7, #8]
 8005262:	60fa      	str	r2, [r7, #12]
 8005264:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005268:	f7fb fd0e 	bl	8000c88 <__aeabi_uldivmod>
 800526c:	4602      	mov	r2, r0
 800526e:	460b      	mov	r3, r1
 8005270:	4613      	mov	r3, r2
 8005272:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005274:	4b0b      	ldr	r3, [pc, #44]	@ (80052a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	0c1b      	lsrs	r3, r3, #16
 800527a:	f003 0303 	and.w	r3, r3, #3
 800527e:	3301      	adds	r3, #1
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005284:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005286:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005288:	fbb2 f3f3 	udiv	r3, r2, r3
 800528c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800528e:	e002      	b.n	8005296 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005290:	4b05      	ldr	r3, [pc, #20]	@ (80052a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005292:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005294:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005298:	4618      	mov	r0, r3
 800529a:	3740      	adds	r7, #64	@ 0x40
 800529c:	46bd      	mov	sp, r7
 800529e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052a2:	bf00      	nop
 80052a4:	40023800 	.word	0x40023800
 80052a8:	00f42400 	.word	0x00f42400
 80052ac:	017d7840 	.word	0x017d7840

080052b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052b4:	4b03      	ldr	r3, [pc, #12]	@ (80052c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80052b6:	681b      	ldr	r3, [r3, #0]
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	20000018 	.word	0x20000018

080052c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052cc:	f7ff fff0 	bl	80052b0 <HAL_RCC_GetHCLKFreq>
 80052d0:	4602      	mov	r2, r0
 80052d2:	4b05      	ldr	r3, [pc, #20]	@ (80052e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	0a9b      	lsrs	r3, r3, #10
 80052d8:	f003 0307 	and.w	r3, r3, #7
 80052dc:	4903      	ldr	r1, [pc, #12]	@ (80052ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80052de:	5ccb      	ldrb	r3, [r1, r3]
 80052e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	bd80      	pop	{r7, pc}
 80052e8:	40023800 	.word	0x40023800
 80052ec:	08025100 	.word	0x08025100

080052f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052f4:	f7ff ffdc 	bl	80052b0 <HAL_RCC_GetHCLKFreq>
 80052f8:	4602      	mov	r2, r0
 80052fa:	4b05      	ldr	r3, [pc, #20]	@ (8005310 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	0b5b      	lsrs	r3, r3, #13
 8005300:	f003 0307 	and.w	r3, r3, #7
 8005304:	4903      	ldr	r1, [pc, #12]	@ (8005314 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005306:	5ccb      	ldrb	r3, [r1, r3]
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800530c:	4618      	mov	r0, r3
 800530e:	bd80      	pop	{r7, pc}
 8005310:	40023800 	.word	0x40023800
 8005314:	08025100 	.word	0x08025100

08005318 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
 8005320:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	220f      	movs	r2, #15
 8005326:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005328:	4b12      	ldr	r3, [pc, #72]	@ (8005374 <HAL_RCC_GetClockConfig+0x5c>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 0203 	and.w	r2, r3, #3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005334:	4b0f      	ldr	r3, [pc, #60]	@ (8005374 <HAL_RCC_GetClockConfig+0x5c>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005340:	4b0c      	ldr	r3, [pc, #48]	@ (8005374 <HAL_RCC_GetClockConfig+0x5c>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800534c:	4b09      	ldr	r3, [pc, #36]	@ (8005374 <HAL_RCC_GetClockConfig+0x5c>)
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	08db      	lsrs	r3, r3, #3
 8005352:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800535a:	4b07      	ldr	r3, [pc, #28]	@ (8005378 <HAL_RCC_GetClockConfig+0x60>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0207 	and.w	r2, r3, #7
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	601a      	str	r2, [r3, #0]
}
 8005366:	bf00      	nop
 8005368:	370c      	adds	r7, #12
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	40023800 	.word	0x40023800
 8005378:	40023c00 	.word	0x40023c00

0800537c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e01c      	b.n	80053c8 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	795b      	ldrb	r3, [r3, #5]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b00      	cmp	r3, #0
 8005396:	d105      	bne.n	80053a4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7fc fc22 	bl	8001be8 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2202      	movs	r2, #2
 80053a8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 0204 	orr.w	r2, r2, #4
 80053b8:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2201      	movs	r2, #1
 80053be:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <HAL_RNG_IRQHandler>:
  *                the configuration information for RNG.
  * @retval None

  */
void HAL_RNG_IRQHandler(RNG_HandleTypeDef *hrng)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t rngclockerror = 0U;
 80053d8:	2300      	movs	r3, #0
 80053da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hrng->Instance->SR;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	60bb      	str	r3, [r7, #8]

  /* RNG clock error interrupt occurred */
  if ((itflag & RNG_IT_CEI) == RNG_IT_CEI)
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	f003 0320 	and.w	r3, r3, #32
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d005      	beq.n	80053fa <HAL_RNG_IRQHandler+0x2a>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_CLOCK;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2210      	movs	r2, #16
 80053f2:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 80053f4:	2301      	movs	r3, #1
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	e009      	b.n	800540e <HAL_RNG_IRQHandler+0x3e>
  }
  else if ((itflag & RNG_IT_SEI) == RNG_IT_SEI)
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d004      	beq.n	800540e <HAL_RNG_IRQHandler+0x3e>
  {
    /* Update the error code */
    hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2208      	movs	r2, #8
 8005408:	609a      	str	r2, [r3, #8]
    rngclockerror = 1U;
 800540a:	2301      	movs	r3, #1
 800540c:	60fb      	str	r3, [r7, #12]
  else
  {
    /* Nothing to do */
  }

  if (rngclockerror == 1U)
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b01      	cmp	r3, #1
 8005412:	d10b      	bne.n	800542c <HAL_RNG_IRQHandler+0x5c>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_ERROR;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2204      	movs	r2, #4
 8005418:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback */
    hrng->ErrorCallback(hrng);
#else
    /* Call legacy weak Error callback */
    HAL_RNG_ErrorCallback(hrng);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f837 	bl	800548e <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

    /* Clear the clock error flag */
    __HAL_RNG_CLEAR_IT(hrng, RNG_IT_CEI | RNG_IT_SEI);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f06f 0260 	mvn.w	r2, #96	@ 0x60
 8005428:	605a      	str	r2, [r3, #4]

    return;
 800542a:	e022      	b.n	8005472 <HAL_RNG_IRQHandler+0xa2>
  }

  /* Check RNG data ready interrupt occurred */
  if ((itflag & RNG_IT_DRDY) == RNG_IT_DRDY)
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d01d      	beq.n	8005472 <HAL_RNG_IRQHandler+0xa2>
  {
    /* Generate random number once, so disable the IT */
    __HAL_RNG_DISABLE_IT(hrng);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0208 	bic.w	r2, r2, #8
 8005444:	601a      	str	r2, [r3, #0]

    /* Get the 32bit Random number (DRDY flag automatically cleared) */
    hrng->RandomNumber = hrng->Instance->DR;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	60da      	str	r2, [r3, #12]

    if (hrng->State != HAL_RNG_STATE_ERROR)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	795b      	ldrb	r3, [r3, #5]
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b04      	cmp	r3, #4
 8005458:	d00b      	beq.n	8005472 <HAL_RNG_IRQHandler+0xa2>
    {
      /* Change RNG peripheral state */
      hrng->State = HAL_RNG_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2201      	movs	r2, #1
 800545e:	715a      	strb	r2, [r3, #5]
      /* Process Unlocked */
      __HAL_UNLOCK(hrng);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2200      	movs	r2, #0
 8005464:	711a      	strb	r2, [r3, #4]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
      /* Call registered Data Ready callback */
      hrng->ReadyDataCallback(hrng, hrng->RandomNumber);
#else
      /* Call legacy weak Data Ready callback */
      HAL_RNG_ReadyDataCallback(hrng, hrng->RandomNumber);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	4619      	mov	r1, r3
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 f803 	bl	8005478 <HAL_RNG_ReadyDataCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
    }
  }
}
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_RNG_ReadyDataCallback>:
  *                the configuration information for RNG.
  * @param  random32bit generated random number.
  * @retval None
  */
__weak void HAL_RNG_ReadyDataCallback(RNG_HandleTypeDef *hrng, uint32_t random32bit)
{
 8005478:	b480      	push	{r7}
 800547a:	b083      	sub	sp, #12
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  UNUSED(hrng);
  UNUSED(random32bit);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ReadyDataCallback must be implemented in the user file.
   */
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e022      	b.n	80054fa <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80054ba:	b2db      	uxtb	r3, r3
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d105      	bne.n	80054cc <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2200      	movs	r2, #0
 80054c4:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7fc fbd6 	bl	8001c78 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2203      	movs	r2, #3
 80054d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f815 	bl	8005504 <HAL_SD_InitCard>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d001      	beq.n	80054e4 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e00a      	b.n	80054fa <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2200      	movs	r2, #0
 80054e8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005504:	b5b0      	push	{r4, r5, r7, lr}
 8005506:	b08e      	sub	sp, #56	@ 0x38
 8005508:	af04      	add	r7, sp, #16
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800550c:	2300      	movs	r3, #0
 800550e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005510:	2300      	movs	r3, #0
 8005512:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005514:	2300      	movs	r3, #0
 8005516:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005518:	2300      	movs	r3, #0
 800551a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800551c:	2300      	movs	r3, #0
 800551e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005520:	2376      	movs	r3, #118	@ 0x76
 8005522:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681d      	ldr	r5, [r3, #0]
 8005528:	466c      	mov	r4, sp
 800552a:	f107 0314 	add.w	r3, r7, #20
 800552e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005532:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005536:	f107 0308 	add.w	r3, r7, #8
 800553a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800553c:	4628      	mov	r0, r5
 800553e:	f002 fdad 	bl	800809c <SDIO_Init>
 8005542:	4603      	mov	r3, r0
 8005544:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 8005548:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800554c:	2b00      	cmp	r3, #0
 800554e:	d001      	beq.n	8005554 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e04f      	b.n	80055f4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005554:	4b29      	ldr	r3, [pc, #164]	@ (80055fc <HAL_SD_InitCard+0xf8>)
 8005556:	2200      	movs	r2, #0
 8005558:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4618      	mov	r0, r3
 8005560:	f002 fde5 	bl	800812e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8005564:	4b25      	ldr	r3, [pc, #148]	@ (80055fc <HAL_SD_InitCard+0xf8>)
 8005566:	2201      	movs	r2, #1
 8005568:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800556a:	2002      	movs	r0, #2
 800556c:	f7fd f954 	bl	8002818 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 ff6b 	bl	800644c <SD_PowerON>
 8005576:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005578:	6a3b      	ldr	r3, [r7, #32]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00b      	beq.n	8005596 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2201      	movs	r2, #1
 8005582:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800558a:	6a3b      	ldr	r3, [r7, #32]
 800558c:	431a      	orrs	r2, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e02e      	b.n	80055f4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 fe8a 	bl	80062b0 <SD_InitCard>
 800559c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00b      	beq.n	80055bc <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055b0:	6a3b      	ldr	r3, [r7, #32]
 80055b2:	431a      	orrs	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80055b8:	2301      	movs	r3, #1
 80055ba:	e01b      	b.n	80055f4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80055c4:	4618      	mov	r0, r3
 80055c6:	f002 fe44 	bl	8008252 <SDMMC_CmdBlockLength>
 80055ca:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00f      	beq.n	80055f2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005600 <HAL_SD_InitCard+0xfc>)
 80055d8:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	3728      	adds	r7, #40	@ 0x28
 80055f8:	46bd      	mov	sp, r7
 80055fa:	bdb0      	pop	{r4, r5, r7, pc}
 80055fc:	422580a0 	.word	0x422580a0
 8005600:	004005ff 	.word	0x004005ff

08005604 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08c      	sub	sp, #48	@ 0x30
 8005608:	af00      	add	r7, sp, #0
 800560a:	60f8      	str	r0, [r7, #12]
 800560c:	60b9      	str	r1, [r7, #8]
 800560e:	607a      	str	r2, [r7, #4]
 8005610:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d107      	bne.n	800562c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005620:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	e0c0      	b.n	80057ae <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005632:	b2db      	uxtb	r3, r3
 8005634:	2b01      	cmp	r3, #1
 8005636:	f040 80b9 	bne.w	80057ac <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005640:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	441a      	add	r2, r3
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800564a:	429a      	cmp	r2, r3
 800564c:	d907      	bls.n	800565e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005652:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	e0a7      	b.n	80057ae <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2203      	movs	r2, #3
 8005662:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	2200      	movs	r2, #0
 800566c:	62da      	str	r2, [r3, #44]	@ 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	f443 734a 	orr.w	r3, r3, #808	@ 0x328
 800567c:	f043 0302 	orr.w	r3, r3, #2
 8005680:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005686:	4a4c      	ldr	r2, [pc, #304]	@ (80057b8 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8005688:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800568e:	4a4b      	ldr	r2, [pc, #300]	@ (80057bc <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8005690:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	2200      	movs	r2, #0
 8005698:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800569e:	2200      	movs	r2, #0
 80056a0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	430a      	orrs	r2, r1
 80056bc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	3380      	adds	r3, #128	@ 0x80
 80056c8:	4619      	mov	r1, r3
 80056ca:	68ba      	ldr	r2, [r7, #8]
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	025b      	lsls	r3, r3, #9
 80056d0:	089b      	lsrs	r3, r3, #2
 80056d2:	f7fd fa55 	bl	8002b80 <HAL_DMA_Start_IT>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d017      	beq.n	800570c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f422 7295 	bic.w	r2, r2, #298	@ 0x12a
 80056ea:	63da      	str	r2, [r3, #60]	@ 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a33      	ldr	r2, [pc, #204]	@ (80057c0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80056f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e050      	b.n	80057ae <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800570c:	4b2d      	ldr	r3, [pc, #180]	@ (80057c4 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800570e:	2201      	movs	r2, #1
 8005710:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005716:	2b01      	cmp	r3, #1
 8005718:	d002      	beq.n	8005720 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800571a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800571c:	025b      	lsls	r3, r3, #9
 800571e:	62bb      	str	r3, [r7, #40]	@ 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005720:	f04f 33ff 	mov.w	r3, #4294967295
 8005724:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	025b      	lsls	r3, r3, #9
 800572a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800572c:	2390      	movs	r3, #144	@ 0x90
 800572e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8005730:	2302      	movs	r3, #2
 8005732:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005734:	2300      	movs	r3, #0
 8005736:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8005738:	2301      	movs	r3, #1
 800573a:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f107 0210 	add.w	r2, r7, #16
 8005744:	4611      	mov	r1, r2
 8005746:	4618      	mov	r0, r3
 8005748:	f002 fd57 	bl	80081fa <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	2b01      	cmp	r3, #1
 8005750:	d90a      	bls.n	8005768 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2282      	movs	r2, #130	@ 0x82
 8005756:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800575e:	4618      	mov	r0, r3
 8005760:	f002 fdbb 	bl	80082da <SDMMC_CmdReadMultiBlock>
 8005764:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8005766:	e009      	b.n	800577c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2281      	movs	r2, #129	@ 0x81
 800576c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005774:	4618      	mov	r0, r3
 8005776:	f002 fd8e 	bl	8008296 <SDMMC_CmdReadSingleBlock>
 800577a:	62f8      	str	r0, [r7, #44]	@ 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800577c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800577e:	2b00      	cmp	r3, #0
 8005780:	d012      	beq.n	80057a8 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a0e      	ldr	r2, [pc, #56]	@ (80057c0 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005788:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800578e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005790:	431a      	orrs	r2, r3
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2201      	movs	r2, #1
 800579a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2200      	movs	r2, #0
 80057a2:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e002      	b.n	80057ae <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	e000      	b.n	80057ae <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80057ac:	2302      	movs	r3, #2
  }
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3730      	adds	r7, #48	@ 0x30
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}
 80057b6:	bf00      	nop
 80057b8:	080060bf 	.word	0x080060bf
 80057bc:	08006131 	.word	0x08006131
 80057c0:	004005ff 	.word	0x004005ff
 80057c4:	4225858c 	.word	0x4225858c

080057c8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b08c      	sub	sp, #48	@ 0x30
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	607a      	str	r2, [r7, #4]
 80057d4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	62bb      	str	r3, [r7, #40]	@ 0x28

  if(NULL == pData)
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d107      	bne.n	80057f0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e4:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e0c5      	b.n	800597c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	f040 80be 	bne.w	800597a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2200      	movs	r2, #0
 8005802:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005804:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	441a      	add	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800580e:	429a      	cmp	r2, r3
 8005810:	d907      	bls.n	8005822 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005816:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 800581e:	2301      	movs	r3, #1
 8005820:	e0ac      	b.n	800597c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2203      	movs	r2, #3
 8005826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2200      	movs	r2, #0
 8005830:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005838:	68fa      	ldr	r2, [r7, #12]
 800583a:	6812      	ldr	r2, [r2, #0]
 800583c:	f443 7306 	orr.w	r3, r3, #536	@ 0x218
 8005840:	f043 0302 	orr.w	r3, r3, #2
 8005844:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800584a:	4a4e      	ldr	r2, [pc, #312]	@ (8005984 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 800584c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005852:	4a4d      	ldr	r2, [pc, #308]	@ (8005988 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8005854:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800585a:	2200      	movs	r2, #0
 800585c:	651a      	str	r2, [r3, #80]	@ 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005862:	2b01      	cmp	r3, #1
 8005864:	d002      	beq.n	800586c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8005866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005868:	025b      	lsls	r3, r3, #9
 800586a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b01      	cmp	r3, #1
 8005870:	d90a      	bls.n	8005888 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	22a0      	movs	r2, #160	@ 0xa0
 8005876:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800587e:	4618      	mov	r0, r3
 8005880:	f002 fd6f 	bl	8008362 <SDMMC_CmdWriteMultiBlock>
 8005884:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8005886:	e009      	b.n	800589c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2290      	movs	r2, #144	@ 0x90
 800588c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005894:	4618      	mov	r0, r3
 8005896:	f002 fd42 	bl	800831e <SDMMC_CmdWriteSingleBlock>
 800589a:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800589c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d012      	beq.n	80058c8 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a39      	ldr	r2, [pc, #228]	@ (800598c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80058a8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80058ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b0:	431a      	orrs	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80058c4:	2301      	movs	r3, #1
 80058c6:	e059      	b.n	800597c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80058c8:	4b31      	ldr	r3, [pc, #196]	@ (8005990 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80058ca:	2201      	movs	r2, #1
 80058cc:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d2:	2240      	movs	r2, #64	@ 0x40
 80058d4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058e6:	689a      	ldr	r2, [r3, #8]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80058f6:	68b9      	ldr	r1, [r7, #8]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3380      	adds	r3, #128	@ 0x80
 80058fe:	461a      	mov	r2, r3
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	025b      	lsls	r3, r3, #9
 8005904:	089b      	lsrs	r3, r3, #2
 8005906:	f7fd f93b 	bl	8002b80 <HAL_DMA_Start_IT>
 800590a:	4603      	mov	r3, r0
 800590c:	2b00      	cmp	r3, #0
 800590e:	d01c      	beq.n	800594a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005916:	68fa      	ldr	r2, [r7, #12]
 8005918:	6812      	ldr	r2, [r2, #0]
 800591a:	f423 7306 	bic.w	r3, r3, #536	@ 0x218
 800591e:	f023 0302 	bic.w	r3, r3, #2
 8005922:	63d3      	str	r3, [r2, #60]	@ 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a18      	ldr	r2, [pc, #96]	@ (800598c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800592a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005930:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e018      	b.n	800597c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800594a:	f04f 33ff 	mov.w	r3, #4294967295
 800594e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	025b      	lsls	r3, r3, #9
 8005954:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005956:	2390      	movs	r3, #144	@ 0x90
 8005958:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800595a:	2300      	movs	r3, #0
 800595c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800595e:	2300      	movs	r3, #0
 8005960:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8005962:	2301      	movs	r3, #1
 8005964:	627b      	str	r3, [r7, #36]	@ 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f107 0210 	add.w	r2, r7, #16
 800596e:	4611      	mov	r1, r2
 8005970:	4618      	mov	r0, r3
 8005972:	f002 fc42 	bl	80081fa <SDIO_ConfigData>

      return HAL_OK;
 8005976:	2300      	movs	r3, #0
 8005978:	e000      	b.n	800597c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800597a:	2302      	movs	r3, #2
  }
}
 800597c:	4618      	mov	r0, r3
 800597e:	3730      	adds	r7, #48	@ 0x30
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	08006095 	.word	0x08006095
 8005988:	08006131 	.word	0x08006131
 800598c:	004005ff 	.word	0x004005ff
 8005990:	4225858c 	.word	0x4225858c

08005994 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a0:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d008      	beq.n	80059c2 <HAL_SD_IRQHandler+0x2e>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f000 fdfc 	bl	80065b8 <SD_Read_IT>
 80059c0:	e165      	b.n	8005c8e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 808f 	beq.w	8005af0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80059da:	639a      	str	r2, [r3, #56]	@ 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6812      	ldr	r2, [r2, #0]
 80059e6:	f423 4343 	bic.w	r3, r3, #49920	@ 0xc300
 80059ea:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 80059ee:	63d3      	str	r3, [r2, #60]	@ 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f022 0201 	bic.w	r2, r2, #1
 80059fe:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d039      	beq.n	8005a7e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f003 0302 	and.w	r3, r3, #2
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d104      	bne.n	8005a1e <HAL_SD_IRQHandler+0x8a>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f003 0320 	and.w	r3, r3, #32
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d011      	beq.n	8005a42 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f002 fcc0 	bl	80083a8 <SDMMC_CmdStopTransfer>
 8005a28:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d008      	beq.n	8005a42 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005a3c:	6878      	ldr	r0, [r7, #4]
 8005a3e:	f000 f92f 	bl	8005ca0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f240 523a 	movw	r2, #1338	@ 0x53a
 8005a4a:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	631a      	str	r2, [r3, #48]	@ 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <HAL_SD_IRQHandler+0xda>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f003 0302 	and.w	r3, r3, #2
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d003      	beq.n	8005a76 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f003 f9d2 	bl	8008e18 <HAL_SD_RxCpltCallback>
 8005a74:	e10b      	b.n	8005c8e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f003 f9c4 	bl	8008e04 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a7c:	e107      	b.n	8005c8e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	f000 8102 	beq.w	8005c8e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f003 0320 	and.w	r3, r3, #32
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d011      	beq.n	8005ab8 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f002 fc85 	bl	80083a8 <SDMMC_CmdStopTransfer>
 8005a9e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d008      	beq.n	8005ab8 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	431a      	orrs	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	639a      	str	r2, [r3, #56]	@ 0x38
          HAL_SD_ErrorCallback(hsd);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f8f4 	bl	8005ca0 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	f040 80e5 	bne.w	8005c8e <HAL_SD_IRQHandler+0x2fa>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	f040 80df 	bne.w	8005c8e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0208 	bic.w	r2, r2, #8
 8005ade:	62da      	str	r2, [r3, #44]	@ 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f003 f98b 	bl	8008e04 <HAL_SD_TxCpltCallback>
}
 8005aee:	e0ce      	b.n	8005c8e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d008      	beq.n	8005b10 <HAL_SD_IRQHandler+0x17c>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f003 0308 	and.w	r3, r3, #8
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d003      	beq.n	8005b10 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fda6 	bl	800665a <SD_Write_IT>
 8005b0e:	e0be      	b.n	8005c8e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b16:	f240 233a 	movw	r3, #570	@ 0x23a
 8005b1a:	4013      	ands	r3, r2
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f000 80b6 	beq.w	8005c8e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b28:	f003 0302 	and.w	r3, r3, #2
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d005      	beq.n	8005b3c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b34:	f043 0202 	orr.w	r2, r3, #2
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b42:	f003 0308 	and.w	r3, r3, #8
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d005      	beq.n	8005b56 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4e:	f043 0208 	orr.w	r2, r3, #8
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d005      	beq.n	8005b70 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b68:	f043 0220 	orr.w	r2, r3, #32
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b76:	f003 0310 	and.w	r3, r3, #16
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d005      	beq.n	8005b8a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b82:	f043 0210 	orr.w	r2, r3, #16
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	639a      	str	r2, [r3, #56]	@ 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005b90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9c:	f043 0208 	orr.w	r2, r3, #8
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f240 723a 	movw	r2, #1850	@ 0x73a
 8005bac:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6812      	ldr	r2, [r2, #0]
 8005bb8:	f423 734e 	bic.w	r3, r3, #824	@ 0x338
 8005bbc:	f023 0302 	bic.w	r3, r3, #2
 8005bc0:	63d3      	str	r3, [r2, #60]	@ 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f002 fbee 	bl	80083a8 <SDMMC_CmdStopTransfer>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	639a      	str	r2, [r3, #56]	@ 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00a      	beq.n	8005bf8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2201      	movs	r2, #1
 8005be6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2200      	movs	r2, #0
 8005bee:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_SD_ErrorCallback(hsd);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f855 	bl	8005ca0 <HAL_SD_ErrorCallback>
}
 8005bf6:	e04a      	b.n	8005c8e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d045      	beq.n	8005c8e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f003 0310 	and.w	r3, r3, #16
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d104      	bne.n	8005c16 <HAL_SD_IRQHandler+0x282>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d011      	beq.n	8005c3a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8005c98 <HAL_SD_IRQHandler+0x304>)
 8005c1c:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fd f874 	bl	8002d10 <HAL_DMA_Abort_IT>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d02f      	beq.n	8005c8e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c32:	4618      	mov	r0, r3
 8005c34:	f000 face 	bl	80061d4 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005c38:	e029      	b.n	8005c8e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	f003 0301 	and.w	r3, r3, #1
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d104      	bne.n	8005c4e <HAL_SD_IRQHandler+0x2ba>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d011      	beq.n	8005c72 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c52:	4a12      	ldr	r2, [pc, #72]	@ (8005c9c <HAL_SD_IRQHandler+0x308>)
 8005c54:	651a      	str	r2, [r3, #80]	@ 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7fd f858 	bl	8002d10 <HAL_DMA_Abort_IT>
 8005c60:	4603      	mov	r3, r0
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d013      	beq.n	8005c8e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 fae9 	bl	8006242 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005c70:	e00d      	b.n	8005c8e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2200      	movs	r2, #0
 8005c84:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_SD_AbortCallback(hsd);
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f003 f8b2 	bl	8008df0 <HAL_SD_AbortCallback>
}
 8005c8c:	e7ff      	b.n	8005c8e <HAL_SD_IRQHandler+0x2fa>
 8005c8e:	bf00      	nop
 8005c90:	3710      	adds	r7, #16
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	080061d5 	.word	0x080061d5
 8005c9c:	08006243 	.word	0x08006243

08005ca0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005ca8:	bf00      	nop
 8005caa:	370c      	adds	r7, #12
 8005cac:	46bd      	mov	sp, r7
 8005cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb2:	4770      	bx	lr

08005cb4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b083      	sub	sp, #12
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cc2:	0f9b      	lsrs	r3, r3, #30
 8005cc4:	b2da      	uxtb	r2, r3
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cce:	0e9b      	lsrs	r3, r3, #26
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	b2da      	uxtb	r2, r3
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005ce0:	0e1b      	lsrs	r3, r3, #24
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	f003 0303 	and.w	r3, r3, #3
 8005ce8:	b2da      	uxtb	r2, r3
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cf2:	0c1b      	lsrs	r3, r3, #16
 8005cf4:	b2da      	uxtb	r2, r3
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cfe:	0a1b      	lsrs	r3, r3, #8
 8005d00:	b2da      	uxtb	r2, r3
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d0a:	b2da      	uxtb	r2, r3
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d14:	0d1b      	lsrs	r3, r3, #20
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d20:	0c1b      	lsrs	r3, r3, #16
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	f003 030f 	and.w	r3, r3, #15
 8005d28:	b2da      	uxtb	r2, r3
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d32:	0bdb      	lsrs	r3, r3, #15
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d44:	0b9b      	lsrs	r3, r3, #14
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	f003 0301 	and.w	r3, r3, #1
 8005d4c:	b2da      	uxtb	r2, r3
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d56:	0b5b      	lsrs	r3, r3, #13
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	f003 0301 	and.w	r3, r3, #1
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d68:	0b1b      	lsrs	r3, r3, #12
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	f003 0301 	and.w	r3, r3, #1
 8005d70:	b2da      	uxtb	r2, r3
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d163      	bne.n	8005e4c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d88:	009a      	lsls	r2, r3, #2
 8005d8a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005d8e:	4013      	ands	r3, r2
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8005d94:	0f92      	lsrs	r2, r2, #30
 8005d96:	431a      	orrs	r2, r3
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005da0:	0edb      	lsrs	r3, r3, #27
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	b2da      	uxtb	r2, r3
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005db2:	0e1b      	lsrs	r3, r3, #24
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	f003 0307 	and.w	r3, r3, #7
 8005dba:	b2da      	uxtb	r2, r3
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dc4:	0d5b      	lsrs	r3, r3, #21
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	f003 0307 	and.w	r3, r3, #7
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005dd6:	0c9b      	lsrs	r3, r3, #18
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005de8:	0bdb      	lsrs	r3, r3, #15
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	f003 0307 	and.w	r3, r3, #7
 8005df0:	b2da      	uxtb	r2, r3
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	691b      	ldr	r3, [r3, #16]
 8005dfa:	1c5a      	adds	r2, r3, #1
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	7e1b      	ldrb	r3, [r3, #24]
 8005e04:	b2db      	uxtb	r3, r3
 8005e06:	f003 0307 	and.w	r3, r3, #7
 8005e0a:	3302      	adds	r3, #2
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	687a      	ldr	r2, [r7, #4]
 8005e14:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8005e16:	fb03 f202 	mul.w	r2, r3, r2
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	7a1b      	ldrb	r3, [r3, #8]
 8005e22:	b2db      	uxtb	r3, r3
 8005e24:	f003 030f 	and.w	r3, r3, #15
 8005e28:	2201      	movs	r2, #1
 8005e2a:	409a      	lsls	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8005e38:	0a52      	lsrs	r2, r2, #9
 8005e3a:	fb03 f202 	mul.w	r2, r3, r2
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e48:	661a      	str	r2, [r3, #96]	@ 0x60
 8005e4a:	e031      	b.n	8005eb0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d11d      	bne.n	8005e90 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005e58:	041b      	lsls	r3, r3, #16
 8005e5a:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005e62:	0c1b      	lsrs	r3, r3, #16
 8005e64:	431a      	orrs	r2, r3
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	691b      	ldr	r3, [r3, #16]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	029a      	lsls	r2, r3, #10
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e84:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	661a      	str	r2, [r3, #96]	@ 0x60
 8005e8e:	e00f      	b.n	8005eb0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a58      	ldr	r2, [pc, #352]	@ (8005ff8 <HAL_SD_GetCardCSD+0x344>)
 8005e96:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e09d      	b.n	8005fec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005eb4:	0b9b      	lsrs	r3, r3, #14
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	f003 0301 	and.w	r3, r3, #1
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ec6:	09db      	lsrs	r3, r3, #7
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ee8:	0fdb      	lsrs	r3, r3, #31
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ef4:	0f5b      	lsrs	r3, r3, #29
 8005ef6:	b2db      	uxtb	r3, r3
 8005ef8:	f003 0303 	and.w	r3, r3, #3
 8005efc:	b2da      	uxtb	r2, r3
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f06:	0e9b      	lsrs	r3, r3, #26
 8005f08:	b2db      	uxtb	r3, r3
 8005f0a:	f003 0307 	and.w	r3, r3, #7
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f18:	0d9b      	lsrs	r3, r3, #22
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	f003 030f 	and.w	r3, r3, #15
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f2a:	0d5b      	lsrs	r3, r3, #21
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	f003 0301 	and.w	r3, r3, #1
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f46:	0c1b      	lsrs	r3, r3, #16
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	f003 0301 	and.w	r3, r3, #1
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f5a:	0bdb      	lsrs	r3, r3, #15
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f6e:	0b9b      	lsrs	r3, r3, #14
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	f003 0301 	and.w	r3, r3, #1
 8005f76:	b2da      	uxtb	r2, r3
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f82:	0b5b      	lsrs	r3, r3, #13
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	f003 0301 	and.w	r3, r3, #1
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f96:	0b1b      	lsrs	r3, r3, #12
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	b2da      	uxtb	r2, r3
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005faa:	0a9b      	lsrs	r3, r3, #10
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	f003 0303 	and.w	r3, r3, #3
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fbe:	0a1b      	lsrs	r3, r3, #8
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	f003 0303 	and.w	r3, r3, #3
 8005fc6:	b2da      	uxtb	r2, r3
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005fd2:	085b      	lsrs	r3, r3, #1
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8005fea:	2300      	movs	r3, #0
}
 8005fec:	4618      	mov	r0, r3
 8005fee:	370c      	adds	r7, #12
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff6:	4770      	bx	lr
 8005ff8:	004005ff 	.word	0x004005ff

08005ffc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8006046:	2300      	movs	r3, #0
}
 8006048:	4618      	mov	r0, r3
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b086      	sub	sp, #24
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800605c:	2300      	movs	r3, #0
 800605e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8006060:	f107 030c 	add.w	r3, r7, #12
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fa7e 	bl	8006568 <SD_SendStatus>
 800606c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d005      	beq.n	8006080 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	0a5b      	lsrs	r3, r3, #9
 8006084:	f003 030f 	and.w	r3, r3, #15
 8006088:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800608a:	693b      	ldr	r3, [r7, #16]
}
 800608c:	4618      	mov	r0, r3
 800608e:	3718      	adds	r7, #24
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006094:	b480      	push	{r7}
 8006096:	b085      	sub	sp, #20
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060a0:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060b0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr

080060be <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80060be:	b580      	push	{r7, lr}
 80060c0:	b084      	sub	sp, #16
 80060c2:	af00      	add	r7, sp, #0
 80060c4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ca:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060d0:	2b82      	cmp	r3, #130	@ 0x82
 80060d2:	d111      	bne.n	80060f8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4618      	mov	r0, r3
 80060da:	f002 f965 	bl	80083a8 <SDMMC_CmdStopTransfer>
 80060de:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d008      	beq.n	80060f8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	431a      	orrs	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	639a      	str	r2, [r3, #56]	@ 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	f7ff fdd4 	bl	8005ca0 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0208 	bic.w	r2, r2, #8
 8006106:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006110:	639a      	str	r2, [r3, #56]	@ 0x38

  hsd->State = HAL_SD_STATE_READY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	631a      	str	r2, [r3, #48]	@ 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f002 fe79 	bl	8008e18 <HAL_SD_RxCpltCallback>
#endif
}
 8006126:	bf00      	nop
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b086      	sub	sp, #24
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800613c:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f7fc ff92 	bl	8003068 <HAL_DMA_GetError>
 8006144:	4603      	mov	r3, r0
 8006146:	2b02      	cmp	r3, #2
 8006148:	d03e      	beq.n	80061c8 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006150:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006158:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	2b01      	cmp	r3, #1
 800615e:	d002      	beq.n	8006166 <SD_DMAError+0x36>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d12d      	bne.n	80061c2 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a19      	ldr	r2, [pc, #100]	@ (80061d0 <SD_DMAError+0xa0>)
 800616c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 800617c:	63da      	str	r2, [r3, #60]	@ 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006182:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	639a      	str	r2, [r3, #56]	@ 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800618a:	6978      	ldr	r0, [r7, #20]
 800618c:	f7ff ff62 	bl	8006054 <HAL_SD_GetCardState>
 8006190:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	2b06      	cmp	r3, #6
 8006196:	d002      	beq.n	800619e <SD_DMAError+0x6e>
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	2b05      	cmp	r3, #5
 800619c:	d10a      	bne.n	80061b4 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4618      	mov	r0, r3
 80061a4:	f002 f900 	bl	80083a8 <SDMMC_CmdStopTransfer>
 80061a8:	4602      	mov	r2, r0
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ae:	431a      	orrs	r2, r3
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	639a      	str	r2, [r3, #56]	@ 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	2200      	movs	r2, #0
 80061c0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80061c2:	6978      	ldr	r0, [r7, #20]
 80061c4:	f7ff fd6c 	bl	8005ca0 <HAL_SD_ErrorCallback>
#endif
  }
}
 80061c8:	bf00      	nop
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	004005ff 	.word	0x004005ff

080061d4 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061e0:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80061ea:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7ff ff31 	bl	8006054 <HAL_SD_GetCardState>
 80061f2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2200      	movs	r2, #0
 8006200:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006202:	68bb      	ldr	r3, [r7, #8]
 8006204:	2b06      	cmp	r3, #6
 8006206:	d002      	beq.n	800620e <SD_DMATxAbort+0x3a>
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2b05      	cmp	r3, #5
 800620c:	d10a      	bne.n	8006224 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4618      	mov	r0, r3
 8006214:	f002 f8c8 	bl	80083a8 <SDMMC_CmdStopTransfer>
 8006218:	4602      	mov	r2, r0
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800621e:	431a      	orrs	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006228:	2b00      	cmp	r3, #0
 800622a:	d103      	bne.n	8006234 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f002 fddf 	bl	8008df0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006232:	e002      	b.n	800623a <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f7ff fd33 	bl	8005ca0 <HAL_SD_ErrorCallback>
}
 800623a:	bf00      	nop
 800623c:	3710      	adds	r7, #16
 800623e:	46bd      	mov	sp, r7
 8006240:	bd80      	pop	{r7, pc}

08006242 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8006242:	b580      	push	{r7, lr}
 8006244:	b084      	sub	sp, #16
 8006246:	af00      	add	r7, sp, #0
 8006248:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800624e:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f240 523a 	movw	r2, #1338	@ 0x53a
 8006258:	639a      	str	r2, [r3, #56]	@ 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f7ff fefa 	bl	8006054 <HAL_SD_GetCardState>
 8006260:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	631a      	str	r2, [r3, #48]	@ 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	2b06      	cmp	r3, #6
 8006274:	d002      	beq.n	800627c <SD_DMARxAbort+0x3a>
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	2b05      	cmp	r3, #5
 800627a:	d10a      	bne.n	8006292 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4618      	mov	r0, r3
 8006282:	f002 f891 	bl	80083a8 <SDMMC_CmdStopTransfer>
 8006286:	4602      	mov	r2, r0
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800628c:	431a      	orrs	r2, r3
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006296:	2b00      	cmp	r3, #0
 8006298:	d103      	bne.n	80062a2 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f002 fda8 	bl	8008df0 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80062a0:	e002      	b.n	80062a8 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80062a2:	68f8      	ldr	r0, [r7, #12]
 80062a4:	f7ff fcfc 	bl	8005ca0 <HAL_SD_ErrorCallback>
}
 80062a8:	bf00      	nop
 80062aa:	3710      	adds	r7, #16
 80062ac:	46bd      	mov	sp, r7
 80062ae:	bd80      	pop	{r7, pc}

080062b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80062b0:	b5b0      	push	{r4, r5, r7, lr}
 80062b2:	b094      	sub	sp, #80	@ 0x50
 80062b4:	af04      	add	r7, sp, #16
 80062b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80062b8:	2301      	movs	r3, #1
 80062ba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4618      	mov	r0, r3
 80062c2:	f001 ff42 	bl	800814a <SDIO_GetPowerState>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d102      	bne.n	80062d2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80062cc:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80062d0:	e0b8      	b.n	8006444 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d02f      	beq.n	800633a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4618      	mov	r0, r3
 80062e0:	f002 f929 	bl	8008536 <SDMMC_CmdSendCID>
 80062e4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80062e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d001      	beq.n	80062f0 <SD_InitCard+0x40>
    {
      return errorstate;
 80062ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ee:	e0a9      	b.n	8006444 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2100      	movs	r1, #0
 80062f6:	4618      	mov	r0, r3
 80062f8:	f001 ff6c 	bl	80081d4 <SDIO_GetResponse>
 80062fc:	4602      	mov	r2, r0
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	2104      	movs	r1, #4
 8006308:	4618      	mov	r0, r3
 800630a:	f001 ff63 	bl	80081d4 <SDIO_GetResponse>
 800630e:	4602      	mov	r2, r0
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2108      	movs	r1, #8
 800631a:	4618      	mov	r0, r3
 800631c:	f001 ff5a 	bl	80081d4 <SDIO_GetResponse>
 8006320:	4602      	mov	r2, r0
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	210c      	movs	r1, #12
 800632c:	4618      	mov	r0, r3
 800632e:	f001 ff51 	bl	80081d4 <SDIO_GetResponse>
 8006332:	4602      	mov	r2, r0
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800633e:	2b03      	cmp	r3, #3
 8006340:	d00d      	beq.n	800635e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f107 020e 	add.w	r2, r7, #14
 800634a:	4611      	mov	r1, r2
 800634c:	4618      	mov	r0, r3
 800634e:	f002 f92f 	bl	80085b0 <SDMMC_CmdSetRelAdd>
 8006352:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <SD_InitCard+0xae>
    {
      return errorstate;
 800635a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800635c:	e072      	b.n	8006444 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006362:	2b03      	cmp	r3, #3
 8006364:	d036      	beq.n	80063d4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006366:	89fb      	ldrh	r3, [r7, #14]
 8006368:	461a      	mov	r2, r3
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681a      	ldr	r2, [r3, #0]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006376:	041b      	lsls	r3, r3, #16
 8006378:	4619      	mov	r1, r3
 800637a:	4610      	mov	r0, r2
 800637c:	f002 f8f9 	bl	8008572 <SDMMC_CmdSendCSD>
 8006380:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006382:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006384:	2b00      	cmp	r3, #0
 8006386:	d001      	beq.n	800638c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006388:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800638a:	e05b      	b.n	8006444 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	2100      	movs	r1, #0
 8006392:	4618      	mov	r0, r3
 8006394:	f001 ff1e 	bl	80081d4 <SDIO_GetResponse>
 8006398:	4602      	mov	r2, r0
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2104      	movs	r1, #4
 80063a4:	4618      	mov	r0, r3
 80063a6:	f001 ff15 	bl	80081d4 <SDIO_GetResponse>
 80063aa:	4602      	mov	r2, r0
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2108      	movs	r1, #8
 80063b6:	4618      	mov	r0, r3
 80063b8:	f001 ff0c 	bl	80081d4 <SDIO_GetResponse>
 80063bc:	4602      	mov	r2, r0
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	210c      	movs	r1, #12
 80063c8:	4618      	mov	r0, r3
 80063ca:	f001 ff03 	bl	80081d4 <SDIO_GetResponse>
 80063ce:	4602      	mov	r2, r0
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	2104      	movs	r1, #4
 80063da:	4618      	mov	r0, r3
 80063dc:	f001 fefa 	bl	80081d4 <SDIO_GetResponse>
 80063e0:	4603      	mov	r3, r0
 80063e2:	0d1a      	lsrs	r2, r3, #20
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80063e8:	f107 0310 	add.w	r3, r7, #16
 80063ec:	4619      	mov	r1, r3
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7ff fc60 	bl	8005cb4 <HAL_SD_GetCardCSD>
 80063f4:	4603      	mov	r3, r0
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d002      	beq.n	8006400 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063fa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80063fe:	e021      	b.n	8006444 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6819      	ldr	r1, [r3, #0]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006408:	041b      	lsls	r3, r3, #16
 800640a:	2200      	movs	r2, #0
 800640c:	461c      	mov	r4, r3
 800640e:	4615      	mov	r5, r2
 8006410:	4622      	mov	r2, r4
 8006412:	462b      	mov	r3, r5
 8006414:	4608      	mov	r0, r1
 8006416:	f001 ffe9 	bl	80083ec <SDMMC_CmdSelDesel>
 800641a:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800641c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <SD_InitCard+0x176>
  {
    return errorstate;
 8006422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006424:	e00e      	b.n	8006444 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681d      	ldr	r5, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	466c      	mov	r4, sp
 800642e:	f103 0210 	add.w	r2, r3, #16
 8006432:	ca07      	ldmia	r2, {r0, r1, r2}
 8006434:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006438:	3304      	adds	r3, #4
 800643a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800643c:	4628      	mov	r0, r5
 800643e:	f001 fe2d 	bl	800809c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8006442:	2300      	movs	r3, #0
}
 8006444:	4618      	mov	r0, r3
 8006446:	3740      	adds	r7, #64	@ 0x40
 8006448:	46bd      	mov	sp, r7
 800644a:	bdb0      	pop	{r4, r5, r7, pc}

0800644c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800644c:	b580      	push	{r7, lr}
 800644e:	b086      	sub	sp, #24
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006454:	2300      	movs	r3, #0
 8006456:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006458:	2300      	movs	r3, #0
 800645a:	617b      	str	r3, [r7, #20]
 800645c:	2300      	movs	r3, #0
 800645e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	4618      	mov	r0, r3
 8006466:	f001 ffe4 	bl	8008432 <SDMMC_CmdGoIdleState>
 800646a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <SD_PowerON+0x2a>
  {
    return errorstate;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	e072      	b.n	800655c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4618      	mov	r0, r3
 800647c:	f001 fff7 	bl	800846e <SDMMC_CmdOperCond>
 8006480:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00d      	beq.n	80064a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2200      	movs	r2, #0
 800648c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4618      	mov	r0, r3
 8006494:	f001 ffcd 	bl	8008432 <SDMMC_CmdGoIdleState>
 8006498:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d004      	beq.n	80064aa <SD_PowerON+0x5e>
    {
      return errorstate;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	e05b      	b.n	800655c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d137      	bne.n	8006522 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	2100      	movs	r1, #0
 80064b8:	4618      	mov	r0, r3
 80064ba:	f001 fff7 	bl	80084ac <SDMMC_CmdAppCommand>
 80064be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d02d      	beq.n	8006522 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064c6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80064ca:	e047      	b.n	800655c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	2100      	movs	r1, #0
 80064d2:	4618      	mov	r0, r3
 80064d4:	f001 ffea 	bl	80084ac <SDMMC_CmdAppCommand>
 80064d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d001      	beq.n	80064e4 <SD_PowerON+0x98>
    {
      return errorstate;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	e03b      	b.n	800655c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	491e      	ldr	r1, [pc, #120]	@ (8006564 <SD_PowerON+0x118>)
 80064ea:	4618      	mov	r0, r3
 80064ec:	f002 f800 	bl	80084f0 <SDMMC_CmdAppOperCommand>
 80064f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80064f8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80064fc:	e02e      	b.n	800655c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2100      	movs	r1, #0
 8006504:	4618      	mov	r0, r3
 8006506:	f001 fe65 	bl	80081d4 <SDIO_GetResponse>
 800650a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	0fdb      	lsrs	r3, r3, #31
 8006510:	2b01      	cmp	r3, #1
 8006512:	d101      	bne.n	8006518 <SD_PowerON+0xcc>
 8006514:	2301      	movs	r3, #1
 8006516:	e000      	b.n	800651a <SD_PowerON+0xce>
 8006518:	2300      	movs	r3, #0
 800651a:	613b      	str	r3, [r7, #16]

    count++;
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	3301      	adds	r3, #1
 8006520:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006528:	4293      	cmp	r3, r2
 800652a:	d802      	bhi.n	8006532 <SD_PowerON+0xe6>
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d0cc      	beq.n	80064cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8006538:	4293      	cmp	r3, r2
 800653a:	d902      	bls.n	8006542 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800653c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006540:	e00c      	b.n	800655c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	645a      	str	r2, [r3, #68]	@ 0x44
 8006552:	e002      	b.n	800655a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3718      	adds	r7, #24
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	c1100000 	.word	0xc1100000

08006568 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d102      	bne.n	800657e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006578:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800657c:	e018      	b.n	80065b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006586:	041b      	lsls	r3, r3, #16
 8006588:	4619      	mov	r1, r3
 800658a:	4610      	mov	r0, r2
 800658c:	f002 f831 	bl	80085f2 <SDMMC_CmdSendStatus>
 8006590:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d001      	beq.n	800659c <SD_SendStatus+0x34>
  {
    return errorstate;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	e009      	b.n	80065b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	2100      	movs	r1, #0
 80065a2:	4618      	mov	r0, r3
 80065a4:	f001 fe16 	bl	80081d4 <SDIO_GetResponse>
 80065a8:	4602      	mov	r2, r0
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80065ae:	2300      	movs	r3, #0
}
 80065b0:	4618      	mov	r0, r3
 80065b2:	3710      	adds	r7, #16
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065c4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ca:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d03f      	beq.n	8006652 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80065d2:	2300      	movs	r3, #0
 80065d4:	617b      	str	r3, [r7, #20]
 80065d6:	e033      	b.n	8006640 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4618      	mov	r0, r3
 80065de:	f001 fd88 	bl	80080f2 <SDIO_ReadFIFO>
 80065e2:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	701a      	strb	r2, [r3, #0]
      tmp++;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	3301      	adds	r3, #1
 80065f0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	3b01      	subs	r3, #1
 80065f6:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	0a1b      	lsrs	r3, r3, #8
 80065fc:	b2da      	uxtb	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	3301      	adds	r3, #1
 8006606:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	3b01      	subs	r3, #1
 800660c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	0c1b      	lsrs	r3, r3, #16
 8006612:	b2da      	uxtb	r2, r3
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3301      	adds	r3, #1
 800661c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	3b01      	subs	r3, #1
 8006622:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	0e1b      	lsrs	r3, r3, #24
 8006628:	b2da      	uxtb	r2, r3
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	3301      	adds	r3, #1
 8006632:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	3b01      	subs	r3, #1
 8006638:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	3301      	adds	r3, #1
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	2b07      	cmp	r3, #7
 8006644:	d9c8      	bls.n	80065d8 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	629a      	str	r2, [r3, #40]	@ 0x28
    hsd->RxXferSize = dataremaining;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	693a      	ldr	r2, [r7, #16]
 8006650:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
}
 8006652:	bf00      	nop
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800665a:	b580      	push	{r7, lr}
 800665c:	b086      	sub	sp, #24
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6a1b      	ldr	r3, [r3, #32]
 8006666:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800666c:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d043      	beq.n	80066fc <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8006674:	2300      	movs	r3, #0
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	e037      	b.n	80066ea <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	3301      	adds	r3, #1
 8006684:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	3b01      	subs	r3, #1
 800668a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	021a      	lsls	r2, r3, #8
 8006692:	68bb      	ldr	r3, [r7, #8]
 8006694:	4313      	orrs	r3, r2
 8006696:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3301      	adds	r3, #1
 800669c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	3b01      	subs	r3, #1
 80066a2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	041a      	lsls	r2, r3, #16
 80066aa:	68bb      	ldr	r3, [r7, #8]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	60bb      	str	r3, [r7, #8]
      tmp++;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	3301      	adds	r3, #1
 80066b4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	3b01      	subs	r3, #1
 80066ba:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	061a      	lsls	r2, r3, #24
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]
      tmp++;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	3301      	adds	r3, #1
 80066cc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	3b01      	subs	r3, #1
 80066d2:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f107 0208 	add.w	r2, r7, #8
 80066dc:	4611      	mov	r1, r2
 80066de:	4618      	mov	r0, r3
 80066e0:	f001 fd14 	bl	800810c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	3301      	adds	r3, #1
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	2b07      	cmp	r3, #7
 80066ee:	d9c4      	bls.n	800667a <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	693a      	ldr	r2, [r7, #16]
 80066fa:	625a      	str	r2, [r3, #36]	@ 0x24
  }
}
 80066fc:	bf00      	nop
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b082      	sub	sp, #8
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006712:	2301      	movs	r3, #1
 8006714:	e041      	b.n	800679a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800671c:	b2db      	uxtb	r3, r3
 800671e:	2b00      	cmp	r3, #0
 8006720:	d106      	bne.n	8006730 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2200      	movs	r2, #0
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800672a:	6878      	ldr	r0, [r7, #4]
 800672c:	f7fb fdda 	bl	80022e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	3304      	adds	r3, #4
 8006740:	4619      	mov	r1, r3
 8006742:	4610      	mov	r0, r2
 8006744:	f000 fa7e 	bl	8006c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2201      	movs	r2, #1
 800678c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
	...

080067a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b085      	sub	sp, #20
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067b2:	b2db      	uxtb	r3, r3
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d001      	beq.n	80067bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	e04e      	b.n	800685a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68da      	ldr	r2, [r3, #12]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0201 	orr.w	r2, r2, #1
 80067d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	4a23      	ldr	r2, [pc, #140]	@ (8006868 <HAL_TIM_Base_Start_IT+0xc4>)
 80067da:	4293      	cmp	r3, r2
 80067dc:	d022      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0x80>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067e6:	d01d      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0x80>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a1f      	ldr	r2, [pc, #124]	@ (800686c <HAL_TIM_Base_Start_IT+0xc8>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d018      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0x80>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a1e      	ldr	r2, [pc, #120]	@ (8006870 <HAL_TIM_Base_Start_IT+0xcc>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d013      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0x80>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4a1c      	ldr	r2, [pc, #112]	@ (8006874 <HAL_TIM_Base_Start_IT+0xd0>)
 8006802:	4293      	cmp	r3, r2
 8006804:	d00e      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0x80>
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a1b      	ldr	r2, [pc, #108]	@ (8006878 <HAL_TIM_Base_Start_IT+0xd4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d009      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0x80>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	4a19      	ldr	r2, [pc, #100]	@ (800687c <HAL_TIM_Base_Start_IT+0xd8>)
 8006816:	4293      	cmp	r3, r2
 8006818:	d004      	beq.n	8006824 <HAL_TIM_Base_Start_IT+0x80>
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	4a18      	ldr	r2, [pc, #96]	@ (8006880 <HAL_TIM_Base_Start_IT+0xdc>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d111      	bne.n	8006848 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f003 0307 	and.w	r3, r3, #7
 800682e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2b06      	cmp	r3, #6
 8006834:	d010      	beq.n	8006858 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	681a      	ldr	r2, [r3, #0]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f042 0201 	orr.w	r2, r2, #1
 8006844:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006846:	e007      	b.n	8006858 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f042 0201 	orr.w	r2, r2, #1
 8006856:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	40010000 	.word	0x40010000
 800686c:	40000400 	.word	0x40000400
 8006870:	40000800 	.word	0x40000800
 8006874:	40000c00 	.word	0x40000c00
 8006878:	40010400 	.word	0x40010400
 800687c:	40014000 	.word	0x40014000
 8006880:	40001800 	.word	0x40001800

08006884 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d020      	beq.n	80068e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	f003 0302 	and.w	r3, r3, #2
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d01b      	beq.n	80068e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f06f 0202 	mvn.w	r2, #2
 80068b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2201      	movs	r2, #1
 80068be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	f003 0303 	and.w	r3, r3, #3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f999 	bl	8006c06 <HAL_TIM_IC_CaptureCallback>
 80068d4:	e005      	b.n	80068e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f000 f98b 	bl	8006bf2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f000 f99c 	bl	8006c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	2200      	movs	r2, #0
 80068e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d020      	beq.n	8006934 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f003 0304 	and.w	r3, r3, #4
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d01b      	beq.n	8006934 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f06f 0204 	mvn.w	r2, #4
 8006904:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2202      	movs	r2, #2
 800690a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	699b      	ldr	r3, [r3, #24]
 8006912:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006916:	2b00      	cmp	r3, #0
 8006918:	d003      	beq.n	8006922 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f000 f973 	bl	8006c06 <HAL_TIM_IC_CaptureCallback>
 8006920:	e005      	b.n	800692e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f965 	bl	8006bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 f976 	bl	8006c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d020      	beq.n	8006980 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	f003 0308 	and.w	r3, r3, #8
 8006944:	2b00      	cmp	r3, #0
 8006946:	d01b      	beq.n	8006980 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f06f 0208 	mvn.w	r2, #8
 8006950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2204      	movs	r2, #4
 8006956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	69db      	ldr	r3, [r3, #28]
 800695e:	f003 0303 	and.w	r3, r3, #3
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f94d 	bl	8006c06 <HAL_TIM_IC_CaptureCallback>
 800696c:	e005      	b.n	800697a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 f93f 	bl	8006bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f000 f950 	bl	8006c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	f003 0310 	and.w	r3, r3, #16
 8006986:	2b00      	cmp	r3, #0
 8006988:	d020      	beq.n	80069cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f003 0310 	and.w	r3, r3, #16
 8006990:	2b00      	cmp	r3, #0
 8006992:	d01b      	beq.n	80069cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f06f 0210 	mvn.w	r2, #16
 800699c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2208      	movs	r2, #8
 80069a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	69db      	ldr	r3, [r3, #28]
 80069aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d003      	beq.n	80069ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f000 f927 	bl	8006c06 <HAL_TIM_IC_CaptureCallback>
 80069b8:	e005      	b.n	80069c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f919 	bl	8006bf2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f92a 	bl	8006c1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2200      	movs	r2, #0
 80069ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f003 0301 	and.w	r3, r3, #1
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d00c      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d007      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	f06f 0201 	mvn.w	r2, #1
 80069e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f7fb f8d0 	bl	8001b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00c      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d007      	beq.n	8006a14 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fae4 	bl	8006fdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00c      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d007      	beq.n	8006a38 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f000 f8fb 	bl	8006c2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	f003 0320 	and.w	r3, r3, #32
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00c      	beq.n	8006a5c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f003 0320 	and.w	r3, r3, #32
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d007      	beq.n	8006a5c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f06f 0220 	mvn.w	r2, #32
 8006a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	f000 fab6 	bl	8006fc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a5c:	bf00      	nop
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a64:	b580      	push	{r7, lr}
 8006a66:	b084      	sub	sp, #16
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d101      	bne.n	8006a80 <HAL_TIM_ConfigClockSource+0x1c>
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	e0b4      	b.n	8006bea <HAL_TIM_ConfigClockSource+0x186>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	689b      	ldr	r3, [r3, #8]
 8006a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006a9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006aa6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ab8:	d03e      	beq.n	8006b38 <HAL_TIM_ConfigClockSource+0xd4>
 8006aba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006abe:	f200 8087 	bhi.w	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ac2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ac6:	f000 8086 	beq.w	8006bd6 <HAL_TIM_ConfigClockSource+0x172>
 8006aca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ace:	d87f      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad0:	2b70      	cmp	r3, #112	@ 0x70
 8006ad2:	d01a      	beq.n	8006b0a <HAL_TIM_ConfigClockSource+0xa6>
 8006ad4:	2b70      	cmp	r3, #112	@ 0x70
 8006ad6:	d87b      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ad8:	2b60      	cmp	r3, #96	@ 0x60
 8006ada:	d050      	beq.n	8006b7e <HAL_TIM_ConfigClockSource+0x11a>
 8006adc:	2b60      	cmp	r3, #96	@ 0x60
 8006ade:	d877      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae0:	2b50      	cmp	r3, #80	@ 0x50
 8006ae2:	d03c      	beq.n	8006b5e <HAL_TIM_ConfigClockSource+0xfa>
 8006ae4:	2b50      	cmp	r3, #80	@ 0x50
 8006ae6:	d873      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ae8:	2b40      	cmp	r3, #64	@ 0x40
 8006aea:	d058      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x13a>
 8006aec:	2b40      	cmp	r3, #64	@ 0x40
 8006aee:	d86f      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006af0:	2b30      	cmp	r3, #48	@ 0x30
 8006af2:	d064      	beq.n	8006bbe <HAL_TIM_ConfigClockSource+0x15a>
 8006af4:	2b30      	cmp	r3, #48	@ 0x30
 8006af6:	d86b      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006af8:	2b20      	cmp	r3, #32
 8006afa:	d060      	beq.n	8006bbe <HAL_TIM_ConfigClockSource+0x15a>
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d867      	bhi.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d05c      	beq.n	8006bbe <HAL_TIM_ConfigClockSource+0x15a>
 8006b04:	2b10      	cmp	r3, #16
 8006b06:	d05a      	beq.n	8006bbe <HAL_TIM_ConfigClockSource+0x15a>
 8006b08:	e062      	b.n	8006bd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b1a:	f000 f9b9 	bl	8006e90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006b2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	609a      	str	r2, [r3, #8]
      break;
 8006b36:	e04f      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b48:	f000 f9a2 	bl	8006e90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	689a      	ldr	r2, [r3, #8]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006b5a:	609a      	str	r2, [r3, #8]
      break;
 8006b5c:	e03c      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	f000 f916 	bl	8006d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2150      	movs	r1, #80	@ 0x50
 8006b76:	4618      	mov	r0, r3
 8006b78:	f000 f96f 	bl	8006e5a <TIM_ITRx_SetConfig>
      break;
 8006b7c:	e02c      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f000 f935 	bl	8006dfa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2160      	movs	r1, #96	@ 0x60
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 f95f 	bl	8006e5a <TIM_ITRx_SetConfig>
      break;
 8006b9c:	e01c      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006baa:	461a      	mov	r2, r3
 8006bac:	f000 f8f6 	bl	8006d9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2140      	movs	r1, #64	@ 0x40
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 f94f 	bl	8006e5a <TIM_ITRx_SetConfig>
      break;
 8006bbc:	e00c      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4610      	mov	r0, r2
 8006bca:	f000 f946 	bl	8006e5a <TIM_ITRx_SetConfig>
      break;
 8006bce:	e003      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bd4:	e000      	b.n	8006bd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006bd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bfa:	bf00      	nop
 8006bfc:	370c      	adds	r7, #12
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr

08006c06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c06:	b480      	push	{r7}
 8006c08:	b083      	sub	sp, #12
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c0e:	bf00      	nop
 8006c10:	370c      	adds	r7, #12
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b083      	sub	sp, #12
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c22:	bf00      	nop
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c36:	bf00      	nop
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
	...

08006c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a46      	ldr	r2, [pc, #280]	@ (8006d70 <TIM_Base_SetConfig+0x12c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d013      	beq.n	8006c84 <TIM_Base_SetConfig+0x40>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c62:	d00f      	beq.n	8006c84 <TIM_Base_SetConfig+0x40>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	4a43      	ldr	r2, [pc, #268]	@ (8006d74 <TIM_Base_SetConfig+0x130>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d00b      	beq.n	8006c84 <TIM_Base_SetConfig+0x40>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	4a42      	ldr	r2, [pc, #264]	@ (8006d78 <TIM_Base_SetConfig+0x134>)
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d007      	beq.n	8006c84 <TIM_Base_SetConfig+0x40>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a41      	ldr	r2, [pc, #260]	@ (8006d7c <TIM_Base_SetConfig+0x138>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d003      	beq.n	8006c84 <TIM_Base_SetConfig+0x40>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	4a40      	ldr	r2, [pc, #256]	@ (8006d80 <TIM_Base_SetConfig+0x13c>)
 8006c80:	4293      	cmp	r3, r2
 8006c82:	d108      	bne.n	8006c96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a35      	ldr	r2, [pc, #212]	@ (8006d70 <TIM_Base_SetConfig+0x12c>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d02b      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ca4:	d027      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a32      	ldr	r2, [pc, #200]	@ (8006d74 <TIM_Base_SetConfig+0x130>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d023      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a31      	ldr	r2, [pc, #196]	@ (8006d78 <TIM_Base_SetConfig+0x134>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d01f      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a30      	ldr	r2, [pc, #192]	@ (8006d7c <TIM_Base_SetConfig+0x138>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d01b      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a2f      	ldr	r2, [pc, #188]	@ (8006d80 <TIM_Base_SetConfig+0x13c>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d017      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a2e      	ldr	r2, [pc, #184]	@ (8006d84 <TIM_Base_SetConfig+0x140>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d013      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8006d88 <TIM_Base_SetConfig+0x144>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d00f      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a2c      	ldr	r2, [pc, #176]	@ (8006d8c <TIM_Base_SetConfig+0x148>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00b      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8006d90 <TIM_Base_SetConfig+0x14c>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d007      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a2a      	ldr	r2, [pc, #168]	@ (8006d94 <TIM_Base_SetConfig+0x150>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d003      	beq.n	8006cf6 <TIM_Base_SetConfig+0xb2>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a29      	ldr	r2, [pc, #164]	@ (8006d98 <TIM_Base_SetConfig+0x154>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d108      	bne.n	8006d08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	68db      	ldr	r3, [r3, #12]
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	695b      	ldr	r3, [r3, #20]
 8006d12:	4313      	orrs	r3, r2
 8006d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68fa      	ldr	r2, [r7, #12]
 8006d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	681a      	ldr	r2, [r3, #0]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a10      	ldr	r2, [pc, #64]	@ (8006d70 <TIM_Base_SetConfig+0x12c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d003      	beq.n	8006d3c <TIM_Base_SetConfig+0xf8>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a12      	ldr	r2, [pc, #72]	@ (8006d80 <TIM_Base_SetConfig+0x13c>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d103      	bne.n	8006d44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	691a      	ldr	r2, [r3, #16]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2201      	movs	r2, #1
 8006d48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	691b      	ldr	r3, [r3, #16]
 8006d4e:	f003 0301 	and.w	r3, r3, #1
 8006d52:	2b01      	cmp	r3, #1
 8006d54:	d105      	bne.n	8006d62 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	691b      	ldr	r3, [r3, #16]
 8006d5a:	f023 0201 	bic.w	r2, r3, #1
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	611a      	str	r2, [r3, #16]
  }
}
 8006d62:	bf00      	nop
 8006d64:	3714      	adds	r7, #20
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop
 8006d70:	40010000 	.word	0x40010000
 8006d74:	40000400 	.word	0x40000400
 8006d78:	40000800 	.word	0x40000800
 8006d7c:	40000c00 	.word	0x40000c00
 8006d80:	40010400 	.word	0x40010400
 8006d84:	40014000 	.word	0x40014000
 8006d88:	40014400 	.word	0x40014400
 8006d8c:	40014800 	.word	0x40014800
 8006d90:	40001800 	.word	0x40001800
 8006d94:	40001c00 	.word	0x40001c00
 8006d98:	40002000 	.word	0x40002000

08006d9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	6a1b      	ldr	r3, [r3, #32]
 8006dac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	f023 0201 	bic.w	r2, r3, #1
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006dc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	011b      	lsls	r3, r3, #4
 8006dcc:	693a      	ldr	r2, [r7, #16]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f023 030a 	bic.w	r3, r3, #10
 8006dd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006dda:	697a      	ldr	r2, [r7, #20]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	4313      	orrs	r3, r2
 8006de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	693a      	ldr	r2, [r7, #16]
 8006de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	621a      	str	r2, [r3, #32]
}
 8006dee:	bf00      	nop
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b087      	sub	sp, #28
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	60f8      	str	r0, [r7, #12]
 8006e02:	60b9      	str	r1, [r7, #8]
 8006e04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6a1b      	ldr	r3, [r3, #32]
 8006e0a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	6a1b      	ldr	r3, [r3, #32]
 8006e10:	f023 0210 	bic.w	r2, r3, #16
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	699b      	ldr	r3, [r3, #24]
 8006e1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006e24:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	031b      	lsls	r3, r3, #12
 8006e2a:	693a      	ldr	r2, [r7, #16]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006e36:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	011b      	lsls	r3, r3, #4
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	621a      	str	r2, [r3, #32]
}
 8006e4e:	bf00      	nop
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b085      	sub	sp, #20
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e72:	683a      	ldr	r2, [r7, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	f043 0307 	orr.w	r3, r3, #7
 8006e7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	609a      	str	r2, [r3, #8]
}
 8006e84:	bf00      	nop
 8006e86:	3714      	adds	r7, #20
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ea4:	697b      	ldr	r3, [r7, #20]
 8006ea6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006eaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	021a      	lsls	r2, r3, #8
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	431a      	orrs	r2, r3
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	697a      	ldr	r2, [r7, #20]
 8006eba:	4313      	orrs	r3, r2
 8006ebc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	609a      	str	r2, [r3, #8]
}
 8006ec4:	bf00      	nop
 8006ec6:	371c      	adds	r7, #28
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr

08006ed0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b085      	sub	sp, #20
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d101      	bne.n	8006ee8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	e05a      	b.n	8006f9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2202      	movs	r2, #2
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a21      	ldr	r2, [pc, #132]	@ (8006fac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d022      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f34:	d01d      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a1d      	ldr	r2, [pc, #116]	@ (8006fb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d018      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	4a1b      	ldr	r2, [pc, #108]	@ (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4a1a      	ldr	r2, [pc, #104]	@ (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	d00e      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4a18      	ldr	r2, [pc, #96]	@ (8006fbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f5a:	4293      	cmp	r3, r2
 8006f5c:	d009      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	4a17      	ldr	r2, [pc, #92]	@ (8006fc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d004      	beq.n	8006f72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a15      	ldr	r2, [pc, #84]	@ (8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d10c      	bne.n	8006f8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006f78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	68ba      	ldr	r2, [r7, #8]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2201      	movs	r2, #1
 8006f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2200      	movs	r2, #0
 8006f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006f9c:	2300      	movs	r3, #0
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	40010000 	.word	0x40010000
 8006fb0:	40000400 	.word	0x40000400
 8006fb4:	40000800 	.word	0x40000800
 8006fb8:	40000c00 	.word	0x40000c00
 8006fbc:	40010400 	.word	0x40010400
 8006fc0:	40014000 	.word	0x40014000
 8006fc4:	40001800 	.word	0x40001800

08006fc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fd0:	bf00      	nop
 8006fd2:	370c      	adds	r7, #12
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fda:	4770      	bx	lr

08006fdc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b083      	sub	sp, #12
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d101      	bne.n	8007002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006ffe:	2301      	movs	r3, #1
 8007000:	e042      	b.n	8007088 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007008:	b2db      	uxtb	r3, r3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d106      	bne.n	800701c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2200      	movs	r2, #0
 8007012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f7fb f9b6 	bl	8002388 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2224      	movs	r2, #36	@ 0x24
 8007020:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	68da      	ldr	r2, [r3, #12]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007032:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fdbd 	bl	8007bb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	691a      	ldr	r2, [r3, #16]
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007048:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	695a      	ldr	r2, [r3, #20]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007058:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68da      	ldr	r2, [r3, #12]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007068:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2220      	movs	r2, #32
 8007074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2220      	movs	r2, #32
 800707c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2200      	movs	r2, #0
 8007084:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b08a      	sub	sp, #40	@ 0x28
 8007094:	af02      	add	r7, sp, #8
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	603b      	str	r3, [r7, #0]
 800709c:	4613      	mov	r3, r2
 800709e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80070a0:	2300      	movs	r3, #0
 80070a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070aa:	b2db      	uxtb	r3, r3
 80070ac:	2b20      	cmp	r3, #32
 80070ae:	d175      	bne.n	800719c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d002      	beq.n	80070bc <HAL_UART_Transmit+0x2c>
 80070b6:	88fb      	ldrh	r3, [r7, #6]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d101      	bne.n	80070c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80070bc:	2301      	movs	r3, #1
 80070be:	e06e      	b.n	800719e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	2200      	movs	r2, #0
 80070c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2221      	movs	r2, #33	@ 0x21
 80070ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80070ce:	f7fb fb97 	bl	8002800 <HAL_GetTick>
 80070d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	88fa      	ldrh	r2, [r7, #6]
 80070d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	88fa      	ldrh	r2, [r7, #6]
 80070de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070e8:	d108      	bne.n	80070fc <HAL_UART_Transmit+0x6c>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d104      	bne.n	80070fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80070f2:	2300      	movs	r3, #0
 80070f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	61bb      	str	r3, [r7, #24]
 80070fa:	e003      	b.n	8007104 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007100:	2300      	movs	r3, #0
 8007102:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007104:	e02e      	b.n	8007164 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	9300      	str	r3, [sp, #0]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	2200      	movs	r2, #0
 800710e:	2180      	movs	r1, #128	@ 0x80
 8007110:	68f8      	ldr	r0, [r7, #12]
 8007112:	f000 fb1f 	bl	8007754 <UART_WaitOnFlagUntilTimeout>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d005      	beq.n	8007128 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2220      	movs	r2, #32
 8007120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007124:	2303      	movs	r3, #3
 8007126:	e03a      	b.n	800719e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d10b      	bne.n	8007146 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800712e:	69bb      	ldr	r3, [r7, #24]
 8007130:	881b      	ldrh	r3, [r3, #0]
 8007132:	461a      	mov	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800713c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800713e:	69bb      	ldr	r3, [r7, #24]
 8007140:	3302      	adds	r3, #2
 8007142:	61bb      	str	r3, [r7, #24]
 8007144:	e007      	b.n	8007156 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	781a      	ldrb	r2, [r3, #0]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007150:	69fb      	ldr	r3, [r7, #28]
 8007152:	3301      	adds	r3, #1
 8007154:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800715a:	b29b      	uxth	r3, r3
 800715c:	3b01      	subs	r3, #1
 800715e:	b29a      	uxth	r2, r3
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1cb      	bne.n	8007106 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2200      	movs	r2, #0
 8007176:	2140      	movs	r1, #64	@ 0x40
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f000 faeb 	bl	8007754 <UART_WaitOnFlagUntilTimeout>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d005      	beq.n	8007190 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2220      	movs	r2, #32
 8007188:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e006      	b.n	800719e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2220      	movs	r2, #32
 8007194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007198:	2300      	movs	r3, #0
 800719a:	e000      	b.n	800719e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800719c:	2302      	movs	r3, #2
  }
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3720      	adds	r7, #32
 80071a2:	46bd      	mov	sp, r7
 80071a4:	bd80      	pop	{r7, pc}

080071a6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	60f8      	str	r0, [r7, #12]
 80071ae:	60b9      	str	r1, [r7, #8]
 80071b0:	4613      	mov	r3, r2
 80071b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80071ba:	b2db      	uxtb	r3, r3
 80071bc:	2b20      	cmp	r3, #32
 80071be:	d112      	bne.n	80071e6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d002      	beq.n	80071cc <HAL_UART_Receive_IT+0x26>
 80071c6:	88fb      	ldrh	r3, [r7, #6]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d101      	bne.n	80071d0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80071cc:	2301      	movs	r3, #1
 80071ce:	e00b      	b.n	80071e8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80071d6:	88fb      	ldrh	r3, [r7, #6]
 80071d8:	461a      	mov	r2, r3
 80071da:	68b9      	ldr	r1, [r7, #8]
 80071dc:	68f8      	ldr	r0, [r7, #12]
 80071de:	f000 fb12 	bl	8007806 <UART_Start_Receive_IT>
 80071e2:	4603      	mov	r3, r0
 80071e4:	e000      	b.n	80071e8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80071e6:	2302      	movs	r3, #2
  }
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3710      	adds	r7, #16
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b0ba      	sub	sp, #232	@ 0xe8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	695b      	ldr	r3, [r3, #20]
 8007212:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007216:	2300      	movs	r3, #0
 8007218:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800721c:	2300      	movs	r3, #0
 800721e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007226:	f003 030f 	and.w	r3, r3, #15
 800722a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800722e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10f      	bne.n	8007256 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800723a:	f003 0320 	and.w	r3, r3, #32
 800723e:	2b00      	cmp	r3, #0
 8007240:	d009      	beq.n	8007256 <HAL_UART_IRQHandler+0x66>
 8007242:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007246:	f003 0320 	and.w	r3, r3, #32
 800724a:	2b00      	cmp	r3, #0
 800724c:	d003      	beq.n	8007256 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fbf2 	bl	8007a38 <UART_Receive_IT>
      return;
 8007254:	e25b      	b.n	800770e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007256:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800725a:	2b00      	cmp	r3, #0
 800725c:	f000 80de 	beq.w	800741c <HAL_UART_IRQHandler+0x22c>
 8007260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	2b00      	cmp	r3, #0
 800726a:	d106      	bne.n	800727a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800726c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007270:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 80d1 	beq.w	800741c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800727a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800727e:	f003 0301 	and.w	r3, r3, #1
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00b      	beq.n	800729e <HAL_UART_IRQHandler+0xae>
 8007286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800728a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800728e:	2b00      	cmp	r3, #0
 8007290:	d005      	beq.n	800729e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007296:	f043 0201 	orr.w	r2, r3, #1
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800729e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072a2:	f003 0304 	and.w	r3, r3, #4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d00b      	beq.n	80072c2 <HAL_UART_IRQHandler+0xd2>
 80072aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d005      	beq.n	80072c2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072ba:	f043 0202 	orr.w	r2, r3, #2
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072c6:	f003 0302 	and.w	r3, r3, #2
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00b      	beq.n	80072e6 <HAL_UART_IRQHandler+0xf6>
 80072ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d005      	beq.n	80072e6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072de:	f043 0204 	orr.w	r2, r3, #4
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80072e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80072ea:	f003 0308 	and.w	r3, r3, #8
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d011      	beq.n	8007316 <HAL_UART_IRQHandler+0x126>
 80072f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80072f6:	f003 0320 	and.w	r3, r3, #32
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d105      	bne.n	800730a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80072fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d005      	beq.n	8007316 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800730e:	f043 0208 	orr.w	r2, r3, #8
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800731a:	2b00      	cmp	r3, #0
 800731c:	f000 81f2 	beq.w	8007704 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007320:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007324:	f003 0320 	and.w	r3, r3, #32
 8007328:	2b00      	cmp	r3, #0
 800732a:	d008      	beq.n	800733e <HAL_UART_IRQHandler+0x14e>
 800732c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007330:	f003 0320 	and.w	r3, r3, #32
 8007334:	2b00      	cmp	r3, #0
 8007336:	d002      	beq.n	800733e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fb7d 	bl	8007a38 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	695b      	ldr	r3, [r3, #20]
 8007344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007348:	2b40      	cmp	r3, #64	@ 0x40
 800734a:	bf0c      	ite	eq
 800734c:	2301      	moveq	r3, #1
 800734e:	2300      	movne	r3, #0
 8007350:	b2db      	uxtb	r3, r3
 8007352:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800735a:	f003 0308 	and.w	r3, r3, #8
 800735e:	2b00      	cmp	r3, #0
 8007360:	d103      	bne.n	800736a <HAL_UART_IRQHandler+0x17a>
 8007362:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007366:	2b00      	cmp	r3, #0
 8007368:	d04f      	beq.n	800740a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fa85 	bl	800787a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800737a:	2b40      	cmp	r3, #64	@ 0x40
 800737c:	d141      	bne.n	8007402 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3314      	adds	r3, #20
 8007384:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007388:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800738c:	e853 3f00 	ldrex	r3, [r3]
 8007390:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007394:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007398:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800739c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	3314      	adds	r3, #20
 80073a6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80073aa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80073ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073b2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80073b6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80073ba:	e841 2300 	strex	r3, r2, [r1]
 80073be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80073c2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1d9      	bne.n	800737e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d013      	beq.n	80073fa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073d6:	4a7e      	ldr	r2, [pc, #504]	@ (80075d0 <HAL_UART_IRQHandler+0x3e0>)
 80073d8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073de:	4618      	mov	r0, r3
 80073e0:	f7fb fc96 	bl	8002d10 <HAL_DMA_Abort_IT>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d016      	beq.n	8007418 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80073f4:	4610      	mov	r0, r2
 80073f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073f8:	e00e      	b.n	8007418 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f994 	bl	8007728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007400:	e00a      	b.n	8007418 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f990 	bl	8007728 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007408:	e006      	b.n	8007418 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800740a:	6878      	ldr	r0, [r7, #4]
 800740c:	f000 f98c 	bl	8007728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007416:	e175      	b.n	8007704 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007418:	bf00      	nop
    return;
 800741a:	e173      	b.n	8007704 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007420:	2b01      	cmp	r3, #1
 8007422:	f040 814f 	bne.w	80076c4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800742a:	f003 0310 	and.w	r3, r3, #16
 800742e:	2b00      	cmp	r3, #0
 8007430:	f000 8148 	beq.w	80076c4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007434:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007438:	f003 0310 	and.w	r3, r3, #16
 800743c:	2b00      	cmp	r3, #0
 800743e:	f000 8141 	beq.w	80076c4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007442:	2300      	movs	r3, #0
 8007444:	60bb      	str	r3, [r7, #8]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	60bb      	str	r3, [r7, #8]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	60bb      	str	r3, [r7, #8]
 8007456:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	695b      	ldr	r3, [r3, #20]
 800745e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007462:	2b40      	cmp	r3, #64	@ 0x40
 8007464:	f040 80b6 	bne.w	80075d4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007474:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007478:	2b00      	cmp	r3, #0
 800747a:	f000 8145 	beq.w	8007708 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007486:	429a      	cmp	r2, r3
 8007488:	f080 813e 	bcs.w	8007708 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007492:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800749e:	f000 8088 	beq.w	80075b2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	330c      	adds	r3, #12
 80074a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80074b0:	e853 3f00 	ldrex	r3, [r3]
 80074b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80074b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	330c      	adds	r3, #12
 80074ca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80074ce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80074d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074d6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80074da:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80074de:	e841 2300 	strex	r3, r2, [r1]
 80074e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80074e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1d9      	bne.n	80074a2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	3314      	adds	r3, #20
 80074f4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074f8:	e853 3f00 	ldrex	r3, [r3]
 80074fc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80074fe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007500:	f023 0301 	bic.w	r3, r3, #1
 8007504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3314      	adds	r3, #20
 800750e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007512:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007516:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007518:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800751a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007524:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e1      	bne.n	80074ee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3314      	adds	r3, #20
 8007530:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800753a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800753c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007540:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3314      	adds	r3, #20
 800754a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800754e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007550:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007554:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800755c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e3      	bne.n	800752a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2220      	movs	r2, #32
 8007566:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007582:	f023 0310 	bic.w	r3, r3, #16
 8007586:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	330c      	adds	r3, #12
 8007590:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007594:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007596:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007598:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800759a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800759c:	e841 2300 	strex	r3, r2, [r1]
 80075a0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80075a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e3      	bne.n	8007570 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ac:	4618      	mov	r0, r3
 80075ae:	f7fb fb3f 	bl	8002c30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2202      	movs	r2, #2
 80075b6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f8b7 	bl	800773c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075ce:	e09b      	b.n	8007708 <HAL_UART_IRQHandler+0x518>
 80075d0:	08007941 	.word	0x08007941
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075dc:	b29b      	uxth	r3, r3
 80075de:	1ad3      	subs	r3, r2, r3
 80075e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	f000 808e 	beq.w	800770c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80075f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	f000 8089 	beq.w	800770c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	330c      	adds	r3, #12
 8007600:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007604:	e853 3f00 	ldrex	r3, [r3]
 8007608:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800760a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800760c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007610:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	330c      	adds	r3, #12
 800761a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800761e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007620:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007622:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007624:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007626:	e841 2300 	strex	r3, r2, [r1]
 800762a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800762c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800762e:	2b00      	cmp	r3, #0
 8007630:	d1e3      	bne.n	80075fa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	3314      	adds	r3, #20
 8007638:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800763a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800763c:	e853 3f00 	ldrex	r3, [r3]
 8007640:	623b      	str	r3, [r7, #32]
   return(result);
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	f023 0301 	bic.w	r3, r3, #1
 8007648:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	3314      	adds	r3, #20
 8007652:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007656:	633a      	str	r2, [r7, #48]	@ 0x30
 8007658:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800765c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800765e:	e841 2300 	strex	r3, r2, [r1]
 8007662:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007666:	2b00      	cmp	r3, #0
 8007668:	d1e3      	bne.n	8007632 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2220      	movs	r2, #32
 800766e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	330c      	adds	r3, #12
 800767e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	60fb      	str	r3, [r7, #12]
   return(result);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	f023 0310 	bic.w	r3, r3, #16
 800768e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	330c      	adds	r3, #12
 8007698:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800769c:	61fa      	str	r2, [r7, #28]
 800769e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	69b9      	ldr	r1, [r7, #24]
 80076a2:	69fa      	ldr	r2, [r7, #28]
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	617b      	str	r3, [r7, #20]
   return(result);
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e3      	bne.n	8007678 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2202      	movs	r2, #2
 80076b4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076b6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f83d 	bl	800773c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076c2:	e023      	b.n	800770c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80076c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d009      	beq.n	80076e4 <HAL_UART_IRQHandler+0x4f4>
 80076d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d003      	beq.n	80076e4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 f943 	bl	8007968 <UART_Transmit_IT>
    return;
 80076e2:	e014      	b.n	800770e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80076e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d00e      	beq.n	800770e <HAL_UART_IRQHandler+0x51e>
 80076f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d008      	beq.n	800770e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f983 	bl	8007a08 <UART_EndTransmit_IT>
    return;
 8007702:	e004      	b.n	800770e <HAL_UART_IRQHandler+0x51e>
    return;
 8007704:	bf00      	nop
 8007706:	e002      	b.n	800770e <HAL_UART_IRQHandler+0x51e>
      return;
 8007708:	bf00      	nop
 800770a:	e000      	b.n	800770e <HAL_UART_IRQHandler+0x51e>
      return;
 800770c:	bf00      	nop
  }
}
 800770e:	37e8      	adds	r7, #232	@ 0xe8
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007714:	b480      	push	{r7}
 8007716:	b083      	sub	sp, #12
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800771c:	bf00      	nop
 800771e:	370c      	adds	r7, #12
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr

08007728 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	460b      	mov	r3, r1
 8007746:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007748:	bf00      	nop
 800774a:	370c      	adds	r7, #12
 800774c:	46bd      	mov	sp, r7
 800774e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007752:	4770      	bx	lr

08007754 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b086      	sub	sp, #24
 8007758:	af00      	add	r7, sp, #0
 800775a:	60f8      	str	r0, [r7, #12]
 800775c:	60b9      	str	r1, [r7, #8]
 800775e:	603b      	str	r3, [r7, #0]
 8007760:	4613      	mov	r3, r2
 8007762:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007764:	e03b      	b.n	80077de <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007766:	6a3b      	ldr	r3, [r7, #32]
 8007768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800776c:	d037      	beq.n	80077de <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800776e:	f7fb f847 	bl	8002800 <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	6a3a      	ldr	r2, [r7, #32]
 800777a:	429a      	cmp	r2, r3
 800777c:	d302      	bcc.n	8007784 <UART_WaitOnFlagUntilTimeout+0x30>
 800777e:	6a3b      	ldr	r3, [r7, #32]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d101      	bne.n	8007788 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007784:	2303      	movs	r3, #3
 8007786:	e03a      	b.n	80077fe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68db      	ldr	r3, [r3, #12]
 800778e:	f003 0304 	and.w	r3, r3, #4
 8007792:	2b00      	cmp	r3, #0
 8007794:	d023      	beq.n	80077de <UART_WaitOnFlagUntilTimeout+0x8a>
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	2b80      	cmp	r3, #128	@ 0x80
 800779a:	d020      	beq.n	80077de <UART_WaitOnFlagUntilTimeout+0x8a>
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	2b40      	cmp	r3, #64	@ 0x40
 80077a0:	d01d      	beq.n	80077de <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0308 	and.w	r3, r3, #8
 80077ac:	2b08      	cmp	r3, #8
 80077ae:	d116      	bne.n	80077de <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80077b0:	2300      	movs	r3, #0
 80077b2:	617b      	str	r3, [r7, #20]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	617b      	str	r3, [r7, #20]
 80077c4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077c6:	68f8      	ldr	r0, [r7, #12]
 80077c8:	f000 f857 	bl	800787a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2208      	movs	r2, #8
 80077d0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e00f      	b.n	80077fe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	4013      	ands	r3, r2
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	bf0c      	ite	eq
 80077ee:	2301      	moveq	r3, #1
 80077f0:	2300      	movne	r3, #0
 80077f2:	b2db      	uxtb	r3, r3
 80077f4:	461a      	mov	r2, r3
 80077f6:	79fb      	ldrb	r3, [r7, #7]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d0b4      	beq.n	8007766 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007806:	b480      	push	{r7}
 8007808:	b085      	sub	sp, #20
 800780a:	af00      	add	r7, sp, #0
 800780c:	60f8      	str	r0, [r7, #12]
 800780e:	60b9      	str	r1, [r7, #8]
 8007810:	4613      	mov	r3, r2
 8007812:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	88fa      	ldrh	r2, [r7, #6]
 800781e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	88fa      	ldrh	r2, [r7, #6]
 8007824:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2222      	movs	r2, #34	@ 0x22
 8007830:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	691b      	ldr	r3, [r3, #16]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d007      	beq.n	800784c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68da      	ldr	r2, [r3, #12]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800784a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	695a      	ldr	r2, [r3, #20]
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f042 0201 	orr.w	r2, r2, #1
 800785a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	68da      	ldr	r2, [r3, #12]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f042 0220 	orr.w	r2, r2, #32
 800786a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3714      	adds	r7, #20
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800787a:	b480      	push	{r7}
 800787c:	b095      	sub	sp, #84	@ 0x54
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	330c      	adds	r3, #12
 8007888:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800788c:	e853 3f00 	ldrex	r3, [r3]
 8007890:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007892:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007894:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007898:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	330c      	adds	r3, #12
 80078a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80078a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80078a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80078a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80078aa:	e841 2300 	strex	r3, r2, [r1]
 80078ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80078b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1e5      	bne.n	8007882 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	3314      	adds	r3, #20
 80078bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	e853 3f00 	ldrex	r3, [r3]
 80078c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	f023 0301 	bic.w	r3, r3, #1
 80078cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	3314      	adds	r3, #20
 80078d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078de:	e841 2300 	strex	r3, r2, [r1]
 80078e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1e5      	bne.n	80078b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d119      	bne.n	8007926 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	330c      	adds	r3, #12
 80078f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	e853 3f00 	ldrex	r3, [r3]
 8007900:	60bb      	str	r3, [r7, #8]
   return(result);
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	f023 0310 	bic.w	r3, r3, #16
 8007908:	647b      	str	r3, [r7, #68]	@ 0x44
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	330c      	adds	r3, #12
 8007910:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007912:	61ba      	str	r2, [r7, #24]
 8007914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007916:	6979      	ldr	r1, [r7, #20]
 8007918:	69ba      	ldr	r2, [r7, #24]
 800791a:	e841 2300 	strex	r3, r2, [r1]
 800791e:	613b      	str	r3, [r7, #16]
   return(result);
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1e5      	bne.n	80078f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2220      	movs	r2, #32
 800792a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007934:	bf00      	nop
 8007936:	3754      	adds	r7, #84	@ 0x54
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800794c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2200      	movs	r2, #0
 8007958:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800795a:	68f8      	ldr	r0, [r7, #12]
 800795c:	f7ff fee4 	bl	8007728 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007960:	bf00      	nop
 8007962:	3710      	adds	r7, #16
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007968:	b480      	push	{r7}
 800796a:	b085      	sub	sp, #20
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007976:	b2db      	uxtb	r3, r3
 8007978:	2b21      	cmp	r3, #33	@ 0x21
 800797a:	d13e      	bne.n	80079fa <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007984:	d114      	bne.n	80079b0 <UART_Transmit_IT+0x48>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	691b      	ldr	r3, [r3, #16]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d110      	bne.n	80079b0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6a1b      	ldr	r3, [r3, #32]
 8007992:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	881b      	ldrh	r3, [r3, #0]
 8007998:	461a      	mov	r2, r3
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079a2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6a1b      	ldr	r3, [r3, #32]
 80079a8:	1c9a      	adds	r2, r3, #2
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	621a      	str	r2, [r3, #32]
 80079ae:	e008      	b.n	80079c2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6a1b      	ldr	r3, [r3, #32]
 80079b4:	1c59      	adds	r1, r3, #1
 80079b6:	687a      	ldr	r2, [r7, #4]
 80079b8:	6211      	str	r1, [r2, #32]
 80079ba:	781a      	ldrb	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	3b01      	subs	r3, #1
 80079ca:	b29b      	uxth	r3, r3
 80079cc:	687a      	ldr	r2, [r7, #4]
 80079ce:	4619      	mov	r1, r3
 80079d0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d10f      	bne.n	80079f6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	68da      	ldr	r2, [r3, #12]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80079e4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68da      	ldr	r2, [r3, #12]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80079f4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80079f6:	2300      	movs	r3, #0
 80079f8:	e000      	b.n	80079fc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80079fa:	2302      	movs	r3, #2
  }
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3714      	adds	r7, #20
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr

08007a08 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	b082      	sub	sp, #8
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a1e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2220      	movs	r2, #32
 8007a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff fe73 	bl	8007714 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007a2e:	2300      	movs	r3, #0
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	3708      	adds	r7, #8
 8007a34:	46bd      	mov	sp, r7
 8007a36:	bd80      	pop	{r7, pc}

08007a38 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b08c      	sub	sp, #48	@ 0x30
 8007a3c:	af00      	add	r7, sp, #0
 8007a3e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	2b22      	cmp	r3, #34	@ 0x22
 8007a4a:	f040 80ae 	bne.w	8007baa <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a56:	d117      	bne.n	8007a88 <UART_Receive_IT+0x50>
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d113      	bne.n	8007a88 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007a60:	2300      	movs	r3, #0
 8007a62:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a68:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a76:	b29a      	uxth	r2, r3
 8007a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a80:	1c9a      	adds	r2, r3, #2
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	629a      	str	r2, [r3, #40]	@ 0x28
 8007a86:	e026      	b.n	8007ad6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	689b      	ldr	r3, [r3, #8]
 8007a96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a9a:	d007      	beq.n	8007aac <UART_Receive_IT+0x74>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d10a      	bne.n	8007aba <UART_Receive_IT+0x82>
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d106      	bne.n	8007aba <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ab6:	701a      	strb	r2, [r3, #0]
 8007ab8:	e008      	b.n	8007acc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aca:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ad0:	1c5a      	adds	r2, r3, #1
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	3b01      	subs	r3, #1
 8007ade:	b29b      	uxth	r3, r3
 8007ae0:	687a      	ldr	r2, [r7, #4]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d15d      	bne.n	8007ba6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	68da      	ldr	r2, [r3, #12]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f022 0220 	bic.w	r2, r2, #32
 8007af8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	68da      	ldr	r2, [r3, #12]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007b08:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	695a      	ldr	r2, [r3, #20]
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f022 0201 	bic.w	r2, r2, #1
 8007b18:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d135      	bne.n	8007b9c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	2200      	movs	r2, #0
 8007b34:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	330c      	adds	r3, #12
 8007b3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3e:	697b      	ldr	r3, [r7, #20]
 8007b40:	e853 3f00 	ldrex	r3, [r3]
 8007b44:	613b      	str	r3, [r7, #16]
   return(result);
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	f023 0310 	bic.w	r3, r3, #16
 8007b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	330c      	adds	r3, #12
 8007b54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007b56:	623a      	str	r2, [r7, #32]
 8007b58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5a:	69f9      	ldr	r1, [r7, #28]
 8007b5c:	6a3a      	ldr	r2, [r7, #32]
 8007b5e:	e841 2300 	strex	r3, r2, [r1]
 8007b62:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1e5      	bne.n	8007b36 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0310 	and.w	r3, r3, #16
 8007b74:	2b10      	cmp	r3, #16
 8007b76:	d10a      	bne.n	8007b8e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b78:	2300      	movs	r3, #0
 8007b7a:	60fb      	str	r3, [r7, #12]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b92:	4619      	mov	r1, r3
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f7ff fdd1 	bl	800773c <HAL_UARTEx_RxEventCallback>
 8007b9a:	e002      	b.n	8007ba2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7fa fca9 	bl	80024f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	e002      	b.n	8007bac <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e000      	b.n	8007bac <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007baa:	2302      	movs	r3, #2
  }
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3730      	adds	r7, #48	@ 0x30
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007bb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007bb8:	b0c0      	sub	sp, #256	@ 0x100
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	691b      	ldr	r3, [r3, #16]
 8007bc8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd0:	68d9      	ldr	r1, [r3, #12]
 8007bd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	ea40 0301 	orr.w	r3, r0, r1
 8007bdc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be2:	689a      	ldr	r2, [r3, #8]
 8007be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007be8:	691b      	ldr	r3, [r3, #16]
 8007bea:	431a      	orrs	r2, r3
 8007bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf0:	695b      	ldr	r3, [r3, #20]
 8007bf2:	431a      	orrs	r2, r3
 8007bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bf8:	69db      	ldr	r3, [r3, #28]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	68db      	ldr	r3, [r3, #12]
 8007c08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007c0c:	f021 010c 	bic.w	r1, r1, #12
 8007c10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c14:	681a      	ldr	r2, [r3, #0]
 8007c16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c1a:	430b      	orrs	r3, r1
 8007c1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	695b      	ldr	r3, [r3, #20]
 8007c26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c2e:	6999      	ldr	r1, [r3, #24]
 8007c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	ea40 0301 	orr.w	r3, r0, r1
 8007c3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c40:	681a      	ldr	r2, [r3, #0]
 8007c42:	4b8f      	ldr	r3, [pc, #572]	@ (8007e80 <UART_SetConfig+0x2cc>)
 8007c44:	429a      	cmp	r2, r3
 8007c46:	d005      	beq.n	8007c54 <UART_SetConfig+0xa0>
 8007c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	4b8d      	ldr	r3, [pc, #564]	@ (8007e84 <UART_SetConfig+0x2d0>)
 8007c50:	429a      	cmp	r2, r3
 8007c52:	d104      	bne.n	8007c5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007c54:	f7fd fb4c 	bl	80052f0 <HAL_RCC_GetPCLK2Freq>
 8007c58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007c5c:	e003      	b.n	8007c66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007c5e:	f7fd fb33 	bl	80052c8 <HAL_RCC_GetPCLK1Freq>
 8007c62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c6a:	69db      	ldr	r3, [r3, #28]
 8007c6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c70:	f040 810c 	bne.w	8007e8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007c74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007c7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007c82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007c86:	4622      	mov	r2, r4
 8007c88:	462b      	mov	r3, r5
 8007c8a:	1891      	adds	r1, r2, r2
 8007c8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007c8e:	415b      	adcs	r3, r3
 8007c90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007c92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007c96:	4621      	mov	r1, r4
 8007c98:	eb12 0801 	adds.w	r8, r2, r1
 8007c9c:	4629      	mov	r1, r5
 8007c9e:	eb43 0901 	adc.w	r9, r3, r1
 8007ca2:	f04f 0200 	mov.w	r2, #0
 8007ca6:	f04f 0300 	mov.w	r3, #0
 8007caa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007cae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007cb2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007cb6:	4690      	mov	r8, r2
 8007cb8:	4699      	mov	r9, r3
 8007cba:	4623      	mov	r3, r4
 8007cbc:	eb18 0303 	adds.w	r3, r8, r3
 8007cc0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007cc4:	462b      	mov	r3, r5
 8007cc6:	eb49 0303 	adc.w	r3, r9, r3
 8007cca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007cda:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007cde:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	18db      	adds	r3, r3, r3
 8007ce6:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ce8:	4613      	mov	r3, r2
 8007cea:	eb42 0303 	adc.w	r3, r2, r3
 8007cee:	657b      	str	r3, [r7, #84]	@ 0x54
 8007cf0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007cf4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007cf8:	f7f8 ffc6 	bl	8000c88 <__aeabi_uldivmod>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	460b      	mov	r3, r1
 8007d00:	4b61      	ldr	r3, [pc, #388]	@ (8007e88 <UART_SetConfig+0x2d4>)
 8007d02:	fba3 2302 	umull	r2, r3, r3, r2
 8007d06:	095b      	lsrs	r3, r3, #5
 8007d08:	011c      	lsls	r4, r3, #4
 8007d0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007d18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007d1c:	4642      	mov	r2, r8
 8007d1e:	464b      	mov	r3, r9
 8007d20:	1891      	adds	r1, r2, r2
 8007d22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007d24:	415b      	adcs	r3, r3
 8007d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007d2c:	4641      	mov	r1, r8
 8007d2e:	eb12 0a01 	adds.w	sl, r2, r1
 8007d32:	4649      	mov	r1, r9
 8007d34:	eb43 0b01 	adc.w	fp, r3, r1
 8007d38:	f04f 0200 	mov.w	r2, #0
 8007d3c:	f04f 0300 	mov.w	r3, #0
 8007d40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007d44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007d48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007d4c:	4692      	mov	sl, r2
 8007d4e:	469b      	mov	fp, r3
 8007d50:	4643      	mov	r3, r8
 8007d52:	eb1a 0303 	adds.w	r3, sl, r3
 8007d56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007d5a:	464b      	mov	r3, r9
 8007d5c:	eb4b 0303 	adc.w	r3, fp, r3
 8007d60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d68:	685b      	ldr	r3, [r3, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007d74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007d78:	460b      	mov	r3, r1
 8007d7a:	18db      	adds	r3, r3, r3
 8007d7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8007d7e:	4613      	mov	r3, r2
 8007d80:	eb42 0303 	adc.w	r3, r2, r3
 8007d84:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007d8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007d8e:	f7f8 ff7b 	bl	8000c88 <__aeabi_uldivmod>
 8007d92:	4602      	mov	r2, r0
 8007d94:	460b      	mov	r3, r1
 8007d96:	4611      	mov	r1, r2
 8007d98:	4b3b      	ldr	r3, [pc, #236]	@ (8007e88 <UART_SetConfig+0x2d4>)
 8007d9a:	fba3 2301 	umull	r2, r3, r3, r1
 8007d9e:	095b      	lsrs	r3, r3, #5
 8007da0:	2264      	movs	r2, #100	@ 0x64
 8007da2:	fb02 f303 	mul.w	r3, r2, r3
 8007da6:	1acb      	subs	r3, r1, r3
 8007da8:	00db      	lsls	r3, r3, #3
 8007daa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007dae:	4b36      	ldr	r3, [pc, #216]	@ (8007e88 <UART_SetConfig+0x2d4>)
 8007db0:	fba3 2302 	umull	r2, r3, r3, r2
 8007db4:	095b      	lsrs	r3, r3, #5
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007dbc:	441c      	add	r4, r3
 8007dbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007dc8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007dcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007dd0:	4642      	mov	r2, r8
 8007dd2:	464b      	mov	r3, r9
 8007dd4:	1891      	adds	r1, r2, r2
 8007dd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007dd8:	415b      	adcs	r3, r3
 8007dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ddc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007de0:	4641      	mov	r1, r8
 8007de2:	1851      	adds	r1, r2, r1
 8007de4:	6339      	str	r1, [r7, #48]	@ 0x30
 8007de6:	4649      	mov	r1, r9
 8007de8:	414b      	adcs	r3, r1
 8007dea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dec:	f04f 0200 	mov.w	r2, #0
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007df8:	4659      	mov	r1, fp
 8007dfa:	00cb      	lsls	r3, r1, #3
 8007dfc:	4651      	mov	r1, sl
 8007dfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e02:	4651      	mov	r1, sl
 8007e04:	00ca      	lsls	r2, r1, #3
 8007e06:	4610      	mov	r0, r2
 8007e08:	4619      	mov	r1, r3
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	4642      	mov	r2, r8
 8007e0e:	189b      	adds	r3, r3, r2
 8007e10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e14:	464b      	mov	r3, r9
 8007e16:	460a      	mov	r2, r1
 8007e18:	eb42 0303 	adc.w	r3, r2, r3
 8007e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007e30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e34:	460b      	mov	r3, r1
 8007e36:	18db      	adds	r3, r3, r3
 8007e38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	eb42 0303 	adc.w	r3, r2, r3
 8007e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007e46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007e4a:	f7f8 ff1d 	bl	8000c88 <__aeabi_uldivmod>
 8007e4e:	4602      	mov	r2, r0
 8007e50:	460b      	mov	r3, r1
 8007e52:	4b0d      	ldr	r3, [pc, #52]	@ (8007e88 <UART_SetConfig+0x2d4>)
 8007e54:	fba3 1302 	umull	r1, r3, r3, r2
 8007e58:	095b      	lsrs	r3, r3, #5
 8007e5a:	2164      	movs	r1, #100	@ 0x64
 8007e5c:	fb01 f303 	mul.w	r3, r1, r3
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	00db      	lsls	r3, r3, #3
 8007e64:	3332      	adds	r3, #50	@ 0x32
 8007e66:	4a08      	ldr	r2, [pc, #32]	@ (8007e88 <UART_SetConfig+0x2d4>)
 8007e68:	fba2 2303 	umull	r2, r3, r2, r3
 8007e6c:	095b      	lsrs	r3, r3, #5
 8007e6e:	f003 0207 	and.w	r2, r3, #7
 8007e72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4422      	add	r2, r4
 8007e7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007e7c:	e106      	b.n	800808c <UART_SetConfig+0x4d8>
 8007e7e:	bf00      	nop
 8007e80:	40011000 	.word	0x40011000
 8007e84:	40011400 	.word	0x40011400
 8007e88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007e8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e90:	2200      	movs	r2, #0
 8007e92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007e96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007e9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007e9e:	4642      	mov	r2, r8
 8007ea0:	464b      	mov	r3, r9
 8007ea2:	1891      	adds	r1, r2, r2
 8007ea4:	6239      	str	r1, [r7, #32]
 8007ea6:	415b      	adcs	r3, r3
 8007ea8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007eaa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007eae:	4641      	mov	r1, r8
 8007eb0:	1854      	adds	r4, r2, r1
 8007eb2:	4649      	mov	r1, r9
 8007eb4:	eb43 0501 	adc.w	r5, r3, r1
 8007eb8:	f04f 0200 	mov.w	r2, #0
 8007ebc:	f04f 0300 	mov.w	r3, #0
 8007ec0:	00eb      	lsls	r3, r5, #3
 8007ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ec6:	00e2      	lsls	r2, r4, #3
 8007ec8:	4614      	mov	r4, r2
 8007eca:	461d      	mov	r5, r3
 8007ecc:	4643      	mov	r3, r8
 8007ece:	18e3      	adds	r3, r4, r3
 8007ed0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ed4:	464b      	mov	r3, r9
 8007ed6:	eb45 0303 	adc.w	r3, r5, r3
 8007eda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007ede:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007eea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007eee:	f04f 0200 	mov.w	r2, #0
 8007ef2:	f04f 0300 	mov.w	r3, #0
 8007ef6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007efa:	4629      	mov	r1, r5
 8007efc:	008b      	lsls	r3, r1, #2
 8007efe:	4621      	mov	r1, r4
 8007f00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f04:	4621      	mov	r1, r4
 8007f06:	008a      	lsls	r2, r1, #2
 8007f08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007f0c:	f7f8 febc 	bl	8000c88 <__aeabi_uldivmod>
 8007f10:	4602      	mov	r2, r0
 8007f12:	460b      	mov	r3, r1
 8007f14:	4b60      	ldr	r3, [pc, #384]	@ (8008098 <UART_SetConfig+0x4e4>)
 8007f16:	fba3 2302 	umull	r2, r3, r3, r2
 8007f1a:	095b      	lsrs	r3, r3, #5
 8007f1c:	011c      	lsls	r4, r3, #4
 8007f1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f22:	2200      	movs	r2, #0
 8007f24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007f2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007f30:	4642      	mov	r2, r8
 8007f32:	464b      	mov	r3, r9
 8007f34:	1891      	adds	r1, r2, r2
 8007f36:	61b9      	str	r1, [r7, #24]
 8007f38:	415b      	adcs	r3, r3
 8007f3a:	61fb      	str	r3, [r7, #28]
 8007f3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f40:	4641      	mov	r1, r8
 8007f42:	1851      	adds	r1, r2, r1
 8007f44:	6139      	str	r1, [r7, #16]
 8007f46:	4649      	mov	r1, r9
 8007f48:	414b      	adcs	r3, r1
 8007f4a:	617b      	str	r3, [r7, #20]
 8007f4c:	f04f 0200 	mov.w	r2, #0
 8007f50:	f04f 0300 	mov.w	r3, #0
 8007f54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007f58:	4659      	mov	r1, fp
 8007f5a:	00cb      	lsls	r3, r1, #3
 8007f5c:	4651      	mov	r1, sl
 8007f5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f62:	4651      	mov	r1, sl
 8007f64:	00ca      	lsls	r2, r1, #3
 8007f66:	4610      	mov	r0, r2
 8007f68:	4619      	mov	r1, r3
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	4642      	mov	r2, r8
 8007f6e:	189b      	adds	r3, r3, r2
 8007f70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007f74:	464b      	mov	r3, r9
 8007f76:	460a      	mov	r2, r1
 8007f78:	eb42 0303 	adc.w	r3, r2, r3
 8007f7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007f8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007f8c:	f04f 0200 	mov.w	r2, #0
 8007f90:	f04f 0300 	mov.w	r3, #0
 8007f94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007f98:	4649      	mov	r1, r9
 8007f9a:	008b      	lsls	r3, r1, #2
 8007f9c:	4641      	mov	r1, r8
 8007f9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fa2:	4641      	mov	r1, r8
 8007fa4:	008a      	lsls	r2, r1, #2
 8007fa6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007faa:	f7f8 fe6d 	bl	8000c88 <__aeabi_uldivmod>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	4611      	mov	r1, r2
 8007fb4:	4b38      	ldr	r3, [pc, #224]	@ (8008098 <UART_SetConfig+0x4e4>)
 8007fb6:	fba3 2301 	umull	r2, r3, r3, r1
 8007fba:	095b      	lsrs	r3, r3, #5
 8007fbc:	2264      	movs	r2, #100	@ 0x64
 8007fbe:	fb02 f303 	mul.w	r3, r2, r3
 8007fc2:	1acb      	subs	r3, r1, r3
 8007fc4:	011b      	lsls	r3, r3, #4
 8007fc6:	3332      	adds	r3, #50	@ 0x32
 8007fc8:	4a33      	ldr	r2, [pc, #204]	@ (8008098 <UART_SetConfig+0x4e4>)
 8007fca:	fba2 2303 	umull	r2, r3, r2, r3
 8007fce:	095b      	lsrs	r3, r3, #5
 8007fd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007fd4:	441c      	add	r4, r3
 8007fd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fda:	2200      	movs	r2, #0
 8007fdc:	673b      	str	r3, [r7, #112]	@ 0x70
 8007fde:	677a      	str	r2, [r7, #116]	@ 0x74
 8007fe0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007fe4:	4642      	mov	r2, r8
 8007fe6:	464b      	mov	r3, r9
 8007fe8:	1891      	adds	r1, r2, r2
 8007fea:	60b9      	str	r1, [r7, #8]
 8007fec:	415b      	adcs	r3, r3
 8007fee:	60fb      	str	r3, [r7, #12]
 8007ff0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007ff4:	4641      	mov	r1, r8
 8007ff6:	1851      	adds	r1, r2, r1
 8007ff8:	6039      	str	r1, [r7, #0]
 8007ffa:	4649      	mov	r1, r9
 8007ffc:	414b      	adcs	r3, r1
 8007ffe:	607b      	str	r3, [r7, #4]
 8008000:	f04f 0200 	mov.w	r2, #0
 8008004:	f04f 0300 	mov.w	r3, #0
 8008008:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800800c:	4659      	mov	r1, fp
 800800e:	00cb      	lsls	r3, r1, #3
 8008010:	4651      	mov	r1, sl
 8008012:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008016:	4651      	mov	r1, sl
 8008018:	00ca      	lsls	r2, r1, #3
 800801a:	4610      	mov	r0, r2
 800801c:	4619      	mov	r1, r3
 800801e:	4603      	mov	r3, r0
 8008020:	4642      	mov	r2, r8
 8008022:	189b      	adds	r3, r3, r2
 8008024:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008026:	464b      	mov	r3, r9
 8008028:	460a      	mov	r2, r1
 800802a:	eb42 0303 	adc.w	r3, r2, r3
 800802e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	663b      	str	r3, [r7, #96]	@ 0x60
 800803a:	667a      	str	r2, [r7, #100]	@ 0x64
 800803c:	f04f 0200 	mov.w	r2, #0
 8008040:	f04f 0300 	mov.w	r3, #0
 8008044:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008048:	4649      	mov	r1, r9
 800804a:	008b      	lsls	r3, r1, #2
 800804c:	4641      	mov	r1, r8
 800804e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008052:	4641      	mov	r1, r8
 8008054:	008a      	lsls	r2, r1, #2
 8008056:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800805a:	f7f8 fe15 	bl	8000c88 <__aeabi_uldivmod>
 800805e:	4602      	mov	r2, r0
 8008060:	460b      	mov	r3, r1
 8008062:	4b0d      	ldr	r3, [pc, #52]	@ (8008098 <UART_SetConfig+0x4e4>)
 8008064:	fba3 1302 	umull	r1, r3, r3, r2
 8008068:	095b      	lsrs	r3, r3, #5
 800806a:	2164      	movs	r1, #100	@ 0x64
 800806c:	fb01 f303 	mul.w	r3, r1, r3
 8008070:	1ad3      	subs	r3, r2, r3
 8008072:	011b      	lsls	r3, r3, #4
 8008074:	3332      	adds	r3, #50	@ 0x32
 8008076:	4a08      	ldr	r2, [pc, #32]	@ (8008098 <UART_SetConfig+0x4e4>)
 8008078:	fba2 2303 	umull	r2, r3, r2, r3
 800807c:	095b      	lsrs	r3, r3, #5
 800807e:	f003 020f 	and.w	r2, r3, #15
 8008082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4422      	add	r2, r4
 800808a:	609a      	str	r2, [r3, #8]
}
 800808c:	bf00      	nop
 800808e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008092:	46bd      	mov	sp, r7
 8008094:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008098:	51eb851f 	.word	0x51eb851f

0800809c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800809c:	b084      	sub	sp, #16
 800809e:	b480      	push	{r7}
 80080a0:	b085      	sub	sp, #20
 80080a2:	af00      	add	r7, sp, #0
 80080a4:	6078      	str	r0, [r7, #4]
 80080a6:	f107 001c 	add.w	r0, r7, #28
 80080aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80080b2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80080b4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80080b6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80080b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 80080ba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80080bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 80080be:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80080c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 80080c2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80080c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 80080c6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80080c8:	68fa      	ldr	r2, [r7, #12]
 80080ca:	4313      	orrs	r3, r2
 80080cc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 80080d6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80080da:	68fa      	ldr	r2, [r7, #12]
 80080dc:	431a      	orrs	r2, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80080e2:	2300      	movs	r3, #0
}
 80080e4:	4618      	mov	r0, r3
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	b004      	add	sp, #16
 80080f0:	4770      	bx	lr

080080f2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80080f2:	b480      	push	{r7}
 80080f4:	b083      	sub	sp, #12
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8008100:	4618      	mov	r0, r3
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810a:	4770      	bx	lr

0800810c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
 8008114:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	681a      	ldr	r2, [r3, #0]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	370c      	adds	r7, #12
 8008126:	46bd      	mov	sp, r7
 8008128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812c:	4770      	bx	lr

0800812e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800812e:	b480      	push	{r7}
 8008130:	b083      	sub	sp, #12
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	2203      	movs	r2, #3
 800813a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800813c:	2300      	movs	r3, #0
}
 800813e:	4618      	mov	r0, r3
 8008140:	370c      	adds	r7, #12
 8008142:	46bd      	mov	sp, r7
 8008144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008148:	4770      	bx	lr

0800814a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800814a:	b480      	push	{r7}
 800814c:	b083      	sub	sp, #12
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0303 	and.w	r3, r3, #3
}
 800815a:	4618      	mov	r0, r3
 800815c:	370c      	adds	r7, #12
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr

08008166 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8008166:	b480      	push	{r7}
 8008168:	b085      	sub	sp, #20
 800816a:	af00      	add	r7, sp, #0
 800816c:	6078      	str	r0, [r7, #4]
 800816e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008170:	2300      	movs	r3, #0
 8008172:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681a      	ldr	r2, [r3, #0]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008184:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800818a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008190:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008192:	68fa      	ldr	r2, [r7, #12]
 8008194:	4313      	orrs	r3, r2
 8008196:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68db      	ldr	r3, [r3, #12]
 800819c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80081a0:	f023 030f 	bic.w	r3, r3, #15
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	431a      	orrs	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80081ac:	2300      	movs	r3, #0
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80081ba:	b480      	push	{r7}
 80081bc:	b083      	sub	sp, #12
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	b2db      	uxtb	r3, r3
}
 80081c8:	4618      	mov	r0, r3
 80081ca:	370c      	adds	r7, #12
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80081d4:	b480      	push	{r7}
 80081d6:	b085      	sub	sp, #20
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
 80081dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	3314      	adds	r3, #20
 80081e2:	461a      	mov	r2, r3
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	4413      	add	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	681b      	ldr	r3, [r3, #0]
}  
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr

080081fa <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80081fa:	b480      	push	{r7}
 80081fc:	b085      	sub	sp, #20
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008204:	2300      	movs	r3, #0
 8008206:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685a      	ldr	r2, [r3, #4]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008220:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8008226:	431a      	orrs	r2, r3
                       Data->DPSM);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800822c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800822e:	68fa      	ldr	r2, [r7, #12]
 8008230:	4313      	orrs	r3, r2
 8008232:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008238:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	431a      	orrs	r2, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8008244:	2300      	movs	r3, #0

}
 8008246:	4618      	mov	r0, r3
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr

08008252 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8008252:	b580      	push	{r7, lr}
 8008254:	b088      	sub	sp, #32
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
 800825a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8008260:	2310      	movs	r3, #16
 8008262:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008264:	2340      	movs	r3, #64	@ 0x40
 8008266:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008268:	2300      	movs	r3, #0
 800826a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800826c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008270:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008272:	f107 0308 	add.w	r3, r7, #8
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f7ff ff74 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800827e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008282:	2110      	movs	r1, #16
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f9d7 	bl	8008638 <SDMMC_GetCmdResp1>
 800828a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800828c:	69fb      	ldr	r3, [r7, #28]
}
 800828e:	4618      	mov	r0, r3
 8008290:	3720      	adds	r7, #32
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b088      	sub	sp, #32
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80082a4:	2311      	movs	r3, #17
 80082a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082a8:	2340      	movs	r3, #64	@ 0x40
 80082aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082ac:	2300      	movs	r3, #0
 80082ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082b6:	f107 0308 	add.w	r3, r7, #8
 80082ba:	4619      	mov	r1, r3
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7ff ff52 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80082c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082c6:	2111      	movs	r1, #17
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f9b5 	bl	8008638 <SDMMC_GetCmdResp1>
 80082ce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80082d0:	69fb      	ldr	r3, [r7, #28]
}
 80082d2:	4618      	mov	r0, r3
 80082d4:	3720      	adds	r7, #32
 80082d6:	46bd      	mov	sp, r7
 80082d8:	bd80      	pop	{r7, pc}

080082da <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80082da:	b580      	push	{r7, lr}
 80082dc:	b088      	sub	sp, #32
 80082de:	af00      	add	r7, sp, #0
 80082e0:	6078      	str	r0, [r7, #4]
 80082e2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80082e8:	2312      	movs	r3, #18
 80082ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80082ec:	2340      	movs	r3, #64	@ 0x40
 80082ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80082f0:	2300      	movs	r3, #0
 80082f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80082f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80082fa:	f107 0308 	add.w	r3, r7, #8
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7ff ff30 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008306:	f241 3288 	movw	r2, #5000	@ 0x1388
 800830a:	2112      	movs	r1, #18
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 f993 	bl	8008638 <SDMMC_GetCmdResp1>
 8008312:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008314:	69fb      	ldr	r3, [r7, #28]
}
 8008316:	4618      	mov	r0, r3
 8008318:	3720      	adds	r7, #32
 800831a:	46bd      	mov	sp, r7
 800831c:	bd80      	pop	{r7, pc}

0800831e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800831e:	b580      	push	{r7, lr}
 8008320:	b088      	sub	sp, #32
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
 8008326:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800832c:	2318      	movs	r3, #24
 800832e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008330:	2340      	movs	r3, #64	@ 0x40
 8008332:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008334:	2300      	movs	r3, #0
 8008336:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008338:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800833c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800833e:	f107 0308 	add.w	r3, r7, #8
 8008342:	4619      	mov	r1, r3
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f7ff ff0e 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800834a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800834e:	2118      	movs	r1, #24
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f971 	bl	8008638 <SDMMC_GetCmdResp1>
 8008356:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008358:	69fb      	ldr	r3, [r7, #28]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3720      	adds	r7, #32
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008362:	b580      	push	{r7, lr}
 8008364:	b088      	sub	sp, #32
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
 800836a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008370:	2319      	movs	r3, #25
 8008372:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008374:	2340      	movs	r3, #64	@ 0x40
 8008376:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008378:	2300      	movs	r3, #0
 800837a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800837c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008380:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008382:	f107 0308 	add.w	r3, r7, #8
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7ff feec 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800838e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008392:	2119      	movs	r1, #25
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f94f 	bl	8008638 <SDMMC_GetCmdResp1>
 800839a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800839c:	69fb      	ldr	r3, [r7, #28]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3720      	adds	r7, #32
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b088      	sub	sp, #32
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80083b0:	2300      	movs	r3, #0
 80083b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80083b4:	230c      	movs	r3, #12
 80083b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80083b8:	2340      	movs	r3, #64	@ 0x40
 80083ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80083bc:	2300      	movs	r3, #0
 80083be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80083c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80083c6:	f107 0308 	add.w	r3, r7, #8
 80083ca:	4619      	mov	r1, r3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f7ff feca 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80083d2:	4a05      	ldr	r2, [pc, #20]	@ (80083e8 <SDMMC_CmdStopTransfer+0x40>)
 80083d4:	210c      	movs	r1, #12
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f000 f92e 	bl	8008638 <SDMMC_GetCmdResp1>
 80083dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80083de:	69fb      	ldr	r3, [r7, #28]
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	3720      	adds	r7, #32
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}
 80083e8:	05f5e100 	.word	0x05f5e100

080083ec <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b08a      	sub	sp, #40	@ 0x28
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80083fc:	2307      	movs	r3, #7
 80083fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008400:	2340      	movs	r3, #64	@ 0x40
 8008402:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008404:	2300      	movs	r3, #0
 8008406:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008408:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800840c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800840e:	f107 0310 	add.w	r3, r7, #16
 8008412:	4619      	mov	r1, r3
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f7ff fea6 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800841a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800841e:	2107      	movs	r1, #7
 8008420:	68f8      	ldr	r0, [r7, #12]
 8008422:	f000 f909 	bl	8008638 <SDMMC_GetCmdResp1>
 8008426:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8008428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800842a:	4618      	mov	r0, r3
 800842c:	3728      	adds	r7, #40	@ 0x28
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}

08008432 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008432:	b580      	push	{r7, lr}
 8008434:	b088      	sub	sp, #32
 8008436:	af00      	add	r7, sp, #0
 8008438:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800843a:	2300      	movs	r3, #0
 800843c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800843e:	2300      	movs	r3, #0
 8008440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008442:	2300      	movs	r3, #0
 8008444:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008446:	2300      	movs	r3, #0
 8008448:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800844a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800844e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008450:	f107 0308 	add.w	r3, r7, #8
 8008454:	4619      	mov	r1, r3
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f7ff fe85 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 fb23 	bl	8008aa8 <SDMMC_GetCmdError>
 8008462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008464:	69fb      	ldr	r3, [r7, #28]
}
 8008466:	4618      	mov	r0, r3
 8008468:	3720      	adds	r7, #32
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}

0800846e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800846e:	b580      	push	{r7, lr}
 8008470:	b088      	sub	sp, #32
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008476:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800847a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800847c:	2308      	movs	r3, #8
 800847e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008480:	2340      	movs	r3, #64	@ 0x40
 8008482:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008484:	2300      	movs	r3, #0
 8008486:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008488:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800848c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800848e:	f107 0308 	add.w	r3, r7, #8
 8008492:	4619      	mov	r1, r3
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f7ff fe66 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fab6 	bl	8008a0c <SDMMC_GetCmdResp7>
 80084a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084a2:	69fb      	ldr	r3, [r7, #28]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3720      	adds	r7, #32
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bd80      	pop	{r7, pc}

080084ac <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b088      	sub	sp, #32
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
 80084b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80084ba:	2337      	movs	r3, #55	@ 0x37
 80084bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80084be:	2340      	movs	r3, #64	@ 0x40
 80084c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80084c2:	2300      	movs	r3, #0
 80084c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80084c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80084ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80084cc:	f107 0308 	add.w	r3, r7, #8
 80084d0:	4619      	mov	r1, r3
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f7ff fe47 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80084d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084dc:	2137      	movs	r1, #55	@ 0x37
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 f8aa 	bl	8008638 <SDMMC_GetCmdResp1>
 80084e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80084e6:	69fb      	ldr	r3, [r7, #28]
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3720      	adds	r7, #32
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b088      	sub	sp, #32
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80084fa:	683b      	ldr	r3, [r7, #0]
 80084fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008504:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008506:	2329      	movs	r3, #41	@ 0x29
 8008508:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800850a:	2340      	movs	r3, #64	@ 0x40
 800850c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800850e:	2300      	movs	r3, #0
 8008510:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008512:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008516:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008518:	f107 0308 	add.w	r3, r7, #8
 800851c:	4619      	mov	r1, r3
 800851e:	6878      	ldr	r0, [r7, #4]
 8008520:	f7ff fe21 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 f9bd 	bl	80088a4 <SDMMC_GetCmdResp3>
 800852a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800852c:	69fb      	ldr	r3, [r7, #28]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3720      	adds	r7, #32
 8008532:	46bd      	mov	sp, r7
 8008534:	bd80      	pop	{r7, pc}

08008536 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b088      	sub	sp, #32
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800853e:	2300      	movs	r3, #0
 8008540:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008542:	2302      	movs	r3, #2
 8008544:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008546:	23c0      	movs	r3, #192	@ 0xc0
 8008548:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800854a:	2300      	movs	r3, #0
 800854c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800854e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008552:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008554:	f107 0308 	add.w	r3, r7, #8
 8008558:	4619      	mov	r1, r3
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7ff fe03 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008560:	6878      	ldr	r0, [r7, #4]
 8008562:	f000 f957 	bl	8008814 <SDMMC_GetCmdResp2>
 8008566:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008568:	69fb      	ldr	r3, [r7, #28]
}
 800856a:	4618      	mov	r0, r3
 800856c:	3720      	adds	r7, #32
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b088      	sub	sp, #32
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008580:	2309      	movs	r3, #9
 8008582:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008584:	23c0      	movs	r3, #192	@ 0xc0
 8008586:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008588:	2300      	movs	r3, #0
 800858a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800858c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008590:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008592:	f107 0308 	add.w	r3, r7, #8
 8008596:	4619      	mov	r1, r3
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f7ff fde4 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f938 	bl	8008814 <SDMMC_GetCmdResp2>
 80085a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085a6:	69fb      	ldr	r3, [r7, #28]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	3720      	adds	r7, #32
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b088      	sub	sp, #32
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80085be:	2303      	movs	r3, #3
 80085c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085c2:	2340      	movs	r3, #64	@ 0x40
 80085c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085c6:	2300      	movs	r3, #0
 80085c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80085ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085d0:	f107 0308 	add.w	r3, r7, #8
 80085d4:	4619      	mov	r1, r3
 80085d6:	6878      	ldr	r0, [r7, #4]
 80085d8:	f7ff fdc5 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	2103      	movs	r1, #3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 f99d 	bl	8008920 <SDMMC_GetCmdResp6>
 80085e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085e8:	69fb      	ldr	r3, [r7, #28]
}
 80085ea:	4618      	mov	r0, r3
 80085ec:	3720      	adds	r7, #32
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bd80      	pop	{r7, pc}

080085f2 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80085f2:	b580      	push	{r7, lr}
 80085f4:	b088      	sub	sp, #32
 80085f6:	af00      	add	r7, sp, #0
 80085f8:	6078      	str	r0, [r7, #4]
 80085fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008600:	230d      	movs	r3, #13
 8008602:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008604:	2340      	movs	r3, #64	@ 0x40
 8008606:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008608:	2300      	movs	r3, #0
 800860a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800860c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008610:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008612:	f107 0308 	add.w	r3, r7, #8
 8008616:	4619      	mov	r1, r3
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f7ff fda4 	bl	8008166 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800861e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008622:	210d      	movs	r1, #13
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 f807 	bl	8008638 <SDMMC_GetCmdResp1>
 800862a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800862c:	69fb      	ldr	r3, [r7, #28]
}
 800862e:	4618      	mov	r0, r3
 8008630:	3720      	adds	r7, #32
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
	...

08008638 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b088      	sub	sp, #32
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	460b      	mov	r3, r1
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008646:	4b70      	ldr	r3, [pc, #448]	@ (8008808 <SDMMC_GetCmdResp1+0x1d0>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a70      	ldr	r2, [pc, #448]	@ (800880c <SDMMC_GetCmdResp1+0x1d4>)
 800864c:	fba2 2303 	umull	r2, r3, r2, r3
 8008650:	0a5a      	lsrs	r2, r3, #9
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	fb02 f303 	mul.w	r3, r2, r3
 8008658:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	1e5a      	subs	r2, r3, #1
 800865e:	61fa      	str	r2, [r7, #28]
 8008660:	2b00      	cmp	r3, #0
 8008662:	d102      	bne.n	800866a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008664:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008668:	e0c9      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800866e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008676:	2b00      	cmp	r3, #0
 8008678:	d0ef      	beq.n	800865a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008680:	2b00      	cmp	r3, #0
 8008682:	d1ea      	bne.n	800865a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008688:	f003 0304 	and.w	r3, r3, #4
 800868c:	2b00      	cmp	r3, #0
 800868e:	d004      	beq.n	800869a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2204      	movs	r2, #4
 8008694:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008696:	2304      	movs	r3, #4
 8008698:	e0b1      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800869e:	f003 0301 	and.w	r3, r3, #1
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d004      	beq.n	80086b0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	2201      	movs	r2, #1
 80086aa:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e0a6      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	22c5      	movs	r2, #197	@ 0xc5
 80086b4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80086b6:	68f8      	ldr	r0, [r7, #12]
 80086b8:	f7ff fd7f 	bl	80081ba <SDIO_GetCommandResponse>
 80086bc:	4603      	mov	r3, r0
 80086be:	461a      	mov	r2, r3
 80086c0:	7afb      	ldrb	r3, [r7, #11]
 80086c2:	4293      	cmp	r3, r2
 80086c4:	d001      	beq.n	80086ca <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e099      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80086ca:	2100      	movs	r1, #0
 80086cc:	68f8      	ldr	r0, [r7, #12]
 80086ce:	f7ff fd81 	bl	80081d4 <SDIO_GetResponse>
 80086d2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	4b4e      	ldr	r3, [pc, #312]	@ (8008810 <SDMMC_GetCmdResp1+0x1d8>)
 80086d8:	4013      	ands	r3, r2
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d101      	bne.n	80086e2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80086de:	2300      	movs	r3, #0
 80086e0:	e08d      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	da02      	bge.n	80086ee <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80086e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80086ec:	e087      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d001      	beq.n	80086fc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80086f8:	2340      	movs	r3, #64	@ 0x40
 80086fa:	e080      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80086fc:	697b      	ldr	r3, [r7, #20]
 80086fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008706:	2380      	movs	r3, #128	@ 0x80
 8008708:	e079      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d002      	beq.n	800871a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008714:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008718:	e071      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008720:	2b00      	cmp	r3, #0
 8008722:	d002      	beq.n	800872a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008724:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008728:	e069      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d002      	beq.n	800873a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008734:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008738:	e061      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800873a:	697b      	ldr	r3, [r7, #20]
 800873c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d002      	beq.n	800874a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008744:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008748:	e059      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008750:	2b00      	cmp	r3, #0
 8008752:	d002      	beq.n	800875a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008754:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008758:	e051      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008760:	2b00      	cmp	r3, #0
 8008762:	d002      	beq.n	800876a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008764:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8008768:	e049      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008770:	2b00      	cmp	r3, #0
 8008772:	d002      	beq.n	800877a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008774:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8008778:	e041      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800877a:	697b      	ldr	r3, [r7, #20]
 800877c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008780:	2b00      	cmp	r3, #0
 8008782:	d002      	beq.n	800878a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008784:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008788:	e039      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008794:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008798:	e031      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d002      	beq.n	80087aa <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80087a4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80087a8:	e029      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80087aa:	697b      	ldr	r3, [r7, #20]
 80087ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d002      	beq.n	80087ba <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80087b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80087b8:	e021      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80087ba:	697b      	ldr	r3, [r7, #20]
 80087bc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d002      	beq.n	80087ca <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80087c4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80087c8:	e019      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d002      	beq.n	80087da <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80087d4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80087d8:	e011      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d002      	beq.n	80087ea <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80087e4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80087e8:	e009      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80087ea:	697b      	ldr	r3, [r7, #20]
 80087ec:	f003 0308 	and.w	r3, r3, #8
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d002      	beq.n	80087fa <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80087f4:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80087f8:	e001      	b.n	80087fe <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80087fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80087fe:	4618      	mov	r0, r3
 8008800:	3720      	adds	r7, #32
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	20000018 	.word	0x20000018
 800880c:	10624dd3 	.word	0x10624dd3
 8008810:	fdffe008 	.word	0xfdffe008

08008814 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800881c:	4b1f      	ldr	r3, [pc, #124]	@ (800889c <SDMMC_GetCmdResp2+0x88>)
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	4a1f      	ldr	r2, [pc, #124]	@ (80088a0 <SDMMC_GetCmdResp2+0x8c>)
 8008822:	fba2 2303 	umull	r2, r3, r2, r3
 8008826:	0a5b      	lsrs	r3, r3, #9
 8008828:	f241 3288 	movw	r2, #5000	@ 0x1388
 800882c:	fb02 f303 	mul.w	r3, r2, r3
 8008830:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	1e5a      	subs	r2, r3, #1
 8008836:	60fa      	str	r2, [r7, #12]
 8008838:	2b00      	cmp	r3, #0
 800883a:	d102      	bne.n	8008842 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800883c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008840:	e026      	b.n	8008890 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008846:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800884e:	2b00      	cmp	r3, #0
 8008850:	d0ef      	beq.n	8008832 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008858:	2b00      	cmp	r3, #0
 800885a:	d1ea      	bne.n	8008832 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008860:	f003 0304 	and.w	r3, r3, #4
 8008864:	2b00      	cmp	r3, #0
 8008866:	d004      	beq.n	8008872 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2204      	movs	r2, #4
 800886c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800886e:	2304      	movs	r3, #4
 8008870:	e00e      	b.n	8008890 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008876:	f003 0301 	and.w	r3, r3, #1
 800887a:	2b00      	cmp	r3, #0
 800887c:	d004      	beq.n	8008888 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2201      	movs	r2, #1
 8008882:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008884:	2301      	movs	r3, #1
 8008886:	e003      	b.n	8008890 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	22c5      	movs	r2, #197	@ 0xc5
 800888c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 800888e:	2300      	movs	r3, #0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3714      	adds	r7, #20
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	20000018 	.word	0x20000018
 80088a0:	10624dd3 	.word	0x10624dd3

080088a4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80088a4:	b480      	push	{r7}
 80088a6:	b085      	sub	sp, #20
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80088ac:	4b1a      	ldr	r3, [pc, #104]	@ (8008918 <SDMMC_GetCmdResp3+0x74>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a1a      	ldr	r2, [pc, #104]	@ (800891c <SDMMC_GetCmdResp3+0x78>)
 80088b2:	fba2 2303 	umull	r2, r3, r2, r3
 80088b6:	0a5b      	lsrs	r3, r3, #9
 80088b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80088bc:	fb02 f303 	mul.w	r3, r2, r3
 80088c0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	1e5a      	subs	r2, r3, #1
 80088c6:	60fa      	str	r2, [r7, #12]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d102      	bne.n	80088d2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80088cc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80088d0:	e01b      	b.n	800890a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088d6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d0ef      	beq.n	80088c2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1ea      	bne.n	80088c2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088f0:	f003 0304 	and.w	r3, r3, #4
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d004      	beq.n	8008902 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2204      	movs	r2, #4
 80088fc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80088fe:	2304      	movs	r3, #4
 8008900:	e003      	b.n	800890a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	22c5      	movs	r2, #197	@ 0xc5
 8008906:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008908:	2300      	movs	r3, #0
}
 800890a:	4618      	mov	r0, r3
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr
 8008916:	bf00      	nop
 8008918:	20000018 	.word	0x20000018
 800891c:	10624dd3 	.word	0x10624dd3

08008920 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b088      	sub	sp, #32
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	460b      	mov	r3, r1
 800892a:	607a      	str	r2, [r7, #4]
 800892c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800892e:	4b35      	ldr	r3, [pc, #212]	@ (8008a04 <SDMMC_GetCmdResp6+0xe4>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a35      	ldr	r2, [pc, #212]	@ (8008a08 <SDMMC_GetCmdResp6+0xe8>)
 8008934:	fba2 2303 	umull	r2, r3, r2, r3
 8008938:	0a5b      	lsrs	r3, r3, #9
 800893a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800893e:	fb02 f303 	mul.w	r3, r2, r3
 8008942:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008944:	69fb      	ldr	r3, [r7, #28]
 8008946:	1e5a      	subs	r2, r3, #1
 8008948:	61fa      	str	r2, [r7, #28]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d102      	bne.n	8008954 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800894e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008952:	e052      	b.n	80089fa <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008958:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008960:	2b00      	cmp	r3, #0
 8008962:	d0ef      	beq.n	8008944 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1ea      	bne.n	8008944 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008972:	f003 0304 	and.w	r3, r3, #4
 8008976:	2b00      	cmp	r3, #0
 8008978:	d004      	beq.n	8008984 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2204      	movs	r2, #4
 800897e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008980:	2304      	movs	r3, #4
 8008982:	e03a      	b.n	80089fa <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008988:	f003 0301 	and.w	r3, r3, #1
 800898c:	2b00      	cmp	r3, #0
 800898e:	d004      	beq.n	800899a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2201      	movs	r2, #1
 8008994:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008996:	2301      	movs	r3, #1
 8008998:	e02f      	b.n	80089fa <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f7ff fc0d 	bl	80081ba <SDIO_GetCommandResponse>
 80089a0:	4603      	mov	r3, r0
 80089a2:	461a      	mov	r2, r3
 80089a4:	7afb      	ldrb	r3, [r7, #11]
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d001      	beq.n	80089ae <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e025      	b.n	80089fa <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	22c5      	movs	r2, #197	@ 0xc5
 80089b2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80089b4:	2100      	movs	r1, #0
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f7ff fc0c 	bl	80081d4 <SDIO_GetResponse>
 80089bc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d106      	bne.n	80089d6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	0c1b      	lsrs	r3, r3, #16
 80089cc:	b29a      	uxth	r2, r3
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80089d2:	2300      	movs	r3, #0
 80089d4:	e011      	b.n	80089fa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d002      	beq.n	80089e6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80089e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80089e4:	e009      	b.n	80089fa <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d002      	beq.n	80089f6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80089f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80089f4:	e001      	b.n	80089fa <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80089f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3720      	adds	r7, #32
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	20000018 	.word	0x20000018
 8008a08:	10624dd3 	.word	0x10624dd3

08008a0c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b085      	sub	sp, #20
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008a14:	4b22      	ldr	r3, [pc, #136]	@ (8008aa0 <SDMMC_GetCmdResp7+0x94>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	4a22      	ldr	r2, [pc, #136]	@ (8008aa4 <SDMMC_GetCmdResp7+0x98>)
 8008a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a1e:	0a5b      	lsrs	r3, r3, #9
 8008a20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008a24:	fb02 f303 	mul.w	r3, r2, r3
 8008a28:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	1e5a      	subs	r2, r3, #1
 8008a2e:	60fa      	str	r2, [r7, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a34:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008a38:	e02c      	b.n	8008a94 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a3e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0ef      	beq.n	8008a2a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1ea      	bne.n	8008a2a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a58:	f003 0304 	and.w	r3, r3, #4
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d004      	beq.n	8008a6a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2204      	movs	r2, #4
 8008a64:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008a66:	2304      	movs	r3, #4
 8008a68:	e014      	b.n	8008a94 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a6e:	f003 0301 	and.w	r3, r3, #1
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d004      	beq.n	8008a80 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2201      	movs	r2, #1
 8008a7a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e009      	b.n	8008a94 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2240      	movs	r2, #64	@ 0x40
 8008a90:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008a92:	2300      	movs	r3, #0
  
}
 8008a94:	4618      	mov	r0, r3
 8008a96:	3714      	adds	r7, #20
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9e:	4770      	bx	lr
 8008aa0:	20000018 	.word	0x20000018
 8008aa4:	10624dd3 	.word	0x10624dd3

08008aa8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008aa8:	b480      	push	{r7}
 8008aaa:	b085      	sub	sp, #20
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008ab0:	4b11      	ldr	r3, [pc, #68]	@ (8008af8 <SDMMC_GetCmdError+0x50>)
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a11      	ldr	r2, [pc, #68]	@ (8008afc <SDMMC_GetCmdError+0x54>)
 8008ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8008aba:	0a5b      	lsrs	r3, r3, #9
 8008abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008ac0:	fb02 f303 	mul.w	r3, r2, r3
 8008ac4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	1e5a      	subs	r2, r3, #1
 8008aca:	60fa      	str	r2, [r7, #12]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d102      	bne.n	8008ad6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008ad0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8008ad4:	e009      	b.n	8008aea <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008ada:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d0f1      	beq.n	8008ac6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	22c5      	movs	r2, #197	@ 0xc5
 8008ae6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8008ae8:	2300      	movs	r3, #0
}
 8008aea:	4618      	mov	r0, r3
 8008aec:	3714      	adds	r7, #20
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
 8008af6:	bf00      	nop
 8008af8:	20000018 	.word	0x20000018
 8008afc:	10624dd3 	.word	0x10624dd3

08008b00 <MX_FATFS_Init>:
FATFS fs;
//char buf_read[5000];
/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008b04:	4904      	ldr	r1, [pc, #16]	@ (8008b18 <MX_FATFS_Init+0x18>)
 8008b06:	4805      	ldr	r0, [pc, #20]	@ (8008b1c <MX_FATFS_Init+0x1c>)
 8008b08:	f003 fcea 	bl	800c4e0 <FATFS_LinkDriver>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	461a      	mov	r2, r3
 8008b10:	4b03      	ldr	r3, [pc, #12]	@ (8008b20 <MX_FATFS_Init+0x20>)
 8008b12:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008b14:	bf00      	nop
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	2000c590 	.word	0x2000c590
 8008b1c:	08025110 	.word	0x08025110
 8008b20:	2000c58c 	.word	0x2000c58c

08008b24 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8008b24:	b480      	push	{r7}
 8008b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8008b28:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	46bd      	mov	sp, r7
 8008b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b32:	4770      	bx	lr

08008b34 <mount_fs>:

/* USER CODE BEGIN Application */
FRESULT mount_fs(FATFS *fs, uint8_t opt)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b086      	sub	sp, #24
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	70fb      	strb	r3, [r7, #3]
	FRESULT res;
	DWORD sizeClaster;
	FATFS* pfs = fs;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	613b      	str	r3, [r7, #16]
//	char *cli_msg;

	switch (opt) {
 8008b44:	78fb      	ldrb	r3, [r7, #3]
 8008b46:	2b01      	cmp	r3, #1
 8008b48:	d002      	beq.n	8008b50 <mount_fs+0x1c>
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d01b      	beq.n	8008b86 <mount_fs+0x52>
			}

//			sprintf(cli_msg,"Unmount was success\r\n");
			break;
		default:
			break;
 8008b4e:	e029      	b.n	8008ba4 <mount_fs+0x70>
			res = f_mount(fs, (TCHAR const*)SDPath, 1);
 8008b50:	2201      	movs	r2, #1
 8008b52:	4917      	ldr	r1, [pc, #92]	@ (8008bb0 <mount_fs+0x7c>)
 8008b54:	6878      	ldr	r0, [r7, #4]
 8008b56:	f002 fdcb 	bl	800b6f0 <f_mount>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK)
 8008b5e:	7dfb      	ldrb	r3, [r7, #23]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d001      	beq.n	8008b68 <mount_fs+0x34>
				return res;
 8008b64:	7dfb      	ldrb	r3, [r7, #23]
 8008b66:	e01e      	b.n	8008ba6 <mount_fs+0x72>
			res = f_getfree((TCHAR const*)SDPath, &sizeClaster, &pfs);
 8008b68:	f107 0210 	add.w	r2, r7, #16
 8008b6c:	f107 030c 	add.w	r3, r7, #12
 8008b70:	4619      	mov	r1, r3
 8008b72:	480f      	ldr	r0, [pc, #60]	@ (8008bb0 <mount_fs+0x7c>)
 8008b74:	f003 fbab 	bl	800c2ce <f_getfree>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK)
 8008b7c:	7dfb      	ldrb	r3, [r7, #23]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d10d      	bne.n	8008b9e <mount_fs+0x6a>
				return res;
 8008b82:	7dfb      	ldrb	r3, [r7, #23]
 8008b84:	e00f      	b.n	8008ba6 <mount_fs+0x72>
			res = f_mount(NULL, (TCHAR const*)SDPath, 1);
 8008b86:	2201      	movs	r2, #1
 8008b88:	4909      	ldr	r1, [pc, #36]	@ (8008bb0 <mount_fs+0x7c>)
 8008b8a:	2000      	movs	r0, #0
 8008b8c:	f002 fdb0 	bl	800b6f0 <f_mount>
 8008b90:	4603      	mov	r3, r0
 8008b92:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK)
 8008b94:	7dfb      	ldrb	r3, [r7, #23]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <mount_fs+0x6e>
				return res;
 8008b9a:	7dfb      	ldrb	r3, [r7, #23]
 8008b9c:	e003      	b.n	8008ba6 <mount_fs+0x72>
			break;
 8008b9e:	bf00      	nop
 8008ba0:	e000      	b.n	8008ba4 <mount_fs+0x70>
			break;
 8008ba2:	bf00      	nop
	}

	return res;
 8008ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3718      	adds	r7, #24
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
 8008bae:	bf00      	nop
 8008bb0:	2000c590 	.word	0x2000c590

08008bb4 <write_fs>:

FRESULT write_fs(uint8_t *name_file, uint8_t *data)
{
 8008bb4:	b590      	push	{r4, r7, lr}
 8008bb6:	f5ad 7d11 	sub.w	sp, sp, #580	@ 0x244
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008bc0:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8008bc4:	6018      	str	r0, [r3, #0]
 8008bc6:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008bca:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8008bce:	6019      	str	r1, [r3, #0]
	FRESULT res;
//	char *cli_msg;
    FIL logFile;

    res = f_open(&logFile, (char *)name_file, FA_OPEN_APPEND | FA_WRITE);
 8008bd0:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008bd4:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8008bd8:	f107 000c 	add.w	r0, r7, #12
 8008bdc:	2232      	movs	r2, #50	@ 0x32
 8008bde:	6819      	ldr	r1, [r3, #0]
 8008be0:	f002 fdea 	bl	800b7b8 <f_open>
 8008be4:	4603      	mov	r3, r0
 8008be6:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
    if(res != FR_OK) {
 8008bea:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d002      	beq.n	8008bf8 <write_fs+0x44>
//    	sprintf(cli_msg,"f_open() failed, res = %u\r\n\0", res);
        return res;
 8008bf2:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8008bf6:	e02e      	b.n	8008c56 <write_fs+0xa2>
    }

    unsigned int bytesWritten;
    res = f_write(&logFile, data, (UINT)strlen(data), &bytesWritten);
 8008bf8:	f507 7310 	add.w	r3, r7, #576	@ 0x240
 8008bfc:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8008c00:	6818      	ldr	r0, [r3, #0]
 8008c02:	f7f7 fb35 	bl	8000270 <strlen>
 8008c06:	4604      	mov	r4, r0
 8008c08:	f107 0308 	add.w	r3, r7, #8
 8008c0c:	f507 7210 	add.w	r2, r7, #576	@ 0x240
 8008c10:	f5a2 7110 	sub.w	r1, r2, #576	@ 0x240
 8008c14:	f107 000c 	add.w	r0, r7, #12
 8008c18:	4622      	mov	r2, r4
 8008c1a:	6809      	ldr	r1, [r1, #0]
 8008c1c:	f003 f8fb 	bl	800be16 <f_write>
 8008c20:	4603      	mov	r3, r0
 8008c22:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
    if(res != FR_OK) {
 8008c26:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d002      	beq.n	8008c34 <write_fs+0x80>
//    	sprintf(cli_msg,"f_write() failed, res = %u\r\n", res);
        return res;
 8008c2e:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8008c32:	e010      	b.n	8008c56 <write_fs+0xa2>
    }

    res = f_close(&logFile);
 8008c34:	f107 030c 	add.w	r3, r7, #12
 8008c38:	4618      	mov	r0, r3
 8008c3a:	f003 fb19 	bl	800c270 <f_close>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	f887 323f 	strb.w	r3, [r7, #575]	@ 0x23f
    if(res != FR_OK) {
 8008c44:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d002      	beq.n	8008c52 <write_fs+0x9e>
//    	sprintf(cli_msg,"f_close() failed, res = %u\r\n", res);
        return res;
 8008c4c:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
 8008c50:	e001      	b.n	8008c56 <write_fs+0xa2>
//
//    cliWrite("In file '%s' ");
//    cliWrite((char *)name_file);
//    cliWrite("was writhed %u letters\r\n");

    return res;
 8008c52:	f897 323f 	ldrb.w	r3, [r7, #575]	@ 0x23f
}
 8008c56:	4618      	mov	r0, r3
 8008c58:	f507 7711 	add.w	r7, r7, #580	@ 0x244
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd90      	pop	{r4, r7, pc}

08008c60 <read_fs>:

FRESULT read_fs(uint8_t *name_file, uint8_t *buf, uint32_t len)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008c6c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8008c70:	6018      	str	r0, [r3, #0]
 8008c72:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008c76:	f5a3 7310 	sub.w	r3, r3, #576	@ 0x240
 8008c7a:	6019      	str	r1, [r3, #0]
 8008c7c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008c80:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8008c84:	601a      	str	r2, [r3, #0]
	FRESULT res;
//	char *cli_msg;
    FIL logFile;

    res = f_open(&logFile, (char *)name_file, FA_READ);
 8008c86:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008c8a:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8008c8e:	f107 0014 	add.w	r0, r7, #20
 8008c92:	2201      	movs	r2, #1
 8008c94:	6819      	ldr	r1, [r3, #0]
 8008c96:	f002 fd8f 	bl	800b7b8 <f_open>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    if(res != FR_OK) {
 8008ca0:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d002      	beq.n	8008cae <read_fs+0x4e>
//        sprintf(cli_msg,"f_open() failed, res = %u\r\n", res);
        return res;
 8008ca8:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8008cac:	e030      	b.n	8008d10 <read_fs+0xb0>
    }

    unsigned int bytesReading = 0;
 8008cae:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8008cb2:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	601a      	str	r2, [r3, #0]
    res = f_read(&logFile, (void *)buf, (UINT)len, &bytesReading);
 8008cba:	f107 0310 	add.w	r3, r7, #16
 8008cbe:	f507 7212 	add.w	r2, r7, #584	@ 0x248
 8008cc2:	f5a2 7211 	sub.w	r2, r2, #580	@ 0x244
 8008cc6:	f507 7112 	add.w	r1, r7, #584	@ 0x248
 8008cca:	f5a1 7110 	sub.w	r1, r1, #576	@ 0x240
 8008cce:	f107 0014 	add.w	r0, r7, #20
 8008cd2:	6812      	ldr	r2, [r2, #0]
 8008cd4:	6809      	ldr	r1, [r1, #0]
 8008cd6:	f002 ff30 	bl	800bb3a <f_read>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    if(res != FR_OK) {
 8008ce0:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d002      	beq.n	8008cee <read_fs+0x8e>
//    	sprintf(cli_msg,"f_read() failed, res = %u\r\n", res);
        return res;
 8008ce8:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8008cec:	e010      	b.n	8008d10 <read_fs+0xb0>
    }

//    memcpy(buf_read, logFile.buf, len);

    res = f_close(&logFile);
 8008cee:	f107 0314 	add.w	r3, r7, #20
 8008cf2:	4618      	mov	r0, r3
 8008cf4:	f003 fabc 	bl	800c270 <f_close>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	f887 3247 	strb.w	r3, [r7, #583]	@ 0x247
    if(res != FR_OK) {
 8008cfe:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d002      	beq.n	8008d0c <read_fs+0xac>
//    	sprintf(cli_msg,"f_close() failed, res = %u\r\n", res);
        return res;
 8008d06:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
 8008d0a:	e001      	b.n	8008d10 <read_fs+0xb0>
//    sprintf(cli_msg,"From file '%s' ",(char *)name_file);
////    sprintf(cli_msg,"In file '");
////    sprintf(cli_msg,(char *)name);
//    sprintf(cli_msg," was reading %u letters\r\n", strlen(buf));

    return res;
 8008d0c:	f897 3247 	ldrb.w	r3, [r7, #583]	@ 0x247
}
 8008d10:	4618      	mov	r0, r3
 8008d12:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b082      	sub	sp, #8
 8008d20:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008d22:	2300      	movs	r3, #0
 8008d24:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008d26:	f000 f888 	bl	8008e3a <BSP_SD_IsDetected>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b01      	cmp	r3, #1
 8008d2e:	d001      	beq.n	8008d34 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e005      	b.n	8008d40 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008d34:	4804      	ldr	r0, [pc, #16]	@ (8008d48 <BSP_SD_Init+0x2c>)
 8008d36:	f7fc fbb4 	bl	80054a2 <HAL_SD_Init>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8008d3e:	79fb      	ldrb	r3, [r7, #7]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}
 8008d48:	2000c2a8 	.word	0x2000c2a8

08008d4c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008d4c:	b580      	push	{r7, lr}
 8008d4e:	b086      	sub	sp, #24
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	60f8      	str	r0, [r7, #12]
 8008d54:	60b9      	str	r1, [r7, #8]
 8008d56:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68ba      	ldr	r2, [r7, #8]
 8008d60:	68f9      	ldr	r1, [r7, #12]
 8008d62:	4806      	ldr	r0, [pc, #24]	@ (8008d7c <BSP_SD_ReadBlocks_DMA+0x30>)
 8008d64:	f7fc fc4e 	bl	8005604 <HAL_SD_ReadBlocks_DMA>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d001      	beq.n	8008d72 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	3718      	adds	r7, #24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	bd80      	pop	{r7, pc}
 8008d7c:	2000c2a8 	.word	0x2000c2a8

08008d80 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b086      	sub	sp, #24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	68ba      	ldr	r2, [r7, #8]
 8008d94:	68f9      	ldr	r1, [r7, #12]
 8008d96:	4806      	ldr	r0, [pc, #24]	@ (8008db0 <BSP_SD_WriteBlocks_DMA+0x30>)
 8008d98:	f7fc fd16 	bl	80057c8 <HAL_SD_WriteBlocks_DMA>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d001      	beq.n	8008da6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008da2:	2301      	movs	r3, #1
 8008da4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008da6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3718      	adds	r7, #24
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}
 8008db0:	2000c2a8 	.word	0x2000c2a8

08008db4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008db8:	4805      	ldr	r0, [pc, #20]	@ (8008dd0 <BSP_SD_GetCardState+0x1c>)
 8008dba:	f7fd f94b 	bl	8006054 <HAL_SD_GetCardState>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b04      	cmp	r3, #4
 8008dc2:	bf14      	ite	ne
 8008dc4:	2301      	movne	r3, #1
 8008dc6:	2300      	moveq	r3, #0
 8008dc8:	b2db      	uxtb	r3, r3
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	bd80      	pop	{r7, pc}
 8008dce:	bf00      	nop
 8008dd0:	2000c2a8 	.word	0x2000c2a8

08008dd4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008ddc:	6879      	ldr	r1, [r7, #4]
 8008dde:	4803      	ldr	r0, [pc, #12]	@ (8008dec <BSP_SD_GetCardInfo+0x18>)
 8008de0:	f7fd f90c 	bl	8005ffc <HAL_SD_GetCardInfo>
}
 8008de4:	bf00      	nop
 8008de6:	3708      	adds	r7, #8
 8008de8:	46bd      	mov	sp, r7
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	2000c2a8 	.word	0x2000c2a8

08008df0 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008df8:	f000 f818 	bl	8008e2c <BSP_SD_AbortCallback>
}
 8008dfc:	bf00      	nop
 8008dfe:	3708      	adds	r7, #8
 8008e00:	46bd      	mov	sp, r7
 8008e02:	bd80      	pop	{r7, pc}

08008e04 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b082      	sub	sp, #8
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8008e0c:	f000 f998 	bl	8009140 <BSP_SD_WriteCpltCallback>
}
 8008e10:	bf00      	nop
 8008e12:	3708      	adds	r7, #8
 8008e14:	46bd      	mov	sp, r7
 8008e16:	bd80      	pop	{r7, pc}

08008e18 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b082      	sub	sp, #8
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8008e20:	f000 f9a0 	bl	8009164 <BSP_SD_ReadCpltCallback>
}
 8008e24:	bf00      	nop
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}

08008e2c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8008e2c:	b480      	push	{r7}
 8008e2e:	af00      	add	r7, sp, #0

}
 8008e30:	bf00      	nop
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b083      	sub	sp, #12
 8008e3e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8008e40:	2301      	movs	r3, #1
 8008e42:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8008e44:	79fb      	ldrb	r3, [r7, #7]
 8008e46:	b2db      	uxtb	r3, r3
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr

08008e54 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
  while( osKernelSysTick() - timer < timeout)
#else
  timer = osKernelGetTickCount();
 8008e5c:	f003 fc46 	bl	800c6ec <osKernelGetTickCount>
 8008e60:	60f8      	str	r0, [r7, #12]
  while( osKernelGetTickCount() - timer < timeout)
 8008e62:	e006      	b.n	8008e72 <SD_CheckStatusWithTimeout+0x1e>
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008e64:	f7ff ffa6 	bl	8008db4 <BSP_SD_GetCardState>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	e009      	b.n	8008e86 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelGetTickCount() - timer < timeout)
 8008e72:	f003 fc3b 	bl	800c6ec <osKernelGetTickCount>
 8008e76:	4602      	mov	r2, r0
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	1ad3      	subs	r3, r2, r3
 8008e7c:	687a      	ldr	r2, [r7, #4]
 8008e7e:	429a      	cmp	r2, r3
 8008e80:	d8f0      	bhi.n	8008e64 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8008e82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
	...

08008e90 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	4603      	mov	r3, r0
 8008e98:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8008e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8008ec8 <SD_CheckStatus+0x38>)
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008ea0:	f7ff ff88 	bl	8008db4 <BSP_SD_GetCardState>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d107      	bne.n	8008eba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8008eaa:	4b07      	ldr	r3, [pc, #28]	@ (8008ec8 <SD_CheckStatus+0x38>)
 8008eac:	781b      	ldrb	r3, [r3, #0]
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	f023 0301 	bic.w	r3, r3, #1
 8008eb4:	b2da      	uxtb	r2, r3
 8008eb6:	4b04      	ldr	r3, [pc, #16]	@ (8008ec8 <SD_CheckStatus+0x38>)
 8008eb8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8008eba:	4b03      	ldr	r3, [pc, #12]	@ (8008ec8 <SD_CheckStatus+0x38>)
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	b2db      	uxtb	r3, r3
}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3708      	adds	r7, #8
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}
 8008ec8:	20000025 	.word	0x20000025

08008ecc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8008ecc:	b580      	push	{r7, lr}
 8008ece:	b082      	sub	sp, #8
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	4603      	mov	r3, r0
 8008ed4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8008ed6:	4b1c      	ldr	r3, [pc, #112]	@ (8008f48 <SD_initialize+0x7c>)
 8008ed8:	2201      	movs	r2, #1
 8008eda:	701a      	strb	r2, [r3, #0]
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
#else
  if(osKernelGetState() == osKernelRunning)
 8008edc:	f003 fbbe 	bl	800c65c <osKernelGetState>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	2b02      	cmp	r3, #2
 8008ee4:	d129      	bne.n	8008f3a <SD_initialize+0x6e>
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8008ee6:	f7ff ff19 	bl	8008d1c <BSP_SD_Init>
 8008eea:	4603      	mov	r3, r0
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d107      	bne.n	8008f00 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8008ef0:	79fb      	ldrb	r3, [r7, #7]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7ff ffcc 	bl	8008e90 <SD_CheckStatus>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	461a      	mov	r2, r3
 8008efc:	4b12      	ldr	r3, [pc, #72]	@ (8008f48 <SD_initialize+0x7c>)
 8008efe:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 8008f00:	4b11      	ldr	r3, [pc, #68]	@ (8008f48 <SD_initialize+0x7c>)
 8008f02:	781b      	ldrb	r3, [r3, #0]
 8008f04:	b2db      	uxtb	r3, r3
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d017      	beq.n	8008f3a <SD_initialize+0x6e>
    {
      if (SDQueueID == NULL)
 8008f0a:	4b10      	ldr	r3, [pc, #64]	@ (8008f4c <SD_initialize+0x80>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d107      	bne.n	8008f22 <SD_initialize+0x56>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
 8008f12:	2200      	movs	r2, #0
 8008f14:	2102      	movs	r1, #2
 8008f16:	200a      	movs	r0, #10
 8008f18:	f003 fefc 	bl	800cd14 <osMessageQueueNew>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	4a0b      	ldr	r2, [pc, #44]	@ (8008f4c <SD_initialize+0x80>)
 8008f20:	6013      	str	r3, [r2, #0]
#endif
      }

      if (SDQueueID == NULL)
 8008f22:	4b0a      	ldr	r3, [pc, #40]	@ (8008f4c <SD_initialize+0x80>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d107      	bne.n	8008f3a <SD_initialize+0x6e>
      {
        Stat |= STA_NOINIT;
 8008f2a:	4b07      	ldr	r3, [pc, #28]	@ (8008f48 <SD_initialize+0x7c>)
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	f043 0301 	orr.w	r3, r3, #1
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	4b04      	ldr	r3, [pc, #16]	@ (8008f48 <SD_initialize+0x7c>)
 8008f38:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 8008f3a:	4b03      	ldr	r3, [pc, #12]	@ (8008f48 <SD_initialize+0x7c>)
 8008f3c:	781b      	ldrb	r3, [r3, #0]
 8008f3e:	b2db      	uxtb	r3, r3
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3708      	adds	r7, #8
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	20000025 	.word	0x20000025
 8008f4c:	2000c7c8 	.word	0x2000c7c8

08008f50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	4603      	mov	r3, r0
 8008f58:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8008f5a:	79fb      	ldrb	r3, [r7, #7]
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f7ff ff97 	bl	8008e90 <SD_CheckStatus>
 8008f62:	4603      	mov	r3, r0
}
 8008f64:	4618      	mov	r0, r3
 8008f66:	3708      	adds	r7, #8
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b088      	sub	sp, #32
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60b9      	str	r1, [r7, #8]
 8008f74:	607a      	str	r2, [r7, #4]
 8008f76:	603b      	str	r3, [r7, #0]
 8008f78:	4603      	mov	r3, r0
 8008f7a:	73fb      	strb	r3, [r7, #15]
  uint8_t ret;
  DRESULT res = RES_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	77fb      	strb	r3, [r7, #31]
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8008f80:	f247 5030 	movw	r0, #30000	@ 0x7530
 8008f84:	f7ff ff66 	bl	8008e54 <SD_CheckStatusWithTimeout>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	da01      	bge.n	8008f92 <SD_read+0x26>
  {
    return res;
 8008f8e:	7ffb      	ldrb	r3, [r7, #31]
 8008f90:	e02f      	b.n	8008ff2 <SD_read+0x86>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	6879      	ldr	r1, [r7, #4]
 8008f96:	68b8      	ldr	r0, [r7, #8]
 8008f98:	f7ff fed8 	bl	8008d4c <BSP_SD_ReadBlocks_DMA>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	77bb      	strb	r3, [r7, #30]

    if (ret == MSD_OK) {
 8008fa0:	7fbb      	ldrb	r3, [r7, #30]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d124      	bne.n	8008ff0 <SD_read+0x84>
      {
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
#else
          status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8008fa6:	4b15      	ldr	r3, [pc, #84]	@ (8008ffc <SD_read+0x90>)
 8008fa8:	6818      	ldr	r0, [r3, #0]
 8008faa:	f107 0112 	add.w	r1, r7, #18
 8008fae:	f247 5330 	movw	r3, #30000	@ 0x7530
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	f003 ff82 	bl	800cebc <osMessageQueueGet>
 8008fb8:	61b8      	str	r0, [r7, #24]
          if ((status == osOK) && (event == READ_CPLT_MSG))
 8008fba:	69bb      	ldr	r3, [r7, #24]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d117      	bne.n	8008ff0 <SD_read+0x84>
 8008fc0:	8a7b      	ldrh	r3, [r7, #18]
 8008fc2:	2b01      	cmp	r3, #1
 8008fc4:	d114      	bne.n	8008ff0 <SD_read+0x84>
          {
            timer = osKernelGetTickCount();
 8008fc6:	f003 fb91 	bl	800c6ec <osKernelGetTickCount>
 8008fca:	6178      	str	r0, [r7, #20]
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8008fcc:	e007      	b.n	8008fde <SD_read+0x72>
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8008fce:	f7ff fef1 	bl	8008db4 <BSP_SD_GetCardState>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d102      	bne.n	8008fde <SD_read+0x72>
              {
                res = RES_OK;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	77fb      	strb	r3, [r7, #31]
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 8008fdc:	e008      	b.n	8008ff0 <SD_read+0x84>
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
 8008fde:	f003 fb85 	bl	800c6ec <osKernelGetTickCount>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	697b      	ldr	r3, [r7, #20]
 8008fe6:	1ad3      	subs	r3, r2, r3
 8008fe8:	f247 522f 	movw	r2, #29999	@ 0x752f
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d9ee      	bls.n	8008fce <SD_read+0x62>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 8008ff0:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3720      	adds	r7, #32
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	bf00      	nop
 8008ffc:	2000c7c8 	.word	0x2000c7c8

08009000 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b088      	sub	sp, #32
 8009004:	af00      	add	r7, sp, #0
 8009006:	60b9      	str	r1, [r7, #8]
 8009008:	607a      	str	r2, [r7, #4]
 800900a:	603b      	str	r3, [r7, #0]
 800900c:	4603      	mov	r3, r0
 800900e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009010:	2301      	movs	r3, #1
 8009012:	77fb      	strb	r3, [r7, #31]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009014:	f247 5030 	movw	r0, #30000	@ 0x7530
 8009018:	f7ff ff1c 	bl	8008e54 <SD_CheckStatusWithTimeout>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	da01      	bge.n	8009026 <SD_write+0x26>
  {
    return res;
 8009022:	7ffb      	ldrb	r3, [r7, #31]
 8009024:	e02d      	b.n	8009082 <SD_write+0x82>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8009026:	683a      	ldr	r2, [r7, #0]
 8009028:	6879      	ldr	r1, [r7, #4]
 800902a:	68b8      	ldr	r0, [r7, #8]
 800902c:	f7ff fea8 	bl	8008d80 <BSP_SD_WriteBlocks_DMA>
 8009030:	4603      	mov	r3, r0
 8009032:	2b00      	cmp	r3, #0
 8009034:	d124      	bne.n	8009080 <SD_write+0x80>
    if (event.status == osEventMessage)
    {
      if (event.value.v == WRITE_CPLT_MSG)
      {
#else
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
 8009036:	4b15      	ldr	r3, [pc, #84]	@ (800908c <SD_write+0x8c>)
 8009038:	6818      	ldr	r0, [r3, #0]
 800903a:	f107 0112 	add.w	r1, r7, #18
 800903e:	f247 5330 	movw	r3, #30000	@ 0x7530
 8009042:	2200      	movs	r2, #0
 8009044:	f003 ff3a 	bl	800cebc <osMessageQueueGet>
 8009048:	61b8      	str	r0, [r7, #24]
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
 800904a:	69bb      	ldr	r3, [r7, #24]
 800904c:	2b00      	cmp	r3, #0
 800904e:	d117      	bne.n	8009080 <SD_write+0x80>
 8009050:	8a7b      	ldrh	r3, [r7, #18]
 8009052:	2b02      	cmp	r3, #2
 8009054:	d114      	bne.n	8009080 <SD_write+0x80>
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
#else
        timer = osKernelGetTickCount();
 8009056:	f003 fb49 	bl	800c6ec <osKernelGetTickCount>
 800905a:	6178      	str	r0, [r7, #20]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800905c:	e007      	b.n	800906e <SD_write+0x6e>
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800905e:	f7ff fea9 	bl	8008db4 <BSP_SD_GetCardState>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d102      	bne.n	800906e <SD_write+0x6e>
          {
            res = RES_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	77fb      	strb	r3, [r7, #31]
            break;
 800906c:	e008      	b.n	8009080 <SD_write+0x80>
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
 800906e:	f003 fb3d 	bl	800c6ec <osKernelGetTickCount>
 8009072:	4602      	mov	r2, r0
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	f247 522f 	movw	r2, #29999	@ 0x752f
 800907c:	4293      	cmp	r3, r2
 800907e:	d9ee      	bls.n	800905e <SD_write+0x5e>
    }

  }
#endif

  return res;
 8009080:	7ffb      	ldrb	r3, [r7, #31]
}
 8009082:	4618      	mov	r0, r3
 8009084:	3720      	adds	r7, #32
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	2000c7c8 	.word	0x2000c7c8

08009090 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b08c      	sub	sp, #48	@ 0x30
 8009094:	af00      	add	r7, sp, #0
 8009096:	4603      	mov	r3, r0
 8009098:	603a      	str	r2, [r7, #0]
 800909a:	71fb      	strb	r3, [r7, #7]
 800909c:	460b      	mov	r3, r1
 800909e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80090a0:	2301      	movs	r3, #1
 80090a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80090a6:	4b25      	ldr	r3, [pc, #148]	@ (800913c <SD_ioctl+0xac>)
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	b2db      	uxtb	r3, r3
 80090ac:	f003 0301 	and.w	r3, r3, #1
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d001      	beq.n	80090b8 <SD_ioctl+0x28>
 80090b4:	2303      	movs	r3, #3
 80090b6:	e03c      	b.n	8009132 <SD_ioctl+0xa2>

  switch (cmd)
 80090b8:	79bb      	ldrb	r3, [r7, #6]
 80090ba:	2b03      	cmp	r3, #3
 80090bc:	d834      	bhi.n	8009128 <SD_ioctl+0x98>
 80090be:	a201      	add	r2, pc, #4	@ (adr r2, 80090c4 <SD_ioctl+0x34>)
 80090c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c4:	080090d5 	.word	0x080090d5
 80090c8:	080090dd 	.word	0x080090dd
 80090cc:	080090f5 	.word	0x080090f5
 80090d0:	0800910f 	.word	0x0800910f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80090d4:	2300      	movs	r3, #0
 80090d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80090da:	e028      	b.n	800912e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80090dc:	f107 030c 	add.w	r3, r7, #12
 80090e0:	4618      	mov	r0, r3
 80090e2:	f7ff fe77 	bl	8008dd4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80090e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80090ec:	2300      	movs	r3, #0
 80090ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80090f2:	e01c      	b.n	800912e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80090f4:	f107 030c 	add.w	r3, r7, #12
 80090f8:	4618      	mov	r0, r3
 80090fa:	f7ff fe6b 	bl	8008dd4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80090fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009100:	b29a      	uxth	r2, r3
 8009102:	683b      	ldr	r3, [r7, #0]
 8009104:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009106:	2300      	movs	r3, #0
 8009108:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800910c:	e00f      	b.n	800912e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800910e:	f107 030c 	add.w	r3, r7, #12
 8009112:	4618      	mov	r0, r3
 8009114:	f7ff fe5e 	bl	8008dd4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800911a:	0a5a      	lsrs	r2, r3, #9
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8009126:	e002      	b.n	800912e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009128:	2304      	movs	r3, #4
 800912a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800912e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009132:	4618      	mov	r0, r3
 8009134:	3730      	adds	r7, #48	@ 0x30
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}
 800913a:	bf00      	nop
 800913c:	20000025 	.word	0x20000025

08009140 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
#else
   const uint16_t msg = WRITE_CPLT_MSG;
 8009146:	2302      	movs	r3, #2
 8009148:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800914a:	4b05      	ldr	r3, [pc, #20]	@ (8009160 <BSP_SD_WriteCpltCallback+0x20>)
 800914c:	6818      	ldr	r0, [r3, #0]
 800914e:	1db9      	adds	r1, r7, #6
 8009150:	2300      	movs	r3, #0
 8009152:	2200      	movs	r2, #0
 8009154:	f003 fe52 	bl	800cdfc <osMessageQueuePut>
#endif
}
 8009158:	bf00      	nop
 800915a:	3708      	adds	r7, #8
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	2000c7c8 	.word	0x2000c7c8

08009164 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009164:	b580      	push	{r7, lr}
 8009166:	b082      	sub	sp, #8
 8009168:	af00      	add	r7, sp, #0
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
#else
   const uint16_t msg = READ_CPLT_MSG;
 800916a:	2301      	movs	r3, #1
 800916c:	80fb      	strh	r3, [r7, #6]
   osMessageQueuePut(SDQueueID, (const void *)&msg, 0, 0);
 800916e:	4b05      	ldr	r3, [pc, #20]	@ (8009184 <BSP_SD_ReadCpltCallback+0x20>)
 8009170:	6818      	ldr	r0, [r3, #0]
 8009172:	1db9      	adds	r1, r7, #6
 8009174:	2300      	movs	r3, #0
 8009176:	2200      	movs	r2, #0
 8009178:	f003 fe40 	bl	800cdfc <osMessageQueuePut>
#endif
}
 800917c:	bf00      	nop
 800917e:	3708      	adds	r7, #8
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}
 8009184:	2000c7c8 	.word	0x2000c7c8

08009188 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af04      	add	r7, sp, #16
  /* Initialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800918e:	2100      	movs	r1, #0
 8009190:	2000      	movs	r0, #0
 8009192:	f007 fb39 	bl	8010808 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 8009196:	4b1c      	ldr	r3, [pc, #112]	@ (8009208 <MX_LWIP_Init+0x80>)
 8009198:	2200      	movs	r2, #0
 800919a:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 800919c:	4b1b      	ldr	r3, [pc, #108]	@ (800920c <MX_LWIP_Init+0x84>)
 800919e:	2200      	movs	r2, #0
 80091a0:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80091a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009210 <MX_LWIP_Init+0x88>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80091a8:	4b1a      	ldr	r3, [pc, #104]	@ (8009214 <MX_LWIP_Init+0x8c>)
 80091aa:	9302      	str	r3, [sp, #8]
 80091ac:	4b1a      	ldr	r3, [pc, #104]	@ (8009218 <MX_LWIP_Init+0x90>)
 80091ae:	9301      	str	r3, [sp, #4]
 80091b0:	2300      	movs	r3, #0
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	4b16      	ldr	r3, [pc, #88]	@ (8009210 <MX_LWIP_Init+0x88>)
 80091b6:	4a15      	ldr	r2, [pc, #84]	@ (800920c <MX_LWIP_Init+0x84>)
 80091b8:	4913      	ldr	r1, [pc, #76]	@ (8009208 <MX_LWIP_Init+0x80>)
 80091ba:	4818      	ldr	r0, [pc, #96]	@ (800921c <MX_LWIP_Init+0x94>)
 80091bc:	f008 fbdc 	bl	8011978 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80091c0:	4816      	ldr	r0, [pc, #88]	@ (800921c <MX_LWIP_Init+0x94>)
 80091c2:	f008 fd93 	bl	8011cec <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 80091c6:	4815      	ldr	r0, [pc, #84]	@ (800921c <MX_LWIP_Init+0x94>)
 80091c8:	f008 fda0 	bl	8011d0c <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80091cc:	4914      	ldr	r1, [pc, #80]	@ (8009220 <MX_LWIP_Init+0x98>)
 80091ce:	4813      	ldr	r0, [pc, #76]	@ (800921c <MX_LWIP_Init+0x94>)
 80091d0:	f008 fea2 	bl	8011f18 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80091d4:	2224      	movs	r2, #36	@ 0x24
 80091d6:	2100      	movs	r1, #0
 80091d8:	4812      	ldr	r0, [pc, #72]	@ (8009224 <MX_LWIP_Init+0x9c>)
 80091da:	f015 fbc5 	bl	801e968 <memset>
  attributes.name = "EthLink";
 80091de:	4b11      	ldr	r3, [pc, #68]	@ (8009224 <MX_LWIP_Init+0x9c>)
 80091e0:	4a11      	ldr	r2, [pc, #68]	@ (8009228 <MX_LWIP_Init+0xa0>)
 80091e2:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80091e4:	4b0f      	ldr	r3, [pc, #60]	@ (8009224 <MX_LWIP_Init+0x9c>)
 80091e6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80091ea:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80091ec:	4b0d      	ldr	r3, [pc, #52]	@ (8009224 <MX_LWIP_Init+0x9c>)
 80091ee:	2210      	movs	r2, #16
 80091f0:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 80091f2:	4a0c      	ldr	r2, [pc, #48]	@ (8009224 <MX_LWIP_Init+0x9c>)
 80091f4:	4909      	ldr	r1, [pc, #36]	@ (800921c <MX_LWIP_Init+0x94>)
 80091f6:	480d      	ldr	r0, [pc, #52]	@ (800922c <MX_LWIP_Init+0xa4>)
 80091f8:	f003 fa8d 	bl	800c716 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 80091fc:	4807      	ldr	r0, [pc, #28]	@ (800921c <MX_LWIP_Init+0x94>)
 80091fe:	f010 f9c3 	bl	8019588 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009202:	bf00      	nop
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	2000c804 	.word	0x2000c804
 800920c:	2000c808 	.word	0x2000c808
 8009210:	2000c80c 	.word	0x2000c80c
 8009214:	08010745 	.word	0x08010745
 8009218:	08009719 	.word	0x08009719
 800921c:	2000c7cc 	.word	0x2000c7cc
 8009220:	08009231 	.word	0x08009231
 8009224:	2000c810 	.word	0x2000c810
 8009228:	08021fb8 	.word	0x08021fb8
 800922c:	080099cd 	.word	0x080099cd

08009230 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8009238:	bf00      	nop
 800923a:	370c      	adds	r7, #12
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr

08009244 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800924c:	4b04      	ldr	r3, [pc, #16]	@ (8009260 <HAL_ETH_RxCpltCallback+0x1c>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4618      	mov	r0, r3
 8009252:	f003 fcf7 	bl	800cc44 <osSemaphoreRelease>
}
 8009256:	bf00      	nop
 8009258:	3708      	adds	r7, #8
 800925a:	46bd      	mov	sp, r7
 800925c:	bd80      	pop	{r7, pc}
 800925e:	bf00      	nop
 8009260:	20011300 	.word	0x20011300

08009264 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b082      	sub	sp, #8
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800926c:	4b04      	ldr	r3, [pc, #16]	@ (8009280 <HAL_ETH_TxCpltCallback+0x1c>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4618      	mov	r0, r3
 8009272:	f003 fce7 	bl	800cc44 <osSemaphoreRelease>
}
 8009276:	bf00      	nop
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	20011304 	.word	0x20011304

08009284 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7fa fe20 	bl	8003ed2 <HAL_ETH_GetDMAError>
 8009292:	4603      	mov	r3, r0
 8009294:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009298:	2b80      	cmp	r3, #128	@ 0x80
 800929a:	d104      	bne.n	80092a6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800929c:	4b04      	ldr	r3, [pc, #16]	@ (80092b0 <HAL_ETH_ErrorCallback+0x2c>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	4618      	mov	r0, r3
 80092a2:	f003 fccf 	bl	800cc44 <osSemaphoreRelease>
  }
}
 80092a6:	bf00      	nop
 80092a8:	3708      	adds	r7, #8
 80092aa:	46bd      	mov	sp, r7
 80092ac:	bd80      	pop	{r7, pc}
 80092ae:	bf00      	nop
 80092b0:	20011300 	.word	0x20011300

080092b4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b0aa      	sub	sp, #168	@ 0xa8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80092bc:	2300      	movs	r3, #0
 80092be:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  int32_t PHYLinkState = 0;
 80092c8:	2300      	movs	r3, #0
 80092ca:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 80092ce:	f107 0310 	add.w	r3, r7, #16
 80092d2:	2264      	movs	r2, #100	@ 0x64
 80092d4:	2100      	movs	r1, #0
 80092d6:	4618      	mov	r0, r3
 80092d8:	f015 fb46 	bl	801e968 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80092dc:	4b89      	ldr	r3, [pc, #548]	@ (8009504 <low_level_init+0x250>)
 80092de:	4a8a      	ldr	r2, [pc, #552]	@ (8009508 <low_level_init+0x254>)
 80092e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80092e2:	2300      	movs	r3, #0
 80092e4:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80092e6:	2380      	movs	r3, #128	@ 0x80
 80092e8:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80092ea:	23e1      	movs	r3, #225	@ 0xe1
 80092ec:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80092ee:	2300      	movs	r3, #0
 80092f0:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80092f2:	2300      	movs	r3, #0
 80092f4:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80092f6:	2300      	movs	r3, #0
 80092f8:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80092fa:	4a82      	ldr	r2, [pc, #520]	@ (8009504 <low_level_init+0x250>)
 80092fc:	f107 0308 	add.w	r3, r7, #8
 8009300:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8009302:	4b80      	ldr	r3, [pc, #512]	@ (8009504 <low_level_init+0x250>)
 8009304:	f44f 0200 	mov.w	r2, #8388608	@ 0x800000
 8009308:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800930a:	4b7e      	ldr	r3, [pc, #504]	@ (8009504 <low_level_init+0x250>)
 800930c:	4a7f      	ldr	r2, [pc, #508]	@ (800950c <low_level_init+0x258>)
 800930e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8009310:	4b7c      	ldr	r3, [pc, #496]	@ (8009504 <low_level_init+0x250>)
 8009312:	4a7f      	ldr	r2, [pc, #508]	@ (8009510 <low_level_init+0x25c>)
 8009314:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8009316:	4b7b      	ldr	r3, [pc, #492]	@ (8009504 <low_level_init+0x250>)
 8009318:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 800931c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800931e:	4879      	ldr	r0, [pc, #484]	@ (8009504 <low_level_init+0x250>)
 8009320:	f7f9 ff8e 	bl	8003240 <HAL_ETH_Init>
 8009324:	4603      	mov	r3, r0
 8009326:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800932a:	2238      	movs	r2, #56	@ 0x38
 800932c:	2100      	movs	r1, #0
 800932e:	4879      	ldr	r0, [pc, #484]	@ (8009514 <low_level_init+0x260>)
 8009330:	f015 fb1a 	bl	801e968 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8009334:	4b77      	ldr	r3, [pc, #476]	@ (8009514 <low_level_init+0x260>)
 8009336:	2221      	movs	r2, #33	@ 0x21
 8009338:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800933a:	4b76      	ldr	r3, [pc, #472]	@ (8009514 <low_level_init+0x260>)
 800933c:	f44f 0240 	mov.w	r2, #12582912	@ 0xc00000
 8009340:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8009342:	4b74      	ldr	r3, [pc, #464]	@ (8009514 <low_level_init+0x260>)
 8009344:	2200      	movs	r2, #0
 8009346:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8009348:	4873      	ldr	r0, [pc, #460]	@ (8009518 <low_level_init+0x264>)
 800934a:	f008 f9cf 	bl	80116ec <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2206      	movs	r2, #6
 8009352:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009356:	4b6b      	ldr	r3, [pc, #428]	@ (8009504 <low_level_init+0x250>)
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	781a      	ldrb	r2, [r3, #0]
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009362:	4b68      	ldr	r3, [pc, #416]	@ (8009504 <low_level_init+0x250>)
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	785a      	ldrb	r2, [r3, #1]
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800936e:	4b65      	ldr	r3, [pc, #404]	@ (8009504 <low_level_init+0x250>)
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	789a      	ldrb	r2, [r3, #2]
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800937a:	4b62      	ldr	r3, [pc, #392]	@ (8009504 <low_level_init+0x250>)
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	78da      	ldrb	r2, [r3, #3]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009386:	4b5f      	ldr	r3, [pc, #380]	@ (8009504 <low_level_init+0x250>)
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	791a      	ldrb	r2, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009392:	4b5c      	ldr	r3, [pc, #368]	@ (8009504 <low_level_init+0x250>)
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	795a      	ldrb	r2, [r3, #5]
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80093a4:	851a      	strh	r2, [r3, #40]	@ 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80093ac:	f043 030a 	orr.w	r3, r3, #10
 80093b0:	b2da      	uxtb	r2, r3
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80093b8:	2200      	movs	r2, #0
 80093ba:	2100      	movs	r1, #0
 80093bc:	2001      	movs	r0, #1
 80093be:	f003 fb66 	bl	800ca8e <osSemaphoreNew>
 80093c2:	4603      	mov	r3, r0
 80093c4:	4a55      	ldr	r2, [pc, #340]	@ (800951c <low_level_init+0x268>)
 80093c6:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 0, NULL);
 80093c8:	2200      	movs	r2, #0
 80093ca:	2100      	movs	r1, #0
 80093cc:	2001      	movs	r0, #1
 80093ce:	f003 fb5e 	bl	800ca8e <osSemaphoreNew>
 80093d2:	4603      	mov	r3, r0
 80093d4:	4a52      	ldr	r2, [pc, #328]	@ (8009520 <low_level_init+0x26c>)
 80093d6:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80093d8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80093dc:	2224      	movs	r2, #36	@ 0x24
 80093de:	2100      	movs	r1, #0
 80093e0:	4618      	mov	r0, r3
 80093e2:	f015 fac1 	bl	801e968 <memset>
  attributes.name = "EthIf";
 80093e6:	4b4f      	ldr	r3, [pc, #316]	@ (8009524 <low_level_init+0x270>)
 80093e8:	677b      	str	r3, [r7, #116]	@ 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80093ea:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80093ee:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  attributes.priority = osPriorityRealtime;
 80093f2:	2330      	movs	r3, #48	@ 0x30
 80093f4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 80093f8:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80093fc:	461a      	mov	r2, r3
 80093fe:	6879      	ldr	r1, [r7, #4]
 8009400:	4849      	ldr	r0, [pc, #292]	@ (8009528 <low_level_init+0x274>)
 8009402:	f003 f988 	bl	800c716 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 8009406:	4949      	ldr	r1, [pc, #292]	@ (800952c <low_level_init+0x278>)
 8009408:	4849      	ldr	r0, [pc, #292]	@ (8009530 <low_level_init+0x27c>)
 800940a:	f7f9 f8bc 	bl	8002586 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  if(DP83848_Init(&DP83848) != DP83848_STATUS_OK)
 800940e:	4848      	ldr	r0, [pc, #288]	@ (8009530 <low_level_init+0x27c>)
 8009410:	f7f9 f8eb 	bl	80025ea <DP83848_Init>
 8009414:	4603      	mov	r3, r0
 8009416:	2b00      	cmp	r3, #0
 8009418:	d006      	beq.n	8009428 <low_level_init+0x174>
  {
    netif_set_link_down(netif);
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f008 fd4c 	bl	8011eb8 <netif_set_link_down>
    netif_set_down(netif);
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	f008 fcdf 	bl	8011de4 <netif_set_down>
 8009426:	e06a      	b.n	80094fe <low_level_init+0x24a>
    return;
  }

  if (hal_eth_init_status == HAL_OK)
 8009428:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800942c:	2b00      	cmp	r3, #0
 800942e:	d164      	bne.n	80094fa <low_level_init+0x246>
  {
    PHYLinkState = DP83848_GetLinkState(&DP83848);
 8009430:	483f      	ldr	r0, [pc, #252]	@ (8009530 <low_level_init+0x27c>)
 8009432:	f7f9 f927 	bl	8002684 <DP83848_GetLinkState>
 8009436:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98

    /* Get link state */
    if(PHYLinkState <= DP83848_STATUS_LINK_DOWN)
 800943a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800943e:	2b01      	cmp	r3, #1
 8009440:	dc06      	bgt.n	8009450 <low_level_init+0x19c>
    {
      netif_set_link_down(netif);
 8009442:	6878      	ldr	r0, [r7, #4]
 8009444:	f008 fd38 	bl	8011eb8 <netif_set_link_down>
      netif_set_down(netif);
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f008 fccb 	bl	8011de4 <netif_set_down>
 800944e:	e056      	b.n	80094fe <low_level_init+0x24a>
    }
    else
    {
      switch (PHYLinkState)
 8009450:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009454:	3b02      	subs	r3, #2
 8009456:	2b03      	cmp	r3, #3
 8009458:	d82a      	bhi.n	80094b0 <low_level_init+0x1fc>
 800945a:	a201      	add	r2, pc, #4	@ (adr r2, 8009460 <low_level_init+0x1ac>)
 800945c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009460:	08009471 	.word	0x08009471
 8009464:	08009483 	.word	0x08009483
 8009468:	08009493 	.word	0x08009493
 800946c:	080094a3 	.word	0x080094a3
      {
      case DP83848_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8009470:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009474:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8009478:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800947c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8009480:	e01f      	b.n	80094c2 <low_level_init+0x20e>
      case DP83848_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 8009482:	2300      	movs	r3, #0
 8009484:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 8009488:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800948c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 8009490:	e017      	b.n	80094c2 <low_level_init+0x20e>
      case DP83848_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 8009492:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009496:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 800949a:	2300      	movs	r3, #0
 800949c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80094a0:	e00f      	b.n	80094c2 <low_level_init+0x20e>
      case DP83848_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 80094a2:	2300      	movs	r3, #0
 80094a4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_10M;
 80094a8:	2300      	movs	r3, #0
 80094aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80094ae:	e008      	b.n	80094c2 <low_level_init+0x20e>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 80094b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80094b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        speed = ETH_SPEED_100M;
 80094b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80094bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        break;
 80094c0:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80094c2:	f107 0310 	add.w	r3, r7, #16
 80094c6:	4619      	mov	r1, r3
 80094c8:	480e      	ldr	r0, [pc, #56]	@ (8009504 <low_level_init+0x250>)
 80094ca:	f7fa fba1 	bl	8003c10 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80094ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80094d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    MACConf.Speed = speed;
 80094d4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80094d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80094da:	f107 0310 	add.w	r3, r7, #16
 80094de:	4619      	mov	r1, r3
 80094e0:	4808      	ldr	r0, [pc, #32]	@ (8009504 <low_level_init+0x250>)
 80094e2:	f7fa fc8c 	bl	8003dfe <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 80094e6:	4807      	ldr	r0, [pc, #28]	@ (8009504 <low_level_init+0x250>)
 80094e8:	f7f9 ff46 	bl	8003378 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f008 fc0d 	bl	8011d0c <netif_set_up>
    netif_set_link_up(netif);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f008 fca8 	bl	8011e48 <netif_set_link_up>
 80094f8:	e001      	b.n	80094fe <low_level_init+0x24a>
    }

  }
  else
  {
    Error_Handler();
 80094fa:	f7f8 fb5b 	bl	8001bb4 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80094fe:	37a8      	adds	r7, #168	@ 0xa8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	20011308 	.word	0x20011308
 8009508:	40028000 	.word	0x40028000
 800950c:	20011260 	.word	0x20011260
 8009510:	200111c0 	.word	0x200111c0
 8009514:	200113b8 	.word	0x200113b8
 8009518:	08025124 	.word	0x08025124
 800951c:	20011300 	.word	0x20011300
 8009520:	20011304 	.word	0x20011304
 8009524:	08021fc0 	.word	0x08021fc0
 8009528:	080096c5 	.word	0x080096c5
 800952c:	20000028 	.word	0x20000028
 8009530:	200113f0 	.word	0x200113f0

08009534 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b092      	sub	sp, #72	@ 0x48
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800953e:	2300      	movs	r3, #0
 8009540:	647b      	str	r3, [r7, #68]	@ 0x44
  struct pbuf *q = NULL;
 8009542:	2300      	movs	r3, #0
 8009544:	643b      	str	r3, [r7, #64]	@ 0x40
  err_t errval = ERR_OK;
 8009546:	2300      	movs	r3, #0
 8009548:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800954c:	f107 030c 	add.w	r3, r7, #12
 8009550:	2230      	movs	r2, #48	@ 0x30
 8009552:	2100      	movs	r1, #0
 8009554:	4618      	mov	r0, r3
 8009556:	f015 fa07 	bl	801e968 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800955a:	f107 030c 	add.w	r3, r7, #12
 800955e:	2230      	movs	r2, #48	@ 0x30
 8009560:	2100      	movs	r1, #0
 8009562:	4618      	mov	r0, r3
 8009564:	f015 fa00 	bl	801e968 <memset>

  for(q = p; q != NULL; q = q->next)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	643b      	str	r3, [r7, #64]	@ 0x40
 800956c:	e045      	b.n	80095fa <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800956e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009570:	2b03      	cmp	r3, #3
 8009572:	d902      	bls.n	800957a <low_level_output+0x46>
      return ERR_IF;
 8009574:	f06f 030b 	mvn.w	r3, #11
 8009578:	e07f      	b.n	800967a <low_level_output+0x146>

    Txbuffer[i].buffer = q->payload;
 800957a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800957c:	6859      	ldr	r1, [r3, #4]
 800957e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009580:	4613      	mov	r3, r2
 8009582:	005b      	lsls	r3, r3, #1
 8009584:	4413      	add	r3, r2
 8009586:	009b      	lsls	r3, r3, #2
 8009588:	3348      	adds	r3, #72	@ 0x48
 800958a:	443b      	add	r3, r7
 800958c:	3b3c      	subs	r3, #60	@ 0x3c
 800958e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8009590:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009592:	895b      	ldrh	r3, [r3, #10]
 8009594:	4619      	mov	r1, r3
 8009596:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009598:	4613      	mov	r3, r2
 800959a:	005b      	lsls	r3, r3, #1
 800959c:	4413      	add	r3, r2
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	3348      	adds	r3, #72	@ 0x48
 80095a2:	443b      	add	r3, r7
 80095a4:	3b38      	subs	r3, #56	@ 0x38
 80095a6:	6019      	str	r1, [r3, #0]

    if(i>0)
 80095a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d011      	beq.n	80095d2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80095ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095b0:	1e5a      	subs	r2, r3, #1
 80095b2:	f107 000c 	add.w	r0, r7, #12
 80095b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80095b8:	460b      	mov	r3, r1
 80095ba:	005b      	lsls	r3, r3, #1
 80095bc:	440b      	add	r3, r1
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	18c1      	adds	r1, r0, r3
 80095c2:	4613      	mov	r3, r2
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	4413      	add	r3, r2
 80095c8:	009b      	lsls	r3, r3, #2
 80095ca:	3348      	adds	r3, #72	@ 0x48
 80095cc:	443b      	add	r3, r7
 80095ce:	3b34      	subs	r3, #52	@ 0x34
 80095d0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80095d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d109      	bne.n	80095ee <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80095da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095dc:	4613      	mov	r3, r2
 80095de:	005b      	lsls	r3, r3, #1
 80095e0:	4413      	add	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	3348      	adds	r3, #72	@ 0x48
 80095e6:	443b      	add	r3, r7
 80095e8:	3b34      	subs	r3, #52	@ 0x34
 80095ea:	2200      	movs	r2, #0
 80095ec:	601a      	str	r2, [r3, #0]
    }

    i++;
 80095ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80095f0:	3301      	adds	r3, #1
 80095f2:	647b      	str	r3, [r7, #68]	@ 0x44
  for(q = p; q != NULL; q = q->next)
 80095f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	643b      	str	r3, [r7, #64]	@ 0x40
 80095fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1b6      	bne.n	800956e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	891b      	ldrh	r3, [r3, #8]
 8009604:	461a      	mov	r2, r3
 8009606:	4b1f      	ldr	r3, [pc, #124]	@ (8009684 <low_level_output+0x150>)
 8009608:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800960a:	4a1e      	ldr	r2, [pc, #120]	@ (8009684 <low_level_output+0x150>)
 800960c:	f107 030c 	add.w	r3, r7, #12
 8009610:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8009612:	4a1c      	ldr	r2, [pc, #112]	@ (8009684 <low_level_output+0x150>)
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	6353      	str	r3, [r2, #52]	@ 0x34

  pbuf_ref(p);
 8009618:	6838      	ldr	r0, [r7, #0]
 800961a:	f009 f8d1 	bl	80127c0 <pbuf_ref>

  do
  {
    if(HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK)
 800961e:	4919      	ldr	r1, [pc, #100]	@ (8009684 <low_level_output+0x150>)
 8009620:	4819      	ldr	r0, [pc, #100]	@ (8009688 <low_level_output+0x154>)
 8009622:	f7f9 ff98 	bl	8003556 <HAL_ETH_Transmit_IT>
 8009626:	4603      	mov	r3, r0
 8009628:	2b00      	cmp	r3, #0
 800962a:	d103      	bne.n	8009634 <low_level_output+0x100>
    {
      errval = ERR_OK;
 800962c:	2300      	movs	r3, #0
 800962e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8009632:	e01b      	b.n	800966c <low_level_output+0x138>
    }
    else
    {

      if(HAL_ETH_GetError(&heth) & HAL_ETH_ERROR_BUSY)
 8009634:	4814      	ldr	r0, [pc, #80]	@ (8009688 <low_level_output+0x154>)
 8009636:	f7fa fc3f 	bl	8003eb8 <HAL_ETH_GetError>
 800963a:	4603      	mov	r3, r0
 800963c:	f003 0302 	and.w	r3, r3, #2
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00d      	beq.n	8009660 <low_level_output+0x12c>
      {
        /* Wait for descriptors to become available */
        osSemaphoreAcquire(TxPktSemaphore, ETHIF_TX_TIMEOUT);
 8009644:	4b11      	ldr	r3, [pc, #68]	@ (800968c <low_level_output+0x158>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 800964c:	4618      	mov	r0, r3
 800964e:	f003 faa7 	bl	800cba0 <osSemaphoreAcquire>
        HAL_ETH_ReleaseTxPacket(&heth);
 8009652:	480d      	ldr	r0, [pc, #52]	@ (8009688 <low_level_output+0x154>)
 8009654:	f7fa f91e 	bl	8003894 <HAL_ETH_ReleaseTxPacket>
        errval = ERR_BUF;
 8009658:	23fe      	movs	r3, #254	@ 0xfe
 800965a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800965e:	e005      	b.n	800966c <low_level_output+0x138>
      }
      else
      {
        /* Other error */
        pbuf_free(p);
 8009660:	6838      	ldr	r0, [r7, #0]
 8009662:	f009 f807 	bl	8012674 <pbuf_free>
        errval =  ERR_IF;
 8009666:	23f4      	movs	r3, #244	@ 0xf4
 8009668:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
    }
  }while(errval == ERR_BUF);
 800966c:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8009670:	f113 0f02 	cmn.w	r3, #2
 8009674:	d0d3      	beq.n	800961e <low_level_output+0xea>

  return errval;
 8009676:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
}
 800967a:	4618      	mov	r0, r3
 800967c:	3748      	adds	r7, #72	@ 0x48
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}
 8009682:	bf00      	nop
 8009684:	200113b8 	.word	0x200113b8
 8009688:	20011308 	.word	0x20011308
 800968c:	20011304 	.word	0x20011304

08009690 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009698:	2300      	movs	r3, #0
 800969a:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800969c:	4b07      	ldr	r3, [pc, #28]	@ (80096bc <low_level_input+0x2c>)
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d105      	bne.n	80096b0 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80096a4:	f107 030c 	add.w	r3, r7, #12
 80096a8:	4619      	mov	r1, r3
 80096aa:	4805      	ldr	r0, [pc, #20]	@ (80096c0 <low_level_input+0x30>)
 80096ac:	f7f9 ffaf 	bl	800360e <HAL_ETH_ReadData>
  }

  return p;
 80096b0:	68fb      	ldr	r3, [r7, #12]
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3710      	adds	r7, #16
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	200111bc 	.word	0x200111bc
 80096c0:	20011308 	.word	0x20011308

080096c4 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b084      	sub	sp, #16
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80096cc:	2300      	movs	r3, #0
 80096ce:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80096d4:	4b0f      	ldr	r3, [pc, #60]	@ (8009714 <ethernetif_input+0x50>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f04f 31ff 	mov.w	r1, #4294967295
 80096dc:	4618      	mov	r0, r3
 80096de:	f003 fa5f 	bl	800cba0 <osSemaphoreAcquire>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d1f5      	bne.n	80096d4 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80096e8:	68b8      	ldr	r0, [r7, #8]
 80096ea:	f7ff ffd1 	bl	8009690 <low_level_input>
 80096ee:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d00a      	beq.n	800970c <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	68b9      	ldr	r1, [r7, #8]
 80096fc:	68f8      	ldr	r0, [r7, #12]
 80096fe:	4798      	blx	r3
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d002      	beq.n	800970c <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8009706:	68f8      	ldr	r0, [r7, #12]
 8009708:	f008 ffb4 	bl	8012674 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d1ea      	bne.n	80096e8 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009712:	e7df      	b.n	80096d4 <ethernetif_input+0x10>
 8009714:	20011300 	.word	0x20011300

08009718 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b082      	sub	sp, #8
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d106      	bne.n	8009734 <ethernetif_init+0x1c>
 8009726:	4b0e      	ldr	r3, [pc, #56]	@ (8009760 <ethernetif_init+0x48>)
 8009728:	f44f 72fe 	mov.w	r2, #508	@ 0x1fc
 800972c:	490d      	ldr	r1, [pc, #52]	@ (8009764 <ethernetif_init+0x4c>)
 800972e:	480e      	ldr	r0, [pc, #56]	@ (8009768 <ethernetif_init+0x50>)
 8009730:	f014 ffe6 	bl	801e700 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2273      	movs	r2, #115	@ 0x73
 8009738:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
  netif->name[1] = IFNAME1;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2274      	movs	r2, #116	@ 0x74
 8009740:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	4a09      	ldr	r2, [pc, #36]	@ (800976c <ethernetif_init+0x54>)
 8009748:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4a08      	ldr	r2, [pc, #32]	@ (8009770 <ethernetif_init+0x58>)
 800974e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f7ff fdaf 	bl	80092b4 <low_level_init>

  return ERR_OK;
 8009756:	2300      	movs	r3, #0
}
 8009758:	4618      	mov	r0, r3
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	08021fc8 	.word	0x08021fc8
 8009764:	08021fe4 	.word	0x08021fe4
 8009768:	08021ff4 	.word	0x08021ff4
 800976c:	0801b4a9 	.word	0x0801b4a9
 8009770:	08009535 	.word	0x08009535

08009774 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b084      	sub	sp, #16
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8009780:	68f9      	ldr	r1, [r7, #12]
 8009782:	4809      	ldr	r0, [pc, #36]	@ (80097a8 <pbuf_free_custom+0x34>)
 8009784:	f008 f8a2 	bl	80118cc <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8009788:	4b08      	ldr	r3, [pc, #32]	@ (80097ac <pbuf_free_custom+0x38>)
 800978a:	781b      	ldrb	r3, [r3, #0]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d107      	bne.n	80097a0 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8009790:	4b06      	ldr	r3, [pc, #24]	@ (80097ac <pbuf_free_custom+0x38>)
 8009792:	2200      	movs	r2, #0
 8009794:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8009796:	4b06      	ldr	r3, [pc, #24]	@ (80097b0 <pbuf_free_custom+0x3c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4618      	mov	r0, r3
 800979c:	f003 fa52 	bl	800cc44 <osSemaphoreRelease>
  }
}
 80097a0:	bf00      	nop
 80097a2:	3710      	adds	r7, #16
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	08025124 	.word	0x08025124
 80097ac:	200111bc 	.word	0x200111bc
 80097b0:	20011300 	.word	0x20011300

080097b4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80097b8:	f7f9 f822 	bl	8002800 <HAL_GetTick>
 80097bc:	4603      	mov	r3, r0
}
 80097be:	4618      	mov	r0, r3
 80097c0:	bd80      	pop	{r7, pc}
	...

080097c4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	b08e      	sub	sp, #56	@ 0x38
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80097d0:	2200      	movs	r2, #0
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	605a      	str	r2, [r3, #4]
 80097d6:	609a      	str	r2, [r3, #8]
 80097d8:	60da      	str	r2, [r3, #12]
 80097da:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a4e      	ldr	r2, [pc, #312]	@ (800991c <HAL_ETH_MspInit+0x158>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	f040 8095 	bne.w	8009912 <HAL_ETH_MspInit+0x14e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80097e8:	2300      	movs	r3, #0
 80097ea:	623b      	str	r3, [r7, #32]
 80097ec:	4b4c      	ldr	r3, [pc, #304]	@ (8009920 <HAL_ETH_MspInit+0x15c>)
 80097ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097f0:	4a4b      	ldr	r2, [pc, #300]	@ (8009920 <HAL_ETH_MspInit+0x15c>)
 80097f2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80097f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80097f8:	4b49      	ldr	r3, [pc, #292]	@ (8009920 <HAL_ETH_MspInit+0x15c>)
 80097fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80097fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009800:	623b      	str	r3, [r7, #32]
 8009802:	6a3b      	ldr	r3, [r7, #32]
 8009804:	2300      	movs	r3, #0
 8009806:	61fb      	str	r3, [r7, #28]
 8009808:	4b45      	ldr	r3, [pc, #276]	@ (8009920 <HAL_ETH_MspInit+0x15c>)
 800980a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800980c:	4a44      	ldr	r2, [pc, #272]	@ (8009920 <HAL_ETH_MspInit+0x15c>)
 800980e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8009812:	6313      	str	r3, [r2, #48]	@ 0x30
 8009814:	4b42      	ldr	r3, [pc, #264]	@ (8009920 <HAL_ETH_MspInit+0x15c>)
 8009816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009818:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800981c:	61fb      	str	r3, [r7, #28]
 800981e:	69fb      	ldr	r3, [r7, #28]
 8009820:	2300      	movs	r3, #0
 8009822:	61bb      	str	r3, [r7, #24]
 8009824:	4b3e      	ldr	r3, [pc, #248]	@ (8009920 <HAL_ETH_MspInit+0x15c>)
 8009826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009828:	4a3d      	ldr	r2, [pc, #244]	@ (8009920 <HAL_ETH_MspInit+0x15c>)
 800982a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800982e:	6313      	str	r3, [r2, #48]	@ 0x30
 8009830:	4b3b      	ldr	r3, [pc, #236]	@ (8009920 <HAL_ETH_MspInit+0x15c>)
 8009832:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009834:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009838:	61bb      	str	r3, [r7, #24]
 800983a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800983c:	2300      	movs	r3, #0
 800983e:	617b      	str	r3, [r7, #20]
 8009840:	4b37      	ldr	r3, [pc, #220]	@ (8009920 <HAL_ETH_MspInit+0x15c>)
 8009842:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009844:	4a36      	ldr	r2, [pc, #216]	@ (8009920 <HAL_ETH_MspInit+0x15c>)
 8009846:	f043 0304 	orr.w	r3, r3, #4
 800984a:	6313      	str	r3, [r2, #48]	@ 0x30
 800984c:	4b34      	ldr	r3, [pc, #208]	@ (8009920 <HAL_ETH_MspInit+0x15c>)
 800984e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009850:	f003 0304 	and.w	r3, r3, #4
 8009854:	617b      	str	r3, [r7, #20]
 8009856:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009858:	2300      	movs	r3, #0
 800985a:	613b      	str	r3, [r7, #16]
 800985c:	4b30      	ldr	r3, [pc, #192]	@ (8009920 <HAL_ETH_MspInit+0x15c>)
 800985e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009860:	4a2f      	ldr	r2, [pc, #188]	@ (8009920 <HAL_ETH_MspInit+0x15c>)
 8009862:	f043 0301 	orr.w	r3, r3, #1
 8009866:	6313      	str	r3, [r2, #48]	@ 0x30
 8009868:	4b2d      	ldr	r3, [pc, #180]	@ (8009920 <HAL_ETH_MspInit+0x15c>)
 800986a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800986c:	f003 0301 	and.w	r3, r3, #1
 8009870:	613b      	str	r3, [r7, #16]
 8009872:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009874:	2300      	movs	r3, #0
 8009876:	60fb      	str	r3, [r7, #12]
 8009878:	4b29      	ldr	r3, [pc, #164]	@ (8009920 <HAL_ETH_MspInit+0x15c>)
 800987a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800987c:	4a28      	ldr	r2, [pc, #160]	@ (8009920 <HAL_ETH_MspInit+0x15c>)
 800987e:	f043 0302 	orr.w	r3, r3, #2
 8009882:	6313      	str	r3, [r2, #48]	@ 0x30
 8009884:	4b26      	ldr	r3, [pc, #152]	@ (8009920 <HAL_ETH_MspInit+0x15c>)
 8009886:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009888:	f003 0302 	and.w	r3, r3, #2
 800988c:	60fb      	str	r3, [r7, #12]
 800988e:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009890:	2332      	movs	r3, #50	@ 0x32
 8009892:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009894:	2302      	movs	r3, #2
 8009896:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009898:	2300      	movs	r3, #0
 800989a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800989c:	2303      	movs	r3, #3
 800989e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80098a0:	230b      	movs	r3, #11
 80098a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80098a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098a8:	4619      	mov	r1, r3
 80098aa:	481e      	ldr	r0, [pc, #120]	@ (8009924 <HAL_ETH_MspInit+0x160>)
 80098ac:	f7fa ff40 	bl	8004730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80098b0:	2386      	movs	r3, #134	@ 0x86
 80098b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098b4:	2302      	movs	r3, #2
 80098b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098b8:	2300      	movs	r3, #0
 80098ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098bc:	2303      	movs	r3, #3
 80098be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80098c0:	230b      	movs	r3, #11
 80098c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80098c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098c8:	4619      	mov	r1, r3
 80098ca:	4817      	ldr	r0, [pc, #92]	@ (8009928 <HAL_ETH_MspInit+0x164>)
 80098cc:	f7fa ff30 	bl	8004730 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80098d0:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80098d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098d6:	2302      	movs	r3, #2
 80098d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098da:	2300      	movs	r3, #0
 80098dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098de:	2303      	movs	r3, #3
 80098e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80098e2:	230b      	movs	r3, #11
 80098e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80098e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80098ea:	4619      	mov	r1, r3
 80098ec:	480f      	ldr	r0, [pc, #60]	@ (800992c <HAL_ETH_MspInit+0x168>)
 80098ee:	f7fa ff1f 	bl	8004730 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80098f2:	2200      	movs	r2, #0
 80098f4:	2105      	movs	r1, #5
 80098f6:	203d      	movs	r0, #61	@ 0x3d
 80098f8:	f7f9 f86a 	bl	80029d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80098fc:	203d      	movs	r0, #61	@ 0x3d
 80098fe:	f7f9 f883 	bl	8002a08 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8009902:	2200      	movs	r2, #0
 8009904:	2105      	movs	r1, #5
 8009906:	203e      	movs	r0, #62	@ 0x3e
 8009908:	f7f9 f862 	bl	80029d0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800990c:	203e      	movs	r0, #62	@ 0x3e
 800990e:	f7f9 f87b 	bl	8002a08 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8009912:	bf00      	nop
 8009914:	3738      	adds	r7, #56	@ 0x38
 8009916:	46bd      	mov	sp, r7
 8009918:	bd80      	pop	{r7, pc}
 800991a:	bf00      	nop
 800991c:	40028000 	.word	0x40028000
 8009920:	40023800 	.word	0x40023800
 8009924:	40020800 	.word	0x40020800
 8009928:	40020000 	.word	0x40020000
 800992c:	40020400 	.word	0x40020400

08009930 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8009934:	4802      	ldr	r0, [pc, #8]	@ (8009940 <ETH_PHY_IO_Init+0x10>)
 8009936:	f7fa fa7d 	bl	8003e34 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	bd80      	pop	{r7, pc}
 8009940:	20011308 	.word	0x20011308

08009944 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8009944:	b480      	push	{r7}
 8009946:	af00      	add	r7, sp, #0
  return 0;
 8009948:	2300      	movs	r3, #0
}
 800994a:	4618      	mov	r0, r3
 800994c:	46bd      	mov	sp, r7
 800994e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009952:	4770      	bx	lr

08009954 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b084      	sub	sp, #16
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	68f9      	ldr	r1, [r7, #12]
 8009966:	4807      	ldr	r0, [pc, #28]	@ (8009984 <ETH_PHY_IO_ReadReg+0x30>)
 8009968:	f7fa f8be 	bl	8003ae8 <HAL_ETH_ReadPHYRegister>
 800996c:	4603      	mov	r3, r0
 800996e:	2b00      	cmp	r3, #0
 8009970:	d002      	beq.n	8009978 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8009972:	f04f 33ff 	mov.w	r3, #4294967295
 8009976:	e000      	b.n	800997a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	20011308 	.word	0x20011308

08009988 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	60f8      	str	r0, [r7, #12]
 8009990:	60b9      	str	r1, [r7, #8]
 8009992:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	68ba      	ldr	r2, [r7, #8]
 8009998:	68f9      	ldr	r1, [r7, #12]
 800999a:	4807      	ldr	r0, [pc, #28]	@ (80099b8 <ETH_PHY_IO_WriteReg+0x30>)
 800999c:	f7fa f8ef 	bl	8003b7e <HAL_ETH_WritePHYRegister>
 80099a0:	4603      	mov	r3, r0
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d002      	beq.n	80099ac <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80099a6:	f04f 33ff 	mov.w	r3, #4294967295
 80099aa:	e000      	b.n	80099ae <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3710      	adds	r7, #16
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bd80      	pop	{r7, pc}
 80099b6:	bf00      	nop
 80099b8:	20011308 	.word	0x20011308

080099bc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80099bc:	b580      	push	{r7, lr}
 80099be:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80099c0:	f7f8 ff1e 	bl	8002800 <HAL_GetTick>
 80099c4:	4603      	mov	r3, r0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	bd80      	pop	{r7, pc}
	...

080099cc <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 80099cc:	b580      	push	{r7, lr}
 80099ce:	b0a0      	sub	sp, #128	@ 0x80
 80099d0:	af00      	add	r7, sp, #0
 80099d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 80099d4:	f107 0308 	add.w	r3, r7, #8
 80099d8:	2264      	movs	r2, #100	@ 0x64
 80099da:	2100      	movs	r1, #0
 80099dc:	4618      	mov	r0, r3
 80099de:	f014 ffc3 	bl	801e968 <memset>
  int32_t PHYLinkState = 0;
 80099e2:	2300      	movs	r3, #0
 80099e4:	673b      	str	r3, [r7, #112]	@ 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 80099e6:	2300      	movs	r3, #0
 80099e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80099ea:	2300      	movs	r3, #0
 80099ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099ee:	2300      	movs	r3, #0
 80099f0:	677b      	str	r3, [r7, #116]	@ 0x74

  struct netif *netif = (struct netif *) argument;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	66fb      	str	r3, [r7, #108]	@ 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 80099f6:	483a      	ldr	r0, [pc, #232]	@ (8009ae0 <ethernet_link_thread+0x114>)
 80099f8:	f7f8 fe44 	bl	8002684 <DP83848_GetLinkState>
 80099fc:	6738      	str	r0, [r7, #112]	@ 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 80099fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a00:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009a04:	089b      	lsrs	r3, r3, #2
 8009a06:	f003 0301 	and.w	r3, r3, #1
 8009a0a:	b2db      	uxtb	r3, r3
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00c      	beq.n	8009a2a <ethernet_link_thread+0x5e>
 8009a10:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	dc09      	bgt.n	8009a2a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8009a16:	4833      	ldr	r0, [pc, #204]	@ (8009ae4 <ethernet_link_thread+0x118>)
 8009a18:	f7f9 fd1e 	bl	8003458 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8009a1c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009a1e:	f008 f9e1 	bl	8011de4 <netif_set_down>
    netif_set_link_down(netif);
 8009a22:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009a24:	f008 fa48 	bl	8011eb8 <netif_set_link_down>
 8009a28:	e055      	b.n	8009ad6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 8009a2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a2c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8009a30:	f003 0304 	and.w	r3, r3, #4
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d14e      	bne.n	8009ad6 <ethernet_link_thread+0x10a>
 8009a38:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a3a:	2b01      	cmp	r3, #1
 8009a3c:	dd4b      	ble.n	8009ad6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8009a3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a40:	3b02      	subs	r3, #2
 8009a42:	2b03      	cmp	r3, #3
 8009a44:	d82a      	bhi.n	8009a9c <ethernet_link_thread+0xd0>
 8009a46:	a201      	add	r2, pc, #4	@ (adr r2, 8009a4c <ethernet_link_thread+0x80>)
 8009a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a4c:	08009a5d 	.word	0x08009a5d
 8009a50:	08009a6f 	.word	0x08009a6f
 8009a54:	08009a7f 	.word	0x08009a7f
 8009a58:	08009a8f 	.word	0x08009a8f
    {
    case DP83848_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009a5c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009a60:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009a62:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009a66:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009a68:	2301      	movs	r3, #1
 8009a6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009a6c:	e017      	b.n	8009a9e <ethernet_link_thread+0xd2>
    case DP83848_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009a6e:	2300      	movs	r3, #0
 8009a70:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_100M;
 8009a72:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009a76:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009a7c:	e00f      	b.n	8009a9e <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8009a7e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8009a82:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009a84:	2300      	movs	r3, #0
 8009a86:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009a88:	2301      	movs	r3, #1
 8009a8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009a8c:	e007      	b.n	8009a9e <ethernet_link_thread+0xd2>
    case DP83848_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8009a8e:	2300      	movs	r3, #0
 8009a90:	677b      	str	r3, [r7, #116]	@ 0x74
      speed = ETH_SPEED_10M;
 8009a92:	2300      	movs	r3, #0
 8009a94:	67bb      	str	r3, [r7, #120]	@ 0x78
      linkchanged = 1;
 8009a96:	2301      	movs	r3, #1
 8009a98:	67fb      	str	r3, [r7, #124]	@ 0x7c
      break;
 8009a9a:	e000      	b.n	8009a9e <ethernet_link_thread+0xd2>
    default:
      break;
 8009a9c:	bf00      	nop
    }

    if(linkchanged)
 8009a9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d018      	beq.n	8009ad6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8009aa4:	f107 0308 	add.w	r3, r7, #8
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	480e      	ldr	r0, [pc, #56]	@ (8009ae4 <ethernet_link_thread+0x118>)
 8009aac:	f7fa f8b0 	bl	8003c10 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8009ab0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ab2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8009ab4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009ab6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8009ab8:	f107 0308 	add.w	r3, r7, #8
 8009abc:	4619      	mov	r1, r3
 8009abe:	4809      	ldr	r0, [pc, #36]	@ (8009ae4 <ethernet_link_thread+0x118>)
 8009ac0:	f7fa f99d 	bl	8003dfe <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 8009ac4:	4807      	ldr	r0, [pc, #28]	@ (8009ae4 <ethernet_link_thread+0x118>)
 8009ac6:	f7f9 fc57 	bl	8003378 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8009aca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009acc:	f008 f91e 	bl	8011d0c <netif_set_up>
      netif_set_link_up(netif);
 8009ad0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009ad2:	f008 f9b9 	bl	8011e48 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8009ad6:	2064      	movs	r0, #100	@ 0x64
 8009ad8:	f002 feb0 	bl	800c83c <osDelay>
  PHYLinkState = DP83848_GetLinkState(&DP83848);
 8009adc:	e78b      	b.n	80099f6 <ethernet_link_thread+0x2a>
 8009ade:	bf00      	nop
 8009ae0:	200113f0 	.word	0x200113f0
 8009ae4:	20011308 	.word	0x20011308

08009ae8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af02      	add	r7, sp, #8
 8009aee:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8009af0:	4812      	ldr	r0, [pc, #72]	@ (8009b3c <HAL_ETH_RxAllocateCallback+0x54>)
 8009af2:	f007 fe77 	bl	80117e4 <memp_malloc_pool>
 8009af6:	60f8      	str	r0, [r7, #12]
  if (p)
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d014      	beq.n	8009b28 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f103 0220 	add.w	r2, r3, #32
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	4a0d      	ldr	r2, [pc, #52]	@ (8009b40 <HAL_ETH_RxAllocateCallback+0x58>)
 8009b0c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
 8009b16:	9201      	str	r2, [sp, #4]
 8009b18:	9300      	str	r3, [sp, #0]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2241      	movs	r2, #65	@ 0x41
 8009b1e:	2100      	movs	r1, #0
 8009b20:	2000      	movs	r0, #0
 8009b22:	f008 fbed 	bl	8012300 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8009b26:	e005      	b.n	8009b34 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8009b28:	4b06      	ldr	r3, [pc, #24]	@ (8009b44 <HAL_ETH_RxAllocateCallback+0x5c>)
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2200      	movs	r2, #0
 8009b32:	601a      	str	r2, [r3, #0]
}
 8009b34:	bf00      	nop
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	08025124 	.word	0x08025124
 8009b40:	08009775 	.word	0x08009775
 8009b44:	200111bc 	.word	0x200111bc

08009b48 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8009b48:	b480      	push	{r7}
 8009b4a:	b089      	sub	sp, #36	@ 0x24
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	60f8      	str	r0, [r7, #12]
 8009b50:	60b9      	str	r1, [r7, #8]
 8009b52:	607a      	str	r2, [r7, #4]
 8009b54:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	3b20      	subs	r3, #32
 8009b66:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8009b6e:	69fb      	ldr	r3, [r7, #28]
 8009b70:	2200      	movs	r2, #0
 8009b72:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	887a      	ldrh	r2, [r7, #2]
 8009b78:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8009b7a:	69bb      	ldr	r3, [r7, #24]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d103      	bne.n	8009b8a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8009b82:	69bb      	ldr	r3, [r7, #24]
 8009b84:	69fa      	ldr	r2, [r7, #28]
 8009b86:	601a      	str	r2, [r3, #0]
 8009b88:	e003      	b.n	8009b92 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	69fa      	ldr	r2, [r7, #28]
 8009b90:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	69fa      	ldr	r2, [r7, #28]
 8009b96:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	61fb      	str	r3, [r7, #28]
 8009b9e:	e009      	b.n	8009bb4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8009ba0:	69fb      	ldr	r3, [r7, #28]
 8009ba2:	891a      	ldrh	r2, [r3, #8]
 8009ba4:	887b      	ldrh	r3, [r7, #2]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	b29a      	uxth	r2, r3
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8009bae:	69fb      	ldr	r3, [r7, #28]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	61fb      	str	r3, [r7, #28]
 8009bb4:	69fb      	ldr	r3, [r7, #28]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d1f2      	bne.n	8009ba0 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8009bba:	bf00      	nop
 8009bbc:	bf00      	nop
 8009bbe:	3724      	adds	r7, #36	@ 0x24
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b082      	sub	sp, #8
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f008 fd4f 	bl	8012674 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8009bd6:	bf00      	nop
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
	...

08009be0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b084      	sub	sp, #16
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	4603      	mov	r3, r0
 8009be8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8009bea:	79fb      	ldrb	r3, [r7, #7]
 8009bec:	4a08      	ldr	r2, [pc, #32]	@ (8009c10 <disk_status+0x30>)
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4413      	add	r3, r2
 8009bf2:	685b      	ldr	r3, [r3, #4]
 8009bf4:	685b      	ldr	r3, [r3, #4]
 8009bf6:	79fa      	ldrb	r2, [r7, #7]
 8009bf8:	4905      	ldr	r1, [pc, #20]	@ (8009c10 <disk_status+0x30>)
 8009bfa:	440a      	add	r2, r1
 8009bfc:	7a12      	ldrb	r2, [r2, #8]
 8009bfe:	4610      	mov	r0, r2
 8009c00:	4798      	blx	r3
 8009c02:	4603      	mov	r3, r0
 8009c04:	73fb      	strb	r3, [r7, #15]
  return stat;
 8009c06:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3710      	adds	r7, #16
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	20011438 	.word	0x20011438

08009c14 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	4603      	mov	r3, r0
 8009c1c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8009c22:	79fb      	ldrb	r3, [r7, #7]
 8009c24:	4a0e      	ldr	r2, [pc, #56]	@ (8009c60 <disk_initialize+0x4c>)
 8009c26:	5cd3      	ldrb	r3, [r2, r3]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d114      	bne.n	8009c56 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8009c2c:	79fb      	ldrb	r3, [r7, #7]
 8009c2e:	4a0c      	ldr	r2, [pc, #48]	@ (8009c60 <disk_initialize+0x4c>)
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	4413      	add	r3, r2
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	79fa      	ldrb	r2, [r7, #7]
 8009c3a:	4909      	ldr	r1, [pc, #36]	@ (8009c60 <disk_initialize+0x4c>)
 8009c3c:	440a      	add	r2, r1
 8009c3e:	7a12      	ldrb	r2, [r2, #8]
 8009c40:	4610      	mov	r0, r2
 8009c42:	4798      	blx	r3
 8009c44:	4603      	mov	r3, r0
 8009c46:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8009c48:	7bfb      	ldrb	r3, [r7, #15]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d103      	bne.n	8009c56 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8009c4e:	79fb      	ldrb	r3, [r7, #7]
 8009c50:	4a03      	ldr	r2, [pc, #12]	@ (8009c60 <disk_initialize+0x4c>)
 8009c52:	2101      	movs	r1, #1
 8009c54:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8009c56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3710      	adds	r7, #16
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd80      	pop	{r7, pc}
 8009c60:	20011438 	.word	0x20011438

08009c64 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8009c64:	b590      	push	{r4, r7, lr}
 8009c66:	b087      	sub	sp, #28
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60b9      	str	r1, [r7, #8]
 8009c6c:	607a      	str	r2, [r7, #4]
 8009c6e:	603b      	str	r3, [r7, #0]
 8009c70:	4603      	mov	r3, r0
 8009c72:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8009c74:	7bfb      	ldrb	r3, [r7, #15]
 8009c76:	4a0a      	ldr	r2, [pc, #40]	@ (8009ca0 <disk_read+0x3c>)
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	689c      	ldr	r4, [r3, #8]
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
 8009c82:	4a07      	ldr	r2, [pc, #28]	@ (8009ca0 <disk_read+0x3c>)
 8009c84:	4413      	add	r3, r2
 8009c86:	7a18      	ldrb	r0, [r3, #8]
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	68b9      	ldr	r1, [r7, #8]
 8009c8e:	47a0      	blx	r4
 8009c90:	4603      	mov	r3, r0
 8009c92:	75fb      	strb	r3, [r7, #23]
  return res;
 8009c94:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c96:	4618      	mov	r0, r3
 8009c98:	371c      	adds	r7, #28
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd90      	pop	{r4, r7, pc}
 8009c9e:	bf00      	nop
 8009ca0:	20011438 	.word	0x20011438

08009ca4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8009ca4:	b590      	push	{r4, r7, lr}
 8009ca6:	b087      	sub	sp, #28
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	60b9      	str	r1, [r7, #8]
 8009cac:	607a      	str	r2, [r7, #4]
 8009cae:	603b      	str	r3, [r7, #0]
 8009cb0:	4603      	mov	r3, r0
 8009cb2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8009cb4:	7bfb      	ldrb	r3, [r7, #15]
 8009cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8009ce0 <disk_write+0x3c>)
 8009cb8:	009b      	lsls	r3, r3, #2
 8009cba:	4413      	add	r3, r2
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	68dc      	ldr	r4, [r3, #12]
 8009cc0:	7bfb      	ldrb	r3, [r7, #15]
 8009cc2:	4a07      	ldr	r2, [pc, #28]	@ (8009ce0 <disk_write+0x3c>)
 8009cc4:	4413      	add	r3, r2
 8009cc6:	7a18      	ldrb	r0, [r3, #8]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	68b9      	ldr	r1, [r7, #8]
 8009cce:	47a0      	blx	r4
 8009cd0:	4603      	mov	r3, r0
 8009cd2:	75fb      	strb	r3, [r7, #23]
  return res;
 8009cd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	371c      	adds	r7, #28
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd90      	pop	{r4, r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	20011438 	.word	0x20011438

08009ce4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b084      	sub	sp, #16
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	4603      	mov	r3, r0
 8009cec:	603a      	str	r2, [r7, #0]
 8009cee:	71fb      	strb	r3, [r7, #7]
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8009cf4:	79fb      	ldrb	r3, [r7, #7]
 8009cf6:	4a09      	ldr	r2, [pc, #36]	@ (8009d1c <disk_ioctl+0x38>)
 8009cf8:	009b      	lsls	r3, r3, #2
 8009cfa:	4413      	add	r3, r2
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	79fa      	ldrb	r2, [r7, #7]
 8009d02:	4906      	ldr	r1, [pc, #24]	@ (8009d1c <disk_ioctl+0x38>)
 8009d04:	440a      	add	r2, r1
 8009d06:	7a10      	ldrb	r0, [r2, #8]
 8009d08:	79b9      	ldrb	r1, [r7, #6]
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	4798      	blx	r3
 8009d0e:	4603      	mov	r3, r0
 8009d10:	73fb      	strb	r3, [r7, #15]
  return res;
 8009d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3710      	adds	r7, #16
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	bd80      	pop	{r7, pc}
 8009d1c:	20011438 	.word	0x20011438

08009d20 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	781b      	ldrb	r3, [r3, #0]
 8009d2e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8009d30:	89fb      	ldrh	r3, [r7, #14]
 8009d32:	021b      	lsls	r3, r3, #8
 8009d34:	b21a      	sxth	r2, r3
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	b21b      	sxth	r3, r3
 8009d3c:	4313      	orrs	r3, r2
 8009d3e:	b21b      	sxth	r3, r3
 8009d40:	81fb      	strh	r3, [r7, #14]
	return rv;
 8009d42:	89fb      	ldrh	r3, [r7, #14]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3714      	adds	r7, #20
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8009d50:	b480      	push	{r7}
 8009d52:	b085      	sub	sp, #20
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	3303      	adds	r3, #3
 8009d5c:	781b      	ldrb	r3, [r3, #0]
 8009d5e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	021b      	lsls	r3, r3, #8
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	3202      	adds	r2, #2
 8009d68:	7812      	ldrb	r2, [r2, #0]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	021b      	lsls	r3, r3, #8
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	3201      	adds	r2, #1
 8009d76:	7812      	ldrb	r2, [r2, #0]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	021b      	lsls	r3, r3, #8
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	7812      	ldrb	r2, [r2, #0]
 8009d84:	4313      	orrs	r3, r2
 8009d86:	60fb      	str	r3, [r7, #12]
	return rv;
 8009d88:	68fb      	ldr	r3, [r7, #12]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr

08009d96 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8009d96:	b480      	push	{r7}
 8009d98:	b083      	sub	sp, #12
 8009d9a:	af00      	add	r7, sp, #0
 8009d9c:	6078      	str	r0, [r7, #4]
 8009d9e:	460b      	mov	r3, r1
 8009da0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	1c5a      	adds	r2, r3, #1
 8009da6:	607a      	str	r2, [r7, #4]
 8009da8:	887a      	ldrh	r2, [r7, #2]
 8009daa:	b2d2      	uxtb	r2, r2
 8009dac:	701a      	strb	r2, [r3, #0]
 8009dae:	887b      	ldrh	r3, [r7, #2]
 8009db0:	0a1b      	lsrs	r3, r3, #8
 8009db2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	1c5a      	adds	r2, r3, #1
 8009db8:	607a      	str	r2, [r7, #4]
 8009dba:	887a      	ldrh	r2, [r7, #2]
 8009dbc:	b2d2      	uxtb	r2, r2
 8009dbe:	701a      	strb	r2, [r3, #0]
}
 8009dc0:	bf00      	nop
 8009dc2:	370c      	adds	r7, #12
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8009dcc:	b480      	push	{r7}
 8009dce:	b083      	sub	sp, #12
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
 8009dd4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	1c5a      	adds	r2, r3, #1
 8009dda:	607a      	str	r2, [r7, #4]
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	b2d2      	uxtb	r2, r2
 8009de0:	701a      	strb	r2, [r3, #0]
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	0a1b      	lsrs	r3, r3, #8
 8009de6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	607a      	str	r2, [r7, #4]
 8009dee:	683a      	ldr	r2, [r7, #0]
 8009df0:	b2d2      	uxtb	r2, r2
 8009df2:	701a      	strb	r2, [r3, #0]
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	0a1b      	lsrs	r3, r3, #8
 8009df8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	1c5a      	adds	r2, r3, #1
 8009dfe:	607a      	str	r2, [r7, #4]
 8009e00:	683a      	ldr	r2, [r7, #0]
 8009e02:	b2d2      	uxtb	r2, r2
 8009e04:	701a      	strb	r2, [r3, #0]
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	0a1b      	lsrs	r3, r3, #8
 8009e0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	1c5a      	adds	r2, r3, #1
 8009e10:	607a      	str	r2, [r7, #4]
 8009e12:	683a      	ldr	r2, [r7, #0]
 8009e14:	b2d2      	uxtb	r2, r2
 8009e16:	701a      	strb	r2, [r3, #0]
}
 8009e18:	bf00      	nop
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8009e24:	b480      	push	{r7}
 8009e26:	b087      	sub	sp, #28
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d00d      	beq.n	8009e5a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8009e3e:	693a      	ldr	r2, [r7, #16]
 8009e40:	1c53      	adds	r3, r2, #1
 8009e42:	613b      	str	r3, [r7, #16]
 8009e44:	697b      	ldr	r3, [r7, #20]
 8009e46:	1c59      	adds	r1, r3, #1
 8009e48:	6179      	str	r1, [r7, #20]
 8009e4a:	7812      	ldrb	r2, [r2, #0]
 8009e4c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	3b01      	subs	r3, #1
 8009e52:	607b      	str	r3, [r7, #4]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1f1      	bne.n	8009e3e <mem_cpy+0x1a>
	}
}
 8009e5a:	bf00      	nop
 8009e5c:	371c      	adds	r7, #28
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr

08009e66 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8009e66:	b480      	push	{r7}
 8009e68:	b087      	sub	sp, #28
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	60f8      	str	r0, [r7, #12]
 8009e6e:	60b9      	str	r1, [r7, #8]
 8009e70:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8009e72:	68fb      	ldr	r3, [r7, #12]
 8009e74:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8009e76:	697b      	ldr	r3, [r7, #20]
 8009e78:	1c5a      	adds	r2, r3, #1
 8009e7a:	617a      	str	r2, [r7, #20]
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	b2d2      	uxtb	r2, r2
 8009e80:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	3b01      	subs	r3, #1
 8009e86:	607b      	str	r3, [r7, #4]
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d1f3      	bne.n	8009e76 <mem_set+0x10>
}
 8009e8e:	bf00      	nop
 8009e90:	bf00      	nop
 8009e92:	371c      	adds	r7, #28
 8009e94:	46bd      	mov	sp, r7
 8009e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e9a:	4770      	bx	lr

08009e9c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8009e9c:	b480      	push	{r7}
 8009e9e:	b089      	sub	sp, #36	@ 0x24
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	60f8      	str	r0, [r7, #12]
 8009ea4:	60b9      	str	r1, [r7, #8]
 8009ea6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	61fb      	str	r3, [r7, #28]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8009eb4:	69fb      	ldr	r3, [r7, #28]
 8009eb6:	1c5a      	adds	r2, r3, #1
 8009eb8:	61fa      	str	r2, [r7, #28]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	4619      	mov	r1, r3
 8009ebe:	69bb      	ldr	r3, [r7, #24]
 8009ec0:	1c5a      	adds	r2, r3, #1
 8009ec2:	61ba      	str	r2, [r7, #24]
 8009ec4:	781b      	ldrb	r3, [r3, #0]
 8009ec6:	1acb      	subs	r3, r1, r3
 8009ec8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	607b      	str	r3, [r7, #4]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d002      	beq.n	8009edc <mem_cmp+0x40>
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d0eb      	beq.n	8009eb4 <mem_cmp+0x18>

	return r;
 8009edc:	697b      	ldr	r3, [r7, #20]
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3724      	adds	r7, #36	@ 0x24
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee8:	4770      	bx	lr

08009eea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8009eea:	b480      	push	{r7}
 8009eec:	b083      	sub	sp, #12
 8009eee:	af00      	add	r7, sp, #0
 8009ef0:	6078      	str	r0, [r7, #4]
 8009ef2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8009ef4:	e002      	b.n	8009efc <chk_chr+0x12>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	607b      	str	r3, [r7, #4]
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	781b      	ldrb	r3, [r3, #0]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d005      	beq.n	8009f10 <chk_chr+0x26>
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	461a      	mov	r2, r3
 8009f0a:	683b      	ldr	r3, [r7, #0]
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d1f2      	bne.n	8009ef6 <chk_chr+0xc>
	return *str;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	781b      	ldrb	r3, [r3, #0]
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	370c      	adds	r7, #12
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	b082      	sub	sp, #8
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d009      	beq.n	8009f42 <lock_fs+0x22>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	4618      	mov	r0, r3
 8009f34:	f002 fb0a 	bl	800c54c <ff_req_grant>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d001      	beq.n	8009f42 <lock_fs+0x22>
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e000      	b.n	8009f44 <lock_fs+0x24>
 8009f42:	2300      	movs	r3, #0
}
 8009f44:	4618      	mov	r0, r3
 8009f46:	3708      	adds	r7, #8
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	bd80      	pop	{r7, pc}

08009f4c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	b082      	sub	sp, #8
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	460b      	mov	r3, r1
 8009f56:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d00d      	beq.n	8009f7a <unlock_fs+0x2e>
 8009f5e:	78fb      	ldrb	r3, [r7, #3]
 8009f60:	2b0c      	cmp	r3, #12
 8009f62:	d00a      	beq.n	8009f7a <unlock_fs+0x2e>
 8009f64:	78fb      	ldrb	r3, [r7, #3]
 8009f66:	2b0b      	cmp	r3, #11
 8009f68:	d007      	beq.n	8009f7a <unlock_fs+0x2e>
 8009f6a:	78fb      	ldrb	r3, [r7, #3]
 8009f6c:	2b0f      	cmp	r3, #15
 8009f6e:	d004      	beq.n	8009f7a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f002 fafe 	bl	800c576 <ff_rel_grant>
	}
}
 8009f7a:	bf00      	nop
 8009f7c:	3708      	adds	r7, #8
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}
	...

08009f84 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
 8009f8c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009f8e:	2300      	movs	r3, #0
 8009f90:	60bb      	str	r3, [r7, #8]
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	60fb      	str	r3, [r7, #12]
 8009f96:	e029      	b.n	8009fec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8009f98:	4a27      	ldr	r2, [pc, #156]	@ (800a038 <chk_lock+0xb4>)
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	011b      	lsls	r3, r3, #4
 8009f9e:	4413      	add	r3, r2
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d01d      	beq.n	8009fe2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009fa6:	4a24      	ldr	r2, [pc, #144]	@ (800a038 <chk_lock+0xb4>)
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	011b      	lsls	r3, r3, #4
 8009fac:	4413      	add	r3, r2
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	429a      	cmp	r2, r3
 8009fb6:	d116      	bne.n	8009fe6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8009fb8:	4a1f      	ldr	r2, [pc, #124]	@ (800a038 <chk_lock+0xb4>)
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	011b      	lsls	r3, r3, #4
 8009fbe:	4413      	add	r3, r2
 8009fc0:	3304      	adds	r3, #4
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8009fc8:	429a      	cmp	r2, r3
 8009fca:	d10c      	bne.n	8009fe6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009fcc:	4a1a      	ldr	r2, [pc, #104]	@ (800a038 <chk_lock+0xb4>)
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	011b      	lsls	r3, r3, #4
 8009fd2:	4413      	add	r3, r2
 8009fd4:	3308      	adds	r3, #8
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d102      	bne.n	8009fe6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8009fe0:	e007      	b.n	8009ff2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	3301      	adds	r3, #1
 8009fea:	60fb      	str	r3, [r7, #12]
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	2b01      	cmp	r3, #1
 8009ff0:	d9d2      	bls.n	8009f98 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2b02      	cmp	r3, #2
 8009ff6:	d109      	bne.n	800a00c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d102      	bne.n	800a004 <chk_lock+0x80>
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	2b02      	cmp	r3, #2
 800a002:	d101      	bne.n	800a008 <chk_lock+0x84>
 800a004:	2300      	movs	r3, #0
 800a006:	e010      	b.n	800a02a <chk_lock+0xa6>
 800a008:	2312      	movs	r3, #18
 800a00a:	e00e      	b.n	800a02a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d108      	bne.n	800a024 <chk_lock+0xa0>
 800a012:	4a09      	ldr	r2, [pc, #36]	@ (800a038 <chk_lock+0xb4>)
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	011b      	lsls	r3, r3, #4
 800a018:	4413      	add	r3, r2
 800a01a:	330c      	adds	r3, #12
 800a01c:	881b      	ldrh	r3, [r3, #0]
 800a01e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a022:	d101      	bne.n	800a028 <chk_lock+0xa4>
 800a024:	2310      	movs	r3, #16
 800a026:	e000      	b.n	800a02a <chk_lock+0xa6>
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	3714      	adds	r7, #20
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	20011418 	.word	0x20011418

0800a03c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a03c:	b480      	push	{r7}
 800a03e:	b083      	sub	sp, #12
 800a040:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a042:	2300      	movs	r3, #0
 800a044:	607b      	str	r3, [r7, #4]
 800a046:	e002      	b.n	800a04e <enq_lock+0x12>
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	3301      	adds	r3, #1
 800a04c:	607b      	str	r3, [r7, #4]
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b01      	cmp	r3, #1
 800a052:	d806      	bhi.n	800a062 <enq_lock+0x26>
 800a054:	4a09      	ldr	r2, [pc, #36]	@ (800a07c <enq_lock+0x40>)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	011b      	lsls	r3, r3, #4
 800a05a:	4413      	add	r3, r2
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d1f2      	bne.n	800a048 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2b02      	cmp	r3, #2
 800a066:	bf14      	ite	ne
 800a068:	2301      	movne	r3, #1
 800a06a:	2300      	moveq	r3, #0
 800a06c:	b2db      	uxtb	r3, r3
}
 800a06e:	4618      	mov	r0, r3
 800a070:	370c      	adds	r7, #12
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr
 800a07a:	bf00      	nop
 800a07c:	20011418 	.word	0x20011418

0800a080 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a080:	b480      	push	{r7}
 800a082:	b085      	sub	sp, #20
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a08a:	2300      	movs	r3, #0
 800a08c:	60fb      	str	r3, [r7, #12]
 800a08e:	e01f      	b.n	800a0d0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a090:	4a41      	ldr	r2, [pc, #260]	@ (800a198 <inc_lock+0x118>)
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	011b      	lsls	r3, r3, #4
 800a096:	4413      	add	r3, r2
 800a098:	681a      	ldr	r2, [r3, #0]
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d113      	bne.n	800a0ca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a0a2:	4a3d      	ldr	r2, [pc, #244]	@ (800a198 <inc_lock+0x118>)
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	011b      	lsls	r3, r3, #4
 800a0a8:	4413      	add	r3, r2
 800a0aa:	3304      	adds	r3, #4
 800a0ac:	681a      	ldr	r2, [r3, #0]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a0b2:	429a      	cmp	r2, r3
 800a0b4:	d109      	bne.n	800a0ca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a0b6:	4a38      	ldr	r2, [pc, #224]	@ (800a198 <inc_lock+0x118>)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	011b      	lsls	r3, r3, #4
 800a0bc:	4413      	add	r3, r2
 800a0be:	3308      	adds	r3, #8
 800a0c0:	681a      	ldr	r2, [r3, #0]
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d006      	beq.n	800a0d8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	3301      	adds	r3, #1
 800a0ce:	60fb      	str	r3, [r7, #12]
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2b01      	cmp	r3, #1
 800a0d4:	d9dc      	bls.n	800a090 <inc_lock+0x10>
 800a0d6:	e000      	b.n	800a0da <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a0d8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d132      	bne.n	800a146 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	60fb      	str	r3, [r7, #12]
 800a0e4:	e002      	b.n	800a0ec <inc_lock+0x6c>
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	60fb      	str	r3, [r7, #12]
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2b01      	cmp	r3, #1
 800a0f0:	d806      	bhi.n	800a100 <inc_lock+0x80>
 800a0f2:	4a29      	ldr	r2, [pc, #164]	@ (800a198 <inc_lock+0x118>)
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	011b      	lsls	r3, r3, #4
 800a0f8:	4413      	add	r3, r2
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d1f2      	bne.n	800a0e6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	2b02      	cmp	r3, #2
 800a104:	d101      	bne.n	800a10a <inc_lock+0x8a>
 800a106:	2300      	movs	r3, #0
 800a108:	e040      	b.n	800a18c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	4922      	ldr	r1, [pc, #136]	@ (800a198 <inc_lock+0x118>)
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	011b      	lsls	r3, r3, #4
 800a114:	440b      	add	r3, r1
 800a116:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	689a      	ldr	r2, [r3, #8]
 800a11c:	491e      	ldr	r1, [pc, #120]	@ (800a198 <inc_lock+0x118>)
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	011b      	lsls	r3, r3, #4
 800a122:	440b      	add	r3, r1
 800a124:	3304      	adds	r3, #4
 800a126:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	695a      	ldr	r2, [r3, #20]
 800a12c:	491a      	ldr	r1, [pc, #104]	@ (800a198 <inc_lock+0x118>)
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	011b      	lsls	r3, r3, #4
 800a132:	440b      	add	r3, r1
 800a134:	3308      	adds	r3, #8
 800a136:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a138:	4a17      	ldr	r2, [pc, #92]	@ (800a198 <inc_lock+0x118>)
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	011b      	lsls	r3, r3, #4
 800a13e:	4413      	add	r3, r2
 800a140:	330c      	adds	r3, #12
 800a142:	2200      	movs	r2, #0
 800a144:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d009      	beq.n	800a160 <inc_lock+0xe0>
 800a14c:	4a12      	ldr	r2, [pc, #72]	@ (800a198 <inc_lock+0x118>)
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	011b      	lsls	r3, r3, #4
 800a152:	4413      	add	r3, r2
 800a154:	330c      	adds	r3, #12
 800a156:	881b      	ldrh	r3, [r3, #0]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d001      	beq.n	800a160 <inc_lock+0xe0>
 800a15c:	2300      	movs	r3, #0
 800a15e:	e015      	b.n	800a18c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d108      	bne.n	800a178 <inc_lock+0xf8>
 800a166:	4a0c      	ldr	r2, [pc, #48]	@ (800a198 <inc_lock+0x118>)
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	011b      	lsls	r3, r3, #4
 800a16c:	4413      	add	r3, r2
 800a16e:	330c      	adds	r3, #12
 800a170:	881b      	ldrh	r3, [r3, #0]
 800a172:	3301      	adds	r3, #1
 800a174:	b29a      	uxth	r2, r3
 800a176:	e001      	b.n	800a17c <inc_lock+0xfc>
 800a178:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a17c:	4906      	ldr	r1, [pc, #24]	@ (800a198 <inc_lock+0x118>)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	011b      	lsls	r3, r3, #4
 800a182:	440b      	add	r3, r1
 800a184:	330c      	adds	r3, #12
 800a186:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	3301      	adds	r3, #1
}
 800a18c:	4618      	mov	r0, r3
 800a18e:	3714      	adds	r7, #20
 800a190:	46bd      	mov	sp, r7
 800a192:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a196:	4770      	bx	lr
 800a198:	20011418 	.word	0x20011418

0800a19c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	607b      	str	r3, [r7, #4]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	2b01      	cmp	r3, #1
 800a1ae:	d825      	bhi.n	800a1fc <dec_lock+0x60>
		n = Files[i].ctr;
 800a1b0:	4a17      	ldr	r2, [pc, #92]	@ (800a210 <dec_lock+0x74>)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	011b      	lsls	r3, r3, #4
 800a1b6:	4413      	add	r3, r2
 800a1b8:	330c      	adds	r3, #12
 800a1ba:	881b      	ldrh	r3, [r3, #0]
 800a1bc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800a1be:	89fb      	ldrh	r3, [r7, #14]
 800a1c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a1c4:	d101      	bne.n	800a1ca <dec_lock+0x2e>
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800a1ca:	89fb      	ldrh	r3, [r7, #14]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d002      	beq.n	800a1d6 <dec_lock+0x3a>
 800a1d0:	89fb      	ldrh	r3, [r7, #14]
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800a1d6:	4a0e      	ldr	r2, [pc, #56]	@ (800a210 <dec_lock+0x74>)
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	011b      	lsls	r3, r3, #4
 800a1dc:	4413      	add	r3, r2
 800a1de:	330c      	adds	r3, #12
 800a1e0:	89fa      	ldrh	r2, [r7, #14]
 800a1e2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800a1e4:	89fb      	ldrh	r3, [r7, #14]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d105      	bne.n	800a1f6 <dec_lock+0x5a>
 800a1ea:	4a09      	ldr	r2, [pc, #36]	@ (800a210 <dec_lock+0x74>)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	011b      	lsls	r3, r3, #4
 800a1f0:	4413      	add	r3, r2
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	737b      	strb	r3, [r7, #13]
 800a1fa:	e001      	b.n	800a200 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800a1fc:	2302      	movs	r3, #2
 800a1fe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800a200:	7b7b      	ldrb	r3, [r7, #13]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3714      	adds	r7, #20
 800a206:	46bd      	mov	sp, r7
 800a208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	20011418 	.word	0x20011418

0800a214 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a214:	b480      	push	{r7}
 800a216:	b085      	sub	sp, #20
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a21c:	2300      	movs	r3, #0
 800a21e:	60fb      	str	r3, [r7, #12]
 800a220:	e010      	b.n	800a244 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a222:	4a0d      	ldr	r2, [pc, #52]	@ (800a258 <clear_lock+0x44>)
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	011b      	lsls	r3, r3, #4
 800a228:	4413      	add	r3, r2
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	429a      	cmp	r2, r3
 800a230:	d105      	bne.n	800a23e <clear_lock+0x2a>
 800a232:	4a09      	ldr	r2, [pc, #36]	@ (800a258 <clear_lock+0x44>)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	011b      	lsls	r3, r3, #4
 800a238:	4413      	add	r3, r2
 800a23a:	2200      	movs	r2, #0
 800a23c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	3301      	adds	r3, #1
 800a242:	60fb      	str	r3, [r7, #12]
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2b01      	cmp	r3, #1
 800a248:	d9eb      	bls.n	800a222 <clear_lock+0xe>
	}
}
 800a24a:	bf00      	nop
 800a24c:	bf00      	nop
 800a24e:	3714      	adds	r7, #20
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	20011418 	.word	0x20011418

0800a25c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a25c:	b580      	push	{r7, lr}
 800a25e:	b086      	sub	sp, #24
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a264:	2300      	movs	r3, #0
 800a266:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	78db      	ldrb	r3, [r3, #3]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d034      	beq.n	800a2da <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a274:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	7858      	ldrb	r0, [r3, #1]
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a280:	2301      	movs	r3, #1
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	f7ff fd0e 	bl	8009ca4 <disk_write>
 800a288:	4603      	mov	r3, r0
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d002      	beq.n	800a294 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a28e:	2301      	movs	r3, #1
 800a290:	73fb      	strb	r3, [r7, #15]
 800a292:	e022      	b.n	800a2da <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a29e:	697a      	ldr	r2, [r7, #20]
 800a2a0:	1ad2      	subs	r2, r2, r3
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	69db      	ldr	r3, [r3, #28]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d217      	bcs.n	800a2da <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	789b      	ldrb	r3, [r3, #2]
 800a2ae:	613b      	str	r3, [r7, #16]
 800a2b0:	e010      	b.n	800a2d4 <sync_window+0x78>
					wsect += fs->fsize;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	69db      	ldr	r3, [r3, #28]
 800a2b6:	697a      	ldr	r2, [r7, #20]
 800a2b8:	4413      	add	r3, r2
 800a2ba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	7858      	ldrb	r0, [r3, #1]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	697a      	ldr	r2, [r7, #20]
 800a2ca:	f7ff fceb 	bl	8009ca4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a2ce:	693b      	ldr	r3, [r7, #16]
 800a2d0:	3b01      	subs	r3, #1
 800a2d2:	613b      	str	r3, [r7, #16]
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	2b01      	cmp	r3, #1
 800a2d8:	d8eb      	bhi.n	800a2b2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800a2da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3718      	adds	r7, #24
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b084      	sub	sp, #16
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	429a      	cmp	r2, r3
 800a2fa:	d01b      	beq.n	800a334 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f7ff ffad 	bl	800a25c <sync_window>
 800a302:	4603      	mov	r3, r0
 800a304:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800a306:	7bfb      	ldrb	r3, [r7, #15]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d113      	bne.n	800a334 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	7858      	ldrb	r0, [r3, #1]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a316:	2301      	movs	r3, #1
 800a318:	683a      	ldr	r2, [r7, #0]
 800a31a:	f7ff fca3 	bl	8009c64 <disk_read>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d004      	beq.n	800a32e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800a324:	f04f 33ff 	mov.w	r3, #4294967295
 800a328:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800a32a:	2301      	movs	r3, #1
 800a32c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	683a      	ldr	r2, [r7, #0]
 800a332:	631a      	str	r2, [r3, #48]	@ 0x30
		}
	}
	return res;
 800a334:	7bfb      	ldrb	r3, [r7, #15]
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}
	...

0800a340 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b084      	sub	sp, #16
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800a348:	6878      	ldr	r0, [r7, #4]
 800a34a:	f7ff ff87 	bl	800a25c <sync_window>
 800a34e:	4603      	mov	r3, r0
 800a350:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800a352:	7bfb      	ldrb	r3, [r7, #15]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d158      	bne.n	800a40a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	781b      	ldrb	r3, [r3, #0]
 800a35c:	2b03      	cmp	r3, #3
 800a35e:	d148      	bne.n	800a3f2 <sync_fs+0xb2>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	791b      	ldrb	r3, [r3, #4]
 800a364:	2b01      	cmp	r3, #1
 800a366:	d144      	bne.n	800a3f2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	3334      	adds	r3, #52	@ 0x34
 800a36c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a370:	2100      	movs	r1, #0
 800a372:	4618      	mov	r0, r3
 800a374:	f7ff fd77 	bl	8009e66 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	3334      	adds	r3, #52	@ 0x34
 800a37c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800a380:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800a384:	4618      	mov	r0, r3
 800a386:	f7ff fd06 	bl	8009d96 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	3334      	adds	r3, #52	@ 0x34
 800a38e:	4921      	ldr	r1, [pc, #132]	@ (800a414 <sync_fs+0xd4>)
 800a390:	4618      	mov	r0, r3
 800a392:	f7ff fd1b 	bl	8009dcc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	3334      	adds	r3, #52	@ 0x34
 800a39a:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800a39e:	491e      	ldr	r1, [pc, #120]	@ (800a418 <sync_fs+0xd8>)
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7ff fd13 	bl	8009dcc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	3334      	adds	r3, #52	@ 0x34
 800a3aa:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	695b      	ldr	r3, [r3, #20]
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	f7ff fd09 	bl	8009dcc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	3334      	adds	r3, #52	@ 0x34
 800a3be:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	4619      	mov	r1, r3
 800a3c8:	4610      	mov	r0, r2
 800a3ca:	f7ff fcff 	bl	8009dcc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	1c5a      	adds	r2, r3, #1
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	631a      	str	r2, [r3, #48]	@ 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	7858      	ldrb	r0, [r3, #1]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a3e6:	2301      	movs	r3, #1
 800a3e8:	f7ff fc5c 	bl	8009ca4 <disk_write>
			fs->fsi_flag = 0;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	785b      	ldrb	r3, [r3, #1]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	2100      	movs	r1, #0
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f7ff fc72 	bl	8009ce4 <disk_ioctl>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d001      	beq.n	800a40a <sync_fs+0xca>
 800a406:	2301      	movs	r3, #1
 800a408:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800a40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3710      	adds	r7, #16
 800a410:	46bd      	mov	sp, r7
 800a412:	bd80      	pop	{r7, pc}
 800a414:	41615252 	.word	0x41615252
 800a418:	61417272 	.word	0x61417272

0800a41c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b083      	sub	sp, #12
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	3b02      	subs	r3, #2
 800a42a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	699b      	ldr	r3, [r3, #24]
 800a430:	3b02      	subs	r3, #2
 800a432:	683a      	ldr	r2, [r7, #0]
 800a434:	429a      	cmp	r2, r3
 800a436:	d301      	bcc.n	800a43c <clust2sect+0x20>
 800a438:	2300      	movs	r3, #0
 800a43a:	e008      	b.n	800a44e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	895b      	ldrh	r3, [r3, #10]
 800a440:	461a      	mov	r2, r3
 800a442:	683b      	ldr	r3, [r7, #0]
 800a444:	fb03 f202 	mul.w	r2, r3, r2
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a44c:	4413      	add	r3, r2
}
 800a44e:	4618      	mov	r0, r3
 800a450:	370c      	adds	r7, #12
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800a45a:	b580      	push	{r7, lr}
 800a45c:	b086      	sub	sp, #24
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
 800a462:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800a46a:	683b      	ldr	r3, [r7, #0]
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d904      	bls.n	800a47a <get_fat+0x20>
 800a470:	693b      	ldr	r3, [r7, #16]
 800a472:	699b      	ldr	r3, [r3, #24]
 800a474:	683a      	ldr	r2, [r7, #0]
 800a476:	429a      	cmp	r2, r3
 800a478:	d302      	bcc.n	800a480 <get_fat+0x26>
		val = 1;	/* Internal error */
 800a47a:	2301      	movs	r3, #1
 800a47c:	617b      	str	r3, [r7, #20]
 800a47e:	e08e      	b.n	800a59e <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800a480:	f04f 33ff 	mov.w	r3, #4294967295
 800a484:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800a486:	693b      	ldr	r3, [r7, #16]
 800a488:	781b      	ldrb	r3, [r3, #0]
 800a48a:	2b03      	cmp	r3, #3
 800a48c:	d061      	beq.n	800a552 <get_fat+0xf8>
 800a48e:	2b03      	cmp	r3, #3
 800a490:	dc7b      	bgt.n	800a58a <get_fat+0x130>
 800a492:	2b01      	cmp	r3, #1
 800a494:	d002      	beq.n	800a49c <get_fat+0x42>
 800a496:	2b02      	cmp	r3, #2
 800a498:	d041      	beq.n	800a51e <get_fat+0xc4>
 800a49a:	e076      	b.n	800a58a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	60fb      	str	r3, [r7, #12]
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	085b      	lsrs	r3, r3, #1
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	4413      	add	r3, r2
 800a4a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	0a5b      	lsrs	r3, r3, #9
 800a4b2:	4413      	add	r3, r2
 800a4b4:	4619      	mov	r1, r3
 800a4b6:	6938      	ldr	r0, [r7, #16]
 800a4b8:	f7ff ff14 	bl	800a2e4 <move_window>
 800a4bc:	4603      	mov	r3, r0
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d166      	bne.n	800a590 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	1c5a      	adds	r2, r3, #1
 800a4c6:	60fa      	str	r2, [r7, #12]
 800a4c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4cc:	693a      	ldr	r2, [r7, #16]
 800a4ce:	4413      	add	r3, r2
 800a4d0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a4d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	0a5b      	lsrs	r3, r3, #9
 800a4de:	4413      	add	r3, r2
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	6938      	ldr	r0, [r7, #16]
 800a4e4:	f7ff fefe 	bl	800a2e4 <move_window>
 800a4e8:	4603      	mov	r3, r0
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d152      	bne.n	800a594 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	4413      	add	r3, r2
 800a4f8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a4fc:	021b      	lsls	r3, r3, #8
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	4313      	orrs	r3, r2
 800a502:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800a504:	683b      	ldr	r3, [r7, #0]
 800a506:	f003 0301 	and.w	r3, r3, #1
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d002      	beq.n	800a514 <get_fat+0xba>
 800a50e:	68bb      	ldr	r3, [r7, #8]
 800a510:	091b      	lsrs	r3, r3, #4
 800a512:	e002      	b.n	800a51a <get_fat+0xc0>
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a51a:	617b      	str	r3, [r7, #20]
			break;
 800a51c:	e03f      	b.n	800a59e <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	0a1b      	lsrs	r3, r3, #8
 800a526:	4413      	add	r3, r2
 800a528:	4619      	mov	r1, r3
 800a52a:	6938      	ldr	r0, [r7, #16]
 800a52c:	f7ff feda 	bl	800a2e4 <move_window>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d130      	bne.n	800a598 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	005b      	lsls	r3, r3, #1
 800a540:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a544:	4413      	add	r3, r2
 800a546:	4618      	mov	r0, r3
 800a548:	f7ff fbea 	bl	8009d20 <ld_word>
 800a54c:	4603      	mov	r3, r0
 800a54e:	617b      	str	r3, [r7, #20]
			break;
 800a550:	e025      	b.n	800a59e <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	09db      	lsrs	r3, r3, #7
 800a55a:	4413      	add	r3, r2
 800a55c:	4619      	mov	r1, r3
 800a55e:	6938      	ldr	r0, [r7, #16]
 800a560:	f7ff fec0 	bl	800a2e4 <move_window>
 800a564:	4603      	mov	r3, r0
 800a566:	2b00      	cmp	r3, #0
 800a568:	d118      	bne.n	800a59c <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a578:	4413      	add	r3, r2
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7ff fbe8 	bl	8009d50 <ld_dword>
 800a580:	4603      	mov	r3, r0
 800a582:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800a586:	617b      	str	r3, [r7, #20]
			break;
 800a588:	e009      	b.n	800a59e <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800a58a:	2301      	movs	r3, #1
 800a58c:	617b      	str	r3, [r7, #20]
 800a58e:	e006      	b.n	800a59e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a590:	bf00      	nop
 800a592:	e004      	b.n	800a59e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800a594:	bf00      	nop
 800a596:	e002      	b.n	800a59e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800a598:	bf00      	nop
 800a59a:	e000      	b.n	800a59e <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800a59c:	bf00      	nop
		}
	}

	return val;
 800a59e:	697b      	ldr	r3, [r7, #20]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3718      	adds	r7, #24
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800a5a8:	b590      	push	{r4, r7, lr}
 800a5aa:	b089      	sub	sp, #36	@ 0x24
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	60f8      	str	r0, [r7, #12]
 800a5b0:	60b9      	str	r1, [r7, #8]
 800a5b2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800a5b4:	2302      	movs	r3, #2
 800a5b6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	f240 80d9 	bls.w	800a772 <put_fat+0x1ca>
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	699b      	ldr	r3, [r3, #24]
 800a5c4:	68ba      	ldr	r2, [r7, #8]
 800a5c6:	429a      	cmp	r2, r3
 800a5c8:	f080 80d3 	bcs.w	800a772 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	2b03      	cmp	r3, #3
 800a5d2:	f000 8096 	beq.w	800a702 <put_fat+0x15a>
 800a5d6:	2b03      	cmp	r3, #3
 800a5d8:	f300 80cb 	bgt.w	800a772 <put_fat+0x1ca>
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d002      	beq.n	800a5e6 <put_fat+0x3e>
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	d06e      	beq.n	800a6c2 <put_fat+0x11a>
 800a5e4:	e0c5      	b.n	800a772 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	61bb      	str	r3, [r7, #24]
 800a5ea:	69bb      	ldr	r3, [r7, #24]
 800a5ec:	085b      	lsrs	r3, r3, #1
 800a5ee:	69ba      	ldr	r2, [r7, #24]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	0a5b      	lsrs	r3, r3, #9
 800a5fc:	4413      	add	r3, r2
 800a5fe:	4619      	mov	r1, r3
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f7ff fe6f 	bl	800a2e4 <move_window>
 800a606:	4603      	mov	r3, r0
 800a608:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a60a:	7ffb      	ldrb	r3, [r7, #31]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f040 80a9 	bne.w	800a764 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a618:	69bb      	ldr	r3, [r7, #24]
 800a61a:	1c59      	adds	r1, r3, #1
 800a61c:	61b9      	str	r1, [r7, #24]
 800a61e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a622:	4413      	add	r3, r2
 800a624:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	f003 0301 	and.w	r3, r3, #1
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d00d      	beq.n	800a64c <put_fat+0xa4>
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	b25b      	sxtb	r3, r3
 800a636:	f003 030f 	and.w	r3, r3, #15
 800a63a:	b25a      	sxtb	r2, r3
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	b2db      	uxtb	r3, r3
 800a640:	011b      	lsls	r3, r3, #4
 800a642:	b25b      	sxtb	r3, r3
 800a644:	4313      	orrs	r3, r2
 800a646:	b25b      	sxtb	r3, r3
 800a648:	b2db      	uxtb	r3, r3
 800a64a:	e001      	b.n	800a650 <put_fat+0xa8>
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	697a      	ldr	r2, [r7, #20]
 800a652:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	2201      	movs	r2, #1
 800a658:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a65e:	69bb      	ldr	r3, [r7, #24]
 800a660:	0a5b      	lsrs	r3, r3, #9
 800a662:	4413      	add	r3, r2
 800a664:	4619      	mov	r1, r3
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f7ff fe3c 	bl	800a2e4 <move_window>
 800a66c:	4603      	mov	r3, r0
 800a66e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a670:	7ffb      	ldrb	r3, [r7, #31]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d178      	bne.n	800a768 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a67c:	69bb      	ldr	r3, [r7, #24]
 800a67e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a682:	4413      	add	r3, r2
 800a684:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800a686:	68bb      	ldr	r3, [r7, #8]
 800a688:	f003 0301 	and.w	r3, r3, #1
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d003      	beq.n	800a698 <put_fat+0xf0>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	091b      	lsrs	r3, r3, #4
 800a694:	b2db      	uxtb	r3, r3
 800a696:	e00e      	b.n	800a6b6 <put_fat+0x10e>
 800a698:	697b      	ldr	r3, [r7, #20]
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	b25b      	sxtb	r3, r3
 800a69e:	f023 030f 	bic.w	r3, r3, #15
 800a6a2:	b25a      	sxtb	r2, r3
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	0a1b      	lsrs	r3, r3, #8
 800a6a8:	b25b      	sxtb	r3, r3
 800a6aa:	f003 030f 	and.w	r3, r3, #15
 800a6ae:	b25b      	sxtb	r3, r3
 800a6b0:	4313      	orrs	r3, r2
 800a6b2:	b25b      	sxtb	r3, r3
 800a6b4:	b2db      	uxtb	r3, r3
 800a6b6:	697a      	ldr	r2, [r7, #20]
 800a6b8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2201      	movs	r2, #1
 800a6be:	70da      	strb	r2, [r3, #3]
			break;
 800a6c0:	e057      	b.n	800a772 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	0a1b      	lsrs	r3, r3, #8
 800a6ca:	4413      	add	r3, r2
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	68f8      	ldr	r0, [r7, #12]
 800a6d0:	f7ff fe08 	bl	800a2e4 <move_window>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a6d8:	7ffb      	ldrb	r3, [r7, #31]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d146      	bne.n	800a76c <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	005b      	lsls	r3, r3, #1
 800a6e8:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800a6ec:	4413      	add	r3, r2
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	b292      	uxth	r2, r2
 800a6f2:	4611      	mov	r1, r2
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	f7ff fb4e 	bl	8009d96 <st_word>
			fs->wflag = 1;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	2201      	movs	r2, #1
 800a6fe:	70da      	strb	r2, [r3, #3]
			break;
 800a700:	e037      	b.n	800a772 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	09db      	lsrs	r3, r3, #7
 800a70a:	4413      	add	r3, r2
 800a70c:	4619      	mov	r1, r3
 800a70e:	68f8      	ldr	r0, [r7, #12]
 800a710:	f7ff fde8 	bl	800a2e4 <move_window>
 800a714:	4603      	mov	r3, r0
 800a716:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800a718:	7ffb      	ldrb	r3, [r7, #31]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d128      	bne.n	800a770 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	009b      	lsls	r3, r3, #2
 800a72e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a732:	4413      	add	r3, r2
 800a734:	4618      	mov	r0, r3
 800a736:	f7ff fb0b 	bl	8009d50 <ld_dword>
 800a73a:	4603      	mov	r3, r0
 800a73c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800a740:	4323      	orrs	r3, r4
 800a742:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800a752:	4413      	add	r3, r2
 800a754:	6879      	ldr	r1, [r7, #4]
 800a756:	4618      	mov	r0, r3
 800a758:	f7ff fb38 	bl	8009dcc <st_dword>
			fs->wflag = 1;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2201      	movs	r2, #1
 800a760:	70da      	strb	r2, [r3, #3]
			break;
 800a762:	e006      	b.n	800a772 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a764:	bf00      	nop
 800a766:	e004      	b.n	800a772 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a768:	bf00      	nop
 800a76a:	e002      	b.n	800a772 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a76c:	bf00      	nop
 800a76e:	e000      	b.n	800a772 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800a770:	bf00      	nop
		}
	}
	return res;
 800a772:	7ffb      	ldrb	r3, [r7, #31]
}
 800a774:	4618      	mov	r0, r3
 800a776:	3724      	adds	r7, #36	@ 0x24
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd90      	pop	{r4, r7, pc}

0800a77c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b088      	sub	sp, #32
 800a780:	af00      	add	r7, sp, #0
 800a782:	60f8      	str	r0, [r7, #12]
 800a784:	60b9      	str	r1, [r7, #8]
 800a786:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	2b01      	cmp	r3, #1
 800a796:	d904      	bls.n	800a7a2 <remove_chain+0x26>
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d301      	bcc.n	800a7a6 <remove_chain+0x2a>
 800a7a2:	2302      	movs	r3, #2
 800a7a4:	e04b      	b.n	800a83e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00c      	beq.n	800a7c6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800a7ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b0:	6879      	ldr	r1, [r7, #4]
 800a7b2:	69b8      	ldr	r0, [r7, #24]
 800a7b4:	f7ff fef8 	bl	800a5a8 <put_fat>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800a7bc:	7ffb      	ldrb	r3, [r7, #31]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d001      	beq.n	800a7c6 <remove_chain+0x4a>
 800a7c2:	7ffb      	ldrb	r3, [r7, #31]
 800a7c4:	e03b      	b.n	800a83e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800a7c6:	68b9      	ldr	r1, [r7, #8]
 800a7c8:	68f8      	ldr	r0, [r7, #12]
 800a7ca:	f7ff fe46 	bl	800a45a <get_fat>
 800a7ce:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800a7d0:	697b      	ldr	r3, [r7, #20]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d031      	beq.n	800a83a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800a7d6:	697b      	ldr	r3, [r7, #20]
 800a7d8:	2b01      	cmp	r3, #1
 800a7da:	d101      	bne.n	800a7e0 <remove_chain+0x64>
 800a7dc:	2302      	movs	r3, #2
 800a7de:	e02e      	b.n	800a83e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7e6:	d101      	bne.n	800a7ec <remove_chain+0x70>
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e028      	b.n	800a83e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	68b9      	ldr	r1, [r7, #8]
 800a7f0:	69b8      	ldr	r0, [r7, #24]
 800a7f2:	f7ff fed9 	bl	800a5a8 <put_fat>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800a7fa:	7ffb      	ldrb	r3, [r7, #31]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <remove_chain+0x88>
 800a800:	7ffb      	ldrb	r3, [r7, #31]
 800a802:	e01c      	b.n	800a83e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	695a      	ldr	r2, [r3, #20]
 800a808:	69bb      	ldr	r3, [r7, #24]
 800a80a:	699b      	ldr	r3, [r3, #24]
 800a80c:	3b02      	subs	r3, #2
 800a80e:	429a      	cmp	r2, r3
 800a810:	d20b      	bcs.n	800a82a <remove_chain+0xae>
			fs->free_clst++;
 800a812:	69bb      	ldr	r3, [r7, #24]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	1c5a      	adds	r2, r3, #1
 800a818:	69bb      	ldr	r3, [r7, #24]
 800a81a:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	791b      	ldrb	r3, [r3, #4]
 800a820:	f043 0301 	orr.w	r3, r3, #1
 800a824:	b2da      	uxtb	r2, r3
 800a826:	69bb      	ldr	r3, [r7, #24]
 800a828:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	699b      	ldr	r3, [r3, #24]
 800a832:	68ba      	ldr	r2, [r7, #8]
 800a834:	429a      	cmp	r2, r3
 800a836:	d3c6      	bcc.n	800a7c6 <remove_chain+0x4a>
 800a838:	e000      	b.n	800a83c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800a83a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800a83c:	2300      	movs	r3, #0
}
 800a83e:	4618      	mov	r0, r3
 800a840:	3720      	adds	r7, #32
 800a842:	46bd      	mov	sp, r7
 800a844:	bd80      	pop	{r7, pc}

0800a846 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800a846:	b580      	push	{r7, lr}
 800a848:	b088      	sub	sp, #32
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
 800a84e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d10d      	bne.n	800a878 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800a85c:	693b      	ldr	r3, [r7, #16]
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d004      	beq.n	800a872 <create_chain+0x2c>
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	69ba      	ldr	r2, [r7, #24]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d31b      	bcc.n	800a8aa <create_chain+0x64>
 800a872:	2301      	movs	r3, #1
 800a874:	61bb      	str	r3, [r7, #24]
 800a876:	e018      	b.n	800a8aa <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f7ff fded 	bl	800a45a <get_fat>
 800a880:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	2b01      	cmp	r3, #1
 800a886:	d801      	bhi.n	800a88c <create_chain+0x46>
 800a888:	2301      	movs	r3, #1
 800a88a:	e070      	b.n	800a96e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a892:	d101      	bne.n	800a898 <create_chain+0x52>
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	e06a      	b.n	800a96e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	699b      	ldr	r3, [r3, #24]
 800a89c:	68fa      	ldr	r2, [r7, #12]
 800a89e:	429a      	cmp	r2, r3
 800a8a0:	d201      	bcs.n	800a8a6 <create_chain+0x60>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	e063      	b.n	800a96e <create_chain+0x128>
		scl = clst;
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800a8aa:	69bb      	ldr	r3, [r7, #24]
 800a8ac:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800a8b4:	693b      	ldr	r3, [r7, #16]
 800a8b6:	699b      	ldr	r3, [r3, #24]
 800a8b8:	69fa      	ldr	r2, [r7, #28]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d307      	bcc.n	800a8ce <create_chain+0x88>
				ncl = 2;
 800a8be:	2302      	movs	r3, #2
 800a8c0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800a8c2:	69fa      	ldr	r2, [r7, #28]
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	429a      	cmp	r2, r3
 800a8c8:	d901      	bls.n	800a8ce <create_chain+0x88>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	e04f      	b.n	800a96e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800a8ce:	69f9      	ldr	r1, [r7, #28]
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f7ff fdc2 	bl	800a45a <get_fat>
 800a8d6:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d00e      	beq.n	800a8fc <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d003      	beq.n	800a8ec <create_chain+0xa6>
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ea:	d101      	bne.n	800a8f0 <create_chain+0xaa>
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	e03e      	b.n	800a96e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800a8f0:	69fa      	ldr	r2, [r7, #28]
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d1da      	bne.n	800a8ae <create_chain+0x68>
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	e038      	b.n	800a96e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800a8fc:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800a8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800a902:	69f9      	ldr	r1, [r7, #28]
 800a904:	6938      	ldr	r0, [r7, #16]
 800a906:	f7ff fe4f 	bl	800a5a8 <put_fat>
 800a90a:	4603      	mov	r3, r0
 800a90c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800a90e:	7dfb      	ldrb	r3, [r7, #23]
 800a910:	2b00      	cmp	r3, #0
 800a912:	d109      	bne.n	800a928 <create_chain+0xe2>
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	2b00      	cmp	r3, #0
 800a918:	d006      	beq.n	800a928 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800a91a:	69fa      	ldr	r2, [r7, #28]
 800a91c:	6839      	ldr	r1, [r7, #0]
 800a91e:	6938      	ldr	r0, [r7, #16]
 800a920:	f7ff fe42 	bl	800a5a8 <put_fat>
 800a924:	4603      	mov	r3, r0
 800a926:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800a928:	7dfb      	ldrb	r3, [r7, #23]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d116      	bne.n	800a95c <create_chain+0x116>
		fs->last_clst = ncl;
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	69fa      	ldr	r2, [r7, #28]
 800a932:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	695a      	ldr	r2, [r3, #20]
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	3b02      	subs	r3, #2
 800a93e:	429a      	cmp	r2, r3
 800a940:	d804      	bhi.n	800a94c <create_chain+0x106>
 800a942:	693b      	ldr	r3, [r7, #16]
 800a944:	695b      	ldr	r3, [r3, #20]
 800a946:	1e5a      	subs	r2, r3, #1
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	791b      	ldrb	r3, [r3, #4]
 800a950:	f043 0301 	orr.w	r3, r3, #1
 800a954:	b2da      	uxtb	r2, r3
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	711a      	strb	r2, [r3, #4]
 800a95a:	e007      	b.n	800a96c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800a95c:	7dfb      	ldrb	r3, [r7, #23]
 800a95e:	2b01      	cmp	r3, #1
 800a960:	d102      	bne.n	800a968 <create_chain+0x122>
 800a962:	f04f 33ff 	mov.w	r3, #4294967295
 800a966:	e000      	b.n	800a96a <create_chain+0x124>
 800a968:	2301      	movs	r3, #1
 800a96a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800a96c:	69fb      	ldr	r3, [r7, #28]
}
 800a96e:	4618      	mov	r0, r3
 800a970:	3720      	adds	r7, #32
 800a972:	46bd      	mov	sp, r7
 800a974:	bd80      	pop	{r7, pc}

0800a976 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800a976:	b480      	push	{r7}
 800a978:	b087      	sub	sp, #28
 800a97a:	af00      	add	r7, sp, #0
 800a97c:	6078      	str	r0, [r7, #4]
 800a97e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a98a:	3304      	adds	r3, #4
 800a98c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	0a5b      	lsrs	r3, r3, #9
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	8952      	ldrh	r2, [r2, #10]
 800a996:	fbb3 f3f2 	udiv	r3, r3, r2
 800a99a:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	1d1a      	adds	r2, r3, #4
 800a9a0:	613a      	str	r2, [r7, #16]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d101      	bne.n	800a9b0 <clmt_clust+0x3a>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	e010      	b.n	800a9d2 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800a9b0:	697a      	ldr	r2, [r7, #20]
 800a9b2:	68bb      	ldr	r3, [r7, #8]
 800a9b4:	429a      	cmp	r2, r3
 800a9b6:	d307      	bcc.n	800a9c8 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800a9b8:	697a      	ldr	r2, [r7, #20]
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	617b      	str	r3, [r7, #20]
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	3304      	adds	r3, #4
 800a9c4:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800a9c6:	e7e9      	b.n	800a99c <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800a9c8:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	681a      	ldr	r2, [r3, #0]
 800a9ce:	697b      	ldr	r3, [r7, #20]
 800a9d0:	4413      	add	r3, r2
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	371c      	adds	r7, #28
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9dc:	4770      	bx	lr

0800a9de <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800a9de:	b580      	push	{r7, lr}
 800a9e0:	b086      	sub	sp, #24
 800a9e2:	af00      	add	r7, sp, #0
 800a9e4:	6078      	str	r0, [r7, #4]
 800a9e6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a9f4:	d204      	bcs.n	800aa00 <dir_sdi+0x22>
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	f003 031f 	and.w	r3, r3, #31
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d001      	beq.n	800aa04 <dir_sdi+0x26>
		return FR_INT_ERR;
 800aa00:	2302      	movs	r3, #2
 800aa02:	e063      	b.n	800aacc <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	683a      	ldr	r2, [r7, #0]
 800aa08:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	689b      	ldr	r3, [r3, #8]
 800aa0e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d106      	bne.n	800aa24 <dir_sdi+0x46>
 800aa16:	693b      	ldr	r3, [r7, #16]
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	2b02      	cmp	r3, #2
 800aa1c:	d902      	bls.n	800aa24 <dir_sdi+0x46>
		clst = fs->dirbase;
 800aa1e:	693b      	ldr	r3, [r7, #16]
 800aa20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa22:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800aa24:	697b      	ldr	r3, [r7, #20]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d10c      	bne.n	800aa44 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	095b      	lsrs	r3, r3, #5
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	8912      	ldrh	r2, [r2, #8]
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d301      	bcc.n	800aa3a <dir_sdi+0x5c>
 800aa36:	2302      	movs	r3, #2
 800aa38:	e048      	b.n	800aacc <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800aa3a:	693b      	ldr	r3, [r7, #16]
 800aa3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	61da      	str	r2, [r3, #28]
 800aa42:	e029      	b.n	800aa98 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800aa44:	693b      	ldr	r3, [r7, #16]
 800aa46:	895b      	ldrh	r3, [r3, #10]
 800aa48:	025b      	lsls	r3, r3, #9
 800aa4a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800aa4c:	e019      	b.n	800aa82 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6979      	ldr	r1, [r7, #20]
 800aa52:	4618      	mov	r0, r3
 800aa54:	f7ff fd01 	bl	800a45a <get_fat>
 800aa58:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800aa5a:	697b      	ldr	r3, [r7, #20]
 800aa5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa60:	d101      	bne.n	800aa66 <dir_sdi+0x88>
 800aa62:	2301      	movs	r3, #1
 800aa64:	e032      	b.n	800aacc <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800aa66:	697b      	ldr	r3, [r7, #20]
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d904      	bls.n	800aa76 <dir_sdi+0x98>
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	697a      	ldr	r2, [r7, #20]
 800aa72:	429a      	cmp	r2, r3
 800aa74:	d301      	bcc.n	800aa7a <dir_sdi+0x9c>
 800aa76:	2302      	movs	r3, #2
 800aa78:	e028      	b.n	800aacc <dir_sdi+0xee>
			ofs -= csz;
 800aa7a:	683a      	ldr	r2, [r7, #0]
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	1ad3      	subs	r3, r2, r3
 800aa80:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800aa82:	683a      	ldr	r2, [r7, #0]
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d2e1      	bcs.n	800aa4e <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800aa8a:	6979      	ldr	r1, [r7, #20]
 800aa8c:	6938      	ldr	r0, [r7, #16]
 800aa8e:	f7ff fcc5 	bl	800a41c <clust2sect>
 800aa92:	4602      	mov	r2, r0
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	697a      	ldr	r2, [r7, #20]
 800aa9c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	69db      	ldr	r3, [r3, #28]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d101      	bne.n	800aaaa <dir_sdi+0xcc>
 800aaa6:	2302      	movs	r3, #2
 800aaa8:	e010      	b.n	800aacc <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	69da      	ldr	r2, [r3, #28]
 800aaae:	683b      	ldr	r3, [r7, #0]
 800aab0:	0a5b      	lsrs	r3, r3, #9
 800aab2:	441a      	add	r2, r3
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800aab8:	693b      	ldr	r3, [r7, #16]
 800aaba:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aac4:	441a      	add	r2, r3
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800aaca:	2300      	movs	r3, #0
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3718      	adds	r7, #24
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b086      	sub	sp, #24
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	695b      	ldr	r3, [r3, #20]
 800aae8:	3320      	adds	r3, #32
 800aaea:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	69db      	ldr	r3, [r3, #28]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d003      	beq.n	800aafc <dir_next+0x28>
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aafa:	d301      	bcc.n	800ab00 <dir_next+0x2c>
 800aafc:	2304      	movs	r3, #4
 800aafe:	e0aa      	b.n	800ac56 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	f040 8098 	bne.w	800ac3c <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	69db      	ldr	r3, [r3, #28]
 800ab10:	1c5a      	adds	r2, r3, #1
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	699b      	ldr	r3, [r3, #24]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d10b      	bne.n	800ab36 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800ab1e:	68bb      	ldr	r3, [r7, #8]
 800ab20:	095b      	lsrs	r3, r3, #5
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	8912      	ldrh	r2, [r2, #8]
 800ab26:	4293      	cmp	r3, r2
 800ab28:	f0c0 8088 	bcc.w	800ac3c <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	2200      	movs	r2, #0
 800ab30:	61da      	str	r2, [r3, #28]
 800ab32:	2304      	movs	r3, #4
 800ab34:	e08f      	b.n	800ac56 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	0a5b      	lsrs	r3, r3, #9
 800ab3a:	68fa      	ldr	r2, [r7, #12]
 800ab3c:	8952      	ldrh	r2, [r2, #10]
 800ab3e:	3a01      	subs	r2, #1
 800ab40:	4013      	ands	r3, r2
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d17a      	bne.n	800ac3c <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ab46:	687a      	ldr	r2, [r7, #4]
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	699b      	ldr	r3, [r3, #24]
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	4610      	mov	r0, r2
 800ab50:	f7ff fc83 	bl	800a45a <get_fat>
 800ab54:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d801      	bhi.n	800ab60 <dir_next+0x8c>
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	e07a      	b.n	800ac56 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab66:	d101      	bne.n	800ab6c <dir_next+0x98>
 800ab68:	2301      	movs	r3, #1
 800ab6a:	e074      	b.n	800ac56 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	699b      	ldr	r3, [r3, #24]
 800ab70:	697a      	ldr	r2, [r7, #20]
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d358      	bcc.n	800ac28 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d104      	bne.n	800ab86 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	2200      	movs	r2, #0
 800ab80:	61da      	str	r2, [r3, #28]
 800ab82:	2304      	movs	r3, #4
 800ab84:	e067      	b.n	800ac56 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	4610      	mov	r0, r2
 800ab90:	f7ff fe59 	bl	800a846 <create_chain>
 800ab94:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ab96:	697b      	ldr	r3, [r7, #20]
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d101      	bne.n	800aba0 <dir_next+0xcc>
 800ab9c:	2307      	movs	r3, #7
 800ab9e:	e05a      	b.n	800ac56 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d101      	bne.n	800abaa <dir_next+0xd6>
 800aba6:	2302      	movs	r3, #2
 800aba8:	e055      	b.n	800ac56 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb0:	d101      	bne.n	800abb6 <dir_next+0xe2>
 800abb2:	2301      	movs	r3, #1
 800abb4:	e04f      	b.n	800ac56 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800abb6:	68f8      	ldr	r0, [r7, #12]
 800abb8:	f7ff fb50 	bl	800a25c <sync_window>
 800abbc:	4603      	mov	r3, r0
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d001      	beq.n	800abc6 <dir_next+0xf2>
 800abc2:	2301      	movs	r3, #1
 800abc4:	e047      	b.n	800ac56 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	3334      	adds	r3, #52	@ 0x34
 800abca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800abce:	2100      	movs	r1, #0
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7ff f948 	bl	8009e66 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800abd6:	2300      	movs	r3, #0
 800abd8:	613b      	str	r3, [r7, #16]
 800abda:	6979      	ldr	r1, [r7, #20]
 800abdc:	68f8      	ldr	r0, [r7, #12]
 800abde:	f7ff fc1d 	bl	800a41c <clust2sect>
 800abe2:	4602      	mov	r2, r0
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	631a      	str	r2, [r3, #48]	@ 0x30
 800abe8:	e012      	b.n	800ac10 <dir_next+0x13c>
						fs->wflag = 1;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	2201      	movs	r2, #1
 800abee:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f7ff fb33 	bl	800a25c <sync_window>
 800abf6:	4603      	mov	r3, r0
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d001      	beq.n	800ac00 <dir_next+0x12c>
 800abfc:	2301      	movs	r3, #1
 800abfe:	e02a      	b.n	800ac56 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	3301      	adds	r3, #1
 800ac04:	613b      	str	r3, [r7, #16]
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ac0a:	1c5a      	adds	r2, r3, #1
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	631a      	str	r2, [r3, #48]	@ 0x30
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	895b      	ldrh	r3, [r3, #10]
 800ac14:	461a      	mov	r2, r3
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d3e6      	bcc.n	800abea <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	1ad2      	subs	r2, r2, r3
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	631a      	str	r2, [r3, #48]	@ 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	697a      	ldr	r2, [r7, #20]
 800ac2c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ac2e:	6979      	ldr	r1, [r7, #20]
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f7ff fbf3 	bl	800a41c <clust2sect>
 800ac36:	4602      	mov	r2, r0
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	68ba      	ldr	r2, [r7, #8]
 800ac40:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800ac48:	68bb      	ldr	r3, [r7, #8]
 800ac4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac4e:	441a      	add	r2, r3
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ac54:	2300      	movs	r3, #0
}
 800ac56:	4618      	mov	r0, r3
 800ac58:	3718      	adds	r7, #24
 800ac5a:	46bd      	mov	sp, r7
 800ac5c:	bd80      	pop	{r7, pc}

0800ac5e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ac5e:	b580      	push	{r7, lr}
 800ac60:	b086      	sub	sp, #24
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	6078      	str	r0, [r7, #4]
 800ac66:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ac6e:	2100      	movs	r1, #0
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f7ff feb4 	bl	800a9de <dir_sdi>
 800ac76:	4603      	mov	r3, r0
 800ac78:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ac7a:	7dfb      	ldrb	r3, [r7, #23]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d12b      	bne.n	800acd8 <dir_alloc+0x7a>
		n = 0;
 800ac80:	2300      	movs	r3, #0
 800ac82:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	69db      	ldr	r3, [r3, #28]
 800ac88:	4619      	mov	r1, r3
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f7ff fb2a 	bl	800a2e4 <move_window>
 800ac90:	4603      	mov	r3, r0
 800ac92:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ac94:	7dfb      	ldrb	r3, [r7, #23]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d11d      	bne.n	800acd6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	6a1b      	ldr	r3, [r3, #32]
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	2be5      	cmp	r3, #229	@ 0xe5
 800aca2:	d004      	beq.n	800acae <dir_alloc+0x50>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6a1b      	ldr	r3, [r3, #32]
 800aca8:	781b      	ldrb	r3, [r3, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d107      	bne.n	800acbe <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	3301      	adds	r3, #1
 800acb2:	613b      	str	r3, [r7, #16]
 800acb4:	693a      	ldr	r2, [r7, #16]
 800acb6:	683b      	ldr	r3, [r7, #0]
 800acb8:	429a      	cmp	r2, r3
 800acba:	d102      	bne.n	800acc2 <dir_alloc+0x64>
 800acbc:	e00c      	b.n	800acd8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800acbe:	2300      	movs	r3, #0
 800acc0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800acc2:	2101      	movs	r1, #1
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f7ff ff05 	bl	800aad4 <dir_next>
 800acca:	4603      	mov	r3, r0
 800accc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800acce:	7dfb      	ldrb	r3, [r7, #23]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d0d7      	beq.n	800ac84 <dir_alloc+0x26>
 800acd4:	e000      	b.n	800acd8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800acd6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
 800acda:	2b04      	cmp	r3, #4
 800acdc:	d101      	bne.n	800ace2 <dir_alloc+0x84>
 800acde:	2307      	movs	r3, #7
 800ace0:	75fb      	strb	r3, [r7, #23]
	return res;
 800ace2:	7dfb      	ldrb	r3, [r7, #23]
}
 800ace4:	4618      	mov	r0, r3
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b084      	sub	sp, #16
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
 800acf4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	331a      	adds	r3, #26
 800acfa:	4618      	mov	r0, r3
 800acfc:	f7ff f810 	bl	8009d20 <ld_word>
 800ad00:	4603      	mov	r3, r0
 800ad02:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	781b      	ldrb	r3, [r3, #0]
 800ad08:	2b03      	cmp	r3, #3
 800ad0a:	d109      	bne.n	800ad20 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	3314      	adds	r3, #20
 800ad10:	4618      	mov	r0, r3
 800ad12:	f7ff f805 	bl	8009d20 <ld_word>
 800ad16:	4603      	mov	r3, r0
 800ad18:	041b      	lsls	r3, r3, #16
 800ad1a:	68fa      	ldr	r2, [r7, #12]
 800ad1c:	4313      	orrs	r3, r2
 800ad1e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800ad20:	68fb      	ldr	r3, [r7, #12]
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}

0800ad2a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800ad2a:	b580      	push	{r7, lr}
 800ad2c:	b084      	sub	sp, #16
 800ad2e:	af00      	add	r7, sp, #0
 800ad30:	60f8      	str	r0, [r7, #12]
 800ad32:	60b9      	str	r1, [r7, #8]
 800ad34:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	331a      	adds	r3, #26
 800ad3a:	687a      	ldr	r2, [r7, #4]
 800ad3c:	b292      	uxth	r2, r2
 800ad3e:	4611      	mov	r1, r2
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7ff f828 	bl	8009d96 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	781b      	ldrb	r3, [r3, #0]
 800ad4a:	2b03      	cmp	r3, #3
 800ad4c:	d109      	bne.n	800ad62 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	f103 0214 	add.w	r2, r3, #20
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	0c1b      	lsrs	r3, r3, #16
 800ad58:	b29b      	uxth	r3, r3
 800ad5a:	4619      	mov	r1, r3
 800ad5c:	4610      	mov	r0, r2
 800ad5e:	f7ff f81a 	bl	8009d96 <st_word>
	}
}
 800ad62:	bf00      	nop
 800ad64:	3710      	adds	r7, #16
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b086      	sub	sp, #24
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ad78:	2100      	movs	r1, #0
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f7ff fe2f 	bl	800a9de <dir_sdi>
 800ad80:	4603      	mov	r3, r0
 800ad82:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ad84:	7dfb      	ldrb	r3, [r7, #23]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d001      	beq.n	800ad8e <dir_find+0x24>
 800ad8a:	7dfb      	ldrb	r3, [r7, #23]
 800ad8c:	e03e      	b.n	800ae0c <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	69db      	ldr	r3, [r3, #28]
 800ad92:	4619      	mov	r1, r3
 800ad94:	6938      	ldr	r0, [r7, #16]
 800ad96:	f7ff faa5 	bl	800a2e4 <move_window>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ad9e:	7dfb      	ldrb	r3, [r7, #23]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d12f      	bne.n	800ae04 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a1b      	ldr	r3, [r3, #32]
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800adac:	7bfb      	ldrb	r3, [r7, #15]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d102      	bne.n	800adb8 <dir_find+0x4e>
 800adb2:	2304      	movs	r3, #4
 800adb4:	75fb      	strb	r3, [r7, #23]
 800adb6:	e028      	b.n	800ae0a <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	6a1b      	ldr	r3, [r3, #32]
 800adbc:	330b      	adds	r3, #11
 800adbe:	781b      	ldrb	r3, [r3, #0]
 800adc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800adc4:	b2da      	uxtb	r2, r3
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a1b      	ldr	r3, [r3, #32]
 800adce:	330b      	adds	r3, #11
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	f003 0308 	and.w	r3, r3, #8
 800add6:	2b00      	cmp	r3, #0
 800add8:	d10a      	bne.n	800adf0 <dir_find+0x86>
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	6a18      	ldr	r0, [r3, #32]
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	3324      	adds	r3, #36	@ 0x24
 800ade2:	220b      	movs	r2, #11
 800ade4:	4619      	mov	r1, r3
 800ade6:	f7ff f859 	bl	8009e9c <mem_cmp>
 800adea:	4603      	mov	r3, r0
 800adec:	2b00      	cmp	r3, #0
 800adee:	d00b      	beq.n	800ae08 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800adf0:	2100      	movs	r1, #0
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f7ff fe6e 	bl	800aad4 <dir_next>
 800adf8:	4603      	mov	r3, r0
 800adfa:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800adfc:	7dfb      	ldrb	r3, [r7, #23]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d0c5      	beq.n	800ad8e <dir_find+0x24>
 800ae02:	e002      	b.n	800ae0a <dir_find+0xa0>
		if (res != FR_OK) break;
 800ae04:	bf00      	nop
 800ae06:	e000      	b.n	800ae0a <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ae08:	bf00      	nop

	return res;
 800ae0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3718      	adds	r7, #24
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b084      	sub	sp, #16
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ae22:	2101      	movs	r1, #1
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f7ff ff1a 	bl	800ac5e <dir_alloc>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d11c      	bne.n	800ae6e <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	69db      	ldr	r3, [r3, #28]
 800ae38:	4619      	mov	r1, r3
 800ae3a:	68b8      	ldr	r0, [r7, #8]
 800ae3c:	f7ff fa52 	bl	800a2e4 <move_window>
 800ae40:	4603      	mov	r3, r0
 800ae42:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ae44:	7bfb      	ldrb	r3, [r7, #15]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d111      	bne.n	800ae6e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a1b      	ldr	r3, [r3, #32]
 800ae4e:	2220      	movs	r2, #32
 800ae50:	2100      	movs	r1, #0
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7ff f807 	bl	8009e66 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a18      	ldr	r0, [r3, #32]
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	3324      	adds	r3, #36	@ 0x24
 800ae60:	220b      	movs	r2, #11
 800ae62:	4619      	mov	r1, r3
 800ae64:	f7fe ffde 	bl	8009e24 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ae68:	68bb      	ldr	r3, [r7, #8]
 800ae6a:	2201      	movs	r2, #1
 800ae6c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ae6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae70:	4618      	mov	r0, r3
 800ae72:	3710      	adds	r7, #16
 800ae74:	46bd      	mov	sp, r7
 800ae76:	bd80      	pop	{r7, pc}

0800ae78 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	b088      	sub	sp, #32
 800ae7c:	af00      	add	r7, sp, #0
 800ae7e:	6078      	str	r0, [r7, #4]
 800ae80:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	60fb      	str	r3, [r7, #12]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	3324      	adds	r3, #36	@ 0x24
 800ae8c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ae8e:	220b      	movs	r2, #11
 800ae90:	2120      	movs	r1, #32
 800ae92:	68b8      	ldr	r0, [r7, #8]
 800ae94:	f7fe ffe7 	bl	8009e66 <mem_set>
	si = i = 0; ni = 8;
 800ae98:	2300      	movs	r3, #0
 800ae9a:	613b      	str	r3, [r7, #16]
 800ae9c:	693b      	ldr	r3, [r7, #16]
 800ae9e:	61fb      	str	r3, [r7, #28]
 800aea0:	2308      	movs	r3, #8
 800aea2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	1c5a      	adds	r2, r3, #1
 800aea8:	61fa      	str	r2, [r7, #28]
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	4413      	add	r3, r2
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800aeb2:	7efb      	ldrb	r3, [r7, #27]
 800aeb4:	2b20      	cmp	r3, #32
 800aeb6:	d94e      	bls.n	800af56 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800aeb8:	7efb      	ldrb	r3, [r7, #27]
 800aeba:	2b2f      	cmp	r3, #47	@ 0x2f
 800aebc:	d006      	beq.n	800aecc <create_name+0x54>
 800aebe:	7efb      	ldrb	r3, [r7, #27]
 800aec0:	2b5c      	cmp	r3, #92	@ 0x5c
 800aec2:	d110      	bne.n	800aee6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800aec4:	e002      	b.n	800aecc <create_name+0x54>
 800aec6:	69fb      	ldr	r3, [r7, #28]
 800aec8:	3301      	adds	r3, #1
 800aeca:	61fb      	str	r3, [r7, #28]
 800aecc:	68fa      	ldr	r2, [r7, #12]
 800aece:	69fb      	ldr	r3, [r7, #28]
 800aed0:	4413      	add	r3, r2
 800aed2:	781b      	ldrb	r3, [r3, #0]
 800aed4:	2b2f      	cmp	r3, #47	@ 0x2f
 800aed6:	d0f6      	beq.n	800aec6 <create_name+0x4e>
 800aed8:	68fa      	ldr	r2, [r7, #12]
 800aeda:	69fb      	ldr	r3, [r7, #28]
 800aedc:	4413      	add	r3, r2
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	2b5c      	cmp	r3, #92	@ 0x5c
 800aee2:	d0f0      	beq.n	800aec6 <create_name+0x4e>
			break;
 800aee4:	e038      	b.n	800af58 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800aee6:	7efb      	ldrb	r3, [r7, #27]
 800aee8:	2b2e      	cmp	r3, #46	@ 0x2e
 800aeea:	d003      	beq.n	800aef4 <create_name+0x7c>
 800aeec:	693a      	ldr	r2, [r7, #16]
 800aeee:	697b      	ldr	r3, [r7, #20]
 800aef0:	429a      	cmp	r2, r3
 800aef2:	d30c      	bcc.n	800af0e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	2b0b      	cmp	r3, #11
 800aef8:	d002      	beq.n	800af00 <create_name+0x88>
 800aefa:	7efb      	ldrb	r3, [r7, #27]
 800aefc:	2b2e      	cmp	r3, #46	@ 0x2e
 800aefe:	d001      	beq.n	800af04 <create_name+0x8c>
 800af00:	2306      	movs	r3, #6
 800af02:	e044      	b.n	800af8e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800af04:	2308      	movs	r3, #8
 800af06:	613b      	str	r3, [r7, #16]
 800af08:	230b      	movs	r3, #11
 800af0a:	617b      	str	r3, [r7, #20]
			continue;
 800af0c:	e022      	b.n	800af54 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800af0e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800af12:	2b00      	cmp	r3, #0
 800af14:	da04      	bge.n	800af20 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800af16:	7efb      	ldrb	r3, [r7, #27]
 800af18:	3b80      	subs	r3, #128	@ 0x80
 800af1a:	4a1f      	ldr	r2, [pc, #124]	@ (800af98 <create_name+0x120>)
 800af1c:	5cd3      	ldrb	r3, [r2, r3]
 800af1e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800af20:	7efb      	ldrb	r3, [r7, #27]
 800af22:	4619      	mov	r1, r3
 800af24:	481d      	ldr	r0, [pc, #116]	@ (800af9c <create_name+0x124>)
 800af26:	f7fe ffe0 	bl	8009eea <chk_chr>
 800af2a:	4603      	mov	r3, r0
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d001      	beq.n	800af34 <create_name+0xbc>
 800af30:	2306      	movs	r3, #6
 800af32:	e02c      	b.n	800af8e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800af34:	7efb      	ldrb	r3, [r7, #27]
 800af36:	2b60      	cmp	r3, #96	@ 0x60
 800af38:	d905      	bls.n	800af46 <create_name+0xce>
 800af3a:	7efb      	ldrb	r3, [r7, #27]
 800af3c:	2b7a      	cmp	r3, #122	@ 0x7a
 800af3e:	d802      	bhi.n	800af46 <create_name+0xce>
 800af40:	7efb      	ldrb	r3, [r7, #27]
 800af42:	3b20      	subs	r3, #32
 800af44:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	1c5a      	adds	r2, r3, #1
 800af4a:	613a      	str	r2, [r7, #16]
 800af4c:	68ba      	ldr	r2, [r7, #8]
 800af4e:	4413      	add	r3, r2
 800af50:	7efa      	ldrb	r2, [r7, #27]
 800af52:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800af54:	e7a6      	b.n	800aea4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800af56:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800af58:	68fa      	ldr	r2, [r7, #12]
 800af5a:	69fb      	ldr	r3, [r7, #28]
 800af5c:	441a      	add	r2, r3
 800af5e:	683b      	ldr	r3, [r7, #0]
 800af60:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d101      	bne.n	800af6c <create_name+0xf4>
 800af68:	2306      	movs	r3, #6
 800af6a:	e010      	b.n	800af8e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	2be5      	cmp	r3, #229	@ 0xe5
 800af72:	d102      	bne.n	800af7a <create_name+0x102>
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	2205      	movs	r2, #5
 800af78:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800af7a:	7efb      	ldrb	r3, [r7, #27]
 800af7c:	2b20      	cmp	r3, #32
 800af7e:	d801      	bhi.n	800af84 <create_name+0x10c>
 800af80:	2204      	movs	r2, #4
 800af82:	e000      	b.n	800af86 <create_name+0x10e>
 800af84:	2200      	movs	r2, #0
 800af86:	68bb      	ldr	r3, [r7, #8]
 800af88:	330b      	adds	r3, #11
 800af8a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800af8c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800af8e:	4618      	mov	r0, r3
 800af90:	3720      	adds	r7, #32
 800af92:	46bd      	mov	sp, r7
 800af94:	bd80      	pop	{r7, pc}
 800af96:	bf00      	nop
 800af98:	08025130 	.word	0x08025130
 800af9c:	0802201c 	.word	0x0802201c

0800afa0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b086      	sub	sp, #24
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800afae:	693b      	ldr	r3, [r7, #16]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800afb4:	e002      	b.n	800afbc <follow_path+0x1c>
 800afb6:	683b      	ldr	r3, [r7, #0]
 800afb8:	3301      	adds	r3, #1
 800afba:	603b      	str	r3, [r7, #0]
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	781b      	ldrb	r3, [r3, #0]
 800afc0:	2b2f      	cmp	r3, #47	@ 0x2f
 800afc2:	d0f8      	beq.n	800afb6 <follow_path+0x16>
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	2b5c      	cmp	r3, #92	@ 0x5c
 800afca:	d0f4      	beq.n	800afb6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800afcc:	693b      	ldr	r3, [r7, #16]
 800afce:	2200      	movs	r2, #0
 800afd0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	2b1f      	cmp	r3, #31
 800afd8:	d80a      	bhi.n	800aff0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	2280      	movs	r2, #128	@ 0x80
 800afde:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800afe2:	2100      	movs	r1, #0
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f7ff fcfa 	bl	800a9de <dir_sdi>
 800afea:	4603      	mov	r3, r0
 800afec:	75fb      	strb	r3, [r7, #23]
 800afee:	e043      	b.n	800b078 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800aff0:	463b      	mov	r3, r7
 800aff2:	4619      	mov	r1, r3
 800aff4:	6878      	ldr	r0, [r7, #4]
 800aff6:	f7ff ff3f 	bl	800ae78 <create_name>
 800affa:	4603      	mov	r3, r0
 800affc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800affe:	7dfb      	ldrb	r3, [r7, #23]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d134      	bne.n	800b06e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b004:	6878      	ldr	r0, [r7, #4]
 800b006:	f7ff feb0 	bl	800ad6a <dir_find>
 800b00a:	4603      	mov	r3, r0
 800b00c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b014:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b016:	7dfb      	ldrb	r3, [r7, #23]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d00a      	beq.n	800b032 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b01c:	7dfb      	ldrb	r3, [r7, #23]
 800b01e:	2b04      	cmp	r3, #4
 800b020:	d127      	bne.n	800b072 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b022:	7afb      	ldrb	r3, [r7, #11]
 800b024:	f003 0304 	and.w	r3, r3, #4
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d122      	bne.n	800b072 <follow_path+0xd2>
 800b02c:	2305      	movs	r3, #5
 800b02e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b030:	e01f      	b.n	800b072 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b032:	7afb      	ldrb	r3, [r7, #11]
 800b034:	f003 0304 	and.w	r3, r3, #4
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d11c      	bne.n	800b076 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b03c:	693b      	ldr	r3, [r7, #16]
 800b03e:	799b      	ldrb	r3, [r3, #6]
 800b040:	f003 0310 	and.w	r3, r3, #16
 800b044:	2b00      	cmp	r3, #0
 800b046:	d102      	bne.n	800b04e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b048:	2305      	movs	r3, #5
 800b04a:	75fb      	strb	r3, [r7, #23]
 800b04c:	e014      	b.n	800b078 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	695b      	ldr	r3, [r3, #20]
 800b058:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b05c:	4413      	add	r3, r2
 800b05e:	4619      	mov	r1, r3
 800b060:	68f8      	ldr	r0, [r7, #12]
 800b062:	f7ff fe43 	bl	800acec <ld_clust>
 800b066:	4602      	mov	r2, r0
 800b068:	693b      	ldr	r3, [r7, #16]
 800b06a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b06c:	e7c0      	b.n	800aff0 <follow_path+0x50>
			if (res != FR_OK) break;
 800b06e:	bf00      	nop
 800b070:	e002      	b.n	800b078 <follow_path+0xd8>
				break;
 800b072:	bf00      	nop
 800b074:	e000      	b.n	800b078 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b076:	bf00      	nop
			}
		}
	}

	return res;
 800b078:	7dfb      	ldrb	r3, [r7, #23]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3718      	adds	r7, #24
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b082:	b480      	push	{r7}
 800b084:	b087      	sub	sp, #28
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b08a:	f04f 33ff 	mov.w	r3, #4294967295
 800b08e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d031      	beq.n	800b0fc <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	617b      	str	r3, [r7, #20]
 800b09e:	e002      	b.n	800b0a6 <get_ldnumber+0x24>
 800b0a0:	697b      	ldr	r3, [r7, #20]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	617b      	str	r3, [r7, #20]
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	2b20      	cmp	r3, #32
 800b0ac:	d903      	bls.n	800b0b6 <get_ldnumber+0x34>
 800b0ae:	697b      	ldr	r3, [r7, #20]
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	2b3a      	cmp	r3, #58	@ 0x3a
 800b0b4:	d1f4      	bne.n	800b0a0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b0b6:	697b      	ldr	r3, [r7, #20]
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	2b3a      	cmp	r3, #58	@ 0x3a
 800b0bc:	d11c      	bne.n	800b0f8 <get_ldnumber+0x76>
			tp = *path;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	1c5a      	adds	r2, r3, #1
 800b0c8:	60fa      	str	r2, [r7, #12]
 800b0ca:	781b      	ldrb	r3, [r3, #0]
 800b0cc:	3b30      	subs	r3, #48	@ 0x30
 800b0ce:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	2b09      	cmp	r3, #9
 800b0d4:	d80e      	bhi.n	800b0f4 <get_ldnumber+0x72>
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	697b      	ldr	r3, [r7, #20]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d10a      	bne.n	800b0f4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d107      	bne.n	800b0f4 <get_ldnumber+0x72>
					vol = (int)i;
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b0e8:	697b      	ldr	r3, [r7, #20]
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	617b      	str	r3, [r7, #20]
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	697a      	ldr	r2, [r7, #20]
 800b0f2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	e002      	b.n	800b0fe <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b0fc:	693b      	ldr	r3, [r7, #16]
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	371c      	adds	r7, #28
 800b102:	46bd      	mov	sp, r7
 800b104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b108:	4770      	bx	lr
	...

0800b10c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
 800b114:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	2200      	movs	r2, #0
 800b11a:	70da      	strb	r2, [r3, #3]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	f04f 32ff 	mov.w	r2, #4294967295
 800b122:	631a      	str	r2, [r3, #48]	@ 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b124:	6839      	ldr	r1, [r7, #0]
 800b126:	6878      	ldr	r0, [r7, #4]
 800b128:	f7ff f8dc 	bl	800a2e4 <move_window>
 800b12c:	4603      	mov	r3, r0
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d001      	beq.n	800b136 <check_fs+0x2a>
 800b132:	2304      	movs	r3, #4
 800b134:	e038      	b.n	800b1a8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	3334      	adds	r3, #52	@ 0x34
 800b13a:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b13e:	4618      	mov	r0, r3
 800b140:	f7fe fdee 	bl	8009d20 <ld_word>
 800b144:	4603      	mov	r3, r0
 800b146:	461a      	mov	r2, r3
 800b148:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b14c:	429a      	cmp	r2, r3
 800b14e:	d001      	beq.n	800b154 <check_fs+0x48>
 800b150:	2303      	movs	r3, #3
 800b152:	e029      	b.n	800b1a8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b15a:	2be9      	cmp	r3, #233	@ 0xe9
 800b15c:	d009      	beq.n	800b172 <check_fs+0x66>
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800b164:	2beb      	cmp	r3, #235	@ 0xeb
 800b166:	d11e      	bne.n	800b1a6 <check_fs+0x9a>
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800b16e:	2b90      	cmp	r3, #144	@ 0x90
 800b170:	d119      	bne.n	800b1a6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	3334      	adds	r3, #52	@ 0x34
 800b176:	3336      	adds	r3, #54	@ 0x36
 800b178:	4618      	mov	r0, r3
 800b17a:	f7fe fde9 	bl	8009d50 <ld_dword>
 800b17e:	4603      	mov	r3, r0
 800b180:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b184:	4a0a      	ldr	r2, [pc, #40]	@ (800b1b0 <check_fs+0xa4>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d101      	bne.n	800b18e <check_fs+0x82>
 800b18a:	2300      	movs	r3, #0
 800b18c:	e00c      	b.n	800b1a8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	3334      	adds	r3, #52	@ 0x34
 800b192:	3352      	adds	r3, #82	@ 0x52
 800b194:	4618      	mov	r0, r3
 800b196:	f7fe fddb 	bl	8009d50 <ld_dword>
 800b19a:	4603      	mov	r3, r0
 800b19c:	4a05      	ldr	r2, [pc, #20]	@ (800b1b4 <check_fs+0xa8>)
 800b19e:	4293      	cmp	r3, r2
 800b1a0:	d101      	bne.n	800b1a6 <check_fs+0x9a>
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	e000      	b.n	800b1a8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b1a6:	2302      	movs	r3, #2
}
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	46bd      	mov	sp, r7
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	00544146 	.word	0x00544146
 800b1b4:	33544146 	.word	0x33544146

0800b1b8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b096      	sub	sp, #88	@ 0x58
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b1cc:	68f8      	ldr	r0, [r7, #12]
 800b1ce:	f7ff ff58 	bl	800b082 <get_ldnumber>
 800b1d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b1d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	da01      	bge.n	800b1de <find_volume+0x26>
 800b1da:	230b      	movs	r3, #11
 800b1dc:	e235      	b.n	800b64a <find_volume+0x492>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b1de:	4aa5      	ldr	r2, [pc, #660]	@ (800b474 <find_volume+0x2bc>)
 800b1e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b1e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b1e6:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b1e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d101      	bne.n	800b1f2 <find_volume+0x3a>
 800b1ee:	230c      	movs	r3, #12
 800b1f0:	e22b      	b.n	800b64a <find_volume+0x492>

	ENTER_FF(fs);						/* Lock the volume */
 800b1f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b1f4:	f7fe fe94 	bl	8009f20 <lock_fs>
 800b1f8:	4603      	mov	r3, r0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d101      	bne.n	800b202 <find_volume+0x4a>
 800b1fe:	230f      	movs	r3, #15
 800b200:	e223      	b.n	800b64a <find_volume+0x492>
	*rfs = fs;							/* Return pointer to the file system object */
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b206:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b208:	79fb      	ldrb	r3, [r7, #7]
 800b20a:	f023 0301 	bic.w	r3, r3, #1
 800b20e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d01a      	beq.n	800b24e <find_volume+0x96>
		stat = disk_status(fs->drv);
 800b218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b21a:	785b      	ldrb	r3, [r3, #1]
 800b21c:	4618      	mov	r0, r3
 800b21e:	f7fe fcdf 	bl	8009be0 <disk_status>
 800b222:	4603      	mov	r3, r0
 800b224:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b228:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b22c:	f003 0301 	and.w	r3, r3, #1
 800b230:	2b00      	cmp	r3, #0
 800b232:	d10c      	bne.n	800b24e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b234:	79fb      	ldrb	r3, [r7, #7]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d007      	beq.n	800b24a <find_volume+0x92>
 800b23a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b23e:	f003 0304 	and.w	r3, r3, #4
 800b242:	2b00      	cmp	r3, #0
 800b244:	d001      	beq.n	800b24a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800b246:	230a      	movs	r3, #10
 800b248:	e1ff      	b.n	800b64a <find_volume+0x492>
			}
			return FR_OK;				/* The file system object is valid */
 800b24a:	2300      	movs	r3, #0
 800b24c:	e1fd      	b.n	800b64a <find_volume+0x492>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b24e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b250:	2200      	movs	r2, #0
 800b252:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b254:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b256:	b2da      	uxtb	r2, r3
 800b258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b25c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b25e:	785b      	ldrb	r3, [r3, #1]
 800b260:	4618      	mov	r0, r3
 800b262:	f7fe fcd7 	bl	8009c14 <disk_initialize>
 800b266:	4603      	mov	r3, r0
 800b268:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b26c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b270:	f003 0301 	and.w	r3, r3, #1
 800b274:	2b00      	cmp	r3, #0
 800b276:	d001      	beq.n	800b27c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b278:	2303      	movs	r3, #3
 800b27a:	e1e6      	b.n	800b64a <find_volume+0x492>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b27c:	79fb      	ldrb	r3, [r7, #7]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d007      	beq.n	800b292 <find_volume+0xda>
 800b282:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b286:	f003 0304 	and.w	r3, r3, #4
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d001      	beq.n	800b292 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800b28e:	230a      	movs	r3, #10
 800b290:	e1db      	b.n	800b64a <find_volume+0x492>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b292:	2300      	movs	r3, #0
 800b294:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b296:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b298:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b29a:	f7ff ff37 	bl	800b10c <check_fs>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b2a4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b2a8:	2b02      	cmp	r3, #2
 800b2aa:	d149      	bne.n	800b340 <find_volume+0x188>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2b0:	e01e      	b.n	800b2f0 <find_volume+0x138>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b2b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2b4:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800b2b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2ba:	011b      	lsls	r3, r3, #4
 800b2bc:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b2c0:	4413      	add	r3, r2
 800b2c2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b2c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	781b      	ldrb	r3, [r3, #0]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d006      	beq.n	800b2dc <find_volume+0x124>
 800b2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2d0:	3308      	adds	r3, #8
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f7fe fd3c 	bl	8009d50 <ld_dword>
 800b2d8:	4602      	mov	r2, r0
 800b2da:	e000      	b.n	800b2de <find_volume+0x126>
 800b2dc:	2200      	movs	r2, #0
 800b2de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2e0:	009b      	lsls	r3, r3, #2
 800b2e2:	3358      	adds	r3, #88	@ 0x58
 800b2e4:	443b      	add	r3, r7
 800b2e6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b2ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2ec:	3301      	adds	r3, #1
 800b2ee:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2f2:	2b03      	cmp	r3, #3
 800b2f4:	d9dd      	bls.n	800b2b2 <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b2fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d002      	beq.n	800b306 <find_volume+0x14e>
 800b300:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b302:	3b01      	subs	r3, #1
 800b304:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b306:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b308:	009b      	lsls	r3, r3, #2
 800b30a:	3358      	adds	r3, #88	@ 0x58
 800b30c:	443b      	add	r3, r7
 800b30e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b312:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b314:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b316:	2b00      	cmp	r3, #0
 800b318:	d005      	beq.n	800b326 <find_volume+0x16e>
 800b31a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b31c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b31e:	f7ff fef5 	bl	800b10c <check_fs>
 800b322:	4603      	mov	r3, r0
 800b324:	e000      	b.n	800b328 <find_volume+0x170>
 800b326:	2303      	movs	r3, #3
 800b328:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b32c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b330:	2b01      	cmp	r3, #1
 800b332:	d905      	bls.n	800b340 <find_volume+0x188>
 800b334:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b336:	3301      	adds	r3, #1
 800b338:	643b      	str	r3, [r7, #64]	@ 0x40
 800b33a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b33c:	2b03      	cmp	r3, #3
 800b33e:	d9e2      	bls.n	800b306 <find_volume+0x14e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b340:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b344:	2b04      	cmp	r3, #4
 800b346:	d101      	bne.n	800b34c <find_volume+0x194>
 800b348:	2301      	movs	r3, #1
 800b34a:	e17e      	b.n	800b64a <find_volume+0x492>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b34c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b350:	2b01      	cmp	r3, #1
 800b352:	d901      	bls.n	800b358 <find_volume+0x1a0>
 800b354:	230d      	movs	r3, #13
 800b356:	e178      	b.n	800b64a <find_volume+0x492>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b358:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b35a:	3334      	adds	r3, #52	@ 0x34
 800b35c:	330b      	adds	r3, #11
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fe fcde 	bl	8009d20 <ld_word>
 800b364:	4603      	mov	r3, r0
 800b366:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b36a:	d001      	beq.n	800b370 <find_volume+0x1b8>
 800b36c:	230d      	movs	r3, #13
 800b36e:	e16c      	b.n	800b64a <find_volume+0x492>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b372:	3334      	adds	r3, #52	@ 0x34
 800b374:	3316      	adds	r3, #22
 800b376:	4618      	mov	r0, r3
 800b378:	f7fe fcd2 	bl	8009d20 <ld_word>
 800b37c:	4603      	mov	r3, r0
 800b37e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b380:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b382:	2b00      	cmp	r3, #0
 800b384:	d106      	bne.n	800b394 <find_volume+0x1dc>
 800b386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b388:	3334      	adds	r3, #52	@ 0x34
 800b38a:	3324      	adds	r3, #36	@ 0x24
 800b38c:	4618      	mov	r0, r3
 800b38e:	f7fe fcdf 	bl	8009d50 <ld_dword>
 800b392:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b394:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b396:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b398:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b39a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b39c:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800b3a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b3a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3a6:	789b      	ldrb	r3, [r3, #2]
 800b3a8:	2b01      	cmp	r3, #1
 800b3aa:	d005      	beq.n	800b3b8 <find_volume+0x200>
 800b3ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ae:	789b      	ldrb	r3, [r3, #2]
 800b3b0:	2b02      	cmp	r3, #2
 800b3b2:	d001      	beq.n	800b3b8 <find_volume+0x200>
 800b3b4:	230d      	movs	r3, #13
 800b3b6:	e148      	b.n	800b64a <find_volume+0x492>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b3b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3ba:	789b      	ldrb	r3, [r3, #2]
 800b3bc:	461a      	mov	r2, r3
 800b3be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b3c0:	fb02 f303 	mul.w	r3, r2, r3
 800b3c4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b3c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3cc:	461a      	mov	r2, r3
 800b3ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b3d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3d4:	895b      	ldrh	r3, [r3, #10]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d008      	beq.n	800b3ec <find_volume+0x234>
 800b3da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3dc:	895b      	ldrh	r3, [r3, #10]
 800b3de:	461a      	mov	r2, r3
 800b3e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3e2:	895b      	ldrh	r3, [r3, #10]
 800b3e4:	3b01      	subs	r3, #1
 800b3e6:	4013      	ands	r3, r2
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d001      	beq.n	800b3f0 <find_volume+0x238>
 800b3ec:	230d      	movs	r3, #13
 800b3ee:	e12c      	b.n	800b64a <find_volume+0x492>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b3f2:	3334      	adds	r3, #52	@ 0x34
 800b3f4:	3311      	adds	r3, #17
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	f7fe fc92 	bl	8009d20 <ld_word>
 800b3fc:	4603      	mov	r3, r0
 800b3fe:	461a      	mov	r2, r3
 800b400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b402:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b406:	891b      	ldrh	r3, [r3, #8]
 800b408:	f003 030f 	and.w	r3, r3, #15
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d001      	beq.n	800b416 <find_volume+0x25e>
 800b412:	230d      	movs	r3, #13
 800b414:	e119      	b.n	800b64a <find_volume+0x492>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800b416:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b418:	3334      	adds	r3, #52	@ 0x34
 800b41a:	3313      	adds	r3, #19
 800b41c:	4618      	mov	r0, r3
 800b41e:	f7fe fc7f 	bl	8009d20 <ld_word>
 800b422:	4603      	mov	r3, r0
 800b424:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800b426:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d106      	bne.n	800b43a <find_volume+0x282>
 800b42c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b42e:	3334      	adds	r3, #52	@ 0x34
 800b430:	3320      	adds	r3, #32
 800b432:	4618      	mov	r0, r3
 800b434:	f7fe fc8c 	bl	8009d50 <ld_dword>
 800b438:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800b43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b43c:	3334      	adds	r3, #52	@ 0x34
 800b43e:	330e      	adds	r3, #14
 800b440:	4618      	mov	r0, r3
 800b442:	f7fe fc6d 	bl	8009d20 <ld_word>
 800b446:	4603      	mov	r3, r0
 800b448:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800b44a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d101      	bne.n	800b454 <find_volume+0x29c>
 800b450:	230d      	movs	r3, #13
 800b452:	e0fa      	b.n	800b64a <find_volume+0x492>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800b454:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b456:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b458:	4413      	add	r3, r2
 800b45a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b45c:	8912      	ldrh	r2, [r2, #8]
 800b45e:	0912      	lsrs	r2, r2, #4
 800b460:	b292      	uxth	r2, r2
 800b462:	4413      	add	r3, r2
 800b464:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800b466:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d204      	bcs.n	800b478 <find_volume+0x2c0>
 800b46e:	230d      	movs	r3, #13
 800b470:	e0eb      	b.n	800b64a <find_volume+0x492>
 800b472:	bf00      	nop
 800b474:	20011410 	.word	0x20011410
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800b478:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b47c:	1ad3      	subs	r3, r2, r3
 800b47e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b480:	8952      	ldrh	r2, [r2, #10]
 800b482:	fbb3 f3f2 	udiv	r3, r3, r2
 800b486:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800b488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d101      	bne.n	800b492 <find_volume+0x2da>
 800b48e:	230d      	movs	r3, #13
 800b490:	e0db      	b.n	800b64a <find_volume+0x492>
		fmt = FS_FAT32;
 800b492:	2303      	movs	r3, #3
 800b494:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800b498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b49a:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800b49e:	4293      	cmp	r3, r2
 800b4a0:	d802      	bhi.n	800b4a8 <find_volume+0x2f0>
 800b4a2:	2302      	movs	r3, #2
 800b4a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800b4a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4aa:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d802      	bhi.n	800b4b8 <find_volume+0x300>
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ba:	1c9a      	adds	r2, r3, #2
 800b4bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4be:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800b4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4c2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b4c4:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800b4c6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800b4c8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b4ca:	441a      	add	r2, r3
 800b4cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ce:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800b4d0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800b4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4d4:	441a      	add	r2, r3
 800b4d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4d8:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (fmt == FS_FAT32) {
 800b4da:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b4de:	2b03      	cmp	r3, #3
 800b4e0:	d11e      	bne.n	800b520 <find_volume+0x368>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800b4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4e4:	3334      	adds	r3, #52	@ 0x34
 800b4e6:	332a      	adds	r3, #42	@ 0x2a
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f7fe fc19 	bl	8009d20 <ld_word>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d001      	beq.n	800b4f8 <find_volume+0x340>
 800b4f4:	230d      	movs	r3, #13
 800b4f6:	e0a8      	b.n	800b64a <find_volume+0x492>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800b4f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4fa:	891b      	ldrh	r3, [r3, #8]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d001      	beq.n	800b504 <find_volume+0x34c>
 800b500:	230d      	movs	r3, #13
 800b502:	e0a2      	b.n	800b64a <find_volume+0x492>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800b504:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b506:	3334      	adds	r3, #52	@ 0x34
 800b508:	332c      	adds	r3, #44	@ 0x2c
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7fe fc20 	bl	8009d50 <ld_dword>
 800b510:	4602      	mov	r2, r0
 800b512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b514:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800b516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b518:	699b      	ldr	r3, [r3, #24]
 800b51a:	009b      	lsls	r3, r3, #2
 800b51c:	647b      	str	r3, [r7, #68]	@ 0x44
 800b51e:	e01f      	b.n	800b560 <find_volume+0x3a8>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800b520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b522:	891b      	ldrh	r3, [r3, #8]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d101      	bne.n	800b52c <find_volume+0x374>
 800b528:	230d      	movs	r3, #13
 800b52a:	e08e      	b.n	800b64a <find_volume+0x492>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800b52c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b52e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b532:	441a      	add	r2, r3
 800b534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b536:	629a      	str	r2, [r3, #40]	@ 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800b538:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b53c:	2b02      	cmp	r3, #2
 800b53e:	d103      	bne.n	800b548 <find_volume+0x390>
 800b540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b542:	699b      	ldr	r3, [r3, #24]
 800b544:	005b      	lsls	r3, r3, #1
 800b546:	e00a      	b.n	800b55e <find_volume+0x3a6>
 800b548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b54a:	699a      	ldr	r2, [r3, #24]
 800b54c:	4613      	mov	r3, r2
 800b54e:	005b      	lsls	r3, r3, #1
 800b550:	4413      	add	r3, r2
 800b552:	085a      	lsrs	r2, r3, #1
 800b554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b556:	699b      	ldr	r3, [r3, #24]
 800b558:	f003 0301 	and.w	r3, r3, #1
 800b55c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800b55e:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800b560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b562:	69da      	ldr	r2, [r3, #28]
 800b564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b566:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800b56a:	0a5b      	lsrs	r3, r3, #9
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d201      	bcs.n	800b574 <find_volume+0x3bc>
 800b570:	230d      	movs	r3, #13
 800b572:	e06a      	b.n	800b64a <find_volume+0x492>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800b574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b576:	f04f 32ff 	mov.w	r2, #4294967295
 800b57a:	615a      	str	r2, [r3, #20]
 800b57c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b57e:	695a      	ldr	r2, [r3, #20]
 800b580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b582:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800b584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b586:	2280      	movs	r2, #128	@ 0x80
 800b588:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800b58a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b58e:	2b03      	cmp	r3, #3
 800b590:	d149      	bne.n	800b626 <find_volume+0x46e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800b592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b594:	3334      	adds	r3, #52	@ 0x34
 800b596:	3330      	adds	r3, #48	@ 0x30
 800b598:	4618      	mov	r0, r3
 800b59a:	f7fe fbc1 	bl	8009d20 <ld_word>
 800b59e:	4603      	mov	r3, r0
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d140      	bne.n	800b626 <find_volume+0x46e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800b5a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5a6:	3301      	adds	r3, #1
 800b5a8:	4619      	mov	r1, r3
 800b5aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b5ac:	f7fe fe9a 	bl	800a2e4 <move_window>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d137      	bne.n	800b626 <find_volume+0x46e>
		{
			fs->fsi_flag = 0;
 800b5b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800b5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5be:	3334      	adds	r3, #52	@ 0x34
 800b5c0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	f7fe fbab 	bl	8009d20 <ld_word>
 800b5ca:	4603      	mov	r3, r0
 800b5cc:	461a      	mov	r2, r3
 800b5ce:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d127      	bne.n	800b626 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800b5d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5d8:	3334      	adds	r3, #52	@ 0x34
 800b5da:	4618      	mov	r0, r3
 800b5dc:	f7fe fbb8 	bl	8009d50 <ld_dword>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	4a1c      	ldr	r2, [pc, #112]	@ (800b654 <find_volume+0x49c>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d11e      	bne.n	800b626 <find_volume+0x46e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800b5e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ea:	3334      	adds	r3, #52	@ 0x34
 800b5ec:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800b5f0:	4618      	mov	r0, r3
 800b5f2:	f7fe fbad 	bl	8009d50 <ld_dword>
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	4a17      	ldr	r2, [pc, #92]	@ (800b658 <find_volume+0x4a0>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d113      	bne.n	800b626 <find_volume+0x46e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800b5fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b600:	3334      	adds	r3, #52	@ 0x34
 800b602:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800b606:	4618      	mov	r0, r3
 800b608:	f7fe fba2 	bl	8009d50 <ld_dword>
 800b60c:	4602      	mov	r2, r0
 800b60e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b610:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800b612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b614:	3334      	adds	r3, #52	@ 0x34
 800b616:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800b61a:	4618      	mov	r0, r3
 800b61c:	f7fe fb98 	bl	8009d50 <ld_dword>
 800b620:	4602      	mov	r2, r0
 800b622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b624:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800b626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b628:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800b62c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800b62e:	4b0b      	ldr	r3, [pc, #44]	@ (800b65c <find_volume+0x4a4>)
 800b630:	881b      	ldrh	r3, [r3, #0]
 800b632:	3301      	adds	r3, #1
 800b634:	b29a      	uxth	r2, r3
 800b636:	4b09      	ldr	r3, [pc, #36]	@ (800b65c <find_volume+0x4a4>)
 800b638:	801a      	strh	r2, [r3, #0]
 800b63a:	4b08      	ldr	r3, [pc, #32]	@ (800b65c <find_volume+0x4a4>)
 800b63c:	881a      	ldrh	r2, [r3, #0]
 800b63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b640:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800b642:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b644:	f7fe fde6 	bl	800a214 <clear_lock>
#endif
	return FR_OK;
 800b648:	2300      	movs	r3, #0
}
 800b64a:	4618      	mov	r0, r3
 800b64c:	3758      	adds	r7, #88	@ 0x58
 800b64e:	46bd      	mov	sp, r7
 800b650:	bd80      	pop	{r7, pc}
 800b652:	bf00      	nop
 800b654:	41615252 	.word	0x41615252
 800b658:	61417272 	.word	0x61417272
 800b65c:	20011414 	.word	0x20011414

0800b660 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
 800b668:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800b66a:	2309      	movs	r3, #9
 800b66c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d02e      	beq.n	800b6d2 <validate+0x72>
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d02a      	beq.n	800b6d2 <validate+0x72>
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	781b      	ldrb	r3, [r3, #0]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d025      	beq.n	800b6d2 <validate+0x72>
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	889a      	ldrh	r2, [r3, #4]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	88db      	ldrh	r3, [r3, #6]
 800b690:	429a      	cmp	r2, r3
 800b692:	d11e      	bne.n	800b6d2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4618      	mov	r0, r3
 800b69a:	f7fe fc41 	bl	8009f20 <lock_fs>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d014      	beq.n	800b6ce <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	785b      	ldrb	r3, [r3, #1]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f7fe fa98 	bl	8009be0 <disk_status>
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	f003 0301 	and.w	r3, r3, #1
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	d102      	bne.n	800b6c0 <validate+0x60>
				res = FR_OK;
 800b6ba:	2300      	movs	r3, #0
 800b6bc:	73fb      	strb	r3, [r7, #15]
 800b6be:	e008      	b.n	800b6d2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	2100      	movs	r1, #0
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fe fc40 	bl	8009f4c <unlock_fs>
 800b6cc:	e001      	b.n	800b6d2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800b6ce:	230f      	movs	r3, #15
 800b6d0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800b6d2:	7bfb      	ldrb	r3, [r7, #15]
 800b6d4:	2b00      	cmp	r3, #0
 800b6d6:	d102      	bne.n	800b6de <validate+0x7e>
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	e000      	b.n	800b6e0 <validate+0x80>
 800b6de:	2300      	movs	r3, #0
 800b6e0:	683a      	ldr	r2, [r7, #0]
 800b6e2:	6013      	str	r3, [r2, #0]
	return res;
 800b6e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}
	...

0800b6f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b088      	sub	sp, #32
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	60f8      	str	r0, [r7, #12]
 800b6f8:	60b9      	str	r1, [r7, #8]
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800b702:	f107 0310 	add.w	r3, r7, #16
 800b706:	4618      	mov	r0, r3
 800b708:	f7ff fcbb 	bl	800b082 <get_ldnumber>
 800b70c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800b70e:	69fb      	ldr	r3, [r7, #28]
 800b710:	2b00      	cmp	r3, #0
 800b712:	da01      	bge.n	800b718 <f_mount+0x28>
 800b714:	230b      	movs	r3, #11
 800b716:	e048      	b.n	800b7aa <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800b718:	4a26      	ldr	r2, [pc, #152]	@ (800b7b4 <f_mount+0xc4>)
 800b71a:	69fb      	ldr	r3, [r7, #28]
 800b71c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b720:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800b722:	69bb      	ldr	r3, [r7, #24]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d00f      	beq.n	800b748 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800b728:	69b8      	ldr	r0, [r7, #24]
 800b72a:	f7fe fd73 	bl	800a214 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	4618      	mov	r0, r3
 800b734:	f000 fefe 	bl	800c534 <ff_del_syncobj>
 800b738:	4603      	mov	r3, r0
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d101      	bne.n	800b742 <f_mount+0x52>
 800b73e:	2302      	movs	r3, #2
 800b740:	e033      	b.n	800b7aa <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800b742:	69bb      	ldr	r3, [r7, #24]
 800b744:	2200      	movs	r2, #0
 800b746:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d00f      	beq.n	800b76e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	2200      	movs	r2, #0
 800b752:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800b754:	69fb      	ldr	r3, [r7, #28]
 800b756:	b2da      	uxtb	r2, r3
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	330c      	adds	r3, #12
 800b75c:	4619      	mov	r1, r3
 800b75e:	4610      	mov	r0, r2
 800b760:	f000 fecd 	bl	800c4fe <ff_cre_syncobj>
 800b764:	4603      	mov	r3, r0
 800b766:	2b00      	cmp	r3, #0
 800b768:	d101      	bne.n	800b76e <f_mount+0x7e>
 800b76a:	2302      	movs	r3, #2
 800b76c:	e01d      	b.n	800b7aa <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800b76e:	68fa      	ldr	r2, [r7, #12]
 800b770:	4910      	ldr	r1, [pc, #64]	@ (800b7b4 <f_mount+0xc4>)
 800b772:	69fb      	ldr	r3, [r7, #28]
 800b774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d002      	beq.n	800b784 <f_mount+0x94>
 800b77e:	79fb      	ldrb	r3, [r7, #7]
 800b780:	2b01      	cmp	r3, #1
 800b782:	d001      	beq.n	800b788 <f_mount+0x98>
 800b784:	2300      	movs	r3, #0
 800b786:	e010      	b.n	800b7aa <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800b788:	f107 010c 	add.w	r1, r7, #12
 800b78c:	f107 0308 	add.w	r3, r7, #8
 800b790:	2200      	movs	r2, #0
 800b792:	4618      	mov	r0, r3
 800b794:	f7ff fd10 	bl	800b1b8 <find_volume>
 800b798:	4603      	mov	r3, r0
 800b79a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	7dfa      	ldrb	r2, [r7, #23]
 800b7a0:	4611      	mov	r1, r2
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	f7fe fbd2 	bl	8009f4c <unlock_fs>
 800b7a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3720      	adds	r7, #32
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}
 800b7b2:	bf00      	nop
 800b7b4:	20011410 	.word	0x20011410

0800b7b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b098      	sub	sp, #96	@ 0x60
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	60f8      	str	r0, [r7, #12]
 800b7c0:	60b9      	str	r1, [r7, #8]
 800b7c2:	4613      	mov	r3, r2
 800b7c4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d101      	bne.n	800b7d0 <f_open+0x18>
 800b7cc:	2309      	movs	r3, #9
 800b7ce:	e1b0      	b.n	800bb32 <f_open+0x37a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800b7d0:	79fb      	ldrb	r3, [r7, #7]
 800b7d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b7d6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800b7d8:	79fa      	ldrb	r2, [r7, #7]
 800b7da:	f107 0110 	add.w	r1, r7, #16
 800b7de:	f107 0308 	add.w	r3, r7, #8
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7ff fce8 	bl	800b1b8 <find_volume>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800b7ee:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	f040 818d 	bne.w	800bb12 <f_open+0x35a>
		dj.obj.fs = fs;
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800b7fc:	68ba      	ldr	r2, [r7, #8]
 800b7fe:	f107 0314 	add.w	r3, r7, #20
 800b802:	4611      	mov	r1, r2
 800b804:	4618      	mov	r0, r3
 800b806:	f7ff fbcb 	bl	800afa0 <follow_path>
 800b80a:	4603      	mov	r3, r0
 800b80c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800b810:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b814:	2b00      	cmp	r3, #0
 800b816:	d118      	bne.n	800b84a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800b818:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800b81c:	b25b      	sxtb	r3, r3
 800b81e:	2b00      	cmp	r3, #0
 800b820:	da03      	bge.n	800b82a <f_open+0x72>
				res = FR_INVALID_NAME;
 800b822:	2306      	movs	r3, #6
 800b824:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b828:	e00f      	b.n	800b84a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b82a:	79fb      	ldrb	r3, [r7, #7]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	bf8c      	ite	hi
 800b830:	2301      	movhi	r3, #1
 800b832:	2300      	movls	r3, #0
 800b834:	b2db      	uxtb	r3, r3
 800b836:	461a      	mov	r2, r3
 800b838:	f107 0314 	add.w	r3, r7, #20
 800b83c:	4611      	mov	r1, r2
 800b83e:	4618      	mov	r0, r3
 800b840:	f7fe fba0 	bl	8009f84 <chk_lock>
 800b844:	4603      	mov	r3, r0
 800b846:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800b84a:	79fb      	ldrb	r3, [r7, #7]
 800b84c:	f003 031c 	and.w	r3, r3, #28
 800b850:	2b00      	cmp	r3, #0
 800b852:	d07f      	beq.n	800b954 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800b854:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d017      	beq.n	800b88c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800b85c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b860:	2b04      	cmp	r3, #4
 800b862:	d10e      	bne.n	800b882 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800b864:	f7fe fbea 	bl	800a03c <enq_lock>
 800b868:	4603      	mov	r3, r0
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d006      	beq.n	800b87c <f_open+0xc4>
 800b86e:	f107 0314 	add.w	r3, r7, #20
 800b872:	4618      	mov	r0, r3
 800b874:	f7ff face 	bl	800ae14 <dir_register>
 800b878:	4603      	mov	r3, r0
 800b87a:	e000      	b.n	800b87e <f_open+0xc6>
 800b87c:	2312      	movs	r3, #18
 800b87e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800b882:	79fb      	ldrb	r3, [r7, #7]
 800b884:	f043 0308 	orr.w	r3, r3, #8
 800b888:	71fb      	strb	r3, [r7, #7]
 800b88a:	e010      	b.n	800b8ae <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800b88c:	7ebb      	ldrb	r3, [r7, #26]
 800b88e:	f003 0311 	and.w	r3, r3, #17
 800b892:	2b00      	cmp	r3, #0
 800b894:	d003      	beq.n	800b89e <f_open+0xe6>
					res = FR_DENIED;
 800b896:	2307      	movs	r3, #7
 800b898:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b89c:	e007      	b.n	800b8ae <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800b89e:	79fb      	ldrb	r3, [r7, #7]
 800b8a0:	f003 0304 	and.w	r3, r3, #4
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d002      	beq.n	800b8ae <f_open+0xf6>
 800b8a8:	2308      	movs	r3, #8
 800b8aa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800b8ae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d168      	bne.n	800b988 <f_open+0x1d0>
 800b8b6:	79fb      	ldrb	r3, [r7, #7]
 800b8b8:	f003 0308 	and.w	r3, r3, #8
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d063      	beq.n	800b988 <f_open+0x1d0>
				dw = GET_FATTIME();
 800b8c0:	f7fd f930 	bl	8008b24 <get_fattime>
 800b8c4:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800b8c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8c8:	330e      	adds	r3, #14
 800b8ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b8cc:	4618      	mov	r0, r3
 800b8ce:	f7fe fa7d 	bl	8009dcc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800b8d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8d4:	3316      	adds	r3, #22
 800b8d6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b8d8:	4618      	mov	r0, r3
 800b8da:	f7fe fa77 	bl	8009dcc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800b8de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8e0:	330b      	adds	r3, #11
 800b8e2:	2220      	movs	r2, #32
 800b8e4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8ea:	4611      	mov	r1, r2
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f7ff f9fd 	bl	800acec <ld_clust>
 800b8f2:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	4618      	mov	r0, r3
 800b8fc:	f7ff fa15 	bl	800ad2a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800b900:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b902:	331c      	adds	r3, #28
 800b904:	2100      	movs	r1, #0
 800b906:	4618      	mov	r0, r3
 800b908:	f7fe fa60 	bl	8009dcc <st_dword>
					fs->wflag = 1;
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	2201      	movs	r2, #1
 800b910:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800b912:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b914:	2b00      	cmp	r3, #0
 800b916:	d037      	beq.n	800b988 <f_open+0x1d0>
						dw = fs->winsect;
 800b918:	693b      	ldr	r3, [r7, #16]
 800b91a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b91c:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800b91e:	f107 0314 	add.w	r3, r7, #20
 800b922:	2200      	movs	r2, #0
 800b924:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b926:	4618      	mov	r0, r3
 800b928:	f7fe ff28 	bl	800a77c <remove_chain>
 800b92c:	4603      	mov	r3, r0
 800b92e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800b932:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b936:	2b00      	cmp	r3, #0
 800b938:	d126      	bne.n	800b988 <f_open+0x1d0>
							res = move_window(fs, dw);
 800b93a:	693b      	ldr	r3, [r7, #16]
 800b93c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b93e:	4618      	mov	r0, r3
 800b940:	f7fe fcd0 	bl	800a2e4 <move_window>
 800b944:	4603      	mov	r3, r0
 800b946:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800b94a:	693b      	ldr	r3, [r7, #16]
 800b94c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b94e:	3a01      	subs	r2, #1
 800b950:	611a      	str	r2, [r3, #16]
 800b952:	e019      	b.n	800b988 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800b954:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d115      	bne.n	800b988 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800b95c:	7ebb      	ldrb	r3, [r7, #26]
 800b95e:	f003 0310 	and.w	r3, r3, #16
 800b962:	2b00      	cmp	r3, #0
 800b964:	d003      	beq.n	800b96e <f_open+0x1b6>
					res = FR_NO_FILE;
 800b966:	2304      	movs	r3, #4
 800b968:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800b96c:	e00c      	b.n	800b988 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800b96e:	79fb      	ldrb	r3, [r7, #7]
 800b970:	f003 0302 	and.w	r3, r3, #2
 800b974:	2b00      	cmp	r3, #0
 800b976:	d007      	beq.n	800b988 <f_open+0x1d0>
 800b978:	7ebb      	ldrb	r3, [r7, #26]
 800b97a:	f003 0301 	and.w	r3, r3, #1
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d002      	beq.n	800b988 <f_open+0x1d0>
						res = FR_DENIED;
 800b982:	2307      	movs	r3, #7
 800b984:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800b988:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d126      	bne.n	800b9de <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800b990:	79fb      	ldrb	r3, [r7, #7]
 800b992:	f003 0308 	and.w	r3, r3, #8
 800b996:	2b00      	cmp	r3, #0
 800b998:	d003      	beq.n	800b9a2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800b99a:	79fb      	ldrb	r3, [r7, #7]
 800b99c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b9a0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800b9a2:	693b      	ldr	r3, [r7, #16]
 800b9a4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800b9aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800b9b0:	79fb      	ldrb	r3, [r7, #7]
 800b9b2:	2b01      	cmp	r3, #1
 800b9b4:	bf8c      	ite	hi
 800b9b6:	2301      	movhi	r3, #1
 800b9b8:	2300      	movls	r3, #0
 800b9ba:	b2db      	uxtb	r3, r3
 800b9bc:	461a      	mov	r2, r3
 800b9be:	f107 0314 	add.w	r3, r7, #20
 800b9c2:	4611      	mov	r1, r2
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f7fe fb5b 	bl	800a080 <inc_lock>
 800b9ca:	4602      	mov	r2, r0
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	691b      	ldr	r3, [r3, #16]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d102      	bne.n	800b9de <f_open+0x226>
 800b9d8:	2302      	movs	r3, #2
 800b9da:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800b9de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	f040 8095 	bne.w	800bb12 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800b9e8:	693b      	ldr	r3, [r7, #16]
 800b9ea:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b9ec:	4611      	mov	r1, r2
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7ff f97c 	bl	800acec <ld_clust>
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800b9fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9fc:	331c      	adds	r3, #28
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7fe f9a6 	bl	8009d50 <ld_dword>
 800ba04:	4602      	mov	r2, r0
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	2200      	movs	r2, #0
 800ba0e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ba10:	693a      	ldr	r2, [r7, #16]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ba16:	693b      	ldr	r3, [r7, #16]
 800ba18:	88da      	ldrh	r2, [r3, #6]
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	79fa      	ldrb	r2, [r7, #7]
 800ba22:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2200      	movs	r2, #0
 800ba28:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	2200      	movs	r2, #0
 800ba2e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ba30:	68fb      	ldr	r3, [r7, #12]
 800ba32:	2200      	movs	r2, #0
 800ba34:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	3330      	adds	r3, #48	@ 0x30
 800ba3a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba3e:	2100      	movs	r1, #0
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7fe fa10 	bl	8009e66 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ba46:	79fb      	ldrb	r3, [r7, #7]
 800ba48:	f003 0320 	and.w	r3, r3, #32
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d060      	beq.n	800bb12 <f_open+0x35a>
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d05c      	beq.n	800bb12 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	68da      	ldr	r2, [r3, #12]
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	895b      	ldrh	r3, [r3, #10]
 800ba64:	025b      	lsls	r3, r3, #9
 800ba66:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	689b      	ldr	r3, [r3, #8]
 800ba6c:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	657b      	str	r3, [r7, #84]	@ 0x54
 800ba74:	e016      	b.n	800baa4 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800ba76:	68fb      	ldr	r3, [r7, #12]
 800ba78:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	f7fe fced 	bl	800a45a <get_fat>
 800ba80:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ba82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d802      	bhi.n	800ba8e <f_open+0x2d6>
 800ba88:	2302      	movs	r3, #2
 800ba8a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ba8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba94:	d102      	bne.n	800ba9c <f_open+0x2e4>
 800ba96:	2301      	movs	r3, #1
 800ba98:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ba9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800ba9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800baa0:	1ad3      	subs	r3, r2, r3
 800baa2:	657b      	str	r3, [r7, #84]	@ 0x54
 800baa4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d103      	bne.n	800bab4 <f_open+0x2fc>
 800baac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800baae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d8e0      	bhi.n	800ba76 <f_open+0x2be>
				}
				fp->clust = clst;
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bab8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800baba:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d127      	bne.n	800bb12 <f_open+0x35a>
 800bac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d022      	beq.n	800bb12 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7fe fca3 	bl	800a41c <clust2sect>
 800bad6:	6478      	str	r0, [r7, #68]	@ 0x44
 800bad8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bada:	2b00      	cmp	r3, #0
 800badc:	d103      	bne.n	800bae6 <f_open+0x32e>
						res = FR_INT_ERR;
 800bade:	2302      	movs	r3, #2
 800bae0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bae4:	e015      	b.n	800bb12 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800bae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bae8:	0a5a      	lsrs	r2, r3, #9
 800baea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800baec:	441a      	add	r2, r3
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800baf2:	693b      	ldr	r3, [r7, #16]
 800baf4:	7858      	ldrb	r0, [r3, #1]
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	6a1a      	ldr	r2, [r3, #32]
 800bb00:	2301      	movs	r3, #1
 800bb02:	f7fe f8af 	bl	8009c64 <disk_read>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <f_open+0x35a>
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800bb12:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d002      	beq.n	800bb20 <f_open+0x368>
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800bb20:	693b      	ldr	r3, [r7, #16]
 800bb22:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 800bb26:	4611      	mov	r1, r2
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7fe fa0f 	bl	8009f4c <unlock_fs>
 800bb2e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3760      	adds	r7, #96	@ 0x60
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}

0800bb3a <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800bb3a:	b580      	push	{r7, lr}
 800bb3c:	b08e      	sub	sp, #56	@ 0x38
 800bb3e:	af00      	add	r7, sp, #0
 800bb40:	60f8      	str	r0, [r7, #12]
 800bb42:	60b9      	str	r1, [r7, #8]
 800bb44:	607a      	str	r2, [r7, #4]
 800bb46:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	f107 0214 	add.w	r2, r7, #20
 800bb58:	4611      	mov	r1, r2
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	f7ff fd80 	bl	800b660 <validate>
 800bb60:	4603      	mov	r3, r0
 800bb62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800bb66:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d107      	bne.n	800bb7e <f_read+0x44>
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	7d5b      	ldrb	r3, [r3, #21]
 800bb72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800bb76:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d009      	beq.n	800bb92 <f_read+0x58>
 800bb7e:	697b      	ldr	r3, [r7, #20]
 800bb80:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800bb84:	4611      	mov	r1, r2
 800bb86:	4618      	mov	r0, r3
 800bb88:	f7fe f9e0 	bl	8009f4c <unlock_fs>
 800bb8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800bb90:	e13d      	b.n	800be0e <f_read+0x2d4>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	7d1b      	ldrb	r3, [r3, #20]
 800bb96:	f003 0301 	and.w	r3, r3, #1
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d106      	bne.n	800bbac <f_read+0x72>
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	2107      	movs	r1, #7
 800bba2:	4618      	mov	r0, r3
 800bba4:	f7fe f9d2 	bl	8009f4c <unlock_fs>
 800bba8:	2307      	movs	r3, #7
 800bbaa:	e130      	b.n	800be0e <f_read+0x2d4>
	remain = fp->obj.objsize - fp->fptr;
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	68da      	ldr	r2, [r3, #12]
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	699b      	ldr	r3, [r3, #24]
 800bbb4:	1ad3      	subs	r3, r2, r3
 800bbb6:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800bbb8:	687a      	ldr	r2, [r7, #4]
 800bbba:	6a3b      	ldr	r3, [r7, #32]
 800bbbc:	429a      	cmp	r2, r3
 800bbbe:	f240 811c 	bls.w	800bdfa <f_read+0x2c0>
 800bbc2:	6a3b      	ldr	r3, [r7, #32]
 800bbc4:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800bbc6:	e118      	b.n	800bdfa <f_read+0x2c0>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800bbc8:	68fb      	ldr	r3, [r7, #12]
 800bbca:	699b      	ldr	r3, [r3, #24]
 800bbcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f040 80e4 	bne.w	800bd9e <f_read+0x264>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	699b      	ldr	r3, [r3, #24]
 800bbda:	0a5b      	lsrs	r3, r3, #9
 800bbdc:	697a      	ldr	r2, [r7, #20]
 800bbde:	8952      	ldrh	r2, [r2, #10]
 800bbe0:	3a01      	subs	r2, #1
 800bbe2:	4013      	ands	r3, r2
 800bbe4:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800bbe6:	69fb      	ldr	r3, [r7, #28]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d139      	bne.n	800bc60 <f_read+0x126>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	699b      	ldr	r3, [r3, #24]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d103      	bne.n	800bbfc <f_read+0xc2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	689b      	ldr	r3, [r3, #8]
 800bbf8:	633b      	str	r3, [r7, #48]	@ 0x30
 800bbfa:	e013      	b.n	800bc24 <f_read+0xea>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d007      	beq.n	800bc14 <f_read+0xda>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	699b      	ldr	r3, [r3, #24]
 800bc08:	4619      	mov	r1, r3
 800bc0a:	68f8      	ldr	r0, [r7, #12]
 800bc0c:	f7fe feb3 	bl	800a976 <clmt_clust>
 800bc10:	6338      	str	r0, [r7, #48]	@ 0x30
 800bc12:	e007      	b.n	800bc24 <f_read+0xea>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	69db      	ldr	r3, [r3, #28]
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	4610      	mov	r0, r2
 800bc1e:	f7fe fc1c 	bl	800a45a <get_fat>
 800bc22:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800bc24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d809      	bhi.n	800bc3e <f_read+0x104>
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	2202      	movs	r2, #2
 800bc2e:	755a      	strb	r2, [r3, #21]
 800bc30:	697b      	ldr	r3, [r7, #20]
 800bc32:	2102      	movs	r1, #2
 800bc34:	4618      	mov	r0, r3
 800bc36:	f7fe f989 	bl	8009f4c <unlock_fs>
 800bc3a:	2302      	movs	r3, #2
 800bc3c:	e0e7      	b.n	800be0e <f_read+0x2d4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bc3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bc40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc44:	d109      	bne.n	800bc5a <f_read+0x120>
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	2201      	movs	r2, #1
 800bc4a:	755a      	strb	r2, [r3, #21]
 800bc4c:	697b      	ldr	r3, [r7, #20]
 800bc4e:	2101      	movs	r1, #1
 800bc50:	4618      	mov	r0, r3
 800bc52:	f7fe f97b 	bl	8009f4c <unlock_fs>
 800bc56:	2301      	movs	r3, #1
 800bc58:	e0d9      	b.n	800be0e <f_read+0x2d4>
				fp->clust = clst;				/* Update current cluster */
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bc5e:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bc60:	697a      	ldr	r2, [r7, #20]
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	69db      	ldr	r3, [r3, #28]
 800bc66:	4619      	mov	r1, r3
 800bc68:	4610      	mov	r0, r2
 800bc6a:	f7fe fbd7 	bl	800a41c <clust2sect>
 800bc6e:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bc70:	69bb      	ldr	r3, [r7, #24]
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d109      	bne.n	800bc8a <f_read+0x150>
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	2202      	movs	r2, #2
 800bc7a:	755a      	strb	r2, [r3, #21]
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	2102      	movs	r1, #2
 800bc80:	4618      	mov	r0, r3
 800bc82:	f7fe f963 	bl	8009f4c <unlock_fs>
 800bc86:	2302      	movs	r3, #2
 800bc88:	e0c1      	b.n	800be0e <f_read+0x2d4>
			sect += csect;
 800bc8a:	69ba      	ldr	r2, [r7, #24]
 800bc8c:	69fb      	ldr	r3, [r7, #28]
 800bc8e:	4413      	add	r3, r2
 800bc90:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	0a5b      	lsrs	r3, r3, #9
 800bc96:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800bc98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d03e      	beq.n	800bd1c <f_read+0x1e2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bc9e:	69fa      	ldr	r2, [r7, #28]
 800bca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bca2:	4413      	add	r3, r2
 800bca4:	697a      	ldr	r2, [r7, #20]
 800bca6:	8952      	ldrh	r2, [r2, #10]
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d905      	bls.n	800bcb8 <f_read+0x17e>
					cc = fs->csize - csect;
 800bcac:	697b      	ldr	r3, [r7, #20]
 800bcae:	895b      	ldrh	r3, [r3, #10]
 800bcb0:	461a      	mov	r2, r3
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	1ad3      	subs	r3, r2, r3
 800bcb6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bcb8:	697b      	ldr	r3, [r7, #20]
 800bcba:	7858      	ldrb	r0, [r3, #1]
 800bcbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bcbe:	69ba      	ldr	r2, [r7, #24]
 800bcc0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800bcc2:	f7fd ffcf 	bl	8009c64 <disk_read>
 800bcc6:	4603      	mov	r3, r0
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d009      	beq.n	800bce0 <f_read+0x1a6>
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	2201      	movs	r2, #1
 800bcd0:	755a      	strb	r2, [r3, #21]
 800bcd2:	697b      	ldr	r3, [r7, #20]
 800bcd4:	2101      	movs	r1, #1
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f7fe f938 	bl	8009f4c <unlock_fs>
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e096      	b.n	800be0e <f_read+0x2d4>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	7d1b      	ldrb	r3, [r3, #20]
 800bce4:	b25b      	sxtb	r3, r3
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	da14      	bge.n	800bd14 <f_read+0x1da>
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	6a1a      	ldr	r2, [r3, #32]
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	1ad3      	subs	r3, r2, r3
 800bcf2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d90d      	bls.n	800bd14 <f_read+0x1da>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	6a1a      	ldr	r2, [r3, #32]
 800bcfc:	69bb      	ldr	r3, [r7, #24]
 800bcfe:	1ad3      	subs	r3, r2, r3
 800bd00:	025b      	lsls	r3, r3, #9
 800bd02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bd04:	18d0      	adds	r0, r2, r3
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	3330      	adds	r3, #48	@ 0x30
 800bd0a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bd0e:	4619      	mov	r1, r3
 800bd10:	f7fe f888 	bl	8009e24 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800bd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd16:	025b      	lsls	r3, r3, #9
 800bd18:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800bd1a:	e05a      	b.n	800bdd2 <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	6a1b      	ldr	r3, [r3, #32]
 800bd20:	69ba      	ldr	r2, [r7, #24]
 800bd22:	429a      	cmp	r2, r3
 800bd24:	d038      	beq.n	800bd98 <f_read+0x25e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	7d1b      	ldrb	r3, [r3, #20]
 800bd2a:	b25b      	sxtb	r3, r3
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	da1d      	bge.n	800bd6c <f_read+0x232>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bd30:	697b      	ldr	r3, [r7, #20]
 800bd32:	7858      	ldrb	r0, [r3, #1]
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	6a1a      	ldr	r2, [r3, #32]
 800bd3e:	2301      	movs	r3, #1
 800bd40:	f7fd ffb0 	bl	8009ca4 <disk_write>
 800bd44:	4603      	mov	r3, r0
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d009      	beq.n	800bd5e <f_read+0x224>
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	2201      	movs	r2, #1
 800bd4e:	755a      	strb	r2, [r3, #21]
 800bd50:	697b      	ldr	r3, [r7, #20]
 800bd52:	2101      	movs	r1, #1
 800bd54:	4618      	mov	r0, r3
 800bd56:	f7fe f8f9 	bl	8009f4c <unlock_fs>
 800bd5a:	2301      	movs	r3, #1
 800bd5c:	e057      	b.n	800be0e <f_read+0x2d4>
					fp->flag &= (BYTE)~FA_DIRTY;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	7d1b      	ldrb	r3, [r3, #20]
 800bd62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bd66:	b2da      	uxtb	r2, r3
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800bd6c:	697b      	ldr	r3, [r7, #20]
 800bd6e:	7858      	ldrb	r0, [r3, #1]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bd76:	2301      	movs	r3, #1
 800bd78:	69ba      	ldr	r2, [r7, #24]
 800bd7a:	f7fd ff73 	bl	8009c64 <disk_read>
 800bd7e:	4603      	mov	r3, r0
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d009      	beq.n	800bd98 <f_read+0x25e>
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	2201      	movs	r2, #1
 800bd88:	755a      	strb	r2, [r3, #21]
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	2101      	movs	r1, #1
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7fe f8dc 	bl	8009f4c <unlock_fs>
 800bd94:	2301      	movs	r3, #1
 800bd96:	e03a      	b.n	800be0e <f_read+0x2d4>
			}
#endif
			fp->sect = sect;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	69ba      	ldr	r2, [r7, #24]
 800bd9c:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	699b      	ldr	r3, [r3, #24]
 800bda2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bda6:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800bdaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800bdac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	429a      	cmp	r2, r3
 800bdb2:	d901      	bls.n	800bdb8 <f_read+0x27e>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	699b      	ldr	r3, [r3, #24]
 800bdc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdc6:	4413      	add	r3, r2
 800bdc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bdca:	4619      	mov	r1, r3
 800bdcc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bdce:	f7fe f829 	bl	8009e24 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800bdd2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdd6:	4413      	add	r3, r2
 800bdd8:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	699a      	ldr	r2, [r3, #24]
 800bdde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bde0:	441a      	add	r2, r3
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	619a      	str	r2, [r3, #24]
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdec:	441a      	add	r2, r3
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	601a      	str	r2, [r3, #0]
 800bdf2:	687a      	ldr	r2, [r7, #4]
 800bdf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdf6:	1ad3      	subs	r3, r2, r3
 800bdf8:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	f47f aee3 	bne.w	800bbc8 <f_read+0x8e>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800be02:	697b      	ldr	r3, [r7, #20]
 800be04:	2100      	movs	r1, #0
 800be06:	4618      	mov	r0, r3
 800be08:	f7fe f8a0 	bl	8009f4c <unlock_fs>
 800be0c:	2300      	movs	r3, #0
}
 800be0e:	4618      	mov	r0, r3
 800be10:	3738      	adds	r7, #56	@ 0x38
 800be12:	46bd      	mov	sp, r7
 800be14:	bd80      	pop	{r7, pc}

0800be16 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800be16:	b580      	push	{r7, lr}
 800be18:	b08c      	sub	sp, #48	@ 0x30
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	60f8      	str	r0, [r7, #12]
 800be1e:	60b9      	str	r1, [r7, #8]
 800be20:	607a      	str	r2, [r7, #4]
 800be22:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	2200      	movs	r2, #0
 800be2c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	f107 0210 	add.w	r2, r7, #16
 800be34:	4611      	mov	r1, r2
 800be36:	4618      	mov	r0, r3
 800be38:	f7ff fc12 	bl	800b660 <validate>
 800be3c:	4603      	mov	r3, r0
 800be3e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800be42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800be46:	2b00      	cmp	r3, #0
 800be48:	d107      	bne.n	800be5a <f_write+0x44>
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	7d5b      	ldrb	r3, [r3, #21]
 800be4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800be52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800be56:	2b00      	cmp	r3, #0
 800be58:	d009      	beq.n	800be6e <f_write+0x58>
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800be60:	4611      	mov	r1, r2
 800be62:	4618      	mov	r0, r3
 800be64:	f7fe f872 	bl	8009f4c <unlock_fs>
 800be68:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800be6c:	e173      	b.n	800c156 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	7d1b      	ldrb	r3, [r3, #20]
 800be72:	f003 0302 	and.w	r3, r3, #2
 800be76:	2b00      	cmp	r3, #0
 800be78:	d106      	bne.n	800be88 <f_write+0x72>
 800be7a:	693b      	ldr	r3, [r7, #16]
 800be7c:	2107      	movs	r1, #7
 800be7e:	4618      	mov	r0, r3
 800be80:	f7fe f864 	bl	8009f4c <unlock_fs>
 800be84:	2307      	movs	r3, #7
 800be86:	e166      	b.n	800c156 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	699a      	ldr	r2, [r3, #24]
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	441a      	add	r2, r3
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	699b      	ldr	r3, [r3, #24]
 800be94:	429a      	cmp	r2, r3
 800be96:	f080 814b 	bcs.w	800c130 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	699b      	ldr	r3, [r3, #24]
 800be9e:	43db      	mvns	r3, r3
 800bea0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800bea2:	e145      	b.n	800c130 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	699b      	ldr	r3, [r3, #24]
 800bea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800beac:	2b00      	cmp	r3, #0
 800beae:	f040 8101 	bne.w	800c0b4 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	699b      	ldr	r3, [r3, #24]
 800beb6:	0a5b      	lsrs	r3, r3, #9
 800beb8:	693a      	ldr	r2, [r7, #16]
 800beba:	8952      	ldrh	r2, [r2, #10]
 800bebc:	3a01      	subs	r2, #1
 800bebe:	4013      	ands	r3, r2
 800bec0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800bec2:	69bb      	ldr	r3, [r7, #24]
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d14d      	bne.n	800bf64 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d10c      	bne.n	800beea <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	689b      	ldr	r3, [r3, #8]
 800bed4:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800bed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d11a      	bne.n	800bf12 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	2100      	movs	r1, #0
 800bee0:	4618      	mov	r0, r3
 800bee2:	f7fe fcb0 	bl	800a846 <create_chain>
 800bee6:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bee8:	e013      	b.n	800bf12 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d007      	beq.n	800bf02 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800bef2:	68fb      	ldr	r3, [r7, #12]
 800bef4:	699b      	ldr	r3, [r3, #24]
 800bef6:	4619      	mov	r1, r3
 800bef8:	68f8      	ldr	r0, [r7, #12]
 800befa:	f7fe fd3c 	bl	800a976 <clmt_clust>
 800befe:	62b8      	str	r0, [r7, #40]	@ 0x28
 800bf00:	e007      	b.n	800bf12 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800bf02:	68fa      	ldr	r2, [r7, #12]
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	69db      	ldr	r3, [r3, #28]
 800bf08:	4619      	mov	r1, r3
 800bf0a:	4610      	mov	r0, r2
 800bf0c:	f7fe fc9b 	bl	800a846 <create_chain>
 800bf10:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800bf12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	f000 8110 	beq.w	800c13a <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800bf1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d109      	bne.n	800bf34 <f_write+0x11e>
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	2202      	movs	r2, #2
 800bf24:	755a      	strb	r2, [r3, #21]
 800bf26:	693b      	ldr	r3, [r7, #16]
 800bf28:	2102      	movs	r1, #2
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fe f80e 	bl	8009f4c <unlock_fs>
 800bf30:	2302      	movs	r3, #2
 800bf32:	e110      	b.n	800c156 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800bf34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf3a:	d109      	bne.n	800bf50 <f_write+0x13a>
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2201      	movs	r2, #1
 800bf40:	755a      	strb	r2, [r3, #21]
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	2101      	movs	r1, #1
 800bf46:	4618      	mov	r0, r3
 800bf48:	f7fe f800 	bl	8009f4c <unlock_fs>
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e102      	b.n	800c156 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf54:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d102      	bne.n	800bf64 <f_write+0x14e>
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bf62:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	7d1b      	ldrb	r3, [r3, #20]
 800bf68:	b25b      	sxtb	r3, r3
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	da1d      	bge.n	800bfaa <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800bf6e:	693b      	ldr	r3, [r7, #16]
 800bf70:	7858      	ldrb	r0, [r3, #1]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	6a1a      	ldr	r2, [r3, #32]
 800bf7c:	2301      	movs	r3, #1
 800bf7e:	f7fd fe91 	bl	8009ca4 <disk_write>
 800bf82:	4603      	mov	r3, r0
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d009      	beq.n	800bf9c <f_write+0x186>
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	755a      	strb	r2, [r3, #21]
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	2101      	movs	r1, #1
 800bf92:	4618      	mov	r0, r3
 800bf94:	f7fd ffda 	bl	8009f4c <unlock_fs>
 800bf98:	2301      	movs	r3, #1
 800bf9a:	e0dc      	b.n	800c156 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	7d1b      	ldrb	r3, [r3, #20]
 800bfa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bfa4:	b2da      	uxtb	r2, r3
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800bfaa:	693a      	ldr	r2, [r7, #16]
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	69db      	ldr	r3, [r3, #28]
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	4610      	mov	r0, r2
 800bfb4:	f7fe fa32 	bl	800a41c <clust2sect>
 800bfb8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800bfba:	697b      	ldr	r3, [r7, #20]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d109      	bne.n	800bfd4 <f_write+0x1be>
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2202      	movs	r2, #2
 800bfc4:	755a      	strb	r2, [r3, #21]
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	2102      	movs	r1, #2
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f7fd ffbe 	bl	8009f4c <unlock_fs>
 800bfd0:	2302      	movs	r3, #2
 800bfd2:	e0c0      	b.n	800c156 <f_write+0x340>
			sect += csect;
 800bfd4:	697a      	ldr	r2, [r7, #20]
 800bfd6:	69bb      	ldr	r3, [r7, #24]
 800bfd8:	4413      	add	r3, r2
 800bfda:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	0a5b      	lsrs	r3, r3, #9
 800bfe0:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800bfe2:	6a3b      	ldr	r3, [r7, #32]
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d041      	beq.n	800c06c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800bfe8:	69ba      	ldr	r2, [r7, #24]
 800bfea:	6a3b      	ldr	r3, [r7, #32]
 800bfec:	4413      	add	r3, r2
 800bfee:	693a      	ldr	r2, [r7, #16]
 800bff0:	8952      	ldrh	r2, [r2, #10]
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d905      	bls.n	800c002 <f_write+0x1ec>
					cc = fs->csize - csect;
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	895b      	ldrh	r3, [r3, #10]
 800bffa:	461a      	mov	r2, r3
 800bffc:	69bb      	ldr	r3, [r7, #24]
 800bffe:	1ad3      	subs	r3, r2, r3
 800c000:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	7858      	ldrb	r0, [r3, #1]
 800c006:	6a3b      	ldr	r3, [r7, #32]
 800c008:	697a      	ldr	r2, [r7, #20]
 800c00a:	69f9      	ldr	r1, [r7, #28]
 800c00c:	f7fd fe4a 	bl	8009ca4 <disk_write>
 800c010:	4603      	mov	r3, r0
 800c012:	2b00      	cmp	r3, #0
 800c014:	d009      	beq.n	800c02a <f_write+0x214>
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2201      	movs	r2, #1
 800c01a:	755a      	strb	r2, [r3, #21]
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	2101      	movs	r1, #1
 800c020:	4618      	mov	r0, r3
 800c022:	f7fd ff93 	bl	8009f4c <unlock_fs>
 800c026:	2301      	movs	r3, #1
 800c028:	e095      	b.n	800c156 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800c02a:	68fb      	ldr	r3, [r7, #12]
 800c02c:	6a1a      	ldr	r2, [r3, #32]
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	1ad3      	subs	r3, r2, r3
 800c032:	6a3a      	ldr	r2, [r7, #32]
 800c034:	429a      	cmp	r2, r3
 800c036:	d915      	bls.n	800c064 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	6a1a      	ldr	r2, [r3, #32]
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	1ad3      	subs	r3, r2, r3
 800c046:	025b      	lsls	r3, r3, #9
 800c048:	69fa      	ldr	r2, [r7, #28]
 800c04a:	4413      	add	r3, r2
 800c04c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c050:	4619      	mov	r1, r3
 800c052:	f7fd fee7 	bl	8009e24 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	7d1b      	ldrb	r3, [r3, #20]
 800c05a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c05e:	b2da      	uxtb	r2, r3
 800c060:	68fb      	ldr	r3, [r7, #12]
 800c062:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800c064:	6a3b      	ldr	r3, [r7, #32]
 800c066:	025b      	lsls	r3, r3, #9
 800c068:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 800c06a:	e044      	b.n	800c0f6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	6a1b      	ldr	r3, [r3, #32]
 800c070:	697a      	ldr	r2, [r7, #20]
 800c072:	429a      	cmp	r2, r3
 800c074:	d01b      	beq.n	800c0ae <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	699a      	ldr	r2, [r3, #24]
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800c07e:	429a      	cmp	r2, r3
 800c080:	d215      	bcs.n	800c0ae <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	7858      	ldrb	r0, [r3, #1]
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c08c:	2301      	movs	r3, #1
 800c08e:	697a      	ldr	r2, [r7, #20]
 800c090:	f7fd fde8 	bl	8009c64 <disk_read>
 800c094:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800c096:	2b00      	cmp	r3, #0
 800c098:	d009      	beq.n	800c0ae <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2201      	movs	r2, #1
 800c09e:	755a      	strb	r2, [r3, #21]
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	2101      	movs	r1, #1
 800c0a4:	4618      	mov	r0, r3
 800c0a6:	f7fd ff51 	bl	8009f4c <unlock_fs>
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e053      	b.n	800c156 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	697a      	ldr	r2, [r7, #20]
 800c0b2:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	699b      	ldr	r3, [r3, #24]
 800c0b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0bc:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800c0c0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800c0c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	429a      	cmp	r2, r3
 800c0c8:	d901      	bls.n	800c0ce <f_write+0x2b8>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800c0ce:	68fb      	ldr	r3, [r7, #12]
 800c0d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800c0d4:	68fb      	ldr	r3, [r7, #12]
 800c0d6:	699b      	ldr	r3, [r3, #24]
 800c0d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c0dc:	4413      	add	r3, r2
 800c0de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0e0:	69f9      	ldr	r1, [r7, #28]
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7fd fe9e 	bl	8009e24 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	7d1b      	ldrb	r3, [r3, #20]
 800c0ec:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c0f0:	b2da      	uxtb	r2, r3
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800c0f6:	69fa      	ldr	r2, [r7, #28]
 800c0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0fa:	4413      	add	r3, r2
 800c0fc:	61fb      	str	r3, [r7, #28]
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	699a      	ldr	r2, [r3, #24]
 800c102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c104:	441a      	add	r2, r3
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	619a      	str	r2, [r3, #24]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	68da      	ldr	r2, [r3, #12]
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	699b      	ldr	r3, [r3, #24]
 800c112:	429a      	cmp	r2, r3
 800c114:	bf38      	it	cc
 800c116:	461a      	movcc	r2, r3
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	60da      	str	r2, [r3, #12]
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	681a      	ldr	r2, [r3, #0]
 800c120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c122:	441a      	add	r2, r3
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	601a      	str	r2, [r3, #0]
 800c128:	687a      	ldr	r2, [r7, #4]
 800c12a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c12c:	1ad3      	subs	r3, r2, r3
 800c12e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	2b00      	cmp	r3, #0
 800c134:	f47f aeb6 	bne.w	800bea4 <f_write+0x8e>
 800c138:	e000      	b.n	800c13c <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800c13a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	7d1b      	ldrb	r3, [r3, #20]
 800c140:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c144:	b2da      	uxtb	r2, r3
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	2100      	movs	r1, #0
 800c14e:	4618      	mov	r0, r3
 800c150:	f7fd fefc 	bl	8009f4c <unlock_fs>
 800c154:	2300      	movs	r3, #0
}
 800c156:	4618      	mov	r0, r3
 800c158:	3730      	adds	r7, #48	@ 0x30
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}

0800c15e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800c15e:	b580      	push	{r7, lr}
 800c160:	b086      	sub	sp, #24
 800c162:	af00      	add	r7, sp, #0
 800c164:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	f107 0208 	add.w	r2, r7, #8
 800c16c:	4611      	mov	r1, r2
 800c16e:	4618      	mov	r0, r3
 800c170:	f7ff fa76 	bl	800b660 <validate>
 800c174:	4603      	mov	r3, r0
 800c176:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800c178:	7dfb      	ldrb	r3, [r7, #23]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d16d      	bne.n	800c25a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	7d1b      	ldrb	r3, [r3, #20]
 800c182:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c186:	2b00      	cmp	r3, #0
 800c188:	d067      	beq.n	800c25a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	7d1b      	ldrb	r3, [r3, #20]
 800c18e:	b25b      	sxtb	r3, r3
 800c190:	2b00      	cmp	r3, #0
 800c192:	da1a      	bge.n	800c1ca <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800c194:	68bb      	ldr	r3, [r7, #8]
 800c196:	7858      	ldrb	r0, [r3, #1]
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6a1a      	ldr	r2, [r3, #32]
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	f7fd fd7e 	bl	8009ca4 <disk_write>
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d006      	beq.n	800c1bc <f_sync+0x5e>
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	2101      	movs	r1, #1
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	f7fd feca 	bl	8009f4c <unlock_fs>
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e055      	b.n	800c268 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	7d1b      	ldrb	r3, [r3, #20]
 800c1c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c1c4:	b2da      	uxtb	r2, r3
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800c1ca:	f7fc fcab 	bl	8008b24 <get_fattime>
 800c1ce:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800c1d0:	68ba      	ldr	r2, [r7, #8]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1d6:	4619      	mov	r1, r3
 800c1d8:	4610      	mov	r0, r2
 800c1da:	f7fe f883 	bl	800a2e4 <move_window>
 800c1de:	4603      	mov	r3, r0
 800c1e0:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800c1e2:	7dfb      	ldrb	r3, [r7, #23]
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d138      	bne.n	800c25a <f_sync+0xfc>
					dir = fp->dir_ptr;
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1ec:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	330b      	adds	r3, #11
 800c1f2:	781a      	ldrb	r2, [r3, #0]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	330b      	adds	r3, #11
 800c1f8:	f042 0220 	orr.w	r2, r2, #32
 800c1fc:	b2d2      	uxtb	r2, r2
 800c1fe:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6818      	ldr	r0, [r3, #0]
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	461a      	mov	r2, r3
 800c20a:	68f9      	ldr	r1, [r7, #12]
 800c20c:	f7fe fd8d 	bl	800ad2a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f103 021c 	add.w	r2, r3, #28
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	4619      	mov	r1, r3
 800c21c:	4610      	mov	r0, r2
 800c21e:	f7fd fdd5 	bl	8009dcc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	3316      	adds	r3, #22
 800c226:	6939      	ldr	r1, [r7, #16]
 800c228:	4618      	mov	r0, r3
 800c22a:	f7fd fdcf 	bl	8009dcc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	3312      	adds	r3, #18
 800c232:	2100      	movs	r1, #0
 800c234:	4618      	mov	r0, r3
 800c236:	f7fd fdae 	bl	8009d96 <st_word>
					fs->wflag = 1;
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	2201      	movs	r2, #1
 800c23e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800c240:	68bb      	ldr	r3, [r7, #8]
 800c242:	4618      	mov	r0, r3
 800c244:	f7fe f87c 	bl	800a340 <sync_fs>
 800c248:	4603      	mov	r3, r0
 800c24a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	7d1b      	ldrb	r3, [r3, #20]
 800c250:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c254:	b2da      	uxtb	r2, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800c25a:	68bb      	ldr	r3, [r7, #8]
 800c25c:	7dfa      	ldrb	r2, [r7, #23]
 800c25e:	4611      	mov	r1, r2
 800c260:	4618      	mov	r0, r3
 800c262:	f7fd fe73 	bl	8009f4c <unlock_fs>
 800c266:	7dfb      	ldrb	r3, [r7, #23]
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3718      	adds	r7, #24
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b084      	sub	sp, #16
 800c274:	af00      	add	r7, sp, #0
 800c276:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f7ff ff70 	bl	800c15e <f_sync>
 800c27e:	4603      	mov	r3, r0
 800c280:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800c282:	7bfb      	ldrb	r3, [r7, #15]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d11d      	bne.n	800c2c4 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f107 0208 	add.w	r2, r7, #8
 800c28e:	4611      	mov	r1, r2
 800c290:	4618      	mov	r0, r3
 800c292:	f7ff f9e5 	bl	800b660 <validate>
 800c296:	4603      	mov	r3, r0
 800c298:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800c29a:	7bfb      	ldrb	r3, [r7, #15]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d111      	bne.n	800c2c4 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	691b      	ldr	r3, [r3, #16]
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	f7fd ff79 	bl	800a19c <dec_lock>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800c2ae:	7bfb      	ldrb	r3, [r7, #15]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d102      	bne.n	800c2ba <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	2100      	movs	r1, #0
 800c2be:	4618      	mov	r0, r3
 800c2c0:	f7fd fe44 	bl	8009f4c <unlock_fs>
#endif
		}
	}
	return res;
 800c2c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2c6:	4618      	mov	r0, r3
 800c2c8:	3710      	adds	r7, #16
 800c2ca:	46bd      	mov	sp, r7
 800c2cc:	bd80      	pop	{r7, pc}

0800c2ce <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800c2ce:	b580      	push	{r7, lr}
 800c2d0:	b092      	sub	sp, #72	@ 0x48
 800c2d2:	af00      	add	r7, sp, #0
 800c2d4:	60f8      	str	r0, [r7, #12]
 800c2d6:	60b9      	str	r1, [r7, #8]
 800c2d8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c2da:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800c2de:	f107 030c 	add.w	r3, r7, #12
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	f7fe ff67 	bl	800b1b8 <find_volume>
 800c2ea:	4603      	mov	r3, r0
 800c2ec:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800c2f0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	f040 8099 	bne.w	800c42c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800c2fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800c300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c302:	695a      	ldr	r2, [r3, #20]
 800c304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c306:	699b      	ldr	r3, [r3, #24]
 800c308:	3b02      	subs	r3, #2
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d804      	bhi.n	800c318 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800c30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c310:	695a      	ldr	r2, [r3, #20]
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	601a      	str	r2, [r3, #0]
 800c316:	e089      	b.n	800c42c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800c318:	2300      	movs	r3, #0
 800c31a:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800c31c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c31e:	781b      	ldrb	r3, [r3, #0]
 800c320:	2b01      	cmp	r3, #1
 800c322:	d128      	bne.n	800c376 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800c324:	2302      	movs	r3, #2
 800c326:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c32a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800c32c:	f107 0314 	add.w	r3, r7, #20
 800c330:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c332:	4618      	mov	r0, r3
 800c334:	f7fe f891 	bl	800a45a <get_fat>
 800c338:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c33a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c340:	d103      	bne.n	800c34a <f_getfree+0x7c>
 800c342:	2301      	movs	r3, #1
 800c344:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c348:	e063      	b.n	800c412 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c34a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d103      	bne.n	800c358 <f_getfree+0x8a>
 800c350:	2302      	movs	r3, #2
 800c352:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c356:	e05c      	b.n	800c412 <f_getfree+0x144>
					if (stat == 0) nfree++;
 800c358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d102      	bne.n	800c364 <f_getfree+0x96>
 800c35e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c360:	3301      	adds	r3, #1
 800c362:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800c364:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c366:	3301      	adds	r3, #1
 800c368:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c36a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c36c:	699b      	ldr	r3, [r3, #24]
 800c36e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c370:	429a      	cmp	r2, r3
 800c372:	d3db      	bcc.n	800c32c <f_getfree+0x5e>
 800c374:	e04d      	b.n	800c412 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800c376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c378:	699b      	ldr	r3, [r3, #24]
 800c37a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c37c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c380:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800c382:	2300      	movs	r3, #0
 800c384:	637b      	str	r3, [r7, #52]	@ 0x34
 800c386:	2300      	movs	r3, #0
 800c388:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800c38a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d113      	bne.n	800c3b8 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800c390:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c394:	1c5a      	adds	r2, r3, #1
 800c396:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c398:	4619      	mov	r1, r3
 800c39a:	f7fd ffa3 	bl	800a2e4 <move_window>
 800c39e:	4603      	mov	r3, r0
 800c3a0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800c3a4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d131      	bne.n	800c410 <f_getfree+0x142>
							p = fs->win;
 800c3ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ae:	3334      	adds	r3, #52	@ 0x34
 800c3b0:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800c3b2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c3b6:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800c3b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3ba:	781b      	ldrb	r3, [r3, #0]
 800c3bc:	2b02      	cmp	r3, #2
 800c3be:	d10f      	bne.n	800c3e0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800c3c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3c2:	f7fd fcad 	bl	8009d20 <ld_word>
 800c3c6:	4603      	mov	r3, r0
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d102      	bne.n	800c3d2 <f_getfree+0x104>
 800c3cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3ce:	3301      	adds	r3, #1
 800c3d0:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800c3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d4:	3302      	adds	r3, #2
 800c3d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800c3d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3da:	3b02      	subs	r3, #2
 800c3dc:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3de:	e010      	b.n	800c402 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c3e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c3e2:	f7fd fcb5 	bl	8009d50 <ld_dword>
 800c3e6:	4603      	mov	r3, r0
 800c3e8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d102      	bne.n	800c3f6 <f_getfree+0x128>
 800c3f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c3f2:	3301      	adds	r3, #1
 800c3f4:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800c3f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	633b      	str	r3, [r7, #48]	@ 0x30
 800c3fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3fe:	3b04      	subs	r3, #4
 800c400:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800c402:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c404:	3b01      	subs	r3, #1
 800c406:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1bd      	bne.n	800c38a <f_getfree+0xbc>
 800c40e:	e000      	b.n	800c412 <f_getfree+0x144>
							if (res != FR_OK) break;
 800c410:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c416:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c41a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c41c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c41e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c420:	791a      	ldrb	r2, [r3, #4]
 800c422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c424:	f042 0201 	orr.w	r2, r2, #1
 800c428:	b2d2      	uxtb	r2, r2
 800c42a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c42c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c42e:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 800c432:	4611      	mov	r1, r2
 800c434:	4618      	mov	r0, r3
 800c436:	f7fd fd89 	bl	8009f4c <unlock_fs>
 800c43a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3748      	adds	r7, #72	@ 0x48
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
	...

0800c448 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c448:	b480      	push	{r7}
 800c44a:	b087      	sub	sp, #28
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	60f8      	str	r0, [r7, #12]
 800c450:	60b9      	str	r1, [r7, #8]
 800c452:	4613      	mov	r3, r2
 800c454:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c456:	2301      	movs	r3, #1
 800c458:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c45a:	2300      	movs	r3, #0
 800c45c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c45e:	4b1f      	ldr	r3, [pc, #124]	@ (800c4dc <FATFS_LinkDriverEx+0x94>)
 800c460:	7a5b      	ldrb	r3, [r3, #9]
 800c462:	b2db      	uxtb	r3, r3
 800c464:	2b00      	cmp	r3, #0
 800c466:	d131      	bne.n	800c4cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c468:	4b1c      	ldr	r3, [pc, #112]	@ (800c4dc <FATFS_LinkDriverEx+0x94>)
 800c46a:	7a5b      	ldrb	r3, [r3, #9]
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	461a      	mov	r2, r3
 800c470:	4b1a      	ldr	r3, [pc, #104]	@ (800c4dc <FATFS_LinkDriverEx+0x94>)
 800c472:	2100      	movs	r1, #0
 800c474:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c476:	4b19      	ldr	r3, [pc, #100]	@ (800c4dc <FATFS_LinkDriverEx+0x94>)
 800c478:	7a5b      	ldrb	r3, [r3, #9]
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	4a17      	ldr	r2, [pc, #92]	@ (800c4dc <FATFS_LinkDriverEx+0x94>)
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	4413      	add	r3, r2
 800c482:	68fa      	ldr	r2, [r7, #12]
 800c484:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c486:	4b15      	ldr	r3, [pc, #84]	@ (800c4dc <FATFS_LinkDriverEx+0x94>)
 800c488:	7a5b      	ldrb	r3, [r3, #9]
 800c48a:	b2db      	uxtb	r3, r3
 800c48c:	461a      	mov	r2, r3
 800c48e:	4b13      	ldr	r3, [pc, #76]	@ (800c4dc <FATFS_LinkDriverEx+0x94>)
 800c490:	4413      	add	r3, r2
 800c492:	79fa      	ldrb	r2, [r7, #7]
 800c494:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c496:	4b11      	ldr	r3, [pc, #68]	@ (800c4dc <FATFS_LinkDriverEx+0x94>)
 800c498:	7a5b      	ldrb	r3, [r3, #9]
 800c49a:	b2db      	uxtb	r3, r3
 800c49c:	1c5a      	adds	r2, r3, #1
 800c49e:	b2d1      	uxtb	r1, r2
 800c4a0:	4a0e      	ldr	r2, [pc, #56]	@ (800c4dc <FATFS_LinkDriverEx+0x94>)
 800c4a2:	7251      	strb	r1, [r2, #9]
 800c4a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c4a6:	7dbb      	ldrb	r3, [r7, #22]
 800c4a8:	3330      	adds	r3, #48	@ 0x30
 800c4aa:	b2da      	uxtb	r2, r3
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	3301      	adds	r3, #1
 800c4b4:	223a      	movs	r2, #58	@ 0x3a
 800c4b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	3302      	adds	r3, #2
 800c4bc:	222f      	movs	r2, #47	@ 0x2f
 800c4be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	3303      	adds	r3, #3
 800c4c4:	2200      	movs	r2, #0
 800c4c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c4cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	371c      	adds	r7, #28
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d8:	4770      	bx	lr
 800c4da:	bf00      	nop
 800c4dc:	20011438 	.word	0x20011438

0800c4e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c4ea:	2200      	movs	r2, #0
 800c4ec:	6839      	ldr	r1, [r7, #0]
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f7ff ffaa 	bl	800c448 <FATFS_LinkDriverEx>
 800c4f4:	4603      	mov	r3, r0
}
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	3708      	adds	r7, #8
 800c4fa:	46bd      	mov	sp, r7
 800c4fc:	bd80      	pop	{r7, pc}

0800c4fe <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 800c4fe:	b580      	push	{r7, lr}
 800c500:	b084      	sub	sp, #16
 800c502:	af00      	add	r7, sp, #0
 800c504:	4603      	mov	r3, r0
 800c506:	6039      	str	r1, [r7, #0]
 800c508:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 800c50a:	2200      	movs	r2, #0
 800c50c:	2101      	movs	r1, #1
 800c50e:	2001      	movs	r0, #1
 800c510:	f000 fabd 	bl	800ca8e <osSemaphoreNew>
 800c514:	4602      	mov	r2, r0
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	2b00      	cmp	r3, #0
 800c520:	bf14      	ite	ne
 800c522:	2301      	movne	r3, #1
 800c524:	2300      	moveq	r3, #0
 800c526:	b2db      	uxtb	r3, r3
 800c528:	60fb      	str	r3, [r7, #12]

    return ret;
 800c52a:	68fb      	ldr	r3, [r7, #12]
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	3710      	adds	r7, #16
 800c530:	46bd      	mov	sp, r7
 800c532:	bd80      	pop	{r7, pc}

0800c534 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b082      	sub	sp, #8
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 fbc5 	bl	800cccc <osSemaphoreDelete>
#endif
    return 1;
 800c542:	2301      	movs	r3, #1
}
 800c544:	4618      	mov	r0, r3
 800c546:	3708      	adds	r7, #8
 800c548:	46bd      	mov	sp, r7
 800c54a:	bd80      	pop	{r7, pc}

0800c54c <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b084      	sub	sp, #16
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  int ret = 0;
 800c554:	2300      	movs	r3, #0
 800c556:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 800c558:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800c55c:	6878      	ldr	r0, [r7, #4]
 800c55e:	f000 fb1f 	bl	800cba0 <osSemaphoreAcquire>
 800c562:	4603      	mov	r3, r0
 800c564:	2b00      	cmp	r3, #0
 800c566:	d101      	bne.n	800c56c <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 800c568:	2301      	movs	r3, #1
 800c56a:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800c56c:	68fb      	ldr	r3, [r7, #12]
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3710      	adds	r7, #16
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}

0800c576 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 800c576:	b580      	push	{r7, lr}
 800c578:	b082      	sub	sp, #8
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fb60 	bl	800cc44 <osSemaphoreRelease>
#endif
}
 800c584:	bf00      	nop
 800c586:	3708      	adds	r7, #8
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}

0800c58c <__NVIC_SetPriority>:
{
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	4603      	mov	r3, r0
 800c594:	6039      	str	r1, [r7, #0]
 800c596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	db0a      	blt.n	800c5b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c5a0:	683b      	ldr	r3, [r7, #0]
 800c5a2:	b2da      	uxtb	r2, r3
 800c5a4:	490c      	ldr	r1, [pc, #48]	@ (800c5d8 <__NVIC_SetPriority+0x4c>)
 800c5a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c5aa:	0112      	lsls	r2, r2, #4
 800c5ac:	b2d2      	uxtb	r2, r2
 800c5ae:	440b      	add	r3, r1
 800c5b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800c5b4:	e00a      	b.n	800c5cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	b2da      	uxtb	r2, r3
 800c5ba:	4908      	ldr	r1, [pc, #32]	@ (800c5dc <__NVIC_SetPriority+0x50>)
 800c5bc:	79fb      	ldrb	r3, [r7, #7]
 800c5be:	f003 030f 	and.w	r3, r3, #15
 800c5c2:	3b04      	subs	r3, #4
 800c5c4:	0112      	lsls	r2, r2, #4
 800c5c6:	b2d2      	uxtb	r2, r2
 800c5c8:	440b      	add	r3, r1
 800c5ca:	761a      	strb	r2, [r3, #24]
}
 800c5cc:	bf00      	nop
 800c5ce:	370c      	adds	r7, #12
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d6:	4770      	bx	lr
 800c5d8:	e000e100 	.word	0xe000e100
 800c5dc:	e000ed00 	.word	0xe000ed00

0800c5e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800c5e4:	4b05      	ldr	r3, [pc, #20]	@ (800c5fc <SysTick_Handler+0x1c>)
 800c5e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c5e8:	f002 fd2a 	bl	800f040 <xTaskGetSchedulerState>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b01      	cmp	r3, #1
 800c5f0:	d001      	beq.n	800c5f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800c5f2:	f003 fd31 	bl	8010058 <xPortSysTickHandler>
  }
}
 800c5f6:	bf00      	nop
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	e000e010 	.word	0xe000e010

0800c600 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800c600:	b580      	push	{r7, lr}
 800c602:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800c604:	2100      	movs	r1, #0
 800c606:	f06f 0004 	mvn.w	r0, #4
 800c60a:	f7ff ffbf 	bl	800c58c <__NVIC_SetPriority>
#endif
}
 800c60e:	bf00      	nop
 800c610:	bd80      	pop	{r7, pc}
	...

0800c614 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800c614:	b480      	push	{r7}
 800c616:	b083      	sub	sp, #12
 800c618:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c61a:	f3ef 8305 	mrs	r3, IPSR
 800c61e:	603b      	str	r3, [r7, #0]
  return(result);
 800c620:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c622:	2b00      	cmp	r3, #0
 800c624:	d003      	beq.n	800c62e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800c626:	f06f 0305 	mvn.w	r3, #5
 800c62a:	607b      	str	r3, [r7, #4]
 800c62c:	e00c      	b.n	800c648 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800c62e:	4b0a      	ldr	r3, [pc, #40]	@ (800c658 <osKernelInitialize+0x44>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d105      	bne.n	800c642 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c636:	4b08      	ldr	r3, [pc, #32]	@ (800c658 <osKernelInitialize+0x44>)
 800c638:	2201      	movs	r2, #1
 800c63a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c63c:	2300      	movs	r3, #0
 800c63e:	607b      	str	r3, [r7, #4]
 800c640:	e002      	b.n	800c648 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800c642:	f04f 33ff 	mov.w	r3, #4294967295
 800c646:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c648:	687b      	ldr	r3, [r7, #4]
}
 800c64a:	4618      	mov	r0, r3
 800c64c:	370c      	adds	r7, #12
 800c64e:	46bd      	mov	sp, r7
 800c650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	20011444 	.word	0x20011444

0800c65c <osKernelGetState>:
  }

  return (osOK);
}

osKernelState_t osKernelGetState (void) {
 800c65c:	b580      	push	{r7, lr}
 800c65e:	b082      	sub	sp, #8
 800c660:	af00      	add	r7, sp, #0
  osKernelState_t state;

  switch (xTaskGetSchedulerState()) {
 800c662:	f002 fced 	bl	800f040 <xTaskGetSchedulerState>
 800c666:	4603      	mov	r3, r0
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d004      	beq.n	800c676 <osKernelGetState+0x1a>
 800c66c:	2b02      	cmp	r3, #2
 800c66e:	d105      	bne.n	800c67c <osKernelGetState+0x20>
    case taskSCHEDULER_RUNNING:
      state = osKernelRunning;
 800c670:	2302      	movs	r3, #2
 800c672:	607b      	str	r3, [r7, #4]
      break;
 800c674:	e00c      	b.n	800c690 <osKernelGetState+0x34>

    case taskSCHEDULER_SUSPENDED:
      state = osKernelLocked;
 800c676:	2303      	movs	r3, #3
 800c678:	607b      	str	r3, [r7, #4]
      break;
 800c67a:	e009      	b.n	800c690 <osKernelGetState+0x34>

    case taskSCHEDULER_NOT_STARTED:
    default:
      if (KernelState == osKernelReady) {
 800c67c:	4b07      	ldr	r3, [pc, #28]	@ (800c69c <osKernelGetState+0x40>)
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	2b01      	cmp	r3, #1
 800c682:	d102      	bne.n	800c68a <osKernelGetState+0x2e>
        state = osKernelReady;
 800c684:	2301      	movs	r3, #1
 800c686:	607b      	str	r3, [r7, #4]
      } else {
        state = osKernelInactive;
      }
      break;
 800c688:	e001      	b.n	800c68e <osKernelGetState+0x32>
        state = osKernelInactive;
 800c68a:	2300      	movs	r3, #0
 800c68c:	607b      	str	r3, [r7, #4]
      break;
 800c68e:	bf00      	nop
  }

  return (state);
 800c690:	687b      	ldr	r3, [r7, #4]
}
 800c692:	4618      	mov	r0, r3
 800c694:	3708      	adds	r7, #8
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}
 800c69a:	bf00      	nop
 800c69c:	20011444 	.word	0x20011444

0800c6a0 <osKernelStart>:

osStatus_t osKernelStart (void) {
 800c6a0:	b580      	push	{r7, lr}
 800c6a2:	b082      	sub	sp, #8
 800c6a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6a6:	f3ef 8305 	mrs	r3, IPSR
 800c6aa:	603b      	str	r3, [r7, #0]
  return(result);
 800c6ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d003      	beq.n	800c6ba <osKernelStart+0x1a>
    stat = osErrorISR;
 800c6b2:	f06f 0305 	mvn.w	r3, #5
 800c6b6:	607b      	str	r3, [r7, #4]
 800c6b8:	e010      	b.n	800c6dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800c6ba:	4b0b      	ldr	r3, [pc, #44]	@ (800c6e8 <osKernelStart+0x48>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	2b01      	cmp	r3, #1
 800c6c0:	d109      	bne.n	800c6d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800c6c2:	f7ff ff9d 	bl	800c600 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c6c6:	4b08      	ldr	r3, [pc, #32]	@ (800c6e8 <osKernelStart+0x48>)
 800c6c8:	2202      	movs	r2, #2
 800c6ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c6cc:	f002 f816 	bl	800e6fc <vTaskStartScheduler>
      stat = osOK;
 800c6d0:	2300      	movs	r3, #0
 800c6d2:	607b      	str	r3, [r7, #4]
 800c6d4:	e002      	b.n	800c6dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800c6d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c6da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800c6dc:	687b      	ldr	r3, [r7, #4]
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3708      	adds	r7, #8
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	20011444 	.word	0x20011444

0800c6ec <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c6f2:	f3ef 8305 	mrs	r3, IPSR
 800c6f6:	603b      	str	r3, [r7, #0]
  return(result);
 800c6f8:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d003      	beq.n	800c706 <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 800c6fe:	f002 f92b 	bl	800e958 <xTaskGetTickCountFromISR>
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	e002      	b.n	800c70c <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800c706:	f002 f917 	bl	800e938 <xTaskGetTickCount>
 800c70a:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 800c70c:	687b      	ldr	r3, [r7, #4]
}
 800c70e:	4618      	mov	r0, r3
 800c710:	3708      	adds	r7, #8
 800c712:	46bd      	mov	sp, r7
 800c714:	bd80      	pop	{r7, pc}

0800c716 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c716:	b580      	push	{r7, lr}
 800c718:	b08e      	sub	sp, #56	@ 0x38
 800c71a:	af04      	add	r7, sp, #16
 800c71c:	60f8      	str	r0, [r7, #12]
 800c71e:	60b9      	str	r1, [r7, #8]
 800c720:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c722:	2300      	movs	r3, #0
 800c724:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c726:	f3ef 8305 	mrs	r3, IPSR
 800c72a:	617b      	str	r3, [r7, #20]
  return(result);
 800c72c:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d17f      	bne.n	800c832 <osThreadNew+0x11c>
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d07c      	beq.n	800c832 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 800c738:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c73c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800c73e:	2318      	movs	r3, #24
 800c740:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800c742:	2300      	movs	r3, #0
 800c744:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800c746:	f04f 33ff 	mov.w	r3, #4294967295
 800c74a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2b00      	cmp	r3, #0
 800c750:	d045      	beq.n	800c7de <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d002      	beq.n	800c760 <osThreadNew+0x4a>
        name = attr->name;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	681b      	ldr	r3, [r3, #0]
 800c75e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	699b      	ldr	r3, [r3, #24]
 800c764:	2b00      	cmp	r3, #0
 800c766:	d002      	beq.n	800c76e <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	699b      	ldr	r3, [r3, #24]
 800c76c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c76e:	69fb      	ldr	r3, [r7, #28]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d008      	beq.n	800c786 <osThreadNew+0x70>
 800c774:	69fb      	ldr	r3, [r7, #28]
 800c776:	2b38      	cmp	r3, #56	@ 0x38
 800c778:	d805      	bhi.n	800c786 <osThreadNew+0x70>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	f003 0301 	and.w	r3, r3, #1
 800c782:	2b00      	cmp	r3, #0
 800c784:	d001      	beq.n	800c78a <osThreadNew+0x74>
        return (NULL);
 800c786:	2300      	movs	r3, #0
 800c788:	e054      	b.n	800c834 <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	695b      	ldr	r3, [r3, #20]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d003      	beq.n	800c79a <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	695b      	ldr	r3, [r3, #20]
 800c796:	089b      	lsrs	r3, r3, #2
 800c798:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	689b      	ldr	r3, [r3, #8]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d00e      	beq.n	800c7c0 <osThreadNew+0xaa>
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	2bab      	cmp	r3, #171	@ 0xab
 800c7a8:	d90a      	bls.n	800c7c0 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d006      	beq.n	800c7c0 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	695b      	ldr	r3, [r3, #20]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d002      	beq.n	800c7c0 <osThreadNew+0xaa>
        mem = 1;
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	61bb      	str	r3, [r7, #24]
 800c7be:	e010      	b.n	800c7e2 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	689b      	ldr	r3, [r3, #8]
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d10c      	bne.n	800c7e2 <osThreadNew+0xcc>
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	68db      	ldr	r3, [r3, #12]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d108      	bne.n	800c7e2 <osThreadNew+0xcc>
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	691b      	ldr	r3, [r3, #16]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d104      	bne.n	800c7e2 <osThreadNew+0xcc>
          mem = 0;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	61bb      	str	r3, [r7, #24]
 800c7dc:	e001      	b.n	800c7e2 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d110      	bne.n	800c80a <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800c7ec:	687a      	ldr	r2, [r7, #4]
 800c7ee:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c7f0:	9202      	str	r2, [sp, #8]
 800c7f2:	9301      	str	r3, [sp, #4]
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	9300      	str	r3, [sp, #0]
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	6a3a      	ldr	r2, [r7, #32]
 800c7fc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c7fe:	68f8      	ldr	r0, [r7, #12]
 800c800:	f001 fd86 	bl	800e310 <xTaskCreateStatic>
 800c804:	4603      	mov	r3, r0
 800c806:	613b      	str	r3, [r7, #16]
 800c808:	e013      	b.n	800c832 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 800c80a:	69bb      	ldr	r3, [r7, #24]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d110      	bne.n	800c832 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c810:	6a3b      	ldr	r3, [r7, #32]
 800c812:	b29a      	uxth	r2, r3
 800c814:	f107 0310 	add.w	r3, r7, #16
 800c818:	9301      	str	r3, [sp, #4]
 800c81a:	69fb      	ldr	r3, [r7, #28]
 800c81c:	9300      	str	r3, [sp, #0]
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800c822:	68f8      	ldr	r0, [r7, #12]
 800c824:	f001 fdd4 	bl	800e3d0 <xTaskCreate>
 800c828:	4603      	mov	r3, r0
 800c82a:	2b01      	cmp	r3, #1
 800c82c:	d001      	beq.n	800c832 <osThreadNew+0x11c>
            hTask = NULL;
 800c82e:	2300      	movs	r3, #0
 800c830:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c832:	693b      	ldr	r3, [r7, #16]
}
 800c834:	4618      	mov	r0, r3
 800c836:	3728      	adds	r7, #40	@ 0x28
 800c838:	46bd      	mov	sp, r7
 800c83a:	bd80      	pop	{r7, pc}

0800c83c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b084      	sub	sp, #16
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c844:	f3ef 8305 	mrs	r3, IPSR
 800c848:	60bb      	str	r3, [r7, #8]
  return(result);
 800c84a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d003      	beq.n	800c858 <osDelay+0x1c>
    stat = osErrorISR;
 800c850:	f06f 0305 	mvn.w	r3, #5
 800c854:	60fb      	str	r3, [r7, #12]
 800c856:	e007      	b.n	800c868 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800c858:	2300      	movs	r3, #0
 800c85a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d002      	beq.n	800c868 <osDelay+0x2c>
      vTaskDelay(ticks);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f001 ff14 	bl	800e690 <vTaskDelay>
    }
  }

  return (stat);
 800c868:	68fb      	ldr	r3, [r7, #12]
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c872:	b580      	push	{r7, lr}
 800c874:	b088      	sub	sp, #32
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800c87a:	2300      	movs	r3, #0
 800c87c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c87e:	f3ef 8305 	mrs	r3, IPSR
 800c882:	60bb      	str	r3, [r7, #8]
  return(result);
 800c884:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c886:	2b00      	cmp	r3, #0
 800c888:	d174      	bne.n	800c974 <osMutexNew+0x102>
    if (attr != NULL) {
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d003      	beq.n	800c898 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	61bb      	str	r3, [r7, #24]
 800c896:	e001      	b.n	800c89c <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c898:	2300      	movs	r3, #0
 800c89a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c89c:	69bb      	ldr	r3, [r7, #24]
 800c89e:	f003 0301 	and.w	r3, r3, #1
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d002      	beq.n	800c8ac <osMutexNew+0x3a>
      rmtx = 1U;
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	617b      	str	r3, [r7, #20]
 800c8aa:	e001      	b.n	800c8b0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	f003 0308 	and.w	r3, r3, #8
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d15c      	bne.n	800c974 <osMutexNew+0x102>
      mem = -1;
 800c8ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c8be:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d015      	beq.n	800c8f2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	689b      	ldr	r3, [r3, #8]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d006      	beq.n	800c8dc <osMutexNew+0x6a>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	68db      	ldr	r3, [r3, #12]
 800c8d2:	2b4f      	cmp	r3, #79	@ 0x4f
 800c8d4:	d902      	bls.n	800c8dc <osMutexNew+0x6a>
          mem = 1;
 800c8d6:	2301      	movs	r3, #1
 800c8d8:	613b      	str	r3, [r7, #16]
 800c8da:	e00c      	b.n	800c8f6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	689b      	ldr	r3, [r3, #8]
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d108      	bne.n	800c8f6 <osMutexNew+0x84>
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	68db      	ldr	r3, [r3, #12]
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d104      	bne.n	800c8f6 <osMutexNew+0x84>
            mem = 0;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	613b      	str	r3, [r7, #16]
 800c8f0:	e001      	b.n	800c8f6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c8f2:	2300      	movs	r3, #0
 800c8f4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c8f6:	693b      	ldr	r3, [r7, #16]
 800c8f8:	2b01      	cmp	r3, #1
 800c8fa:	d112      	bne.n	800c922 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d007      	beq.n	800c912 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	4619      	mov	r1, r3
 800c908:	2004      	movs	r0, #4
 800c90a:	f000 fd94 	bl	800d436 <xQueueCreateMutexStatic>
 800c90e:	61f8      	str	r0, [r7, #28]
 800c910:	e016      	b.n	800c940 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	689b      	ldr	r3, [r3, #8]
 800c916:	4619      	mov	r1, r3
 800c918:	2001      	movs	r0, #1
 800c91a:	f000 fd8c 	bl	800d436 <xQueueCreateMutexStatic>
 800c91e:	61f8      	str	r0, [r7, #28]
 800c920:	e00e      	b.n	800c940 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c922:	693b      	ldr	r3, [r7, #16]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d10b      	bne.n	800c940 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c928:	697b      	ldr	r3, [r7, #20]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d004      	beq.n	800c938 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c92e:	2004      	movs	r0, #4
 800c930:	f000 fd69 	bl	800d406 <xQueueCreateMutex>
 800c934:	61f8      	str	r0, [r7, #28]
 800c936:	e003      	b.n	800c940 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c938:	2001      	movs	r0, #1
 800c93a:	f000 fd64 	bl	800d406 <xQueueCreateMutex>
 800c93e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	2b00      	cmp	r3, #0
 800c944:	d00c      	beq.n	800c960 <osMutexNew+0xee>
        if (attr != NULL) {
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d003      	beq.n	800c954 <osMutexNew+0xe2>
          name = attr->name;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	60fb      	str	r3, [r7, #12]
 800c952:	e001      	b.n	800c958 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c954:	2300      	movs	r3, #0
 800c956:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c958:	68f9      	ldr	r1, [r7, #12]
 800c95a:	69f8      	ldr	r0, [r7, #28]
 800c95c:	f001 fc50 	bl	800e200 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c960:	69fb      	ldr	r3, [r7, #28]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d006      	beq.n	800c974 <osMutexNew+0x102>
 800c966:	697b      	ldr	r3, [r7, #20]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d003      	beq.n	800c974 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	f043 0301 	orr.w	r3, r3, #1
 800c972:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c974:	69fb      	ldr	r3, [r7, #28]
}
 800c976:	4618      	mov	r0, r3
 800c978:	3720      	adds	r7, #32
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}

0800c97e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c97e:	b580      	push	{r7, lr}
 800c980:	b086      	sub	sp, #24
 800c982:	af00      	add	r7, sp, #0
 800c984:	6078      	str	r0, [r7, #4]
 800c986:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f023 0301 	bic.w	r3, r3, #1
 800c98e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f003 0301 	and.w	r3, r3, #1
 800c996:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c998:	2300      	movs	r3, #0
 800c99a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c99c:	f3ef 8305 	mrs	r3, IPSR
 800c9a0:	60bb      	str	r3, [r7, #8]
  return(result);
 800c9a2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d003      	beq.n	800c9b0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c9a8:	f06f 0305 	mvn.w	r3, #5
 800c9ac:	617b      	str	r3, [r7, #20]
 800c9ae:	e02c      	b.n	800ca0a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d103      	bne.n	800c9be <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c9b6:	f06f 0303 	mvn.w	r3, #3
 800c9ba:	617b      	str	r3, [r7, #20]
 800c9bc:	e025      	b.n	800ca0a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d011      	beq.n	800c9e8 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c9c4:	6839      	ldr	r1, [r7, #0]
 800c9c6:	6938      	ldr	r0, [r7, #16]
 800c9c8:	f000 fd85 	bl	800d4d6 <xQueueTakeMutexRecursive>
 800c9cc:	4603      	mov	r3, r0
 800c9ce:	2b01      	cmp	r3, #1
 800c9d0:	d01b      	beq.n	800ca0a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d003      	beq.n	800c9e0 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c9d8:	f06f 0301 	mvn.w	r3, #1
 800c9dc:	617b      	str	r3, [r7, #20]
 800c9de:	e014      	b.n	800ca0a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c9e0:	f06f 0302 	mvn.w	r3, #2
 800c9e4:	617b      	str	r3, [r7, #20]
 800c9e6:	e010      	b.n	800ca0a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c9e8:	6839      	ldr	r1, [r7, #0]
 800c9ea:	6938      	ldr	r0, [r7, #16]
 800c9ec:	f001 f92a 	bl	800dc44 <xQueueSemaphoreTake>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d009      	beq.n	800ca0a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d003      	beq.n	800ca04 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c9fc:	f06f 0301 	mvn.w	r3, #1
 800ca00:	617b      	str	r3, [r7, #20]
 800ca02:	e002      	b.n	800ca0a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800ca04:	f06f 0302 	mvn.w	r3, #2
 800ca08:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800ca0a:	697b      	ldr	r3, [r7, #20]
}
 800ca0c:	4618      	mov	r0, r3
 800ca0e:	3718      	adds	r7, #24
 800ca10:	46bd      	mov	sp, r7
 800ca12:	bd80      	pop	{r7, pc}

0800ca14 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800ca14:	b580      	push	{r7, lr}
 800ca16:	b086      	sub	sp, #24
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	f023 0301 	bic.w	r3, r3, #1
 800ca22:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	f003 0301 	and.w	r3, r3, #1
 800ca2a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca30:	f3ef 8305 	mrs	r3, IPSR
 800ca34:	60bb      	str	r3, [r7, #8]
  return(result);
 800ca36:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d003      	beq.n	800ca44 <osMutexRelease+0x30>
    stat = osErrorISR;
 800ca3c:	f06f 0305 	mvn.w	r3, #5
 800ca40:	617b      	str	r3, [r7, #20]
 800ca42:	e01f      	b.n	800ca84 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d103      	bne.n	800ca52 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800ca4a:	f06f 0303 	mvn.w	r3, #3
 800ca4e:	617b      	str	r3, [r7, #20]
 800ca50:	e018      	b.n	800ca84 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d009      	beq.n	800ca6c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800ca58:	6938      	ldr	r0, [r7, #16]
 800ca5a:	f000 fd07 	bl	800d46c <xQueueGiveMutexRecursive>
 800ca5e:	4603      	mov	r3, r0
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d00f      	beq.n	800ca84 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ca64:	f06f 0302 	mvn.w	r3, #2
 800ca68:	617b      	str	r3, [r7, #20]
 800ca6a:	e00b      	b.n	800ca84 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	2200      	movs	r2, #0
 800ca70:	2100      	movs	r1, #0
 800ca72:	6938      	ldr	r0, [r7, #16]
 800ca74:	f000 fdd4 	bl	800d620 <xQueueGenericSend>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b01      	cmp	r3, #1
 800ca7c:	d002      	beq.n	800ca84 <osMutexRelease+0x70>
        stat = osErrorResource;
 800ca7e:	f06f 0302 	mvn.w	r3, #2
 800ca82:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800ca84:	697b      	ldr	r3, [r7, #20]
}
 800ca86:	4618      	mov	r0, r3
 800ca88:	3718      	adds	r7, #24
 800ca8a:	46bd      	mov	sp, r7
 800ca8c:	bd80      	pop	{r7, pc}

0800ca8e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800ca8e:	b580      	push	{r7, lr}
 800ca90:	b08a      	sub	sp, #40	@ 0x28
 800ca92:	af02      	add	r7, sp, #8
 800ca94:	60f8      	str	r0, [r7, #12]
 800ca96:	60b9      	str	r1, [r7, #8]
 800ca98:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ca9e:	f3ef 8305 	mrs	r3, IPSR
 800caa2:	613b      	str	r3, [r7, #16]
  return(result);
 800caa4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d175      	bne.n	800cb96 <osSemaphoreNew+0x108>
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d072      	beq.n	800cb96 <osSemaphoreNew+0x108>
 800cab0:	68ba      	ldr	r2, [r7, #8]
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d86e      	bhi.n	800cb96 <osSemaphoreNew+0x108>
    mem = -1;
 800cab8:	f04f 33ff 	mov.w	r3, #4294967295
 800cabc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d015      	beq.n	800caf0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	689b      	ldr	r3, [r3, #8]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d006      	beq.n	800cada <osSemaphoreNew+0x4c>
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	68db      	ldr	r3, [r3, #12]
 800cad0:	2b4f      	cmp	r3, #79	@ 0x4f
 800cad2:	d902      	bls.n	800cada <osSemaphoreNew+0x4c>
        mem = 1;
 800cad4:	2301      	movs	r3, #1
 800cad6:	61bb      	str	r3, [r7, #24]
 800cad8:	e00c      	b.n	800caf4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	689b      	ldr	r3, [r3, #8]
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d108      	bne.n	800caf4 <osSemaphoreNew+0x66>
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	68db      	ldr	r3, [r3, #12]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d104      	bne.n	800caf4 <osSemaphoreNew+0x66>
          mem = 0;
 800caea:	2300      	movs	r3, #0
 800caec:	61bb      	str	r3, [r7, #24]
 800caee:	e001      	b.n	800caf4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800caf0:	2300      	movs	r3, #0
 800caf2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800caf4:	69bb      	ldr	r3, [r7, #24]
 800caf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cafa:	d04c      	beq.n	800cb96 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	2b01      	cmp	r3, #1
 800cb00:	d128      	bne.n	800cb54 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	2b01      	cmp	r3, #1
 800cb06:	d10a      	bne.n	800cb1e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	689b      	ldr	r3, [r3, #8]
 800cb0c:	2203      	movs	r2, #3
 800cb0e:	9200      	str	r2, [sp, #0]
 800cb10:	2200      	movs	r2, #0
 800cb12:	2100      	movs	r1, #0
 800cb14:	2001      	movs	r0, #1
 800cb16:	f000 fb81 	bl	800d21c <xQueueGenericCreateStatic>
 800cb1a:	61f8      	str	r0, [r7, #28]
 800cb1c:	e005      	b.n	800cb2a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800cb1e:	2203      	movs	r2, #3
 800cb20:	2100      	movs	r1, #0
 800cb22:	2001      	movs	r0, #1
 800cb24:	f000 fbf7 	bl	800d316 <xQueueGenericCreate>
 800cb28:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800cb2a:	69fb      	ldr	r3, [r7, #28]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d022      	beq.n	800cb76 <osSemaphoreNew+0xe8>
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d01f      	beq.n	800cb76 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cb36:	2300      	movs	r3, #0
 800cb38:	2200      	movs	r2, #0
 800cb3a:	2100      	movs	r1, #0
 800cb3c:	69f8      	ldr	r0, [r7, #28]
 800cb3e:	f000 fd6f 	bl	800d620 <xQueueGenericSend>
 800cb42:	4603      	mov	r3, r0
 800cb44:	2b01      	cmp	r3, #1
 800cb46:	d016      	beq.n	800cb76 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800cb48:	69f8      	ldr	r0, [r7, #28]
 800cb4a:	f001 fa0d 	bl	800df68 <vQueueDelete>
            hSemaphore = NULL;
 800cb4e:	2300      	movs	r3, #0
 800cb50:	61fb      	str	r3, [r7, #28]
 800cb52:	e010      	b.n	800cb76 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800cb54:	69bb      	ldr	r3, [r7, #24]
 800cb56:	2b01      	cmp	r3, #1
 800cb58:	d108      	bne.n	800cb6c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	689b      	ldr	r3, [r3, #8]
 800cb5e:	461a      	mov	r2, r3
 800cb60:	68b9      	ldr	r1, [r7, #8]
 800cb62:	68f8      	ldr	r0, [r7, #12]
 800cb64:	f000 fcee 	bl	800d544 <xQueueCreateCountingSemaphoreStatic>
 800cb68:	61f8      	str	r0, [r7, #28]
 800cb6a:	e004      	b.n	800cb76 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800cb6c:	68b9      	ldr	r1, [r7, #8]
 800cb6e:	68f8      	ldr	r0, [r7, #12]
 800cb70:	f000 fd21 	bl	800d5b6 <xQueueCreateCountingSemaphore>
 800cb74:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800cb76:	69fb      	ldr	r3, [r7, #28]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d00c      	beq.n	800cb96 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d003      	beq.n	800cb8a <osSemaphoreNew+0xfc>
          name = attr->name;
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	617b      	str	r3, [r7, #20]
 800cb88:	e001      	b.n	800cb8e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800cb8e:	6979      	ldr	r1, [r7, #20]
 800cb90:	69f8      	ldr	r0, [r7, #28]
 800cb92:	f001 fb35 	bl	800e200 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800cb96:	69fb      	ldr	r3, [r7, #28]
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3720      	adds	r7, #32
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b086      	sub	sp, #24
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cbae:	2300      	movs	r3, #0
 800cbb0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800cbb2:	693b      	ldr	r3, [r7, #16]
 800cbb4:	2b00      	cmp	r3, #0
 800cbb6:	d103      	bne.n	800cbc0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800cbb8:	f06f 0303 	mvn.w	r3, #3
 800cbbc:	617b      	str	r3, [r7, #20]
 800cbbe:	e039      	b.n	800cc34 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cbc0:	f3ef 8305 	mrs	r3, IPSR
 800cbc4:	60fb      	str	r3, [r7, #12]
  return(result);
 800cbc6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d022      	beq.n	800cc12 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d003      	beq.n	800cbda <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800cbd2:	f06f 0303 	mvn.w	r3, #3
 800cbd6:	617b      	str	r3, [r7, #20]
 800cbd8:	e02c      	b.n	800cc34 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800cbda:	2300      	movs	r3, #0
 800cbdc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800cbde:	f107 0308 	add.w	r3, r7, #8
 800cbe2:	461a      	mov	r2, r3
 800cbe4:	2100      	movs	r1, #0
 800cbe6:	6938      	ldr	r0, [r7, #16]
 800cbe8:	f001 f93c 	bl	800de64 <xQueueReceiveFromISR>
 800cbec:	4603      	mov	r3, r0
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	d003      	beq.n	800cbfa <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800cbf2:	f06f 0302 	mvn.w	r3, #2
 800cbf6:	617b      	str	r3, [r7, #20]
 800cbf8:	e01c      	b.n	800cc34 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800cbfa:	68bb      	ldr	r3, [r7, #8]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d019      	beq.n	800cc34 <osSemaphoreAcquire+0x94>
 800cc00:	4b0f      	ldr	r3, [pc, #60]	@ (800cc40 <osSemaphoreAcquire+0xa0>)
 800cc02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc06:	601a      	str	r2, [r3, #0]
 800cc08:	f3bf 8f4f 	dsb	sy
 800cc0c:	f3bf 8f6f 	isb	sy
 800cc10:	e010      	b.n	800cc34 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800cc12:	6839      	ldr	r1, [r7, #0]
 800cc14:	6938      	ldr	r0, [r7, #16]
 800cc16:	f001 f815 	bl	800dc44 <xQueueSemaphoreTake>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b01      	cmp	r3, #1
 800cc1e:	d009      	beq.n	800cc34 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d003      	beq.n	800cc2e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800cc26:	f06f 0301 	mvn.w	r3, #1
 800cc2a:	617b      	str	r3, [r7, #20]
 800cc2c:	e002      	b.n	800cc34 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800cc2e:	f06f 0302 	mvn.w	r3, #2
 800cc32:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800cc34:	697b      	ldr	r3, [r7, #20]
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3718      	adds	r7, #24
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	e000ed04 	.word	0xe000ed04

0800cc44 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b086      	sub	sp, #24
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800cc50:	2300      	movs	r3, #0
 800cc52:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800cc54:	693b      	ldr	r3, [r7, #16]
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d103      	bne.n	800cc62 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800cc5a:	f06f 0303 	mvn.w	r3, #3
 800cc5e:	617b      	str	r3, [r7, #20]
 800cc60:	e02c      	b.n	800ccbc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cc62:	f3ef 8305 	mrs	r3, IPSR
 800cc66:	60fb      	str	r3, [r7, #12]
  return(result);
 800cc68:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d01a      	beq.n	800cca4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800cc72:	f107 0308 	add.w	r3, r7, #8
 800cc76:	4619      	mov	r1, r3
 800cc78:	6938      	ldr	r0, [r7, #16]
 800cc7a:	f000 fe71 	bl	800d960 <xQueueGiveFromISR>
 800cc7e:	4603      	mov	r3, r0
 800cc80:	2b01      	cmp	r3, #1
 800cc82:	d003      	beq.n	800cc8c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800cc84:	f06f 0302 	mvn.w	r3, #2
 800cc88:	617b      	str	r3, [r7, #20]
 800cc8a:	e017      	b.n	800ccbc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d014      	beq.n	800ccbc <osSemaphoreRelease+0x78>
 800cc92:	4b0d      	ldr	r3, [pc, #52]	@ (800ccc8 <osSemaphoreRelease+0x84>)
 800cc94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cc98:	601a      	str	r2, [r3, #0]
 800cc9a:	f3bf 8f4f 	dsb	sy
 800cc9e:	f3bf 8f6f 	isb	sy
 800cca2:	e00b      	b.n	800ccbc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cca4:	2300      	movs	r3, #0
 800cca6:	2200      	movs	r2, #0
 800cca8:	2100      	movs	r1, #0
 800ccaa:	6938      	ldr	r0, [r7, #16]
 800ccac:	f000 fcb8 	bl	800d620 <xQueueGenericSend>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d002      	beq.n	800ccbc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800ccb6:	f06f 0302 	mvn.w	r3, #2
 800ccba:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ccbc:	697b      	ldr	r3, [r7, #20]
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3718      	adds	r7, #24
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}
 800ccc6:	bf00      	nop
 800ccc8:	e000ed04 	.word	0xe000ed04

0800cccc <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b086      	sub	sp, #24
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ccd8:	f3ef 8305 	mrs	r3, IPSR
 800ccdc:	60fb      	str	r3, [r7, #12]
  return(result);
 800ccde:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d003      	beq.n	800ccec <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 800cce4:	f06f 0305 	mvn.w	r3, #5
 800cce8:	617b      	str	r3, [r7, #20]
 800ccea:	e00e      	b.n	800cd0a <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d103      	bne.n	800ccfa <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 800ccf2:	f06f 0303 	mvn.w	r3, #3
 800ccf6:	617b      	str	r3, [r7, #20]
 800ccf8:	e007      	b.n	800cd0a <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 800ccfa:	6938      	ldr	r0, [r7, #16]
 800ccfc:	f001 faaa 	bl	800e254 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 800cd00:	2300      	movs	r3, #0
 800cd02:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 800cd04:	6938      	ldr	r0, [r7, #16]
 800cd06:	f001 f92f 	bl	800df68 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800cd0a:	697b      	ldr	r3, [r7, #20]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3718      	adds	r7, #24
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b08a      	sub	sp, #40	@ 0x28
 800cd18:	af02      	add	r7, sp, #8
 800cd1a:	60f8      	str	r0, [r7, #12]
 800cd1c:	60b9      	str	r1, [r7, #8]
 800cd1e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800cd20:	2300      	movs	r3, #0
 800cd22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cd24:	f3ef 8305 	mrs	r3, IPSR
 800cd28:	613b      	str	r3, [r7, #16]
  return(result);
 800cd2a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d15f      	bne.n	800cdf0 <osMessageQueueNew+0xdc>
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	2b00      	cmp	r3, #0
 800cd34:	d05c      	beq.n	800cdf0 <osMessageQueueNew+0xdc>
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	2b00      	cmp	r3, #0
 800cd3a:	d059      	beq.n	800cdf0 <osMessageQueueNew+0xdc>
    mem = -1;
 800cd3c:	f04f 33ff 	mov.w	r3, #4294967295
 800cd40:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	2b00      	cmp	r3, #0
 800cd46:	d029      	beq.n	800cd9c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	689b      	ldr	r3, [r3, #8]
 800cd4c:	2b00      	cmp	r3, #0
 800cd4e:	d012      	beq.n	800cd76 <osMessageQueueNew+0x62>
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	68db      	ldr	r3, [r3, #12]
 800cd54:	2b4f      	cmp	r3, #79	@ 0x4f
 800cd56:	d90e      	bls.n	800cd76 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d00a      	beq.n	800cd76 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	695a      	ldr	r2, [r3, #20]
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	68b9      	ldr	r1, [r7, #8]
 800cd68:	fb01 f303 	mul.w	r3, r1, r3
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d302      	bcc.n	800cd76 <osMessageQueueNew+0x62>
        mem = 1;
 800cd70:	2301      	movs	r3, #1
 800cd72:	61bb      	str	r3, [r7, #24]
 800cd74:	e014      	b.n	800cda0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	689b      	ldr	r3, [r3, #8]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d110      	bne.n	800cda0 <osMessageQueueNew+0x8c>
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	68db      	ldr	r3, [r3, #12]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d10c      	bne.n	800cda0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cd8a:	2b00      	cmp	r3, #0
 800cd8c:	d108      	bne.n	800cda0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	695b      	ldr	r3, [r3, #20]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d104      	bne.n	800cda0 <osMessageQueueNew+0x8c>
          mem = 0;
 800cd96:	2300      	movs	r3, #0
 800cd98:	61bb      	str	r3, [r7, #24]
 800cd9a:	e001      	b.n	800cda0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800cda0:	69bb      	ldr	r3, [r7, #24]
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d10b      	bne.n	800cdbe <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	691a      	ldr	r2, [r3, #16]
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	689b      	ldr	r3, [r3, #8]
 800cdae:	2100      	movs	r1, #0
 800cdb0:	9100      	str	r1, [sp, #0]
 800cdb2:	68b9      	ldr	r1, [r7, #8]
 800cdb4:	68f8      	ldr	r0, [r7, #12]
 800cdb6:	f000 fa31 	bl	800d21c <xQueueGenericCreateStatic>
 800cdba:	61f8      	str	r0, [r7, #28]
 800cdbc:	e008      	b.n	800cdd0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800cdbe:	69bb      	ldr	r3, [r7, #24]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d105      	bne.n	800cdd0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	68b9      	ldr	r1, [r7, #8]
 800cdc8:	68f8      	ldr	r0, [r7, #12]
 800cdca:	f000 faa4 	bl	800d316 <xQueueGenericCreate>
 800cdce:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d00c      	beq.n	800cdf0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d003      	beq.n	800cde4 <osMessageQueueNew+0xd0>
        name = attr->name;
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	617b      	str	r3, [r7, #20]
 800cde2:	e001      	b.n	800cde8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800cde4:	2300      	movs	r3, #0
 800cde6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800cde8:	6979      	ldr	r1, [r7, #20]
 800cdea:	69f8      	ldr	r0, [r7, #28]
 800cdec:	f001 fa08 	bl	800e200 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800cdf0:	69fb      	ldr	r3, [r7, #28]
}
 800cdf2:	4618      	mov	r0, r3
 800cdf4:	3720      	adds	r7, #32
 800cdf6:	46bd      	mov	sp, r7
 800cdf8:	bd80      	pop	{r7, pc}
	...

0800cdfc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b088      	sub	sp, #32
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	60f8      	str	r0, [r7, #12]
 800ce04:	60b9      	str	r1, [r7, #8]
 800ce06:	603b      	str	r3, [r7, #0]
 800ce08:	4613      	mov	r3, r2
 800ce0a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ce10:	2300      	movs	r3, #0
 800ce12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce14:	f3ef 8305 	mrs	r3, IPSR
 800ce18:	617b      	str	r3, [r7, #20]
  return(result);
 800ce1a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d028      	beq.n	800ce72 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ce20:	69bb      	ldr	r3, [r7, #24]
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d005      	beq.n	800ce32 <osMessageQueuePut+0x36>
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d002      	beq.n	800ce32 <osMessageQueuePut+0x36>
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d003      	beq.n	800ce3a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800ce32:	f06f 0303 	mvn.w	r3, #3
 800ce36:	61fb      	str	r3, [r7, #28]
 800ce38:	e038      	b.n	800ceac <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800ce3e:	f107 0210 	add.w	r2, r7, #16
 800ce42:	2300      	movs	r3, #0
 800ce44:	68b9      	ldr	r1, [r7, #8]
 800ce46:	69b8      	ldr	r0, [r7, #24]
 800ce48:	f000 fcec 	bl	800d824 <xQueueGenericSendFromISR>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	2b01      	cmp	r3, #1
 800ce50:	d003      	beq.n	800ce5a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800ce52:	f06f 0302 	mvn.w	r3, #2
 800ce56:	61fb      	str	r3, [r7, #28]
 800ce58:	e028      	b.n	800ceac <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800ce5a:	693b      	ldr	r3, [r7, #16]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d025      	beq.n	800ceac <osMessageQueuePut+0xb0>
 800ce60:	4b15      	ldr	r3, [pc, #84]	@ (800ceb8 <osMessageQueuePut+0xbc>)
 800ce62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce66:	601a      	str	r2, [r3, #0]
 800ce68:	f3bf 8f4f 	dsb	sy
 800ce6c:	f3bf 8f6f 	isb	sy
 800ce70:	e01c      	b.n	800ceac <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d002      	beq.n	800ce7e <osMessageQueuePut+0x82>
 800ce78:	68bb      	ldr	r3, [r7, #8]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d103      	bne.n	800ce86 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800ce7e:	f06f 0303 	mvn.w	r3, #3
 800ce82:	61fb      	str	r3, [r7, #28]
 800ce84:	e012      	b.n	800ceac <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ce86:	2300      	movs	r3, #0
 800ce88:	683a      	ldr	r2, [r7, #0]
 800ce8a:	68b9      	ldr	r1, [r7, #8]
 800ce8c:	69b8      	ldr	r0, [r7, #24]
 800ce8e:	f000 fbc7 	bl	800d620 <xQueueGenericSend>
 800ce92:	4603      	mov	r3, r0
 800ce94:	2b01      	cmp	r3, #1
 800ce96:	d009      	beq.n	800ceac <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d003      	beq.n	800cea6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800ce9e:	f06f 0301 	mvn.w	r3, #1
 800cea2:	61fb      	str	r3, [r7, #28]
 800cea4:	e002      	b.n	800ceac <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800cea6:	f06f 0302 	mvn.w	r3, #2
 800ceaa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ceac:	69fb      	ldr	r3, [r7, #28]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	3720      	adds	r7, #32
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	e000ed04 	.word	0xe000ed04

0800cebc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b088      	sub	sp, #32
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
 800cec8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800cece:	2300      	movs	r3, #0
 800ced0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ced2:	f3ef 8305 	mrs	r3, IPSR
 800ced6:	617b      	str	r3, [r7, #20]
  return(result);
 800ced8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d028      	beq.n	800cf30 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cede:	69bb      	ldr	r3, [r7, #24]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d005      	beq.n	800cef0 <osMessageQueueGet+0x34>
 800cee4:	68bb      	ldr	r3, [r7, #8]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d002      	beq.n	800cef0 <osMessageQueueGet+0x34>
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d003      	beq.n	800cef8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800cef0:	f06f 0303 	mvn.w	r3, #3
 800cef4:	61fb      	str	r3, [r7, #28]
 800cef6:	e037      	b.n	800cf68 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800cef8:	2300      	movs	r3, #0
 800cefa:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cefc:	f107 0310 	add.w	r3, r7, #16
 800cf00:	461a      	mov	r2, r3
 800cf02:	68b9      	ldr	r1, [r7, #8]
 800cf04:	69b8      	ldr	r0, [r7, #24]
 800cf06:	f000 ffad 	bl	800de64 <xQueueReceiveFromISR>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d003      	beq.n	800cf18 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800cf10:	f06f 0302 	mvn.w	r3, #2
 800cf14:	61fb      	str	r3, [r7, #28]
 800cf16:	e027      	b.n	800cf68 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800cf18:	693b      	ldr	r3, [r7, #16]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d024      	beq.n	800cf68 <osMessageQueueGet+0xac>
 800cf1e:	4b15      	ldr	r3, [pc, #84]	@ (800cf74 <osMessageQueueGet+0xb8>)
 800cf20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf24:	601a      	str	r2, [r3, #0]
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	f3bf 8f6f 	isb	sy
 800cf2e:	e01b      	b.n	800cf68 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cf30:	69bb      	ldr	r3, [r7, #24]
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d002      	beq.n	800cf3c <osMessageQueueGet+0x80>
 800cf36:	68bb      	ldr	r3, [r7, #8]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d103      	bne.n	800cf44 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800cf3c:	f06f 0303 	mvn.w	r3, #3
 800cf40:	61fb      	str	r3, [r7, #28]
 800cf42:	e011      	b.n	800cf68 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cf44:	683a      	ldr	r2, [r7, #0]
 800cf46:	68b9      	ldr	r1, [r7, #8]
 800cf48:	69b8      	ldr	r0, [r7, #24]
 800cf4a:	f000 fd99 	bl	800da80 <xQueueReceive>
 800cf4e:	4603      	mov	r3, r0
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d009      	beq.n	800cf68 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d003      	beq.n	800cf62 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800cf5a:	f06f 0301 	mvn.w	r3, #1
 800cf5e:	61fb      	str	r3, [r7, #28]
 800cf60:	e002      	b.n	800cf68 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800cf62:	f06f 0302 	mvn.w	r3, #2
 800cf66:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800cf68:	69fb      	ldr	r3, [r7, #28]
}
 800cf6a:	4618      	mov	r0, r3
 800cf6c:	3720      	adds	r7, #32
 800cf6e:	46bd      	mov	sp, r7
 800cf70:	bd80      	pop	{r7, pc}
 800cf72:	bf00      	nop
 800cf74:	e000ed04 	.word	0xe000ed04

0800cf78 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800cf78:	b480      	push	{r7}
 800cf7a:	b085      	sub	sp, #20
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	60f8      	str	r0, [r7, #12]
 800cf80:	60b9      	str	r1, [r7, #8]
 800cf82:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	4a07      	ldr	r2, [pc, #28]	@ (800cfa4 <vApplicationGetIdleTaskMemory+0x2c>)
 800cf88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	4a06      	ldr	r2, [pc, #24]	@ (800cfa8 <vApplicationGetIdleTaskMemory+0x30>)
 800cf8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf96:	601a      	str	r2, [r3, #0]
}
 800cf98:	bf00      	nop
 800cf9a:	3714      	adds	r7, #20
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	20011448 	.word	0x20011448
 800cfa8:	200114f4 	.word	0x200114f4

0800cfac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800cfac:	b480      	push	{r7}
 800cfae:	b085      	sub	sp, #20
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	60f8      	str	r0, [r7, #12]
 800cfb4:	60b9      	str	r1, [r7, #8]
 800cfb6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	4a07      	ldr	r2, [pc, #28]	@ (800cfd8 <vApplicationGetTimerTaskMemory+0x2c>)
 800cfbc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	4a06      	ldr	r2, [pc, #24]	@ (800cfdc <vApplicationGetTimerTaskMemory+0x30>)
 800cfc2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800cfca:	601a      	str	r2, [r3, #0]
}
 800cfcc:	bf00      	nop
 800cfce:	3714      	adds	r7, #20
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr
 800cfd8:	20011cf4 	.word	0x20011cf4
 800cfdc:	20011da0 	.word	0x20011da0

0800cfe0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	f103 0208 	add.w	r2, r3, #8
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f04f 32ff 	mov.w	r2, #4294967295
 800cff8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	f103 0208 	add.w	r2, r3, #8
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	f103 0208 	add.w	r2, r3, #8
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	2200      	movs	r2, #0
 800d012:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d014:	bf00      	nop
 800d016:	370c      	adds	r7, #12
 800d018:	46bd      	mov	sp, r7
 800d01a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01e:	4770      	bx	lr

0800d020 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d020:	b480      	push	{r7}
 800d022:	b083      	sub	sp, #12
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	2200      	movs	r2, #0
 800d02c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d02e:	bf00      	nop
 800d030:	370c      	adds	r7, #12
 800d032:	46bd      	mov	sp, r7
 800d034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d038:	4770      	bx	lr

0800d03a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d03a:	b480      	push	{r7}
 800d03c:	b085      	sub	sp, #20
 800d03e:	af00      	add	r7, sp, #0
 800d040:	6078      	str	r0, [r7, #4]
 800d042:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d04a:	683b      	ldr	r3, [r7, #0]
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	689a      	ldr	r2, [r3, #8]
 800d054:	683b      	ldr	r3, [r7, #0]
 800d056:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	689b      	ldr	r3, [r3, #8]
 800d05c:	683a      	ldr	r2, [r7, #0]
 800d05e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	683a      	ldr	r2, [r7, #0]
 800d064:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	687a      	ldr	r2, [r7, #4]
 800d06a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	1c5a      	adds	r2, r3, #1
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	601a      	str	r2, [r3, #0]
}
 800d076:	bf00      	nop
 800d078:	3714      	adds	r7, #20
 800d07a:	46bd      	mov	sp, r7
 800d07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d080:	4770      	bx	lr

0800d082 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d082:	b480      	push	{r7}
 800d084:	b085      	sub	sp, #20
 800d086:	af00      	add	r7, sp, #0
 800d088:	6078      	str	r0, [r7, #4]
 800d08a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d08c:	683b      	ldr	r3, [r7, #0]
 800d08e:	681b      	ldr	r3, [r3, #0]
 800d090:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d092:	68bb      	ldr	r3, [r7, #8]
 800d094:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d098:	d103      	bne.n	800d0a2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	691b      	ldr	r3, [r3, #16]
 800d09e:	60fb      	str	r3, [r7, #12]
 800d0a0:	e00c      	b.n	800d0bc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	3308      	adds	r3, #8
 800d0a6:	60fb      	str	r3, [r7, #12]
 800d0a8:	e002      	b.n	800d0b0 <vListInsert+0x2e>
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	685b      	ldr	r3, [r3, #4]
 800d0ae:	60fb      	str	r3, [r7, #12]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	685b      	ldr	r3, [r3, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	68ba      	ldr	r2, [r7, #8]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d2f6      	bcs.n	800d0aa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	685a      	ldr	r2, [r3, #4]
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d0c4:	683b      	ldr	r3, [r7, #0]
 800d0c6:	685b      	ldr	r3, [r3, #4]
 800d0c8:	683a      	ldr	r2, [r7, #0]
 800d0ca:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d0cc:	683b      	ldr	r3, [r7, #0]
 800d0ce:	68fa      	ldr	r2, [r7, #12]
 800d0d0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	683a      	ldr	r2, [r7, #0]
 800d0d6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	687a      	ldr	r2, [r7, #4]
 800d0dc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	1c5a      	adds	r2, r3, #1
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	601a      	str	r2, [r3, #0]
}
 800d0e8:	bf00      	nop
 800d0ea:	3714      	adds	r7, #20
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr

0800d0f4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d0f4:	b480      	push	{r7}
 800d0f6:	b085      	sub	sp, #20
 800d0f8:	af00      	add	r7, sp, #0
 800d0fa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	691b      	ldr	r3, [r3, #16]
 800d100:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	6892      	ldr	r2, [r2, #8]
 800d10a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	689b      	ldr	r3, [r3, #8]
 800d110:	687a      	ldr	r2, [r7, #4]
 800d112:	6852      	ldr	r2, [r2, #4]
 800d114:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	685b      	ldr	r3, [r3, #4]
 800d11a:	687a      	ldr	r2, [r7, #4]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d103      	bne.n	800d128 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	689a      	ldr	r2, [r3, #8]
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	1e5a      	subs	r2, r3, #1
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
}
 800d13c:	4618      	mov	r0, r3
 800d13e:	3714      	adds	r7, #20
 800d140:	46bd      	mov	sp, r7
 800d142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d146:	4770      	bx	lr

0800d148 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d148:	b580      	push	{r7, lr}
 800d14a:	b084      	sub	sp, #16
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d10b      	bne.n	800d174 <xQueueGenericReset+0x2c>
	__asm volatile
 800d15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d160:	f383 8811 	msr	BASEPRI, r3
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	f3bf 8f4f 	dsb	sy
 800d16c:	60bb      	str	r3, [r7, #8]
}
 800d16e:	bf00      	nop
 800d170:	bf00      	nop
 800d172:	e7fd      	b.n	800d170 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d174:	f002 fee0 	bl	800ff38 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	681a      	ldr	r2, [r3, #0]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d180:	68f9      	ldr	r1, [r7, #12]
 800d182:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d184:	fb01 f303 	mul.w	r3, r1, r3
 800d188:	441a      	add	r2, r3
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2200      	movs	r2, #0
 800d192:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	681a      	ldr	r2, [r3, #0]
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	681a      	ldr	r2, [r3, #0]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d1a4:	3b01      	subs	r3, #1
 800d1a6:	68f9      	ldr	r1, [r7, #12]
 800d1a8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800d1aa:	fb01 f303 	mul.w	r3, r1, r3
 800d1ae:	441a      	add	r2, r3
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	22ff      	movs	r2, #255	@ 0xff
 800d1b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	22ff      	movs	r2, #255	@ 0xff
 800d1c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800d1c4:	683b      	ldr	r3, [r7, #0]
 800d1c6:	2b00      	cmp	r3, #0
 800d1c8:	d114      	bne.n	800d1f4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	691b      	ldr	r3, [r3, #16]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d01a      	beq.n	800d208 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1d2:	68fb      	ldr	r3, [r7, #12]
 800d1d4:	3310      	adds	r3, #16
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f001 fd5c 	bl	800ec94 <xTaskRemoveFromEventList>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d012      	beq.n	800d208 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d1e2:	4b0d      	ldr	r3, [pc, #52]	@ (800d218 <xQueueGenericReset+0xd0>)
 800d1e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d1e8:	601a      	str	r2, [r3, #0]
 800d1ea:	f3bf 8f4f 	dsb	sy
 800d1ee:	f3bf 8f6f 	isb	sy
 800d1f2:	e009      	b.n	800d208 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	3310      	adds	r3, #16
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f7ff fef1 	bl	800cfe0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	3324      	adds	r3, #36	@ 0x24
 800d202:	4618      	mov	r0, r3
 800d204:	f7ff feec 	bl	800cfe0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d208:	f002 fec8 	bl	800ff9c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d20c:	2301      	movs	r3, #1
}
 800d20e:	4618      	mov	r0, r3
 800d210:	3710      	adds	r7, #16
 800d212:	46bd      	mov	sp, r7
 800d214:	bd80      	pop	{r7, pc}
 800d216:	bf00      	nop
 800d218:	e000ed04 	.word	0xe000ed04

0800d21c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d21c:	b580      	push	{r7, lr}
 800d21e:	b08e      	sub	sp, #56	@ 0x38
 800d220:	af02      	add	r7, sp, #8
 800d222:	60f8      	str	r0, [r7, #12]
 800d224:	60b9      	str	r1, [r7, #8]
 800d226:	607a      	str	r2, [r7, #4]
 800d228:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d10b      	bne.n	800d248 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800d230:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d234:	f383 8811 	msr	BASEPRI, r3
 800d238:	f3bf 8f6f 	isb	sy
 800d23c:	f3bf 8f4f 	dsb	sy
 800d240:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d242:	bf00      	nop
 800d244:	bf00      	nop
 800d246:	e7fd      	b.n	800d244 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d248:	683b      	ldr	r3, [r7, #0]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d10b      	bne.n	800d266 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800d24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d252:	f383 8811 	msr	BASEPRI, r3
 800d256:	f3bf 8f6f 	isb	sy
 800d25a:	f3bf 8f4f 	dsb	sy
 800d25e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d260:	bf00      	nop
 800d262:	bf00      	nop
 800d264:	e7fd      	b.n	800d262 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d002      	beq.n	800d272 <xQueueGenericCreateStatic+0x56>
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d001      	beq.n	800d276 <xQueueGenericCreateStatic+0x5a>
 800d272:	2301      	movs	r3, #1
 800d274:	e000      	b.n	800d278 <xQueueGenericCreateStatic+0x5c>
 800d276:	2300      	movs	r3, #0
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d10b      	bne.n	800d294 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800d27c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d280:	f383 8811 	msr	BASEPRI, r3
 800d284:	f3bf 8f6f 	isb	sy
 800d288:	f3bf 8f4f 	dsb	sy
 800d28c:	623b      	str	r3, [r7, #32]
}
 800d28e:	bf00      	nop
 800d290:	bf00      	nop
 800d292:	e7fd      	b.n	800d290 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d102      	bne.n	800d2a0 <xQueueGenericCreateStatic+0x84>
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d101      	bne.n	800d2a4 <xQueueGenericCreateStatic+0x88>
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	e000      	b.n	800d2a6 <xQueueGenericCreateStatic+0x8a>
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d10b      	bne.n	800d2c2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800d2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2ae:	f383 8811 	msr	BASEPRI, r3
 800d2b2:	f3bf 8f6f 	isb	sy
 800d2b6:	f3bf 8f4f 	dsb	sy
 800d2ba:	61fb      	str	r3, [r7, #28]
}
 800d2bc:	bf00      	nop
 800d2be:	bf00      	nop
 800d2c0:	e7fd      	b.n	800d2be <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d2c2:	2350      	movs	r3, #80	@ 0x50
 800d2c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	2b50      	cmp	r3, #80	@ 0x50
 800d2ca:	d00b      	beq.n	800d2e4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800d2cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2d0:	f383 8811 	msr	BASEPRI, r3
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	61bb      	str	r3, [r7, #24]
}
 800d2de:	bf00      	nop
 800d2e0:	bf00      	nop
 800d2e2:	e7fd      	b.n	800d2e0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d2e4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800d2ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d00d      	beq.n	800d30c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d2f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2f2:	2201      	movs	r2, #1
 800d2f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d2f8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d2fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d2fe:	9300      	str	r3, [sp, #0]
 800d300:	4613      	mov	r3, r2
 800d302:	687a      	ldr	r2, [r7, #4]
 800d304:	68b9      	ldr	r1, [r7, #8]
 800d306:	68f8      	ldr	r0, [r7, #12]
 800d308:	f000 f840 	bl	800d38c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800d30e:	4618      	mov	r0, r3
 800d310:	3730      	adds	r7, #48	@ 0x30
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}

0800d316 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d316:	b580      	push	{r7, lr}
 800d318:	b08a      	sub	sp, #40	@ 0x28
 800d31a:	af02      	add	r7, sp, #8
 800d31c:	60f8      	str	r0, [r7, #12]
 800d31e:	60b9      	str	r1, [r7, #8]
 800d320:	4613      	mov	r3, r2
 800d322:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d10b      	bne.n	800d342 <xQueueGenericCreate+0x2c>
	__asm volatile
 800d32a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d32e:	f383 8811 	msr	BASEPRI, r3
 800d332:	f3bf 8f6f 	isb	sy
 800d336:	f3bf 8f4f 	dsb	sy
 800d33a:	613b      	str	r3, [r7, #16]
}
 800d33c:	bf00      	nop
 800d33e:	bf00      	nop
 800d340:	e7fd      	b.n	800d33e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	68ba      	ldr	r2, [r7, #8]
 800d346:	fb02 f303 	mul.w	r3, r2, r3
 800d34a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d34c:	69fb      	ldr	r3, [r7, #28]
 800d34e:	3350      	adds	r3, #80	@ 0x50
 800d350:	4618      	mov	r0, r3
 800d352:	f002 ff13 	bl	801017c <pvPortMalloc>
 800d356:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d358:	69bb      	ldr	r3, [r7, #24]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d011      	beq.n	800d382 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d35e:	69bb      	ldr	r3, [r7, #24]
 800d360:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	3350      	adds	r3, #80	@ 0x50
 800d366:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	2200      	movs	r2, #0
 800d36c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d370:	79fa      	ldrb	r2, [r7, #7]
 800d372:	69bb      	ldr	r3, [r7, #24]
 800d374:	9300      	str	r3, [sp, #0]
 800d376:	4613      	mov	r3, r2
 800d378:	697a      	ldr	r2, [r7, #20]
 800d37a:	68b9      	ldr	r1, [r7, #8]
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	f000 f805 	bl	800d38c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d382:	69bb      	ldr	r3, [r7, #24]
	}
 800d384:	4618      	mov	r0, r3
 800d386:	3720      	adds	r7, #32
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	60f8      	str	r0, [r7, #12]
 800d394:	60b9      	str	r1, [r7, #8]
 800d396:	607a      	str	r2, [r7, #4]
 800d398:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	2b00      	cmp	r3, #0
 800d39e:	d103      	bne.n	800d3a8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d3a0:	69bb      	ldr	r3, [r7, #24]
 800d3a2:	69ba      	ldr	r2, [r7, #24]
 800d3a4:	601a      	str	r2, [r3, #0]
 800d3a6:	e002      	b.n	800d3ae <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d3a8:	69bb      	ldr	r3, [r7, #24]
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d3ae:	69bb      	ldr	r3, [r7, #24]
 800d3b0:	68fa      	ldr	r2, [r7, #12]
 800d3b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d3b4:	69bb      	ldr	r3, [r7, #24]
 800d3b6:	68ba      	ldr	r2, [r7, #8]
 800d3b8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d3ba:	2101      	movs	r1, #1
 800d3bc:	69b8      	ldr	r0, [r7, #24]
 800d3be:	f7ff fec3 	bl	800d148 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d3c2:	69bb      	ldr	r3, [r7, #24]
 800d3c4:	78fa      	ldrb	r2, [r7, #3]
 800d3c6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d3ca:	bf00      	nop
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}

0800d3d2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d3d2:	b580      	push	{r7, lr}
 800d3d4:	b082      	sub	sp, #8
 800d3d6:	af00      	add	r7, sp, #0
 800d3d8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00e      	beq.n	800d3fe <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	2100      	movs	r1, #0
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f000 f911 	bl	800d620 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d3fe:	bf00      	nop
 800d400:	3708      	adds	r7, #8
 800d402:	46bd      	mov	sp, r7
 800d404:	bd80      	pop	{r7, pc}

0800d406 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d406:	b580      	push	{r7, lr}
 800d408:	b086      	sub	sp, #24
 800d40a:	af00      	add	r7, sp, #0
 800d40c:	4603      	mov	r3, r0
 800d40e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d410:	2301      	movs	r3, #1
 800d412:	617b      	str	r3, [r7, #20]
 800d414:	2300      	movs	r3, #0
 800d416:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d418:	79fb      	ldrb	r3, [r7, #7]
 800d41a:	461a      	mov	r2, r3
 800d41c:	6939      	ldr	r1, [r7, #16]
 800d41e:	6978      	ldr	r0, [r7, #20]
 800d420:	f7ff ff79 	bl	800d316 <xQueueGenericCreate>
 800d424:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d426:	68f8      	ldr	r0, [r7, #12]
 800d428:	f7ff ffd3 	bl	800d3d2 <prvInitialiseMutex>

		return xNewQueue;
 800d42c:	68fb      	ldr	r3, [r7, #12]
	}
 800d42e:	4618      	mov	r0, r3
 800d430:	3718      	adds	r7, #24
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}

0800d436 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d436:	b580      	push	{r7, lr}
 800d438:	b088      	sub	sp, #32
 800d43a:	af02      	add	r7, sp, #8
 800d43c:	4603      	mov	r3, r0
 800d43e:	6039      	str	r1, [r7, #0]
 800d440:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d442:	2301      	movs	r3, #1
 800d444:	617b      	str	r3, [r7, #20]
 800d446:	2300      	movs	r3, #0
 800d448:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d44a:	79fb      	ldrb	r3, [r7, #7]
 800d44c:	9300      	str	r3, [sp, #0]
 800d44e:	683b      	ldr	r3, [r7, #0]
 800d450:	2200      	movs	r2, #0
 800d452:	6939      	ldr	r1, [r7, #16]
 800d454:	6978      	ldr	r0, [r7, #20]
 800d456:	f7ff fee1 	bl	800d21c <xQueueGenericCreateStatic>
 800d45a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d45c:	68f8      	ldr	r0, [r7, #12]
 800d45e:	f7ff ffb8 	bl	800d3d2 <prvInitialiseMutex>

		return xNewQueue;
 800d462:	68fb      	ldr	r3, [r7, #12]
	}
 800d464:	4618      	mov	r0, r3
 800d466:	3718      	adds	r7, #24
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}

0800d46c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800d46c:	b590      	push	{r4, r7, lr}
 800d46e:	b087      	sub	sp, #28
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d10b      	bne.n	800d496 <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 800d47e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d482:	f383 8811 	msr	BASEPRI, r3
 800d486:	f3bf 8f6f 	isb	sy
 800d48a:	f3bf 8f4f 	dsb	sy
 800d48e:	60fb      	str	r3, [r7, #12]
}
 800d490:	bf00      	nop
 800d492:	bf00      	nop
 800d494:	e7fd      	b.n	800d492 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d496:	693b      	ldr	r3, [r7, #16]
 800d498:	689c      	ldr	r4, [r3, #8]
 800d49a:	f001 fdc1 	bl	800f020 <xTaskGetCurrentTaskHandle>
 800d49e:	4603      	mov	r3, r0
 800d4a0:	429c      	cmp	r4, r3
 800d4a2:	d111      	bne.n	800d4c8 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	68db      	ldr	r3, [r3, #12]
 800d4a8:	1e5a      	subs	r2, r3, #1
 800d4aa:	693b      	ldr	r3, [r7, #16]
 800d4ac:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d4ae:	693b      	ldr	r3, [r7, #16]
 800d4b0:	68db      	ldr	r3, [r3, #12]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d105      	bne.n	800d4c2 <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d4b6:	2300      	movs	r3, #0
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	6938      	ldr	r0, [r7, #16]
 800d4be:	f000 f8af 	bl	800d620 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800d4c2:	2301      	movs	r3, #1
 800d4c4:	617b      	str	r3, [r7, #20]
 800d4c6:	e001      	b.n	800d4cc <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800d4cc:	697b      	ldr	r3, [r7, #20]
	}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	371c      	adds	r7, #28
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd90      	pop	{r4, r7, pc}

0800d4d6 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800d4d6:	b590      	push	{r4, r7, lr}
 800d4d8:	b087      	sub	sp, #28
 800d4da:	af00      	add	r7, sp, #0
 800d4dc:	6078      	str	r0, [r7, #4]
 800d4de:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800d4e4:	693b      	ldr	r3, [r7, #16]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d10b      	bne.n	800d502 <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 800d4ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4ee:	f383 8811 	msr	BASEPRI, r3
 800d4f2:	f3bf 8f6f 	isb	sy
 800d4f6:	f3bf 8f4f 	dsb	sy
 800d4fa:	60fb      	str	r3, [r7, #12]
}
 800d4fc:	bf00      	nop
 800d4fe:	bf00      	nop
 800d500:	e7fd      	b.n	800d4fe <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	689c      	ldr	r4, [r3, #8]
 800d506:	f001 fd8b 	bl	800f020 <xTaskGetCurrentTaskHandle>
 800d50a:	4603      	mov	r3, r0
 800d50c:	429c      	cmp	r4, r3
 800d50e:	d107      	bne.n	800d520 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d510:	693b      	ldr	r3, [r7, #16]
 800d512:	68db      	ldr	r3, [r3, #12]
 800d514:	1c5a      	adds	r2, r3, #1
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d51a:	2301      	movs	r3, #1
 800d51c:	617b      	str	r3, [r7, #20]
 800d51e:	e00c      	b.n	800d53a <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d520:	6839      	ldr	r1, [r7, #0]
 800d522:	6938      	ldr	r0, [r7, #16]
 800d524:	f000 fb8e 	bl	800dc44 <xQueueSemaphoreTake>
 800d528:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d004      	beq.n	800d53a <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	68db      	ldr	r3, [r3, #12]
 800d534:	1c5a      	adds	r2, r3, #1
 800d536:	693b      	ldr	r3, [r7, #16]
 800d538:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d53a:	697b      	ldr	r3, [r7, #20]
	}
 800d53c:	4618      	mov	r0, r3
 800d53e:	371c      	adds	r7, #28
 800d540:	46bd      	mov	sp, r7
 800d542:	bd90      	pop	{r4, r7, pc}

0800d544 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d544:	b580      	push	{r7, lr}
 800d546:	b08a      	sub	sp, #40	@ 0x28
 800d548:	af02      	add	r7, sp, #8
 800d54a:	60f8      	str	r0, [r7, #12]
 800d54c:	60b9      	str	r1, [r7, #8]
 800d54e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d10b      	bne.n	800d56e <xQueueCreateCountingSemaphoreStatic+0x2a>
	__asm volatile
 800d556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d55a:	f383 8811 	msr	BASEPRI, r3
 800d55e:	f3bf 8f6f 	isb	sy
 800d562:	f3bf 8f4f 	dsb	sy
 800d566:	61bb      	str	r3, [r7, #24]
}
 800d568:	bf00      	nop
 800d56a:	bf00      	nop
 800d56c:	e7fd      	b.n	800d56a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d56e:	68ba      	ldr	r2, [r7, #8]
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	429a      	cmp	r2, r3
 800d574:	d90b      	bls.n	800d58e <xQueueCreateCountingSemaphoreStatic+0x4a>
	__asm volatile
 800d576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d57a:	f383 8811 	msr	BASEPRI, r3
 800d57e:	f3bf 8f6f 	isb	sy
 800d582:	f3bf 8f4f 	dsb	sy
 800d586:	617b      	str	r3, [r7, #20]
}
 800d588:	bf00      	nop
 800d58a:	bf00      	nop
 800d58c:	e7fd      	b.n	800d58a <xQueueCreateCountingSemaphoreStatic+0x46>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d58e:	2302      	movs	r3, #2
 800d590:	9300      	str	r3, [sp, #0]
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2200      	movs	r2, #0
 800d596:	2100      	movs	r1, #0
 800d598:	68f8      	ldr	r0, [r7, #12]
 800d59a:	f7ff fe3f 	bl	800d21c <xQueueGenericCreateStatic>
 800d59e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d5a0:	69fb      	ldr	r3, [r7, #28]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d002      	beq.n	800d5ac <xQueueCreateCountingSemaphoreStatic+0x68>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d5a6:	69fb      	ldr	r3, [r7, #28]
 800d5a8:	68ba      	ldr	r2, [r7, #8]
 800d5aa:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d5ac:	69fb      	ldr	r3, [r7, #28]
	}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3720      	adds	r7, #32
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}

0800d5b6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d5b6:	b580      	push	{r7, lr}
 800d5b8:	b086      	sub	sp, #24
 800d5ba:	af00      	add	r7, sp, #0
 800d5bc:	6078      	str	r0, [r7, #4]
 800d5be:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d10b      	bne.n	800d5de <xQueueCreateCountingSemaphore+0x28>
	__asm volatile
 800d5c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ca:	f383 8811 	msr	BASEPRI, r3
 800d5ce:	f3bf 8f6f 	isb	sy
 800d5d2:	f3bf 8f4f 	dsb	sy
 800d5d6:	613b      	str	r3, [r7, #16]
}
 800d5d8:	bf00      	nop
 800d5da:	bf00      	nop
 800d5dc:	e7fd      	b.n	800d5da <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d5de:	683a      	ldr	r2, [r7, #0]
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d90b      	bls.n	800d5fe <xQueueCreateCountingSemaphore+0x48>
	__asm volatile
 800d5e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5ea:	f383 8811 	msr	BASEPRI, r3
 800d5ee:	f3bf 8f6f 	isb	sy
 800d5f2:	f3bf 8f4f 	dsb	sy
 800d5f6:	60fb      	str	r3, [r7, #12]
}
 800d5f8:	bf00      	nop
 800d5fa:	bf00      	nop
 800d5fc:	e7fd      	b.n	800d5fa <xQueueCreateCountingSemaphore+0x44>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d5fe:	2202      	movs	r2, #2
 800d600:	2100      	movs	r1, #0
 800d602:	6878      	ldr	r0, [r7, #4]
 800d604:	f7ff fe87 	bl	800d316 <xQueueGenericCreate>
 800d608:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d002      	beq.n	800d616 <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	683a      	ldr	r2, [r7, #0]
 800d614:	639a      	str	r2, [r3, #56]	@ 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d616:	697b      	ldr	r3, [r7, #20]
	}
 800d618:	4618      	mov	r0, r3
 800d61a:	3718      	adds	r7, #24
 800d61c:	46bd      	mov	sp, r7
 800d61e:	bd80      	pop	{r7, pc}

0800d620 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d620:	b580      	push	{r7, lr}
 800d622:	b08e      	sub	sp, #56	@ 0x38
 800d624:	af00      	add	r7, sp, #0
 800d626:	60f8      	str	r0, [r7, #12]
 800d628:	60b9      	str	r1, [r7, #8]
 800d62a:	607a      	str	r2, [r7, #4]
 800d62c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d62e:	2300      	movs	r3, #0
 800d630:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800d636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d10b      	bne.n	800d654 <xQueueGenericSend+0x34>
	__asm volatile
 800d63c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d640:	f383 8811 	msr	BASEPRI, r3
 800d644:	f3bf 8f6f 	isb	sy
 800d648:	f3bf 8f4f 	dsb	sy
 800d64c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d64e:	bf00      	nop
 800d650:	bf00      	nop
 800d652:	e7fd      	b.n	800d650 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d654:	68bb      	ldr	r3, [r7, #8]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d103      	bne.n	800d662 <xQueueGenericSend+0x42>
 800d65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d65c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d101      	bne.n	800d666 <xQueueGenericSend+0x46>
 800d662:	2301      	movs	r3, #1
 800d664:	e000      	b.n	800d668 <xQueueGenericSend+0x48>
 800d666:	2300      	movs	r3, #0
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d10b      	bne.n	800d684 <xQueueGenericSend+0x64>
	__asm volatile
 800d66c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d670:	f383 8811 	msr	BASEPRI, r3
 800d674:	f3bf 8f6f 	isb	sy
 800d678:	f3bf 8f4f 	dsb	sy
 800d67c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d67e:	bf00      	nop
 800d680:	bf00      	nop
 800d682:	e7fd      	b.n	800d680 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d684:	683b      	ldr	r3, [r7, #0]
 800d686:	2b02      	cmp	r3, #2
 800d688:	d103      	bne.n	800d692 <xQueueGenericSend+0x72>
 800d68a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d68c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d101      	bne.n	800d696 <xQueueGenericSend+0x76>
 800d692:	2301      	movs	r3, #1
 800d694:	e000      	b.n	800d698 <xQueueGenericSend+0x78>
 800d696:	2300      	movs	r3, #0
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d10b      	bne.n	800d6b4 <xQueueGenericSend+0x94>
	__asm volatile
 800d69c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6a0:	f383 8811 	msr	BASEPRI, r3
 800d6a4:	f3bf 8f6f 	isb	sy
 800d6a8:	f3bf 8f4f 	dsb	sy
 800d6ac:	623b      	str	r3, [r7, #32]
}
 800d6ae:	bf00      	nop
 800d6b0:	bf00      	nop
 800d6b2:	e7fd      	b.n	800d6b0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d6b4:	f001 fcc4 	bl	800f040 <xTaskGetSchedulerState>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d102      	bne.n	800d6c4 <xQueueGenericSend+0xa4>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d101      	bne.n	800d6c8 <xQueueGenericSend+0xa8>
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	e000      	b.n	800d6ca <xQueueGenericSend+0xaa>
 800d6c8:	2300      	movs	r3, #0
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d10b      	bne.n	800d6e6 <xQueueGenericSend+0xc6>
	__asm volatile
 800d6ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d6d2:	f383 8811 	msr	BASEPRI, r3
 800d6d6:	f3bf 8f6f 	isb	sy
 800d6da:	f3bf 8f4f 	dsb	sy
 800d6de:	61fb      	str	r3, [r7, #28]
}
 800d6e0:	bf00      	nop
 800d6e2:	bf00      	nop
 800d6e4:	e7fd      	b.n	800d6e2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d6e6:	f002 fc27 	bl	800ff38 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d6ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d6f2:	429a      	cmp	r2, r3
 800d6f4:	d302      	bcc.n	800d6fc <xQueueGenericSend+0xdc>
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	2b02      	cmp	r3, #2
 800d6fa:	d129      	bne.n	800d750 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d6fc:	683a      	ldr	r2, [r7, #0]
 800d6fe:	68b9      	ldr	r1, [r7, #8]
 800d700:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d702:	f000 fc6d 	bl	800dfe0 <prvCopyDataToQueue>
 800d706:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d708:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d70a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d010      	beq.n	800d732 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d712:	3324      	adds	r3, #36	@ 0x24
 800d714:	4618      	mov	r0, r3
 800d716:	f001 fabd 	bl	800ec94 <xTaskRemoveFromEventList>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d013      	beq.n	800d748 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d720:	4b3f      	ldr	r3, [pc, #252]	@ (800d820 <xQueueGenericSend+0x200>)
 800d722:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d726:	601a      	str	r2, [r3, #0]
 800d728:	f3bf 8f4f 	dsb	sy
 800d72c:	f3bf 8f6f 	isb	sy
 800d730:	e00a      	b.n	800d748 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d734:	2b00      	cmp	r3, #0
 800d736:	d007      	beq.n	800d748 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d738:	4b39      	ldr	r3, [pc, #228]	@ (800d820 <xQueueGenericSend+0x200>)
 800d73a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d73e:	601a      	str	r2, [r3, #0]
 800d740:	f3bf 8f4f 	dsb	sy
 800d744:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d748:	f002 fc28 	bl	800ff9c <vPortExitCritical>
				return pdPASS;
 800d74c:	2301      	movs	r3, #1
 800d74e:	e063      	b.n	800d818 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d103      	bne.n	800d75e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d756:	f002 fc21 	bl	800ff9c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d75a:	2300      	movs	r3, #0
 800d75c:	e05c      	b.n	800d818 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d75e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d760:	2b00      	cmp	r3, #0
 800d762:	d106      	bne.n	800d772 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d764:	f107 0314 	add.w	r3, r7, #20
 800d768:	4618      	mov	r0, r3
 800d76a:	f001 faf7 	bl	800ed5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d76e:	2301      	movs	r3, #1
 800d770:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d772:	f002 fc13 	bl	800ff9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d776:	f001 f833 	bl	800e7e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d77a:	f002 fbdd 	bl	800ff38 <vPortEnterCritical>
 800d77e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d780:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800d784:	b25b      	sxtb	r3, r3
 800d786:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d78a:	d103      	bne.n	800d794 <xQueueGenericSend+0x174>
 800d78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d78e:	2200      	movs	r2, #0
 800d790:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800d794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d796:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d79a:	b25b      	sxtb	r3, r3
 800d79c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d7a0:	d103      	bne.n	800d7aa <xQueueGenericSend+0x18a>
 800d7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7a4:	2200      	movs	r2, #0
 800d7a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800d7aa:	f002 fbf7 	bl	800ff9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d7ae:	1d3a      	adds	r2, r7, #4
 800d7b0:	f107 0314 	add.w	r3, r7, #20
 800d7b4:	4611      	mov	r1, r2
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	f001 fae6 	bl	800ed88 <xTaskCheckForTimeOut>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d124      	bne.n	800d80c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d7c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d7c4:	f000 fd04 	bl	800e1d0 <prvIsQueueFull>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d018      	beq.n	800d800 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d7d0:	3310      	adds	r3, #16
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	4611      	mov	r1, r2
 800d7d6:	4618      	mov	r0, r3
 800d7d8:	f001 fa0a 	bl	800ebf0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d7dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d7de:	f000 fc8f 	bl	800e100 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d7e2:	f001 f80b 	bl	800e7fc <xTaskResumeAll>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	f47f af7c 	bne.w	800d6e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800d7ee:	4b0c      	ldr	r3, [pc, #48]	@ (800d820 <xQueueGenericSend+0x200>)
 800d7f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d7f4:	601a      	str	r2, [r3, #0]
 800d7f6:	f3bf 8f4f 	dsb	sy
 800d7fa:	f3bf 8f6f 	isb	sy
 800d7fe:	e772      	b.n	800d6e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d800:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d802:	f000 fc7d 	bl	800e100 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d806:	f000 fff9 	bl	800e7fc <xTaskResumeAll>
 800d80a:	e76c      	b.n	800d6e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d80c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d80e:	f000 fc77 	bl	800e100 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d812:	f000 fff3 	bl	800e7fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d816:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d818:	4618      	mov	r0, r3
 800d81a:	3738      	adds	r7, #56	@ 0x38
 800d81c:	46bd      	mov	sp, r7
 800d81e:	bd80      	pop	{r7, pc}
 800d820:	e000ed04 	.word	0xe000ed04

0800d824 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d824:	b580      	push	{r7, lr}
 800d826:	b090      	sub	sp, #64	@ 0x40
 800d828:	af00      	add	r7, sp, #0
 800d82a:	60f8      	str	r0, [r7, #12]
 800d82c:	60b9      	str	r1, [r7, #8]
 800d82e:	607a      	str	r2, [r7, #4]
 800d830:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800d836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d10b      	bne.n	800d854 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800d83c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d840:	f383 8811 	msr	BASEPRI, r3
 800d844:	f3bf 8f6f 	isb	sy
 800d848:	f3bf 8f4f 	dsb	sy
 800d84c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800d84e:	bf00      	nop
 800d850:	bf00      	nop
 800d852:	e7fd      	b.n	800d850 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d854:	68bb      	ldr	r3, [r7, #8]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d103      	bne.n	800d862 <xQueueGenericSendFromISR+0x3e>
 800d85a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d85c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d101      	bne.n	800d866 <xQueueGenericSendFromISR+0x42>
 800d862:	2301      	movs	r3, #1
 800d864:	e000      	b.n	800d868 <xQueueGenericSendFromISR+0x44>
 800d866:	2300      	movs	r3, #0
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d10b      	bne.n	800d884 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800d86c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d870:	f383 8811 	msr	BASEPRI, r3
 800d874:	f3bf 8f6f 	isb	sy
 800d878:	f3bf 8f4f 	dsb	sy
 800d87c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800d87e:	bf00      	nop
 800d880:	bf00      	nop
 800d882:	e7fd      	b.n	800d880 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d884:	683b      	ldr	r3, [r7, #0]
 800d886:	2b02      	cmp	r3, #2
 800d888:	d103      	bne.n	800d892 <xQueueGenericSendFromISR+0x6e>
 800d88a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d88c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d88e:	2b01      	cmp	r3, #1
 800d890:	d101      	bne.n	800d896 <xQueueGenericSendFromISR+0x72>
 800d892:	2301      	movs	r3, #1
 800d894:	e000      	b.n	800d898 <xQueueGenericSendFromISR+0x74>
 800d896:	2300      	movs	r3, #0
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d10b      	bne.n	800d8b4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800d89c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8a0:	f383 8811 	msr	BASEPRI, r3
 800d8a4:	f3bf 8f6f 	isb	sy
 800d8a8:	f3bf 8f4f 	dsb	sy
 800d8ac:	623b      	str	r3, [r7, #32]
}
 800d8ae:	bf00      	nop
 800d8b0:	bf00      	nop
 800d8b2:	e7fd      	b.n	800d8b0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d8b4:	f002 fc20 	bl	80100f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d8b8:	f3ef 8211 	mrs	r2, BASEPRI
 800d8bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8c0:	f383 8811 	msr	BASEPRI, r3
 800d8c4:	f3bf 8f6f 	isb	sy
 800d8c8:	f3bf 8f4f 	dsb	sy
 800d8cc:	61fa      	str	r2, [r7, #28]
 800d8ce:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d8d0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d8d2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d8d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d8d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d302      	bcc.n	800d8e6 <xQueueGenericSendFromISR+0xc2>
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	2b02      	cmp	r3, #2
 800d8e4:	d12f      	bne.n	800d946 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d8e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800d8ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d8f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d8f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d8f6:	683a      	ldr	r2, [r7, #0]
 800d8f8:	68b9      	ldr	r1, [r7, #8]
 800d8fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d8fc:	f000 fb70 	bl	800dfe0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d900:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800d904:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d908:	d112      	bne.n	800d930 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d90c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d90e:	2b00      	cmp	r3, #0
 800d910:	d016      	beq.n	800d940 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d914:	3324      	adds	r3, #36	@ 0x24
 800d916:	4618      	mov	r0, r3
 800d918:	f001 f9bc 	bl	800ec94 <xTaskRemoveFromEventList>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d00e      	beq.n	800d940 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d00b      	beq.n	800d940 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	2201      	movs	r2, #1
 800d92c:	601a      	str	r2, [r3, #0]
 800d92e:	e007      	b.n	800d940 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d930:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800d934:	3301      	adds	r3, #1
 800d936:	b2db      	uxtb	r3, r3
 800d938:	b25a      	sxtb	r2, r3
 800d93a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d93c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800d940:	2301      	movs	r3, #1
 800d942:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800d944:	e001      	b.n	800d94a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d946:	2300      	movs	r3, #0
 800d948:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d94a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d94c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d94e:	697b      	ldr	r3, [r7, #20]
 800d950:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d954:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800d958:	4618      	mov	r0, r3
 800d95a:	3740      	adds	r7, #64	@ 0x40
 800d95c:	46bd      	mov	sp, r7
 800d95e:	bd80      	pop	{r7, pc}

0800d960 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d960:	b580      	push	{r7, lr}
 800d962:	b08e      	sub	sp, #56	@ 0x38
 800d964:	af00      	add	r7, sp, #0
 800d966:	6078      	str	r0, [r7, #4]
 800d968:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d970:	2b00      	cmp	r3, #0
 800d972:	d10b      	bne.n	800d98c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800d974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d978:	f383 8811 	msr	BASEPRI, r3
 800d97c:	f3bf 8f6f 	isb	sy
 800d980:	f3bf 8f4f 	dsb	sy
 800d984:	623b      	str	r3, [r7, #32]
}
 800d986:	bf00      	nop
 800d988:	bf00      	nop
 800d98a:	e7fd      	b.n	800d988 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d98c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d98e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800d990:	2b00      	cmp	r3, #0
 800d992:	d00b      	beq.n	800d9ac <xQueueGiveFromISR+0x4c>
	__asm volatile
 800d994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d998:	f383 8811 	msr	BASEPRI, r3
 800d99c:	f3bf 8f6f 	isb	sy
 800d9a0:	f3bf 8f4f 	dsb	sy
 800d9a4:	61fb      	str	r3, [r7, #28]
}
 800d9a6:	bf00      	nop
 800d9a8:	bf00      	nop
 800d9aa:	e7fd      	b.n	800d9a8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d9ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d103      	bne.n	800d9bc <xQueueGiveFromISR+0x5c>
 800d9b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9b6:	689b      	ldr	r3, [r3, #8]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d101      	bne.n	800d9c0 <xQueueGiveFromISR+0x60>
 800d9bc:	2301      	movs	r3, #1
 800d9be:	e000      	b.n	800d9c2 <xQueueGiveFromISR+0x62>
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d10b      	bne.n	800d9de <xQueueGiveFromISR+0x7e>
	__asm volatile
 800d9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ca:	f383 8811 	msr	BASEPRI, r3
 800d9ce:	f3bf 8f6f 	isb	sy
 800d9d2:	f3bf 8f4f 	dsb	sy
 800d9d6:	61bb      	str	r3, [r7, #24]
}
 800d9d8:	bf00      	nop
 800d9da:	bf00      	nop
 800d9dc:	e7fd      	b.n	800d9da <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d9de:	f002 fb8b 	bl	80100f8 <vPortValidateInterruptPriority>
	__asm volatile
 800d9e2:	f3ef 8211 	mrs	r2, BASEPRI
 800d9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ea:	f383 8811 	msr	BASEPRI, r3
 800d9ee:	f3bf 8f6f 	isb	sy
 800d9f2:	f3bf 8f4f 	dsb	sy
 800d9f6:	617a      	str	r2, [r7, #20]
 800d9f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d9fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d9fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800da02:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800da04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800da08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d22b      	bcs.n	800da66 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800da0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da10:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800da14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da1a:	1c5a      	adds	r2, r3, #1
 800da1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da1e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800da20:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800da24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da28:	d112      	bne.n	800da50 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d016      	beq.n	800da60 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da34:	3324      	adds	r3, #36	@ 0x24
 800da36:	4618      	mov	r0, r3
 800da38:	f001 f92c 	bl	800ec94 <xTaskRemoveFromEventList>
 800da3c:	4603      	mov	r3, r0
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d00e      	beq.n	800da60 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	2b00      	cmp	r3, #0
 800da46:	d00b      	beq.n	800da60 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800da48:	683b      	ldr	r3, [r7, #0]
 800da4a:	2201      	movs	r2, #1
 800da4c:	601a      	str	r2, [r3, #0]
 800da4e:	e007      	b.n	800da60 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800da50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800da54:	3301      	adds	r3, #1
 800da56:	b2db      	uxtb	r3, r3
 800da58:	b25a      	sxtb	r2, r3
 800da5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800da60:	2301      	movs	r3, #1
 800da62:	637b      	str	r3, [r7, #52]	@ 0x34
 800da64:	e001      	b.n	800da6a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800da66:	2300      	movs	r3, #0
 800da68:	637b      	str	r3, [r7, #52]	@ 0x34
 800da6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da6c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	f383 8811 	msr	BASEPRI, r3
}
 800da74:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800da78:	4618      	mov	r0, r3
 800da7a:	3738      	adds	r7, #56	@ 0x38
 800da7c:	46bd      	mov	sp, r7
 800da7e:	bd80      	pop	{r7, pc}

0800da80 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b08c      	sub	sp, #48	@ 0x30
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800da8c:	2300      	movs	r3, #0
 800da8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800da94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da96:	2b00      	cmp	r3, #0
 800da98:	d10b      	bne.n	800dab2 <xQueueReceive+0x32>
	__asm volatile
 800da9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da9e:	f383 8811 	msr	BASEPRI, r3
 800daa2:	f3bf 8f6f 	isb	sy
 800daa6:	f3bf 8f4f 	dsb	sy
 800daaa:	623b      	str	r3, [r7, #32]
}
 800daac:	bf00      	nop
 800daae:	bf00      	nop
 800dab0:	e7fd      	b.n	800daae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d103      	bne.n	800dac0 <xQueueReceive+0x40>
 800dab8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d101      	bne.n	800dac4 <xQueueReceive+0x44>
 800dac0:	2301      	movs	r3, #1
 800dac2:	e000      	b.n	800dac6 <xQueueReceive+0x46>
 800dac4:	2300      	movs	r3, #0
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d10b      	bne.n	800dae2 <xQueueReceive+0x62>
	__asm volatile
 800daca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dace:	f383 8811 	msr	BASEPRI, r3
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	f3bf 8f4f 	dsb	sy
 800dada:	61fb      	str	r3, [r7, #28]
}
 800dadc:	bf00      	nop
 800dade:	bf00      	nop
 800dae0:	e7fd      	b.n	800dade <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dae2:	f001 faad 	bl	800f040 <xTaskGetSchedulerState>
 800dae6:	4603      	mov	r3, r0
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d102      	bne.n	800daf2 <xQueueReceive+0x72>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d101      	bne.n	800daf6 <xQueueReceive+0x76>
 800daf2:	2301      	movs	r3, #1
 800daf4:	e000      	b.n	800daf8 <xQueueReceive+0x78>
 800daf6:	2300      	movs	r3, #0
 800daf8:	2b00      	cmp	r3, #0
 800dafa:	d10b      	bne.n	800db14 <xQueueReceive+0x94>
	__asm volatile
 800dafc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db00:	f383 8811 	msr	BASEPRI, r3
 800db04:	f3bf 8f6f 	isb	sy
 800db08:	f3bf 8f4f 	dsb	sy
 800db0c:	61bb      	str	r3, [r7, #24]
}
 800db0e:	bf00      	nop
 800db10:	bf00      	nop
 800db12:	e7fd      	b.n	800db10 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db14:	f002 fa10 	bl	800ff38 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800db18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800db1c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db20:	2b00      	cmp	r3, #0
 800db22:	d01f      	beq.n	800db64 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800db24:	68b9      	ldr	r1, [r7, #8]
 800db26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800db28:	f000 fac4 	bl	800e0b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800db2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db2e:	1e5a      	subs	r2, r3, #1
 800db30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db32:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db36:	691b      	ldr	r3, [r3, #16]
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d00f      	beq.n	800db5c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db3e:	3310      	adds	r3, #16
 800db40:	4618      	mov	r0, r3
 800db42:	f001 f8a7 	bl	800ec94 <xTaskRemoveFromEventList>
 800db46:	4603      	mov	r3, r0
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d007      	beq.n	800db5c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800db4c:	4b3c      	ldr	r3, [pc, #240]	@ (800dc40 <xQueueReceive+0x1c0>)
 800db4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db52:	601a      	str	r2, [r3, #0]
 800db54:	f3bf 8f4f 	dsb	sy
 800db58:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800db5c:	f002 fa1e 	bl	800ff9c <vPortExitCritical>
				return pdPASS;
 800db60:	2301      	movs	r3, #1
 800db62:	e069      	b.n	800dc38 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d103      	bne.n	800db72 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800db6a:	f002 fa17 	bl	800ff9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800db6e:	2300      	movs	r3, #0
 800db70:	e062      	b.n	800dc38 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db74:	2b00      	cmp	r3, #0
 800db76:	d106      	bne.n	800db86 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db78:	f107 0310 	add.w	r3, r7, #16
 800db7c:	4618      	mov	r0, r3
 800db7e:	f001 f8ed 	bl	800ed5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800db82:	2301      	movs	r3, #1
 800db84:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800db86:	f002 fa09 	bl	800ff9c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800db8a:	f000 fe29 	bl	800e7e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800db8e:	f002 f9d3 	bl	800ff38 <vPortEnterCritical>
 800db92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800db98:	b25b      	sxtb	r3, r3
 800db9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db9e:	d103      	bne.n	800dba8 <xQueueReceive+0x128>
 800dba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dba2:	2200      	movs	r2, #0
 800dba4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbaa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dbae:	b25b      	sxtb	r3, r3
 800dbb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbb4:	d103      	bne.n	800dbbe <xQueueReceive+0x13e>
 800dbb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbb8:	2200      	movs	r2, #0
 800dbba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dbbe:	f002 f9ed 	bl	800ff9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dbc2:	1d3a      	adds	r2, r7, #4
 800dbc4:	f107 0310 	add.w	r3, r7, #16
 800dbc8:	4611      	mov	r1, r2
 800dbca:	4618      	mov	r0, r3
 800dbcc:	f001 f8dc 	bl	800ed88 <xTaskCheckForTimeOut>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d123      	bne.n	800dc1e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dbd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbd8:	f000 fae4 	bl	800e1a4 <prvIsQueueEmpty>
 800dbdc:	4603      	mov	r3, r0
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d017      	beq.n	800dc12 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dbe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbe4:	3324      	adds	r3, #36	@ 0x24
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	4611      	mov	r1, r2
 800dbea:	4618      	mov	r0, r3
 800dbec:	f001 f800 	bl	800ebf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dbf0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dbf2:	f000 fa85 	bl	800e100 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dbf6:	f000 fe01 	bl	800e7fc <xTaskResumeAll>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d189      	bne.n	800db14 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800dc00:	4b0f      	ldr	r3, [pc, #60]	@ (800dc40 <xQueueReceive+0x1c0>)
 800dc02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc06:	601a      	str	r2, [r3, #0]
 800dc08:	f3bf 8f4f 	dsb	sy
 800dc0c:	f3bf 8f6f 	isb	sy
 800dc10:	e780      	b.n	800db14 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800dc12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc14:	f000 fa74 	bl	800e100 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc18:	f000 fdf0 	bl	800e7fc <xTaskResumeAll>
 800dc1c:	e77a      	b.n	800db14 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800dc1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc20:	f000 fa6e 	bl	800e100 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc24:	f000 fdea 	bl	800e7fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800dc2a:	f000 fabb 	bl	800e1a4 <prvIsQueueEmpty>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	f43f af6f 	beq.w	800db14 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dc36:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	3730      	adds	r7, #48	@ 0x30
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}
 800dc40:	e000ed04 	.word	0xe000ed04

0800dc44 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b08e      	sub	sp, #56	@ 0x38
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800dc56:	2300      	movs	r3, #0
 800dc58:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800dc5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d10b      	bne.n	800dc78 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800dc60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc64:	f383 8811 	msr	BASEPRI, r3
 800dc68:	f3bf 8f6f 	isb	sy
 800dc6c:	f3bf 8f4f 	dsb	sy
 800dc70:	623b      	str	r3, [r7, #32]
}
 800dc72:	bf00      	nop
 800dc74:	bf00      	nop
 800dc76:	e7fd      	b.n	800dc74 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dc78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00b      	beq.n	800dc98 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800dc80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc84:	f383 8811 	msr	BASEPRI, r3
 800dc88:	f3bf 8f6f 	isb	sy
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	61fb      	str	r3, [r7, #28]
}
 800dc92:	bf00      	nop
 800dc94:	bf00      	nop
 800dc96:	e7fd      	b.n	800dc94 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dc98:	f001 f9d2 	bl	800f040 <xTaskGetSchedulerState>
 800dc9c:	4603      	mov	r3, r0
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d102      	bne.n	800dca8 <xQueueSemaphoreTake+0x64>
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d101      	bne.n	800dcac <xQueueSemaphoreTake+0x68>
 800dca8:	2301      	movs	r3, #1
 800dcaa:	e000      	b.n	800dcae <xQueueSemaphoreTake+0x6a>
 800dcac:	2300      	movs	r3, #0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d10b      	bne.n	800dcca <xQueueSemaphoreTake+0x86>
	__asm volatile
 800dcb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dcb6:	f383 8811 	msr	BASEPRI, r3
 800dcba:	f3bf 8f6f 	isb	sy
 800dcbe:	f3bf 8f4f 	dsb	sy
 800dcc2:	61bb      	str	r3, [r7, #24]
}
 800dcc4:	bf00      	nop
 800dcc6:	bf00      	nop
 800dcc8:	e7fd      	b.n	800dcc6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800dcca:	f002 f935 	bl	800ff38 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800dcce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dcd2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800dcd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d024      	beq.n	800dd24 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800dcda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcdc:	1e5a      	subs	r2, r3, #1
 800dcde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dce0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dce2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d104      	bne.n	800dcf4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800dcea:	f001 fb23 	bl	800f334 <pvTaskIncrementMutexHeldCount>
 800dcee:	4602      	mov	r2, r0
 800dcf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dcf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf6:	691b      	ldr	r3, [r3, #16]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d00f      	beq.n	800dd1c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dcfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcfe:	3310      	adds	r3, #16
 800dd00:	4618      	mov	r0, r3
 800dd02:	f000 ffc7 	bl	800ec94 <xTaskRemoveFromEventList>
 800dd06:	4603      	mov	r3, r0
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d007      	beq.n	800dd1c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800dd0c:	4b54      	ldr	r3, [pc, #336]	@ (800de60 <xQueueSemaphoreTake+0x21c>)
 800dd0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd12:	601a      	str	r2, [r3, #0]
 800dd14:	f3bf 8f4f 	dsb	sy
 800dd18:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800dd1c:	f002 f93e 	bl	800ff9c <vPortExitCritical>
				return pdPASS;
 800dd20:	2301      	movs	r3, #1
 800dd22:	e098      	b.n	800de56 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d112      	bne.n	800dd50 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800dd2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	d00b      	beq.n	800dd48 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800dd30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd34:	f383 8811 	msr	BASEPRI, r3
 800dd38:	f3bf 8f6f 	isb	sy
 800dd3c:	f3bf 8f4f 	dsb	sy
 800dd40:	617b      	str	r3, [r7, #20]
}
 800dd42:	bf00      	nop
 800dd44:	bf00      	nop
 800dd46:	e7fd      	b.n	800dd44 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800dd48:	f002 f928 	bl	800ff9c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	e082      	b.n	800de56 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800dd50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d106      	bne.n	800dd64 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800dd56:	f107 030c 	add.w	r3, r7, #12
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f000 fffe 	bl	800ed5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dd60:	2301      	movs	r3, #1
 800dd62:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dd64:	f002 f91a 	bl	800ff9c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dd68:	f000 fd3a 	bl	800e7e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dd6c:	f002 f8e4 	bl	800ff38 <vPortEnterCritical>
 800dd70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd72:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800dd76:	b25b      	sxtb	r3, r3
 800dd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd7c:	d103      	bne.n	800dd86 <xQueueSemaphoreTake+0x142>
 800dd7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd80:	2200      	movs	r2, #0
 800dd82:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800dd86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800dd8c:	b25b      	sxtb	r3, r3
 800dd8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd92:	d103      	bne.n	800dd9c <xQueueSemaphoreTake+0x158>
 800dd94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd96:	2200      	movs	r2, #0
 800dd98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800dd9c:	f002 f8fe 	bl	800ff9c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dda0:	463a      	mov	r2, r7
 800dda2:	f107 030c 	add.w	r3, r7, #12
 800dda6:	4611      	mov	r1, r2
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f000 ffed 	bl	800ed88 <xTaskCheckForTimeOut>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d132      	bne.n	800de1a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ddb4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ddb6:	f000 f9f5 	bl	800e1a4 <prvIsQueueEmpty>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d026      	beq.n	800de0e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ddc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d109      	bne.n	800dddc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800ddc8:	f002 f8b6 	bl	800ff38 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ddcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddce:	689b      	ldr	r3, [r3, #8]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f001 f953 	bl	800f07c <xTaskPriorityInherit>
 800ddd6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800ddd8:	f002 f8e0 	bl	800ff9c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ddde:	3324      	adds	r3, #36	@ 0x24
 800dde0:	683a      	ldr	r2, [r7, #0]
 800dde2:	4611      	mov	r1, r2
 800dde4:	4618      	mov	r0, r3
 800dde6:	f000 ff03 	bl	800ebf0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ddea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800ddec:	f000 f988 	bl	800e100 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ddf0:	f000 fd04 	bl	800e7fc <xTaskResumeAll>
 800ddf4:	4603      	mov	r3, r0
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	f47f af67 	bne.w	800dcca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800ddfc:	4b18      	ldr	r3, [pc, #96]	@ (800de60 <xQueueSemaphoreTake+0x21c>)
 800ddfe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800de02:	601a      	str	r2, [r3, #0]
 800de04:	f3bf 8f4f 	dsb	sy
 800de08:	f3bf 8f6f 	isb	sy
 800de0c:	e75d      	b.n	800dcca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800de0e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de10:	f000 f976 	bl	800e100 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800de14:	f000 fcf2 	bl	800e7fc <xTaskResumeAll>
 800de18:	e757      	b.n	800dcca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800de1a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de1c:	f000 f970 	bl	800e100 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800de20:	f000 fcec 	bl	800e7fc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800de24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de26:	f000 f9bd 	bl	800e1a4 <prvIsQueueEmpty>
 800de2a:	4603      	mov	r3, r0
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f43f af4c 	beq.w	800dcca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800de32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de34:	2b00      	cmp	r3, #0
 800de36:	d00d      	beq.n	800de54 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800de38:	f002 f87e 	bl	800ff38 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800de3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800de3e:	f000 f8b7 	bl	800dfb0 <prvGetDisinheritPriorityAfterTimeout>
 800de42:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800de44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de46:	689b      	ldr	r3, [r3, #8]
 800de48:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800de4a:	4618      	mov	r0, r3
 800de4c:	f001 f9ee 	bl	800f22c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800de50:	f002 f8a4 	bl	800ff9c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800de54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800de56:	4618      	mov	r0, r3
 800de58:	3738      	adds	r7, #56	@ 0x38
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	e000ed04 	.word	0xe000ed04

0800de64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800de64:	b580      	push	{r7, lr}
 800de66:	b08e      	sub	sp, #56	@ 0x38
 800de68:	af00      	add	r7, sp, #0
 800de6a:	60f8      	str	r0, [r7, #12]
 800de6c:	60b9      	str	r1, [r7, #8]
 800de6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800de74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de76:	2b00      	cmp	r3, #0
 800de78:	d10b      	bne.n	800de92 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800de7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de7e:	f383 8811 	msr	BASEPRI, r3
 800de82:	f3bf 8f6f 	isb	sy
 800de86:	f3bf 8f4f 	dsb	sy
 800de8a:	623b      	str	r3, [r7, #32]
}
 800de8c:	bf00      	nop
 800de8e:	bf00      	nop
 800de90:	e7fd      	b.n	800de8e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800de92:	68bb      	ldr	r3, [r7, #8]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d103      	bne.n	800dea0 <xQueueReceiveFromISR+0x3c>
 800de98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d101      	bne.n	800dea4 <xQueueReceiveFromISR+0x40>
 800dea0:	2301      	movs	r3, #1
 800dea2:	e000      	b.n	800dea6 <xQueueReceiveFromISR+0x42>
 800dea4:	2300      	movs	r3, #0
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d10b      	bne.n	800dec2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800deaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800deae:	f383 8811 	msr	BASEPRI, r3
 800deb2:	f3bf 8f6f 	isb	sy
 800deb6:	f3bf 8f4f 	dsb	sy
 800deba:	61fb      	str	r3, [r7, #28]
}
 800debc:	bf00      	nop
 800debe:	bf00      	nop
 800dec0:	e7fd      	b.n	800debe <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dec2:	f002 f919 	bl	80100f8 <vPortValidateInterruptPriority>
	__asm volatile
 800dec6:	f3ef 8211 	mrs	r2, BASEPRI
 800deca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dece:	f383 8811 	msr	BASEPRI, r3
 800ded2:	f3bf 8f6f 	isb	sy
 800ded6:	f3bf 8f4f 	dsb	sy
 800deda:	61ba      	str	r2, [r7, #24]
 800dedc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dede:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dee4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dee6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deea:	2b00      	cmp	r3, #0
 800deec:	d02f      	beq.n	800df4e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800deee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800def0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800def4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800def8:	68b9      	ldr	r1, [r7, #8]
 800defa:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800defc:	f000 f8da 	bl	800e0b4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800df00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800df02:	1e5a      	subs	r2, r3, #1
 800df04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df06:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800df08:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800df0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800df10:	d112      	bne.n	800df38 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800df12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df14:	691b      	ldr	r3, [r3, #16]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d016      	beq.n	800df48 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800df1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df1c:	3310      	adds	r3, #16
 800df1e:	4618      	mov	r0, r3
 800df20:	f000 feb8 	bl	800ec94 <xTaskRemoveFromEventList>
 800df24:	4603      	mov	r3, r0
 800df26:	2b00      	cmp	r3, #0
 800df28:	d00e      	beq.n	800df48 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d00b      	beq.n	800df48 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	2201      	movs	r2, #1
 800df34:	601a      	str	r2, [r3, #0]
 800df36:	e007      	b.n	800df48 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800df38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800df3c:	3301      	adds	r3, #1
 800df3e:	b2db      	uxtb	r3, r3
 800df40:	b25a      	sxtb	r2, r3
 800df42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df44:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800df48:	2301      	movs	r3, #1
 800df4a:	637b      	str	r3, [r7, #52]	@ 0x34
 800df4c:	e001      	b.n	800df52 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800df4e:	2300      	movs	r3, #0
 800df50:	637b      	str	r3, [r7, #52]	@ 0x34
 800df52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800df54:	613b      	str	r3, [r7, #16]
	__asm volatile
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	f383 8811 	msr	BASEPRI, r3
}
 800df5c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800df5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800df60:	4618      	mov	r0, r3
 800df62:	3738      	adds	r7, #56	@ 0x38
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800df74:	68fb      	ldr	r3, [r7, #12]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d10b      	bne.n	800df92 <vQueueDelete+0x2a>
	__asm volatile
 800df7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df7e:	f383 8811 	msr	BASEPRI, r3
 800df82:	f3bf 8f6f 	isb	sy
 800df86:	f3bf 8f4f 	dsb	sy
 800df8a:	60bb      	str	r3, [r7, #8]
}
 800df8c:	bf00      	nop
 800df8e:	bf00      	nop
 800df90:	e7fd      	b.n	800df8e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800df92:	68f8      	ldr	r0, [r7, #12]
 800df94:	f000 f95e 	bl	800e254 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d102      	bne.n	800dfa8 <vQueueDelete+0x40>
		{
			vPortFree( pxQueue );
 800dfa2:	68f8      	ldr	r0, [r7, #12]
 800dfa4:	f002 f9b8 	bl	8010318 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800dfa8:	bf00      	nop
 800dfaa:	3710      	adds	r7, #16
 800dfac:	46bd      	mov	sp, r7
 800dfae:	bd80      	pop	{r7, pc}

0800dfb0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800dfb0:	b480      	push	{r7}
 800dfb2:	b085      	sub	sp, #20
 800dfb4:	af00      	add	r7, sp, #0
 800dfb6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d006      	beq.n	800dfce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800dfca:	60fb      	str	r3, [r7, #12]
 800dfcc:	e001      	b.n	800dfd2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800dfce:	2300      	movs	r3, #0
 800dfd0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
	}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	3714      	adds	r7, #20
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b086      	sub	sp, #24
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dfec:	2300      	movs	r3, #0
 800dfee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800dff4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d10d      	bne.n	800e01a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d14d      	bne.n	800e0a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	689b      	ldr	r3, [r3, #8]
 800e00a:	4618      	mov	r0, r3
 800e00c:	f001 f89e 	bl	800f14c <xTaskPriorityDisinherit>
 800e010:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2200      	movs	r2, #0
 800e016:	609a      	str	r2, [r3, #8]
 800e018:	e043      	b.n	800e0a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d119      	bne.n	800e054 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	6858      	ldr	r0, [r3, #4]
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e028:	461a      	mov	r2, r3
 800e02a:	68b9      	ldr	r1, [r7, #8]
 800e02c:	f010 fdf7 	bl	801ec1e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	685a      	ldr	r2, [r3, #4]
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e038:	441a      	add	r2, r3
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e03e:	68fb      	ldr	r3, [r7, #12]
 800e040:	685a      	ldr	r2, [r3, #4]
 800e042:	68fb      	ldr	r3, [r7, #12]
 800e044:	689b      	ldr	r3, [r3, #8]
 800e046:	429a      	cmp	r2, r3
 800e048:	d32b      	bcc.n	800e0a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	681a      	ldr	r2, [r3, #0]
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	605a      	str	r2, [r3, #4]
 800e052:	e026      	b.n	800e0a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	68d8      	ldr	r0, [r3, #12]
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e05c:	461a      	mov	r2, r3
 800e05e:	68b9      	ldr	r1, [r7, #8]
 800e060:	f010 fddd 	bl	801ec1e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	68da      	ldr	r2, [r3, #12]
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e06c:	425b      	negs	r3, r3
 800e06e:	441a      	add	r2, r3
 800e070:	68fb      	ldr	r3, [r7, #12]
 800e072:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	68da      	ldr	r2, [r3, #12]
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	429a      	cmp	r2, r3
 800e07e:	d207      	bcs.n	800e090 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	689a      	ldr	r2, [r3, #8]
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e088:	425b      	negs	r3, r3
 800e08a:	441a      	add	r2, r3
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	2b02      	cmp	r3, #2
 800e094:	d105      	bne.n	800e0a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e096:	693b      	ldr	r3, [r7, #16]
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d002      	beq.n	800e0a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800e09c:	693b      	ldr	r3, [r7, #16]
 800e09e:	3b01      	subs	r3, #1
 800e0a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	1c5a      	adds	r2, r3, #1
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800e0aa:	697b      	ldr	r3, [r7, #20]
}
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	3718      	adds	r7, #24
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}

0800e0b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b082      	sub	sp, #8
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d018      	beq.n	800e0f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	68da      	ldr	r2, [r3, #12]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0ce:	441a      	add	r2, r3
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	68da      	ldr	r2, [r3, #12]
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	689b      	ldr	r3, [r3, #8]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d303      	bcc.n	800e0e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	681a      	ldr	r2, [r3, #0]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	68d9      	ldr	r1, [r3, #12]
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e0f0:	461a      	mov	r2, r3
 800e0f2:	6838      	ldr	r0, [r7, #0]
 800e0f4:	f010 fd93 	bl	801ec1e <memcpy>
	}
}
 800e0f8:	bf00      	nop
 800e0fa:	3708      	adds	r7, #8
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b084      	sub	sp, #16
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800e108:	f001 ff16 	bl	800ff38 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e112:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e114:	e011      	b.n	800e13a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d012      	beq.n	800e144 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	3324      	adds	r3, #36	@ 0x24
 800e122:	4618      	mov	r0, r3
 800e124:	f000 fdb6 	bl	800ec94 <xTaskRemoveFromEventList>
 800e128:	4603      	mov	r3, r0
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d001      	beq.n	800e132 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800e12e:	f000 fe8f 	bl	800ee50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800e132:	7bfb      	ldrb	r3, [r7, #15]
 800e134:	3b01      	subs	r3, #1
 800e136:	b2db      	uxtb	r3, r3
 800e138:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e13a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	dce9      	bgt.n	800e116 <prvUnlockQueue+0x16>
 800e142:	e000      	b.n	800e146 <prvUnlockQueue+0x46>
					break;
 800e144:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	22ff      	movs	r2, #255	@ 0xff
 800e14a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800e14e:	f001 ff25 	bl	800ff9c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e152:	f001 fef1 	bl	800ff38 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e15c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e15e:	e011      	b.n	800e184 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	691b      	ldr	r3, [r3, #16]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d012      	beq.n	800e18e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	3310      	adds	r3, #16
 800e16c:	4618      	mov	r0, r3
 800e16e:	f000 fd91 	bl	800ec94 <xTaskRemoveFromEventList>
 800e172:	4603      	mov	r3, r0
 800e174:	2b00      	cmp	r3, #0
 800e176:	d001      	beq.n	800e17c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e178:	f000 fe6a 	bl	800ee50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e17c:	7bbb      	ldrb	r3, [r7, #14]
 800e17e:	3b01      	subs	r3, #1
 800e180:	b2db      	uxtb	r3, r3
 800e182:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e184:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e188:	2b00      	cmp	r3, #0
 800e18a:	dce9      	bgt.n	800e160 <prvUnlockQueue+0x60>
 800e18c:	e000      	b.n	800e190 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e18e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e190:	687b      	ldr	r3, [r7, #4]
 800e192:	22ff      	movs	r2, #255	@ 0xff
 800e194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800e198:	f001 ff00 	bl	800ff9c <vPortExitCritical>
}
 800e19c:	bf00      	nop
 800e19e:	3710      	adds	r7, #16
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e1ac:	f001 fec4 	bl	800ff38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d102      	bne.n	800e1be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e1b8:	2301      	movs	r3, #1
 800e1ba:	60fb      	str	r3, [r7, #12]
 800e1bc:	e001      	b.n	800e1c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e1c2:	f001 feeb 	bl	800ff9c <vPortExitCritical>

	return xReturn;
 800e1c6:	68fb      	ldr	r3, [r7, #12]
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3710      	adds	r7, #16
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e1d8:	f001 feae 	bl	800ff38 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d102      	bne.n	800e1ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	60fb      	str	r3, [r7, #12]
 800e1ec:	e001      	b.n	800e1f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e1f2:	f001 fed3 	bl	800ff9c <vPortExitCritical>

	return xReturn;
 800e1f6:	68fb      	ldr	r3, [r7, #12]
}
 800e1f8:	4618      	mov	r0, r3
 800e1fa:	3710      	adds	r7, #16
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800e200:	b480      	push	{r7}
 800e202:	b085      	sub	sp, #20
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
 800e208:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e20a:	2300      	movs	r3, #0
 800e20c:	60fb      	str	r3, [r7, #12]
 800e20e:	e014      	b.n	800e23a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800e210:	4a0f      	ldr	r2, [pc, #60]	@ (800e250 <vQueueAddToRegistry+0x50>)
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d10b      	bne.n	800e234 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800e21c:	490c      	ldr	r1, [pc, #48]	@ (800e250 <vQueueAddToRegistry+0x50>)
 800e21e:	68fb      	ldr	r3, [r7, #12]
 800e220:	683a      	ldr	r2, [r7, #0]
 800e222:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800e226:	4a0a      	ldr	r2, [pc, #40]	@ (800e250 <vQueueAddToRegistry+0x50>)
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	00db      	lsls	r3, r3, #3
 800e22c:	4413      	add	r3, r2
 800e22e:	687a      	ldr	r2, [r7, #4]
 800e230:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800e232:	e006      	b.n	800e242 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	3301      	adds	r3, #1
 800e238:	60fb      	str	r3, [r7, #12]
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2b07      	cmp	r3, #7
 800e23e:	d9e7      	bls.n	800e210 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800e240:	bf00      	nop
 800e242:	bf00      	nop
 800e244:	3714      	adds	r7, #20
 800e246:	46bd      	mov	sp, r7
 800e248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24c:	4770      	bx	lr
 800e24e:	bf00      	nop
 800e250:	20012da0 	.word	0x20012da0

0800e254 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e254:	b480      	push	{r7}
 800e256:	b085      	sub	sp, #20
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e25c:	2300      	movs	r3, #0
 800e25e:	60fb      	str	r3, [r7, #12]
 800e260:	e016      	b.n	800e290 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e262:	4a10      	ldr	r2, [pc, #64]	@ (800e2a4 <vQueueUnregisterQueue+0x50>)
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	00db      	lsls	r3, r3, #3
 800e268:	4413      	add	r3, r2
 800e26a:	685b      	ldr	r3, [r3, #4]
 800e26c:	687a      	ldr	r2, [r7, #4]
 800e26e:	429a      	cmp	r2, r3
 800e270:	d10b      	bne.n	800e28a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e272:	4a0c      	ldr	r2, [pc, #48]	@ (800e2a4 <vQueueUnregisterQueue+0x50>)
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	2100      	movs	r1, #0
 800e278:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e27c:	4a09      	ldr	r2, [pc, #36]	@ (800e2a4 <vQueueUnregisterQueue+0x50>)
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	00db      	lsls	r3, r3, #3
 800e282:	4413      	add	r3, r2
 800e284:	2200      	movs	r2, #0
 800e286:	605a      	str	r2, [r3, #4]
				break;
 800e288:	e006      	b.n	800e298 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	3301      	adds	r3, #1
 800e28e:	60fb      	str	r3, [r7, #12]
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2b07      	cmp	r3, #7
 800e294:	d9e5      	bls.n	800e262 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e296:	bf00      	nop
 800e298:	bf00      	nop
 800e29a:	3714      	adds	r7, #20
 800e29c:	46bd      	mov	sp, r7
 800e29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a2:	4770      	bx	lr
 800e2a4:	20012da0 	.word	0x20012da0

0800e2a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b086      	sub	sp, #24
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	60f8      	str	r0, [r7, #12]
 800e2b0:	60b9      	str	r1, [r7, #8]
 800e2b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800e2b8:	f001 fe3e 	bl	800ff38 <vPortEnterCritical>
 800e2bc:	697b      	ldr	r3, [r7, #20]
 800e2be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800e2c2:	b25b      	sxtb	r3, r3
 800e2c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2c8:	d103      	bne.n	800e2d2 <vQueueWaitForMessageRestricted+0x2a>
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800e2d8:	b25b      	sxtb	r3, r3
 800e2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2de:	d103      	bne.n	800e2e8 <vQueueWaitForMessageRestricted+0x40>
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	2200      	movs	r2, #0
 800e2e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800e2e8:	f001 fe58 	bl	800ff9c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800e2ec:	697b      	ldr	r3, [r7, #20]
 800e2ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d106      	bne.n	800e302 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800e2f4:	697b      	ldr	r3, [r7, #20]
 800e2f6:	3324      	adds	r3, #36	@ 0x24
 800e2f8:	687a      	ldr	r2, [r7, #4]
 800e2fa:	68b9      	ldr	r1, [r7, #8]
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f000 fc9d 	bl	800ec3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800e302:	6978      	ldr	r0, [r7, #20]
 800e304:	f7ff fefc 	bl	800e100 <prvUnlockQueue>
	}
 800e308:	bf00      	nop
 800e30a:	3718      	adds	r7, #24
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}

0800e310 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e310:	b580      	push	{r7, lr}
 800e312:	b08e      	sub	sp, #56	@ 0x38
 800e314:	af04      	add	r7, sp, #16
 800e316:	60f8      	str	r0, [r7, #12]
 800e318:	60b9      	str	r1, [r7, #8]
 800e31a:	607a      	str	r2, [r7, #4]
 800e31c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e320:	2b00      	cmp	r3, #0
 800e322:	d10b      	bne.n	800e33c <xTaskCreateStatic+0x2c>
	__asm volatile
 800e324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e328:	f383 8811 	msr	BASEPRI, r3
 800e32c:	f3bf 8f6f 	isb	sy
 800e330:	f3bf 8f4f 	dsb	sy
 800e334:	623b      	str	r3, [r7, #32]
}
 800e336:	bf00      	nop
 800e338:	bf00      	nop
 800e33a:	e7fd      	b.n	800e338 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d10b      	bne.n	800e35a <xTaskCreateStatic+0x4a>
	__asm volatile
 800e342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e346:	f383 8811 	msr	BASEPRI, r3
 800e34a:	f3bf 8f6f 	isb	sy
 800e34e:	f3bf 8f4f 	dsb	sy
 800e352:	61fb      	str	r3, [r7, #28]
}
 800e354:	bf00      	nop
 800e356:	bf00      	nop
 800e358:	e7fd      	b.n	800e356 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e35a:	23ac      	movs	r3, #172	@ 0xac
 800e35c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e35e:	693b      	ldr	r3, [r7, #16]
 800e360:	2bac      	cmp	r3, #172	@ 0xac
 800e362:	d00b      	beq.n	800e37c <xTaskCreateStatic+0x6c>
	__asm volatile
 800e364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e368:	f383 8811 	msr	BASEPRI, r3
 800e36c:	f3bf 8f6f 	isb	sy
 800e370:	f3bf 8f4f 	dsb	sy
 800e374:	61bb      	str	r3, [r7, #24]
}
 800e376:	bf00      	nop
 800e378:	bf00      	nop
 800e37a:	e7fd      	b.n	800e378 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e37c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e37e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e380:	2b00      	cmp	r3, #0
 800e382:	d01e      	beq.n	800e3c2 <xTaskCreateStatic+0xb2>
 800e384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e386:	2b00      	cmp	r3, #0
 800e388:	d01b      	beq.n	800e3c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e38c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e38e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e390:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e392:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e396:	2202      	movs	r2, #2
 800e398:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e39c:	2300      	movs	r3, #0
 800e39e:	9303      	str	r3, [sp, #12]
 800e3a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3a2:	9302      	str	r3, [sp, #8]
 800e3a4:	f107 0314 	add.w	r3, r7, #20
 800e3a8:	9301      	str	r3, [sp, #4]
 800e3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3ac:	9300      	str	r3, [sp, #0]
 800e3ae:	683b      	ldr	r3, [r7, #0]
 800e3b0:	687a      	ldr	r2, [r7, #4]
 800e3b2:	68b9      	ldr	r1, [r7, #8]
 800e3b4:	68f8      	ldr	r0, [r7, #12]
 800e3b6:	f000 f851 	bl	800e45c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e3ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e3bc:	f000 f8f8 	bl	800e5b0 <prvAddNewTaskToReadyList>
 800e3c0:	e001      	b.n	800e3c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e3c6:	697b      	ldr	r3, [r7, #20]
	}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3728      	adds	r7, #40	@ 0x28
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}

0800e3d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b08c      	sub	sp, #48	@ 0x30
 800e3d4:	af04      	add	r7, sp, #16
 800e3d6:	60f8      	str	r0, [r7, #12]
 800e3d8:	60b9      	str	r1, [r7, #8]
 800e3da:	603b      	str	r3, [r7, #0]
 800e3dc:	4613      	mov	r3, r2
 800e3de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e3e0:	88fb      	ldrh	r3, [r7, #6]
 800e3e2:	009b      	lsls	r3, r3, #2
 800e3e4:	4618      	mov	r0, r3
 800e3e6:	f001 fec9 	bl	801017c <pvPortMalloc>
 800e3ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e3ec:	697b      	ldr	r3, [r7, #20]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d00e      	beq.n	800e410 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e3f2:	20ac      	movs	r0, #172	@ 0xac
 800e3f4:	f001 fec2 	bl	801017c <pvPortMalloc>
 800e3f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e3fa:	69fb      	ldr	r3, [r7, #28]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d003      	beq.n	800e408 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e400:	69fb      	ldr	r3, [r7, #28]
 800e402:	697a      	ldr	r2, [r7, #20]
 800e404:	631a      	str	r2, [r3, #48]	@ 0x30
 800e406:	e005      	b.n	800e414 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e408:	6978      	ldr	r0, [r7, #20]
 800e40a:	f001 ff85 	bl	8010318 <vPortFree>
 800e40e:	e001      	b.n	800e414 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e410:	2300      	movs	r3, #0
 800e412:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e414:	69fb      	ldr	r3, [r7, #28]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d017      	beq.n	800e44a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e41a:	69fb      	ldr	r3, [r7, #28]
 800e41c:	2200      	movs	r2, #0
 800e41e:	f883 20a9 	strb.w	r2, [r3, #169]	@ 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e422:	88fa      	ldrh	r2, [r7, #6]
 800e424:	2300      	movs	r3, #0
 800e426:	9303      	str	r3, [sp, #12]
 800e428:	69fb      	ldr	r3, [r7, #28]
 800e42a:	9302      	str	r3, [sp, #8]
 800e42c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e42e:	9301      	str	r3, [sp, #4]
 800e430:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e432:	9300      	str	r3, [sp, #0]
 800e434:	683b      	ldr	r3, [r7, #0]
 800e436:	68b9      	ldr	r1, [r7, #8]
 800e438:	68f8      	ldr	r0, [r7, #12]
 800e43a:	f000 f80f 	bl	800e45c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e43e:	69f8      	ldr	r0, [r7, #28]
 800e440:	f000 f8b6 	bl	800e5b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e444:	2301      	movs	r3, #1
 800e446:	61bb      	str	r3, [r7, #24]
 800e448:	e002      	b.n	800e450 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e44a:	f04f 33ff 	mov.w	r3, #4294967295
 800e44e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e450:	69bb      	ldr	r3, [r7, #24]
	}
 800e452:	4618      	mov	r0, r3
 800e454:	3720      	adds	r7, #32
 800e456:	46bd      	mov	sp, r7
 800e458:	bd80      	pop	{r7, pc}
	...

0800e45c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b088      	sub	sp, #32
 800e460:	af00      	add	r7, sp, #0
 800e462:	60f8      	str	r0, [r7, #12]
 800e464:	60b9      	str	r1, [r7, #8]
 800e466:	607a      	str	r2, [r7, #4]
 800e468:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800e46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e46c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	461a      	mov	r2, r3
 800e474:	21a5      	movs	r1, #165	@ 0xa5
 800e476:	f010 fa77 	bl	801e968 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e47a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e47c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800e484:	3b01      	subs	r3, #1
 800e486:	009b      	lsls	r3, r3, #2
 800e488:	4413      	add	r3, r2
 800e48a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	f023 0307 	bic.w	r3, r3, #7
 800e492:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e494:	69bb      	ldr	r3, [r7, #24]
 800e496:	f003 0307 	and.w	r3, r3, #7
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d00b      	beq.n	800e4b6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800e49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4a2:	f383 8811 	msr	BASEPRI, r3
 800e4a6:	f3bf 8f6f 	isb	sy
 800e4aa:	f3bf 8f4f 	dsb	sy
 800e4ae:	617b      	str	r3, [r7, #20]
}
 800e4b0:	bf00      	nop
 800e4b2:	bf00      	nop
 800e4b4:	e7fd      	b.n	800e4b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d01f      	beq.n	800e4fc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e4bc:	2300      	movs	r3, #0
 800e4be:	61fb      	str	r3, [r7, #28]
 800e4c0:	e012      	b.n	800e4e8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e4c2:	68ba      	ldr	r2, [r7, #8]
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	4413      	add	r3, r2
 800e4c8:	7819      	ldrb	r1, [r3, #0]
 800e4ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e4cc:	69fb      	ldr	r3, [r7, #28]
 800e4ce:	4413      	add	r3, r2
 800e4d0:	3334      	adds	r3, #52	@ 0x34
 800e4d2:	460a      	mov	r2, r1
 800e4d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e4d6:	68ba      	ldr	r2, [r7, #8]
 800e4d8:	69fb      	ldr	r3, [r7, #28]
 800e4da:	4413      	add	r3, r2
 800e4dc:	781b      	ldrb	r3, [r3, #0]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d006      	beq.n	800e4f0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e4e2:	69fb      	ldr	r3, [r7, #28]
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	61fb      	str	r3, [r7, #28]
 800e4e8:	69fb      	ldr	r3, [r7, #28]
 800e4ea:	2b0f      	cmp	r3, #15
 800e4ec:	d9e9      	bls.n	800e4c2 <prvInitialiseNewTask+0x66>
 800e4ee:	e000      	b.n	800e4f2 <prvInitialiseNewTask+0x96>
			{
				break;
 800e4f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e4f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4f4:	2200      	movs	r2, #0
 800e4f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800e4fa:	e003      	b.n	800e504 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e4fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e4fe:	2200      	movs	r2, #0
 800e500:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e506:	2b37      	cmp	r3, #55	@ 0x37
 800e508:	d901      	bls.n	800e50e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e50a:	2337      	movs	r3, #55	@ 0x37
 800e50c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e510:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e512:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e516:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e518:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800e51a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e51c:	2200      	movs	r2, #0
 800e51e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e522:	3304      	adds	r3, #4
 800e524:	4618      	mov	r0, r3
 800e526:	f7fe fd7b 	bl	800d020 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e52c:	3318      	adds	r3, #24
 800e52e:	4618      	mov	r0, r3
 800e530:	f7fe fd76 	bl	800d020 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e536:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e538:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e53a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e53c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800e540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e542:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e548:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800e54a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e54c:	2200      	movs	r2, #0
 800e54e:	655a      	str	r2, [r3, #84]	@ 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e552:	2200      	movs	r2, #0
 800e554:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e55a:	2200      	movs	r2, #0
 800e55c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e562:	3358      	adds	r3, #88	@ 0x58
 800e564:	224c      	movs	r2, #76	@ 0x4c
 800e566:	2100      	movs	r1, #0
 800e568:	4618      	mov	r0, r3
 800e56a:	f010 f9fd 	bl	801e968 <memset>
 800e56e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e570:	4a0c      	ldr	r2, [pc, #48]	@ (800e5a4 <prvInitialiseNewTask+0x148>)
 800e572:	65da      	str	r2, [r3, #92]	@ 0x5c
 800e574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e576:	4a0c      	ldr	r2, [pc, #48]	@ (800e5a8 <prvInitialiseNewTask+0x14c>)
 800e578:	661a      	str	r2, [r3, #96]	@ 0x60
 800e57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e57c:	4a0b      	ldr	r2, [pc, #44]	@ (800e5ac <prvInitialiseNewTask+0x150>)
 800e57e:	665a      	str	r2, [r3, #100]	@ 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e580:	683a      	ldr	r2, [r7, #0]
 800e582:	68f9      	ldr	r1, [r7, #12]
 800e584:	69b8      	ldr	r0, [r7, #24]
 800e586:	f001 fba5 	bl	800fcd4 <pxPortInitialiseStack>
 800e58a:	4602      	mov	r2, r0
 800e58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e58e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e592:	2b00      	cmp	r3, #0
 800e594:	d002      	beq.n	800e59c <prvInitialiseNewTask+0x140>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e598:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e59a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e59c:	bf00      	nop
 800e59e:	3720      	adds	r7, #32
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	2001b1bc 	.word	0x2001b1bc
 800e5a8:	2001b224 	.word	0x2001b224
 800e5ac:	2001b28c 	.word	0x2001b28c

0800e5b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b082      	sub	sp, #8
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e5b8:	f001 fcbe 	bl	800ff38 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e5bc:	4b2d      	ldr	r3, [pc, #180]	@ (800e674 <prvAddNewTaskToReadyList+0xc4>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	3301      	adds	r3, #1
 800e5c2:	4a2c      	ldr	r2, [pc, #176]	@ (800e674 <prvAddNewTaskToReadyList+0xc4>)
 800e5c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e5c6:	4b2c      	ldr	r3, [pc, #176]	@ (800e678 <prvAddNewTaskToReadyList+0xc8>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d109      	bne.n	800e5e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e5ce:	4a2a      	ldr	r2, [pc, #168]	@ (800e678 <prvAddNewTaskToReadyList+0xc8>)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e5d4:	4b27      	ldr	r3, [pc, #156]	@ (800e674 <prvAddNewTaskToReadyList+0xc4>)
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	2b01      	cmp	r3, #1
 800e5da:	d110      	bne.n	800e5fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e5dc:	f000 fc5c 	bl	800ee98 <prvInitialiseTaskLists>
 800e5e0:	e00d      	b.n	800e5fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e5e2:	4b26      	ldr	r3, [pc, #152]	@ (800e67c <prvAddNewTaskToReadyList+0xcc>)
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d109      	bne.n	800e5fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e5ea:	4b23      	ldr	r3, [pc, #140]	@ (800e678 <prvAddNewTaskToReadyList+0xc8>)
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d802      	bhi.n	800e5fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e5f8:	4a1f      	ldr	r2, [pc, #124]	@ (800e678 <prvAddNewTaskToReadyList+0xc8>)
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e5fe:	4b20      	ldr	r3, [pc, #128]	@ (800e680 <prvAddNewTaskToReadyList+0xd0>)
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	3301      	adds	r3, #1
 800e604:	4a1e      	ldr	r2, [pc, #120]	@ (800e680 <prvAddNewTaskToReadyList+0xd0>)
 800e606:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e608:	4b1d      	ldr	r3, [pc, #116]	@ (800e680 <prvAddNewTaskToReadyList+0xd0>)
 800e60a:	681a      	ldr	r2, [r3, #0]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e614:	4b1b      	ldr	r3, [pc, #108]	@ (800e684 <prvAddNewTaskToReadyList+0xd4>)
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	429a      	cmp	r2, r3
 800e61a:	d903      	bls.n	800e624 <prvAddNewTaskToReadyList+0x74>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e620:	4a18      	ldr	r2, [pc, #96]	@ (800e684 <prvAddNewTaskToReadyList+0xd4>)
 800e622:	6013      	str	r3, [r2, #0]
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e628:	4613      	mov	r3, r2
 800e62a:	009b      	lsls	r3, r3, #2
 800e62c:	4413      	add	r3, r2
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	4a15      	ldr	r2, [pc, #84]	@ (800e688 <prvAddNewTaskToReadyList+0xd8>)
 800e632:	441a      	add	r2, r3
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	3304      	adds	r3, #4
 800e638:	4619      	mov	r1, r3
 800e63a:	4610      	mov	r0, r2
 800e63c:	f7fe fcfd 	bl	800d03a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e640:	f001 fcac 	bl	800ff9c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e644:	4b0d      	ldr	r3, [pc, #52]	@ (800e67c <prvAddNewTaskToReadyList+0xcc>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d00e      	beq.n	800e66a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e64c:	4b0a      	ldr	r3, [pc, #40]	@ (800e678 <prvAddNewTaskToReadyList+0xc8>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e656:	429a      	cmp	r2, r3
 800e658:	d207      	bcs.n	800e66a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e65a:	4b0c      	ldr	r3, [pc, #48]	@ (800e68c <prvAddNewTaskToReadyList+0xdc>)
 800e65c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e660:	601a      	str	r2, [r3, #0]
 800e662:	f3bf 8f4f 	dsb	sy
 800e666:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e66a:	bf00      	nop
 800e66c:	3708      	adds	r7, #8
 800e66e:	46bd      	mov	sp, r7
 800e670:	bd80      	pop	{r7, pc}
 800e672:	bf00      	nop
 800e674:	200132b4 	.word	0x200132b4
 800e678:	20012de0 	.word	0x20012de0
 800e67c:	200132c0 	.word	0x200132c0
 800e680:	200132d0 	.word	0x200132d0
 800e684:	200132bc 	.word	0x200132bc
 800e688:	20012de4 	.word	0x20012de4
 800e68c:	e000ed04 	.word	0xe000ed04

0800e690 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e690:	b580      	push	{r7, lr}
 800e692:	b084      	sub	sp, #16
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e698:	2300      	movs	r3, #0
 800e69a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d018      	beq.n	800e6d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e6a2:	4b14      	ldr	r3, [pc, #80]	@ (800e6f4 <vTaskDelay+0x64>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d00b      	beq.n	800e6c2 <vTaskDelay+0x32>
	__asm volatile
 800e6aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ae:	f383 8811 	msr	BASEPRI, r3
 800e6b2:	f3bf 8f6f 	isb	sy
 800e6b6:	f3bf 8f4f 	dsb	sy
 800e6ba:	60bb      	str	r3, [r7, #8]
}
 800e6bc:	bf00      	nop
 800e6be:	bf00      	nop
 800e6c0:	e7fd      	b.n	800e6be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e6c2:	f000 f88d 	bl	800e7e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e6c6:	2100      	movs	r1, #0
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f000 ff55 	bl	800f578 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e6ce:	f000 f895 	bl	800e7fc <xTaskResumeAll>
 800e6d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d107      	bne.n	800e6ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800e6da:	4b07      	ldr	r3, [pc, #28]	@ (800e6f8 <vTaskDelay+0x68>)
 800e6dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e6e0:	601a      	str	r2, [r3, #0]
 800e6e2:	f3bf 8f4f 	dsb	sy
 800e6e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e6ea:	bf00      	nop
 800e6ec:	3710      	adds	r7, #16
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}
 800e6f2:	bf00      	nop
 800e6f4:	200132dc 	.word	0x200132dc
 800e6f8:	e000ed04 	.word	0xe000ed04

0800e6fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e6fc:	b580      	push	{r7, lr}
 800e6fe:	b08a      	sub	sp, #40	@ 0x28
 800e700:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e702:	2300      	movs	r3, #0
 800e704:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e706:	2300      	movs	r3, #0
 800e708:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e70a:	463a      	mov	r2, r7
 800e70c:	1d39      	adds	r1, r7, #4
 800e70e:	f107 0308 	add.w	r3, r7, #8
 800e712:	4618      	mov	r0, r3
 800e714:	f7fe fc30 	bl	800cf78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e718:	6839      	ldr	r1, [r7, #0]
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	68ba      	ldr	r2, [r7, #8]
 800e71e:	9202      	str	r2, [sp, #8]
 800e720:	9301      	str	r3, [sp, #4]
 800e722:	2300      	movs	r3, #0
 800e724:	9300      	str	r3, [sp, #0]
 800e726:	2300      	movs	r3, #0
 800e728:	460a      	mov	r2, r1
 800e72a:	4925      	ldr	r1, [pc, #148]	@ (800e7c0 <vTaskStartScheduler+0xc4>)
 800e72c:	4825      	ldr	r0, [pc, #148]	@ (800e7c4 <vTaskStartScheduler+0xc8>)
 800e72e:	f7ff fdef 	bl	800e310 <xTaskCreateStatic>
 800e732:	4603      	mov	r3, r0
 800e734:	4a24      	ldr	r2, [pc, #144]	@ (800e7c8 <vTaskStartScheduler+0xcc>)
 800e736:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e738:	4b23      	ldr	r3, [pc, #140]	@ (800e7c8 <vTaskStartScheduler+0xcc>)
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d002      	beq.n	800e746 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e740:	2301      	movs	r3, #1
 800e742:	617b      	str	r3, [r7, #20]
 800e744:	e001      	b.n	800e74a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e746:	2300      	movs	r3, #0
 800e748:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e74a:	697b      	ldr	r3, [r7, #20]
 800e74c:	2b01      	cmp	r3, #1
 800e74e:	d102      	bne.n	800e756 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e750:	f000 ff66 	bl	800f620 <xTimerCreateTimerTask>
 800e754:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e756:	697b      	ldr	r3, [r7, #20]
 800e758:	2b01      	cmp	r3, #1
 800e75a:	d11d      	bne.n	800e798 <vTaskStartScheduler+0x9c>
	__asm volatile
 800e75c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e760:	f383 8811 	msr	BASEPRI, r3
 800e764:	f3bf 8f6f 	isb	sy
 800e768:	f3bf 8f4f 	dsb	sy
 800e76c:	613b      	str	r3, [r7, #16]
}
 800e76e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e770:	4b16      	ldr	r3, [pc, #88]	@ (800e7cc <vTaskStartScheduler+0xd0>)
 800e772:	681b      	ldr	r3, [r3, #0]
 800e774:	3358      	adds	r3, #88	@ 0x58
 800e776:	4a16      	ldr	r2, [pc, #88]	@ (800e7d0 <vTaskStartScheduler+0xd4>)
 800e778:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e77a:	4b16      	ldr	r3, [pc, #88]	@ (800e7d4 <vTaskStartScheduler+0xd8>)
 800e77c:	f04f 32ff 	mov.w	r2, #4294967295
 800e780:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e782:	4b15      	ldr	r3, [pc, #84]	@ (800e7d8 <vTaskStartScheduler+0xdc>)
 800e784:	2201      	movs	r2, #1
 800e786:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e788:	4b14      	ldr	r3, [pc, #80]	@ (800e7dc <vTaskStartScheduler+0xe0>)
 800e78a:	2200      	movs	r2, #0
 800e78c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800e78e:	f7f2 ffbb 	bl	8001708 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e792:	f001 fb2d 	bl	800fdf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e796:	e00f      	b.n	800e7b8 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e79e:	d10b      	bne.n	800e7b8 <vTaskStartScheduler+0xbc>
	__asm volatile
 800e7a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7a4:	f383 8811 	msr	BASEPRI, r3
 800e7a8:	f3bf 8f6f 	isb	sy
 800e7ac:	f3bf 8f4f 	dsb	sy
 800e7b0:	60fb      	str	r3, [r7, #12]
}
 800e7b2:	bf00      	nop
 800e7b4:	bf00      	nop
 800e7b6:	e7fd      	b.n	800e7b4 <vTaskStartScheduler+0xb8>
}
 800e7b8:	bf00      	nop
 800e7ba:	3718      	adds	r7, #24
 800e7bc:	46bd      	mov	sp, r7
 800e7be:	bd80      	pop	{r7, pc}
 800e7c0:	08022060 	.word	0x08022060
 800e7c4:	0800ee69 	.word	0x0800ee69
 800e7c8:	200132d8 	.word	0x200132d8
 800e7cc:	20012de0 	.word	0x20012de0
 800e7d0:	2000005c 	.word	0x2000005c
 800e7d4:	200132d4 	.word	0x200132d4
 800e7d8:	200132c0 	.word	0x200132c0
 800e7dc:	200132b8 	.word	0x200132b8

0800e7e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e7e0:	b480      	push	{r7}
 800e7e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e7e4:	4b04      	ldr	r3, [pc, #16]	@ (800e7f8 <vTaskSuspendAll+0x18>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	4a03      	ldr	r2, [pc, #12]	@ (800e7f8 <vTaskSuspendAll+0x18>)
 800e7ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e7ee:	bf00      	nop
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7f6:	4770      	bx	lr
 800e7f8:	200132dc 	.word	0x200132dc

0800e7fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b084      	sub	sp, #16
 800e800:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e802:	2300      	movs	r3, #0
 800e804:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e806:	2300      	movs	r3, #0
 800e808:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e80a:	4b42      	ldr	r3, [pc, #264]	@ (800e914 <xTaskResumeAll+0x118>)
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d10b      	bne.n	800e82a <xTaskResumeAll+0x2e>
	__asm volatile
 800e812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e816:	f383 8811 	msr	BASEPRI, r3
 800e81a:	f3bf 8f6f 	isb	sy
 800e81e:	f3bf 8f4f 	dsb	sy
 800e822:	603b      	str	r3, [r7, #0]
}
 800e824:	bf00      	nop
 800e826:	bf00      	nop
 800e828:	e7fd      	b.n	800e826 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e82a:	f001 fb85 	bl	800ff38 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e82e:	4b39      	ldr	r3, [pc, #228]	@ (800e914 <xTaskResumeAll+0x118>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	3b01      	subs	r3, #1
 800e834:	4a37      	ldr	r2, [pc, #220]	@ (800e914 <xTaskResumeAll+0x118>)
 800e836:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e838:	4b36      	ldr	r3, [pc, #216]	@ (800e914 <xTaskResumeAll+0x118>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d162      	bne.n	800e906 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e840:	4b35      	ldr	r3, [pc, #212]	@ (800e918 <xTaskResumeAll+0x11c>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d05e      	beq.n	800e906 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e848:	e02f      	b.n	800e8aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e84a:	4b34      	ldr	r3, [pc, #208]	@ (800e91c <xTaskResumeAll+0x120>)
 800e84c:	68db      	ldr	r3, [r3, #12]
 800e84e:	68db      	ldr	r3, [r3, #12]
 800e850:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	3318      	adds	r3, #24
 800e856:	4618      	mov	r0, r3
 800e858:	f7fe fc4c 	bl	800d0f4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	3304      	adds	r3, #4
 800e860:	4618      	mov	r0, r3
 800e862:	f7fe fc47 	bl	800d0f4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e86a:	4b2d      	ldr	r3, [pc, #180]	@ (800e920 <xTaskResumeAll+0x124>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	429a      	cmp	r2, r3
 800e870:	d903      	bls.n	800e87a <xTaskResumeAll+0x7e>
 800e872:	68fb      	ldr	r3, [r7, #12]
 800e874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e876:	4a2a      	ldr	r2, [pc, #168]	@ (800e920 <xTaskResumeAll+0x124>)
 800e878:	6013      	str	r3, [r2, #0]
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e87e:	4613      	mov	r3, r2
 800e880:	009b      	lsls	r3, r3, #2
 800e882:	4413      	add	r3, r2
 800e884:	009b      	lsls	r3, r3, #2
 800e886:	4a27      	ldr	r2, [pc, #156]	@ (800e924 <xTaskResumeAll+0x128>)
 800e888:	441a      	add	r2, r3
 800e88a:	68fb      	ldr	r3, [r7, #12]
 800e88c:	3304      	adds	r3, #4
 800e88e:	4619      	mov	r1, r3
 800e890:	4610      	mov	r0, r2
 800e892:	f7fe fbd2 	bl	800d03a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e89a:	4b23      	ldr	r3, [pc, #140]	@ (800e928 <xTaskResumeAll+0x12c>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	d302      	bcc.n	800e8aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800e8a4:	4b21      	ldr	r3, [pc, #132]	@ (800e92c <xTaskResumeAll+0x130>)
 800e8a6:	2201      	movs	r2, #1
 800e8a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e8aa:	4b1c      	ldr	r3, [pc, #112]	@ (800e91c <xTaskResumeAll+0x120>)
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d1cb      	bne.n	800e84a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e8b2:	68fb      	ldr	r3, [r7, #12]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d001      	beq.n	800e8bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e8b8:	f000 fb92 	bl	800efe0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e8bc:	4b1c      	ldr	r3, [pc, #112]	@ (800e930 <xTaskResumeAll+0x134>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d010      	beq.n	800e8ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e8c8:	f000 f858 	bl	800e97c <xTaskIncrementTick>
 800e8cc:	4603      	mov	r3, r0
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d002      	beq.n	800e8d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800e8d2:	4b16      	ldr	r3, [pc, #88]	@ (800e92c <xTaskResumeAll+0x130>)
 800e8d4:	2201      	movs	r2, #1
 800e8d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	3b01      	subs	r3, #1
 800e8dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	d1f1      	bne.n	800e8c8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800e8e4:	4b12      	ldr	r3, [pc, #72]	@ (800e930 <xTaskResumeAll+0x134>)
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e8ea:	4b10      	ldr	r3, [pc, #64]	@ (800e92c <xTaskResumeAll+0x130>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d009      	beq.n	800e906 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e8f6:	4b0f      	ldr	r3, [pc, #60]	@ (800e934 <xTaskResumeAll+0x138>)
 800e8f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e8fc:	601a      	str	r2, [r3, #0]
 800e8fe:	f3bf 8f4f 	dsb	sy
 800e902:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e906:	f001 fb49 	bl	800ff9c <vPortExitCritical>

	return xAlreadyYielded;
 800e90a:	68bb      	ldr	r3, [r7, #8]
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3710      	adds	r7, #16
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}
 800e914:	200132dc 	.word	0x200132dc
 800e918:	200132b4 	.word	0x200132b4
 800e91c:	20013274 	.word	0x20013274
 800e920:	200132bc 	.word	0x200132bc
 800e924:	20012de4 	.word	0x20012de4
 800e928:	20012de0 	.word	0x20012de0
 800e92c:	200132c8 	.word	0x200132c8
 800e930:	200132c4 	.word	0x200132c4
 800e934:	e000ed04 	.word	0xe000ed04

0800e938 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e938:	b480      	push	{r7}
 800e93a:	b083      	sub	sp, #12
 800e93c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e93e:	4b05      	ldr	r3, [pc, #20]	@ (800e954 <xTaskGetTickCount+0x1c>)
 800e940:	681b      	ldr	r3, [r3, #0]
 800e942:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e944:	687b      	ldr	r3, [r7, #4]
}
 800e946:	4618      	mov	r0, r3
 800e948:	370c      	adds	r7, #12
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr
 800e952:	bf00      	nop
 800e954:	200132b8 	.word	0x200132b8

0800e958 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e958:	b580      	push	{r7, lr}
 800e95a:	b082      	sub	sp, #8
 800e95c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e95e:	f001 fbcb 	bl	80100f8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e962:	2300      	movs	r3, #0
 800e964:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e966:	4b04      	ldr	r3, [pc, #16]	@ (800e978 <xTaskGetTickCountFromISR+0x20>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e96c:	683b      	ldr	r3, [r7, #0]
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3708      	adds	r7, #8
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	200132b8 	.word	0x200132b8

0800e97c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b086      	sub	sp, #24
 800e980:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e982:	2300      	movs	r3, #0
 800e984:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e986:	4b4f      	ldr	r3, [pc, #316]	@ (800eac4 <xTaskIncrementTick+0x148>)
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	f040 8090 	bne.w	800eab0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e990:	4b4d      	ldr	r3, [pc, #308]	@ (800eac8 <xTaskIncrementTick+0x14c>)
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	3301      	adds	r3, #1
 800e996:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e998:	4a4b      	ldr	r2, [pc, #300]	@ (800eac8 <xTaskIncrementTick+0x14c>)
 800e99a:	693b      	ldr	r3, [r7, #16]
 800e99c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d121      	bne.n	800e9e8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e9a4:	4b49      	ldr	r3, [pc, #292]	@ (800eacc <xTaskIncrementTick+0x150>)
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d00b      	beq.n	800e9c6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e9ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9b2:	f383 8811 	msr	BASEPRI, r3
 800e9b6:	f3bf 8f6f 	isb	sy
 800e9ba:	f3bf 8f4f 	dsb	sy
 800e9be:	603b      	str	r3, [r7, #0]
}
 800e9c0:	bf00      	nop
 800e9c2:	bf00      	nop
 800e9c4:	e7fd      	b.n	800e9c2 <xTaskIncrementTick+0x46>
 800e9c6:	4b41      	ldr	r3, [pc, #260]	@ (800eacc <xTaskIncrementTick+0x150>)
 800e9c8:	681b      	ldr	r3, [r3, #0]
 800e9ca:	60fb      	str	r3, [r7, #12]
 800e9cc:	4b40      	ldr	r3, [pc, #256]	@ (800ead0 <xTaskIncrementTick+0x154>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	4a3e      	ldr	r2, [pc, #248]	@ (800eacc <xTaskIncrementTick+0x150>)
 800e9d2:	6013      	str	r3, [r2, #0]
 800e9d4:	4a3e      	ldr	r2, [pc, #248]	@ (800ead0 <xTaskIncrementTick+0x154>)
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	6013      	str	r3, [r2, #0]
 800e9da:	4b3e      	ldr	r3, [pc, #248]	@ (800ead4 <xTaskIncrementTick+0x158>)
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	3301      	adds	r3, #1
 800e9e0:	4a3c      	ldr	r2, [pc, #240]	@ (800ead4 <xTaskIncrementTick+0x158>)
 800e9e2:	6013      	str	r3, [r2, #0]
 800e9e4:	f000 fafc 	bl	800efe0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e9e8:	4b3b      	ldr	r3, [pc, #236]	@ (800ead8 <xTaskIncrementTick+0x15c>)
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	693a      	ldr	r2, [r7, #16]
 800e9ee:	429a      	cmp	r2, r3
 800e9f0:	d349      	bcc.n	800ea86 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e9f2:	4b36      	ldr	r3, [pc, #216]	@ (800eacc <xTaskIncrementTick+0x150>)
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d104      	bne.n	800ea06 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9fc:	4b36      	ldr	r3, [pc, #216]	@ (800ead8 <xTaskIncrementTick+0x15c>)
 800e9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800ea02:	601a      	str	r2, [r3, #0]
					break;
 800ea04:	e03f      	b.n	800ea86 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ea06:	4b31      	ldr	r3, [pc, #196]	@ (800eacc <xTaskIncrementTick+0x150>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	68db      	ldr	r3, [r3, #12]
 800ea0c:	68db      	ldr	r3, [r3, #12]
 800ea0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ea10:	68bb      	ldr	r3, [r7, #8]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ea16:	693a      	ldr	r2, [r7, #16]
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	429a      	cmp	r2, r3
 800ea1c:	d203      	bcs.n	800ea26 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ea1e:	4a2e      	ldr	r2, [pc, #184]	@ (800ead8 <xTaskIncrementTick+0x15c>)
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ea24:	e02f      	b.n	800ea86 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	3304      	adds	r3, #4
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	f7fe fb62 	bl	800d0f4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ea30:	68bb      	ldr	r3, [r7, #8]
 800ea32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d004      	beq.n	800ea42 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ea38:	68bb      	ldr	r3, [r7, #8]
 800ea3a:	3318      	adds	r3, #24
 800ea3c:	4618      	mov	r0, r3
 800ea3e:	f7fe fb59 	bl	800d0f4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ea42:	68bb      	ldr	r3, [r7, #8]
 800ea44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea46:	4b25      	ldr	r3, [pc, #148]	@ (800eadc <xTaskIncrementTick+0x160>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d903      	bls.n	800ea56 <xTaskIncrementTick+0xda>
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea52:	4a22      	ldr	r2, [pc, #136]	@ (800eadc <xTaskIncrementTick+0x160>)
 800ea54:	6013      	str	r3, [r2, #0]
 800ea56:	68bb      	ldr	r3, [r7, #8]
 800ea58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea5a:	4613      	mov	r3, r2
 800ea5c:	009b      	lsls	r3, r3, #2
 800ea5e:	4413      	add	r3, r2
 800ea60:	009b      	lsls	r3, r3, #2
 800ea62:	4a1f      	ldr	r2, [pc, #124]	@ (800eae0 <xTaskIncrementTick+0x164>)
 800ea64:	441a      	add	r2, r3
 800ea66:	68bb      	ldr	r3, [r7, #8]
 800ea68:	3304      	adds	r3, #4
 800ea6a:	4619      	mov	r1, r3
 800ea6c:	4610      	mov	r0, r2
 800ea6e:	f7fe fae4 	bl	800d03a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea76:	4b1b      	ldr	r3, [pc, #108]	@ (800eae4 <xTaskIncrementTick+0x168>)
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea7c:	429a      	cmp	r2, r3
 800ea7e:	d3b8      	bcc.n	800e9f2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ea80:	2301      	movs	r3, #1
 800ea82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ea84:	e7b5      	b.n	800e9f2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ea86:	4b17      	ldr	r3, [pc, #92]	@ (800eae4 <xTaskIncrementTick+0x168>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ea8c:	4914      	ldr	r1, [pc, #80]	@ (800eae0 <xTaskIncrementTick+0x164>)
 800ea8e:	4613      	mov	r3, r2
 800ea90:	009b      	lsls	r3, r3, #2
 800ea92:	4413      	add	r3, r2
 800ea94:	009b      	lsls	r3, r3, #2
 800ea96:	440b      	add	r3, r1
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d901      	bls.n	800eaa2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800eaa2:	4b11      	ldr	r3, [pc, #68]	@ (800eae8 <xTaskIncrementTick+0x16c>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d007      	beq.n	800eaba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800eaaa:	2301      	movs	r3, #1
 800eaac:	617b      	str	r3, [r7, #20]
 800eaae:	e004      	b.n	800eaba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800eab0:	4b0e      	ldr	r3, [pc, #56]	@ (800eaec <xTaskIncrementTick+0x170>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	3301      	adds	r3, #1
 800eab6:	4a0d      	ldr	r2, [pc, #52]	@ (800eaec <xTaskIncrementTick+0x170>)
 800eab8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800eaba:	697b      	ldr	r3, [r7, #20]
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3718      	adds	r7, #24
 800eac0:	46bd      	mov	sp, r7
 800eac2:	bd80      	pop	{r7, pc}
 800eac4:	200132dc 	.word	0x200132dc
 800eac8:	200132b8 	.word	0x200132b8
 800eacc:	2001326c 	.word	0x2001326c
 800ead0:	20013270 	.word	0x20013270
 800ead4:	200132cc 	.word	0x200132cc
 800ead8:	200132d4 	.word	0x200132d4
 800eadc:	200132bc 	.word	0x200132bc
 800eae0:	20012de4 	.word	0x20012de4
 800eae4:	20012de0 	.word	0x20012de0
 800eae8:	200132c8 	.word	0x200132c8
 800eaec:	200132c4 	.word	0x200132c4

0800eaf0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b084      	sub	sp, #16
 800eaf4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800eaf6:	4b36      	ldr	r3, [pc, #216]	@ (800ebd0 <vTaskSwitchContext+0xe0>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d003      	beq.n	800eb06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800eafe:	4b35      	ldr	r3, [pc, #212]	@ (800ebd4 <vTaskSwitchContext+0xe4>)
 800eb00:	2201      	movs	r2, #1
 800eb02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800eb04:	e060      	b.n	800ebc8 <vTaskSwitchContext+0xd8>
		xYieldPending = pdFALSE;
 800eb06:	4b33      	ldr	r3, [pc, #204]	@ (800ebd4 <vTaskSwitchContext+0xe4>)
 800eb08:	2200      	movs	r2, #0
 800eb0a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 800eb0c:	f7f2 fe03 	bl	8001716 <getRunTimeCounterValue>
 800eb10:	4603      	mov	r3, r0
 800eb12:	4a31      	ldr	r2, [pc, #196]	@ (800ebd8 <vTaskSwitchContext+0xe8>)
 800eb14:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 800eb16:	4b30      	ldr	r3, [pc, #192]	@ (800ebd8 <vTaskSwitchContext+0xe8>)
 800eb18:	681a      	ldr	r2, [r3, #0]
 800eb1a:	4b30      	ldr	r3, [pc, #192]	@ (800ebdc <vTaskSwitchContext+0xec>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d909      	bls.n	800eb36 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800eb22:	4b2f      	ldr	r3, [pc, #188]	@ (800ebe0 <vTaskSwitchContext+0xf0>)
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800eb28:	4a2b      	ldr	r2, [pc, #172]	@ (800ebd8 <vTaskSwitchContext+0xe8>)
 800eb2a:	6810      	ldr	r0, [r2, #0]
 800eb2c:	4a2b      	ldr	r2, [pc, #172]	@ (800ebdc <vTaskSwitchContext+0xec>)
 800eb2e:	6812      	ldr	r2, [r2, #0]
 800eb30:	1a82      	subs	r2, r0, r2
 800eb32:	440a      	add	r2, r1
 800eb34:	655a      	str	r2, [r3, #84]	@ 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 800eb36:	4b28      	ldr	r3, [pc, #160]	@ (800ebd8 <vTaskSwitchContext+0xe8>)
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	4a28      	ldr	r2, [pc, #160]	@ (800ebdc <vTaskSwitchContext+0xec>)
 800eb3c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb3e:	4b29      	ldr	r3, [pc, #164]	@ (800ebe4 <vTaskSwitchContext+0xf4>)
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	60fb      	str	r3, [r7, #12]
 800eb44:	e011      	b.n	800eb6a <vTaskSwitchContext+0x7a>
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d10b      	bne.n	800eb64 <vTaskSwitchContext+0x74>
	__asm volatile
 800eb4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb50:	f383 8811 	msr	BASEPRI, r3
 800eb54:	f3bf 8f6f 	isb	sy
 800eb58:	f3bf 8f4f 	dsb	sy
 800eb5c:	607b      	str	r3, [r7, #4]
}
 800eb5e:	bf00      	nop
 800eb60:	bf00      	nop
 800eb62:	e7fd      	b.n	800eb60 <vTaskSwitchContext+0x70>
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	3b01      	subs	r3, #1
 800eb68:	60fb      	str	r3, [r7, #12]
 800eb6a:	491f      	ldr	r1, [pc, #124]	@ (800ebe8 <vTaskSwitchContext+0xf8>)
 800eb6c:	68fa      	ldr	r2, [r7, #12]
 800eb6e:	4613      	mov	r3, r2
 800eb70:	009b      	lsls	r3, r3, #2
 800eb72:	4413      	add	r3, r2
 800eb74:	009b      	lsls	r3, r3, #2
 800eb76:	440b      	add	r3, r1
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d0e3      	beq.n	800eb46 <vTaskSwitchContext+0x56>
 800eb7e:	68fa      	ldr	r2, [r7, #12]
 800eb80:	4613      	mov	r3, r2
 800eb82:	009b      	lsls	r3, r3, #2
 800eb84:	4413      	add	r3, r2
 800eb86:	009b      	lsls	r3, r3, #2
 800eb88:	4a17      	ldr	r2, [pc, #92]	@ (800ebe8 <vTaskSwitchContext+0xf8>)
 800eb8a:	4413      	add	r3, r2
 800eb8c:	60bb      	str	r3, [r7, #8]
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	685a      	ldr	r2, [r3, #4]
 800eb94:	68bb      	ldr	r3, [r7, #8]
 800eb96:	605a      	str	r2, [r3, #4]
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	685a      	ldr	r2, [r3, #4]
 800eb9c:	68bb      	ldr	r3, [r7, #8]
 800eb9e:	3308      	adds	r3, #8
 800eba0:	429a      	cmp	r2, r3
 800eba2:	d104      	bne.n	800ebae <vTaskSwitchContext+0xbe>
 800eba4:	68bb      	ldr	r3, [r7, #8]
 800eba6:	685b      	ldr	r3, [r3, #4]
 800eba8:	685a      	ldr	r2, [r3, #4]
 800ebaa:	68bb      	ldr	r3, [r7, #8]
 800ebac:	605a      	str	r2, [r3, #4]
 800ebae:	68bb      	ldr	r3, [r7, #8]
 800ebb0:	685b      	ldr	r3, [r3, #4]
 800ebb2:	68db      	ldr	r3, [r3, #12]
 800ebb4:	4a0a      	ldr	r2, [pc, #40]	@ (800ebe0 <vTaskSwitchContext+0xf0>)
 800ebb6:	6013      	str	r3, [r2, #0]
 800ebb8:	4a0a      	ldr	r2, [pc, #40]	@ (800ebe4 <vTaskSwitchContext+0xf4>)
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ebbe:	4b08      	ldr	r3, [pc, #32]	@ (800ebe0 <vTaskSwitchContext+0xf0>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	3358      	adds	r3, #88	@ 0x58
 800ebc4:	4a09      	ldr	r2, [pc, #36]	@ (800ebec <vTaskSwitchContext+0xfc>)
 800ebc6:	6013      	str	r3, [r2, #0]
}
 800ebc8:	bf00      	nop
 800ebca:	3710      	adds	r7, #16
 800ebcc:	46bd      	mov	sp, r7
 800ebce:	bd80      	pop	{r7, pc}
 800ebd0:	200132dc 	.word	0x200132dc
 800ebd4:	200132c8 	.word	0x200132c8
 800ebd8:	200132e4 	.word	0x200132e4
 800ebdc:	200132e0 	.word	0x200132e0
 800ebe0:	20012de0 	.word	0x20012de0
 800ebe4:	200132bc 	.word	0x200132bc
 800ebe8:	20012de4 	.word	0x20012de4
 800ebec:	2000005c 	.word	0x2000005c

0800ebf0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ebf0:	b580      	push	{r7, lr}
 800ebf2:	b084      	sub	sp, #16
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
 800ebf8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d10b      	bne.n	800ec18 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800ec00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec04:	f383 8811 	msr	BASEPRI, r3
 800ec08:	f3bf 8f6f 	isb	sy
 800ec0c:	f3bf 8f4f 	dsb	sy
 800ec10:	60fb      	str	r3, [r7, #12]
}
 800ec12:	bf00      	nop
 800ec14:	bf00      	nop
 800ec16:	e7fd      	b.n	800ec14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec18:	4b07      	ldr	r3, [pc, #28]	@ (800ec38 <vTaskPlaceOnEventList+0x48>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	3318      	adds	r3, #24
 800ec1e:	4619      	mov	r1, r3
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f7fe fa2e 	bl	800d082 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ec26:	2101      	movs	r1, #1
 800ec28:	6838      	ldr	r0, [r7, #0]
 800ec2a:	f000 fca5 	bl	800f578 <prvAddCurrentTaskToDelayedList>
}
 800ec2e:	bf00      	nop
 800ec30:	3710      	adds	r7, #16
 800ec32:	46bd      	mov	sp, r7
 800ec34:	bd80      	pop	{r7, pc}
 800ec36:	bf00      	nop
 800ec38:	20012de0 	.word	0x20012de0

0800ec3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b086      	sub	sp, #24
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	60b9      	str	r1, [r7, #8]
 800ec46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d10b      	bne.n	800ec66 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800ec4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec52:	f383 8811 	msr	BASEPRI, r3
 800ec56:	f3bf 8f6f 	isb	sy
 800ec5a:	f3bf 8f4f 	dsb	sy
 800ec5e:	617b      	str	r3, [r7, #20]
}
 800ec60:	bf00      	nop
 800ec62:	bf00      	nop
 800ec64:	e7fd      	b.n	800ec62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ec66:	4b0a      	ldr	r3, [pc, #40]	@ (800ec90 <vTaskPlaceOnEventListRestricted+0x54>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	3318      	adds	r3, #24
 800ec6c:	4619      	mov	r1, r3
 800ec6e:	68f8      	ldr	r0, [r7, #12]
 800ec70:	f7fe f9e3 	bl	800d03a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d002      	beq.n	800ec80 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800ec7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ec7e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ec80:	6879      	ldr	r1, [r7, #4]
 800ec82:	68b8      	ldr	r0, [r7, #8]
 800ec84:	f000 fc78 	bl	800f578 <prvAddCurrentTaskToDelayedList>
	}
 800ec88:	bf00      	nop
 800ec8a:	3718      	adds	r7, #24
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}
 800ec90:	20012de0 	.word	0x20012de0

0800ec94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ec94:	b580      	push	{r7, lr}
 800ec96:	b086      	sub	sp, #24
 800ec98:	af00      	add	r7, sp, #0
 800ec9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	68db      	ldr	r3, [r3, #12]
 800eca0:	68db      	ldr	r3, [r3, #12]
 800eca2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d10b      	bne.n	800ecc2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800ecaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ecae:	f383 8811 	msr	BASEPRI, r3
 800ecb2:	f3bf 8f6f 	isb	sy
 800ecb6:	f3bf 8f4f 	dsb	sy
 800ecba:	60fb      	str	r3, [r7, #12]
}
 800ecbc:	bf00      	nop
 800ecbe:	bf00      	nop
 800ecc0:	e7fd      	b.n	800ecbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ecc2:	693b      	ldr	r3, [r7, #16]
 800ecc4:	3318      	adds	r3, #24
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	f7fe fa14 	bl	800d0f4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800eccc:	4b1d      	ldr	r3, [pc, #116]	@ (800ed44 <xTaskRemoveFromEventList+0xb0>)
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d11d      	bne.n	800ed10 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ecd4:	693b      	ldr	r3, [r7, #16]
 800ecd6:	3304      	adds	r3, #4
 800ecd8:	4618      	mov	r0, r3
 800ecda:	f7fe fa0b 	bl	800d0f4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ecde:	693b      	ldr	r3, [r7, #16]
 800ece0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ece2:	4b19      	ldr	r3, [pc, #100]	@ (800ed48 <xTaskRemoveFromEventList+0xb4>)
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d903      	bls.n	800ecf2 <xTaskRemoveFromEventList+0x5e>
 800ecea:	693b      	ldr	r3, [r7, #16]
 800ecec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecee:	4a16      	ldr	r2, [pc, #88]	@ (800ed48 <xTaskRemoveFromEventList+0xb4>)
 800ecf0:	6013      	str	r3, [r2, #0]
 800ecf2:	693b      	ldr	r3, [r7, #16]
 800ecf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecf6:	4613      	mov	r3, r2
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	4413      	add	r3, r2
 800ecfc:	009b      	lsls	r3, r3, #2
 800ecfe:	4a13      	ldr	r2, [pc, #76]	@ (800ed4c <xTaskRemoveFromEventList+0xb8>)
 800ed00:	441a      	add	r2, r3
 800ed02:	693b      	ldr	r3, [r7, #16]
 800ed04:	3304      	adds	r3, #4
 800ed06:	4619      	mov	r1, r3
 800ed08:	4610      	mov	r0, r2
 800ed0a:	f7fe f996 	bl	800d03a <vListInsertEnd>
 800ed0e:	e005      	b.n	800ed1c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ed10:	693b      	ldr	r3, [r7, #16]
 800ed12:	3318      	adds	r3, #24
 800ed14:	4619      	mov	r1, r3
 800ed16:	480e      	ldr	r0, [pc, #56]	@ (800ed50 <xTaskRemoveFromEventList+0xbc>)
 800ed18:	f7fe f98f 	bl	800d03a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ed1c:	693b      	ldr	r3, [r7, #16]
 800ed1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ed20:	4b0c      	ldr	r3, [pc, #48]	@ (800ed54 <xTaskRemoveFromEventList+0xc0>)
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d905      	bls.n	800ed36 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ed2e:	4b0a      	ldr	r3, [pc, #40]	@ (800ed58 <xTaskRemoveFromEventList+0xc4>)
 800ed30:	2201      	movs	r2, #1
 800ed32:	601a      	str	r2, [r3, #0]
 800ed34:	e001      	b.n	800ed3a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800ed36:	2300      	movs	r3, #0
 800ed38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ed3a:	697b      	ldr	r3, [r7, #20]
}
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	3718      	adds	r7, #24
 800ed40:	46bd      	mov	sp, r7
 800ed42:	bd80      	pop	{r7, pc}
 800ed44:	200132dc 	.word	0x200132dc
 800ed48:	200132bc 	.word	0x200132bc
 800ed4c:	20012de4 	.word	0x20012de4
 800ed50:	20013274 	.word	0x20013274
 800ed54:	20012de0 	.word	0x20012de0
 800ed58:	200132c8 	.word	0x200132c8

0800ed5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ed5c:	b480      	push	{r7}
 800ed5e:	b083      	sub	sp, #12
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ed64:	4b06      	ldr	r3, [pc, #24]	@ (800ed80 <vTaskInternalSetTimeOutState+0x24>)
 800ed66:	681a      	ldr	r2, [r3, #0]
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ed6c:	4b05      	ldr	r3, [pc, #20]	@ (800ed84 <vTaskInternalSetTimeOutState+0x28>)
 800ed6e:	681a      	ldr	r2, [r3, #0]
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	605a      	str	r2, [r3, #4]
}
 800ed74:	bf00      	nop
 800ed76:	370c      	adds	r7, #12
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed7e:	4770      	bx	lr
 800ed80:	200132cc 	.word	0x200132cc
 800ed84:	200132b8 	.word	0x200132b8

0800ed88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b088      	sub	sp, #32
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d10b      	bne.n	800edb0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800ed98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ed9c:	f383 8811 	msr	BASEPRI, r3
 800eda0:	f3bf 8f6f 	isb	sy
 800eda4:	f3bf 8f4f 	dsb	sy
 800eda8:	613b      	str	r3, [r7, #16]
}
 800edaa:	bf00      	nop
 800edac:	bf00      	nop
 800edae:	e7fd      	b.n	800edac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800edb0:	683b      	ldr	r3, [r7, #0]
 800edb2:	2b00      	cmp	r3, #0
 800edb4:	d10b      	bne.n	800edce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800edb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800edba:	f383 8811 	msr	BASEPRI, r3
 800edbe:	f3bf 8f6f 	isb	sy
 800edc2:	f3bf 8f4f 	dsb	sy
 800edc6:	60fb      	str	r3, [r7, #12]
}
 800edc8:	bf00      	nop
 800edca:	bf00      	nop
 800edcc:	e7fd      	b.n	800edca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800edce:	f001 f8b3 	bl	800ff38 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800edd2:	4b1d      	ldr	r3, [pc, #116]	@ (800ee48 <xTaskCheckForTimeOut+0xc0>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	685b      	ldr	r3, [r3, #4]
 800eddc:	69ba      	ldr	r2, [r7, #24]
 800edde:	1ad3      	subs	r3, r2, r3
 800ede0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edea:	d102      	bne.n	800edf2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800edec:	2300      	movs	r3, #0
 800edee:	61fb      	str	r3, [r7, #28]
 800edf0:	e023      	b.n	800ee3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	4b15      	ldr	r3, [pc, #84]	@ (800ee4c <xTaskCheckForTimeOut+0xc4>)
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	429a      	cmp	r2, r3
 800edfc:	d007      	beq.n	800ee0e <xTaskCheckForTimeOut+0x86>
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	69ba      	ldr	r2, [r7, #24]
 800ee04:	429a      	cmp	r2, r3
 800ee06:	d302      	bcc.n	800ee0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ee08:	2301      	movs	r3, #1
 800ee0a:	61fb      	str	r3, [r7, #28]
 800ee0c:	e015      	b.n	800ee3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	697a      	ldr	r2, [r7, #20]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d20b      	bcs.n	800ee30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	681a      	ldr	r2, [r3, #0]
 800ee1c:	697b      	ldr	r3, [r7, #20]
 800ee1e:	1ad2      	subs	r2, r2, r3
 800ee20:	683b      	ldr	r3, [r7, #0]
 800ee22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ee24:	6878      	ldr	r0, [r7, #4]
 800ee26:	f7ff ff99 	bl	800ed5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	61fb      	str	r3, [r7, #28]
 800ee2e:	e004      	b.n	800ee3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800ee30:	683b      	ldr	r3, [r7, #0]
 800ee32:	2200      	movs	r2, #0
 800ee34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ee36:	2301      	movs	r3, #1
 800ee38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ee3a:	f001 f8af 	bl	800ff9c <vPortExitCritical>

	return xReturn;
 800ee3e:	69fb      	ldr	r3, [r7, #28]
}
 800ee40:	4618      	mov	r0, r3
 800ee42:	3720      	adds	r7, #32
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}
 800ee48:	200132b8 	.word	0x200132b8
 800ee4c:	200132cc 	.word	0x200132cc

0800ee50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ee50:	b480      	push	{r7}
 800ee52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ee54:	4b03      	ldr	r3, [pc, #12]	@ (800ee64 <vTaskMissedYield+0x14>)
 800ee56:	2201      	movs	r2, #1
 800ee58:	601a      	str	r2, [r3, #0]
}
 800ee5a:	bf00      	nop
 800ee5c:	46bd      	mov	sp, r7
 800ee5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee62:	4770      	bx	lr
 800ee64:	200132c8 	.word	0x200132c8

0800ee68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ee70:	f000 f852 	bl	800ef18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ee74:	4b06      	ldr	r3, [pc, #24]	@ (800ee90 <prvIdleTask+0x28>)
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d9f9      	bls.n	800ee70 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ee7c:	4b05      	ldr	r3, [pc, #20]	@ (800ee94 <prvIdleTask+0x2c>)
 800ee7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ee82:	601a      	str	r2, [r3, #0]
 800ee84:	f3bf 8f4f 	dsb	sy
 800ee88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ee8c:	e7f0      	b.n	800ee70 <prvIdleTask+0x8>
 800ee8e:	bf00      	nop
 800ee90:	20012de4 	.word	0x20012de4
 800ee94:	e000ed04 	.word	0xe000ed04

0800ee98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ee9e:	2300      	movs	r3, #0
 800eea0:	607b      	str	r3, [r7, #4]
 800eea2:	e00c      	b.n	800eebe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	4613      	mov	r3, r2
 800eea8:	009b      	lsls	r3, r3, #2
 800eeaa:	4413      	add	r3, r2
 800eeac:	009b      	lsls	r3, r3, #2
 800eeae:	4a12      	ldr	r2, [pc, #72]	@ (800eef8 <prvInitialiseTaskLists+0x60>)
 800eeb0:	4413      	add	r3, r2
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	f7fe f894 	bl	800cfe0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	3301      	adds	r3, #1
 800eebc:	607b      	str	r3, [r7, #4]
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2b37      	cmp	r3, #55	@ 0x37
 800eec2:	d9ef      	bls.n	800eea4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eec4:	480d      	ldr	r0, [pc, #52]	@ (800eefc <prvInitialiseTaskLists+0x64>)
 800eec6:	f7fe f88b 	bl	800cfe0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eeca:	480d      	ldr	r0, [pc, #52]	@ (800ef00 <prvInitialiseTaskLists+0x68>)
 800eecc:	f7fe f888 	bl	800cfe0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eed0:	480c      	ldr	r0, [pc, #48]	@ (800ef04 <prvInitialiseTaskLists+0x6c>)
 800eed2:	f7fe f885 	bl	800cfe0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eed6:	480c      	ldr	r0, [pc, #48]	@ (800ef08 <prvInitialiseTaskLists+0x70>)
 800eed8:	f7fe f882 	bl	800cfe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eedc:	480b      	ldr	r0, [pc, #44]	@ (800ef0c <prvInitialiseTaskLists+0x74>)
 800eede:	f7fe f87f 	bl	800cfe0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eee2:	4b0b      	ldr	r3, [pc, #44]	@ (800ef10 <prvInitialiseTaskLists+0x78>)
 800eee4:	4a05      	ldr	r2, [pc, #20]	@ (800eefc <prvInitialiseTaskLists+0x64>)
 800eee6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eee8:	4b0a      	ldr	r3, [pc, #40]	@ (800ef14 <prvInitialiseTaskLists+0x7c>)
 800eeea:	4a05      	ldr	r2, [pc, #20]	@ (800ef00 <prvInitialiseTaskLists+0x68>)
 800eeec:	601a      	str	r2, [r3, #0]
}
 800eeee:	bf00      	nop
 800eef0:	3708      	adds	r7, #8
 800eef2:	46bd      	mov	sp, r7
 800eef4:	bd80      	pop	{r7, pc}
 800eef6:	bf00      	nop
 800eef8:	20012de4 	.word	0x20012de4
 800eefc:	20013244 	.word	0x20013244
 800ef00:	20013258 	.word	0x20013258
 800ef04:	20013274 	.word	0x20013274
 800ef08:	20013288 	.word	0x20013288
 800ef0c:	200132a0 	.word	0x200132a0
 800ef10:	2001326c 	.word	0x2001326c
 800ef14:	20013270 	.word	0x20013270

0800ef18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b082      	sub	sp, #8
 800ef1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ef1e:	e019      	b.n	800ef54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ef20:	f001 f80a 	bl	800ff38 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef24:	4b10      	ldr	r3, [pc, #64]	@ (800ef68 <prvCheckTasksWaitingTermination+0x50>)
 800ef26:	68db      	ldr	r3, [r3, #12]
 800ef28:	68db      	ldr	r3, [r3, #12]
 800ef2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	3304      	adds	r3, #4
 800ef30:	4618      	mov	r0, r3
 800ef32:	f7fe f8df 	bl	800d0f4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ef36:	4b0d      	ldr	r3, [pc, #52]	@ (800ef6c <prvCheckTasksWaitingTermination+0x54>)
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	3b01      	subs	r3, #1
 800ef3c:	4a0b      	ldr	r2, [pc, #44]	@ (800ef6c <prvCheckTasksWaitingTermination+0x54>)
 800ef3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ef40:	4b0b      	ldr	r3, [pc, #44]	@ (800ef70 <prvCheckTasksWaitingTermination+0x58>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	3b01      	subs	r3, #1
 800ef46:	4a0a      	ldr	r2, [pc, #40]	@ (800ef70 <prvCheckTasksWaitingTermination+0x58>)
 800ef48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ef4a:	f001 f827 	bl	800ff9c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ef4e:	6878      	ldr	r0, [r7, #4]
 800ef50:	f000 f810 	bl	800ef74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ef54:	4b06      	ldr	r3, [pc, #24]	@ (800ef70 <prvCheckTasksWaitingTermination+0x58>)
 800ef56:	681b      	ldr	r3, [r3, #0]
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d1e1      	bne.n	800ef20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ef5c:	bf00      	nop
 800ef5e:	bf00      	nop
 800ef60:	3708      	adds	r7, #8
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	20013288 	.word	0x20013288
 800ef6c:	200132b4 	.word	0x200132b4
 800ef70:	2001329c 	.word	0x2001329c

0800ef74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b084      	sub	sp, #16
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	3358      	adds	r3, #88	@ 0x58
 800ef80:	4618      	mov	r0, r3
 800ef82:	f00f fd6f 	bl	801ea64 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d108      	bne.n	800efa2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ef94:	4618      	mov	r0, r3
 800ef96:	f001 f9bf 	bl	8010318 <vPortFree>
				vPortFree( pxTCB );
 800ef9a:	6878      	ldr	r0, [r7, #4]
 800ef9c:	f001 f9bc 	bl	8010318 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800efa0:	e019      	b.n	800efd6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800efa8:	2b01      	cmp	r3, #1
 800efaa:	d103      	bne.n	800efb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800efac:	6878      	ldr	r0, [r7, #4]
 800efae:	f001 f9b3 	bl	8010318 <vPortFree>
	}
 800efb2:	e010      	b.n	800efd6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 800efba:	2b02      	cmp	r3, #2
 800efbc:	d00b      	beq.n	800efd6 <prvDeleteTCB+0x62>
	__asm volatile
 800efbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800efc2:	f383 8811 	msr	BASEPRI, r3
 800efc6:	f3bf 8f6f 	isb	sy
 800efca:	f3bf 8f4f 	dsb	sy
 800efce:	60fb      	str	r3, [r7, #12]
}
 800efd0:	bf00      	nop
 800efd2:	bf00      	nop
 800efd4:	e7fd      	b.n	800efd2 <prvDeleteTCB+0x5e>
	}
 800efd6:	bf00      	nop
 800efd8:	3710      	adds	r7, #16
 800efda:	46bd      	mov	sp, r7
 800efdc:	bd80      	pop	{r7, pc}
	...

0800efe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800efe0:	b480      	push	{r7}
 800efe2:	b083      	sub	sp, #12
 800efe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800efe6:	4b0c      	ldr	r3, [pc, #48]	@ (800f018 <prvResetNextTaskUnblockTime+0x38>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d104      	bne.n	800effa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800eff0:	4b0a      	ldr	r3, [pc, #40]	@ (800f01c <prvResetNextTaskUnblockTime+0x3c>)
 800eff2:	f04f 32ff 	mov.w	r2, #4294967295
 800eff6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800eff8:	e008      	b.n	800f00c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800effa:	4b07      	ldr	r3, [pc, #28]	@ (800f018 <prvResetNextTaskUnblockTime+0x38>)
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	68db      	ldr	r3, [r3, #12]
 800f000:	68db      	ldr	r3, [r3, #12]
 800f002:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	685b      	ldr	r3, [r3, #4]
 800f008:	4a04      	ldr	r2, [pc, #16]	@ (800f01c <prvResetNextTaskUnblockTime+0x3c>)
 800f00a:	6013      	str	r3, [r2, #0]
}
 800f00c:	bf00      	nop
 800f00e:	370c      	adds	r7, #12
 800f010:	46bd      	mov	sp, r7
 800f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f016:	4770      	bx	lr
 800f018:	2001326c 	.word	0x2001326c
 800f01c:	200132d4 	.word	0x200132d4

0800f020 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800f020:	b480      	push	{r7}
 800f022:	b083      	sub	sp, #12
 800f024:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800f026:	4b05      	ldr	r3, [pc, #20]	@ (800f03c <xTaskGetCurrentTaskHandle+0x1c>)
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	607b      	str	r3, [r7, #4]

		return xReturn;
 800f02c:	687b      	ldr	r3, [r7, #4]
	}
 800f02e:	4618      	mov	r0, r3
 800f030:	370c      	adds	r7, #12
 800f032:	46bd      	mov	sp, r7
 800f034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f038:	4770      	bx	lr
 800f03a:	bf00      	nop
 800f03c:	20012de0 	.word	0x20012de0

0800f040 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800f040:	b480      	push	{r7}
 800f042:	b083      	sub	sp, #12
 800f044:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800f046:	4b0b      	ldr	r3, [pc, #44]	@ (800f074 <xTaskGetSchedulerState+0x34>)
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d102      	bne.n	800f054 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f04e:	2301      	movs	r3, #1
 800f050:	607b      	str	r3, [r7, #4]
 800f052:	e008      	b.n	800f066 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f054:	4b08      	ldr	r3, [pc, #32]	@ (800f078 <xTaskGetSchedulerState+0x38>)
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d102      	bne.n	800f062 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800f05c:	2302      	movs	r3, #2
 800f05e:	607b      	str	r3, [r7, #4]
 800f060:	e001      	b.n	800f066 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800f062:	2300      	movs	r3, #0
 800f064:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800f066:	687b      	ldr	r3, [r7, #4]
	}
 800f068:	4618      	mov	r0, r3
 800f06a:	370c      	adds	r7, #12
 800f06c:	46bd      	mov	sp, r7
 800f06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f072:	4770      	bx	lr
 800f074:	200132c0 	.word	0x200132c0
 800f078:	200132dc 	.word	0x200132dc

0800f07c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800f07c:	b580      	push	{r7, lr}
 800f07e:	b084      	sub	sp, #16
 800f080:	af00      	add	r7, sp, #0
 800f082:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800f088:	2300      	movs	r3, #0
 800f08a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d051      	beq.n	800f136 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f092:	68bb      	ldr	r3, [r7, #8]
 800f094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f096:	4b2a      	ldr	r3, [pc, #168]	@ (800f140 <xTaskPriorityInherit+0xc4>)
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f09c:	429a      	cmp	r2, r3
 800f09e:	d241      	bcs.n	800f124 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	699b      	ldr	r3, [r3, #24]
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	db06      	blt.n	800f0b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f0a8:	4b25      	ldr	r3, [pc, #148]	@ (800f140 <xTaskPriorityInherit+0xc4>)
 800f0aa:	681b      	ldr	r3, [r3, #0]
 800f0ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0ae:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f0b2:	68bb      	ldr	r3, [r7, #8]
 800f0b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f0b6:	68bb      	ldr	r3, [r7, #8]
 800f0b8:	6959      	ldr	r1, [r3, #20]
 800f0ba:	68bb      	ldr	r3, [r7, #8]
 800f0bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0be:	4613      	mov	r3, r2
 800f0c0:	009b      	lsls	r3, r3, #2
 800f0c2:	4413      	add	r3, r2
 800f0c4:	009b      	lsls	r3, r3, #2
 800f0c6:	4a1f      	ldr	r2, [pc, #124]	@ (800f144 <xTaskPriorityInherit+0xc8>)
 800f0c8:	4413      	add	r3, r2
 800f0ca:	4299      	cmp	r1, r3
 800f0cc:	d122      	bne.n	800f114 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0ce:	68bb      	ldr	r3, [r7, #8]
 800f0d0:	3304      	adds	r3, #4
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7fe f80e 	bl	800d0f4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f0d8:	4b19      	ldr	r3, [pc, #100]	@ (800f140 <xTaskPriorityInherit+0xc4>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0de:	68bb      	ldr	r3, [r7, #8]
 800f0e0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f0e2:	68bb      	ldr	r3, [r7, #8]
 800f0e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0e6:	4b18      	ldr	r3, [pc, #96]	@ (800f148 <xTaskPriorityInherit+0xcc>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d903      	bls.n	800f0f6 <xTaskPriorityInherit+0x7a>
 800f0ee:	68bb      	ldr	r3, [r7, #8]
 800f0f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0f2:	4a15      	ldr	r2, [pc, #84]	@ (800f148 <xTaskPriorityInherit+0xcc>)
 800f0f4:	6013      	str	r3, [r2, #0]
 800f0f6:	68bb      	ldr	r3, [r7, #8]
 800f0f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f0fa:	4613      	mov	r3, r2
 800f0fc:	009b      	lsls	r3, r3, #2
 800f0fe:	4413      	add	r3, r2
 800f100:	009b      	lsls	r3, r3, #2
 800f102:	4a10      	ldr	r2, [pc, #64]	@ (800f144 <xTaskPriorityInherit+0xc8>)
 800f104:	441a      	add	r2, r3
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	3304      	adds	r3, #4
 800f10a:	4619      	mov	r1, r3
 800f10c:	4610      	mov	r0, r2
 800f10e:	f7fd ff94 	bl	800d03a <vListInsertEnd>
 800f112:	e004      	b.n	800f11e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f114:	4b0a      	ldr	r3, [pc, #40]	@ (800f140 <xTaskPriorityInherit+0xc4>)
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f11a:	68bb      	ldr	r3, [r7, #8]
 800f11c:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800f11e:	2301      	movs	r3, #1
 800f120:	60fb      	str	r3, [r7, #12]
 800f122:	e008      	b.n	800f136 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f128:	4b05      	ldr	r3, [pc, #20]	@ (800f140 <xTaskPriorityInherit+0xc4>)
 800f12a:	681b      	ldr	r3, [r3, #0]
 800f12c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f12e:	429a      	cmp	r2, r3
 800f130:	d201      	bcs.n	800f136 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800f132:	2301      	movs	r3, #1
 800f134:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f136:	68fb      	ldr	r3, [r7, #12]
	}
 800f138:	4618      	mov	r0, r3
 800f13a:	3710      	adds	r7, #16
 800f13c:	46bd      	mov	sp, r7
 800f13e:	bd80      	pop	{r7, pc}
 800f140:	20012de0 	.word	0x20012de0
 800f144:	20012de4 	.word	0x20012de4
 800f148:	200132bc 	.word	0x200132bc

0800f14c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b086      	sub	sp, #24
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800f158:	2300      	movs	r3, #0
 800f15a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d058      	beq.n	800f214 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800f162:	4b2f      	ldr	r3, [pc, #188]	@ (800f220 <xTaskPriorityDisinherit+0xd4>)
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	693a      	ldr	r2, [r7, #16]
 800f168:	429a      	cmp	r2, r3
 800f16a:	d00b      	beq.n	800f184 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800f16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f170:	f383 8811 	msr	BASEPRI, r3
 800f174:	f3bf 8f6f 	isb	sy
 800f178:	f3bf 8f4f 	dsb	sy
 800f17c:	60fb      	str	r3, [r7, #12]
}
 800f17e:	bf00      	nop
 800f180:	bf00      	nop
 800f182:	e7fd      	b.n	800f180 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800f184:	693b      	ldr	r3, [r7, #16]
 800f186:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f188:	2b00      	cmp	r3, #0
 800f18a:	d10b      	bne.n	800f1a4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800f18c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f190:	f383 8811 	msr	BASEPRI, r3
 800f194:	f3bf 8f6f 	isb	sy
 800f198:	f3bf 8f4f 	dsb	sy
 800f19c:	60bb      	str	r3, [r7, #8]
}
 800f19e:	bf00      	nop
 800f1a0:	bf00      	nop
 800f1a2:	e7fd      	b.n	800f1a0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800f1a4:	693b      	ldr	r3, [r7, #16]
 800f1a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1a8:	1e5a      	subs	r2, r3, #1
 800f1aa:	693b      	ldr	r3, [r7, #16]
 800f1ac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1b2:	693b      	ldr	r3, [r7, #16]
 800f1b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f1b6:	429a      	cmp	r2, r3
 800f1b8:	d02c      	beq.n	800f214 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d128      	bne.n	800f214 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	3304      	adds	r3, #4
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	f7fd ff94 	bl	800d0f4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f1cc:	693b      	ldr	r3, [r7, #16]
 800f1ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800f1d0:	693b      	ldr	r3, [r7, #16]
 800f1d2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f1d4:	693b      	ldr	r3, [r7, #16]
 800f1d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1d8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f1dc:	693b      	ldr	r3, [r7, #16]
 800f1de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800f1e0:	693b      	ldr	r3, [r7, #16]
 800f1e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1e4:	4b0f      	ldr	r3, [pc, #60]	@ (800f224 <xTaskPriorityDisinherit+0xd8>)
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	429a      	cmp	r2, r3
 800f1ea:	d903      	bls.n	800f1f4 <xTaskPriorityDisinherit+0xa8>
 800f1ec:	693b      	ldr	r3, [r7, #16]
 800f1ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1f0:	4a0c      	ldr	r2, [pc, #48]	@ (800f224 <xTaskPriorityDisinherit+0xd8>)
 800f1f2:	6013      	str	r3, [r2, #0]
 800f1f4:	693b      	ldr	r3, [r7, #16]
 800f1f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f1f8:	4613      	mov	r3, r2
 800f1fa:	009b      	lsls	r3, r3, #2
 800f1fc:	4413      	add	r3, r2
 800f1fe:	009b      	lsls	r3, r3, #2
 800f200:	4a09      	ldr	r2, [pc, #36]	@ (800f228 <xTaskPriorityDisinherit+0xdc>)
 800f202:	441a      	add	r2, r3
 800f204:	693b      	ldr	r3, [r7, #16]
 800f206:	3304      	adds	r3, #4
 800f208:	4619      	mov	r1, r3
 800f20a:	4610      	mov	r0, r2
 800f20c:	f7fd ff15 	bl	800d03a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800f210:	2301      	movs	r3, #1
 800f212:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800f214:	697b      	ldr	r3, [r7, #20]
	}
 800f216:	4618      	mov	r0, r3
 800f218:	3718      	adds	r7, #24
 800f21a:	46bd      	mov	sp, r7
 800f21c:	bd80      	pop	{r7, pc}
 800f21e:	bf00      	nop
 800f220:	20012de0 	.word	0x20012de0
 800f224:	200132bc 	.word	0x200132bc
 800f228:	20012de4 	.word	0x20012de4

0800f22c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b088      	sub	sp, #32
 800f230:	af00      	add	r7, sp, #0
 800f232:	6078      	str	r0, [r7, #4]
 800f234:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800f23a:	2301      	movs	r3, #1
 800f23c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d06c      	beq.n	800f31e <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800f244:	69bb      	ldr	r3, [r7, #24]
 800f246:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d10b      	bne.n	800f264 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800f24c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f250:	f383 8811 	msr	BASEPRI, r3
 800f254:	f3bf 8f6f 	isb	sy
 800f258:	f3bf 8f4f 	dsb	sy
 800f25c:	60fb      	str	r3, [r7, #12]
}
 800f25e:	bf00      	nop
 800f260:	bf00      	nop
 800f262:	e7fd      	b.n	800f260 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f264:	69bb      	ldr	r3, [r7, #24]
 800f266:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f268:	683a      	ldr	r2, [r7, #0]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d902      	bls.n	800f274 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800f26e:	683b      	ldr	r3, [r7, #0]
 800f270:	61fb      	str	r3, [r7, #28]
 800f272:	e002      	b.n	800f27a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800f274:	69bb      	ldr	r3, [r7, #24]
 800f276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f278:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f27a:	69bb      	ldr	r3, [r7, #24]
 800f27c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f27e:	69fa      	ldr	r2, [r7, #28]
 800f280:	429a      	cmp	r2, r3
 800f282:	d04c      	beq.n	800f31e <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f284:	69bb      	ldr	r3, [r7, #24]
 800f286:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f288:	697a      	ldr	r2, [r7, #20]
 800f28a:	429a      	cmp	r2, r3
 800f28c:	d147      	bne.n	800f31e <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800f28e:	4b26      	ldr	r3, [pc, #152]	@ (800f328 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800f290:	681b      	ldr	r3, [r3, #0]
 800f292:	69ba      	ldr	r2, [r7, #24]
 800f294:	429a      	cmp	r2, r3
 800f296:	d10b      	bne.n	800f2b0 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800f298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f29c:	f383 8811 	msr	BASEPRI, r3
 800f2a0:	f3bf 8f6f 	isb	sy
 800f2a4:	f3bf 8f4f 	dsb	sy
 800f2a8:	60bb      	str	r3, [r7, #8]
}
 800f2aa:	bf00      	nop
 800f2ac:	bf00      	nop
 800f2ae:	e7fd      	b.n	800f2ac <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800f2b0:	69bb      	ldr	r3, [r7, #24]
 800f2b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2b4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800f2b6:	69bb      	ldr	r3, [r7, #24]
 800f2b8:	69fa      	ldr	r2, [r7, #28]
 800f2ba:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f2bc:	69bb      	ldr	r3, [r7, #24]
 800f2be:	699b      	ldr	r3, [r3, #24]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	db04      	blt.n	800f2ce <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f2c4:	69fb      	ldr	r3, [r7, #28]
 800f2c6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800f2ca:	69bb      	ldr	r3, [r7, #24]
 800f2cc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f2ce:	69bb      	ldr	r3, [r7, #24]
 800f2d0:	6959      	ldr	r1, [r3, #20]
 800f2d2:	693a      	ldr	r2, [r7, #16]
 800f2d4:	4613      	mov	r3, r2
 800f2d6:	009b      	lsls	r3, r3, #2
 800f2d8:	4413      	add	r3, r2
 800f2da:	009b      	lsls	r3, r3, #2
 800f2dc:	4a13      	ldr	r2, [pc, #76]	@ (800f32c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f2de:	4413      	add	r3, r2
 800f2e0:	4299      	cmp	r1, r3
 800f2e2:	d11c      	bne.n	800f31e <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f2e4:	69bb      	ldr	r3, [r7, #24]
 800f2e6:	3304      	adds	r3, #4
 800f2e8:	4618      	mov	r0, r3
 800f2ea:	f7fd ff03 	bl	800d0f4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f2ee:	69bb      	ldr	r3, [r7, #24]
 800f2f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f2f2:	4b0f      	ldr	r3, [pc, #60]	@ (800f330 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f2f4:	681b      	ldr	r3, [r3, #0]
 800f2f6:	429a      	cmp	r2, r3
 800f2f8:	d903      	bls.n	800f302 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800f2fa:	69bb      	ldr	r3, [r7, #24]
 800f2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f2fe:	4a0c      	ldr	r2, [pc, #48]	@ (800f330 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800f300:	6013      	str	r3, [r2, #0]
 800f302:	69bb      	ldr	r3, [r7, #24]
 800f304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f306:	4613      	mov	r3, r2
 800f308:	009b      	lsls	r3, r3, #2
 800f30a:	4413      	add	r3, r2
 800f30c:	009b      	lsls	r3, r3, #2
 800f30e:	4a07      	ldr	r2, [pc, #28]	@ (800f32c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800f310:	441a      	add	r2, r3
 800f312:	69bb      	ldr	r3, [r7, #24]
 800f314:	3304      	adds	r3, #4
 800f316:	4619      	mov	r1, r3
 800f318:	4610      	mov	r0, r2
 800f31a:	f7fd fe8e 	bl	800d03a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f31e:	bf00      	nop
 800f320:	3720      	adds	r7, #32
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}
 800f326:	bf00      	nop
 800f328:	20012de0 	.word	0x20012de0
 800f32c:	20012de4 	.word	0x20012de4
 800f330:	200132bc 	.word	0x200132bc

0800f334 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f334:	b480      	push	{r7}
 800f336:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f338:	4b07      	ldr	r3, [pc, #28]	@ (800f358 <pvTaskIncrementMutexHeldCount+0x24>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d004      	beq.n	800f34a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f340:	4b05      	ldr	r3, [pc, #20]	@ (800f358 <pvTaskIncrementMutexHeldCount+0x24>)
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f346:	3201      	adds	r2, #1
 800f348:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800f34a:	4b03      	ldr	r3, [pc, #12]	@ (800f358 <pvTaskIncrementMutexHeldCount+0x24>)
 800f34c:	681b      	ldr	r3, [r3, #0]
	}
 800f34e:	4618      	mov	r0, r3
 800f350:	46bd      	mov	sp, r7
 800f352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f356:	4770      	bx	lr
 800f358:	20012de0 	.word	0x20012de0

0800f35c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800f35c:	b580      	push	{r7, lr}
 800f35e:	b084      	sub	sp, #16
 800f360:	af00      	add	r7, sp, #0
 800f362:	6078      	str	r0, [r7, #4]
 800f364:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800f366:	f000 fde7 	bl	800ff38 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800f36a:	4b20      	ldr	r3, [pc, #128]	@ (800f3ec <ulTaskNotifyTake+0x90>)
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f372:	2b00      	cmp	r3, #0
 800f374:	d113      	bne.n	800f39e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800f376:	4b1d      	ldr	r3, [pc, #116]	@ (800f3ec <ulTaskNotifyTake+0x90>)
 800f378:	681b      	ldr	r3, [r3, #0]
 800f37a:	2201      	movs	r2, #1
 800f37c:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

				if( xTicksToWait > ( TickType_t ) 0 )
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d00b      	beq.n	800f39e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f386:	2101      	movs	r1, #1
 800f388:	6838      	ldr	r0, [r7, #0]
 800f38a:	f000 f8f5 	bl	800f578 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800f38e:	4b18      	ldr	r3, [pc, #96]	@ (800f3f0 <ulTaskNotifyTake+0x94>)
 800f390:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f394:	601a      	str	r2, [r3, #0]
 800f396:	f3bf 8f4f 	dsb	sy
 800f39a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f39e:	f000 fdfd 	bl	800ff9c <vPortExitCritical>

		taskENTER_CRITICAL();
 800f3a2:	f000 fdc9 	bl	800ff38 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800f3a6:	4b11      	ldr	r3, [pc, #68]	@ (800f3ec <ulTaskNotifyTake+0x90>)
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f3ae:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	2b00      	cmp	r3, #0
 800f3b4:	d00e      	beq.n	800f3d4 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d005      	beq.n	800f3c8 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800f3bc:	4b0b      	ldr	r3, [pc, #44]	@ (800f3ec <ulTaskNotifyTake+0x90>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	2200      	movs	r2, #0
 800f3c2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800f3c6:	e005      	b.n	800f3d4 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800f3c8:	4b08      	ldr	r3, [pc, #32]	@ (800f3ec <ulTaskNotifyTake+0x90>)
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	68fa      	ldr	r2, [r7, #12]
 800f3ce:	3a01      	subs	r2, #1
 800f3d0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f3d4:	4b05      	ldr	r3, [pc, #20]	@ (800f3ec <ulTaskNotifyTake+0x90>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	2200      	movs	r2, #0
 800f3da:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8
		}
		taskEXIT_CRITICAL();
 800f3de:	f000 fddd 	bl	800ff9c <vPortExitCritical>

		return ulReturn;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
	}
 800f3e4:	4618      	mov	r0, r3
 800f3e6:	3710      	adds	r7, #16
 800f3e8:	46bd      	mov	sp, r7
 800f3ea:	bd80      	pop	{r7, pc}
 800f3ec:	20012de0 	.word	0x20012de0
 800f3f0:	e000ed04 	.word	0xe000ed04

0800f3f4 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 800f3f4:	b580      	push	{r7, lr}
 800f3f6:	b08a      	sub	sp, #40	@ 0x28
 800f3f8:	af00      	add	r7, sp, #0
 800f3fa:	60f8      	str	r0, [r7, #12]
 800f3fc:	60b9      	str	r1, [r7, #8]
 800f3fe:	603b      	str	r3, [r7, #0]
 800f400:	4613      	mov	r3, r2
 800f402:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 800f404:	2301      	movs	r3, #1
 800f406:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d10b      	bne.n	800f426 <xTaskGenericNotify+0x32>
	__asm volatile
 800f40e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f412:	f383 8811 	msr	BASEPRI, r3
 800f416:	f3bf 8f6f 	isb	sy
 800f41a:	f3bf 8f4f 	dsb	sy
 800f41e:	61bb      	str	r3, [r7, #24]
}
 800f420:	bf00      	nop
 800f422:	bf00      	nop
 800f424:	e7fd      	b.n	800f422 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800f42a:	f000 fd85 	bl	800ff38 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d004      	beq.n	800f43e <xTaskGenericNotify+0x4a>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800f434:	6a3b      	ldr	r3, [r7, #32]
 800f436:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800f43e:	6a3b      	ldr	r3, [r7, #32]
 800f440:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 800f444:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800f446:	6a3b      	ldr	r3, [r7, #32]
 800f448:	2202      	movs	r2, #2
 800f44a:	f883 20a8 	strb.w	r2, [r3, #168]	@ 0xa8

			switch( eAction )
 800f44e:	79fb      	ldrb	r3, [r7, #7]
 800f450:	2b04      	cmp	r3, #4
 800f452:	d82e      	bhi.n	800f4b2 <xTaskGenericNotify+0xbe>
 800f454:	a201      	add	r2, pc, #4	@ (adr r2, 800f45c <xTaskGenericNotify+0x68>)
 800f456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f45a:	bf00      	nop
 800f45c:	0800f4d7 	.word	0x0800f4d7
 800f460:	0800f471 	.word	0x0800f471
 800f464:	0800f483 	.word	0x0800f483
 800f468:	0800f493 	.word	0x0800f493
 800f46c:	0800f49d 	.word	0x0800f49d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800f470:	6a3b      	ldr	r3, [r7, #32]
 800f472:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800f476:	68bb      	ldr	r3, [r7, #8]
 800f478:	431a      	orrs	r2, r3
 800f47a:	6a3b      	ldr	r3, [r7, #32]
 800f47c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 800f480:	e02c      	b.n	800f4dc <xTaskGenericNotify+0xe8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800f482:	6a3b      	ldr	r3, [r7, #32]
 800f484:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f488:	1c5a      	adds	r2, r3, #1
 800f48a:	6a3b      	ldr	r3, [r7, #32]
 800f48c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 800f490:	e024      	b.n	800f4dc <xTaskGenericNotify+0xe8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800f492:	6a3b      	ldr	r3, [r7, #32]
 800f494:	68ba      	ldr	r2, [r7, #8]
 800f496:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					break;
 800f49a:	e01f      	b.n	800f4dc <xTaskGenericNotify+0xe8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800f49c:	7ffb      	ldrb	r3, [r7, #31]
 800f49e:	2b02      	cmp	r3, #2
 800f4a0:	d004      	beq.n	800f4ac <xTaskGenericNotify+0xb8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800f4a2:	6a3b      	ldr	r3, [r7, #32]
 800f4a4:	68ba      	ldr	r2, [r7, #8]
 800f4a6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800f4aa:	e017      	b.n	800f4dc <xTaskGenericNotify+0xe8>
						xReturn = pdFAIL;
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800f4b0:	e014      	b.n	800f4dc <xTaskGenericNotify+0xe8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800f4b2:	6a3b      	ldr	r3, [r7, #32]
 800f4b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800f4b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4bc:	d00d      	beq.n	800f4da <xTaskGenericNotify+0xe6>
	__asm volatile
 800f4be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4c2:	f383 8811 	msr	BASEPRI, r3
 800f4c6:	f3bf 8f6f 	isb	sy
 800f4ca:	f3bf 8f4f 	dsb	sy
 800f4ce:	617b      	str	r3, [r7, #20]
}
 800f4d0:	bf00      	nop
 800f4d2:	bf00      	nop
 800f4d4:	e7fd      	b.n	800f4d2 <xTaskGenericNotify+0xde>
					break;
 800f4d6:	bf00      	nop
 800f4d8:	e000      	b.n	800f4dc <xTaskGenericNotify+0xe8>

					break;
 800f4da:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800f4dc:	7ffb      	ldrb	r3, [r7, #31]
 800f4de:	2b01      	cmp	r3, #1
 800f4e0:	d13b      	bne.n	800f55a <xTaskGenericNotify+0x166>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f4e2:	6a3b      	ldr	r3, [r7, #32]
 800f4e4:	3304      	adds	r3, #4
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7fd fe04 	bl	800d0f4 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800f4ec:	6a3b      	ldr	r3, [r7, #32]
 800f4ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f4f0:	4b1d      	ldr	r3, [pc, #116]	@ (800f568 <xTaskGenericNotify+0x174>)
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	429a      	cmp	r2, r3
 800f4f6:	d903      	bls.n	800f500 <xTaskGenericNotify+0x10c>
 800f4f8:	6a3b      	ldr	r3, [r7, #32]
 800f4fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4fc:	4a1a      	ldr	r2, [pc, #104]	@ (800f568 <xTaskGenericNotify+0x174>)
 800f4fe:	6013      	str	r3, [r2, #0]
 800f500:	6a3b      	ldr	r3, [r7, #32]
 800f502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f504:	4613      	mov	r3, r2
 800f506:	009b      	lsls	r3, r3, #2
 800f508:	4413      	add	r3, r2
 800f50a:	009b      	lsls	r3, r3, #2
 800f50c:	4a17      	ldr	r2, [pc, #92]	@ (800f56c <xTaskGenericNotify+0x178>)
 800f50e:	441a      	add	r2, r3
 800f510:	6a3b      	ldr	r3, [r7, #32]
 800f512:	3304      	adds	r3, #4
 800f514:	4619      	mov	r1, r3
 800f516:	4610      	mov	r0, r2
 800f518:	f7fd fd8f 	bl	800d03a <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800f51c:	6a3b      	ldr	r3, [r7, #32]
 800f51e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f520:	2b00      	cmp	r3, #0
 800f522:	d00b      	beq.n	800f53c <xTaskGenericNotify+0x148>
	__asm volatile
 800f524:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f528:	f383 8811 	msr	BASEPRI, r3
 800f52c:	f3bf 8f6f 	isb	sy
 800f530:	f3bf 8f4f 	dsb	sy
 800f534:	613b      	str	r3, [r7, #16]
}
 800f536:	bf00      	nop
 800f538:	bf00      	nop
 800f53a:	e7fd      	b.n	800f538 <xTaskGenericNotify+0x144>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f53c:	6a3b      	ldr	r3, [r7, #32]
 800f53e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800f540:	4b0b      	ldr	r3, [pc, #44]	@ (800f570 <xTaskGenericNotify+0x17c>)
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f546:	429a      	cmp	r2, r3
 800f548:	d907      	bls.n	800f55a <xTaskGenericNotify+0x166>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 800f54a:	4b0a      	ldr	r3, [pc, #40]	@ (800f574 <xTaskGenericNotify+0x180>)
 800f54c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f550:	601a      	str	r2, [r3, #0]
 800f552:	f3bf 8f4f 	dsb	sy
 800f556:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800f55a:	f000 fd1f 	bl	800ff9c <vPortExitCritical>

		return xReturn;
 800f55e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800f560:	4618      	mov	r0, r3
 800f562:	3728      	adds	r7, #40	@ 0x28
 800f564:	46bd      	mov	sp, r7
 800f566:	bd80      	pop	{r7, pc}
 800f568:	200132bc 	.word	0x200132bc
 800f56c:	20012de4 	.word	0x20012de4
 800f570:	20012de0 	.word	0x20012de0
 800f574:	e000ed04 	.word	0xe000ed04

0800f578 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f578:	b580      	push	{r7, lr}
 800f57a:	b084      	sub	sp, #16
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f582:	4b21      	ldr	r3, [pc, #132]	@ (800f608 <prvAddCurrentTaskToDelayedList+0x90>)
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f588:	4b20      	ldr	r3, [pc, #128]	@ (800f60c <prvAddCurrentTaskToDelayedList+0x94>)
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	3304      	adds	r3, #4
 800f58e:	4618      	mov	r0, r3
 800f590:	f7fd fdb0 	bl	800d0f4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f59a:	d10a      	bne.n	800f5b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d007      	beq.n	800f5b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f5a2:	4b1a      	ldr	r3, [pc, #104]	@ (800f60c <prvAddCurrentTaskToDelayedList+0x94>)
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	3304      	adds	r3, #4
 800f5a8:	4619      	mov	r1, r3
 800f5aa:	4819      	ldr	r0, [pc, #100]	@ (800f610 <prvAddCurrentTaskToDelayedList+0x98>)
 800f5ac:	f7fd fd45 	bl	800d03a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f5b0:	e026      	b.n	800f600 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f5b2:	68fa      	ldr	r2, [r7, #12]
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	4413      	add	r3, r2
 800f5b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f5ba:	4b14      	ldr	r3, [pc, #80]	@ (800f60c <prvAddCurrentTaskToDelayedList+0x94>)
 800f5bc:	681b      	ldr	r3, [r3, #0]
 800f5be:	68ba      	ldr	r2, [r7, #8]
 800f5c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f5c2:	68ba      	ldr	r2, [r7, #8]
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	429a      	cmp	r2, r3
 800f5c8:	d209      	bcs.n	800f5de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f5ca:	4b12      	ldr	r3, [pc, #72]	@ (800f614 <prvAddCurrentTaskToDelayedList+0x9c>)
 800f5cc:	681a      	ldr	r2, [r3, #0]
 800f5ce:	4b0f      	ldr	r3, [pc, #60]	@ (800f60c <prvAddCurrentTaskToDelayedList+0x94>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	3304      	adds	r3, #4
 800f5d4:	4619      	mov	r1, r3
 800f5d6:	4610      	mov	r0, r2
 800f5d8:	f7fd fd53 	bl	800d082 <vListInsert>
}
 800f5dc:	e010      	b.n	800f600 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f5de:	4b0e      	ldr	r3, [pc, #56]	@ (800f618 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f5e0:	681a      	ldr	r2, [r3, #0]
 800f5e2:	4b0a      	ldr	r3, [pc, #40]	@ (800f60c <prvAddCurrentTaskToDelayedList+0x94>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	3304      	adds	r3, #4
 800f5e8:	4619      	mov	r1, r3
 800f5ea:	4610      	mov	r0, r2
 800f5ec:	f7fd fd49 	bl	800d082 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f5f0:	4b0a      	ldr	r3, [pc, #40]	@ (800f61c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	68ba      	ldr	r2, [r7, #8]
 800f5f6:	429a      	cmp	r2, r3
 800f5f8:	d202      	bcs.n	800f600 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f5fa:	4a08      	ldr	r2, [pc, #32]	@ (800f61c <prvAddCurrentTaskToDelayedList+0xa4>)
 800f5fc:	68bb      	ldr	r3, [r7, #8]
 800f5fe:	6013      	str	r3, [r2, #0]
}
 800f600:	bf00      	nop
 800f602:	3710      	adds	r7, #16
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}
 800f608:	200132b8 	.word	0x200132b8
 800f60c:	20012de0 	.word	0x20012de0
 800f610:	200132a0 	.word	0x200132a0
 800f614:	20013270 	.word	0x20013270
 800f618:	2001326c 	.word	0x2001326c
 800f61c:	200132d4 	.word	0x200132d4

0800f620 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f620:	b580      	push	{r7, lr}
 800f622:	b08a      	sub	sp, #40	@ 0x28
 800f624:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f626:	2300      	movs	r3, #0
 800f628:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f62a:	f000 fb13 	bl	800fc54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f62e:	4b1d      	ldr	r3, [pc, #116]	@ (800f6a4 <xTimerCreateTimerTask+0x84>)
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d021      	beq.n	800f67a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f636:	2300      	movs	r3, #0
 800f638:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f63a:	2300      	movs	r3, #0
 800f63c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f63e:	1d3a      	adds	r2, r7, #4
 800f640:	f107 0108 	add.w	r1, r7, #8
 800f644:	f107 030c 	add.w	r3, r7, #12
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fd fcaf 	bl	800cfac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f64e:	6879      	ldr	r1, [r7, #4]
 800f650:	68bb      	ldr	r3, [r7, #8]
 800f652:	68fa      	ldr	r2, [r7, #12]
 800f654:	9202      	str	r2, [sp, #8]
 800f656:	9301      	str	r3, [sp, #4]
 800f658:	2302      	movs	r3, #2
 800f65a:	9300      	str	r3, [sp, #0]
 800f65c:	2300      	movs	r3, #0
 800f65e:	460a      	mov	r2, r1
 800f660:	4911      	ldr	r1, [pc, #68]	@ (800f6a8 <xTimerCreateTimerTask+0x88>)
 800f662:	4812      	ldr	r0, [pc, #72]	@ (800f6ac <xTimerCreateTimerTask+0x8c>)
 800f664:	f7fe fe54 	bl	800e310 <xTaskCreateStatic>
 800f668:	4603      	mov	r3, r0
 800f66a:	4a11      	ldr	r2, [pc, #68]	@ (800f6b0 <xTimerCreateTimerTask+0x90>)
 800f66c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f66e:	4b10      	ldr	r3, [pc, #64]	@ (800f6b0 <xTimerCreateTimerTask+0x90>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d001      	beq.n	800f67a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f676:	2301      	movs	r3, #1
 800f678:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f67a:	697b      	ldr	r3, [r7, #20]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d10b      	bne.n	800f698 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800f680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f684:	f383 8811 	msr	BASEPRI, r3
 800f688:	f3bf 8f6f 	isb	sy
 800f68c:	f3bf 8f4f 	dsb	sy
 800f690:	613b      	str	r3, [r7, #16]
}
 800f692:	bf00      	nop
 800f694:	bf00      	nop
 800f696:	e7fd      	b.n	800f694 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f698:	697b      	ldr	r3, [r7, #20]
}
 800f69a:	4618      	mov	r0, r3
 800f69c:	3718      	adds	r7, #24
 800f69e:	46bd      	mov	sp, r7
 800f6a0:	bd80      	pop	{r7, pc}
 800f6a2:	bf00      	nop
 800f6a4:	20013318 	.word	0x20013318
 800f6a8:	08022090 	.word	0x08022090
 800f6ac:	0800f7ed 	.word	0x0800f7ed
 800f6b0:	2001331c 	.word	0x2001331c

0800f6b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f6b4:	b580      	push	{r7, lr}
 800f6b6:	b08a      	sub	sp, #40	@ 0x28
 800f6b8:	af00      	add	r7, sp, #0
 800f6ba:	60f8      	str	r0, [r7, #12]
 800f6bc:	60b9      	str	r1, [r7, #8]
 800f6be:	607a      	str	r2, [r7, #4]
 800f6c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d10b      	bne.n	800f6e4 <xTimerGenericCommand+0x30>
	__asm volatile
 800f6cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6d0:	f383 8811 	msr	BASEPRI, r3
 800f6d4:	f3bf 8f6f 	isb	sy
 800f6d8:	f3bf 8f4f 	dsb	sy
 800f6dc:	623b      	str	r3, [r7, #32]
}
 800f6de:	bf00      	nop
 800f6e0:	bf00      	nop
 800f6e2:	e7fd      	b.n	800f6e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f6e4:	4b19      	ldr	r3, [pc, #100]	@ (800f74c <xTimerGenericCommand+0x98>)
 800f6e6:	681b      	ldr	r3, [r3, #0]
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d02a      	beq.n	800f742 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	2b05      	cmp	r3, #5
 800f6fc:	dc18      	bgt.n	800f730 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f6fe:	f7ff fc9f 	bl	800f040 <xTaskGetSchedulerState>
 800f702:	4603      	mov	r3, r0
 800f704:	2b02      	cmp	r3, #2
 800f706:	d109      	bne.n	800f71c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f708:	4b10      	ldr	r3, [pc, #64]	@ (800f74c <xTimerGenericCommand+0x98>)
 800f70a:	6818      	ldr	r0, [r3, #0]
 800f70c:	f107 0110 	add.w	r1, r7, #16
 800f710:	2300      	movs	r3, #0
 800f712:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f714:	f7fd ff84 	bl	800d620 <xQueueGenericSend>
 800f718:	6278      	str	r0, [r7, #36]	@ 0x24
 800f71a:	e012      	b.n	800f742 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f71c:	4b0b      	ldr	r3, [pc, #44]	@ (800f74c <xTimerGenericCommand+0x98>)
 800f71e:	6818      	ldr	r0, [r3, #0]
 800f720:	f107 0110 	add.w	r1, r7, #16
 800f724:	2300      	movs	r3, #0
 800f726:	2200      	movs	r2, #0
 800f728:	f7fd ff7a 	bl	800d620 <xQueueGenericSend>
 800f72c:	6278      	str	r0, [r7, #36]	@ 0x24
 800f72e:	e008      	b.n	800f742 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f730:	4b06      	ldr	r3, [pc, #24]	@ (800f74c <xTimerGenericCommand+0x98>)
 800f732:	6818      	ldr	r0, [r3, #0]
 800f734:	f107 0110 	add.w	r1, r7, #16
 800f738:	2300      	movs	r3, #0
 800f73a:	683a      	ldr	r2, [r7, #0]
 800f73c:	f7fe f872 	bl	800d824 <xQueueGenericSendFromISR>
 800f740:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f744:	4618      	mov	r0, r3
 800f746:	3728      	adds	r7, #40	@ 0x28
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}
 800f74c:	20013318 	.word	0x20013318

0800f750 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f750:	b580      	push	{r7, lr}
 800f752:	b088      	sub	sp, #32
 800f754:	af02      	add	r7, sp, #8
 800f756:	6078      	str	r0, [r7, #4]
 800f758:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f75a:	4b23      	ldr	r3, [pc, #140]	@ (800f7e8 <prvProcessExpiredTimer+0x98>)
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	68db      	ldr	r3, [r3, #12]
 800f760:	68db      	ldr	r3, [r3, #12]
 800f762:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f764:	697b      	ldr	r3, [r7, #20]
 800f766:	3304      	adds	r3, #4
 800f768:	4618      	mov	r0, r3
 800f76a:	f7fd fcc3 	bl	800d0f4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f76e:	697b      	ldr	r3, [r7, #20]
 800f770:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f774:	f003 0304 	and.w	r3, r3, #4
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d023      	beq.n	800f7c4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	699a      	ldr	r2, [r3, #24]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	18d1      	adds	r1, r2, r3
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	683a      	ldr	r2, [r7, #0]
 800f788:	6978      	ldr	r0, [r7, #20]
 800f78a:	f000 f8d5 	bl	800f938 <prvInsertTimerInActiveList>
 800f78e:	4603      	mov	r3, r0
 800f790:	2b00      	cmp	r3, #0
 800f792:	d020      	beq.n	800f7d6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f794:	2300      	movs	r3, #0
 800f796:	9300      	str	r3, [sp, #0]
 800f798:	2300      	movs	r3, #0
 800f79a:	687a      	ldr	r2, [r7, #4]
 800f79c:	2100      	movs	r1, #0
 800f79e:	6978      	ldr	r0, [r7, #20]
 800f7a0:	f7ff ff88 	bl	800f6b4 <xTimerGenericCommand>
 800f7a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	2b00      	cmp	r3, #0
 800f7aa:	d114      	bne.n	800f7d6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800f7ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f7b0:	f383 8811 	msr	BASEPRI, r3
 800f7b4:	f3bf 8f6f 	isb	sy
 800f7b8:	f3bf 8f4f 	dsb	sy
 800f7bc:	60fb      	str	r3, [r7, #12]
}
 800f7be:	bf00      	nop
 800f7c0:	bf00      	nop
 800f7c2:	e7fd      	b.n	800f7c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f7c4:	697b      	ldr	r3, [r7, #20]
 800f7c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800f7ca:	f023 0301 	bic.w	r3, r3, #1
 800f7ce:	b2da      	uxtb	r2, r3
 800f7d0:	697b      	ldr	r3, [r7, #20]
 800f7d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	6a1b      	ldr	r3, [r3, #32]
 800f7da:	6978      	ldr	r0, [r7, #20]
 800f7dc:	4798      	blx	r3
}
 800f7de:	bf00      	nop
 800f7e0:	3718      	adds	r7, #24
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
 800f7e6:	bf00      	nop
 800f7e8:	20013310 	.word	0x20013310

0800f7ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f7ec:	b580      	push	{r7, lr}
 800f7ee:	b084      	sub	sp, #16
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f7f4:	f107 0308 	add.w	r3, r7, #8
 800f7f8:	4618      	mov	r0, r3
 800f7fa:	f000 f859 	bl	800f8b0 <prvGetNextExpireTime>
 800f7fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f800:	68bb      	ldr	r3, [r7, #8]
 800f802:	4619      	mov	r1, r3
 800f804:	68f8      	ldr	r0, [r7, #12]
 800f806:	f000 f805 	bl	800f814 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f80a:	f000 f8d7 	bl	800f9bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f80e:	bf00      	nop
 800f810:	e7f0      	b.n	800f7f4 <prvTimerTask+0x8>
	...

0800f814 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f814:	b580      	push	{r7, lr}
 800f816:	b084      	sub	sp, #16
 800f818:	af00      	add	r7, sp, #0
 800f81a:	6078      	str	r0, [r7, #4]
 800f81c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f81e:	f7fe ffdf 	bl	800e7e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f822:	f107 0308 	add.w	r3, r7, #8
 800f826:	4618      	mov	r0, r3
 800f828:	f000 f866 	bl	800f8f8 <prvSampleTimeNow>
 800f82c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f82e:	68bb      	ldr	r3, [r7, #8]
 800f830:	2b00      	cmp	r3, #0
 800f832:	d130      	bne.n	800f896 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f834:	683b      	ldr	r3, [r7, #0]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d10a      	bne.n	800f850 <prvProcessTimerOrBlockTask+0x3c>
 800f83a:	687a      	ldr	r2, [r7, #4]
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	429a      	cmp	r2, r3
 800f840:	d806      	bhi.n	800f850 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f842:	f7fe ffdb 	bl	800e7fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f846:	68f9      	ldr	r1, [r7, #12]
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f7ff ff81 	bl	800f750 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f84e:	e024      	b.n	800f89a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f850:	683b      	ldr	r3, [r7, #0]
 800f852:	2b00      	cmp	r3, #0
 800f854:	d008      	beq.n	800f868 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f856:	4b13      	ldr	r3, [pc, #76]	@ (800f8a4 <prvProcessTimerOrBlockTask+0x90>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	681b      	ldr	r3, [r3, #0]
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d101      	bne.n	800f864 <prvProcessTimerOrBlockTask+0x50>
 800f860:	2301      	movs	r3, #1
 800f862:	e000      	b.n	800f866 <prvProcessTimerOrBlockTask+0x52>
 800f864:	2300      	movs	r3, #0
 800f866:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f868:	4b0f      	ldr	r3, [pc, #60]	@ (800f8a8 <prvProcessTimerOrBlockTask+0x94>)
 800f86a:	6818      	ldr	r0, [r3, #0]
 800f86c:	687a      	ldr	r2, [r7, #4]
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	1ad3      	subs	r3, r2, r3
 800f872:	683a      	ldr	r2, [r7, #0]
 800f874:	4619      	mov	r1, r3
 800f876:	f7fe fd17 	bl	800e2a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f87a:	f7fe ffbf 	bl	800e7fc <xTaskResumeAll>
 800f87e:	4603      	mov	r3, r0
 800f880:	2b00      	cmp	r3, #0
 800f882:	d10a      	bne.n	800f89a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f884:	4b09      	ldr	r3, [pc, #36]	@ (800f8ac <prvProcessTimerOrBlockTask+0x98>)
 800f886:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f88a:	601a      	str	r2, [r3, #0]
 800f88c:	f3bf 8f4f 	dsb	sy
 800f890:	f3bf 8f6f 	isb	sy
}
 800f894:	e001      	b.n	800f89a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f896:	f7fe ffb1 	bl	800e7fc <xTaskResumeAll>
}
 800f89a:	bf00      	nop
 800f89c:	3710      	adds	r7, #16
 800f89e:	46bd      	mov	sp, r7
 800f8a0:	bd80      	pop	{r7, pc}
 800f8a2:	bf00      	nop
 800f8a4:	20013314 	.word	0x20013314
 800f8a8:	20013318 	.word	0x20013318
 800f8ac:	e000ed04 	.word	0xe000ed04

0800f8b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f8b0:	b480      	push	{r7}
 800f8b2:	b085      	sub	sp, #20
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f8b8:	4b0e      	ldr	r3, [pc, #56]	@ (800f8f4 <prvGetNextExpireTime+0x44>)
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d101      	bne.n	800f8c6 <prvGetNextExpireTime+0x16>
 800f8c2:	2201      	movs	r2, #1
 800f8c4:	e000      	b.n	800f8c8 <prvGetNextExpireTime+0x18>
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d105      	bne.n	800f8e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f8d4:	4b07      	ldr	r3, [pc, #28]	@ (800f8f4 <prvGetNextExpireTime+0x44>)
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	68db      	ldr	r3, [r3, #12]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	60fb      	str	r3, [r7, #12]
 800f8de:	e001      	b.n	800f8e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	3714      	adds	r7, #20
 800f8ea:	46bd      	mov	sp, r7
 800f8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8f0:	4770      	bx	lr
 800f8f2:	bf00      	nop
 800f8f4:	20013310 	.word	0x20013310

0800f8f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b084      	sub	sp, #16
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f900:	f7ff f81a 	bl	800e938 <xTaskGetTickCount>
 800f904:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f906:	4b0b      	ldr	r3, [pc, #44]	@ (800f934 <prvSampleTimeNow+0x3c>)
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	68fa      	ldr	r2, [r7, #12]
 800f90c:	429a      	cmp	r2, r3
 800f90e:	d205      	bcs.n	800f91c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f910:	f000 f93a 	bl	800fb88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	2201      	movs	r2, #1
 800f918:	601a      	str	r2, [r3, #0]
 800f91a:	e002      	b.n	800f922 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2200      	movs	r2, #0
 800f920:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f922:	4a04      	ldr	r2, [pc, #16]	@ (800f934 <prvSampleTimeNow+0x3c>)
 800f924:	68fb      	ldr	r3, [r7, #12]
 800f926:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f928:	68fb      	ldr	r3, [r7, #12]
}
 800f92a:	4618      	mov	r0, r3
 800f92c:	3710      	adds	r7, #16
 800f92e:	46bd      	mov	sp, r7
 800f930:	bd80      	pop	{r7, pc}
 800f932:	bf00      	nop
 800f934:	20013320 	.word	0x20013320

0800f938 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f938:	b580      	push	{r7, lr}
 800f93a:	b086      	sub	sp, #24
 800f93c:	af00      	add	r7, sp, #0
 800f93e:	60f8      	str	r0, [r7, #12]
 800f940:	60b9      	str	r1, [r7, #8]
 800f942:	607a      	str	r2, [r7, #4]
 800f944:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f946:	2300      	movs	r3, #0
 800f948:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	68ba      	ldr	r2, [r7, #8]
 800f94e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f950:	68fb      	ldr	r3, [r7, #12]
 800f952:	68fa      	ldr	r2, [r7, #12]
 800f954:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f956:	68ba      	ldr	r2, [r7, #8]
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d812      	bhi.n	800f984 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f95e:	687a      	ldr	r2, [r7, #4]
 800f960:	683b      	ldr	r3, [r7, #0]
 800f962:	1ad2      	subs	r2, r2, r3
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	699b      	ldr	r3, [r3, #24]
 800f968:	429a      	cmp	r2, r3
 800f96a:	d302      	bcc.n	800f972 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f96c:	2301      	movs	r3, #1
 800f96e:	617b      	str	r3, [r7, #20]
 800f970:	e01b      	b.n	800f9aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f972:	4b10      	ldr	r3, [pc, #64]	@ (800f9b4 <prvInsertTimerInActiveList+0x7c>)
 800f974:	681a      	ldr	r2, [r3, #0]
 800f976:	68fb      	ldr	r3, [r7, #12]
 800f978:	3304      	adds	r3, #4
 800f97a:	4619      	mov	r1, r3
 800f97c:	4610      	mov	r0, r2
 800f97e:	f7fd fb80 	bl	800d082 <vListInsert>
 800f982:	e012      	b.n	800f9aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f984:	687a      	ldr	r2, [r7, #4]
 800f986:	683b      	ldr	r3, [r7, #0]
 800f988:	429a      	cmp	r2, r3
 800f98a:	d206      	bcs.n	800f99a <prvInsertTimerInActiveList+0x62>
 800f98c:	68ba      	ldr	r2, [r7, #8]
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	429a      	cmp	r2, r3
 800f992:	d302      	bcc.n	800f99a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f994:	2301      	movs	r3, #1
 800f996:	617b      	str	r3, [r7, #20]
 800f998:	e007      	b.n	800f9aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f99a:	4b07      	ldr	r3, [pc, #28]	@ (800f9b8 <prvInsertTimerInActiveList+0x80>)
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	3304      	adds	r3, #4
 800f9a2:	4619      	mov	r1, r3
 800f9a4:	4610      	mov	r0, r2
 800f9a6:	f7fd fb6c 	bl	800d082 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f9aa:	697b      	ldr	r3, [r7, #20]
}
 800f9ac:	4618      	mov	r0, r3
 800f9ae:	3718      	adds	r7, #24
 800f9b0:	46bd      	mov	sp, r7
 800f9b2:	bd80      	pop	{r7, pc}
 800f9b4:	20013314 	.word	0x20013314
 800f9b8:	20013310 	.word	0x20013310

0800f9bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f9bc:	b580      	push	{r7, lr}
 800f9be:	b08e      	sub	sp, #56	@ 0x38
 800f9c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f9c2:	e0ce      	b.n	800fb62 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	da19      	bge.n	800f9fe <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f9ca:	1d3b      	adds	r3, r7, #4
 800f9cc:	3304      	adds	r3, #4
 800f9ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f9d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d10b      	bne.n	800f9ee <prvProcessReceivedCommands+0x32>
	__asm volatile
 800f9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9da:	f383 8811 	msr	BASEPRI, r3
 800f9de:	f3bf 8f6f 	isb	sy
 800f9e2:	f3bf 8f4f 	dsb	sy
 800f9e6:	61fb      	str	r3, [r7, #28]
}
 800f9e8:	bf00      	nop
 800f9ea:	bf00      	nop
 800f9ec:	e7fd      	b.n	800f9ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f9ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f9f4:	6850      	ldr	r0, [r2, #4]
 800f9f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f9f8:	6892      	ldr	r2, [r2, #8]
 800f9fa:	4611      	mov	r1, r2
 800f9fc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	f2c0 80ae 	blt.w	800fb62 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fa0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa0c:	695b      	ldr	r3, [r3, #20]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d004      	beq.n	800fa1c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa14:	3304      	adds	r3, #4
 800fa16:	4618      	mov	r0, r3
 800fa18:	f7fd fb6c 	bl	800d0f4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fa1c:	463b      	mov	r3, r7
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7ff ff6a 	bl	800f8f8 <prvSampleTimeNow>
 800fa24:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	2b09      	cmp	r3, #9
 800fa2a:	f200 8097 	bhi.w	800fb5c <prvProcessReceivedCommands+0x1a0>
 800fa2e:	a201      	add	r2, pc, #4	@ (adr r2, 800fa34 <prvProcessReceivedCommands+0x78>)
 800fa30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa34:	0800fa5d 	.word	0x0800fa5d
 800fa38:	0800fa5d 	.word	0x0800fa5d
 800fa3c:	0800fa5d 	.word	0x0800fa5d
 800fa40:	0800fad3 	.word	0x0800fad3
 800fa44:	0800fae7 	.word	0x0800fae7
 800fa48:	0800fb33 	.word	0x0800fb33
 800fa4c:	0800fa5d 	.word	0x0800fa5d
 800fa50:	0800fa5d 	.word	0x0800fa5d
 800fa54:	0800fad3 	.word	0x0800fad3
 800fa58:	0800fae7 	.word	0x0800fae7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fa5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa62:	f043 0301 	orr.w	r3, r3, #1
 800fa66:	b2da      	uxtb	r2, r3
 800fa68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fa6e:	68ba      	ldr	r2, [r7, #8]
 800fa70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa72:	699b      	ldr	r3, [r3, #24]
 800fa74:	18d1      	adds	r1, r2, r3
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa7c:	f7ff ff5c 	bl	800f938 <prvInsertTimerInActiveList>
 800fa80:	4603      	mov	r3, r0
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d06c      	beq.n	800fb60 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa88:	6a1b      	ldr	r3, [r3, #32]
 800fa8a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fa8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fa90:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fa94:	f003 0304 	and.w	r3, r3, #4
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d061      	beq.n	800fb60 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fa9c:	68ba      	ldr	r2, [r7, #8]
 800fa9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faa0:	699b      	ldr	r3, [r3, #24]
 800faa2:	441a      	add	r2, r3
 800faa4:	2300      	movs	r3, #0
 800faa6:	9300      	str	r3, [sp, #0]
 800faa8:	2300      	movs	r3, #0
 800faaa:	2100      	movs	r1, #0
 800faac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800faae:	f7ff fe01 	bl	800f6b4 <xTimerGenericCommand>
 800fab2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800fab4:	6a3b      	ldr	r3, [r7, #32]
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d152      	bne.n	800fb60 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800faba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fabe:	f383 8811 	msr	BASEPRI, r3
 800fac2:	f3bf 8f6f 	isb	sy
 800fac6:	f3bf 8f4f 	dsb	sy
 800faca:	61bb      	str	r3, [r7, #24]
}
 800facc:	bf00      	nop
 800face:	bf00      	nop
 800fad0:	e7fd      	b.n	800face <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fad4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fad8:	f023 0301 	bic.w	r3, r3, #1
 800fadc:	b2da      	uxtb	r2, r3
 800fade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fae0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fae4:	e03d      	b.n	800fb62 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fae6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fae8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800faec:	f043 0301 	orr.w	r3, r3, #1
 800faf0:	b2da      	uxtb	r2, r3
 800faf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800faf4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800faf8:	68ba      	ldr	r2, [r7, #8]
 800fafa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fafc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fafe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb00:	699b      	ldr	r3, [r3, #24]
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d10b      	bne.n	800fb1e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800fb06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb0a:	f383 8811 	msr	BASEPRI, r3
 800fb0e:	f3bf 8f6f 	isb	sy
 800fb12:	f3bf 8f4f 	dsb	sy
 800fb16:	617b      	str	r3, [r7, #20]
}
 800fb18:	bf00      	nop
 800fb1a:	bf00      	nop
 800fb1c:	e7fd      	b.n	800fb1a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fb1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb20:	699a      	ldr	r2, [r3, #24]
 800fb22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb24:	18d1      	adds	r1, r2, r3
 800fb26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb2c:	f7ff ff04 	bl	800f938 <prvInsertTimerInActiveList>
					break;
 800fb30:	e017      	b.n	800fb62 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fb32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fb38:	f003 0302 	and.w	r3, r3, #2
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d103      	bne.n	800fb48 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800fb40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fb42:	f000 fbe9 	bl	8010318 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800fb46:	e00c      	b.n	800fb62 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fb48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fb4e:	f023 0301 	bic.w	r3, r3, #1
 800fb52:	b2da      	uxtb	r2, r3
 800fb54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fb56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800fb5a:	e002      	b.n	800fb62 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800fb5c:	bf00      	nop
 800fb5e:	e000      	b.n	800fb62 <prvProcessReceivedCommands+0x1a6>
					break;
 800fb60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fb62:	4b08      	ldr	r3, [pc, #32]	@ (800fb84 <prvProcessReceivedCommands+0x1c8>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	1d39      	adds	r1, r7, #4
 800fb68:	2200      	movs	r2, #0
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f7fd ff88 	bl	800da80 <xQueueReceive>
 800fb70:	4603      	mov	r3, r0
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	f47f af26 	bne.w	800f9c4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800fb78:	bf00      	nop
 800fb7a:	bf00      	nop
 800fb7c:	3730      	adds	r7, #48	@ 0x30
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
 800fb82:	bf00      	nop
 800fb84:	20013318 	.word	0x20013318

0800fb88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b088      	sub	sp, #32
 800fb8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fb8e:	e049      	b.n	800fc24 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800fb90:	4b2e      	ldr	r3, [pc, #184]	@ (800fc4c <prvSwitchTimerLists+0xc4>)
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	68db      	ldr	r3, [r3, #12]
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb9a:	4b2c      	ldr	r3, [pc, #176]	@ (800fc4c <prvSwitchTimerLists+0xc4>)
 800fb9c:	681b      	ldr	r3, [r3, #0]
 800fb9e:	68db      	ldr	r3, [r3, #12]
 800fba0:	68db      	ldr	r3, [r3, #12]
 800fba2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	3304      	adds	r3, #4
 800fba8:	4618      	mov	r0, r3
 800fbaa:	f7fd faa3 	bl	800d0f4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	6a1b      	ldr	r3, [r3, #32]
 800fbb2:	68f8      	ldr	r0, [r7, #12]
 800fbb4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800fbbc:	f003 0304 	and.w	r3, r3, #4
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d02f      	beq.n	800fc24 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	699b      	ldr	r3, [r3, #24]
 800fbc8:	693a      	ldr	r2, [r7, #16]
 800fbca:	4413      	add	r3, r2
 800fbcc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800fbce:	68ba      	ldr	r2, [r7, #8]
 800fbd0:	693b      	ldr	r3, [r7, #16]
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d90e      	bls.n	800fbf4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	68ba      	ldr	r2, [r7, #8]
 800fbda:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	68fa      	ldr	r2, [r7, #12]
 800fbe0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800fbe2:	4b1a      	ldr	r3, [pc, #104]	@ (800fc4c <prvSwitchTimerLists+0xc4>)
 800fbe4:	681a      	ldr	r2, [r3, #0]
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	3304      	adds	r3, #4
 800fbea:	4619      	mov	r1, r3
 800fbec:	4610      	mov	r0, r2
 800fbee:	f7fd fa48 	bl	800d082 <vListInsert>
 800fbf2:	e017      	b.n	800fc24 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	9300      	str	r3, [sp, #0]
 800fbf8:	2300      	movs	r3, #0
 800fbfa:	693a      	ldr	r2, [r7, #16]
 800fbfc:	2100      	movs	r1, #0
 800fbfe:	68f8      	ldr	r0, [r7, #12]
 800fc00:	f7ff fd58 	bl	800f6b4 <xTimerGenericCommand>
 800fc04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d10b      	bne.n	800fc24 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800fc0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fc10:	f383 8811 	msr	BASEPRI, r3
 800fc14:	f3bf 8f6f 	isb	sy
 800fc18:	f3bf 8f4f 	dsb	sy
 800fc1c:	603b      	str	r3, [r7, #0]
}
 800fc1e:	bf00      	nop
 800fc20:	bf00      	nop
 800fc22:	e7fd      	b.n	800fc20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800fc24:	4b09      	ldr	r3, [pc, #36]	@ (800fc4c <prvSwitchTimerLists+0xc4>)
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d1b0      	bne.n	800fb90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800fc2e:	4b07      	ldr	r3, [pc, #28]	@ (800fc4c <prvSwitchTimerLists+0xc4>)
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800fc34:	4b06      	ldr	r3, [pc, #24]	@ (800fc50 <prvSwitchTimerLists+0xc8>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	4a04      	ldr	r2, [pc, #16]	@ (800fc4c <prvSwitchTimerLists+0xc4>)
 800fc3a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800fc3c:	4a04      	ldr	r2, [pc, #16]	@ (800fc50 <prvSwitchTimerLists+0xc8>)
 800fc3e:	697b      	ldr	r3, [r7, #20]
 800fc40:	6013      	str	r3, [r2, #0]
}
 800fc42:	bf00      	nop
 800fc44:	3718      	adds	r7, #24
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd80      	pop	{r7, pc}
 800fc4a:	bf00      	nop
 800fc4c:	20013310 	.word	0x20013310
 800fc50:	20013314 	.word	0x20013314

0800fc54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800fc54:	b580      	push	{r7, lr}
 800fc56:	b082      	sub	sp, #8
 800fc58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800fc5a:	f000 f96d 	bl	800ff38 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800fc5e:	4b15      	ldr	r3, [pc, #84]	@ (800fcb4 <prvCheckForValidListAndQueue+0x60>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d120      	bne.n	800fca8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800fc66:	4814      	ldr	r0, [pc, #80]	@ (800fcb8 <prvCheckForValidListAndQueue+0x64>)
 800fc68:	f7fd f9ba 	bl	800cfe0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800fc6c:	4813      	ldr	r0, [pc, #76]	@ (800fcbc <prvCheckForValidListAndQueue+0x68>)
 800fc6e:	f7fd f9b7 	bl	800cfe0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800fc72:	4b13      	ldr	r3, [pc, #76]	@ (800fcc0 <prvCheckForValidListAndQueue+0x6c>)
 800fc74:	4a10      	ldr	r2, [pc, #64]	@ (800fcb8 <prvCheckForValidListAndQueue+0x64>)
 800fc76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800fc78:	4b12      	ldr	r3, [pc, #72]	@ (800fcc4 <prvCheckForValidListAndQueue+0x70>)
 800fc7a:	4a10      	ldr	r2, [pc, #64]	@ (800fcbc <prvCheckForValidListAndQueue+0x68>)
 800fc7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800fc7e:	2300      	movs	r3, #0
 800fc80:	9300      	str	r3, [sp, #0]
 800fc82:	4b11      	ldr	r3, [pc, #68]	@ (800fcc8 <prvCheckForValidListAndQueue+0x74>)
 800fc84:	4a11      	ldr	r2, [pc, #68]	@ (800fccc <prvCheckForValidListAndQueue+0x78>)
 800fc86:	2110      	movs	r1, #16
 800fc88:	200a      	movs	r0, #10
 800fc8a:	f7fd fac7 	bl	800d21c <xQueueGenericCreateStatic>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	4a08      	ldr	r2, [pc, #32]	@ (800fcb4 <prvCheckForValidListAndQueue+0x60>)
 800fc92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800fc94:	4b07      	ldr	r3, [pc, #28]	@ (800fcb4 <prvCheckForValidListAndQueue+0x60>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d005      	beq.n	800fca8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800fc9c:	4b05      	ldr	r3, [pc, #20]	@ (800fcb4 <prvCheckForValidListAndQueue+0x60>)
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	490b      	ldr	r1, [pc, #44]	@ (800fcd0 <prvCheckForValidListAndQueue+0x7c>)
 800fca2:	4618      	mov	r0, r3
 800fca4:	f7fe faac 	bl	800e200 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fca8:	f000 f978 	bl	800ff9c <vPortExitCritical>
}
 800fcac:	bf00      	nop
 800fcae:	46bd      	mov	sp, r7
 800fcb0:	bd80      	pop	{r7, pc}
 800fcb2:	bf00      	nop
 800fcb4:	20013318 	.word	0x20013318
 800fcb8:	200132e8 	.word	0x200132e8
 800fcbc:	200132fc 	.word	0x200132fc
 800fcc0:	20013310 	.word	0x20013310
 800fcc4:	20013314 	.word	0x20013314
 800fcc8:	200133c4 	.word	0x200133c4
 800fccc:	20013324 	.word	0x20013324
 800fcd0:	08022098 	.word	0x08022098

0800fcd4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800fcd4:	b480      	push	{r7}
 800fcd6:	b085      	sub	sp, #20
 800fcd8:	af00      	add	r7, sp, #0
 800fcda:	60f8      	str	r0, [r7, #12]
 800fcdc:	60b9      	str	r1, [r7, #8]
 800fcde:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	3b04      	subs	r3, #4
 800fce4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800fce6:	68fb      	ldr	r3, [r7, #12]
 800fce8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800fcec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	3b04      	subs	r3, #4
 800fcf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800fcf4:	68bb      	ldr	r3, [r7, #8]
 800fcf6:	f023 0201 	bic.w	r2, r3, #1
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	3b04      	subs	r3, #4
 800fd02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800fd04:	4a0c      	ldr	r2, [pc, #48]	@ (800fd38 <pxPortInitialiseStack+0x64>)
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	3b14      	subs	r3, #20
 800fd0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	3b04      	subs	r3, #4
 800fd1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800fd1c:	68fb      	ldr	r3, [r7, #12]
 800fd1e:	f06f 0202 	mvn.w	r2, #2
 800fd22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800fd24:	68fb      	ldr	r3, [r7, #12]
 800fd26:	3b20      	subs	r3, #32
 800fd28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800fd2a:	68fb      	ldr	r3, [r7, #12]
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3714      	adds	r7, #20
 800fd30:	46bd      	mov	sp, r7
 800fd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd36:	4770      	bx	lr
 800fd38:	0800fd3d 	.word	0x0800fd3d

0800fd3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800fd3c:	b480      	push	{r7}
 800fd3e:	b085      	sub	sp, #20
 800fd40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800fd42:	2300      	movs	r3, #0
 800fd44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800fd46:	4b13      	ldr	r3, [pc, #76]	@ (800fd94 <prvTaskExitError+0x58>)
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd4e:	d00b      	beq.n	800fd68 <prvTaskExitError+0x2c>
	__asm volatile
 800fd50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd54:	f383 8811 	msr	BASEPRI, r3
 800fd58:	f3bf 8f6f 	isb	sy
 800fd5c:	f3bf 8f4f 	dsb	sy
 800fd60:	60fb      	str	r3, [r7, #12]
}
 800fd62:	bf00      	nop
 800fd64:	bf00      	nop
 800fd66:	e7fd      	b.n	800fd64 <prvTaskExitError+0x28>
	__asm volatile
 800fd68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fd6c:	f383 8811 	msr	BASEPRI, r3
 800fd70:	f3bf 8f6f 	isb	sy
 800fd74:	f3bf 8f4f 	dsb	sy
 800fd78:	60bb      	str	r3, [r7, #8]
}
 800fd7a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800fd7c:	bf00      	nop
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d0fc      	beq.n	800fd7e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800fd84:	bf00      	nop
 800fd86:	bf00      	nop
 800fd88:	3714      	adds	r7, #20
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd90:	4770      	bx	lr
 800fd92:	bf00      	nop
 800fd94:	2000003c 	.word	0x2000003c
	...

0800fda0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800fda0:	4b07      	ldr	r3, [pc, #28]	@ (800fdc0 <pxCurrentTCBConst2>)
 800fda2:	6819      	ldr	r1, [r3, #0]
 800fda4:	6808      	ldr	r0, [r1, #0]
 800fda6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdaa:	f380 8809 	msr	PSP, r0
 800fdae:	f3bf 8f6f 	isb	sy
 800fdb2:	f04f 0000 	mov.w	r0, #0
 800fdb6:	f380 8811 	msr	BASEPRI, r0
 800fdba:	4770      	bx	lr
 800fdbc:	f3af 8000 	nop.w

0800fdc0 <pxCurrentTCBConst2>:
 800fdc0:	20012de0 	.word	0x20012de0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800fdc4:	bf00      	nop
 800fdc6:	bf00      	nop

0800fdc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800fdc8:	4808      	ldr	r0, [pc, #32]	@ (800fdec <prvPortStartFirstTask+0x24>)
 800fdca:	6800      	ldr	r0, [r0, #0]
 800fdcc:	6800      	ldr	r0, [r0, #0]
 800fdce:	f380 8808 	msr	MSP, r0
 800fdd2:	f04f 0000 	mov.w	r0, #0
 800fdd6:	f380 8814 	msr	CONTROL, r0
 800fdda:	b662      	cpsie	i
 800fddc:	b661      	cpsie	f
 800fdde:	f3bf 8f4f 	dsb	sy
 800fde2:	f3bf 8f6f 	isb	sy
 800fde6:	df00      	svc	0
 800fde8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800fdea:	bf00      	nop
 800fdec:	e000ed08 	.word	0xe000ed08

0800fdf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800fdf0:	b580      	push	{r7, lr}
 800fdf2:	b086      	sub	sp, #24
 800fdf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800fdf6:	4b47      	ldr	r3, [pc, #284]	@ (800ff14 <xPortStartScheduler+0x124>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
 800fdfa:	4a47      	ldr	r2, [pc, #284]	@ (800ff18 <xPortStartScheduler+0x128>)
 800fdfc:	4293      	cmp	r3, r2
 800fdfe:	d10b      	bne.n	800fe18 <xPortStartScheduler+0x28>
	__asm volatile
 800fe00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe04:	f383 8811 	msr	BASEPRI, r3
 800fe08:	f3bf 8f6f 	isb	sy
 800fe0c:	f3bf 8f4f 	dsb	sy
 800fe10:	613b      	str	r3, [r7, #16]
}
 800fe12:	bf00      	nop
 800fe14:	bf00      	nop
 800fe16:	e7fd      	b.n	800fe14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800fe18:	4b3e      	ldr	r3, [pc, #248]	@ (800ff14 <xPortStartScheduler+0x124>)
 800fe1a:	681b      	ldr	r3, [r3, #0]
 800fe1c:	4a3f      	ldr	r2, [pc, #252]	@ (800ff1c <xPortStartScheduler+0x12c>)
 800fe1e:	4293      	cmp	r3, r2
 800fe20:	d10b      	bne.n	800fe3a <xPortStartScheduler+0x4a>
	__asm volatile
 800fe22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe26:	f383 8811 	msr	BASEPRI, r3
 800fe2a:	f3bf 8f6f 	isb	sy
 800fe2e:	f3bf 8f4f 	dsb	sy
 800fe32:	60fb      	str	r3, [r7, #12]
}
 800fe34:	bf00      	nop
 800fe36:	bf00      	nop
 800fe38:	e7fd      	b.n	800fe36 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800fe3a:	4b39      	ldr	r3, [pc, #228]	@ (800ff20 <xPortStartScheduler+0x130>)
 800fe3c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	b2db      	uxtb	r3, r3
 800fe44:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800fe46:	697b      	ldr	r3, [r7, #20]
 800fe48:	22ff      	movs	r2, #255	@ 0xff
 800fe4a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800fe4c:	697b      	ldr	r3, [r7, #20]
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	b2db      	uxtb	r3, r3
 800fe52:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800fe54:	78fb      	ldrb	r3, [r7, #3]
 800fe56:	b2db      	uxtb	r3, r3
 800fe58:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800fe5c:	b2da      	uxtb	r2, r3
 800fe5e:	4b31      	ldr	r3, [pc, #196]	@ (800ff24 <xPortStartScheduler+0x134>)
 800fe60:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800fe62:	4b31      	ldr	r3, [pc, #196]	@ (800ff28 <xPortStartScheduler+0x138>)
 800fe64:	2207      	movs	r2, #7
 800fe66:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe68:	e009      	b.n	800fe7e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800fe6a:	4b2f      	ldr	r3, [pc, #188]	@ (800ff28 <xPortStartScheduler+0x138>)
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	3b01      	subs	r3, #1
 800fe70:	4a2d      	ldr	r2, [pc, #180]	@ (800ff28 <xPortStartScheduler+0x138>)
 800fe72:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800fe74:	78fb      	ldrb	r3, [r7, #3]
 800fe76:	b2db      	uxtb	r3, r3
 800fe78:	005b      	lsls	r3, r3, #1
 800fe7a:	b2db      	uxtb	r3, r3
 800fe7c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800fe7e:	78fb      	ldrb	r3, [r7, #3]
 800fe80:	b2db      	uxtb	r3, r3
 800fe82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800fe86:	2b80      	cmp	r3, #128	@ 0x80
 800fe88:	d0ef      	beq.n	800fe6a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800fe8a:	4b27      	ldr	r3, [pc, #156]	@ (800ff28 <xPortStartScheduler+0x138>)
 800fe8c:	681b      	ldr	r3, [r3, #0]
 800fe8e:	f1c3 0307 	rsb	r3, r3, #7
 800fe92:	2b04      	cmp	r3, #4
 800fe94:	d00b      	beq.n	800feae <xPortStartScheduler+0xbe>
	__asm volatile
 800fe96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fe9a:	f383 8811 	msr	BASEPRI, r3
 800fe9e:	f3bf 8f6f 	isb	sy
 800fea2:	f3bf 8f4f 	dsb	sy
 800fea6:	60bb      	str	r3, [r7, #8]
}
 800fea8:	bf00      	nop
 800feaa:	bf00      	nop
 800feac:	e7fd      	b.n	800feaa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800feae:	4b1e      	ldr	r3, [pc, #120]	@ (800ff28 <xPortStartScheduler+0x138>)
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	021b      	lsls	r3, r3, #8
 800feb4:	4a1c      	ldr	r2, [pc, #112]	@ (800ff28 <xPortStartScheduler+0x138>)
 800feb6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800feb8:	4b1b      	ldr	r3, [pc, #108]	@ (800ff28 <xPortStartScheduler+0x138>)
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800fec0:	4a19      	ldr	r2, [pc, #100]	@ (800ff28 <xPortStartScheduler+0x138>)
 800fec2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	b2da      	uxtb	r2, r3
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800fecc:	4b17      	ldr	r3, [pc, #92]	@ (800ff2c <xPortStartScheduler+0x13c>)
 800fece:	681b      	ldr	r3, [r3, #0]
 800fed0:	4a16      	ldr	r2, [pc, #88]	@ (800ff2c <xPortStartScheduler+0x13c>)
 800fed2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800fed6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800fed8:	4b14      	ldr	r3, [pc, #80]	@ (800ff2c <xPortStartScheduler+0x13c>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	4a13      	ldr	r2, [pc, #76]	@ (800ff2c <xPortStartScheduler+0x13c>)
 800fede:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800fee2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800fee4:	f000 f8da 	bl	801009c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800fee8:	4b11      	ldr	r3, [pc, #68]	@ (800ff30 <xPortStartScheduler+0x140>)
 800feea:	2200      	movs	r2, #0
 800feec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800feee:	f000 f8f9 	bl	80100e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800fef2:	4b10      	ldr	r3, [pc, #64]	@ (800ff34 <xPortStartScheduler+0x144>)
 800fef4:	681b      	ldr	r3, [r3, #0]
 800fef6:	4a0f      	ldr	r2, [pc, #60]	@ (800ff34 <xPortStartScheduler+0x144>)
 800fef8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800fefc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800fefe:	f7ff ff63 	bl	800fdc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ff02:	f7fe fdf5 	bl	800eaf0 <vTaskSwitchContext>
	prvTaskExitError();
 800ff06:	f7ff ff19 	bl	800fd3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ff0a:	2300      	movs	r3, #0
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3718      	adds	r7, #24
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}
 800ff14:	e000ed00 	.word	0xe000ed00
 800ff18:	410fc271 	.word	0x410fc271
 800ff1c:	410fc270 	.word	0x410fc270
 800ff20:	e000e400 	.word	0xe000e400
 800ff24:	20013414 	.word	0x20013414
 800ff28:	20013418 	.word	0x20013418
 800ff2c:	e000ed20 	.word	0xe000ed20
 800ff30:	2000003c 	.word	0x2000003c
 800ff34:	e000ef34 	.word	0xe000ef34

0800ff38 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ff38:	b480      	push	{r7}
 800ff3a:	b083      	sub	sp, #12
 800ff3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ff3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff42:	f383 8811 	msr	BASEPRI, r3
 800ff46:	f3bf 8f6f 	isb	sy
 800ff4a:	f3bf 8f4f 	dsb	sy
 800ff4e:	607b      	str	r3, [r7, #4]
}
 800ff50:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ff52:	4b10      	ldr	r3, [pc, #64]	@ (800ff94 <vPortEnterCritical+0x5c>)
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	3301      	adds	r3, #1
 800ff58:	4a0e      	ldr	r2, [pc, #56]	@ (800ff94 <vPortEnterCritical+0x5c>)
 800ff5a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ff5c:	4b0d      	ldr	r3, [pc, #52]	@ (800ff94 <vPortEnterCritical+0x5c>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d110      	bne.n	800ff86 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ff64:	4b0c      	ldr	r3, [pc, #48]	@ (800ff98 <vPortEnterCritical+0x60>)
 800ff66:	681b      	ldr	r3, [r3, #0]
 800ff68:	b2db      	uxtb	r3, r3
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d00b      	beq.n	800ff86 <vPortEnterCritical+0x4e>
	__asm volatile
 800ff6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ff72:	f383 8811 	msr	BASEPRI, r3
 800ff76:	f3bf 8f6f 	isb	sy
 800ff7a:	f3bf 8f4f 	dsb	sy
 800ff7e:	603b      	str	r3, [r7, #0]
}
 800ff80:	bf00      	nop
 800ff82:	bf00      	nop
 800ff84:	e7fd      	b.n	800ff82 <vPortEnterCritical+0x4a>
	}
}
 800ff86:	bf00      	nop
 800ff88:	370c      	adds	r7, #12
 800ff8a:	46bd      	mov	sp, r7
 800ff8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff90:	4770      	bx	lr
 800ff92:	bf00      	nop
 800ff94:	2000003c 	.word	0x2000003c
 800ff98:	e000ed04 	.word	0xe000ed04

0800ff9c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ff9c:	b480      	push	{r7}
 800ff9e:	b083      	sub	sp, #12
 800ffa0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ffa2:	4b12      	ldr	r3, [pc, #72]	@ (800ffec <vPortExitCritical+0x50>)
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d10b      	bne.n	800ffc2 <vPortExitCritical+0x26>
	__asm volatile
 800ffaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ffae:	f383 8811 	msr	BASEPRI, r3
 800ffb2:	f3bf 8f6f 	isb	sy
 800ffb6:	f3bf 8f4f 	dsb	sy
 800ffba:	607b      	str	r3, [r7, #4]
}
 800ffbc:	bf00      	nop
 800ffbe:	bf00      	nop
 800ffc0:	e7fd      	b.n	800ffbe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ffc2:	4b0a      	ldr	r3, [pc, #40]	@ (800ffec <vPortExitCritical+0x50>)
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	3b01      	subs	r3, #1
 800ffc8:	4a08      	ldr	r2, [pc, #32]	@ (800ffec <vPortExitCritical+0x50>)
 800ffca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ffcc:	4b07      	ldr	r3, [pc, #28]	@ (800ffec <vPortExitCritical+0x50>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	d105      	bne.n	800ffe0 <vPortExitCritical+0x44>
 800ffd4:	2300      	movs	r3, #0
 800ffd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ffd8:	683b      	ldr	r3, [r7, #0]
 800ffda:	f383 8811 	msr	BASEPRI, r3
}
 800ffde:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ffe0:	bf00      	nop
 800ffe2:	370c      	adds	r7, #12
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr
 800ffec:	2000003c 	.word	0x2000003c

0800fff0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fff0:	f3ef 8009 	mrs	r0, PSP
 800fff4:	f3bf 8f6f 	isb	sy
 800fff8:	4b15      	ldr	r3, [pc, #84]	@ (8010050 <pxCurrentTCBConst>)
 800fffa:	681a      	ldr	r2, [r3, #0]
 800fffc:	f01e 0f10 	tst.w	lr, #16
 8010000:	bf08      	it	eq
 8010002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801000a:	6010      	str	r0, [r2, #0]
 801000c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010010:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8010014:	f380 8811 	msr	BASEPRI, r0
 8010018:	f3bf 8f4f 	dsb	sy
 801001c:	f3bf 8f6f 	isb	sy
 8010020:	f7fe fd66 	bl	800eaf0 <vTaskSwitchContext>
 8010024:	f04f 0000 	mov.w	r0, #0
 8010028:	f380 8811 	msr	BASEPRI, r0
 801002c:	bc09      	pop	{r0, r3}
 801002e:	6819      	ldr	r1, [r3, #0]
 8010030:	6808      	ldr	r0, [r1, #0]
 8010032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010036:	f01e 0f10 	tst.w	lr, #16
 801003a:	bf08      	it	eq
 801003c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010040:	f380 8809 	msr	PSP, r0
 8010044:	f3bf 8f6f 	isb	sy
 8010048:	4770      	bx	lr
 801004a:	bf00      	nop
 801004c:	f3af 8000 	nop.w

08010050 <pxCurrentTCBConst>:
 8010050:	20012de0 	.word	0x20012de0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010054:	bf00      	nop
 8010056:	bf00      	nop

08010058 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010058:	b580      	push	{r7, lr}
 801005a:	b082      	sub	sp, #8
 801005c:	af00      	add	r7, sp, #0
	__asm volatile
 801005e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010062:	f383 8811 	msr	BASEPRI, r3
 8010066:	f3bf 8f6f 	isb	sy
 801006a:	f3bf 8f4f 	dsb	sy
 801006e:	607b      	str	r3, [r7, #4]
}
 8010070:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010072:	f7fe fc83 	bl	800e97c <xTaskIncrementTick>
 8010076:	4603      	mov	r3, r0
 8010078:	2b00      	cmp	r3, #0
 801007a:	d003      	beq.n	8010084 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801007c:	4b06      	ldr	r3, [pc, #24]	@ (8010098 <xPortSysTickHandler+0x40>)
 801007e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8010082:	601a      	str	r2, [r3, #0]
 8010084:	2300      	movs	r3, #0
 8010086:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	f383 8811 	msr	BASEPRI, r3
}
 801008e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010090:	bf00      	nop
 8010092:	3708      	adds	r7, #8
 8010094:	46bd      	mov	sp, r7
 8010096:	bd80      	pop	{r7, pc}
 8010098:	e000ed04 	.word	0xe000ed04

0801009c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801009c:	b480      	push	{r7}
 801009e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80100a0:	4b0b      	ldr	r3, [pc, #44]	@ (80100d0 <vPortSetupTimerInterrupt+0x34>)
 80100a2:	2200      	movs	r2, #0
 80100a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80100a6:	4b0b      	ldr	r3, [pc, #44]	@ (80100d4 <vPortSetupTimerInterrupt+0x38>)
 80100a8:	2200      	movs	r2, #0
 80100aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80100ac:	4b0a      	ldr	r3, [pc, #40]	@ (80100d8 <vPortSetupTimerInterrupt+0x3c>)
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	4a0a      	ldr	r2, [pc, #40]	@ (80100dc <vPortSetupTimerInterrupt+0x40>)
 80100b2:	fba2 2303 	umull	r2, r3, r2, r3
 80100b6:	099b      	lsrs	r3, r3, #6
 80100b8:	4a09      	ldr	r2, [pc, #36]	@ (80100e0 <vPortSetupTimerInterrupt+0x44>)
 80100ba:	3b01      	subs	r3, #1
 80100bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80100be:	4b04      	ldr	r3, [pc, #16]	@ (80100d0 <vPortSetupTimerInterrupt+0x34>)
 80100c0:	2207      	movs	r2, #7
 80100c2:	601a      	str	r2, [r3, #0]
}
 80100c4:	bf00      	nop
 80100c6:	46bd      	mov	sp, r7
 80100c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100cc:	4770      	bx	lr
 80100ce:	bf00      	nop
 80100d0:	e000e010 	.word	0xe000e010
 80100d4:	e000e018 	.word	0xe000e018
 80100d8:	20000018 	.word	0x20000018
 80100dc:	10624dd3 	.word	0x10624dd3
 80100e0:	e000e014 	.word	0xe000e014

080100e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80100e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80100f4 <vPortEnableVFP+0x10>
 80100e8:	6801      	ldr	r1, [r0, #0]
 80100ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80100ee:	6001      	str	r1, [r0, #0]
 80100f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80100f2:	bf00      	nop
 80100f4:	e000ed88 	.word	0xe000ed88

080100f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80100f8:	b480      	push	{r7}
 80100fa:	b085      	sub	sp, #20
 80100fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80100fe:	f3ef 8305 	mrs	r3, IPSR
 8010102:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010104:	68fb      	ldr	r3, [r7, #12]
 8010106:	2b0f      	cmp	r3, #15
 8010108:	d915      	bls.n	8010136 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801010a:	4a18      	ldr	r2, [pc, #96]	@ (801016c <vPortValidateInterruptPriority+0x74>)
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	4413      	add	r3, r2
 8010110:	781b      	ldrb	r3, [r3, #0]
 8010112:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010114:	4b16      	ldr	r3, [pc, #88]	@ (8010170 <vPortValidateInterruptPriority+0x78>)
 8010116:	781b      	ldrb	r3, [r3, #0]
 8010118:	7afa      	ldrb	r2, [r7, #11]
 801011a:	429a      	cmp	r2, r3
 801011c:	d20b      	bcs.n	8010136 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 801011e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010122:	f383 8811 	msr	BASEPRI, r3
 8010126:	f3bf 8f6f 	isb	sy
 801012a:	f3bf 8f4f 	dsb	sy
 801012e:	607b      	str	r3, [r7, #4]
}
 8010130:	bf00      	nop
 8010132:	bf00      	nop
 8010134:	e7fd      	b.n	8010132 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010136:	4b0f      	ldr	r3, [pc, #60]	@ (8010174 <vPortValidateInterruptPriority+0x7c>)
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 801013e:	4b0e      	ldr	r3, [pc, #56]	@ (8010178 <vPortValidateInterruptPriority+0x80>)
 8010140:	681b      	ldr	r3, [r3, #0]
 8010142:	429a      	cmp	r2, r3
 8010144:	d90b      	bls.n	801015e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8010146:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801014a:	f383 8811 	msr	BASEPRI, r3
 801014e:	f3bf 8f6f 	isb	sy
 8010152:	f3bf 8f4f 	dsb	sy
 8010156:	603b      	str	r3, [r7, #0]
}
 8010158:	bf00      	nop
 801015a:	bf00      	nop
 801015c:	e7fd      	b.n	801015a <vPortValidateInterruptPriority+0x62>
	}
 801015e:	bf00      	nop
 8010160:	3714      	adds	r7, #20
 8010162:	46bd      	mov	sp, r7
 8010164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010168:	4770      	bx	lr
 801016a:	bf00      	nop
 801016c:	e000e3f0 	.word	0xe000e3f0
 8010170:	20013414 	.word	0x20013414
 8010174:	e000ed0c 	.word	0xe000ed0c
 8010178:	20013418 	.word	0x20013418

0801017c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801017c:	b580      	push	{r7, lr}
 801017e:	b08a      	sub	sp, #40	@ 0x28
 8010180:	af00      	add	r7, sp, #0
 8010182:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010184:	2300      	movs	r3, #0
 8010186:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010188:	f7fe fb2a 	bl	800e7e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801018c:	4b5c      	ldr	r3, [pc, #368]	@ (8010300 <pvPortMalloc+0x184>)
 801018e:	681b      	ldr	r3, [r3, #0]
 8010190:	2b00      	cmp	r3, #0
 8010192:	d101      	bne.n	8010198 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010194:	f000 f924 	bl	80103e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010198:	4b5a      	ldr	r3, [pc, #360]	@ (8010304 <pvPortMalloc+0x188>)
 801019a:	681a      	ldr	r2, [r3, #0]
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	4013      	ands	r3, r2
 80101a0:	2b00      	cmp	r3, #0
 80101a2:	f040 8095 	bne.w	80102d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d01e      	beq.n	80101ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80101ac:	2208      	movs	r2, #8
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	4413      	add	r3, r2
 80101b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f003 0307 	and.w	r3, r3, #7
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	d015      	beq.n	80101ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	f023 0307 	bic.w	r3, r3, #7
 80101c4:	3308      	adds	r3, #8
 80101c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f003 0307 	and.w	r3, r3, #7
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d00b      	beq.n	80101ea <pvPortMalloc+0x6e>
	__asm volatile
 80101d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80101d6:	f383 8811 	msr	BASEPRI, r3
 80101da:	f3bf 8f6f 	isb	sy
 80101de:	f3bf 8f4f 	dsb	sy
 80101e2:	617b      	str	r3, [r7, #20]
}
 80101e4:	bf00      	nop
 80101e6:	bf00      	nop
 80101e8:	e7fd      	b.n	80101e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d06f      	beq.n	80102d0 <pvPortMalloc+0x154>
 80101f0:	4b45      	ldr	r3, [pc, #276]	@ (8010308 <pvPortMalloc+0x18c>)
 80101f2:	681b      	ldr	r3, [r3, #0]
 80101f4:	687a      	ldr	r2, [r7, #4]
 80101f6:	429a      	cmp	r2, r3
 80101f8:	d86a      	bhi.n	80102d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80101fa:	4b44      	ldr	r3, [pc, #272]	@ (801030c <pvPortMalloc+0x190>)
 80101fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80101fe:	4b43      	ldr	r3, [pc, #268]	@ (801030c <pvPortMalloc+0x190>)
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010204:	e004      	b.n	8010210 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8010206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010208:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801020a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010212:	685b      	ldr	r3, [r3, #4]
 8010214:	687a      	ldr	r2, [r7, #4]
 8010216:	429a      	cmp	r2, r3
 8010218:	d903      	bls.n	8010222 <pvPortMalloc+0xa6>
 801021a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d1f1      	bne.n	8010206 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010222:	4b37      	ldr	r3, [pc, #220]	@ (8010300 <pvPortMalloc+0x184>)
 8010224:	681b      	ldr	r3, [r3, #0]
 8010226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010228:	429a      	cmp	r2, r3
 801022a:	d051      	beq.n	80102d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801022c:	6a3b      	ldr	r3, [r7, #32]
 801022e:	681b      	ldr	r3, [r3, #0]
 8010230:	2208      	movs	r2, #8
 8010232:	4413      	add	r3, r2
 8010234:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	6a3b      	ldr	r3, [r7, #32]
 801023c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801023e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010240:	685a      	ldr	r2, [r3, #4]
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	1ad2      	subs	r2, r2, r3
 8010246:	2308      	movs	r3, #8
 8010248:	005b      	lsls	r3, r3, #1
 801024a:	429a      	cmp	r2, r3
 801024c:	d920      	bls.n	8010290 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801024e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	4413      	add	r3, r2
 8010254:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010256:	69bb      	ldr	r3, [r7, #24]
 8010258:	f003 0307 	and.w	r3, r3, #7
 801025c:	2b00      	cmp	r3, #0
 801025e:	d00b      	beq.n	8010278 <pvPortMalloc+0xfc>
	__asm volatile
 8010260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8010264:	f383 8811 	msr	BASEPRI, r3
 8010268:	f3bf 8f6f 	isb	sy
 801026c:	f3bf 8f4f 	dsb	sy
 8010270:	613b      	str	r3, [r7, #16]
}
 8010272:	bf00      	nop
 8010274:	bf00      	nop
 8010276:	e7fd      	b.n	8010274 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801027a:	685a      	ldr	r2, [r3, #4]
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	1ad2      	subs	r2, r2, r3
 8010280:	69bb      	ldr	r3, [r7, #24]
 8010282:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010286:	687a      	ldr	r2, [r7, #4]
 8010288:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801028a:	69b8      	ldr	r0, [r7, #24]
 801028c:	f000 f90a 	bl	80104a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010290:	4b1d      	ldr	r3, [pc, #116]	@ (8010308 <pvPortMalloc+0x18c>)
 8010292:	681a      	ldr	r2, [r3, #0]
 8010294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010296:	685b      	ldr	r3, [r3, #4]
 8010298:	1ad3      	subs	r3, r2, r3
 801029a:	4a1b      	ldr	r2, [pc, #108]	@ (8010308 <pvPortMalloc+0x18c>)
 801029c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801029e:	4b1a      	ldr	r3, [pc, #104]	@ (8010308 <pvPortMalloc+0x18c>)
 80102a0:	681a      	ldr	r2, [r3, #0]
 80102a2:	4b1b      	ldr	r3, [pc, #108]	@ (8010310 <pvPortMalloc+0x194>)
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	429a      	cmp	r2, r3
 80102a8:	d203      	bcs.n	80102b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80102aa:	4b17      	ldr	r3, [pc, #92]	@ (8010308 <pvPortMalloc+0x18c>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	4a18      	ldr	r2, [pc, #96]	@ (8010310 <pvPortMalloc+0x194>)
 80102b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80102b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102b4:	685a      	ldr	r2, [r3, #4]
 80102b6:	4b13      	ldr	r3, [pc, #76]	@ (8010304 <pvPortMalloc+0x188>)
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	431a      	orrs	r2, r3
 80102bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80102c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102c2:	2200      	movs	r2, #0
 80102c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80102c6:	4b13      	ldr	r3, [pc, #76]	@ (8010314 <pvPortMalloc+0x198>)
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	3301      	adds	r3, #1
 80102cc:	4a11      	ldr	r2, [pc, #68]	@ (8010314 <pvPortMalloc+0x198>)
 80102ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80102d0:	f7fe fa94 	bl	800e7fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80102d4:	69fb      	ldr	r3, [r7, #28]
 80102d6:	f003 0307 	and.w	r3, r3, #7
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d00b      	beq.n	80102f6 <pvPortMalloc+0x17a>
	__asm volatile
 80102de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80102e2:	f383 8811 	msr	BASEPRI, r3
 80102e6:	f3bf 8f6f 	isb	sy
 80102ea:	f3bf 8f4f 	dsb	sy
 80102ee:	60fb      	str	r3, [r7, #12]
}
 80102f0:	bf00      	nop
 80102f2:	bf00      	nop
 80102f4:	e7fd      	b.n	80102f2 <pvPortMalloc+0x176>
	return pvReturn;
 80102f6:	69fb      	ldr	r3, [r7, #28]
}
 80102f8:	4618      	mov	r0, r3
 80102fa:	3728      	adds	r7, #40	@ 0x28
 80102fc:	46bd      	mov	sp, r7
 80102fe:	bd80      	pop	{r7, pc}
 8010300:	200172a4 	.word	0x200172a4
 8010304:	200172b8 	.word	0x200172b8
 8010308:	200172a8 	.word	0x200172a8
 801030c:	2001729c 	.word	0x2001729c
 8010310:	200172ac 	.word	0x200172ac
 8010314:	200172b0 	.word	0x200172b0

08010318 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b086      	sub	sp, #24
 801031c:	af00      	add	r7, sp, #0
 801031e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d04f      	beq.n	80103ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801032a:	2308      	movs	r3, #8
 801032c:	425b      	negs	r3, r3
 801032e:	697a      	ldr	r2, [r7, #20]
 8010330:	4413      	add	r3, r2
 8010332:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	685a      	ldr	r2, [r3, #4]
 801033c:	4b25      	ldr	r3, [pc, #148]	@ (80103d4 <vPortFree+0xbc>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	4013      	ands	r3, r2
 8010342:	2b00      	cmp	r3, #0
 8010344:	d10b      	bne.n	801035e <vPortFree+0x46>
	__asm volatile
 8010346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801034a:	f383 8811 	msr	BASEPRI, r3
 801034e:	f3bf 8f6f 	isb	sy
 8010352:	f3bf 8f4f 	dsb	sy
 8010356:	60fb      	str	r3, [r7, #12]
}
 8010358:	bf00      	nop
 801035a:	bf00      	nop
 801035c:	e7fd      	b.n	801035a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801035e:	693b      	ldr	r3, [r7, #16]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	2b00      	cmp	r3, #0
 8010364:	d00b      	beq.n	801037e <vPortFree+0x66>
	__asm volatile
 8010366:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801036a:	f383 8811 	msr	BASEPRI, r3
 801036e:	f3bf 8f6f 	isb	sy
 8010372:	f3bf 8f4f 	dsb	sy
 8010376:	60bb      	str	r3, [r7, #8]
}
 8010378:	bf00      	nop
 801037a:	bf00      	nop
 801037c:	e7fd      	b.n	801037a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801037e:	693b      	ldr	r3, [r7, #16]
 8010380:	685a      	ldr	r2, [r3, #4]
 8010382:	4b14      	ldr	r3, [pc, #80]	@ (80103d4 <vPortFree+0xbc>)
 8010384:	681b      	ldr	r3, [r3, #0]
 8010386:	4013      	ands	r3, r2
 8010388:	2b00      	cmp	r3, #0
 801038a:	d01e      	beq.n	80103ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801038c:	693b      	ldr	r3, [r7, #16]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	2b00      	cmp	r3, #0
 8010392:	d11a      	bne.n	80103ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010394:	693b      	ldr	r3, [r7, #16]
 8010396:	685a      	ldr	r2, [r3, #4]
 8010398:	4b0e      	ldr	r3, [pc, #56]	@ (80103d4 <vPortFree+0xbc>)
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	43db      	mvns	r3, r3
 801039e:	401a      	ands	r2, r3
 80103a0:	693b      	ldr	r3, [r7, #16]
 80103a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80103a4:	f7fe fa1c 	bl	800e7e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80103a8:	693b      	ldr	r3, [r7, #16]
 80103aa:	685a      	ldr	r2, [r3, #4]
 80103ac:	4b0a      	ldr	r3, [pc, #40]	@ (80103d8 <vPortFree+0xc0>)
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	4413      	add	r3, r2
 80103b2:	4a09      	ldr	r2, [pc, #36]	@ (80103d8 <vPortFree+0xc0>)
 80103b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80103b6:	6938      	ldr	r0, [r7, #16]
 80103b8:	f000 f874 	bl	80104a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80103bc:	4b07      	ldr	r3, [pc, #28]	@ (80103dc <vPortFree+0xc4>)
 80103be:	681b      	ldr	r3, [r3, #0]
 80103c0:	3301      	adds	r3, #1
 80103c2:	4a06      	ldr	r2, [pc, #24]	@ (80103dc <vPortFree+0xc4>)
 80103c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80103c6:	f7fe fa19 	bl	800e7fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80103ca:	bf00      	nop
 80103cc:	3718      	adds	r7, #24
 80103ce:	46bd      	mov	sp, r7
 80103d0:	bd80      	pop	{r7, pc}
 80103d2:	bf00      	nop
 80103d4:	200172b8 	.word	0x200172b8
 80103d8:	200172a8 	.word	0x200172a8
 80103dc:	200172b4 	.word	0x200172b4

080103e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80103e0:	b480      	push	{r7}
 80103e2:	b085      	sub	sp, #20
 80103e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80103e6:	f44f 537a 	mov.w	r3, #16000	@ 0x3e80
 80103ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80103ec:	4b27      	ldr	r3, [pc, #156]	@ (801048c <prvHeapInit+0xac>)
 80103ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	f003 0307 	and.w	r3, r3, #7
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d00c      	beq.n	8010414 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80103fa:	68fb      	ldr	r3, [r7, #12]
 80103fc:	3307      	adds	r3, #7
 80103fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	f023 0307 	bic.w	r3, r3, #7
 8010406:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010408:	68ba      	ldr	r2, [r7, #8]
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	1ad3      	subs	r3, r2, r3
 801040e:	4a1f      	ldr	r2, [pc, #124]	@ (801048c <prvHeapInit+0xac>)
 8010410:	4413      	add	r3, r2
 8010412:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010414:	68fb      	ldr	r3, [r7, #12]
 8010416:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010418:	4a1d      	ldr	r2, [pc, #116]	@ (8010490 <prvHeapInit+0xb0>)
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801041e:	4b1c      	ldr	r3, [pc, #112]	@ (8010490 <prvHeapInit+0xb0>)
 8010420:	2200      	movs	r2, #0
 8010422:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	68ba      	ldr	r2, [r7, #8]
 8010428:	4413      	add	r3, r2
 801042a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801042c:	2208      	movs	r2, #8
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	1a9b      	subs	r3, r3, r2
 8010432:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010434:	68fb      	ldr	r3, [r7, #12]
 8010436:	f023 0307 	bic.w	r3, r3, #7
 801043a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801043c:	68fb      	ldr	r3, [r7, #12]
 801043e:	4a15      	ldr	r2, [pc, #84]	@ (8010494 <prvHeapInit+0xb4>)
 8010440:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010442:	4b14      	ldr	r3, [pc, #80]	@ (8010494 <prvHeapInit+0xb4>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	2200      	movs	r2, #0
 8010448:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801044a:	4b12      	ldr	r3, [pc, #72]	@ (8010494 <prvHeapInit+0xb4>)
 801044c:	681b      	ldr	r3, [r3, #0]
 801044e:	2200      	movs	r2, #0
 8010450:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	68fa      	ldr	r2, [r7, #12]
 801045a:	1ad2      	subs	r2, r2, r3
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010460:	4b0c      	ldr	r3, [pc, #48]	@ (8010494 <prvHeapInit+0xb4>)
 8010462:	681a      	ldr	r2, [r3, #0]
 8010464:	683b      	ldr	r3, [r7, #0]
 8010466:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010468:	683b      	ldr	r3, [r7, #0]
 801046a:	685b      	ldr	r3, [r3, #4]
 801046c:	4a0a      	ldr	r2, [pc, #40]	@ (8010498 <prvHeapInit+0xb8>)
 801046e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010470:	683b      	ldr	r3, [r7, #0]
 8010472:	685b      	ldr	r3, [r3, #4]
 8010474:	4a09      	ldr	r2, [pc, #36]	@ (801049c <prvHeapInit+0xbc>)
 8010476:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010478:	4b09      	ldr	r3, [pc, #36]	@ (80104a0 <prvHeapInit+0xc0>)
 801047a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801047e:	601a      	str	r2, [r3, #0]
}
 8010480:	bf00      	nop
 8010482:	3714      	adds	r7, #20
 8010484:	46bd      	mov	sp, r7
 8010486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801048a:	4770      	bx	lr
 801048c:	2001341c 	.word	0x2001341c
 8010490:	2001729c 	.word	0x2001729c
 8010494:	200172a4 	.word	0x200172a4
 8010498:	200172ac 	.word	0x200172ac
 801049c:	200172a8 	.word	0x200172a8
 80104a0:	200172b8 	.word	0x200172b8

080104a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80104a4:	b480      	push	{r7}
 80104a6:	b085      	sub	sp, #20
 80104a8:	af00      	add	r7, sp, #0
 80104aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80104ac:	4b28      	ldr	r3, [pc, #160]	@ (8010550 <prvInsertBlockIntoFreeList+0xac>)
 80104ae:	60fb      	str	r3, [r7, #12]
 80104b0:	e002      	b.n	80104b8 <prvInsertBlockIntoFreeList+0x14>
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	681b      	ldr	r3, [r3, #0]
 80104b6:	60fb      	str	r3, [r7, #12]
 80104b8:	68fb      	ldr	r3, [r7, #12]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	687a      	ldr	r2, [r7, #4]
 80104be:	429a      	cmp	r2, r3
 80104c0:	d8f7      	bhi.n	80104b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80104c2:	68fb      	ldr	r3, [r7, #12]
 80104c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	685b      	ldr	r3, [r3, #4]
 80104ca:	68ba      	ldr	r2, [r7, #8]
 80104cc:	4413      	add	r3, r2
 80104ce:	687a      	ldr	r2, [r7, #4]
 80104d0:	429a      	cmp	r2, r3
 80104d2:	d108      	bne.n	80104e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	685a      	ldr	r2, [r3, #4]
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	685b      	ldr	r3, [r3, #4]
 80104dc:	441a      	add	r2, r3
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80104e2:	68fb      	ldr	r3, [r7, #12]
 80104e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	685b      	ldr	r3, [r3, #4]
 80104ee:	68ba      	ldr	r2, [r7, #8]
 80104f0:	441a      	add	r2, r3
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	429a      	cmp	r2, r3
 80104f8:	d118      	bne.n	801052c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80104fa:	68fb      	ldr	r3, [r7, #12]
 80104fc:	681a      	ldr	r2, [r3, #0]
 80104fe:	4b15      	ldr	r3, [pc, #84]	@ (8010554 <prvInsertBlockIntoFreeList+0xb0>)
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	429a      	cmp	r2, r3
 8010504:	d00d      	beq.n	8010522 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	685a      	ldr	r2, [r3, #4]
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	685b      	ldr	r3, [r3, #4]
 8010510:	441a      	add	r2, r3
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	681a      	ldr	r2, [r3, #0]
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	601a      	str	r2, [r3, #0]
 8010520:	e008      	b.n	8010534 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010522:	4b0c      	ldr	r3, [pc, #48]	@ (8010554 <prvInsertBlockIntoFreeList+0xb0>)
 8010524:	681a      	ldr	r2, [r3, #0]
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	601a      	str	r2, [r3, #0]
 801052a:	e003      	b.n	8010534 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	681a      	ldr	r2, [r3, #0]
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010534:	68fa      	ldr	r2, [r7, #12]
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	429a      	cmp	r2, r3
 801053a:	d002      	beq.n	8010542 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	687a      	ldr	r2, [r7, #4]
 8010540:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010542:	bf00      	nop
 8010544:	3714      	adds	r7, #20
 8010546:	46bd      	mov	sp, r7
 8010548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801054c:	4770      	bx	lr
 801054e:	bf00      	nop
 8010550:	2001729c 	.word	0x2001729c
 8010554:	200172a4 	.word	0x200172a4

08010558 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8010558:	b580      	push	{r7, lr}
 801055a:	b084      	sub	sp, #16
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8010562:	f007 ff25 	bl	80183b0 <sys_timeouts_sleeptime>
 8010566:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801056e:	d10b      	bne.n	8010588 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8010570:	4813      	ldr	r0, [pc, #76]	@ (80105c0 <tcpip_timeouts_mbox_fetch+0x68>)
 8010572:	f00c fed8 	bl	801d326 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8010576:	2200      	movs	r2, #0
 8010578:	6839      	ldr	r1, [r7, #0]
 801057a:	6878      	ldr	r0, [r7, #4]
 801057c:	f00c fe60 	bl	801d240 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8010580:	480f      	ldr	r0, [pc, #60]	@ (80105c0 <tcpip_timeouts_mbox_fetch+0x68>)
 8010582:	f00c fec1 	bl	801d308 <sys_mutex_lock>
    return;
 8010586:	e018      	b.n	80105ba <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d102      	bne.n	8010594 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 801058e:	f007 fed5 	bl	801833c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8010592:	e7e6      	b.n	8010562 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8010594:	480a      	ldr	r0, [pc, #40]	@ (80105c0 <tcpip_timeouts_mbox_fetch+0x68>)
 8010596:	f00c fec6 	bl	801d326 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801059a:	68fa      	ldr	r2, [r7, #12]
 801059c:	6839      	ldr	r1, [r7, #0]
 801059e:	6878      	ldr	r0, [r7, #4]
 80105a0:	f00c fe4e 	bl	801d240 <sys_arch_mbox_fetch>
 80105a4:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80105a6:	4806      	ldr	r0, [pc, #24]	@ (80105c0 <tcpip_timeouts_mbox_fetch+0x68>)
 80105a8:	f00c feae 	bl	801d308 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105b2:	d102      	bne.n	80105ba <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80105b4:	f007 fec2 	bl	801833c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80105b8:	e7d3      	b.n	8010562 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80105ba:	3710      	adds	r7, #16
 80105bc:	46bd      	mov	sp, r7
 80105be:	bd80      	pop	{r7, pc}
 80105c0:	200172c8 	.word	0x200172c8

080105c4 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80105c4:	b580      	push	{r7, lr}
 80105c6:	b084      	sub	sp, #16
 80105c8:	af00      	add	r7, sp, #0
 80105ca:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80105cc:	4810      	ldr	r0, [pc, #64]	@ (8010610 <tcpip_thread+0x4c>)
 80105ce:	f00c fe9b 	bl	801d308 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80105d2:	4b10      	ldr	r3, [pc, #64]	@ (8010614 <tcpip_thread+0x50>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d005      	beq.n	80105e6 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80105da:	4b0e      	ldr	r3, [pc, #56]	@ (8010614 <tcpip_thread+0x50>)
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	4a0e      	ldr	r2, [pc, #56]	@ (8010618 <tcpip_thread+0x54>)
 80105e0:	6812      	ldr	r2, [r2, #0]
 80105e2:	4610      	mov	r0, r2
 80105e4:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80105e6:	f107 030c 	add.w	r3, r7, #12
 80105ea:	4619      	mov	r1, r3
 80105ec:	480b      	ldr	r0, [pc, #44]	@ (801061c <tcpip_thread+0x58>)
 80105ee:	f7ff ffb3 	bl	8010558 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d106      	bne.n	8010606 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80105f8:	4b09      	ldr	r3, [pc, #36]	@ (8010620 <tcpip_thread+0x5c>)
 80105fa:	2291      	movs	r2, #145	@ 0x91
 80105fc:	4909      	ldr	r1, [pc, #36]	@ (8010624 <tcpip_thread+0x60>)
 80105fe:	480a      	ldr	r0, [pc, #40]	@ (8010628 <tcpip_thread+0x64>)
 8010600:	f00e f87e 	bl	801e700 <iprintf>
      continue;
 8010604:	e003      	b.n	801060e <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	4618      	mov	r0, r3
 801060a:	f000 f80f 	bl	801062c <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801060e:	e7ea      	b.n	80105e6 <tcpip_thread+0x22>
 8010610:	200172c8 	.word	0x200172c8
 8010614:	200172bc 	.word	0x200172bc
 8010618:	200172c0 	.word	0x200172c0
 801061c:	200172c4 	.word	0x200172c4
 8010620:	080220a0 	.word	0x080220a0
 8010624:	080220d0 	.word	0x080220d0
 8010628:	080220f0 	.word	0x080220f0

0801062c <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 801062c:	b580      	push	{r7, lr}
 801062e:	b082      	sub	sp, #8
 8010630:	af00      	add	r7, sp, #0
 8010632:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	781b      	ldrb	r3, [r3, #0]
 8010638:	2b02      	cmp	r3, #2
 801063a:	d026      	beq.n	801068a <tcpip_thread_handle_msg+0x5e>
 801063c:	2b02      	cmp	r3, #2
 801063e:	dc2b      	bgt.n	8010698 <tcpip_thread_handle_msg+0x6c>
 8010640:	2b00      	cmp	r3, #0
 8010642:	d002      	beq.n	801064a <tcpip_thread_handle_msg+0x1e>
 8010644:	2b01      	cmp	r3, #1
 8010646:	d015      	beq.n	8010674 <tcpip_thread_handle_msg+0x48>
 8010648:	e026      	b.n	8010698 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	68db      	ldr	r3, [r3, #12]
 801064e:	687a      	ldr	r2, [r7, #4]
 8010650:	6850      	ldr	r0, [r2, #4]
 8010652:	687a      	ldr	r2, [r7, #4]
 8010654:	6892      	ldr	r2, [r2, #8]
 8010656:	4611      	mov	r1, r2
 8010658:	4798      	blx	r3
 801065a:	4603      	mov	r3, r0
 801065c:	2b00      	cmp	r3, #0
 801065e:	d004      	beq.n	801066a <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	685b      	ldr	r3, [r3, #4]
 8010664:	4618      	mov	r0, r3
 8010666:	f002 f805 	bl	8012674 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801066a:	6879      	ldr	r1, [r7, #4]
 801066c:	2009      	movs	r0, #9
 801066e:	f001 f951 	bl	8011914 <memp_free>
      break;
 8010672:	e018      	b.n	80106a6 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	685b      	ldr	r3, [r3, #4]
 8010678:	687a      	ldr	r2, [r7, #4]
 801067a:	6892      	ldr	r2, [r2, #8]
 801067c:	4610      	mov	r0, r2
 801067e:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8010680:	6879      	ldr	r1, [r7, #4]
 8010682:	2008      	movs	r0, #8
 8010684:	f001 f946 	bl	8011914 <memp_free>
      break;
 8010688:	e00d      	b.n	80106a6 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	685b      	ldr	r3, [r3, #4]
 801068e:	687a      	ldr	r2, [r7, #4]
 8010690:	6892      	ldr	r2, [r2, #8]
 8010692:	4610      	mov	r0, r2
 8010694:	4798      	blx	r3
      break;
 8010696:	e006      	b.n	80106a6 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010698:	4b05      	ldr	r3, [pc, #20]	@ (80106b0 <tcpip_thread_handle_msg+0x84>)
 801069a:	22cf      	movs	r2, #207	@ 0xcf
 801069c:	4905      	ldr	r1, [pc, #20]	@ (80106b4 <tcpip_thread_handle_msg+0x88>)
 801069e:	4806      	ldr	r0, [pc, #24]	@ (80106b8 <tcpip_thread_handle_msg+0x8c>)
 80106a0:	f00e f82e 	bl	801e700 <iprintf>
      break;
 80106a4:	bf00      	nop
  }
}
 80106a6:	bf00      	nop
 80106a8:	3708      	adds	r7, #8
 80106aa:	46bd      	mov	sp, r7
 80106ac:	bd80      	pop	{r7, pc}
 80106ae:	bf00      	nop
 80106b0:	080220a0 	.word	0x080220a0
 80106b4:	080220d0 	.word	0x080220d0
 80106b8:	080220f0 	.word	0x080220f0

080106bc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80106bc:	b580      	push	{r7, lr}
 80106be:	b086      	sub	sp, #24
 80106c0:	af00      	add	r7, sp, #0
 80106c2:	60f8      	str	r0, [r7, #12]
 80106c4:	60b9      	str	r1, [r7, #8]
 80106c6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80106c8:	481a      	ldr	r0, [pc, #104]	@ (8010734 <tcpip_inpkt+0x78>)
 80106ca:	f00c fdea 	bl	801d2a2 <sys_mbox_valid>
 80106ce:	4603      	mov	r3, r0
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d105      	bne.n	80106e0 <tcpip_inpkt+0x24>
 80106d4:	4b18      	ldr	r3, [pc, #96]	@ (8010738 <tcpip_inpkt+0x7c>)
 80106d6:	22fc      	movs	r2, #252	@ 0xfc
 80106d8:	4918      	ldr	r1, [pc, #96]	@ (801073c <tcpip_inpkt+0x80>)
 80106da:	4819      	ldr	r0, [pc, #100]	@ (8010740 <tcpip_inpkt+0x84>)
 80106dc:	f00e f810 	bl	801e700 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80106e0:	2009      	movs	r0, #9
 80106e2:	f001 f8a1 	bl	8011828 <memp_malloc>
 80106e6:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80106e8:	697b      	ldr	r3, [r7, #20]
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d102      	bne.n	80106f4 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80106ee:	f04f 33ff 	mov.w	r3, #4294967295
 80106f2:	e01a      	b.n	801072a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80106f4:	697b      	ldr	r3, [r7, #20]
 80106f6:	2200      	movs	r2, #0
 80106f8:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80106fa:	697b      	ldr	r3, [r7, #20]
 80106fc:	68fa      	ldr	r2, [r7, #12]
 80106fe:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8010700:	697b      	ldr	r3, [r7, #20]
 8010702:	68ba      	ldr	r2, [r7, #8]
 8010704:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8010706:	697b      	ldr	r3, [r7, #20]
 8010708:	687a      	ldr	r2, [r7, #4]
 801070a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801070c:	6979      	ldr	r1, [r7, #20]
 801070e:	4809      	ldr	r0, [pc, #36]	@ (8010734 <tcpip_inpkt+0x78>)
 8010710:	f00c fd7c 	bl	801d20c <sys_mbox_trypost>
 8010714:	4603      	mov	r3, r0
 8010716:	2b00      	cmp	r3, #0
 8010718:	d006      	beq.n	8010728 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801071a:	6979      	ldr	r1, [r7, #20]
 801071c:	2009      	movs	r0, #9
 801071e:	f001 f8f9 	bl	8011914 <memp_free>
    return ERR_MEM;
 8010722:	f04f 33ff 	mov.w	r3, #4294967295
 8010726:	e000      	b.n	801072a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8010728:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801072a:	4618      	mov	r0, r3
 801072c:	3718      	adds	r7, #24
 801072e:	46bd      	mov	sp, r7
 8010730:	bd80      	pop	{r7, pc}
 8010732:	bf00      	nop
 8010734:	200172c4 	.word	0x200172c4
 8010738:	080220a0 	.word	0x080220a0
 801073c:	08022118 	.word	0x08022118
 8010740:	080220f0 	.word	0x080220f0

08010744 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b082      	sub	sp, #8
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
 801074c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 801074e:	683b      	ldr	r3, [r7, #0]
 8010750:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8010754:	f003 0318 	and.w	r3, r3, #24
 8010758:	2b00      	cmp	r3, #0
 801075a:	d006      	beq.n	801076a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 801075c:	4a08      	ldr	r2, [pc, #32]	@ (8010780 <tcpip_input+0x3c>)
 801075e:	6839      	ldr	r1, [r7, #0]
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f7ff ffab 	bl	80106bc <tcpip_inpkt>
 8010766:	4603      	mov	r3, r0
 8010768:	e005      	b.n	8010776 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801076a:	4a06      	ldr	r2, [pc, #24]	@ (8010784 <tcpip_input+0x40>)
 801076c:	6839      	ldr	r1, [r7, #0]
 801076e:	6878      	ldr	r0, [r7, #4]
 8010770:	f7ff ffa4 	bl	80106bc <tcpip_inpkt>
 8010774:	4603      	mov	r3, r0
}
 8010776:	4618      	mov	r0, r3
 8010778:	3708      	adds	r7, #8
 801077a:	46bd      	mov	sp, r7
 801077c:	bd80      	pop	{r7, pc}
 801077e:	bf00      	nop
 8010780:	0801d02d 	.word	0x0801d02d
 8010784:	0801bef9 	.word	0x0801bef9

08010788 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8010788:	b580      	push	{r7, lr}
 801078a:	b084      	sub	sp, #16
 801078c:	af00      	add	r7, sp, #0
 801078e:	6078      	str	r0, [r7, #4]
 8010790:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8010792:	4819      	ldr	r0, [pc, #100]	@ (80107f8 <tcpip_try_callback+0x70>)
 8010794:	f00c fd85 	bl	801d2a2 <sys_mbox_valid>
 8010798:	4603      	mov	r3, r0
 801079a:	2b00      	cmp	r3, #0
 801079c:	d106      	bne.n	80107ac <tcpip_try_callback+0x24>
 801079e:	4b17      	ldr	r3, [pc, #92]	@ (80107fc <tcpip_try_callback+0x74>)
 80107a0:	f240 125d 	movw	r2, #349	@ 0x15d
 80107a4:	4916      	ldr	r1, [pc, #88]	@ (8010800 <tcpip_try_callback+0x78>)
 80107a6:	4817      	ldr	r0, [pc, #92]	@ (8010804 <tcpip_try_callback+0x7c>)
 80107a8:	f00d ffaa 	bl	801e700 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80107ac:	2008      	movs	r0, #8
 80107ae:	f001 f83b 	bl	8011828 <memp_malloc>
 80107b2:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d102      	bne.n	80107c0 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80107ba:	f04f 33ff 	mov.w	r3, #4294967295
 80107be:	e017      	b.n	80107f0 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80107c0:	68fb      	ldr	r3, [r7, #12]
 80107c2:	2201      	movs	r2, #1
 80107c4:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	687a      	ldr	r2, [r7, #4]
 80107ca:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	683a      	ldr	r2, [r7, #0]
 80107d0:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80107d2:	68f9      	ldr	r1, [r7, #12]
 80107d4:	4808      	ldr	r0, [pc, #32]	@ (80107f8 <tcpip_try_callback+0x70>)
 80107d6:	f00c fd19 	bl	801d20c <sys_mbox_trypost>
 80107da:	4603      	mov	r3, r0
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d006      	beq.n	80107ee <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80107e0:	68f9      	ldr	r1, [r7, #12]
 80107e2:	2008      	movs	r0, #8
 80107e4:	f001 f896 	bl	8011914 <memp_free>
    return ERR_MEM;
 80107e8:	f04f 33ff 	mov.w	r3, #4294967295
 80107ec:	e000      	b.n	80107f0 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80107ee:	2300      	movs	r3, #0
}
 80107f0:	4618      	mov	r0, r3
 80107f2:	3710      	adds	r7, #16
 80107f4:	46bd      	mov	sp, r7
 80107f6:	bd80      	pop	{r7, pc}
 80107f8:	200172c4 	.word	0x200172c4
 80107fc:	080220a0 	.word	0x080220a0
 8010800:	08022118 	.word	0x08022118
 8010804:	080220f0 	.word	0x080220f0

08010808 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010808:	b580      	push	{r7, lr}
 801080a:	b084      	sub	sp, #16
 801080c:	af02      	add	r7, sp, #8
 801080e:	6078      	str	r0, [r7, #4]
 8010810:	6039      	str	r1, [r7, #0]
  lwip_init();
 8010812:	f000 fb5e 	bl	8010ed2 <lwip_init>

  tcpip_init_done = initfunc;
 8010816:	4a17      	ldr	r2, [pc, #92]	@ (8010874 <tcpip_init+0x6c>)
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 801081c:	4a16      	ldr	r2, [pc, #88]	@ (8010878 <tcpip_init+0x70>)
 801081e:	683b      	ldr	r3, [r7, #0]
 8010820:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8010822:	2106      	movs	r1, #6
 8010824:	4815      	ldr	r0, [pc, #84]	@ (801087c <tcpip_init+0x74>)
 8010826:	f00c fcd7 	bl	801d1d8 <sys_mbox_new>
 801082a:	4603      	mov	r3, r0
 801082c:	2b00      	cmp	r3, #0
 801082e:	d006      	beq.n	801083e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010830:	4b13      	ldr	r3, [pc, #76]	@ (8010880 <tcpip_init+0x78>)
 8010832:	f240 2261 	movw	r2, #609	@ 0x261
 8010836:	4913      	ldr	r1, [pc, #76]	@ (8010884 <tcpip_init+0x7c>)
 8010838:	4813      	ldr	r0, [pc, #76]	@ (8010888 <tcpip_init+0x80>)
 801083a:	f00d ff61 	bl	801e700 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 801083e:	4813      	ldr	r0, [pc, #76]	@ (801088c <tcpip_init+0x84>)
 8010840:	f00c fd4c 	bl	801d2dc <sys_mutex_new>
 8010844:	4603      	mov	r3, r0
 8010846:	2b00      	cmp	r3, #0
 8010848:	d006      	beq.n	8010858 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 801084a:	4b0d      	ldr	r3, [pc, #52]	@ (8010880 <tcpip_init+0x78>)
 801084c:	f240 2265 	movw	r2, #613	@ 0x265
 8010850:	490f      	ldr	r1, [pc, #60]	@ (8010890 <tcpip_init+0x88>)
 8010852:	480d      	ldr	r0, [pc, #52]	@ (8010888 <tcpip_init+0x80>)
 8010854:	f00d ff54 	bl	801e700 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8010858:	2301      	movs	r3, #1
 801085a:	9300      	str	r3, [sp, #0]
 801085c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010860:	2200      	movs	r2, #0
 8010862:	490c      	ldr	r1, [pc, #48]	@ (8010894 <tcpip_init+0x8c>)
 8010864:	480c      	ldr	r0, [pc, #48]	@ (8010898 <tcpip_init+0x90>)
 8010866:	f00c fd6b 	bl	801d340 <sys_thread_new>
}
 801086a:	bf00      	nop
 801086c:	3708      	adds	r7, #8
 801086e:	46bd      	mov	sp, r7
 8010870:	bd80      	pop	{r7, pc}
 8010872:	bf00      	nop
 8010874:	200172bc 	.word	0x200172bc
 8010878:	200172c0 	.word	0x200172c0
 801087c:	200172c4 	.word	0x200172c4
 8010880:	080220a0 	.word	0x080220a0
 8010884:	08022128 	.word	0x08022128
 8010888:	080220f0 	.word	0x080220f0
 801088c:	200172c8 	.word	0x200172c8
 8010890:	0802214c 	.word	0x0802214c
 8010894:	080105c5 	.word	0x080105c5
 8010898:	08022170 	.word	0x08022170

0801089c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801089c:	b480      	push	{r7}
 801089e:	b083      	sub	sp, #12
 80108a0:	af00      	add	r7, sp, #0
 80108a2:	4603      	mov	r3, r0
 80108a4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80108a6:	88fb      	ldrh	r3, [r7, #6]
 80108a8:	021b      	lsls	r3, r3, #8
 80108aa:	b21a      	sxth	r2, r3
 80108ac:	88fb      	ldrh	r3, [r7, #6]
 80108ae:	0a1b      	lsrs	r3, r3, #8
 80108b0:	b29b      	uxth	r3, r3
 80108b2:	b21b      	sxth	r3, r3
 80108b4:	4313      	orrs	r3, r2
 80108b6:	b21b      	sxth	r3, r3
 80108b8:	b29b      	uxth	r3, r3
}
 80108ba:	4618      	mov	r0, r3
 80108bc:	370c      	adds	r7, #12
 80108be:	46bd      	mov	sp, r7
 80108c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c4:	4770      	bx	lr

080108c6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80108c6:	b480      	push	{r7}
 80108c8:	b083      	sub	sp, #12
 80108ca:	af00      	add	r7, sp, #0
 80108cc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	061a      	lsls	r2, r3, #24
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	021b      	lsls	r3, r3, #8
 80108d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80108da:	431a      	orrs	r2, r3
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	0a1b      	lsrs	r3, r3, #8
 80108e0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80108e4:	431a      	orrs	r2, r3
 80108e6:	687b      	ldr	r3, [r7, #4]
 80108e8:	0e1b      	lsrs	r3, r3, #24
 80108ea:	4313      	orrs	r3, r2
}
 80108ec:	4618      	mov	r0, r3
 80108ee:	370c      	adds	r7, #12
 80108f0:	46bd      	mov	sp, r7
 80108f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f6:	4770      	bx	lr

080108f8 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 80108f8:	b480      	push	{r7}
 80108fa:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 80108fc:	bf00      	nop
 80108fe:	46bd      	mov	sp, r7
 8010900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010904:	4770      	bx	lr
	...

08010908 <dns_setserver>:
 * @param numdns the index of the DNS server to set must be < DNS_MAX_SERVERS
 * @param dnsserver IP address of the DNS server to set
 */
void
dns_setserver(u8_t numdns, const ip_addr_t *dnsserver)
{
 8010908:	b480      	push	{r7}
 801090a:	b083      	sub	sp, #12
 801090c:	af00      	add	r7, sp, #0
 801090e:	4603      	mov	r3, r0
 8010910:	6039      	str	r1, [r7, #0]
 8010912:	71fb      	strb	r3, [r7, #7]
  if (numdns < DNS_MAX_SERVERS) {
 8010914:	79fb      	ldrb	r3, [r7, #7]
 8010916:	2b01      	cmp	r3, #1
 8010918:	d80f      	bhi.n	801093a <dns_setserver+0x32>
    if (dnsserver != NULL) {
 801091a:	683b      	ldr	r3, [r7, #0]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d006      	beq.n	801092e <dns_setserver+0x26>
      dns_servers[numdns] = (*dnsserver);
 8010920:	79fb      	ldrb	r3, [r7, #7]
 8010922:	4909      	ldr	r1, [pc, #36]	@ (8010948 <dns_setserver+0x40>)
 8010924:	683a      	ldr	r2, [r7, #0]
 8010926:	6812      	ldr	r2, [r2, #0]
 8010928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    } else {
      dns_servers[numdns] = *IP_ADDR_ANY;
    }
  }
}
 801092c:	e005      	b.n	801093a <dns_setserver+0x32>
      dns_servers[numdns] = *IP_ADDR_ANY;
 801092e:	79fb      	ldrb	r3, [r7, #7]
 8010930:	4905      	ldr	r1, [pc, #20]	@ (8010948 <dns_setserver+0x40>)
 8010932:	4a06      	ldr	r2, [pc, #24]	@ (801094c <dns_setserver+0x44>)
 8010934:	6812      	ldr	r2, [r2, #0]
 8010936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 801093a:	bf00      	nop
 801093c:	370c      	adds	r7, #12
 801093e:	46bd      	mov	sp, r7
 8010940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010944:	4770      	bx	lr
 8010946:	bf00      	nop
 8010948:	2001774c 	.word	0x2001774c
 801094c:	080252e8 	.word	0x080252e8

08010950 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 8010950:	b580      	push	{r7, lr}
 8010952:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 8010954:	f000 faa8 	bl	8010ea8 <dns_check_entries>
}
 8010958:	bf00      	nop
 801095a:	bd80      	pop	{r7, pc}

0801095c <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 801095c:	b580      	push	{r7, lr}
 801095e:	b090      	sub	sp, #64	@ 0x40
 8010960:	af00      	add	r7, sp, #0
 8010962:	4603      	mov	r3, r0
 8010964:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 8010966:	79fa      	ldrb	r2, [r7, #7]
 8010968:	4613      	mov	r3, r2
 801096a:	011b      	lsls	r3, r3, #4
 801096c:	4413      	add	r3, r2
 801096e:	011b      	lsls	r3, r3, #4
 8010970:	4a6c      	ldr	r2, [pc, #432]	@ (8010b24 <dns_send+0x1c8>)
 8010972:	4413      	add	r3, r2
 8010974:	633b      	str	r3, [r7, #48]	@ 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 8010976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010978:	7adb      	ldrb	r3, [r3, #11]
 801097a:	2b01      	cmp	r3, #1
 801097c:	d906      	bls.n	801098c <dns_send+0x30>
 801097e:	4b6a      	ldr	r3, [pc, #424]	@ (8010b28 <dns_send+0x1cc>)
 8010980:	f240 22fa 	movw	r2, #762	@ 0x2fa
 8010984:	4969      	ldr	r1, [pc, #420]	@ (8010b2c <dns_send+0x1d0>)
 8010986:	486a      	ldr	r0, [pc, #424]	@ (8010b30 <dns_send+0x1d4>)
 8010988:	f00d feba 	bl	801e700 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 801098c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801098e:	7adb      	ldrb	r3, [r3, #11]
 8010990:	461a      	mov	r2, r3
 8010992:	4b68      	ldr	r3, [pc, #416]	@ (8010b34 <dns_send+0x1d8>)
 8010994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010998:	2b00      	cmp	r3, #0
 801099a:	d109      	bne.n	80109b0 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 801099c:	79fb      	ldrb	r3, [r7, #7]
 801099e:	2100      	movs	r1, #0
 80109a0:	4618      	mov	r0, r3
 80109a2:	f000 f8cb 	bl	8010b3c <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 80109a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109a8:	2200      	movs	r2, #0
 80109aa:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 80109ac:	2300      	movs	r3, #0
 80109ae:	e0b4      	b.n	8010b1a <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 80109b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109b2:	3310      	adds	r3, #16
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7ef fc5b 	bl	8000270 <strlen>
 80109ba:	4603      	mov	r3, r0
 80109bc:	b29b      	uxth	r3, r3
 80109be:	3312      	adds	r3, #18
 80109c0:	b29b      	uxth	r3, r3
 80109c2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80109c6:	4619      	mov	r1, r3
 80109c8:	2036      	movs	r0, #54	@ 0x36
 80109ca:	f001 fb6f 	bl	80120ac <pbuf_alloc>
 80109ce:	62f8      	str	r0, [r7, #44]	@ 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 80109d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	f000 8095 	beq.w	8010b02 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 80109d8:	f107 0310 	add.w	r3, r7, #16
 80109dc:	220c      	movs	r2, #12
 80109de:	2100      	movs	r1, #0
 80109e0:	4618      	mov	r0, r3
 80109e2:	f00d ffc1 	bl	801e968 <memset>
    hdr.id = lwip_htons(entry->txid);
 80109e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80109e8:	891b      	ldrh	r3, [r3, #8]
 80109ea:	4618      	mov	r0, r3
 80109ec:	f7ff ff56 	bl	801089c <lwip_htons>
 80109f0:	4603      	mov	r3, r0
 80109f2:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 80109f4:	2301      	movs	r3, #1
 80109f6:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 80109f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80109fc:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 80109fe:	f107 0310 	add.w	r3, r7, #16
 8010a02:	220c      	movs	r2, #12
 8010a04:	4619      	mov	r1, r3
 8010a06:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010a08:	f002 f8e8 	bl	8012bdc <pbuf_take>
    hostname = entry->name;
 8010a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010a0e:	3310      	adds	r3, #16
 8010a10:	63bb      	str	r3, [r7, #56]	@ 0x38
    --hostname;
 8010a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a14:	3b01      	subs	r3, #1
 8010a16:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 8010a18:	230c      	movs	r3, #12
 8010a1a:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    do {
      ++hostname;
 8010a1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a1e:	3301      	adds	r3, #1
 8010a20:	63bb      	str	r3, [r7, #56]	@ 0x38
      hostname_part = hostname;
 8010a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a24:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8010a26:	2300      	movs	r3, #0
 8010a28:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8010a2c:	e007      	b.n	8010a3e <dns_send+0xe2>
        ++n;
 8010a2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010a32:	3301      	adds	r3, #1
 8010a34:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 8010a38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a3a:	3301      	adds	r3, #1
 8010a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a40:	781b      	ldrb	r3, [r3, #0]
 8010a42:	2b2e      	cmp	r3, #46	@ 0x2e
 8010a44:	d003      	beq.n	8010a4e <dns_send+0xf2>
 8010a46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a48:	781b      	ldrb	r3, [r3, #0]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d1ef      	bne.n	8010a2e <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 8010a4e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8010a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010a52:	1ad3      	subs	r3, r2, r3
 8010a54:	84fb      	strh	r3, [r7, #38]	@ 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 8010a56:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8010a58:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010a5c:	4413      	add	r3, r2
 8010a5e:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8010a62:	4293      	cmp	r3, r2
 8010a64:	dc53      	bgt.n	8010b0e <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 8010a66:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8010a6a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010a6c:	4619      	mov	r1, r3
 8010a6e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010a70:	f002 f9e2 	bl	8012e38 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 8010a74:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010a76:	3301      	adds	r3, #1
 8010a78:	b29b      	uxth	r3, r3
 8010a7a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8010a7c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8010a7e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010a80:	f002 f93e 	bl	8012d00 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 8010a84:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010a88:	b29a      	uxth	r2, r3
 8010a8a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010a8c:	4413      	add	r3, r2
 8010a8e:	b29b      	uxth	r3, r3
 8010a90:	3301      	adds	r3, #1
 8010a92:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    } while (*hostname != 0);
 8010a94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a96:	781b      	ldrb	r3, [r3, #0]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d1bf      	bne.n	8010a1c <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 8010a9c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010a9e:	2200      	movs	r2, #0
 8010aa0:	4619      	mov	r1, r3
 8010aa2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010aa4:	f002 f9c8 	bl	8012e38 <pbuf_put_at>
    query_idx++;
 8010aa8:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010aaa:	3301      	adds	r3, #1
 8010aac:	87bb      	strh	r3, [r7, #60]	@ 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 8010aae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010ab2:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 8010ab4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010ab8:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 8010aba:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8010abc:	f107 010c 	add.w	r1, r7, #12
 8010ac0:	2204      	movs	r2, #4
 8010ac2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010ac4:	f002 f91c 	bl	8012d00 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 8010ac8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010aca:	7bdb      	ldrb	r3, [r3, #15]
 8010acc:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 8010ad0:	2335      	movs	r3, #53	@ 0x35
 8010ad2:	847b      	strh	r3, [r7, #34]	@ 0x22
      dst = &dns_servers[entry->server_idx];
 8010ad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010ad6:	7adb      	ldrb	r3, [r3, #11]
 8010ad8:	009b      	lsls	r3, r3, #2
 8010ada:	4a16      	ldr	r2, [pc, #88]	@ (8010b34 <dns_send+0x1d8>)
 8010adc:	4413      	add	r3, r2
 8010ade:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 8010ae0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8010ae4:	4a14      	ldr	r2, [pc, #80]	@ (8010b38 <dns_send+0x1dc>)
 8010ae6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8010aea:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8010aec:	69fa      	ldr	r2, [r7, #28]
 8010aee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8010af0:	f007 fe58 	bl	80187a4 <udp_sendto>
 8010af4:	4603      	mov	r3, r0
 8010af6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

    /* free pbuf */
    pbuf_free(p);
 8010afa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010afc:	f001 fdba 	bl	8012674 <pbuf_free>
 8010b00:	e002      	b.n	8010b08 <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 8010b02:	23ff      	movs	r3, #255	@ 0xff
 8010b04:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }

  return err;
 8010b08:	f997 303f 	ldrsb.w	r3, [r7, #63]	@ 0x3f
 8010b0c:	e005      	b.n	8010b1a <dns_send+0x1be>
        goto overflow_return;
 8010b0e:	bf00      	nop
overflow_return:
  pbuf_free(p);
 8010b10:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010b12:	f001 fdaf 	bl	8012674 <pbuf_free>
  return ERR_VAL;
 8010b16:	f06f 0305 	mvn.w	r3, #5
}
 8010b1a:	4618      	mov	r0, r3
 8010b1c:	3740      	adds	r7, #64	@ 0x40
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	bd80      	pop	{r7, pc}
 8010b22:	bf00      	nop
 8010b24:	200172dc 	.word	0x200172dc
 8010b28:	08022180 	.word	0x08022180
 8010b2c:	080221b0 	.word	0x080221b0
 8010b30:	080221c8 	.word	0x080221c8
 8010b34:	2001774c 	.word	0x2001774c
 8010b38:	200172cc 	.word	0x200172cc

08010b3c <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 8010b3c:	b590      	push	{r4, r7, lr}
 8010b3e:	b085      	sub	sp, #20
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	4603      	mov	r3, r0
 8010b44:	6039      	str	r1, [r7, #0]
 8010b46:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8010b48:	2300      	movs	r3, #0
 8010b4a:	73fb      	strb	r3, [r7, #15]
 8010b4c:	e03d      	b.n	8010bca <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 8010b4e:	7bfa      	ldrb	r2, [r7, #15]
 8010b50:	4957      	ldr	r1, [pc, #348]	@ (8010cb0 <dns_call_found+0x174>)
 8010b52:	4613      	mov	r3, r2
 8010b54:	005b      	lsls	r3, r3, #1
 8010b56:	4413      	add	r3, r2
 8010b58:	009b      	lsls	r3, r3, #2
 8010b5a:	440b      	add	r3, r1
 8010b5c:	681b      	ldr	r3, [r3, #0]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d030      	beq.n	8010bc4 <dns_call_found+0x88>
 8010b62:	7bfa      	ldrb	r2, [r7, #15]
 8010b64:	4952      	ldr	r1, [pc, #328]	@ (8010cb0 <dns_call_found+0x174>)
 8010b66:	4613      	mov	r3, r2
 8010b68:	005b      	lsls	r3, r3, #1
 8010b6a:	4413      	add	r3, r2
 8010b6c:	009b      	lsls	r3, r3, #2
 8010b6e:	440b      	add	r3, r1
 8010b70:	3308      	adds	r3, #8
 8010b72:	781b      	ldrb	r3, [r3, #0]
 8010b74:	79fa      	ldrb	r2, [r7, #7]
 8010b76:	429a      	cmp	r2, r3
 8010b78:	d124      	bne.n	8010bc4 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 8010b7a:	7bfa      	ldrb	r2, [r7, #15]
 8010b7c:	494c      	ldr	r1, [pc, #304]	@ (8010cb0 <dns_call_found+0x174>)
 8010b7e:	4613      	mov	r3, r2
 8010b80:	005b      	lsls	r3, r3, #1
 8010b82:	4413      	add	r3, r2
 8010b84:	009b      	lsls	r3, r3, #2
 8010b86:	440b      	add	r3, r1
 8010b88:	681c      	ldr	r4, [r3, #0]
 8010b8a:	79fa      	ldrb	r2, [r7, #7]
 8010b8c:	4613      	mov	r3, r2
 8010b8e:	011b      	lsls	r3, r3, #4
 8010b90:	4413      	add	r3, r2
 8010b92:	011b      	lsls	r3, r3, #4
 8010b94:	3310      	adds	r3, #16
 8010b96:	4a47      	ldr	r2, [pc, #284]	@ (8010cb4 <dns_call_found+0x178>)
 8010b98:	1898      	adds	r0, r3, r2
 8010b9a:	7bfa      	ldrb	r2, [r7, #15]
 8010b9c:	4944      	ldr	r1, [pc, #272]	@ (8010cb0 <dns_call_found+0x174>)
 8010b9e:	4613      	mov	r3, r2
 8010ba0:	005b      	lsls	r3, r3, #1
 8010ba2:	4413      	add	r3, r2
 8010ba4:	009b      	lsls	r3, r3, #2
 8010ba6:	440b      	add	r3, r1
 8010ba8:	3304      	adds	r3, #4
 8010baa:	681b      	ldr	r3, [r3, #0]
 8010bac:	461a      	mov	r2, r3
 8010bae:	6839      	ldr	r1, [r7, #0]
 8010bb0:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 8010bb2:	7bfa      	ldrb	r2, [r7, #15]
 8010bb4:	493e      	ldr	r1, [pc, #248]	@ (8010cb0 <dns_call_found+0x174>)
 8010bb6:	4613      	mov	r3, r2
 8010bb8:	005b      	lsls	r3, r3, #1
 8010bba:	4413      	add	r3, r2
 8010bbc:	009b      	lsls	r3, r3, #2
 8010bbe:	440b      	add	r3, r1
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8010bc4:	7bfb      	ldrb	r3, [r7, #15]
 8010bc6:	3301      	adds	r3, #1
 8010bc8:	73fb      	strb	r3, [r7, #15]
 8010bca:	7bfb      	ldrb	r3, [r7, #15]
 8010bcc:	2b03      	cmp	r3, #3
 8010bce:	d9be      	bls.n	8010b4e <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8010bd0:	2300      	movs	r3, #0
 8010bd2:	73fb      	strb	r3, [r7, #15]
 8010bd4:	e031      	b.n	8010c3a <dns_call_found+0xfe>
    if (i == idx) {
 8010bd6:	7bfa      	ldrb	r2, [r7, #15]
 8010bd8:	79fb      	ldrb	r3, [r7, #7]
 8010bda:	429a      	cmp	r2, r3
 8010bdc:	d029      	beq.n	8010c32 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 8010bde:	7bfa      	ldrb	r2, [r7, #15]
 8010be0:	4934      	ldr	r1, [pc, #208]	@ (8010cb4 <dns_call_found+0x178>)
 8010be2:	4613      	mov	r3, r2
 8010be4:	011b      	lsls	r3, r3, #4
 8010be6:	4413      	add	r3, r2
 8010be8:	011b      	lsls	r3, r3, #4
 8010bea:	440b      	add	r3, r1
 8010bec:	330a      	adds	r3, #10
 8010bee:	781b      	ldrb	r3, [r3, #0]
 8010bf0:	2b02      	cmp	r3, #2
 8010bf2:	d11f      	bne.n	8010c34 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 8010bf4:	7bfa      	ldrb	r2, [r7, #15]
 8010bf6:	492f      	ldr	r1, [pc, #188]	@ (8010cb4 <dns_call_found+0x178>)
 8010bf8:	4613      	mov	r3, r2
 8010bfa:	011b      	lsls	r3, r3, #4
 8010bfc:	4413      	add	r3, r2
 8010bfe:	011b      	lsls	r3, r3, #4
 8010c00:	440b      	add	r3, r1
 8010c02:	330f      	adds	r3, #15
 8010c04:	7819      	ldrb	r1, [r3, #0]
 8010c06:	79fa      	ldrb	r2, [r7, #7]
 8010c08:	482a      	ldr	r0, [pc, #168]	@ (8010cb4 <dns_call_found+0x178>)
 8010c0a:	4613      	mov	r3, r2
 8010c0c:	011b      	lsls	r3, r3, #4
 8010c0e:	4413      	add	r3, r2
 8010c10:	011b      	lsls	r3, r3, #4
 8010c12:	4403      	add	r3, r0
 8010c14:	330f      	adds	r3, #15
 8010c16:	781b      	ldrb	r3, [r3, #0]
 8010c18:	4299      	cmp	r1, r3
 8010c1a:	d10b      	bne.n	8010c34 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8010c1c:	79fa      	ldrb	r2, [r7, #7]
 8010c1e:	4925      	ldr	r1, [pc, #148]	@ (8010cb4 <dns_call_found+0x178>)
 8010c20:	4613      	mov	r3, r2
 8010c22:	011b      	lsls	r3, r3, #4
 8010c24:	4413      	add	r3, r2
 8010c26:	011b      	lsls	r3, r3, #4
 8010c28:	440b      	add	r3, r1
 8010c2a:	330f      	adds	r3, #15
 8010c2c:	2204      	movs	r2, #4
 8010c2e:	701a      	strb	r2, [r3, #0]
        break;
 8010c30:	e006      	b.n	8010c40 <dns_call_found+0x104>
      continue; /* only check other requests */
 8010c32:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 8010c34:	7bfb      	ldrb	r3, [r7, #15]
 8010c36:	3301      	adds	r3, #1
 8010c38:	73fb      	strb	r3, [r7, #15]
 8010c3a:	7bfb      	ldrb	r3, [r7, #15]
 8010c3c:	2b03      	cmp	r3, #3
 8010c3e:	d9ca      	bls.n	8010bd6 <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 8010c40:	79fa      	ldrb	r2, [r7, #7]
 8010c42:	491c      	ldr	r1, [pc, #112]	@ (8010cb4 <dns_call_found+0x178>)
 8010c44:	4613      	mov	r3, r2
 8010c46:	011b      	lsls	r3, r3, #4
 8010c48:	4413      	add	r3, r2
 8010c4a:	011b      	lsls	r3, r3, #4
 8010c4c:	440b      	add	r3, r1
 8010c4e:	330f      	adds	r3, #15
 8010c50:	781b      	ldrb	r3, [r3, #0]
 8010c52:	2b03      	cmp	r3, #3
 8010c54:	d827      	bhi.n	8010ca6 <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 8010c56:	79fa      	ldrb	r2, [r7, #7]
 8010c58:	4916      	ldr	r1, [pc, #88]	@ (8010cb4 <dns_call_found+0x178>)
 8010c5a:	4613      	mov	r3, r2
 8010c5c:	011b      	lsls	r3, r3, #4
 8010c5e:	4413      	add	r3, r2
 8010c60:	011b      	lsls	r3, r3, #4
 8010c62:	440b      	add	r3, r1
 8010c64:	330f      	adds	r3, #15
 8010c66:	781b      	ldrb	r3, [r3, #0]
 8010c68:	461a      	mov	r2, r3
 8010c6a:	4b13      	ldr	r3, [pc, #76]	@ (8010cb8 <dns_call_found+0x17c>)
 8010c6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010c70:	4618      	mov	r0, r3
 8010c72:	f008 f863 	bl	8018d3c <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 8010c76:	79fa      	ldrb	r2, [r7, #7]
 8010c78:	490e      	ldr	r1, [pc, #56]	@ (8010cb4 <dns_call_found+0x178>)
 8010c7a:	4613      	mov	r3, r2
 8010c7c:	011b      	lsls	r3, r3, #4
 8010c7e:	4413      	add	r3, r2
 8010c80:	011b      	lsls	r3, r3, #4
 8010c82:	440b      	add	r3, r1
 8010c84:	330f      	adds	r3, #15
 8010c86:	781b      	ldrb	r3, [r3, #0]
 8010c88:	4619      	mov	r1, r3
 8010c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8010cb8 <dns_call_found+0x17c>)
 8010c8c:	2200      	movs	r2, #0
 8010c8e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 8010c92:	79fa      	ldrb	r2, [r7, #7]
 8010c94:	4907      	ldr	r1, [pc, #28]	@ (8010cb4 <dns_call_found+0x178>)
 8010c96:	4613      	mov	r3, r2
 8010c98:	011b      	lsls	r3, r3, #4
 8010c9a:	4413      	add	r3, r2
 8010c9c:	011b      	lsls	r3, r3, #4
 8010c9e:	440b      	add	r3, r1
 8010ca0:	330f      	adds	r3, #15
 8010ca2:	2204      	movs	r2, #4
 8010ca4:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 8010ca6:	bf00      	nop
 8010ca8:	3714      	adds	r7, #20
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd90      	pop	{r4, r7, pc}
 8010cae:	bf00      	nop
 8010cb0:	2001771c 	.word	0x2001771c
 8010cb4:	200172dc 	.word	0x200172dc
 8010cb8:	200172cc 	.word	0x200172cc

08010cbc <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 8010cbc:	b580      	push	{r7, lr}
 8010cbe:	b082      	sub	sp, #8
 8010cc0:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 8010cc2:	f00c fc3d 	bl	801d540 <rand>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8010cca:	2300      	movs	r3, #0
 8010ccc:	71fb      	strb	r3, [r7, #7]
 8010cce:	e01a      	b.n	8010d06 <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8010cd0:	79fa      	ldrb	r2, [r7, #7]
 8010cd2:	4911      	ldr	r1, [pc, #68]	@ (8010d18 <dns_create_txid+0x5c>)
 8010cd4:	4613      	mov	r3, r2
 8010cd6:	011b      	lsls	r3, r3, #4
 8010cd8:	4413      	add	r3, r2
 8010cda:	011b      	lsls	r3, r3, #4
 8010cdc:	440b      	add	r3, r1
 8010cde:	330a      	adds	r3, #10
 8010ce0:	781b      	ldrb	r3, [r3, #0]
 8010ce2:	2b02      	cmp	r3, #2
 8010ce4:	d10c      	bne.n	8010d00 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 8010ce6:	79fa      	ldrb	r2, [r7, #7]
 8010ce8:	490b      	ldr	r1, [pc, #44]	@ (8010d18 <dns_create_txid+0x5c>)
 8010cea:	4613      	mov	r3, r2
 8010cec:	011b      	lsls	r3, r3, #4
 8010cee:	4413      	add	r3, r2
 8010cf0:	011b      	lsls	r3, r3, #4
 8010cf2:	440b      	add	r3, r1
 8010cf4:	3308      	adds	r3, #8
 8010cf6:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 8010cf8:	88ba      	ldrh	r2, [r7, #4]
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d100      	bne.n	8010d00 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 8010cfe:	e7e0      	b.n	8010cc2 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 8010d00:	79fb      	ldrb	r3, [r7, #7]
 8010d02:	3301      	adds	r3, #1
 8010d04:	71fb      	strb	r3, [r7, #7]
 8010d06:	79fb      	ldrb	r3, [r7, #7]
 8010d08:	2b03      	cmp	r3, #3
 8010d0a:	d9e1      	bls.n	8010cd0 <dns_create_txid+0x14>
    }
  }

  return txid;
 8010d0c:	88bb      	ldrh	r3, [r7, #4]
}
 8010d0e:	4618      	mov	r0, r3
 8010d10:	3708      	adds	r7, #8
 8010d12:	46bd      	mov	sp, r7
 8010d14:	bd80      	pop	{r7, pc}
 8010d16:	bf00      	nop
 8010d18:	200172dc 	.word	0x200172dc

08010d1c <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 8010d1c:	b480      	push	{r7}
 8010d1e:	b085      	sub	sp, #20
 8010d20:	af00      	add	r7, sp, #0
 8010d22:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 8010d24:	2300      	movs	r3, #0
 8010d26:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d00d      	beq.n	8010d4a <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	7adb      	ldrb	r3, [r3, #11]
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d109      	bne.n	8010d4a <dns_backupserver_available+0x2e>
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	7adb      	ldrb	r3, [r3, #11]
 8010d3a:	3301      	adds	r3, #1
 8010d3c:	4a06      	ldr	r2, [pc, #24]	@ (8010d58 <dns_backupserver_available+0x3c>)
 8010d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d001      	beq.n	8010d4a <dns_backupserver_available+0x2e>
      ret = 1;
 8010d46:	2301      	movs	r3, #1
 8010d48:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8010d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3714      	adds	r7, #20
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr
 8010d58:	2001774c 	.word	0x2001774c

08010d5c <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b084      	sub	sp, #16
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	4603      	mov	r3, r0
 8010d64:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 8010d66:	79fa      	ldrb	r2, [r7, #7]
 8010d68:	4613      	mov	r3, r2
 8010d6a:	011b      	lsls	r3, r3, #4
 8010d6c:	4413      	add	r3, r2
 8010d6e:	011b      	lsls	r3, r3, #4
 8010d70:	4a48      	ldr	r2, [pc, #288]	@ (8010e94 <dns_check_entry+0x138>)
 8010d72:	4413      	add	r3, r2
 8010d74:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 8010d76:	79fb      	ldrb	r3, [r7, #7]
 8010d78:	2b03      	cmp	r3, #3
 8010d7a:	d906      	bls.n	8010d8a <dns_check_entry+0x2e>
 8010d7c:	4b46      	ldr	r3, [pc, #280]	@ (8010e98 <dns_check_entry+0x13c>)
 8010d7e:	f240 421c 	movw	r2, #1052	@ 0x41c
 8010d82:	4946      	ldr	r1, [pc, #280]	@ (8010e9c <dns_check_entry+0x140>)
 8010d84:	4846      	ldr	r0, [pc, #280]	@ (8010ea0 <dns_check_entry+0x144>)
 8010d86:	f00d fcbb 	bl	801e700 <iprintf>

  switch (entry->state) {
 8010d8a:	68fb      	ldr	r3, [r7, #12]
 8010d8c:	7a9b      	ldrb	r3, [r3, #10]
 8010d8e:	2b03      	cmp	r3, #3
 8010d90:	d86f      	bhi.n	8010e72 <dns_check_entry+0x116>
 8010d92:	a201      	add	r2, pc, #4	@ (adr r2, 8010d98 <dns_check_entry+0x3c>)
 8010d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d98:	08010e83 	.word	0x08010e83
 8010d9c:	08010da9 	.word	0x08010da9
 8010da0:	08010ddb 	.word	0x08010ddb
 8010da4:	08010e51 	.word	0x08010e51
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 8010da8:	f7ff ff88 	bl	8010cbc <dns_create_txid>
 8010dac:	4603      	mov	r3, r0
 8010dae:	461a      	mov	r2, r3
 8010db0:	68fb      	ldr	r3, [r7, #12]
 8010db2:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	2202      	movs	r2, #2
 8010db8:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 8010dc0:	68fb      	ldr	r3, [r7, #12]
 8010dc2:	2201      	movs	r2, #1
 8010dc4:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
 8010dc8:	2200      	movs	r2, #0
 8010dca:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 8010dcc:	79fb      	ldrb	r3, [r7, #7]
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7ff fdc4 	bl	801095c <dns_send>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 8010dd8:	e058      	b.n	8010e8c <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	7b1b      	ldrb	r3, [r3, #12]
 8010dde:	3b01      	subs	r3, #1
 8010de0:	b2da      	uxtb	r2, r3
 8010de2:	68fb      	ldr	r3, [r7, #12]
 8010de4:	731a      	strb	r2, [r3, #12]
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	7b1b      	ldrb	r3, [r3, #12]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d14b      	bne.n	8010e86 <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	7b5b      	ldrb	r3, [r3, #13]
 8010df2:	3301      	adds	r3, #1
 8010df4:	b2da      	uxtb	r2, r3
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	735a      	strb	r2, [r3, #13]
 8010dfa:	68fb      	ldr	r3, [r7, #12]
 8010dfc:	7b5b      	ldrb	r3, [r3, #13]
 8010dfe:	2b04      	cmp	r3, #4
 8010e00:	d11b      	bne.n	8010e3a <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 8010e02:	68f8      	ldr	r0, [r7, #12]
 8010e04:	f7ff ff8a 	bl	8010d1c <dns_backupserver_available>
 8010e08:	4603      	mov	r3, r0
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d00c      	beq.n	8010e28 <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	7adb      	ldrb	r3, [r3, #11]
 8010e12:	3301      	adds	r3, #1
 8010e14:	b2da      	uxtb	r2, r3
 8010e16:	68fb      	ldr	r3, [r7, #12]
 8010e18:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	2201      	movs	r2, #1
 8010e1e:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 8010e20:	68fb      	ldr	r3, [r7, #12]
 8010e22:	2200      	movs	r2, #0
 8010e24:	735a      	strb	r2, [r3, #13]
 8010e26:	e00c      	b.n	8010e42 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 8010e28:	79fb      	ldrb	r3, [r7, #7]
 8010e2a:	2100      	movs	r1, #0
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	f7ff fe85 	bl	8010b3c <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2200      	movs	r2, #0
 8010e36:	729a      	strb	r2, [r3, #10]
            break;
 8010e38:	e028      	b.n	8010e8c <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 8010e3a:	68fb      	ldr	r3, [r7, #12]
 8010e3c:	7b5a      	ldrb	r2, [r3, #13]
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 8010e42:	79fb      	ldrb	r3, [r7, #7]
 8010e44:	4618      	mov	r0, r3
 8010e46:	f7ff fd89 	bl	801095c <dns_send>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 8010e4e:	e01a      	b.n	8010e86 <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 8010e50:	68fb      	ldr	r3, [r7, #12]
 8010e52:	681b      	ldr	r3, [r3, #0]
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d008      	beq.n	8010e6a <dns_check_entry+0x10e>
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	1e5a      	subs	r2, r3, #1
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	601a      	str	r2, [r3, #0]
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	2b00      	cmp	r3, #0
 8010e68:	d10f      	bne.n	8010e8a <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 8010e6a:	68fb      	ldr	r3, [r7, #12]
 8010e6c:	2200      	movs	r2, #0
 8010e6e:	729a      	strb	r2, [r3, #10]
      }
      break;
 8010e70:	e00b      	b.n	8010e8a <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 8010e72:	4b09      	ldr	r3, [pc, #36]	@ (8010e98 <dns_check_entry+0x13c>)
 8010e74:	f240 425b 	movw	r2, #1115	@ 0x45b
 8010e78:	490a      	ldr	r1, [pc, #40]	@ (8010ea4 <dns_check_entry+0x148>)
 8010e7a:	4809      	ldr	r0, [pc, #36]	@ (8010ea0 <dns_check_entry+0x144>)
 8010e7c:	f00d fc40 	bl	801e700 <iprintf>
      break;
 8010e80:	e004      	b.n	8010e8c <dns_check_entry+0x130>
      break;
 8010e82:	bf00      	nop
 8010e84:	e002      	b.n	8010e8c <dns_check_entry+0x130>
      break;
 8010e86:	bf00      	nop
 8010e88:	e000      	b.n	8010e8c <dns_check_entry+0x130>
      break;
 8010e8a:	bf00      	nop
  }
}
 8010e8c:	bf00      	nop
 8010e8e:	3710      	adds	r7, #16
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}
 8010e94:	200172dc 	.word	0x200172dc
 8010e98:	08022180 	.word	0x08022180
 8010e9c:	080221f0 	.word	0x080221f0
 8010ea0:	080221c8 	.word	0x080221c8
 8010ea4:	0802220c 	.word	0x0802220c

08010ea8 <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 8010ea8:	b580      	push	{r7, lr}
 8010eaa:	b082      	sub	sp, #8
 8010eac:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8010eae:	2300      	movs	r3, #0
 8010eb0:	71fb      	strb	r3, [r7, #7]
 8010eb2:	e006      	b.n	8010ec2 <dns_check_entries+0x1a>
    dns_check_entry(i);
 8010eb4:	79fb      	ldrb	r3, [r7, #7]
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	f7ff ff50 	bl	8010d5c <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 8010ebc:	79fb      	ldrb	r3, [r7, #7]
 8010ebe:	3301      	adds	r3, #1
 8010ec0:	71fb      	strb	r3, [r7, #7]
 8010ec2:	79fb      	ldrb	r3, [r7, #7]
 8010ec4:	2b03      	cmp	r3, #3
 8010ec6:	d9f5      	bls.n	8010eb4 <dns_check_entries+0xc>
  }
}
 8010ec8:	bf00      	nop
 8010eca:	bf00      	nop
 8010ecc:	3708      	adds	r7, #8
 8010ece:	46bd      	mov	sp, r7
 8010ed0:	bd80      	pop	{r7, pc}

08010ed2 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010ed2:	b580      	push	{r7, lr}
 8010ed4:	b082      	sub	sp, #8
 8010ed6:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010ed8:	2300      	movs	r3, #0
 8010eda:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8010edc:	f00c f9f2 	bl	801d2c4 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010ee0:	f000 f8d6 	bl	8011090 <mem_init>
  memp_init();
 8010ee4:	f000 fc32 	bl	801174c <memp_init>
  pbuf_init();
  netif_init();
 8010ee8:	f000 fd3e 	bl	8011968 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8010eec:	f007 fa98 	bl	8018420 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010ef0:	f001 ffc4 	bl	8012e7c <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 8010ef4:	f7ff fd00 	bl	80108f8 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8010ef8:	f007 f9d8 	bl	80182ac <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010efc:	bf00      	nop
 8010efe:	3708      	adds	r7, #8
 8010f00:	46bd      	mov	sp, r7
 8010f02:	bd80      	pop	{r7, pc}

08010f04 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8010f04:	b480      	push	{r7}
 8010f06:	b083      	sub	sp, #12
 8010f08:	af00      	add	r7, sp, #0
 8010f0a:	4603      	mov	r3, r0
 8010f0c:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8010f0e:	4b05      	ldr	r3, [pc, #20]	@ (8010f24 <ptr_to_mem+0x20>)
 8010f10:	681a      	ldr	r2, [r3, #0]
 8010f12:	88fb      	ldrh	r3, [r7, #6]
 8010f14:	4413      	add	r3, r2
}
 8010f16:	4618      	mov	r0, r3
 8010f18:	370c      	adds	r7, #12
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f20:	4770      	bx	lr
 8010f22:	bf00      	nop
 8010f24:	20017dc0 	.word	0x20017dc0

08010f28 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8010f28:	b480      	push	{r7}
 8010f2a:	b083      	sub	sp, #12
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8010f30:	4b05      	ldr	r3, [pc, #20]	@ (8010f48 <mem_to_ptr+0x20>)
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	687a      	ldr	r2, [r7, #4]
 8010f36:	1ad3      	subs	r3, r2, r3
 8010f38:	b29b      	uxth	r3, r3
}
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	370c      	adds	r7, #12
 8010f3e:	46bd      	mov	sp, r7
 8010f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f44:	4770      	bx	lr
 8010f46:	bf00      	nop
 8010f48:	20017dc0 	.word	0x20017dc0

08010f4c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010f4c:	b590      	push	{r4, r7, lr}
 8010f4e:	b085      	sub	sp, #20
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010f54:	4b45      	ldr	r3, [pc, #276]	@ (801106c <plug_holes+0x120>)
 8010f56:	681b      	ldr	r3, [r3, #0]
 8010f58:	687a      	ldr	r2, [r7, #4]
 8010f5a:	429a      	cmp	r2, r3
 8010f5c:	d206      	bcs.n	8010f6c <plug_holes+0x20>
 8010f5e:	4b44      	ldr	r3, [pc, #272]	@ (8011070 <plug_holes+0x124>)
 8010f60:	f240 12df 	movw	r2, #479	@ 0x1df
 8010f64:	4943      	ldr	r1, [pc, #268]	@ (8011074 <plug_holes+0x128>)
 8010f66:	4844      	ldr	r0, [pc, #272]	@ (8011078 <plug_holes+0x12c>)
 8010f68:	f00d fbca 	bl	801e700 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010f6c:	4b43      	ldr	r3, [pc, #268]	@ (801107c <plug_holes+0x130>)
 8010f6e:	681b      	ldr	r3, [r3, #0]
 8010f70:	687a      	ldr	r2, [r7, #4]
 8010f72:	429a      	cmp	r2, r3
 8010f74:	d306      	bcc.n	8010f84 <plug_holes+0x38>
 8010f76:	4b3e      	ldr	r3, [pc, #248]	@ (8011070 <plug_holes+0x124>)
 8010f78:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8010f7c:	4940      	ldr	r1, [pc, #256]	@ (8011080 <plug_holes+0x134>)
 8010f7e:	483e      	ldr	r0, [pc, #248]	@ (8011078 <plug_holes+0x12c>)
 8010f80:	f00d fbbe 	bl	801e700 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	791b      	ldrb	r3, [r3, #4]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d006      	beq.n	8010f9a <plug_holes+0x4e>
 8010f8c:	4b38      	ldr	r3, [pc, #224]	@ (8011070 <plug_holes+0x124>)
 8010f8e:	f240 12e1 	movw	r2, #481	@ 0x1e1
 8010f92:	493c      	ldr	r1, [pc, #240]	@ (8011084 <plug_holes+0x138>)
 8010f94:	4838      	ldr	r0, [pc, #224]	@ (8011078 <plug_holes+0x12c>)
 8010f96:	f00d fbb3 	bl	801e700 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	881b      	ldrh	r3, [r3, #0]
 8010f9e:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010fa2:	d906      	bls.n	8010fb2 <plug_holes+0x66>
 8010fa4:	4b32      	ldr	r3, [pc, #200]	@ (8011070 <plug_holes+0x124>)
 8010fa6:	f44f 72f2 	mov.w	r2, #484	@ 0x1e4
 8010faa:	4937      	ldr	r1, [pc, #220]	@ (8011088 <plug_holes+0x13c>)
 8010fac:	4832      	ldr	r0, [pc, #200]	@ (8011078 <plug_holes+0x12c>)
 8010fae:	f00d fba7 	bl	801e700 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	881b      	ldrh	r3, [r3, #0]
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f7ff ffa4 	bl	8010f04 <ptr_to_mem>
 8010fbc:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8010fbe:	687a      	ldr	r2, [r7, #4]
 8010fc0:	68fb      	ldr	r3, [r7, #12]
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	d024      	beq.n	8011010 <plug_holes+0xc4>
 8010fc6:	68fb      	ldr	r3, [r7, #12]
 8010fc8:	791b      	ldrb	r3, [r3, #4]
 8010fca:	2b00      	cmp	r3, #0
 8010fcc:	d120      	bne.n	8011010 <plug_holes+0xc4>
 8010fce:	4b2b      	ldr	r3, [pc, #172]	@ (801107c <plug_holes+0x130>)
 8010fd0:	681b      	ldr	r3, [r3, #0]
 8010fd2:	68fa      	ldr	r2, [r7, #12]
 8010fd4:	429a      	cmp	r2, r3
 8010fd6:	d01b      	beq.n	8011010 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010fd8:	4b2c      	ldr	r3, [pc, #176]	@ (801108c <plug_holes+0x140>)
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	68fa      	ldr	r2, [r7, #12]
 8010fde:	429a      	cmp	r2, r3
 8010fe0:	d102      	bne.n	8010fe8 <plug_holes+0x9c>
      lfree = mem;
 8010fe2:	4a2a      	ldr	r2, [pc, #168]	@ (801108c <plug_holes+0x140>)
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	881a      	ldrh	r2, [r3, #0]
 8010fec:	687b      	ldr	r3, [r7, #4]
 8010fee:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010ff0:	68fb      	ldr	r3, [r7, #12]
 8010ff2:	881b      	ldrh	r3, [r3, #0]
 8010ff4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8010ff8:	d00a      	beq.n	8011010 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8010ffa:	68fb      	ldr	r3, [r7, #12]
 8010ffc:	881b      	ldrh	r3, [r3, #0]
 8010ffe:	4618      	mov	r0, r3
 8011000:	f7ff ff80 	bl	8010f04 <ptr_to_mem>
 8011004:	4604      	mov	r4, r0
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f7ff ff8e 	bl	8010f28 <mem_to_ptr>
 801100c:	4603      	mov	r3, r0
 801100e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	885b      	ldrh	r3, [r3, #2]
 8011014:	4618      	mov	r0, r3
 8011016:	f7ff ff75 	bl	8010f04 <ptr_to_mem>
 801101a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801101c:	68ba      	ldr	r2, [r7, #8]
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	429a      	cmp	r2, r3
 8011022:	d01f      	beq.n	8011064 <plug_holes+0x118>
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	791b      	ldrb	r3, [r3, #4]
 8011028:	2b00      	cmp	r3, #0
 801102a:	d11b      	bne.n	8011064 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801102c:	4b17      	ldr	r3, [pc, #92]	@ (801108c <plug_holes+0x140>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	687a      	ldr	r2, [r7, #4]
 8011032:	429a      	cmp	r2, r3
 8011034:	d102      	bne.n	801103c <plug_holes+0xf0>
      lfree = pmem;
 8011036:	4a15      	ldr	r2, [pc, #84]	@ (801108c <plug_holes+0x140>)
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	881a      	ldrh	r2, [r3, #0]
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011044:	687b      	ldr	r3, [r7, #4]
 8011046:	881b      	ldrh	r3, [r3, #0]
 8011048:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801104c:	d00a      	beq.n	8011064 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	881b      	ldrh	r3, [r3, #0]
 8011052:	4618      	mov	r0, r3
 8011054:	f7ff ff56 	bl	8010f04 <ptr_to_mem>
 8011058:	4604      	mov	r4, r0
 801105a:	68b8      	ldr	r0, [r7, #8]
 801105c:	f7ff ff64 	bl	8010f28 <mem_to_ptr>
 8011060:	4603      	mov	r3, r0
 8011062:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011064:	bf00      	nop
 8011066:	3714      	adds	r7, #20
 8011068:	46bd      	mov	sp, r7
 801106a:	bd90      	pop	{r4, r7, pc}
 801106c:	20017dc0 	.word	0x20017dc0
 8011070:	0802222c 	.word	0x0802222c
 8011074:	0802225c 	.word	0x0802225c
 8011078:	08022274 	.word	0x08022274
 801107c:	20017dc4 	.word	0x20017dc4
 8011080:	0802229c 	.word	0x0802229c
 8011084:	080222b8 	.word	0x080222b8
 8011088:	080222d4 	.word	0x080222d4
 801108c:	20017dcc 	.word	0x20017dcc

08011090 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b082      	sub	sp, #8
 8011094:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8011096:	4b1f      	ldr	r3, [pc, #124]	@ (8011114 <mem_init+0x84>)
 8011098:	3303      	adds	r3, #3
 801109a:	f023 0303 	bic.w	r3, r3, #3
 801109e:	461a      	mov	r2, r3
 80110a0:	4b1d      	ldr	r3, [pc, #116]	@ (8011118 <mem_init+0x88>)
 80110a2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80110a4:	4b1c      	ldr	r3, [pc, #112]	@ (8011118 <mem_init+0x88>)
 80110a6:	681b      	ldr	r3, [r3, #0]
 80110a8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80110b0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80110b2:	687b      	ldr	r3, [r7, #4]
 80110b4:	2200      	movs	r2, #0
 80110b6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	2200      	movs	r2, #0
 80110bc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 80110be:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 80110c2:	f7ff ff1f 	bl	8010f04 <ptr_to_mem>
 80110c6:	4603      	mov	r3, r0
 80110c8:	4a14      	ldr	r2, [pc, #80]	@ (801111c <mem_init+0x8c>)
 80110ca:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80110cc:	4b13      	ldr	r3, [pc, #76]	@ (801111c <mem_init+0x8c>)
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	2201      	movs	r2, #1
 80110d2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80110d4:	4b11      	ldr	r3, [pc, #68]	@ (801111c <mem_init+0x8c>)
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80110dc:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80110de:	4b0f      	ldr	r3, [pc, #60]	@ (801111c <mem_init+0x8c>)
 80110e0:	681b      	ldr	r3, [r3, #0]
 80110e2:	f44f 62c8 	mov.w	r2, #1600	@ 0x640
 80110e6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80110e8:	4b0b      	ldr	r3, [pc, #44]	@ (8011118 <mem_init+0x88>)
 80110ea:	681b      	ldr	r3, [r3, #0]
 80110ec:	4a0c      	ldr	r2, [pc, #48]	@ (8011120 <mem_init+0x90>)
 80110ee:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80110f0:	480c      	ldr	r0, [pc, #48]	@ (8011124 <mem_init+0x94>)
 80110f2:	f00c f8f3 	bl	801d2dc <sys_mutex_new>
 80110f6:	4603      	mov	r3, r0
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d006      	beq.n	801110a <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80110fc:	4b0a      	ldr	r3, [pc, #40]	@ (8011128 <mem_init+0x98>)
 80110fe:	f240 221f 	movw	r2, #543	@ 0x21f
 8011102:	490a      	ldr	r1, [pc, #40]	@ (801112c <mem_init+0x9c>)
 8011104:	480a      	ldr	r0, [pc, #40]	@ (8011130 <mem_init+0xa0>)
 8011106:	f00d fafb 	bl	801e700 <iprintf>
  }
}
 801110a:	bf00      	nop
 801110c:	3708      	adds	r7, #8
 801110e:	46bd      	mov	sp, r7
 8011110:	bd80      	pop	{r7, pc}
 8011112:	bf00      	nop
 8011114:	2001776c 	.word	0x2001776c
 8011118:	20017dc0 	.word	0x20017dc0
 801111c:	20017dc4 	.word	0x20017dc4
 8011120:	20017dcc 	.word	0x20017dcc
 8011124:	20017dc8 	.word	0x20017dc8
 8011128:	0802222c 	.word	0x0802222c
 801112c:	08022300 	.word	0x08022300
 8011130:	08022274 	.word	0x08022274

08011134 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011134:	b580      	push	{r7, lr}
 8011136:	b086      	sub	sp, #24
 8011138:	af00      	add	r7, sp, #0
 801113a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801113c:	6878      	ldr	r0, [r7, #4]
 801113e:	f7ff fef3 	bl	8010f28 <mem_to_ptr>
 8011142:	4603      	mov	r3, r0
 8011144:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	881b      	ldrh	r3, [r3, #0]
 801114a:	4618      	mov	r0, r3
 801114c:	f7ff feda 	bl	8010f04 <ptr_to_mem>
 8011150:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	885b      	ldrh	r3, [r3, #2]
 8011156:	4618      	mov	r0, r3
 8011158:	f7ff fed4 	bl	8010f04 <ptr_to_mem>
 801115c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	881b      	ldrh	r3, [r3, #0]
 8011162:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011166:	d818      	bhi.n	801119a <mem_link_valid+0x66>
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	885b      	ldrh	r3, [r3, #2]
 801116c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011170:	d813      	bhi.n	801119a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011176:	8afa      	ldrh	r2, [r7, #22]
 8011178:	429a      	cmp	r2, r3
 801117a:	d004      	beq.n	8011186 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801117c:	68fb      	ldr	r3, [r7, #12]
 801117e:	881b      	ldrh	r3, [r3, #0]
 8011180:	8afa      	ldrh	r2, [r7, #22]
 8011182:	429a      	cmp	r2, r3
 8011184:	d109      	bne.n	801119a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011186:	4b08      	ldr	r3, [pc, #32]	@ (80111a8 <mem_link_valid+0x74>)
 8011188:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801118a:	693a      	ldr	r2, [r7, #16]
 801118c:	429a      	cmp	r2, r3
 801118e:	d006      	beq.n	801119e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011190:	693b      	ldr	r3, [r7, #16]
 8011192:	885b      	ldrh	r3, [r3, #2]
 8011194:	8afa      	ldrh	r2, [r7, #22]
 8011196:	429a      	cmp	r2, r3
 8011198:	d001      	beq.n	801119e <mem_link_valid+0x6a>
    return 0;
 801119a:	2300      	movs	r3, #0
 801119c:	e000      	b.n	80111a0 <mem_link_valid+0x6c>
  }
  return 1;
 801119e:	2301      	movs	r3, #1
}
 80111a0:	4618      	mov	r0, r3
 80111a2:	3718      	adds	r7, #24
 80111a4:	46bd      	mov	sp, r7
 80111a6:	bd80      	pop	{r7, pc}
 80111a8:	20017dc4 	.word	0x20017dc4

080111ac <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80111ac:	b580      	push	{r7, lr}
 80111ae:	b088      	sub	sp, #32
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d070      	beq.n	801129c <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	f003 0303 	and.w	r3, r3, #3
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d00d      	beq.n	80111e0 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80111c4:	4b37      	ldr	r3, [pc, #220]	@ (80112a4 <mem_free+0xf8>)
 80111c6:	f240 2273 	movw	r2, #627	@ 0x273
 80111ca:	4937      	ldr	r1, [pc, #220]	@ (80112a8 <mem_free+0xfc>)
 80111cc:	4837      	ldr	r0, [pc, #220]	@ (80112ac <mem_free+0x100>)
 80111ce:	f00d fa97 	bl	801e700 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80111d2:	f00c f8d5 	bl	801d380 <sys_arch_protect>
 80111d6:	60f8      	str	r0, [r7, #12]
 80111d8:	68f8      	ldr	r0, [r7, #12]
 80111da:	f00c f8df 	bl	801d39c <sys_arch_unprotect>
    return;
 80111de:	e05e      	b.n	801129e <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	3b08      	subs	r3, #8
 80111e4:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80111e6:	4b32      	ldr	r3, [pc, #200]	@ (80112b0 <mem_free+0x104>)
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	69fa      	ldr	r2, [r7, #28]
 80111ec:	429a      	cmp	r2, r3
 80111ee:	d306      	bcc.n	80111fe <mem_free+0x52>
 80111f0:	687b      	ldr	r3, [r7, #4]
 80111f2:	f103 020c 	add.w	r2, r3, #12
 80111f6:	4b2f      	ldr	r3, [pc, #188]	@ (80112b4 <mem_free+0x108>)
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	429a      	cmp	r2, r3
 80111fc:	d90d      	bls.n	801121a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80111fe:	4b29      	ldr	r3, [pc, #164]	@ (80112a4 <mem_free+0xf8>)
 8011200:	f240 227f 	movw	r2, #639	@ 0x27f
 8011204:	492c      	ldr	r1, [pc, #176]	@ (80112b8 <mem_free+0x10c>)
 8011206:	4829      	ldr	r0, [pc, #164]	@ (80112ac <mem_free+0x100>)
 8011208:	f00d fa7a 	bl	801e700 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801120c:	f00c f8b8 	bl	801d380 <sys_arch_protect>
 8011210:	6138      	str	r0, [r7, #16]
 8011212:	6938      	ldr	r0, [r7, #16]
 8011214:	f00c f8c2 	bl	801d39c <sys_arch_unprotect>
    return;
 8011218:	e041      	b.n	801129e <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801121a:	4828      	ldr	r0, [pc, #160]	@ (80112bc <mem_free+0x110>)
 801121c:	f00c f874 	bl	801d308 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011220:	69fb      	ldr	r3, [r7, #28]
 8011222:	791b      	ldrb	r3, [r3, #4]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d110      	bne.n	801124a <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011228:	4b1e      	ldr	r3, [pc, #120]	@ (80112a4 <mem_free+0xf8>)
 801122a:	f44f 7223 	mov.w	r2, #652	@ 0x28c
 801122e:	4924      	ldr	r1, [pc, #144]	@ (80112c0 <mem_free+0x114>)
 8011230:	481e      	ldr	r0, [pc, #120]	@ (80112ac <mem_free+0x100>)
 8011232:	f00d fa65 	bl	801e700 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011236:	4821      	ldr	r0, [pc, #132]	@ (80112bc <mem_free+0x110>)
 8011238:	f00c f875 	bl	801d326 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801123c:	f00c f8a0 	bl	801d380 <sys_arch_protect>
 8011240:	6178      	str	r0, [r7, #20]
 8011242:	6978      	ldr	r0, [r7, #20]
 8011244:	f00c f8aa 	bl	801d39c <sys_arch_unprotect>
    return;
 8011248:	e029      	b.n	801129e <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 801124a:	69f8      	ldr	r0, [r7, #28]
 801124c:	f7ff ff72 	bl	8011134 <mem_link_valid>
 8011250:	4603      	mov	r3, r0
 8011252:	2b00      	cmp	r3, #0
 8011254:	d110      	bne.n	8011278 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8011256:	4b13      	ldr	r3, [pc, #76]	@ (80112a4 <mem_free+0xf8>)
 8011258:	f240 2295 	movw	r2, #661	@ 0x295
 801125c:	4919      	ldr	r1, [pc, #100]	@ (80112c4 <mem_free+0x118>)
 801125e:	4813      	ldr	r0, [pc, #76]	@ (80112ac <mem_free+0x100>)
 8011260:	f00d fa4e 	bl	801e700 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011264:	4815      	ldr	r0, [pc, #84]	@ (80112bc <mem_free+0x110>)
 8011266:	f00c f85e 	bl	801d326 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801126a:	f00c f889 	bl	801d380 <sys_arch_protect>
 801126e:	61b8      	str	r0, [r7, #24]
 8011270:	69b8      	ldr	r0, [r7, #24]
 8011272:	f00c f893 	bl	801d39c <sys_arch_unprotect>
    return;
 8011276:	e012      	b.n	801129e <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011278:	69fb      	ldr	r3, [r7, #28]
 801127a:	2200      	movs	r2, #0
 801127c:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801127e:	4b12      	ldr	r3, [pc, #72]	@ (80112c8 <mem_free+0x11c>)
 8011280:	681b      	ldr	r3, [r3, #0]
 8011282:	69fa      	ldr	r2, [r7, #28]
 8011284:	429a      	cmp	r2, r3
 8011286:	d202      	bcs.n	801128e <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011288:	4a0f      	ldr	r2, [pc, #60]	@ (80112c8 <mem_free+0x11c>)
 801128a:	69fb      	ldr	r3, [r7, #28]
 801128c:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801128e:	69f8      	ldr	r0, [r7, #28]
 8011290:	f7ff fe5c 	bl	8010f4c <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011294:	4809      	ldr	r0, [pc, #36]	@ (80112bc <mem_free+0x110>)
 8011296:	f00c f846 	bl	801d326 <sys_mutex_unlock>
 801129a:	e000      	b.n	801129e <mem_free+0xf2>
    return;
 801129c:	bf00      	nop
}
 801129e:	3720      	adds	r7, #32
 80112a0:	46bd      	mov	sp, r7
 80112a2:	bd80      	pop	{r7, pc}
 80112a4:	0802222c 	.word	0x0802222c
 80112a8:	0802231c 	.word	0x0802231c
 80112ac:	08022274 	.word	0x08022274
 80112b0:	20017dc0 	.word	0x20017dc0
 80112b4:	20017dc4 	.word	0x20017dc4
 80112b8:	08022340 	.word	0x08022340
 80112bc:	20017dc8 	.word	0x20017dc8
 80112c0:	0802235c 	.word	0x0802235c
 80112c4:	08022384 	.word	0x08022384
 80112c8:	20017dcc 	.word	0x20017dcc

080112cc <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b088      	sub	sp, #32
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
 80112d4:	460b      	mov	r3, r1
 80112d6:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80112d8:	887b      	ldrh	r3, [r7, #2]
 80112da:	3303      	adds	r3, #3
 80112dc:	b29b      	uxth	r3, r3
 80112de:	f023 0303 	bic.w	r3, r3, #3
 80112e2:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80112e4:	8bfb      	ldrh	r3, [r7, #30]
 80112e6:	2b0b      	cmp	r3, #11
 80112e8:	d801      	bhi.n	80112ee <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80112ea:	230c      	movs	r3, #12
 80112ec:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80112ee:	8bfb      	ldrh	r3, [r7, #30]
 80112f0:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80112f4:	d803      	bhi.n	80112fe <mem_trim+0x32>
 80112f6:	8bfa      	ldrh	r2, [r7, #30]
 80112f8:	887b      	ldrh	r3, [r7, #2]
 80112fa:	429a      	cmp	r2, r3
 80112fc:	d201      	bcs.n	8011302 <mem_trim+0x36>
    return NULL;
 80112fe:	2300      	movs	r3, #0
 8011300:	e0d8      	b.n	80114b4 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011302:	4b6e      	ldr	r3, [pc, #440]	@ (80114bc <mem_trim+0x1f0>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	687a      	ldr	r2, [r7, #4]
 8011308:	429a      	cmp	r2, r3
 801130a:	d304      	bcc.n	8011316 <mem_trim+0x4a>
 801130c:	4b6c      	ldr	r3, [pc, #432]	@ (80114c0 <mem_trim+0x1f4>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	687a      	ldr	r2, [r7, #4]
 8011312:	429a      	cmp	r2, r3
 8011314:	d306      	bcc.n	8011324 <mem_trim+0x58>
 8011316:	4b6b      	ldr	r3, [pc, #428]	@ (80114c4 <mem_trim+0x1f8>)
 8011318:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801131c:	496a      	ldr	r1, [pc, #424]	@ (80114c8 <mem_trim+0x1fc>)
 801131e:	486b      	ldr	r0, [pc, #428]	@ (80114cc <mem_trim+0x200>)
 8011320:	f00d f9ee 	bl	801e700 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011324:	4b65      	ldr	r3, [pc, #404]	@ (80114bc <mem_trim+0x1f0>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	687a      	ldr	r2, [r7, #4]
 801132a:	429a      	cmp	r2, r3
 801132c:	d304      	bcc.n	8011338 <mem_trim+0x6c>
 801132e:	4b64      	ldr	r3, [pc, #400]	@ (80114c0 <mem_trim+0x1f4>)
 8011330:	681b      	ldr	r3, [r3, #0]
 8011332:	687a      	ldr	r2, [r7, #4]
 8011334:	429a      	cmp	r2, r3
 8011336:	d307      	bcc.n	8011348 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011338:	f00c f822 	bl	801d380 <sys_arch_protect>
 801133c:	60b8      	str	r0, [r7, #8]
 801133e:	68b8      	ldr	r0, [r7, #8]
 8011340:	f00c f82c 	bl	801d39c <sys_arch_unprotect>
    return rmem;
 8011344:	687b      	ldr	r3, [r7, #4]
 8011346:	e0b5      	b.n	80114b4 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	3b08      	subs	r3, #8
 801134c:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801134e:	69b8      	ldr	r0, [r7, #24]
 8011350:	f7ff fdea 	bl	8010f28 <mem_to_ptr>
 8011354:	4603      	mov	r3, r0
 8011356:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011358:	69bb      	ldr	r3, [r7, #24]
 801135a:	881a      	ldrh	r2, [r3, #0]
 801135c:	8afb      	ldrh	r3, [r7, #22]
 801135e:	1ad3      	subs	r3, r2, r3
 8011360:	b29b      	uxth	r3, r3
 8011362:	3b08      	subs	r3, #8
 8011364:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011366:	8bfa      	ldrh	r2, [r7, #30]
 8011368:	8abb      	ldrh	r3, [r7, #20]
 801136a:	429a      	cmp	r2, r3
 801136c:	d906      	bls.n	801137c <mem_trim+0xb0>
 801136e:	4b55      	ldr	r3, [pc, #340]	@ (80114c4 <mem_trim+0x1f8>)
 8011370:	f44f 7239 	mov.w	r2, #740	@ 0x2e4
 8011374:	4956      	ldr	r1, [pc, #344]	@ (80114d0 <mem_trim+0x204>)
 8011376:	4855      	ldr	r0, [pc, #340]	@ (80114cc <mem_trim+0x200>)
 8011378:	f00d f9c2 	bl	801e700 <iprintf>
  if (newsize > size) {
 801137c:	8bfa      	ldrh	r2, [r7, #30]
 801137e:	8abb      	ldrh	r3, [r7, #20]
 8011380:	429a      	cmp	r2, r3
 8011382:	d901      	bls.n	8011388 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8011384:	2300      	movs	r3, #0
 8011386:	e095      	b.n	80114b4 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011388:	8bfa      	ldrh	r2, [r7, #30]
 801138a:	8abb      	ldrh	r3, [r7, #20]
 801138c:	429a      	cmp	r2, r3
 801138e:	d101      	bne.n	8011394 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	e08f      	b.n	80114b4 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011394:	484f      	ldr	r0, [pc, #316]	@ (80114d4 <mem_trim+0x208>)
 8011396:	f00b ffb7 	bl	801d308 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 801139a:	69bb      	ldr	r3, [r7, #24]
 801139c:	881b      	ldrh	r3, [r3, #0]
 801139e:	4618      	mov	r0, r3
 80113a0:	f7ff fdb0 	bl	8010f04 <ptr_to_mem>
 80113a4:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 80113a6:	693b      	ldr	r3, [r7, #16]
 80113a8:	791b      	ldrb	r3, [r3, #4]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d13f      	bne.n	801142e <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80113ae:	69bb      	ldr	r3, [r7, #24]
 80113b0:	881b      	ldrh	r3, [r3, #0]
 80113b2:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80113b6:	d106      	bne.n	80113c6 <mem_trim+0xfa>
 80113b8:	4b42      	ldr	r3, [pc, #264]	@ (80114c4 <mem_trim+0x1f8>)
 80113ba:	f240 22f5 	movw	r2, #757	@ 0x2f5
 80113be:	4946      	ldr	r1, [pc, #280]	@ (80114d8 <mem_trim+0x20c>)
 80113c0:	4842      	ldr	r0, [pc, #264]	@ (80114cc <mem_trim+0x200>)
 80113c2:	f00d f99d 	bl	801e700 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 80113c6:	693b      	ldr	r3, [r7, #16]
 80113c8:	881b      	ldrh	r3, [r3, #0]
 80113ca:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80113cc:	8afa      	ldrh	r2, [r7, #22]
 80113ce:	8bfb      	ldrh	r3, [r7, #30]
 80113d0:	4413      	add	r3, r2
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	3308      	adds	r3, #8
 80113d6:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80113d8:	4b40      	ldr	r3, [pc, #256]	@ (80114dc <mem_trim+0x210>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	693a      	ldr	r2, [r7, #16]
 80113de:	429a      	cmp	r2, r3
 80113e0:	d106      	bne.n	80113f0 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80113e2:	89fb      	ldrh	r3, [r7, #14]
 80113e4:	4618      	mov	r0, r3
 80113e6:	f7ff fd8d 	bl	8010f04 <ptr_to_mem>
 80113ea:	4603      	mov	r3, r0
 80113ec:	4a3b      	ldr	r2, [pc, #236]	@ (80114dc <mem_trim+0x210>)
 80113ee:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80113f0:	89fb      	ldrh	r3, [r7, #14]
 80113f2:	4618      	mov	r0, r3
 80113f4:	f7ff fd86 	bl	8010f04 <ptr_to_mem>
 80113f8:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	2200      	movs	r2, #0
 80113fe:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8011400:	693b      	ldr	r3, [r7, #16]
 8011402:	89ba      	ldrh	r2, [r7, #12]
 8011404:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8011406:	693b      	ldr	r3, [r7, #16]
 8011408:	8afa      	ldrh	r2, [r7, #22]
 801140a:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801140c:	69bb      	ldr	r3, [r7, #24]
 801140e:	89fa      	ldrh	r2, [r7, #14]
 8011410:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	881b      	ldrh	r3, [r3, #0]
 8011416:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801141a:	d047      	beq.n	80114ac <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801141c:	693b      	ldr	r3, [r7, #16]
 801141e:	881b      	ldrh	r3, [r3, #0]
 8011420:	4618      	mov	r0, r3
 8011422:	f7ff fd6f 	bl	8010f04 <ptr_to_mem>
 8011426:	4602      	mov	r2, r0
 8011428:	89fb      	ldrh	r3, [r7, #14]
 801142a:	8053      	strh	r3, [r2, #2]
 801142c:	e03e      	b.n	80114ac <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801142e:	8bfb      	ldrh	r3, [r7, #30]
 8011430:	f103 0214 	add.w	r2, r3, #20
 8011434:	8abb      	ldrh	r3, [r7, #20]
 8011436:	429a      	cmp	r2, r3
 8011438:	d838      	bhi.n	80114ac <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801143a:	8afa      	ldrh	r2, [r7, #22]
 801143c:	8bfb      	ldrh	r3, [r7, #30]
 801143e:	4413      	add	r3, r2
 8011440:	b29b      	uxth	r3, r3
 8011442:	3308      	adds	r3, #8
 8011444:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011446:	69bb      	ldr	r3, [r7, #24]
 8011448:	881b      	ldrh	r3, [r3, #0]
 801144a:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801144e:	d106      	bne.n	801145e <mem_trim+0x192>
 8011450:	4b1c      	ldr	r3, [pc, #112]	@ (80114c4 <mem_trim+0x1f8>)
 8011452:	f240 3216 	movw	r2, #790	@ 0x316
 8011456:	4920      	ldr	r1, [pc, #128]	@ (80114d8 <mem_trim+0x20c>)
 8011458:	481c      	ldr	r0, [pc, #112]	@ (80114cc <mem_trim+0x200>)
 801145a:	f00d f951 	bl	801e700 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801145e:	89fb      	ldrh	r3, [r7, #14]
 8011460:	4618      	mov	r0, r3
 8011462:	f7ff fd4f 	bl	8010f04 <ptr_to_mem>
 8011466:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8011468:	4b1c      	ldr	r3, [pc, #112]	@ (80114dc <mem_trim+0x210>)
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	693a      	ldr	r2, [r7, #16]
 801146e:	429a      	cmp	r2, r3
 8011470:	d202      	bcs.n	8011478 <mem_trim+0x1ac>
      lfree = mem2;
 8011472:	4a1a      	ldr	r2, [pc, #104]	@ (80114dc <mem_trim+0x210>)
 8011474:	693b      	ldr	r3, [r7, #16]
 8011476:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8011478:	693b      	ldr	r3, [r7, #16]
 801147a:	2200      	movs	r2, #0
 801147c:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801147e:	69bb      	ldr	r3, [r7, #24]
 8011480:	881a      	ldrh	r2, [r3, #0]
 8011482:	693b      	ldr	r3, [r7, #16]
 8011484:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8011486:	693b      	ldr	r3, [r7, #16]
 8011488:	8afa      	ldrh	r2, [r7, #22]
 801148a:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801148c:	69bb      	ldr	r3, [r7, #24]
 801148e:	89fa      	ldrh	r2, [r7, #14]
 8011490:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8011492:	693b      	ldr	r3, [r7, #16]
 8011494:	881b      	ldrh	r3, [r3, #0]
 8011496:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 801149a:	d007      	beq.n	80114ac <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801149c:	693b      	ldr	r3, [r7, #16]
 801149e:	881b      	ldrh	r3, [r3, #0]
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7ff fd2f 	bl	8010f04 <ptr_to_mem>
 80114a6:	4602      	mov	r2, r0
 80114a8:	89fb      	ldrh	r3, [r7, #14]
 80114aa:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80114ac:	4809      	ldr	r0, [pc, #36]	@ (80114d4 <mem_trim+0x208>)
 80114ae:	f00b ff3a 	bl	801d326 <sys_mutex_unlock>
  return rmem;
 80114b2:	687b      	ldr	r3, [r7, #4]
}
 80114b4:	4618      	mov	r0, r3
 80114b6:	3720      	adds	r7, #32
 80114b8:	46bd      	mov	sp, r7
 80114ba:	bd80      	pop	{r7, pc}
 80114bc:	20017dc0 	.word	0x20017dc0
 80114c0:	20017dc4 	.word	0x20017dc4
 80114c4:	0802222c 	.word	0x0802222c
 80114c8:	080223b8 	.word	0x080223b8
 80114cc:	08022274 	.word	0x08022274
 80114d0:	080223d0 	.word	0x080223d0
 80114d4:	20017dc8 	.word	0x20017dc8
 80114d8:	080223f0 	.word	0x080223f0
 80114dc:	20017dcc 	.word	0x20017dcc

080114e0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b088      	sub	sp, #32
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	4603      	mov	r3, r0
 80114e8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80114ea:	88fb      	ldrh	r3, [r7, #6]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d101      	bne.n	80114f4 <mem_malloc+0x14>
    return NULL;
 80114f0:	2300      	movs	r3, #0
 80114f2:	e0e2      	b.n	80116ba <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80114f4:	88fb      	ldrh	r3, [r7, #6]
 80114f6:	3303      	adds	r3, #3
 80114f8:	b29b      	uxth	r3, r3
 80114fa:	f023 0303 	bic.w	r3, r3, #3
 80114fe:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8011500:	8bbb      	ldrh	r3, [r7, #28]
 8011502:	2b0b      	cmp	r3, #11
 8011504:	d801      	bhi.n	801150a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8011506:	230c      	movs	r3, #12
 8011508:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801150a:	8bbb      	ldrh	r3, [r7, #28]
 801150c:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011510:	d803      	bhi.n	801151a <mem_malloc+0x3a>
 8011512:	8bba      	ldrh	r2, [r7, #28]
 8011514:	88fb      	ldrh	r3, [r7, #6]
 8011516:	429a      	cmp	r2, r3
 8011518:	d201      	bcs.n	801151e <mem_malloc+0x3e>
    return NULL;
 801151a:	2300      	movs	r3, #0
 801151c:	e0cd      	b.n	80116ba <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 801151e:	4869      	ldr	r0, [pc, #420]	@ (80116c4 <mem_malloc+0x1e4>)
 8011520:	f00b fef2 	bl	801d308 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8011524:	4b68      	ldr	r3, [pc, #416]	@ (80116c8 <mem_malloc+0x1e8>)
 8011526:	681b      	ldr	r3, [r3, #0]
 8011528:	4618      	mov	r0, r3
 801152a:	f7ff fcfd 	bl	8010f28 <mem_to_ptr>
 801152e:	4603      	mov	r3, r0
 8011530:	83fb      	strh	r3, [r7, #30]
 8011532:	e0b7      	b.n	80116a4 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8011534:	8bfb      	ldrh	r3, [r7, #30]
 8011536:	4618      	mov	r0, r3
 8011538:	f7ff fce4 	bl	8010f04 <ptr_to_mem>
 801153c:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801153e:	697b      	ldr	r3, [r7, #20]
 8011540:	791b      	ldrb	r3, [r3, #4]
 8011542:	2b00      	cmp	r3, #0
 8011544:	f040 80a7 	bne.w	8011696 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8011548:	697b      	ldr	r3, [r7, #20]
 801154a:	881b      	ldrh	r3, [r3, #0]
 801154c:	461a      	mov	r2, r3
 801154e:	8bfb      	ldrh	r3, [r7, #30]
 8011550:	1ad3      	subs	r3, r2, r3
 8011552:	f1a3 0208 	sub.w	r2, r3, #8
 8011556:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8011558:	429a      	cmp	r2, r3
 801155a:	f0c0 809c 	bcc.w	8011696 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801155e:	697b      	ldr	r3, [r7, #20]
 8011560:	881b      	ldrh	r3, [r3, #0]
 8011562:	461a      	mov	r2, r3
 8011564:	8bfb      	ldrh	r3, [r7, #30]
 8011566:	1ad3      	subs	r3, r2, r3
 8011568:	f1a3 0208 	sub.w	r2, r3, #8
 801156c:	8bbb      	ldrh	r3, [r7, #28]
 801156e:	3314      	adds	r3, #20
 8011570:	429a      	cmp	r2, r3
 8011572:	d333      	bcc.n	80115dc <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8011574:	8bfa      	ldrh	r2, [r7, #30]
 8011576:	8bbb      	ldrh	r3, [r7, #28]
 8011578:	4413      	add	r3, r2
 801157a:	b29b      	uxth	r3, r3
 801157c:	3308      	adds	r3, #8
 801157e:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8011580:	8a7b      	ldrh	r3, [r7, #18]
 8011582:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 8011586:	d106      	bne.n	8011596 <mem_malloc+0xb6>
 8011588:	4b50      	ldr	r3, [pc, #320]	@ (80116cc <mem_malloc+0x1ec>)
 801158a:	f240 3287 	movw	r2, #903	@ 0x387
 801158e:	4950      	ldr	r1, [pc, #320]	@ (80116d0 <mem_malloc+0x1f0>)
 8011590:	4850      	ldr	r0, [pc, #320]	@ (80116d4 <mem_malloc+0x1f4>)
 8011592:	f00d f8b5 	bl	801e700 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8011596:	8a7b      	ldrh	r3, [r7, #18]
 8011598:	4618      	mov	r0, r3
 801159a:	f7ff fcb3 	bl	8010f04 <ptr_to_mem>
 801159e:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	2200      	movs	r2, #0
 80115a4:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	881a      	ldrh	r2, [r3, #0]
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	8bfa      	ldrh	r2, [r7, #30]
 80115b2:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	8a7a      	ldrh	r2, [r7, #18]
 80115b8:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80115ba:	697b      	ldr	r3, [r7, #20]
 80115bc:	2201      	movs	r2, #1
 80115be:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	881b      	ldrh	r3, [r3, #0]
 80115c4:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80115c8:	d00b      	beq.n	80115e2 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 80115ca:	68fb      	ldr	r3, [r7, #12]
 80115cc:	881b      	ldrh	r3, [r3, #0]
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7ff fc98 	bl	8010f04 <ptr_to_mem>
 80115d4:	4602      	mov	r2, r0
 80115d6:	8a7b      	ldrh	r3, [r7, #18]
 80115d8:	8053      	strh	r3, [r2, #2]
 80115da:	e002      	b.n	80115e2 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80115dc:	697b      	ldr	r3, [r7, #20]
 80115de:	2201      	movs	r2, #1
 80115e0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80115e2:	4b39      	ldr	r3, [pc, #228]	@ (80116c8 <mem_malloc+0x1e8>)
 80115e4:	681b      	ldr	r3, [r3, #0]
 80115e6:	697a      	ldr	r2, [r7, #20]
 80115e8:	429a      	cmp	r2, r3
 80115ea:	d127      	bne.n	801163c <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80115ec:	4b36      	ldr	r3, [pc, #216]	@ (80116c8 <mem_malloc+0x1e8>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80115f2:	e005      	b.n	8011600 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80115f4:	69bb      	ldr	r3, [r7, #24]
 80115f6:	881b      	ldrh	r3, [r3, #0]
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7ff fc83 	bl	8010f04 <ptr_to_mem>
 80115fe:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8011600:	69bb      	ldr	r3, [r7, #24]
 8011602:	791b      	ldrb	r3, [r3, #4]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d004      	beq.n	8011612 <mem_malloc+0x132>
 8011608:	4b33      	ldr	r3, [pc, #204]	@ (80116d8 <mem_malloc+0x1f8>)
 801160a:	681b      	ldr	r3, [r3, #0]
 801160c:	69ba      	ldr	r2, [r7, #24]
 801160e:	429a      	cmp	r2, r3
 8011610:	d1f0      	bne.n	80115f4 <mem_malloc+0x114>
          }
          lfree = cur;
 8011612:	4a2d      	ldr	r2, [pc, #180]	@ (80116c8 <mem_malloc+0x1e8>)
 8011614:	69bb      	ldr	r3, [r7, #24]
 8011616:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8011618:	4b2b      	ldr	r3, [pc, #172]	@ (80116c8 <mem_malloc+0x1e8>)
 801161a:	681a      	ldr	r2, [r3, #0]
 801161c:	4b2e      	ldr	r3, [pc, #184]	@ (80116d8 <mem_malloc+0x1f8>)
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	429a      	cmp	r2, r3
 8011622:	d00b      	beq.n	801163c <mem_malloc+0x15c>
 8011624:	4b28      	ldr	r3, [pc, #160]	@ (80116c8 <mem_malloc+0x1e8>)
 8011626:	681b      	ldr	r3, [r3, #0]
 8011628:	791b      	ldrb	r3, [r3, #4]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d006      	beq.n	801163c <mem_malloc+0x15c>
 801162e:	4b27      	ldr	r3, [pc, #156]	@ (80116cc <mem_malloc+0x1ec>)
 8011630:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8011634:	4929      	ldr	r1, [pc, #164]	@ (80116dc <mem_malloc+0x1fc>)
 8011636:	4827      	ldr	r0, [pc, #156]	@ (80116d4 <mem_malloc+0x1f4>)
 8011638:	f00d f862 	bl	801e700 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 801163c:	4821      	ldr	r0, [pc, #132]	@ (80116c4 <mem_malloc+0x1e4>)
 801163e:	f00b fe72 	bl	801d326 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8011642:	8bba      	ldrh	r2, [r7, #28]
 8011644:	697b      	ldr	r3, [r7, #20]
 8011646:	4413      	add	r3, r2
 8011648:	3308      	adds	r3, #8
 801164a:	4a23      	ldr	r2, [pc, #140]	@ (80116d8 <mem_malloc+0x1f8>)
 801164c:	6812      	ldr	r2, [r2, #0]
 801164e:	4293      	cmp	r3, r2
 8011650:	d906      	bls.n	8011660 <mem_malloc+0x180>
 8011652:	4b1e      	ldr	r3, [pc, #120]	@ (80116cc <mem_malloc+0x1ec>)
 8011654:	f240 32b9 	movw	r2, #953	@ 0x3b9
 8011658:	4921      	ldr	r1, [pc, #132]	@ (80116e0 <mem_malloc+0x200>)
 801165a:	481e      	ldr	r0, [pc, #120]	@ (80116d4 <mem_malloc+0x1f4>)
 801165c:	f00d f850 	bl	801e700 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8011660:	697b      	ldr	r3, [r7, #20]
 8011662:	f003 0303 	and.w	r3, r3, #3
 8011666:	2b00      	cmp	r3, #0
 8011668:	d006      	beq.n	8011678 <mem_malloc+0x198>
 801166a:	4b18      	ldr	r3, [pc, #96]	@ (80116cc <mem_malloc+0x1ec>)
 801166c:	f240 32bb 	movw	r2, #955	@ 0x3bb
 8011670:	491c      	ldr	r1, [pc, #112]	@ (80116e4 <mem_malloc+0x204>)
 8011672:	4818      	ldr	r0, [pc, #96]	@ (80116d4 <mem_malloc+0x1f4>)
 8011674:	f00d f844 	bl	801e700 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8011678:	697b      	ldr	r3, [r7, #20]
 801167a:	f003 0303 	and.w	r3, r3, #3
 801167e:	2b00      	cmp	r3, #0
 8011680:	d006      	beq.n	8011690 <mem_malloc+0x1b0>
 8011682:	4b12      	ldr	r3, [pc, #72]	@ (80116cc <mem_malloc+0x1ec>)
 8011684:	f240 32bd 	movw	r2, #957	@ 0x3bd
 8011688:	4917      	ldr	r1, [pc, #92]	@ (80116e8 <mem_malloc+0x208>)
 801168a:	4812      	ldr	r0, [pc, #72]	@ (80116d4 <mem_malloc+0x1f4>)
 801168c:	f00d f838 	bl	801e700 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8011690:	697b      	ldr	r3, [r7, #20]
 8011692:	3308      	adds	r3, #8
 8011694:	e011      	b.n	80116ba <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8011696:	8bfb      	ldrh	r3, [r7, #30]
 8011698:	4618      	mov	r0, r3
 801169a:	f7ff fc33 	bl	8010f04 <ptr_to_mem>
 801169e:	4603      	mov	r3, r0
 80116a0:	881b      	ldrh	r3, [r3, #0]
 80116a2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80116a4:	8bfa      	ldrh	r2, [r7, #30]
 80116a6:	8bbb      	ldrh	r3, [r7, #28]
 80116a8:	f5c3 63c8 	rsb	r3, r3, #1600	@ 0x640
 80116ac:	429a      	cmp	r2, r3
 80116ae:	f4ff af41 	bcc.w	8011534 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80116b2:	4804      	ldr	r0, [pc, #16]	@ (80116c4 <mem_malloc+0x1e4>)
 80116b4:	f00b fe37 	bl	801d326 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80116b8:	2300      	movs	r3, #0
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	3720      	adds	r7, #32
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}
 80116c2:	bf00      	nop
 80116c4:	20017dc8 	.word	0x20017dc8
 80116c8:	20017dcc 	.word	0x20017dcc
 80116cc:	0802222c 	.word	0x0802222c
 80116d0:	080223f0 	.word	0x080223f0
 80116d4:	08022274 	.word	0x08022274
 80116d8:	20017dc4 	.word	0x20017dc4
 80116dc:	08022404 	.word	0x08022404
 80116e0:	08022420 	.word	0x08022420
 80116e4:	08022450 	.word	0x08022450
 80116e8:	08022480 	.word	0x08022480

080116ec <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80116ec:	b480      	push	{r7}
 80116ee:	b085      	sub	sp, #20
 80116f0:	af00      	add	r7, sp, #0
 80116f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	689b      	ldr	r3, [r3, #8]
 80116f8:	2200      	movs	r2, #0
 80116fa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	685b      	ldr	r3, [r3, #4]
 8011700:	3303      	adds	r3, #3
 8011702:	f023 0303 	bic.w	r3, r3, #3
 8011706:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8011708:	2300      	movs	r3, #0
 801170a:	60fb      	str	r3, [r7, #12]
 801170c:	e011      	b.n	8011732 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	689b      	ldr	r3, [r3, #8]
 8011712:	681a      	ldr	r2, [r3, #0]
 8011714:	68bb      	ldr	r3, [r7, #8]
 8011716:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	689b      	ldr	r3, [r3, #8]
 801171c:	68ba      	ldr	r2, [r7, #8]
 801171e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	881b      	ldrh	r3, [r3, #0]
 8011724:	461a      	mov	r2, r3
 8011726:	68bb      	ldr	r3, [r7, #8]
 8011728:	4413      	add	r3, r2
 801172a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	3301      	adds	r3, #1
 8011730:	60fb      	str	r3, [r7, #12]
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	885b      	ldrh	r3, [r3, #2]
 8011736:	461a      	mov	r2, r3
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	4293      	cmp	r3, r2
 801173c:	dbe7      	blt.n	801170e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801173e:	bf00      	nop
 8011740:	bf00      	nop
 8011742:	3714      	adds	r7, #20
 8011744:	46bd      	mov	sp, r7
 8011746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174a:	4770      	bx	lr

0801174c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b082      	sub	sp, #8
 8011750:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011752:	2300      	movs	r3, #0
 8011754:	80fb      	strh	r3, [r7, #6]
 8011756:	e009      	b.n	801176c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8011758:	88fb      	ldrh	r3, [r7, #6]
 801175a:	4a08      	ldr	r2, [pc, #32]	@ (801177c <memp_init+0x30>)
 801175c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011760:	4618      	mov	r0, r3
 8011762:	f7ff ffc3 	bl	80116ec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8011766:	88fb      	ldrh	r3, [r7, #6]
 8011768:	3301      	adds	r3, #1
 801176a:	80fb      	strh	r3, [r7, #6]
 801176c:	88fb      	ldrh	r3, [r7, #6]
 801176e:	2b0d      	cmp	r3, #13
 8011770:	d9f2      	bls.n	8011758 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8011772:	bf00      	nop
 8011774:	bf00      	nop
 8011776:	3708      	adds	r7, #8
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}
 801177c:	08025258 	.word	0x08025258

08011780 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8011780:	b580      	push	{r7, lr}
 8011782:	b084      	sub	sp, #16
 8011784:	af00      	add	r7, sp, #0
 8011786:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8011788:	f00b fdfa 	bl	801d380 <sys_arch_protect>
 801178c:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801178e:	687b      	ldr	r3, [r7, #4]
 8011790:	689b      	ldr	r3, [r3, #8]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8011796:	68bb      	ldr	r3, [r7, #8]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d015      	beq.n	80117c8 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	689b      	ldr	r3, [r3, #8]
 80117a0:	68ba      	ldr	r2, [r7, #8]
 80117a2:	6812      	ldr	r2, [r2, #0]
 80117a4:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80117a6:	68bb      	ldr	r3, [r7, #8]
 80117a8:	f003 0303 	and.w	r3, r3, #3
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d006      	beq.n	80117be <do_memp_malloc_pool+0x3e>
 80117b0:	4b09      	ldr	r3, [pc, #36]	@ (80117d8 <do_memp_malloc_pool+0x58>)
 80117b2:	f44f 728c 	mov.w	r2, #280	@ 0x118
 80117b6:	4909      	ldr	r1, [pc, #36]	@ (80117dc <do_memp_malloc_pool+0x5c>)
 80117b8:	4809      	ldr	r0, [pc, #36]	@ (80117e0 <do_memp_malloc_pool+0x60>)
 80117ba:	f00c ffa1 	bl	801e700 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80117be:	68f8      	ldr	r0, [r7, #12]
 80117c0:	f00b fdec 	bl	801d39c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 80117c4:	68bb      	ldr	r3, [r7, #8]
 80117c6:	e003      	b.n	80117d0 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 80117c8:	68f8      	ldr	r0, [r7, #12]
 80117ca:	f00b fde7 	bl	801d39c <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 80117ce:	2300      	movs	r3, #0
}
 80117d0:	4618      	mov	r0, r3
 80117d2:	3710      	adds	r7, #16
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}
 80117d8:	080224a4 	.word	0x080224a4
 80117dc:	080224d4 	.word	0x080224d4
 80117e0:	080224f8 	.word	0x080224f8

080117e4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	b082      	sub	sp, #8
 80117e8:	af00      	add	r7, sp, #0
 80117ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	2b00      	cmp	r3, #0
 80117f0:	d106      	bne.n	8011800 <memp_malloc_pool+0x1c>
 80117f2:	4b0a      	ldr	r3, [pc, #40]	@ (801181c <memp_malloc_pool+0x38>)
 80117f4:	f44f 729e 	mov.w	r2, #316	@ 0x13c
 80117f8:	4909      	ldr	r1, [pc, #36]	@ (8011820 <memp_malloc_pool+0x3c>)
 80117fa:	480a      	ldr	r0, [pc, #40]	@ (8011824 <memp_malloc_pool+0x40>)
 80117fc:	f00c ff80 	bl	801e700 <iprintf>
  if (desc == NULL) {
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	2b00      	cmp	r3, #0
 8011804:	d101      	bne.n	801180a <memp_malloc_pool+0x26>
    return NULL;
 8011806:	2300      	movs	r3, #0
 8011808:	e003      	b.n	8011812 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801180a:	6878      	ldr	r0, [r7, #4]
 801180c:	f7ff ffb8 	bl	8011780 <do_memp_malloc_pool>
 8011810:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8011812:	4618      	mov	r0, r3
 8011814:	3708      	adds	r7, #8
 8011816:	46bd      	mov	sp, r7
 8011818:	bd80      	pop	{r7, pc}
 801181a:	bf00      	nop
 801181c:	080224a4 	.word	0x080224a4
 8011820:	08022520 	.word	0x08022520
 8011824:	080224f8 	.word	0x080224f8

08011828 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8011828:	b580      	push	{r7, lr}
 801182a:	b084      	sub	sp, #16
 801182c:	af00      	add	r7, sp, #0
 801182e:	4603      	mov	r3, r0
 8011830:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8011832:	79fb      	ldrb	r3, [r7, #7]
 8011834:	2b0d      	cmp	r3, #13
 8011836:	d908      	bls.n	801184a <memp_malloc+0x22>
 8011838:	4b0a      	ldr	r3, [pc, #40]	@ (8011864 <memp_malloc+0x3c>)
 801183a:	f240 1257 	movw	r2, #343	@ 0x157
 801183e:	490a      	ldr	r1, [pc, #40]	@ (8011868 <memp_malloc+0x40>)
 8011840:	480a      	ldr	r0, [pc, #40]	@ (801186c <memp_malloc+0x44>)
 8011842:	f00c ff5d 	bl	801e700 <iprintf>
 8011846:	2300      	movs	r3, #0
 8011848:	e008      	b.n	801185c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801184a:	79fb      	ldrb	r3, [r7, #7]
 801184c:	4a08      	ldr	r2, [pc, #32]	@ (8011870 <memp_malloc+0x48>)
 801184e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011852:	4618      	mov	r0, r3
 8011854:	f7ff ff94 	bl	8011780 <do_memp_malloc_pool>
 8011858:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801185a:	68fb      	ldr	r3, [r7, #12]
}
 801185c:	4618      	mov	r0, r3
 801185e:	3710      	adds	r7, #16
 8011860:	46bd      	mov	sp, r7
 8011862:	bd80      	pop	{r7, pc}
 8011864:	080224a4 	.word	0x080224a4
 8011868:	08022534 	.word	0x08022534
 801186c:	080224f8 	.word	0x080224f8
 8011870:	08025258 	.word	0x08025258

08011874 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b084      	sub	sp, #16
 8011878:	af00      	add	r7, sp, #0
 801187a:	6078      	str	r0, [r7, #4]
 801187c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	f003 0303 	and.w	r3, r3, #3
 8011884:	2b00      	cmp	r3, #0
 8011886:	d006      	beq.n	8011896 <do_memp_free_pool+0x22>
 8011888:	4b0d      	ldr	r3, [pc, #52]	@ (80118c0 <do_memp_free_pool+0x4c>)
 801188a:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 801188e:	490d      	ldr	r1, [pc, #52]	@ (80118c4 <do_memp_free_pool+0x50>)
 8011890:	480d      	ldr	r0, [pc, #52]	@ (80118c8 <do_memp_free_pool+0x54>)
 8011892:	f00c ff35 	bl	801e700 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8011896:	683b      	ldr	r3, [r7, #0]
 8011898:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801189a:	f00b fd71 	bl	801d380 <sys_arch_protect>
 801189e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	689b      	ldr	r3, [r3, #8]
 80118a4:	681a      	ldr	r2, [r3, #0]
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	689b      	ldr	r3, [r3, #8]
 80118ae:	68fa      	ldr	r2, [r7, #12]
 80118b0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80118b2:	68b8      	ldr	r0, [r7, #8]
 80118b4:	f00b fd72 	bl	801d39c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80118b8:	bf00      	nop
 80118ba:	3710      	adds	r7, #16
 80118bc:	46bd      	mov	sp, r7
 80118be:	bd80      	pop	{r7, pc}
 80118c0:	080224a4 	.word	0x080224a4
 80118c4:	08022554 	.word	0x08022554
 80118c8:	080224f8 	.word	0x080224f8

080118cc <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d106      	bne.n	80118ea <memp_free_pool+0x1e>
 80118dc:	4b0a      	ldr	r3, [pc, #40]	@ (8011908 <memp_free_pool+0x3c>)
 80118de:	f240 1295 	movw	r2, #405	@ 0x195
 80118e2:	490a      	ldr	r1, [pc, #40]	@ (801190c <memp_free_pool+0x40>)
 80118e4:	480a      	ldr	r0, [pc, #40]	@ (8011910 <memp_free_pool+0x44>)
 80118e6:	f00c ff0b 	bl	801e700 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d007      	beq.n	8011900 <memp_free_pool+0x34>
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d004      	beq.n	8011900 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80118f6:	6839      	ldr	r1, [r7, #0]
 80118f8:	6878      	ldr	r0, [r7, #4]
 80118fa:	f7ff ffbb 	bl	8011874 <do_memp_free_pool>
 80118fe:	e000      	b.n	8011902 <memp_free_pool+0x36>
    return;
 8011900:	bf00      	nop
}
 8011902:	3708      	adds	r7, #8
 8011904:	46bd      	mov	sp, r7
 8011906:	bd80      	pop	{r7, pc}
 8011908:	080224a4 	.word	0x080224a4
 801190c:	08022520 	.word	0x08022520
 8011910:	080224f8 	.word	0x080224f8

08011914 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b082      	sub	sp, #8
 8011918:	af00      	add	r7, sp, #0
 801191a:	4603      	mov	r3, r0
 801191c:	6039      	str	r1, [r7, #0]
 801191e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8011920:	79fb      	ldrb	r3, [r7, #7]
 8011922:	2b0d      	cmp	r3, #13
 8011924:	d907      	bls.n	8011936 <memp_free+0x22>
 8011926:	4b0c      	ldr	r3, [pc, #48]	@ (8011958 <memp_free+0x44>)
 8011928:	f44f 72d5 	mov.w	r2, #426	@ 0x1aa
 801192c:	490b      	ldr	r1, [pc, #44]	@ (801195c <memp_free+0x48>)
 801192e:	480c      	ldr	r0, [pc, #48]	@ (8011960 <memp_free+0x4c>)
 8011930:	f00c fee6 	bl	801e700 <iprintf>
 8011934:	e00c      	b.n	8011950 <memp_free+0x3c>

  if (mem == NULL) {
 8011936:	683b      	ldr	r3, [r7, #0]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d008      	beq.n	801194e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801193c:	79fb      	ldrb	r3, [r7, #7]
 801193e:	4a09      	ldr	r2, [pc, #36]	@ (8011964 <memp_free+0x50>)
 8011940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011944:	6839      	ldr	r1, [r7, #0]
 8011946:	4618      	mov	r0, r3
 8011948:	f7ff ff94 	bl	8011874 <do_memp_free_pool>
 801194c:	e000      	b.n	8011950 <memp_free+0x3c>
    return;
 801194e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8011950:	3708      	adds	r7, #8
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop
 8011958:	080224a4 	.word	0x080224a4
 801195c:	08022574 	.word	0x08022574
 8011960:	080224f8 	.word	0x080224f8
 8011964:	08025258 	.word	0x08025258

08011968 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8011968:	b480      	push	{r7}
 801196a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 801196c:	bf00      	nop
 801196e:	46bd      	mov	sp, r7
 8011970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011974:	4770      	bx	lr
	...

08011978 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b086      	sub	sp, #24
 801197c:	af00      	add	r7, sp, #0
 801197e:	60f8      	str	r0, [r7, #12]
 8011980:	60b9      	str	r1, [r7, #8]
 8011982:	607a      	str	r2, [r7, #4]
 8011984:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	2b00      	cmp	r3, #0
 801198a:	d108      	bne.n	801199e <netif_add+0x26>
 801198c:	4b5b      	ldr	r3, [pc, #364]	@ (8011afc <netif_add+0x184>)
 801198e:	f240 1227 	movw	r2, #295	@ 0x127
 8011992:	495b      	ldr	r1, [pc, #364]	@ (8011b00 <netif_add+0x188>)
 8011994:	485b      	ldr	r0, [pc, #364]	@ (8011b04 <netif_add+0x18c>)
 8011996:	f00c feb3 	bl	801e700 <iprintf>
 801199a:	2300      	movs	r3, #0
 801199c:	e0a9      	b.n	8011af2 <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801199e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d108      	bne.n	80119b6 <netif_add+0x3e>
 80119a4:	4b55      	ldr	r3, [pc, #340]	@ (8011afc <netif_add+0x184>)
 80119a6:	f44f 7294 	mov.w	r2, #296	@ 0x128
 80119aa:	4957      	ldr	r1, [pc, #348]	@ (8011b08 <netif_add+0x190>)
 80119ac:	4855      	ldr	r0, [pc, #340]	@ (8011b04 <netif_add+0x18c>)
 80119ae:	f00c fea7 	bl	801e700 <iprintf>
 80119b2:	2300      	movs	r3, #0
 80119b4:	e09d      	b.n	8011af2 <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80119b6:	68bb      	ldr	r3, [r7, #8]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d101      	bne.n	80119c0 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80119bc:	4b53      	ldr	r3, [pc, #332]	@ (8011b0c <netif_add+0x194>)
 80119be:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80119c0:	687b      	ldr	r3, [r7, #4]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d101      	bne.n	80119ca <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 80119c6:	4b51      	ldr	r3, [pc, #324]	@ (8011b0c <netif_add+0x194>)
 80119c8:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80119ca:	683b      	ldr	r3, [r7, #0]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d101      	bne.n	80119d4 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 80119d0:	4b4e      	ldr	r3, [pc, #312]	@ (8011b0c <netif_add+0x194>)
 80119d2:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	2200      	movs	r2, #0
 80119d8:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	2200      	movs	r2, #0
 80119de:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80119e0:	68fb      	ldr	r3, [r7, #12]
 80119e2:	2200      	movs	r2, #0
 80119e4:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80119e6:	68fb      	ldr	r3, [r7, #12]
 80119e8:	4a49      	ldr	r2, [pc, #292]	@ (8011b10 <netif_add+0x198>)
 80119ea:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	2200      	movs	r2, #0
 80119f0:	851a      	strh	r2, [r3, #40]	@ 0x28
  netif->flags = 0;
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	2200      	movs	r2, #0
 80119f6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	3324      	adds	r3, #36	@ 0x24
 80119fe:	2204      	movs	r2, #4
 8011a00:	2100      	movs	r1, #0
 8011a02:	4618      	mov	r0, r3
 8011a04:	f00c ffb0 	bl	801e968 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8011a08:	68fb      	ldr	r3, [r7, #12]
 8011a0a:	2200      	movs	r2, #0
 8011a0c:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	6a3a      	ldr	r2, [r7, #32]
 8011a12:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8011a14:	4b3f      	ldr	r3, [pc, #252]	@ (8011b14 <netif_add+0x19c>)
 8011a16:	781a      	ldrb	r2, [r3, #0]
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  netif->input = input;
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011a22:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8011a24:	683b      	ldr	r3, [r7, #0]
 8011a26:	687a      	ldr	r2, [r7, #4]
 8011a28:	68b9      	ldr	r1, [r7, #8]
 8011a2a:	68f8      	ldr	r0, [r7, #12]
 8011a2c:	f000 f914 	bl	8011c58 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8011a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011a32:	68f8      	ldr	r0, [r7, #12]
 8011a34:	4798      	blx	r3
 8011a36:	4603      	mov	r3, r0
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d001      	beq.n	8011a40 <netif_add+0xc8>
    return NULL;
 8011a3c:	2300      	movs	r3, #0
 8011a3e:	e058      	b.n	8011af2 <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011a46:	2bff      	cmp	r3, #255	@ 0xff
 8011a48:	d103      	bne.n	8011a52 <netif_add+0xda>
        netif->num = 0;
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }
      num_netifs = 0;
 8011a52:	2300      	movs	r3, #0
 8011a54:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011a56:	4b30      	ldr	r3, [pc, #192]	@ (8011b18 <netif_add+0x1a0>)
 8011a58:	681b      	ldr	r3, [r3, #0]
 8011a5a:	617b      	str	r3, [r7, #20]
 8011a5c:	e02b      	b.n	8011ab6 <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8011a5e:	697a      	ldr	r2, [r7, #20]
 8011a60:	68fb      	ldr	r3, [r7, #12]
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d106      	bne.n	8011a74 <netif_add+0xfc>
 8011a66:	4b25      	ldr	r3, [pc, #148]	@ (8011afc <netif_add+0x184>)
 8011a68:	f240 128b 	movw	r2, #395	@ 0x18b
 8011a6c:	492b      	ldr	r1, [pc, #172]	@ (8011b1c <netif_add+0x1a4>)
 8011a6e:	4825      	ldr	r0, [pc, #148]	@ (8011b04 <netif_add+0x18c>)
 8011a70:	f00c fe46 	bl	801e700 <iprintf>
        num_netifs++;
 8011a74:	693b      	ldr	r3, [r7, #16]
 8011a76:	3301      	adds	r3, #1
 8011a78:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8011a7a:	693b      	ldr	r3, [r7, #16]
 8011a7c:	2bff      	cmp	r3, #255	@ 0xff
 8011a7e:	dd06      	ble.n	8011a8e <netif_add+0x116>
 8011a80:	4b1e      	ldr	r3, [pc, #120]	@ (8011afc <netif_add+0x184>)
 8011a82:	f240 128d 	movw	r2, #397	@ 0x18d
 8011a86:	4926      	ldr	r1, [pc, #152]	@ (8011b20 <netif_add+0x1a8>)
 8011a88:	481e      	ldr	r0, [pc, #120]	@ (8011b04 <netif_add+0x18c>)
 8011a8a:	f00c fe39 	bl	801e700 <iprintf>
        if (netif2->num == netif->num) {
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011a9a:	429a      	cmp	r2, r3
 8011a9c:	d108      	bne.n	8011ab0 <netif_add+0x138>
          netif->num++;
 8011a9e:	68fb      	ldr	r3, [r7, #12]
 8011aa0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011aa4:	3301      	adds	r3, #1
 8011aa6:	b2da      	uxtb	r2, r3
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          break;
 8011aae:	e005      	b.n	8011abc <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8011ab0:	697b      	ldr	r3, [r7, #20]
 8011ab2:	681b      	ldr	r3, [r3, #0]
 8011ab4:	617b      	str	r3, [r7, #20]
 8011ab6:	697b      	ldr	r3, [r7, #20]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d1d0      	bne.n	8011a5e <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 8011abc:	697b      	ldr	r3, [r7, #20]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d1be      	bne.n	8011a40 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011ac8:	2bfe      	cmp	r3, #254	@ 0xfe
 8011aca:	d103      	bne.n	8011ad4 <netif_add+0x15c>
    netif_num = 0;
 8011acc:	4b11      	ldr	r3, [pc, #68]	@ (8011b14 <netif_add+0x19c>)
 8011ace:	2200      	movs	r2, #0
 8011ad0:	701a      	strb	r2, [r3, #0]
 8011ad2:	e006      	b.n	8011ae2 <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8011ad4:	68fb      	ldr	r3, [r7, #12]
 8011ad6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011ada:	3301      	adds	r3, #1
 8011adc:	b2da      	uxtb	r2, r3
 8011ade:	4b0d      	ldr	r3, [pc, #52]	@ (8011b14 <netif_add+0x19c>)
 8011ae0:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8011ae2:	4b0d      	ldr	r3, [pc, #52]	@ (8011b18 <netif_add+0x1a0>)
 8011ae4:	681a      	ldr	r2, [r3, #0]
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8011aea:	4a0b      	ldr	r2, [pc, #44]	@ (8011b18 <netif_add+0x1a0>)
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8011af0:	68fb      	ldr	r3, [r7, #12]
}
 8011af2:	4618      	mov	r0, r3
 8011af4:	3718      	adds	r7, #24
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}
 8011afa:	bf00      	nop
 8011afc:	08022590 	.word	0x08022590
 8011b00:	08022624 	.word	0x08022624
 8011b04:	080225e0 	.word	0x080225e0
 8011b08:	08022640 	.word	0x08022640
 8011b0c:	080252e8 	.word	0x080252e8
 8011b10:	08011f3b 	.word	0x08011f3b
 8011b14:	2001b010 	.word	0x2001b010
 8011b18:	2001b008 	.word	0x2001b008
 8011b1c:	08022664 	.word	0x08022664
 8011b20:	08022678 	.word	0x08022678

08011b24 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b082      	sub	sp, #8
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
 8011b2c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8011b2e:	6839      	ldr	r1, [r7, #0]
 8011b30:	6878      	ldr	r0, [r7, #4]
 8011b32:	f002 fced 	bl	8014510 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8011b36:	6839      	ldr	r1, [r7, #0]
 8011b38:	6878      	ldr	r0, [r7, #4]
 8011b3a:	f007 f959 	bl	8018df0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8011b3e:	bf00      	nop
 8011b40:	3708      	adds	r7, #8
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
	...

08011b48 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8011b48:	b580      	push	{r7, lr}
 8011b4a:	b086      	sub	sp, #24
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	60f8      	str	r0, [r7, #12]
 8011b50:	60b9      	str	r1, [r7, #8]
 8011b52:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8011b54:	68bb      	ldr	r3, [r7, #8]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d106      	bne.n	8011b68 <netif_do_set_ipaddr+0x20>
 8011b5a:	4b1d      	ldr	r3, [pc, #116]	@ (8011bd0 <netif_do_set_ipaddr+0x88>)
 8011b5c:	f240 12cb 	movw	r2, #459	@ 0x1cb
 8011b60:	491c      	ldr	r1, [pc, #112]	@ (8011bd4 <netif_do_set_ipaddr+0x8c>)
 8011b62:	481d      	ldr	r0, [pc, #116]	@ (8011bd8 <netif_do_set_ipaddr+0x90>)
 8011b64:	f00c fdcc 	bl	801e700 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d106      	bne.n	8011b7c <netif_do_set_ipaddr+0x34>
 8011b6e:	4b18      	ldr	r3, [pc, #96]	@ (8011bd0 <netif_do_set_ipaddr+0x88>)
 8011b70:	f44f 72e6 	mov.w	r2, #460	@ 0x1cc
 8011b74:	4917      	ldr	r1, [pc, #92]	@ (8011bd4 <netif_do_set_ipaddr+0x8c>)
 8011b76:	4818      	ldr	r0, [pc, #96]	@ (8011bd8 <netif_do_set_ipaddr+0x90>)
 8011b78:	f00c fdc2 	bl	801e700 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8011b7c:	68bb      	ldr	r3, [r7, #8]
 8011b7e:	681a      	ldr	r2, [r3, #0]
 8011b80:	68fb      	ldr	r3, [r7, #12]
 8011b82:	3304      	adds	r3, #4
 8011b84:	681b      	ldr	r3, [r3, #0]
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d01c      	beq.n	8011bc4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	3304      	adds	r3, #4
 8011b94:	681a      	ldr	r2, [r3, #0]
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8011b9a:	f107 0314 	add.w	r3, r7, #20
 8011b9e:	4619      	mov	r1, r3
 8011ba0:	6878      	ldr	r0, [r7, #4]
 8011ba2:	f7ff ffbf 	bl	8011b24 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8011ba6:	68bb      	ldr	r3, [r7, #8]
 8011ba8:	2b00      	cmp	r3, #0
 8011baa:	d002      	beq.n	8011bb2 <netif_do_set_ipaddr+0x6a>
 8011bac:	68bb      	ldr	r3, [r7, #8]
 8011bae:	681b      	ldr	r3, [r3, #0]
 8011bb0:	e000      	b.n	8011bb4 <netif_do_set_ipaddr+0x6c>
 8011bb2:	2300      	movs	r3, #0
 8011bb4:	68fa      	ldr	r2, [r7, #12]
 8011bb6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011bb8:	2101      	movs	r1, #1
 8011bba:	68f8      	ldr	r0, [r7, #12]
 8011bbc:	f000 f8d2 	bl	8011d64 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8011bc0:	2301      	movs	r3, #1
 8011bc2:	e000      	b.n	8011bc6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8011bc4:	2300      	movs	r3, #0
}
 8011bc6:	4618      	mov	r0, r3
 8011bc8:	3718      	adds	r7, #24
 8011bca:	46bd      	mov	sp, r7
 8011bcc:	bd80      	pop	{r7, pc}
 8011bce:	bf00      	nop
 8011bd0:	08022590 	.word	0x08022590
 8011bd4:	080226a8 	.word	0x080226a8
 8011bd8:	080225e0 	.word	0x080225e0

08011bdc <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8011bdc:	b480      	push	{r7}
 8011bde:	b085      	sub	sp, #20
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	60f8      	str	r0, [r7, #12]
 8011be4:	60b9      	str	r1, [r7, #8]
 8011be6:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8011be8:	68bb      	ldr	r3, [r7, #8]
 8011bea:	681a      	ldr	r2, [r3, #0]
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	3308      	adds	r3, #8
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	d00a      	beq.n	8011c0c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d002      	beq.n	8011c02 <netif_do_set_netmask+0x26>
 8011bfc:	68bb      	ldr	r3, [r7, #8]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	e000      	b.n	8011c04 <netif_do_set_netmask+0x28>
 8011c02:	2300      	movs	r3, #0
 8011c04:	68fa      	ldr	r2, [r7, #12]
 8011c06:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8011c08:	2301      	movs	r3, #1
 8011c0a:	e000      	b.n	8011c0e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8011c0c:	2300      	movs	r3, #0
}
 8011c0e:	4618      	mov	r0, r3
 8011c10:	3714      	adds	r7, #20
 8011c12:	46bd      	mov	sp, r7
 8011c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c18:	4770      	bx	lr

08011c1a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8011c1a:	b480      	push	{r7}
 8011c1c:	b085      	sub	sp, #20
 8011c1e:	af00      	add	r7, sp, #0
 8011c20:	60f8      	str	r0, [r7, #12]
 8011c22:	60b9      	str	r1, [r7, #8]
 8011c24:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8011c26:	68bb      	ldr	r3, [r7, #8]
 8011c28:	681a      	ldr	r2, [r3, #0]
 8011c2a:	68fb      	ldr	r3, [r7, #12]
 8011c2c:	330c      	adds	r3, #12
 8011c2e:	681b      	ldr	r3, [r3, #0]
 8011c30:	429a      	cmp	r2, r3
 8011c32:	d00a      	beq.n	8011c4a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8011c34:	68bb      	ldr	r3, [r7, #8]
 8011c36:	2b00      	cmp	r3, #0
 8011c38:	d002      	beq.n	8011c40 <netif_do_set_gw+0x26>
 8011c3a:	68bb      	ldr	r3, [r7, #8]
 8011c3c:	681b      	ldr	r3, [r3, #0]
 8011c3e:	e000      	b.n	8011c42 <netif_do_set_gw+0x28>
 8011c40:	2300      	movs	r3, #0
 8011c42:	68fa      	ldr	r2, [r7, #12]
 8011c44:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8011c46:	2301      	movs	r3, #1
 8011c48:	e000      	b.n	8011c4c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8011c4a:	2300      	movs	r3, #0
}
 8011c4c:	4618      	mov	r0, r3
 8011c4e:	3714      	adds	r7, #20
 8011c50:	46bd      	mov	sp, r7
 8011c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c56:	4770      	bx	lr

08011c58 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b088      	sub	sp, #32
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	60f8      	str	r0, [r7, #12]
 8011c60:	60b9      	str	r1, [r7, #8]
 8011c62:	607a      	str	r2, [r7, #4]
 8011c64:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8011c66:	2300      	movs	r3, #0
 8011c68:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8011c6a:	2300      	movs	r3, #0
 8011c6c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011c6e:	68bb      	ldr	r3, [r7, #8]
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d101      	bne.n	8011c78 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8011c74:	4b1c      	ldr	r3, [pc, #112]	@ (8011ce8 <netif_set_addr+0x90>)
 8011c76:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d101      	bne.n	8011c82 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8011c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8011ce8 <netif_set_addr+0x90>)
 8011c80:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d101      	bne.n	8011c8c <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8011c88:	4b17      	ldr	r3, [pc, #92]	@ (8011ce8 <netif_set_addr+0x90>)
 8011c8a:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8011c8c:	68bb      	ldr	r3, [r7, #8]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d003      	beq.n	8011c9a <netif_set_addr+0x42>
 8011c92:	68bb      	ldr	r3, [r7, #8]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d101      	bne.n	8011c9e <netif_set_addr+0x46>
 8011c9a:	2301      	movs	r3, #1
 8011c9c:	e000      	b.n	8011ca0 <netif_set_addr+0x48>
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8011ca2:	697b      	ldr	r3, [r7, #20]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d006      	beq.n	8011cb6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011ca8:	f107 0310 	add.w	r3, r7, #16
 8011cac:	461a      	mov	r2, r3
 8011cae:	68b9      	ldr	r1, [r7, #8]
 8011cb0:	68f8      	ldr	r0, [r7, #12]
 8011cb2:	f7ff ff49 	bl	8011b48 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8011cb6:	69fa      	ldr	r2, [r7, #28]
 8011cb8:	6879      	ldr	r1, [r7, #4]
 8011cba:	68f8      	ldr	r0, [r7, #12]
 8011cbc:	f7ff ff8e 	bl	8011bdc <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8011cc0:	69ba      	ldr	r2, [r7, #24]
 8011cc2:	6839      	ldr	r1, [r7, #0]
 8011cc4:	68f8      	ldr	r0, [r7, #12]
 8011cc6:	f7ff ffa8 	bl	8011c1a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8011cca:	697b      	ldr	r3, [r7, #20]
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d106      	bne.n	8011cde <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8011cd0:	f107 0310 	add.w	r3, r7, #16
 8011cd4:	461a      	mov	r2, r3
 8011cd6:	68b9      	ldr	r1, [r7, #8]
 8011cd8:	68f8      	ldr	r0, [r7, #12]
 8011cda:	f7ff ff35 	bl	8011b48 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8011cde:	bf00      	nop
 8011ce0:	3720      	adds	r7, #32
 8011ce2:	46bd      	mov	sp, r7
 8011ce4:	bd80      	pop	{r7, pc}
 8011ce6:	bf00      	nop
 8011ce8:	080252e8 	.word	0x080252e8

08011cec <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011cec:	b480      	push	{r7}
 8011cee:	b083      	sub	sp, #12
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011cf4:	4a04      	ldr	r2, [pc, #16]	@ (8011d08 <netif_set_default+0x1c>)
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011cfa:	bf00      	nop
 8011cfc:	370c      	adds	r7, #12
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d04:	4770      	bx	lr
 8011d06:	bf00      	nop
 8011d08:	2001b00c 	.word	0x2001b00c

08011d0c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b082      	sub	sp, #8
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8011d14:	687b      	ldr	r3, [r7, #4]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d107      	bne.n	8011d2a <netif_set_up+0x1e>
 8011d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8011d58 <netif_set_up+0x4c>)
 8011d1c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8011d20:	490e      	ldr	r1, [pc, #56]	@ (8011d5c <netif_set_up+0x50>)
 8011d22:	480f      	ldr	r0, [pc, #60]	@ (8011d60 <netif_set_up+0x54>)
 8011d24:	f00c fcec 	bl	801e700 <iprintf>
 8011d28:	e013      	b.n	8011d52 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8011d2a:	687b      	ldr	r3, [r7, #4]
 8011d2c:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011d30:	f003 0301 	and.w	r3, r3, #1
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d10c      	bne.n	8011d52 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011d3e:	f043 0301 	orr.w	r3, r3, #1
 8011d42:	b2da      	uxtb	r2, r3
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011d4a:	2103      	movs	r1, #3
 8011d4c:	6878      	ldr	r0, [r7, #4]
 8011d4e:	f000 f809 	bl	8011d64 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8011d52:	3708      	adds	r7, #8
 8011d54:	46bd      	mov	sp, r7
 8011d56:	bd80      	pop	{r7, pc}
 8011d58:	08022590 	.word	0x08022590
 8011d5c:	08022718 	.word	0x08022718
 8011d60:	080225e0 	.word	0x080225e0

08011d64 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b082      	sub	sp, #8
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
 8011d6c:	460b      	mov	r3, r1
 8011d6e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d106      	bne.n	8011d84 <netif_issue_reports+0x20>
 8011d76:	4b18      	ldr	r3, [pc, #96]	@ (8011dd8 <netif_issue_reports+0x74>)
 8011d78:	f240 326d 	movw	r2, #877	@ 0x36d
 8011d7c:	4917      	ldr	r1, [pc, #92]	@ (8011ddc <netif_issue_reports+0x78>)
 8011d7e:	4818      	ldr	r0, [pc, #96]	@ (8011de0 <netif_issue_reports+0x7c>)
 8011d80:	f00c fcbe 	bl	801e700 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011d8a:	f003 0304 	and.w	r3, r3, #4
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d01e      	beq.n	8011dd0 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011d98:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d017      	beq.n	8011dd0 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011da0:	78fb      	ldrb	r3, [r7, #3]
 8011da2:	f003 0301 	and.w	r3, r3, #1
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d013      	beq.n	8011dd2 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	3304      	adds	r3, #4
 8011dae:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d00e      	beq.n	8011dd2 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011dba:	f003 0308 	and.w	r3, r3, #8
 8011dbe:	2b00      	cmp	r3, #0
 8011dc0:	d007      	beq.n	8011dd2 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	3304      	adds	r3, #4
 8011dc6:	4619      	mov	r1, r3
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f009 fe5b 	bl	801ba84 <etharp_request>
 8011dce:	e000      	b.n	8011dd2 <netif_issue_reports+0x6e>
    return;
 8011dd0:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8011dd2:	3708      	adds	r7, #8
 8011dd4:	46bd      	mov	sp, r7
 8011dd6:	bd80      	pop	{r7, pc}
 8011dd8:	08022590 	.word	0x08022590
 8011ddc:	08022734 	.word	0x08022734
 8011de0:	080225e0 	.word	0x080225e0

08011de4 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b082      	sub	sp, #8
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	2b00      	cmp	r3, #0
 8011df0:	d107      	bne.n	8011e02 <netif_set_down+0x1e>
 8011df2:	4b12      	ldr	r3, [pc, #72]	@ (8011e3c <netif_set_down+0x58>)
 8011df4:	f240 329b 	movw	r2, #923	@ 0x39b
 8011df8:	4911      	ldr	r1, [pc, #68]	@ (8011e40 <netif_set_down+0x5c>)
 8011dfa:	4812      	ldr	r0, [pc, #72]	@ (8011e44 <netif_set_down+0x60>)
 8011dfc:	f00c fc80 	bl	801e700 <iprintf>
 8011e00:	e019      	b.n	8011e36 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011e08:	f003 0301 	and.w	r3, r3, #1
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d012      	beq.n	8011e36 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011e16:	f023 0301 	bic.w	r3, r3, #1
 8011e1a:	b2da      	uxtb	r2, r3
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011e28:	f003 0308 	and.w	r3, r3, #8
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d002      	beq.n	8011e36 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8011e30:	6878      	ldr	r0, [r7, #4]
 8011e32:	f009 f9e1 	bl	801b1f8 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8011e36:	3708      	adds	r7, #8
 8011e38:	46bd      	mov	sp, r7
 8011e3a:	bd80      	pop	{r7, pc}
 8011e3c:	08022590 	.word	0x08022590
 8011e40:	08022758 	.word	0x08022758
 8011e44:	080225e0 	.word	0x080225e0

08011e48 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b082      	sub	sp, #8
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d107      	bne.n	8011e66 <netif_set_link_up+0x1e>
 8011e56:	4b15      	ldr	r3, [pc, #84]	@ (8011eac <netif_set_link_up+0x64>)
 8011e58:	f44f 7278 	mov.w	r2, #992	@ 0x3e0
 8011e5c:	4914      	ldr	r1, [pc, #80]	@ (8011eb0 <netif_set_link_up+0x68>)
 8011e5e:	4815      	ldr	r0, [pc, #84]	@ (8011eb4 <netif_set_link_up+0x6c>)
 8011e60:	f00c fc4e 	bl	801e700 <iprintf>
 8011e64:	e01e      	b.n	8011ea4 <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8011e66:	687b      	ldr	r3, [r7, #4]
 8011e68:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011e6c:	f003 0304 	and.w	r3, r3, #4
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d117      	bne.n	8011ea4 <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011e7a:	f043 0304 	orr.w	r3, r3, #4
 8011e7e:	b2da      	uxtb	r2, r3
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 8011e86:	6878      	ldr	r0, [r7, #4]
 8011e88:	f007 fbfc 	bl	8019684 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8011e8c:	2103      	movs	r1, #3
 8011e8e:	6878      	ldr	r0, [r7, #4]
 8011e90:	f7ff ff68 	bl	8011d64 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	69db      	ldr	r3, [r3, #28]
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d003      	beq.n	8011ea4 <netif_set_link_up+0x5c>
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	69db      	ldr	r3, [r3, #28]
 8011ea0:	6878      	ldr	r0, [r7, #4]
 8011ea2:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011ea4:	3708      	adds	r7, #8
 8011ea6:	46bd      	mov	sp, r7
 8011ea8:	bd80      	pop	{r7, pc}
 8011eaa:	bf00      	nop
 8011eac:	08022590 	.word	0x08022590
 8011eb0:	08022778 	.word	0x08022778
 8011eb4:	080225e0 	.word	0x080225e0

08011eb8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8011eb8:	b580      	push	{r7, lr}
 8011eba:	b082      	sub	sp, #8
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8011ec0:	687b      	ldr	r3, [r7, #4]
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d107      	bne.n	8011ed6 <netif_set_link_down+0x1e>
 8011ec6:	4b11      	ldr	r3, [pc, #68]	@ (8011f0c <netif_set_link_down+0x54>)
 8011ec8:	f240 4206 	movw	r2, #1030	@ 0x406
 8011ecc:	4910      	ldr	r1, [pc, #64]	@ (8011f10 <netif_set_link_down+0x58>)
 8011ece:	4811      	ldr	r0, [pc, #68]	@ (8011f14 <netif_set_link_down+0x5c>)
 8011ed0:	f00c fc16 	bl	801e700 <iprintf>
 8011ed4:	e017      	b.n	8011f06 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011edc:	f003 0304 	and.w	r3, r3, #4
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d010      	beq.n	8011f06 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8011eea:	f023 0304 	bic.w	r3, r3, #4
 8011eee:	b2da      	uxtb	r2, r3
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    NETIF_LINK_CALLBACK(netif);
 8011ef6:	687b      	ldr	r3, [r7, #4]
 8011ef8:	69db      	ldr	r3, [r3, #28]
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d003      	beq.n	8011f06 <netif_set_link_down+0x4e>
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	69db      	ldr	r3, [r3, #28]
 8011f02:	6878      	ldr	r0, [r7, #4]
 8011f04:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8011f06:	3708      	adds	r7, #8
 8011f08:	46bd      	mov	sp, r7
 8011f0a:	bd80      	pop	{r7, pc}
 8011f0c:	08022590 	.word	0x08022590
 8011f10:	0802279c 	.word	0x0802279c
 8011f14:	080225e0 	.word	0x080225e0

08011f18 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8011f18:	b480      	push	{r7}
 8011f1a:	b083      	sub	sp, #12
 8011f1c:	af00      	add	r7, sp, #0
 8011f1e:	6078      	str	r0, [r7, #4]
 8011f20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8011f22:	687b      	ldr	r3, [r7, #4]
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d002      	beq.n	8011f2e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8011f28:	687b      	ldr	r3, [r7, #4]
 8011f2a:	683a      	ldr	r2, [r7, #0]
 8011f2c:	61da      	str	r2, [r3, #28]
  }
}
 8011f2e:	bf00      	nop
 8011f30:	370c      	adds	r7, #12
 8011f32:	46bd      	mov	sp, r7
 8011f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f38:	4770      	bx	lr

08011f3a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8011f3a:	b480      	push	{r7}
 8011f3c:	b085      	sub	sp, #20
 8011f3e:	af00      	add	r7, sp, #0
 8011f40:	60f8      	str	r0, [r7, #12]
 8011f42:	60b9      	str	r1, [r7, #8]
 8011f44:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8011f46:	f06f 030b 	mvn.w	r3, #11
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3714      	adds	r7, #20
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f54:	4770      	bx	lr
	...

08011f58 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8011f58:	b480      	push	{r7}
 8011f5a:	b085      	sub	sp, #20
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	4603      	mov	r3, r0
 8011f60:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8011f62:	79fb      	ldrb	r3, [r7, #7]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d013      	beq.n	8011f90 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8011f68:	4b0d      	ldr	r3, [pc, #52]	@ (8011fa0 <netif_get_by_index+0x48>)
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	60fb      	str	r3, [r7, #12]
 8011f6e:	e00c      	b.n	8011f8a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8011f70:	68fb      	ldr	r3, [r7, #12]
 8011f72:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8011f76:	3301      	adds	r3, #1
 8011f78:	b2db      	uxtb	r3, r3
 8011f7a:	79fa      	ldrb	r2, [r7, #7]
 8011f7c:	429a      	cmp	r2, r3
 8011f7e:	d101      	bne.n	8011f84 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	e006      	b.n	8011f92 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	60fb      	str	r3, [r7, #12]
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d1ef      	bne.n	8011f70 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8011f90:	2300      	movs	r3, #0
}
 8011f92:	4618      	mov	r0, r3
 8011f94:	3714      	adds	r7, #20
 8011f96:	46bd      	mov	sp, r7
 8011f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f9c:	4770      	bx	lr
 8011f9e:	bf00      	nop
 8011fa0:	2001b008 	.word	0x2001b008

08011fa4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011fa4:	b580      	push	{r7, lr}
 8011fa6:	b082      	sub	sp, #8
 8011fa8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8011faa:	f00b f9e9 	bl	801d380 <sys_arch_protect>
 8011fae:	6038      	str	r0, [r7, #0]
 8011fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8011fe8 <pbuf_free_ooseq+0x44>)
 8011fb2:	2200      	movs	r2, #0
 8011fb4:	701a      	strb	r2, [r3, #0]
 8011fb6:	6838      	ldr	r0, [r7, #0]
 8011fb8:	f00b f9f0 	bl	801d39c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011fbc:	4b0b      	ldr	r3, [pc, #44]	@ (8011fec <pbuf_free_ooseq+0x48>)
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	607b      	str	r3, [r7, #4]
 8011fc2:	e00a      	b.n	8011fda <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8011fc8:	2b00      	cmp	r3, #0
 8011fca:	d003      	beq.n	8011fd4 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8011fcc:	6878      	ldr	r0, [r7, #4]
 8011fce:	f002 fadd 	bl	801458c <tcp_free_ooseq>
      return;
 8011fd2:	e005      	b.n	8011fe0 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	68db      	ldr	r3, [r3, #12]
 8011fd8:	607b      	str	r3, [r7, #4]
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d1f1      	bne.n	8011fc4 <pbuf_free_ooseq+0x20>
    }
  }
}
 8011fe0:	3708      	adds	r7, #8
 8011fe2:	46bd      	mov	sp, r7
 8011fe4:	bd80      	pop	{r7, pc}
 8011fe6:	bf00      	nop
 8011fe8:	2001b011 	.word	0x2001b011
 8011fec:	2001b020 	.word	0x2001b020

08011ff0 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b082      	sub	sp, #8
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8011ff8:	f7ff ffd4 	bl	8011fa4 <pbuf_free_ooseq>
}
 8011ffc:	bf00      	nop
 8011ffe:	3708      	adds	r7, #8
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}

08012004 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b082      	sub	sp, #8
 8012008:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801200a:	f00b f9b9 	bl	801d380 <sys_arch_protect>
 801200e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8012010:	4b0f      	ldr	r3, [pc, #60]	@ (8012050 <pbuf_pool_is_empty+0x4c>)
 8012012:	781b      	ldrb	r3, [r3, #0]
 8012014:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8012016:	4b0e      	ldr	r3, [pc, #56]	@ (8012050 <pbuf_pool_is_empty+0x4c>)
 8012018:	2201      	movs	r2, #1
 801201a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801201c:	6878      	ldr	r0, [r7, #4]
 801201e:	f00b f9bd 	bl	801d39c <sys_arch_unprotect>

  if (!queued) {
 8012022:	78fb      	ldrb	r3, [r7, #3]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d10f      	bne.n	8012048 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8012028:	2100      	movs	r1, #0
 801202a:	480a      	ldr	r0, [pc, #40]	@ (8012054 <pbuf_pool_is_empty+0x50>)
 801202c:	f7fe fbac 	bl	8010788 <tcpip_try_callback>
 8012030:	4603      	mov	r3, r0
 8012032:	2b00      	cmp	r3, #0
 8012034:	d008      	beq.n	8012048 <pbuf_pool_is_empty+0x44>
 8012036:	f00b f9a3 	bl	801d380 <sys_arch_protect>
 801203a:	6078      	str	r0, [r7, #4]
 801203c:	4b04      	ldr	r3, [pc, #16]	@ (8012050 <pbuf_pool_is_empty+0x4c>)
 801203e:	2200      	movs	r2, #0
 8012040:	701a      	strb	r2, [r3, #0]
 8012042:	6878      	ldr	r0, [r7, #4]
 8012044:	f00b f9aa 	bl	801d39c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8012048:	bf00      	nop
 801204a:	3708      	adds	r7, #8
 801204c:	46bd      	mov	sp, r7
 801204e:	bd80      	pop	{r7, pc}
 8012050:	2001b011 	.word	0x2001b011
 8012054:	08011ff1 	.word	0x08011ff1

08012058 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8012058:	b480      	push	{r7}
 801205a:	b085      	sub	sp, #20
 801205c:	af00      	add	r7, sp, #0
 801205e:	60f8      	str	r0, [r7, #12]
 8012060:	60b9      	str	r1, [r7, #8]
 8012062:	4611      	mov	r1, r2
 8012064:	461a      	mov	r2, r3
 8012066:	460b      	mov	r3, r1
 8012068:	80fb      	strh	r3, [r7, #6]
 801206a:	4613      	mov	r3, r2
 801206c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	2200      	movs	r2, #0
 8012072:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012074:	68fb      	ldr	r3, [r7, #12]
 8012076:	68ba      	ldr	r2, [r7, #8]
 8012078:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	88fa      	ldrh	r2, [r7, #6]
 801207e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8012080:	68fb      	ldr	r3, [r7, #12]
 8012082:	88ba      	ldrh	r2, [r7, #4]
 8012084:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8012086:	8b3b      	ldrh	r3, [r7, #24]
 8012088:	b2da      	uxtb	r2, r3
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	7f3a      	ldrb	r2, [r7, #28]
 8012092:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012094:	68fb      	ldr	r3, [r7, #12]
 8012096:	2201      	movs	r2, #1
 8012098:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	2200      	movs	r2, #0
 801209e:	73da      	strb	r2, [r3, #15]
}
 80120a0:	bf00      	nop
 80120a2:	3714      	adds	r7, #20
 80120a4:	46bd      	mov	sp, r7
 80120a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120aa:	4770      	bx	lr

080120ac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b08c      	sub	sp, #48	@ 0x30
 80120b0:	af02      	add	r7, sp, #8
 80120b2:	4603      	mov	r3, r0
 80120b4:	71fb      	strb	r3, [r7, #7]
 80120b6:	460b      	mov	r3, r1
 80120b8:	80bb      	strh	r3, [r7, #4]
 80120ba:	4613      	mov	r3, r2
 80120bc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 80120be:	79fb      	ldrb	r3, [r7, #7]
 80120c0:	847b      	strh	r3, [r7, #34]	@ 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 80120c2:	887b      	ldrh	r3, [r7, #2]
 80120c4:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80120c8:	d07f      	beq.n	80121ca <pbuf_alloc+0x11e>
 80120ca:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 80120ce:	f300 80c8 	bgt.w	8012262 <pbuf_alloc+0x1b6>
 80120d2:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80120d6:	d010      	beq.n	80120fa <pbuf_alloc+0x4e>
 80120d8:	f5b3 7fc1 	cmp.w	r3, #386	@ 0x182
 80120dc:	f300 80c1 	bgt.w	8012262 <pbuf_alloc+0x1b6>
 80120e0:	2b01      	cmp	r3, #1
 80120e2:	d002      	beq.n	80120ea <pbuf_alloc+0x3e>
 80120e4:	2b41      	cmp	r3, #65	@ 0x41
 80120e6:	f040 80bc 	bne.w	8012262 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 80120ea:	887a      	ldrh	r2, [r7, #2]
 80120ec:	88bb      	ldrh	r3, [r7, #4]
 80120ee:	4619      	mov	r1, r3
 80120f0:	2000      	movs	r0, #0
 80120f2:	f000 f8d1 	bl	8012298 <pbuf_alloc_reference>
 80120f6:	6278      	str	r0, [r7, #36]	@ 0x24
      break;
 80120f8:	e0bd      	b.n	8012276 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80120fa:	2300      	movs	r3, #0
 80120fc:	627b      	str	r3, [r7, #36]	@ 0x24
      last = NULL;
 80120fe:	2300      	movs	r3, #0
 8012100:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8012102:	88bb      	ldrh	r3, [r7, #4]
 8012104:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8012106:	200d      	movs	r0, #13
 8012108:	f7ff fb8e 	bl	8011828 <memp_malloc>
 801210c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801210e:	693b      	ldr	r3, [r7, #16]
 8012110:	2b00      	cmp	r3, #0
 8012112:	d109      	bne.n	8012128 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012114:	f7ff ff76 	bl	8012004 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8012118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801211a:	2b00      	cmp	r3, #0
 801211c:	d002      	beq.n	8012124 <pbuf_alloc+0x78>
            pbuf_free(p);
 801211e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012120:	f000 faa8 	bl	8012674 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012124:	2300      	movs	r3, #0
 8012126:	e0a7      	b.n	8012278 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012128:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801212a:	3303      	adds	r3, #3
 801212c:	b29b      	uxth	r3, r3
 801212e:	f023 0303 	bic.w	r3, r3, #3
 8012132:	b29b      	uxth	r3, r3
 8012134:	f5c3 7314 	rsb	r3, r3, #592	@ 0x250
 8012138:	b29b      	uxth	r3, r3
 801213a:	8b7a      	ldrh	r2, [r7, #26]
 801213c:	4293      	cmp	r3, r2
 801213e:	bf28      	it	cs
 8012140:	4613      	movcs	r3, r2
 8012142:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012144:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012146:	3310      	adds	r3, #16
 8012148:	693a      	ldr	r2, [r7, #16]
 801214a:	4413      	add	r3, r2
 801214c:	3303      	adds	r3, #3
 801214e:	f023 0303 	bic.w	r3, r3, #3
 8012152:	4618      	mov	r0, r3
 8012154:	89f9      	ldrh	r1, [r7, #14]
 8012156:	8b7a      	ldrh	r2, [r7, #26]
 8012158:	2300      	movs	r3, #0
 801215a:	9301      	str	r3, [sp, #4]
 801215c:	887b      	ldrh	r3, [r7, #2]
 801215e:	9300      	str	r3, [sp, #0]
 8012160:	460b      	mov	r3, r1
 8012162:	4601      	mov	r1, r0
 8012164:	6938      	ldr	r0, [r7, #16]
 8012166:	f7ff ff77 	bl	8012058 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801216a:	693b      	ldr	r3, [r7, #16]
 801216c:	685b      	ldr	r3, [r3, #4]
 801216e:	f003 0303 	and.w	r3, r3, #3
 8012172:	2b00      	cmp	r3, #0
 8012174:	d006      	beq.n	8012184 <pbuf_alloc+0xd8>
 8012176:	4b42      	ldr	r3, [pc, #264]	@ (8012280 <pbuf_alloc+0x1d4>)
 8012178:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801217c:	4941      	ldr	r1, [pc, #260]	@ (8012284 <pbuf_alloc+0x1d8>)
 801217e:	4842      	ldr	r0, [pc, #264]	@ (8012288 <pbuf_alloc+0x1dc>)
 8012180:	f00c fabe 	bl	801e700 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012184:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012186:	3303      	adds	r3, #3
 8012188:	f023 0303 	bic.w	r3, r3, #3
 801218c:	f5b3 7f14 	cmp.w	r3, #592	@ 0x250
 8012190:	d106      	bne.n	80121a0 <pbuf_alloc+0xf4>
 8012192:	4b3b      	ldr	r3, [pc, #236]	@ (8012280 <pbuf_alloc+0x1d4>)
 8012194:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8012198:	493c      	ldr	r1, [pc, #240]	@ (801228c <pbuf_alloc+0x1e0>)
 801219a:	483b      	ldr	r0, [pc, #236]	@ (8012288 <pbuf_alloc+0x1dc>)
 801219c:	f00c fab0 	bl	801e700 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80121a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d102      	bne.n	80121ac <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80121a6:	693b      	ldr	r3, [r7, #16]
 80121a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80121aa:	e002      	b.n	80121b2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80121ac:	69fb      	ldr	r3, [r7, #28]
 80121ae:	693a      	ldr	r2, [r7, #16]
 80121b0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80121b2:	693b      	ldr	r3, [r7, #16]
 80121b4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80121b6:	8b7a      	ldrh	r2, [r7, #26]
 80121b8:	89fb      	ldrh	r3, [r7, #14]
 80121ba:	1ad3      	subs	r3, r2, r3
 80121bc:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80121be:	2300      	movs	r3, #0
 80121c0:	847b      	strh	r3, [r7, #34]	@ 0x22
      } while (rem_len > 0);
 80121c2:	8b7b      	ldrh	r3, [r7, #26]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d19e      	bne.n	8012106 <pbuf_alloc+0x5a>
      break;
 80121c8:	e055      	b.n	8012276 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80121ca:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80121cc:	3303      	adds	r3, #3
 80121ce:	b29b      	uxth	r3, r3
 80121d0:	f023 0303 	bic.w	r3, r3, #3
 80121d4:	b29a      	uxth	r2, r3
 80121d6:	88bb      	ldrh	r3, [r7, #4]
 80121d8:	3303      	adds	r3, #3
 80121da:	b29b      	uxth	r3, r3
 80121dc:	f023 0303 	bic.w	r3, r3, #3
 80121e0:	b29b      	uxth	r3, r3
 80121e2:	4413      	add	r3, r2
 80121e4:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80121e6:	8b3b      	ldrh	r3, [r7, #24]
 80121e8:	3310      	adds	r3, #16
 80121ea:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80121ec:	8b3a      	ldrh	r2, [r7, #24]
 80121ee:	88bb      	ldrh	r3, [r7, #4]
 80121f0:	3303      	adds	r3, #3
 80121f2:	f023 0303 	bic.w	r3, r3, #3
 80121f6:	429a      	cmp	r2, r3
 80121f8:	d306      	bcc.n	8012208 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80121fa:	8afa      	ldrh	r2, [r7, #22]
 80121fc:	88bb      	ldrh	r3, [r7, #4]
 80121fe:	3303      	adds	r3, #3
 8012200:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012204:	429a      	cmp	r2, r3
 8012206:	d201      	bcs.n	801220c <pbuf_alloc+0x160>
        return NULL;
 8012208:	2300      	movs	r3, #0
 801220a:	e035      	b.n	8012278 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801220c:	8afb      	ldrh	r3, [r7, #22]
 801220e:	4618      	mov	r0, r3
 8012210:	f7ff f966 	bl	80114e0 <mem_malloc>
 8012214:	6278      	str	r0, [r7, #36]	@ 0x24
      if (p == NULL) {
 8012216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012218:	2b00      	cmp	r3, #0
 801221a:	d101      	bne.n	8012220 <pbuf_alloc+0x174>
        return NULL;
 801221c:	2300      	movs	r3, #0
 801221e:	e02b      	b.n	8012278 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012220:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8012222:	3310      	adds	r3, #16
 8012224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012226:	4413      	add	r3, r2
 8012228:	3303      	adds	r3, #3
 801222a:	f023 0303 	bic.w	r3, r3, #3
 801222e:	4618      	mov	r0, r3
 8012230:	88b9      	ldrh	r1, [r7, #4]
 8012232:	88ba      	ldrh	r2, [r7, #4]
 8012234:	2300      	movs	r3, #0
 8012236:	9301      	str	r3, [sp, #4]
 8012238:	887b      	ldrh	r3, [r7, #2]
 801223a:	9300      	str	r3, [sp, #0]
 801223c:	460b      	mov	r3, r1
 801223e:	4601      	mov	r1, r0
 8012240:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8012242:	f7ff ff09 	bl	8012058 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8012246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012248:	685b      	ldr	r3, [r3, #4]
 801224a:	f003 0303 	and.w	r3, r3, #3
 801224e:	2b00      	cmp	r3, #0
 8012250:	d010      	beq.n	8012274 <pbuf_alloc+0x1c8>
 8012252:	4b0b      	ldr	r3, [pc, #44]	@ (8012280 <pbuf_alloc+0x1d4>)
 8012254:	f44f 7291 	mov.w	r2, #290	@ 0x122
 8012258:	490d      	ldr	r1, [pc, #52]	@ (8012290 <pbuf_alloc+0x1e4>)
 801225a:	480b      	ldr	r0, [pc, #44]	@ (8012288 <pbuf_alloc+0x1dc>)
 801225c:	f00c fa50 	bl	801e700 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012260:	e008      	b.n	8012274 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012262:	4b07      	ldr	r3, [pc, #28]	@ (8012280 <pbuf_alloc+0x1d4>)
 8012264:	f240 1227 	movw	r2, #295	@ 0x127
 8012268:	490a      	ldr	r1, [pc, #40]	@ (8012294 <pbuf_alloc+0x1e8>)
 801226a:	4807      	ldr	r0, [pc, #28]	@ (8012288 <pbuf_alloc+0x1dc>)
 801226c:	f00c fa48 	bl	801e700 <iprintf>
      return NULL;
 8012270:	2300      	movs	r3, #0
 8012272:	e001      	b.n	8012278 <pbuf_alloc+0x1cc>
      break;
 8012274:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8012276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8012278:	4618      	mov	r0, r3
 801227a:	3728      	adds	r7, #40	@ 0x28
 801227c:	46bd      	mov	sp, r7
 801227e:	bd80      	pop	{r7, pc}
 8012280:	080227c0 	.word	0x080227c0
 8012284:	080227f0 	.word	0x080227f0
 8012288:	08022820 	.word	0x08022820
 801228c:	08022848 	.word	0x08022848
 8012290:	0802287c 	.word	0x0802287c
 8012294:	080228a8 	.word	0x080228a8

08012298 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8012298:	b580      	push	{r7, lr}
 801229a:	b086      	sub	sp, #24
 801229c:	af02      	add	r7, sp, #8
 801229e:	6078      	str	r0, [r7, #4]
 80122a0:	460b      	mov	r3, r1
 80122a2:	807b      	strh	r3, [r7, #2]
 80122a4:	4613      	mov	r3, r2
 80122a6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80122a8:	883b      	ldrh	r3, [r7, #0]
 80122aa:	2b41      	cmp	r3, #65	@ 0x41
 80122ac:	d009      	beq.n	80122c2 <pbuf_alloc_reference+0x2a>
 80122ae:	883b      	ldrh	r3, [r7, #0]
 80122b0:	2b01      	cmp	r3, #1
 80122b2:	d006      	beq.n	80122c2 <pbuf_alloc_reference+0x2a>
 80122b4:	4b0f      	ldr	r3, [pc, #60]	@ (80122f4 <pbuf_alloc_reference+0x5c>)
 80122b6:	f44f 72a5 	mov.w	r2, #330	@ 0x14a
 80122ba:	490f      	ldr	r1, [pc, #60]	@ (80122f8 <pbuf_alloc_reference+0x60>)
 80122bc:	480f      	ldr	r0, [pc, #60]	@ (80122fc <pbuf_alloc_reference+0x64>)
 80122be:	f00c fa1f 	bl	801e700 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80122c2:	200c      	movs	r0, #12
 80122c4:	f7ff fab0 	bl	8011828 <memp_malloc>
 80122c8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80122ca:	68fb      	ldr	r3, [r7, #12]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d101      	bne.n	80122d4 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80122d0:	2300      	movs	r3, #0
 80122d2:	e00b      	b.n	80122ec <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80122d4:	8879      	ldrh	r1, [r7, #2]
 80122d6:	887a      	ldrh	r2, [r7, #2]
 80122d8:	2300      	movs	r3, #0
 80122da:	9301      	str	r3, [sp, #4]
 80122dc:	883b      	ldrh	r3, [r7, #0]
 80122de:	9300      	str	r3, [sp, #0]
 80122e0:	460b      	mov	r3, r1
 80122e2:	6879      	ldr	r1, [r7, #4]
 80122e4:	68f8      	ldr	r0, [r7, #12]
 80122e6:	f7ff feb7 	bl	8012058 <pbuf_init_alloced_pbuf>
  return p;
 80122ea:	68fb      	ldr	r3, [r7, #12]
}
 80122ec:	4618      	mov	r0, r3
 80122ee:	3710      	adds	r7, #16
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}
 80122f4:	080227c0 	.word	0x080227c0
 80122f8:	080228c4 	.word	0x080228c4
 80122fc:	08022820 	.word	0x08022820

08012300 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b088      	sub	sp, #32
 8012304:	af02      	add	r7, sp, #8
 8012306:	607b      	str	r3, [r7, #4]
 8012308:	4603      	mov	r3, r0
 801230a:	73fb      	strb	r3, [r7, #15]
 801230c:	460b      	mov	r3, r1
 801230e:	81bb      	strh	r3, [r7, #12]
 8012310:	4613      	mov	r3, r2
 8012312:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012314:	7bfb      	ldrb	r3, [r7, #15]
 8012316:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8012318:	8a7b      	ldrh	r3, [r7, #18]
 801231a:	3303      	adds	r3, #3
 801231c:	f023 0203 	bic.w	r2, r3, #3
 8012320:	89bb      	ldrh	r3, [r7, #12]
 8012322:	441a      	add	r2, r3
 8012324:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8012326:	429a      	cmp	r2, r3
 8012328:	d901      	bls.n	801232e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801232a:	2300      	movs	r3, #0
 801232c:	e018      	b.n	8012360 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801232e:	6a3b      	ldr	r3, [r7, #32]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d007      	beq.n	8012344 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012334:	8a7b      	ldrh	r3, [r7, #18]
 8012336:	3303      	adds	r3, #3
 8012338:	f023 0303 	bic.w	r3, r3, #3
 801233c:	6a3a      	ldr	r2, [r7, #32]
 801233e:	4413      	add	r3, r2
 8012340:	617b      	str	r3, [r7, #20]
 8012342:	e001      	b.n	8012348 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012344:	2300      	movs	r3, #0
 8012346:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012348:	6878      	ldr	r0, [r7, #4]
 801234a:	89b9      	ldrh	r1, [r7, #12]
 801234c:	89ba      	ldrh	r2, [r7, #12]
 801234e:	2302      	movs	r3, #2
 8012350:	9301      	str	r3, [sp, #4]
 8012352:	897b      	ldrh	r3, [r7, #10]
 8012354:	9300      	str	r3, [sp, #0]
 8012356:	460b      	mov	r3, r1
 8012358:	6979      	ldr	r1, [r7, #20]
 801235a:	f7ff fe7d 	bl	8012058 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801235e:	687b      	ldr	r3, [r7, #4]
}
 8012360:	4618      	mov	r0, r3
 8012362:	3718      	adds	r7, #24
 8012364:	46bd      	mov	sp, r7
 8012366:	bd80      	pop	{r7, pc}

08012368 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012368:	b580      	push	{r7, lr}
 801236a:	b084      	sub	sp, #16
 801236c:	af00      	add	r7, sp, #0
 801236e:	6078      	str	r0, [r7, #4]
 8012370:	460b      	mov	r3, r1
 8012372:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	2b00      	cmp	r3, #0
 8012378:	d106      	bne.n	8012388 <pbuf_realloc+0x20>
 801237a:	4b3a      	ldr	r3, [pc, #232]	@ (8012464 <pbuf_realloc+0xfc>)
 801237c:	f44f 72cc 	mov.w	r2, #408	@ 0x198
 8012380:	4939      	ldr	r1, [pc, #228]	@ (8012468 <pbuf_realloc+0x100>)
 8012382:	483a      	ldr	r0, [pc, #232]	@ (801246c <pbuf_realloc+0x104>)
 8012384:	f00c f9bc 	bl	801e700 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	891b      	ldrh	r3, [r3, #8]
 801238c:	887a      	ldrh	r2, [r7, #2]
 801238e:	429a      	cmp	r2, r3
 8012390:	d263      	bcs.n	801245a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	891a      	ldrh	r2, [r3, #8]
 8012396:	887b      	ldrh	r3, [r7, #2]
 8012398:	1ad3      	subs	r3, r2, r3
 801239a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801239c:	887b      	ldrh	r3, [r7, #2]
 801239e:	817b      	strh	r3, [r7, #10]
  q = p;
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80123a4:	e018      	b.n	80123d8 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80123a6:	68fb      	ldr	r3, [r7, #12]
 80123a8:	895b      	ldrh	r3, [r3, #10]
 80123aa:	897a      	ldrh	r2, [r7, #10]
 80123ac:	1ad3      	subs	r3, r2, r3
 80123ae:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	891a      	ldrh	r2, [r3, #8]
 80123b4:	893b      	ldrh	r3, [r7, #8]
 80123b6:	1ad3      	subs	r3, r2, r3
 80123b8:	b29a      	uxth	r2, r3
 80123ba:	68fb      	ldr	r3, [r7, #12]
 80123bc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	d106      	bne.n	80123d8 <pbuf_realloc+0x70>
 80123ca:	4b26      	ldr	r3, [pc, #152]	@ (8012464 <pbuf_realloc+0xfc>)
 80123cc:	f240 12af 	movw	r2, #431	@ 0x1af
 80123d0:	4927      	ldr	r1, [pc, #156]	@ (8012470 <pbuf_realloc+0x108>)
 80123d2:	4826      	ldr	r0, [pc, #152]	@ (801246c <pbuf_realloc+0x104>)
 80123d4:	f00c f994 	bl	801e700 <iprintf>
  while (rem_len > q->len) {
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	895b      	ldrh	r3, [r3, #10]
 80123dc:	897a      	ldrh	r2, [r7, #10]
 80123de:	429a      	cmp	r2, r3
 80123e0:	d8e1      	bhi.n	80123a6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	7b1b      	ldrb	r3, [r3, #12]
 80123e6:	f003 030f 	and.w	r3, r3, #15
 80123ea:	2b00      	cmp	r3, #0
 80123ec:	d121      	bne.n	8012432 <pbuf_realloc+0xca>
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	895b      	ldrh	r3, [r3, #10]
 80123f2:	897a      	ldrh	r2, [r7, #10]
 80123f4:	429a      	cmp	r2, r3
 80123f6:	d01c      	beq.n	8012432 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	7b5b      	ldrb	r3, [r3, #13]
 80123fc:	f003 0302 	and.w	r3, r3, #2
 8012400:	2b00      	cmp	r3, #0
 8012402:	d116      	bne.n	8012432 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	685a      	ldr	r2, [r3, #4]
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	1ad3      	subs	r3, r2, r3
 801240c:	b29a      	uxth	r2, r3
 801240e:	897b      	ldrh	r3, [r7, #10]
 8012410:	4413      	add	r3, r2
 8012412:	b29b      	uxth	r3, r3
 8012414:	4619      	mov	r1, r3
 8012416:	68f8      	ldr	r0, [r7, #12]
 8012418:	f7fe ff58 	bl	80112cc <mem_trim>
 801241c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801241e:	68fb      	ldr	r3, [r7, #12]
 8012420:	2b00      	cmp	r3, #0
 8012422:	d106      	bne.n	8012432 <pbuf_realloc+0xca>
 8012424:	4b0f      	ldr	r3, [pc, #60]	@ (8012464 <pbuf_realloc+0xfc>)
 8012426:	f240 12bd 	movw	r2, #445	@ 0x1bd
 801242a:	4912      	ldr	r1, [pc, #72]	@ (8012474 <pbuf_realloc+0x10c>)
 801242c:	480f      	ldr	r0, [pc, #60]	@ (801246c <pbuf_realloc+0x104>)
 801242e:	f00c f967 	bl	801e700 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	897a      	ldrh	r2, [r7, #10]
 8012436:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	895a      	ldrh	r2, [r3, #10]
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	681b      	ldr	r3, [r3, #0]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d004      	beq.n	8012452 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	681b      	ldr	r3, [r3, #0]
 801244c:	4618      	mov	r0, r3
 801244e:	f000 f911 	bl	8012674 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	2200      	movs	r2, #0
 8012456:	601a      	str	r2, [r3, #0]
 8012458:	e000      	b.n	801245c <pbuf_realloc+0xf4>
    return;
 801245a:	bf00      	nop

}
 801245c:	3710      	adds	r7, #16
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}
 8012462:	bf00      	nop
 8012464:	080227c0 	.word	0x080227c0
 8012468:	080228d8 	.word	0x080228d8
 801246c:	08022820 	.word	0x08022820
 8012470:	080228f0 	.word	0x080228f0
 8012474:	08022908 	.word	0x08022908

08012478 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012478:	b580      	push	{r7, lr}
 801247a:	b086      	sub	sp, #24
 801247c:	af00      	add	r7, sp, #0
 801247e:	60f8      	str	r0, [r7, #12]
 8012480:	60b9      	str	r1, [r7, #8]
 8012482:	4613      	mov	r3, r2
 8012484:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d106      	bne.n	801249a <pbuf_add_header_impl+0x22>
 801248c:	4b2b      	ldr	r3, [pc, #172]	@ (801253c <pbuf_add_header_impl+0xc4>)
 801248e:	f240 12df 	movw	r2, #479	@ 0x1df
 8012492:	492b      	ldr	r1, [pc, #172]	@ (8012540 <pbuf_add_header_impl+0xc8>)
 8012494:	482b      	ldr	r0, [pc, #172]	@ (8012544 <pbuf_add_header_impl+0xcc>)
 8012496:	f00c f933 	bl	801e700 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d003      	beq.n	80124a8 <pbuf_add_header_impl+0x30>
 80124a0:	68bb      	ldr	r3, [r7, #8]
 80124a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80124a6:	d301      	bcc.n	80124ac <pbuf_add_header_impl+0x34>
    return 1;
 80124a8:	2301      	movs	r3, #1
 80124aa:	e043      	b.n	8012534 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80124ac:	68bb      	ldr	r3, [r7, #8]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d101      	bne.n	80124b6 <pbuf_add_header_impl+0x3e>
    return 0;
 80124b2:	2300      	movs	r3, #0
 80124b4:	e03e      	b.n	8012534 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80124b6:	68bb      	ldr	r3, [r7, #8]
 80124b8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	891a      	ldrh	r2, [r3, #8]
 80124be:	8a7b      	ldrh	r3, [r7, #18]
 80124c0:	4413      	add	r3, r2
 80124c2:	b29b      	uxth	r3, r3
 80124c4:	8a7a      	ldrh	r2, [r7, #18]
 80124c6:	429a      	cmp	r2, r3
 80124c8:	d901      	bls.n	80124ce <pbuf_add_header_impl+0x56>
    return 1;
 80124ca:	2301      	movs	r3, #1
 80124cc:	e032      	b.n	8012534 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	7b1b      	ldrb	r3, [r3, #12]
 80124d2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80124d4:	8a3b      	ldrh	r3, [r7, #16]
 80124d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d00c      	beq.n	80124f8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80124de:	68fb      	ldr	r3, [r7, #12]
 80124e0:	685a      	ldr	r2, [r3, #4]
 80124e2:	68bb      	ldr	r3, [r7, #8]
 80124e4:	425b      	negs	r3, r3
 80124e6:	4413      	add	r3, r2
 80124e8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80124ea:	68fb      	ldr	r3, [r7, #12]
 80124ec:	3310      	adds	r3, #16
 80124ee:	697a      	ldr	r2, [r7, #20]
 80124f0:	429a      	cmp	r2, r3
 80124f2:	d20d      	bcs.n	8012510 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80124f4:	2301      	movs	r3, #1
 80124f6:	e01d      	b.n	8012534 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80124f8:	79fb      	ldrb	r3, [r7, #7]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d006      	beq.n	801250c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	685a      	ldr	r2, [r3, #4]
 8012502:	68bb      	ldr	r3, [r7, #8]
 8012504:	425b      	negs	r3, r3
 8012506:	4413      	add	r3, r2
 8012508:	617b      	str	r3, [r7, #20]
 801250a:	e001      	b.n	8012510 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801250c:	2301      	movs	r3, #1
 801250e:	e011      	b.n	8012534 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	697a      	ldr	r2, [r7, #20]
 8012514:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	895a      	ldrh	r2, [r3, #10]
 801251a:	8a7b      	ldrh	r3, [r7, #18]
 801251c:	4413      	add	r3, r2
 801251e:	b29a      	uxth	r2, r3
 8012520:	68fb      	ldr	r3, [r7, #12]
 8012522:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	891a      	ldrh	r2, [r3, #8]
 8012528:	8a7b      	ldrh	r3, [r7, #18]
 801252a:	4413      	add	r3, r2
 801252c:	b29a      	uxth	r2, r3
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	811a      	strh	r2, [r3, #8]


  return 0;
 8012532:	2300      	movs	r3, #0
}
 8012534:	4618      	mov	r0, r3
 8012536:	3718      	adds	r7, #24
 8012538:	46bd      	mov	sp, r7
 801253a:	bd80      	pop	{r7, pc}
 801253c:	080227c0 	.word	0x080227c0
 8012540:	08022924 	.word	0x08022924
 8012544:	08022820 	.word	0x08022820

08012548 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b082      	sub	sp, #8
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]
 8012550:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8012552:	2200      	movs	r2, #0
 8012554:	6839      	ldr	r1, [r7, #0]
 8012556:	6878      	ldr	r0, [r7, #4]
 8012558:	f7ff ff8e 	bl	8012478 <pbuf_add_header_impl>
 801255c:	4603      	mov	r3, r0
}
 801255e:	4618      	mov	r0, r3
 8012560:	3708      	adds	r7, #8
 8012562:	46bd      	mov	sp, r7
 8012564:	bd80      	pop	{r7, pc}
	...

08012568 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b084      	sub	sp, #16
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]
 8012570:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2b00      	cmp	r3, #0
 8012576:	d106      	bne.n	8012586 <pbuf_remove_header+0x1e>
 8012578:	4b20      	ldr	r3, [pc, #128]	@ (80125fc <pbuf_remove_header+0x94>)
 801257a:	f240 224b 	movw	r2, #587	@ 0x24b
 801257e:	4920      	ldr	r1, [pc, #128]	@ (8012600 <pbuf_remove_header+0x98>)
 8012580:	4820      	ldr	r0, [pc, #128]	@ (8012604 <pbuf_remove_header+0x9c>)
 8012582:	f00c f8bd 	bl	801e700 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d003      	beq.n	8012594 <pbuf_remove_header+0x2c>
 801258c:	683b      	ldr	r3, [r7, #0]
 801258e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012592:	d301      	bcc.n	8012598 <pbuf_remove_header+0x30>
    return 1;
 8012594:	2301      	movs	r3, #1
 8012596:	e02c      	b.n	80125f2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d101      	bne.n	80125a2 <pbuf_remove_header+0x3a>
    return 0;
 801259e:	2300      	movs	r3, #0
 80125a0:	e027      	b.n	80125f2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80125a2:	683b      	ldr	r3, [r7, #0]
 80125a4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	895b      	ldrh	r3, [r3, #10]
 80125aa:	89fa      	ldrh	r2, [r7, #14]
 80125ac:	429a      	cmp	r2, r3
 80125ae:	d908      	bls.n	80125c2 <pbuf_remove_header+0x5a>
 80125b0:	4b12      	ldr	r3, [pc, #72]	@ (80125fc <pbuf_remove_header+0x94>)
 80125b2:	f240 2255 	movw	r2, #597	@ 0x255
 80125b6:	4914      	ldr	r1, [pc, #80]	@ (8012608 <pbuf_remove_header+0xa0>)
 80125b8:	4812      	ldr	r0, [pc, #72]	@ (8012604 <pbuf_remove_header+0x9c>)
 80125ba:	f00c f8a1 	bl	801e700 <iprintf>
 80125be:	2301      	movs	r3, #1
 80125c0:	e017      	b.n	80125f2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	685b      	ldr	r3, [r3, #4]
 80125c6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	685a      	ldr	r2, [r3, #4]
 80125cc:	683b      	ldr	r3, [r7, #0]
 80125ce:	441a      	add	r2, r3
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	895a      	ldrh	r2, [r3, #10]
 80125d8:	89fb      	ldrh	r3, [r7, #14]
 80125da:	1ad3      	subs	r3, r2, r3
 80125dc:	b29a      	uxth	r2, r3
 80125de:	687b      	ldr	r3, [r7, #4]
 80125e0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	891a      	ldrh	r2, [r3, #8]
 80125e6:	89fb      	ldrh	r3, [r7, #14]
 80125e8:	1ad3      	subs	r3, r2, r3
 80125ea:	b29a      	uxth	r2, r3
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80125f0:	2300      	movs	r3, #0
}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3710      	adds	r7, #16
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}
 80125fa:	bf00      	nop
 80125fc:	080227c0 	.word	0x080227c0
 8012600:	08022924 	.word	0x08022924
 8012604:	08022820 	.word	0x08022820
 8012608:	08022930 	.word	0x08022930

0801260c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801260c:	b580      	push	{r7, lr}
 801260e:	b082      	sub	sp, #8
 8012610:	af00      	add	r7, sp, #0
 8012612:	6078      	str	r0, [r7, #4]
 8012614:	460b      	mov	r3, r1
 8012616:	807b      	strh	r3, [r7, #2]
 8012618:	4613      	mov	r3, r2
 801261a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801261c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012620:	2b00      	cmp	r3, #0
 8012622:	da08      	bge.n	8012636 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8012624:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012628:	425b      	negs	r3, r3
 801262a:	4619      	mov	r1, r3
 801262c:	6878      	ldr	r0, [r7, #4]
 801262e:	f7ff ff9b 	bl	8012568 <pbuf_remove_header>
 8012632:	4603      	mov	r3, r0
 8012634:	e007      	b.n	8012646 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8012636:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801263a:	787a      	ldrb	r2, [r7, #1]
 801263c:	4619      	mov	r1, r3
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f7ff ff1a 	bl	8012478 <pbuf_add_header_impl>
 8012644:	4603      	mov	r3, r0
  }
}
 8012646:	4618      	mov	r0, r3
 8012648:	3708      	adds	r7, #8
 801264a:	46bd      	mov	sp, r7
 801264c:	bd80      	pop	{r7, pc}

0801264e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801264e:	b580      	push	{r7, lr}
 8012650:	b082      	sub	sp, #8
 8012652:	af00      	add	r7, sp, #0
 8012654:	6078      	str	r0, [r7, #4]
 8012656:	460b      	mov	r3, r1
 8012658:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801265a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801265e:	2201      	movs	r2, #1
 8012660:	4619      	mov	r1, r3
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	f7ff ffd2 	bl	801260c <pbuf_header_impl>
 8012668:	4603      	mov	r3, r0
}
 801266a:	4618      	mov	r0, r3
 801266c:	3708      	adds	r7, #8
 801266e:	46bd      	mov	sp, r7
 8012670:	bd80      	pop	{r7, pc}
	...

08012674 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8012674:	b580      	push	{r7, lr}
 8012676:	b088      	sub	sp, #32
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d10b      	bne.n	801269a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2b00      	cmp	r3, #0
 8012686:	d106      	bne.n	8012696 <pbuf_free+0x22>
 8012688:	4b3b      	ldr	r3, [pc, #236]	@ (8012778 <pbuf_free+0x104>)
 801268a:	f44f 7237 	mov.w	r2, #732	@ 0x2dc
 801268e:	493b      	ldr	r1, [pc, #236]	@ (801277c <pbuf_free+0x108>)
 8012690:	483b      	ldr	r0, [pc, #236]	@ (8012780 <pbuf_free+0x10c>)
 8012692:	f00c f835 	bl	801e700 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8012696:	2300      	movs	r3, #0
 8012698:	e069      	b.n	801276e <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801269a:	2300      	movs	r3, #0
 801269c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801269e:	e062      	b.n	8012766 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80126a0:	f00a fe6e 	bl	801d380 <sys_arch_protect>
 80126a4:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	7b9b      	ldrb	r3, [r3, #14]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d106      	bne.n	80126bc <pbuf_free+0x48>
 80126ae:	4b32      	ldr	r3, [pc, #200]	@ (8012778 <pbuf_free+0x104>)
 80126b0:	f240 22f1 	movw	r2, #753	@ 0x2f1
 80126b4:	4933      	ldr	r1, [pc, #204]	@ (8012784 <pbuf_free+0x110>)
 80126b6:	4832      	ldr	r0, [pc, #200]	@ (8012780 <pbuf_free+0x10c>)
 80126b8:	f00c f822 	bl	801e700 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	7b9b      	ldrb	r3, [r3, #14]
 80126c0:	3b01      	subs	r3, #1
 80126c2:	b2da      	uxtb	r2, r3
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	739a      	strb	r2, [r3, #14]
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	7b9b      	ldrb	r3, [r3, #14]
 80126cc:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80126ce:	69b8      	ldr	r0, [r7, #24]
 80126d0:	f00a fe64 	bl	801d39c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80126d4:	7dfb      	ldrb	r3, [r7, #23]
 80126d6:	2b00      	cmp	r3, #0
 80126d8:	d143      	bne.n	8012762 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80126da:	687b      	ldr	r3, [r7, #4]
 80126dc:	681b      	ldr	r3, [r3, #0]
 80126de:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	7b1b      	ldrb	r3, [r3, #12]
 80126e4:	f003 030f 	and.w	r3, r3, #15
 80126e8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	7b5b      	ldrb	r3, [r3, #13]
 80126ee:	f003 0302 	and.w	r3, r3, #2
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d011      	beq.n	801271a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80126fa:	68bb      	ldr	r3, [r7, #8]
 80126fc:	691b      	ldr	r3, [r3, #16]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d106      	bne.n	8012710 <pbuf_free+0x9c>
 8012702:	4b1d      	ldr	r3, [pc, #116]	@ (8012778 <pbuf_free+0x104>)
 8012704:	f240 22ff 	movw	r2, #767	@ 0x2ff
 8012708:	491f      	ldr	r1, [pc, #124]	@ (8012788 <pbuf_free+0x114>)
 801270a:	481d      	ldr	r0, [pc, #116]	@ (8012780 <pbuf_free+0x10c>)
 801270c:	f00b fff8 	bl	801e700 <iprintf>
        pc->custom_free_function(p);
 8012710:	68bb      	ldr	r3, [r7, #8]
 8012712:	691b      	ldr	r3, [r3, #16]
 8012714:	6878      	ldr	r0, [r7, #4]
 8012716:	4798      	blx	r3
 8012718:	e01d      	b.n	8012756 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801271a:	7bfb      	ldrb	r3, [r7, #15]
 801271c:	2b02      	cmp	r3, #2
 801271e:	d104      	bne.n	801272a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8012720:	6879      	ldr	r1, [r7, #4]
 8012722:	200d      	movs	r0, #13
 8012724:	f7ff f8f6 	bl	8011914 <memp_free>
 8012728:	e015      	b.n	8012756 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801272a:	7bfb      	ldrb	r3, [r7, #15]
 801272c:	2b01      	cmp	r3, #1
 801272e:	d104      	bne.n	801273a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8012730:	6879      	ldr	r1, [r7, #4]
 8012732:	200c      	movs	r0, #12
 8012734:	f7ff f8ee 	bl	8011914 <memp_free>
 8012738:	e00d      	b.n	8012756 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801273a:	7bfb      	ldrb	r3, [r7, #15]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d103      	bne.n	8012748 <pbuf_free+0xd4>
          mem_free(p);
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f7fe fd33 	bl	80111ac <mem_free>
 8012746:	e006      	b.n	8012756 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8012748:	4b0b      	ldr	r3, [pc, #44]	@ (8012778 <pbuf_free+0x104>)
 801274a:	f240 320f 	movw	r2, #783	@ 0x30f
 801274e:	490f      	ldr	r1, [pc, #60]	@ (801278c <pbuf_free+0x118>)
 8012750:	480b      	ldr	r0, [pc, #44]	@ (8012780 <pbuf_free+0x10c>)
 8012752:	f00b ffd5 	bl	801e700 <iprintf>
        }
      }
      count++;
 8012756:	7ffb      	ldrb	r3, [r7, #31]
 8012758:	3301      	adds	r3, #1
 801275a:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 801275c:	693b      	ldr	r3, [r7, #16]
 801275e:	607b      	str	r3, [r7, #4]
 8012760:	e001      	b.n	8012766 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8012762:	2300      	movs	r3, #0
 8012764:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d199      	bne.n	80126a0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801276c:	7ffb      	ldrb	r3, [r7, #31]
}
 801276e:	4618      	mov	r0, r3
 8012770:	3720      	adds	r7, #32
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}
 8012776:	bf00      	nop
 8012778:	080227c0 	.word	0x080227c0
 801277c:	08022924 	.word	0x08022924
 8012780:	08022820 	.word	0x08022820
 8012784:	08022950 	.word	0x08022950
 8012788:	08022968 	.word	0x08022968
 801278c:	0802298c 	.word	0x0802298c

08012790 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8012790:	b480      	push	{r7}
 8012792:	b085      	sub	sp, #20
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8012798:	2300      	movs	r3, #0
 801279a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801279c:	e005      	b.n	80127aa <pbuf_clen+0x1a>
    ++len;
 801279e:	89fb      	ldrh	r3, [r7, #14]
 80127a0:	3301      	adds	r3, #1
 80127a2:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d1f6      	bne.n	801279e <pbuf_clen+0xe>
  }
  return len;
 80127b0:	89fb      	ldrh	r3, [r7, #14]
}
 80127b2:	4618      	mov	r0, r3
 80127b4:	3714      	adds	r7, #20
 80127b6:	46bd      	mov	sp, r7
 80127b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127bc:	4770      	bx	lr
	...

080127c0 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80127c0:	b580      	push	{r7, lr}
 80127c2:	b084      	sub	sp, #16
 80127c4:	af00      	add	r7, sp, #0
 80127c6:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80127c8:	687b      	ldr	r3, [r7, #4]
 80127ca:	2b00      	cmp	r3, #0
 80127cc:	d016      	beq.n	80127fc <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80127ce:	f00a fdd7 	bl	801d380 <sys_arch_protect>
 80127d2:	60f8      	str	r0, [r7, #12]
 80127d4:	687b      	ldr	r3, [r7, #4]
 80127d6:	7b9b      	ldrb	r3, [r3, #14]
 80127d8:	3301      	adds	r3, #1
 80127da:	b2da      	uxtb	r2, r3
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	739a      	strb	r2, [r3, #14]
 80127e0:	68f8      	ldr	r0, [r7, #12]
 80127e2:	f00a fddb 	bl	801d39c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80127e6:	687b      	ldr	r3, [r7, #4]
 80127e8:	7b9b      	ldrb	r3, [r3, #14]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d106      	bne.n	80127fc <pbuf_ref+0x3c>
 80127ee:	4b05      	ldr	r3, [pc, #20]	@ (8012804 <pbuf_ref+0x44>)
 80127f0:	f240 3242 	movw	r2, #834	@ 0x342
 80127f4:	4904      	ldr	r1, [pc, #16]	@ (8012808 <pbuf_ref+0x48>)
 80127f6:	4805      	ldr	r0, [pc, #20]	@ (801280c <pbuf_ref+0x4c>)
 80127f8:	f00b ff82 	bl	801e700 <iprintf>
  }
}
 80127fc:	bf00      	nop
 80127fe:	3710      	adds	r7, #16
 8012800:	46bd      	mov	sp, r7
 8012802:	bd80      	pop	{r7, pc}
 8012804:	080227c0 	.word	0x080227c0
 8012808:	080229a0 	.word	0x080229a0
 801280c:	08022820 	.word	0x08022820

08012810 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8012810:	b580      	push	{r7, lr}
 8012812:	b084      	sub	sp, #16
 8012814:	af00      	add	r7, sp, #0
 8012816:	6078      	str	r0, [r7, #4]
 8012818:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	2b00      	cmp	r3, #0
 801281e:	d002      	beq.n	8012826 <pbuf_cat+0x16>
 8012820:	683b      	ldr	r3, [r7, #0]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d107      	bne.n	8012836 <pbuf_cat+0x26>
 8012826:	4b20      	ldr	r3, [pc, #128]	@ (80128a8 <pbuf_cat+0x98>)
 8012828:	f240 3259 	movw	r2, #857	@ 0x359
 801282c:	491f      	ldr	r1, [pc, #124]	@ (80128ac <pbuf_cat+0x9c>)
 801282e:	4820      	ldr	r0, [pc, #128]	@ (80128b0 <pbuf_cat+0xa0>)
 8012830:	f00b ff66 	bl	801e700 <iprintf>
 8012834:	e034      	b.n	80128a0 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	60fb      	str	r3, [r7, #12]
 801283a:	e00a      	b.n	8012852 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801283c:	68fb      	ldr	r3, [r7, #12]
 801283e:	891a      	ldrh	r2, [r3, #8]
 8012840:	683b      	ldr	r3, [r7, #0]
 8012842:	891b      	ldrh	r3, [r3, #8]
 8012844:	4413      	add	r3, r2
 8012846:	b29a      	uxth	r2, r3
 8012848:	68fb      	ldr	r3, [r7, #12]
 801284a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	60fb      	str	r3, [r7, #12]
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	2b00      	cmp	r3, #0
 8012858:	d1f0      	bne.n	801283c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	891a      	ldrh	r2, [r3, #8]
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	895b      	ldrh	r3, [r3, #10]
 8012862:	429a      	cmp	r2, r3
 8012864:	d006      	beq.n	8012874 <pbuf_cat+0x64>
 8012866:	4b10      	ldr	r3, [pc, #64]	@ (80128a8 <pbuf_cat+0x98>)
 8012868:	f240 3262 	movw	r2, #866	@ 0x362
 801286c:	4911      	ldr	r1, [pc, #68]	@ (80128b4 <pbuf_cat+0xa4>)
 801286e:	4810      	ldr	r0, [pc, #64]	@ (80128b0 <pbuf_cat+0xa0>)
 8012870:	f00b ff46 	bl	801e700 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	2b00      	cmp	r3, #0
 801287a:	d006      	beq.n	801288a <pbuf_cat+0x7a>
 801287c:	4b0a      	ldr	r3, [pc, #40]	@ (80128a8 <pbuf_cat+0x98>)
 801287e:	f240 3263 	movw	r2, #867	@ 0x363
 8012882:	490d      	ldr	r1, [pc, #52]	@ (80128b8 <pbuf_cat+0xa8>)
 8012884:	480a      	ldr	r0, [pc, #40]	@ (80128b0 <pbuf_cat+0xa0>)
 8012886:	f00b ff3b 	bl	801e700 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	891a      	ldrh	r2, [r3, #8]
 801288e:	683b      	ldr	r3, [r7, #0]
 8012890:	891b      	ldrh	r3, [r3, #8]
 8012892:	4413      	add	r3, r2
 8012894:	b29a      	uxth	r2, r3
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	683a      	ldr	r2, [r7, #0]
 801289e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80128a0:	3710      	adds	r7, #16
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bd80      	pop	{r7, pc}
 80128a6:	bf00      	nop
 80128a8:	080227c0 	.word	0x080227c0
 80128ac:	080229b4 	.word	0x080229b4
 80128b0:	08022820 	.word	0x08022820
 80128b4:	080229ec 	.word	0x080229ec
 80128b8:	08022a1c 	.word	0x08022a1c

080128bc <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 80128bc:	b580      	push	{r7, lr}
 80128be:	b082      	sub	sp, #8
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
 80128c4:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 80128c6:	6839      	ldr	r1, [r7, #0]
 80128c8:	6878      	ldr	r0, [r7, #4]
 80128ca:	f7ff ffa1 	bl	8012810 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80128ce:	6838      	ldr	r0, [r7, #0]
 80128d0:	f7ff ff76 	bl	80127c0 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80128d4:	bf00      	nop
 80128d6:	3708      	adds	r7, #8
 80128d8:	46bd      	mov	sp, r7
 80128da:	bd80      	pop	{r7, pc}

080128dc <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b086      	sub	sp, #24
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
 80128e4:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80128e6:	2300      	movs	r3, #0
 80128e8:	617b      	str	r3, [r7, #20]
 80128ea:	2300      	movs	r3, #0
 80128ec:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80128ee:	687b      	ldr	r3, [r7, #4]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d008      	beq.n	8012906 <pbuf_copy+0x2a>
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	2b00      	cmp	r3, #0
 80128f8:	d005      	beq.n	8012906 <pbuf_copy+0x2a>
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	891a      	ldrh	r2, [r3, #8]
 80128fe:	683b      	ldr	r3, [r7, #0]
 8012900:	891b      	ldrh	r3, [r3, #8]
 8012902:	429a      	cmp	r2, r3
 8012904:	d209      	bcs.n	801291a <pbuf_copy+0x3e>
 8012906:	4b57      	ldr	r3, [pc, #348]	@ (8012a64 <pbuf_copy+0x188>)
 8012908:	f240 32c9 	movw	r2, #969	@ 0x3c9
 801290c:	4956      	ldr	r1, [pc, #344]	@ (8012a68 <pbuf_copy+0x18c>)
 801290e:	4857      	ldr	r0, [pc, #348]	@ (8012a6c <pbuf_copy+0x190>)
 8012910:	f00b fef6 	bl	801e700 <iprintf>
 8012914:	f06f 030f 	mvn.w	r3, #15
 8012918:	e09f      	b.n	8012a5a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	895b      	ldrh	r3, [r3, #10]
 801291e:	461a      	mov	r2, r3
 8012920:	697b      	ldr	r3, [r7, #20]
 8012922:	1ad2      	subs	r2, r2, r3
 8012924:	683b      	ldr	r3, [r7, #0]
 8012926:	895b      	ldrh	r3, [r3, #10]
 8012928:	4619      	mov	r1, r3
 801292a:	693b      	ldr	r3, [r7, #16]
 801292c:	1acb      	subs	r3, r1, r3
 801292e:	429a      	cmp	r2, r3
 8012930:	d306      	bcc.n	8012940 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8012932:	683b      	ldr	r3, [r7, #0]
 8012934:	895b      	ldrh	r3, [r3, #10]
 8012936:	461a      	mov	r2, r3
 8012938:	693b      	ldr	r3, [r7, #16]
 801293a:	1ad3      	subs	r3, r2, r3
 801293c:	60fb      	str	r3, [r7, #12]
 801293e:	e005      	b.n	801294c <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	895b      	ldrh	r3, [r3, #10]
 8012944:	461a      	mov	r2, r3
 8012946:	697b      	ldr	r3, [r7, #20]
 8012948:	1ad3      	subs	r3, r2, r3
 801294a:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	685a      	ldr	r2, [r3, #4]
 8012950:	697b      	ldr	r3, [r7, #20]
 8012952:	18d0      	adds	r0, r2, r3
 8012954:	683b      	ldr	r3, [r7, #0]
 8012956:	685a      	ldr	r2, [r3, #4]
 8012958:	693b      	ldr	r3, [r7, #16]
 801295a:	4413      	add	r3, r2
 801295c:	68fa      	ldr	r2, [r7, #12]
 801295e:	4619      	mov	r1, r3
 8012960:	f00c f95d 	bl	801ec1e <memcpy>
    offset_to += len;
 8012964:	697a      	ldr	r2, [r7, #20]
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	4413      	add	r3, r2
 801296a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801296c:	693a      	ldr	r2, [r7, #16]
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	4413      	add	r3, r2
 8012972:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	895b      	ldrh	r3, [r3, #10]
 8012978:	461a      	mov	r2, r3
 801297a:	697b      	ldr	r3, [r7, #20]
 801297c:	4293      	cmp	r3, r2
 801297e:	d906      	bls.n	801298e <pbuf_copy+0xb2>
 8012980:	4b38      	ldr	r3, [pc, #224]	@ (8012a64 <pbuf_copy+0x188>)
 8012982:	f240 32d9 	movw	r2, #985	@ 0x3d9
 8012986:	493a      	ldr	r1, [pc, #232]	@ (8012a70 <pbuf_copy+0x194>)
 8012988:	4838      	ldr	r0, [pc, #224]	@ (8012a6c <pbuf_copy+0x190>)
 801298a:	f00b feb9 	bl	801e700 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801298e:	683b      	ldr	r3, [r7, #0]
 8012990:	895b      	ldrh	r3, [r3, #10]
 8012992:	461a      	mov	r2, r3
 8012994:	693b      	ldr	r3, [r7, #16]
 8012996:	4293      	cmp	r3, r2
 8012998:	d906      	bls.n	80129a8 <pbuf_copy+0xcc>
 801299a:	4b32      	ldr	r3, [pc, #200]	@ (8012a64 <pbuf_copy+0x188>)
 801299c:	f240 32da 	movw	r2, #986	@ 0x3da
 80129a0:	4934      	ldr	r1, [pc, #208]	@ (8012a74 <pbuf_copy+0x198>)
 80129a2:	4832      	ldr	r0, [pc, #200]	@ (8012a6c <pbuf_copy+0x190>)
 80129a4:	f00b feac 	bl	801e700 <iprintf>
    if (offset_from >= p_from->len) {
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	895b      	ldrh	r3, [r3, #10]
 80129ac:	461a      	mov	r2, r3
 80129ae:	693b      	ldr	r3, [r7, #16]
 80129b0:	4293      	cmp	r3, r2
 80129b2:	d304      	bcc.n	80129be <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 80129b4:	2300      	movs	r3, #0
 80129b6:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 80129b8:	683b      	ldr	r3, [r7, #0]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	895b      	ldrh	r3, [r3, #10]
 80129c2:	461a      	mov	r2, r3
 80129c4:	697b      	ldr	r3, [r7, #20]
 80129c6:	4293      	cmp	r3, r2
 80129c8:	d114      	bne.n	80129f4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80129ca:	2300      	movs	r3, #0
 80129cc:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	681b      	ldr	r3, [r3, #0]
 80129d2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d10c      	bne.n	80129f4 <pbuf_copy+0x118>
 80129da:	683b      	ldr	r3, [r7, #0]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d009      	beq.n	80129f4 <pbuf_copy+0x118>
 80129e0:	4b20      	ldr	r3, [pc, #128]	@ (8012a64 <pbuf_copy+0x188>)
 80129e2:	f44f 7279 	mov.w	r2, #996	@ 0x3e4
 80129e6:	4924      	ldr	r1, [pc, #144]	@ (8012a78 <pbuf_copy+0x19c>)
 80129e8:	4820      	ldr	r0, [pc, #128]	@ (8012a6c <pbuf_copy+0x190>)
 80129ea:	f00b fe89 	bl	801e700 <iprintf>
 80129ee:	f06f 030f 	mvn.w	r3, #15
 80129f2:	e032      	b.n	8012a5a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80129f4:	683b      	ldr	r3, [r7, #0]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d013      	beq.n	8012a22 <pbuf_copy+0x146>
 80129fa:	683b      	ldr	r3, [r7, #0]
 80129fc:	895a      	ldrh	r2, [r3, #10]
 80129fe:	683b      	ldr	r3, [r7, #0]
 8012a00:	891b      	ldrh	r3, [r3, #8]
 8012a02:	429a      	cmp	r2, r3
 8012a04:	d10d      	bne.n	8012a22 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012a06:	683b      	ldr	r3, [r7, #0]
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d009      	beq.n	8012a22 <pbuf_copy+0x146>
 8012a0e:	4b15      	ldr	r3, [pc, #84]	@ (8012a64 <pbuf_copy+0x188>)
 8012a10:	f240 32e9 	movw	r2, #1001	@ 0x3e9
 8012a14:	4919      	ldr	r1, [pc, #100]	@ (8012a7c <pbuf_copy+0x1a0>)
 8012a16:	4815      	ldr	r0, [pc, #84]	@ (8012a6c <pbuf_copy+0x190>)
 8012a18:	f00b fe72 	bl	801e700 <iprintf>
 8012a1c:	f06f 0305 	mvn.w	r3, #5
 8012a20:	e01b      	b.n	8012a5a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	d013      	beq.n	8012a50 <pbuf_copy+0x174>
 8012a28:	687b      	ldr	r3, [r7, #4]
 8012a2a:	895a      	ldrh	r2, [r3, #10]
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	891b      	ldrh	r3, [r3, #8]
 8012a30:	429a      	cmp	r2, r3
 8012a32:	d10d      	bne.n	8012a50 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d009      	beq.n	8012a50 <pbuf_copy+0x174>
 8012a3c:	4b09      	ldr	r3, [pc, #36]	@ (8012a64 <pbuf_copy+0x188>)
 8012a3e:	f240 32ee 	movw	r2, #1006	@ 0x3ee
 8012a42:	490e      	ldr	r1, [pc, #56]	@ (8012a7c <pbuf_copy+0x1a0>)
 8012a44:	4809      	ldr	r0, [pc, #36]	@ (8012a6c <pbuf_copy+0x190>)
 8012a46:	f00b fe5b 	bl	801e700 <iprintf>
 8012a4a:	f06f 0305 	mvn.w	r3, #5
 8012a4e:	e004      	b.n	8012a5a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	f47f af61 	bne.w	801291a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8012a58:	2300      	movs	r3, #0
}
 8012a5a:	4618      	mov	r0, r3
 8012a5c:	3718      	adds	r7, #24
 8012a5e:	46bd      	mov	sp, r7
 8012a60:	bd80      	pop	{r7, pc}
 8012a62:	bf00      	nop
 8012a64:	080227c0 	.word	0x080227c0
 8012a68:	08022a68 	.word	0x08022a68
 8012a6c:	08022820 	.word	0x08022820
 8012a70:	08022a98 	.word	0x08022a98
 8012a74:	08022ab0 	.word	0x08022ab0
 8012a78:	08022acc 	.word	0x08022acc
 8012a7c:	08022adc 	.word	0x08022adc

08012a80 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b088      	sub	sp, #32
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	60f8      	str	r0, [r7, #12]
 8012a88:	60b9      	str	r1, [r7, #8]
 8012a8a:	4611      	mov	r1, r2
 8012a8c:	461a      	mov	r2, r3
 8012a8e:	460b      	mov	r3, r1
 8012a90:	80fb      	strh	r3, [r7, #6]
 8012a92:	4613      	mov	r3, r2
 8012a94:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8012a96:	2300      	movs	r3, #0
 8012a98:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8012a9e:	68fb      	ldr	r3, [r7, #12]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d108      	bne.n	8012ab6 <pbuf_copy_partial+0x36>
 8012aa4:	4b2b      	ldr	r3, [pc, #172]	@ (8012b54 <pbuf_copy_partial+0xd4>)
 8012aa6:	f240 420a 	movw	r2, #1034	@ 0x40a
 8012aaa:	492b      	ldr	r1, [pc, #172]	@ (8012b58 <pbuf_copy_partial+0xd8>)
 8012aac:	482b      	ldr	r0, [pc, #172]	@ (8012b5c <pbuf_copy_partial+0xdc>)
 8012aae:	f00b fe27 	bl	801e700 <iprintf>
 8012ab2:	2300      	movs	r3, #0
 8012ab4:	e04a      	b.n	8012b4c <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d108      	bne.n	8012ace <pbuf_copy_partial+0x4e>
 8012abc:	4b25      	ldr	r3, [pc, #148]	@ (8012b54 <pbuf_copy_partial+0xd4>)
 8012abe:	f240 420b 	movw	r2, #1035	@ 0x40b
 8012ac2:	4927      	ldr	r1, [pc, #156]	@ (8012b60 <pbuf_copy_partial+0xe0>)
 8012ac4:	4825      	ldr	r0, [pc, #148]	@ (8012b5c <pbuf_copy_partial+0xdc>)
 8012ac6:	f00b fe1b 	bl	801e700 <iprintf>
 8012aca:	2300      	movs	r3, #0
 8012acc:	e03e      	b.n	8012b4c <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012ace:	68fb      	ldr	r3, [r7, #12]
 8012ad0:	61fb      	str	r3, [r7, #28]
 8012ad2:	e034      	b.n	8012b3e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8012ad4:	88bb      	ldrh	r3, [r7, #4]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d00a      	beq.n	8012af0 <pbuf_copy_partial+0x70>
 8012ada:	69fb      	ldr	r3, [r7, #28]
 8012adc:	895b      	ldrh	r3, [r3, #10]
 8012ade:	88ba      	ldrh	r2, [r7, #4]
 8012ae0:	429a      	cmp	r2, r3
 8012ae2:	d305      	bcc.n	8012af0 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8012ae4:	69fb      	ldr	r3, [r7, #28]
 8012ae6:	895b      	ldrh	r3, [r3, #10]
 8012ae8:	88ba      	ldrh	r2, [r7, #4]
 8012aea:	1ad3      	subs	r3, r2, r3
 8012aec:	80bb      	strh	r3, [r7, #4]
 8012aee:	e023      	b.n	8012b38 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8012af0:	69fb      	ldr	r3, [r7, #28]
 8012af2:	895a      	ldrh	r2, [r3, #10]
 8012af4:	88bb      	ldrh	r3, [r7, #4]
 8012af6:	1ad3      	subs	r3, r2, r3
 8012af8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8012afa:	8b3a      	ldrh	r2, [r7, #24]
 8012afc:	88fb      	ldrh	r3, [r7, #6]
 8012afe:	429a      	cmp	r2, r3
 8012b00:	d901      	bls.n	8012b06 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8012b02:	88fb      	ldrh	r3, [r7, #6]
 8012b04:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8012b06:	8b7b      	ldrh	r3, [r7, #26]
 8012b08:	68ba      	ldr	r2, [r7, #8]
 8012b0a:	18d0      	adds	r0, r2, r3
 8012b0c:	69fb      	ldr	r3, [r7, #28]
 8012b0e:	685a      	ldr	r2, [r3, #4]
 8012b10:	88bb      	ldrh	r3, [r7, #4]
 8012b12:	4413      	add	r3, r2
 8012b14:	8b3a      	ldrh	r2, [r7, #24]
 8012b16:	4619      	mov	r1, r3
 8012b18:	f00c f881 	bl	801ec1e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8012b1c:	8afa      	ldrh	r2, [r7, #22]
 8012b1e:	8b3b      	ldrh	r3, [r7, #24]
 8012b20:	4413      	add	r3, r2
 8012b22:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8012b24:	8b7a      	ldrh	r2, [r7, #26]
 8012b26:	8b3b      	ldrh	r3, [r7, #24]
 8012b28:	4413      	add	r3, r2
 8012b2a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8012b2c:	88fa      	ldrh	r2, [r7, #6]
 8012b2e:	8b3b      	ldrh	r3, [r7, #24]
 8012b30:	1ad3      	subs	r3, r2, r3
 8012b32:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8012b34:	2300      	movs	r3, #0
 8012b36:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8012b38:	69fb      	ldr	r3, [r7, #28]
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	61fb      	str	r3, [r7, #28]
 8012b3e:	88fb      	ldrh	r3, [r7, #6]
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	d002      	beq.n	8012b4a <pbuf_copy_partial+0xca>
 8012b44:	69fb      	ldr	r3, [r7, #28]
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d1c4      	bne.n	8012ad4 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8012b4a:	8afb      	ldrh	r3, [r7, #22]
}
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	3720      	adds	r7, #32
 8012b50:	46bd      	mov	sp, r7
 8012b52:	bd80      	pop	{r7, pc}
 8012b54:	080227c0 	.word	0x080227c0
 8012b58:	08022b08 	.word	0x08022b08
 8012b5c:	08022820 	.word	0x08022820
 8012b60:	08022b28 	.word	0x08022b28

08012b64 <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8012b64:	b480      	push	{r7}
 8012b66:	b087      	sub	sp, #28
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	60f8      	str	r0, [r7, #12]
 8012b6c:	460b      	mov	r3, r1
 8012b6e:	607a      	str	r2, [r7, #4]
 8012b70:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 8012b72:	897b      	ldrh	r3, [r7, #10]
 8012b74:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 8012b7a:	e007      	b.n	8012b8c <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 8012b7c:	693b      	ldr	r3, [r7, #16]
 8012b7e:	895b      	ldrh	r3, [r3, #10]
 8012b80:	8afa      	ldrh	r2, [r7, #22]
 8012b82:	1ad3      	subs	r3, r2, r3
 8012b84:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 8012b86:	693b      	ldr	r3, [r7, #16]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 8012b8c:	693b      	ldr	r3, [r7, #16]
 8012b8e:	2b00      	cmp	r3, #0
 8012b90:	d004      	beq.n	8012b9c <pbuf_skip_const+0x38>
 8012b92:	693b      	ldr	r3, [r7, #16]
 8012b94:	895b      	ldrh	r3, [r3, #10]
 8012b96:	8afa      	ldrh	r2, [r7, #22]
 8012b98:	429a      	cmp	r2, r3
 8012b9a:	d2ef      	bcs.n	8012b7c <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d002      	beq.n	8012ba8 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	8afa      	ldrh	r2, [r7, #22]
 8012ba6:	801a      	strh	r2, [r3, #0]
  }
  return q;
 8012ba8:	693b      	ldr	r3, [r7, #16]
}
 8012baa:	4618      	mov	r0, r3
 8012bac:	371c      	adds	r7, #28
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb4:	4770      	bx	lr

08012bb6 <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 8012bb6:	b580      	push	{r7, lr}
 8012bb8:	b086      	sub	sp, #24
 8012bba:	af00      	add	r7, sp, #0
 8012bbc:	60f8      	str	r0, [r7, #12]
 8012bbe:	460b      	mov	r3, r1
 8012bc0:	607a      	str	r2, [r7, #4]
 8012bc2:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 8012bc4:	897b      	ldrh	r3, [r7, #10]
 8012bc6:	687a      	ldr	r2, [r7, #4]
 8012bc8:	4619      	mov	r1, r3
 8012bca:	68f8      	ldr	r0, [r7, #12]
 8012bcc:	f7ff ffca 	bl	8012b64 <pbuf_skip_const>
 8012bd0:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 8012bd2:	697b      	ldr	r3, [r7, #20]
}
 8012bd4:	4618      	mov	r0, r3
 8012bd6:	3718      	adds	r7, #24
 8012bd8:	46bd      	mov	sp, r7
 8012bda:	bd80      	pop	{r7, pc}

08012bdc <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b088      	sub	sp, #32
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	60f8      	str	r0, [r7, #12]
 8012be4:	60b9      	str	r1, [r7, #8]
 8012be6:	4613      	mov	r3, r2
 8012be8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8012bea:	88fb      	ldrh	r3, [r7, #6]
 8012bec:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8012bee:	2300      	movs	r3, #0
 8012bf0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d109      	bne.n	8012c0c <pbuf_take+0x30>
 8012bf8:	4b3a      	ldr	r3, [pc, #232]	@ (8012ce4 <pbuf_take+0x108>)
 8012bfa:	f240 42b3 	movw	r2, #1203	@ 0x4b3
 8012bfe:	493a      	ldr	r1, [pc, #232]	@ (8012ce8 <pbuf_take+0x10c>)
 8012c00:	483a      	ldr	r0, [pc, #232]	@ (8012cec <pbuf_take+0x110>)
 8012c02:	f00b fd7d 	bl	801e700 <iprintf>
 8012c06:	f06f 030f 	mvn.w	r3, #15
 8012c0a:	e067      	b.n	8012cdc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8012c0c:	68bb      	ldr	r3, [r7, #8]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d109      	bne.n	8012c26 <pbuf_take+0x4a>
 8012c12:	4b34      	ldr	r3, [pc, #208]	@ (8012ce4 <pbuf_take+0x108>)
 8012c14:	f240 42b4 	movw	r2, #1204	@ 0x4b4
 8012c18:	4935      	ldr	r1, [pc, #212]	@ (8012cf0 <pbuf_take+0x114>)
 8012c1a:	4834      	ldr	r0, [pc, #208]	@ (8012cec <pbuf_take+0x110>)
 8012c1c:	f00b fd70 	bl	801e700 <iprintf>
 8012c20:	f06f 030f 	mvn.w	r3, #15
 8012c24:	e05a      	b.n	8012cdc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	891b      	ldrh	r3, [r3, #8]
 8012c2a:	88fa      	ldrh	r2, [r7, #6]
 8012c2c:	429a      	cmp	r2, r3
 8012c2e:	d909      	bls.n	8012c44 <pbuf_take+0x68>
 8012c30:	4b2c      	ldr	r3, [pc, #176]	@ (8012ce4 <pbuf_take+0x108>)
 8012c32:	f240 42b5 	movw	r2, #1205	@ 0x4b5
 8012c36:	492f      	ldr	r1, [pc, #188]	@ (8012cf4 <pbuf_take+0x118>)
 8012c38:	482c      	ldr	r0, [pc, #176]	@ (8012cec <pbuf_take+0x110>)
 8012c3a:	f00b fd61 	bl	801e700 <iprintf>
 8012c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8012c42:	e04b      	b.n	8012cdc <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d007      	beq.n	8012c5a <pbuf_take+0x7e>
 8012c4a:	68bb      	ldr	r3, [r7, #8]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d004      	beq.n	8012c5a <pbuf_take+0x7e>
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	891b      	ldrh	r3, [r3, #8]
 8012c54:	88fa      	ldrh	r2, [r7, #6]
 8012c56:	429a      	cmp	r2, r3
 8012c58:	d902      	bls.n	8012c60 <pbuf_take+0x84>
    return ERR_ARG;
 8012c5a:	f06f 030f 	mvn.w	r3, #15
 8012c5e:	e03d      	b.n	8012cdc <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	61fb      	str	r3, [r7, #28]
 8012c64:	e028      	b.n	8012cb8 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8012c66:	69fb      	ldr	r3, [r7, #28]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d106      	bne.n	8012c7a <pbuf_take+0x9e>
 8012c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8012ce4 <pbuf_take+0x108>)
 8012c6e:	f240 42bd 	movw	r2, #1213	@ 0x4bd
 8012c72:	4921      	ldr	r1, [pc, #132]	@ (8012cf8 <pbuf_take+0x11c>)
 8012c74:	481d      	ldr	r0, [pc, #116]	@ (8012cec <pbuf_take+0x110>)
 8012c76:	f00b fd43 	bl	801e700 <iprintf>
    buf_copy_len = total_copy_len;
 8012c7a:	697b      	ldr	r3, [r7, #20]
 8012c7c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8012c7e:	69fb      	ldr	r3, [r7, #28]
 8012c80:	895b      	ldrh	r3, [r3, #10]
 8012c82:	461a      	mov	r2, r3
 8012c84:	69bb      	ldr	r3, [r7, #24]
 8012c86:	4293      	cmp	r3, r2
 8012c88:	d902      	bls.n	8012c90 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8012c8a:	69fb      	ldr	r3, [r7, #28]
 8012c8c:	895b      	ldrh	r3, [r3, #10]
 8012c8e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8012c90:	69fb      	ldr	r3, [r7, #28]
 8012c92:	6858      	ldr	r0, [r3, #4]
 8012c94:	68ba      	ldr	r2, [r7, #8]
 8012c96:	693b      	ldr	r3, [r7, #16]
 8012c98:	4413      	add	r3, r2
 8012c9a:	69ba      	ldr	r2, [r7, #24]
 8012c9c:	4619      	mov	r1, r3
 8012c9e:	f00b ffbe 	bl	801ec1e <memcpy>
    total_copy_len -= buf_copy_len;
 8012ca2:	697a      	ldr	r2, [r7, #20]
 8012ca4:	69bb      	ldr	r3, [r7, #24]
 8012ca6:	1ad3      	subs	r3, r2, r3
 8012ca8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8012caa:	693a      	ldr	r2, [r7, #16]
 8012cac:	69bb      	ldr	r3, [r7, #24]
 8012cae:	4413      	add	r3, r2
 8012cb0:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8012cb2:	69fb      	ldr	r3, [r7, #28]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	61fb      	str	r3, [r7, #28]
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d1d3      	bne.n	8012c66 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d103      	bne.n	8012ccc <pbuf_take+0xf0>
 8012cc4:	88fb      	ldrh	r3, [r7, #6]
 8012cc6:	693a      	ldr	r2, [r7, #16]
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	d006      	beq.n	8012cda <pbuf_take+0xfe>
 8012ccc:	4b05      	ldr	r3, [pc, #20]	@ (8012ce4 <pbuf_take+0x108>)
 8012cce:	f44f 6299 	mov.w	r2, #1224	@ 0x4c8
 8012cd2:	490a      	ldr	r1, [pc, #40]	@ (8012cfc <pbuf_take+0x120>)
 8012cd4:	4805      	ldr	r0, [pc, #20]	@ (8012cec <pbuf_take+0x110>)
 8012cd6:	f00b fd13 	bl	801e700 <iprintf>
  return ERR_OK;
 8012cda:	2300      	movs	r3, #0
}
 8012cdc:	4618      	mov	r0, r3
 8012cde:	3720      	adds	r7, #32
 8012ce0:	46bd      	mov	sp, r7
 8012ce2:	bd80      	pop	{r7, pc}
 8012ce4:	080227c0 	.word	0x080227c0
 8012ce8:	08022b98 	.word	0x08022b98
 8012cec:	08022820 	.word	0x08022820
 8012cf0:	08022bb0 	.word	0x08022bb0
 8012cf4:	08022bcc 	.word	0x08022bcc
 8012cf8:	08022bec 	.word	0x08022bec
 8012cfc:	08022c04 	.word	0x08022c04

08012d00 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b088      	sub	sp, #32
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	60f8      	str	r0, [r7, #12]
 8012d08:	60b9      	str	r1, [r7, #8]
 8012d0a:	4611      	mov	r1, r2
 8012d0c:	461a      	mov	r2, r3
 8012d0e:	460b      	mov	r3, r1
 8012d10:	80fb      	strh	r3, [r7, #6]
 8012d12:	4613      	mov	r3, r2
 8012d14:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 8012d16:	f107 0210 	add.w	r2, r7, #16
 8012d1a:	88bb      	ldrh	r3, [r7, #4]
 8012d1c:	4619      	mov	r1, r3
 8012d1e:	68f8      	ldr	r0, [r7, #12]
 8012d20:	f7ff ff49 	bl	8012bb6 <pbuf_skip>
 8012d24:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 8012d26:	69fb      	ldr	r3, [r7, #28]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d047      	beq.n	8012dbc <pbuf_take_at+0xbc>
 8012d2c:	69fb      	ldr	r3, [r7, #28]
 8012d2e:	891b      	ldrh	r3, [r3, #8]
 8012d30:	461a      	mov	r2, r3
 8012d32:	8a3b      	ldrh	r3, [r7, #16]
 8012d34:	4619      	mov	r1, r3
 8012d36:	88fb      	ldrh	r3, [r7, #6]
 8012d38:	440b      	add	r3, r1
 8012d3a:	429a      	cmp	r2, r3
 8012d3c:	db3e      	blt.n	8012dbc <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 8012d3e:	88fb      	ldrh	r3, [r7, #6]
 8012d40:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 8012d42:	68bb      	ldr	r3, [r7, #8]
 8012d44:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 8012d46:	69fb      	ldr	r3, [r7, #28]
 8012d48:	895a      	ldrh	r2, [r3, #10]
 8012d4a:	8a3b      	ldrh	r3, [r7, #16]
 8012d4c:	429a      	cmp	r2, r3
 8012d4e:	d806      	bhi.n	8012d5e <pbuf_take_at+0x5e>
 8012d50:	4b1d      	ldr	r3, [pc, #116]	@ (8012dc8 <pbuf_take_at+0xc8>)
 8012d52:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 8012d56:	491d      	ldr	r1, [pc, #116]	@ (8012dcc <pbuf_take_at+0xcc>)
 8012d58:	481d      	ldr	r0, [pc, #116]	@ (8012dd0 <pbuf_take_at+0xd0>)
 8012d5a:	f00b fcd1 	bl	801e700 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 8012d5e:	69fb      	ldr	r3, [r7, #28]
 8012d60:	895b      	ldrh	r3, [r3, #10]
 8012d62:	461a      	mov	r2, r3
 8012d64:	8a3b      	ldrh	r3, [r7, #16]
 8012d66:	1ad2      	subs	r2, r2, r3
 8012d68:	88fb      	ldrh	r3, [r7, #6]
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	da05      	bge.n	8012d7a <pbuf_take_at+0x7a>
 8012d6e:	69fb      	ldr	r3, [r7, #28]
 8012d70:	895a      	ldrh	r2, [r3, #10]
 8012d72:	8a3b      	ldrh	r3, [r7, #16]
 8012d74:	1ad3      	subs	r3, r2, r3
 8012d76:	b29b      	uxth	r3, r3
 8012d78:	e000      	b.n	8012d7c <pbuf_take_at+0x7c>
 8012d7a:	88fb      	ldrh	r3, [r7, #6]
 8012d7c:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 8012d7e:	69fb      	ldr	r3, [r7, #28]
 8012d80:	685b      	ldr	r3, [r3, #4]
 8012d82:	8a3a      	ldrh	r2, [r7, #16]
 8012d84:	4413      	add	r3, r2
 8012d86:	8a7a      	ldrh	r2, [r7, #18]
 8012d88:	68b9      	ldr	r1, [r7, #8]
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	f00b ff47 	bl	801ec1e <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 8012d90:	8b7a      	ldrh	r2, [r7, #26]
 8012d92:	8a7b      	ldrh	r3, [r7, #18]
 8012d94:	1ad3      	subs	r3, r2, r3
 8012d96:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 8012d98:	8a7b      	ldrh	r3, [r7, #18]
 8012d9a:	697a      	ldr	r2, [r7, #20]
 8012d9c:	4413      	add	r3, r2
 8012d9e:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 8012da0:	8b7b      	ldrh	r3, [r7, #26]
 8012da2:	2b00      	cmp	r3, #0
 8012da4:	d008      	beq.n	8012db8 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 8012da6:	69fb      	ldr	r3, [r7, #28]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	8b7a      	ldrh	r2, [r7, #26]
 8012dac:	6979      	ldr	r1, [r7, #20]
 8012dae:	4618      	mov	r0, r3
 8012db0:	f7ff ff14 	bl	8012bdc <pbuf_take>
 8012db4:	4603      	mov	r3, r0
 8012db6:	e003      	b.n	8012dc0 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 8012db8:	2300      	movs	r3, #0
 8012dba:	e001      	b.n	8012dc0 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 8012dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3720      	adds	r7, #32
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	bd80      	pop	{r7, pc}
 8012dc8:	080227c0 	.word	0x080227c0
 8012dcc:	08022c1c 	.word	0x08022c1c
 8012dd0:	08022820 	.word	0x08022820

08012dd4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8012dd4:	b580      	push	{r7, lr}
 8012dd6:	b084      	sub	sp, #16
 8012dd8:	af00      	add	r7, sp, #0
 8012dda:	4603      	mov	r3, r0
 8012ddc:	603a      	str	r2, [r7, #0]
 8012dde:	71fb      	strb	r3, [r7, #7]
 8012de0:	460b      	mov	r3, r1
 8012de2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8012de4:	683b      	ldr	r3, [r7, #0]
 8012de6:	8919      	ldrh	r1, [r3, #8]
 8012de8:	88ba      	ldrh	r2, [r7, #4]
 8012dea:	79fb      	ldrb	r3, [r7, #7]
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7ff f95d 	bl	80120ac <pbuf_alloc>
 8012df2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8012df4:	68fb      	ldr	r3, [r7, #12]
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	d101      	bne.n	8012dfe <pbuf_clone+0x2a>
    return NULL;
 8012dfa:	2300      	movs	r3, #0
 8012dfc:	e011      	b.n	8012e22 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8012dfe:	6839      	ldr	r1, [r7, #0]
 8012e00:	68f8      	ldr	r0, [r7, #12]
 8012e02:	f7ff fd6b 	bl	80128dc <pbuf_copy>
 8012e06:	4603      	mov	r3, r0
 8012e08:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8012e0a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d006      	beq.n	8012e20 <pbuf_clone+0x4c>
 8012e12:	4b06      	ldr	r3, [pc, #24]	@ (8012e2c <pbuf_clone+0x58>)
 8012e14:	f240 5224 	movw	r2, #1316	@ 0x524
 8012e18:	4905      	ldr	r1, [pc, #20]	@ (8012e30 <pbuf_clone+0x5c>)
 8012e1a:	4806      	ldr	r0, [pc, #24]	@ (8012e34 <pbuf_clone+0x60>)
 8012e1c:	f00b fc70 	bl	801e700 <iprintf>
  return q;
 8012e20:	68fb      	ldr	r3, [r7, #12]
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	3710      	adds	r7, #16
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	bf00      	nop
 8012e2c:	080227c0 	.word	0x080227c0
 8012e30:	08022c34 	.word	0x08022c34
 8012e34:	08022820 	.word	0x08022820

08012e38 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b084      	sub	sp, #16
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	6078      	str	r0, [r7, #4]
 8012e40:	460b      	mov	r3, r1
 8012e42:	807b      	strh	r3, [r7, #2]
 8012e44:	4613      	mov	r3, r2
 8012e46:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 8012e48:	f107 020a 	add.w	r2, r7, #10
 8012e4c:	887b      	ldrh	r3, [r7, #2]
 8012e4e:	4619      	mov	r1, r3
 8012e50:	6878      	ldr	r0, [r7, #4]
 8012e52:	f7ff feb0 	bl	8012bb6 <pbuf_skip>
 8012e56:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 8012e58:	68fb      	ldr	r3, [r7, #12]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d00a      	beq.n	8012e74 <pbuf_put_at+0x3c>
 8012e5e:	68fb      	ldr	r3, [r7, #12]
 8012e60:	895a      	ldrh	r2, [r3, #10]
 8012e62:	897b      	ldrh	r3, [r7, #10]
 8012e64:	429a      	cmp	r2, r3
 8012e66:	d905      	bls.n	8012e74 <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 8012e68:	68fb      	ldr	r3, [r7, #12]
 8012e6a:	685b      	ldr	r3, [r3, #4]
 8012e6c:	897a      	ldrh	r2, [r7, #10]
 8012e6e:	4413      	add	r3, r2
 8012e70:	787a      	ldrb	r2, [r7, #1]
 8012e72:	701a      	strb	r2, [r3, #0]
  }
}
 8012e74:	bf00      	nop
 8012e76:	3710      	adds	r7, #16
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}

08012e7c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012e80:	f00a fb5e 	bl	801d540 <rand>
 8012e84:	4603      	mov	r3, r0
 8012e86:	b29b      	uxth	r3, r3
 8012e88:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012e8c:	b29b      	uxth	r3, r3
 8012e8e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8012e92:	b29a      	uxth	r2, r3
 8012e94:	4b01      	ldr	r3, [pc, #4]	@ (8012e9c <tcp_init+0x20>)
 8012e96:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012e98:	bf00      	nop
 8012e9a:	bd80      	pop	{r7, pc}
 8012e9c:	20000040 	.word	0x20000040

08012ea0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b082      	sub	sp, #8
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	7d1b      	ldrb	r3, [r3, #20]
 8012eac:	2b01      	cmp	r3, #1
 8012eae:	d105      	bne.n	8012ebc <tcp_free+0x1c>
 8012eb0:	4b06      	ldr	r3, [pc, #24]	@ (8012ecc <tcp_free+0x2c>)
 8012eb2:	22d4      	movs	r2, #212	@ 0xd4
 8012eb4:	4906      	ldr	r1, [pc, #24]	@ (8012ed0 <tcp_free+0x30>)
 8012eb6:	4807      	ldr	r0, [pc, #28]	@ (8012ed4 <tcp_free+0x34>)
 8012eb8:	f00b fc22 	bl	801e700 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8012ebc:	6879      	ldr	r1, [r7, #4]
 8012ebe:	2001      	movs	r0, #1
 8012ec0:	f7fe fd28 	bl	8011914 <memp_free>
}
 8012ec4:	bf00      	nop
 8012ec6:	3708      	adds	r7, #8
 8012ec8:	46bd      	mov	sp, r7
 8012eca:	bd80      	pop	{r7, pc}
 8012ecc:	08022cc0 	.word	0x08022cc0
 8012ed0:	08022cf0 	.word	0x08022cf0
 8012ed4:	08022d04 	.word	0x08022d04

08012ed8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8012ed8:	b580      	push	{r7, lr}
 8012eda:	b082      	sub	sp, #8
 8012edc:	af00      	add	r7, sp, #0
 8012ede:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	7d1b      	ldrb	r3, [r3, #20]
 8012ee4:	2b01      	cmp	r3, #1
 8012ee6:	d105      	bne.n	8012ef4 <tcp_free_listen+0x1c>
 8012ee8:	4b06      	ldr	r3, [pc, #24]	@ (8012f04 <tcp_free_listen+0x2c>)
 8012eea:	22df      	movs	r2, #223	@ 0xdf
 8012eec:	4906      	ldr	r1, [pc, #24]	@ (8012f08 <tcp_free_listen+0x30>)
 8012eee:	4807      	ldr	r0, [pc, #28]	@ (8012f0c <tcp_free_listen+0x34>)
 8012ef0:	f00b fc06 	bl	801e700 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8012ef4:	6879      	ldr	r1, [r7, #4]
 8012ef6:	2002      	movs	r0, #2
 8012ef8:	f7fe fd0c 	bl	8011914 <memp_free>
}
 8012efc:	bf00      	nop
 8012efe:	3708      	adds	r7, #8
 8012f00:	46bd      	mov	sp, r7
 8012f02:	bd80      	pop	{r7, pc}
 8012f04:	08022cc0 	.word	0x08022cc0
 8012f08:	08022d2c 	.word	0x08022d2c
 8012f0c:	08022d04 	.word	0x08022d04

08012f10 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8012f14:	f000 fea4 	bl	8013c60 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8012f18:	4b07      	ldr	r3, [pc, #28]	@ (8012f38 <tcp_tmr+0x28>)
 8012f1a:	781b      	ldrb	r3, [r3, #0]
 8012f1c:	3301      	adds	r3, #1
 8012f1e:	b2da      	uxtb	r2, r3
 8012f20:	4b05      	ldr	r3, [pc, #20]	@ (8012f38 <tcp_tmr+0x28>)
 8012f22:	701a      	strb	r2, [r3, #0]
 8012f24:	4b04      	ldr	r3, [pc, #16]	@ (8012f38 <tcp_tmr+0x28>)
 8012f26:	781b      	ldrb	r3, [r3, #0]
 8012f28:	f003 0301 	and.w	r3, r3, #1
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d001      	beq.n	8012f34 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8012f30:	f000 fb54 	bl	80135dc <tcp_slowtmr>
  }
}
 8012f34:	bf00      	nop
 8012f36:	bd80      	pop	{r7, pc}
 8012f38:	2001b029 	.word	0x2001b029

08012f3c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b084      	sub	sp, #16
 8012f40:	af00      	add	r7, sp, #0
 8012f42:	6078      	str	r0, [r7, #4]
 8012f44:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8012f46:	683b      	ldr	r3, [r7, #0]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d105      	bne.n	8012f58 <tcp_remove_listener+0x1c>
 8012f4c:	4b0d      	ldr	r3, [pc, #52]	@ (8012f84 <tcp_remove_listener+0x48>)
 8012f4e:	22ff      	movs	r2, #255	@ 0xff
 8012f50:	490d      	ldr	r1, [pc, #52]	@ (8012f88 <tcp_remove_listener+0x4c>)
 8012f52:	480e      	ldr	r0, [pc, #56]	@ (8012f8c <tcp_remove_listener+0x50>)
 8012f54:	f00b fbd4 	bl	801e700 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	60fb      	str	r3, [r7, #12]
 8012f5c:	e00a      	b.n	8012f74 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012f62:	683a      	ldr	r2, [r7, #0]
 8012f64:	429a      	cmp	r2, r3
 8012f66:	d102      	bne.n	8012f6e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8012f68:	68fb      	ldr	r3, [r7, #12]
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	67da      	str	r2, [r3, #124]	@ 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8012f6e:	68fb      	ldr	r3, [r7, #12]
 8012f70:	68db      	ldr	r3, [r3, #12]
 8012f72:	60fb      	str	r3, [r7, #12]
 8012f74:	68fb      	ldr	r3, [r7, #12]
 8012f76:	2b00      	cmp	r3, #0
 8012f78:	d1f1      	bne.n	8012f5e <tcp_remove_listener+0x22>
    }
  }
}
 8012f7a:	bf00      	nop
 8012f7c:	bf00      	nop
 8012f7e:	3710      	adds	r7, #16
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}
 8012f84:	08022cc0 	.word	0x08022cc0
 8012f88:	08022d48 	.word	0x08022d48
 8012f8c:	08022d04 	.word	0x08022d04

08012f90 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b084      	sub	sp, #16
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d106      	bne.n	8012fac <tcp_listen_closed+0x1c>
 8012f9e:	4b14      	ldr	r3, [pc, #80]	@ (8012ff0 <tcp_listen_closed+0x60>)
 8012fa0:	f240 1211 	movw	r2, #273	@ 0x111
 8012fa4:	4913      	ldr	r1, [pc, #76]	@ (8012ff4 <tcp_listen_closed+0x64>)
 8012fa6:	4814      	ldr	r0, [pc, #80]	@ (8012ff8 <tcp_listen_closed+0x68>)
 8012fa8:	f00b fbaa 	bl	801e700 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	7d1b      	ldrb	r3, [r3, #20]
 8012fb0:	2b01      	cmp	r3, #1
 8012fb2:	d006      	beq.n	8012fc2 <tcp_listen_closed+0x32>
 8012fb4:	4b0e      	ldr	r3, [pc, #56]	@ (8012ff0 <tcp_listen_closed+0x60>)
 8012fb6:	f44f 7289 	mov.w	r2, #274	@ 0x112
 8012fba:	4910      	ldr	r1, [pc, #64]	@ (8012ffc <tcp_listen_closed+0x6c>)
 8012fbc:	480e      	ldr	r0, [pc, #56]	@ (8012ff8 <tcp_listen_closed+0x68>)
 8012fbe:	f00b fb9f 	bl	801e700 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012fc2:	2301      	movs	r3, #1
 8012fc4:	60fb      	str	r3, [r7, #12]
 8012fc6:	e00b      	b.n	8012fe0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8012fc8:	4a0d      	ldr	r2, [pc, #52]	@ (8013000 <tcp_listen_closed+0x70>)
 8012fca:	68fb      	ldr	r3, [r7, #12]
 8012fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012fd0:	681b      	ldr	r3, [r3, #0]
 8012fd2:	6879      	ldr	r1, [r7, #4]
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	f7ff ffb1 	bl	8012f3c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	3301      	adds	r3, #1
 8012fde:	60fb      	str	r3, [r7, #12]
 8012fe0:	68fb      	ldr	r3, [r7, #12]
 8012fe2:	2b03      	cmp	r3, #3
 8012fe4:	d9f0      	bls.n	8012fc8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8012fe6:	bf00      	nop
 8012fe8:	bf00      	nop
 8012fea:	3710      	adds	r7, #16
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}
 8012ff0:	08022cc0 	.word	0x08022cc0
 8012ff4:	08022d70 	.word	0x08022d70
 8012ff8:	08022d04 	.word	0x08022d04
 8012ffc:	08022d7c 	.word	0x08022d7c
 8013000:	080252a8 	.word	0x080252a8

08013004 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8013004:	b5b0      	push	{r4, r5, r7, lr}
 8013006:	b088      	sub	sp, #32
 8013008:	af04      	add	r7, sp, #16
 801300a:	6078      	str	r0, [r7, #4]
 801300c:	460b      	mov	r3, r1
 801300e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	2b00      	cmp	r3, #0
 8013014:	d106      	bne.n	8013024 <tcp_close_shutdown+0x20>
 8013016:	4b63      	ldr	r3, [pc, #396]	@ (80131a4 <tcp_close_shutdown+0x1a0>)
 8013018:	f44f 72af 	mov.w	r2, #350	@ 0x15e
 801301c:	4962      	ldr	r1, [pc, #392]	@ (80131a8 <tcp_close_shutdown+0x1a4>)
 801301e:	4863      	ldr	r0, [pc, #396]	@ (80131ac <tcp_close_shutdown+0x1a8>)
 8013020:	f00b fb6e 	bl	801e700 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013024:	78fb      	ldrb	r3, [r7, #3]
 8013026:	2b00      	cmp	r3, #0
 8013028:	d066      	beq.n	80130f8 <tcp_close_shutdown+0xf4>
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	7d1b      	ldrb	r3, [r3, #20]
 801302e:	2b04      	cmp	r3, #4
 8013030:	d003      	beq.n	801303a <tcp_close_shutdown+0x36>
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	7d1b      	ldrb	r3, [r3, #20]
 8013036:	2b07      	cmp	r3, #7
 8013038:	d15e      	bne.n	80130f8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801303e:	2b00      	cmp	r3, #0
 8013040:	d104      	bne.n	801304c <tcp_close_shutdown+0x48>
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013046:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 801304a:	d055      	beq.n	80130f8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	8b5b      	ldrh	r3, [r3, #26]
 8013050:	f003 0310 	and.w	r3, r3, #16
 8013054:	2b00      	cmp	r3, #0
 8013056:	d106      	bne.n	8013066 <tcp_close_shutdown+0x62>
 8013058:	4b52      	ldr	r3, [pc, #328]	@ (80131a4 <tcp_close_shutdown+0x1a0>)
 801305a:	f44f 72b2 	mov.w	r2, #356	@ 0x164
 801305e:	4954      	ldr	r1, [pc, #336]	@ (80131b0 <tcp_close_shutdown+0x1ac>)
 8013060:	4852      	ldr	r0, [pc, #328]	@ (80131ac <tcp_close_shutdown+0x1a8>)
 8013062:	f00b fb4d 	bl	801e700 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801306e:	687d      	ldr	r5, [r7, #4]
 8013070:	687b      	ldr	r3, [r7, #4]
 8013072:	3304      	adds	r3, #4
 8013074:	687a      	ldr	r2, [r7, #4]
 8013076:	8ad2      	ldrh	r2, [r2, #22]
 8013078:	6879      	ldr	r1, [r7, #4]
 801307a:	8b09      	ldrh	r1, [r1, #24]
 801307c:	9102      	str	r1, [sp, #8]
 801307e:	9201      	str	r2, [sp, #4]
 8013080:	9300      	str	r3, [sp, #0]
 8013082:	462b      	mov	r3, r5
 8013084:	4622      	mov	r2, r4
 8013086:	4601      	mov	r1, r0
 8013088:	6878      	ldr	r0, [r7, #4]
 801308a:	f004 fe8d 	bl	8017da8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801308e:	6878      	ldr	r0, [r7, #4]
 8013090:	f001 f8c8 	bl	8014224 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013094:	4b47      	ldr	r3, [pc, #284]	@ (80131b4 <tcp_close_shutdown+0x1b0>)
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	687a      	ldr	r2, [r7, #4]
 801309a:	429a      	cmp	r2, r3
 801309c:	d105      	bne.n	80130aa <tcp_close_shutdown+0xa6>
 801309e:	4b45      	ldr	r3, [pc, #276]	@ (80131b4 <tcp_close_shutdown+0x1b0>)
 80130a0:	681b      	ldr	r3, [r3, #0]
 80130a2:	68db      	ldr	r3, [r3, #12]
 80130a4:	4a43      	ldr	r2, [pc, #268]	@ (80131b4 <tcp_close_shutdown+0x1b0>)
 80130a6:	6013      	str	r3, [r2, #0]
 80130a8:	e013      	b.n	80130d2 <tcp_close_shutdown+0xce>
 80130aa:	4b42      	ldr	r3, [pc, #264]	@ (80131b4 <tcp_close_shutdown+0x1b0>)
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	60fb      	str	r3, [r7, #12]
 80130b0:	e00c      	b.n	80130cc <tcp_close_shutdown+0xc8>
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	68db      	ldr	r3, [r3, #12]
 80130b6:	687a      	ldr	r2, [r7, #4]
 80130b8:	429a      	cmp	r2, r3
 80130ba:	d104      	bne.n	80130c6 <tcp_close_shutdown+0xc2>
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	68da      	ldr	r2, [r3, #12]
 80130c0:	68fb      	ldr	r3, [r7, #12]
 80130c2:	60da      	str	r2, [r3, #12]
 80130c4:	e005      	b.n	80130d2 <tcp_close_shutdown+0xce>
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	68db      	ldr	r3, [r3, #12]
 80130ca:	60fb      	str	r3, [r7, #12]
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d1ef      	bne.n	80130b2 <tcp_close_shutdown+0xae>
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	2200      	movs	r2, #0
 80130d6:	60da      	str	r2, [r3, #12]
 80130d8:	4b37      	ldr	r3, [pc, #220]	@ (80131b8 <tcp_close_shutdown+0x1b4>)
 80130da:	2201      	movs	r2, #1
 80130dc:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80130de:	4b37      	ldr	r3, [pc, #220]	@ (80131bc <tcp_close_shutdown+0x1b8>)
 80130e0:	681b      	ldr	r3, [r3, #0]
 80130e2:	687a      	ldr	r2, [r7, #4]
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d102      	bne.n	80130ee <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80130e8:	f003 fd5c 	bl	8016ba4 <tcp_trigger_input_pcb_close>
 80130ec:	e002      	b.n	80130f4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80130ee:	6878      	ldr	r0, [r7, #4]
 80130f0:	f7ff fed6 	bl	8012ea0 <tcp_free>
      }
      return ERR_OK;
 80130f4:	2300      	movs	r3, #0
 80130f6:	e050      	b.n	801319a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	7d1b      	ldrb	r3, [r3, #20]
 80130fc:	2b02      	cmp	r3, #2
 80130fe:	d03b      	beq.n	8013178 <tcp_close_shutdown+0x174>
 8013100:	2b02      	cmp	r3, #2
 8013102:	dc44      	bgt.n	801318e <tcp_close_shutdown+0x18a>
 8013104:	2b00      	cmp	r3, #0
 8013106:	d002      	beq.n	801310e <tcp_close_shutdown+0x10a>
 8013108:	2b01      	cmp	r3, #1
 801310a:	d02a      	beq.n	8013162 <tcp_close_shutdown+0x15e>
 801310c:	e03f      	b.n	801318e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	8adb      	ldrh	r3, [r3, #22]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d021      	beq.n	801315a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013116:	4b2a      	ldr	r3, [pc, #168]	@ (80131c0 <tcp_close_shutdown+0x1bc>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	687a      	ldr	r2, [r7, #4]
 801311c:	429a      	cmp	r2, r3
 801311e:	d105      	bne.n	801312c <tcp_close_shutdown+0x128>
 8013120:	4b27      	ldr	r3, [pc, #156]	@ (80131c0 <tcp_close_shutdown+0x1bc>)
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	68db      	ldr	r3, [r3, #12]
 8013126:	4a26      	ldr	r2, [pc, #152]	@ (80131c0 <tcp_close_shutdown+0x1bc>)
 8013128:	6013      	str	r3, [r2, #0]
 801312a:	e013      	b.n	8013154 <tcp_close_shutdown+0x150>
 801312c:	4b24      	ldr	r3, [pc, #144]	@ (80131c0 <tcp_close_shutdown+0x1bc>)
 801312e:	681b      	ldr	r3, [r3, #0]
 8013130:	60bb      	str	r3, [r7, #8]
 8013132:	e00c      	b.n	801314e <tcp_close_shutdown+0x14a>
 8013134:	68bb      	ldr	r3, [r7, #8]
 8013136:	68db      	ldr	r3, [r3, #12]
 8013138:	687a      	ldr	r2, [r7, #4]
 801313a:	429a      	cmp	r2, r3
 801313c:	d104      	bne.n	8013148 <tcp_close_shutdown+0x144>
 801313e:	687b      	ldr	r3, [r7, #4]
 8013140:	68da      	ldr	r2, [r3, #12]
 8013142:	68bb      	ldr	r3, [r7, #8]
 8013144:	60da      	str	r2, [r3, #12]
 8013146:	e005      	b.n	8013154 <tcp_close_shutdown+0x150>
 8013148:	68bb      	ldr	r3, [r7, #8]
 801314a:	68db      	ldr	r3, [r3, #12]
 801314c:	60bb      	str	r3, [r7, #8]
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d1ef      	bne.n	8013134 <tcp_close_shutdown+0x130>
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2200      	movs	r2, #0
 8013158:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801315a:	6878      	ldr	r0, [r7, #4]
 801315c:	f7ff fea0 	bl	8012ea0 <tcp_free>
      break;
 8013160:	e01a      	b.n	8013198 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8013162:	6878      	ldr	r0, [r7, #4]
 8013164:	f7ff ff14 	bl	8012f90 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8013168:	6879      	ldr	r1, [r7, #4]
 801316a:	4816      	ldr	r0, [pc, #88]	@ (80131c4 <tcp_close_shutdown+0x1c0>)
 801316c:	f001 f8aa 	bl	80142c4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8013170:	6878      	ldr	r0, [r7, #4]
 8013172:	f7ff feb1 	bl	8012ed8 <tcp_free_listen>
      break;
 8013176:	e00f      	b.n	8013198 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013178:	6879      	ldr	r1, [r7, #4]
 801317a:	480e      	ldr	r0, [pc, #56]	@ (80131b4 <tcp_close_shutdown+0x1b0>)
 801317c:	f001 f8a2 	bl	80142c4 <tcp_pcb_remove>
 8013180:	4b0d      	ldr	r3, [pc, #52]	@ (80131b8 <tcp_close_shutdown+0x1b4>)
 8013182:	2201      	movs	r2, #1
 8013184:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8013186:	6878      	ldr	r0, [r7, #4]
 8013188:	f7ff fe8a 	bl	8012ea0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801318c:	e004      	b.n	8013198 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801318e:	6878      	ldr	r0, [r7, #4]
 8013190:	f000 f81a 	bl	80131c8 <tcp_close_shutdown_fin>
 8013194:	4603      	mov	r3, r0
 8013196:	e000      	b.n	801319a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8013198:	2300      	movs	r3, #0
}
 801319a:	4618      	mov	r0, r3
 801319c:	3710      	adds	r7, #16
 801319e:	46bd      	mov	sp, r7
 80131a0:	bdb0      	pop	{r4, r5, r7, pc}
 80131a2:	bf00      	nop
 80131a4:	08022cc0 	.word	0x08022cc0
 80131a8:	08022d94 	.word	0x08022d94
 80131ac:	08022d04 	.word	0x08022d04
 80131b0:	08022db4 	.word	0x08022db4
 80131b4:	2001b020 	.word	0x2001b020
 80131b8:	2001b028 	.word	0x2001b028
 80131bc:	2001b060 	.word	0x2001b060
 80131c0:	2001b018 	.word	0x2001b018
 80131c4:	2001b01c 	.word	0x2001b01c

080131c8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80131c8:	b580      	push	{r7, lr}
 80131ca:	b084      	sub	sp, #16
 80131cc:	af00      	add	r7, sp, #0
 80131ce:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d106      	bne.n	80131e4 <tcp_close_shutdown_fin+0x1c>
 80131d6:	4b2e      	ldr	r3, [pc, #184]	@ (8013290 <tcp_close_shutdown_fin+0xc8>)
 80131d8:	f44f 72ce 	mov.w	r2, #412	@ 0x19c
 80131dc:	492d      	ldr	r1, [pc, #180]	@ (8013294 <tcp_close_shutdown_fin+0xcc>)
 80131de:	482e      	ldr	r0, [pc, #184]	@ (8013298 <tcp_close_shutdown_fin+0xd0>)
 80131e0:	f00b fa8e 	bl	801e700 <iprintf>

  switch (pcb->state) {
 80131e4:	687b      	ldr	r3, [r7, #4]
 80131e6:	7d1b      	ldrb	r3, [r3, #20]
 80131e8:	2b07      	cmp	r3, #7
 80131ea:	d020      	beq.n	801322e <tcp_close_shutdown_fin+0x66>
 80131ec:	2b07      	cmp	r3, #7
 80131ee:	dc2b      	bgt.n	8013248 <tcp_close_shutdown_fin+0x80>
 80131f0:	2b03      	cmp	r3, #3
 80131f2:	d002      	beq.n	80131fa <tcp_close_shutdown_fin+0x32>
 80131f4:	2b04      	cmp	r3, #4
 80131f6:	d00d      	beq.n	8013214 <tcp_close_shutdown_fin+0x4c>
 80131f8:	e026      	b.n	8013248 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80131fa:	6878      	ldr	r0, [r7, #4]
 80131fc:	f003 fee2 	bl	8016fc4 <tcp_send_fin>
 8013200:	4603      	mov	r3, r0
 8013202:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013204:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013208:	2b00      	cmp	r3, #0
 801320a:	d11f      	bne.n	801324c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2205      	movs	r2, #5
 8013210:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013212:	e01b      	b.n	801324c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f003 fed5 	bl	8016fc4 <tcp_send_fin>
 801321a:	4603      	mov	r3, r0
 801321c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801321e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013222:	2b00      	cmp	r3, #0
 8013224:	d114      	bne.n	8013250 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	2205      	movs	r2, #5
 801322a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801322c:	e010      	b.n	8013250 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 801322e:	6878      	ldr	r0, [r7, #4]
 8013230:	f003 fec8 	bl	8016fc4 <tcp_send_fin>
 8013234:	4603      	mov	r3, r0
 8013236:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013238:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d109      	bne.n	8013254 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2209      	movs	r2, #9
 8013244:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013246:	e005      	b.n	8013254 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8013248:	2300      	movs	r3, #0
 801324a:	e01c      	b.n	8013286 <tcp_close_shutdown_fin+0xbe>
      break;
 801324c:	bf00      	nop
 801324e:	e002      	b.n	8013256 <tcp_close_shutdown_fin+0x8e>
      break;
 8013250:	bf00      	nop
 8013252:	e000      	b.n	8013256 <tcp_close_shutdown_fin+0x8e>
      break;
 8013254:	bf00      	nop
  }

  if (err == ERR_OK) {
 8013256:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d103      	bne.n	8013266 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801325e:	6878      	ldr	r0, [r7, #4]
 8013260:	f003 ffee 	bl	8017240 <tcp_output>
 8013264:	e00d      	b.n	8013282 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8013266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801326a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801326e:	d108      	bne.n	8013282 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	8b5b      	ldrh	r3, [r3, #26]
 8013274:	f043 0308 	orr.w	r3, r3, #8
 8013278:	b29a      	uxth	r2, r3
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801327e:	2300      	movs	r3, #0
 8013280:	e001      	b.n	8013286 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8013282:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013286:	4618      	mov	r0, r3
 8013288:	3710      	adds	r7, #16
 801328a:	46bd      	mov	sp, r7
 801328c:	bd80      	pop	{r7, pc}
 801328e:	bf00      	nop
 8013290:	08022cc0 	.word	0x08022cc0
 8013294:	08022d70 	.word	0x08022d70
 8013298:	08022d04 	.word	0x08022d04

0801329c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801329c:	b580      	push	{r7, lr}
 801329e:	b082      	sub	sp, #8
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d109      	bne.n	80132be <tcp_close+0x22>
 80132aa:	4b0f      	ldr	r3, [pc, #60]	@ (80132e8 <tcp_close+0x4c>)
 80132ac:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 80132b0:	490e      	ldr	r1, [pc, #56]	@ (80132ec <tcp_close+0x50>)
 80132b2:	480f      	ldr	r0, [pc, #60]	@ (80132f0 <tcp_close+0x54>)
 80132b4:	f00b fa24 	bl	801e700 <iprintf>
 80132b8:	f06f 030f 	mvn.w	r3, #15
 80132bc:	e00f      	b.n	80132de <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	7d1b      	ldrb	r3, [r3, #20]
 80132c2:	2b01      	cmp	r3, #1
 80132c4:	d006      	beq.n	80132d4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	8b5b      	ldrh	r3, [r3, #26]
 80132ca:	f043 0310 	orr.w	r3, r3, #16
 80132ce:	b29a      	uxth	r2, r3
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80132d4:	2101      	movs	r1, #1
 80132d6:	6878      	ldr	r0, [r7, #4]
 80132d8:	f7ff fe94 	bl	8013004 <tcp_close_shutdown>
 80132dc:	4603      	mov	r3, r0
}
 80132de:	4618      	mov	r0, r3
 80132e0:	3708      	adds	r7, #8
 80132e2:	46bd      	mov	sp, r7
 80132e4:	bd80      	pop	{r7, pc}
 80132e6:	bf00      	nop
 80132e8:	08022cc0 	.word	0x08022cc0
 80132ec:	08022dd0 	.word	0x08022dd0
 80132f0:	08022d04 	.word	0x08022d04

080132f4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80132f4:	b580      	push	{r7, lr}
 80132f6:	b08e      	sub	sp, #56	@ 0x38
 80132f8:	af04      	add	r7, sp, #16
 80132fa:	6078      	str	r0, [r7, #4]
 80132fc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d107      	bne.n	8013314 <tcp_abandon+0x20>
 8013304:	4b52      	ldr	r3, [pc, #328]	@ (8013450 <tcp_abandon+0x15c>)
 8013306:	f240 223d 	movw	r2, #573	@ 0x23d
 801330a:	4952      	ldr	r1, [pc, #328]	@ (8013454 <tcp_abandon+0x160>)
 801330c:	4852      	ldr	r0, [pc, #328]	@ (8013458 <tcp_abandon+0x164>)
 801330e:	f00b f9f7 	bl	801e700 <iprintf>
 8013312:	e099      	b.n	8013448 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8013314:	687b      	ldr	r3, [r7, #4]
 8013316:	7d1b      	ldrb	r3, [r3, #20]
 8013318:	2b01      	cmp	r3, #1
 801331a:	d106      	bne.n	801332a <tcp_abandon+0x36>
 801331c:	4b4c      	ldr	r3, [pc, #304]	@ (8013450 <tcp_abandon+0x15c>)
 801331e:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8013322:	494e      	ldr	r1, [pc, #312]	@ (801345c <tcp_abandon+0x168>)
 8013324:	484c      	ldr	r0, [pc, #304]	@ (8013458 <tcp_abandon+0x164>)
 8013326:	f00b f9eb 	bl	801e700 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	7d1b      	ldrb	r3, [r3, #20]
 801332e:	2b0a      	cmp	r3, #10
 8013330:	d107      	bne.n	8013342 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8013332:	6879      	ldr	r1, [r7, #4]
 8013334:	484a      	ldr	r0, [pc, #296]	@ (8013460 <tcp_abandon+0x16c>)
 8013336:	f000 ffc5 	bl	80142c4 <tcp_pcb_remove>
    tcp_free(pcb);
 801333a:	6878      	ldr	r0, [r7, #4]
 801333c:	f7ff fdb0 	bl	8012ea0 <tcp_free>
 8013340:	e082      	b.n	8013448 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8013342:	2300      	movs	r3, #0
 8013344:	627b      	str	r3, [r7, #36]	@ 0x24
    u16_t local_port = 0;
 8013346:	2300      	movs	r3, #0
 8013348:	847b      	strh	r3, [r7, #34]	@ 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801334e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013354:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801335c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	691b      	ldr	r3, [r3, #16]
 8013362:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	7d1b      	ldrb	r3, [r3, #20]
 8013368:	2b00      	cmp	r3, #0
 801336a:	d126      	bne.n	80133ba <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801336c:	687b      	ldr	r3, [r7, #4]
 801336e:	8adb      	ldrh	r3, [r3, #22]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d02e      	beq.n	80133d2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013374:	4b3b      	ldr	r3, [pc, #236]	@ (8013464 <tcp_abandon+0x170>)
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	687a      	ldr	r2, [r7, #4]
 801337a:	429a      	cmp	r2, r3
 801337c:	d105      	bne.n	801338a <tcp_abandon+0x96>
 801337e:	4b39      	ldr	r3, [pc, #228]	@ (8013464 <tcp_abandon+0x170>)
 8013380:	681b      	ldr	r3, [r3, #0]
 8013382:	68db      	ldr	r3, [r3, #12]
 8013384:	4a37      	ldr	r2, [pc, #220]	@ (8013464 <tcp_abandon+0x170>)
 8013386:	6013      	str	r3, [r2, #0]
 8013388:	e013      	b.n	80133b2 <tcp_abandon+0xbe>
 801338a:	4b36      	ldr	r3, [pc, #216]	@ (8013464 <tcp_abandon+0x170>)
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	61fb      	str	r3, [r7, #28]
 8013390:	e00c      	b.n	80133ac <tcp_abandon+0xb8>
 8013392:	69fb      	ldr	r3, [r7, #28]
 8013394:	68db      	ldr	r3, [r3, #12]
 8013396:	687a      	ldr	r2, [r7, #4]
 8013398:	429a      	cmp	r2, r3
 801339a:	d104      	bne.n	80133a6 <tcp_abandon+0xb2>
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	68da      	ldr	r2, [r3, #12]
 80133a0:	69fb      	ldr	r3, [r7, #28]
 80133a2:	60da      	str	r2, [r3, #12]
 80133a4:	e005      	b.n	80133b2 <tcp_abandon+0xbe>
 80133a6:	69fb      	ldr	r3, [r7, #28]
 80133a8:	68db      	ldr	r3, [r3, #12]
 80133aa:	61fb      	str	r3, [r7, #28]
 80133ac:	69fb      	ldr	r3, [r7, #28]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d1ef      	bne.n	8013392 <tcp_abandon+0x9e>
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	2200      	movs	r2, #0
 80133b6:	60da      	str	r2, [r3, #12]
 80133b8:	e00b      	b.n	80133d2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80133ba:	683b      	ldr	r3, [r7, #0]
 80133bc:	627b      	str	r3, [r7, #36]	@ 0x24
      local_port = pcb->local_port;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	8adb      	ldrh	r3, [r3, #22]
 80133c2:	847b      	strh	r3, [r7, #34]	@ 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80133c4:	6879      	ldr	r1, [r7, #4]
 80133c6:	4828      	ldr	r0, [pc, #160]	@ (8013468 <tcp_abandon+0x174>)
 80133c8:	f000 ff7c 	bl	80142c4 <tcp_pcb_remove>
 80133cc:	4b27      	ldr	r3, [pc, #156]	@ (801346c <tcp_abandon+0x178>)
 80133ce:	2201      	movs	r2, #1
 80133d0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	d004      	beq.n	80133e4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133de:	4618      	mov	r0, r3
 80133e0:	f000 fd1e 	bl	8013e20 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80133e8:	2b00      	cmp	r3, #0
 80133ea:	d004      	beq.n	80133f6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 80133ec:	687b      	ldr	r3, [r7, #4]
 80133ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80133f0:	4618      	mov	r0, r3
 80133f2:	f000 fd15 	bl	8013e20 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d004      	beq.n	8013408 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013402:	4618      	mov	r0, r3
 8013404:	f000 fd0c 	bl	8013e20 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801340a:	2b00      	cmp	r3, #0
 801340c:	d00e      	beq.n	801342c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 801340e:	6879      	ldr	r1, [r7, #4]
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	3304      	adds	r3, #4
 8013414:	687a      	ldr	r2, [r7, #4]
 8013416:	8b12      	ldrh	r2, [r2, #24]
 8013418:	9202      	str	r2, [sp, #8]
 801341a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801341c:	9201      	str	r2, [sp, #4]
 801341e:	9300      	str	r3, [sp, #0]
 8013420:	460b      	mov	r3, r1
 8013422:	697a      	ldr	r2, [r7, #20]
 8013424:	69b9      	ldr	r1, [r7, #24]
 8013426:	6878      	ldr	r0, [r7, #4]
 8013428:	f004 fcbe 	bl	8017da8 <tcp_rst>
    }
    last_state = pcb->state;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	7d1b      	ldrb	r3, [r3, #20]
 8013430:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8013432:	6878      	ldr	r0, [r7, #4]
 8013434:	f7ff fd34 	bl	8012ea0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013438:	693b      	ldr	r3, [r7, #16]
 801343a:	2b00      	cmp	r3, #0
 801343c:	d004      	beq.n	8013448 <tcp_abandon+0x154>
 801343e:	693b      	ldr	r3, [r7, #16]
 8013440:	f06f 010c 	mvn.w	r1, #12
 8013444:	68f8      	ldr	r0, [r7, #12]
 8013446:	4798      	blx	r3
  }
}
 8013448:	3728      	adds	r7, #40	@ 0x28
 801344a:	46bd      	mov	sp, r7
 801344c:	bd80      	pop	{r7, pc}
 801344e:	bf00      	nop
 8013450:	08022cc0 	.word	0x08022cc0
 8013454:	08022e04 	.word	0x08022e04
 8013458:	08022d04 	.word	0x08022d04
 801345c:	08022e20 	.word	0x08022e20
 8013460:	2001b024 	.word	0x2001b024
 8013464:	2001b018 	.word	0x2001b018
 8013468:	2001b020 	.word	0x2001b020
 801346c:	2001b028 	.word	0x2001b028

08013470 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b082      	sub	sp, #8
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013478:	2101      	movs	r1, #1
 801347a:	6878      	ldr	r0, [r7, #4]
 801347c:	f7ff ff3a 	bl	80132f4 <tcp_abandon>
}
 8013480:	bf00      	nop
 8013482:	3708      	adds	r7, #8
 8013484:	46bd      	mov	sp, r7
 8013486:	bd80      	pop	{r7, pc}

08013488 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013488:	b580      	push	{r7, lr}
 801348a:	b084      	sub	sp, #16
 801348c:	af00      	add	r7, sp, #0
 801348e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013490:	687b      	ldr	r3, [r7, #4]
 8013492:	2b00      	cmp	r3, #0
 8013494:	d106      	bne.n	80134a4 <tcp_update_rcv_ann_wnd+0x1c>
 8013496:	4b25      	ldr	r3, [pc, #148]	@ (801352c <tcp_update_rcv_ann_wnd+0xa4>)
 8013498:	f240 32a6 	movw	r2, #934	@ 0x3a6
 801349c:	4924      	ldr	r1, [pc, #144]	@ (8013530 <tcp_update_rcv_ann_wnd+0xa8>)
 801349e:	4825      	ldr	r0, [pc, #148]	@ (8013534 <tcp_update_rcv_ann_wnd+0xac>)
 80134a0:	f00b f92e 	bl	801e700 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80134a4:	687b      	ldr	r3, [r7, #4]
 80134a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134a8:	687a      	ldr	r2, [r7, #4]
 80134aa:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 80134ac:	4413      	add	r3, r2
 80134ae:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134b4:	687a      	ldr	r2, [r7, #4]
 80134b6:	8e52      	ldrh	r2, [r2, #50]	@ 0x32
 80134b8:	f5b2 6f86 	cmp.w	r2, #1072	@ 0x430
 80134bc:	bf28      	it	cs
 80134be:	f44f 6286 	movcs.w	r2, #1072	@ 0x430
 80134c2:	b292      	uxth	r2, r2
 80134c4:	4413      	add	r3, r2
 80134c6:	68fa      	ldr	r2, [r7, #12]
 80134c8:	1ad3      	subs	r3, r2, r3
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	db08      	blt.n	80134e0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 80134ce:	687b      	ldr	r3, [r7, #4]
 80134d0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134da:	68fa      	ldr	r2, [r7, #12]
 80134dc:	1ad3      	subs	r3, r2, r3
 80134de:	e020      	b.n	8013522 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80134e8:	1ad3      	subs	r3, r2, r3
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	dd03      	ble.n	80134f6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	2200      	movs	r2, #0
 80134f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80134f4:	e014      	b.n	8013520 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134fe:	1ad3      	subs	r3, r2, r3
 8013500:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013508:	d306      	bcc.n	8013518 <tcp_update_rcv_ann_wnd+0x90>
 801350a:	4b08      	ldr	r3, [pc, #32]	@ (801352c <tcp_update_rcv_ann_wnd+0xa4>)
 801350c:	f240 32b6 	movw	r2, #950	@ 0x3b6
 8013510:	4909      	ldr	r1, [pc, #36]	@ (8013538 <tcp_update_rcv_ann_wnd+0xb0>)
 8013512:	4808      	ldr	r0, [pc, #32]	@ (8013534 <tcp_update_rcv_ann_wnd+0xac>)
 8013514:	f00b f8f4 	bl	801e700 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	b29a      	uxth	r2, r3
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
    return 0;
 8013520:	2300      	movs	r3, #0
  }
}
 8013522:	4618      	mov	r0, r3
 8013524:	3710      	adds	r7, #16
 8013526:	46bd      	mov	sp, r7
 8013528:	bd80      	pop	{r7, pc}
 801352a:	bf00      	nop
 801352c:	08022cc0 	.word	0x08022cc0
 8013530:	08022f1c 	.word	0x08022f1c
 8013534:	08022d04 	.word	0x08022d04
 8013538:	08022f40 	.word	0x08022f40

0801353c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 801353c:	b580      	push	{r7, lr}
 801353e:	b084      	sub	sp, #16
 8013540:	af00      	add	r7, sp, #0
 8013542:	6078      	str	r0, [r7, #4]
 8013544:	460b      	mov	r3, r1
 8013546:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	2b00      	cmp	r3, #0
 801354c:	d107      	bne.n	801355e <tcp_recved+0x22>
 801354e:	4b1f      	ldr	r3, [pc, #124]	@ (80135cc <tcp_recved+0x90>)
 8013550:	f240 32cf 	movw	r2, #975	@ 0x3cf
 8013554:	491e      	ldr	r1, [pc, #120]	@ (80135d0 <tcp_recved+0x94>)
 8013556:	481f      	ldr	r0, [pc, #124]	@ (80135d4 <tcp_recved+0x98>)
 8013558:	f00b f8d2 	bl	801e700 <iprintf>
 801355c:	e032      	b.n	80135c4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	7d1b      	ldrb	r3, [r3, #20]
 8013562:	2b01      	cmp	r3, #1
 8013564:	d106      	bne.n	8013574 <tcp_recved+0x38>
 8013566:	4b19      	ldr	r3, [pc, #100]	@ (80135cc <tcp_recved+0x90>)
 8013568:	f240 32d2 	movw	r2, #978	@ 0x3d2
 801356c:	491a      	ldr	r1, [pc, #104]	@ (80135d8 <tcp_recved+0x9c>)
 801356e:	4819      	ldr	r0, [pc, #100]	@ (80135d4 <tcp_recved+0x98>)
 8013570:	f00b f8c6 	bl	801e700 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8013578:	887b      	ldrh	r3, [r7, #2]
 801357a:	4413      	add	r3, r2
 801357c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801357e:	89fb      	ldrh	r3, [r7, #14]
 8013580:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013584:	d804      	bhi.n	8013590 <tcp_recved+0x54>
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801358a:	89fa      	ldrh	r2, [r7, #14]
 801358c:	429a      	cmp	r2, r3
 801358e:	d204      	bcs.n	801359a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 8013596:	851a      	strh	r2, [r3, #40]	@ 0x28
 8013598:	e002      	b.n	80135a0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	89fa      	ldrh	r2, [r7, #14]
 801359e:	851a      	strh	r2, [r3, #40]	@ 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80135a0:	6878      	ldr	r0, [r7, #4]
 80135a2:	f7ff ff71 	bl	8013488 <tcp_update_rcv_ann_wnd>
 80135a6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80135a8:	68bb      	ldr	r3, [r7, #8]
 80135aa:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80135ae:	d309      	bcc.n	80135c4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	8b5b      	ldrh	r3, [r3, #26]
 80135b4:	f043 0302 	orr.w	r3, r3, #2
 80135b8:	b29a      	uxth	r2, r3
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80135be:	6878      	ldr	r0, [r7, #4]
 80135c0:	f003 fe3e 	bl	8017240 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 80135c4:	3710      	adds	r7, #16
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}
 80135ca:	bf00      	nop
 80135cc:	08022cc0 	.word	0x08022cc0
 80135d0:	08022f5c 	.word	0x08022f5c
 80135d4:	08022d04 	.word	0x08022d04
 80135d8:	08022f74 	.word	0x08022f74

080135dc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80135dc:	b5b0      	push	{r4, r5, r7, lr}
 80135de:	b090      	sub	sp, #64	@ 0x40
 80135e0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80135e2:	2300      	movs	r3, #0
 80135e4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

  ++tcp_ticks;
 80135e8:	4b95      	ldr	r3, [pc, #596]	@ (8013840 <tcp_slowtmr+0x264>)
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	3301      	adds	r3, #1
 80135ee:	4a94      	ldr	r2, [pc, #592]	@ (8013840 <tcp_slowtmr+0x264>)
 80135f0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80135f2:	4b94      	ldr	r3, [pc, #592]	@ (8013844 <tcp_slowtmr+0x268>)
 80135f4:	781b      	ldrb	r3, [r3, #0]
 80135f6:	3301      	adds	r3, #1
 80135f8:	b2da      	uxtb	r2, r3
 80135fa:	4b92      	ldr	r3, [pc, #584]	@ (8013844 <tcp_slowtmr+0x268>)
 80135fc:	701a      	strb	r2, [r3, #0]
 80135fe:	e000      	b.n	8013602 <tcp_slowtmr+0x26>
        prev->polltmr = 0;
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
        TCP_EVENT_POLL(prev, err);
        if (tcp_active_pcbs_changed) {
          goto tcp_slowtmr_start;
 8013600:	bf00      	nop
  prev = NULL;
 8013602:	2300      	movs	r3, #0
 8013604:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_active_pcbs;
 8013606:	4b90      	ldr	r3, [pc, #576]	@ (8013848 <tcp_slowtmr+0x26c>)
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 801360c:	e29f      	b.n	8013b4e <tcp_slowtmr+0x572>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801360e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013610:	7d1b      	ldrb	r3, [r3, #20]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d106      	bne.n	8013624 <tcp_slowtmr+0x48>
 8013616:	4b8d      	ldr	r3, [pc, #564]	@ (801384c <tcp_slowtmr+0x270>)
 8013618:	f240 42be 	movw	r2, #1214	@ 0x4be
 801361c:	498c      	ldr	r1, [pc, #560]	@ (8013850 <tcp_slowtmr+0x274>)
 801361e:	488d      	ldr	r0, [pc, #564]	@ (8013854 <tcp_slowtmr+0x278>)
 8013620:	f00b f86e 	bl	801e700 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8013624:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013626:	7d1b      	ldrb	r3, [r3, #20]
 8013628:	2b01      	cmp	r3, #1
 801362a:	d106      	bne.n	801363a <tcp_slowtmr+0x5e>
 801362c:	4b87      	ldr	r3, [pc, #540]	@ (801384c <tcp_slowtmr+0x270>)
 801362e:	f240 42bf 	movw	r2, #1215	@ 0x4bf
 8013632:	4989      	ldr	r1, [pc, #548]	@ (8013858 <tcp_slowtmr+0x27c>)
 8013634:	4887      	ldr	r0, [pc, #540]	@ (8013854 <tcp_slowtmr+0x278>)
 8013636:	f00b f863 	bl	801e700 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801363a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801363c:	7d1b      	ldrb	r3, [r3, #20]
 801363e:	2b0a      	cmp	r3, #10
 8013640:	d106      	bne.n	8013650 <tcp_slowtmr+0x74>
 8013642:	4b82      	ldr	r3, [pc, #520]	@ (801384c <tcp_slowtmr+0x270>)
 8013644:	f44f 6298 	mov.w	r2, #1216	@ 0x4c0
 8013648:	4984      	ldr	r1, [pc, #528]	@ (801385c <tcp_slowtmr+0x280>)
 801364a:	4882      	ldr	r0, [pc, #520]	@ (8013854 <tcp_slowtmr+0x278>)
 801364c:	f00b f858 	bl	801e700 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8013650:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013652:	7f9a      	ldrb	r2, [r3, #30]
 8013654:	4b7b      	ldr	r3, [pc, #492]	@ (8013844 <tcp_slowtmr+0x268>)
 8013656:	781b      	ldrb	r3, [r3, #0]
 8013658:	429a      	cmp	r2, r3
 801365a:	d105      	bne.n	8013668 <tcp_slowtmr+0x8c>
      prev = pcb;
 801365c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801365e:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013662:	68db      	ldr	r3, [r3, #12]
 8013664:	62fb      	str	r3, [r7, #44]	@ 0x2c
      continue;
 8013666:	e272      	b.n	8013b4e <tcp_slowtmr+0x572>
    pcb->last_timer = tcp_timer_ctr;
 8013668:	4b76      	ldr	r3, [pc, #472]	@ (8013844 <tcp_slowtmr+0x268>)
 801366a:	781a      	ldrb	r2, [r3, #0]
 801366c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801366e:	779a      	strb	r2, [r3, #30]
    pcb_remove = 0;
 8013670:	2300      	movs	r3, #0
 8013672:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    pcb_reset = 0;
 8013676:	2300      	movs	r3, #0
 8013678:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801367c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801367e:	7d1b      	ldrb	r3, [r3, #20]
 8013680:	2b02      	cmp	r3, #2
 8013682:	d10a      	bne.n	801369a <tcp_slowtmr+0xbe>
 8013684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013686:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801368a:	2b05      	cmp	r3, #5
 801368c:	d905      	bls.n	801369a <tcp_slowtmr+0xbe>
      ++pcb_remove;
 801368e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013692:	3301      	adds	r3, #1
 8013694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8013698:	e11e      	b.n	80138d8 <tcp_slowtmr+0x2fc>
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801369a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801369c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80136a0:	2b0b      	cmp	r3, #11
 80136a2:	d905      	bls.n	80136b0 <tcp_slowtmr+0xd4>
      ++pcb_remove;
 80136a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136a8:	3301      	adds	r3, #1
 80136aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80136ae:	e113      	b.n	80138d8 <tcp_slowtmr+0x2fc>
      if (pcb->persist_backoff > 0) {
 80136b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136b2:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d075      	beq.n	80137a6 <tcp_slowtmr+0x1ca>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80136ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80136be:	2b00      	cmp	r3, #0
 80136c0:	d006      	beq.n	80136d0 <tcp_slowtmr+0xf4>
 80136c2:	4b62      	ldr	r3, [pc, #392]	@ (801384c <tcp_slowtmr+0x270>)
 80136c4:	f240 42d4 	movw	r2, #1236	@ 0x4d4
 80136c8:	4965      	ldr	r1, [pc, #404]	@ (8013860 <tcp_slowtmr+0x284>)
 80136ca:	4862      	ldr	r0, [pc, #392]	@ (8013854 <tcp_slowtmr+0x278>)
 80136cc:	f00b f818 	bl	801e700 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80136d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d106      	bne.n	80136e6 <tcp_slowtmr+0x10a>
 80136d8:	4b5c      	ldr	r3, [pc, #368]	@ (801384c <tcp_slowtmr+0x270>)
 80136da:	f240 42d5 	movw	r2, #1237	@ 0x4d5
 80136de:	4961      	ldr	r1, [pc, #388]	@ (8013864 <tcp_slowtmr+0x288>)
 80136e0:	485c      	ldr	r0, [pc, #368]	@ (8013854 <tcp_slowtmr+0x278>)
 80136e2:	f00b f80d 	bl	801e700 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80136e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136e8:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 80136ec:	2b0b      	cmp	r3, #11
 80136ee:	d905      	bls.n	80136fc <tcp_slowtmr+0x120>
          ++pcb_remove; /* max probes reached */
 80136f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80136f4:	3301      	adds	r3, #1
 80136f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80136fa:	e0ed      	b.n	80138d8 <tcp_slowtmr+0x2fc>
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80136fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80136fe:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8013702:	3b01      	subs	r3, #1
 8013704:	4a58      	ldr	r2, [pc, #352]	@ (8013868 <tcp_slowtmr+0x28c>)
 8013706:	5cd3      	ldrb	r3, [r2, r3]
 8013708:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801370a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801370c:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 8013710:	7c7a      	ldrb	r2, [r7, #17]
 8013712:	429a      	cmp	r2, r3
 8013714:	d907      	bls.n	8013726 <tcp_slowtmr+0x14a>
            pcb->persist_cnt++;
 8013716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013718:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801371c:	3301      	adds	r3, #1
 801371e:	b2da      	uxtb	r2, r3
 8013720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013722:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
          if (pcb->persist_cnt >= backoff_cnt) {
 8013726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013728:	f893 3098 	ldrb.w	r3, [r3, #152]	@ 0x98
 801372c:	7c7a      	ldrb	r2, [r7, #17]
 801372e:	429a      	cmp	r2, r3
 8013730:	f200 80d2 	bhi.w	80138d8 <tcp_slowtmr+0x2fc>
            int next_slot = 1; /* increment timer to next slot */
 8013734:	2301      	movs	r3, #1
 8013736:	623b      	str	r3, [r7, #32]
            if (pcb->snd_wnd == 0) {
 8013738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801373a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801373e:	2b00      	cmp	r3, #0
 8013740:	d108      	bne.n	8013754 <tcp_slowtmr+0x178>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8013742:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013744:	f004 fc24 	bl	8017f90 <tcp_zero_window_probe>
 8013748:	4603      	mov	r3, r0
 801374a:	2b00      	cmp	r3, #0
 801374c:	d014      	beq.n	8013778 <tcp_slowtmr+0x19c>
                next_slot = 0; /* try probe again with current slot */
 801374e:	2300      	movs	r3, #0
 8013750:	623b      	str	r3, [r7, #32]
 8013752:	e011      	b.n	8013778 <tcp_slowtmr+0x19c>
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8013754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013756:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801375a:	4619      	mov	r1, r3
 801375c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801375e:	f003 fae9 	bl	8016d34 <tcp_split_unsent_seg>
 8013762:	4603      	mov	r3, r0
 8013764:	2b00      	cmp	r3, #0
 8013766:	d107      	bne.n	8013778 <tcp_slowtmr+0x19c>
                if (tcp_output(pcb) == ERR_OK) {
 8013768:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801376a:	f003 fd69 	bl	8017240 <tcp_output>
 801376e:	4603      	mov	r3, r0
 8013770:	2b00      	cmp	r3, #0
 8013772:	d101      	bne.n	8013778 <tcp_slowtmr+0x19c>
                  next_slot = 0;
 8013774:	2300      	movs	r3, #0
 8013776:	623b      	str	r3, [r7, #32]
            if (next_slot) {
 8013778:	6a3b      	ldr	r3, [r7, #32]
 801377a:	2b00      	cmp	r3, #0
 801377c:	f000 80ac 	beq.w	80138d8 <tcp_slowtmr+0x2fc>
              pcb->persist_cnt = 0;
 8013780:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013782:	2200      	movs	r2, #0
 8013784:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8013788:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801378a:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801378e:	2b06      	cmp	r3, #6
 8013790:	f200 80a2 	bhi.w	80138d8 <tcp_slowtmr+0x2fc>
                pcb->persist_backoff++;
 8013794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013796:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 801379a:	3301      	adds	r3, #1
 801379c:	b2da      	uxtb	r2, r3
 801379e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137a0:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
 80137a4:	e098      	b.n	80138d8 <tcp_slowtmr+0x2fc>
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80137a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137a8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	db0f      	blt.n	80137d0 <tcp_slowtmr+0x1f4>
 80137b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137b2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80137b6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80137ba:	4293      	cmp	r3, r2
 80137bc:	d008      	beq.n	80137d0 <tcp_slowtmr+0x1f4>
          ++pcb->rtime;
 80137be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137c0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 80137c4:	b29b      	uxth	r3, r3
 80137c6:	3301      	adds	r3, #1
 80137c8:	b29b      	uxth	r3, r3
 80137ca:	b21a      	sxth	r2, r3
 80137cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137ce:	861a      	strh	r2, [r3, #48]	@ 0x30
        if (pcb->rtime >= pcb->rto) {
 80137d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137d2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	@ 0x30
 80137d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137d8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80137dc:	429a      	cmp	r2, r3
 80137de:	db7b      	blt.n	80138d8 <tcp_slowtmr+0x2fc>
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80137e0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80137e2:	f004 f821 	bl	8017828 <tcp_rexmit_rto_prepare>
 80137e6:	4603      	mov	r3, r0
 80137e8:	2b00      	cmp	r3, #0
 80137ea:	d007      	beq.n	80137fc <tcp_slowtmr+0x220>
 80137ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d171      	bne.n	80138d8 <tcp_slowtmr+0x2fc>
 80137f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d06d      	beq.n	80138d8 <tcp_slowtmr+0x2fc>
            if (pcb->state != SYN_SENT) {
 80137fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80137fe:	7d1b      	ldrb	r3, [r3, #20]
 8013800:	2b02      	cmp	r3, #2
 8013802:	d03a      	beq.n	801387a <tcp_slowtmr+0x29e>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8013804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013806:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801380a:	2b0c      	cmp	r3, #12
 801380c:	bf28      	it	cs
 801380e:	230c      	movcs	r3, #12
 8013810:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8013812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013814:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8013818:	10db      	asrs	r3, r3, #3
 801381a:	b21b      	sxth	r3, r3
 801381c:	461a      	mov	r2, r3
 801381e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013820:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8013824:	4413      	add	r3, r2
 8013826:	7efa      	ldrb	r2, [r7, #27]
 8013828:	4910      	ldr	r1, [pc, #64]	@ (801386c <tcp_slowtmr+0x290>)
 801382a:	5c8a      	ldrb	r2, [r1, r2]
 801382c:	4093      	lsls	r3, r2
 801382e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8013830:	697b      	ldr	r3, [r7, #20]
 8013832:	f647 72fe 	movw	r2, #32766	@ 0x7ffe
 8013836:	4293      	cmp	r3, r2
 8013838:	dc1a      	bgt.n	8013870 <tcp_slowtmr+0x294>
 801383a:	697b      	ldr	r3, [r7, #20]
 801383c:	b21a      	sxth	r2, r3
 801383e:	e019      	b.n	8013874 <tcp_slowtmr+0x298>
 8013840:	2001b014 	.word	0x2001b014
 8013844:	2001b02a 	.word	0x2001b02a
 8013848:	2001b020 	.word	0x2001b020
 801384c:	08022cc0 	.word	0x08022cc0
 8013850:	08023004 	.word	0x08023004
 8013854:	08022d04 	.word	0x08022d04
 8013858:	08023030 	.word	0x08023030
 801385c:	0802305c 	.word	0x0802305c
 8013860:	0802308c 	.word	0x0802308c
 8013864:	080230c0 	.word	0x080230c0
 8013868:	080252a0 	.word	0x080252a0
 801386c:	08025290 	.word	0x08025290
 8013870:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8013874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013876:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
            pcb->rtime = 0;
 801387a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801387c:	2200      	movs	r2, #0
 801387e:	861a      	strh	r2, [r3, #48]	@ 0x30
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8013880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013882:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8013886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013888:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 801388c:	4293      	cmp	r3, r2
 801388e:	bf28      	it	cs
 8013890:	4613      	movcs	r3, r2
 8013892:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8013894:	8a7b      	ldrh	r3, [r7, #18]
 8013896:	085b      	lsrs	r3, r3, #1
 8013898:	b29a      	uxth	r2, r3
 801389a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801389c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80138a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 80138a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80138aa:	005b      	lsls	r3, r3, #1
 80138ac:	b29b      	uxth	r3, r3
 80138ae:	429a      	cmp	r2, r3
 80138b0:	d206      	bcs.n	80138c0 <tcp_slowtmr+0x2e4>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80138b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138b4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80138b6:	005b      	lsls	r3, r3, #1
 80138b8:	b29a      	uxth	r2, r3
 80138ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138bc:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
            pcb->cwnd = pcb->mss;
 80138c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138c2:	8e5a      	ldrh	r2, [r3, #50]	@ 0x32
 80138c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138c6:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
            pcb->bytes_acked = 0;
 80138ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138cc:	2200      	movs	r2, #0
 80138ce:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            tcp_rexmit_rto_commit(pcb);
 80138d2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80138d4:	f004 f818 	bl	8017908 <tcp_rexmit_rto_commit>
    if (pcb->state == FIN_WAIT_2) {
 80138d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138da:	7d1b      	ldrb	r3, [r3, #20]
 80138dc:	2b06      	cmp	r3, #6
 80138de:	d111      	bne.n	8013904 <tcp_slowtmr+0x328>
      if (pcb->flags & TF_RXCLOSED) {
 80138e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138e2:	8b5b      	ldrh	r3, [r3, #26]
 80138e4:	f003 0310 	and.w	r3, r3, #16
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d00b      	beq.n	8013904 <tcp_slowtmr+0x328>
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80138ec:	4b9d      	ldr	r3, [pc, #628]	@ (8013b64 <tcp_slowtmr+0x588>)
 80138ee:	681a      	ldr	r2, [r3, #0]
 80138f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80138f2:	6a1b      	ldr	r3, [r3, #32]
 80138f4:	1ad3      	subs	r3, r2, r3
 80138f6:	2b28      	cmp	r3, #40	@ 0x28
 80138f8:	d904      	bls.n	8013904 <tcp_slowtmr+0x328>
          ++pcb_remove;
 80138fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80138fe:	3301      	adds	r3, #1
 8013900:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013906:	7a5b      	ldrb	r3, [r3, #9]
 8013908:	f003 0308 	and.w	r3, r3, #8
 801390c:	2b00      	cmp	r3, #0
 801390e:	d04c      	beq.n	80139aa <tcp_slowtmr+0x3ce>
        ((pcb->state == ESTABLISHED) ||
 8013910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013912:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8013914:	2b04      	cmp	r3, #4
 8013916:	d003      	beq.n	8013920 <tcp_slowtmr+0x344>
         (pcb->state == CLOSE_WAIT))) {
 8013918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801391a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801391c:	2b07      	cmp	r3, #7
 801391e:	d144      	bne.n	80139aa <tcp_slowtmr+0x3ce>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013920:	4b90      	ldr	r3, [pc, #576]	@ (8013b64 <tcp_slowtmr+0x588>)
 8013922:	681a      	ldr	r2, [r3, #0]
 8013924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013926:	6a1b      	ldr	r3, [r3, #32]
 8013928:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801392a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801392c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013930:	f503 2324 	add.w	r3, r3, #671744	@ 0xa4000
 8013934:	f603 43b8 	addw	r3, r3, #3256	@ 0xcb8
 8013938:	498b      	ldr	r1, [pc, #556]	@ (8013b68 <tcp_slowtmr+0x58c>)
 801393a:	fba1 1303 	umull	r1, r3, r1, r3
 801393e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013940:	429a      	cmp	r2, r3
 8013942:	d90a      	bls.n	801395a <tcp_slowtmr+0x37e>
        ++pcb_remove;
 8013944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013948:	3301      	adds	r3, #1
 801394a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        ++pcb_reset;
 801394e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013952:	3301      	adds	r3, #1
 8013954:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8013958:	e027      	b.n	80139aa <tcp_slowtmr+0x3ce>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801395a:	4b82      	ldr	r3, [pc, #520]	@ (8013b64 <tcp_slowtmr+0x588>)
 801395c:	681a      	ldr	r2, [r3, #0]
 801395e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013960:	6a1b      	ldr	r3, [r3, #32]
 8013962:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8013964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013966:	f8d3 1094 	ldr.w	r1, [r3, #148]	@ 0x94
 801396a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801396c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 8013970:	4618      	mov	r0, r3
 8013972:	4b7e      	ldr	r3, [pc, #504]	@ (8013b6c <tcp_slowtmr+0x590>)
 8013974:	fb00 f303 	mul.w	r3, r0, r3
 8013978:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801397a:	497b      	ldr	r1, [pc, #492]	@ (8013b68 <tcp_slowtmr+0x58c>)
 801397c:	fba1 1303 	umull	r1, r3, r1, r3
 8013980:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8013982:	429a      	cmp	r2, r3
 8013984:	d911      	bls.n	80139aa <tcp_slowtmr+0x3ce>
        err = tcp_keepalive(pcb);
 8013986:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013988:	f004 fac2 	bl	8017f10 <tcp_keepalive>
 801398c:	4603      	mov	r3, r0
 801398e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (err == ERR_OK) {
 8013992:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8013996:	2b00      	cmp	r3, #0
 8013998:	d107      	bne.n	80139aa <tcp_slowtmr+0x3ce>
          pcb->keep_cnt_sent++;
 801399a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801399c:	f893 309b 	ldrb.w	r3, [r3, #155]	@ 0x9b
 80139a0:	3301      	adds	r3, #1
 80139a2:	b2da      	uxtb	r2, r3
 80139a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139a6:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
    if (pcb->ooseq != NULL &&
 80139aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d011      	beq.n	80139d6 <tcp_slowtmr+0x3fa>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80139b2:	4b6c      	ldr	r3, [pc, #432]	@ (8013b64 <tcp_slowtmr+0x588>)
 80139b4:	681a      	ldr	r2, [r3, #0]
 80139b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139b8:	6a1b      	ldr	r3, [r3, #32]
 80139ba:	1ad2      	subs	r2, r2, r3
 80139bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139be:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	@ 0x40
 80139c2:	4619      	mov	r1, r3
 80139c4:	460b      	mov	r3, r1
 80139c6:	005b      	lsls	r3, r3, #1
 80139c8:	440b      	add	r3, r1
 80139ca:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80139cc:	429a      	cmp	r2, r3
 80139ce:	d302      	bcc.n	80139d6 <tcp_slowtmr+0x3fa>
      tcp_free_ooseq(pcb);
 80139d0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80139d2:	f000 fddb 	bl	801458c <tcp_free_ooseq>
    if (pcb->state == SYN_RCVD) {
 80139d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139d8:	7d1b      	ldrb	r3, [r3, #20]
 80139da:	2b03      	cmp	r3, #3
 80139dc:	d10b      	bne.n	80139f6 <tcp_slowtmr+0x41a>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80139de:	4b61      	ldr	r3, [pc, #388]	@ (8013b64 <tcp_slowtmr+0x588>)
 80139e0:	681a      	ldr	r2, [r3, #0]
 80139e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139e4:	6a1b      	ldr	r3, [r3, #32]
 80139e6:	1ad3      	subs	r3, r2, r3
 80139e8:	2b28      	cmp	r3, #40	@ 0x28
 80139ea:	d904      	bls.n	80139f6 <tcp_slowtmr+0x41a>
        ++pcb_remove;
 80139ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80139f0:	3301      	adds	r3, #1
 80139f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb->state == LAST_ACK) {
 80139f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80139f8:	7d1b      	ldrb	r3, [r3, #20]
 80139fa:	2b09      	cmp	r3, #9
 80139fc:	d10b      	bne.n	8013a16 <tcp_slowtmr+0x43a>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80139fe:	4b59      	ldr	r3, [pc, #356]	@ (8013b64 <tcp_slowtmr+0x588>)
 8013a00:	681a      	ldr	r2, [r3, #0]
 8013a02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a04:	6a1b      	ldr	r3, [r3, #32]
 8013a06:	1ad3      	subs	r3, r2, r3
 8013a08:	2bf0      	cmp	r3, #240	@ 0xf0
 8013a0a:	d904      	bls.n	8013a16 <tcp_slowtmr+0x43a>
        ++pcb_remove;
 8013a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013a10:	3301      	adds	r3, #1
 8013a12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (pcb_remove) {
 8013a16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d060      	beq.n	8013ae0 <tcp_slowtmr+0x504>
      tcp_err_fn err_fn = pcb->errf;
 8013a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8013a24:	60fb      	str	r3, [r7, #12]
      tcp_pcb_purge(pcb);
 8013a26:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013a28:	f000 fbfc 	bl	8014224 <tcp_pcb_purge>
      if (prev != NULL) {
 8013a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d010      	beq.n	8013a54 <tcp_slowtmr+0x478>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8013a32:	4b4f      	ldr	r3, [pc, #316]	@ (8013b70 <tcp_slowtmr+0x594>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	d106      	bne.n	8013a4a <tcp_slowtmr+0x46e>
 8013a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8013b74 <tcp_slowtmr+0x598>)
 8013a3e:	f240 526d 	movw	r2, #1389	@ 0x56d
 8013a42:	494d      	ldr	r1, [pc, #308]	@ (8013b78 <tcp_slowtmr+0x59c>)
 8013a44:	484d      	ldr	r0, [pc, #308]	@ (8013b7c <tcp_slowtmr+0x5a0>)
 8013a46:	f00a fe5b 	bl	801e700 <iprintf>
        prev->next = pcb->next;
 8013a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a4c:	68da      	ldr	r2, [r3, #12]
 8013a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013a50:	60da      	str	r2, [r3, #12]
 8013a52:	e00f      	b.n	8013a74 <tcp_slowtmr+0x498>
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8013a54:	4b46      	ldr	r3, [pc, #280]	@ (8013b70 <tcp_slowtmr+0x594>)
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013a5a:	429a      	cmp	r2, r3
 8013a5c:	d006      	beq.n	8013a6c <tcp_slowtmr+0x490>
 8013a5e:	4b45      	ldr	r3, [pc, #276]	@ (8013b74 <tcp_slowtmr+0x598>)
 8013a60:	f240 5271 	movw	r2, #1393	@ 0x571
 8013a64:	4946      	ldr	r1, [pc, #280]	@ (8013b80 <tcp_slowtmr+0x5a4>)
 8013a66:	4845      	ldr	r0, [pc, #276]	@ (8013b7c <tcp_slowtmr+0x5a0>)
 8013a68:	f00a fe4a 	bl	801e700 <iprintf>
        tcp_active_pcbs = pcb->next;
 8013a6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a6e:	68db      	ldr	r3, [r3, #12]
 8013a70:	4a3f      	ldr	r2, [pc, #252]	@ (8013b70 <tcp_slowtmr+0x594>)
 8013a72:	6013      	str	r3, [r2, #0]
      if (pcb_reset) {
 8013a74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d013      	beq.n	8013aa4 <tcp_slowtmr+0x4c8>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a7e:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8013a80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a82:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013a84:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8013a86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013a88:	3304      	adds	r3, #4
 8013a8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013a8c:	8ad2      	ldrh	r2, [r2, #22]
 8013a8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013a90:	8b09      	ldrh	r1, [r1, #24]
 8013a92:	9102      	str	r1, [sp, #8]
 8013a94:	9201      	str	r2, [sp, #4]
 8013a96:	9300      	str	r3, [sp, #0]
 8013a98:	462b      	mov	r3, r5
 8013a9a:	4622      	mov	r2, r4
 8013a9c:	4601      	mov	r1, r0
 8013a9e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013aa0:	f004 f982 	bl	8017da8 <tcp_rst>
      err_arg = pcb->callback_arg;
 8013aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aa6:	691b      	ldr	r3, [r3, #16]
 8013aa8:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8013aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013aac:	7d1b      	ldrb	r3, [r3, #20]
 8013aae:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8013ab0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ab2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8013ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ab6:	68db      	ldr	r3, [r3, #12]
 8013ab8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8013aba:	6838      	ldr	r0, [r7, #0]
 8013abc:	f7ff f9f0 	bl	8012ea0 <tcp_free>
      tcp_active_pcbs_changed = 0;
 8013ac0:	4b30      	ldr	r3, [pc, #192]	@ (8013b84 <tcp_slowtmr+0x5a8>)
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	d004      	beq.n	8013ad6 <tcp_slowtmr+0x4fa>
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	f06f 010c 	mvn.w	r1, #12
 8013ad2:	68b8      	ldr	r0, [r7, #8]
 8013ad4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8013ad6:	4b2b      	ldr	r3, [pc, #172]	@ (8013b84 <tcp_slowtmr+0x5a8>)
 8013ad8:	781b      	ldrb	r3, [r3, #0]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d037      	beq.n	8013b4e <tcp_slowtmr+0x572>
        goto tcp_slowtmr_start;
 8013ade:	e590      	b.n	8013602 <tcp_slowtmr+0x26>
      prev = pcb;
 8013ae0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ae2:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013ae6:	68db      	ldr	r3, [r3, #12]
 8013ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      ++prev->polltmr;
 8013aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013aec:	7f1b      	ldrb	r3, [r3, #28]
 8013aee:	3301      	adds	r3, #1
 8013af0:	b2da      	uxtb	r2, r3
 8013af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013af4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8013af6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013af8:	7f1a      	ldrb	r2, [r3, #28]
 8013afa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013afc:	7f5b      	ldrb	r3, [r3, #29]
 8013afe:	429a      	cmp	r2, r3
 8013b00:	d325      	bcc.n	8013b4e <tcp_slowtmr+0x572>
        prev->polltmr = 0;
 8013b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b04:	2200      	movs	r2, #0
 8013b06:	771a      	strb	r2, [r3, #28]
        tcp_active_pcbs_changed = 0;
 8013b08:	4b1e      	ldr	r3, [pc, #120]	@ (8013b84 <tcp_slowtmr+0x5a8>)
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8013b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d00b      	beq.n	8013b30 <tcp_slowtmr+0x554>
 8013b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8013b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013b20:	6912      	ldr	r2, [r2, #16]
 8013b22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013b24:	4610      	mov	r0, r2
 8013b26:	4798      	blx	r3
 8013b28:	4603      	mov	r3, r0
 8013b2a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8013b2e:	e002      	b.n	8013b36 <tcp_slowtmr+0x55a>
 8013b30:	2300      	movs	r3, #0
 8013b32:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (tcp_active_pcbs_changed) {
 8013b36:	4b13      	ldr	r3, [pc, #76]	@ (8013b84 <tcp_slowtmr+0x5a8>)
 8013b38:	781b      	ldrb	r3, [r3, #0]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	f47f ad60 	bne.w	8013600 <tcp_slowtmr+0x24>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8013b40:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8013b44:	2b00      	cmp	r3, #0
 8013b46:	d102      	bne.n	8013b4e <tcp_slowtmr+0x572>
          tcp_output(prev);
 8013b48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013b4a:	f003 fb79 	bl	8017240 <tcp_output>
  while (pcb != NULL) {
 8013b4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	f47f ad5c 	bne.w	801360e <tcp_slowtmr+0x32>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8013b56:	2300      	movs	r3, #0
 8013b58:	62bb      	str	r3, [r7, #40]	@ 0x28
  pcb = tcp_tw_pcbs;
 8013b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8013b88 <tcp_slowtmr+0x5ac>)
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013b60:	e067      	b.n	8013c32 <tcp_slowtmr+0x656>
 8013b62:	bf00      	nop
 8013b64:	2001b014 	.word	0x2001b014
 8013b68:	10624dd3 	.word	0x10624dd3
 8013b6c:	000124f8 	.word	0x000124f8
 8013b70:	2001b020 	.word	0x2001b020
 8013b74:	08022cc0 	.word	0x08022cc0
 8013b78:	080230f8 	.word	0x080230f8
 8013b7c:	08022d04 	.word	0x08022d04
 8013b80:	08023124 	.word	0x08023124
 8013b84:	2001b028 	.word	0x2001b028
 8013b88:	2001b024 	.word	0x2001b024
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013b8e:	7d1b      	ldrb	r3, [r3, #20]
 8013b90:	2b0a      	cmp	r3, #10
 8013b92:	d006      	beq.n	8013ba2 <tcp_slowtmr+0x5c6>
 8013b94:	4b2b      	ldr	r3, [pc, #172]	@ (8013c44 <tcp_slowtmr+0x668>)
 8013b96:	f240 52a1 	movw	r2, #1441	@ 0x5a1
 8013b9a:	492b      	ldr	r1, [pc, #172]	@ (8013c48 <tcp_slowtmr+0x66c>)
 8013b9c:	482b      	ldr	r0, [pc, #172]	@ (8013c4c <tcp_slowtmr+0x670>)
 8013b9e:	f00a fdaf 	bl	801e700 <iprintf>
    pcb_remove = 0;
 8013ba2:	2300      	movs	r3, #0
 8013ba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8013ba8:	4b29      	ldr	r3, [pc, #164]	@ (8013c50 <tcp_slowtmr+0x674>)
 8013baa:	681a      	ldr	r2, [r3, #0]
 8013bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bae:	6a1b      	ldr	r3, [r3, #32]
 8013bb0:	1ad3      	subs	r3, r2, r3
 8013bb2:	2bf0      	cmp	r3, #240	@ 0xf0
 8013bb4:	d904      	bls.n	8013bc0 <tcp_slowtmr+0x5e4>
      ++pcb_remove;
 8013bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013bba:	3301      	adds	r3, #1
 8013bbc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8013bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013bc4:	2b00      	cmp	r3, #0
 8013bc6:	d02f      	beq.n	8013c28 <tcp_slowtmr+0x64c>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8013bc8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013bca:	f000 fb2b 	bl	8014224 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8013bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	d010      	beq.n	8013bf6 <tcp_slowtmr+0x61a>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8013bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8013c54 <tcp_slowtmr+0x678>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013bda:	429a      	cmp	r2, r3
 8013bdc:	d106      	bne.n	8013bec <tcp_slowtmr+0x610>
 8013bde:	4b19      	ldr	r3, [pc, #100]	@ (8013c44 <tcp_slowtmr+0x668>)
 8013be0:	f240 52af 	movw	r2, #1455	@ 0x5af
 8013be4:	491c      	ldr	r1, [pc, #112]	@ (8013c58 <tcp_slowtmr+0x67c>)
 8013be6:	4819      	ldr	r0, [pc, #100]	@ (8013c4c <tcp_slowtmr+0x670>)
 8013be8:	f00a fd8a 	bl	801e700 <iprintf>
        prev->next = pcb->next;
 8013bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013bee:	68da      	ldr	r2, [r3, #12]
 8013bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013bf2:	60da      	str	r2, [r3, #12]
 8013bf4:	e00f      	b.n	8013c16 <tcp_slowtmr+0x63a>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8013bf6:	4b17      	ldr	r3, [pc, #92]	@ (8013c54 <tcp_slowtmr+0x678>)
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8013bfc:	429a      	cmp	r2, r3
 8013bfe:	d006      	beq.n	8013c0e <tcp_slowtmr+0x632>
 8013c00:	4b10      	ldr	r3, [pc, #64]	@ (8013c44 <tcp_slowtmr+0x668>)
 8013c02:	f240 52b3 	movw	r2, #1459	@ 0x5b3
 8013c06:	4915      	ldr	r1, [pc, #84]	@ (8013c5c <tcp_slowtmr+0x680>)
 8013c08:	4810      	ldr	r0, [pc, #64]	@ (8013c4c <tcp_slowtmr+0x670>)
 8013c0a:	f00a fd79 	bl	801e700 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8013c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c10:	68db      	ldr	r3, [r3, #12]
 8013c12:	4a10      	ldr	r2, [pc, #64]	@ (8013c54 <tcp_slowtmr+0x678>)
 8013c14:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8013c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c18:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8013c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c1c:	68db      	ldr	r3, [r3, #12]
 8013c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      tcp_free(pcb2);
 8013c20:	69f8      	ldr	r0, [r7, #28]
 8013c22:	f7ff f93d 	bl	8012ea0 <tcp_free>
 8013c26:	e004      	b.n	8013c32 <tcp_slowtmr+0x656>
    } else {
      prev = pcb;
 8013c28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
      pcb = pcb->next;
 8013c2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c2e:	68db      	ldr	r3, [r3, #12]
 8013c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (pcb != NULL) {
 8013c32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d1a9      	bne.n	8013b8c <tcp_slowtmr+0x5b0>
    }
  }
}
 8013c38:	bf00      	nop
 8013c3a:	bf00      	nop
 8013c3c:	3730      	adds	r7, #48	@ 0x30
 8013c3e:	46bd      	mov	sp, r7
 8013c40:	bdb0      	pop	{r4, r5, r7, pc}
 8013c42:	bf00      	nop
 8013c44:	08022cc0 	.word	0x08022cc0
 8013c48:	08023150 	.word	0x08023150
 8013c4c:	08022d04 	.word	0x08022d04
 8013c50:	2001b014 	.word	0x2001b014
 8013c54:	2001b024 	.word	0x2001b024
 8013c58:	08023180 	.word	0x08023180
 8013c5c:	080231a8 	.word	0x080231a8

08013c60 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8013c60:	b580      	push	{r7, lr}
 8013c62:	b082      	sub	sp, #8
 8013c64:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8013c66:	4b2d      	ldr	r3, [pc, #180]	@ (8013d1c <tcp_fasttmr+0xbc>)
 8013c68:	781b      	ldrb	r3, [r3, #0]
 8013c6a:	3301      	adds	r3, #1
 8013c6c:	b2da      	uxtb	r2, r3
 8013c6e:	4b2b      	ldr	r3, [pc, #172]	@ (8013d1c <tcp_fasttmr+0xbc>)
 8013c70:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8013c72:	4b2b      	ldr	r3, [pc, #172]	@ (8013d20 <tcp_fasttmr+0xc0>)
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8013c78:	e048      	b.n	8013d0c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	7f9a      	ldrb	r2, [r3, #30]
 8013c7e:	4b27      	ldr	r3, [pc, #156]	@ (8013d1c <tcp_fasttmr+0xbc>)
 8013c80:	781b      	ldrb	r3, [r3, #0]
 8013c82:	429a      	cmp	r2, r3
 8013c84:	d03f      	beq.n	8013d06 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8013c86:	4b25      	ldr	r3, [pc, #148]	@ (8013d1c <tcp_fasttmr+0xbc>)
 8013c88:	781a      	ldrb	r2, [r3, #0]
 8013c8a:	687b      	ldr	r3, [r7, #4]
 8013c8c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	8b5b      	ldrh	r3, [r3, #26]
 8013c92:	f003 0301 	and.w	r3, r3, #1
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d010      	beq.n	8013cbc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	8b5b      	ldrh	r3, [r3, #26]
 8013c9e:	f043 0302 	orr.w	r3, r3, #2
 8013ca2:	b29a      	uxth	r2, r3
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8013ca8:	6878      	ldr	r0, [r7, #4]
 8013caa:	f003 fac9 	bl	8017240 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	8b5b      	ldrh	r3, [r3, #26]
 8013cb2:	f023 0303 	bic.w	r3, r3, #3
 8013cb6:	b29a      	uxth	r2, r3
 8013cb8:	687b      	ldr	r3, [r7, #4]
 8013cba:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	8b5b      	ldrh	r3, [r3, #26]
 8013cc0:	f003 0308 	and.w	r3, r3, #8
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d009      	beq.n	8013cdc <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	8b5b      	ldrh	r3, [r3, #26]
 8013ccc:	f023 0308 	bic.w	r3, r3, #8
 8013cd0:	b29a      	uxth	r2, r3
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8013cd6:	6878      	ldr	r0, [r7, #4]
 8013cd8:	f7ff fa76 	bl	80131c8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8013cdc:	687b      	ldr	r3, [r7, #4]
 8013cde:	68db      	ldr	r3, [r3, #12]
 8013ce0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8013ce2:	687b      	ldr	r3, [r7, #4]
 8013ce4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d00a      	beq.n	8013d00 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8013cea:	4b0e      	ldr	r3, [pc, #56]	@ (8013d24 <tcp_fasttmr+0xc4>)
 8013cec:	2200      	movs	r2, #0
 8013cee:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8013cf0:	6878      	ldr	r0, [r7, #4]
 8013cf2:	f000 f819 	bl	8013d28 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8013cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8013d24 <tcp_fasttmr+0xc4>)
 8013cf8:	781b      	ldrb	r3, [r3, #0]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d000      	beq.n	8013d00 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8013cfe:	e7b8      	b.n	8013c72 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8013d00:	683b      	ldr	r3, [r7, #0]
 8013d02:	607b      	str	r3, [r7, #4]
 8013d04:	e002      	b.n	8013d0c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	68db      	ldr	r3, [r3, #12]
 8013d0a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d1b3      	bne.n	8013c7a <tcp_fasttmr+0x1a>
    }
  }
}
 8013d12:	bf00      	nop
 8013d14:	bf00      	nop
 8013d16:	3708      	adds	r7, #8
 8013d18:	46bd      	mov	sp, r7
 8013d1a:	bd80      	pop	{r7, pc}
 8013d1c:	2001b02a 	.word	0x2001b02a
 8013d20:	2001b020 	.word	0x2001b020
 8013d24:	2001b028 	.word	0x2001b028

08013d28 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8013d28:	b590      	push	{r4, r7, lr}
 8013d2a:	b085      	sub	sp, #20
 8013d2c:	af00      	add	r7, sp, #0
 8013d2e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d109      	bne.n	8013d4a <tcp_process_refused_data+0x22>
 8013d36:	4b37      	ldr	r3, [pc, #220]	@ (8013e14 <tcp_process_refused_data+0xec>)
 8013d38:	f240 6209 	movw	r2, #1545	@ 0x609
 8013d3c:	4936      	ldr	r1, [pc, #216]	@ (8013e18 <tcp_process_refused_data+0xf0>)
 8013d3e:	4837      	ldr	r0, [pc, #220]	@ (8013e1c <tcp_process_refused_data+0xf4>)
 8013d40:	f00a fcde 	bl	801e700 <iprintf>
 8013d44:	f06f 030f 	mvn.w	r3, #15
 8013d48:	e060      	b.n	8013e0c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013d4e:	7b5b      	ldrb	r3, [r3, #13]
 8013d50:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013d56:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	679a      	str	r2, [r3, #120]	@ 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d00b      	beq.n	8013d80 <tcp_process_refused_data+0x58>
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	6918      	ldr	r0, [r3, #16]
 8013d72:	2300      	movs	r3, #0
 8013d74:	68ba      	ldr	r2, [r7, #8]
 8013d76:	6879      	ldr	r1, [r7, #4]
 8013d78:	47a0      	blx	r4
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	73fb      	strb	r3, [r7, #15]
 8013d7e:	e007      	b.n	8013d90 <tcp_process_refused_data+0x68>
 8013d80:	2300      	movs	r3, #0
 8013d82:	68ba      	ldr	r2, [r7, #8]
 8013d84:	6879      	ldr	r1, [r7, #4]
 8013d86:	2000      	movs	r0, #0
 8013d88:	f000 f8a4 	bl	8013ed4 <tcp_recv_null>
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8013d90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d12a      	bne.n	8013dee <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8013d98:	7bbb      	ldrb	r3, [r7, #14]
 8013d9a:	f003 0320 	and.w	r3, r3, #32
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d033      	beq.n	8013e0a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013da6:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8013daa:	d005      	beq.n	8013db8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8013db0:	3301      	adds	r3, #1
 8013db2:	b29a      	uxth	r2, r3
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	851a      	strh	r2, [r3, #40]	@ 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d00b      	beq.n	8013dda <tcp_process_refused_data+0xb2>
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	6918      	ldr	r0, [r3, #16]
 8013dcc:	2300      	movs	r3, #0
 8013dce:	2200      	movs	r2, #0
 8013dd0:	6879      	ldr	r1, [r7, #4]
 8013dd2:	47a0      	blx	r4
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	73fb      	strb	r3, [r7, #15]
 8013dd8:	e001      	b.n	8013dde <tcp_process_refused_data+0xb6>
 8013dda:	2300      	movs	r3, #0
 8013ddc:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8013dde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013de2:	f113 0f0d 	cmn.w	r3, #13
 8013de6:	d110      	bne.n	8013e0a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8013de8:	f06f 030c 	mvn.w	r3, #12
 8013dec:	e00e      	b.n	8013e0c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8013dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013df2:	f113 0f0d 	cmn.w	r3, #13
 8013df6:	d102      	bne.n	8013dfe <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8013df8:	f06f 030c 	mvn.w	r3, #12
 8013dfc:	e006      	b.n	8013e0c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	68ba      	ldr	r2, [r7, #8]
 8013e02:	679a      	str	r2, [r3, #120]	@ 0x78
      return ERR_INPROGRESS;
 8013e04:	f06f 0304 	mvn.w	r3, #4
 8013e08:	e000      	b.n	8013e0c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8013e0a:	2300      	movs	r3, #0
}
 8013e0c:	4618      	mov	r0, r3
 8013e0e:	3714      	adds	r7, #20
 8013e10:	46bd      	mov	sp, r7
 8013e12:	bd90      	pop	{r4, r7, pc}
 8013e14:	08022cc0 	.word	0x08022cc0
 8013e18:	080231d0 	.word	0x080231d0
 8013e1c:	08022d04 	.word	0x08022d04

08013e20 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8013e20:	b580      	push	{r7, lr}
 8013e22:	b084      	sub	sp, #16
 8013e24:	af00      	add	r7, sp, #0
 8013e26:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8013e28:	e007      	b.n	8013e3a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	681b      	ldr	r3, [r3, #0]
 8013e2e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8013e30:	6878      	ldr	r0, [r7, #4]
 8013e32:	f000 f80a 	bl	8013e4a <tcp_seg_free>
    seg = next;
 8013e36:	68fb      	ldr	r3, [r7, #12]
 8013e38:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d1f4      	bne.n	8013e2a <tcp_segs_free+0xa>
  }
}
 8013e40:	bf00      	nop
 8013e42:	bf00      	nop
 8013e44:	3710      	adds	r7, #16
 8013e46:	46bd      	mov	sp, r7
 8013e48:	bd80      	pop	{r7, pc}

08013e4a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8013e4a:	b580      	push	{r7, lr}
 8013e4c:	b082      	sub	sp, #8
 8013e4e:	af00      	add	r7, sp, #0
 8013e50:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d00c      	beq.n	8013e72 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	685b      	ldr	r3, [r3, #4]
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d004      	beq.n	8013e6a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8013e60:	687b      	ldr	r3, [r7, #4]
 8013e62:	685b      	ldr	r3, [r3, #4]
 8013e64:	4618      	mov	r0, r3
 8013e66:	f7fe fc05 	bl	8012674 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8013e6a:	6879      	ldr	r1, [r7, #4]
 8013e6c:	2003      	movs	r0, #3
 8013e6e:	f7fd fd51 	bl	8011914 <memp_free>
  }
}
 8013e72:	bf00      	nop
 8013e74:	3708      	adds	r7, #8
 8013e76:	46bd      	mov	sp, r7
 8013e78:	bd80      	pop	{r7, pc}
	...

08013e7c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b084      	sub	sp, #16
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d106      	bne.n	8013e98 <tcp_seg_copy+0x1c>
 8013e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8013ec8 <tcp_seg_copy+0x4c>)
 8013e8c:	f240 6282 	movw	r2, #1666	@ 0x682
 8013e90:	490e      	ldr	r1, [pc, #56]	@ (8013ecc <tcp_seg_copy+0x50>)
 8013e92:	480f      	ldr	r0, [pc, #60]	@ (8013ed0 <tcp_seg_copy+0x54>)
 8013e94:	f00a fc34 	bl	801e700 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8013e98:	2003      	movs	r0, #3
 8013e9a:	f7fd fcc5 	bl	8011828 <memp_malloc>
 8013e9e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d101      	bne.n	8013eaa <tcp_seg_copy+0x2e>
    return NULL;
 8013ea6:	2300      	movs	r3, #0
 8013ea8:	e00a      	b.n	8013ec0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8013eaa:	2210      	movs	r2, #16
 8013eac:	6879      	ldr	r1, [r7, #4]
 8013eae:	68f8      	ldr	r0, [r7, #12]
 8013eb0:	f00a feb5 	bl	801ec1e <memcpy>
  pbuf_ref(cseg->p);
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	685b      	ldr	r3, [r3, #4]
 8013eb8:	4618      	mov	r0, r3
 8013eba:	f7fe fc81 	bl	80127c0 <pbuf_ref>
  return cseg;
 8013ebe:	68fb      	ldr	r3, [r7, #12]
}
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	3710      	adds	r7, #16
 8013ec4:	46bd      	mov	sp, r7
 8013ec6:	bd80      	pop	{r7, pc}
 8013ec8:	08022cc0 	.word	0x08022cc0
 8013ecc:	08023214 	.word	0x08023214
 8013ed0:	08022d04 	.word	0x08022d04

08013ed4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b084      	sub	sp, #16
 8013ed8:	af00      	add	r7, sp, #0
 8013eda:	60f8      	str	r0, [r7, #12]
 8013edc:	60b9      	str	r1, [r7, #8]
 8013ede:	607a      	str	r2, [r7, #4]
 8013ee0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ee2:	68bb      	ldr	r3, [r7, #8]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d109      	bne.n	8013efc <tcp_recv_null+0x28>
 8013ee8:	4b12      	ldr	r3, [pc, #72]	@ (8013f34 <tcp_recv_null+0x60>)
 8013eea:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 8013eee:	4912      	ldr	r1, [pc, #72]	@ (8013f38 <tcp_recv_null+0x64>)
 8013ef0:	4812      	ldr	r0, [pc, #72]	@ (8013f3c <tcp_recv_null+0x68>)
 8013ef2:	f00a fc05 	bl	801e700 <iprintf>
 8013ef6:	f06f 030f 	mvn.w	r3, #15
 8013efa:	e016      	b.n	8013f2a <tcp_recv_null+0x56>

  if (p != NULL) {
 8013efc:	687b      	ldr	r3, [r7, #4]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d009      	beq.n	8013f16 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	891b      	ldrh	r3, [r3, #8]
 8013f06:	4619      	mov	r1, r3
 8013f08:	68b8      	ldr	r0, [r7, #8]
 8013f0a:	f7ff fb17 	bl	801353c <tcp_recved>
    pbuf_free(p);
 8013f0e:	6878      	ldr	r0, [r7, #4]
 8013f10:	f7fe fbb0 	bl	8012674 <pbuf_free>
 8013f14:	e008      	b.n	8013f28 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8013f16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d104      	bne.n	8013f28 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8013f1e:	68b8      	ldr	r0, [r7, #8]
 8013f20:	f7ff f9bc 	bl	801329c <tcp_close>
 8013f24:	4603      	mov	r3, r0
 8013f26:	e000      	b.n	8013f2a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8013f28:	2300      	movs	r3, #0
}
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	3710      	adds	r7, #16
 8013f2e:	46bd      	mov	sp, r7
 8013f30:	bd80      	pop	{r7, pc}
 8013f32:	bf00      	nop
 8013f34:	08022cc0 	.word	0x08022cc0
 8013f38:	08023230 	.word	0x08023230
 8013f3c:	08022d04 	.word	0x08022d04

08013f40 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b086      	sub	sp, #24
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	4603      	mov	r3, r0
 8013f48:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013f4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	db01      	blt.n	8013f56 <tcp_kill_prio+0x16>
 8013f52:	79fb      	ldrb	r3, [r7, #7]
 8013f54:	e000      	b.n	8013f58 <tcp_kill_prio+0x18>
 8013f56:	237f      	movs	r3, #127	@ 0x7f
 8013f58:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8013f5a:	7afb      	ldrb	r3, [r7, #11]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d034      	beq.n	8013fca <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8013f60:	7afb      	ldrb	r3, [r7, #11]
 8013f62:	3b01      	subs	r3, #1
 8013f64:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8013f66:	2300      	movs	r3, #0
 8013f68:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013f6a:	2300      	movs	r3, #0
 8013f6c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013f6e:	4b19      	ldr	r3, [pc, #100]	@ (8013fd4 <tcp_kill_prio+0x94>)
 8013f70:	681b      	ldr	r3, [r3, #0]
 8013f72:	617b      	str	r3, [r7, #20]
 8013f74:	e01f      	b.n	8013fb6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8013f76:	697b      	ldr	r3, [r7, #20]
 8013f78:	7d5b      	ldrb	r3, [r3, #21]
 8013f7a:	7afa      	ldrb	r2, [r7, #11]
 8013f7c:	429a      	cmp	r2, r3
 8013f7e:	d80c      	bhi.n	8013f9a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013f80:	697b      	ldr	r3, [r7, #20]
 8013f82:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8013f84:	7afa      	ldrb	r2, [r7, #11]
 8013f86:	429a      	cmp	r2, r3
 8013f88:	d112      	bne.n	8013fb0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8013f8a:	4b13      	ldr	r3, [pc, #76]	@ (8013fd8 <tcp_kill_prio+0x98>)
 8013f8c:	681a      	ldr	r2, [r3, #0]
 8013f8e:	697b      	ldr	r3, [r7, #20]
 8013f90:	6a1b      	ldr	r3, [r3, #32]
 8013f92:	1ad3      	subs	r3, r2, r3
 8013f94:	68fa      	ldr	r2, [r7, #12]
 8013f96:	429a      	cmp	r2, r3
 8013f98:	d80a      	bhi.n	8013fb0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8013f9a:	4b0f      	ldr	r3, [pc, #60]	@ (8013fd8 <tcp_kill_prio+0x98>)
 8013f9c:	681a      	ldr	r2, [r3, #0]
 8013f9e:	697b      	ldr	r3, [r7, #20]
 8013fa0:	6a1b      	ldr	r3, [r3, #32]
 8013fa2:	1ad3      	subs	r3, r2, r3
 8013fa4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8013fa6:	697b      	ldr	r3, [r7, #20]
 8013fa8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8013faa:	697b      	ldr	r3, [r7, #20]
 8013fac:	7d5b      	ldrb	r3, [r3, #21]
 8013fae:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013fb0:	697b      	ldr	r3, [r7, #20]
 8013fb2:	68db      	ldr	r3, [r3, #12]
 8013fb4:	617b      	str	r3, [r7, #20]
 8013fb6:	697b      	ldr	r3, [r7, #20]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d1dc      	bne.n	8013f76 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8013fbc:	693b      	ldr	r3, [r7, #16]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d004      	beq.n	8013fcc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013fc2:	6938      	ldr	r0, [r7, #16]
 8013fc4:	f7ff fa54 	bl	8013470 <tcp_abort>
 8013fc8:	e000      	b.n	8013fcc <tcp_kill_prio+0x8c>
    return;
 8013fca:	bf00      	nop
  }
}
 8013fcc:	3718      	adds	r7, #24
 8013fce:	46bd      	mov	sp, r7
 8013fd0:	bd80      	pop	{r7, pc}
 8013fd2:	bf00      	nop
 8013fd4:	2001b020 	.word	0x2001b020
 8013fd8:	2001b014 	.word	0x2001b014

08013fdc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8013fdc:	b580      	push	{r7, lr}
 8013fde:	b086      	sub	sp, #24
 8013fe0:	af00      	add	r7, sp, #0
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8013fe6:	79fb      	ldrb	r3, [r7, #7]
 8013fe8:	2b08      	cmp	r3, #8
 8013fea:	d009      	beq.n	8014000 <tcp_kill_state+0x24>
 8013fec:	79fb      	ldrb	r3, [r7, #7]
 8013fee:	2b09      	cmp	r3, #9
 8013ff0:	d006      	beq.n	8014000 <tcp_kill_state+0x24>
 8013ff2:	4b1a      	ldr	r3, [pc, #104]	@ (801405c <tcp_kill_state+0x80>)
 8013ff4:	f240 62dd 	movw	r2, #1757	@ 0x6dd
 8013ff8:	4919      	ldr	r1, [pc, #100]	@ (8014060 <tcp_kill_state+0x84>)
 8013ffa:	481a      	ldr	r0, [pc, #104]	@ (8014064 <tcp_kill_state+0x88>)
 8013ffc:	f00a fb80 	bl	801e700 <iprintf>

  inactivity = 0;
 8014000:	2300      	movs	r3, #0
 8014002:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014004:	2300      	movs	r3, #0
 8014006:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014008:	4b17      	ldr	r3, [pc, #92]	@ (8014068 <tcp_kill_state+0x8c>)
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	617b      	str	r3, [r7, #20]
 801400e:	e017      	b.n	8014040 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014010:	697b      	ldr	r3, [r7, #20]
 8014012:	7d1b      	ldrb	r3, [r3, #20]
 8014014:	79fa      	ldrb	r2, [r7, #7]
 8014016:	429a      	cmp	r2, r3
 8014018:	d10f      	bne.n	801403a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801401a:	4b14      	ldr	r3, [pc, #80]	@ (801406c <tcp_kill_state+0x90>)
 801401c:	681a      	ldr	r2, [r3, #0]
 801401e:	697b      	ldr	r3, [r7, #20]
 8014020:	6a1b      	ldr	r3, [r3, #32]
 8014022:	1ad3      	subs	r3, r2, r3
 8014024:	68fa      	ldr	r2, [r7, #12]
 8014026:	429a      	cmp	r2, r3
 8014028:	d807      	bhi.n	801403a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801402a:	4b10      	ldr	r3, [pc, #64]	@ (801406c <tcp_kill_state+0x90>)
 801402c:	681a      	ldr	r2, [r3, #0]
 801402e:	697b      	ldr	r3, [r7, #20]
 8014030:	6a1b      	ldr	r3, [r3, #32]
 8014032:	1ad3      	subs	r3, r2, r3
 8014034:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8014036:	697b      	ldr	r3, [r7, #20]
 8014038:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	68db      	ldr	r3, [r3, #12]
 801403e:	617b      	str	r3, [r7, #20]
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	2b00      	cmp	r3, #0
 8014044:	d1e4      	bne.n	8014010 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8014046:	693b      	ldr	r3, [r7, #16]
 8014048:	2b00      	cmp	r3, #0
 801404a:	d003      	beq.n	8014054 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801404c:	2100      	movs	r1, #0
 801404e:	6938      	ldr	r0, [r7, #16]
 8014050:	f7ff f950 	bl	80132f4 <tcp_abandon>
  }
}
 8014054:	bf00      	nop
 8014056:	3718      	adds	r7, #24
 8014058:	46bd      	mov	sp, r7
 801405a:	bd80      	pop	{r7, pc}
 801405c:	08022cc0 	.word	0x08022cc0
 8014060:	0802324c 	.word	0x0802324c
 8014064:	08022d04 	.word	0x08022d04
 8014068:	2001b020 	.word	0x2001b020
 801406c:	2001b014 	.word	0x2001b014

08014070 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b084      	sub	sp, #16
 8014074:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8014076:	2300      	movs	r3, #0
 8014078:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801407a:	2300      	movs	r3, #0
 801407c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801407e:	4b12      	ldr	r3, [pc, #72]	@ (80140c8 <tcp_kill_timewait+0x58>)
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	60fb      	str	r3, [r7, #12]
 8014084:	e012      	b.n	80140ac <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014086:	4b11      	ldr	r3, [pc, #68]	@ (80140cc <tcp_kill_timewait+0x5c>)
 8014088:	681a      	ldr	r2, [r3, #0]
 801408a:	68fb      	ldr	r3, [r7, #12]
 801408c:	6a1b      	ldr	r3, [r3, #32]
 801408e:	1ad3      	subs	r3, r2, r3
 8014090:	687a      	ldr	r2, [r7, #4]
 8014092:	429a      	cmp	r2, r3
 8014094:	d807      	bhi.n	80140a6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8014096:	4b0d      	ldr	r3, [pc, #52]	@ (80140cc <tcp_kill_timewait+0x5c>)
 8014098:	681a      	ldr	r2, [r3, #0]
 801409a:	68fb      	ldr	r3, [r7, #12]
 801409c:	6a1b      	ldr	r3, [r3, #32]
 801409e:	1ad3      	subs	r3, r2, r3
 80140a0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80140a6:	68fb      	ldr	r3, [r7, #12]
 80140a8:	68db      	ldr	r3, [r3, #12]
 80140aa:	60fb      	str	r3, [r7, #12]
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	2b00      	cmp	r3, #0
 80140b0:	d1e9      	bne.n	8014086 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80140b2:	68bb      	ldr	r3, [r7, #8]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d002      	beq.n	80140be <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80140b8:	68b8      	ldr	r0, [r7, #8]
 80140ba:	f7ff f9d9 	bl	8013470 <tcp_abort>
  }
}
 80140be:	bf00      	nop
 80140c0:	3710      	adds	r7, #16
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}
 80140c6:	bf00      	nop
 80140c8:	2001b024 	.word	0x2001b024
 80140cc:	2001b014 	.word	0x2001b014

080140d0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80140d0:	b580      	push	{r7, lr}
 80140d2:	b082      	sub	sp, #8
 80140d4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80140d6:	4b10      	ldr	r3, [pc, #64]	@ (8014118 <tcp_handle_closepend+0x48>)
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80140dc:	e014      	b.n	8014108 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	68db      	ldr	r3, [r3, #12]
 80140e2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80140e4:	687b      	ldr	r3, [r7, #4]
 80140e6:	8b5b      	ldrh	r3, [r3, #26]
 80140e8:	f003 0308 	and.w	r3, r3, #8
 80140ec:	2b00      	cmp	r3, #0
 80140ee:	d009      	beq.n	8014104 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	8b5b      	ldrh	r3, [r3, #26]
 80140f4:	f023 0308 	bic.w	r3, r3, #8
 80140f8:	b29a      	uxth	r2, r3
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80140fe:	6878      	ldr	r0, [r7, #4]
 8014100:	f7ff f862 	bl	80131c8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014104:	683b      	ldr	r3, [r7, #0]
 8014106:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014108:	687b      	ldr	r3, [r7, #4]
 801410a:	2b00      	cmp	r3, #0
 801410c:	d1e7      	bne.n	80140de <tcp_handle_closepend+0xe>
  }
}
 801410e:	bf00      	nop
 8014110:	bf00      	nop
 8014112:	3708      	adds	r7, #8
 8014114:	46bd      	mov	sp, r7
 8014116:	bd80      	pop	{r7, pc}
 8014118:	2001b020 	.word	0x2001b020

0801411c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801411c:	b580      	push	{r7, lr}
 801411e:	b084      	sub	sp, #16
 8014120:	af00      	add	r7, sp, #0
 8014122:	4603      	mov	r3, r0
 8014124:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014126:	2001      	movs	r0, #1
 8014128:	f7fd fb7e 	bl	8011828 <memp_malloc>
 801412c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801412e:	68fb      	ldr	r3, [r7, #12]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d126      	bne.n	8014182 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014134:	f7ff ffcc 	bl	80140d0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8014138:	f7ff ff9a 	bl	8014070 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801413c:	2001      	movs	r0, #1
 801413e:	f7fd fb73 	bl	8011828 <memp_malloc>
 8014142:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8014144:	68fb      	ldr	r3, [r7, #12]
 8014146:	2b00      	cmp	r3, #0
 8014148:	d11b      	bne.n	8014182 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801414a:	2009      	movs	r0, #9
 801414c:	f7ff ff46 	bl	8013fdc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014150:	2001      	movs	r0, #1
 8014152:	f7fd fb69 	bl	8011828 <memp_malloc>
 8014156:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014158:	68fb      	ldr	r3, [r7, #12]
 801415a:	2b00      	cmp	r3, #0
 801415c:	d111      	bne.n	8014182 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801415e:	2008      	movs	r0, #8
 8014160:	f7ff ff3c 	bl	8013fdc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014164:	2001      	movs	r0, #1
 8014166:	f7fd fb5f 	bl	8011828 <memp_malloc>
 801416a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801416c:	68fb      	ldr	r3, [r7, #12]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d107      	bne.n	8014182 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8014172:	79fb      	ldrb	r3, [r7, #7]
 8014174:	4618      	mov	r0, r3
 8014176:	f7ff fee3 	bl	8013f40 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801417a:	2001      	movs	r0, #1
 801417c:	f7fd fb54 	bl	8011828 <memp_malloc>
 8014180:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	2b00      	cmp	r3, #0
 8014186:	d03f      	beq.n	8014208 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014188:	229c      	movs	r2, #156	@ 0x9c
 801418a:	2100      	movs	r1, #0
 801418c:	68f8      	ldr	r0, [r7, #12]
 801418e:	f00a fbeb 	bl	801e968 <memset>
    pcb->prio = prio;
 8014192:	68fb      	ldr	r3, [r7, #12]
 8014194:	79fa      	ldrb	r2, [r7, #7]
 8014196:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 801419e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	f44f 6206 	mov.w	r2, #2144	@ 0x860
 80141a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80141aa:	68fb      	ldr	r3, [r7, #12]
 80141ac:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80141ae:	68fb      	ldr	r3, [r7, #12]
 80141b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    pcb->ttl = TCP_TTL;
 80141b2:	68fb      	ldr	r3, [r7, #12]
 80141b4:	22ff      	movs	r2, #255	@ 0xff
 80141b6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80141b8:	68fb      	ldr	r3, [r7, #12]
 80141ba:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80141be:	865a      	strh	r2, [r3, #50]	@ 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80141c0:	68fb      	ldr	r3, [r7, #12]
 80141c2:	2206      	movs	r2, #6
 80141c4:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80141c8:	68fb      	ldr	r3, [r7, #12]
 80141ca:	2206      	movs	r2, #6
 80141cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
    pcb->rtime = -1;
 80141ce:	68fb      	ldr	r3, [r7, #12]
 80141d0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80141d4:	861a      	strh	r2, [r3, #48]	@ 0x30
    pcb->cwnd = 1;
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	2201      	movs	r2, #1
 80141da:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
    pcb->tmr = tcp_ticks;
 80141de:	4b0d      	ldr	r3, [pc, #52]	@ (8014214 <tcp_alloc+0xf8>)
 80141e0:	681a      	ldr	r2, [r3, #0]
 80141e2:	68fb      	ldr	r3, [r7, #12]
 80141e4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80141e6:	4b0c      	ldr	r3, [pc, #48]	@ (8014218 <tcp_alloc+0xfc>)
 80141e8:	781a      	ldrb	r2, [r3, #0]
 80141ea:	68fb      	ldr	r3, [r7, #12]
 80141ec:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80141ee:	68fb      	ldr	r3, [r7, #12]
 80141f0:	f44f 6286 	mov.w	r2, #1072	@ 0x430
 80141f4:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	4a08      	ldr	r2, [pc, #32]	@ (801421c <tcp_alloc+0x100>)
 80141fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014200:	68fb      	ldr	r3, [r7, #12]
 8014202:	4a07      	ldr	r2, [pc, #28]	@ (8014220 <tcp_alloc+0x104>)
 8014204:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014208:	68fb      	ldr	r3, [r7, #12]
}
 801420a:	4618      	mov	r0, r3
 801420c:	3710      	adds	r7, #16
 801420e:	46bd      	mov	sp, r7
 8014210:	bd80      	pop	{r7, pc}
 8014212:	bf00      	nop
 8014214:	2001b014 	.word	0x2001b014
 8014218:	2001b02a 	.word	0x2001b02a
 801421c:	08013ed5 	.word	0x08013ed5
 8014220:	006ddd00 	.word	0x006ddd00

08014224 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014224:	b580      	push	{r7, lr}
 8014226:	b082      	sub	sp, #8
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d107      	bne.n	8014242 <tcp_pcb_purge+0x1e>
 8014232:	4b21      	ldr	r3, [pc, #132]	@ (80142b8 <tcp_pcb_purge+0x94>)
 8014234:	f640 0251 	movw	r2, #2129	@ 0x851
 8014238:	4920      	ldr	r1, [pc, #128]	@ (80142bc <tcp_pcb_purge+0x98>)
 801423a:	4821      	ldr	r0, [pc, #132]	@ (80142c0 <tcp_pcb_purge+0x9c>)
 801423c:	f00a fa60 	bl	801e700 <iprintf>
 8014240:	e037      	b.n	80142b2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	7d1b      	ldrb	r3, [r3, #20]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d033      	beq.n	80142b2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801424a:	687b      	ldr	r3, [r7, #4]
 801424c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801424e:	2b0a      	cmp	r3, #10
 8014250:	d02f      	beq.n	80142b2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014252:	687b      	ldr	r3, [r7, #4]
 8014254:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014256:	2b01      	cmp	r3, #1
 8014258:	d02b      	beq.n	80142b2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801425e:	2b00      	cmp	r3, #0
 8014260:	d007      	beq.n	8014272 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014262:	687b      	ldr	r3, [r7, #4]
 8014264:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014266:	4618      	mov	r0, r3
 8014268:	f7fe fa04 	bl	8012674 <pbuf_free>
      pcb->refused_data = NULL;
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	2200      	movs	r2, #0
 8014270:	679a      	str	r2, [r3, #120]	@ 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014276:	2b00      	cmp	r3, #0
 8014278:	d002      	beq.n	8014280 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801427a:	6878      	ldr	r0, [r7, #4]
 801427c:	f000 f986 	bl	801458c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014280:	687b      	ldr	r3, [r7, #4]
 8014282:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8014286:	861a      	strh	r2, [r3, #48]	@ 0x30

    tcp_segs_free(pcb->unsent);
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801428c:	4618      	mov	r0, r3
 801428e:	f7ff fdc7 	bl	8013e20 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014296:	4618      	mov	r0, r3
 8014298:	f7ff fdc2 	bl	8013e20 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	2200      	movs	r2, #0
 80142a0:	66da      	str	r2, [r3, #108]	@ 0x6c
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	671a      	str	r2, [r3, #112]	@ 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	2200      	movs	r2, #0
 80142ae:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80142b2:	3708      	adds	r7, #8
 80142b4:	46bd      	mov	sp, r7
 80142b6:	bd80      	pop	{r7, pc}
 80142b8:	08022cc0 	.word	0x08022cc0
 80142bc:	0802330c 	.word	0x0802330c
 80142c0:	08022d04 	.word	0x08022d04

080142c4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b084      	sub	sp, #16
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	6078      	str	r0, [r7, #4]
 80142cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 80142ce:	683b      	ldr	r3, [r7, #0]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d106      	bne.n	80142e2 <tcp_pcb_remove+0x1e>
 80142d4:	4b3e      	ldr	r3, [pc, #248]	@ (80143d0 <tcp_pcb_remove+0x10c>)
 80142d6:	f640 0283 	movw	r2, #2179	@ 0x883
 80142da:	493e      	ldr	r1, [pc, #248]	@ (80143d4 <tcp_pcb_remove+0x110>)
 80142dc:	483e      	ldr	r0, [pc, #248]	@ (80143d8 <tcp_pcb_remove+0x114>)
 80142de:	f00a fa0f 	bl	801e700 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d106      	bne.n	80142f6 <tcp_pcb_remove+0x32>
 80142e8:	4b39      	ldr	r3, [pc, #228]	@ (80143d0 <tcp_pcb_remove+0x10c>)
 80142ea:	f640 0284 	movw	r2, #2180	@ 0x884
 80142ee:	493b      	ldr	r1, [pc, #236]	@ (80143dc <tcp_pcb_remove+0x118>)
 80142f0:	4839      	ldr	r0, [pc, #228]	@ (80143d8 <tcp_pcb_remove+0x114>)
 80142f2:	f00a fa05 	bl	801e700 <iprintf>

  TCP_RMV(pcblist, pcb);
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	683a      	ldr	r2, [r7, #0]
 80142fc:	429a      	cmp	r2, r3
 80142fe:	d105      	bne.n	801430c <tcp_pcb_remove+0x48>
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	68da      	ldr	r2, [r3, #12]
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	601a      	str	r2, [r3, #0]
 801430a:	e013      	b.n	8014334 <tcp_pcb_remove+0x70>
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	681b      	ldr	r3, [r3, #0]
 8014310:	60fb      	str	r3, [r7, #12]
 8014312:	e00c      	b.n	801432e <tcp_pcb_remove+0x6a>
 8014314:	68fb      	ldr	r3, [r7, #12]
 8014316:	68db      	ldr	r3, [r3, #12]
 8014318:	683a      	ldr	r2, [r7, #0]
 801431a:	429a      	cmp	r2, r3
 801431c:	d104      	bne.n	8014328 <tcp_pcb_remove+0x64>
 801431e:	683b      	ldr	r3, [r7, #0]
 8014320:	68da      	ldr	r2, [r3, #12]
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	60da      	str	r2, [r3, #12]
 8014326:	e005      	b.n	8014334 <tcp_pcb_remove+0x70>
 8014328:	68fb      	ldr	r3, [r7, #12]
 801432a:	68db      	ldr	r3, [r3, #12]
 801432c:	60fb      	str	r3, [r7, #12]
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d1ef      	bne.n	8014314 <tcp_pcb_remove+0x50>
 8014334:	683b      	ldr	r3, [r7, #0]
 8014336:	2200      	movs	r2, #0
 8014338:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801433a:	6838      	ldr	r0, [r7, #0]
 801433c:	f7ff ff72 	bl	8014224 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014340:	683b      	ldr	r3, [r7, #0]
 8014342:	7d1b      	ldrb	r3, [r3, #20]
 8014344:	2b0a      	cmp	r3, #10
 8014346:	d013      	beq.n	8014370 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014348:	683b      	ldr	r3, [r7, #0]
 801434a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801434c:	2b01      	cmp	r3, #1
 801434e:	d00f      	beq.n	8014370 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014350:	683b      	ldr	r3, [r7, #0]
 8014352:	8b5b      	ldrh	r3, [r3, #26]
 8014354:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014358:	2b00      	cmp	r3, #0
 801435a:	d009      	beq.n	8014370 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801435c:	683b      	ldr	r3, [r7, #0]
 801435e:	8b5b      	ldrh	r3, [r3, #26]
 8014360:	f043 0302 	orr.w	r3, r3, #2
 8014364:	b29a      	uxth	r2, r3
 8014366:	683b      	ldr	r3, [r7, #0]
 8014368:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801436a:	6838      	ldr	r0, [r7, #0]
 801436c:	f002 ff68 	bl	8017240 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014370:	683b      	ldr	r3, [r7, #0]
 8014372:	7d1b      	ldrb	r3, [r3, #20]
 8014374:	2b01      	cmp	r3, #1
 8014376:	d020      	beq.n	80143ba <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014378:	683b      	ldr	r3, [r7, #0]
 801437a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801437c:	2b00      	cmp	r3, #0
 801437e:	d006      	beq.n	801438e <tcp_pcb_remove+0xca>
 8014380:	4b13      	ldr	r3, [pc, #76]	@ (80143d0 <tcp_pcb_remove+0x10c>)
 8014382:	f640 0293 	movw	r2, #2195	@ 0x893
 8014386:	4916      	ldr	r1, [pc, #88]	@ (80143e0 <tcp_pcb_remove+0x11c>)
 8014388:	4813      	ldr	r0, [pc, #76]	@ (80143d8 <tcp_pcb_remove+0x114>)
 801438a:	f00a f9b9 	bl	801e700 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801438e:	683b      	ldr	r3, [r7, #0]
 8014390:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014392:	2b00      	cmp	r3, #0
 8014394:	d006      	beq.n	80143a4 <tcp_pcb_remove+0xe0>
 8014396:	4b0e      	ldr	r3, [pc, #56]	@ (80143d0 <tcp_pcb_remove+0x10c>)
 8014398:	f640 0294 	movw	r2, #2196	@ 0x894
 801439c:	4911      	ldr	r1, [pc, #68]	@ (80143e4 <tcp_pcb_remove+0x120>)
 801439e:	480e      	ldr	r0, [pc, #56]	@ (80143d8 <tcp_pcb_remove+0x114>)
 80143a0:	f00a f9ae 	bl	801e700 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80143a4:	683b      	ldr	r3, [r7, #0]
 80143a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d006      	beq.n	80143ba <tcp_pcb_remove+0xf6>
 80143ac:	4b08      	ldr	r3, [pc, #32]	@ (80143d0 <tcp_pcb_remove+0x10c>)
 80143ae:	f640 0296 	movw	r2, #2198	@ 0x896
 80143b2:	490d      	ldr	r1, [pc, #52]	@ (80143e8 <tcp_pcb_remove+0x124>)
 80143b4:	4808      	ldr	r0, [pc, #32]	@ (80143d8 <tcp_pcb_remove+0x114>)
 80143b6:	f00a f9a3 	bl	801e700 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80143ba:	683b      	ldr	r3, [r7, #0]
 80143bc:	2200      	movs	r2, #0
 80143be:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 80143c0:	683b      	ldr	r3, [r7, #0]
 80143c2:	2200      	movs	r2, #0
 80143c4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 80143c6:	bf00      	nop
 80143c8:	3710      	adds	r7, #16
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}
 80143ce:	bf00      	nop
 80143d0:	08022cc0 	.word	0x08022cc0
 80143d4:	08023328 	.word	0x08023328
 80143d8:	08022d04 	.word	0x08022d04
 80143dc:	08023344 	.word	0x08023344
 80143e0:	08023364 	.word	0x08023364
 80143e4:	0802337c 	.word	0x0802337c
 80143e8:	08023398 	.word	0x08023398

080143ec <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b082      	sub	sp, #8
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d106      	bne.n	8014408 <tcp_next_iss+0x1c>
 80143fa:	4b0a      	ldr	r3, [pc, #40]	@ (8014424 <tcp_next_iss+0x38>)
 80143fc:	f640 02af 	movw	r2, #2223	@ 0x8af
 8014400:	4909      	ldr	r1, [pc, #36]	@ (8014428 <tcp_next_iss+0x3c>)
 8014402:	480a      	ldr	r0, [pc, #40]	@ (801442c <tcp_next_iss+0x40>)
 8014404:	f00a f97c 	bl	801e700 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014408:	4b09      	ldr	r3, [pc, #36]	@ (8014430 <tcp_next_iss+0x44>)
 801440a:	681a      	ldr	r2, [r3, #0]
 801440c:	4b09      	ldr	r3, [pc, #36]	@ (8014434 <tcp_next_iss+0x48>)
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	4413      	add	r3, r2
 8014412:	4a07      	ldr	r2, [pc, #28]	@ (8014430 <tcp_next_iss+0x44>)
 8014414:	6013      	str	r3, [r2, #0]
  return iss;
 8014416:	4b06      	ldr	r3, [pc, #24]	@ (8014430 <tcp_next_iss+0x44>)
 8014418:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801441a:	4618      	mov	r0, r3
 801441c:	3708      	adds	r7, #8
 801441e:	46bd      	mov	sp, r7
 8014420:	bd80      	pop	{r7, pc}
 8014422:	bf00      	nop
 8014424:	08022cc0 	.word	0x08022cc0
 8014428:	080233b0 	.word	0x080233b0
 801442c:	08022d04 	.word	0x08022d04
 8014430:	20000044 	.word	0x20000044
 8014434:	2001b014 	.word	0x2001b014

08014438 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014438:	b580      	push	{r7, lr}
 801443a:	b086      	sub	sp, #24
 801443c:	af00      	add	r7, sp, #0
 801443e:	4603      	mov	r3, r0
 8014440:	60b9      	str	r1, [r7, #8]
 8014442:	607a      	str	r2, [r7, #4]
 8014444:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d106      	bne.n	801445a <tcp_eff_send_mss_netif+0x22>
 801444c:	4b14      	ldr	r3, [pc, #80]	@ (80144a0 <tcp_eff_send_mss_netif+0x68>)
 801444e:	f640 02c5 	movw	r2, #2245	@ 0x8c5
 8014452:	4914      	ldr	r1, [pc, #80]	@ (80144a4 <tcp_eff_send_mss_netif+0x6c>)
 8014454:	4814      	ldr	r0, [pc, #80]	@ (80144a8 <tcp_eff_send_mss_netif+0x70>)
 8014456:	f00a f953 	bl	801e700 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801445a:	68bb      	ldr	r3, [r7, #8]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d101      	bne.n	8014464 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014460:	89fb      	ldrh	r3, [r7, #14]
 8014462:	e019      	b.n	8014498 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8014464:	68bb      	ldr	r3, [r7, #8]
 8014466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014468:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801446a:	8afb      	ldrh	r3, [r7, #22]
 801446c:	2b00      	cmp	r3, #0
 801446e:	d012      	beq.n	8014496 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8014470:	2328      	movs	r3, #40	@ 0x28
 8014472:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8014474:	8afa      	ldrh	r2, [r7, #22]
 8014476:	8abb      	ldrh	r3, [r7, #20]
 8014478:	429a      	cmp	r2, r3
 801447a:	d904      	bls.n	8014486 <tcp_eff_send_mss_netif+0x4e>
 801447c:	8afa      	ldrh	r2, [r7, #22]
 801447e:	8abb      	ldrh	r3, [r7, #20]
 8014480:	1ad3      	subs	r3, r2, r3
 8014482:	b29b      	uxth	r3, r3
 8014484:	e000      	b.n	8014488 <tcp_eff_send_mss_netif+0x50>
 8014486:	2300      	movs	r3, #0
 8014488:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801448a:	8a7a      	ldrh	r2, [r7, #18]
 801448c:	89fb      	ldrh	r3, [r7, #14]
 801448e:	4293      	cmp	r3, r2
 8014490:	bf28      	it	cs
 8014492:	4613      	movcs	r3, r2
 8014494:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8014496:	89fb      	ldrh	r3, [r7, #14]
}
 8014498:	4618      	mov	r0, r3
 801449a:	3718      	adds	r7, #24
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}
 80144a0:	08022cc0 	.word	0x08022cc0
 80144a4:	080233cc 	.word	0x080233cc
 80144a8:	08022d04 	.word	0x08022d04

080144ac <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b084      	sub	sp, #16
 80144b0:	af00      	add	r7, sp, #0
 80144b2:	6078      	str	r0, [r7, #4]
 80144b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80144b6:	683b      	ldr	r3, [r7, #0]
 80144b8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	2b00      	cmp	r3, #0
 80144be:	d119      	bne.n	80144f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80144c0:	4b10      	ldr	r3, [pc, #64]	@ (8014504 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80144c2:	f44f 6210 	mov.w	r2, #2304	@ 0x900
 80144c6:	4910      	ldr	r1, [pc, #64]	@ (8014508 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80144c8:	4810      	ldr	r0, [pc, #64]	@ (801450c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80144ca:	f00a f919 	bl	801e700 <iprintf>

  while (pcb != NULL) {
 80144ce:	e011      	b.n	80144f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80144d0:	68fb      	ldr	r3, [r7, #12]
 80144d2:	681a      	ldr	r2, [r3, #0]
 80144d4:	687b      	ldr	r3, [r7, #4]
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	429a      	cmp	r2, r3
 80144da:	d108      	bne.n	80144ee <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80144dc:	68fb      	ldr	r3, [r7, #12]
 80144de:	68db      	ldr	r3, [r3, #12]
 80144e0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80144e2:	68f8      	ldr	r0, [r7, #12]
 80144e4:	f7fe ffc4 	bl	8013470 <tcp_abort>
      pcb = next;
 80144e8:	68bb      	ldr	r3, [r7, #8]
 80144ea:	60fb      	str	r3, [r7, #12]
 80144ec:	e002      	b.n	80144f4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80144ee:	68fb      	ldr	r3, [r7, #12]
 80144f0:	68db      	ldr	r3, [r3, #12]
 80144f2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80144f4:	68fb      	ldr	r3, [r7, #12]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d1ea      	bne.n	80144d0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80144fa:	bf00      	nop
 80144fc:	bf00      	nop
 80144fe:	3710      	adds	r7, #16
 8014500:	46bd      	mov	sp, r7
 8014502:	bd80      	pop	{r7, pc}
 8014504:	08022cc0 	.word	0x08022cc0
 8014508:	080233f4 	.word	0x080233f4
 801450c:	08022d04 	.word	0x08022d04

08014510 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b084      	sub	sp, #16
 8014514:	af00      	add	r7, sp, #0
 8014516:	6078      	str	r0, [r7, #4]
 8014518:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	2b00      	cmp	r3, #0
 801451e:	d02a      	beq.n	8014576 <tcp_netif_ip_addr_changed+0x66>
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d026      	beq.n	8014576 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8014528:	4b15      	ldr	r3, [pc, #84]	@ (8014580 <tcp_netif_ip_addr_changed+0x70>)
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	4619      	mov	r1, r3
 801452e:	6878      	ldr	r0, [r7, #4]
 8014530:	f7ff ffbc 	bl	80144ac <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8014534:	4b13      	ldr	r3, [pc, #76]	@ (8014584 <tcp_netif_ip_addr_changed+0x74>)
 8014536:	681b      	ldr	r3, [r3, #0]
 8014538:	4619      	mov	r1, r3
 801453a:	6878      	ldr	r0, [r7, #4]
 801453c:	f7ff ffb6 	bl	80144ac <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8014540:	683b      	ldr	r3, [r7, #0]
 8014542:	2b00      	cmp	r3, #0
 8014544:	d017      	beq.n	8014576 <tcp_netif_ip_addr_changed+0x66>
 8014546:	683b      	ldr	r3, [r7, #0]
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	2b00      	cmp	r3, #0
 801454c:	d013      	beq.n	8014576 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801454e:	4b0e      	ldr	r3, [pc, #56]	@ (8014588 <tcp_netif_ip_addr_changed+0x78>)
 8014550:	681b      	ldr	r3, [r3, #0]
 8014552:	60fb      	str	r3, [r7, #12]
 8014554:	e00c      	b.n	8014570 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	681a      	ldr	r2, [r3, #0]
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	681b      	ldr	r3, [r3, #0]
 801455e:	429a      	cmp	r2, r3
 8014560:	d103      	bne.n	801456a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8014562:	683b      	ldr	r3, [r7, #0]
 8014564:	681a      	ldr	r2, [r3, #0]
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	68db      	ldr	r3, [r3, #12]
 801456e:	60fb      	str	r3, [r7, #12]
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	2b00      	cmp	r3, #0
 8014574:	d1ef      	bne.n	8014556 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8014576:	bf00      	nop
 8014578:	3710      	adds	r7, #16
 801457a:	46bd      	mov	sp, r7
 801457c:	bd80      	pop	{r7, pc}
 801457e:	bf00      	nop
 8014580:	2001b020 	.word	0x2001b020
 8014584:	2001b018 	.word	0x2001b018
 8014588:	2001b01c 	.word	0x2001b01c

0801458c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801458c:	b580      	push	{r7, lr}
 801458e:	b082      	sub	sp, #8
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014598:	2b00      	cmp	r3, #0
 801459a:	d007      	beq.n	80145ac <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80145a0:	4618      	mov	r0, r3
 80145a2:	f7ff fc3d 	bl	8013e20 <tcp_segs_free>
    pcb->ooseq = NULL;
 80145a6:	687b      	ldr	r3, [r7, #4]
 80145a8:	2200      	movs	r2, #0
 80145aa:	675a      	str	r2, [r3, #116]	@ 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80145ac:	bf00      	nop
 80145ae:	3708      	adds	r7, #8
 80145b0:	46bd      	mov	sp, r7
 80145b2:	bd80      	pop	{r7, pc}

080145b4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80145b4:	b590      	push	{r4, r7, lr}
 80145b6:	b08d      	sub	sp, #52	@ 0x34
 80145b8:	af04      	add	r7, sp, #16
 80145ba:	6078      	str	r0, [r7, #4]
 80145bc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80145be:	687b      	ldr	r3, [r7, #4]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	d105      	bne.n	80145d0 <tcp_input+0x1c>
 80145c4:	4b9b      	ldr	r3, [pc, #620]	@ (8014834 <tcp_input+0x280>)
 80145c6:	2283      	movs	r2, #131	@ 0x83
 80145c8:	499b      	ldr	r1, [pc, #620]	@ (8014838 <tcp_input+0x284>)
 80145ca:	489c      	ldr	r0, [pc, #624]	@ (801483c <tcp_input+0x288>)
 80145cc:	f00a f898 	bl	801e700 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	685b      	ldr	r3, [r3, #4]
 80145d4:	4a9a      	ldr	r2, [pc, #616]	@ (8014840 <tcp_input+0x28c>)
 80145d6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80145d8:	687b      	ldr	r3, [r7, #4]
 80145da:	895b      	ldrh	r3, [r3, #10]
 80145dc:	2b13      	cmp	r3, #19
 80145de:	f240 83d1 	bls.w	8014d84 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80145e2:	4b98      	ldr	r3, [pc, #608]	@ (8014844 <tcp_input+0x290>)
 80145e4:	695b      	ldr	r3, [r3, #20]
 80145e6:	4a97      	ldr	r2, [pc, #604]	@ (8014844 <tcp_input+0x290>)
 80145e8:	6812      	ldr	r2, [r2, #0]
 80145ea:	4611      	mov	r1, r2
 80145ec:	4618      	mov	r0, r3
 80145ee:	f007 fe9d 	bl	801c32c <ip4_addr_isbroadcast_u32>
 80145f2:	4603      	mov	r3, r0
 80145f4:	2b00      	cmp	r3, #0
 80145f6:	f040 83c7 	bne.w	8014d88 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80145fa:	4b92      	ldr	r3, [pc, #584]	@ (8014844 <tcp_input+0x290>)
 80145fc:	695b      	ldr	r3, [r3, #20]
 80145fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8014602:	2be0      	cmp	r3, #224	@ 0xe0
 8014604:	f000 83c0 	beq.w	8014d88 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8014608:	4b8d      	ldr	r3, [pc, #564]	@ (8014840 <tcp_input+0x28c>)
 801460a:	681b      	ldr	r3, [r3, #0]
 801460c:	899b      	ldrh	r3, [r3, #12]
 801460e:	b29b      	uxth	r3, r3
 8014610:	4618      	mov	r0, r3
 8014612:	f7fc f943 	bl	801089c <lwip_htons>
 8014616:	4603      	mov	r3, r0
 8014618:	0b1b      	lsrs	r3, r3, #12
 801461a:	b29b      	uxth	r3, r3
 801461c:	b2db      	uxtb	r3, r3
 801461e:	009b      	lsls	r3, r3, #2
 8014620:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8014622:	7cbb      	ldrb	r3, [r7, #18]
 8014624:	2b13      	cmp	r3, #19
 8014626:	f240 83b1 	bls.w	8014d8c <tcp_input+0x7d8>
 801462a:	7cbb      	ldrb	r3, [r7, #18]
 801462c:	b29a      	uxth	r2, r3
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	891b      	ldrh	r3, [r3, #8]
 8014632:	429a      	cmp	r2, r3
 8014634:	f200 83aa 	bhi.w	8014d8c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8014638:	7cbb      	ldrb	r3, [r7, #18]
 801463a:	b29b      	uxth	r3, r3
 801463c:	3b14      	subs	r3, #20
 801463e:	b29a      	uxth	r2, r3
 8014640:	4b81      	ldr	r3, [pc, #516]	@ (8014848 <tcp_input+0x294>)
 8014642:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8014644:	4b81      	ldr	r3, [pc, #516]	@ (801484c <tcp_input+0x298>)
 8014646:	2200      	movs	r2, #0
 8014648:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	895a      	ldrh	r2, [r3, #10]
 801464e:	7cbb      	ldrb	r3, [r7, #18]
 8014650:	b29b      	uxth	r3, r3
 8014652:	429a      	cmp	r2, r3
 8014654:	d309      	bcc.n	801466a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8014656:	4b7c      	ldr	r3, [pc, #496]	@ (8014848 <tcp_input+0x294>)
 8014658:	881a      	ldrh	r2, [r3, #0]
 801465a:	4b7d      	ldr	r3, [pc, #500]	@ (8014850 <tcp_input+0x29c>)
 801465c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801465e:	7cbb      	ldrb	r3, [r7, #18]
 8014660:	4619      	mov	r1, r3
 8014662:	6878      	ldr	r0, [r7, #4]
 8014664:	f7fd ff80 	bl	8012568 <pbuf_remove_header>
 8014668:	e04e      	b.n	8014708 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	2b00      	cmp	r3, #0
 8014670:	d105      	bne.n	801467e <tcp_input+0xca>
 8014672:	4b70      	ldr	r3, [pc, #448]	@ (8014834 <tcp_input+0x280>)
 8014674:	22c2      	movs	r2, #194	@ 0xc2
 8014676:	4977      	ldr	r1, [pc, #476]	@ (8014854 <tcp_input+0x2a0>)
 8014678:	4870      	ldr	r0, [pc, #448]	@ (801483c <tcp_input+0x288>)
 801467a:	f00a f841 	bl	801e700 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801467e:	2114      	movs	r1, #20
 8014680:	6878      	ldr	r0, [r7, #4]
 8014682:	f7fd ff71 	bl	8012568 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	895a      	ldrh	r2, [r3, #10]
 801468a:	4b71      	ldr	r3, [pc, #452]	@ (8014850 <tcp_input+0x29c>)
 801468c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801468e:	4b6e      	ldr	r3, [pc, #440]	@ (8014848 <tcp_input+0x294>)
 8014690:	881a      	ldrh	r2, [r3, #0]
 8014692:	4b6f      	ldr	r3, [pc, #444]	@ (8014850 <tcp_input+0x29c>)
 8014694:	881b      	ldrh	r3, [r3, #0]
 8014696:	1ad3      	subs	r3, r2, r3
 8014698:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801469a:	4b6d      	ldr	r3, [pc, #436]	@ (8014850 <tcp_input+0x29c>)
 801469c:	881b      	ldrh	r3, [r3, #0]
 801469e:	4619      	mov	r1, r3
 80146a0:	6878      	ldr	r0, [r7, #4]
 80146a2:	f7fd ff61 	bl	8012568 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	681b      	ldr	r3, [r3, #0]
 80146aa:	895b      	ldrh	r3, [r3, #10]
 80146ac:	8a3a      	ldrh	r2, [r7, #16]
 80146ae:	429a      	cmp	r2, r3
 80146b0:	f200 836e 	bhi.w	8014d90 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	685b      	ldr	r3, [r3, #4]
 80146ba:	4a64      	ldr	r2, [pc, #400]	@ (801484c <tcp_input+0x298>)
 80146bc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	8a3a      	ldrh	r2, [r7, #16]
 80146c4:	4611      	mov	r1, r2
 80146c6:	4618      	mov	r0, r3
 80146c8:	f7fd ff4e 	bl	8012568 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	891a      	ldrh	r2, [r3, #8]
 80146d0:	8a3b      	ldrh	r3, [r7, #16]
 80146d2:	1ad3      	subs	r3, r2, r3
 80146d4:	b29a      	uxth	r2, r3
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	895b      	ldrh	r3, [r3, #10]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d005      	beq.n	80146ee <tcp_input+0x13a>
 80146e2:	4b54      	ldr	r3, [pc, #336]	@ (8014834 <tcp_input+0x280>)
 80146e4:	22df      	movs	r2, #223	@ 0xdf
 80146e6:	495c      	ldr	r1, [pc, #368]	@ (8014858 <tcp_input+0x2a4>)
 80146e8:	4854      	ldr	r0, [pc, #336]	@ (801483c <tcp_input+0x288>)
 80146ea:	f00a f809 	bl	801e700 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	891a      	ldrh	r2, [r3, #8]
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	891b      	ldrh	r3, [r3, #8]
 80146f8:	429a      	cmp	r2, r3
 80146fa:	d005      	beq.n	8014708 <tcp_input+0x154>
 80146fc:	4b4d      	ldr	r3, [pc, #308]	@ (8014834 <tcp_input+0x280>)
 80146fe:	22e0      	movs	r2, #224	@ 0xe0
 8014700:	4956      	ldr	r1, [pc, #344]	@ (801485c <tcp_input+0x2a8>)
 8014702:	484e      	ldr	r0, [pc, #312]	@ (801483c <tcp_input+0x288>)
 8014704:	f009 fffc 	bl	801e700 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8014708:	4b4d      	ldr	r3, [pc, #308]	@ (8014840 <tcp_input+0x28c>)
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	881b      	ldrh	r3, [r3, #0]
 801470e:	b29b      	uxth	r3, r3
 8014710:	4a4b      	ldr	r2, [pc, #300]	@ (8014840 <tcp_input+0x28c>)
 8014712:	6814      	ldr	r4, [r2, #0]
 8014714:	4618      	mov	r0, r3
 8014716:	f7fc f8c1 	bl	801089c <lwip_htons>
 801471a:	4603      	mov	r3, r0
 801471c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801471e:	4b48      	ldr	r3, [pc, #288]	@ (8014840 <tcp_input+0x28c>)
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	885b      	ldrh	r3, [r3, #2]
 8014724:	b29b      	uxth	r3, r3
 8014726:	4a46      	ldr	r2, [pc, #280]	@ (8014840 <tcp_input+0x28c>)
 8014728:	6814      	ldr	r4, [r2, #0]
 801472a:	4618      	mov	r0, r3
 801472c:	f7fc f8b6 	bl	801089c <lwip_htons>
 8014730:	4603      	mov	r3, r0
 8014732:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8014734:	4b42      	ldr	r3, [pc, #264]	@ (8014840 <tcp_input+0x28c>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	685b      	ldr	r3, [r3, #4]
 801473a:	4a41      	ldr	r2, [pc, #260]	@ (8014840 <tcp_input+0x28c>)
 801473c:	6814      	ldr	r4, [r2, #0]
 801473e:	4618      	mov	r0, r3
 8014740:	f7fc f8c1 	bl	80108c6 <lwip_htonl>
 8014744:	4603      	mov	r3, r0
 8014746:	6063      	str	r3, [r4, #4]
 8014748:	6863      	ldr	r3, [r4, #4]
 801474a:	4a45      	ldr	r2, [pc, #276]	@ (8014860 <tcp_input+0x2ac>)
 801474c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801474e:	4b3c      	ldr	r3, [pc, #240]	@ (8014840 <tcp_input+0x28c>)
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	689b      	ldr	r3, [r3, #8]
 8014754:	4a3a      	ldr	r2, [pc, #232]	@ (8014840 <tcp_input+0x28c>)
 8014756:	6814      	ldr	r4, [r2, #0]
 8014758:	4618      	mov	r0, r3
 801475a:	f7fc f8b4 	bl	80108c6 <lwip_htonl>
 801475e:	4603      	mov	r3, r0
 8014760:	60a3      	str	r3, [r4, #8]
 8014762:	68a3      	ldr	r3, [r4, #8]
 8014764:	4a3f      	ldr	r2, [pc, #252]	@ (8014864 <tcp_input+0x2b0>)
 8014766:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8014768:	4b35      	ldr	r3, [pc, #212]	@ (8014840 <tcp_input+0x28c>)
 801476a:	681b      	ldr	r3, [r3, #0]
 801476c:	89db      	ldrh	r3, [r3, #14]
 801476e:	b29b      	uxth	r3, r3
 8014770:	4a33      	ldr	r2, [pc, #204]	@ (8014840 <tcp_input+0x28c>)
 8014772:	6814      	ldr	r4, [r2, #0]
 8014774:	4618      	mov	r0, r3
 8014776:	f7fc f891 	bl	801089c <lwip_htons>
 801477a:	4603      	mov	r3, r0
 801477c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801477e:	4b30      	ldr	r3, [pc, #192]	@ (8014840 <tcp_input+0x28c>)
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	899b      	ldrh	r3, [r3, #12]
 8014784:	b29b      	uxth	r3, r3
 8014786:	4618      	mov	r0, r3
 8014788:	f7fc f888 	bl	801089c <lwip_htons>
 801478c:	4603      	mov	r3, r0
 801478e:	b2db      	uxtb	r3, r3
 8014790:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8014794:	b2da      	uxtb	r2, r3
 8014796:	4b34      	ldr	r3, [pc, #208]	@ (8014868 <tcp_input+0x2b4>)
 8014798:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	891a      	ldrh	r2, [r3, #8]
 801479e:	4b33      	ldr	r3, [pc, #204]	@ (801486c <tcp_input+0x2b8>)
 80147a0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80147a2:	4b31      	ldr	r3, [pc, #196]	@ (8014868 <tcp_input+0x2b4>)
 80147a4:	781b      	ldrb	r3, [r3, #0]
 80147a6:	f003 0303 	and.w	r3, r3, #3
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d00c      	beq.n	80147c8 <tcp_input+0x214>
    tcplen++;
 80147ae:	4b2f      	ldr	r3, [pc, #188]	@ (801486c <tcp_input+0x2b8>)
 80147b0:	881b      	ldrh	r3, [r3, #0]
 80147b2:	3301      	adds	r3, #1
 80147b4:	b29a      	uxth	r2, r3
 80147b6:	4b2d      	ldr	r3, [pc, #180]	@ (801486c <tcp_input+0x2b8>)
 80147b8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	891a      	ldrh	r2, [r3, #8]
 80147be:	4b2b      	ldr	r3, [pc, #172]	@ (801486c <tcp_input+0x2b8>)
 80147c0:	881b      	ldrh	r3, [r3, #0]
 80147c2:	429a      	cmp	r2, r3
 80147c4:	f200 82e6 	bhi.w	8014d94 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80147c8:	2300      	movs	r3, #0
 80147ca:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80147cc:	4b28      	ldr	r3, [pc, #160]	@ (8014870 <tcp_input+0x2bc>)
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	61fb      	str	r3, [r7, #28]
 80147d2:	e09d      	b.n	8014910 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 80147d4:	69fb      	ldr	r3, [r7, #28]
 80147d6:	7d1b      	ldrb	r3, [r3, #20]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d105      	bne.n	80147e8 <tcp_input+0x234>
 80147dc:	4b15      	ldr	r3, [pc, #84]	@ (8014834 <tcp_input+0x280>)
 80147de:	22fb      	movs	r2, #251	@ 0xfb
 80147e0:	4924      	ldr	r1, [pc, #144]	@ (8014874 <tcp_input+0x2c0>)
 80147e2:	4816      	ldr	r0, [pc, #88]	@ (801483c <tcp_input+0x288>)
 80147e4:	f009 ff8c 	bl	801e700 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80147e8:	69fb      	ldr	r3, [r7, #28]
 80147ea:	7d1b      	ldrb	r3, [r3, #20]
 80147ec:	2b0a      	cmp	r3, #10
 80147ee:	d105      	bne.n	80147fc <tcp_input+0x248>
 80147f0:	4b10      	ldr	r3, [pc, #64]	@ (8014834 <tcp_input+0x280>)
 80147f2:	22fc      	movs	r2, #252	@ 0xfc
 80147f4:	4920      	ldr	r1, [pc, #128]	@ (8014878 <tcp_input+0x2c4>)
 80147f6:	4811      	ldr	r0, [pc, #68]	@ (801483c <tcp_input+0x288>)
 80147f8:	f009 ff82 	bl	801e700 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80147fc:	69fb      	ldr	r3, [r7, #28]
 80147fe:	7d1b      	ldrb	r3, [r3, #20]
 8014800:	2b01      	cmp	r3, #1
 8014802:	d105      	bne.n	8014810 <tcp_input+0x25c>
 8014804:	4b0b      	ldr	r3, [pc, #44]	@ (8014834 <tcp_input+0x280>)
 8014806:	22fd      	movs	r2, #253	@ 0xfd
 8014808:	491c      	ldr	r1, [pc, #112]	@ (801487c <tcp_input+0x2c8>)
 801480a:	480c      	ldr	r0, [pc, #48]	@ (801483c <tcp_input+0x288>)
 801480c:	f009 ff78 	bl	801e700 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014810:	69fb      	ldr	r3, [r7, #28]
 8014812:	7a1b      	ldrb	r3, [r3, #8]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d033      	beq.n	8014880 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8014818:	69fb      	ldr	r3, [r7, #28]
 801481a:	7a1a      	ldrb	r2, [r3, #8]
 801481c:	4b09      	ldr	r3, [pc, #36]	@ (8014844 <tcp_input+0x290>)
 801481e:	685b      	ldr	r3, [r3, #4]
 8014820:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014824:	3301      	adds	r3, #1
 8014826:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014828:	429a      	cmp	r2, r3
 801482a:	d029      	beq.n	8014880 <tcp_input+0x2cc>
      prev = pcb;
 801482c:	69fb      	ldr	r3, [r7, #28]
 801482e:	61bb      	str	r3, [r7, #24]
      continue;
 8014830:	e06b      	b.n	801490a <tcp_input+0x356>
 8014832:	bf00      	nop
 8014834:	08023428 	.word	0x08023428
 8014838:	0802345c 	.word	0x0802345c
 801483c:	08023474 	.word	0x08023474
 8014840:	2001b03c 	.word	0x2001b03c
 8014844:	20017754 	.word	0x20017754
 8014848:	2001b040 	.word	0x2001b040
 801484c:	2001b044 	.word	0x2001b044
 8014850:	2001b042 	.word	0x2001b042
 8014854:	0802349c 	.word	0x0802349c
 8014858:	080234ac 	.word	0x080234ac
 801485c:	080234b8 	.word	0x080234b8
 8014860:	2001b04c 	.word	0x2001b04c
 8014864:	2001b050 	.word	0x2001b050
 8014868:	2001b058 	.word	0x2001b058
 801486c:	2001b056 	.word	0x2001b056
 8014870:	2001b020 	.word	0x2001b020
 8014874:	080234d8 	.word	0x080234d8
 8014878:	08023500 	.word	0x08023500
 801487c:	0802352c 	.word	0x0802352c
    }

    if (pcb->remote_port == tcphdr->src &&
 8014880:	69fb      	ldr	r3, [r7, #28]
 8014882:	8b1a      	ldrh	r2, [r3, #24]
 8014884:	4b72      	ldr	r3, [pc, #456]	@ (8014a50 <tcp_input+0x49c>)
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	881b      	ldrh	r3, [r3, #0]
 801488a:	b29b      	uxth	r3, r3
 801488c:	429a      	cmp	r2, r3
 801488e:	d13a      	bne.n	8014906 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8014890:	69fb      	ldr	r3, [r7, #28]
 8014892:	8ada      	ldrh	r2, [r3, #22]
 8014894:	4b6e      	ldr	r3, [pc, #440]	@ (8014a50 <tcp_input+0x49c>)
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	885b      	ldrh	r3, [r3, #2]
 801489a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801489c:	429a      	cmp	r2, r3
 801489e:	d132      	bne.n	8014906 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80148a0:	69fb      	ldr	r3, [r7, #28]
 80148a2:	685a      	ldr	r2, [r3, #4]
 80148a4:	4b6b      	ldr	r3, [pc, #428]	@ (8014a54 <tcp_input+0x4a0>)
 80148a6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80148a8:	429a      	cmp	r2, r3
 80148aa:	d12c      	bne.n	8014906 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80148ac:	69fb      	ldr	r3, [r7, #28]
 80148ae:	681a      	ldr	r2, [r3, #0]
 80148b0:	4b68      	ldr	r3, [pc, #416]	@ (8014a54 <tcp_input+0x4a0>)
 80148b2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80148b4:	429a      	cmp	r2, r3
 80148b6:	d126      	bne.n	8014906 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80148b8:	69fb      	ldr	r3, [r7, #28]
 80148ba:	68db      	ldr	r3, [r3, #12]
 80148bc:	69fa      	ldr	r2, [r7, #28]
 80148be:	429a      	cmp	r2, r3
 80148c0:	d106      	bne.n	80148d0 <tcp_input+0x31c>
 80148c2:	4b65      	ldr	r3, [pc, #404]	@ (8014a58 <tcp_input+0x4a4>)
 80148c4:	f240 120d 	movw	r2, #269	@ 0x10d
 80148c8:	4964      	ldr	r1, [pc, #400]	@ (8014a5c <tcp_input+0x4a8>)
 80148ca:	4865      	ldr	r0, [pc, #404]	@ (8014a60 <tcp_input+0x4ac>)
 80148cc:	f009 ff18 	bl	801e700 <iprintf>
      if (prev != NULL) {
 80148d0:	69bb      	ldr	r3, [r7, #24]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d00a      	beq.n	80148ec <tcp_input+0x338>
        prev->next = pcb->next;
 80148d6:	69fb      	ldr	r3, [r7, #28]
 80148d8:	68da      	ldr	r2, [r3, #12]
 80148da:	69bb      	ldr	r3, [r7, #24]
 80148dc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80148de:	4b61      	ldr	r3, [pc, #388]	@ (8014a64 <tcp_input+0x4b0>)
 80148e0:	681a      	ldr	r2, [r3, #0]
 80148e2:	69fb      	ldr	r3, [r7, #28]
 80148e4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80148e6:	4a5f      	ldr	r2, [pc, #380]	@ (8014a64 <tcp_input+0x4b0>)
 80148e8:	69fb      	ldr	r3, [r7, #28]
 80148ea:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80148ec:	69fb      	ldr	r3, [r7, #28]
 80148ee:	68db      	ldr	r3, [r3, #12]
 80148f0:	69fa      	ldr	r2, [r7, #28]
 80148f2:	429a      	cmp	r2, r3
 80148f4:	d111      	bne.n	801491a <tcp_input+0x366>
 80148f6:	4b58      	ldr	r3, [pc, #352]	@ (8014a58 <tcp_input+0x4a4>)
 80148f8:	f240 1215 	movw	r2, #277	@ 0x115
 80148fc:	495a      	ldr	r1, [pc, #360]	@ (8014a68 <tcp_input+0x4b4>)
 80148fe:	4858      	ldr	r0, [pc, #352]	@ (8014a60 <tcp_input+0x4ac>)
 8014900:	f009 fefe 	bl	801e700 <iprintf>
      break;
 8014904:	e009      	b.n	801491a <tcp_input+0x366>
    }
    prev = pcb;
 8014906:	69fb      	ldr	r3, [r7, #28]
 8014908:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801490a:	69fb      	ldr	r3, [r7, #28]
 801490c:	68db      	ldr	r3, [r3, #12]
 801490e:	61fb      	str	r3, [r7, #28]
 8014910:	69fb      	ldr	r3, [r7, #28]
 8014912:	2b00      	cmp	r3, #0
 8014914:	f47f af5e 	bne.w	80147d4 <tcp_input+0x220>
 8014918:	e000      	b.n	801491c <tcp_input+0x368>
      break;
 801491a:	bf00      	nop
  }

  if (pcb == NULL) {
 801491c:	69fb      	ldr	r3, [r7, #28]
 801491e:	2b00      	cmp	r3, #0
 8014920:	f040 80aa 	bne.w	8014a78 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014924:	4b51      	ldr	r3, [pc, #324]	@ (8014a6c <tcp_input+0x4b8>)
 8014926:	681b      	ldr	r3, [r3, #0]
 8014928:	61fb      	str	r3, [r7, #28]
 801492a:	e03f      	b.n	80149ac <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801492c:	69fb      	ldr	r3, [r7, #28]
 801492e:	7d1b      	ldrb	r3, [r3, #20]
 8014930:	2b0a      	cmp	r3, #10
 8014932:	d006      	beq.n	8014942 <tcp_input+0x38e>
 8014934:	4b48      	ldr	r3, [pc, #288]	@ (8014a58 <tcp_input+0x4a4>)
 8014936:	f240 121f 	movw	r2, #287	@ 0x11f
 801493a:	494d      	ldr	r1, [pc, #308]	@ (8014a70 <tcp_input+0x4bc>)
 801493c:	4848      	ldr	r0, [pc, #288]	@ (8014a60 <tcp_input+0x4ac>)
 801493e:	f009 fedf 	bl	801e700 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8014942:	69fb      	ldr	r3, [r7, #28]
 8014944:	7a1b      	ldrb	r3, [r3, #8]
 8014946:	2b00      	cmp	r3, #0
 8014948:	d009      	beq.n	801495e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801494a:	69fb      	ldr	r3, [r7, #28]
 801494c:	7a1a      	ldrb	r2, [r3, #8]
 801494e:	4b41      	ldr	r3, [pc, #260]	@ (8014a54 <tcp_input+0x4a0>)
 8014950:	685b      	ldr	r3, [r3, #4]
 8014952:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8014956:	3301      	adds	r3, #1
 8014958:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801495a:	429a      	cmp	r2, r3
 801495c:	d122      	bne.n	80149a4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801495e:	69fb      	ldr	r3, [r7, #28]
 8014960:	8b1a      	ldrh	r2, [r3, #24]
 8014962:	4b3b      	ldr	r3, [pc, #236]	@ (8014a50 <tcp_input+0x49c>)
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	881b      	ldrh	r3, [r3, #0]
 8014968:	b29b      	uxth	r3, r3
 801496a:	429a      	cmp	r2, r3
 801496c:	d11b      	bne.n	80149a6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801496e:	69fb      	ldr	r3, [r7, #28]
 8014970:	8ada      	ldrh	r2, [r3, #22]
 8014972:	4b37      	ldr	r3, [pc, #220]	@ (8014a50 <tcp_input+0x49c>)
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	885b      	ldrh	r3, [r3, #2]
 8014978:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801497a:	429a      	cmp	r2, r3
 801497c:	d113      	bne.n	80149a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801497e:	69fb      	ldr	r3, [r7, #28]
 8014980:	685a      	ldr	r2, [r3, #4]
 8014982:	4b34      	ldr	r3, [pc, #208]	@ (8014a54 <tcp_input+0x4a0>)
 8014984:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8014986:	429a      	cmp	r2, r3
 8014988:	d10d      	bne.n	80149a6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801498a:	69fb      	ldr	r3, [r7, #28]
 801498c:	681a      	ldr	r2, [r3, #0]
 801498e:	4b31      	ldr	r3, [pc, #196]	@ (8014a54 <tcp_input+0x4a0>)
 8014990:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8014992:	429a      	cmp	r2, r3
 8014994:	d107      	bne.n	80149a6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8014996:	69f8      	ldr	r0, [r7, #28]
 8014998:	f000 fb56 	bl	8015048 <tcp_timewait_input>
        }
        pbuf_free(p);
 801499c:	6878      	ldr	r0, [r7, #4]
 801499e:	f7fd fe69 	bl	8012674 <pbuf_free>
        return;
 80149a2:	e1fd      	b.n	8014da0 <tcp_input+0x7ec>
        continue;
 80149a4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80149a6:	69fb      	ldr	r3, [r7, #28]
 80149a8:	68db      	ldr	r3, [r3, #12]
 80149aa:	61fb      	str	r3, [r7, #28]
 80149ac:	69fb      	ldr	r3, [r7, #28]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d1bc      	bne.n	801492c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80149b2:	2300      	movs	r3, #0
 80149b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80149b6:	4b2f      	ldr	r3, [pc, #188]	@ (8014a74 <tcp_input+0x4c0>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	617b      	str	r3, [r7, #20]
 80149bc:	e02a      	b.n	8014a14 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80149be:	697b      	ldr	r3, [r7, #20]
 80149c0:	7a1b      	ldrb	r3, [r3, #8]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d00c      	beq.n	80149e0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80149c6:	697b      	ldr	r3, [r7, #20]
 80149c8:	7a1a      	ldrb	r2, [r3, #8]
 80149ca:	4b22      	ldr	r3, [pc, #136]	@ (8014a54 <tcp_input+0x4a0>)
 80149cc:	685b      	ldr	r3, [r3, #4]
 80149ce:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80149d2:	3301      	adds	r3, #1
 80149d4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80149d6:	429a      	cmp	r2, r3
 80149d8:	d002      	beq.n	80149e0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80149da:	697b      	ldr	r3, [r7, #20]
 80149dc:	61bb      	str	r3, [r7, #24]
        continue;
 80149de:	e016      	b.n	8014a0e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80149e0:	697b      	ldr	r3, [r7, #20]
 80149e2:	8ada      	ldrh	r2, [r3, #22]
 80149e4:	4b1a      	ldr	r3, [pc, #104]	@ (8014a50 <tcp_input+0x49c>)
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	885b      	ldrh	r3, [r3, #2]
 80149ea:	b29b      	uxth	r3, r3
 80149ec:	429a      	cmp	r2, r3
 80149ee:	d10c      	bne.n	8014a0a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80149f0:	697b      	ldr	r3, [r7, #20]
 80149f2:	681a      	ldr	r2, [r3, #0]
 80149f4:	4b17      	ldr	r3, [pc, #92]	@ (8014a54 <tcp_input+0x4a0>)
 80149f6:	695b      	ldr	r3, [r3, #20]
 80149f8:	429a      	cmp	r2, r3
 80149fa:	d00f      	beq.n	8014a1c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80149fc:	697b      	ldr	r3, [r7, #20]
 80149fe:	2b00      	cmp	r3, #0
 8014a00:	d00d      	beq.n	8014a1e <tcp_input+0x46a>
 8014a02:	697b      	ldr	r3, [r7, #20]
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	2b00      	cmp	r3, #0
 8014a08:	d009      	beq.n	8014a1e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8014a0a:	697b      	ldr	r3, [r7, #20]
 8014a0c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8014a0e:	697b      	ldr	r3, [r7, #20]
 8014a10:	68db      	ldr	r3, [r3, #12]
 8014a12:	617b      	str	r3, [r7, #20]
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d1d1      	bne.n	80149be <tcp_input+0x40a>
 8014a1a:	e000      	b.n	8014a1e <tcp_input+0x46a>
            break;
 8014a1c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8014a1e:	697b      	ldr	r3, [r7, #20]
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d029      	beq.n	8014a78 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8014a24:	69bb      	ldr	r3, [r7, #24]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d00a      	beq.n	8014a40 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8014a2a:	697b      	ldr	r3, [r7, #20]
 8014a2c:	68da      	ldr	r2, [r3, #12]
 8014a2e:	69bb      	ldr	r3, [r7, #24]
 8014a30:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8014a32:	4b10      	ldr	r3, [pc, #64]	@ (8014a74 <tcp_input+0x4c0>)
 8014a34:	681a      	ldr	r2, [r3, #0]
 8014a36:	697b      	ldr	r3, [r7, #20]
 8014a38:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8014a3a:	4a0e      	ldr	r2, [pc, #56]	@ (8014a74 <tcp_input+0x4c0>)
 8014a3c:	697b      	ldr	r3, [r7, #20]
 8014a3e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8014a40:	6978      	ldr	r0, [r7, #20]
 8014a42:	f000 fa03 	bl	8014e4c <tcp_listen_input>
      }
      pbuf_free(p);
 8014a46:	6878      	ldr	r0, [r7, #4]
 8014a48:	f7fd fe14 	bl	8012674 <pbuf_free>
      return;
 8014a4c:	e1a8      	b.n	8014da0 <tcp_input+0x7ec>
 8014a4e:	bf00      	nop
 8014a50:	2001b03c 	.word	0x2001b03c
 8014a54:	20017754 	.word	0x20017754
 8014a58:	08023428 	.word	0x08023428
 8014a5c:	08023554 	.word	0x08023554
 8014a60:	08023474 	.word	0x08023474
 8014a64:	2001b020 	.word	0x2001b020
 8014a68:	08023580 	.word	0x08023580
 8014a6c:	2001b024 	.word	0x2001b024
 8014a70:	080235ac 	.word	0x080235ac
 8014a74:	2001b01c 	.word	0x2001b01c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8014a78:	69fb      	ldr	r3, [r7, #28]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	f000 8158 	beq.w	8014d30 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8014a80:	4b95      	ldr	r3, [pc, #596]	@ (8014cd8 <tcp_input+0x724>)
 8014a82:	2200      	movs	r2, #0
 8014a84:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	891a      	ldrh	r2, [r3, #8]
 8014a8a:	4b93      	ldr	r3, [pc, #588]	@ (8014cd8 <tcp_input+0x724>)
 8014a8c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8014a8e:	4a92      	ldr	r2, [pc, #584]	@ (8014cd8 <tcp_input+0x724>)
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8014a94:	4b91      	ldr	r3, [pc, #580]	@ (8014cdc <tcp_input+0x728>)
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	4a8f      	ldr	r2, [pc, #572]	@ (8014cd8 <tcp_input+0x724>)
 8014a9a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8014a9c:	4b90      	ldr	r3, [pc, #576]	@ (8014ce0 <tcp_input+0x72c>)
 8014a9e:	2200      	movs	r2, #0
 8014aa0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8014aa2:	4b90      	ldr	r3, [pc, #576]	@ (8014ce4 <tcp_input+0x730>)
 8014aa4:	2200      	movs	r2, #0
 8014aa6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8014aa8:	4b8f      	ldr	r3, [pc, #572]	@ (8014ce8 <tcp_input+0x734>)
 8014aaa:	2200      	movs	r2, #0
 8014aac:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8014aae:	4b8f      	ldr	r3, [pc, #572]	@ (8014cec <tcp_input+0x738>)
 8014ab0:	781b      	ldrb	r3, [r3, #0]
 8014ab2:	f003 0308 	and.w	r3, r3, #8
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d006      	beq.n	8014ac8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	7b5b      	ldrb	r3, [r3, #13]
 8014abe:	f043 0301 	orr.w	r3, r3, #1
 8014ac2:	b2da      	uxtb	r2, r3
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8014ac8:	69fb      	ldr	r3, [r7, #28]
 8014aca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d017      	beq.n	8014b00 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014ad0:	69f8      	ldr	r0, [r7, #28]
 8014ad2:	f7ff f929 	bl	8013d28 <tcp_process_refused_data>
 8014ad6:	4603      	mov	r3, r0
 8014ad8:	f113 0f0d 	cmn.w	r3, #13
 8014adc:	d007      	beq.n	8014aee <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014ade:	69fb      	ldr	r3, [r7, #28]
 8014ae0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d00c      	beq.n	8014b00 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8014ae6:	4b82      	ldr	r3, [pc, #520]	@ (8014cf0 <tcp_input+0x73c>)
 8014ae8:	881b      	ldrh	r3, [r3, #0]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d008      	beq.n	8014b00 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8014aee:	69fb      	ldr	r3, [r7, #28]
 8014af0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8014af2:	2b00      	cmp	r3, #0
 8014af4:	f040 80e3 	bne.w	8014cbe <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8014af8:	69f8      	ldr	r0, [r7, #28]
 8014afa:	f003 f9a7 	bl	8017e4c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8014afe:	e0de      	b.n	8014cbe <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8014b00:	4a7c      	ldr	r2, [pc, #496]	@ (8014cf4 <tcp_input+0x740>)
 8014b02:	69fb      	ldr	r3, [r7, #28]
 8014b04:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8014b06:	69f8      	ldr	r0, [r7, #28]
 8014b08:	f000 fb18 	bl	801513c <tcp_process>
 8014b0c:	4603      	mov	r3, r0
 8014b0e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8014b10:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014b14:	f113 0f0d 	cmn.w	r3, #13
 8014b18:	f000 80d3 	beq.w	8014cc2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8014b1c:	4b71      	ldr	r3, [pc, #452]	@ (8014ce4 <tcp_input+0x730>)
 8014b1e:	781b      	ldrb	r3, [r3, #0]
 8014b20:	f003 0308 	and.w	r3, r3, #8
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d015      	beq.n	8014b54 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8014b28:	69fb      	ldr	r3, [r7, #28]
 8014b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d008      	beq.n	8014b44 <tcp_input+0x590>
 8014b32:	69fb      	ldr	r3, [r7, #28]
 8014b34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014b38:	69fa      	ldr	r2, [r7, #28]
 8014b3a:	6912      	ldr	r2, [r2, #16]
 8014b3c:	f06f 010d 	mvn.w	r1, #13
 8014b40:	4610      	mov	r0, r2
 8014b42:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014b44:	69f9      	ldr	r1, [r7, #28]
 8014b46:	486c      	ldr	r0, [pc, #432]	@ (8014cf8 <tcp_input+0x744>)
 8014b48:	f7ff fbbc 	bl	80142c4 <tcp_pcb_remove>
        tcp_free(pcb);
 8014b4c:	69f8      	ldr	r0, [r7, #28]
 8014b4e:	f7fe f9a7 	bl	8012ea0 <tcp_free>
 8014b52:	e0da      	b.n	8014d0a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8014b54:	2300      	movs	r3, #0
 8014b56:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8014b58:	4b63      	ldr	r3, [pc, #396]	@ (8014ce8 <tcp_input+0x734>)
 8014b5a:	881b      	ldrh	r3, [r3, #0]
 8014b5c:	2b00      	cmp	r3, #0
 8014b5e:	d01d      	beq.n	8014b9c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8014b60:	4b61      	ldr	r3, [pc, #388]	@ (8014ce8 <tcp_input+0x734>)
 8014b62:	881b      	ldrh	r3, [r3, #0]
 8014b64:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8014b66:	69fb      	ldr	r3, [r7, #28]
 8014b68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014b6c:	2b00      	cmp	r3, #0
 8014b6e:	d00a      	beq.n	8014b86 <tcp_input+0x5d2>
 8014b70:	69fb      	ldr	r3, [r7, #28]
 8014b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8014b76:	69fa      	ldr	r2, [r7, #28]
 8014b78:	6910      	ldr	r0, [r2, #16]
 8014b7a:	89fa      	ldrh	r2, [r7, #14]
 8014b7c:	69f9      	ldr	r1, [r7, #28]
 8014b7e:	4798      	blx	r3
 8014b80:	4603      	mov	r3, r0
 8014b82:	74fb      	strb	r3, [r7, #19]
 8014b84:	e001      	b.n	8014b8a <tcp_input+0x5d6>
 8014b86:	2300      	movs	r3, #0
 8014b88:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014b8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014b8e:	f113 0f0d 	cmn.w	r3, #13
 8014b92:	f000 8098 	beq.w	8014cc6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8014b96:	4b54      	ldr	r3, [pc, #336]	@ (8014ce8 <tcp_input+0x734>)
 8014b98:	2200      	movs	r2, #0
 8014b9a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8014b9c:	69f8      	ldr	r0, [r7, #28]
 8014b9e:	f000 f915 	bl	8014dcc <tcp_input_delayed_close>
 8014ba2:	4603      	mov	r3, r0
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	f040 8090 	bne.w	8014cca <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8014baa:	4b4d      	ldr	r3, [pc, #308]	@ (8014ce0 <tcp_input+0x72c>)
 8014bac:	681b      	ldr	r3, [r3, #0]
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d041      	beq.n	8014c36 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8014bb2:	69fb      	ldr	r3, [r7, #28]
 8014bb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d006      	beq.n	8014bc8 <tcp_input+0x614>
 8014bba:	4b50      	ldr	r3, [pc, #320]	@ (8014cfc <tcp_input+0x748>)
 8014bbc:	f44f 72f3 	mov.w	r2, #486	@ 0x1e6
 8014bc0:	494f      	ldr	r1, [pc, #316]	@ (8014d00 <tcp_input+0x74c>)
 8014bc2:	4850      	ldr	r0, [pc, #320]	@ (8014d04 <tcp_input+0x750>)
 8014bc4:	f009 fd9c 	bl	801e700 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8014bc8:	69fb      	ldr	r3, [r7, #28]
 8014bca:	8b5b      	ldrh	r3, [r3, #26]
 8014bcc:	f003 0310 	and.w	r3, r3, #16
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d008      	beq.n	8014be6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8014bd4:	4b42      	ldr	r3, [pc, #264]	@ (8014ce0 <tcp_input+0x72c>)
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	4618      	mov	r0, r3
 8014bda:	f7fd fd4b 	bl	8012674 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8014bde:	69f8      	ldr	r0, [r7, #28]
 8014be0:	f7fe fc46 	bl	8013470 <tcp_abort>
            goto aborted;
 8014be4:	e091      	b.n	8014d0a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8014be6:	69fb      	ldr	r3, [r7, #28]
 8014be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d00c      	beq.n	8014c0a <tcp_input+0x656>
 8014bf0:	69fb      	ldr	r3, [r7, #28]
 8014bf2:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014bf6:	69fb      	ldr	r3, [r7, #28]
 8014bf8:	6918      	ldr	r0, [r3, #16]
 8014bfa:	4b39      	ldr	r3, [pc, #228]	@ (8014ce0 <tcp_input+0x72c>)
 8014bfc:	681a      	ldr	r2, [r3, #0]
 8014bfe:	2300      	movs	r3, #0
 8014c00:	69f9      	ldr	r1, [r7, #28]
 8014c02:	47a0      	blx	r4
 8014c04:	4603      	mov	r3, r0
 8014c06:	74fb      	strb	r3, [r7, #19]
 8014c08:	e008      	b.n	8014c1c <tcp_input+0x668>
 8014c0a:	4b35      	ldr	r3, [pc, #212]	@ (8014ce0 <tcp_input+0x72c>)
 8014c0c:	681a      	ldr	r2, [r3, #0]
 8014c0e:	2300      	movs	r3, #0
 8014c10:	69f9      	ldr	r1, [r7, #28]
 8014c12:	2000      	movs	r0, #0
 8014c14:	f7ff f95e 	bl	8013ed4 <tcp_recv_null>
 8014c18:	4603      	mov	r3, r0
 8014c1a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8014c1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014c20:	f113 0f0d 	cmn.w	r3, #13
 8014c24:	d053      	beq.n	8014cce <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8014c26:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d003      	beq.n	8014c36 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8014c2e:	4b2c      	ldr	r3, [pc, #176]	@ (8014ce0 <tcp_input+0x72c>)
 8014c30:	681a      	ldr	r2, [r3, #0]
 8014c32:	69fb      	ldr	r3, [r7, #28]
 8014c34:	679a      	str	r2, [r3, #120]	@ 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8014c36:	4b2b      	ldr	r3, [pc, #172]	@ (8014ce4 <tcp_input+0x730>)
 8014c38:	781b      	ldrb	r3, [r3, #0]
 8014c3a:	f003 0320 	and.w	r3, r3, #32
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d030      	beq.n	8014ca4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8014c42:	69fb      	ldr	r3, [r7, #28]
 8014c44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d009      	beq.n	8014c5e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8014c4a:	69fb      	ldr	r3, [r7, #28]
 8014c4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014c4e:	7b5a      	ldrb	r2, [r3, #13]
 8014c50:	69fb      	ldr	r3, [r7, #28]
 8014c52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8014c54:	f042 0220 	orr.w	r2, r2, #32
 8014c58:	b2d2      	uxtb	r2, r2
 8014c5a:	735a      	strb	r2, [r3, #13]
 8014c5c:	e022      	b.n	8014ca4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014c5e:	69fb      	ldr	r3, [r7, #28]
 8014c60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014c62:	f5b3 6f06 	cmp.w	r3, #2144	@ 0x860
 8014c66:	d005      	beq.n	8014c74 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8014c68:	69fb      	ldr	r3, [r7, #28]
 8014c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8014c6c:	3301      	adds	r3, #1
 8014c6e:	b29a      	uxth	r2, r3
 8014c70:	69fb      	ldr	r3, [r7, #28]
 8014c72:	851a      	strh	r2, [r3, #40]	@ 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8014c74:	69fb      	ldr	r3, [r7, #28]
 8014c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d00b      	beq.n	8014c96 <tcp_input+0x6e2>
 8014c7e:	69fb      	ldr	r3, [r7, #28]
 8014c80:	f8d3 4084 	ldr.w	r4, [r3, #132]	@ 0x84
 8014c84:	69fb      	ldr	r3, [r7, #28]
 8014c86:	6918      	ldr	r0, [r3, #16]
 8014c88:	2300      	movs	r3, #0
 8014c8a:	2200      	movs	r2, #0
 8014c8c:	69f9      	ldr	r1, [r7, #28]
 8014c8e:	47a0      	blx	r4
 8014c90:	4603      	mov	r3, r0
 8014c92:	74fb      	strb	r3, [r7, #19]
 8014c94:	e001      	b.n	8014c9a <tcp_input+0x6e6>
 8014c96:	2300      	movs	r3, #0
 8014c98:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8014c9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014c9e:	f113 0f0d 	cmn.w	r3, #13
 8014ca2:	d016      	beq.n	8014cd2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8014ca4:	4b13      	ldr	r3, [pc, #76]	@ (8014cf4 <tcp_input+0x740>)
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8014caa:	69f8      	ldr	r0, [r7, #28]
 8014cac:	f000 f88e 	bl	8014dcc <tcp_input_delayed_close>
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d128      	bne.n	8014d08 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8014cb6:	69f8      	ldr	r0, [r7, #28]
 8014cb8:	f002 fac2 	bl	8017240 <tcp_output>
 8014cbc:	e025      	b.n	8014d0a <tcp_input+0x756>
        goto aborted;
 8014cbe:	bf00      	nop
 8014cc0:	e023      	b.n	8014d0a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8014cc2:	bf00      	nop
 8014cc4:	e021      	b.n	8014d0a <tcp_input+0x756>
              goto aborted;
 8014cc6:	bf00      	nop
 8014cc8:	e01f      	b.n	8014d0a <tcp_input+0x756>
          goto aborted;
 8014cca:	bf00      	nop
 8014ccc:	e01d      	b.n	8014d0a <tcp_input+0x756>
            goto aborted;
 8014cce:	bf00      	nop
 8014cd0:	e01b      	b.n	8014d0a <tcp_input+0x756>
              goto aborted;
 8014cd2:	bf00      	nop
 8014cd4:	e019      	b.n	8014d0a <tcp_input+0x756>
 8014cd6:	bf00      	nop
 8014cd8:	2001b02c 	.word	0x2001b02c
 8014cdc:	2001b03c 	.word	0x2001b03c
 8014ce0:	2001b05c 	.word	0x2001b05c
 8014ce4:	2001b059 	.word	0x2001b059
 8014ce8:	2001b054 	.word	0x2001b054
 8014cec:	2001b058 	.word	0x2001b058
 8014cf0:	2001b056 	.word	0x2001b056
 8014cf4:	2001b060 	.word	0x2001b060
 8014cf8:	2001b020 	.word	0x2001b020
 8014cfc:	08023428 	.word	0x08023428
 8014d00:	080235dc 	.word	0x080235dc
 8014d04:	08023474 	.word	0x08023474
          goto aborted;
 8014d08:	bf00      	nop
    tcp_input_pcb = NULL;
 8014d0a:	4b27      	ldr	r3, [pc, #156]	@ (8014da8 <tcp_input+0x7f4>)
 8014d0c:	2200      	movs	r2, #0
 8014d0e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8014d10:	4b26      	ldr	r3, [pc, #152]	@ (8014dac <tcp_input+0x7f8>)
 8014d12:	2200      	movs	r2, #0
 8014d14:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8014d16:	4b26      	ldr	r3, [pc, #152]	@ (8014db0 <tcp_input+0x7fc>)
 8014d18:	685b      	ldr	r3, [r3, #4]
 8014d1a:	2b00      	cmp	r3, #0
 8014d1c:	d03f      	beq.n	8014d9e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8014d1e:	4b24      	ldr	r3, [pc, #144]	@ (8014db0 <tcp_input+0x7fc>)
 8014d20:	685b      	ldr	r3, [r3, #4]
 8014d22:	4618      	mov	r0, r3
 8014d24:	f7fd fca6 	bl	8012674 <pbuf_free>
      inseg.p = NULL;
 8014d28:	4b21      	ldr	r3, [pc, #132]	@ (8014db0 <tcp_input+0x7fc>)
 8014d2a:	2200      	movs	r2, #0
 8014d2c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8014d2e:	e036      	b.n	8014d9e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8014d30:	4b20      	ldr	r3, [pc, #128]	@ (8014db4 <tcp_input+0x800>)
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	899b      	ldrh	r3, [r3, #12]
 8014d36:	b29b      	uxth	r3, r3
 8014d38:	4618      	mov	r0, r3
 8014d3a:	f7fb fdaf 	bl	801089c <lwip_htons>
 8014d3e:	4603      	mov	r3, r0
 8014d40:	b2db      	uxtb	r3, r3
 8014d42:	f003 0304 	and.w	r3, r3, #4
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d118      	bne.n	8014d7c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014d4a:	4b1b      	ldr	r3, [pc, #108]	@ (8014db8 <tcp_input+0x804>)
 8014d4c:	6819      	ldr	r1, [r3, #0]
 8014d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8014dbc <tcp_input+0x808>)
 8014d50:	881b      	ldrh	r3, [r3, #0]
 8014d52:	461a      	mov	r2, r3
 8014d54:	4b1a      	ldr	r3, [pc, #104]	@ (8014dc0 <tcp_input+0x80c>)
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014d5a:	4b16      	ldr	r3, [pc, #88]	@ (8014db4 <tcp_input+0x800>)
 8014d5c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014d5e:	885b      	ldrh	r3, [r3, #2]
 8014d60:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014d62:	4a14      	ldr	r2, [pc, #80]	@ (8014db4 <tcp_input+0x800>)
 8014d64:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014d66:	8812      	ldrh	r2, [r2, #0]
 8014d68:	b292      	uxth	r2, r2
 8014d6a:	9202      	str	r2, [sp, #8]
 8014d6c:	9301      	str	r3, [sp, #4]
 8014d6e:	4b15      	ldr	r3, [pc, #84]	@ (8014dc4 <tcp_input+0x810>)
 8014d70:	9300      	str	r3, [sp, #0]
 8014d72:	4b15      	ldr	r3, [pc, #84]	@ (8014dc8 <tcp_input+0x814>)
 8014d74:	4602      	mov	r2, r0
 8014d76:	2000      	movs	r0, #0
 8014d78:	f003 f816 	bl	8017da8 <tcp_rst>
    pbuf_free(p);
 8014d7c:	6878      	ldr	r0, [r7, #4]
 8014d7e:	f7fd fc79 	bl	8012674 <pbuf_free>
  return;
 8014d82:	e00c      	b.n	8014d9e <tcp_input+0x7ea>
    goto dropped;
 8014d84:	bf00      	nop
 8014d86:	e006      	b.n	8014d96 <tcp_input+0x7e2>
    goto dropped;
 8014d88:	bf00      	nop
 8014d8a:	e004      	b.n	8014d96 <tcp_input+0x7e2>
    goto dropped;
 8014d8c:	bf00      	nop
 8014d8e:	e002      	b.n	8014d96 <tcp_input+0x7e2>
      goto dropped;
 8014d90:	bf00      	nop
 8014d92:	e000      	b.n	8014d96 <tcp_input+0x7e2>
      goto dropped;
 8014d94:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8014d96:	6878      	ldr	r0, [r7, #4]
 8014d98:	f7fd fc6c 	bl	8012674 <pbuf_free>
 8014d9c:	e000      	b.n	8014da0 <tcp_input+0x7ec>
  return;
 8014d9e:	bf00      	nop
}
 8014da0:	3724      	adds	r7, #36	@ 0x24
 8014da2:	46bd      	mov	sp, r7
 8014da4:	bd90      	pop	{r4, r7, pc}
 8014da6:	bf00      	nop
 8014da8:	2001b060 	.word	0x2001b060
 8014dac:	2001b05c 	.word	0x2001b05c
 8014db0:	2001b02c 	.word	0x2001b02c
 8014db4:	2001b03c 	.word	0x2001b03c
 8014db8:	2001b050 	.word	0x2001b050
 8014dbc:	2001b056 	.word	0x2001b056
 8014dc0:	2001b04c 	.word	0x2001b04c
 8014dc4:	20017764 	.word	0x20017764
 8014dc8:	20017768 	.word	0x20017768

08014dcc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8014dcc:	b580      	push	{r7, lr}
 8014dce:	b082      	sub	sp, #8
 8014dd0:	af00      	add	r7, sp, #0
 8014dd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d106      	bne.n	8014de8 <tcp_input_delayed_close+0x1c>
 8014dda:	4b17      	ldr	r3, [pc, #92]	@ (8014e38 <tcp_input_delayed_close+0x6c>)
 8014ddc:	f240 225a 	movw	r2, #602	@ 0x25a
 8014de0:	4916      	ldr	r1, [pc, #88]	@ (8014e3c <tcp_input_delayed_close+0x70>)
 8014de2:	4817      	ldr	r0, [pc, #92]	@ (8014e40 <tcp_input_delayed_close+0x74>)
 8014de4:	f009 fc8c 	bl	801e700 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8014de8:	4b16      	ldr	r3, [pc, #88]	@ (8014e44 <tcp_input_delayed_close+0x78>)
 8014dea:	781b      	ldrb	r3, [r3, #0]
 8014dec:	f003 0310 	and.w	r3, r3, #16
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d01c      	beq.n	8014e2e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	8b5b      	ldrh	r3, [r3, #26]
 8014df8:	f003 0310 	and.w	r3, r3, #16
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d10d      	bne.n	8014e1c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d008      	beq.n	8014e1c <tcp_input_delayed_close+0x50>
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014e10:	687a      	ldr	r2, [r7, #4]
 8014e12:	6912      	ldr	r2, [r2, #16]
 8014e14:	f06f 010e 	mvn.w	r1, #14
 8014e18:	4610      	mov	r0, r2
 8014e1a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8014e1c:	6879      	ldr	r1, [r7, #4]
 8014e1e:	480a      	ldr	r0, [pc, #40]	@ (8014e48 <tcp_input_delayed_close+0x7c>)
 8014e20:	f7ff fa50 	bl	80142c4 <tcp_pcb_remove>
    tcp_free(pcb);
 8014e24:	6878      	ldr	r0, [r7, #4]
 8014e26:	f7fe f83b 	bl	8012ea0 <tcp_free>
    return 1;
 8014e2a:	2301      	movs	r3, #1
 8014e2c:	e000      	b.n	8014e30 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8014e2e:	2300      	movs	r3, #0
}
 8014e30:	4618      	mov	r0, r3
 8014e32:	3708      	adds	r7, #8
 8014e34:	46bd      	mov	sp, r7
 8014e36:	bd80      	pop	{r7, pc}
 8014e38:	08023428 	.word	0x08023428
 8014e3c:	080235f8 	.word	0x080235f8
 8014e40:	08023474 	.word	0x08023474
 8014e44:	2001b059 	.word	0x2001b059
 8014e48:	2001b020 	.word	0x2001b020

08014e4c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8014e4c:	b590      	push	{r4, r7, lr}
 8014e4e:	b08b      	sub	sp, #44	@ 0x2c
 8014e50:	af04      	add	r7, sp, #16
 8014e52:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8014e54:	4b6f      	ldr	r3, [pc, #444]	@ (8015014 <tcp_listen_input+0x1c8>)
 8014e56:	781b      	ldrb	r3, [r3, #0]
 8014e58:	f003 0304 	and.w	r3, r3, #4
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	f040 80d2 	bne.w	8015006 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	d106      	bne.n	8014e76 <tcp_listen_input+0x2a>
 8014e68:	4b6b      	ldr	r3, [pc, #428]	@ (8015018 <tcp_listen_input+0x1cc>)
 8014e6a:	f240 2281 	movw	r2, #641	@ 0x281
 8014e6e:	496b      	ldr	r1, [pc, #428]	@ (801501c <tcp_listen_input+0x1d0>)
 8014e70:	486b      	ldr	r0, [pc, #428]	@ (8015020 <tcp_listen_input+0x1d4>)
 8014e72:	f009 fc45 	bl	801e700 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8014e76:	4b67      	ldr	r3, [pc, #412]	@ (8015014 <tcp_listen_input+0x1c8>)
 8014e78:	781b      	ldrb	r3, [r3, #0]
 8014e7a:	f003 0310 	and.w	r3, r3, #16
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d019      	beq.n	8014eb6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014e82:	4b68      	ldr	r3, [pc, #416]	@ (8015024 <tcp_listen_input+0x1d8>)
 8014e84:	6819      	ldr	r1, [r3, #0]
 8014e86:	4b68      	ldr	r3, [pc, #416]	@ (8015028 <tcp_listen_input+0x1dc>)
 8014e88:	881b      	ldrh	r3, [r3, #0]
 8014e8a:	461a      	mov	r2, r3
 8014e8c:	4b67      	ldr	r3, [pc, #412]	@ (801502c <tcp_listen_input+0x1e0>)
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014e92:	4b67      	ldr	r3, [pc, #412]	@ (8015030 <tcp_listen_input+0x1e4>)
 8014e94:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014e96:	885b      	ldrh	r3, [r3, #2]
 8014e98:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014e9a:	4a65      	ldr	r2, [pc, #404]	@ (8015030 <tcp_listen_input+0x1e4>)
 8014e9c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014e9e:	8812      	ldrh	r2, [r2, #0]
 8014ea0:	b292      	uxth	r2, r2
 8014ea2:	9202      	str	r2, [sp, #8]
 8014ea4:	9301      	str	r3, [sp, #4]
 8014ea6:	4b63      	ldr	r3, [pc, #396]	@ (8015034 <tcp_listen_input+0x1e8>)
 8014ea8:	9300      	str	r3, [sp, #0]
 8014eaa:	4b63      	ldr	r3, [pc, #396]	@ (8015038 <tcp_listen_input+0x1ec>)
 8014eac:	4602      	mov	r2, r0
 8014eae:	6878      	ldr	r0, [r7, #4]
 8014eb0:	f002 ff7a 	bl	8017da8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8014eb4:	e0a9      	b.n	801500a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8014eb6:	4b57      	ldr	r3, [pc, #348]	@ (8015014 <tcp_listen_input+0x1c8>)
 8014eb8:	781b      	ldrb	r3, [r3, #0]
 8014eba:	f003 0302 	and.w	r3, r3, #2
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	f000 80a3 	beq.w	801500a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	7d5b      	ldrb	r3, [r3, #21]
 8014ec8:	4618      	mov	r0, r3
 8014eca:	f7ff f927 	bl	801411c <tcp_alloc>
 8014ece:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014ed0:	697b      	ldr	r3, [r7, #20]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d111      	bne.n	8014efa <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	699b      	ldr	r3, [r3, #24]
 8014eda:	2b00      	cmp	r3, #0
 8014edc:	d00a      	beq.n	8014ef4 <tcp_listen_input+0xa8>
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	699b      	ldr	r3, [r3, #24]
 8014ee2:	687a      	ldr	r2, [r7, #4]
 8014ee4:	6910      	ldr	r0, [r2, #16]
 8014ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8014eea:	2100      	movs	r1, #0
 8014eec:	4798      	blx	r3
 8014eee:	4603      	mov	r3, r0
 8014ef0:	73bb      	strb	r3, [r7, #14]
      return;
 8014ef2:	e08b      	b.n	801500c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8014ef4:	23f0      	movs	r3, #240	@ 0xf0
 8014ef6:	73bb      	strb	r3, [r7, #14]
      return;
 8014ef8:	e088      	b.n	801500c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014efa:	4b50      	ldr	r3, [pc, #320]	@ (801503c <tcp_listen_input+0x1f0>)
 8014efc:	695a      	ldr	r2, [r3, #20]
 8014efe:	697b      	ldr	r3, [r7, #20]
 8014f00:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8014f02:	4b4e      	ldr	r3, [pc, #312]	@ (801503c <tcp_listen_input+0x1f0>)
 8014f04:	691a      	ldr	r2, [r3, #16]
 8014f06:	697b      	ldr	r3, [r7, #20]
 8014f08:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	8ada      	ldrh	r2, [r3, #22]
 8014f0e:	697b      	ldr	r3, [r7, #20]
 8014f10:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8014f12:	4b47      	ldr	r3, [pc, #284]	@ (8015030 <tcp_listen_input+0x1e4>)
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	881b      	ldrh	r3, [r3, #0]
 8014f18:	b29a      	uxth	r2, r3
 8014f1a:	697b      	ldr	r3, [r7, #20]
 8014f1c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014f1e:	697b      	ldr	r3, [r7, #20]
 8014f20:	2203      	movs	r2, #3
 8014f22:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8014f24:	4b41      	ldr	r3, [pc, #260]	@ (801502c <tcp_listen_input+0x1e0>)
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	1c5a      	adds	r2, r3, #1
 8014f2a:	697b      	ldr	r3, [r7, #20]
 8014f2c:	625a      	str	r2, [r3, #36]	@ 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014f2e:	697b      	ldr	r3, [r7, #20]
 8014f30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014f32:	697b      	ldr	r3, [r7, #20]
 8014f34:	62da      	str	r2, [r3, #44]	@ 0x2c
    iss = tcp_next_iss(npcb);
 8014f36:	6978      	ldr	r0, [r7, #20]
 8014f38:	f7ff fa58 	bl	80143ec <tcp_next_iss>
 8014f3c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014f3e:	697b      	ldr	r3, [r7, #20]
 8014f40:	693a      	ldr	r2, [r7, #16]
 8014f42:	659a      	str	r2, [r3, #88]	@ 0x58
    npcb->snd_nxt = iss;
 8014f44:	697b      	ldr	r3, [r7, #20]
 8014f46:	693a      	ldr	r2, [r7, #16]
 8014f48:	651a      	str	r2, [r3, #80]	@ 0x50
    npcb->lastack = iss;
 8014f4a:	697b      	ldr	r3, [r7, #20]
 8014f4c:	693a      	ldr	r2, [r7, #16]
 8014f4e:	645a      	str	r2, [r3, #68]	@ 0x44
    npcb->snd_lbb = iss;
 8014f50:	697b      	ldr	r3, [r7, #20]
 8014f52:	693a      	ldr	r2, [r7, #16]
 8014f54:	65da      	str	r2, [r3, #92]	@ 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8014f56:	4b35      	ldr	r3, [pc, #212]	@ (801502c <tcp_listen_input+0x1e0>)
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	1e5a      	subs	r2, r3, #1
 8014f5c:	697b      	ldr	r3, [r7, #20]
 8014f5e:	655a      	str	r2, [r3, #84]	@ 0x54
    npcb->callback_arg = pcb->callback_arg;
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	691a      	ldr	r2, [r3, #16]
 8014f64:	697b      	ldr	r3, [r7, #20]
 8014f66:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8014f68:	697b      	ldr	r3, [r7, #20]
 8014f6a:	687a      	ldr	r2, [r7, #4]
 8014f6c:	67da      	str	r2, [r3, #124]	@ 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	7a5b      	ldrb	r3, [r3, #9]
 8014f72:	f003 030c 	and.w	r3, r3, #12
 8014f76:	b2da      	uxtb	r2, r3
 8014f78:	697b      	ldr	r3, [r7, #20]
 8014f7a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	7a1a      	ldrb	r2, [r3, #8]
 8014f80:	697b      	ldr	r3, [r7, #20]
 8014f82:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8014f84:	4b2e      	ldr	r3, [pc, #184]	@ (8015040 <tcp_listen_input+0x1f4>)
 8014f86:	681a      	ldr	r2, [r3, #0]
 8014f88:	697b      	ldr	r3, [r7, #20]
 8014f8a:	60da      	str	r2, [r3, #12]
 8014f8c:	4a2c      	ldr	r2, [pc, #176]	@ (8015040 <tcp_listen_input+0x1f4>)
 8014f8e:	697b      	ldr	r3, [r7, #20]
 8014f90:	6013      	str	r3, [r2, #0]
 8014f92:	f003 f8cb 	bl	801812c <tcp_timer_needed>
 8014f96:	4b2b      	ldr	r3, [pc, #172]	@ (8015044 <tcp_listen_input+0x1f8>)
 8014f98:	2201      	movs	r2, #1
 8014f9a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8014f9c:	6978      	ldr	r0, [r7, #20]
 8014f9e:	f001 fd8b 	bl	8016ab8 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8014fa2:	4b23      	ldr	r3, [pc, #140]	@ (8015030 <tcp_listen_input+0x1e4>)
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	89db      	ldrh	r3, [r3, #14]
 8014fa8:	b29a      	uxth	r2, r3
 8014faa:	697b      	ldr	r3, [r7, #20]
 8014fac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014fb0:	697b      	ldr	r3, [r7, #20]
 8014fb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8014fb6:	697b      	ldr	r3, [r7, #20]
 8014fb8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014fbc:	697b      	ldr	r3, [r7, #20]
 8014fbe:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8014fc0:	697b      	ldr	r3, [r7, #20]
 8014fc2:	3304      	adds	r3, #4
 8014fc4:	4618      	mov	r0, r3
 8014fc6:	f006 fefd 	bl	801bdc4 <ip4_route>
 8014fca:	4601      	mov	r1, r0
 8014fcc:	697b      	ldr	r3, [r7, #20]
 8014fce:	3304      	adds	r3, #4
 8014fd0:	461a      	mov	r2, r3
 8014fd2:	4620      	mov	r0, r4
 8014fd4:	f7ff fa30 	bl	8014438 <tcp_eff_send_mss_netif>
 8014fd8:	4603      	mov	r3, r0
 8014fda:	461a      	mov	r2, r3
 8014fdc:	697b      	ldr	r3, [r7, #20]
 8014fde:	865a      	strh	r2, [r3, #50]	@ 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014fe0:	2112      	movs	r1, #18
 8014fe2:	6978      	ldr	r0, [r7, #20]
 8014fe4:	f002 f83e 	bl	8017064 <tcp_enqueue_flags>
 8014fe8:	4603      	mov	r3, r0
 8014fea:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ff0:	2b00      	cmp	r3, #0
 8014ff2:	d004      	beq.n	8014ffe <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8014ff4:	2100      	movs	r1, #0
 8014ff6:	6978      	ldr	r0, [r7, #20]
 8014ff8:	f7fe f97c 	bl	80132f4 <tcp_abandon>
      return;
 8014ffc:	e006      	b.n	801500c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014ffe:	6978      	ldr	r0, [r7, #20]
 8015000:	f002 f91e 	bl	8017240 <tcp_output>
  return;
 8015004:	e001      	b.n	801500a <tcp_listen_input+0x1be>
    return;
 8015006:	bf00      	nop
 8015008:	e000      	b.n	801500c <tcp_listen_input+0x1c0>
  return;
 801500a:	bf00      	nop
}
 801500c:	371c      	adds	r7, #28
 801500e:	46bd      	mov	sp, r7
 8015010:	bd90      	pop	{r4, r7, pc}
 8015012:	bf00      	nop
 8015014:	2001b058 	.word	0x2001b058
 8015018:	08023428 	.word	0x08023428
 801501c:	08023620 	.word	0x08023620
 8015020:	08023474 	.word	0x08023474
 8015024:	2001b050 	.word	0x2001b050
 8015028:	2001b056 	.word	0x2001b056
 801502c:	2001b04c 	.word	0x2001b04c
 8015030:	2001b03c 	.word	0x2001b03c
 8015034:	20017764 	.word	0x20017764
 8015038:	20017768 	.word	0x20017768
 801503c:	20017754 	.word	0x20017754
 8015040:	2001b020 	.word	0x2001b020
 8015044:	2001b028 	.word	0x2001b028

08015048 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b086      	sub	sp, #24
 801504c:	af04      	add	r7, sp, #16
 801504e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015050:	4b2f      	ldr	r3, [pc, #188]	@ (8015110 <tcp_timewait_input+0xc8>)
 8015052:	781b      	ldrb	r3, [r3, #0]
 8015054:	f003 0304 	and.w	r3, r3, #4
 8015058:	2b00      	cmp	r3, #0
 801505a:	d153      	bne.n	8015104 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d106      	bne.n	8015070 <tcp_timewait_input+0x28>
 8015062:	4b2c      	ldr	r3, [pc, #176]	@ (8015114 <tcp_timewait_input+0xcc>)
 8015064:	f240 22ee 	movw	r2, #750	@ 0x2ee
 8015068:	492b      	ldr	r1, [pc, #172]	@ (8015118 <tcp_timewait_input+0xd0>)
 801506a:	482c      	ldr	r0, [pc, #176]	@ (801511c <tcp_timewait_input+0xd4>)
 801506c:	f009 fb48 	bl	801e700 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015070:	4b27      	ldr	r3, [pc, #156]	@ (8015110 <tcp_timewait_input+0xc8>)
 8015072:	781b      	ldrb	r3, [r3, #0]
 8015074:	f003 0302 	and.w	r3, r3, #2
 8015078:	2b00      	cmp	r3, #0
 801507a:	d02a      	beq.n	80150d2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801507c:	4b28      	ldr	r3, [pc, #160]	@ (8015120 <tcp_timewait_input+0xd8>)
 801507e:	681a      	ldr	r2, [r3, #0]
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015084:	1ad3      	subs	r3, r2, r3
 8015086:	2b00      	cmp	r3, #0
 8015088:	db2d      	blt.n	80150e6 <tcp_timewait_input+0x9e>
 801508a:	4b25      	ldr	r3, [pc, #148]	@ (8015120 <tcp_timewait_input+0xd8>)
 801508c:	681a      	ldr	r2, [r3, #0]
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015092:	6879      	ldr	r1, [r7, #4]
 8015094:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8015096:	440b      	add	r3, r1
 8015098:	1ad3      	subs	r3, r2, r3
 801509a:	2b00      	cmp	r3, #0
 801509c:	dc23      	bgt.n	80150e6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801509e:	4b21      	ldr	r3, [pc, #132]	@ (8015124 <tcp_timewait_input+0xdc>)
 80150a0:	6819      	ldr	r1, [r3, #0]
 80150a2:	4b21      	ldr	r3, [pc, #132]	@ (8015128 <tcp_timewait_input+0xe0>)
 80150a4:	881b      	ldrh	r3, [r3, #0]
 80150a6:	461a      	mov	r2, r3
 80150a8:	4b1d      	ldr	r3, [pc, #116]	@ (8015120 <tcp_timewait_input+0xd8>)
 80150aa:	681b      	ldr	r3, [r3, #0]
 80150ac:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80150ae:	4b1f      	ldr	r3, [pc, #124]	@ (801512c <tcp_timewait_input+0xe4>)
 80150b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150b2:	885b      	ldrh	r3, [r3, #2]
 80150b4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80150b6:	4a1d      	ldr	r2, [pc, #116]	@ (801512c <tcp_timewait_input+0xe4>)
 80150b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80150ba:	8812      	ldrh	r2, [r2, #0]
 80150bc:	b292      	uxth	r2, r2
 80150be:	9202      	str	r2, [sp, #8]
 80150c0:	9301      	str	r3, [sp, #4]
 80150c2:	4b1b      	ldr	r3, [pc, #108]	@ (8015130 <tcp_timewait_input+0xe8>)
 80150c4:	9300      	str	r3, [sp, #0]
 80150c6:	4b1b      	ldr	r3, [pc, #108]	@ (8015134 <tcp_timewait_input+0xec>)
 80150c8:	4602      	mov	r2, r0
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f002 fe6c 	bl	8017da8 <tcp_rst>
      return;
 80150d0:	e01b      	b.n	801510a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80150d2:	4b0f      	ldr	r3, [pc, #60]	@ (8015110 <tcp_timewait_input+0xc8>)
 80150d4:	781b      	ldrb	r3, [r3, #0]
 80150d6:	f003 0301 	and.w	r3, r3, #1
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d003      	beq.n	80150e6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80150de:	4b16      	ldr	r3, [pc, #88]	@ (8015138 <tcp_timewait_input+0xf0>)
 80150e0:	681a      	ldr	r2, [r3, #0]
 80150e2:	687b      	ldr	r3, [r7, #4]
 80150e4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80150e6:	4b10      	ldr	r3, [pc, #64]	@ (8015128 <tcp_timewait_input+0xe0>)
 80150e8:	881b      	ldrh	r3, [r3, #0]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d00c      	beq.n	8015108 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80150ee:	687b      	ldr	r3, [r7, #4]
 80150f0:	8b5b      	ldrh	r3, [r3, #26]
 80150f2:	f043 0302 	orr.w	r3, r3, #2
 80150f6:	b29a      	uxth	r2, r3
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80150fc:	6878      	ldr	r0, [r7, #4]
 80150fe:	f002 f89f 	bl	8017240 <tcp_output>
  }
  return;
 8015102:	e001      	b.n	8015108 <tcp_timewait_input+0xc0>
    return;
 8015104:	bf00      	nop
 8015106:	e000      	b.n	801510a <tcp_timewait_input+0xc2>
  return;
 8015108:	bf00      	nop
}
 801510a:	3708      	adds	r7, #8
 801510c:	46bd      	mov	sp, r7
 801510e:	bd80      	pop	{r7, pc}
 8015110:	2001b058 	.word	0x2001b058
 8015114:	08023428 	.word	0x08023428
 8015118:	08023640 	.word	0x08023640
 801511c:	08023474 	.word	0x08023474
 8015120:	2001b04c 	.word	0x2001b04c
 8015124:	2001b050 	.word	0x2001b050
 8015128:	2001b056 	.word	0x2001b056
 801512c:	2001b03c 	.word	0x2001b03c
 8015130:	20017764 	.word	0x20017764
 8015134:	20017768 	.word	0x20017768
 8015138:	2001b014 	.word	0x2001b014

0801513c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801513c:	b590      	push	{r4, r7, lr}
 801513e:	b08d      	sub	sp, #52	@ 0x34
 8015140:	af04      	add	r7, sp, #16
 8015142:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015144:	2300      	movs	r3, #0
 8015146:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015148:	2300      	movs	r3, #0
 801514a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	2b00      	cmp	r3, #0
 8015150:	d106      	bne.n	8015160 <tcp_process+0x24>
 8015152:	4b9d      	ldr	r3, [pc, #628]	@ (80153c8 <tcp_process+0x28c>)
 8015154:	f44f 7247 	mov.w	r2, #796	@ 0x31c
 8015158:	499c      	ldr	r1, [pc, #624]	@ (80153cc <tcp_process+0x290>)
 801515a:	489d      	ldr	r0, [pc, #628]	@ (80153d0 <tcp_process+0x294>)
 801515c:	f009 fad0 	bl	801e700 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015160:	4b9c      	ldr	r3, [pc, #624]	@ (80153d4 <tcp_process+0x298>)
 8015162:	781b      	ldrb	r3, [r3, #0]
 8015164:	f003 0304 	and.w	r3, r3, #4
 8015168:	2b00      	cmp	r3, #0
 801516a:	d04e      	beq.n	801520a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	7d1b      	ldrb	r3, [r3, #20]
 8015170:	2b02      	cmp	r3, #2
 8015172:	d108      	bne.n	8015186 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015178:	4b97      	ldr	r3, [pc, #604]	@ (80153d8 <tcp_process+0x29c>)
 801517a:	681b      	ldr	r3, [r3, #0]
 801517c:	429a      	cmp	r2, r3
 801517e:	d123      	bne.n	80151c8 <tcp_process+0x8c>
        acceptable = 1;
 8015180:	2301      	movs	r3, #1
 8015182:	76fb      	strb	r3, [r7, #27]
 8015184:	e020      	b.n	80151c8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015186:	687b      	ldr	r3, [r7, #4]
 8015188:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801518a:	4b94      	ldr	r3, [pc, #592]	@ (80153dc <tcp_process+0x2a0>)
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	429a      	cmp	r2, r3
 8015190:	d102      	bne.n	8015198 <tcp_process+0x5c>
        acceptable = 1;
 8015192:	2301      	movs	r3, #1
 8015194:	76fb      	strb	r3, [r7, #27]
 8015196:	e017      	b.n	80151c8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015198:	4b90      	ldr	r3, [pc, #576]	@ (80153dc <tcp_process+0x2a0>)
 801519a:	681a      	ldr	r2, [r3, #0]
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151a0:	1ad3      	subs	r3, r2, r3
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	db10      	blt.n	80151c8 <tcp_process+0x8c>
 80151a6:	4b8d      	ldr	r3, [pc, #564]	@ (80153dc <tcp_process+0x2a0>)
 80151a8:	681a      	ldr	r2, [r3, #0]
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80151ae:	6879      	ldr	r1, [r7, #4]
 80151b0:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80151b2:	440b      	add	r3, r1
 80151b4:	1ad3      	subs	r3, r2, r3
 80151b6:	2b00      	cmp	r3, #0
 80151b8:	dc06      	bgt.n	80151c8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80151ba:	687b      	ldr	r3, [r7, #4]
 80151bc:	8b5b      	ldrh	r3, [r3, #26]
 80151be:	f043 0302 	orr.w	r3, r3, #2
 80151c2:	b29a      	uxth	r2, r3
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80151c8:	7efb      	ldrb	r3, [r7, #27]
 80151ca:	2b00      	cmp	r3, #0
 80151cc:	d01b      	beq.n	8015206 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	7d1b      	ldrb	r3, [r3, #20]
 80151d2:	2b00      	cmp	r3, #0
 80151d4:	d106      	bne.n	80151e4 <tcp_process+0xa8>
 80151d6:	4b7c      	ldr	r3, [pc, #496]	@ (80153c8 <tcp_process+0x28c>)
 80151d8:	f44f 724e 	mov.w	r2, #824	@ 0x338
 80151dc:	4980      	ldr	r1, [pc, #512]	@ (80153e0 <tcp_process+0x2a4>)
 80151de:	487c      	ldr	r0, [pc, #496]	@ (80153d0 <tcp_process+0x294>)
 80151e0:	f009 fa8e 	bl	801e700 <iprintf>
      recv_flags |= TF_RESET;
 80151e4:	4b7f      	ldr	r3, [pc, #508]	@ (80153e4 <tcp_process+0x2a8>)
 80151e6:	781b      	ldrb	r3, [r3, #0]
 80151e8:	f043 0308 	orr.w	r3, r3, #8
 80151ec:	b2da      	uxtb	r2, r3
 80151ee:	4b7d      	ldr	r3, [pc, #500]	@ (80153e4 <tcp_process+0x2a8>)
 80151f0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	8b5b      	ldrh	r3, [r3, #26]
 80151f6:	f023 0301 	bic.w	r3, r3, #1
 80151fa:	b29a      	uxth	r2, r3
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015200:	f06f 030d 	mvn.w	r3, #13
 8015204:	e37a      	b.n	80158fc <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015206:	2300      	movs	r3, #0
 8015208:	e378      	b.n	80158fc <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801520a:	4b72      	ldr	r3, [pc, #456]	@ (80153d4 <tcp_process+0x298>)
 801520c:	781b      	ldrb	r3, [r3, #0]
 801520e:	f003 0302 	and.w	r3, r3, #2
 8015212:	2b00      	cmp	r3, #0
 8015214:	d010      	beq.n	8015238 <tcp_process+0xfc>
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	7d1b      	ldrb	r3, [r3, #20]
 801521a:	2b02      	cmp	r3, #2
 801521c:	d00c      	beq.n	8015238 <tcp_process+0xfc>
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	7d1b      	ldrb	r3, [r3, #20]
 8015222:	2b03      	cmp	r3, #3
 8015224:	d008      	beq.n	8015238 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	8b5b      	ldrh	r3, [r3, #26]
 801522a:	f043 0302 	orr.w	r3, r3, #2
 801522e:	b29a      	uxth	r2, r3
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015234:	2300      	movs	r3, #0
 8015236:	e361      	b.n	80158fc <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015238:	687b      	ldr	r3, [r7, #4]
 801523a:	8b5b      	ldrh	r3, [r3, #26]
 801523c:	f003 0310 	and.w	r3, r3, #16
 8015240:	2b00      	cmp	r3, #0
 8015242:	d103      	bne.n	801524c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015244:	4b68      	ldr	r3, [pc, #416]	@ (80153e8 <tcp_process+0x2ac>)
 8015246:	681a      	ldr	r2, [r3, #0]
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	2200      	movs	r2, #0
 8015250:	f883 209b 	strb.w	r2, [r3, #155]	@ 0x9b
  pcb->persist_probe = 0;
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	2200      	movs	r2, #0
 8015258:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a

  tcp_parseopt(pcb);
 801525c:	6878      	ldr	r0, [r7, #4]
 801525e:	f001 fc2b 	bl	8016ab8 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	7d1b      	ldrb	r3, [r3, #20]
 8015266:	3b02      	subs	r3, #2
 8015268:	2b07      	cmp	r3, #7
 801526a:	f200 8337 	bhi.w	80158dc <tcp_process+0x7a0>
 801526e:	a201      	add	r2, pc, #4	@ (adr r2, 8015274 <tcp_process+0x138>)
 8015270:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015274:	08015295 	.word	0x08015295
 8015278:	080154c5 	.word	0x080154c5
 801527c:	0801563d 	.word	0x0801563d
 8015280:	08015667 	.word	0x08015667
 8015284:	0801578b 	.word	0x0801578b
 8015288:	0801563d 	.word	0x0801563d
 801528c:	08015817 	.word	0x08015817
 8015290:	080158a7 	.word	0x080158a7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015294:	4b4f      	ldr	r3, [pc, #316]	@ (80153d4 <tcp_process+0x298>)
 8015296:	781b      	ldrb	r3, [r3, #0]
 8015298:	f003 0310 	and.w	r3, r3, #16
 801529c:	2b00      	cmp	r3, #0
 801529e:	f000 80e4 	beq.w	801546a <tcp_process+0x32e>
 80152a2:	4b4c      	ldr	r3, [pc, #304]	@ (80153d4 <tcp_process+0x298>)
 80152a4:	781b      	ldrb	r3, [r3, #0]
 80152a6:	f003 0302 	and.w	r3, r3, #2
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	f000 80dd 	beq.w	801546a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80152b4:	1c5a      	adds	r2, r3, #1
 80152b6:	4b48      	ldr	r3, [pc, #288]	@ (80153d8 <tcp_process+0x29c>)
 80152b8:	681b      	ldr	r3, [r3, #0]
 80152ba:	429a      	cmp	r2, r3
 80152bc:	f040 80d5 	bne.w	801546a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 80152c0:	4b46      	ldr	r3, [pc, #280]	@ (80153dc <tcp_process+0x2a0>)
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	1c5a      	adds	r2, r3, #1
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	625a      	str	r2, [r3, #36]	@ 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80152ce:	687b      	ldr	r3, [r7, #4]
 80152d0:	62da      	str	r2, [r3, #44]	@ 0x2c
        pcb->lastack = ackno;
 80152d2:	4b41      	ldr	r3, [pc, #260]	@ (80153d8 <tcp_process+0x29c>)
 80152d4:	681a      	ldr	r2, [r3, #0]
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	645a      	str	r2, [r3, #68]	@ 0x44
        pcb->snd_wnd = tcphdr->wnd;
 80152da:	4b44      	ldr	r3, [pc, #272]	@ (80153ec <tcp_process+0x2b0>)
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	89db      	ldrh	r3, [r3, #14]
 80152e0:	b29a      	uxth	r2, r3
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80152f4:	4b39      	ldr	r3, [pc, #228]	@ (80153dc <tcp_process+0x2a0>)
 80152f6:	681b      	ldr	r3, [r3, #0]
 80152f8:	1e5a      	subs	r2, r3, #1
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	655a      	str	r2, [r3, #84]	@ 0x54
        pcb->state = ESTABLISHED;
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	2204      	movs	r2, #4
 8015302:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	8e5c      	ldrh	r4, [r3, #50]	@ 0x32
 8015308:	687b      	ldr	r3, [r7, #4]
 801530a:	3304      	adds	r3, #4
 801530c:	4618      	mov	r0, r3
 801530e:	f006 fd59 	bl	801bdc4 <ip4_route>
 8015312:	4601      	mov	r1, r0
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	3304      	adds	r3, #4
 8015318:	461a      	mov	r2, r3
 801531a:	4620      	mov	r0, r4
 801531c:	f7ff f88c 	bl	8014438 <tcp_eff_send_mss_netif>
 8015320:	4603      	mov	r3, r0
 8015322:	461a      	mov	r2, r3
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	865a      	strh	r2, [r3, #50]	@ 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801532c:	009a      	lsls	r2, r3, #2
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015332:	005b      	lsls	r3, r3, #1
 8015334:	f241 111c 	movw	r1, #4380	@ 0x111c
 8015338:	428b      	cmp	r3, r1
 801533a:	bf38      	it	cc
 801533c:	460b      	movcc	r3, r1
 801533e:	429a      	cmp	r2, r3
 8015340:	d204      	bcs.n	801534c <tcp_process+0x210>
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015346:	009b      	lsls	r3, r3, #2
 8015348:	b29b      	uxth	r3, r3
 801534a:	e00d      	b.n	8015368 <tcp_process+0x22c>
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015350:	005b      	lsls	r3, r3, #1
 8015352:	f241 121c 	movw	r2, #4380	@ 0x111c
 8015356:	4293      	cmp	r3, r2
 8015358:	d904      	bls.n	8015364 <tcp_process+0x228>
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801535e:	005b      	lsls	r3, r3, #1
 8015360:	b29b      	uxth	r3, r3
 8015362:	e001      	b.n	8015368 <tcp_process+0x22c>
 8015364:	f241 131c 	movw	r3, #4380	@ 0x111c
 8015368:	687a      	ldr	r2, [r7, #4]
 801536a:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801536e:	687b      	ldr	r3, [r7, #4]
 8015370:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015374:	2b00      	cmp	r3, #0
 8015376:	d106      	bne.n	8015386 <tcp_process+0x24a>
 8015378:	4b13      	ldr	r3, [pc, #76]	@ (80153c8 <tcp_process+0x28c>)
 801537a:	f44f 725b 	mov.w	r2, #876	@ 0x36c
 801537e:	491c      	ldr	r1, [pc, #112]	@ (80153f0 <tcp_process+0x2b4>)
 8015380:	4813      	ldr	r0, [pc, #76]	@ (80153d0 <tcp_process+0x294>)
 8015382:	f009 f9bd 	bl	801e700 <iprintf>
        --pcb->snd_queuelen;
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801538c:	3b01      	subs	r3, #1
 801538e:	b29a      	uxth	r2, r3
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015396:	687b      	ldr	r3, [r7, #4]
 8015398:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801539a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801539c:	69fb      	ldr	r3, [r7, #28]
 801539e:	2b00      	cmp	r3, #0
 80153a0:	d12a      	bne.n	80153f8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80153a6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80153a8:	69fb      	ldr	r3, [r7, #28]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d106      	bne.n	80153bc <tcp_process+0x280>
 80153ae:	4b06      	ldr	r3, [pc, #24]	@ (80153c8 <tcp_process+0x28c>)
 80153b0:	f44f 725d 	mov.w	r2, #884	@ 0x374
 80153b4:	490f      	ldr	r1, [pc, #60]	@ (80153f4 <tcp_process+0x2b8>)
 80153b6:	4806      	ldr	r0, [pc, #24]	@ (80153d0 <tcp_process+0x294>)
 80153b8:	f009 f9a2 	bl	801e700 <iprintf>
          pcb->unsent = rseg->next;
 80153bc:	69fb      	ldr	r3, [r7, #28]
 80153be:	681a      	ldr	r2, [r3, #0]
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80153c4:	e01c      	b.n	8015400 <tcp_process+0x2c4>
 80153c6:	bf00      	nop
 80153c8:	08023428 	.word	0x08023428
 80153cc:	08023660 	.word	0x08023660
 80153d0:	08023474 	.word	0x08023474
 80153d4:	2001b058 	.word	0x2001b058
 80153d8:	2001b050 	.word	0x2001b050
 80153dc:	2001b04c 	.word	0x2001b04c
 80153e0:	0802367c 	.word	0x0802367c
 80153e4:	2001b059 	.word	0x2001b059
 80153e8:	2001b014 	.word	0x2001b014
 80153ec:	2001b03c 	.word	0x2001b03c
 80153f0:	0802369c 	.word	0x0802369c
 80153f4:	080236b4 	.word	0x080236b4
        } else {
          pcb->unacked = rseg->next;
 80153f8:	69fb      	ldr	r3, [r7, #28]
 80153fa:	681a      	ldr	r2, [r3, #0]
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	671a      	str	r2, [r3, #112]	@ 0x70
        }
        tcp_seg_free(rseg);
 8015400:	69f8      	ldr	r0, [r7, #28]
 8015402:	f7fe fd22 	bl	8013e4a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801540a:	2b00      	cmp	r3, #0
 801540c:	d104      	bne.n	8015418 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015414:	861a      	strh	r2, [r3, #48]	@ 0x30
 8015416:	e006      	b.n	8015426 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	2200      	movs	r2, #0
 801541c:	861a      	strh	r2, [r3, #48]	@ 0x30
          pcb->nrtx = 0;
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	2200      	movs	r2, #0
 8015422:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801542c:	2b00      	cmp	r3, #0
 801542e:	d00a      	beq.n	8015446 <tcp_process+0x30a>
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015436:	687a      	ldr	r2, [r7, #4]
 8015438:	6910      	ldr	r0, [r2, #16]
 801543a:	2200      	movs	r2, #0
 801543c:	6879      	ldr	r1, [r7, #4]
 801543e:	4798      	blx	r3
 8015440:	4603      	mov	r3, r0
 8015442:	76bb      	strb	r3, [r7, #26]
 8015444:	e001      	b.n	801544a <tcp_process+0x30e>
 8015446:	2300      	movs	r3, #0
 8015448:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801544a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801544e:	f113 0f0d 	cmn.w	r3, #13
 8015452:	d102      	bne.n	801545a <tcp_process+0x31e>
          return ERR_ABRT;
 8015454:	f06f 030c 	mvn.w	r3, #12
 8015458:	e250      	b.n	80158fc <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	8b5b      	ldrh	r3, [r3, #26]
 801545e:	f043 0302 	orr.w	r3, r3, #2
 8015462:	b29a      	uxth	r2, r3
 8015464:	687b      	ldr	r3, [r7, #4]
 8015466:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8015468:	e23a      	b.n	80158e0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801546a:	4b98      	ldr	r3, [pc, #608]	@ (80156cc <tcp_process+0x590>)
 801546c:	781b      	ldrb	r3, [r3, #0]
 801546e:	f003 0310 	and.w	r3, r3, #16
 8015472:	2b00      	cmp	r3, #0
 8015474:	f000 8234 	beq.w	80158e0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015478:	4b95      	ldr	r3, [pc, #596]	@ (80156d0 <tcp_process+0x594>)
 801547a:	6819      	ldr	r1, [r3, #0]
 801547c:	4b95      	ldr	r3, [pc, #596]	@ (80156d4 <tcp_process+0x598>)
 801547e:	881b      	ldrh	r3, [r3, #0]
 8015480:	461a      	mov	r2, r3
 8015482:	4b95      	ldr	r3, [pc, #596]	@ (80156d8 <tcp_process+0x59c>)
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015488:	4b94      	ldr	r3, [pc, #592]	@ (80156dc <tcp_process+0x5a0>)
 801548a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801548c:	885b      	ldrh	r3, [r3, #2]
 801548e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015490:	4a92      	ldr	r2, [pc, #584]	@ (80156dc <tcp_process+0x5a0>)
 8015492:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015494:	8812      	ldrh	r2, [r2, #0]
 8015496:	b292      	uxth	r2, r2
 8015498:	9202      	str	r2, [sp, #8]
 801549a:	9301      	str	r3, [sp, #4]
 801549c:	4b90      	ldr	r3, [pc, #576]	@ (80156e0 <tcp_process+0x5a4>)
 801549e:	9300      	str	r3, [sp, #0]
 80154a0:	4b90      	ldr	r3, [pc, #576]	@ (80156e4 <tcp_process+0x5a8>)
 80154a2:	4602      	mov	r2, r0
 80154a4:	6878      	ldr	r0, [r7, #4]
 80154a6:	f002 fc7f 	bl	8017da8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80154b0:	2b05      	cmp	r3, #5
 80154b2:	f200 8215 	bhi.w	80158e0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80154b6:	687b      	ldr	r3, [r7, #4]
 80154b8:	2200      	movs	r2, #0
 80154ba:	861a      	strh	r2, [r3, #48]	@ 0x30
          tcp_rexmit_rto(pcb);
 80154bc:	6878      	ldr	r0, [r7, #4]
 80154be:	f002 fa4b 	bl	8017958 <tcp_rexmit_rto>
      break;
 80154c2:	e20d      	b.n	80158e0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80154c4:	4b81      	ldr	r3, [pc, #516]	@ (80156cc <tcp_process+0x590>)
 80154c6:	781b      	ldrb	r3, [r3, #0]
 80154c8:	f003 0310 	and.w	r3, r3, #16
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	f000 80a1 	beq.w	8015614 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80154d2:	4b7f      	ldr	r3, [pc, #508]	@ (80156d0 <tcp_process+0x594>)
 80154d4:	681a      	ldr	r2, [r3, #0]
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80154da:	1ad3      	subs	r3, r2, r3
 80154dc:	3b01      	subs	r3, #1
 80154de:	2b00      	cmp	r3, #0
 80154e0:	db7e      	blt.n	80155e0 <tcp_process+0x4a4>
 80154e2:	4b7b      	ldr	r3, [pc, #492]	@ (80156d0 <tcp_process+0x594>)
 80154e4:	681a      	ldr	r2, [r3, #0]
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80154ea:	1ad3      	subs	r3, r2, r3
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	dc77      	bgt.n	80155e0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2204      	movs	r2, #4
 80154f4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d102      	bne.n	8015504 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80154fe:	23fa      	movs	r3, #250	@ 0xfa
 8015500:	76bb      	strb	r3, [r7, #26]
 8015502:	e01d      	b.n	8015540 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015508:	699b      	ldr	r3, [r3, #24]
 801550a:	2b00      	cmp	r3, #0
 801550c:	d106      	bne.n	801551c <tcp_process+0x3e0>
 801550e:	4b76      	ldr	r3, [pc, #472]	@ (80156e8 <tcp_process+0x5ac>)
 8015510:	f44f 726a 	mov.w	r2, #936	@ 0x3a8
 8015514:	4975      	ldr	r1, [pc, #468]	@ (80156ec <tcp_process+0x5b0>)
 8015516:	4876      	ldr	r0, [pc, #472]	@ (80156f0 <tcp_process+0x5b4>)
 8015518:	f009 f8f2 	bl	801e700 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015520:	699b      	ldr	r3, [r3, #24]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d00a      	beq.n	801553c <tcp_process+0x400>
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801552a:	699b      	ldr	r3, [r3, #24]
 801552c:	687a      	ldr	r2, [r7, #4]
 801552e:	6910      	ldr	r0, [r2, #16]
 8015530:	2200      	movs	r2, #0
 8015532:	6879      	ldr	r1, [r7, #4]
 8015534:	4798      	blx	r3
 8015536:	4603      	mov	r3, r0
 8015538:	76bb      	strb	r3, [r7, #26]
 801553a:	e001      	b.n	8015540 <tcp_process+0x404>
 801553c:	23f0      	movs	r3, #240	@ 0xf0
 801553e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8015540:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d00a      	beq.n	801555e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8015548:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801554c:	f113 0f0d 	cmn.w	r3, #13
 8015550:	d002      	beq.n	8015558 <tcp_process+0x41c>
              tcp_abort(pcb);
 8015552:	6878      	ldr	r0, [r7, #4]
 8015554:	f7fd ff8c 	bl	8013470 <tcp_abort>
            }
            return ERR_ABRT;
 8015558:	f06f 030c 	mvn.w	r3, #12
 801555c:	e1ce      	b.n	80158fc <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801555e:	6878      	ldr	r0, [r7, #4]
 8015560:	f000 fae0 	bl	8015b24 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8015564:	4b63      	ldr	r3, [pc, #396]	@ (80156f4 <tcp_process+0x5b8>)
 8015566:	881b      	ldrh	r3, [r3, #0]
 8015568:	2b00      	cmp	r3, #0
 801556a:	d005      	beq.n	8015578 <tcp_process+0x43c>
            recv_acked--;
 801556c:	4b61      	ldr	r3, [pc, #388]	@ (80156f4 <tcp_process+0x5b8>)
 801556e:	881b      	ldrh	r3, [r3, #0]
 8015570:	3b01      	subs	r3, #1
 8015572:	b29a      	uxth	r2, r3
 8015574:	4b5f      	ldr	r3, [pc, #380]	@ (80156f4 <tcp_process+0x5b8>)
 8015576:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 801557c:	009a      	lsls	r2, r3, #2
 801557e:	687b      	ldr	r3, [r7, #4]
 8015580:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015582:	005b      	lsls	r3, r3, #1
 8015584:	f241 111c 	movw	r1, #4380	@ 0x111c
 8015588:	428b      	cmp	r3, r1
 801558a:	bf38      	it	cc
 801558c:	460b      	movcc	r3, r1
 801558e:	429a      	cmp	r2, r3
 8015590:	d204      	bcs.n	801559c <tcp_process+0x460>
 8015592:	687b      	ldr	r3, [r7, #4]
 8015594:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015596:	009b      	lsls	r3, r3, #2
 8015598:	b29b      	uxth	r3, r3
 801559a:	e00d      	b.n	80155b8 <tcp_process+0x47c>
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80155a0:	005b      	lsls	r3, r3, #1
 80155a2:	f241 121c 	movw	r2, #4380	@ 0x111c
 80155a6:	4293      	cmp	r3, r2
 80155a8:	d904      	bls.n	80155b4 <tcp_process+0x478>
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80155ae:	005b      	lsls	r3, r3, #1
 80155b0:	b29b      	uxth	r3, r3
 80155b2:	e001      	b.n	80155b8 <tcp_process+0x47c>
 80155b4:	f241 131c 	movw	r3, #4380	@ 0x111c
 80155b8:	687a      	ldr	r2, [r7, #4]
 80155ba:	f8a2 3048 	strh.w	r3, [r2, #72]	@ 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80155be:	4b4e      	ldr	r3, [pc, #312]	@ (80156f8 <tcp_process+0x5bc>)
 80155c0:	781b      	ldrb	r3, [r3, #0]
 80155c2:	f003 0320 	and.w	r3, r3, #32
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d037      	beq.n	801563a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80155ca:	687b      	ldr	r3, [r7, #4]
 80155cc:	8b5b      	ldrh	r3, [r3, #26]
 80155ce:	f043 0302 	orr.w	r3, r3, #2
 80155d2:	b29a      	uxth	r2, r3
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	2207      	movs	r2, #7
 80155dc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80155de:	e02c      	b.n	801563a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80155e0:	4b3b      	ldr	r3, [pc, #236]	@ (80156d0 <tcp_process+0x594>)
 80155e2:	6819      	ldr	r1, [r3, #0]
 80155e4:	4b3b      	ldr	r3, [pc, #236]	@ (80156d4 <tcp_process+0x598>)
 80155e6:	881b      	ldrh	r3, [r3, #0]
 80155e8:	461a      	mov	r2, r3
 80155ea:	4b3b      	ldr	r3, [pc, #236]	@ (80156d8 <tcp_process+0x59c>)
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80155f0:	4b3a      	ldr	r3, [pc, #232]	@ (80156dc <tcp_process+0x5a0>)
 80155f2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80155f4:	885b      	ldrh	r3, [r3, #2]
 80155f6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80155f8:	4a38      	ldr	r2, [pc, #224]	@ (80156dc <tcp_process+0x5a0>)
 80155fa:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80155fc:	8812      	ldrh	r2, [r2, #0]
 80155fe:	b292      	uxth	r2, r2
 8015600:	9202      	str	r2, [sp, #8]
 8015602:	9301      	str	r3, [sp, #4]
 8015604:	4b36      	ldr	r3, [pc, #216]	@ (80156e0 <tcp_process+0x5a4>)
 8015606:	9300      	str	r3, [sp, #0]
 8015608:	4b36      	ldr	r3, [pc, #216]	@ (80156e4 <tcp_process+0x5a8>)
 801560a:	4602      	mov	r2, r0
 801560c:	6878      	ldr	r0, [r7, #4]
 801560e:	f002 fbcb 	bl	8017da8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8015612:	e167      	b.n	80158e4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8015614:	4b2d      	ldr	r3, [pc, #180]	@ (80156cc <tcp_process+0x590>)
 8015616:	781b      	ldrb	r3, [r3, #0]
 8015618:	f003 0302 	and.w	r3, r3, #2
 801561c:	2b00      	cmp	r3, #0
 801561e:	f000 8161 	beq.w	80158e4 <tcp_process+0x7a8>
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015626:	1e5a      	subs	r2, r3, #1
 8015628:	4b2b      	ldr	r3, [pc, #172]	@ (80156d8 <tcp_process+0x59c>)
 801562a:	681b      	ldr	r3, [r3, #0]
 801562c:	429a      	cmp	r2, r3
 801562e:	f040 8159 	bne.w	80158e4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8015632:	6878      	ldr	r0, [r7, #4]
 8015634:	f002 f9b2 	bl	801799c <tcp_rexmit>
      break;
 8015638:	e154      	b.n	80158e4 <tcp_process+0x7a8>
 801563a:	e153      	b.n	80158e4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801563c:	6878      	ldr	r0, [r7, #4]
 801563e:	f000 fa71 	bl	8015b24 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8015642:	4b2d      	ldr	r3, [pc, #180]	@ (80156f8 <tcp_process+0x5bc>)
 8015644:	781b      	ldrb	r3, [r3, #0]
 8015646:	f003 0320 	and.w	r3, r3, #32
 801564a:	2b00      	cmp	r3, #0
 801564c:	f000 814c 	beq.w	80158e8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	8b5b      	ldrh	r3, [r3, #26]
 8015654:	f043 0302 	orr.w	r3, r3, #2
 8015658:	b29a      	uxth	r2, r3
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	2207      	movs	r2, #7
 8015662:	751a      	strb	r2, [r3, #20]
      }
      break;
 8015664:	e140      	b.n	80158e8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8015666:	6878      	ldr	r0, [r7, #4]
 8015668:	f000 fa5c 	bl	8015b24 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801566c:	4b22      	ldr	r3, [pc, #136]	@ (80156f8 <tcp_process+0x5bc>)
 801566e:	781b      	ldrb	r3, [r3, #0]
 8015670:	f003 0320 	and.w	r3, r3, #32
 8015674:	2b00      	cmp	r3, #0
 8015676:	d071      	beq.n	801575c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015678:	4b14      	ldr	r3, [pc, #80]	@ (80156cc <tcp_process+0x590>)
 801567a:	781b      	ldrb	r3, [r3, #0]
 801567c:	f003 0310 	and.w	r3, r3, #16
 8015680:	2b00      	cmp	r3, #0
 8015682:	d060      	beq.n	8015746 <tcp_process+0x60a>
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8015688:	4b11      	ldr	r3, [pc, #68]	@ (80156d0 <tcp_process+0x594>)
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	429a      	cmp	r2, r3
 801568e:	d15a      	bne.n	8015746 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8015690:	687b      	ldr	r3, [r7, #4]
 8015692:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8015694:	2b00      	cmp	r3, #0
 8015696:	d156      	bne.n	8015746 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	8b5b      	ldrh	r3, [r3, #26]
 801569c:	f043 0302 	orr.w	r3, r3, #2
 80156a0:	b29a      	uxth	r2, r3
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80156a6:	6878      	ldr	r0, [r7, #4]
 80156a8:	f7fe fdbc 	bl	8014224 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80156ac:	4b13      	ldr	r3, [pc, #76]	@ (80156fc <tcp_process+0x5c0>)
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	687a      	ldr	r2, [r7, #4]
 80156b2:	429a      	cmp	r2, r3
 80156b4:	d105      	bne.n	80156c2 <tcp_process+0x586>
 80156b6:	4b11      	ldr	r3, [pc, #68]	@ (80156fc <tcp_process+0x5c0>)
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	68db      	ldr	r3, [r3, #12]
 80156bc:	4a0f      	ldr	r2, [pc, #60]	@ (80156fc <tcp_process+0x5c0>)
 80156be:	6013      	str	r3, [r2, #0]
 80156c0:	e02e      	b.n	8015720 <tcp_process+0x5e4>
 80156c2:	4b0e      	ldr	r3, [pc, #56]	@ (80156fc <tcp_process+0x5c0>)
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	617b      	str	r3, [r7, #20]
 80156c8:	e027      	b.n	801571a <tcp_process+0x5de>
 80156ca:	bf00      	nop
 80156cc:	2001b058 	.word	0x2001b058
 80156d0:	2001b050 	.word	0x2001b050
 80156d4:	2001b056 	.word	0x2001b056
 80156d8:	2001b04c 	.word	0x2001b04c
 80156dc:	2001b03c 	.word	0x2001b03c
 80156e0:	20017764 	.word	0x20017764
 80156e4:	20017768 	.word	0x20017768
 80156e8:	08023428 	.word	0x08023428
 80156ec:	080236c8 	.word	0x080236c8
 80156f0:	08023474 	.word	0x08023474
 80156f4:	2001b054 	.word	0x2001b054
 80156f8:	2001b059 	.word	0x2001b059
 80156fc:	2001b020 	.word	0x2001b020
 8015700:	697b      	ldr	r3, [r7, #20]
 8015702:	68db      	ldr	r3, [r3, #12]
 8015704:	687a      	ldr	r2, [r7, #4]
 8015706:	429a      	cmp	r2, r3
 8015708:	d104      	bne.n	8015714 <tcp_process+0x5d8>
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	68da      	ldr	r2, [r3, #12]
 801570e:	697b      	ldr	r3, [r7, #20]
 8015710:	60da      	str	r2, [r3, #12]
 8015712:	e005      	b.n	8015720 <tcp_process+0x5e4>
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	68db      	ldr	r3, [r3, #12]
 8015718:	617b      	str	r3, [r7, #20]
 801571a:	697b      	ldr	r3, [r7, #20]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d1ef      	bne.n	8015700 <tcp_process+0x5c4>
 8015720:	687b      	ldr	r3, [r7, #4]
 8015722:	2200      	movs	r2, #0
 8015724:	60da      	str	r2, [r3, #12]
 8015726:	4b77      	ldr	r3, [pc, #476]	@ (8015904 <tcp_process+0x7c8>)
 8015728:	2201      	movs	r2, #1
 801572a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	220a      	movs	r2, #10
 8015730:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8015732:	4b75      	ldr	r3, [pc, #468]	@ (8015908 <tcp_process+0x7cc>)
 8015734:	681a      	ldr	r2, [r3, #0]
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	60da      	str	r2, [r3, #12]
 801573a:	4a73      	ldr	r2, [pc, #460]	@ (8015908 <tcp_process+0x7cc>)
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	6013      	str	r3, [r2, #0]
 8015740:	f002 fcf4 	bl	801812c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8015744:	e0d2      	b.n	80158ec <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	8b5b      	ldrh	r3, [r3, #26]
 801574a:	f043 0302 	orr.w	r3, r3, #2
 801574e:	b29a      	uxth	r2, r3
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	2208      	movs	r2, #8
 8015758:	751a      	strb	r2, [r3, #20]
      break;
 801575a:	e0c7      	b.n	80158ec <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801575c:	4b6b      	ldr	r3, [pc, #428]	@ (801590c <tcp_process+0x7d0>)
 801575e:	781b      	ldrb	r3, [r3, #0]
 8015760:	f003 0310 	and.w	r3, r3, #16
 8015764:	2b00      	cmp	r3, #0
 8015766:	f000 80c1 	beq.w	80158ec <tcp_process+0x7b0>
 801576a:	687b      	ldr	r3, [r7, #4]
 801576c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801576e:	4b68      	ldr	r3, [pc, #416]	@ (8015910 <tcp_process+0x7d4>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	429a      	cmp	r2, r3
 8015774:	f040 80ba 	bne.w	80158ec <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801577c:	2b00      	cmp	r3, #0
 801577e:	f040 80b5 	bne.w	80158ec <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	2206      	movs	r2, #6
 8015786:	751a      	strb	r2, [r3, #20]
      break;
 8015788:	e0b0      	b.n	80158ec <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801578a:	6878      	ldr	r0, [r7, #4]
 801578c:	f000 f9ca 	bl	8015b24 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8015790:	4b60      	ldr	r3, [pc, #384]	@ (8015914 <tcp_process+0x7d8>)
 8015792:	781b      	ldrb	r3, [r3, #0]
 8015794:	f003 0320 	and.w	r3, r3, #32
 8015798:	2b00      	cmp	r3, #0
 801579a:	f000 80a9 	beq.w	80158f0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	8b5b      	ldrh	r3, [r3, #26]
 80157a2:	f043 0302 	orr.w	r3, r3, #2
 80157a6:	b29a      	uxth	r2, r3
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80157ac:	6878      	ldr	r0, [r7, #4]
 80157ae:	f7fe fd39 	bl	8014224 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80157b2:	4b59      	ldr	r3, [pc, #356]	@ (8015918 <tcp_process+0x7dc>)
 80157b4:	681b      	ldr	r3, [r3, #0]
 80157b6:	687a      	ldr	r2, [r7, #4]
 80157b8:	429a      	cmp	r2, r3
 80157ba:	d105      	bne.n	80157c8 <tcp_process+0x68c>
 80157bc:	4b56      	ldr	r3, [pc, #344]	@ (8015918 <tcp_process+0x7dc>)
 80157be:	681b      	ldr	r3, [r3, #0]
 80157c0:	68db      	ldr	r3, [r3, #12]
 80157c2:	4a55      	ldr	r2, [pc, #340]	@ (8015918 <tcp_process+0x7dc>)
 80157c4:	6013      	str	r3, [r2, #0]
 80157c6:	e013      	b.n	80157f0 <tcp_process+0x6b4>
 80157c8:	4b53      	ldr	r3, [pc, #332]	@ (8015918 <tcp_process+0x7dc>)
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	613b      	str	r3, [r7, #16]
 80157ce:	e00c      	b.n	80157ea <tcp_process+0x6ae>
 80157d0:	693b      	ldr	r3, [r7, #16]
 80157d2:	68db      	ldr	r3, [r3, #12]
 80157d4:	687a      	ldr	r2, [r7, #4]
 80157d6:	429a      	cmp	r2, r3
 80157d8:	d104      	bne.n	80157e4 <tcp_process+0x6a8>
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	68da      	ldr	r2, [r3, #12]
 80157de:	693b      	ldr	r3, [r7, #16]
 80157e0:	60da      	str	r2, [r3, #12]
 80157e2:	e005      	b.n	80157f0 <tcp_process+0x6b4>
 80157e4:	693b      	ldr	r3, [r7, #16]
 80157e6:	68db      	ldr	r3, [r3, #12]
 80157e8:	613b      	str	r3, [r7, #16]
 80157ea:	693b      	ldr	r3, [r7, #16]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d1ef      	bne.n	80157d0 <tcp_process+0x694>
 80157f0:	687b      	ldr	r3, [r7, #4]
 80157f2:	2200      	movs	r2, #0
 80157f4:	60da      	str	r2, [r3, #12]
 80157f6:	4b43      	ldr	r3, [pc, #268]	@ (8015904 <tcp_process+0x7c8>)
 80157f8:	2201      	movs	r2, #1
 80157fa:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	220a      	movs	r2, #10
 8015800:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015802:	4b41      	ldr	r3, [pc, #260]	@ (8015908 <tcp_process+0x7cc>)
 8015804:	681a      	ldr	r2, [r3, #0]
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	60da      	str	r2, [r3, #12]
 801580a:	4a3f      	ldr	r2, [pc, #252]	@ (8015908 <tcp_process+0x7cc>)
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	6013      	str	r3, [r2, #0]
 8015810:	f002 fc8c 	bl	801812c <tcp_timer_needed>
      }
      break;
 8015814:	e06c      	b.n	80158f0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8015816:	6878      	ldr	r0, [r7, #4]
 8015818:	f000 f984 	bl	8015b24 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801581c:	4b3b      	ldr	r3, [pc, #236]	@ (801590c <tcp_process+0x7d0>)
 801581e:	781b      	ldrb	r3, [r3, #0]
 8015820:	f003 0310 	and.w	r3, r3, #16
 8015824:	2b00      	cmp	r3, #0
 8015826:	d065      	beq.n	80158f4 <tcp_process+0x7b8>
 8015828:	687b      	ldr	r3, [r7, #4]
 801582a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801582c:	4b38      	ldr	r3, [pc, #224]	@ (8015910 <tcp_process+0x7d4>)
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	429a      	cmp	r2, r3
 8015832:	d15f      	bne.n	80158f4 <tcp_process+0x7b8>
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015838:	2b00      	cmp	r3, #0
 801583a:	d15b      	bne.n	80158f4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801583c:	6878      	ldr	r0, [r7, #4]
 801583e:	f7fe fcf1 	bl	8014224 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8015842:	4b35      	ldr	r3, [pc, #212]	@ (8015918 <tcp_process+0x7dc>)
 8015844:	681b      	ldr	r3, [r3, #0]
 8015846:	687a      	ldr	r2, [r7, #4]
 8015848:	429a      	cmp	r2, r3
 801584a:	d105      	bne.n	8015858 <tcp_process+0x71c>
 801584c:	4b32      	ldr	r3, [pc, #200]	@ (8015918 <tcp_process+0x7dc>)
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	68db      	ldr	r3, [r3, #12]
 8015852:	4a31      	ldr	r2, [pc, #196]	@ (8015918 <tcp_process+0x7dc>)
 8015854:	6013      	str	r3, [r2, #0]
 8015856:	e013      	b.n	8015880 <tcp_process+0x744>
 8015858:	4b2f      	ldr	r3, [pc, #188]	@ (8015918 <tcp_process+0x7dc>)
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	60fb      	str	r3, [r7, #12]
 801585e:	e00c      	b.n	801587a <tcp_process+0x73e>
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	68db      	ldr	r3, [r3, #12]
 8015864:	687a      	ldr	r2, [r7, #4]
 8015866:	429a      	cmp	r2, r3
 8015868:	d104      	bne.n	8015874 <tcp_process+0x738>
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	68da      	ldr	r2, [r3, #12]
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	60da      	str	r2, [r3, #12]
 8015872:	e005      	b.n	8015880 <tcp_process+0x744>
 8015874:	68fb      	ldr	r3, [r7, #12]
 8015876:	68db      	ldr	r3, [r3, #12]
 8015878:	60fb      	str	r3, [r7, #12]
 801587a:	68fb      	ldr	r3, [r7, #12]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d1ef      	bne.n	8015860 <tcp_process+0x724>
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	2200      	movs	r2, #0
 8015884:	60da      	str	r2, [r3, #12]
 8015886:	4b1f      	ldr	r3, [pc, #124]	@ (8015904 <tcp_process+0x7c8>)
 8015888:	2201      	movs	r2, #1
 801588a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	220a      	movs	r2, #10
 8015890:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8015892:	4b1d      	ldr	r3, [pc, #116]	@ (8015908 <tcp_process+0x7cc>)
 8015894:	681a      	ldr	r2, [r3, #0]
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	60da      	str	r2, [r3, #12]
 801589a:	4a1b      	ldr	r2, [pc, #108]	@ (8015908 <tcp_process+0x7cc>)
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	6013      	str	r3, [r2, #0]
 80158a0:	f002 fc44 	bl	801812c <tcp_timer_needed>
      }
      break;
 80158a4:	e026      	b.n	80158f4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80158a6:	6878      	ldr	r0, [r7, #4]
 80158a8:	f000 f93c 	bl	8015b24 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80158ac:	4b17      	ldr	r3, [pc, #92]	@ (801590c <tcp_process+0x7d0>)
 80158ae:	781b      	ldrb	r3, [r3, #0]
 80158b0:	f003 0310 	and.w	r3, r3, #16
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d01f      	beq.n	80158f8 <tcp_process+0x7bc>
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80158bc:	4b14      	ldr	r3, [pc, #80]	@ (8015910 <tcp_process+0x7d4>)
 80158be:	681b      	ldr	r3, [r3, #0]
 80158c0:	429a      	cmp	r2, r3
 80158c2:	d119      	bne.n	80158f8 <tcp_process+0x7bc>
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d115      	bne.n	80158f8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80158cc:	4b11      	ldr	r3, [pc, #68]	@ (8015914 <tcp_process+0x7d8>)
 80158ce:	781b      	ldrb	r3, [r3, #0]
 80158d0:	f043 0310 	orr.w	r3, r3, #16
 80158d4:	b2da      	uxtb	r2, r3
 80158d6:	4b0f      	ldr	r3, [pc, #60]	@ (8015914 <tcp_process+0x7d8>)
 80158d8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80158da:	e00d      	b.n	80158f8 <tcp_process+0x7bc>
    default:
      break;
 80158dc:	bf00      	nop
 80158de:	e00c      	b.n	80158fa <tcp_process+0x7be>
      break;
 80158e0:	bf00      	nop
 80158e2:	e00a      	b.n	80158fa <tcp_process+0x7be>
      break;
 80158e4:	bf00      	nop
 80158e6:	e008      	b.n	80158fa <tcp_process+0x7be>
      break;
 80158e8:	bf00      	nop
 80158ea:	e006      	b.n	80158fa <tcp_process+0x7be>
      break;
 80158ec:	bf00      	nop
 80158ee:	e004      	b.n	80158fa <tcp_process+0x7be>
      break;
 80158f0:	bf00      	nop
 80158f2:	e002      	b.n	80158fa <tcp_process+0x7be>
      break;
 80158f4:	bf00      	nop
 80158f6:	e000      	b.n	80158fa <tcp_process+0x7be>
      break;
 80158f8:	bf00      	nop
  }
  return ERR_OK;
 80158fa:	2300      	movs	r3, #0
}
 80158fc:	4618      	mov	r0, r3
 80158fe:	3724      	adds	r7, #36	@ 0x24
 8015900:	46bd      	mov	sp, r7
 8015902:	bd90      	pop	{r4, r7, pc}
 8015904:	2001b028 	.word	0x2001b028
 8015908:	2001b024 	.word	0x2001b024
 801590c:	2001b058 	.word	0x2001b058
 8015910:	2001b050 	.word	0x2001b050
 8015914:	2001b059 	.word	0x2001b059
 8015918:	2001b020 	.word	0x2001b020

0801591c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801591c:	b590      	push	{r4, r7, lr}
 801591e:	b085      	sub	sp, #20
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
 8015924:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	2b00      	cmp	r3, #0
 801592a:	d106      	bne.n	801593a <tcp_oos_insert_segment+0x1e>
 801592c:	4b3b      	ldr	r3, [pc, #236]	@ (8015a1c <tcp_oos_insert_segment+0x100>)
 801592e:	f240 421f 	movw	r2, #1055	@ 0x41f
 8015932:	493b      	ldr	r1, [pc, #236]	@ (8015a20 <tcp_oos_insert_segment+0x104>)
 8015934:	483b      	ldr	r0, [pc, #236]	@ (8015a24 <tcp_oos_insert_segment+0x108>)
 8015936:	f008 fee3 	bl	801e700 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801593a:	687b      	ldr	r3, [r7, #4]
 801593c:	68db      	ldr	r3, [r3, #12]
 801593e:	899b      	ldrh	r3, [r3, #12]
 8015940:	b29b      	uxth	r3, r3
 8015942:	4618      	mov	r0, r3
 8015944:	f7fa ffaa 	bl	801089c <lwip_htons>
 8015948:	4603      	mov	r3, r0
 801594a:	b2db      	uxtb	r3, r3
 801594c:	f003 0301 	and.w	r3, r3, #1
 8015950:	2b00      	cmp	r3, #0
 8015952:	d028      	beq.n	80159a6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8015954:	6838      	ldr	r0, [r7, #0]
 8015956:	f7fe fa63 	bl	8013e20 <tcp_segs_free>
    next = NULL;
 801595a:	2300      	movs	r3, #0
 801595c:	603b      	str	r3, [r7, #0]
 801595e:	e056      	b.n	8015a0e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015960:	683b      	ldr	r3, [r7, #0]
 8015962:	68db      	ldr	r3, [r3, #12]
 8015964:	899b      	ldrh	r3, [r3, #12]
 8015966:	b29b      	uxth	r3, r3
 8015968:	4618      	mov	r0, r3
 801596a:	f7fa ff97 	bl	801089c <lwip_htons>
 801596e:	4603      	mov	r3, r0
 8015970:	b2db      	uxtb	r3, r3
 8015972:	f003 0301 	and.w	r3, r3, #1
 8015976:	2b00      	cmp	r3, #0
 8015978:	d00d      	beq.n	8015996 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	68db      	ldr	r3, [r3, #12]
 801597e:	899b      	ldrh	r3, [r3, #12]
 8015980:	b29c      	uxth	r4, r3
 8015982:	2001      	movs	r0, #1
 8015984:	f7fa ff8a 	bl	801089c <lwip_htons>
 8015988:	4603      	mov	r3, r0
 801598a:	461a      	mov	r2, r3
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	68db      	ldr	r3, [r3, #12]
 8015990:	4322      	orrs	r2, r4
 8015992:	b292      	uxth	r2, r2
 8015994:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8015996:	683b      	ldr	r3, [r7, #0]
 8015998:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801599a:	683b      	ldr	r3, [r7, #0]
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80159a0:	68f8      	ldr	r0, [r7, #12]
 80159a2:	f7fe fa52 	bl	8013e4a <tcp_seg_free>
    while (next &&
 80159a6:	683b      	ldr	r3, [r7, #0]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d00e      	beq.n	80159ca <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	891b      	ldrh	r3, [r3, #8]
 80159b0:	461a      	mov	r2, r3
 80159b2:	4b1d      	ldr	r3, [pc, #116]	@ (8015a28 <tcp_oos_insert_segment+0x10c>)
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	441a      	add	r2, r3
 80159b8:	683b      	ldr	r3, [r7, #0]
 80159ba:	68db      	ldr	r3, [r3, #12]
 80159bc:	685b      	ldr	r3, [r3, #4]
 80159be:	6839      	ldr	r1, [r7, #0]
 80159c0:	8909      	ldrh	r1, [r1, #8]
 80159c2:	440b      	add	r3, r1
 80159c4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	daca      	bge.n	8015960 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80159ca:	683b      	ldr	r3, [r7, #0]
 80159cc:	2b00      	cmp	r3, #0
 80159ce:	d01e      	beq.n	8015a0e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	891b      	ldrh	r3, [r3, #8]
 80159d4:	461a      	mov	r2, r3
 80159d6:	4b14      	ldr	r3, [pc, #80]	@ (8015a28 <tcp_oos_insert_segment+0x10c>)
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	441a      	add	r2, r3
 80159dc:	683b      	ldr	r3, [r7, #0]
 80159de:	68db      	ldr	r3, [r3, #12]
 80159e0:	685b      	ldr	r3, [r3, #4]
 80159e2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	dd12      	ble.n	8015a0e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80159e8:	683b      	ldr	r3, [r7, #0]
 80159ea:	68db      	ldr	r3, [r3, #12]
 80159ec:	685b      	ldr	r3, [r3, #4]
 80159ee:	b29a      	uxth	r2, r3
 80159f0:	4b0d      	ldr	r3, [pc, #52]	@ (8015a28 <tcp_oos_insert_segment+0x10c>)
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	b29b      	uxth	r3, r3
 80159f6:	1ad3      	subs	r3, r2, r3
 80159f8:	b29a      	uxth	r2, r3
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	685a      	ldr	r2, [r3, #4]
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	891b      	ldrh	r3, [r3, #8]
 8015a06:	4619      	mov	r1, r3
 8015a08:	4610      	mov	r0, r2
 8015a0a:	f7fc fcad 	bl	8012368 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	683a      	ldr	r2, [r7, #0]
 8015a12:	601a      	str	r2, [r3, #0]
}
 8015a14:	bf00      	nop
 8015a16:	3714      	adds	r7, #20
 8015a18:	46bd      	mov	sp, r7
 8015a1a:	bd90      	pop	{r4, r7, pc}
 8015a1c:	08023428 	.word	0x08023428
 8015a20:	080236e8 	.word	0x080236e8
 8015a24:	08023474 	.word	0x08023474
 8015a28:	2001b04c 	.word	0x2001b04c

08015a2c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8015a2c:	b5b0      	push	{r4, r5, r7, lr}
 8015a2e:	b086      	sub	sp, #24
 8015a30:	af00      	add	r7, sp, #0
 8015a32:	60f8      	str	r0, [r7, #12]
 8015a34:	60b9      	str	r1, [r7, #8]
 8015a36:	607a      	str	r2, [r7, #4]
 8015a38:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8015a3a:	e03e      	b.n	8015aba <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8015a3c:	68bb      	ldr	r3, [r7, #8]
 8015a3e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8015a40:	68bb      	ldr	r3, [r7, #8]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8015a46:	697b      	ldr	r3, [r7, #20]
 8015a48:	685b      	ldr	r3, [r3, #4]
 8015a4a:	4618      	mov	r0, r3
 8015a4c:	f7fc fea0 	bl	8012790 <pbuf_clen>
 8015a50:	4603      	mov	r3, r0
 8015a52:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8015a54:	68fb      	ldr	r3, [r7, #12]
 8015a56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015a5a:	8a7a      	ldrh	r2, [r7, #18]
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	d906      	bls.n	8015a6e <tcp_free_acked_segments+0x42>
 8015a60:	4b2a      	ldr	r3, [pc, #168]	@ (8015b0c <tcp_free_acked_segments+0xe0>)
 8015a62:	f240 4257 	movw	r2, #1111	@ 0x457
 8015a66:	492a      	ldr	r1, [pc, #168]	@ (8015b10 <tcp_free_acked_segments+0xe4>)
 8015a68:	482a      	ldr	r0, [pc, #168]	@ (8015b14 <tcp_free_acked_segments+0xe8>)
 8015a6a:	f008 fe49 	bl	801e700 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8015a6e:	68fb      	ldr	r3, [r7, #12]
 8015a70:	f8b3 2066 	ldrh.w	r2, [r3, #102]	@ 0x66
 8015a74:	8a7b      	ldrh	r3, [r7, #18]
 8015a76:	1ad3      	subs	r3, r2, r3
 8015a78:	b29a      	uxth	r2, r3
 8015a7a:	68fb      	ldr	r3, [r7, #12]
 8015a7c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8015a80:	697b      	ldr	r3, [r7, #20]
 8015a82:	891a      	ldrh	r2, [r3, #8]
 8015a84:	4b24      	ldr	r3, [pc, #144]	@ (8015b18 <tcp_free_acked_segments+0xec>)
 8015a86:	881b      	ldrh	r3, [r3, #0]
 8015a88:	4413      	add	r3, r2
 8015a8a:	b29a      	uxth	r2, r3
 8015a8c:	4b22      	ldr	r3, [pc, #136]	@ (8015b18 <tcp_free_acked_segments+0xec>)
 8015a8e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8015a90:	6978      	ldr	r0, [r7, #20]
 8015a92:	f7fe f9da 	bl	8013e4a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8015a96:	68fb      	ldr	r3, [r7, #12]
 8015a98:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	d00c      	beq.n	8015aba <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8015aa0:	68bb      	ldr	r3, [r7, #8]
 8015aa2:	2b00      	cmp	r3, #0
 8015aa4:	d109      	bne.n	8015aba <tcp_free_acked_segments+0x8e>
 8015aa6:	683b      	ldr	r3, [r7, #0]
 8015aa8:	2b00      	cmp	r3, #0
 8015aaa:	d106      	bne.n	8015aba <tcp_free_acked_segments+0x8e>
 8015aac:	4b17      	ldr	r3, [pc, #92]	@ (8015b0c <tcp_free_acked_segments+0xe0>)
 8015aae:	f240 4261 	movw	r2, #1121	@ 0x461
 8015ab2:	491a      	ldr	r1, [pc, #104]	@ (8015b1c <tcp_free_acked_segments+0xf0>)
 8015ab4:	4817      	ldr	r0, [pc, #92]	@ (8015b14 <tcp_free_acked_segments+0xe8>)
 8015ab6:	f008 fe23 	bl	801e700 <iprintf>
  while (seg_list != NULL &&
 8015aba:	68bb      	ldr	r3, [r7, #8]
 8015abc:	2b00      	cmp	r3, #0
 8015abe:	d020      	beq.n	8015b02 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8015ac0:	68bb      	ldr	r3, [r7, #8]
 8015ac2:	68db      	ldr	r3, [r3, #12]
 8015ac4:	685b      	ldr	r3, [r3, #4]
 8015ac6:	4618      	mov	r0, r3
 8015ac8:	f7fa fefd 	bl	80108c6 <lwip_htonl>
 8015acc:	4604      	mov	r4, r0
 8015ace:	68bb      	ldr	r3, [r7, #8]
 8015ad0:	891b      	ldrh	r3, [r3, #8]
 8015ad2:	461d      	mov	r5, r3
 8015ad4:	68bb      	ldr	r3, [r7, #8]
 8015ad6:	68db      	ldr	r3, [r3, #12]
 8015ad8:	899b      	ldrh	r3, [r3, #12]
 8015ada:	b29b      	uxth	r3, r3
 8015adc:	4618      	mov	r0, r3
 8015ade:	f7fa fedd 	bl	801089c <lwip_htons>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	b2db      	uxtb	r3, r3
 8015ae6:	f003 0303 	and.w	r3, r3, #3
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d001      	beq.n	8015af2 <tcp_free_acked_segments+0xc6>
 8015aee:	2301      	movs	r3, #1
 8015af0:	e000      	b.n	8015af4 <tcp_free_acked_segments+0xc8>
 8015af2:	2300      	movs	r3, #0
 8015af4:	442b      	add	r3, r5
 8015af6:	18e2      	adds	r2, r4, r3
 8015af8:	4b09      	ldr	r3, [pc, #36]	@ (8015b20 <tcp_free_acked_segments+0xf4>)
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	dd9c      	ble.n	8015a3c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8015b02:	68bb      	ldr	r3, [r7, #8]
}
 8015b04:	4618      	mov	r0, r3
 8015b06:	3718      	adds	r7, #24
 8015b08:	46bd      	mov	sp, r7
 8015b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8015b0c:	08023428 	.word	0x08023428
 8015b10:	08023710 	.word	0x08023710
 8015b14:	08023474 	.word	0x08023474
 8015b18:	2001b054 	.word	0x2001b054
 8015b1c:	08023738 	.word	0x08023738
 8015b20:	2001b050 	.word	0x2001b050

08015b24 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8015b24:	b5b0      	push	{r4, r5, r7, lr}
 8015b26:	b094      	sub	sp, #80	@ 0x50
 8015b28:	af00      	add	r7, sp, #0
 8015b2a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8015b2c:	2300      	movs	r3, #0
 8015b2e:	64bb      	str	r3, [r7, #72]	@ 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8015b30:	687b      	ldr	r3, [r7, #4]
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d106      	bne.n	8015b44 <tcp_receive+0x20>
 8015b36:	4b91      	ldr	r3, [pc, #580]	@ (8015d7c <tcp_receive+0x258>)
 8015b38:	f240 427b 	movw	r2, #1147	@ 0x47b
 8015b3c:	4990      	ldr	r1, [pc, #576]	@ (8015d80 <tcp_receive+0x25c>)
 8015b3e:	4891      	ldr	r0, [pc, #580]	@ (8015d84 <tcp_receive+0x260>)
 8015b40:	f008 fdde 	bl	801e700 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	7d1b      	ldrb	r3, [r3, #20]
 8015b48:	2b03      	cmp	r3, #3
 8015b4a:	d806      	bhi.n	8015b5a <tcp_receive+0x36>
 8015b4c:	4b8b      	ldr	r3, [pc, #556]	@ (8015d7c <tcp_receive+0x258>)
 8015b4e:	f240 427c 	movw	r2, #1148	@ 0x47c
 8015b52:	498d      	ldr	r1, [pc, #564]	@ (8015d88 <tcp_receive+0x264>)
 8015b54:	488b      	ldr	r0, [pc, #556]	@ (8015d84 <tcp_receive+0x260>)
 8015b56:	f008 fdd3 	bl	801e700 <iprintf>

  if (flags & TCP_ACK) {
 8015b5a:	4b8c      	ldr	r3, [pc, #560]	@ (8015d8c <tcp_receive+0x268>)
 8015b5c:	781b      	ldrb	r3, [r3, #0]
 8015b5e:	f003 0310 	and.w	r3, r3, #16
 8015b62:	2b00      	cmp	r3, #0
 8015b64:	f000 8264 	beq.w	8016030 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015b6e:	461a      	mov	r2, r3
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015b74:	4413      	add	r3, r2
 8015b76:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8015b7c:	4b84      	ldr	r3, [pc, #528]	@ (8015d90 <tcp_receive+0x26c>)
 8015b7e:	681b      	ldr	r3, [r3, #0]
 8015b80:	1ad3      	subs	r3, r2, r3
 8015b82:	2b00      	cmp	r3, #0
 8015b84:	db1b      	blt.n	8015bbe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8015b8a:	4b81      	ldr	r3, [pc, #516]	@ (8015d90 <tcp_receive+0x26c>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8015b8e:	429a      	cmp	r2, r3
 8015b90:	d106      	bne.n	8015ba0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015b92:	687b      	ldr	r3, [r7, #4]
 8015b94:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015b96:	4b7f      	ldr	r3, [pc, #508]	@ (8015d94 <tcp_receive+0x270>)
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	1ad3      	subs	r3, r2, r3
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	db0e      	blt.n	8015bbe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8015ba4:	4b7b      	ldr	r3, [pc, #492]	@ (8015d94 <tcp_receive+0x270>)
 8015ba6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8015ba8:	429a      	cmp	r2, r3
 8015baa:	d125      	bne.n	8015bf8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8015bac:	4b7a      	ldr	r3, [pc, #488]	@ (8015d98 <tcp_receive+0x274>)
 8015bae:	681b      	ldr	r3, [r3, #0]
 8015bb0:	89db      	ldrh	r3, [r3, #14]
 8015bb2:	b29a      	uxth	r2, r3
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015bba:	429a      	cmp	r2, r3
 8015bbc:	d91c      	bls.n	8015bf8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8015bbe:	4b76      	ldr	r3, [pc, #472]	@ (8015d98 <tcp_receive+0x274>)
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	89db      	ldrh	r3, [r3, #14]
 8015bc4:	b29a      	uxth	r2, r3
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	f8b3 2062 	ldrh.w	r2, [r3, #98]	@ 0x62
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8015bd8:	429a      	cmp	r2, r3
 8015bda:	d205      	bcs.n	8015be8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
      }
      pcb->snd_wl1 = seqno;
 8015be8:	4b69      	ldr	r3, [pc, #420]	@ (8015d90 <tcp_receive+0x26c>)
 8015bea:	681a      	ldr	r2, [r3, #0]
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	655a      	str	r2, [r3, #84]	@ 0x54
      pcb->snd_wl2 = ackno;
 8015bf0:	4b68      	ldr	r3, [pc, #416]	@ (8015d94 <tcp_receive+0x270>)
 8015bf2:	681a      	ldr	r2, [r3, #0]
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	659a      	str	r2, [r3, #88]	@ 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8015bf8:	4b66      	ldr	r3, [pc, #408]	@ (8015d94 <tcp_receive+0x270>)
 8015bfa:	681a      	ldr	r2, [r3, #0]
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015c00:	1ad3      	subs	r3, r2, r3
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	dc58      	bgt.n	8015cb8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8015c06:	4b65      	ldr	r3, [pc, #404]	@ (8015d9c <tcp_receive+0x278>)
 8015c08:	881b      	ldrh	r3, [r3, #0]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d14b      	bne.n	8015ca6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015c12:	687a      	ldr	r2, [r7, #4]
 8015c14:	f8b2 2060 	ldrh.w	r2, [r2, #96]	@ 0x60
 8015c18:	4413      	add	r3, r2
 8015c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015c1c:	429a      	cmp	r2, r3
 8015c1e:	d142      	bne.n	8015ca6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	db3d      	blt.n	8015ca6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015c2e:	4b59      	ldr	r3, [pc, #356]	@ (8015d94 <tcp_receive+0x270>)
 8015c30:	681b      	ldr	r3, [r3, #0]
 8015c32:	429a      	cmp	r2, r3
 8015c34:	d137      	bne.n	8015ca6 <tcp_receive+0x182>
              found_dupack = 1;
 8015c36:	2301      	movs	r3, #1
 8015c38:	64bb      	str	r3, [r7, #72]	@ 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015c40:	2bff      	cmp	r3, #255	@ 0xff
 8015c42:	d007      	beq.n	8015c54 <tcp_receive+0x130>
                ++pcb->dupacks;
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015c4a:	3301      	adds	r3, #1
 8015c4c:	b2da      	uxtb	r2, r3
 8015c4e:	687b      	ldr	r3, [r7, #4]
 8015c50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
              }
              if (pcb->dupacks > 3) {
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015c5a:	2b03      	cmp	r3, #3
 8015c5c:	d91b      	bls.n	8015c96 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015c64:	687b      	ldr	r3, [r7, #4]
 8015c66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c68:	4413      	add	r3, r2
 8015c6a:	b29a      	uxth	r2, r3
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015c72:	429a      	cmp	r2, r3
 8015c74:	d30a      	bcc.n	8015c8c <tcp_receive+0x168>
 8015c76:	687b      	ldr	r3, [r7, #4]
 8015c78:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015c80:	4413      	add	r3, r2
 8015c82:	b29a      	uxth	r2, r3
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015c8a:	e004      	b.n	8015c96 <tcp_receive+0x172>
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015c92:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
              }
              if (pcb->dupacks >= 3) {
 8015c96:	687b      	ldr	r3, [r7, #4]
 8015c98:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8015c9c:	2b02      	cmp	r3, #2
 8015c9e:	d902      	bls.n	8015ca6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8015ca0:	6878      	ldr	r0, [r7, #4]
 8015ca2:	f001 fee7 	bl	8017a74 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8015ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	f040 8161 	bne.w	8015f70 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	2200      	movs	r2, #0
 8015cb2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8015cb6:	e15b      	b.n	8015f70 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015cb8:	4b36      	ldr	r3, [pc, #216]	@ (8015d94 <tcp_receive+0x270>)
 8015cba:	681a      	ldr	r2, [r3, #0]
 8015cbc:	687b      	ldr	r3, [r7, #4]
 8015cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015cc0:	1ad3      	subs	r3, r2, r3
 8015cc2:	3b01      	subs	r3, #1
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	f2c0 814e 	blt.w	8015f66 <tcp_receive+0x442>
 8015cca:	4b32      	ldr	r3, [pc, #200]	@ (8015d94 <tcp_receive+0x270>)
 8015ccc:	681a      	ldr	r2, [r3, #0]
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8015cd2:	1ad3      	subs	r3, r2, r3
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	f300 8146 	bgt.w	8015f66 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8015cda:	687b      	ldr	r3, [r7, #4]
 8015cdc:	8b5b      	ldrh	r3, [r3, #26]
 8015cde:	f003 0304 	and.w	r3, r3, #4
 8015ce2:	2b00      	cmp	r3, #0
 8015ce4:	d010      	beq.n	8015d08 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	8b5b      	ldrh	r3, [r3, #26]
 8015cea:	f023 0304 	bic.w	r3, r3, #4
 8015cee:	b29a      	uxth	r2, r3
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8015cf4:	687b      	ldr	r3, [r7, #4]
 8015cf6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8015cfa:	687b      	ldr	r3, [r7, #4]
 8015cfc:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
        pcb->bytes_acked = 0;
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	2200      	movs	r2, #0
 8015d04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	2200      	movs	r2, #0
 8015d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015d16:	10db      	asrs	r3, r3, #3
 8015d18:	b21b      	sxth	r3, r3
 8015d1a:	b29a      	uxth	r2, r3
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015d22:	b29b      	uxth	r3, r3
 8015d24:	4413      	add	r3, r2
 8015d26:	b29b      	uxth	r3, r3
 8015d28:	b21a      	sxth	r2, r3
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8015d30:	4b18      	ldr	r3, [pc, #96]	@ (8015d94 <tcp_receive+0x270>)
 8015d32:	681b      	ldr	r3, [r3, #0]
 8015d34:	b29a      	uxth	r2, r3
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015d3a:	b29b      	uxth	r3, r3
 8015d3c:	1ad3      	subs	r3, r2, r3
 8015d3e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	2200      	movs	r2, #0
 8015d44:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
      pcb->lastack = ackno;
 8015d48:	4b12      	ldr	r3, [pc, #72]	@ (8015d94 <tcp_receive+0x270>)
 8015d4a:	681a      	ldr	r2, [r3, #0]
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	645a      	str	r2, [r3, #68]	@ 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	7d1b      	ldrb	r3, [r3, #20]
 8015d54:	2b03      	cmp	r3, #3
 8015d56:	f240 8097 	bls.w	8015e88 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8015d66:	429a      	cmp	r2, r3
 8015d68:	d245      	bcs.n	8015df6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	8b5b      	ldrh	r3, [r3, #26]
 8015d6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015d72:	2b00      	cmp	r3, #0
 8015d74:	d014      	beq.n	8015da0 <tcp_receive+0x27c>
 8015d76:	2301      	movs	r3, #1
 8015d78:	e013      	b.n	8015da2 <tcp_receive+0x27e>
 8015d7a:	bf00      	nop
 8015d7c:	08023428 	.word	0x08023428
 8015d80:	08023758 	.word	0x08023758
 8015d84:	08023474 	.word	0x08023474
 8015d88:	08023774 	.word	0x08023774
 8015d8c:	2001b058 	.word	0x2001b058
 8015d90:	2001b04c 	.word	0x2001b04c
 8015d94:	2001b050 	.word	0x2001b050
 8015d98:	2001b03c 	.word	0x2001b03c
 8015d9c:	2001b056 	.word	0x2001b056
 8015da0:	2302      	movs	r3, #2
 8015da2:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8015da6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8015daa:	b29a      	uxth	r2, r3
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015db0:	fb12 f303 	smulbb	r3, r2, r3
 8015db4:	b29b      	uxth	r3, r3
 8015db6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8015db8:	4293      	cmp	r3, r2
 8015dba:	bf28      	it	cs
 8015dbc:	4613      	movcs	r3, r2
 8015dbe:	857b      	strh	r3, [r7, #42]	@ 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015dc6:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015dc8:	4413      	add	r3, r2
 8015dca:	b29a      	uxth	r2, r3
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015dd2:	429a      	cmp	r2, r3
 8015dd4:	d309      	bcc.n	8015dea <tcp_receive+0x2c6>
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015ddc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8015dde:	4413      	add	r3, r2
 8015de0:	b29a      	uxth	r2, r3
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015de8:	e04e      	b.n	8015e88 <tcp_receive+0x364>
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015df0:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015df4:	e048      	b.n	8015e88 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015dfc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015dfe:	4413      	add	r3, r2
 8015e00:	b29a      	uxth	r2, r3
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 8015e08:	429a      	cmp	r2, r3
 8015e0a:	d309      	bcc.n	8015e20 <tcp_receive+0x2fc>
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015e12:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8015e14:	4413      	add	r3, r2
 8015e16:	b29a      	uxth	r2, r3
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
 8015e1e:	e004      	b.n	8015e2a <tcp_receive+0x306>
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015e26:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015e36:	429a      	cmp	r2, r3
 8015e38:	d326      	bcc.n	8015e88 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8015e3a:	687b      	ldr	r3, [r7, #4]
 8015e3c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	@ 0x6a
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015e46:	1ad3      	subs	r3, r2, r3
 8015e48:	b29a      	uxth	r2, r3
 8015e4a:	687b      	ldr	r3, [r7, #4]
 8015e4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015e5a:	4413      	add	r3, r2
 8015e5c:	b29a      	uxth	r2, r3
 8015e5e:	687b      	ldr	r3, [r7, #4]
 8015e60:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8015e64:	429a      	cmp	r2, r3
 8015e66:	d30a      	bcc.n	8015e7e <tcp_receive+0x35a>
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8015e72:	4413      	add	r3, r2
 8015e74:	b29a      	uxth	r2, r3
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
 8015e7c:	e004      	b.n	8015e88 <tcp_receive+0x364>
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015e84:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015e90:	4a98      	ldr	r2, [pc, #608]	@ (80160f4 <tcp_receive+0x5d0>)
 8015e92:	6878      	ldr	r0, [r7, #4]
 8015e94:	f7ff fdca 	bl	8015a2c <tcp_free_acked_segments>
 8015e98:	4602      	mov	r2, r0
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	671a      	str	r2, [r3, #112]	@ 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	6ed9      	ldr	r1, [r3, #108]	@ 0x6c
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015ea6:	4a94      	ldr	r2, [pc, #592]	@ (80160f8 <tcp_receive+0x5d4>)
 8015ea8:	6878      	ldr	r0, [r7, #4]
 8015eaa:	f7ff fdbf 	bl	8015a2c <tcp_free_acked_segments>
 8015eae:	4602      	mov	r2, r0
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	66da      	str	r2, [r3, #108]	@ 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d104      	bne.n	8015ec6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015ec2:	861a      	strh	r2, [r3, #48]	@ 0x30
 8015ec4:	e002      	b.n	8015ecc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	2200      	movs	r2, #0
 8015eca:	861a      	strh	r2, [r3, #48]	@ 0x30
      }

      pcb->polltmr = 0;
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	2200      	movs	r2, #0
 8015ed0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d103      	bne.n	8015ee2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	2200      	movs	r2, #0
 8015ede:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8015ee8:	4b84      	ldr	r3, [pc, #528]	@ (80160fc <tcp_receive+0x5d8>)
 8015eea:	881b      	ldrh	r3, [r3, #0]
 8015eec:	4413      	add	r3, r2
 8015eee:	b29a      	uxth	r2, r3
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	8b5b      	ldrh	r3, [r3, #26]
 8015efa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d035      	beq.n	8015f6e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d118      	bne.n	8015f3c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d00c      	beq.n	8015f2c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015f1a:	68db      	ldr	r3, [r3, #12]
 8015f1c:	685b      	ldr	r3, [r3, #4]
 8015f1e:	4618      	mov	r0, r3
 8015f20:	f7fa fcd1 	bl	80108c6 <lwip_htonl>
 8015f24:	4603      	mov	r3, r0
 8015f26:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	dc20      	bgt.n	8015f6e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	8b5b      	ldrh	r3, [r3, #26]
 8015f30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015f34:	b29a      	uxth	r2, r3
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015f3a:	e018      	b.n	8015f6e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 8015f40:	687b      	ldr	r3, [r7, #4]
 8015f42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8015f44:	68db      	ldr	r3, [r3, #12]
 8015f46:	685b      	ldr	r3, [r3, #4]
 8015f48:	4618      	mov	r0, r3
 8015f4a:	f7fa fcbc 	bl	80108c6 <lwip_htonl>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	1ae3      	subs	r3, r4, r3
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	dc0b      	bgt.n	8015f6e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8015f56:	687b      	ldr	r3, [r7, #4]
 8015f58:	8b5b      	ldrh	r3, [r3, #26]
 8015f5a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015f5e:	b29a      	uxth	r2, r3
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015f64:	e003      	b.n	8015f6e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8015f66:	6878      	ldr	r0, [r7, #4]
 8015f68:	f001 ff70 	bl	8017e4c <tcp_send_empty_ack>
 8015f6c:	e000      	b.n	8015f70 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015f6e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d05b      	beq.n	8016030 <tcp_receive+0x50c>
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015f7c:	4b60      	ldr	r3, [pc, #384]	@ (8016100 <tcp_receive+0x5dc>)
 8015f7e:	681b      	ldr	r3, [r3, #0]
 8015f80:	1ad3      	subs	r3, r2, r3
 8015f82:	2b00      	cmp	r3, #0
 8015f84:	da54      	bge.n	8016030 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8015f86:	4b5f      	ldr	r3, [pc, #380]	@ (8016104 <tcp_receive+0x5e0>)
 8015f88:	681b      	ldr	r3, [r3, #0]
 8015f8a:	b29a      	uxth	r2, r3
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015f90:	b29b      	uxth	r3, r3
 8015f92:	1ad3      	subs	r3, r2, r3
 8015f94:	b29b      	uxth	r3, r3
 8015f96:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8015f9a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015fa4:	10db      	asrs	r3, r3, #3
 8015fa6:	b21b      	sxth	r3, r3
 8015fa8:	b29b      	uxth	r3, r3
 8015faa:	1ad3      	subs	r3, r2, r3
 8015fac:	b29b      	uxth	r3, r3
 8015fae:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8015fb8:	b29a      	uxth	r2, r3
 8015fba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015fbe:	4413      	add	r3, r2
 8015fc0:	b29b      	uxth	r3, r3
 8015fc2:	b21a      	sxth	r2, r3
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	879a      	strh	r2, [r3, #60]	@ 0x3c
      if (m < 0) {
 8015fc8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8015fcc:	2b00      	cmp	r3, #0
 8015fce:	da05      	bge.n	8015fdc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015fd0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8015fd4:	425b      	negs	r3, r3
 8015fd6:	b29b      	uxth	r3, r3
 8015fd8:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015fdc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015fe6:	109b      	asrs	r3, r3, #2
 8015fe8:	b21b      	sxth	r3, r3
 8015fea:	b29b      	uxth	r3, r3
 8015fec:	1ad3      	subs	r3, r2, r3
 8015fee:	b29b      	uxth	r3, r3
 8015ff0:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 8015ffa:	b29a      	uxth	r2, r3
 8015ffc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016000:	4413      	add	r3, r2
 8016002:	b29b      	uxth	r3, r3
 8016004:	b21a      	sxth	r2, r3
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	87da      	strh	r2, [r3, #62]	@ 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	@ 0x3c
 8016010:	10db      	asrs	r3, r3, #3
 8016012:	b21b      	sxth	r3, r3
 8016014:	b29a      	uxth	r2, r3
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	@ 0x3e
 801601c:	b29b      	uxth	r3, r3
 801601e:	4413      	add	r3, r2
 8016020:	b29b      	uxth	r3, r3
 8016022:	b21a      	sxth	r2, r3
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	2200      	movs	r2, #0
 801602e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016030:	4b35      	ldr	r3, [pc, #212]	@ (8016108 <tcp_receive+0x5e4>)
 8016032:	881b      	ldrh	r3, [r3, #0]
 8016034:	2b00      	cmp	r3, #0
 8016036:	f000 84df 	beq.w	80169f8 <tcp_receive+0xed4>
 801603a:	687b      	ldr	r3, [r7, #4]
 801603c:	7d1b      	ldrb	r3, [r3, #20]
 801603e:	2b06      	cmp	r3, #6
 8016040:	f200 84da 	bhi.w	80169f8 <tcp_receive+0xed4>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016048:	4b30      	ldr	r3, [pc, #192]	@ (801610c <tcp_receive+0x5e8>)
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	1ad3      	subs	r3, r2, r3
 801604e:	3b01      	subs	r3, #1
 8016050:	2b00      	cmp	r3, #0
 8016052:	f2c0 808f 	blt.w	8016174 <tcp_receive+0x650>
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801605a:	4b2b      	ldr	r3, [pc, #172]	@ (8016108 <tcp_receive+0x5e4>)
 801605c:	881b      	ldrh	r3, [r3, #0]
 801605e:	4619      	mov	r1, r3
 8016060:	4b2a      	ldr	r3, [pc, #168]	@ (801610c <tcp_receive+0x5e8>)
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	440b      	add	r3, r1
 8016066:	1ad3      	subs	r3, r2, r3
 8016068:	3301      	adds	r3, #1
 801606a:	2b00      	cmp	r3, #0
 801606c:	f300 8082 	bgt.w	8016174 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016070:	4b27      	ldr	r3, [pc, #156]	@ (8016110 <tcp_receive+0x5ec>)
 8016072:	685b      	ldr	r3, [r3, #4]
 8016074:	647b      	str	r3, [r7, #68]	@ 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801607a:	4b24      	ldr	r3, [pc, #144]	@ (801610c <tcp_receive+0x5e8>)
 801607c:	681b      	ldr	r3, [r3, #0]
 801607e:	1ad3      	subs	r3, r2, r3
 8016080:	627b      	str	r3, [r7, #36]	@ 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016082:	4b23      	ldr	r3, [pc, #140]	@ (8016110 <tcp_receive+0x5ec>)
 8016084:	685b      	ldr	r3, [r3, #4]
 8016086:	2b00      	cmp	r3, #0
 8016088:	d106      	bne.n	8016098 <tcp_receive+0x574>
 801608a:	4b22      	ldr	r3, [pc, #136]	@ (8016114 <tcp_receive+0x5f0>)
 801608c:	f240 5294 	movw	r2, #1428	@ 0x594
 8016090:	4921      	ldr	r1, [pc, #132]	@ (8016118 <tcp_receive+0x5f4>)
 8016092:	4822      	ldr	r0, [pc, #136]	@ (801611c <tcp_receive+0x5f8>)
 8016094:	f008 fb34 	bl	801e700 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801609a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801609e:	4293      	cmp	r3, r2
 80160a0:	d906      	bls.n	80160b0 <tcp_receive+0x58c>
 80160a2:	4b1c      	ldr	r3, [pc, #112]	@ (8016114 <tcp_receive+0x5f0>)
 80160a4:	f240 5295 	movw	r2, #1429	@ 0x595
 80160a8:	491d      	ldr	r1, [pc, #116]	@ (8016120 <tcp_receive+0x5fc>)
 80160aa:	481c      	ldr	r0, [pc, #112]	@ (801611c <tcp_receive+0x5f8>)
 80160ac:	f008 fb28 	bl	801e700 <iprintf>
      off = (u16_t)off32;
 80160b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80160b2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80160b6:	4b16      	ldr	r3, [pc, #88]	@ (8016110 <tcp_receive+0x5ec>)
 80160b8:	685b      	ldr	r3, [r3, #4]
 80160ba:	891b      	ldrh	r3, [r3, #8]
 80160bc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 80160c0:	429a      	cmp	r2, r3
 80160c2:	d906      	bls.n	80160d2 <tcp_receive+0x5ae>
 80160c4:	4b13      	ldr	r3, [pc, #76]	@ (8016114 <tcp_receive+0x5f0>)
 80160c6:	f240 5297 	movw	r2, #1431	@ 0x597
 80160ca:	4916      	ldr	r1, [pc, #88]	@ (8016124 <tcp_receive+0x600>)
 80160cc:	4813      	ldr	r0, [pc, #76]	@ (801611c <tcp_receive+0x5f8>)
 80160ce:	f008 fb17 	bl	801e700 <iprintf>
      inseg.len -= off;
 80160d2:	4b0f      	ldr	r3, [pc, #60]	@ (8016110 <tcp_receive+0x5ec>)
 80160d4:	891a      	ldrh	r2, [r3, #8]
 80160d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80160da:	1ad3      	subs	r3, r2, r3
 80160dc:	b29a      	uxth	r2, r3
 80160de:	4b0c      	ldr	r3, [pc, #48]	@ (8016110 <tcp_receive+0x5ec>)
 80160e0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80160e2:	4b0b      	ldr	r3, [pc, #44]	@ (8016110 <tcp_receive+0x5ec>)
 80160e4:	685b      	ldr	r3, [r3, #4]
 80160e6:	891a      	ldrh	r2, [r3, #8]
 80160e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80160ec:	1ad3      	subs	r3, r2, r3
 80160ee:	847b      	strh	r3, [r7, #34]	@ 0x22
      while (p->len < off) {
 80160f0:	e02a      	b.n	8016148 <tcp_receive+0x624>
 80160f2:	bf00      	nop
 80160f4:	08023790 	.word	0x08023790
 80160f8:	08023798 	.word	0x08023798
 80160fc:	2001b054 	.word	0x2001b054
 8016100:	2001b050 	.word	0x2001b050
 8016104:	2001b014 	.word	0x2001b014
 8016108:	2001b056 	.word	0x2001b056
 801610c:	2001b04c 	.word	0x2001b04c
 8016110:	2001b02c 	.word	0x2001b02c
 8016114:	08023428 	.word	0x08023428
 8016118:	080237a0 	.word	0x080237a0
 801611c:	08023474 	.word	0x08023474
 8016120:	080237b0 	.word	0x080237b0
 8016124:	080237c0 	.word	0x080237c0
        off -= p->len;
 8016128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801612a:	895b      	ldrh	r3, [r3, #10]
 801612c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016130:	1ad3      	subs	r3, r2, r3
 8016132:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016136:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016138:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801613a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801613c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801613e:	2200      	movs	r2, #0
 8016140:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016142:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	647b      	str	r3, [r7, #68]	@ 0x44
      while (p->len < off) {
 8016148:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801614a:	895b      	ldrh	r3, [r3, #10]
 801614c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 8016150:	429a      	cmp	r2, r3
 8016152:	d8e9      	bhi.n	8016128 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016154:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8016158:	4619      	mov	r1, r3
 801615a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 801615c:	f7fc fa04 	bl	8012568 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016164:	4a90      	ldr	r2, [pc, #576]	@ (80163a8 <tcp_receive+0x884>)
 8016166:	6013      	str	r3, [r2, #0]
 8016168:	4b90      	ldr	r3, [pc, #576]	@ (80163ac <tcp_receive+0x888>)
 801616a:	68db      	ldr	r3, [r3, #12]
 801616c:	4a8e      	ldr	r2, [pc, #568]	@ (80163a8 <tcp_receive+0x884>)
 801616e:	6812      	ldr	r2, [r2, #0]
 8016170:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016172:	e00d      	b.n	8016190 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016174:	4b8c      	ldr	r3, [pc, #560]	@ (80163a8 <tcp_receive+0x884>)
 8016176:	681a      	ldr	r2, [r3, #0]
 8016178:	687b      	ldr	r3, [r7, #4]
 801617a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801617c:	1ad3      	subs	r3, r2, r3
 801617e:	2b00      	cmp	r3, #0
 8016180:	da06      	bge.n	8016190 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	8b5b      	ldrh	r3, [r3, #26]
 8016186:	f043 0302 	orr.w	r3, r3, #2
 801618a:	b29a      	uxth	r2, r3
 801618c:	687b      	ldr	r3, [r7, #4]
 801618e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016190:	4b85      	ldr	r3, [pc, #532]	@ (80163a8 <tcp_receive+0x884>)
 8016192:	681a      	ldr	r2, [r3, #0]
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016198:	1ad3      	subs	r3, r2, r3
 801619a:	2b00      	cmp	r3, #0
 801619c:	f2c0 8427 	blt.w	80169ee <tcp_receive+0xeca>
 80161a0:	4b81      	ldr	r3, [pc, #516]	@ (80163a8 <tcp_receive+0x884>)
 80161a2:	681a      	ldr	r2, [r3, #0]
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161a8:	6879      	ldr	r1, [r7, #4]
 80161aa:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80161ac:	440b      	add	r3, r1
 80161ae:	1ad3      	subs	r3, r2, r3
 80161b0:	3301      	adds	r3, #1
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	f300 841b 	bgt.w	80169ee <tcp_receive+0xeca>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80161bc:	4b7a      	ldr	r3, [pc, #488]	@ (80163a8 <tcp_receive+0x884>)
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	429a      	cmp	r2, r3
 80161c2:	f040 8298 	bne.w	80166f6 <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80161c6:	4b79      	ldr	r3, [pc, #484]	@ (80163ac <tcp_receive+0x888>)
 80161c8:	891c      	ldrh	r4, [r3, #8]
 80161ca:	4b78      	ldr	r3, [pc, #480]	@ (80163ac <tcp_receive+0x888>)
 80161cc:	68db      	ldr	r3, [r3, #12]
 80161ce:	899b      	ldrh	r3, [r3, #12]
 80161d0:	b29b      	uxth	r3, r3
 80161d2:	4618      	mov	r0, r3
 80161d4:	f7fa fb62 	bl	801089c <lwip_htons>
 80161d8:	4603      	mov	r3, r0
 80161da:	b2db      	uxtb	r3, r3
 80161dc:	f003 0303 	and.w	r3, r3, #3
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d001      	beq.n	80161e8 <tcp_receive+0x6c4>
 80161e4:	2301      	movs	r3, #1
 80161e6:	e000      	b.n	80161ea <tcp_receive+0x6c6>
 80161e8:	2300      	movs	r3, #0
 80161ea:	4423      	add	r3, r4
 80161ec:	b29a      	uxth	r2, r3
 80161ee:	4b70      	ldr	r3, [pc, #448]	@ (80163b0 <tcp_receive+0x88c>)
 80161f0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80161f6:	4b6e      	ldr	r3, [pc, #440]	@ (80163b0 <tcp_receive+0x88c>)
 80161f8:	881b      	ldrh	r3, [r3, #0]
 80161fa:	429a      	cmp	r2, r3
 80161fc:	d274      	bcs.n	80162e8 <tcp_receive+0x7c4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80161fe:	4b6b      	ldr	r3, [pc, #428]	@ (80163ac <tcp_receive+0x888>)
 8016200:	68db      	ldr	r3, [r3, #12]
 8016202:	899b      	ldrh	r3, [r3, #12]
 8016204:	b29b      	uxth	r3, r3
 8016206:	4618      	mov	r0, r3
 8016208:	f7fa fb48 	bl	801089c <lwip_htons>
 801620c:	4603      	mov	r3, r0
 801620e:	b2db      	uxtb	r3, r3
 8016210:	f003 0301 	and.w	r3, r3, #1
 8016214:	2b00      	cmp	r3, #0
 8016216:	d01e      	beq.n	8016256 <tcp_receive+0x732>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016218:	4b64      	ldr	r3, [pc, #400]	@ (80163ac <tcp_receive+0x888>)
 801621a:	68db      	ldr	r3, [r3, #12]
 801621c:	899b      	ldrh	r3, [r3, #12]
 801621e:	b29b      	uxth	r3, r3
 8016220:	b21b      	sxth	r3, r3
 8016222:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8016226:	b21c      	sxth	r4, r3
 8016228:	4b60      	ldr	r3, [pc, #384]	@ (80163ac <tcp_receive+0x888>)
 801622a:	68db      	ldr	r3, [r3, #12]
 801622c:	899b      	ldrh	r3, [r3, #12]
 801622e:	b29b      	uxth	r3, r3
 8016230:	4618      	mov	r0, r3
 8016232:	f7fa fb33 	bl	801089c <lwip_htons>
 8016236:	4603      	mov	r3, r0
 8016238:	b2db      	uxtb	r3, r3
 801623a:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801623e:	b29b      	uxth	r3, r3
 8016240:	4618      	mov	r0, r3
 8016242:	f7fa fb2b 	bl	801089c <lwip_htons>
 8016246:	4603      	mov	r3, r0
 8016248:	b21b      	sxth	r3, r3
 801624a:	4323      	orrs	r3, r4
 801624c:	b21a      	sxth	r2, r3
 801624e:	4b57      	ldr	r3, [pc, #348]	@ (80163ac <tcp_receive+0x888>)
 8016250:	68db      	ldr	r3, [r3, #12]
 8016252:	b292      	uxth	r2, r2
 8016254:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 801625a:	4b54      	ldr	r3, [pc, #336]	@ (80163ac <tcp_receive+0x888>)
 801625c:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801625e:	4b53      	ldr	r3, [pc, #332]	@ (80163ac <tcp_receive+0x888>)
 8016260:	68db      	ldr	r3, [r3, #12]
 8016262:	899b      	ldrh	r3, [r3, #12]
 8016264:	b29b      	uxth	r3, r3
 8016266:	4618      	mov	r0, r3
 8016268:	f7fa fb18 	bl	801089c <lwip_htons>
 801626c:	4603      	mov	r3, r0
 801626e:	b2db      	uxtb	r3, r3
 8016270:	f003 0302 	and.w	r3, r3, #2
 8016274:	2b00      	cmp	r3, #0
 8016276:	d005      	beq.n	8016284 <tcp_receive+0x760>
            inseg.len -= 1;
 8016278:	4b4c      	ldr	r3, [pc, #304]	@ (80163ac <tcp_receive+0x888>)
 801627a:	891b      	ldrh	r3, [r3, #8]
 801627c:	3b01      	subs	r3, #1
 801627e:	b29a      	uxth	r2, r3
 8016280:	4b4a      	ldr	r3, [pc, #296]	@ (80163ac <tcp_receive+0x888>)
 8016282:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016284:	4b49      	ldr	r3, [pc, #292]	@ (80163ac <tcp_receive+0x888>)
 8016286:	685b      	ldr	r3, [r3, #4]
 8016288:	4a48      	ldr	r2, [pc, #288]	@ (80163ac <tcp_receive+0x888>)
 801628a:	8912      	ldrh	r2, [r2, #8]
 801628c:	4611      	mov	r1, r2
 801628e:	4618      	mov	r0, r3
 8016290:	f7fc f86a 	bl	8012368 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016294:	4b45      	ldr	r3, [pc, #276]	@ (80163ac <tcp_receive+0x888>)
 8016296:	891c      	ldrh	r4, [r3, #8]
 8016298:	4b44      	ldr	r3, [pc, #272]	@ (80163ac <tcp_receive+0x888>)
 801629a:	68db      	ldr	r3, [r3, #12]
 801629c:	899b      	ldrh	r3, [r3, #12]
 801629e:	b29b      	uxth	r3, r3
 80162a0:	4618      	mov	r0, r3
 80162a2:	f7fa fafb 	bl	801089c <lwip_htons>
 80162a6:	4603      	mov	r3, r0
 80162a8:	b2db      	uxtb	r3, r3
 80162aa:	f003 0303 	and.w	r3, r3, #3
 80162ae:	2b00      	cmp	r3, #0
 80162b0:	d001      	beq.n	80162b6 <tcp_receive+0x792>
 80162b2:	2301      	movs	r3, #1
 80162b4:	e000      	b.n	80162b8 <tcp_receive+0x794>
 80162b6:	2300      	movs	r3, #0
 80162b8:	4423      	add	r3, r4
 80162ba:	b29a      	uxth	r2, r3
 80162bc:	4b3c      	ldr	r3, [pc, #240]	@ (80163b0 <tcp_receive+0x88c>)
 80162be:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80162c0:	4b3b      	ldr	r3, [pc, #236]	@ (80163b0 <tcp_receive+0x88c>)
 80162c2:	881b      	ldrh	r3, [r3, #0]
 80162c4:	461a      	mov	r2, r3
 80162c6:	4b38      	ldr	r3, [pc, #224]	@ (80163a8 <tcp_receive+0x884>)
 80162c8:	681b      	ldr	r3, [r3, #0]
 80162ca:	441a      	add	r2, r3
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80162d0:	6879      	ldr	r1, [r7, #4]
 80162d2:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80162d4:	440b      	add	r3, r1
 80162d6:	429a      	cmp	r2, r3
 80162d8:	d006      	beq.n	80162e8 <tcp_receive+0x7c4>
 80162da:	4b36      	ldr	r3, [pc, #216]	@ (80163b4 <tcp_receive+0x890>)
 80162dc:	f240 52cb 	movw	r2, #1483	@ 0x5cb
 80162e0:	4935      	ldr	r1, [pc, #212]	@ (80163b8 <tcp_receive+0x894>)
 80162e2:	4836      	ldr	r0, [pc, #216]	@ (80163bc <tcp_receive+0x898>)
 80162e4:	f008 fa0c 	bl	801e700 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	f000 80e6 	beq.w	80164be <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80162f2:	4b2e      	ldr	r3, [pc, #184]	@ (80163ac <tcp_receive+0x888>)
 80162f4:	68db      	ldr	r3, [r3, #12]
 80162f6:	899b      	ldrh	r3, [r3, #12]
 80162f8:	b29b      	uxth	r3, r3
 80162fa:	4618      	mov	r0, r3
 80162fc:	f7fa face 	bl	801089c <lwip_htons>
 8016300:	4603      	mov	r3, r0
 8016302:	b2db      	uxtb	r3, r3
 8016304:	f003 0301 	and.w	r3, r3, #1
 8016308:	2b00      	cmp	r3, #0
 801630a:	d010      	beq.n	801632e <tcp_receive+0x80a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801630c:	e00a      	b.n	8016324 <tcp_receive+0x800>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016312:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016318:	681a      	ldr	r2, [r3, #0]
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	675a      	str	r2, [r3, #116]	@ 0x74
              tcp_seg_free(old_ooseq);
 801631e:	68f8      	ldr	r0, [r7, #12]
 8016320:	f7fd fd93 	bl	8013e4a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016328:	2b00      	cmp	r3, #0
 801632a:	d1f0      	bne.n	801630e <tcp_receive+0x7ea>
 801632c:	e0c7      	b.n	80164be <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801632e:	687b      	ldr	r3, [r7, #4]
 8016330:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016332:	63fb      	str	r3, [r7, #60]	@ 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016334:	e051      	b.n	80163da <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016338:	68db      	ldr	r3, [r3, #12]
 801633a:	899b      	ldrh	r3, [r3, #12]
 801633c:	b29b      	uxth	r3, r3
 801633e:	4618      	mov	r0, r3
 8016340:	f7fa faac 	bl	801089c <lwip_htons>
 8016344:	4603      	mov	r3, r0
 8016346:	b2db      	uxtb	r3, r3
 8016348:	f003 0301 	and.w	r3, r3, #1
 801634c:	2b00      	cmp	r3, #0
 801634e:	d03c      	beq.n	80163ca <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016350:	4b16      	ldr	r3, [pc, #88]	@ (80163ac <tcp_receive+0x888>)
 8016352:	68db      	ldr	r3, [r3, #12]
 8016354:	899b      	ldrh	r3, [r3, #12]
 8016356:	b29b      	uxth	r3, r3
 8016358:	4618      	mov	r0, r3
 801635a:	f7fa fa9f 	bl	801089c <lwip_htons>
 801635e:	4603      	mov	r3, r0
 8016360:	b2db      	uxtb	r3, r3
 8016362:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016366:	2b00      	cmp	r3, #0
 8016368:	d12f      	bne.n	80163ca <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801636a:	4b10      	ldr	r3, [pc, #64]	@ (80163ac <tcp_receive+0x888>)
 801636c:	68db      	ldr	r3, [r3, #12]
 801636e:	899b      	ldrh	r3, [r3, #12]
 8016370:	b29c      	uxth	r4, r3
 8016372:	2001      	movs	r0, #1
 8016374:	f7fa fa92 	bl	801089c <lwip_htons>
 8016378:	4603      	mov	r3, r0
 801637a:	461a      	mov	r2, r3
 801637c:	4b0b      	ldr	r3, [pc, #44]	@ (80163ac <tcp_receive+0x888>)
 801637e:	68db      	ldr	r3, [r3, #12]
 8016380:	4322      	orrs	r2, r4
 8016382:	b292      	uxth	r2, r2
 8016384:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016386:	4b09      	ldr	r3, [pc, #36]	@ (80163ac <tcp_receive+0x888>)
 8016388:	891c      	ldrh	r4, [r3, #8]
 801638a:	4b08      	ldr	r3, [pc, #32]	@ (80163ac <tcp_receive+0x888>)
 801638c:	68db      	ldr	r3, [r3, #12]
 801638e:	899b      	ldrh	r3, [r3, #12]
 8016390:	b29b      	uxth	r3, r3
 8016392:	4618      	mov	r0, r3
 8016394:	f7fa fa82 	bl	801089c <lwip_htons>
 8016398:	4603      	mov	r3, r0
 801639a:	b2db      	uxtb	r3, r3
 801639c:	f003 0303 	and.w	r3, r3, #3
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d00d      	beq.n	80163c0 <tcp_receive+0x89c>
 80163a4:	2301      	movs	r3, #1
 80163a6:	e00c      	b.n	80163c2 <tcp_receive+0x89e>
 80163a8:	2001b04c 	.word	0x2001b04c
 80163ac:	2001b02c 	.word	0x2001b02c
 80163b0:	2001b056 	.word	0x2001b056
 80163b4:	08023428 	.word	0x08023428
 80163b8:	080237d0 	.word	0x080237d0
 80163bc:	08023474 	.word	0x08023474
 80163c0:	2300      	movs	r3, #0
 80163c2:	4423      	add	r3, r4
 80163c4:	b29a      	uxth	r2, r3
 80163c6:	4b98      	ldr	r3, [pc, #608]	@ (8016628 <tcp_receive+0xb04>)
 80163c8:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 80163ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163cc:	613b      	str	r3, [r7, #16]
              next = next->next;
 80163ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163d0:	681b      	ldr	r3, [r3, #0]
 80163d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
              tcp_seg_free(tmp);
 80163d4:	6938      	ldr	r0, [r7, #16]
 80163d6:	f7fd fd38 	bl	8013e4a <tcp_seg_free>
            while (next &&
 80163da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d00e      	beq.n	80163fe <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80163e0:	4b91      	ldr	r3, [pc, #580]	@ (8016628 <tcp_receive+0xb04>)
 80163e2:	881b      	ldrh	r3, [r3, #0]
 80163e4:	461a      	mov	r2, r3
 80163e6:	4b91      	ldr	r3, [pc, #580]	@ (801662c <tcp_receive+0xb08>)
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	441a      	add	r2, r3
 80163ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163ee:	68db      	ldr	r3, [r3, #12]
 80163f0:	685b      	ldr	r3, [r3, #4]
 80163f2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80163f4:	8909      	ldrh	r1, [r1, #8]
 80163f6:	440b      	add	r3, r1
 80163f8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	da9b      	bge.n	8016336 <tcp_receive+0x812>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80163fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016400:	2b00      	cmp	r3, #0
 8016402:	d059      	beq.n	80164b8 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 8016404:	4b88      	ldr	r3, [pc, #544]	@ (8016628 <tcp_receive+0xb04>)
 8016406:	881b      	ldrh	r3, [r3, #0]
 8016408:	461a      	mov	r2, r3
 801640a:	4b88      	ldr	r3, [pc, #544]	@ (801662c <tcp_receive+0xb08>)
 801640c:	681b      	ldr	r3, [r3, #0]
 801640e:	441a      	add	r2, r3
 8016410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016412:	68db      	ldr	r3, [r3, #12]
 8016414:	685b      	ldr	r3, [r3, #4]
 8016416:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016418:	2b00      	cmp	r3, #0
 801641a:	dd4d      	ble.n	80164b8 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801641c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801641e:	68db      	ldr	r3, [r3, #12]
 8016420:	685b      	ldr	r3, [r3, #4]
 8016422:	b29a      	uxth	r2, r3
 8016424:	4b81      	ldr	r3, [pc, #516]	@ (801662c <tcp_receive+0xb08>)
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	b29b      	uxth	r3, r3
 801642a:	1ad3      	subs	r3, r2, r3
 801642c:	b29a      	uxth	r2, r3
 801642e:	4b80      	ldr	r3, [pc, #512]	@ (8016630 <tcp_receive+0xb0c>)
 8016430:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016432:	4b7f      	ldr	r3, [pc, #508]	@ (8016630 <tcp_receive+0xb0c>)
 8016434:	68db      	ldr	r3, [r3, #12]
 8016436:	899b      	ldrh	r3, [r3, #12]
 8016438:	b29b      	uxth	r3, r3
 801643a:	4618      	mov	r0, r3
 801643c:	f7fa fa2e 	bl	801089c <lwip_htons>
 8016440:	4603      	mov	r3, r0
 8016442:	b2db      	uxtb	r3, r3
 8016444:	f003 0302 	and.w	r3, r3, #2
 8016448:	2b00      	cmp	r3, #0
 801644a:	d005      	beq.n	8016458 <tcp_receive+0x934>
                inseg.len -= 1;
 801644c:	4b78      	ldr	r3, [pc, #480]	@ (8016630 <tcp_receive+0xb0c>)
 801644e:	891b      	ldrh	r3, [r3, #8]
 8016450:	3b01      	subs	r3, #1
 8016452:	b29a      	uxth	r2, r3
 8016454:	4b76      	ldr	r3, [pc, #472]	@ (8016630 <tcp_receive+0xb0c>)
 8016456:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016458:	4b75      	ldr	r3, [pc, #468]	@ (8016630 <tcp_receive+0xb0c>)
 801645a:	685b      	ldr	r3, [r3, #4]
 801645c:	4a74      	ldr	r2, [pc, #464]	@ (8016630 <tcp_receive+0xb0c>)
 801645e:	8912      	ldrh	r2, [r2, #8]
 8016460:	4611      	mov	r1, r2
 8016462:	4618      	mov	r0, r3
 8016464:	f7fb ff80 	bl	8012368 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8016468:	4b71      	ldr	r3, [pc, #452]	@ (8016630 <tcp_receive+0xb0c>)
 801646a:	891c      	ldrh	r4, [r3, #8]
 801646c:	4b70      	ldr	r3, [pc, #448]	@ (8016630 <tcp_receive+0xb0c>)
 801646e:	68db      	ldr	r3, [r3, #12]
 8016470:	899b      	ldrh	r3, [r3, #12]
 8016472:	b29b      	uxth	r3, r3
 8016474:	4618      	mov	r0, r3
 8016476:	f7fa fa11 	bl	801089c <lwip_htons>
 801647a:	4603      	mov	r3, r0
 801647c:	b2db      	uxtb	r3, r3
 801647e:	f003 0303 	and.w	r3, r3, #3
 8016482:	2b00      	cmp	r3, #0
 8016484:	d001      	beq.n	801648a <tcp_receive+0x966>
 8016486:	2301      	movs	r3, #1
 8016488:	e000      	b.n	801648c <tcp_receive+0x968>
 801648a:	2300      	movs	r3, #0
 801648c:	4423      	add	r3, r4
 801648e:	b29a      	uxth	r2, r3
 8016490:	4b65      	ldr	r3, [pc, #404]	@ (8016628 <tcp_receive+0xb04>)
 8016492:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8016494:	4b64      	ldr	r3, [pc, #400]	@ (8016628 <tcp_receive+0xb04>)
 8016496:	881b      	ldrh	r3, [r3, #0]
 8016498:	461a      	mov	r2, r3
 801649a:	4b64      	ldr	r3, [pc, #400]	@ (801662c <tcp_receive+0xb08>)
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	441a      	add	r2, r3
 80164a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80164a2:	68db      	ldr	r3, [r3, #12]
 80164a4:	685b      	ldr	r3, [r3, #4]
 80164a6:	429a      	cmp	r2, r3
 80164a8:	d006      	beq.n	80164b8 <tcp_receive+0x994>
 80164aa:	4b62      	ldr	r3, [pc, #392]	@ (8016634 <tcp_receive+0xb10>)
 80164ac:	f240 52fc 	movw	r2, #1532	@ 0x5fc
 80164b0:	4961      	ldr	r1, [pc, #388]	@ (8016638 <tcp_receive+0xb14>)
 80164b2:	4862      	ldr	r0, [pc, #392]	@ (801663c <tcp_receive+0xb18>)
 80164b4:	f008 f924 	bl	801e700 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80164b8:	687b      	ldr	r3, [r7, #4]
 80164ba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80164bc:	675a      	str	r2, [r3, #116]	@ 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80164be:	4b5a      	ldr	r3, [pc, #360]	@ (8016628 <tcp_receive+0xb04>)
 80164c0:	881b      	ldrh	r3, [r3, #0]
 80164c2:	461a      	mov	r2, r3
 80164c4:	4b59      	ldr	r3, [pc, #356]	@ (801662c <tcp_receive+0xb08>)
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	441a      	add	r2, r3
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 80164ce:	687b      	ldr	r3, [r7, #4]
 80164d0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80164d2:	4b55      	ldr	r3, [pc, #340]	@ (8016628 <tcp_receive+0xb04>)
 80164d4:	881b      	ldrh	r3, [r3, #0]
 80164d6:	429a      	cmp	r2, r3
 80164d8:	d206      	bcs.n	80164e8 <tcp_receive+0x9c4>
 80164da:	4b56      	ldr	r3, [pc, #344]	@ (8016634 <tcp_receive+0xb10>)
 80164dc:	f240 6207 	movw	r2, #1543	@ 0x607
 80164e0:	4957      	ldr	r1, [pc, #348]	@ (8016640 <tcp_receive+0xb1c>)
 80164e2:	4856      	ldr	r0, [pc, #344]	@ (801663c <tcp_receive+0xb18>)
 80164e4:	f008 f90c 	bl	801e700 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80164ec:	4b4e      	ldr	r3, [pc, #312]	@ (8016628 <tcp_receive+0xb04>)
 80164ee:	881b      	ldrh	r3, [r3, #0]
 80164f0:	1ad3      	subs	r3, r2, r3
 80164f2:	b29a      	uxth	r2, r3
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	851a      	strh	r2, [r3, #40]	@ 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80164f8:	6878      	ldr	r0, [r7, #4]
 80164fa:	f7fc ffc5 	bl	8013488 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80164fe:	4b4c      	ldr	r3, [pc, #304]	@ (8016630 <tcp_receive+0xb0c>)
 8016500:	685b      	ldr	r3, [r3, #4]
 8016502:	891b      	ldrh	r3, [r3, #8]
 8016504:	2b00      	cmp	r3, #0
 8016506:	d006      	beq.n	8016516 <tcp_receive+0x9f2>
          recv_data = inseg.p;
 8016508:	4b49      	ldr	r3, [pc, #292]	@ (8016630 <tcp_receive+0xb0c>)
 801650a:	685b      	ldr	r3, [r3, #4]
 801650c:	4a4d      	ldr	r2, [pc, #308]	@ (8016644 <tcp_receive+0xb20>)
 801650e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8016510:	4b47      	ldr	r3, [pc, #284]	@ (8016630 <tcp_receive+0xb0c>)
 8016512:	2200      	movs	r2, #0
 8016514:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016516:	4b46      	ldr	r3, [pc, #280]	@ (8016630 <tcp_receive+0xb0c>)
 8016518:	68db      	ldr	r3, [r3, #12]
 801651a:	899b      	ldrh	r3, [r3, #12]
 801651c:	b29b      	uxth	r3, r3
 801651e:	4618      	mov	r0, r3
 8016520:	f7fa f9bc 	bl	801089c <lwip_htons>
 8016524:	4603      	mov	r3, r0
 8016526:	b2db      	uxtb	r3, r3
 8016528:	f003 0301 	and.w	r3, r3, #1
 801652c:	2b00      	cmp	r3, #0
 801652e:	f000 80b8 	beq.w	80166a2 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8016532:	4b45      	ldr	r3, [pc, #276]	@ (8016648 <tcp_receive+0xb24>)
 8016534:	781b      	ldrb	r3, [r3, #0]
 8016536:	f043 0320 	orr.w	r3, r3, #32
 801653a:	b2da      	uxtb	r2, r3
 801653c:	4b42      	ldr	r3, [pc, #264]	@ (8016648 <tcp_receive+0xb24>)
 801653e:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8016540:	e0af      	b.n	80166a2 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016546:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801654c:	68db      	ldr	r3, [r3, #12]
 801654e:	685b      	ldr	r3, [r3, #4]
 8016550:	4a36      	ldr	r2, [pc, #216]	@ (801662c <tcp_receive+0xb08>)
 8016552:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8016554:	68bb      	ldr	r3, [r7, #8]
 8016556:	891b      	ldrh	r3, [r3, #8]
 8016558:	461c      	mov	r4, r3
 801655a:	68bb      	ldr	r3, [r7, #8]
 801655c:	68db      	ldr	r3, [r3, #12]
 801655e:	899b      	ldrh	r3, [r3, #12]
 8016560:	b29b      	uxth	r3, r3
 8016562:	4618      	mov	r0, r3
 8016564:	f7fa f99a 	bl	801089c <lwip_htons>
 8016568:	4603      	mov	r3, r0
 801656a:	b2db      	uxtb	r3, r3
 801656c:	f003 0303 	and.w	r3, r3, #3
 8016570:	2b00      	cmp	r3, #0
 8016572:	d001      	beq.n	8016578 <tcp_receive+0xa54>
 8016574:	2301      	movs	r3, #1
 8016576:	e000      	b.n	801657a <tcp_receive+0xa56>
 8016578:	2300      	movs	r3, #0
 801657a:	191a      	adds	r2, r3, r4
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016580:	441a      	add	r2, r3
 8016582:	687b      	ldr	r3, [r7, #4]
 8016584:	625a      	str	r2, [r3, #36]	@ 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8016586:	687b      	ldr	r3, [r7, #4]
 8016588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801658a:	461c      	mov	r4, r3
 801658c:	68bb      	ldr	r3, [r7, #8]
 801658e:	891b      	ldrh	r3, [r3, #8]
 8016590:	461d      	mov	r5, r3
 8016592:	68bb      	ldr	r3, [r7, #8]
 8016594:	68db      	ldr	r3, [r3, #12]
 8016596:	899b      	ldrh	r3, [r3, #12]
 8016598:	b29b      	uxth	r3, r3
 801659a:	4618      	mov	r0, r3
 801659c:	f7fa f97e 	bl	801089c <lwip_htons>
 80165a0:	4603      	mov	r3, r0
 80165a2:	b2db      	uxtb	r3, r3
 80165a4:	f003 0303 	and.w	r3, r3, #3
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d001      	beq.n	80165b0 <tcp_receive+0xa8c>
 80165ac:	2301      	movs	r3, #1
 80165ae:	e000      	b.n	80165b2 <tcp_receive+0xa8e>
 80165b0:	2300      	movs	r3, #0
 80165b2:	442b      	add	r3, r5
 80165b4:	429c      	cmp	r4, r3
 80165b6:	d206      	bcs.n	80165c6 <tcp_receive+0xaa2>
 80165b8:	4b1e      	ldr	r3, [pc, #120]	@ (8016634 <tcp_receive+0xb10>)
 80165ba:	f240 622b 	movw	r2, #1579	@ 0x62b
 80165be:	4923      	ldr	r1, [pc, #140]	@ (801664c <tcp_receive+0xb28>)
 80165c0:	481e      	ldr	r0, [pc, #120]	@ (801663c <tcp_receive+0xb18>)
 80165c2:	f008 f89d 	bl	801e700 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80165c6:	68bb      	ldr	r3, [r7, #8]
 80165c8:	891b      	ldrh	r3, [r3, #8]
 80165ca:	461c      	mov	r4, r3
 80165cc:	68bb      	ldr	r3, [r7, #8]
 80165ce:	68db      	ldr	r3, [r3, #12]
 80165d0:	899b      	ldrh	r3, [r3, #12]
 80165d2:	b29b      	uxth	r3, r3
 80165d4:	4618      	mov	r0, r3
 80165d6:	f7fa f961 	bl	801089c <lwip_htons>
 80165da:	4603      	mov	r3, r0
 80165dc:	b2db      	uxtb	r3, r3
 80165de:	f003 0303 	and.w	r3, r3, #3
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d001      	beq.n	80165ea <tcp_receive+0xac6>
 80165e6:	2301      	movs	r3, #1
 80165e8:	e000      	b.n	80165ec <tcp_receive+0xac8>
 80165ea:	2300      	movs	r3, #0
 80165ec:	1919      	adds	r1, r3, r4
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 80165f2:	b28b      	uxth	r3, r1
 80165f4:	1ad3      	subs	r3, r2, r3
 80165f6:	b29a      	uxth	r2, r3
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	851a      	strh	r2, [r3, #40]	@ 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80165fc:	6878      	ldr	r0, [r7, #4]
 80165fe:	f7fc ff43 	bl	8013488 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8016602:	68bb      	ldr	r3, [r7, #8]
 8016604:	685b      	ldr	r3, [r3, #4]
 8016606:	891b      	ldrh	r3, [r3, #8]
 8016608:	2b00      	cmp	r3, #0
 801660a:	d028      	beq.n	801665e <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801660c:	4b0d      	ldr	r3, [pc, #52]	@ (8016644 <tcp_receive+0xb20>)
 801660e:	681b      	ldr	r3, [r3, #0]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d01d      	beq.n	8016650 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 8016614:	4b0b      	ldr	r3, [pc, #44]	@ (8016644 <tcp_receive+0xb20>)
 8016616:	681a      	ldr	r2, [r3, #0]
 8016618:	68bb      	ldr	r3, [r7, #8]
 801661a:	685b      	ldr	r3, [r3, #4]
 801661c:	4619      	mov	r1, r3
 801661e:	4610      	mov	r0, r2
 8016620:	f7fc f8f6 	bl	8012810 <pbuf_cat>
 8016624:	e018      	b.n	8016658 <tcp_receive+0xb34>
 8016626:	bf00      	nop
 8016628:	2001b056 	.word	0x2001b056
 801662c:	2001b04c 	.word	0x2001b04c
 8016630:	2001b02c 	.word	0x2001b02c
 8016634:	08023428 	.word	0x08023428
 8016638:	08023808 	.word	0x08023808
 801663c:	08023474 	.word	0x08023474
 8016640:	08023844 	.word	0x08023844
 8016644:	2001b05c 	.word	0x2001b05c
 8016648:	2001b059 	.word	0x2001b059
 801664c:	08023864 	.word	0x08023864
            } else {
              recv_data = cseg->p;
 8016650:	68bb      	ldr	r3, [r7, #8]
 8016652:	685b      	ldr	r3, [r3, #4]
 8016654:	4a70      	ldr	r2, [pc, #448]	@ (8016818 <tcp_receive+0xcf4>)
 8016656:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8016658:	68bb      	ldr	r3, [r7, #8]
 801665a:	2200      	movs	r2, #0
 801665c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801665e:	68bb      	ldr	r3, [r7, #8]
 8016660:	68db      	ldr	r3, [r3, #12]
 8016662:	899b      	ldrh	r3, [r3, #12]
 8016664:	b29b      	uxth	r3, r3
 8016666:	4618      	mov	r0, r3
 8016668:	f7fa f918 	bl	801089c <lwip_htons>
 801666c:	4603      	mov	r3, r0
 801666e:	b2db      	uxtb	r3, r3
 8016670:	f003 0301 	and.w	r3, r3, #1
 8016674:	2b00      	cmp	r3, #0
 8016676:	d00d      	beq.n	8016694 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8016678:	4b68      	ldr	r3, [pc, #416]	@ (801681c <tcp_receive+0xcf8>)
 801667a:	781b      	ldrb	r3, [r3, #0]
 801667c:	f043 0320 	orr.w	r3, r3, #32
 8016680:	b2da      	uxtb	r2, r3
 8016682:	4b66      	ldr	r3, [pc, #408]	@ (801681c <tcp_receive+0xcf8>)
 8016684:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	7d1b      	ldrb	r3, [r3, #20]
 801668a:	2b04      	cmp	r3, #4
 801668c:	d102      	bne.n	8016694 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	2207      	movs	r2, #7
 8016692:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8016694:	68bb      	ldr	r3, [r7, #8]
 8016696:	681a      	ldr	r2, [r3, #0]
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	675a      	str	r2, [r3, #116]	@ 0x74
          tcp_seg_free(cseg);
 801669c:	68b8      	ldr	r0, [r7, #8]
 801669e:	f7fd fbd4 	bl	8013e4a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80166a6:	2b00      	cmp	r3, #0
 80166a8:	d008      	beq.n	80166bc <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80166ae:	68db      	ldr	r3, [r3, #12]
 80166b0:	685a      	ldr	r2, [r3, #4]
 80166b2:	687b      	ldr	r3, [r7, #4]
 80166b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        while (pcb->ooseq != NULL &&
 80166b6:	429a      	cmp	r2, r3
 80166b8:	f43f af43 	beq.w	8016542 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	8b5b      	ldrh	r3, [r3, #26]
 80166c0:	f003 0301 	and.w	r3, r3, #1
 80166c4:	2b00      	cmp	r3, #0
 80166c6:	d00e      	beq.n	80166e6 <tcp_receive+0xbc2>
 80166c8:	687b      	ldr	r3, [r7, #4]
 80166ca:	8b5b      	ldrh	r3, [r3, #26]
 80166cc:	f023 0301 	bic.w	r3, r3, #1
 80166d0:	b29a      	uxth	r2, r3
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	835a      	strh	r2, [r3, #26]
 80166d6:	687b      	ldr	r3, [r7, #4]
 80166d8:	8b5b      	ldrh	r3, [r3, #26]
 80166da:	f043 0302 	orr.w	r3, r3, #2
 80166de:	b29a      	uxth	r2, r3
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80166e4:	e187      	b.n	80169f6 <tcp_receive+0xed2>
        tcp_ack(pcb);
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	8b5b      	ldrh	r3, [r3, #26]
 80166ea:	f043 0301 	orr.w	r3, r3, #1
 80166ee:	b29a      	uxth	r2, r3
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80166f4:	e17f      	b.n	80169f6 <tcp_receive+0xed2>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80166f6:	687b      	ldr	r3, [r7, #4]
 80166f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80166fa:	2b00      	cmp	r3, #0
 80166fc:	d106      	bne.n	801670c <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80166fe:	4848      	ldr	r0, [pc, #288]	@ (8016820 <tcp_receive+0xcfc>)
 8016700:	f7fd fbbc 	bl	8013e7c <tcp_seg_copy>
 8016704:	4602      	mov	r2, r0
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	675a      	str	r2, [r3, #116]	@ 0x74
 801670a:	e16c      	b.n	80169e6 <tcp_receive+0xec2>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801670c:	2300      	movs	r3, #0
 801670e:	637b      	str	r3, [r7, #52]	@ 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016714:	63bb      	str	r3, [r7, #56]	@ 0x38
 8016716:	e156      	b.n	80169c6 <tcp_receive+0xea2>
            if (seqno == next->tcphdr->seqno) {
 8016718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801671a:	68db      	ldr	r3, [r3, #12]
 801671c:	685a      	ldr	r2, [r3, #4]
 801671e:	4b41      	ldr	r3, [pc, #260]	@ (8016824 <tcp_receive+0xd00>)
 8016720:	681b      	ldr	r3, [r3, #0]
 8016722:	429a      	cmp	r2, r3
 8016724:	d11d      	bne.n	8016762 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8016726:	4b3e      	ldr	r3, [pc, #248]	@ (8016820 <tcp_receive+0xcfc>)
 8016728:	891a      	ldrh	r2, [r3, #8]
 801672a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801672c:	891b      	ldrh	r3, [r3, #8]
 801672e:	429a      	cmp	r2, r3
 8016730:	f240 814e 	bls.w	80169d0 <tcp_receive+0xeac>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016734:	483a      	ldr	r0, [pc, #232]	@ (8016820 <tcp_receive+0xcfc>)
 8016736:	f7fd fba1 	bl	8013e7c <tcp_seg_copy>
 801673a:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801673c:	697b      	ldr	r3, [r7, #20]
 801673e:	2b00      	cmp	r3, #0
 8016740:	f000 8148 	beq.w	80169d4 <tcp_receive+0xeb0>
                  if (prev != NULL) {
 8016744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016746:	2b00      	cmp	r3, #0
 8016748:	d003      	beq.n	8016752 <tcp_receive+0xc2e>
                    prev->next = cseg;
 801674a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801674c:	697a      	ldr	r2, [r7, #20]
 801674e:	601a      	str	r2, [r3, #0]
 8016750:	e002      	b.n	8016758 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8016752:	687b      	ldr	r3, [r7, #4]
 8016754:	697a      	ldr	r2, [r7, #20]
 8016756:	675a      	str	r2, [r3, #116]	@ 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8016758:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801675a:	6978      	ldr	r0, [r7, #20]
 801675c:	f7ff f8de 	bl	801591c <tcp_oos_insert_segment>
                }
                break;
 8016760:	e138      	b.n	80169d4 <tcp_receive+0xeb0>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8016762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016764:	2b00      	cmp	r3, #0
 8016766:	d117      	bne.n	8016798 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8016768:	4b2e      	ldr	r3, [pc, #184]	@ (8016824 <tcp_receive+0xd00>)
 801676a:	681a      	ldr	r2, [r3, #0]
 801676c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801676e:	68db      	ldr	r3, [r3, #12]
 8016770:	685b      	ldr	r3, [r3, #4]
 8016772:	1ad3      	subs	r3, r2, r3
 8016774:	2b00      	cmp	r3, #0
 8016776:	da57      	bge.n	8016828 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8016778:	4829      	ldr	r0, [pc, #164]	@ (8016820 <tcp_receive+0xcfc>)
 801677a:	f7fd fb7f 	bl	8013e7c <tcp_seg_copy>
 801677e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8016780:	69bb      	ldr	r3, [r7, #24]
 8016782:	2b00      	cmp	r3, #0
 8016784:	f000 8128 	beq.w	80169d8 <tcp_receive+0xeb4>
                    pcb->ooseq = cseg;
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	69ba      	ldr	r2, [r7, #24]
 801678c:	675a      	str	r2, [r3, #116]	@ 0x74
                    tcp_oos_insert_segment(cseg, next);
 801678e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016790:	69b8      	ldr	r0, [r7, #24]
 8016792:	f7ff f8c3 	bl	801591c <tcp_oos_insert_segment>
                  }
                  break;
 8016796:	e11f      	b.n	80169d8 <tcp_receive+0xeb4>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8016798:	4b22      	ldr	r3, [pc, #136]	@ (8016824 <tcp_receive+0xd00>)
 801679a:	681a      	ldr	r2, [r3, #0]
 801679c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801679e:	68db      	ldr	r3, [r3, #12]
 80167a0:	685b      	ldr	r3, [r3, #4]
 80167a2:	1ad3      	subs	r3, r2, r3
 80167a4:	3b01      	subs	r3, #1
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	db3e      	blt.n	8016828 <tcp_receive+0xd04>
 80167aa:	4b1e      	ldr	r3, [pc, #120]	@ (8016824 <tcp_receive+0xd00>)
 80167ac:	681a      	ldr	r2, [r3, #0]
 80167ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80167b0:	68db      	ldr	r3, [r3, #12]
 80167b2:	685b      	ldr	r3, [r3, #4]
 80167b4:	1ad3      	subs	r3, r2, r3
 80167b6:	3301      	adds	r3, #1
 80167b8:	2b00      	cmp	r3, #0
 80167ba:	dc35      	bgt.n	8016828 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80167bc:	4818      	ldr	r0, [pc, #96]	@ (8016820 <tcp_receive+0xcfc>)
 80167be:	f7fd fb5d 	bl	8013e7c <tcp_seg_copy>
 80167c2:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80167c4:	69fb      	ldr	r3, [r7, #28]
 80167c6:	2b00      	cmp	r3, #0
 80167c8:	f000 8108 	beq.w	80169dc <tcp_receive+0xeb8>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 80167cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167ce:	68db      	ldr	r3, [r3, #12]
 80167d0:	685b      	ldr	r3, [r3, #4]
 80167d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80167d4:	8912      	ldrh	r2, [r2, #8]
 80167d6:	441a      	add	r2, r3
 80167d8:	4b12      	ldr	r3, [pc, #72]	@ (8016824 <tcp_receive+0xd00>)
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	1ad3      	subs	r3, r2, r3
 80167de:	2b00      	cmp	r3, #0
 80167e0:	dd12      	ble.n	8016808 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 80167e2:	4b10      	ldr	r3, [pc, #64]	@ (8016824 <tcp_receive+0xd00>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	b29a      	uxth	r2, r3
 80167e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167ea:	68db      	ldr	r3, [r3, #12]
 80167ec:	685b      	ldr	r3, [r3, #4]
 80167ee:	b29b      	uxth	r3, r3
 80167f0:	1ad3      	subs	r3, r2, r3
 80167f2:	b29a      	uxth	r2, r3
 80167f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167f6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80167f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167fa:	685a      	ldr	r2, [r3, #4]
 80167fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80167fe:	891b      	ldrh	r3, [r3, #8]
 8016800:	4619      	mov	r1, r3
 8016802:	4610      	mov	r0, r2
 8016804:	f7fb fdb0 	bl	8012368 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8016808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801680a:	69fa      	ldr	r2, [r7, #28]
 801680c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801680e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8016810:	69f8      	ldr	r0, [r7, #28]
 8016812:	f7ff f883 	bl	801591c <tcp_oos_insert_segment>
                  }
                  break;
 8016816:	e0e1      	b.n	80169dc <tcp_receive+0xeb8>
 8016818:	2001b05c 	.word	0x2001b05c
 801681c:	2001b059 	.word	0x2001b059
 8016820:	2001b02c 	.word	0x2001b02c
 8016824:	2001b04c 	.word	0x2001b04c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8016828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801682a:	637b      	str	r3, [r7, #52]	@ 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801682c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801682e:	681b      	ldr	r3, [r3, #0]
 8016830:	2b00      	cmp	r3, #0
 8016832:	f040 80c5 	bne.w	80169c0 <tcp_receive+0xe9c>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8016836:	4b7f      	ldr	r3, [pc, #508]	@ (8016a34 <tcp_receive+0xf10>)
 8016838:	681a      	ldr	r2, [r3, #0]
 801683a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801683c:	68db      	ldr	r3, [r3, #12]
 801683e:	685b      	ldr	r3, [r3, #4]
 8016840:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8016842:	2b00      	cmp	r3, #0
 8016844:	f340 80bc 	ble.w	80169c0 <tcp_receive+0xe9c>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801684a:	68db      	ldr	r3, [r3, #12]
 801684c:	899b      	ldrh	r3, [r3, #12]
 801684e:	b29b      	uxth	r3, r3
 8016850:	4618      	mov	r0, r3
 8016852:	f7fa f823 	bl	801089c <lwip_htons>
 8016856:	4603      	mov	r3, r0
 8016858:	b2db      	uxtb	r3, r3
 801685a:	f003 0301 	and.w	r3, r3, #1
 801685e:	2b00      	cmp	r3, #0
 8016860:	f040 80be 	bne.w	80169e0 <tcp_receive+0xebc>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8016864:	4874      	ldr	r0, [pc, #464]	@ (8016a38 <tcp_receive+0xf14>)
 8016866:	f7fd fb09 	bl	8013e7c <tcp_seg_copy>
 801686a:	4602      	mov	r2, r0
 801686c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801686e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8016870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	2b00      	cmp	r3, #0
 8016876:	f000 80b5 	beq.w	80169e4 <tcp_receive+0xec0>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801687a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801687c:	68db      	ldr	r3, [r3, #12]
 801687e:	685b      	ldr	r3, [r3, #4]
 8016880:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8016882:	8912      	ldrh	r2, [r2, #8]
 8016884:	441a      	add	r2, r3
 8016886:	4b6b      	ldr	r3, [pc, #428]	@ (8016a34 <tcp_receive+0xf10>)
 8016888:	681b      	ldr	r3, [r3, #0]
 801688a:	1ad3      	subs	r3, r2, r3
 801688c:	2b00      	cmp	r3, #0
 801688e:	dd12      	ble.n	80168b6 <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8016890:	4b68      	ldr	r3, [pc, #416]	@ (8016a34 <tcp_receive+0xf10>)
 8016892:	681b      	ldr	r3, [r3, #0]
 8016894:	b29a      	uxth	r2, r3
 8016896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016898:	68db      	ldr	r3, [r3, #12]
 801689a:	685b      	ldr	r3, [r3, #4]
 801689c:	b29b      	uxth	r3, r3
 801689e:	1ad3      	subs	r3, r2, r3
 80168a0:	b29a      	uxth	r2, r3
 80168a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168a4:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80168a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168a8:	685a      	ldr	r2, [r3, #4]
 80168aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168ac:	891b      	ldrh	r3, [r3, #8]
 80168ae:	4619      	mov	r1, r3
 80168b0:	4610      	mov	r0, r2
 80168b2:	f7fb fd59 	bl	8012368 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80168b6:	4b61      	ldr	r3, [pc, #388]	@ (8016a3c <tcp_receive+0xf18>)
 80168b8:	881b      	ldrh	r3, [r3, #0]
 80168ba:	461a      	mov	r2, r3
 80168bc:	4b5d      	ldr	r3, [pc, #372]	@ (8016a34 <tcp_receive+0xf10>)
 80168be:	681b      	ldr	r3, [r3, #0]
 80168c0:	441a      	add	r2, r3
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80168c6:	6879      	ldr	r1, [r7, #4]
 80168c8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80168ca:	440b      	add	r3, r1
 80168cc:	1ad3      	subs	r3, r2, r3
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	f340 8088 	ble.w	80169e4 <tcp_receive+0xec0>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80168d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168d6:	681b      	ldr	r3, [r3, #0]
 80168d8:	68db      	ldr	r3, [r3, #12]
 80168da:	899b      	ldrh	r3, [r3, #12]
 80168dc:	b29b      	uxth	r3, r3
 80168de:	4618      	mov	r0, r3
 80168e0:	f7f9 ffdc 	bl	801089c <lwip_htons>
 80168e4:	4603      	mov	r3, r0
 80168e6:	b2db      	uxtb	r3, r3
 80168e8:	f003 0301 	and.w	r3, r3, #1
 80168ec:	2b00      	cmp	r3, #0
 80168ee:	d021      	beq.n	8016934 <tcp_receive+0xe10>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80168f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	68db      	ldr	r3, [r3, #12]
 80168f6:	899b      	ldrh	r3, [r3, #12]
 80168f8:	b29b      	uxth	r3, r3
 80168fa:	b21b      	sxth	r3, r3
 80168fc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8016900:	b21c      	sxth	r4, r3
 8016902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016904:	681b      	ldr	r3, [r3, #0]
 8016906:	68db      	ldr	r3, [r3, #12]
 8016908:	899b      	ldrh	r3, [r3, #12]
 801690a:	b29b      	uxth	r3, r3
 801690c:	4618      	mov	r0, r3
 801690e:	f7f9 ffc5 	bl	801089c <lwip_htons>
 8016912:	4603      	mov	r3, r0
 8016914:	b2db      	uxtb	r3, r3
 8016916:	f003 033e 	and.w	r3, r3, #62	@ 0x3e
 801691a:	b29b      	uxth	r3, r3
 801691c:	4618      	mov	r0, r3
 801691e:	f7f9 ffbd 	bl	801089c <lwip_htons>
 8016922:	4603      	mov	r3, r0
 8016924:	b21b      	sxth	r3, r3
 8016926:	4323      	orrs	r3, r4
 8016928:	b21a      	sxth	r2, r3
 801692a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801692c:	681b      	ldr	r3, [r3, #0]
 801692e:	68db      	ldr	r3, [r3, #12]
 8016930:	b292      	uxth	r2, r2
 8016932:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8016934:	687b      	ldr	r3, [r7, #4]
 8016936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016938:	b29a      	uxth	r2, r3
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801693e:	4413      	add	r3, r2
 8016940:	b299      	uxth	r1, r3
 8016942:	4b3c      	ldr	r3, [pc, #240]	@ (8016a34 <tcp_receive+0xf10>)
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	b29a      	uxth	r2, r3
 8016948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801694a:	681b      	ldr	r3, [r3, #0]
 801694c:	1a8a      	subs	r2, r1, r2
 801694e:	b292      	uxth	r2, r2
 8016950:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8016952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016954:	681b      	ldr	r3, [r3, #0]
 8016956:	685a      	ldr	r2, [r3, #4]
 8016958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	891b      	ldrh	r3, [r3, #8]
 801695e:	4619      	mov	r1, r3
 8016960:	4610      	mov	r0, r2
 8016962:	f7fb fd01 	bl	8012368 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8016966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016968:	681b      	ldr	r3, [r3, #0]
 801696a:	891c      	ldrh	r4, [r3, #8]
 801696c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	68db      	ldr	r3, [r3, #12]
 8016972:	899b      	ldrh	r3, [r3, #12]
 8016974:	b29b      	uxth	r3, r3
 8016976:	4618      	mov	r0, r3
 8016978:	f7f9 ff90 	bl	801089c <lwip_htons>
 801697c:	4603      	mov	r3, r0
 801697e:	b2db      	uxtb	r3, r3
 8016980:	f003 0303 	and.w	r3, r3, #3
 8016984:	2b00      	cmp	r3, #0
 8016986:	d001      	beq.n	801698c <tcp_receive+0xe68>
 8016988:	2301      	movs	r3, #1
 801698a:	e000      	b.n	801698e <tcp_receive+0xe6a>
 801698c:	2300      	movs	r3, #0
 801698e:	4423      	add	r3, r4
 8016990:	b29a      	uxth	r2, r3
 8016992:	4b2a      	ldr	r3, [pc, #168]	@ (8016a3c <tcp_receive+0xf18>)
 8016994:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016996:	4b29      	ldr	r3, [pc, #164]	@ (8016a3c <tcp_receive+0xf18>)
 8016998:	881b      	ldrh	r3, [r3, #0]
 801699a:	461a      	mov	r2, r3
 801699c:	4b25      	ldr	r3, [pc, #148]	@ (8016a34 <tcp_receive+0xf10>)
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	441a      	add	r2, r3
 80169a2:	687b      	ldr	r3, [r7, #4]
 80169a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80169a6:	6879      	ldr	r1, [r7, #4]
 80169a8:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 80169aa:	440b      	add	r3, r1
 80169ac:	429a      	cmp	r2, r3
 80169ae:	d019      	beq.n	80169e4 <tcp_receive+0xec0>
 80169b0:	4b23      	ldr	r3, [pc, #140]	@ (8016a40 <tcp_receive+0xf1c>)
 80169b2:	f44f 62df 	mov.w	r2, #1784	@ 0x6f8
 80169b6:	4923      	ldr	r1, [pc, #140]	@ (8016a44 <tcp_receive+0xf20>)
 80169b8:	4823      	ldr	r0, [pc, #140]	@ (8016a48 <tcp_receive+0xf24>)
 80169ba:	f007 fea1 	bl	801e700 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80169be:	e011      	b.n	80169e4 <tcp_receive+0xec0>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80169c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80169c2:	681b      	ldr	r3, [r3, #0]
 80169c4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80169c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	f47f aea5 	bne.w	8016718 <tcp_receive+0xbf4>
 80169ce:	e00a      	b.n	80169e6 <tcp_receive+0xec2>
                break;
 80169d0:	bf00      	nop
 80169d2:	e008      	b.n	80169e6 <tcp_receive+0xec2>
                break;
 80169d4:	bf00      	nop
 80169d6:	e006      	b.n	80169e6 <tcp_receive+0xec2>
                  break;
 80169d8:	bf00      	nop
 80169da:	e004      	b.n	80169e6 <tcp_receive+0xec2>
                  break;
 80169dc:	bf00      	nop
 80169de:	e002      	b.n	80169e6 <tcp_receive+0xec2>
                  break;
 80169e0:	bf00      	nop
 80169e2:	e000      	b.n	80169e6 <tcp_receive+0xec2>
                break;
 80169e4:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80169e6:	6878      	ldr	r0, [r7, #4]
 80169e8:	f001 fa30 	bl	8017e4c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80169ec:	e003      	b.n	80169f6 <tcp_receive+0xed2>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80169ee:	6878      	ldr	r0, [r7, #4]
 80169f0:	f001 fa2c 	bl	8017e4c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80169f4:	e01a      	b.n	8016a2c <tcp_receive+0xf08>
 80169f6:	e019      	b.n	8016a2c <tcp_receive+0xf08>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80169f8:	4b0e      	ldr	r3, [pc, #56]	@ (8016a34 <tcp_receive+0xf10>)
 80169fa:	681a      	ldr	r2, [r3, #0]
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a00:	1ad3      	subs	r3, r2, r3
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	db0a      	blt.n	8016a1c <tcp_receive+0xef8>
 8016a06:	4b0b      	ldr	r3, [pc, #44]	@ (8016a34 <tcp_receive+0xf10>)
 8016a08:	681a      	ldr	r2, [r3, #0]
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a0e:	6879      	ldr	r1, [r7, #4]
 8016a10:	8d09      	ldrh	r1, [r1, #40]	@ 0x28
 8016a12:	440b      	add	r3, r1
 8016a14:	1ad3      	subs	r3, r2, r3
 8016a16:	3301      	adds	r3, #1
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	dd07      	ble.n	8016a2c <tcp_receive+0xf08>
      tcp_ack_now(pcb);
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	8b5b      	ldrh	r3, [r3, #26]
 8016a20:	f043 0302 	orr.w	r3, r3, #2
 8016a24:	b29a      	uxth	r2, r3
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8016a2a:	e7ff      	b.n	8016a2c <tcp_receive+0xf08>
 8016a2c:	bf00      	nop
 8016a2e:	3750      	adds	r7, #80	@ 0x50
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bdb0      	pop	{r4, r5, r7, pc}
 8016a34:	2001b04c 	.word	0x2001b04c
 8016a38:	2001b02c 	.word	0x2001b02c
 8016a3c:	2001b056 	.word	0x2001b056
 8016a40:	08023428 	.word	0x08023428
 8016a44:	080237d0 	.word	0x080237d0
 8016a48:	08023474 	.word	0x08023474

08016a4c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8016a4c:	b480      	push	{r7}
 8016a4e:	b083      	sub	sp, #12
 8016a50:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8016a52:	4b15      	ldr	r3, [pc, #84]	@ (8016aa8 <tcp_get_next_optbyte+0x5c>)
 8016a54:	881b      	ldrh	r3, [r3, #0]
 8016a56:	1c5a      	adds	r2, r3, #1
 8016a58:	b291      	uxth	r1, r2
 8016a5a:	4a13      	ldr	r2, [pc, #76]	@ (8016aa8 <tcp_get_next_optbyte+0x5c>)
 8016a5c:	8011      	strh	r1, [r2, #0]
 8016a5e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8016a60:	4b12      	ldr	r3, [pc, #72]	@ (8016aac <tcp_get_next_optbyte+0x60>)
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d004      	beq.n	8016a72 <tcp_get_next_optbyte+0x26>
 8016a68:	4b11      	ldr	r3, [pc, #68]	@ (8016ab0 <tcp_get_next_optbyte+0x64>)
 8016a6a:	881b      	ldrh	r3, [r3, #0]
 8016a6c:	88fa      	ldrh	r2, [r7, #6]
 8016a6e:	429a      	cmp	r2, r3
 8016a70:	d208      	bcs.n	8016a84 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8016a72:	4b10      	ldr	r3, [pc, #64]	@ (8016ab4 <tcp_get_next_optbyte+0x68>)
 8016a74:	681b      	ldr	r3, [r3, #0]
 8016a76:	3314      	adds	r3, #20
 8016a78:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8016a7a:	88fb      	ldrh	r3, [r7, #6]
 8016a7c:	683a      	ldr	r2, [r7, #0]
 8016a7e:	4413      	add	r3, r2
 8016a80:	781b      	ldrb	r3, [r3, #0]
 8016a82:	e00b      	b.n	8016a9c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8016a84:	88fb      	ldrh	r3, [r7, #6]
 8016a86:	b2da      	uxtb	r2, r3
 8016a88:	4b09      	ldr	r3, [pc, #36]	@ (8016ab0 <tcp_get_next_optbyte+0x64>)
 8016a8a:	881b      	ldrh	r3, [r3, #0]
 8016a8c:	b2db      	uxtb	r3, r3
 8016a8e:	1ad3      	subs	r3, r2, r3
 8016a90:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8016a92:	4b06      	ldr	r3, [pc, #24]	@ (8016aac <tcp_get_next_optbyte+0x60>)
 8016a94:	681a      	ldr	r2, [r3, #0]
 8016a96:	797b      	ldrb	r3, [r7, #5]
 8016a98:	4413      	add	r3, r2
 8016a9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016a9c:	4618      	mov	r0, r3
 8016a9e:	370c      	adds	r7, #12
 8016aa0:	46bd      	mov	sp, r7
 8016aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa6:	4770      	bx	lr
 8016aa8:	2001b048 	.word	0x2001b048
 8016aac:	2001b044 	.word	0x2001b044
 8016ab0:	2001b042 	.word	0x2001b042
 8016ab4:	2001b03c 	.word	0x2001b03c

08016ab8 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b084      	sub	sp, #16
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d106      	bne.n	8016ad4 <tcp_parseopt+0x1c>
 8016ac6:	4b32      	ldr	r3, [pc, #200]	@ (8016b90 <tcp_parseopt+0xd8>)
 8016ac8:	f240 727d 	movw	r2, #1917	@ 0x77d
 8016acc:	4931      	ldr	r1, [pc, #196]	@ (8016b94 <tcp_parseopt+0xdc>)
 8016ace:	4832      	ldr	r0, [pc, #200]	@ (8016b98 <tcp_parseopt+0xe0>)
 8016ad0:	f007 fe16 	bl	801e700 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8016ad4:	4b31      	ldr	r3, [pc, #196]	@ (8016b9c <tcp_parseopt+0xe4>)
 8016ad6:	881b      	ldrh	r3, [r3, #0]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d056      	beq.n	8016b8a <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016adc:	4b30      	ldr	r3, [pc, #192]	@ (8016ba0 <tcp_parseopt+0xe8>)
 8016ade:	2200      	movs	r2, #0
 8016ae0:	801a      	strh	r2, [r3, #0]
 8016ae2:	e046      	b.n	8016b72 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8016ae4:	f7ff ffb2 	bl	8016a4c <tcp_get_next_optbyte>
 8016ae8:	4603      	mov	r3, r0
 8016aea:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8016aec:	7bfb      	ldrb	r3, [r7, #15]
 8016aee:	2b02      	cmp	r3, #2
 8016af0:	d006      	beq.n	8016b00 <tcp_parseopt+0x48>
 8016af2:	2b02      	cmp	r3, #2
 8016af4:	dc2a      	bgt.n	8016b4c <tcp_parseopt+0x94>
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d042      	beq.n	8016b80 <tcp_parseopt+0xc8>
 8016afa:	2b01      	cmp	r3, #1
 8016afc:	d038      	beq.n	8016b70 <tcp_parseopt+0xb8>
 8016afe:	e025      	b.n	8016b4c <tcp_parseopt+0x94>
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8016b00:	f7ff ffa4 	bl	8016a4c <tcp_get_next_optbyte>
 8016b04:	4603      	mov	r3, r0
 8016b06:	2b04      	cmp	r3, #4
 8016b08:	d13c      	bne.n	8016b84 <tcp_parseopt+0xcc>
 8016b0a:	4b25      	ldr	r3, [pc, #148]	@ (8016ba0 <tcp_parseopt+0xe8>)
 8016b0c:	881b      	ldrh	r3, [r3, #0]
 8016b0e:	3301      	adds	r3, #1
 8016b10:	4a22      	ldr	r2, [pc, #136]	@ (8016b9c <tcp_parseopt+0xe4>)
 8016b12:	8812      	ldrh	r2, [r2, #0]
 8016b14:	4293      	cmp	r3, r2
 8016b16:	da35      	bge.n	8016b84 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8016b18:	f7ff ff98 	bl	8016a4c <tcp_get_next_optbyte>
 8016b1c:	4603      	mov	r3, r0
 8016b1e:	021b      	lsls	r3, r3, #8
 8016b20:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8016b22:	f7ff ff93 	bl	8016a4c <tcp_get_next_optbyte>
 8016b26:	4603      	mov	r3, r0
 8016b28:	461a      	mov	r2, r3
 8016b2a:	89bb      	ldrh	r3, [r7, #12]
 8016b2c:	4313      	orrs	r3, r2
 8016b2e:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8016b30:	89bb      	ldrh	r3, [r7, #12]
 8016b32:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8016b36:	d804      	bhi.n	8016b42 <tcp_parseopt+0x8a>
 8016b38:	89bb      	ldrh	r3, [r7, #12]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d001      	beq.n	8016b42 <tcp_parseopt+0x8a>
 8016b3e:	89ba      	ldrh	r2, [r7, #12]
 8016b40:	e001      	b.n	8016b46 <tcp_parseopt+0x8e>
 8016b42:	f44f 7206 	mov.w	r2, #536	@ 0x218
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	865a      	strh	r2, [r3, #50]	@ 0x32
          break;
 8016b4a:	e012      	b.n	8016b72 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8016b4c:	f7ff ff7e 	bl	8016a4c <tcp_get_next_optbyte>
 8016b50:	4603      	mov	r3, r0
 8016b52:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8016b54:	7afb      	ldrb	r3, [r7, #11]
 8016b56:	2b01      	cmp	r3, #1
 8016b58:	d916      	bls.n	8016b88 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8016b5a:	7afb      	ldrb	r3, [r7, #11]
 8016b5c:	b29a      	uxth	r2, r3
 8016b5e:	4b10      	ldr	r3, [pc, #64]	@ (8016ba0 <tcp_parseopt+0xe8>)
 8016b60:	881b      	ldrh	r3, [r3, #0]
 8016b62:	4413      	add	r3, r2
 8016b64:	b29b      	uxth	r3, r3
 8016b66:	3b02      	subs	r3, #2
 8016b68:	b29a      	uxth	r2, r3
 8016b6a:	4b0d      	ldr	r3, [pc, #52]	@ (8016ba0 <tcp_parseopt+0xe8>)
 8016b6c:	801a      	strh	r2, [r3, #0]
 8016b6e:	e000      	b.n	8016b72 <tcp_parseopt+0xba>
          break;
 8016b70:	bf00      	nop
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8016b72:	4b0b      	ldr	r3, [pc, #44]	@ (8016ba0 <tcp_parseopt+0xe8>)
 8016b74:	881a      	ldrh	r2, [r3, #0]
 8016b76:	4b09      	ldr	r3, [pc, #36]	@ (8016b9c <tcp_parseopt+0xe4>)
 8016b78:	881b      	ldrh	r3, [r3, #0]
 8016b7a:	429a      	cmp	r2, r3
 8016b7c:	d3b2      	bcc.n	8016ae4 <tcp_parseopt+0x2c>
 8016b7e:	e004      	b.n	8016b8a <tcp_parseopt+0xd2>
          return;
 8016b80:	bf00      	nop
 8016b82:	e002      	b.n	8016b8a <tcp_parseopt+0xd2>
            return;
 8016b84:	bf00      	nop
 8016b86:	e000      	b.n	8016b8a <tcp_parseopt+0xd2>
            return;
 8016b88:	bf00      	nop
      }
    }
  }
}
 8016b8a:	3710      	adds	r7, #16
 8016b8c:	46bd      	mov	sp, r7
 8016b8e:	bd80      	pop	{r7, pc}
 8016b90:	08023428 	.word	0x08023428
 8016b94:	0802388c 	.word	0x0802388c
 8016b98:	08023474 	.word	0x08023474
 8016b9c:	2001b040 	.word	0x2001b040
 8016ba0:	2001b048 	.word	0x2001b048

08016ba4 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8016ba4:	b480      	push	{r7}
 8016ba6:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8016ba8:	4b05      	ldr	r3, [pc, #20]	@ (8016bc0 <tcp_trigger_input_pcb_close+0x1c>)
 8016baa:	781b      	ldrb	r3, [r3, #0]
 8016bac:	f043 0310 	orr.w	r3, r3, #16
 8016bb0:	b2da      	uxtb	r2, r3
 8016bb2:	4b03      	ldr	r3, [pc, #12]	@ (8016bc0 <tcp_trigger_input_pcb_close+0x1c>)
 8016bb4:	701a      	strb	r2, [r3, #0]
}
 8016bb6:	bf00      	nop
 8016bb8:	46bd      	mov	sp, r7
 8016bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bbe:	4770      	bx	lr
 8016bc0:	2001b059 	.word	0x2001b059

08016bc4 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8016bc4:	b580      	push	{r7, lr}
 8016bc6:	b084      	sub	sp, #16
 8016bc8:	af00      	add	r7, sp, #0
 8016bca:	60f8      	str	r0, [r7, #12]
 8016bcc:	60b9      	str	r1, [r7, #8]
 8016bce:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	2b00      	cmp	r3, #0
 8016bd4:	d00a      	beq.n	8016bec <tcp_route+0x28>
 8016bd6:	68fb      	ldr	r3, [r7, #12]
 8016bd8:	7a1b      	ldrb	r3, [r3, #8]
 8016bda:	2b00      	cmp	r3, #0
 8016bdc:	d006      	beq.n	8016bec <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	7a1b      	ldrb	r3, [r3, #8]
 8016be2:	4618      	mov	r0, r3
 8016be4:	f7fb f9b8 	bl	8011f58 <netif_get_by_index>
 8016be8:	4603      	mov	r3, r0
 8016bea:	e003      	b.n	8016bf4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8016bec:	6878      	ldr	r0, [r7, #4]
 8016bee:	f005 f8e9 	bl	801bdc4 <ip4_route>
 8016bf2:	4603      	mov	r3, r0
  }
}
 8016bf4:	4618      	mov	r0, r3
 8016bf6:	3710      	adds	r7, #16
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}

08016bfc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8016bfc:	b590      	push	{r4, r7, lr}
 8016bfe:	b087      	sub	sp, #28
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	60f8      	str	r0, [r7, #12]
 8016c04:	60b9      	str	r1, [r7, #8]
 8016c06:	603b      	str	r3, [r7, #0]
 8016c08:	4613      	mov	r3, r2
 8016c0a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d105      	bne.n	8016c1e <tcp_create_segment+0x22>
 8016c12:	4b43      	ldr	r3, [pc, #268]	@ (8016d20 <tcp_create_segment+0x124>)
 8016c14:	22a3      	movs	r2, #163	@ 0xa3
 8016c16:	4943      	ldr	r1, [pc, #268]	@ (8016d24 <tcp_create_segment+0x128>)
 8016c18:	4843      	ldr	r0, [pc, #268]	@ (8016d28 <tcp_create_segment+0x12c>)
 8016c1a:	f007 fd71 	bl	801e700 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8016c1e:	68bb      	ldr	r3, [r7, #8]
 8016c20:	2b00      	cmp	r3, #0
 8016c22:	d105      	bne.n	8016c30 <tcp_create_segment+0x34>
 8016c24:	4b3e      	ldr	r3, [pc, #248]	@ (8016d20 <tcp_create_segment+0x124>)
 8016c26:	22a4      	movs	r2, #164	@ 0xa4
 8016c28:	4940      	ldr	r1, [pc, #256]	@ (8016d2c <tcp_create_segment+0x130>)
 8016c2a:	483f      	ldr	r0, [pc, #252]	@ (8016d28 <tcp_create_segment+0x12c>)
 8016c2c:	f007 fd68 	bl	801e700 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016c30:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8016c34:	009b      	lsls	r3, r3, #2
 8016c36:	b2db      	uxtb	r3, r3
 8016c38:	f003 0304 	and.w	r3, r3, #4
 8016c3c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8016c3e:	2003      	movs	r0, #3
 8016c40:	f7fa fdf2 	bl	8011828 <memp_malloc>
 8016c44:	6138      	str	r0, [r7, #16]
 8016c46:	693b      	ldr	r3, [r7, #16]
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d104      	bne.n	8016c56 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8016c4c:	68b8      	ldr	r0, [r7, #8]
 8016c4e:	f7fb fd11 	bl	8012674 <pbuf_free>
    return NULL;
 8016c52:	2300      	movs	r3, #0
 8016c54:	e060      	b.n	8016d18 <tcp_create_segment+0x11c>
  }
  seg->flags = optflags;
 8016c56:	693b      	ldr	r3, [r7, #16]
 8016c58:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8016c5c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8016c5e:	693b      	ldr	r3, [r7, #16]
 8016c60:	2200      	movs	r2, #0
 8016c62:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8016c64:	693b      	ldr	r3, [r7, #16]
 8016c66:	68ba      	ldr	r2, [r7, #8]
 8016c68:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8016c6a:	68bb      	ldr	r3, [r7, #8]
 8016c6c:	891a      	ldrh	r2, [r3, #8]
 8016c6e:	7dfb      	ldrb	r3, [r7, #23]
 8016c70:	b29b      	uxth	r3, r3
 8016c72:	429a      	cmp	r2, r3
 8016c74:	d205      	bcs.n	8016c82 <tcp_create_segment+0x86>
 8016c76:	4b2a      	ldr	r3, [pc, #168]	@ (8016d20 <tcp_create_segment+0x124>)
 8016c78:	22b0      	movs	r2, #176	@ 0xb0
 8016c7a:	492d      	ldr	r1, [pc, #180]	@ (8016d30 <tcp_create_segment+0x134>)
 8016c7c:	482a      	ldr	r0, [pc, #168]	@ (8016d28 <tcp_create_segment+0x12c>)
 8016c7e:	f007 fd3f 	bl	801e700 <iprintf>
  seg->len = p->tot_len - optlen;
 8016c82:	68bb      	ldr	r3, [r7, #8]
 8016c84:	891a      	ldrh	r2, [r3, #8]
 8016c86:	7dfb      	ldrb	r3, [r7, #23]
 8016c88:	b29b      	uxth	r3, r3
 8016c8a:	1ad3      	subs	r3, r2, r3
 8016c8c:	b29a      	uxth	r2, r3
 8016c8e:	693b      	ldr	r3, [r7, #16]
 8016c90:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8016c92:	2114      	movs	r1, #20
 8016c94:	68b8      	ldr	r0, [r7, #8]
 8016c96:	f7fb fc57 	bl	8012548 <pbuf_add_header>
 8016c9a:	4603      	mov	r3, r0
 8016c9c:	2b00      	cmp	r3, #0
 8016c9e:	d004      	beq.n	8016caa <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8016ca0:	6938      	ldr	r0, [r7, #16]
 8016ca2:	f7fd f8d2 	bl	8013e4a <tcp_seg_free>
    return NULL;
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	e036      	b.n	8016d18 <tcp_create_segment+0x11c>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8016caa:	693b      	ldr	r3, [r7, #16]
 8016cac:	685b      	ldr	r3, [r3, #4]
 8016cae:	685a      	ldr	r2, [r3, #4]
 8016cb0:	693b      	ldr	r3, [r7, #16]
 8016cb2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	8ada      	ldrh	r2, [r3, #22]
 8016cb8:	693b      	ldr	r3, [r7, #16]
 8016cba:	68dc      	ldr	r4, [r3, #12]
 8016cbc:	4610      	mov	r0, r2
 8016cbe:	f7f9 fded 	bl	801089c <lwip_htons>
 8016cc2:	4603      	mov	r3, r0
 8016cc4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8016cc6:	68fb      	ldr	r3, [r7, #12]
 8016cc8:	8b1a      	ldrh	r2, [r3, #24]
 8016cca:	693b      	ldr	r3, [r7, #16]
 8016ccc:	68dc      	ldr	r4, [r3, #12]
 8016cce:	4610      	mov	r0, r2
 8016cd0:	f7f9 fde4 	bl	801089c <lwip_htons>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8016cd8:	693b      	ldr	r3, [r7, #16]
 8016cda:	68dc      	ldr	r4, [r3, #12]
 8016cdc:	6838      	ldr	r0, [r7, #0]
 8016cde:	f7f9 fdf2 	bl	80108c6 <lwip_htonl>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8016ce6:	7dfb      	ldrb	r3, [r7, #23]
 8016ce8:	089b      	lsrs	r3, r3, #2
 8016cea:	b2db      	uxtb	r3, r3
 8016cec:	3305      	adds	r3, #5
 8016cee:	b29b      	uxth	r3, r3
 8016cf0:	031b      	lsls	r3, r3, #12
 8016cf2:	b29a      	uxth	r2, r3
 8016cf4:	79fb      	ldrb	r3, [r7, #7]
 8016cf6:	b29b      	uxth	r3, r3
 8016cf8:	4313      	orrs	r3, r2
 8016cfa:	b29a      	uxth	r2, r3
 8016cfc:	693b      	ldr	r3, [r7, #16]
 8016cfe:	68dc      	ldr	r4, [r3, #12]
 8016d00:	4610      	mov	r0, r2
 8016d02:	f7f9 fdcb 	bl	801089c <lwip_htons>
 8016d06:	4603      	mov	r3, r0
 8016d08:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8016d0a:	693b      	ldr	r3, [r7, #16]
 8016d0c:	68db      	ldr	r3, [r3, #12]
 8016d0e:	2200      	movs	r2, #0
 8016d10:	749a      	strb	r2, [r3, #18]
 8016d12:	2200      	movs	r2, #0
 8016d14:	74da      	strb	r2, [r3, #19]
  return seg;
 8016d16:	693b      	ldr	r3, [r7, #16]
}
 8016d18:	4618      	mov	r0, r3
 8016d1a:	371c      	adds	r7, #28
 8016d1c:	46bd      	mov	sp, r7
 8016d1e:	bd90      	pop	{r4, r7, pc}
 8016d20:	080238a8 	.word	0x080238a8
 8016d24:	080238dc 	.word	0x080238dc
 8016d28:	080238fc 	.word	0x080238fc
 8016d2c:	08023924 	.word	0x08023924
 8016d30:	08023948 	.word	0x08023948

08016d34 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016d34:	b590      	push	{r4, r7, lr}
 8016d36:	b08b      	sub	sp, #44	@ 0x2c
 8016d38:	af02      	add	r7, sp, #8
 8016d3a:	6078      	str	r0, [r7, #4]
 8016d3c:	460b      	mov	r3, r1
 8016d3e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016d40:	2300      	movs	r3, #0
 8016d42:	61fb      	str	r3, [r7, #28]
 8016d44:	2300      	movs	r3, #0
 8016d46:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8016d48:	2300      	movs	r3, #0
 8016d4a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d106      	bne.n	8016d60 <tcp_split_unsent_seg+0x2c>
 8016d52:	4b95      	ldr	r3, [pc, #596]	@ (8016fa8 <tcp_split_unsent_seg+0x274>)
 8016d54:	f240 324b 	movw	r2, #843	@ 0x34b
 8016d58:	4994      	ldr	r1, [pc, #592]	@ (8016fac <tcp_split_unsent_seg+0x278>)
 8016d5a:	4895      	ldr	r0, [pc, #596]	@ (8016fb0 <tcp_split_unsent_seg+0x27c>)
 8016d5c:	f007 fcd0 	bl	801e700 <iprintf>

  useg = pcb->unsent;
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016d64:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8016d66:	697b      	ldr	r3, [r7, #20]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d102      	bne.n	8016d72 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016d6c:	f04f 33ff 	mov.w	r3, #4294967295
 8016d70:	e116      	b.n	8016fa0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016d72:	887b      	ldrh	r3, [r7, #2]
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d109      	bne.n	8016d8c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8016d78:	4b8b      	ldr	r3, [pc, #556]	@ (8016fa8 <tcp_split_unsent_seg+0x274>)
 8016d7a:	f240 3253 	movw	r2, #851	@ 0x353
 8016d7e:	498d      	ldr	r1, [pc, #564]	@ (8016fb4 <tcp_split_unsent_seg+0x280>)
 8016d80:	488b      	ldr	r0, [pc, #556]	@ (8016fb0 <tcp_split_unsent_seg+0x27c>)
 8016d82:	f007 fcbd 	bl	801e700 <iprintf>
    return ERR_VAL;
 8016d86:	f06f 0305 	mvn.w	r3, #5
 8016d8a:	e109      	b.n	8016fa0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8016d8c:	697b      	ldr	r3, [r7, #20]
 8016d8e:	891b      	ldrh	r3, [r3, #8]
 8016d90:	887a      	ldrh	r2, [r7, #2]
 8016d92:	429a      	cmp	r2, r3
 8016d94:	d301      	bcc.n	8016d9a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8016d96:	2300      	movs	r3, #0
 8016d98:	e102      	b.n	8016fa0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8016d9a:	687b      	ldr	r3, [r7, #4]
 8016d9c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8016d9e:	887a      	ldrh	r2, [r7, #2]
 8016da0:	429a      	cmp	r2, r3
 8016da2:	d906      	bls.n	8016db2 <tcp_split_unsent_seg+0x7e>
 8016da4:	4b80      	ldr	r3, [pc, #512]	@ (8016fa8 <tcp_split_unsent_seg+0x274>)
 8016da6:	f240 325b 	movw	r2, #859	@ 0x35b
 8016daa:	4983      	ldr	r1, [pc, #524]	@ (8016fb8 <tcp_split_unsent_seg+0x284>)
 8016dac:	4880      	ldr	r0, [pc, #512]	@ (8016fb0 <tcp_split_unsent_seg+0x27c>)
 8016dae:	f007 fca7 	bl	801e700 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8016db2:	697b      	ldr	r3, [r7, #20]
 8016db4:	891b      	ldrh	r3, [r3, #8]
 8016db6:	2b00      	cmp	r3, #0
 8016db8:	d106      	bne.n	8016dc8 <tcp_split_unsent_seg+0x94>
 8016dba:	4b7b      	ldr	r3, [pc, #492]	@ (8016fa8 <tcp_split_unsent_seg+0x274>)
 8016dbc:	f44f 7257 	mov.w	r2, #860	@ 0x35c
 8016dc0:	497e      	ldr	r1, [pc, #504]	@ (8016fbc <tcp_split_unsent_seg+0x288>)
 8016dc2:	487b      	ldr	r0, [pc, #492]	@ (8016fb0 <tcp_split_unsent_seg+0x27c>)
 8016dc4:	f007 fc9c 	bl	801e700 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8016dc8:	697b      	ldr	r3, [r7, #20]
 8016dca:	7a9b      	ldrb	r3, [r3, #10]
 8016dcc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016dce:	7bfb      	ldrb	r3, [r7, #15]
 8016dd0:	009b      	lsls	r3, r3, #2
 8016dd2:	b2db      	uxtb	r3, r3
 8016dd4:	f003 0304 	and.w	r3, r3, #4
 8016dd8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8016dda:	697b      	ldr	r3, [r7, #20]
 8016ddc:	891a      	ldrh	r2, [r3, #8]
 8016dde:	887b      	ldrh	r3, [r7, #2]
 8016de0:	1ad3      	subs	r3, r2, r3
 8016de2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8016de4:	7bbb      	ldrb	r3, [r7, #14]
 8016de6:	b29a      	uxth	r2, r3
 8016de8:	89bb      	ldrh	r3, [r7, #12]
 8016dea:	4413      	add	r3, r2
 8016dec:	b29b      	uxth	r3, r3
 8016dee:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8016df2:	4619      	mov	r1, r3
 8016df4:	2036      	movs	r0, #54	@ 0x36
 8016df6:	f7fb f959 	bl	80120ac <pbuf_alloc>
 8016dfa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016dfc:	693b      	ldr	r3, [r7, #16]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	f000 80b7 	beq.w	8016f72 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016e04:	697b      	ldr	r3, [r7, #20]
 8016e06:	685b      	ldr	r3, [r3, #4]
 8016e08:	891a      	ldrh	r2, [r3, #8]
 8016e0a:	697b      	ldr	r3, [r7, #20]
 8016e0c:	891b      	ldrh	r3, [r3, #8]
 8016e0e:	1ad3      	subs	r3, r2, r3
 8016e10:	b29a      	uxth	r2, r3
 8016e12:	887b      	ldrh	r3, [r7, #2]
 8016e14:	4413      	add	r3, r2
 8016e16:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8016e18:	697b      	ldr	r3, [r7, #20]
 8016e1a:	6858      	ldr	r0, [r3, #4]
 8016e1c:	693b      	ldr	r3, [r7, #16]
 8016e1e:	685a      	ldr	r2, [r3, #4]
 8016e20:	7bbb      	ldrb	r3, [r7, #14]
 8016e22:	18d1      	adds	r1, r2, r3
 8016e24:	897b      	ldrh	r3, [r7, #10]
 8016e26:	89ba      	ldrh	r2, [r7, #12]
 8016e28:	f7fb fe2a 	bl	8012a80 <pbuf_copy_partial>
 8016e2c:	4603      	mov	r3, r0
 8016e2e:	461a      	mov	r2, r3
 8016e30:	89bb      	ldrh	r3, [r7, #12]
 8016e32:	4293      	cmp	r3, r2
 8016e34:	f040 809f 	bne.w	8016f76 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8016e38:	697b      	ldr	r3, [r7, #20]
 8016e3a:	68db      	ldr	r3, [r3, #12]
 8016e3c:	899b      	ldrh	r3, [r3, #12]
 8016e3e:	b29b      	uxth	r3, r3
 8016e40:	4618      	mov	r0, r3
 8016e42:	f7f9 fd2b 	bl	801089c <lwip_htons>
 8016e46:	4603      	mov	r3, r0
 8016e48:	b2db      	uxtb	r3, r3
 8016e4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8016e4e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016e50:	2300      	movs	r3, #0
 8016e52:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016e54:	7efb      	ldrb	r3, [r7, #27]
 8016e56:	f003 0308 	and.w	r3, r3, #8
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d007      	beq.n	8016e6e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016e5e:	7efb      	ldrb	r3, [r7, #27]
 8016e60:	f023 0308 	bic.w	r3, r3, #8
 8016e64:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8016e66:	7ebb      	ldrb	r3, [r7, #26]
 8016e68:	f043 0308 	orr.w	r3, r3, #8
 8016e6c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8016e6e:	7efb      	ldrb	r3, [r7, #27]
 8016e70:	f003 0301 	and.w	r3, r3, #1
 8016e74:	2b00      	cmp	r3, #0
 8016e76:	d007      	beq.n	8016e88 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8016e78:	7efb      	ldrb	r3, [r7, #27]
 8016e7a:	f023 0301 	bic.w	r3, r3, #1
 8016e7e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016e80:	7ebb      	ldrb	r3, [r7, #26]
 8016e82:	f043 0301 	orr.w	r3, r3, #1
 8016e86:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8016e88:	697b      	ldr	r3, [r7, #20]
 8016e8a:	68db      	ldr	r3, [r3, #12]
 8016e8c:	685b      	ldr	r3, [r3, #4]
 8016e8e:	4618      	mov	r0, r3
 8016e90:	f7f9 fd19 	bl	80108c6 <lwip_htonl>
 8016e94:	4602      	mov	r2, r0
 8016e96:	887b      	ldrh	r3, [r7, #2]
 8016e98:	18d1      	adds	r1, r2, r3
 8016e9a:	7eba      	ldrb	r2, [r7, #26]
 8016e9c:	7bfb      	ldrb	r3, [r7, #15]
 8016e9e:	9300      	str	r3, [sp, #0]
 8016ea0:	460b      	mov	r3, r1
 8016ea2:	6939      	ldr	r1, [r7, #16]
 8016ea4:	6878      	ldr	r0, [r7, #4]
 8016ea6:	f7ff fea9 	bl	8016bfc <tcp_create_segment>
 8016eaa:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8016eac:	69fb      	ldr	r3, [r7, #28]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d063      	beq.n	8016f7a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8016eb2:	697b      	ldr	r3, [r7, #20]
 8016eb4:	685b      	ldr	r3, [r3, #4]
 8016eb6:	4618      	mov	r0, r3
 8016eb8:	f7fb fc6a 	bl	8012790 <pbuf_clen>
 8016ebc:	4603      	mov	r3, r0
 8016ebe:	461a      	mov	r2, r3
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016ec6:	1a9b      	subs	r3, r3, r2
 8016ec8:	b29a      	uxth	r2, r3
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8016ed0:	697b      	ldr	r3, [r7, #20]
 8016ed2:	6858      	ldr	r0, [r3, #4]
 8016ed4:	697b      	ldr	r3, [r7, #20]
 8016ed6:	685b      	ldr	r3, [r3, #4]
 8016ed8:	891a      	ldrh	r2, [r3, #8]
 8016eda:	89bb      	ldrh	r3, [r7, #12]
 8016edc:	1ad3      	subs	r3, r2, r3
 8016ede:	b29b      	uxth	r3, r3
 8016ee0:	4619      	mov	r1, r3
 8016ee2:	f7fb fa41 	bl	8012368 <pbuf_realloc>
  useg->len -= remainder;
 8016ee6:	697b      	ldr	r3, [r7, #20]
 8016ee8:	891a      	ldrh	r2, [r3, #8]
 8016eea:	89bb      	ldrh	r3, [r7, #12]
 8016eec:	1ad3      	subs	r3, r2, r3
 8016eee:	b29a      	uxth	r2, r3
 8016ef0:	697b      	ldr	r3, [r7, #20]
 8016ef2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016ef4:	697b      	ldr	r3, [r7, #20]
 8016ef6:	68db      	ldr	r3, [r3, #12]
 8016ef8:	899b      	ldrh	r3, [r3, #12]
 8016efa:	b29c      	uxth	r4, r3
 8016efc:	7efb      	ldrb	r3, [r7, #27]
 8016efe:	b29b      	uxth	r3, r3
 8016f00:	4618      	mov	r0, r3
 8016f02:	f7f9 fccb 	bl	801089c <lwip_htons>
 8016f06:	4603      	mov	r3, r0
 8016f08:	461a      	mov	r2, r3
 8016f0a:	697b      	ldr	r3, [r7, #20]
 8016f0c:	68db      	ldr	r3, [r3, #12]
 8016f0e:	4322      	orrs	r2, r4
 8016f10:	b292      	uxth	r2, r2
 8016f12:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016f14:	697b      	ldr	r3, [r7, #20]
 8016f16:	685b      	ldr	r3, [r3, #4]
 8016f18:	4618      	mov	r0, r3
 8016f1a:	f7fb fc39 	bl	8012790 <pbuf_clen>
 8016f1e:	4603      	mov	r3, r0
 8016f20:	461a      	mov	r2, r3
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016f28:	4413      	add	r3, r2
 8016f2a:	b29a      	uxth	r2, r3
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016f32:	69fb      	ldr	r3, [r7, #28]
 8016f34:	685b      	ldr	r3, [r3, #4]
 8016f36:	4618      	mov	r0, r3
 8016f38:	f7fb fc2a 	bl	8012790 <pbuf_clen>
 8016f3c:	4603      	mov	r3, r0
 8016f3e:	461a      	mov	r2, r3
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 8016f46:	4413      	add	r3, r2
 8016f48:	b29a      	uxth	r2, r3
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016f50:	697b      	ldr	r3, [r7, #20]
 8016f52:	681a      	ldr	r2, [r3, #0]
 8016f54:	69fb      	ldr	r3, [r7, #28]
 8016f56:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8016f58:	697b      	ldr	r3, [r7, #20]
 8016f5a:	69fa      	ldr	r2, [r7, #28]
 8016f5c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016f5e:	69fb      	ldr	r3, [r7, #28]
 8016f60:	681b      	ldr	r3, [r3, #0]
 8016f62:	2b00      	cmp	r3, #0
 8016f64:	d103      	bne.n	8016f6e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	2200      	movs	r2, #0
 8016f6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016f6e:	2300      	movs	r3, #0
 8016f70:	e016      	b.n	8016fa0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016f72:	bf00      	nop
 8016f74:	e002      	b.n	8016f7c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016f76:	bf00      	nop
 8016f78:	e000      	b.n	8016f7c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8016f7a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016f7c:	69fb      	ldr	r3, [r7, #28]
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d006      	beq.n	8016f90 <tcp_split_unsent_seg+0x25c>
 8016f82:	4b09      	ldr	r3, [pc, #36]	@ (8016fa8 <tcp_split_unsent_seg+0x274>)
 8016f84:	f44f 7276 	mov.w	r2, #984	@ 0x3d8
 8016f88:	490d      	ldr	r1, [pc, #52]	@ (8016fc0 <tcp_split_unsent_seg+0x28c>)
 8016f8a:	4809      	ldr	r0, [pc, #36]	@ (8016fb0 <tcp_split_unsent_seg+0x27c>)
 8016f8c:	f007 fbb8 	bl	801e700 <iprintf>
  if (p != NULL) {
 8016f90:	693b      	ldr	r3, [r7, #16]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d002      	beq.n	8016f9c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8016f96:	6938      	ldr	r0, [r7, #16]
 8016f98:	f7fb fb6c 	bl	8012674 <pbuf_free>
  }

  return ERR_MEM;
 8016f9c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016fa0:	4618      	mov	r0, r3
 8016fa2:	3724      	adds	r7, #36	@ 0x24
 8016fa4:	46bd      	mov	sp, r7
 8016fa6:	bd90      	pop	{r4, r7, pc}
 8016fa8:	080238a8 	.word	0x080238a8
 8016fac:	08023c3c 	.word	0x08023c3c
 8016fb0:	080238fc 	.word	0x080238fc
 8016fb4:	08023c60 	.word	0x08023c60
 8016fb8:	08023c84 	.word	0x08023c84
 8016fbc:	08023c94 	.word	0x08023c94
 8016fc0:	08023ca4 	.word	0x08023ca4

08016fc4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8016fc4:	b590      	push	{r4, r7, lr}
 8016fc6:	b085      	sub	sp, #20
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d106      	bne.n	8016fe0 <tcp_send_fin+0x1c>
 8016fd2:	4b21      	ldr	r3, [pc, #132]	@ (8017058 <tcp_send_fin+0x94>)
 8016fd4:	f240 32eb 	movw	r2, #1003	@ 0x3eb
 8016fd8:	4920      	ldr	r1, [pc, #128]	@ (801705c <tcp_send_fin+0x98>)
 8016fda:	4821      	ldr	r0, [pc, #132]	@ (8017060 <tcp_send_fin+0x9c>)
 8016fdc:	f007 fb90 	bl	801e700 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8016fe0:	687b      	ldr	r3, [r7, #4]
 8016fe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016fe4:	2b00      	cmp	r3, #0
 8016fe6:	d02e      	beq.n	8017046 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016fe8:	687b      	ldr	r3, [r7, #4]
 8016fea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016fec:	60fb      	str	r3, [r7, #12]
 8016fee:	e002      	b.n	8016ff6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016ff0:	68fb      	ldr	r3, [r7, #12]
 8016ff2:	681b      	ldr	r3, [r3, #0]
 8016ff4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	2b00      	cmp	r3, #0
 8016ffc:	d1f8      	bne.n	8016ff0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	68db      	ldr	r3, [r3, #12]
 8017002:	899b      	ldrh	r3, [r3, #12]
 8017004:	b29b      	uxth	r3, r3
 8017006:	4618      	mov	r0, r3
 8017008:	f7f9 fc48 	bl	801089c <lwip_htons>
 801700c:	4603      	mov	r3, r0
 801700e:	b2db      	uxtb	r3, r3
 8017010:	f003 0307 	and.w	r3, r3, #7
 8017014:	2b00      	cmp	r3, #0
 8017016:	d116      	bne.n	8017046 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	68db      	ldr	r3, [r3, #12]
 801701c:	899b      	ldrh	r3, [r3, #12]
 801701e:	b29c      	uxth	r4, r3
 8017020:	2001      	movs	r0, #1
 8017022:	f7f9 fc3b 	bl	801089c <lwip_htons>
 8017026:	4603      	mov	r3, r0
 8017028:	461a      	mov	r2, r3
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	68db      	ldr	r3, [r3, #12]
 801702e:	4322      	orrs	r2, r4
 8017030:	b292      	uxth	r2, r2
 8017032:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	8b5b      	ldrh	r3, [r3, #26]
 8017038:	f043 0320 	orr.w	r3, r3, #32
 801703c:	b29a      	uxth	r2, r3
 801703e:	687b      	ldr	r3, [r7, #4]
 8017040:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8017042:	2300      	movs	r3, #0
 8017044:	e004      	b.n	8017050 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8017046:	2101      	movs	r1, #1
 8017048:	6878      	ldr	r0, [r7, #4]
 801704a:	f000 f80b 	bl	8017064 <tcp_enqueue_flags>
 801704e:	4603      	mov	r3, r0
}
 8017050:	4618      	mov	r0, r3
 8017052:	3714      	adds	r7, #20
 8017054:	46bd      	mov	sp, r7
 8017056:	bd90      	pop	{r4, r7, pc}
 8017058:	080238a8 	.word	0x080238a8
 801705c:	08023cb0 	.word	0x08023cb0
 8017060:	080238fc 	.word	0x080238fc

08017064 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8017064:	b580      	push	{r7, lr}
 8017066:	b08a      	sub	sp, #40	@ 0x28
 8017068:	af02      	add	r7, sp, #8
 801706a:	6078      	str	r0, [r7, #4]
 801706c:	460b      	mov	r3, r1
 801706e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8017070:	2300      	movs	r3, #0
 8017072:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8017074:	2300      	movs	r3, #0
 8017076:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8017078:	78fb      	ldrb	r3, [r7, #3]
 801707a:	f003 0303 	and.w	r3, r3, #3
 801707e:	2b00      	cmp	r3, #0
 8017080:	d106      	bne.n	8017090 <tcp_enqueue_flags+0x2c>
 8017082:	4b67      	ldr	r3, [pc, #412]	@ (8017220 <tcp_enqueue_flags+0x1bc>)
 8017084:	f240 4211 	movw	r2, #1041	@ 0x411
 8017088:	4966      	ldr	r1, [pc, #408]	@ (8017224 <tcp_enqueue_flags+0x1c0>)
 801708a:	4867      	ldr	r0, [pc, #412]	@ (8017228 <tcp_enqueue_flags+0x1c4>)
 801708c:	f007 fb38 	bl	801e700 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d106      	bne.n	80170a4 <tcp_enqueue_flags+0x40>
 8017096:	4b62      	ldr	r3, [pc, #392]	@ (8017220 <tcp_enqueue_flags+0x1bc>)
 8017098:	f240 4213 	movw	r2, #1043	@ 0x413
 801709c:	4963      	ldr	r1, [pc, #396]	@ (801722c <tcp_enqueue_flags+0x1c8>)
 801709e:	4862      	ldr	r0, [pc, #392]	@ (8017228 <tcp_enqueue_flags+0x1c4>)
 80170a0:	f007 fb2e 	bl	801e700 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80170a4:	78fb      	ldrb	r3, [r7, #3]
 80170a6:	f003 0302 	and.w	r3, r3, #2
 80170aa:	2b00      	cmp	r3, #0
 80170ac:	d001      	beq.n	80170b2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80170ae:	2301      	movs	r3, #1
 80170b0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80170b2:	7ffb      	ldrb	r3, [r7, #31]
 80170b4:	009b      	lsls	r3, r3, #2
 80170b6:	b2db      	uxtb	r3, r3
 80170b8:	f003 0304 	and.w	r3, r3, #4
 80170bc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80170be:	7dfb      	ldrb	r3, [r7, #23]
 80170c0:	b29b      	uxth	r3, r3
 80170c2:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80170c6:	4619      	mov	r1, r3
 80170c8:	2036      	movs	r0, #54	@ 0x36
 80170ca:	f7fa ffef 	bl	80120ac <pbuf_alloc>
 80170ce:	6138      	str	r0, [r7, #16]
 80170d0:	693b      	ldr	r3, [r7, #16]
 80170d2:	2b00      	cmp	r3, #0
 80170d4:	d109      	bne.n	80170ea <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	8b5b      	ldrh	r3, [r3, #26]
 80170da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80170de:	b29a      	uxth	r2, r3
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80170e4:	f04f 33ff 	mov.w	r3, #4294967295
 80170e8:	e095      	b.n	8017216 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80170ea:	693b      	ldr	r3, [r7, #16]
 80170ec:	895a      	ldrh	r2, [r3, #10]
 80170ee:	7dfb      	ldrb	r3, [r7, #23]
 80170f0:	b29b      	uxth	r3, r3
 80170f2:	429a      	cmp	r2, r3
 80170f4:	d206      	bcs.n	8017104 <tcp_enqueue_flags+0xa0>
 80170f6:	4b4a      	ldr	r3, [pc, #296]	@ (8017220 <tcp_enqueue_flags+0x1bc>)
 80170f8:	f240 4239 	movw	r2, #1081	@ 0x439
 80170fc:	494c      	ldr	r1, [pc, #304]	@ (8017230 <tcp_enqueue_flags+0x1cc>)
 80170fe:	484a      	ldr	r0, [pc, #296]	@ (8017228 <tcp_enqueue_flags+0x1c4>)
 8017100:	f007 fafe 	bl	801e700 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8017104:	687b      	ldr	r3, [r7, #4]
 8017106:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8017108:	78fa      	ldrb	r2, [r7, #3]
 801710a:	7ffb      	ldrb	r3, [r7, #31]
 801710c:	9300      	str	r3, [sp, #0]
 801710e:	460b      	mov	r3, r1
 8017110:	6939      	ldr	r1, [r7, #16]
 8017112:	6878      	ldr	r0, [r7, #4]
 8017114:	f7ff fd72 	bl	8016bfc <tcp_create_segment>
 8017118:	60f8      	str	r0, [r7, #12]
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	2b00      	cmp	r3, #0
 801711e:	d109      	bne.n	8017134 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017120:	687b      	ldr	r3, [r7, #4]
 8017122:	8b5b      	ldrh	r3, [r3, #26]
 8017124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017128:	b29a      	uxth	r2, r3
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801712e:	f04f 33ff 	mov.w	r3, #4294967295
 8017132:	e070      	b.n	8017216 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8017134:	68fb      	ldr	r3, [r7, #12]
 8017136:	68db      	ldr	r3, [r3, #12]
 8017138:	f003 0303 	and.w	r3, r3, #3
 801713c:	2b00      	cmp	r3, #0
 801713e:	d006      	beq.n	801714e <tcp_enqueue_flags+0xea>
 8017140:	4b37      	ldr	r3, [pc, #220]	@ (8017220 <tcp_enqueue_flags+0x1bc>)
 8017142:	f240 4242 	movw	r2, #1090	@ 0x442
 8017146:	493b      	ldr	r1, [pc, #236]	@ (8017234 <tcp_enqueue_flags+0x1d0>)
 8017148:	4837      	ldr	r0, [pc, #220]	@ (8017228 <tcp_enqueue_flags+0x1c4>)
 801714a:	f007 fad9 	bl	801e700 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	891b      	ldrh	r3, [r3, #8]
 8017152:	2b00      	cmp	r3, #0
 8017154:	d006      	beq.n	8017164 <tcp_enqueue_flags+0x100>
 8017156:	4b32      	ldr	r3, [pc, #200]	@ (8017220 <tcp_enqueue_flags+0x1bc>)
 8017158:	f240 4243 	movw	r2, #1091	@ 0x443
 801715c:	4936      	ldr	r1, [pc, #216]	@ (8017238 <tcp_enqueue_flags+0x1d4>)
 801715e:	4832      	ldr	r0, [pc, #200]	@ (8017228 <tcp_enqueue_flags+0x1c4>)
 8017160:	f007 face 	bl	801e700 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017168:	2b00      	cmp	r3, #0
 801716a:	d103      	bne.n	8017174 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	68fa      	ldr	r2, [r7, #12]
 8017170:	66da      	str	r2, [r3, #108]	@ 0x6c
 8017172:	e00d      	b.n	8017190 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017178:	61bb      	str	r3, [r7, #24]
 801717a:	e002      	b.n	8017182 <tcp_enqueue_flags+0x11e>
 801717c:	69bb      	ldr	r3, [r7, #24]
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	61bb      	str	r3, [r7, #24]
 8017182:	69bb      	ldr	r3, [r7, #24]
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	2b00      	cmp	r3, #0
 8017188:	d1f8      	bne.n	801717c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801718a:	69bb      	ldr	r3, [r7, #24]
 801718c:	68fa      	ldr	r2, [r7, #12]
 801718e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8017190:	687b      	ldr	r3, [r7, #4]
 8017192:	2200      	movs	r2, #0
 8017194:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8017198:	78fb      	ldrb	r3, [r7, #3]
 801719a:	f003 0302 	and.w	r3, r3, #2
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d104      	bne.n	80171ac <tcp_enqueue_flags+0x148>
 80171a2:	78fb      	ldrb	r3, [r7, #3]
 80171a4:	f003 0301 	and.w	r3, r3, #1
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d004      	beq.n	80171b6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80171b0:	1c5a      	adds	r2, r3, #1
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80171b6:	78fb      	ldrb	r3, [r7, #3]
 80171b8:	f003 0301 	and.w	r3, r3, #1
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d006      	beq.n	80171ce <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	8b5b      	ldrh	r3, [r3, #26]
 80171c4:	f043 0320 	orr.w	r3, r3, #32
 80171c8:	b29a      	uxth	r2, r3
 80171ca:	687b      	ldr	r3, [r7, #4]
 80171cc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	685b      	ldr	r3, [r3, #4]
 80171d2:	4618      	mov	r0, r3
 80171d4:	f7fb fadc 	bl	8012790 <pbuf_clen>
 80171d8:	4603      	mov	r3, r0
 80171da:	461a      	mov	r2, r3
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80171e2:	4413      	add	r3, r2
 80171e4:	b29a      	uxth	r2, r3
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	f8a3 2066 	strh.w	r2, [r3, #102]	@ 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d00e      	beq.n	8017214 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d10a      	bne.n	8017214 <tcp_enqueue_flags+0x1b0>
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017202:	2b00      	cmp	r3, #0
 8017204:	d106      	bne.n	8017214 <tcp_enqueue_flags+0x1b0>
 8017206:	4b06      	ldr	r3, [pc, #24]	@ (8017220 <tcp_enqueue_flags+0x1bc>)
 8017208:	f240 4265 	movw	r2, #1125	@ 0x465
 801720c:	490b      	ldr	r1, [pc, #44]	@ (801723c <tcp_enqueue_flags+0x1d8>)
 801720e:	4806      	ldr	r0, [pc, #24]	@ (8017228 <tcp_enqueue_flags+0x1c4>)
 8017210:	f007 fa76 	bl	801e700 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8017214:	2300      	movs	r3, #0
}
 8017216:	4618      	mov	r0, r3
 8017218:	3720      	adds	r7, #32
 801721a:	46bd      	mov	sp, r7
 801721c:	bd80      	pop	{r7, pc}
 801721e:	bf00      	nop
 8017220:	080238a8 	.word	0x080238a8
 8017224:	08023ccc 	.word	0x08023ccc
 8017228:	080238fc 	.word	0x080238fc
 801722c:	08023d24 	.word	0x08023d24
 8017230:	08023d44 	.word	0x08023d44
 8017234:	08023d80 	.word	0x08023d80
 8017238:	08023d98 	.word	0x08023d98
 801723c:	08023dc4 	.word	0x08023dc4

08017240 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017240:	b5b0      	push	{r4, r5, r7, lr}
 8017242:	b08a      	sub	sp, #40	@ 0x28
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d106      	bne.n	801725c <tcp_output+0x1c>
 801724e:	4b8a      	ldr	r3, [pc, #552]	@ (8017478 <tcp_output+0x238>)
 8017250:	f240 42e1 	movw	r2, #1249	@ 0x4e1
 8017254:	4989      	ldr	r1, [pc, #548]	@ (801747c <tcp_output+0x23c>)
 8017256:	488a      	ldr	r0, [pc, #552]	@ (8017480 <tcp_output+0x240>)
 8017258:	f007 fa52 	bl	801e700 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	7d1b      	ldrb	r3, [r3, #20]
 8017260:	2b01      	cmp	r3, #1
 8017262:	d106      	bne.n	8017272 <tcp_output+0x32>
 8017264:	4b84      	ldr	r3, [pc, #528]	@ (8017478 <tcp_output+0x238>)
 8017266:	f240 42e3 	movw	r2, #1251	@ 0x4e3
 801726a:	4986      	ldr	r1, [pc, #536]	@ (8017484 <tcp_output+0x244>)
 801726c:	4884      	ldr	r0, [pc, #528]	@ (8017480 <tcp_output+0x240>)
 801726e:	f007 fa47 	bl	801e700 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8017272:	4b85      	ldr	r3, [pc, #532]	@ (8017488 <tcp_output+0x248>)
 8017274:	681b      	ldr	r3, [r3, #0]
 8017276:	687a      	ldr	r2, [r7, #4]
 8017278:	429a      	cmp	r2, r3
 801727a:	d101      	bne.n	8017280 <tcp_output+0x40>
    return ERR_OK;
 801727c:	2300      	movs	r3, #0
 801727e:	e1ce      	b.n	801761e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	f8b3 2048 	ldrh.w	r2, [r3, #72]	@ 0x48
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801728c:	4293      	cmp	r3, r2
 801728e:	bf28      	it	cs
 8017290:	4613      	movcs	r3, r2
 8017292:	b29b      	uxth	r3, r3
 8017294:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801729a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (seg == NULL) {
 801729c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d10b      	bne.n	80172ba <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	8b5b      	ldrh	r3, [r3, #26]
 80172a6:	f003 0302 	and.w	r3, r3, #2
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	f000 81aa 	beq.w	8017604 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80172b0:	6878      	ldr	r0, [r7, #4]
 80172b2:	f000 fdcb 	bl	8017e4c <tcp_send_empty_ack>
 80172b6:	4603      	mov	r3, r0
 80172b8:	e1b1      	b.n	801761e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80172ba:	6879      	ldr	r1, [r7, #4]
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	3304      	adds	r3, #4
 80172c0:	461a      	mov	r2, r3
 80172c2:	6878      	ldr	r0, [r7, #4]
 80172c4:	f7ff fc7e 	bl	8016bc4 <tcp_route>
 80172c8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80172ca:	697b      	ldr	r3, [r7, #20]
 80172cc:	2b00      	cmp	r3, #0
 80172ce:	d102      	bne.n	80172d6 <tcp_output+0x96>
    return ERR_RTE;
 80172d0:	f06f 0303 	mvn.w	r3, #3
 80172d4:	e1a3      	b.n	801761e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	2b00      	cmp	r3, #0
 80172da:	d003      	beq.n	80172e4 <tcp_output+0xa4>
 80172dc:	687b      	ldr	r3, [r7, #4]
 80172de:	681b      	ldr	r3, [r3, #0]
 80172e0:	2b00      	cmp	r3, #0
 80172e2:	d111      	bne.n	8017308 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80172e4:	697b      	ldr	r3, [r7, #20]
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d002      	beq.n	80172f0 <tcp_output+0xb0>
 80172ea:	697b      	ldr	r3, [r7, #20]
 80172ec:	3304      	adds	r3, #4
 80172ee:	e000      	b.n	80172f2 <tcp_output+0xb2>
 80172f0:	2300      	movs	r3, #0
 80172f2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80172f4:	693b      	ldr	r3, [r7, #16]
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	d102      	bne.n	8017300 <tcp_output+0xc0>
      return ERR_RTE;
 80172fa:	f06f 0303 	mvn.w	r3, #3
 80172fe:	e18e      	b.n	801761e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017300:	693b      	ldr	r3, [r7, #16]
 8017302:	681a      	ldr	r2, [r3, #0]
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8017308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801730a:	68db      	ldr	r3, [r3, #12]
 801730c:	685b      	ldr	r3, [r3, #4]
 801730e:	4618      	mov	r0, r3
 8017310:	f7f9 fad9 	bl	80108c6 <lwip_htonl>
 8017314:	4602      	mov	r2, r0
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801731a:	1ad3      	subs	r3, r2, r3
 801731c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801731e:	8912      	ldrh	r2, [r2, #8]
 8017320:	4413      	add	r3, r2
 8017322:	69ba      	ldr	r2, [r7, #24]
 8017324:	429a      	cmp	r2, r3
 8017326:	d227      	bcs.n	8017378 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801732e:	461a      	mov	r2, r3
 8017330:	69bb      	ldr	r3, [r7, #24]
 8017332:	4293      	cmp	r3, r2
 8017334:	d114      	bne.n	8017360 <tcp_output+0x120>
 8017336:	687b      	ldr	r3, [r7, #4]
 8017338:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801733a:	2b00      	cmp	r3, #0
 801733c:	d110      	bne.n	8017360 <tcp_output+0x120>
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	f893 3099 	ldrb.w	r3, [r3, #153]	@ 0x99
 8017344:	2b00      	cmp	r3, #0
 8017346:	d10b      	bne.n	8017360 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8017348:	687b      	ldr	r3, [r7, #4]
 801734a:	2200      	movs	r2, #0
 801734c:	f883 2098 	strb.w	r2, [r3, #152]	@ 0x98
      pcb->persist_backoff = 1;
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	2201      	movs	r2, #1
 8017354:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99
      pcb->persist_probe = 0;
 8017358:	687b      	ldr	r3, [r7, #4]
 801735a:	2200      	movs	r2, #0
 801735c:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	8b5b      	ldrh	r3, [r3, #26]
 8017364:	f003 0302 	and.w	r3, r3, #2
 8017368:	2b00      	cmp	r3, #0
 801736a:	f000 814d 	beq.w	8017608 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801736e:	6878      	ldr	r0, [r7, #4]
 8017370:	f000 fd6c 	bl	8017e4c <tcp_send_empty_ack>
 8017374:	4603      	mov	r3, r0
 8017376:	e152      	b.n	801761e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8017378:	687b      	ldr	r3, [r7, #4]
 801737a:	2200      	movs	r2, #0
 801737c:	f883 2099 	strb.w	r2, [r3, #153]	@ 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017384:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8017386:	6a3b      	ldr	r3, [r7, #32]
 8017388:	2b00      	cmp	r3, #0
 801738a:	f000 811c 	beq.w	80175c6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801738e:	e002      	b.n	8017396 <tcp_output+0x156>
 8017390:	6a3b      	ldr	r3, [r7, #32]
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	623b      	str	r3, [r7, #32]
 8017396:	6a3b      	ldr	r3, [r7, #32]
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	2b00      	cmp	r3, #0
 801739c:	d1f8      	bne.n	8017390 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801739e:	e112      	b.n	80175c6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80173a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173a2:	68db      	ldr	r3, [r3, #12]
 80173a4:	899b      	ldrh	r3, [r3, #12]
 80173a6:	b29b      	uxth	r3, r3
 80173a8:	4618      	mov	r0, r3
 80173aa:	f7f9 fa77 	bl	801089c <lwip_htons>
 80173ae:	4603      	mov	r3, r0
 80173b0:	b2db      	uxtb	r3, r3
 80173b2:	f003 0304 	and.w	r3, r3, #4
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d006      	beq.n	80173c8 <tcp_output+0x188>
 80173ba:	4b2f      	ldr	r3, [pc, #188]	@ (8017478 <tcp_output+0x238>)
 80173bc:	f240 5236 	movw	r2, #1334	@ 0x536
 80173c0:	4932      	ldr	r1, [pc, #200]	@ (801748c <tcp_output+0x24c>)
 80173c2:	482f      	ldr	r0, [pc, #188]	@ (8017480 <tcp_output+0x240>)
 80173c4:	f007 f99c 	bl	801e700 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d01f      	beq.n	8017410 <tcp_output+0x1d0>
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	8b5b      	ldrh	r3, [r3, #26]
 80173d4:	f003 0344 	and.w	r3, r3, #68	@ 0x44
 80173d8:	2b00      	cmp	r3, #0
 80173da:	d119      	bne.n	8017410 <tcp_output+0x1d0>
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d00b      	beq.n	80173fc <tcp_output+0x1bc>
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	2b00      	cmp	r3, #0
 80173ec:	d110      	bne.n	8017410 <tcp_output+0x1d0>
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80173f2:	891a      	ldrh	r2, [r3, #8]
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80173f8:	429a      	cmp	r2, r3
 80173fa:	d209      	bcs.n	8017410 <tcp_output+0x1d0>
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8017402:	2b00      	cmp	r3, #0
 8017404:	d004      	beq.n	8017410 <tcp_output+0x1d0>
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	f8b3 3066 	ldrh.w	r3, [r3, #102]	@ 0x66
 801740c:	2b08      	cmp	r3, #8
 801740e:	d901      	bls.n	8017414 <tcp_output+0x1d4>
 8017410:	2301      	movs	r3, #1
 8017412:	e000      	b.n	8017416 <tcp_output+0x1d6>
 8017414:	2300      	movs	r3, #0
 8017416:	2b00      	cmp	r3, #0
 8017418:	d106      	bne.n	8017428 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801741a:	687b      	ldr	r3, [r7, #4]
 801741c:	8b5b      	ldrh	r3, [r3, #26]
 801741e:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017422:	2b00      	cmp	r3, #0
 8017424:	f000 80e4 	beq.w	80175f0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	7d1b      	ldrb	r3, [r3, #20]
 801742c:	2b02      	cmp	r3, #2
 801742e:	d00d      	beq.n	801744c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017432:	68db      	ldr	r3, [r3, #12]
 8017434:	899b      	ldrh	r3, [r3, #12]
 8017436:	b29c      	uxth	r4, r3
 8017438:	2010      	movs	r0, #16
 801743a:	f7f9 fa2f 	bl	801089c <lwip_htons>
 801743e:	4603      	mov	r3, r0
 8017440:	461a      	mov	r2, r3
 8017442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017444:	68db      	ldr	r3, [r3, #12]
 8017446:	4322      	orrs	r2, r4
 8017448:	b292      	uxth	r2, r2
 801744a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801744c:	697a      	ldr	r2, [r7, #20]
 801744e:	6879      	ldr	r1, [r7, #4]
 8017450:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017452:	f000 f909 	bl	8017668 <tcp_output_segment>
 8017456:	4603      	mov	r3, r0
 8017458:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801745a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d016      	beq.n	8017490 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	8b5b      	ldrh	r3, [r3, #26]
 8017466:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801746a:	b29a      	uxth	r2, r3
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	835a      	strh	r2, [r3, #26]
      return err;
 8017470:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017474:	e0d3      	b.n	801761e <tcp_output+0x3de>
 8017476:	bf00      	nop
 8017478:	080238a8 	.word	0x080238a8
 801747c:	08023dec 	.word	0x08023dec
 8017480:	080238fc 	.word	0x080238fc
 8017484:	08023e04 	.word	0x08023e04
 8017488:	2001b060 	.word	0x2001b060
 801748c:	08023e2c 	.word	0x08023e2c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8017490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017492:	681a      	ldr	r2, [r3, #0]
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	66da      	str	r2, [r3, #108]	@ 0x6c
    if (pcb->state != SYN_SENT) {
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	7d1b      	ldrb	r3, [r3, #20]
 801749c:	2b02      	cmp	r3, #2
 801749e:	d006      	beq.n	80174ae <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	8b5b      	ldrh	r3, [r3, #26]
 80174a4:	f023 0303 	bic.w	r3, r3, #3
 80174a8:	b29a      	uxth	r2, r3
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80174ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174b0:	68db      	ldr	r3, [r3, #12]
 80174b2:	685b      	ldr	r3, [r3, #4]
 80174b4:	4618      	mov	r0, r3
 80174b6:	f7f9 fa06 	bl	80108c6 <lwip_htonl>
 80174ba:	4604      	mov	r4, r0
 80174bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174be:	891b      	ldrh	r3, [r3, #8]
 80174c0:	461d      	mov	r5, r3
 80174c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174c4:	68db      	ldr	r3, [r3, #12]
 80174c6:	899b      	ldrh	r3, [r3, #12]
 80174c8:	b29b      	uxth	r3, r3
 80174ca:	4618      	mov	r0, r3
 80174cc:	f7f9 f9e6 	bl	801089c <lwip_htons>
 80174d0:	4603      	mov	r3, r0
 80174d2:	b2db      	uxtb	r3, r3
 80174d4:	f003 0303 	and.w	r3, r3, #3
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d001      	beq.n	80174e0 <tcp_output+0x2a0>
 80174dc:	2301      	movs	r3, #1
 80174de:	e000      	b.n	80174e2 <tcp_output+0x2a2>
 80174e0:	2300      	movs	r3, #0
 80174e2:	442b      	add	r3, r5
 80174e4:	4423      	add	r3, r4
 80174e6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80174ec:	68bb      	ldr	r3, [r7, #8]
 80174ee:	1ad3      	subs	r3, r2, r3
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	da02      	bge.n	80174fa <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	68ba      	ldr	r2, [r7, #8]
 80174f8:	651a      	str	r2, [r3, #80]	@ 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80174fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174fc:	891b      	ldrh	r3, [r3, #8]
 80174fe:	461c      	mov	r4, r3
 8017500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017502:	68db      	ldr	r3, [r3, #12]
 8017504:	899b      	ldrh	r3, [r3, #12]
 8017506:	b29b      	uxth	r3, r3
 8017508:	4618      	mov	r0, r3
 801750a:	f7f9 f9c7 	bl	801089c <lwip_htons>
 801750e:	4603      	mov	r3, r0
 8017510:	b2db      	uxtb	r3, r3
 8017512:	f003 0303 	and.w	r3, r3, #3
 8017516:	2b00      	cmp	r3, #0
 8017518:	d001      	beq.n	801751e <tcp_output+0x2de>
 801751a:	2301      	movs	r3, #1
 801751c:	e000      	b.n	8017520 <tcp_output+0x2e0>
 801751e:	2300      	movs	r3, #0
 8017520:	4423      	add	r3, r4
 8017522:	2b00      	cmp	r3, #0
 8017524:	d049      	beq.n	80175ba <tcp_output+0x37a>
      seg->next = NULL;
 8017526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017528:	2200      	movs	r2, #0
 801752a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017530:	2b00      	cmp	r3, #0
 8017532:	d105      	bne.n	8017540 <tcp_output+0x300>
        pcb->unacked = seg;
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017538:	671a      	str	r2, [r3, #112]	@ 0x70
        useg = seg;
 801753a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801753c:	623b      	str	r3, [r7, #32]
 801753e:	e03f      	b.n	80175c0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8017540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017542:	68db      	ldr	r3, [r3, #12]
 8017544:	685b      	ldr	r3, [r3, #4]
 8017546:	4618      	mov	r0, r3
 8017548:	f7f9 f9bd 	bl	80108c6 <lwip_htonl>
 801754c:	4604      	mov	r4, r0
 801754e:	6a3b      	ldr	r3, [r7, #32]
 8017550:	68db      	ldr	r3, [r3, #12]
 8017552:	685b      	ldr	r3, [r3, #4]
 8017554:	4618      	mov	r0, r3
 8017556:	f7f9 f9b6 	bl	80108c6 <lwip_htonl>
 801755a:	4603      	mov	r3, r0
 801755c:	1ae3      	subs	r3, r4, r3
 801755e:	2b00      	cmp	r3, #0
 8017560:	da24      	bge.n	80175ac <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	3370      	adds	r3, #112	@ 0x70
 8017566:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017568:	e002      	b.n	8017570 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801756a:	69fb      	ldr	r3, [r7, #28]
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8017570:	69fb      	ldr	r3, [r7, #28]
 8017572:	681b      	ldr	r3, [r3, #0]
 8017574:	2b00      	cmp	r3, #0
 8017576:	d011      	beq.n	801759c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017578:	69fb      	ldr	r3, [r7, #28]
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	68db      	ldr	r3, [r3, #12]
 801757e:	685b      	ldr	r3, [r3, #4]
 8017580:	4618      	mov	r0, r3
 8017582:	f7f9 f9a0 	bl	80108c6 <lwip_htonl>
 8017586:	4604      	mov	r4, r0
 8017588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801758a:	68db      	ldr	r3, [r3, #12]
 801758c:	685b      	ldr	r3, [r3, #4]
 801758e:	4618      	mov	r0, r3
 8017590:	f7f9 f999 	bl	80108c6 <lwip_htonl>
 8017594:	4603      	mov	r3, r0
 8017596:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8017598:	2b00      	cmp	r3, #0
 801759a:	dbe6      	blt.n	801756a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801759c:	69fb      	ldr	r3, [r7, #28]
 801759e:	681a      	ldr	r2, [r3, #0]
 80175a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175a2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80175a4:	69fb      	ldr	r3, [r7, #28]
 80175a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80175a8:	601a      	str	r2, [r3, #0]
 80175aa:	e009      	b.n	80175c0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80175ac:	6a3b      	ldr	r3, [r7, #32]
 80175ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80175b0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80175b2:	6a3b      	ldr	r3, [r7, #32]
 80175b4:	681b      	ldr	r3, [r3, #0]
 80175b6:	623b      	str	r3, [r7, #32]
 80175b8:	e002      	b.n	80175c0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80175ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80175bc:	f7fc fc45 	bl	8013e4a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80175c4:	627b      	str	r3, [r7, #36]	@ 0x24
  while (seg != NULL &&
 80175c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175c8:	2b00      	cmp	r3, #0
 80175ca:	d012      	beq.n	80175f2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80175cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175ce:	68db      	ldr	r3, [r3, #12]
 80175d0:	685b      	ldr	r3, [r3, #4]
 80175d2:	4618      	mov	r0, r3
 80175d4:	f7f9 f977 	bl	80108c6 <lwip_htonl>
 80175d8:	4602      	mov	r2, r0
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80175de:	1ad3      	subs	r3, r2, r3
 80175e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80175e2:	8912      	ldrh	r2, [r2, #8]
 80175e4:	4413      	add	r3, r2
  while (seg != NULL &&
 80175e6:	69ba      	ldr	r2, [r7, #24]
 80175e8:	429a      	cmp	r2, r3
 80175ea:	f4bf aed9 	bcs.w	80173a0 <tcp_output+0x160>
 80175ee:	e000      	b.n	80175f2 <tcp_output+0x3b2>
      break;
 80175f0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80175f2:	687b      	ldr	r3, [r7, #4]
 80175f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d108      	bne.n	801760c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	2200      	movs	r2, #0
 80175fe:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 8017602:	e004      	b.n	801760e <tcp_output+0x3ce>
    goto output_done;
 8017604:	bf00      	nop
 8017606:	e002      	b.n	801760e <tcp_output+0x3ce>
    goto output_done;
 8017608:	bf00      	nop
 801760a:	e000      	b.n	801760e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801760c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801760e:	687b      	ldr	r3, [r7, #4]
 8017610:	8b5b      	ldrh	r3, [r3, #26]
 8017612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8017616:	b29a      	uxth	r2, r3
 8017618:	687b      	ldr	r3, [r7, #4]
 801761a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801761c:	2300      	movs	r3, #0
}
 801761e:	4618      	mov	r0, r3
 8017620:	3728      	adds	r7, #40	@ 0x28
 8017622:	46bd      	mov	sp, r7
 8017624:	bdb0      	pop	{r4, r5, r7, pc}
 8017626:	bf00      	nop

08017628 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8017628:	b580      	push	{r7, lr}
 801762a:	b082      	sub	sp, #8
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017630:	687b      	ldr	r3, [r7, #4]
 8017632:	2b00      	cmp	r3, #0
 8017634:	d106      	bne.n	8017644 <tcp_output_segment_busy+0x1c>
 8017636:	4b09      	ldr	r3, [pc, #36]	@ (801765c <tcp_output_segment_busy+0x34>)
 8017638:	f240 529a 	movw	r2, #1434	@ 0x59a
 801763c:	4908      	ldr	r1, [pc, #32]	@ (8017660 <tcp_output_segment_busy+0x38>)
 801763e:	4809      	ldr	r0, [pc, #36]	@ (8017664 <tcp_output_segment_busy+0x3c>)
 8017640:	f007 f85e 	bl	801e700 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	685b      	ldr	r3, [r3, #4]
 8017648:	7b9b      	ldrb	r3, [r3, #14]
 801764a:	2b01      	cmp	r3, #1
 801764c:	d001      	beq.n	8017652 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801764e:	2301      	movs	r3, #1
 8017650:	e000      	b.n	8017654 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8017652:	2300      	movs	r3, #0
}
 8017654:	4618      	mov	r0, r3
 8017656:	3708      	adds	r7, #8
 8017658:	46bd      	mov	sp, r7
 801765a:	bd80      	pop	{r7, pc}
 801765c:	080238a8 	.word	0x080238a8
 8017660:	08023e44 	.word	0x08023e44
 8017664:	080238fc 	.word	0x080238fc

08017668 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8017668:	b5b0      	push	{r4, r5, r7, lr}
 801766a:	b08c      	sub	sp, #48	@ 0x30
 801766c:	af04      	add	r7, sp, #16
 801766e:	60f8      	str	r0, [r7, #12]
 8017670:	60b9      	str	r1, [r7, #8]
 8017672:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017674:	68fb      	ldr	r3, [r7, #12]
 8017676:	2b00      	cmp	r3, #0
 8017678:	d106      	bne.n	8017688 <tcp_output_segment+0x20>
 801767a:	4b64      	ldr	r3, [pc, #400]	@ (801780c <tcp_output_segment+0x1a4>)
 801767c:	f44f 62b7 	mov.w	r2, #1464	@ 0x5b8
 8017680:	4963      	ldr	r1, [pc, #396]	@ (8017810 <tcp_output_segment+0x1a8>)
 8017682:	4864      	ldr	r0, [pc, #400]	@ (8017814 <tcp_output_segment+0x1ac>)
 8017684:	f007 f83c 	bl	801e700 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8017688:	68bb      	ldr	r3, [r7, #8]
 801768a:	2b00      	cmp	r3, #0
 801768c:	d106      	bne.n	801769c <tcp_output_segment+0x34>
 801768e:	4b5f      	ldr	r3, [pc, #380]	@ (801780c <tcp_output_segment+0x1a4>)
 8017690:	f240 52b9 	movw	r2, #1465	@ 0x5b9
 8017694:	4960      	ldr	r1, [pc, #384]	@ (8017818 <tcp_output_segment+0x1b0>)
 8017696:	485f      	ldr	r0, [pc, #380]	@ (8017814 <tcp_output_segment+0x1ac>)
 8017698:	f007 f832 	bl	801e700 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d106      	bne.n	80176b0 <tcp_output_segment+0x48>
 80176a2:	4b5a      	ldr	r3, [pc, #360]	@ (801780c <tcp_output_segment+0x1a4>)
 80176a4:	f240 52ba 	movw	r2, #1466	@ 0x5ba
 80176a8:	495c      	ldr	r1, [pc, #368]	@ (801781c <tcp_output_segment+0x1b4>)
 80176aa:	485a      	ldr	r0, [pc, #360]	@ (8017814 <tcp_output_segment+0x1ac>)
 80176ac:	f007 f828 	bl	801e700 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80176b0:	68f8      	ldr	r0, [r7, #12]
 80176b2:	f7ff ffb9 	bl	8017628 <tcp_output_segment_busy>
 80176b6:	4603      	mov	r3, r0
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d001      	beq.n	80176c0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80176bc:	2300      	movs	r3, #0
 80176be:	e0a1      	b.n	8017804 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80176c0:	68bb      	ldr	r3, [r7, #8]
 80176c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80176c4:	68fb      	ldr	r3, [r7, #12]
 80176c6:	68dc      	ldr	r4, [r3, #12]
 80176c8:	4610      	mov	r0, r2
 80176ca:	f7f9 f8fc 	bl	80108c6 <lwip_htonl>
 80176ce:	4603      	mov	r3, r0
 80176d0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80176d2:	68bb      	ldr	r3, [r7, #8]
 80176d4:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	68dc      	ldr	r4, [r3, #12]
 80176da:	4610      	mov	r0, r2
 80176dc:	f7f9 f8de 	bl	801089c <lwip_htons>
 80176e0:	4603      	mov	r3, r0
 80176e2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80176e4:	68bb      	ldr	r3, [r7, #8]
 80176e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176e8:	68ba      	ldr	r2, [r7, #8]
 80176ea:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 80176ec:	441a      	add	r2, r3
 80176ee:	68bb      	ldr	r3, [r7, #8]
 80176f0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80176f2:	68fb      	ldr	r3, [r7, #12]
 80176f4:	68db      	ldr	r3, [r3, #12]
 80176f6:	3314      	adds	r3, #20
 80176f8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80176fa:	68fb      	ldr	r3, [r7, #12]
 80176fc:	7a9b      	ldrb	r3, [r3, #10]
 80176fe:	f003 0301 	and.w	r3, r3, #1
 8017702:	2b00      	cmp	r3, #0
 8017704:	d015      	beq.n	8017732 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8017706:	68bb      	ldr	r3, [r7, #8]
 8017708:	3304      	adds	r3, #4
 801770a:	461a      	mov	r2, r3
 801770c:	6879      	ldr	r1, [r7, #4]
 801770e:	f44f 7006 	mov.w	r0, #536	@ 0x218
 8017712:	f7fc fe91 	bl	8014438 <tcp_eff_send_mss_netif>
 8017716:	4603      	mov	r3, r0
 8017718:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801771a:	8b7b      	ldrh	r3, [r7, #26]
 801771c:	f043 7301 	orr.w	r3, r3, #33816576	@ 0x2040000
 8017720:	4618      	mov	r0, r3
 8017722:	f7f9 f8d0 	bl	80108c6 <lwip_htonl>
 8017726:	4602      	mov	r2, r0
 8017728:	69fb      	ldr	r3, [r7, #28]
 801772a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801772c:	69fb      	ldr	r3, [r7, #28]
 801772e:	3304      	adds	r3, #4
 8017730:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017732:	68bb      	ldr	r3, [r7, #8]
 8017734:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 8017738:	2b00      	cmp	r3, #0
 801773a:	da02      	bge.n	8017742 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801773c:	68bb      	ldr	r3, [r7, #8]
 801773e:	2200      	movs	r2, #0
 8017740:	861a      	strh	r2, [r3, #48]	@ 0x30
  }

  if (pcb->rttest == 0) {
 8017742:	68bb      	ldr	r3, [r7, #8]
 8017744:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017746:	2b00      	cmp	r3, #0
 8017748:	d10c      	bne.n	8017764 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801774a:	4b35      	ldr	r3, [pc, #212]	@ (8017820 <tcp_output_segment+0x1b8>)
 801774c:	681a      	ldr	r2, [r3, #0]
 801774e:	68bb      	ldr	r3, [r7, #8]
 8017750:	635a      	str	r2, [r3, #52]	@ 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017752:	68fb      	ldr	r3, [r7, #12]
 8017754:	68db      	ldr	r3, [r3, #12]
 8017756:	685b      	ldr	r3, [r3, #4]
 8017758:	4618      	mov	r0, r3
 801775a:	f7f9 f8b4 	bl	80108c6 <lwip_htonl>
 801775e:	4602      	mov	r2, r0
 8017760:	68bb      	ldr	r3, [r7, #8]
 8017762:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017764:	68fb      	ldr	r3, [r7, #12]
 8017766:	68da      	ldr	r2, [r3, #12]
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	685b      	ldr	r3, [r3, #4]
 801776c:	685b      	ldr	r3, [r3, #4]
 801776e:	1ad3      	subs	r3, r2, r3
 8017770:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017772:	68fb      	ldr	r3, [r7, #12]
 8017774:	685b      	ldr	r3, [r3, #4]
 8017776:	8959      	ldrh	r1, [r3, #10]
 8017778:	68fb      	ldr	r3, [r7, #12]
 801777a:	685b      	ldr	r3, [r3, #4]
 801777c:	8b3a      	ldrh	r2, [r7, #24]
 801777e:	1a8a      	subs	r2, r1, r2
 8017780:	b292      	uxth	r2, r2
 8017782:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	685b      	ldr	r3, [r3, #4]
 8017788:	8919      	ldrh	r1, [r3, #8]
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	685b      	ldr	r3, [r3, #4]
 801778e:	8b3a      	ldrh	r2, [r7, #24]
 8017790:	1a8a      	subs	r2, r1, r2
 8017792:	b292      	uxth	r2, r2
 8017794:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8017796:	68fb      	ldr	r3, [r7, #12]
 8017798:	685b      	ldr	r3, [r3, #4]
 801779a:	68fa      	ldr	r2, [r7, #12]
 801779c:	68d2      	ldr	r2, [r2, #12]
 801779e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80177a0:	68fb      	ldr	r3, [r7, #12]
 80177a2:	68db      	ldr	r3, [r3, #12]
 80177a4:	2200      	movs	r2, #0
 80177a6:	741a      	strb	r2, [r3, #16]
 80177a8:	2200      	movs	r2, #0
 80177aa:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	68da      	ldr	r2, [r3, #12]
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	7a9b      	ldrb	r3, [r3, #10]
 80177b4:	f003 0301 	and.w	r3, r3, #1
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d001      	beq.n	80177c0 <tcp_output_segment+0x158>
 80177bc:	2318      	movs	r3, #24
 80177be:	e000      	b.n	80177c2 <tcp_output_segment+0x15a>
 80177c0:	2314      	movs	r3, #20
 80177c2:	4413      	add	r3, r2
 80177c4:	69fa      	ldr	r2, [r7, #28]
 80177c6:	429a      	cmp	r2, r3
 80177c8:	d006      	beq.n	80177d8 <tcp_output_segment+0x170>
 80177ca:	4b10      	ldr	r3, [pc, #64]	@ (801780c <tcp_output_segment+0x1a4>)
 80177cc:	f240 621c 	movw	r2, #1564	@ 0x61c
 80177d0:	4914      	ldr	r1, [pc, #80]	@ (8017824 <tcp_output_segment+0x1bc>)
 80177d2:	4810      	ldr	r0, [pc, #64]	@ (8017814 <tcp_output_segment+0x1ac>)
 80177d4:	f006 ff94 	bl	801e700 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80177d8:	68fb      	ldr	r3, [r7, #12]
 80177da:	6858      	ldr	r0, [r3, #4]
 80177dc:	68b9      	ldr	r1, [r7, #8]
 80177de:	68bb      	ldr	r3, [r7, #8]
 80177e0:	1d1c      	adds	r4, r3, #4
 80177e2:	68bb      	ldr	r3, [r7, #8]
 80177e4:	7add      	ldrb	r5, [r3, #11]
 80177e6:	68bb      	ldr	r3, [r7, #8]
 80177e8:	7a9b      	ldrb	r3, [r3, #10]
 80177ea:	687a      	ldr	r2, [r7, #4]
 80177ec:	9202      	str	r2, [sp, #8]
 80177ee:	2206      	movs	r2, #6
 80177f0:	9201      	str	r2, [sp, #4]
 80177f2:	9300      	str	r3, [sp, #0]
 80177f4:	462b      	mov	r3, r5
 80177f6:	4622      	mov	r2, r4
 80177f8:	f004 fcc0 	bl	801c17c <ip4_output_if>
 80177fc:	4603      	mov	r3, r0
 80177fe:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017800:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017804:	4618      	mov	r0, r3
 8017806:	3720      	adds	r7, #32
 8017808:	46bd      	mov	sp, r7
 801780a:	bdb0      	pop	{r4, r5, r7, pc}
 801780c:	080238a8 	.word	0x080238a8
 8017810:	08023e6c 	.word	0x08023e6c
 8017814:	080238fc 	.word	0x080238fc
 8017818:	08023e8c 	.word	0x08023e8c
 801781c:	08023eac 	.word	0x08023eac
 8017820:	2001b014 	.word	0x2001b014
 8017824:	08023ed0 	.word	0x08023ed0

08017828 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8017828:	b5b0      	push	{r4, r5, r7, lr}
 801782a:	b084      	sub	sp, #16
 801782c:	af00      	add	r7, sp, #0
 801782e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	2b00      	cmp	r3, #0
 8017834:	d106      	bne.n	8017844 <tcp_rexmit_rto_prepare+0x1c>
 8017836:	4b31      	ldr	r3, [pc, #196]	@ (80178fc <tcp_rexmit_rto_prepare+0xd4>)
 8017838:	f240 6263 	movw	r2, #1635	@ 0x663
 801783c:	4930      	ldr	r1, [pc, #192]	@ (8017900 <tcp_rexmit_rto_prepare+0xd8>)
 801783e:	4831      	ldr	r0, [pc, #196]	@ (8017904 <tcp_rexmit_rto_prepare+0xdc>)
 8017840:	f006 ff5e 	bl	801e700 <iprintf>

  if (pcb->unacked == NULL) {
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017848:	2b00      	cmp	r3, #0
 801784a:	d102      	bne.n	8017852 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801784c:	f06f 0305 	mvn.w	r3, #5
 8017850:	e050      	b.n	80178f4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017856:	60fb      	str	r3, [r7, #12]
 8017858:	e00b      	b.n	8017872 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801785a:	68f8      	ldr	r0, [r7, #12]
 801785c:	f7ff fee4 	bl	8017628 <tcp_output_segment_busy>
 8017860:	4603      	mov	r3, r0
 8017862:	2b00      	cmp	r3, #0
 8017864:	d002      	beq.n	801786c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8017866:	f06f 0305 	mvn.w	r3, #5
 801786a:	e043      	b.n	80178f4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	60fb      	str	r3, [r7, #12]
 8017872:	68fb      	ldr	r3, [r7, #12]
 8017874:	681b      	ldr	r3, [r3, #0]
 8017876:	2b00      	cmp	r3, #0
 8017878:	d1ef      	bne.n	801785a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801787a:	68f8      	ldr	r0, [r7, #12]
 801787c:	f7ff fed4 	bl	8017628 <tcp_output_segment_busy>
 8017880:	4603      	mov	r3, r0
 8017882:	2b00      	cmp	r3, #0
 8017884:	d002      	beq.n	801788c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8017886:	f06f 0305 	mvn.w	r3, #5
 801788a:	e033      	b.n	80178f4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8017890:	68fb      	ldr	r3, [r7, #12]
 8017892:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801789c:	687b      	ldr	r3, [r7, #4]
 801789e:	2200      	movs	r2, #0
 80178a0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	8b5b      	ldrh	r3, [r3, #26]
 80178a6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80178aa:	b29a      	uxth	r2, r3
 80178ac:	687b      	ldr	r3, [r7, #4]
 80178ae:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80178b0:	68fb      	ldr	r3, [r7, #12]
 80178b2:	68db      	ldr	r3, [r3, #12]
 80178b4:	685b      	ldr	r3, [r3, #4]
 80178b6:	4618      	mov	r0, r3
 80178b8:	f7f9 f805 	bl	80108c6 <lwip_htonl>
 80178bc:	4604      	mov	r4, r0
 80178be:	68fb      	ldr	r3, [r7, #12]
 80178c0:	891b      	ldrh	r3, [r3, #8]
 80178c2:	461d      	mov	r5, r3
 80178c4:	68fb      	ldr	r3, [r7, #12]
 80178c6:	68db      	ldr	r3, [r3, #12]
 80178c8:	899b      	ldrh	r3, [r3, #12]
 80178ca:	b29b      	uxth	r3, r3
 80178cc:	4618      	mov	r0, r3
 80178ce:	f7f8 ffe5 	bl	801089c <lwip_htons>
 80178d2:	4603      	mov	r3, r0
 80178d4:	b2db      	uxtb	r3, r3
 80178d6:	f003 0303 	and.w	r3, r3, #3
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d001      	beq.n	80178e2 <tcp_rexmit_rto_prepare+0xba>
 80178de:	2301      	movs	r3, #1
 80178e0:	e000      	b.n	80178e4 <tcp_rexmit_rto_prepare+0xbc>
 80178e2:	2300      	movs	r3, #0
 80178e4:	442b      	add	r3, r5
 80178e6:	18e2      	adds	r2, r4, r3
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	2200      	movs	r2, #0
 80178f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return ERR_OK;
 80178f2:	2300      	movs	r3, #0
}
 80178f4:	4618      	mov	r0, r3
 80178f6:	3710      	adds	r7, #16
 80178f8:	46bd      	mov	sp, r7
 80178fa:	bdb0      	pop	{r4, r5, r7, pc}
 80178fc:	080238a8 	.word	0x080238a8
 8017900:	08023ee4 	.word	0x08023ee4
 8017904:	080238fc 	.word	0x080238fc

08017908 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8017908:	b580      	push	{r7, lr}
 801790a:	b082      	sub	sp, #8
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	2b00      	cmp	r3, #0
 8017914:	d106      	bne.n	8017924 <tcp_rexmit_rto_commit+0x1c>
 8017916:	4b0d      	ldr	r3, [pc, #52]	@ (801794c <tcp_rexmit_rto_commit+0x44>)
 8017918:	f44f 62d3 	mov.w	r2, #1688	@ 0x698
 801791c:	490c      	ldr	r1, [pc, #48]	@ (8017950 <tcp_rexmit_rto_commit+0x48>)
 801791e:	480d      	ldr	r0, [pc, #52]	@ (8017954 <tcp_rexmit_rto_commit+0x4c>)
 8017920:	f006 feee 	bl	801e700 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801792a:	2bff      	cmp	r3, #255	@ 0xff
 801792c:	d007      	beq.n	801793e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801792e:	687b      	ldr	r3, [r7, #4]
 8017930:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017934:	3301      	adds	r3, #1
 8017936:	b2da      	uxtb	r2, r3
 8017938:	687b      	ldr	r3, [r7, #4]
 801793a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801793e:	6878      	ldr	r0, [r7, #4]
 8017940:	f7ff fc7e 	bl	8017240 <tcp_output>
}
 8017944:	bf00      	nop
 8017946:	3708      	adds	r7, #8
 8017948:	46bd      	mov	sp, r7
 801794a:	bd80      	pop	{r7, pc}
 801794c:	080238a8 	.word	0x080238a8
 8017950:	08023f08 	.word	0x08023f08
 8017954:	080238fc 	.word	0x080238fc

08017958 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8017958:	b580      	push	{r7, lr}
 801795a:	b082      	sub	sp, #8
 801795c:	af00      	add	r7, sp, #0
 801795e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017960:	687b      	ldr	r3, [r7, #4]
 8017962:	2b00      	cmp	r3, #0
 8017964:	d106      	bne.n	8017974 <tcp_rexmit_rto+0x1c>
 8017966:	4b0a      	ldr	r3, [pc, #40]	@ (8017990 <tcp_rexmit_rto+0x38>)
 8017968:	f240 62ad 	movw	r2, #1709	@ 0x6ad
 801796c:	4909      	ldr	r1, [pc, #36]	@ (8017994 <tcp_rexmit_rto+0x3c>)
 801796e:	480a      	ldr	r0, [pc, #40]	@ (8017998 <tcp_rexmit_rto+0x40>)
 8017970:	f006 fec6 	bl	801e700 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017974:	6878      	ldr	r0, [r7, #4]
 8017976:	f7ff ff57 	bl	8017828 <tcp_rexmit_rto_prepare>
 801797a:	4603      	mov	r3, r0
 801797c:	2b00      	cmp	r3, #0
 801797e:	d102      	bne.n	8017986 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017980:	6878      	ldr	r0, [r7, #4]
 8017982:	f7ff ffc1 	bl	8017908 <tcp_rexmit_rto_commit>
  }
}
 8017986:	bf00      	nop
 8017988:	3708      	adds	r7, #8
 801798a:	46bd      	mov	sp, r7
 801798c:	bd80      	pop	{r7, pc}
 801798e:	bf00      	nop
 8017990:	080238a8 	.word	0x080238a8
 8017994:	08023f2c 	.word	0x08023f2c
 8017998:	080238fc 	.word	0x080238fc

0801799c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801799c:	b590      	push	{r4, r7, lr}
 801799e:	b085      	sub	sp, #20
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	d106      	bne.n	80179b8 <tcp_rexmit+0x1c>
 80179aa:	4b2f      	ldr	r3, [pc, #188]	@ (8017a68 <tcp_rexmit+0xcc>)
 80179ac:	f240 62c1 	movw	r2, #1729	@ 0x6c1
 80179b0:	492e      	ldr	r1, [pc, #184]	@ (8017a6c <tcp_rexmit+0xd0>)
 80179b2:	482f      	ldr	r0, [pc, #188]	@ (8017a70 <tcp_rexmit+0xd4>)
 80179b4:	f006 fea4 	bl	801e700 <iprintf>

  if (pcb->unacked == NULL) {
 80179b8:	687b      	ldr	r3, [r7, #4]
 80179ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d102      	bne.n	80179c6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80179c0:	f06f 0305 	mvn.w	r3, #5
 80179c4:	e04c      	b.n	8017a60 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80179ca:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80179cc:	68b8      	ldr	r0, [r7, #8]
 80179ce:	f7ff fe2b 	bl	8017628 <tcp_output_segment_busy>
 80179d2:	4603      	mov	r3, r0
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d002      	beq.n	80179de <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80179d8:	f06f 0305 	mvn.w	r3, #5
 80179dc:	e040      	b.n	8017a60 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80179de:	68bb      	ldr	r3, [r7, #8]
 80179e0:	681a      	ldr	r2, [r3, #0]
 80179e2:	687b      	ldr	r3, [r7, #4]
 80179e4:	671a      	str	r2, [r3, #112]	@ 0x70

  cur_seg = &(pcb->unsent);
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	336c      	adds	r3, #108	@ 0x6c
 80179ea:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80179ec:	e002      	b.n	80179f4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80179ee:	68fb      	ldr	r3, [r7, #12]
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80179f4:	68fb      	ldr	r3, [r7, #12]
 80179f6:	681b      	ldr	r3, [r3, #0]
 80179f8:	2b00      	cmp	r3, #0
 80179fa:	d011      	beq.n	8017a20 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80179fc:	68fb      	ldr	r3, [r7, #12]
 80179fe:	681b      	ldr	r3, [r3, #0]
 8017a00:	68db      	ldr	r3, [r3, #12]
 8017a02:	685b      	ldr	r3, [r3, #4]
 8017a04:	4618      	mov	r0, r3
 8017a06:	f7f8 ff5e 	bl	80108c6 <lwip_htonl>
 8017a0a:	4604      	mov	r4, r0
 8017a0c:	68bb      	ldr	r3, [r7, #8]
 8017a0e:	68db      	ldr	r3, [r3, #12]
 8017a10:	685b      	ldr	r3, [r3, #4]
 8017a12:	4618      	mov	r0, r3
 8017a14:	f7f8 ff57 	bl	80108c6 <lwip_htonl>
 8017a18:	4603      	mov	r3, r0
 8017a1a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	dbe6      	blt.n	80179ee <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017a20:	68fb      	ldr	r3, [r7, #12]
 8017a22:	681a      	ldr	r2, [r3, #0]
 8017a24:	68bb      	ldr	r3, [r7, #8]
 8017a26:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	68ba      	ldr	r2, [r7, #8]
 8017a2c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017a2e:	68bb      	ldr	r3, [r7, #8]
 8017a30:	681b      	ldr	r3, [r3, #0]
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d103      	bne.n	8017a3e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	2200      	movs	r2, #0
 8017a3a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017a44:	2bff      	cmp	r3, #255	@ 0xff
 8017a46:	d007      	beq.n	8017a58 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8017a4e:	3301      	adds	r3, #1
 8017a50:	b2da      	uxtb	r2, r3
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	2200      	movs	r2, #0
 8017a5c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017a5e:	2300      	movs	r3, #0
}
 8017a60:	4618      	mov	r0, r3
 8017a62:	3714      	adds	r7, #20
 8017a64:	46bd      	mov	sp, r7
 8017a66:	bd90      	pop	{r4, r7, pc}
 8017a68:	080238a8 	.word	0x080238a8
 8017a6c:	08023f48 	.word	0x08023f48
 8017a70:	080238fc 	.word	0x080238fc

08017a74 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017a74:	b580      	push	{r7, lr}
 8017a76:	b082      	sub	sp, #8
 8017a78:	af00      	add	r7, sp, #0
 8017a7a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017a7c:	687b      	ldr	r3, [r7, #4]
 8017a7e:	2b00      	cmp	r3, #0
 8017a80:	d106      	bne.n	8017a90 <tcp_rexmit_fast+0x1c>
 8017a82:	4b2a      	ldr	r3, [pc, #168]	@ (8017b2c <tcp_rexmit_fast+0xb8>)
 8017a84:	f240 62f9 	movw	r2, #1785	@ 0x6f9
 8017a88:	4929      	ldr	r1, [pc, #164]	@ (8017b30 <tcp_rexmit_fast+0xbc>)
 8017a8a:	482a      	ldr	r0, [pc, #168]	@ (8017b34 <tcp_rexmit_fast+0xc0>)
 8017a8c:	f006 fe38 	bl	801e700 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017a94:	2b00      	cmp	r3, #0
 8017a96:	d044      	beq.n	8017b22 <tcp_rexmit_fast+0xae>
 8017a98:	687b      	ldr	r3, [r7, #4]
 8017a9a:	8b5b      	ldrh	r3, [r3, #26]
 8017a9c:	f003 0304 	and.w	r3, r3, #4
 8017aa0:	2b00      	cmp	r3, #0
 8017aa2:	d13e      	bne.n	8017b22 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8017aa4:	6878      	ldr	r0, [r7, #4]
 8017aa6:	f7ff ff79 	bl	801799c <tcp_rexmit>
 8017aaa:	4603      	mov	r3, r0
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d138      	bne.n	8017b22 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	@ 0x48
 8017abc:	4293      	cmp	r3, r2
 8017abe:	bf28      	it	cs
 8017ac0:	4613      	movcs	r3, r2
 8017ac2:	b29b      	uxth	r3, r3
 8017ac4:	0fda      	lsrs	r2, r3, #31
 8017ac6:	4413      	add	r3, r2
 8017ac8:	105b      	asrs	r3, r3, #1
 8017aca:	b29a      	uxth	r2, r3
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	@ 0x4a
 8017ad8:	461a      	mov	r2, r3
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017ade:	005b      	lsls	r3, r3, #1
 8017ae0:	429a      	cmp	r2, r3
 8017ae2:	d206      	bcs.n	8017af2 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017ae8:	005b      	lsls	r3, r3, #1
 8017aea:	b29a      	uxth	r2, r3
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	@ 0x4a
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8017afc:	4619      	mov	r1, r3
 8017afe:	0049      	lsls	r1, r1, #1
 8017b00:	440b      	add	r3, r1
 8017b02:	b29b      	uxth	r3, r3
 8017b04:	4413      	add	r3, r2
 8017b06:	b29a      	uxth	r2, r3
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	8b5b      	ldrh	r3, [r3, #26]
 8017b12:	f043 0304 	orr.w	r3, r3, #4
 8017b16:	b29a      	uxth	r2, r3
 8017b18:	687b      	ldr	r3, [r7, #4]
 8017b1a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	2200      	movs	r2, #0
 8017b20:	861a      	strh	r2, [r3, #48]	@ 0x30
    }
  }
}
 8017b22:	bf00      	nop
 8017b24:	3708      	adds	r7, #8
 8017b26:	46bd      	mov	sp, r7
 8017b28:	bd80      	pop	{r7, pc}
 8017b2a:	bf00      	nop
 8017b2c:	080238a8 	.word	0x080238a8
 8017b30:	08023f60 	.word	0x08023f60
 8017b34:	080238fc 	.word	0x080238fc

08017b38 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8017b38:	b580      	push	{r7, lr}
 8017b3a:	b086      	sub	sp, #24
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	60f8      	str	r0, [r7, #12]
 8017b40:	607b      	str	r3, [r7, #4]
 8017b42:	460b      	mov	r3, r1
 8017b44:	817b      	strh	r3, [r7, #10]
 8017b46:	4613      	mov	r3, r2
 8017b48:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8017b4a:	897a      	ldrh	r2, [r7, #10]
 8017b4c:	893b      	ldrh	r3, [r7, #8]
 8017b4e:	4413      	add	r3, r2
 8017b50:	b29b      	uxth	r3, r3
 8017b52:	3314      	adds	r3, #20
 8017b54:	b29b      	uxth	r3, r3
 8017b56:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8017b5a:	4619      	mov	r1, r3
 8017b5c:	2022      	movs	r0, #34	@ 0x22
 8017b5e:	f7fa faa5 	bl	80120ac <pbuf_alloc>
 8017b62:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017b64:	697b      	ldr	r3, [r7, #20]
 8017b66:	2b00      	cmp	r3, #0
 8017b68:	d04d      	beq.n	8017c06 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8017b6a:	897b      	ldrh	r3, [r7, #10]
 8017b6c:	3313      	adds	r3, #19
 8017b6e:	697a      	ldr	r2, [r7, #20]
 8017b70:	8952      	ldrh	r2, [r2, #10]
 8017b72:	4293      	cmp	r3, r2
 8017b74:	db06      	blt.n	8017b84 <tcp_output_alloc_header_common+0x4c>
 8017b76:	4b26      	ldr	r3, [pc, #152]	@ (8017c10 <tcp_output_alloc_header_common+0xd8>)
 8017b78:	f240 7223 	movw	r2, #1827	@ 0x723
 8017b7c:	4925      	ldr	r1, [pc, #148]	@ (8017c14 <tcp_output_alloc_header_common+0xdc>)
 8017b7e:	4826      	ldr	r0, [pc, #152]	@ (8017c18 <tcp_output_alloc_header_common+0xe0>)
 8017b80:	f006 fdbe 	bl	801e700 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017b84:	697b      	ldr	r3, [r7, #20]
 8017b86:	685b      	ldr	r3, [r3, #4]
 8017b88:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8017b8a:	8c3b      	ldrh	r3, [r7, #32]
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	f7f8 fe85 	bl	801089c <lwip_htons>
 8017b92:	4603      	mov	r3, r0
 8017b94:	461a      	mov	r2, r3
 8017b96:	693b      	ldr	r3, [r7, #16]
 8017b98:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8017b9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8017b9c:	4618      	mov	r0, r3
 8017b9e:	f7f8 fe7d 	bl	801089c <lwip_htons>
 8017ba2:	4603      	mov	r3, r0
 8017ba4:	461a      	mov	r2, r3
 8017ba6:	693b      	ldr	r3, [r7, #16]
 8017ba8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8017baa:	693b      	ldr	r3, [r7, #16]
 8017bac:	687a      	ldr	r2, [r7, #4]
 8017bae:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8017bb0:	68f8      	ldr	r0, [r7, #12]
 8017bb2:	f7f8 fe88 	bl	80108c6 <lwip_htonl>
 8017bb6:	4602      	mov	r2, r0
 8017bb8:	693b      	ldr	r3, [r7, #16]
 8017bba:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8017bbc:	897b      	ldrh	r3, [r7, #10]
 8017bbe:	089b      	lsrs	r3, r3, #2
 8017bc0:	b29b      	uxth	r3, r3
 8017bc2:	3305      	adds	r3, #5
 8017bc4:	b29b      	uxth	r3, r3
 8017bc6:	031b      	lsls	r3, r3, #12
 8017bc8:	b29a      	uxth	r2, r3
 8017bca:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8017bce:	b29b      	uxth	r3, r3
 8017bd0:	4313      	orrs	r3, r2
 8017bd2:	b29b      	uxth	r3, r3
 8017bd4:	4618      	mov	r0, r3
 8017bd6:	f7f8 fe61 	bl	801089c <lwip_htons>
 8017bda:	4603      	mov	r3, r0
 8017bdc:	461a      	mov	r2, r3
 8017bde:	693b      	ldr	r3, [r7, #16]
 8017be0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8017be2:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017be4:	4618      	mov	r0, r3
 8017be6:	f7f8 fe59 	bl	801089c <lwip_htons>
 8017bea:	4603      	mov	r3, r0
 8017bec:	461a      	mov	r2, r3
 8017bee:	693b      	ldr	r3, [r7, #16]
 8017bf0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017bf2:	693b      	ldr	r3, [r7, #16]
 8017bf4:	2200      	movs	r2, #0
 8017bf6:	741a      	strb	r2, [r3, #16]
 8017bf8:	2200      	movs	r2, #0
 8017bfa:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017bfc:	693b      	ldr	r3, [r7, #16]
 8017bfe:	2200      	movs	r2, #0
 8017c00:	749a      	strb	r2, [r3, #18]
 8017c02:	2200      	movs	r2, #0
 8017c04:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8017c06:	697b      	ldr	r3, [r7, #20]
}
 8017c08:	4618      	mov	r0, r3
 8017c0a:	3718      	adds	r7, #24
 8017c0c:	46bd      	mov	sp, r7
 8017c0e:	bd80      	pop	{r7, pc}
 8017c10:	080238a8 	.word	0x080238a8
 8017c14:	08023f80 	.word	0x08023f80
 8017c18:	080238fc 	.word	0x080238fc

08017c1c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017c1c:	b5b0      	push	{r4, r5, r7, lr}
 8017c1e:	b08a      	sub	sp, #40	@ 0x28
 8017c20:	af04      	add	r7, sp, #16
 8017c22:	60f8      	str	r0, [r7, #12]
 8017c24:	607b      	str	r3, [r7, #4]
 8017c26:	460b      	mov	r3, r1
 8017c28:	817b      	strh	r3, [r7, #10]
 8017c2a:	4613      	mov	r3, r2
 8017c2c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017c2e:	68fb      	ldr	r3, [r7, #12]
 8017c30:	2b00      	cmp	r3, #0
 8017c32:	d106      	bne.n	8017c42 <tcp_output_alloc_header+0x26>
 8017c34:	4b15      	ldr	r3, [pc, #84]	@ (8017c8c <tcp_output_alloc_header+0x70>)
 8017c36:	f240 7242 	movw	r2, #1858	@ 0x742
 8017c3a:	4915      	ldr	r1, [pc, #84]	@ (8017c90 <tcp_output_alloc_header+0x74>)
 8017c3c:	4815      	ldr	r0, [pc, #84]	@ (8017c94 <tcp_output_alloc_header+0x78>)
 8017c3e:	f006 fd5f 	bl	801e700 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017c42:	68fb      	ldr	r3, [r7, #12]
 8017c44:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8017c46:	68fb      	ldr	r3, [r7, #12]
 8017c48:	8adb      	ldrh	r3, [r3, #22]
 8017c4a:	68fa      	ldr	r2, [r7, #12]
 8017c4c:	8b12      	ldrh	r2, [r2, #24]
 8017c4e:	68f9      	ldr	r1, [r7, #12]
 8017c50:	8d49      	ldrh	r1, [r1, #42]	@ 0x2a
 8017c52:	893d      	ldrh	r5, [r7, #8]
 8017c54:	897c      	ldrh	r4, [r7, #10]
 8017c56:	9103      	str	r1, [sp, #12]
 8017c58:	2110      	movs	r1, #16
 8017c5a:	9102      	str	r1, [sp, #8]
 8017c5c:	9201      	str	r2, [sp, #4]
 8017c5e:	9300      	str	r3, [sp, #0]
 8017c60:	687b      	ldr	r3, [r7, #4]
 8017c62:	462a      	mov	r2, r5
 8017c64:	4621      	mov	r1, r4
 8017c66:	f7ff ff67 	bl	8017b38 <tcp_output_alloc_header_common>
 8017c6a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017c6c:	697b      	ldr	r3, [r7, #20]
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d006      	beq.n	8017c80 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017c72:	68fb      	ldr	r3, [r7, #12]
 8017c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017c76:	68fa      	ldr	r2, [r7, #12]
 8017c78:	8d52      	ldrh	r2, [r2, #42]	@ 0x2a
 8017c7a:	441a      	add	r2, r3
 8017c7c:	68fb      	ldr	r3, [r7, #12]
 8017c7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  return p;
 8017c80:	697b      	ldr	r3, [r7, #20]
}
 8017c82:	4618      	mov	r0, r3
 8017c84:	3718      	adds	r7, #24
 8017c86:	46bd      	mov	sp, r7
 8017c88:	bdb0      	pop	{r4, r5, r7, pc}
 8017c8a:	bf00      	nop
 8017c8c:	080238a8 	.word	0x080238a8
 8017c90:	08023fb0 	.word	0x08023fb0
 8017c94:	080238fc 	.word	0x080238fc

08017c98 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	b088      	sub	sp, #32
 8017c9c:	af00      	add	r7, sp, #0
 8017c9e:	60f8      	str	r0, [r7, #12]
 8017ca0:	60b9      	str	r1, [r7, #8]
 8017ca2:	4611      	mov	r1, r2
 8017ca4:	461a      	mov	r2, r3
 8017ca6:	460b      	mov	r3, r1
 8017ca8:	71fb      	strb	r3, [r7, #7]
 8017caa:	4613      	mov	r3, r2
 8017cac:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8017cae:	2300      	movs	r3, #0
 8017cb0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8017cb2:	68bb      	ldr	r3, [r7, #8]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d106      	bne.n	8017cc6 <tcp_output_fill_options+0x2e>
 8017cb8:	4b12      	ldr	r3, [pc, #72]	@ (8017d04 <tcp_output_fill_options+0x6c>)
 8017cba:	f240 7256 	movw	r2, #1878	@ 0x756
 8017cbe:	4912      	ldr	r1, [pc, #72]	@ (8017d08 <tcp_output_fill_options+0x70>)
 8017cc0:	4812      	ldr	r0, [pc, #72]	@ (8017d0c <tcp_output_fill_options+0x74>)
 8017cc2:	f006 fd1d 	bl	801e700 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8017cc6:	68bb      	ldr	r3, [r7, #8]
 8017cc8:	685b      	ldr	r3, [r3, #4]
 8017cca:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8017ccc:	69bb      	ldr	r3, [r7, #24]
 8017cce:	3314      	adds	r3, #20
 8017cd0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8017cd2:	8bfb      	ldrh	r3, [r7, #30]
 8017cd4:	009b      	lsls	r3, r3, #2
 8017cd6:	461a      	mov	r2, r3
 8017cd8:	79fb      	ldrb	r3, [r7, #7]
 8017cda:	009b      	lsls	r3, r3, #2
 8017cdc:	f003 0304 	and.w	r3, r3, #4
 8017ce0:	4413      	add	r3, r2
 8017ce2:	3314      	adds	r3, #20
 8017ce4:	69ba      	ldr	r2, [r7, #24]
 8017ce6:	4413      	add	r3, r2
 8017ce8:	697a      	ldr	r2, [r7, #20]
 8017cea:	429a      	cmp	r2, r3
 8017cec:	d006      	beq.n	8017cfc <tcp_output_fill_options+0x64>
 8017cee:	4b05      	ldr	r3, [pc, #20]	@ (8017d04 <tcp_output_fill_options+0x6c>)
 8017cf0:	f240 7275 	movw	r2, #1909	@ 0x775
 8017cf4:	4906      	ldr	r1, [pc, #24]	@ (8017d10 <tcp_output_fill_options+0x78>)
 8017cf6:	4805      	ldr	r0, [pc, #20]	@ (8017d0c <tcp_output_fill_options+0x74>)
 8017cf8:	f006 fd02 	bl	801e700 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017cfc:	bf00      	nop
 8017cfe:	3720      	adds	r7, #32
 8017d00:	46bd      	mov	sp, r7
 8017d02:	bd80      	pop	{r7, pc}
 8017d04:	080238a8 	.word	0x080238a8
 8017d08:	08023fd8 	.word	0x08023fd8
 8017d0c:	080238fc 	.word	0x080238fc
 8017d10:	08023ed0 	.word	0x08023ed0

08017d14 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017d14:	b580      	push	{r7, lr}
 8017d16:	b08a      	sub	sp, #40	@ 0x28
 8017d18:	af04      	add	r7, sp, #16
 8017d1a:	60f8      	str	r0, [r7, #12]
 8017d1c:	60b9      	str	r1, [r7, #8]
 8017d1e:	607a      	str	r2, [r7, #4]
 8017d20:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017d22:	68bb      	ldr	r3, [r7, #8]
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d106      	bne.n	8017d36 <tcp_output_control_segment+0x22>
 8017d28:	4b1c      	ldr	r3, [pc, #112]	@ (8017d9c <tcp_output_control_segment+0x88>)
 8017d2a:	f240 7287 	movw	r2, #1927	@ 0x787
 8017d2e:	491c      	ldr	r1, [pc, #112]	@ (8017da0 <tcp_output_control_segment+0x8c>)
 8017d30:	481c      	ldr	r0, [pc, #112]	@ (8017da4 <tcp_output_control_segment+0x90>)
 8017d32:	f006 fce5 	bl	801e700 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8017d36:	683a      	ldr	r2, [r7, #0]
 8017d38:	6879      	ldr	r1, [r7, #4]
 8017d3a:	68f8      	ldr	r0, [r7, #12]
 8017d3c:	f7fe ff42 	bl	8016bc4 <tcp_route>
 8017d40:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017d42:	693b      	ldr	r3, [r7, #16]
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d102      	bne.n	8017d4e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8017d48:	23fc      	movs	r3, #252	@ 0xfc
 8017d4a:	75fb      	strb	r3, [r7, #23]
 8017d4c:	e01c      	b.n	8017d88 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017d4e:	68fb      	ldr	r3, [r7, #12]
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d006      	beq.n	8017d62 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017d54:	68fb      	ldr	r3, [r7, #12]
 8017d56:	7adb      	ldrb	r3, [r3, #11]
 8017d58:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8017d5a:	68fb      	ldr	r3, [r7, #12]
 8017d5c:	7a9b      	ldrb	r3, [r3, #10]
 8017d5e:	757b      	strb	r3, [r7, #21]
 8017d60:	e003      	b.n	8017d6a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017d62:	23ff      	movs	r3, #255	@ 0xff
 8017d64:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8017d66:	2300      	movs	r3, #0
 8017d68:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8017d6a:	7dba      	ldrb	r2, [r7, #22]
 8017d6c:	693b      	ldr	r3, [r7, #16]
 8017d6e:	9302      	str	r3, [sp, #8]
 8017d70:	2306      	movs	r3, #6
 8017d72:	9301      	str	r3, [sp, #4]
 8017d74:	7d7b      	ldrb	r3, [r7, #21]
 8017d76:	9300      	str	r3, [sp, #0]
 8017d78:	4613      	mov	r3, r2
 8017d7a:	683a      	ldr	r2, [r7, #0]
 8017d7c:	6879      	ldr	r1, [r7, #4]
 8017d7e:	68b8      	ldr	r0, [r7, #8]
 8017d80:	f004 f9fc 	bl	801c17c <ip4_output_if>
 8017d84:	4603      	mov	r3, r0
 8017d86:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8017d88:	68b8      	ldr	r0, [r7, #8]
 8017d8a:	f7fa fc73 	bl	8012674 <pbuf_free>
  return err;
 8017d8e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017d92:	4618      	mov	r0, r3
 8017d94:	3718      	adds	r7, #24
 8017d96:	46bd      	mov	sp, r7
 8017d98:	bd80      	pop	{r7, pc}
 8017d9a:	bf00      	nop
 8017d9c:	080238a8 	.word	0x080238a8
 8017da0:	08024000 	.word	0x08024000
 8017da4:	080238fc 	.word	0x080238fc

08017da8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8017da8:	b590      	push	{r4, r7, lr}
 8017daa:	b08b      	sub	sp, #44	@ 0x2c
 8017dac:	af04      	add	r7, sp, #16
 8017dae:	60f8      	str	r0, [r7, #12]
 8017db0:	60b9      	str	r1, [r7, #8]
 8017db2:	607a      	str	r2, [r7, #4]
 8017db4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8017db6:	683b      	ldr	r3, [r7, #0]
 8017db8:	2b00      	cmp	r3, #0
 8017dba:	d106      	bne.n	8017dca <tcp_rst+0x22>
 8017dbc:	4b1f      	ldr	r3, [pc, #124]	@ (8017e3c <tcp_rst+0x94>)
 8017dbe:	f240 72c4 	movw	r2, #1988	@ 0x7c4
 8017dc2:	491f      	ldr	r1, [pc, #124]	@ (8017e40 <tcp_rst+0x98>)
 8017dc4:	481f      	ldr	r0, [pc, #124]	@ (8017e44 <tcp_rst+0x9c>)
 8017dc6:	f006 fc9b 	bl	801e700 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8017dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d106      	bne.n	8017dde <tcp_rst+0x36>
 8017dd0:	4b1a      	ldr	r3, [pc, #104]	@ (8017e3c <tcp_rst+0x94>)
 8017dd2:	f240 72c5 	movw	r2, #1989	@ 0x7c5
 8017dd6:	491c      	ldr	r1, [pc, #112]	@ (8017e48 <tcp_rst+0xa0>)
 8017dd8:	481a      	ldr	r0, [pc, #104]	@ (8017e44 <tcp_rst+0x9c>)
 8017dda:	f006 fc91 	bl	801e700 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017dde:	2300      	movs	r3, #0
 8017de0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8017de2:	f246 0308 	movw	r3, #24584	@ 0x6008
 8017de6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8017de8:	7dfb      	ldrb	r3, [r7, #23]
 8017dea:	b29c      	uxth	r4, r3
 8017dec:	68b8      	ldr	r0, [r7, #8]
 8017dee:	f7f8 fd6a 	bl	80108c6 <lwip_htonl>
 8017df2:	4602      	mov	r2, r0
 8017df4:	8abb      	ldrh	r3, [r7, #20]
 8017df6:	9303      	str	r3, [sp, #12]
 8017df8:	2314      	movs	r3, #20
 8017dfa:	9302      	str	r3, [sp, #8]
 8017dfc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8017dfe:	9301      	str	r3, [sp, #4]
 8017e00:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8017e02:	9300      	str	r3, [sp, #0]
 8017e04:	4613      	mov	r3, r2
 8017e06:	2200      	movs	r2, #0
 8017e08:	4621      	mov	r1, r4
 8017e0a:	6878      	ldr	r0, [r7, #4]
 8017e0c:	f7ff fe94 	bl	8017b38 <tcp_output_alloc_header_common>
 8017e10:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017e12:	693b      	ldr	r3, [r7, #16]
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d00c      	beq.n	8017e32 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017e18:	7dfb      	ldrb	r3, [r7, #23]
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	6939      	ldr	r1, [r7, #16]
 8017e1e:	68f8      	ldr	r0, [r7, #12]
 8017e20:	f7ff ff3a 	bl	8017c98 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017e26:	683a      	ldr	r2, [r7, #0]
 8017e28:	6939      	ldr	r1, [r7, #16]
 8017e2a:	68f8      	ldr	r0, [r7, #12]
 8017e2c:	f7ff ff72 	bl	8017d14 <tcp_output_control_segment>
 8017e30:	e000      	b.n	8017e34 <tcp_rst+0x8c>
    return;
 8017e32:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017e34:	371c      	adds	r7, #28
 8017e36:	46bd      	mov	sp, r7
 8017e38:	bd90      	pop	{r4, r7, pc}
 8017e3a:	bf00      	nop
 8017e3c:	080238a8 	.word	0x080238a8
 8017e40:	0802402c 	.word	0x0802402c
 8017e44:	080238fc 	.word	0x080238fc
 8017e48:	08024048 	.word	0x08024048

08017e4c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017e4c:	b590      	push	{r4, r7, lr}
 8017e4e:	b087      	sub	sp, #28
 8017e50:	af00      	add	r7, sp, #0
 8017e52:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017e54:	2300      	movs	r3, #0
 8017e56:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8017e58:	2300      	movs	r3, #0
 8017e5a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017e5c:	687b      	ldr	r3, [r7, #4]
 8017e5e:	2b00      	cmp	r3, #0
 8017e60:	d106      	bne.n	8017e70 <tcp_send_empty_ack+0x24>
 8017e62:	4b28      	ldr	r3, [pc, #160]	@ (8017f04 <tcp_send_empty_ack+0xb8>)
 8017e64:	f240 72ea 	movw	r2, #2026	@ 0x7ea
 8017e68:	4927      	ldr	r1, [pc, #156]	@ (8017f08 <tcp_send_empty_ack+0xbc>)
 8017e6a:	4828      	ldr	r0, [pc, #160]	@ (8017f0c <tcp_send_empty_ack+0xc0>)
 8017e6c:	f006 fc48 	bl	801e700 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017e70:	7dfb      	ldrb	r3, [r7, #23]
 8017e72:	009b      	lsls	r3, r3, #2
 8017e74:	b2db      	uxtb	r3, r3
 8017e76:	f003 0304 	and.w	r3, r3, #4
 8017e7a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017e7c:	7d7b      	ldrb	r3, [r7, #21]
 8017e7e:	b29c      	uxth	r4, r3
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017e84:	4618      	mov	r0, r3
 8017e86:	f7f8 fd1e 	bl	80108c6 <lwip_htonl>
 8017e8a:	4603      	mov	r3, r0
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	4621      	mov	r1, r4
 8017e90:	6878      	ldr	r0, [r7, #4]
 8017e92:	f7ff fec3 	bl	8017c1c <tcp_output_alloc_header>
 8017e96:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017e98:	693b      	ldr	r3, [r7, #16]
 8017e9a:	2b00      	cmp	r3, #0
 8017e9c:	d109      	bne.n	8017eb2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017e9e:	687b      	ldr	r3, [r7, #4]
 8017ea0:	8b5b      	ldrh	r3, [r3, #26]
 8017ea2:	f043 0303 	orr.w	r3, r3, #3
 8017ea6:	b29a      	uxth	r2, r3
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8017eac:	f06f 0301 	mvn.w	r3, #1
 8017eb0:	e023      	b.n	8017efa <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8017eb2:	7dbb      	ldrb	r3, [r7, #22]
 8017eb4:	7dfa      	ldrb	r2, [r7, #23]
 8017eb6:	6939      	ldr	r1, [r7, #16]
 8017eb8:	6878      	ldr	r0, [r7, #4]
 8017eba:	f7ff feed 	bl	8017c98 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017ebe:	687a      	ldr	r2, [r7, #4]
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	3304      	adds	r3, #4
 8017ec4:	6939      	ldr	r1, [r7, #16]
 8017ec6:	6878      	ldr	r0, [r7, #4]
 8017ec8:	f7ff ff24 	bl	8017d14 <tcp_output_control_segment>
 8017ecc:	4603      	mov	r3, r0
 8017ece:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8017ed0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8017ed4:	2b00      	cmp	r3, #0
 8017ed6:	d007      	beq.n	8017ee8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	8b5b      	ldrh	r3, [r3, #26]
 8017edc:	f043 0303 	orr.w	r3, r3, #3
 8017ee0:	b29a      	uxth	r2, r3
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	835a      	strh	r2, [r3, #26]
 8017ee6:	e006      	b.n	8017ef6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	8b5b      	ldrh	r3, [r3, #26]
 8017eec:	f023 0303 	bic.w	r3, r3, #3
 8017ef0:	b29a      	uxth	r2, r3
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8017ef6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017efa:	4618      	mov	r0, r3
 8017efc:	371c      	adds	r7, #28
 8017efe:	46bd      	mov	sp, r7
 8017f00:	bd90      	pop	{r4, r7, pc}
 8017f02:	bf00      	nop
 8017f04:	080238a8 	.word	0x080238a8
 8017f08:	08024064 	.word	0x08024064
 8017f0c:	080238fc 	.word	0x080238fc

08017f10 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017f10:	b590      	push	{r4, r7, lr}
 8017f12:	b087      	sub	sp, #28
 8017f14:	af00      	add	r7, sp, #0
 8017f16:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017f18:	2300      	movs	r3, #0
 8017f1a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d106      	bne.n	8017f30 <tcp_keepalive+0x20>
 8017f22:	4b18      	ldr	r3, [pc, #96]	@ (8017f84 <tcp_keepalive+0x74>)
 8017f24:	f640 0224 	movw	r2, #2084	@ 0x824
 8017f28:	4917      	ldr	r1, [pc, #92]	@ (8017f88 <tcp_keepalive+0x78>)
 8017f2a:	4818      	ldr	r0, [pc, #96]	@ (8017f8c <tcp_keepalive+0x7c>)
 8017f2c:	f006 fbe8 	bl	801e700 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017f30:	7dfb      	ldrb	r3, [r7, #23]
 8017f32:	b29c      	uxth	r4, r3
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017f38:	3b01      	subs	r3, #1
 8017f3a:	4618      	mov	r0, r3
 8017f3c:	f7f8 fcc3 	bl	80108c6 <lwip_htonl>
 8017f40:	4603      	mov	r3, r0
 8017f42:	2200      	movs	r2, #0
 8017f44:	4621      	mov	r1, r4
 8017f46:	6878      	ldr	r0, [r7, #4]
 8017f48:	f7ff fe68 	bl	8017c1c <tcp_output_alloc_header>
 8017f4c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017f4e:	693b      	ldr	r3, [r7, #16]
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d102      	bne.n	8017f5a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017f54:	f04f 33ff 	mov.w	r3, #4294967295
 8017f58:	e010      	b.n	8017f7c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017f5a:	7dfb      	ldrb	r3, [r7, #23]
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	6939      	ldr	r1, [r7, #16]
 8017f60:	6878      	ldr	r0, [r7, #4]
 8017f62:	f7ff fe99 	bl	8017c98 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017f66:	687a      	ldr	r2, [r7, #4]
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	3304      	adds	r3, #4
 8017f6c:	6939      	ldr	r1, [r7, #16]
 8017f6e:	6878      	ldr	r0, [r7, #4]
 8017f70:	f7ff fed0 	bl	8017d14 <tcp_output_control_segment>
 8017f74:	4603      	mov	r3, r0
 8017f76:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017f78:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017f7c:	4618      	mov	r0, r3
 8017f7e:	371c      	adds	r7, #28
 8017f80:	46bd      	mov	sp, r7
 8017f82:	bd90      	pop	{r4, r7, pc}
 8017f84:	080238a8 	.word	0x080238a8
 8017f88:	08024084 	.word	0x08024084
 8017f8c:	080238fc 	.word	0x080238fc

08017f90 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8017f90:	b590      	push	{r4, r7, lr}
 8017f92:	b08b      	sub	sp, #44	@ 0x2c
 8017f94:	af00      	add	r7, sp, #0
 8017f96:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017f98:	2300      	movs	r3, #0
 8017f9a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	2b00      	cmp	r3, #0
 8017fa2:	d106      	bne.n	8017fb2 <tcp_zero_window_probe+0x22>
 8017fa4:	4b4c      	ldr	r3, [pc, #304]	@ (80180d8 <tcp_zero_window_probe+0x148>)
 8017fa6:	f640 024f 	movw	r2, #2127	@ 0x84f
 8017faa:	494c      	ldr	r1, [pc, #304]	@ (80180dc <tcp_zero_window_probe+0x14c>)
 8017fac:	484c      	ldr	r0, [pc, #304]	@ (80180e0 <tcp_zero_window_probe+0x150>)
 8017fae:	f006 fba7 	bl	801e700 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017fb6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8017fb8:	6a3b      	ldr	r3, [r7, #32]
 8017fba:	2b00      	cmp	r3, #0
 8017fbc:	d101      	bne.n	8017fc2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8017fbe:	2300      	movs	r3, #0
 8017fc0:	e086      	b.n	80180d0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017fc8:	2bff      	cmp	r3, #255	@ 0xff
 8017fca:	d007      	beq.n	8017fdc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	f893 309a 	ldrb.w	r3, [r3, #154]	@ 0x9a
 8017fd2:	3301      	adds	r3, #1
 8017fd4:	b2da      	uxtb	r2, r3
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	f883 209a 	strb.w	r2, [r3, #154]	@ 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8017fdc:	6a3b      	ldr	r3, [r7, #32]
 8017fde:	68db      	ldr	r3, [r3, #12]
 8017fe0:	899b      	ldrh	r3, [r3, #12]
 8017fe2:	b29b      	uxth	r3, r3
 8017fe4:	4618      	mov	r0, r3
 8017fe6:	f7f8 fc59 	bl	801089c <lwip_htons>
 8017fea:	4603      	mov	r3, r0
 8017fec:	b2db      	uxtb	r3, r3
 8017fee:	f003 0301 	and.w	r3, r3, #1
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d005      	beq.n	8018002 <tcp_zero_window_probe+0x72>
 8017ff6:	6a3b      	ldr	r3, [r7, #32]
 8017ff8:	891b      	ldrh	r3, [r3, #8]
 8017ffa:	2b00      	cmp	r3, #0
 8017ffc:	d101      	bne.n	8018002 <tcp_zero_window_probe+0x72>
 8017ffe:	2301      	movs	r3, #1
 8018000:	e000      	b.n	8018004 <tcp_zero_window_probe+0x74>
 8018002:	2300      	movs	r3, #0
 8018004:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8018006:	7ffb      	ldrb	r3, [r7, #31]
 8018008:	2b00      	cmp	r3, #0
 801800a:	bf0c      	ite	eq
 801800c:	2301      	moveq	r3, #1
 801800e:	2300      	movne	r3, #0
 8018010:	b2db      	uxtb	r3, r3
 8018012:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8018014:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018018:	b299      	uxth	r1, r3
 801801a:	6a3b      	ldr	r3, [r7, #32]
 801801c:	68db      	ldr	r3, [r3, #12]
 801801e:	685b      	ldr	r3, [r3, #4]
 8018020:	8bba      	ldrh	r2, [r7, #28]
 8018022:	6878      	ldr	r0, [r7, #4]
 8018024:	f7ff fdfa 	bl	8017c1c <tcp_output_alloc_header>
 8018028:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801802a:	69bb      	ldr	r3, [r7, #24]
 801802c:	2b00      	cmp	r3, #0
 801802e:	d102      	bne.n	8018036 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8018030:	f04f 33ff 	mov.w	r3, #4294967295
 8018034:	e04c      	b.n	80180d0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8018036:	69bb      	ldr	r3, [r7, #24]
 8018038:	685b      	ldr	r3, [r3, #4]
 801803a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801803c:	7ffb      	ldrb	r3, [r7, #31]
 801803e:	2b00      	cmp	r3, #0
 8018040:	d011      	beq.n	8018066 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8018042:	697b      	ldr	r3, [r7, #20]
 8018044:	899b      	ldrh	r3, [r3, #12]
 8018046:	b29b      	uxth	r3, r3
 8018048:	b21b      	sxth	r3, r3
 801804a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801804e:	b21c      	sxth	r4, r3
 8018050:	2011      	movs	r0, #17
 8018052:	f7f8 fc23 	bl	801089c <lwip_htons>
 8018056:	4603      	mov	r3, r0
 8018058:	b21b      	sxth	r3, r3
 801805a:	4323      	orrs	r3, r4
 801805c:	b21b      	sxth	r3, r3
 801805e:	b29a      	uxth	r2, r3
 8018060:	697b      	ldr	r3, [r7, #20]
 8018062:	819a      	strh	r2, [r3, #12]
 8018064:	e010      	b.n	8018088 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8018066:	69bb      	ldr	r3, [r7, #24]
 8018068:	685b      	ldr	r3, [r3, #4]
 801806a:	3314      	adds	r3, #20
 801806c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801806e:	6a3b      	ldr	r3, [r7, #32]
 8018070:	6858      	ldr	r0, [r3, #4]
 8018072:	6a3b      	ldr	r3, [r7, #32]
 8018074:	685b      	ldr	r3, [r3, #4]
 8018076:	891a      	ldrh	r2, [r3, #8]
 8018078:	6a3b      	ldr	r3, [r7, #32]
 801807a:	891b      	ldrh	r3, [r3, #8]
 801807c:	1ad3      	subs	r3, r2, r3
 801807e:	b29b      	uxth	r3, r3
 8018080:	2201      	movs	r2, #1
 8018082:	6939      	ldr	r1, [r7, #16]
 8018084:	f7fa fcfc 	bl	8012a80 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8018088:	6a3b      	ldr	r3, [r7, #32]
 801808a:	68db      	ldr	r3, [r3, #12]
 801808c:	685b      	ldr	r3, [r3, #4]
 801808e:	4618      	mov	r0, r3
 8018090:	f7f8 fc19 	bl	80108c6 <lwip_htonl>
 8018094:	4603      	mov	r3, r0
 8018096:	3301      	adds	r3, #1
 8018098:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801809e:	68fb      	ldr	r3, [r7, #12]
 80180a0:	1ad3      	subs	r3, r2, r3
 80180a2:	2b00      	cmp	r3, #0
 80180a4:	da02      	bge.n	80180ac <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	68fa      	ldr	r2, [r7, #12]
 80180aa:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80180ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80180b0:	2200      	movs	r2, #0
 80180b2:	69b9      	ldr	r1, [r7, #24]
 80180b4:	6878      	ldr	r0, [r7, #4]
 80180b6:	f7ff fdef 	bl	8017c98 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80180ba:	687a      	ldr	r2, [r7, #4]
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	3304      	adds	r3, #4
 80180c0:	69b9      	ldr	r1, [r7, #24]
 80180c2:	6878      	ldr	r0, [r7, #4]
 80180c4:	f7ff fe26 	bl	8017d14 <tcp_output_control_segment>
 80180c8:	4603      	mov	r3, r0
 80180ca:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80180cc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80180d0:	4618      	mov	r0, r3
 80180d2:	372c      	adds	r7, #44	@ 0x2c
 80180d4:	46bd      	mov	sp, r7
 80180d6:	bd90      	pop	{r4, r7, pc}
 80180d8:	080238a8 	.word	0x080238a8
 80180dc:	080240a0 	.word	0x080240a0
 80180e0:	080238fc 	.word	0x080238fc

080180e4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80180e4:	b580      	push	{r7, lr}
 80180e6:	b082      	sub	sp, #8
 80180e8:	af00      	add	r7, sp, #0
 80180ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80180ec:	f7fa ff10 	bl	8012f10 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80180f0:	4b0a      	ldr	r3, [pc, #40]	@ (801811c <tcpip_tcp_timer+0x38>)
 80180f2:	681b      	ldr	r3, [r3, #0]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d103      	bne.n	8018100 <tcpip_tcp_timer+0x1c>
 80180f8:	4b09      	ldr	r3, [pc, #36]	@ (8018120 <tcpip_tcp_timer+0x3c>)
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d005      	beq.n	801810c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018100:	2200      	movs	r2, #0
 8018102:	4908      	ldr	r1, [pc, #32]	@ (8018124 <tcpip_tcp_timer+0x40>)
 8018104:	20fa      	movs	r0, #250	@ 0xfa
 8018106:	f000 f8f3 	bl	80182f0 <sys_timeout>
 801810a:	e003      	b.n	8018114 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801810c:	4b06      	ldr	r3, [pc, #24]	@ (8018128 <tcpip_tcp_timer+0x44>)
 801810e:	2200      	movs	r2, #0
 8018110:	601a      	str	r2, [r3, #0]
  }
}
 8018112:	bf00      	nop
 8018114:	bf00      	nop
 8018116:	3708      	adds	r7, #8
 8018118:	46bd      	mov	sp, r7
 801811a:	bd80      	pop	{r7, pc}
 801811c:	2001b020 	.word	0x2001b020
 8018120:	2001b024 	.word	0x2001b024
 8018124:	080180e5 	.word	0x080180e5
 8018128:	2001b06c 	.word	0x2001b06c

0801812c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801812c:	b580      	push	{r7, lr}
 801812e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8018130:	4b0a      	ldr	r3, [pc, #40]	@ (801815c <tcp_timer_needed+0x30>)
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d10f      	bne.n	8018158 <tcp_timer_needed+0x2c>
 8018138:	4b09      	ldr	r3, [pc, #36]	@ (8018160 <tcp_timer_needed+0x34>)
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	2b00      	cmp	r3, #0
 801813e:	d103      	bne.n	8018148 <tcp_timer_needed+0x1c>
 8018140:	4b08      	ldr	r3, [pc, #32]	@ (8018164 <tcp_timer_needed+0x38>)
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	2b00      	cmp	r3, #0
 8018146:	d007      	beq.n	8018158 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8018148:	4b04      	ldr	r3, [pc, #16]	@ (801815c <tcp_timer_needed+0x30>)
 801814a:	2201      	movs	r2, #1
 801814c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801814e:	2200      	movs	r2, #0
 8018150:	4905      	ldr	r1, [pc, #20]	@ (8018168 <tcp_timer_needed+0x3c>)
 8018152:	20fa      	movs	r0, #250	@ 0xfa
 8018154:	f000 f8cc 	bl	80182f0 <sys_timeout>
  }
}
 8018158:	bf00      	nop
 801815a:	bd80      	pop	{r7, pc}
 801815c:	2001b06c 	.word	0x2001b06c
 8018160:	2001b020 	.word	0x2001b020
 8018164:	2001b024 	.word	0x2001b024
 8018168:	080180e5 	.word	0x080180e5

0801816c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801816c:	b580      	push	{r7, lr}
 801816e:	b086      	sub	sp, #24
 8018170:	af00      	add	r7, sp, #0
 8018172:	60f8      	str	r0, [r7, #12]
 8018174:	60b9      	str	r1, [r7, #8]
 8018176:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8018178:	200a      	movs	r0, #10
 801817a:	f7f9 fb55 	bl	8011828 <memp_malloc>
 801817e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8018180:	693b      	ldr	r3, [r7, #16]
 8018182:	2b00      	cmp	r3, #0
 8018184:	d109      	bne.n	801819a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8018186:	693b      	ldr	r3, [r7, #16]
 8018188:	2b00      	cmp	r3, #0
 801818a:	d151      	bne.n	8018230 <sys_timeout_abs+0xc4>
 801818c:	4b2a      	ldr	r3, [pc, #168]	@ (8018238 <sys_timeout_abs+0xcc>)
 801818e:	22be      	movs	r2, #190	@ 0xbe
 8018190:	492a      	ldr	r1, [pc, #168]	@ (801823c <sys_timeout_abs+0xd0>)
 8018192:	482b      	ldr	r0, [pc, #172]	@ (8018240 <sys_timeout_abs+0xd4>)
 8018194:	f006 fab4 	bl	801e700 <iprintf>
    return;
 8018198:	e04a      	b.n	8018230 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801819a:	693b      	ldr	r3, [r7, #16]
 801819c:	2200      	movs	r2, #0
 801819e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80181a0:	693b      	ldr	r3, [r7, #16]
 80181a2:	68ba      	ldr	r2, [r7, #8]
 80181a4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80181a6:	693b      	ldr	r3, [r7, #16]
 80181a8:	687a      	ldr	r2, [r7, #4]
 80181aa:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80181ac:	693b      	ldr	r3, [r7, #16]
 80181ae:	68fa      	ldr	r2, [r7, #12]
 80181b0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80181b2:	4b24      	ldr	r3, [pc, #144]	@ (8018244 <sys_timeout_abs+0xd8>)
 80181b4:	681b      	ldr	r3, [r3, #0]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	d103      	bne.n	80181c2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80181ba:	4a22      	ldr	r2, [pc, #136]	@ (8018244 <sys_timeout_abs+0xd8>)
 80181bc:	693b      	ldr	r3, [r7, #16]
 80181be:	6013      	str	r3, [r2, #0]
    return;
 80181c0:	e037      	b.n	8018232 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80181c2:	693b      	ldr	r3, [r7, #16]
 80181c4:	685a      	ldr	r2, [r3, #4]
 80181c6:	4b1f      	ldr	r3, [pc, #124]	@ (8018244 <sys_timeout_abs+0xd8>)
 80181c8:	681b      	ldr	r3, [r3, #0]
 80181ca:	685b      	ldr	r3, [r3, #4]
 80181cc:	1ad3      	subs	r3, r2, r3
 80181ce:	0fdb      	lsrs	r3, r3, #31
 80181d0:	f003 0301 	and.w	r3, r3, #1
 80181d4:	b2db      	uxtb	r3, r3
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d007      	beq.n	80181ea <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80181da:	4b1a      	ldr	r3, [pc, #104]	@ (8018244 <sys_timeout_abs+0xd8>)
 80181dc:	681a      	ldr	r2, [r3, #0]
 80181de:	693b      	ldr	r3, [r7, #16]
 80181e0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80181e2:	4a18      	ldr	r2, [pc, #96]	@ (8018244 <sys_timeout_abs+0xd8>)
 80181e4:	693b      	ldr	r3, [r7, #16]
 80181e6:	6013      	str	r3, [r2, #0]
 80181e8:	e023      	b.n	8018232 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80181ea:	4b16      	ldr	r3, [pc, #88]	@ (8018244 <sys_timeout_abs+0xd8>)
 80181ec:	681b      	ldr	r3, [r3, #0]
 80181ee:	617b      	str	r3, [r7, #20]
 80181f0:	e01a      	b.n	8018228 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80181f2:	697b      	ldr	r3, [r7, #20]
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	2b00      	cmp	r3, #0
 80181f8:	d00b      	beq.n	8018212 <sys_timeout_abs+0xa6>
 80181fa:	693b      	ldr	r3, [r7, #16]
 80181fc:	685a      	ldr	r2, [r3, #4]
 80181fe:	697b      	ldr	r3, [r7, #20]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	685b      	ldr	r3, [r3, #4]
 8018204:	1ad3      	subs	r3, r2, r3
 8018206:	0fdb      	lsrs	r3, r3, #31
 8018208:	f003 0301 	and.w	r3, r3, #1
 801820c:	b2db      	uxtb	r3, r3
 801820e:	2b00      	cmp	r3, #0
 8018210:	d007      	beq.n	8018222 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8018212:	697b      	ldr	r3, [r7, #20]
 8018214:	681a      	ldr	r2, [r3, #0]
 8018216:	693b      	ldr	r3, [r7, #16]
 8018218:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801821a:	697b      	ldr	r3, [r7, #20]
 801821c:	693a      	ldr	r2, [r7, #16]
 801821e:	601a      	str	r2, [r3, #0]
        break;
 8018220:	e007      	b.n	8018232 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8018222:	697b      	ldr	r3, [r7, #20]
 8018224:	681b      	ldr	r3, [r3, #0]
 8018226:	617b      	str	r3, [r7, #20]
 8018228:	697b      	ldr	r3, [r7, #20]
 801822a:	2b00      	cmp	r3, #0
 801822c:	d1e1      	bne.n	80181f2 <sys_timeout_abs+0x86>
 801822e:	e000      	b.n	8018232 <sys_timeout_abs+0xc6>
    return;
 8018230:	bf00      	nop
      }
    }
  }
}
 8018232:	3718      	adds	r7, #24
 8018234:	46bd      	mov	sp, r7
 8018236:	bd80      	pop	{r7, pc}
 8018238:	080240c4 	.word	0x080240c4
 801823c:	080240f8 	.word	0x080240f8
 8018240:	08024138 	.word	0x08024138
 8018244:	2001b064 	.word	0x2001b064

08018248 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8018248:	b580      	push	{r7, lr}
 801824a:	b086      	sub	sp, #24
 801824c:	af00      	add	r7, sp, #0
 801824e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8018250:	687b      	ldr	r3, [r7, #4]
 8018252:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8018254:	697b      	ldr	r3, [r7, #20]
 8018256:	685b      	ldr	r3, [r3, #4]
 8018258:	4798      	blx	r3

  now = sys_now();
 801825a:	f7f1 faab 	bl	80097b4 <sys_now>
 801825e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8018260:	697b      	ldr	r3, [r7, #20]
 8018262:	681a      	ldr	r2, [r3, #0]
 8018264:	4b0f      	ldr	r3, [pc, #60]	@ (80182a4 <lwip_cyclic_timer+0x5c>)
 8018266:	681b      	ldr	r3, [r3, #0]
 8018268:	4413      	add	r3, r2
 801826a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801826c:	68fa      	ldr	r2, [r7, #12]
 801826e:	693b      	ldr	r3, [r7, #16]
 8018270:	1ad3      	subs	r3, r2, r3
 8018272:	0fdb      	lsrs	r3, r3, #31
 8018274:	f003 0301 	and.w	r3, r3, #1
 8018278:	b2db      	uxtb	r3, r3
 801827a:	2b00      	cmp	r3, #0
 801827c:	d009      	beq.n	8018292 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801827e:	697b      	ldr	r3, [r7, #20]
 8018280:	681a      	ldr	r2, [r3, #0]
 8018282:	693b      	ldr	r3, [r7, #16]
 8018284:	4413      	add	r3, r2
 8018286:	687a      	ldr	r2, [r7, #4]
 8018288:	4907      	ldr	r1, [pc, #28]	@ (80182a8 <lwip_cyclic_timer+0x60>)
 801828a:	4618      	mov	r0, r3
 801828c:	f7ff ff6e 	bl	801816c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8018290:	e004      	b.n	801829c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8018292:	687a      	ldr	r2, [r7, #4]
 8018294:	4904      	ldr	r1, [pc, #16]	@ (80182a8 <lwip_cyclic_timer+0x60>)
 8018296:	68f8      	ldr	r0, [r7, #12]
 8018298:	f7ff ff68 	bl	801816c <sys_timeout_abs>
}
 801829c:	bf00      	nop
 801829e:	3718      	adds	r7, #24
 80182a0:	46bd      	mov	sp, r7
 80182a2:	bd80      	pop	{r7, pc}
 80182a4:	2001b068 	.word	0x2001b068
 80182a8:	08018249 	.word	0x08018249

080182ac <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80182ac:	b580      	push	{r7, lr}
 80182ae:	b082      	sub	sp, #8
 80182b0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80182b2:	2301      	movs	r3, #1
 80182b4:	607b      	str	r3, [r7, #4]
 80182b6:	e00e      	b.n	80182d6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80182b8:	4a0b      	ldr	r2, [pc, #44]	@ (80182e8 <sys_timeouts_init+0x3c>)
 80182ba:	687b      	ldr	r3, [r7, #4]
 80182bc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	00db      	lsls	r3, r3, #3
 80182c4:	4a08      	ldr	r2, [pc, #32]	@ (80182e8 <sys_timeouts_init+0x3c>)
 80182c6:	4413      	add	r3, r2
 80182c8:	461a      	mov	r2, r3
 80182ca:	4908      	ldr	r1, [pc, #32]	@ (80182ec <sys_timeouts_init+0x40>)
 80182cc:	f000 f810 	bl	80182f0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	3301      	adds	r3, #1
 80182d4:	607b      	str	r3, [r7, #4]
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	2b05      	cmp	r3, #5
 80182da:	d9ed      	bls.n	80182b8 <sys_timeouts_init+0xc>
  }
}
 80182dc:	bf00      	nop
 80182de:	bf00      	nop
 80182e0:	3708      	adds	r7, #8
 80182e2:	46bd      	mov	sp, r7
 80182e4:	bd80      	pop	{r7, pc}
 80182e6:	bf00      	nop
 80182e8:	080252b8 	.word	0x080252b8
 80182ec:	08018249 	.word	0x08018249

080182f0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80182f0:	b580      	push	{r7, lr}
 80182f2:	b086      	sub	sp, #24
 80182f4:	af00      	add	r7, sp, #0
 80182f6:	60f8      	str	r0, [r7, #12]
 80182f8:	60b9      	str	r1, [r7, #8]
 80182fa:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80182fc:	68fb      	ldr	r3, [r7, #12]
 80182fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018302:	d306      	bcc.n	8018312 <sys_timeout+0x22>
 8018304:	4b0a      	ldr	r3, [pc, #40]	@ (8018330 <sys_timeout+0x40>)
 8018306:	f240 1229 	movw	r2, #297	@ 0x129
 801830a:	490a      	ldr	r1, [pc, #40]	@ (8018334 <sys_timeout+0x44>)
 801830c:	480a      	ldr	r0, [pc, #40]	@ (8018338 <sys_timeout+0x48>)
 801830e:	f006 f9f7 	bl	801e700 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8018312:	f7f1 fa4f 	bl	80097b4 <sys_now>
 8018316:	4602      	mov	r2, r0
 8018318:	68fb      	ldr	r3, [r7, #12]
 801831a:	4413      	add	r3, r2
 801831c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801831e:	687a      	ldr	r2, [r7, #4]
 8018320:	68b9      	ldr	r1, [r7, #8]
 8018322:	6978      	ldr	r0, [r7, #20]
 8018324:	f7ff ff22 	bl	801816c <sys_timeout_abs>
#endif
}
 8018328:	bf00      	nop
 801832a:	3718      	adds	r7, #24
 801832c:	46bd      	mov	sp, r7
 801832e:	bd80      	pop	{r7, pc}
 8018330:	080240c4 	.word	0x080240c4
 8018334:	08024160 	.word	0x08024160
 8018338:	08024138 	.word	0x08024138

0801833c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801833c:	b580      	push	{r7, lr}
 801833e:	b084      	sub	sp, #16
 8018340:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8018342:	f7f1 fa37 	bl	80097b4 <sys_now>
 8018346:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8018348:	4b17      	ldr	r3, [pc, #92]	@ (80183a8 <sys_check_timeouts+0x6c>)
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801834e:	68bb      	ldr	r3, [r7, #8]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d022      	beq.n	801839a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8018354:	68bb      	ldr	r3, [r7, #8]
 8018356:	685b      	ldr	r3, [r3, #4]
 8018358:	68fa      	ldr	r2, [r7, #12]
 801835a:	1ad3      	subs	r3, r2, r3
 801835c:	0fdb      	lsrs	r3, r3, #31
 801835e:	f003 0301 	and.w	r3, r3, #1
 8018362:	b2db      	uxtb	r3, r3
 8018364:	2b00      	cmp	r3, #0
 8018366:	d11a      	bne.n	801839e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8018368:	68bb      	ldr	r3, [r7, #8]
 801836a:	681b      	ldr	r3, [r3, #0]
 801836c:	4a0e      	ldr	r2, [pc, #56]	@ (80183a8 <sys_check_timeouts+0x6c>)
 801836e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8018370:	68bb      	ldr	r3, [r7, #8]
 8018372:	689b      	ldr	r3, [r3, #8]
 8018374:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8018376:	68bb      	ldr	r3, [r7, #8]
 8018378:	68db      	ldr	r3, [r3, #12]
 801837a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801837c:	68bb      	ldr	r3, [r7, #8]
 801837e:	685b      	ldr	r3, [r3, #4]
 8018380:	4a0a      	ldr	r2, [pc, #40]	@ (80183ac <sys_check_timeouts+0x70>)
 8018382:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8018384:	68b9      	ldr	r1, [r7, #8]
 8018386:	200a      	movs	r0, #10
 8018388:	f7f9 fac4 	bl	8011914 <memp_free>
    if (handler != NULL) {
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d0da      	beq.n	8018348 <sys_check_timeouts+0xc>
      handler(arg);
 8018392:	687b      	ldr	r3, [r7, #4]
 8018394:	6838      	ldr	r0, [r7, #0]
 8018396:	4798      	blx	r3
  do {
 8018398:	e7d6      	b.n	8018348 <sys_check_timeouts+0xc>
      return;
 801839a:	bf00      	nop
 801839c:	e000      	b.n	80183a0 <sys_check_timeouts+0x64>
      return;
 801839e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80183a0:	3710      	adds	r7, #16
 80183a2:	46bd      	mov	sp, r7
 80183a4:	bd80      	pop	{r7, pc}
 80183a6:	bf00      	nop
 80183a8:	2001b064 	.word	0x2001b064
 80183ac:	2001b068 	.word	0x2001b068

080183b0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80183b0:	b580      	push	{r7, lr}
 80183b2:	b082      	sub	sp, #8
 80183b4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80183b6:	4b16      	ldr	r3, [pc, #88]	@ (8018410 <sys_timeouts_sleeptime+0x60>)
 80183b8:	681b      	ldr	r3, [r3, #0]
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d102      	bne.n	80183c4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80183be:	f04f 33ff 	mov.w	r3, #4294967295
 80183c2:	e020      	b.n	8018406 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80183c4:	f7f1 f9f6 	bl	80097b4 <sys_now>
 80183c8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80183ca:	4b11      	ldr	r3, [pc, #68]	@ (8018410 <sys_timeouts_sleeptime+0x60>)
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	685a      	ldr	r2, [r3, #4]
 80183d0:	687b      	ldr	r3, [r7, #4]
 80183d2:	1ad3      	subs	r3, r2, r3
 80183d4:	0fdb      	lsrs	r3, r3, #31
 80183d6:	f003 0301 	and.w	r3, r3, #1
 80183da:	b2db      	uxtb	r3, r3
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d001      	beq.n	80183e4 <sys_timeouts_sleeptime+0x34>
    return 0;
 80183e0:	2300      	movs	r3, #0
 80183e2:	e010      	b.n	8018406 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80183e4:	4b0a      	ldr	r3, [pc, #40]	@ (8018410 <sys_timeouts_sleeptime+0x60>)
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	685a      	ldr	r2, [r3, #4]
 80183ea:	687b      	ldr	r3, [r7, #4]
 80183ec:	1ad3      	subs	r3, r2, r3
 80183ee:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80183f0:	683b      	ldr	r3, [r7, #0]
 80183f2:	2b00      	cmp	r3, #0
 80183f4:	da06      	bge.n	8018404 <sys_timeouts_sleeptime+0x54>
 80183f6:	4b07      	ldr	r3, [pc, #28]	@ (8018414 <sys_timeouts_sleeptime+0x64>)
 80183f8:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 80183fc:	4906      	ldr	r1, [pc, #24]	@ (8018418 <sys_timeouts_sleeptime+0x68>)
 80183fe:	4807      	ldr	r0, [pc, #28]	@ (801841c <sys_timeouts_sleeptime+0x6c>)
 8018400:	f006 f97e 	bl	801e700 <iprintf>
    return ret;
 8018404:	683b      	ldr	r3, [r7, #0]
  }
}
 8018406:	4618      	mov	r0, r3
 8018408:	3708      	adds	r7, #8
 801840a:	46bd      	mov	sp, r7
 801840c:	bd80      	pop	{r7, pc}
 801840e:	bf00      	nop
 8018410:	2001b064 	.word	0x2001b064
 8018414:	080240c4 	.word	0x080240c4
 8018418:	08024198 	.word	0x08024198
 801841c:	08024138 	.word	0x08024138

08018420 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8018420:	b580      	push	{r7, lr}
 8018422:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018424:	f005 f88c 	bl	801d540 <rand>
 8018428:	4603      	mov	r3, r0
 801842a:	b29b      	uxth	r3, r3
 801842c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018430:	b29b      	uxth	r3, r3
 8018432:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8018436:	b29a      	uxth	r2, r3
 8018438:	4b01      	ldr	r3, [pc, #4]	@ (8018440 <udp_init+0x20>)
 801843a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801843c:	bf00      	nop
 801843e:	bd80      	pop	{r7, pc}
 8018440:	20000048 	.word	0x20000048

08018444 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8018444:	b480      	push	{r7}
 8018446:	b083      	sub	sp, #12
 8018448:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801844a:	2300      	movs	r3, #0
 801844c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801844e:	4b17      	ldr	r3, [pc, #92]	@ (80184ac <udp_new_port+0x68>)
 8018450:	881b      	ldrh	r3, [r3, #0]
 8018452:	1c5a      	adds	r2, r3, #1
 8018454:	b291      	uxth	r1, r2
 8018456:	4a15      	ldr	r2, [pc, #84]	@ (80184ac <udp_new_port+0x68>)
 8018458:	8011      	strh	r1, [r2, #0]
 801845a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801845e:	4293      	cmp	r3, r2
 8018460:	d103      	bne.n	801846a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8018462:	4b12      	ldr	r3, [pc, #72]	@ (80184ac <udp_new_port+0x68>)
 8018464:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8018468:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801846a:	4b11      	ldr	r3, [pc, #68]	@ (80184b0 <udp_new_port+0x6c>)
 801846c:	681b      	ldr	r3, [r3, #0]
 801846e:	603b      	str	r3, [r7, #0]
 8018470:	e011      	b.n	8018496 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8018472:	683b      	ldr	r3, [r7, #0]
 8018474:	8a5a      	ldrh	r2, [r3, #18]
 8018476:	4b0d      	ldr	r3, [pc, #52]	@ (80184ac <udp_new_port+0x68>)
 8018478:	881b      	ldrh	r3, [r3, #0]
 801847a:	429a      	cmp	r2, r3
 801847c:	d108      	bne.n	8018490 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801847e:	88fb      	ldrh	r3, [r7, #6]
 8018480:	3301      	adds	r3, #1
 8018482:	80fb      	strh	r3, [r7, #6]
 8018484:	88fb      	ldrh	r3, [r7, #6]
 8018486:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801848a:	d3e0      	bcc.n	801844e <udp_new_port+0xa>
        return 0;
 801848c:	2300      	movs	r3, #0
 801848e:	e007      	b.n	80184a0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018490:	683b      	ldr	r3, [r7, #0]
 8018492:	68db      	ldr	r3, [r3, #12]
 8018494:	603b      	str	r3, [r7, #0]
 8018496:	683b      	ldr	r3, [r7, #0]
 8018498:	2b00      	cmp	r3, #0
 801849a:	d1ea      	bne.n	8018472 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801849c:	4b03      	ldr	r3, [pc, #12]	@ (80184ac <udp_new_port+0x68>)
 801849e:	881b      	ldrh	r3, [r3, #0]
}
 80184a0:	4618      	mov	r0, r3
 80184a2:	370c      	adds	r7, #12
 80184a4:	46bd      	mov	sp, r7
 80184a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184aa:	4770      	bx	lr
 80184ac:	20000048 	.word	0x20000048
 80184b0:	2001b070 	.word	0x2001b070

080184b4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80184b4:	b580      	push	{r7, lr}
 80184b6:	b084      	sub	sp, #16
 80184b8:	af00      	add	r7, sp, #0
 80184ba:	60f8      	str	r0, [r7, #12]
 80184bc:	60b9      	str	r1, [r7, #8]
 80184be:	4613      	mov	r3, r2
 80184c0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80184c2:	68fb      	ldr	r3, [r7, #12]
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d105      	bne.n	80184d4 <udp_input_local_match+0x20>
 80184c8:	4b27      	ldr	r3, [pc, #156]	@ (8018568 <udp_input_local_match+0xb4>)
 80184ca:	2287      	movs	r2, #135	@ 0x87
 80184cc:	4927      	ldr	r1, [pc, #156]	@ (801856c <udp_input_local_match+0xb8>)
 80184ce:	4828      	ldr	r0, [pc, #160]	@ (8018570 <udp_input_local_match+0xbc>)
 80184d0:	f006 f916 	bl	801e700 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80184d4:	68bb      	ldr	r3, [r7, #8]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d105      	bne.n	80184e6 <udp_input_local_match+0x32>
 80184da:	4b23      	ldr	r3, [pc, #140]	@ (8018568 <udp_input_local_match+0xb4>)
 80184dc:	2288      	movs	r2, #136	@ 0x88
 80184de:	4925      	ldr	r1, [pc, #148]	@ (8018574 <udp_input_local_match+0xc0>)
 80184e0:	4823      	ldr	r0, [pc, #140]	@ (8018570 <udp_input_local_match+0xbc>)
 80184e2:	f006 f90d 	bl	801e700 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80184e6:	68fb      	ldr	r3, [r7, #12]
 80184e8:	7a1b      	ldrb	r3, [r3, #8]
 80184ea:	2b00      	cmp	r3, #0
 80184ec:	d00b      	beq.n	8018506 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80184ee:	68fb      	ldr	r3, [r7, #12]
 80184f0:	7a1a      	ldrb	r2, [r3, #8]
 80184f2:	4b21      	ldr	r3, [pc, #132]	@ (8018578 <udp_input_local_match+0xc4>)
 80184f4:	685b      	ldr	r3, [r3, #4]
 80184f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80184fa:	3301      	adds	r3, #1
 80184fc:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80184fe:	429a      	cmp	r2, r3
 8018500:	d001      	beq.n	8018506 <udp_input_local_match+0x52>
    return 0;
 8018502:	2300      	movs	r3, #0
 8018504:	e02b      	b.n	801855e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8018506:	79fb      	ldrb	r3, [r7, #7]
 8018508:	2b00      	cmp	r3, #0
 801850a:	d018      	beq.n	801853e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801850c:	68fb      	ldr	r3, [r7, #12]
 801850e:	2b00      	cmp	r3, #0
 8018510:	d013      	beq.n	801853a <udp_input_local_match+0x86>
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	681b      	ldr	r3, [r3, #0]
 8018516:	2b00      	cmp	r3, #0
 8018518:	d00f      	beq.n	801853a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801851a:	4b17      	ldr	r3, [pc, #92]	@ (8018578 <udp_input_local_match+0xc4>)
 801851c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801851e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018522:	d00a      	beq.n	801853a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	681a      	ldr	r2, [r3, #0]
 8018528:	4b13      	ldr	r3, [pc, #76]	@ (8018578 <udp_input_local_match+0xc4>)
 801852a:	695b      	ldr	r3, [r3, #20]
 801852c:	405a      	eors	r2, r3
 801852e:	68bb      	ldr	r3, [r7, #8]
 8018530:	3308      	adds	r3, #8
 8018532:	681b      	ldr	r3, [r3, #0]
 8018534:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8018536:	2b00      	cmp	r3, #0
 8018538:	d110      	bne.n	801855c <udp_input_local_match+0xa8>
          return 1;
 801853a:	2301      	movs	r3, #1
 801853c:	e00f      	b.n	801855e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801853e:	68fb      	ldr	r3, [r7, #12]
 8018540:	2b00      	cmp	r3, #0
 8018542:	d009      	beq.n	8018558 <udp_input_local_match+0xa4>
 8018544:	68fb      	ldr	r3, [r7, #12]
 8018546:	681b      	ldr	r3, [r3, #0]
 8018548:	2b00      	cmp	r3, #0
 801854a:	d005      	beq.n	8018558 <udp_input_local_match+0xa4>
 801854c:	68fb      	ldr	r3, [r7, #12]
 801854e:	681a      	ldr	r2, [r3, #0]
 8018550:	4b09      	ldr	r3, [pc, #36]	@ (8018578 <udp_input_local_match+0xc4>)
 8018552:	695b      	ldr	r3, [r3, #20]
 8018554:	429a      	cmp	r2, r3
 8018556:	d101      	bne.n	801855c <udp_input_local_match+0xa8>
        return 1;
 8018558:	2301      	movs	r3, #1
 801855a:	e000      	b.n	801855e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801855c:	2300      	movs	r3, #0
}
 801855e:	4618      	mov	r0, r3
 8018560:	3710      	adds	r7, #16
 8018562:	46bd      	mov	sp, r7
 8018564:	bd80      	pop	{r7, pc}
 8018566:	bf00      	nop
 8018568:	080241ac 	.word	0x080241ac
 801856c:	080241dc 	.word	0x080241dc
 8018570:	08024200 	.word	0x08024200
 8018574:	08024228 	.word	0x08024228
 8018578:	20017754 	.word	0x20017754

0801857c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801857c:	b590      	push	{r4, r7, lr}
 801857e:	b08d      	sub	sp, #52	@ 0x34
 8018580:	af02      	add	r7, sp, #8
 8018582:	6078      	str	r0, [r7, #4]
 8018584:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8018586:	2300      	movs	r3, #0
 8018588:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	2b00      	cmp	r3, #0
 801858e:	d105      	bne.n	801859c <udp_input+0x20>
 8018590:	4b7c      	ldr	r3, [pc, #496]	@ (8018784 <udp_input+0x208>)
 8018592:	22cf      	movs	r2, #207	@ 0xcf
 8018594:	497c      	ldr	r1, [pc, #496]	@ (8018788 <udp_input+0x20c>)
 8018596:	487d      	ldr	r0, [pc, #500]	@ (801878c <udp_input+0x210>)
 8018598:	f006 f8b2 	bl	801e700 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801859c:	683b      	ldr	r3, [r7, #0]
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d105      	bne.n	80185ae <udp_input+0x32>
 80185a2:	4b78      	ldr	r3, [pc, #480]	@ (8018784 <udp_input+0x208>)
 80185a4:	22d0      	movs	r2, #208	@ 0xd0
 80185a6:	497a      	ldr	r1, [pc, #488]	@ (8018790 <udp_input+0x214>)
 80185a8:	4878      	ldr	r0, [pc, #480]	@ (801878c <udp_input+0x210>)
 80185aa:	f006 f8a9 	bl	801e700 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	895b      	ldrh	r3, [r3, #10]
 80185b2:	2b07      	cmp	r3, #7
 80185b4:	d803      	bhi.n	80185be <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80185b6:	6878      	ldr	r0, [r7, #4]
 80185b8:	f7fa f85c 	bl	8012674 <pbuf_free>
    goto end;
 80185bc:	e0de      	b.n	801877c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80185be:	687b      	ldr	r3, [r7, #4]
 80185c0:	685b      	ldr	r3, [r3, #4]
 80185c2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80185c4:	4b73      	ldr	r3, [pc, #460]	@ (8018794 <udp_input+0x218>)
 80185c6:	695b      	ldr	r3, [r3, #20]
 80185c8:	4a72      	ldr	r2, [pc, #456]	@ (8018794 <udp_input+0x218>)
 80185ca:	6812      	ldr	r2, [r2, #0]
 80185cc:	4611      	mov	r1, r2
 80185ce:	4618      	mov	r0, r3
 80185d0:	f003 feac 	bl	801c32c <ip4_addr_isbroadcast_u32>
 80185d4:	4603      	mov	r3, r0
 80185d6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80185d8:	697b      	ldr	r3, [r7, #20]
 80185da:	881b      	ldrh	r3, [r3, #0]
 80185dc:	b29b      	uxth	r3, r3
 80185de:	4618      	mov	r0, r3
 80185e0:	f7f8 f95c 	bl	801089c <lwip_htons>
 80185e4:	4603      	mov	r3, r0
 80185e6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80185e8:	697b      	ldr	r3, [r7, #20]
 80185ea:	885b      	ldrh	r3, [r3, #2]
 80185ec:	b29b      	uxth	r3, r3
 80185ee:	4618      	mov	r0, r3
 80185f0:	f7f8 f954 	bl	801089c <lwip_htons>
 80185f4:	4603      	mov	r3, r0
 80185f6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80185f8:	2300      	movs	r3, #0
 80185fa:	627b      	str	r3, [r7, #36]	@ 0x24
  prev = NULL;
 80185fc:	2300      	movs	r3, #0
 80185fe:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8018600:	2300      	movs	r3, #0
 8018602:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8018604:	4b64      	ldr	r3, [pc, #400]	@ (8018798 <udp_input+0x21c>)
 8018606:	681b      	ldr	r3, [r3, #0]
 8018608:	627b      	str	r3, [r7, #36]	@ 0x24
 801860a:	e054      	b.n	80186b6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801860c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801860e:	8a5b      	ldrh	r3, [r3, #18]
 8018610:	89fa      	ldrh	r2, [r7, #14]
 8018612:	429a      	cmp	r2, r3
 8018614:	d14a      	bne.n	80186ac <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8018616:	7cfb      	ldrb	r3, [r7, #19]
 8018618:	461a      	mov	r2, r3
 801861a:	6839      	ldr	r1, [r7, #0]
 801861c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801861e:	f7ff ff49 	bl	80184b4 <udp_input_local_match>
 8018622:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8018624:	2b00      	cmp	r3, #0
 8018626:	d041      	beq.n	80186ac <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8018628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801862a:	7c1b      	ldrb	r3, [r3, #16]
 801862c:	f003 0304 	and.w	r3, r3, #4
 8018630:	2b00      	cmp	r3, #0
 8018632:	d11d      	bne.n	8018670 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8018634:	69fb      	ldr	r3, [r7, #28]
 8018636:	2b00      	cmp	r3, #0
 8018638:	d102      	bne.n	8018640 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801863a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801863c:	61fb      	str	r3, [r7, #28]
 801863e:	e017      	b.n	8018670 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8018640:	7cfb      	ldrb	r3, [r7, #19]
 8018642:	2b00      	cmp	r3, #0
 8018644:	d014      	beq.n	8018670 <udp_input+0xf4>
 8018646:	4b53      	ldr	r3, [pc, #332]	@ (8018794 <udp_input+0x218>)
 8018648:	695b      	ldr	r3, [r3, #20]
 801864a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801864e:	d10f      	bne.n	8018670 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8018650:	69fb      	ldr	r3, [r7, #28]
 8018652:	681a      	ldr	r2, [r3, #0]
 8018654:	683b      	ldr	r3, [r7, #0]
 8018656:	3304      	adds	r3, #4
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	429a      	cmp	r2, r3
 801865c:	d008      	beq.n	8018670 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801865e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018660:	681a      	ldr	r2, [r3, #0]
 8018662:	683b      	ldr	r3, [r7, #0]
 8018664:	3304      	adds	r3, #4
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	429a      	cmp	r2, r3
 801866a:	d101      	bne.n	8018670 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801866c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801866e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8018670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018672:	8a9b      	ldrh	r3, [r3, #20]
 8018674:	8a3a      	ldrh	r2, [r7, #16]
 8018676:	429a      	cmp	r2, r3
 8018678:	d118      	bne.n	80186ac <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801867a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801867c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801867e:	2b00      	cmp	r3, #0
 8018680:	d005      	beq.n	801868e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8018682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018684:	685a      	ldr	r2, [r3, #4]
 8018686:	4b43      	ldr	r3, [pc, #268]	@ (8018794 <udp_input+0x218>)
 8018688:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801868a:	429a      	cmp	r2, r3
 801868c:	d10e      	bne.n	80186ac <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801868e:	6a3b      	ldr	r3, [r7, #32]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d014      	beq.n	80186be <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8018694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018696:	68da      	ldr	r2, [r3, #12]
 8018698:	6a3b      	ldr	r3, [r7, #32]
 801869a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801869c:	4b3e      	ldr	r3, [pc, #248]	@ (8018798 <udp_input+0x21c>)
 801869e:	681a      	ldr	r2, [r3, #0]
 80186a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186a2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80186a4:	4a3c      	ldr	r2, [pc, #240]	@ (8018798 <udp_input+0x21c>)
 80186a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186a8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80186aa:	e008      	b.n	80186be <udp_input+0x142>
      }
    }

    prev = pcb;
 80186ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186ae:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80186b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186b2:	68db      	ldr	r3, [r3, #12]
 80186b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80186b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186b8:	2b00      	cmp	r3, #0
 80186ba:	d1a7      	bne.n	801860c <udp_input+0x90>
 80186bc:	e000      	b.n	80186c0 <udp_input+0x144>
        break;
 80186be:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80186c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186c2:	2b00      	cmp	r3, #0
 80186c4:	d101      	bne.n	80186ca <udp_input+0x14e>
    pcb = uncon_pcb;
 80186c6:	69fb      	ldr	r3, [r7, #28]
 80186c8:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80186ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80186cc:	2b00      	cmp	r3, #0
 80186ce:	d002      	beq.n	80186d6 <udp_input+0x15a>
    for_us = 1;
 80186d0:	2301      	movs	r3, #1
 80186d2:	76fb      	strb	r3, [r7, #27]
 80186d4:	e00a      	b.n	80186ec <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80186d6:	683b      	ldr	r3, [r7, #0]
 80186d8:	3304      	adds	r3, #4
 80186da:	681a      	ldr	r2, [r3, #0]
 80186dc:	4b2d      	ldr	r3, [pc, #180]	@ (8018794 <udp_input+0x218>)
 80186de:	695b      	ldr	r3, [r3, #20]
 80186e0:	429a      	cmp	r2, r3
 80186e2:	bf0c      	ite	eq
 80186e4:	2301      	moveq	r3, #1
 80186e6:	2300      	movne	r3, #0
 80186e8:	b2db      	uxtb	r3, r3
 80186ea:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80186ec:	7efb      	ldrb	r3, [r7, #27]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d041      	beq.n	8018776 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80186f2:	2108      	movs	r1, #8
 80186f4:	6878      	ldr	r0, [r7, #4]
 80186f6:	f7f9 ff37 	bl	8012568 <pbuf_remove_header>
 80186fa:	4603      	mov	r3, r0
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d00a      	beq.n	8018716 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018700:	4b20      	ldr	r3, [pc, #128]	@ (8018784 <udp_input+0x208>)
 8018702:	f44f 72b8 	mov.w	r2, #368	@ 0x170
 8018706:	4925      	ldr	r1, [pc, #148]	@ (801879c <udp_input+0x220>)
 8018708:	4820      	ldr	r0, [pc, #128]	@ (801878c <udp_input+0x210>)
 801870a:	f005 fff9 	bl	801e700 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801870e:	6878      	ldr	r0, [r7, #4]
 8018710:	f7f9 ffb0 	bl	8012674 <pbuf_free>
      goto end;
 8018714:	e032      	b.n	801877c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8018716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018718:	2b00      	cmp	r3, #0
 801871a:	d012      	beq.n	8018742 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801871c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801871e:	699b      	ldr	r3, [r3, #24]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d00a      	beq.n	801873a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018726:	699c      	ldr	r4, [r3, #24]
 8018728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801872a:	69d8      	ldr	r0, [r3, #28]
 801872c:	8a3b      	ldrh	r3, [r7, #16]
 801872e:	9300      	str	r3, [sp, #0]
 8018730:	4b1b      	ldr	r3, [pc, #108]	@ (80187a0 <udp_input+0x224>)
 8018732:	687a      	ldr	r2, [r7, #4]
 8018734:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8018736:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8018738:	e021      	b.n	801877e <udp_input+0x202>
        pbuf_free(p);
 801873a:	6878      	ldr	r0, [r7, #4]
 801873c:	f7f9 ff9a 	bl	8012674 <pbuf_free>
        goto end;
 8018740:	e01c      	b.n	801877c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018742:	7cfb      	ldrb	r3, [r7, #19]
 8018744:	2b00      	cmp	r3, #0
 8018746:	d112      	bne.n	801876e <udp_input+0x1f2>
 8018748:	4b12      	ldr	r3, [pc, #72]	@ (8018794 <udp_input+0x218>)
 801874a:	695b      	ldr	r3, [r3, #20]
 801874c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8018750:	2be0      	cmp	r3, #224	@ 0xe0
 8018752:	d00c      	beq.n	801876e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018754:	4b0f      	ldr	r3, [pc, #60]	@ (8018794 <udp_input+0x218>)
 8018756:	899b      	ldrh	r3, [r3, #12]
 8018758:	3308      	adds	r3, #8
 801875a:	b29b      	uxth	r3, r3
 801875c:	b21b      	sxth	r3, r3
 801875e:	4619      	mov	r1, r3
 8018760:	6878      	ldr	r0, [r7, #4]
 8018762:	f7f9 ff74 	bl	801264e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8018766:	2103      	movs	r1, #3
 8018768:	6878      	ldr	r0, [r7, #4]
 801876a:	f003 faa1 	bl	801bcb0 <icmp_dest_unreach>
      pbuf_free(p);
 801876e:	6878      	ldr	r0, [r7, #4]
 8018770:	f7f9 ff80 	bl	8012674 <pbuf_free>
  return;
 8018774:	e003      	b.n	801877e <udp_input+0x202>
    pbuf_free(p);
 8018776:	6878      	ldr	r0, [r7, #4]
 8018778:	f7f9 ff7c 	bl	8012674 <pbuf_free>
  return;
 801877c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801877e:	372c      	adds	r7, #44	@ 0x2c
 8018780:	46bd      	mov	sp, r7
 8018782:	bd90      	pop	{r4, r7, pc}
 8018784:	080241ac 	.word	0x080241ac
 8018788:	08024250 	.word	0x08024250
 801878c:	08024200 	.word	0x08024200
 8018790:	08024268 	.word	0x08024268
 8018794:	20017754 	.word	0x20017754
 8018798:	2001b070 	.word	0x2001b070
 801879c:	08024284 	.word	0x08024284
 80187a0:	20017764 	.word	0x20017764

080187a4 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80187a4:	b580      	push	{r7, lr}
 80187a6:	b088      	sub	sp, #32
 80187a8:	af02      	add	r7, sp, #8
 80187aa:	60f8      	str	r0, [r7, #12]
 80187ac:	60b9      	str	r1, [r7, #8]
 80187ae:	607a      	str	r2, [r7, #4]
 80187b0:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d109      	bne.n	80187cc <udp_sendto+0x28>
 80187b8:	4b23      	ldr	r3, [pc, #140]	@ (8018848 <udp_sendto+0xa4>)
 80187ba:	f44f 7206 	mov.w	r2, #536	@ 0x218
 80187be:	4923      	ldr	r1, [pc, #140]	@ (801884c <udp_sendto+0xa8>)
 80187c0:	4823      	ldr	r0, [pc, #140]	@ (8018850 <udp_sendto+0xac>)
 80187c2:	f005 ff9d 	bl	801e700 <iprintf>
 80187c6:	f06f 030f 	mvn.w	r3, #15
 80187ca:	e038      	b.n	801883e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80187cc:	68bb      	ldr	r3, [r7, #8]
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d109      	bne.n	80187e6 <udp_sendto+0x42>
 80187d2:	4b1d      	ldr	r3, [pc, #116]	@ (8018848 <udp_sendto+0xa4>)
 80187d4:	f240 2219 	movw	r2, #537	@ 0x219
 80187d8:	491e      	ldr	r1, [pc, #120]	@ (8018854 <udp_sendto+0xb0>)
 80187da:	481d      	ldr	r0, [pc, #116]	@ (8018850 <udp_sendto+0xac>)
 80187dc:	f005 ff90 	bl	801e700 <iprintf>
 80187e0:	f06f 030f 	mvn.w	r3, #15
 80187e4:	e02b      	b.n	801883e <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80187e6:	687b      	ldr	r3, [r7, #4]
 80187e8:	2b00      	cmp	r3, #0
 80187ea:	d109      	bne.n	8018800 <udp_sendto+0x5c>
 80187ec:	4b16      	ldr	r3, [pc, #88]	@ (8018848 <udp_sendto+0xa4>)
 80187ee:	f240 221a 	movw	r2, #538	@ 0x21a
 80187f2:	4919      	ldr	r1, [pc, #100]	@ (8018858 <udp_sendto+0xb4>)
 80187f4:	4816      	ldr	r0, [pc, #88]	@ (8018850 <udp_sendto+0xac>)
 80187f6:	f005 ff83 	bl	801e700 <iprintf>
 80187fa:	f06f 030f 	mvn.w	r3, #15
 80187fe:	e01e      	b.n	801883e <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8018800:	68fb      	ldr	r3, [r7, #12]
 8018802:	7a1b      	ldrb	r3, [r3, #8]
 8018804:	2b00      	cmp	r3, #0
 8018806:	d006      	beq.n	8018816 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	7a1b      	ldrb	r3, [r3, #8]
 801880c:	4618      	mov	r0, r3
 801880e:	f7f9 fba3 	bl	8011f58 <netif_get_by_index>
 8018812:	6178      	str	r0, [r7, #20]
 8018814:	e003      	b.n	801881e <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8018816:	6878      	ldr	r0, [r7, #4]
 8018818:	f003 fad4 	bl	801bdc4 <ip4_route>
 801881c:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801881e:	697b      	ldr	r3, [r7, #20]
 8018820:	2b00      	cmp	r3, #0
 8018822:	d102      	bne.n	801882a <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8018824:	f06f 0303 	mvn.w	r3, #3
 8018828:	e009      	b.n	801883e <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801882a:	887a      	ldrh	r2, [r7, #2]
 801882c:	697b      	ldr	r3, [r7, #20]
 801882e:	9300      	str	r3, [sp, #0]
 8018830:	4613      	mov	r3, r2
 8018832:	687a      	ldr	r2, [r7, #4]
 8018834:	68b9      	ldr	r1, [r7, #8]
 8018836:	68f8      	ldr	r0, [r7, #12]
 8018838:	f000 f810 	bl	801885c <udp_sendto_if>
 801883c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801883e:	4618      	mov	r0, r3
 8018840:	3718      	adds	r7, #24
 8018842:	46bd      	mov	sp, r7
 8018844:	bd80      	pop	{r7, pc}
 8018846:	bf00      	nop
 8018848:	080241ac 	.word	0x080241ac
 801884c:	080242d0 	.word	0x080242d0
 8018850:	08024200 	.word	0x08024200
 8018854:	080242e8 	.word	0x080242e8
 8018858:	08024304 	.word	0x08024304

0801885c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801885c:	b580      	push	{r7, lr}
 801885e:	b088      	sub	sp, #32
 8018860:	af02      	add	r7, sp, #8
 8018862:	60f8      	str	r0, [r7, #12]
 8018864:	60b9      	str	r1, [r7, #8]
 8018866:	607a      	str	r2, [r7, #4]
 8018868:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801886a:	68fb      	ldr	r3, [r7, #12]
 801886c:	2b00      	cmp	r3, #0
 801886e:	d109      	bne.n	8018884 <udp_sendto_if+0x28>
 8018870:	4b2e      	ldr	r3, [pc, #184]	@ (801892c <udp_sendto_if+0xd0>)
 8018872:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018876:	492e      	ldr	r1, [pc, #184]	@ (8018930 <udp_sendto_if+0xd4>)
 8018878:	482e      	ldr	r0, [pc, #184]	@ (8018934 <udp_sendto_if+0xd8>)
 801887a:	f005 ff41 	bl	801e700 <iprintf>
 801887e:	f06f 030f 	mvn.w	r3, #15
 8018882:	e04f      	b.n	8018924 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8018884:	68bb      	ldr	r3, [r7, #8]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d109      	bne.n	801889e <udp_sendto_if+0x42>
 801888a:	4b28      	ldr	r3, [pc, #160]	@ (801892c <udp_sendto_if+0xd0>)
 801888c:	f240 2281 	movw	r2, #641	@ 0x281
 8018890:	4929      	ldr	r1, [pc, #164]	@ (8018938 <udp_sendto_if+0xdc>)
 8018892:	4828      	ldr	r0, [pc, #160]	@ (8018934 <udp_sendto_if+0xd8>)
 8018894:	f005 ff34 	bl	801e700 <iprintf>
 8018898:	f06f 030f 	mvn.w	r3, #15
 801889c:	e042      	b.n	8018924 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	d109      	bne.n	80188b8 <udp_sendto_if+0x5c>
 80188a4:	4b21      	ldr	r3, [pc, #132]	@ (801892c <udp_sendto_if+0xd0>)
 80188a6:	f240 2282 	movw	r2, #642	@ 0x282
 80188aa:	4924      	ldr	r1, [pc, #144]	@ (801893c <udp_sendto_if+0xe0>)
 80188ac:	4821      	ldr	r0, [pc, #132]	@ (8018934 <udp_sendto_if+0xd8>)
 80188ae:	f005 ff27 	bl	801e700 <iprintf>
 80188b2:	f06f 030f 	mvn.w	r3, #15
 80188b6:	e035      	b.n	8018924 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80188b8:	6a3b      	ldr	r3, [r7, #32]
 80188ba:	2b00      	cmp	r3, #0
 80188bc:	d109      	bne.n	80188d2 <udp_sendto_if+0x76>
 80188be:	4b1b      	ldr	r3, [pc, #108]	@ (801892c <udp_sendto_if+0xd0>)
 80188c0:	f240 2283 	movw	r2, #643	@ 0x283
 80188c4:	491e      	ldr	r1, [pc, #120]	@ (8018940 <udp_sendto_if+0xe4>)
 80188c6:	481b      	ldr	r0, [pc, #108]	@ (8018934 <udp_sendto_if+0xd8>)
 80188c8:	f005 ff1a 	bl	801e700 <iprintf>
 80188cc:	f06f 030f 	mvn.w	r3, #15
 80188d0:	e028      	b.n	8018924 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d009      	beq.n	80188ec <udp_sendto_if+0x90>
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	2b00      	cmp	r3, #0
 80188de:	d005      	beq.n	80188ec <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80188e0:	68fb      	ldr	r3, [r7, #12]
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80188e8:	2be0      	cmp	r3, #224	@ 0xe0
 80188ea:	d103      	bne.n	80188f4 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80188ec:	6a3b      	ldr	r3, [r7, #32]
 80188ee:	3304      	adds	r3, #4
 80188f0:	617b      	str	r3, [r7, #20]
 80188f2:	e00b      	b.n	801890c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	681a      	ldr	r2, [r3, #0]
 80188f8:	6a3b      	ldr	r3, [r7, #32]
 80188fa:	3304      	adds	r3, #4
 80188fc:	681b      	ldr	r3, [r3, #0]
 80188fe:	429a      	cmp	r2, r3
 8018900:	d002      	beq.n	8018908 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8018902:	f06f 0303 	mvn.w	r3, #3
 8018906:	e00d      	b.n	8018924 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8018908:	68fb      	ldr	r3, [r7, #12]
 801890a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801890c:	887a      	ldrh	r2, [r7, #2]
 801890e:	697b      	ldr	r3, [r7, #20]
 8018910:	9301      	str	r3, [sp, #4]
 8018912:	6a3b      	ldr	r3, [r7, #32]
 8018914:	9300      	str	r3, [sp, #0]
 8018916:	4613      	mov	r3, r2
 8018918:	687a      	ldr	r2, [r7, #4]
 801891a:	68b9      	ldr	r1, [r7, #8]
 801891c:	68f8      	ldr	r0, [r7, #12]
 801891e:	f000 f811 	bl	8018944 <udp_sendto_if_src>
 8018922:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8018924:	4618      	mov	r0, r3
 8018926:	3718      	adds	r7, #24
 8018928:	46bd      	mov	sp, r7
 801892a:	bd80      	pop	{r7, pc}
 801892c:	080241ac 	.word	0x080241ac
 8018930:	08024320 	.word	0x08024320
 8018934:	08024200 	.word	0x08024200
 8018938:	0802433c 	.word	0x0802433c
 801893c:	08024358 	.word	0x08024358
 8018940:	08024378 	.word	0x08024378

08018944 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8018944:	b580      	push	{r7, lr}
 8018946:	b08c      	sub	sp, #48	@ 0x30
 8018948:	af04      	add	r7, sp, #16
 801894a:	60f8      	str	r0, [r7, #12]
 801894c:	60b9      	str	r1, [r7, #8]
 801894e:	607a      	str	r2, [r7, #4]
 8018950:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8018952:	68fb      	ldr	r3, [r7, #12]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d109      	bne.n	801896c <udp_sendto_if_src+0x28>
 8018958:	4b65      	ldr	r3, [pc, #404]	@ (8018af0 <udp_sendto_if_src+0x1ac>)
 801895a:	f240 22d1 	movw	r2, #721	@ 0x2d1
 801895e:	4965      	ldr	r1, [pc, #404]	@ (8018af4 <udp_sendto_if_src+0x1b0>)
 8018960:	4865      	ldr	r0, [pc, #404]	@ (8018af8 <udp_sendto_if_src+0x1b4>)
 8018962:	f005 fecd 	bl	801e700 <iprintf>
 8018966:	f06f 030f 	mvn.w	r3, #15
 801896a:	e0bc      	b.n	8018ae6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801896c:	68bb      	ldr	r3, [r7, #8]
 801896e:	2b00      	cmp	r3, #0
 8018970:	d109      	bne.n	8018986 <udp_sendto_if_src+0x42>
 8018972:	4b5f      	ldr	r3, [pc, #380]	@ (8018af0 <udp_sendto_if_src+0x1ac>)
 8018974:	f240 22d2 	movw	r2, #722	@ 0x2d2
 8018978:	4960      	ldr	r1, [pc, #384]	@ (8018afc <udp_sendto_if_src+0x1b8>)
 801897a:	485f      	ldr	r0, [pc, #380]	@ (8018af8 <udp_sendto_if_src+0x1b4>)
 801897c:	f005 fec0 	bl	801e700 <iprintf>
 8018980:	f06f 030f 	mvn.w	r3, #15
 8018984:	e0af      	b.n	8018ae6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8018986:	687b      	ldr	r3, [r7, #4]
 8018988:	2b00      	cmp	r3, #0
 801898a:	d109      	bne.n	80189a0 <udp_sendto_if_src+0x5c>
 801898c:	4b58      	ldr	r3, [pc, #352]	@ (8018af0 <udp_sendto_if_src+0x1ac>)
 801898e:	f240 22d3 	movw	r2, #723	@ 0x2d3
 8018992:	495b      	ldr	r1, [pc, #364]	@ (8018b00 <udp_sendto_if_src+0x1bc>)
 8018994:	4858      	ldr	r0, [pc, #352]	@ (8018af8 <udp_sendto_if_src+0x1b4>)
 8018996:	f005 feb3 	bl	801e700 <iprintf>
 801899a:	f06f 030f 	mvn.w	r3, #15
 801899e:	e0a2      	b.n	8018ae6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80189a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	d109      	bne.n	80189ba <udp_sendto_if_src+0x76>
 80189a6:	4b52      	ldr	r3, [pc, #328]	@ (8018af0 <udp_sendto_if_src+0x1ac>)
 80189a8:	f44f 7235 	mov.w	r2, #724	@ 0x2d4
 80189ac:	4955      	ldr	r1, [pc, #340]	@ (8018b04 <udp_sendto_if_src+0x1c0>)
 80189ae:	4852      	ldr	r0, [pc, #328]	@ (8018af8 <udp_sendto_if_src+0x1b4>)
 80189b0:	f005 fea6 	bl	801e700 <iprintf>
 80189b4:	f06f 030f 	mvn.w	r3, #15
 80189b8:	e095      	b.n	8018ae6 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80189ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d109      	bne.n	80189d4 <udp_sendto_if_src+0x90>
 80189c0:	4b4b      	ldr	r3, [pc, #300]	@ (8018af0 <udp_sendto_if_src+0x1ac>)
 80189c2:	f240 22d5 	movw	r2, #725	@ 0x2d5
 80189c6:	4950      	ldr	r1, [pc, #320]	@ (8018b08 <udp_sendto_if_src+0x1c4>)
 80189c8:	484b      	ldr	r0, [pc, #300]	@ (8018af8 <udp_sendto_if_src+0x1b4>)
 80189ca:	f005 fe99 	bl	801e700 <iprintf>
 80189ce:	f06f 030f 	mvn.w	r3, #15
 80189d2:	e088      	b.n	8018ae6 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80189d4:	68fb      	ldr	r3, [r7, #12]
 80189d6:	8a5b      	ldrh	r3, [r3, #18]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d10f      	bne.n	80189fc <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80189dc:	68f9      	ldr	r1, [r7, #12]
 80189de:	68fb      	ldr	r3, [r7, #12]
 80189e0:	8a5b      	ldrh	r3, [r3, #18]
 80189e2:	461a      	mov	r2, r3
 80189e4:	68f8      	ldr	r0, [r7, #12]
 80189e6:	f000 f893 	bl	8018b10 <udp_bind>
 80189ea:	4603      	mov	r3, r0
 80189ec:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80189ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d002      	beq.n	80189fc <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80189f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80189fa:	e074      	b.n	8018ae6 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80189fc:	68bb      	ldr	r3, [r7, #8]
 80189fe:	891b      	ldrh	r3, [r3, #8]
 8018a00:	f64f 72f7 	movw	r2, #65527	@ 0xfff7
 8018a04:	4293      	cmp	r3, r2
 8018a06:	d902      	bls.n	8018a0e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8018a08:	f04f 33ff 	mov.w	r3, #4294967295
 8018a0c:	e06b      	b.n	8018ae6 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8018a0e:	2108      	movs	r1, #8
 8018a10:	68b8      	ldr	r0, [r7, #8]
 8018a12:	f7f9 fd99 	bl	8012548 <pbuf_add_header>
 8018a16:	4603      	mov	r3, r0
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d015      	beq.n	8018a48 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8018a1c:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8018a20:	2108      	movs	r1, #8
 8018a22:	2022      	movs	r0, #34	@ 0x22
 8018a24:	f7f9 fb42 	bl	80120ac <pbuf_alloc>
 8018a28:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8018a2a:	69fb      	ldr	r3, [r7, #28]
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d102      	bne.n	8018a36 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8018a30:	f04f 33ff 	mov.w	r3, #4294967295
 8018a34:	e057      	b.n	8018ae6 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8018a36:	68bb      	ldr	r3, [r7, #8]
 8018a38:	891b      	ldrh	r3, [r3, #8]
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d006      	beq.n	8018a4c <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8018a3e:	68b9      	ldr	r1, [r7, #8]
 8018a40:	69f8      	ldr	r0, [r7, #28]
 8018a42:	f7f9 ff3b 	bl	80128bc <pbuf_chain>
 8018a46:	e001      	b.n	8018a4c <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8018a48:	68bb      	ldr	r3, [r7, #8]
 8018a4a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8018a4c:	69fb      	ldr	r3, [r7, #28]
 8018a4e:	895b      	ldrh	r3, [r3, #10]
 8018a50:	2b07      	cmp	r3, #7
 8018a52:	d806      	bhi.n	8018a62 <udp_sendto_if_src+0x11e>
 8018a54:	4b26      	ldr	r3, [pc, #152]	@ (8018af0 <udp_sendto_if_src+0x1ac>)
 8018a56:	f240 320d 	movw	r2, #781	@ 0x30d
 8018a5a:	492c      	ldr	r1, [pc, #176]	@ (8018b0c <udp_sendto_if_src+0x1c8>)
 8018a5c:	4826      	ldr	r0, [pc, #152]	@ (8018af8 <udp_sendto_if_src+0x1b4>)
 8018a5e:	f005 fe4f 	bl	801e700 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8018a62:	69fb      	ldr	r3, [r7, #28]
 8018a64:	685b      	ldr	r3, [r3, #4]
 8018a66:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8018a68:	68fb      	ldr	r3, [r7, #12]
 8018a6a:	8a5b      	ldrh	r3, [r3, #18]
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	f7f7 ff15 	bl	801089c <lwip_htons>
 8018a72:	4603      	mov	r3, r0
 8018a74:	461a      	mov	r2, r3
 8018a76:	697b      	ldr	r3, [r7, #20]
 8018a78:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8018a7a:	887b      	ldrh	r3, [r7, #2]
 8018a7c:	4618      	mov	r0, r3
 8018a7e:	f7f7 ff0d 	bl	801089c <lwip_htons>
 8018a82:	4603      	mov	r3, r0
 8018a84:	461a      	mov	r2, r3
 8018a86:	697b      	ldr	r3, [r7, #20]
 8018a88:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8018a8a:	697b      	ldr	r3, [r7, #20]
 8018a8c:	2200      	movs	r2, #0
 8018a8e:	719a      	strb	r2, [r3, #6]
 8018a90:	2200      	movs	r2, #0
 8018a92:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8018a94:	69fb      	ldr	r3, [r7, #28]
 8018a96:	891b      	ldrh	r3, [r3, #8]
 8018a98:	4618      	mov	r0, r3
 8018a9a:	f7f7 feff 	bl	801089c <lwip_htons>
 8018a9e:	4603      	mov	r3, r0
 8018aa0:	461a      	mov	r2, r3
 8018aa2:	697b      	ldr	r3, [r7, #20]
 8018aa4:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8018aa6:	2311      	movs	r3, #17
 8018aa8:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8018aaa:	68fb      	ldr	r3, [r7, #12]
 8018aac:	7adb      	ldrb	r3, [r3, #11]
 8018aae:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8018ab0:	68fb      	ldr	r3, [r7, #12]
 8018ab2:	7a9b      	ldrb	r3, [r3, #10]
 8018ab4:	7cb9      	ldrb	r1, [r7, #18]
 8018ab6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018ab8:	9202      	str	r2, [sp, #8]
 8018aba:	7cfa      	ldrb	r2, [r7, #19]
 8018abc:	9201      	str	r2, [sp, #4]
 8018abe:	9300      	str	r3, [sp, #0]
 8018ac0:	460b      	mov	r3, r1
 8018ac2:	687a      	ldr	r2, [r7, #4]
 8018ac4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8018ac6:	69f8      	ldr	r0, [r7, #28]
 8018ac8:	f003 fb82 	bl	801c1d0 <ip4_output_if_src>
 8018acc:	4603      	mov	r3, r0
 8018ace:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8018ad0:	69fa      	ldr	r2, [r7, #28]
 8018ad2:	68bb      	ldr	r3, [r7, #8]
 8018ad4:	429a      	cmp	r2, r3
 8018ad6:	d004      	beq.n	8018ae2 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8018ad8:	69f8      	ldr	r0, [r7, #28]
 8018ada:	f7f9 fdcb 	bl	8012674 <pbuf_free>
    q = NULL;
 8018ade:	2300      	movs	r3, #0
 8018ae0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8018ae2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8018ae6:	4618      	mov	r0, r3
 8018ae8:	3720      	adds	r7, #32
 8018aea:	46bd      	mov	sp, r7
 8018aec:	bd80      	pop	{r7, pc}
 8018aee:	bf00      	nop
 8018af0:	080241ac 	.word	0x080241ac
 8018af4:	08024398 	.word	0x08024398
 8018af8:	08024200 	.word	0x08024200
 8018afc:	080243b8 	.word	0x080243b8
 8018b00:	080243d8 	.word	0x080243d8
 8018b04:	080243fc 	.word	0x080243fc
 8018b08:	08024420 	.word	0x08024420
 8018b0c:	08024444 	.word	0x08024444

08018b10 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018b10:	b580      	push	{r7, lr}
 8018b12:	b086      	sub	sp, #24
 8018b14:	af00      	add	r7, sp, #0
 8018b16:	60f8      	str	r0, [r7, #12]
 8018b18:	60b9      	str	r1, [r7, #8]
 8018b1a:	4613      	mov	r3, r2
 8018b1c:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018b1e:	68bb      	ldr	r3, [r7, #8]
 8018b20:	2b00      	cmp	r3, #0
 8018b22:	d101      	bne.n	8018b28 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8018b24:	4b39      	ldr	r3, [pc, #228]	@ (8018c0c <udp_bind+0xfc>)
 8018b26:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8018b28:	68fb      	ldr	r3, [r7, #12]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	d109      	bne.n	8018b42 <udp_bind+0x32>
 8018b2e:	4b38      	ldr	r3, [pc, #224]	@ (8018c10 <udp_bind+0x100>)
 8018b30:	f240 32b7 	movw	r2, #951	@ 0x3b7
 8018b34:	4937      	ldr	r1, [pc, #220]	@ (8018c14 <udp_bind+0x104>)
 8018b36:	4838      	ldr	r0, [pc, #224]	@ (8018c18 <udp_bind+0x108>)
 8018b38:	f005 fde2 	bl	801e700 <iprintf>
 8018b3c:	f06f 030f 	mvn.w	r3, #15
 8018b40:	e060      	b.n	8018c04 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8018b42:	2300      	movs	r3, #0
 8018b44:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018b46:	4b35      	ldr	r3, [pc, #212]	@ (8018c1c <udp_bind+0x10c>)
 8018b48:	681b      	ldr	r3, [r3, #0]
 8018b4a:	617b      	str	r3, [r7, #20]
 8018b4c:	e009      	b.n	8018b62 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8018b4e:	68fa      	ldr	r2, [r7, #12]
 8018b50:	697b      	ldr	r3, [r7, #20]
 8018b52:	429a      	cmp	r2, r3
 8018b54:	d102      	bne.n	8018b5c <udp_bind+0x4c>
      rebind = 1;
 8018b56:	2301      	movs	r3, #1
 8018b58:	74fb      	strb	r3, [r7, #19]
      break;
 8018b5a:	e005      	b.n	8018b68 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018b5c:	697b      	ldr	r3, [r7, #20]
 8018b5e:	68db      	ldr	r3, [r3, #12]
 8018b60:	617b      	str	r3, [r7, #20]
 8018b62:	697b      	ldr	r3, [r7, #20]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d1f2      	bne.n	8018b4e <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8018b68:	88fb      	ldrh	r3, [r7, #6]
 8018b6a:	2b00      	cmp	r3, #0
 8018b6c:	d109      	bne.n	8018b82 <udp_bind+0x72>
    port = udp_new_port();
 8018b6e:	f7ff fc69 	bl	8018444 <udp_new_port>
 8018b72:	4603      	mov	r3, r0
 8018b74:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8018b76:	88fb      	ldrh	r3, [r7, #6]
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d12c      	bne.n	8018bd6 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8018b7c:	f06f 0307 	mvn.w	r3, #7
 8018b80:	e040      	b.n	8018c04 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018b82:	4b26      	ldr	r3, [pc, #152]	@ (8018c1c <udp_bind+0x10c>)
 8018b84:	681b      	ldr	r3, [r3, #0]
 8018b86:	617b      	str	r3, [r7, #20]
 8018b88:	e022      	b.n	8018bd0 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8018b8a:	68fa      	ldr	r2, [r7, #12]
 8018b8c:	697b      	ldr	r3, [r7, #20]
 8018b8e:	429a      	cmp	r2, r3
 8018b90:	d01b      	beq.n	8018bca <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8018b92:	697b      	ldr	r3, [r7, #20]
 8018b94:	8a5b      	ldrh	r3, [r3, #18]
 8018b96:	88fa      	ldrh	r2, [r7, #6]
 8018b98:	429a      	cmp	r2, r3
 8018b9a:	d116      	bne.n	8018bca <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018b9c:	697b      	ldr	r3, [r7, #20]
 8018b9e:	681a      	ldr	r2, [r3, #0]
 8018ba0:	68bb      	ldr	r3, [r7, #8]
 8018ba2:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8018ba4:	429a      	cmp	r2, r3
 8018ba6:	d00d      	beq.n	8018bc4 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018ba8:	68bb      	ldr	r3, [r7, #8]
 8018baa:	2b00      	cmp	r3, #0
 8018bac:	d00a      	beq.n	8018bc4 <udp_bind+0xb4>
 8018bae:	68bb      	ldr	r3, [r7, #8]
 8018bb0:	681b      	ldr	r3, [r3, #0]
 8018bb2:	2b00      	cmp	r3, #0
 8018bb4:	d006      	beq.n	8018bc4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018bb6:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8018bb8:	2b00      	cmp	r3, #0
 8018bba:	d003      	beq.n	8018bc4 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8018bbc:	697b      	ldr	r3, [r7, #20]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d102      	bne.n	8018bca <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8018bc4:	f06f 0307 	mvn.w	r3, #7
 8018bc8:	e01c      	b.n	8018c04 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018bca:	697b      	ldr	r3, [r7, #20]
 8018bcc:	68db      	ldr	r3, [r3, #12]
 8018bce:	617b      	str	r3, [r7, #20]
 8018bd0:	697b      	ldr	r3, [r7, #20]
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	d1d9      	bne.n	8018b8a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8018bd6:	68bb      	ldr	r3, [r7, #8]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d002      	beq.n	8018be2 <udp_bind+0xd2>
 8018bdc:	68bb      	ldr	r3, [r7, #8]
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	e000      	b.n	8018be4 <udp_bind+0xd4>
 8018be2:	2300      	movs	r3, #0
 8018be4:	68fa      	ldr	r2, [r7, #12]
 8018be6:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8018be8:	68fb      	ldr	r3, [r7, #12]
 8018bea:	88fa      	ldrh	r2, [r7, #6]
 8018bec:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8018bee:	7cfb      	ldrb	r3, [r7, #19]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d106      	bne.n	8018c02 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8018bf4:	4b09      	ldr	r3, [pc, #36]	@ (8018c1c <udp_bind+0x10c>)
 8018bf6:	681a      	ldr	r2, [r3, #0]
 8018bf8:	68fb      	ldr	r3, [r7, #12]
 8018bfa:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8018bfc:	4a07      	ldr	r2, [pc, #28]	@ (8018c1c <udp_bind+0x10c>)
 8018bfe:	68fb      	ldr	r3, [r7, #12]
 8018c00:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8018c02:	2300      	movs	r3, #0
}
 8018c04:	4618      	mov	r0, r3
 8018c06:	3718      	adds	r7, #24
 8018c08:	46bd      	mov	sp, r7
 8018c0a:	bd80      	pop	{r7, pc}
 8018c0c:	080252e8 	.word	0x080252e8
 8018c10:	080241ac 	.word	0x080241ac
 8018c14:	08024474 	.word	0x08024474
 8018c18:	08024200 	.word	0x08024200
 8018c1c:	2001b070 	.word	0x2001b070

08018c20 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8018c20:	b580      	push	{r7, lr}
 8018c22:	b086      	sub	sp, #24
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	60f8      	str	r0, [r7, #12]
 8018c28:	60b9      	str	r1, [r7, #8]
 8018c2a:	4613      	mov	r3, r2
 8018c2c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d109      	bne.n	8018c48 <udp_connect+0x28>
 8018c34:	4b2c      	ldr	r3, [pc, #176]	@ (8018ce8 <udp_connect+0xc8>)
 8018c36:	f240 4235 	movw	r2, #1077	@ 0x435
 8018c3a:	492c      	ldr	r1, [pc, #176]	@ (8018cec <udp_connect+0xcc>)
 8018c3c:	482c      	ldr	r0, [pc, #176]	@ (8018cf0 <udp_connect+0xd0>)
 8018c3e:	f005 fd5f 	bl	801e700 <iprintf>
 8018c42:	f06f 030f 	mvn.w	r3, #15
 8018c46:	e04b      	b.n	8018ce0 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8018c48:	68bb      	ldr	r3, [r7, #8]
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	d109      	bne.n	8018c62 <udp_connect+0x42>
 8018c4e:	4b26      	ldr	r3, [pc, #152]	@ (8018ce8 <udp_connect+0xc8>)
 8018c50:	f240 4236 	movw	r2, #1078	@ 0x436
 8018c54:	4927      	ldr	r1, [pc, #156]	@ (8018cf4 <udp_connect+0xd4>)
 8018c56:	4826      	ldr	r0, [pc, #152]	@ (8018cf0 <udp_connect+0xd0>)
 8018c58:	f005 fd52 	bl	801e700 <iprintf>
 8018c5c:	f06f 030f 	mvn.w	r3, #15
 8018c60:	e03e      	b.n	8018ce0 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8018c62:	68fb      	ldr	r3, [r7, #12]
 8018c64:	8a5b      	ldrh	r3, [r3, #18]
 8018c66:	2b00      	cmp	r3, #0
 8018c68:	d10f      	bne.n	8018c8a <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8018c6a:	68f9      	ldr	r1, [r7, #12]
 8018c6c:	68fb      	ldr	r3, [r7, #12]
 8018c6e:	8a5b      	ldrh	r3, [r3, #18]
 8018c70:	461a      	mov	r2, r3
 8018c72:	68f8      	ldr	r0, [r7, #12]
 8018c74:	f7ff ff4c 	bl	8018b10 <udp_bind>
 8018c78:	4603      	mov	r3, r0
 8018c7a:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8018c7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018c80:	2b00      	cmp	r3, #0
 8018c82:	d002      	beq.n	8018c8a <udp_connect+0x6a>
      return err;
 8018c84:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8018c88:	e02a      	b.n	8018ce0 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8018c8a:	68bb      	ldr	r3, [r7, #8]
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d002      	beq.n	8018c96 <udp_connect+0x76>
 8018c90:	68bb      	ldr	r3, [r7, #8]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	e000      	b.n	8018c98 <udp_connect+0x78>
 8018c96:	2300      	movs	r3, #0
 8018c98:	68fa      	ldr	r2, [r7, #12]
 8018c9a:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	88fa      	ldrh	r2, [r7, #6]
 8018ca0:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8018ca2:	68fb      	ldr	r3, [r7, #12]
 8018ca4:	7c1b      	ldrb	r3, [r3, #16]
 8018ca6:	f043 0304 	orr.w	r3, r3, #4
 8018caa:	b2da      	uxtb	r2, r3
 8018cac:	68fb      	ldr	r3, [r7, #12]
 8018cae:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018cb0:	4b11      	ldr	r3, [pc, #68]	@ (8018cf8 <udp_connect+0xd8>)
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	617b      	str	r3, [r7, #20]
 8018cb6:	e008      	b.n	8018cca <udp_connect+0xaa>
    if (pcb == ipcb) {
 8018cb8:	68fa      	ldr	r2, [r7, #12]
 8018cba:	697b      	ldr	r3, [r7, #20]
 8018cbc:	429a      	cmp	r2, r3
 8018cbe:	d101      	bne.n	8018cc4 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8018cc0:	2300      	movs	r3, #0
 8018cc2:	e00d      	b.n	8018ce0 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8018cc4:	697b      	ldr	r3, [r7, #20]
 8018cc6:	68db      	ldr	r3, [r3, #12]
 8018cc8:	617b      	str	r3, [r7, #20]
 8018cca:	697b      	ldr	r3, [r7, #20]
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d1f3      	bne.n	8018cb8 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8018cd0:	4b09      	ldr	r3, [pc, #36]	@ (8018cf8 <udp_connect+0xd8>)
 8018cd2:	681a      	ldr	r2, [r3, #0]
 8018cd4:	68fb      	ldr	r3, [r7, #12]
 8018cd6:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8018cd8:	4a07      	ldr	r2, [pc, #28]	@ (8018cf8 <udp_connect+0xd8>)
 8018cda:	68fb      	ldr	r3, [r7, #12]
 8018cdc:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8018cde:	2300      	movs	r3, #0
}
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	3718      	adds	r7, #24
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bd80      	pop	{r7, pc}
 8018ce8:	080241ac 	.word	0x080241ac
 8018cec:	0802448c 	.word	0x0802448c
 8018cf0:	08024200 	.word	0x08024200
 8018cf4:	080244a8 	.word	0x080244a8
 8018cf8:	2001b070 	.word	0x2001b070

08018cfc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8018cfc:	b580      	push	{r7, lr}
 8018cfe:	b084      	sub	sp, #16
 8018d00:	af00      	add	r7, sp, #0
 8018d02:	60f8      	str	r0, [r7, #12]
 8018d04:	60b9      	str	r1, [r7, #8]
 8018d06:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d107      	bne.n	8018d1e <udp_recv+0x22>
 8018d0e:	4b08      	ldr	r3, [pc, #32]	@ (8018d30 <udp_recv+0x34>)
 8018d10:	f240 428a 	movw	r2, #1162	@ 0x48a
 8018d14:	4907      	ldr	r1, [pc, #28]	@ (8018d34 <udp_recv+0x38>)
 8018d16:	4808      	ldr	r0, [pc, #32]	@ (8018d38 <udp_recv+0x3c>)
 8018d18:	f005 fcf2 	bl	801e700 <iprintf>
 8018d1c:	e005      	b.n	8018d2a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8018d1e:	68fb      	ldr	r3, [r7, #12]
 8018d20:	68ba      	ldr	r2, [r7, #8]
 8018d22:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	687a      	ldr	r2, [r7, #4]
 8018d28:	61da      	str	r2, [r3, #28]
}
 8018d2a:	3710      	adds	r7, #16
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	bd80      	pop	{r7, pc}
 8018d30:	080241ac 	.word	0x080241ac
 8018d34:	080244e0 	.word	0x080244e0
 8018d38:	08024200 	.word	0x08024200

08018d3c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8018d3c:	b580      	push	{r7, lr}
 8018d3e:	b084      	sub	sp, #16
 8018d40:	af00      	add	r7, sp, #0
 8018d42:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8018d44:	687b      	ldr	r3, [r7, #4]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d107      	bne.n	8018d5a <udp_remove+0x1e>
 8018d4a:	4b19      	ldr	r3, [pc, #100]	@ (8018db0 <udp_remove+0x74>)
 8018d4c:	f240 42a1 	movw	r2, #1185	@ 0x4a1
 8018d50:	4918      	ldr	r1, [pc, #96]	@ (8018db4 <udp_remove+0x78>)
 8018d52:	4819      	ldr	r0, [pc, #100]	@ (8018db8 <udp_remove+0x7c>)
 8018d54:	f005 fcd4 	bl	801e700 <iprintf>
 8018d58:	e026      	b.n	8018da8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8018d5a:	4b18      	ldr	r3, [pc, #96]	@ (8018dbc <udp_remove+0x80>)
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	687a      	ldr	r2, [r7, #4]
 8018d60:	429a      	cmp	r2, r3
 8018d62:	d105      	bne.n	8018d70 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8018d64:	4b15      	ldr	r3, [pc, #84]	@ (8018dbc <udp_remove+0x80>)
 8018d66:	681b      	ldr	r3, [r3, #0]
 8018d68:	68db      	ldr	r3, [r3, #12]
 8018d6a:	4a14      	ldr	r2, [pc, #80]	@ (8018dbc <udp_remove+0x80>)
 8018d6c:	6013      	str	r3, [r2, #0]
 8018d6e:	e017      	b.n	8018da0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018d70:	4b12      	ldr	r3, [pc, #72]	@ (8018dbc <udp_remove+0x80>)
 8018d72:	681b      	ldr	r3, [r3, #0]
 8018d74:	60fb      	str	r3, [r7, #12]
 8018d76:	e010      	b.n	8018d9a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	68db      	ldr	r3, [r3, #12]
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d009      	beq.n	8018d94 <udp_remove+0x58>
 8018d80:	68fb      	ldr	r3, [r7, #12]
 8018d82:	68db      	ldr	r3, [r3, #12]
 8018d84:	687a      	ldr	r2, [r7, #4]
 8018d86:	429a      	cmp	r2, r3
 8018d88:	d104      	bne.n	8018d94 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	68da      	ldr	r2, [r3, #12]
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	60da      	str	r2, [r3, #12]
        break;
 8018d92:	e005      	b.n	8018da0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8018d94:	68fb      	ldr	r3, [r7, #12]
 8018d96:	68db      	ldr	r3, [r3, #12]
 8018d98:	60fb      	str	r3, [r7, #12]
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d1eb      	bne.n	8018d78 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8018da0:	6879      	ldr	r1, [r7, #4]
 8018da2:	2000      	movs	r0, #0
 8018da4:	f7f8 fdb6 	bl	8011914 <memp_free>
}
 8018da8:	3710      	adds	r7, #16
 8018daa:	46bd      	mov	sp, r7
 8018dac:	bd80      	pop	{r7, pc}
 8018dae:	bf00      	nop
 8018db0:	080241ac 	.word	0x080241ac
 8018db4:	080244f8 	.word	0x080244f8
 8018db8:	08024200 	.word	0x08024200
 8018dbc:	2001b070 	.word	0x2001b070

08018dc0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8018dc0:	b580      	push	{r7, lr}
 8018dc2:	b082      	sub	sp, #8
 8018dc4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8018dc6:	2000      	movs	r0, #0
 8018dc8:	f7f8 fd2e 	bl	8011828 <memp_malloc>
 8018dcc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8018dce:	687b      	ldr	r3, [r7, #4]
 8018dd0:	2b00      	cmp	r3, #0
 8018dd2:	d007      	beq.n	8018de4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8018dd4:	2220      	movs	r2, #32
 8018dd6:	2100      	movs	r1, #0
 8018dd8:	6878      	ldr	r0, [r7, #4]
 8018dda:	f005 fdc5 	bl	801e968 <memset>
    pcb->ttl = UDP_TTL;
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	22ff      	movs	r2, #255	@ 0xff
 8018de2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8018de4:	687b      	ldr	r3, [r7, #4]
}
 8018de6:	4618      	mov	r0, r3
 8018de8:	3708      	adds	r7, #8
 8018dea:	46bd      	mov	sp, r7
 8018dec:	bd80      	pop	{r7, pc}
	...

08018df0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8018df0:	b480      	push	{r7}
 8018df2:	b085      	sub	sp, #20
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]
 8018df8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8018dfa:	687b      	ldr	r3, [r7, #4]
 8018dfc:	2b00      	cmp	r3, #0
 8018dfe:	d01e      	beq.n	8018e3e <udp_netif_ip_addr_changed+0x4e>
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	2b00      	cmp	r3, #0
 8018e06:	d01a      	beq.n	8018e3e <udp_netif_ip_addr_changed+0x4e>
 8018e08:	683b      	ldr	r3, [r7, #0]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d017      	beq.n	8018e3e <udp_netif_ip_addr_changed+0x4e>
 8018e0e:	683b      	ldr	r3, [r7, #0]
 8018e10:	681b      	ldr	r3, [r3, #0]
 8018e12:	2b00      	cmp	r3, #0
 8018e14:	d013      	beq.n	8018e3e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018e16:	4b0d      	ldr	r3, [pc, #52]	@ (8018e4c <udp_netif_ip_addr_changed+0x5c>)
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	60fb      	str	r3, [r7, #12]
 8018e1c:	e00c      	b.n	8018e38 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018e1e:	68fb      	ldr	r3, [r7, #12]
 8018e20:	681a      	ldr	r2, [r3, #0]
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	681b      	ldr	r3, [r3, #0]
 8018e26:	429a      	cmp	r2, r3
 8018e28:	d103      	bne.n	8018e32 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018e2a:	683b      	ldr	r3, [r7, #0]
 8018e2c:	681a      	ldr	r2, [r3, #0]
 8018e2e:	68fb      	ldr	r3, [r7, #12]
 8018e30:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	68db      	ldr	r3, [r3, #12]
 8018e36:	60fb      	str	r3, [r7, #12]
 8018e38:	68fb      	ldr	r3, [r7, #12]
 8018e3a:	2b00      	cmp	r3, #0
 8018e3c:	d1ef      	bne.n	8018e1e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018e3e:	bf00      	nop
 8018e40:	3714      	adds	r7, #20
 8018e42:	46bd      	mov	sp, r7
 8018e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e48:	4770      	bx	lr
 8018e4a:	bf00      	nop
 8018e4c:	2001b070 	.word	0x2001b070

08018e50 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8018e50:	b580      	push	{r7, lr}
 8018e52:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8018e54:	4b20      	ldr	r3, [pc, #128]	@ (8018ed8 <dhcp_inc_pcb_refcount+0x88>)
 8018e56:	781b      	ldrb	r3, [r3, #0]
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d133      	bne.n	8018ec4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8018e5c:	4b1f      	ldr	r3, [pc, #124]	@ (8018edc <dhcp_inc_pcb_refcount+0x8c>)
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d005      	beq.n	8018e70 <dhcp_inc_pcb_refcount+0x20>
 8018e64:	4b1e      	ldr	r3, [pc, #120]	@ (8018ee0 <dhcp_inc_pcb_refcount+0x90>)
 8018e66:	22e5      	movs	r2, #229	@ 0xe5
 8018e68:	491e      	ldr	r1, [pc, #120]	@ (8018ee4 <dhcp_inc_pcb_refcount+0x94>)
 8018e6a:	481f      	ldr	r0, [pc, #124]	@ (8018ee8 <dhcp_inc_pcb_refcount+0x98>)
 8018e6c:	f005 fc48 	bl	801e700 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8018e70:	f7ff ffa6 	bl	8018dc0 <udp_new>
 8018e74:	4603      	mov	r3, r0
 8018e76:	4a19      	ldr	r2, [pc, #100]	@ (8018edc <dhcp_inc_pcb_refcount+0x8c>)
 8018e78:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8018e7a:	4b18      	ldr	r3, [pc, #96]	@ (8018edc <dhcp_inc_pcb_refcount+0x8c>)
 8018e7c:	681b      	ldr	r3, [r3, #0]
 8018e7e:	2b00      	cmp	r3, #0
 8018e80:	d102      	bne.n	8018e88 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8018e82:	f04f 33ff 	mov.w	r3, #4294967295
 8018e86:	e024      	b.n	8018ed2 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8018e88:	4b14      	ldr	r3, [pc, #80]	@ (8018edc <dhcp_inc_pcb_refcount+0x8c>)
 8018e8a:	681b      	ldr	r3, [r3, #0]
 8018e8c:	7a5a      	ldrb	r2, [r3, #9]
 8018e8e:	4b13      	ldr	r3, [pc, #76]	@ (8018edc <dhcp_inc_pcb_refcount+0x8c>)
 8018e90:	681b      	ldr	r3, [r3, #0]
 8018e92:	f042 0220 	orr.w	r2, r2, #32
 8018e96:	b2d2      	uxtb	r2, r2
 8018e98:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8018e9a:	4b10      	ldr	r3, [pc, #64]	@ (8018edc <dhcp_inc_pcb_refcount+0x8c>)
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	2244      	movs	r2, #68	@ 0x44
 8018ea0:	4912      	ldr	r1, [pc, #72]	@ (8018eec <dhcp_inc_pcb_refcount+0x9c>)
 8018ea2:	4618      	mov	r0, r3
 8018ea4:	f7ff fe34 	bl	8018b10 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8018ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8018edc <dhcp_inc_pcb_refcount+0x8c>)
 8018eaa:	681b      	ldr	r3, [r3, #0]
 8018eac:	2243      	movs	r2, #67	@ 0x43
 8018eae:	490f      	ldr	r1, [pc, #60]	@ (8018eec <dhcp_inc_pcb_refcount+0x9c>)
 8018eb0:	4618      	mov	r0, r3
 8018eb2:	f7ff feb5 	bl	8018c20 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8018eb6:	4b09      	ldr	r3, [pc, #36]	@ (8018edc <dhcp_inc_pcb_refcount+0x8c>)
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	2200      	movs	r2, #0
 8018ebc:	490c      	ldr	r1, [pc, #48]	@ (8018ef0 <dhcp_inc_pcb_refcount+0xa0>)
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	f7ff ff1c 	bl	8018cfc <udp_recv>
  }

  dhcp_pcb_refcount++;
 8018ec4:	4b04      	ldr	r3, [pc, #16]	@ (8018ed8 <dhcp_inc_pcb_refcount+0x88>)
 8018ec6:	781b      	ldrb	r3, [r3, #0]
 8018ec8:	3301      	adds	r3, #1
 8018eca:	b2da      	uxtb	r2, r3
 8018ecc:	4b02      	ldr	r3, [pc, #8]	@ (8018ed8 <dhcp_inc_pcb_refcount+0x88>)
 8018ece:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8018ed0:	2300      	movs	r3, #0
}
 8018ed2:	4618      	mov	r0, r3
 8018ed4:	bd80      	pop	{r7, pc}
 8018ed6:	bf00      	nop
 8018ed8:	2001b0ac 	.word	0x2001b0ac
 8018edc:	2001b0a8 	.word	0x2001b0a8
 8018ee0:	08024510 	.word	0x08024510
 8018ee4:	08024548 	.word	0x08024548
 8018ee8:	08024570 	.word	0x08024570
 8018eec:	080252e8 	.word	0x080252e8
 8018ef0:	0801a819 	.word	0x0801a819

08018ef4 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8018ef4:	b580      	push	{r7, lr}
 8018ef6:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8018ef8:	4b0e      	ldr	r3, [pc, #56]	@ (8018f34 <dhcp_dec_pcb_refcount+0x40>)
 8018efa:	781b      	ldrb	r3, [r3, #0]
 8018efc:	2b00      	cmp	r3, #0
 8018efe:	d105      	bne.n	8018f0c <dhcp_dec_pcb_refcount+0x18>
 8018f00:	4b0d      	ldr	r3, [pc, #52]	@ (8018f38 <dhcp_dec_pcb_refcount+0x44>)
 8018f02:	22ff      	movs	r2, #255	@ 0xff
 8018f04:	490d      	ldr	r1, [pc, #52]	@ (8018f3c <dhcp_dec_pcb_refcount+0x48>)
 8018f06:	480e      	ldr	r0, [pc, #56]	@ (8018f40 <dhcp_dec_pcb_refcount+0x4c>)
 8018f08:	f005 fbfa 	bl	801e700 <iprintf>
  dhcp_pcb_refcount--;
 8018f0c:	4b09      	ldr	r3, [pc, #36]	@ (8018f34 <dhcp_dec_pcb_refcount+0x40>)
 8018f0e:	781b      	ldrb	r3, [r3, #0]
 8018f10:	3b01      	subs	r3, #1
 8018f12:	b2da      	uxtb	r2, r3
 8018f14:	4b07      	ldr	r3, [pc, #28]	@ (8018f34 <dhcp_dec_pcb_refcount+0x40>)
 8018f16:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8018f18:	4b06      	ldr	r3, [pc, #24]	@ (8018f34 <dhcp_dec_pcb_refcount+0x40>)
 8018f1a:	781b      	ldrb	r3, [r3, #0]
 8018f1c:	2b00      	cmp	r3, #0
 8018f1e:	d107      	bne.n	8018f30 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8018f20:	4b08      	ldr	r3, [pc, #32]	@ (8018f44 <dhcp_dec_pcb_refcount+0x50>)
 8018f22:	681b      	ldr	r3, [r3, #0]
 8018f24:	4618      	mov	r0, r3
 8018f26:	f7ff ff09 	bl	8018d3c <udp_remove>
    dhcp_pcb = NULL;
 8018f2a:	4b06      	ldr	r3, [pc, #24]	@ (8018f44 <dhcp_dec_pcb_refcount+0x50>)
 8018f2c:	2200      	movs	r2, #0
 8018f2e:	601a      	str	r2, [r3, #0]
  }
}
 8018f30:	bf00      	nop
 8018f32:	bd80      	pop	{r7, pc}
 8018f34:	2001b0ac 	.word	0x2001b0ac
 8018f38:	08024510 	.word	0x08024510
 8018f3c:	08024598 	.word	0x08024598
 8018f40:	08024570 	.word	0x08024570
 8018f44:	2001b0a8 	.word	0x2001b0a8

08018f48 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	b084      	sub	sp, #16
 8018f4c:	af00      	add	r7, sp, #0
 8018f4e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018f54:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8018f56:	210c      	movs	r1, #12
 8018f58:	68f8      	ldr	r0, [r7, #12]
 8018f5a:	f001 f86f 	bl	801a03c <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8018f5e:	4b06      	ldr	r3, [pc, #24]	@ (8018f78 <dhcp_handle_nak+0x30>)
 8018f60:	4a05      	ldr	r2, [pc, #20]	@ (8018f78 <dhcp_handle_nak+0x30>)
 8018f62:	4905      	ldr	r1, [pc, #20]	@ (8018f78 <dhcp_handle_nak+0x30>)
 8018f64:	6878      	ldr	r0, [r7, #4]
 8018f66:	f7f8 fe77 	bl	8011c58 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8018f6a:	6878      	ldr	r0, [r7, #4]
 8018f6c:	f000 fc68 	bl	8019840 <dhcp_discover>
}
 8018f70:	bf00      	nop
 8018f72:	3710      	adds	r7, #16
 8018f74:	46bd      	mov	sp, r7
 8018f76:	bd80      	pop	{r7, pc}
 8018f78:	080252e8 	.word	0x080252e8

08018f7c <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8018f7c:	b580      	push	{r7, lr}
 8018f7e:	b084      	sub	sp, #16
 8018f80:	af00      	add	r7, sp, #0
 8018f82:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018f88:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8018f8a:	2108      	movs	r1, #8
 8018f8c:	68f8      	ldr	r0, [r7, #12]
 8018f8e:	f001 f855 	bl	801a03c <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	331c      	adds	r3, #28
 8018f96:	2200      	movs	r2, #0
 8018f98:	4619      	mov	r1, r3
 8018f9a:	6878      	ldr	r0, [r7, #4]
 8018f9c:	f002 fb86 	bl	801b6ac <etharp_query>
 8018fa0:	4603      	mov	r3, r0
 8018fa2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8018fa4:	68fb      	ldr	r3, [r7, #12]
 8018fa6:	799b      	ldrb	r3, [r3, #6]
 8018fa8:	2bff      	cmp	r3, #255	@ 0xff
 8018faa:	d005      	beq.n	8018fb8 <dhcp_check+0x3c>
    dhcp->tries++;
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	799b      	ldrb	r3, [r3, #6]
 8018fb0:	3301      	adds	r3, #1
 8018fb2:	b2da      	uxtb	r2, r3
 8018fb4:	68fb      	ldr	r3, [r7, #12]
 8018fb6:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 8018fb8:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8018fbc:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8018fbe:	893b      	ldrh	r3, [r7, #8]
 8018fc0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8018fc4:	4a06      	ldr	r2, [pc, #24]	@ (8018fe0 <dhcp_check+0x64>)
 8018fc6:	fb82 1203 	smull	r1, r2, r2, r3
 8018fca:	1152      	asrs	r2, r2, #5
 8018fcc:	17db      	asrs	r3, r3, #31
 8018fce:	1ad3      	subs	r3, r2, r3
 8018fd0:	b29a      	uxth	r2, r3
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8018fd6:	bf00      	nop
 8018fd8:	3710      	adds	r7, #16
 8018fda:	46bd      	mov	sp, r7
 8018fdc:	bd80      	pop	{r7, pc}
 8018fde:	bf00      	nop
 8018fe0:	10624dd3 	.word	0x10624dd3

08018fe4 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8018fe4:	b580      	push	{r7, lr}
 8018fe6:	b084      	sub	sp, #16
 8018fe8:	af00      	add	r7, sp, #0
 8018fea:	6078      	str	r0, [r7, #4]
 8018fec:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8018fee:	687b      	ldr	r3, [r7, #4]
 8018ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018ff2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8018ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8019028 <dhcp_handle_offer+0x44>)
 8018ff6:	789b      	ldrb	r3, [r3, #2]
 8018ff8:	2b00      	cmp	r3, #0
 8018ffa:	d011      	beq.n	8019020 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8018ffc:	68fb      	ldr	r3, [r7, #12]
 8018ffe:	2200      	movs	r2, #0
 8019000:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8019002:	4b0a      	ldr	r3, [pc, #40]	@ (801902c <dhcp_handle_offer+0x48>)
 8019004:	689b      	ldr	r3, [r3, #8]
 8019006:	4618      	mov	r0, r3
 8019008:	f7f7 fc5d 	bl	80108c6 <lwip_htonl>
 801900c:	4602      	mov	r2, r0
 801900e:	68fb      	ldr	r3, [r7, #12]
 8019010:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8019012:	683b      	ldr	r3, [r7, #0]
 8019014:	691a      	ldr	r2, [r3, #16]
 8019016:	68fb      	ldr	r3, [r7, #12]
 8019018:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801901a:	6878      	ldr	r0, [r7, #4]
 801901c:	f000 f808 	bl	8019030 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8019020:	bf00      	nop
 8019022:	3710      	adds	r7, #16
 8019024:	46bd      	mov	sp, r7
 8019026:	bd80      	pop	{r7, pc}
 8019028:	2001b09c 	.word	0x2001b09c
 801902c:	2001b074 	.word	0x2001b074

08019030 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8019030:	b5b0      	push	{r4, r5, r7, lr}
 8019032:	b08a      	sub	sp, #40	@ 0x28
 8019034:	af02      	add	r7, sp, #8
 8019036:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	2b00      	cmp	r3, #0
 801903c:	d109      	bne.n	8019052 <dhcp_select+0x22>
 801903e:	4b71      	ldr	r3, [pc, #452]	@ (8019204 <dhcp_select+0x1d4>)
 8019040:	f240 1277 	movw	r2, #375	@ 0x177
 8019044:	4970      	ldr	r1, [pc, #448]	@ (8019208 <dhcp_select+0x1d8>)
 8019046:	4871      	ldr	r0, [pc, #452]	@ (801920c <dhcp_select+0x1dc>)
 8019048:	f005 fb5a 	bl	801e700 <iprintf>
 801904c:	f06f 030f 	mvn.w	r3, #15
 8019050:	e0d3      	b.n	80191fa <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019056:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8019058:	69bb      	ldr	r3, [r7, #24]
 801905a:	2b00      	cmp	r3, #0
 801905c:	d109      	bne.n	8019072 <dhcp_select+0x42>
 801905e:	4b69      	ldr	r3, [pc, #420]	@ (8019204 <dhcp_select+0x1d4>)
 8019060:	f240 1279 	movw	r2, #377	@ 0x179
 8019064:	496a      	ldr	r1, [pc, #424]	@ (8019210 <dhcp_select+0x1e0>)
 8019066:	4869      	ldr	r0, [pc, #420]	@ (801920c <dhcp_select+0x1dc>)
 8019068:	f005 fb4a 	bl	801e700 <iprintf>
 801906c:	f06f 0305 	mvn.w	r3, #5
 8019070:	e0c3      	b.n	80191fa <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8019072:	2101      	movs	r1, #1
 8019074:	69b8      	ldr	r0, [r7, #24]
 8019076:	f000 ffe1 	bl	801a03c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801907a:	f107 030c 	add.w	r3, r7, #12
 801907e:	2203      	movs	r2, #3
 8019080:	69b9      	ldr	r1, [r7, #24]
 8019082:	6878      	ldr	r0, [r7, #4]
 8019084:	f001 fc96 	bl	801a9b4 <dhcp_create_msg>
 8019088:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801908a:	697b      	ldr	r3, [r7, #20]
 801908c:	2b00      	cmp	r3, #0
 801908e:	f000 8085 	beq.w	801919c <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019092:	697b      	ldr	r3, [r7, #20]
 8019094:	685b      	ldr	r3, [r3, #4]
 8019096:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019098:	89b8      	ldrh	r0, [r7, #12]
 801909a:	693b      	ldr	r3, [r7, #16]
 801909c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80190a0:	2302      	movs	r3, #2
 80190a2:	2239      	movs	r2, #57	@ 0x39
 80190a4:	f000 ffe4 	bl	801a070 <dhcp_option>
 80190a8:	4603      	mov	r3, r0
 80190aa:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80190ac:	89b8      	ldrh	r0, [r7, #12]
 80190ae:	693b      	ldr	r3, [r7, #16]
 80190b0:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80190b8:	461a      	mov	r2, r3
 80190ba:	f001 f833 	bl	801a124 <dhcp_option_short>
 80190be:	4603      	mov	r3, r0
 80190c0:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80190c2:	89b8      	ldrh	r0, [r7, #12]
 80190c4:	693b      	ldr	r3, [r7, #16]
 80190c6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80190ca:	2304      	movs	r3, #4
 80190cc:	2232      	movs	r2, #50	@ 0x32
 80190ce:	f000 ffcf 	bl	801a070 <dhcp_option>
 80190d2:	4603      	mov	r3, r0
 80190d4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80190d6:	89bc      	ldrh	r4, [r7, #12]
 80190d8:	693b      	ldr	r3, [r7, #16]
 80190da:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80190de:	69bb      	ldr	r3, [r7, #24]
 80190e0:	69db      	ldr	r3, [r3, #28]
 80190e2:	4618      	mov	r0, r3
 80190e4:	f7f7 fbef 	bl	80108c6 <lwip_htonl>
 80190e8:	4603      	mov	r3, r0
 80190ea:	461a      	mov	r2, r3
 80190ec:	4629      	mov	r1, r5
 80190ee:	4620      	mov	r0, r4
 80190f0:	f001 f84a 	bl	801a188 <dhcp_option_long>
 80190f4:	4603      	mov	r3, r0
 80190f6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80190f8:	89b8      	ldrh	r0, [r7, #12]
 80190fa:	693b      	ldr	r3, [r7, #16]
 80190fc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019100:	2304      	movs	r3, #4
 8019102:	2236      	movs	r2, #54	@ 0x36
 8019104:	f000 ffb4 	bl	801a070 <dhcp_option>
 8019108:	4603      	mov	r3, r0
 801910a:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 801910c:	89bc      	ldrh	r4, [r7, #12]
 801910e:	693b      	ldr	r3, [r7, #16]
 8019110:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8019114:	69bb      	ldr	r3, [r7, #24]
 8019116:	699b      	ldr	r3, [r3, #24]
 8019118:	4618      	mov	r0, r3
 801911a:	f7f7 fbd4 	bl	80108c6 <lwip_htonl>
 801911e:	4603      	mov	r3, r0
 8019120:	461a      	mov	r2, r3
 8019122:	4629      	mov	r1, r5
 8019124:	4620      	mov	r0, r4
 8019126:	f001 f82f 	bl	801a188 <dhcp_option_long>
 801912a:	4603      	mov	r3, r0
 801912c:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801912e:	89b8      	ldrh	r0, [r7, #12]
 8019130:	693b      	ldr	r3, [r7, #16]
 8019132:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019136:	2304      	movs	r3, #4
 8019138:	2237      	movs	r2, #55	@ 0x37
 801913a:	f000 ff99 	bl	801a070 <dhcp_option>
 801913e:	4603      	mov	r3, r0
 8019140:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019142:	2300      	movs	r3, #0
 8019144:	77bb      	strb	r3, [r7, #30]
 8019146:	e00e      	b.n	8019166 <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019148:	89b8      	ldrh	r0, [r7, #12]
 801914a:	693b      	ldr	r3, [r7, #16]
 801914c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019150:	7fbb      	ldrb	r3, [r7, #30]
 8019152:	4a30      	ldr	r2, [pc, #192]	@ (8019214 <dhcp_select+0x1e4>)
 8019154:	5cd3      	ldrb	r3, [r2, r3]
 8019156:	461a      	mov	r2, r3
 8019158:	f000 ffbe 	bl	801a0d8 <dhcp_option_byte>
 801915c:	4603      	mov	r3, r0
 801915e:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019160:	7fbb      	ldrb	r3, [r7, #30]
 8019162:	3301      	adds	r3, #1
 8019164:	77bb      	strb	r3, [r7, #30]
 8019166:	7fbb      	ldrb	r3, [r7, #30]
 8019168:	2b03      	cmp	r3, #3
 801916a:	d9ed      	bls.n	8019148 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801916c:	89b8      	ldrh	r0, [r7, #12]
 801916e:	693b      	ldr	r3, [r7, #16]
 8019170:	33f0      	adds	r3, #240	@ 0xf0
 8019172:	697a      	ldr	r2, [r7, #20]
 8019174:	4619      	mov	r1, r3
 8019176:	f001 fcf3 	bl	801ab60 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801917a:	4b27      	ldr	r3, [pc, #156]	@ (8019218 <dhcp_select+0x1e8>)
 801917c:	6818      	ldr	r0, [r3, #0]
 801917e:	4b27      	ldr	r3, [pc, #156]	@ (801921c <dhcp_select+0x1ec>)
 8019180:	9301      	str	r3, [sp, #4]
 8019182:	687b      	ldr	r3, [r7, #4]
 8019184:	9300      	str	r3, [sp, #0]
 8019186:	2343      	movs	r3, #67	@ 0x43
 8019188:	4a25      	ldr	r2, [pc, #148]	@ (8019220 <dhcp_select+0x1f0>)
 801918a:	6979      	ldr	r1, [r7, #20]
 801918c:	f7ff fbda 	bl	8018944 <udp_sendto_if_src>
 8019190:	4603      	mov	r3, r0
 8019192:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019194:	6978      	ldr	r0, [r7, #20]
 8019196:	f7f9 fa6d 	bl	8012674 <pbuf_free>
 801919a:	e001      	b.n	80191a0 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801919c:	23ff      	movs	r3, #255	@ 0xff
 801919e:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80191a0:	69bb      	ldr	r3, [r7, #24]
 80191a2:	799b      	ldrb	r3, [r3, #6]
 80191a4:	2bff      	cmp	r3, #255	@ 0xff
 80191a6:	d005      	beq.n	80191b4 <dhcp_select+0x184>
    dhcp->tries++;
 80191a8:	69bb      	ldr	r3, [r7, #24]
 80191aa:	799b      	ldrb	r3, [r3, #6]
 80191ac:	3301      	adds	r3, #1
 80191ae:	b2da      	uxtb	r2, r3
 80191b0:	69bb      	ldr	r3, [r7, #24]
 80191b2:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80191b4:	69bb      	ldr	r3, [r7, #24]
 80191b6:	799b      	ldrb	r3, [r3, #6]
 80191b8:	2b05      	cmp	r3, #5
 80191ba:	d80d      	bhi.n	80191d8 <dhcp_select+0x1a8>
 80191bc:	69bb      	ldr	r3, [r7, #24]
 80191be:	799b      	ldrb	r3, [r3, #6]
 80191c0:	461a      	mov	r2, r3
 80191c2:	2301      	movs	r3, #1
 80191c4:	4093      	lsls	r3, r2
 80191c6:	b29b      	uxth	r3, r3
 80191c8:	461a      	mov	r2, r3
 80191ca:	0152      	lsls	r2, r2, #5
 80191cc:	1ad2      	subs	r2, r2, r3
 80191ce:	0092      	lsls	r2, r2, #2
 80191d0:	4413      	add	r3, r2
 80191d2:	00db      	lsls	r3, r3, #3
 80191d4:	b29b      	uxth	r3, r3
 80191d6:	e001      	b.n	80191dc <dhcp_select+0x1ac>
 80191d8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80191dc:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80191de:	89fb      	ldrh	r3, [r7, #14]
 80191e0:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 80191e4:	4a0f      	ldr	r2, [pc, #60]	@ (8019224 <dhcp_select+0x1f4>)
 80191e6:	fb82 1203 	smull	r1, r2, r2, r3
 80191ea:	1152      	asrs	r2, r2, #5
 80191ec:	17db      	asrs	r3, r3, #31
 80191ee:	1ad3      	subs	r3, r2, r3
 80191f0:	b29a      	uxth	r2, r3
 80191f2:	69bb      	ldr	r3, [r7, #24]
 80191f4:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80191f6:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80191fa:	4618      	mov	r0, r3
 80191fc:	3720      	adds	r7, #32
 80191fe:	46bd      	mov	sp, r7
 8019200:	bdb0      	pop	{r4, r5, r7, pc}
 8019202:	bf00      	nop
 8019204:	08024510 	.word	0x08024510
 8019208:	080245bc 	.word	0x080245bc
 801920c:	08024570 	.word	0x08024570
 8019210:	080245d8 	.word	0x080245d8
 8019214:	2000004c 	.word	0x2000004c
 8019218:	2001b0a8 	.word	0x2001b0a8
 801921c:	080252e8 	.word	0x080252e8
 8019220:	080252ec 	.word	0x080252ec
 8019224:	10624dd3 	.word	0x10624dd3

08019228 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8019228:	b580      	push	{r7, lr}
 801922a:	b082      	sub	sp, #8
 801922c:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 801922e:	4b27      	ldr	r3, [pc, #156]	@ (80192cc <dhcp_coarse_tmr+0xa4>)
 8019230:	681b      	ldr	r3, [r3, #0]
 8019232:	607b      	str	r3, [r7, #4]
 8019234:	e042      	b.n	80192bc <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8019236:	687b      	ldr	r3, [r7, #4]
 8019238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801923a:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 801923c:	683b      	ldr	r3, [r7, #0]
 801923e:	2b00      	cmp	r3, #0
 8019240:	d039      	beq.n	80192b6 <dhcp_coarse_tmr+0x8e>
 8019242:	683b      	ldr	r3, [r7, #0]
 8019244:	795b      	ldrb	r3, [r3, #5]
 8019246:	2b00      	cmp	r3, #0
 8019248:	d035      	beq.n	80192b6 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 801924a:	683b      	ldr	r3, [r7, #0]
 801924c:	8a9b      	ldrh	r3, [r3, #20]
 801924e:	2b00      	cmp	r3, #0
 8019250:	d012      	beq.n	8019278 <dhcp_coarse_tmr+0x50>
 8019252:	683b      	ldr	r3, [r7, #0]
 8019254:	8a5b      	ldrh	r3, [r3, #18]
 8019256:	3301      	adds	r3, #1
 8019258:	b29a      	uxth	r2, r3
 801925a:	683b      	ldr	r3, [r7, #0]
 801925c:	825a      	strh	r2, [r3, #18]
 801925e:	683b      	ldr	r3, [r7, #0]
 8019260:	8a5a      	ldrh	r2, [r3, #18]
 8019262:	683b      	ldr	r3, [r7, #0]
 8019264:	8a9b      	ldrh	r3, [r3, #20]
 8019266:	429a      	cmp	r2, r3
 8019268:	d106      	bne.n	8019278 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 801926a:	6878      	ldr	r0, [r7, #4]
 801926c:	f000 fe4c 	bl	8019f08 <dhcp_release_and_stop>
        dhcp_start(netif);
 8019270:	6878      	ldr	r0, [r7, #4]
 8019272:	f000 f989 	bl	8019588 <dhcp_start>
 8019276:	e01e      	b.n	80192b6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8019278:	683b      	ldr	r3, [r7, #0]
 801927a:	8a1b      	ldrh	r3, [r3, #16]
 801927c:	2b00      	cmp	r3, #0
 801927e:	d00b      	beq.n	8019298 <dhcp_coarse_tmr+0x70>
 8019280:	683b      	ldr	r3, [r7, #0]
 8019282:	8a1b      	ldrh	r3, [r3, #16]
 8019284:	1e5a      	subs	r2, r3, #1
 8019286:	b291      	uxth	r1, r2
 8019288:	683a      	ldr	r2, [r7, #0]
 801928a:	8211      	strh	r1, [r2, #16]
 801928c:	2b01      	cmp	r3, #1
 801928e:	d103      	bne.n	8019298 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8019290:	6878      	ldr	r0, [r7, #4]
 8019292:	f000 f8c6 	bl	8019422 <dhcp_t2_timeout>
 8019296:	e00e      	b.n	80192b6 <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8019298:	683b      	ldr	r3, [r7, #0]
 801929a:	89db      	ldrh	r3, [r3, #14]
 801929c:	2b00      	cmp	r3, #0
 801929e:	d00a      	beq.n	80192b6 <dhcp_coarse_tmr+0x8e>
 80192a0:	683b      	ldr	r3, [r7, #0]
 80192a2:	89db      	ldrh	r3, [r3, #14]
 80192a4:	1e5a      	subs	r2, r3, #1
 80192a6:	b291      	uxth	r1, r2
 80192a8:	683a      	ldr	r2, [r7, #0]
 80192aa:	81d1      	strh	r1, [r2, #14]
 80192ac:	2b01      	cmp	r3, #1
 80192ae:	d102      	bne.n	80192b6 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 80192b0:	6878      	ldr	r0, [r7, #4]
 80192b2:	f000 f888 	bl	80193c6 <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	607b      	str	r3, [r7, #4]
 80192bc:	687b      	ldr	r3, [r7, #4]
 80192be:	2b00      	cmp	r3, #0
 80192c0:	d1b9      	bne.n	8019236 <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 80192c2:	bf00      	nop
 80192c4:	bf00      	nop
 80192c6:	3708      	adds	r7, #8
 80192c8:	46bd      	mov	sp, r7
 80192ca:	bd80      	pop	{r7, pc}
 80192cc:	2001b008 	.word	0x2001b008

080192d0 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 80192d0:	b580      	push	{r7, lr}
 80192d2:	b082      	sub	sp, #8
 80192d4:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 80192d6:	4b16      	ldr	r3, [pc, #88]	@ (8019330 <dhcp_fine_tmr+0x60>)
 80192d8:	681b      	ldr	r3, [r3, #0]
 80192da:	607b      	str	r3, [r7, #4]
 80192dc:	e020      	b.n	8019320 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80192e2:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 80192e4:	683b      	ldr	r3, [r7, #0]
 80192e6:	2b00      	cmp	r3, #0
 80192e8:	d017      	beq.n	801931a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 80192ea:	683b      	ldr	r3, [r7, #0]
 80192ec:	891b      	ldrh	r3, [r3, #8]
 80192ee:	2b01      	cmp	r3, #1
 80192f0:	d906      	bls.n	8019300 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 80192f2:	683b      	ldr	r3, [r7, #0]
 80192f4:	891b      	ldrh	r3, [r3, #8]
 80192f6:	3b01      	subs	r3, #1
 80192f8:	b29a      	uxth	r2, r3
 80192fa:	683b      	ldr	r3, [r7, #0]
 80192fc:	811a      	strh	r2, [r3, #8]
 80192fe:	e00c      	b.n	801931a <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8019300:	683b      	ldr	r3, [r7, #0]
 8019302:	891b      	ldrh	r3, [r3, #8]
 8019304:	2b01      	cmp	r3, #1
 8019306:	d108      	bne.n	801931a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8019308:	683b      	ldr	r3, [r7, #0]
 801930a:	891b      	ldrh	r3, [r3, #8]
 801930c:	3b01      	subs	r3, #1
 801930e:	b29a      	uxth	r2, r3
 8019310:	683b      	ldr	r3, [r7, #0]
 8019312:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8019314:	6878      	ldr	r0, [r7, #4]
 8019316:	f000 f80d 	bl	8019334 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801931a:	687b      	ldr	r3, [r7, #4]
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	607b      	str	r3, [r7, #4]
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	2b00      	cmp	r3, #0
 8019324:	d1db      	bne.n	80192de <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8019326:	bf00      	nop
 8019328:	bf00      	nop
 801932a:	3708      	adds	r7, #8
 801932c:	46bd      	mov	sp, r7
 801932e:	bd80      	pop	{r7, pc}
 8019330:	2001b008 	.word	0x2001b008

08019334 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8019334:	b580      	push	{r7, lr}
 8019336:	b084      	sub	sp, #16
 8019338:	af00      	add	r7, sp, #0
 801933a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801933c:	687b      	ldr	r3, [r7, #4]
 801933e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019340:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8019342:	68fb      	ldr	r3, [r7, #12]
 8019344:	795b      	ldrb	r3, [r3, #5]
 8019346:	2b0c      	cmp	r3, #12
 8019348:	d003      	beq.n	8019352 <dhcp_timeout+0x1e>
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	795b      	ldrb	r3, [r3, #5]
 801934e:	2b06      	cmp	r3, #6
 8019350:	d103      	bne.n	801935a <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8019352:	6878      	ldr	r0, [r7, #4]
 8019354:	f000 fa74 	bl	8019840 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8019358:	e031      	b.n	80193be <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	795b      	ldrb	r3, [r3, #5]
 801935e:	2b01      	cmp	r3, #1
 8019360:	d10e      	bne.n	8019380 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8019362:	68fb      	ldr	r3, [r7, #12]
 8019364:	799b      	ldrb	r3, [r3, #6]
 8019366:	2b05      	cmp	r3, #5
 8019368:	d803      	bhi.n	8019372 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 801936a:	6878      	ldr	r0, [r7, #4]
 801936c:	f7ff fe60 	bl	8019030 <dhcp_select>
}
 8019370:	e025      	b.n	80193be <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8019372:	6878      	ldr	r0, [r7, #4]
 8019374:	f000 fdc8 	bl	8019f08 <dhcp_release_and_stop>
      dhcp_start(netif);
 8019378:	6878      	ldr	r0, [r7, #4]
 801937a:	f000 f905 	bl	8019588 <dhcp_start>
}
 801937e:	e01e      	b.n	80193be <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8019380:	68fb      	ldr	r3, [r7, #12]
 8019382:	795b      	ldrb	r3, [r3, #5]
 8019384:	2b08      	cmp	r3, #8
 8019386:	d10b      	bne.n	80193a0 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	799b      	ldrb	r3, [r3, #6]
 801938c:	2b01      	cmp	r3, #1
 801938e:	d803      	bhi.n	8019398 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8019390:	6878      	ldr	r0, [r7, #4]
 8019392:	f7ff fdf3 	bl	8018f7c <dhcp_check>
}
 8019396:	e012      	b.n	80193be <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8019398:	6878      	ldr	r0, [r7, #4]
 801939a:	f000 faf3 	bl	8019984 <dhcp_bind>
}
 801939e:	e00e      	b.n	80193be <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	795b      	ldrb	r3, [r3, #5]
 80193a4:	2b03      	cmp	r3, #3
 80193a6:	d10a      	bne.n	80193be <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	799b      	ldrb	r3, [r3, #6]
 80193ac:	2b01      	cmp	r3, #1
 80193ae:	d803      	bhi.n	80193b8 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 80193b0:	6878      	ldr	r0, [r7, #4]
 80193b2:	f000 fcf5 	bl	8019da0 <dhcp_reboot>
}
 80193b6:	e002      	b.n	80193be <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 80193b8:	6878      	ldr	r0, [r7, #4]
 80193ba:	f000 fa41 	bl	8019840 <dhcp_discover>
}
 80193be:	bf00      	nop
 80193c0:	3710      	adds	r7, #16
 80193c2:	46bd      	mov	sp, r7
 80193c4:	bd80      	pop	{r7, pc}

080193c6 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 80193c6:	b580      	push	{r7, lr}
 80193c8:	b084      	sub	sp, #16
 80193ca:	af00      	add	r7, sp, #0
 80193cc:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80193d2:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80193d4:	68fb      	ldr	r3, [r7, #12]
 80193d6:	795b      	ldrb	r3, [r3, #5]
 80193d8:	2b01      	cmp	r3, #1
 80193da:	d007      	beq.n	80193ec <dhcp_t1_timeout+0x26>
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	795b      	ldrb	r3, [r3, #5]
 80193e0:	2b0a      	cmp	r3, #10
 80193e2:	d003      	beq.n	80193ec <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 80193e4:	68fb      	ldr	r3, [r7, #12]
 80193e6:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80193e8:	2b05      	cmp	r3, #5
 80193ea:	d116      	bne.n	801941a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 80193ec:	6878      	ldr	r0, [r7, #4]
 80193ee:	f000 fba3 	bl	8019b38 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80193f2:	68fb      	ldr	r3, [r7, #12]
 80193f4:	899b      	ldrh	r3, [r3, #12]
 80193f6:	461a      	mov	r2, r3
 80193f8:	68fb      	ldr	r3, [r7, #12]
 80193fa:	8a5b      	ldrh	r3, [r3, #18]
 80193fc:	1ad3      	subs	r3, r2, r3
 80193fe:	2b01      	cmp	r3, #1
 8019400:	dd0b      	ble.n	801941a <dhcp_t1_timeout+0x54>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8019402:	68fb      	ldr	r3, [r7, #12]
 8019404:	899b      	ldrh	r3, [r3, #12]
 8019406:	461a      	mov	r2, r3
 8019408:	68fb      	ldr	r3, [r7, #12]
 801940a:	8a5b      	ldrh	r3, [r3, #18]
 801940c:	1ad3      	subs	r3, r2, r3
 801940e:	0fda      	lsrs	r2, r3, #31
 8019410:	4413      	add	r3, r2
 8019412:	105b      	asrs	r3, r3, #1
 8019414:	b29a      	uxth	r2, r3
 8019416:	68fb      	ldr	r3, [r7, #12]
 8019418:	81da      	strh	r2, [r3, #14]
    }
  }
}
 801941a:	bf00      	nop
 801941c:	3710      	adds	r7, #16
 801941e:	46bd      	mov	sp, r7
 8019420:	bd80      	pop	{r7, pc}

08019422 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8019422:	b580      	push	{r7, lr}
 8019424:	b084      	sub	sp, #16
 8019426:	af00      	add	r7, sp, #0
 8019428:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801942e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019430:	68fb      	ldr	r3, [r7, #12]
 8019432:	795b      	ldrb	r3, [r3, #5]
 8019434:	2b01      	cmp	r3, #1
 8019436:	d00b      	beq.n	8019450 <dhcp_t2_timeout+0x2e>
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	795b      	ldrb	r3, [r3, #5]
 801943c:	2b0a      	cmp	r3, #10
 801943e:	d007      	beq.n	8019450 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8019440:	68fb      	ldr	r3, [r7, #12]
 8019442:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8019444:	2b05      	cmp	r3, #5
 8019446:	d003      	beq.n	8019450 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8019448:	68fb      	ldr	r3, [r7, #12]
 801944a:	795b      	ldrb	r3, [r3, #5]
 801944c:	2b04      	cmp	r3, #4
 801944e:	d116      	bne.n	801947e <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8019450:	6878      	ldr	r0, [r7, #4]
 8019452:	f000 fc0b 	bl	8019c6c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8019456:	68fb      	ldr	r3, [r7, #12]
 8019458:	8a9b      	ldrh	r3, [r3, #20]
 801945a:	461a      	mov	r2, r3
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	8a5b      	ldrh	r3, [r3, #18]
 8019460:	1ad3      	subs	r3, r2, r3
 8019462:	2b01      	cmp	r3, #1
 8019464:	dd0b      	ble.n	801947e <dhcp_t2_timeout+0x5c>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	8a9b      	ldrh	r3, [r3, #20]
 801946a:	461a      	mov	r2, r3
 801946c:	68fb      	ldr	r3, [r7, #12]
 801946e:	8a5b      	ldrh	r3, [r3, #18]
 8019470:	1ad3      	subs	r3, r2, r3
 8019472:	0fda      	lsrs	r2, r3, #31
 8019474:	4413      	add	r3, r2
 8019476:	105b      	asrs	r3, r3, #1
 8019478:	b29a      	uxth	r2, r3
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	821a      	strh	r2, [r3, #16]
    }
  }
}
 801947e:	bf00      	nop
 8019480:	3710      	adds	r7, #16
 8019482:	46bd      	mov	sp, r7
 8019484:	bd80      	pop	{r7, pc}
	...

08019488 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8019488:	b580      	push	{r7, lr}
 801948a:	b086      	sub	sp, #24
 801948c:	af00      	add	r7, sp, #0
 801948e:	6078      	str	r0, [r7, #4]
 8019490:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019492:	687b      	ldr	r3, [r7, #4]
 8019494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019496:	613b      	str	r3, [r7, #16]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8019498:	693b      	ldr	r3, [r7, #16]
 801949a:	2200      	movs	r2, #0
 801949c:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801949e:	693b      	ldr	r3, [r7, #16]
 80194a0:	2200      	movs	r2, #0
 80194a2:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 80194a4:	4b36      	ldr	r3, [pc, #216]	@ (8019580 <dhcp_handle_ack+0xf8>)
 80194a6:	78db      	ldrb	r3, [r3, #3]
 80194a8:	2b00      	cmp	r3, #0
 80194aa:	d003      	beq.n	80194b4 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 80194ac:	4b35      	ldr	r3, [pc, #212]	@ (8019584 <dhcp_handle_ack+0xfc>)
 80194ae:	68da      	ldr	r2, [r3, #12]
 80194b0:	693b      	ldr	r3, [r7, #16]
 80194b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 80194b4:	4b32      	ldr	r3, [pc, #200]	@ (8019580 <dhcp_handle_ack+0xf8>)
 80194b6:	791b      	ldrb	r3, [r3, #4]
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d004      	beq.n	80194c6 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 80194bc:	4b31      	ldr	r3, [pc, #196]	@ (8019584 <dhcp_handle_ack+0xfc>)
 80194be:	691a      	ldr	r2, [r3, #16]
 80194c0:	693b      	ldr	r3, [r7, #16]
 80194c2:	62da      	str	r2, [r3, #44]	@ 0x2c
 80194c4:	e004      	b.n	80194d0 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 80194c6:	693b      	ldr	r3, [r7, #16]
 80194c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80194ca:	085a      	lsrs	r2, r3, #1
 80194cc:	693b      	ldr	r3, [r7, #16]
 80194ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 80194d0:	4b2b      	ldr	r3, [pc, #172]	@ (8019580 <dhcp_handle_ack+0xf8>)
 80194d2:	795b      	ldrb	r3, [r3, #5]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d004      	beq.n	80194e2 <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 80194d8:	4b2a      	ldr	r3, [pc, #168]	@ (8019584 <dhcp_handle_ack+0xfc>)
 80194da:	695a      	ldr	r2, [r3, #20]
 80194dc:	693b      	ldr	r3, [r7, #16]
 80194de:	631a      	str	r2, [r3, #48]	@ 0x30
 80194e0:	e007      	b.n	80194f2 <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 80194e2:	693b      	ldr	r3, [r7, #16]
 80194e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80194e6:	4613      	mov	r3, r2
 80194e8:	00db      	lsls	r3, r3, #3
 80194ea:	1a9b      	subs	r3, r3, r2
 80194ec:	08da      	lsrs	r2, r3, #3
 80194ee:	693b      	ldr	r3, [r7, #16]
 80194f0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80194f2:	683b      	ldr	r3, [r7, #0]
 80194f4:	691a      	ldr	r2, [r3, #16]
 80194f6:	693b      	ldr	r3, [r7, #16]
 80194f8:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 80194fa:	4b21      	ldr	r3, [pc, #132]	@ (8019580 <dhcp_handle_ack+0xf8>)
 80194fc:	799b      	ldrb	r3, [r3, #6]
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d00b      	beq.n	801951a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8019502:	4b20      	ldr	r3, [pc, #128]	@ (8019584 <dhcp_handle_ack+0xfc>)
 8019504:	699b      	ldr	r3, [r3, #24]
 8019506:	4618      	mov	r0, r3
 8019508:	f7f7 f9dd 	bl	80108c6 <lwip_htonl>
 801950c:	4602      	mov	r2, r0
 801950e:	693b      	ldr	r3, [r7, #16]
 8019510:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8019512:	693b      	ldr	r3, [r7, #16]
 8019514:	2201      	movs	r2, #1
 8019516:	71da      	strb	r2, [r3, #7]
 8019518:	e002      	b.n	8019520 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 801951a:	693b      	ldr	r3, [r7, #16]
 801951c:	2200      	movs	r2, #0
 801951e:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8019520:	4b17      	ldr	r3, [pc, #92]	@ (8019580 <dhcp_handle_ack+0xf8>)
 8019522:	79db      	ldrb	r3, [r3, #7]
 8019524:	2b00      	cmp	r3, #0
 8019526:	d007      	beq.n	8019538 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8019528:	4b16      	ldr	r3, [pc, #88]	@ (8019584 <dhcp_handle_ack+0xfc>)
 801952a:	69db      	ldr	r3, [r3, #28]
 801952c:	4618      	mov	r0, r3
 801952e:	f7f7 f9ca 	bl	80108c6 <lwip_htonl>
 8019532:	4602      	mov	r2, r0
 8019534:	693b      	ldr	r3, [r7, #16]
 8019536:	625a      	str	r2, [r3, #36]	@ 0x24
  dhcp_set_ntp_servers(n, ntp_server_addrs);
#endif /* LWIP_DHCP_GET_NTP_SRV */

#if LWIP_DHCP_PROVIDE_DNS_SERVERS
  /* DNS servers */
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8019538:	2300      	movs	r3, #0
 801953a:	75fb      	strb	r3, [r7, #23]
 801953c:	e013      	b.n	8019566 <dhcp_handle_ack+0xde>
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
 801953e:	7dfb      	ldrb	r3, [r7, #23]
 8019540:	3308      	adds	r3, #8
 8019542:	4a10      	ldr	r2, [pc, #64]	@ (8019584 <dhcp_handle_ack+0xfc>)
 8019544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019548:	4618      	mov	r0, r3
 801954a:	f7f7 f9bc 	bl	80108c6 <lwip_htonl>
 801954e:	4603      	mov	r3, r0
 8019550:	60fb      	str	r3, [r7, #12]
    dns_setserver(n, &dns_addr);
 8019552:	f107 020c 	add.w	r2, r7, #12
 8019556:	7dfb      	ldrb	r3, [r7, #23]
 8019558:	4611      	mov	r1, r2
 801955a:	4618      	mov	r0, r3
 801955c:	f7f7 f9d4 	bl	8010908 <dns_setserver>
  for (n = 0; (n < LWIP_DHCP_PROVIDE_DNS_SERVERS) && dhcp_option_given(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n); n++) {
 8019560:	7dfb      	ldrb	r3, [r7, #23]
 8019562:	3301      	adds	r3, #1
 8019564:	75fb      	strb	r3, [r7, #23]
 8019566:	7dfb      	ldrb	r3, [r7, #23]
 8019568:	2b01      	cmp	r3, #1
 801956a:	d805      	bhi.n	8019578 <dhcp_handle_ack+0xf0>
 801956c:	7dfb      	ldrb	r3, [r7, #23]
 801956e:	3308      	adds	r3, #8
 8019570:	4a03      	ldr	r2, [pc, #12]	@ (8019580 <dhcp_handle_ack+0xf8>)
 8019572:	5cd3      	ldrb	r3, [r2, r3]
 8019574:	2b00      	cmp	r3, #0
 8019576:	d1e2      	bne.n	801953e <dhcp_handle_ack+0xb6>
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8019578:	bf00      	nop
 801957a:	3718      	adds	r7, #24
 801957c:	46bd      	mov	sp, r7
 801957e:	bd80      	pop	{r7, pc}
 8019580:	2001b09c 	.word	0x2001b09c
 8019584:	2001b074 	.word	0x2001b074

08019588 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8019588:	b580      	push	{r7, lr}
 801958a:	b084      	sub	sp, #16
 801958c:	af00      	add	r7, sp, #0
 801958e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	2b00      	cmp	r3, #0
 8019594:	d109      	bne.n	80195aa <dhcp_start+0x22>
 8019596:	4b37      	ldr	r3, [pc, #220]	@ (8019674 <dhcp_start+0xec>)
 8019598:	f240 22e7 	movw	r2, #743	@ 0x2e7
 801959c:	4936      	ldr	r1, [pc, #216]	@ (8019678 <dhcp_start+0xf0>)
 801959e:	4837      	ldr	r0, [pc, #220]	@ (801967c <dhcp_start+0xf4>)
 80195a0:	f005 f8ae 	bl	801e700 <iprintf>
 80195a4:	f06f 030f 	mvn.w	r3, #15
 80195a8:	e060      	b.n	801966c <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80195b0:	f003 0301 	and.w	r3, r3, #1
 80195b4:	2b00      	cmp	r3, #0
 80195b6:	d109      	bne.n	80195cc <dhcp_start+0x44>
 80195b8:	4b2e      	ldr	r3, [pc, #184]	@ (8019674 <dhcp_start+0xec>)
 80195ba:	f44f 723a 	mov.w	r2, #744	@ 0x2e8
 80195be:	4930      	ldr	r1, [pc, #192]	@ (8019680 <dhcp_start+0xf8>)
 80195c0:	482e      	ldr	r0, [pc, #184]	@ (801967c <dhcp_start+0xf4>)
 80195c2:	f005 f89d 	bl	801e700 <iprintf>
 80195c6:	f06f 030f 	mvn.w	r3, #15
 80195ca:	e04f      	b.n	801966c <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80195d0:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80195d2:	687b      	ldr	r3, [r7, #4]
 80195d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80195d6:	f5b3 7f10 	cmp.w	r3, #576	@ 0x240
 80195da:	d202      	bcs.n	80195e2 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 80195dc:	f04f 33ff 	mov.w	r3, #4294967295
 80195e0:	e044      	b.n	801966c <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 80195e2:	68fb      	ldr	r3, [r7, #12]
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	d10d      	bne.n	8019604 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 80195e8:	2034      	movs	r0, #52	@ 0x34
 80195ea:	f7f7 ff79 	bl	80114e0 <mem_malloc>
 80195ee:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 80195f0:	68fb      	ldr	r3, [r7, #12]
 80195f2:	2b00      	cmp	r3, #0
 80195f4:	d102      	bne.n	80195fc <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 80195f6:	f04f 33ff 	mov.w	r3, #4294967295
 80195fa:	e037      	b.n	801966c <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	68fa      	ldr	r2, [r7, #12]
 8019600:	625a      	str	r2, [r3, #36]	@ 0x24
 8019602:	e005      	b.n	8019610 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	791b      	ldrb	r3, [r3, #4]
 8019608:	2b00      	cmp	r3, #0
 801960a:	d001      	beq.n	8019610 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801960c:	f7ff fc72 	bl	8018ef4 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8019610:	2234      	movs	r2, #52	@ 0x34
 8019612:	2100      	movs	r1, #0
 8019614:	68f8      	ldr	r0, [r7, #12]
 8019616:	f005 f9a7 	bl	801e968 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 801961a:	f7ff fc19 	bl	8018e50 <dhcp_inc_pcb_refcount>
 801961e:	4603      	mov	r3, r0
 8019620:	2b00      	cmp	r3, #0
 8019622:	d002      	beq.n	801962a <dhcp_start+0xa2>
    return ERR_MEM;
 8019624:	f04f 33ff 	mov.w	r3, #4294967295
 8019628:	e020      	b.n	801966c <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 801962a:	68fb      	ldr	r3, [r7, #12]
 801962c:	2201      	movs	r2, #1
 801962e:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8019630:	687b      	ldr	r3, [r7, #4]
 8019632:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8019636:	f003 0304 	and.w	r3, r3, #4
 801963a:	2b00      	cmp	r3, #0
 801963c:	d105      	bne.n	801964a <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 801963e:	2102      	movs	r1, #2
 8019640:	68f8      	ldr	r0, [r7, #12]
 8019642:	f000 fcfb 	bl	801a03c <dhcp_set_state>
    return ERR_OK;
 8019646:	2300      	movs	r3, #0
 8019648:	e010      	b.n	801966c <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 801964a:	6878      	ldr	r0, [r7, #4]
 801964c:	f000 f8f8 	bl	8019840 <dhcp_discover>
 8019650:	4603      	mov	r3, r0
 8019652:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8019654:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8019658:	2b00      	cmp	r3, #0
 801965a:	d005      	beq.n	8019668 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 801965c:	6878      	ldr	r0, [r7, #4]
 801965e:	f000 fc53 	bl	8019f08 <dhcp_release_and_stop>
    return ERR_MEM;
 8019662:	f04f 33ff 	mov.w	r3, #4294967295
 8019666:	e001      	b.n	801966c <dhcp_start+0xe4>
  }
  return result;
 8019668:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801966c:	4618      	mov	r0, r3
 801966e:	3710      	adds	r7, #16
 8019670:	46bd      	mov	sp, r7
 8019672:	bd80      	pop	{r7, pc}
 8019674:	08024510 	.word	0x08024510
 8019678:	080245f4 	.word	0x080245f4
 801967c:	08024570 	.word	0x08024570
 8019680:	08024638 	.word	0x08024638

08019684 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8019684:	b580      	push	{r7, lr}
 8019686:	b084      	sub	sp, #16
 8019688:	af00      	add	r7, sp, #0
 801968a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019690:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 8019692:	68fb      	ldr	r3, [r7, #12]
 8019694:	2b00      	cmp	r3, #0
 8019696:	d025      	beq.n	80196e4 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8019698:	68fb      	ldr	r3, [r7, #12]
 801969a:	795b      	ldrb	r3, [r3, #5]
 801969c:	2b0a      	cmp	r3, #10
 801969e:	d008      	beq.n	80196b2 <dhcp_network_changed+0x2e>
 80196a0:	2b0a      	cmp	r3, #10
 80196a2:	dc0d      	bgt.n	80196c0 <dhcp_network_changed+0x3c>
 80196a4:	2b00      	cmp	r3, #0
 80196a6:	d01f      	beq.n	80196e8 <dhcp_network_changed+0x64>
 80196a8:	2b00      	cmp	r3, #0
 80196aa:	db09      	blt.n	80196c0 <dhcp_network_changed+0x3c>
 80196ac:	3b03      	subs	r3, #3
 80196ae:	2b02      	cmp	r3, #2
 80196b0:	d806      	bhi.n	80196c0 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80196b2:	68fb      	ldr	r3, [r7, #12]
 80196b4:	2200      	movs	r2, #0
 80196b6:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80196b8:	6878      	ldr	r0, [r7, #4]
 80196ba:	f000 fb71 	bl	8019da0 <dhcp_reboot>
      break;
 80196be:	e014      	b.n	80196ea <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80196c0:	68fb      	ldr	r3, [r7, #12]
 80196c2:	795b      	ldrb	r3, [r3, #5]
 80196c4:	2b0c      	cmp	r3, #12
 80196c6:	d906      	bls.n	80196d6 <dhcp_network_changed+0x52>
 80196c8:	4b09      	ldr	r3, [pc, #36]	@ (80196f0 <dhcp_network_changed+0x6c>)
 80196ca:	f240 326d 	movw	r2, #877	@ 0x36d
 80196ce:	4909      	ldr	r1, [pc, #36]	@ (80196f4 <dhcp_network_changed+0x70>)
 80196d0:	4809      	ldr	r0, [pc, #36]	@ (80196f8 <dhcp_network_changed+0x74>)
 80196d2:	f005 f815 	bl	801e700 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80196d6:	68fb      	ldr	r3, [r7, #12]
 80196d8:	2200      	movs	r2, #0
 80196da:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 80196dc:	6878      	ldr	r0, [r7, #4]
 80196de:	f000 f8af 	bl	8019840 <dhcp_discover>
      break;
 80196e2:	e002      	b.n	80196ea <dhcp_network_changed+0x66>
    return;
 80196e4:	bf00      	nop
 80196e6:	e000      	b.n	80196ea <dhcp_network_changed+0x66>
      break;
 80196e8:	bf00      	nop
  }
}
 80196ea:	3710      	adds	r7, #16
 80196ec:	46bd      	mov	sp, r7
 80196ee:	bd80      	pop	{r7, pc}
 80196f0:	08024510 	.word	0x08024510
 80196f4:	0802465c 	.word	0x0802465c
 80196f8:	08024570 	.word	0x08024570

080196fc <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80196fc:	b580      	push	{r7, lr}
 80196fe:	b084      	sub	sp, #16
 8019700:	af00      	add	r7, sp, #0
 8019702:	6078      	str	r0, [r7, #4]
 8019704:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	2b00      	cmp	r3, #0
 801970a:	d107      	bne.n	801971c <dhcp_arp_reply+0x20>
 801970c:	4b0e      	ldr	r3, [pc, #56]	@ (8019748 <dhcp_arp_reply+0x4c>)
 801970e:	f240 328b 	movw	r2, #907	@ 0x38b
 8019712:	490e      	ldr	r1, [pc, #56]	@ (801974c <dhcp_arp_reply+0x50>)
 8019714:	480e      	ldr	r0, [pc, #56]	@ (8019750 <dhcp_arp_reply+0x54>)
 8019716:	f004 fff3 	bl	801e700 <iprintf>
 801971a:	e012      	b.n	8019742 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801971c:	687b      	ldr	r3, [r7, #4]
 801971e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019720:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8019722:	68fb      	ldr	r3, [r7, #12]
 8019724:	2b00      	cmp	r3, #0
 8019726:	d00c      	beq.n	8019742 <dhcp_arp_reply+0x46>
 8019728:	68fb      	ldr	r3, [r7, #12]
 801972a:	795b      	ldrb	r3, [r3, #5]
 801972c:	2b08      	cmp	r3, #8
 801972e:	d108      	bne.n	8019742 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8019730:	683b      	ldr	r3, [r7, #0]
 8019732:	681a      	ldr	r2, [r3, #0]
 8019734:	68fb      	ldr	r3, [r7, #12]
 8019736:	69db      	ldr	r3, [r3, #28]
 8019738:	429a      	cmp	r2, r3
 801973a:	d102      	bne.n	8019742 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801973c:	6878      	ldr	r0, [r7, #4]
 801973e:	f000 f809 	bl	8019754 <dhcp_decline>
    }
  }
}
 8019742:	3710      	adds	r7, #16
 8019744:	46bd      	mov	sp, r7
 8019746:	bd80      	pop	{r7, pc}
 8019748:	08024510 	.word	0x08024510
 801974c:	080245f4 	.word	0x080245f4
 8019750:	08024570 	.word	0x08024570

08019754 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8019754:	b5b0      	push	{r4, r5, r7, lr}
 8019756:	b08a      	sub	sp, #40	@ 0x28
 8019758:	af02      	add	r7, sp, #8
 801975a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019760:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8019762:	210c      	movs	r1, #12
 8019764:	69b8      	ldr	r0, [r7, #24]
 8019766:	f000 fc69 	bl	801a03c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 801976a:	f107 030c 	add.w	r3, r7, #12
 801976e:	2204      	movs	r2, #4
 8019770:	69b9      	ldr	r1, [r7, #24]
 8019772:	6878      	ldr	r0, [r7, #4]
 8019774:	f001 f91e 	bl	801a9b4 <dhcp_create_msg>
 8019778:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801977a:	697b      	ldr	r3, [r7, #20]
 801977c:	2b00      	cmp	r3, #0
 801977e:	d035      	beq.n	80197ec <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019780:	697b      	ldr	r3, [r7, #20]
 8019782:	685b      	ldr	r3, [r3, #4]
 8019784:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8019786:	89b8      	ldrh	r0, [r7, #12]
 8019788:	693b      	ldr	r3, [r7, #16]
 801978a:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801978e:	2304      	movs	r3, #4
 8019790:	2232      	movs	r2, #50	@ 0x32
 8019792:	f000 fc6d 	bl	801a070 <dhcp_option>
 8019796:	4603      	mov	r3, r0
 8019798:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801979a:	89bc      	ldrh	r4, [r7, #12]
 801979c:	693b      	ldr	r3, [r7, #16]
 801979e:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 80197a2:	69bb      	ldr	r3, [r7, #24]
 80197a4:	69db      	ldr	r3, [r3, #28]
 80197a6:	4618      	mov	r0, r3
 80197a8:	f7f7 f88d 	bl	80108c6 <lwip_htonl>
 80197ac:	4603      	mov	r3, r0
 80197ae:	461a      	mov	r2, r3
 80197b0:	4629      	mov	r1, r5
 80197b2:	4620      	mov	r0, r4
 80197b4:	f000 fce8 	bl	801a188 <dhcp_option_long>
 80197b8:	4603      	mov	r3, r0
 80197ba:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80197bc:	89b8      	ldrh	r0, [r7, #12]
 80197be:	693b      	ldr	r3, [r7, #16]
 80197c0:	33f0      	adds	r3, #240	@ 0xf0
 80197c2:	697a      	ldr	r2, [r7, #20]
 80197c4:	4619      	mov	r1, r3
 80197c6:	f001 f9cb 	bl	801ab60 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80197ca:	4b19      	ldr	r3, [pc, #100]	@ (8019830 <dhcp_decline+0xdc>)
 80197cc:	6818      	ldr	r0, [r3, #0]
 80197ce:	4b19      	ldr	r3, [pc, #100]	@ (8019834 <dhcp_decline+0xe0>)
 80197d0:	9301      	str	r3, [sp, #4]
 80197d2:	687b      	ldr	r3, [r7, #4]
 80197d4:	9300      	str	r3, [sp, #0]
 80197d6:	2343      	movs	r3, #67	@ 0x43
 80197d8:	4a17      	ldr	r2, [pc, #92]	@ (8019838 <dhcp_decline+0xe4>)
 80197da:	6979      	ldr	r1, [r7, #20]
 80197dc:	f7ff f8b2 	bl	8018944 <udp_sendto_if_src>
 80197e0:	4603      	mov	r3, r0
 80197e2:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80197e4:	6978      	ldr	r0, [r7, #20]
 80197e6:	f7f8 ff45 	bl	8012674 <pbuf_free>
 80197ea:	e001      	b.n	80197f0 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80197ec:	23ff      	movs	r3, #255	@ 0xff
 80197ee:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80197f0:	69bb      	ldr	r3, [r7, #24]
 80197f2:	799b      	ldrb	r3, [r3, #6]
 80197f4:	2bff      	cmp	r3, #255	@ 0xff
 80197f6:	d005      	beq.n	8019804 <dhcp_decline+0xb0>
    dhcp->tries++;
 80197f8:	69bb      	ldr	r3, [r7, #24]
 80197fa:	799b      	ldrb	r3, [r3, #6]
 80197fc:	3301      	adds	r3, #1
 80197fe:	b2da      	uxtb	r2, r3
 8019800:	69bb      	ldr	r3, [r7, #24]
 8019802:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 8019804:	f242 7310 	movw	r3, #10000	@ 0x2710
 8019808:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801980a:	89fb      	ldrh	r3, [r7, #14]
 801980c:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019810:	4a0a      	ldr	r2, [pc, #40]	@ (801983c <dhcp_decline+0xe8>)
 8019812:	fb82 1203 	smull	r1, r2, r2, r3
 8019816:	1152      	asrs	r2, r2, #5
 8019818:	17db      	asrs	r3, r3, #31
 801981a:	1ad3      	subs	r3, r2, r3
 801981c:	b29a      	uxth	r2, r3
 801981e:	69bb      	ldr	r3, [r7, #24]
 8019820:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019822:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019826:	4618      	mov	r0, r3
 8019828:	3720      	adds	r7, #32
 801982a:	46bd      	mov	sp, r7
 801982c:	bdb0      	pop	{r4, r5, r7, pc}
 801982e:	bf00      	nop
 8019830:	2001b0a8 	.word	0x2001b0a8
 8019834:	080252e8 	.word	0x080252e8
 8019838:	080252ec 	.word	0x080252ec
 801983c:	10624dd3 	.word	0x10624dd3

08019840 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8019840:	b580      	push	{r7, lr}
 8019842:	b08a      	sub	sp, #40	@ 0x28
 8019844:	af02      	add	r7, sp, #8
 8019846:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019848:	687b      	ldr	r3, [r7, #4]
 801984a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801984c:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 801984e:	2300      	movs	r3, #0
 8019850:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8019852:	69bb      	ldr	r3, [r7, #24]
 8019854:	2200      	movs	r2, #0
 8019856:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8019858:	2106      	movs	r1, #6
 801985a:	69b8      	ldr	r0, [r7, #24]
 801985c:	f000 fbee 	bl	801a03c <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8019860:	f107 0308 	add.w	r3, r7, #8
 8019864:	2201      	movs	r2, #1
 8019866:	69b9      	ldr	r1, [r7, #24]
 8019868:	6878      	ldr	r0, [r7, #4]
 801986a:	f001 f8a3 	bl	801a9b4 <dhcp_create_msg>
 801986e:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8019870:	693b      	ldr	r3, [r7, #16]
 8019872:	2b00      	cmp	r3, #0
 8019874:	d04b      	beq.n	801990e <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019876:	693b      	ldr	r3, [r7, #16]
 8019878:	685b      	ldr	r3, [r3, #4]
 801987a:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801987c:	8938      	ldrh	r0, [r7, #8]
 801987e:	68fb      	ldr	r3, [r7, #12]
 8019880:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019884:	2302      	movs	r3, #2
 8019886:	2239      	movs	r2, #57	@ 0x39
 8019888:	f000 fbf2 	bl	801a070 <dhcp_option>
 801988c:	4603      	mov	r3, r0
 801988e:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019890:	8938      	ldrh	r0, [r7, #8]
 8019892:	68fb      	ldr	r3, [r7, #12]
 8019894:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801989c:	461a      	mov	r2, r3
 801989e:	f000 fc41 	bl	801a124 <dhcp_option_short>
 80198a2:	4603      	mov	r3, r0
 80198a4:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80198a6:	8938      	ldrh	r0, [r7, #8]
 80198a8:	68fb      	ldr	r3, [r7, #12]
 80198aa:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80198ae:	2304      	movs	r3, #4
 80198b0:	2237      	movs	r2, #55	@ 0x37
 80198b2:	f000 fbdd 	bl	801a070 <dhcp_option>
 80198b6:	4603      	mov	r3, r0
 80198b8:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80198ba:	2300      	movs	r3, #0
 80198bc:	77fb      	strb	r3, [r7, #31]
 80198be:	e00e      	b.n	80198de <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80198c0:	8938      	ldrh	r0, [r7, #8]
 80198c2:	68fb      	ldr	r3, [r7, #12]
 80198c4:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 80198c8:	7ffb      	ldrb	r3, [r7, #31]
 80198ca:	4a29      	ldr	r2, [pc, #164]	@ (8019970 <dhcp_discover+0x130>)
 80198cc:	5cd3      	ldrb	r3, [r2, r3]
 80198ce:	461a      	mov	r2, r3
 80198d0:	f000 fc02 	bl	801a0d8 <dhcp_option_byte>
 80198d4:	4603      	mov	r3, r0
 80198d6:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80198d8:	7ffb      	ldrb	r3, [r7, #31]
 80198da:	3301      	adds	r3, #1
 80198dc:	77fb      	strb	r3, [r7, #31]
 80198de:	7ffb      	ldrb	r3, [r7, #31]
 80198e0:	2b03      	cmp	r3, #3
 80198e2:	d9ed      	bls.n	80198c0 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80198e4:	8938      	ldrh	r0, [r7, #8]
 80198e6:	68fb      	ldr	r3, [r7, #12]
 80198e8:	33f0      	adds	r3, #240	@ 0xf0
 80198ea:	693a      	ldr	r2, [r7, #16]
 80198ec:	4619      	mov	r1, r3
 80198ee:	f001 f937 	bl	801ab60 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80198f2:	4b20      	ldr	r3, [pc, #128]	@ (8019974 <dhcp_discover+0x134>)
 80198f4:	6818      	ldr	r0, [r3, #0]
 80198f6:	4b20      	ldr	r3, [pc, #128]	@ (8019978 <dhcp_discover+0x138>)
 80198f8:	9301      	str	r3, [sp, #4]
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	9300      	str	r3, [sp, #0]
 80198fe:	2343      	movs	r3, #67	@ 0x43
 8019900:	4a1e      	ldr	r2, [pc, #120]	@ (801997c <dhcp_discover+0x13c>)
 8019902:	6939      	ldr	r1, [r7, #16]
 8019904:	f7ff f81e 	bl	8018944 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8019908:	6938      	ldr	r0, [r7, #16]
 801990a:	f7f8 feb3 	bl	8012674 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801990e:	69bb      	ldr	r3, [r7, #24]
 8019910:	799b      	ldrb	r3, [r3, #6]
 8019912:	2bff      	cmp	r3, #255	@ 0xff
 8019914:	d005      	beq.n	8019922 <dhcp_discover+0xe2>
    dhcp->tries++;
 8019916:	69bb      	ldr	r3, [r7, #24]
 8019918:	799b      	ldrb	r3, [r3, #6]
 801991a:	3301      	adds	r3, #1
 801991c:	b2da      	uxtb	r2, r3
 801991e:	69bb      	ldr	r3, [r7, #24]
 8019920:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8019922:	69bb      	ldr	r3, [r7, #24]
 8019924:	799b      	ldrb	r3, [r3, #6]
 8019926:	2b05      	cmp	r3, #5
 8019928:	d80d      	bhi.n	8019946 <dhcp_discover+0x106>
 801992a:	69bb      	ldr	r3, [r7, #24]
 801992c:	799b      	ldrb	r3, [r3, #6]
 801992e:	461a      	mov	r2, r3
 8019930:	2301      	movs	r3, #1
 8019932:	4093      	lsls	r3, r2
 8019934:	b29b      	uxth	r3, r3
 8019936:	461a      	mov	r2, r3
 8019938:	0152      	lsls	r2, r2, #5
 801993a:	1ad2      	subs	r2, r2, r3
 801993c:	0092      	lsls	r2, r2, #2
 801993e:	4413      	add	r3, r2
 8019940:	00db      	lsls	r3, r3, #3
 8019942:	b29b      	uxth	r3, r3
 8019944:	e001      	b.n	801994a <dhcp_discover+0x10a>
 8019946:	f64e 2360 	movw	r3, #60000	@ 0xea60
 801994a:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801994c:	897b      	ldrh	r3, [r7, #10]
 801994e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019952:	4a0b      	ldr	r2, [pc, #44]	@ (8019980 <dhcp_discover+0x140>)
 8019954:	fb82 1203 	smull	r1, r2, r2, r3
 8019958:	1152      	asrs	r2, r2, #5
 801995a:	17db      	asrs	r3, r3, #31
 801995c:	1ad3      	subs	r3, r2, r3
 801995e:	b29a      	uxth	r2, r3
 8019960:	69bb      	ldr	r3, [r7, #24]
 8019962:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019964:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8019968:	4618      	mov	r0, r3
 801996a:	3720      	adds	r7, #32
 801996c:	46bd      	mov	sp, r7
 801996e:	bd80      	pop	{r7, pc}
 8019970:	2000004c 	.word	0x2000004c
 8019974:	2001b0a8 	.word	0x2001b0a8
 8019978:	080252e8 	.word	0x080252e8
 801997c:	080252ec 	.word	0x080252ec
 8019980:	10624dd3 	.word	0x10624dd3

08019984 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8019984:	b580      	push	{r7, lr}
 8019986:	b088      	sub	sp, #32
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	2b00      	cmp	r3, #0
 8019990:	d107      	bne.n	80199a2 <dhcp_bind+0x1e>
 8019992:	4b64      	ldr	r3, [pc, #400]	@ (8019b24 <dhcp_bind+0x1a0>)
 8019994:	f240 4215 	movw	r2, #1045	@ 0x415
 8019998:	4963      	ldr	r1, [pc, #396]	@ (8019b28 <dhcp_bind+0x1a4>)
 801999a:	4864      	ldr	r0, [pc, #400]	@ (8019b2c <dhcp_bind+0x1a8>)
 801999c:	f004 feb0 	bl	801e700 <iprintf>
 80199a0:	e0bc      	b.n	8019b1c <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 80199a2:	687b      	ldr	r3, [r7, #4]
 80199a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80199a6:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 80199a8:	69bb      	ldr	r3, [r7, #24]
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d107      	bne.n	80199be <dhcp_bind+0x3a>
 80199ae:	4b5d      	ldr	r3, [pc, #372]	@ (8019b24 <dhcp_bind+0x1a0>)
 80199b0:	f240 4217 	movw	r2, #1047	@ 0x417
 80199b4:	495e      	ldr	r1, [pc, #376]	@ (8019b30 <dhcp_bind+0x1ac>)
 80199b6:	485d      	ldr	r0, [pc, #372]	@ (8019b2c <dhcp_bind+0x1a8>)
 80199b8:	f004 fea2 	bl	801e700 <iprintf>
 80199bc:	e0ae      	b.n	8019b1c <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 80199be:	69bb      	ldr	r3, [r7, #24]
 80199c0:	2200      	movs	r2, #0
 80199c2:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 80199c4:	69bb      	ldr	r3, [r7, #24]
 80199c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80199c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80199cc:	d019      	beq.n	8019a02 <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80199ce:	69bb      	ldr	r3, [r7, #24]
 80199d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80199d2:	331e      	adds	r3, #30
 80199d4:	4a57      	ldr	r2, [pc, #348]	@ (8019b34 <dhcp_bind+0x1b0>)
 80199d6:	fba2 2303 	umull	r2, r3, r2, r3
 80199da:	095b      	lsrs	r3, r3, #5
 80199dc:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80199de:	69fb      	ldr	r3, [r7, #28]
 80199e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80199e4:	d302      	bcc.n	80199ec <dhcp_bind+0x68>
      timeout = 0xffff;
 80199e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80199ea:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 80199ec:	69fb      	ldr	r3, [r7, #28]
 80199ee:	b29a      	uxth	r2, r3
 80199f0:	69bb      	ldr	r3, [r7, #24]
 80199f2:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80199f4:	69bb      	ldr	r3, [r7, #24]
 80199f6:	8a9b      	ldrh	r3, [r3, #20]
 80199f8:	2b00      	cmp	r3, #0
 80199fa:	d102      	bne.n	8019a02 <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80199fc:	69bb      	ldr	r3, [r7, #24]
 80199fe:	2201      	movs	r2, #1
 8019a00:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8019a02:	69bb      	ldr	r3, [r7, #24]
 8019a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a0a:	d01d      	beq.n	8019a48 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019a0c:	69bb      	ldr	r3, [r7, #24]
 8019a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019a10:	331e      	adds	r3, #30
 8019a12:	4a48      	ldr	r2, [pc, #288]	@ (8019b34 <dhcp_bind+0x1b0>)
 8019a14:	fba2 2303 	umull	r2, r3, r2, r3
 8019a18:	095b      	lsrs	r3, r3, #5
 8019a1a:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8019a1c:	69fb      	ldr	r3, [r7, #28]
 8019a1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019a22:	d302      	bcc.n	8019a2a <dhcp_bind+0xa6>
      timeout = 0xffff;
 8019a24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019a28:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8019a2a:	69fb      	ldr	r3, [r7, #28]
 8019a2c:	b29a      	uxth	r2, r3
 8019a2e:	69bb      	ldr	r3, [r7, #24]
 8019a30:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8019a32:	69bb      	ldr	r3, [r7, #24]
 8019a34:	895b      	ldrh	r3, [r3, #10]
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d102      	bne.n	8019a40 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8019a3a:	69bb      	ldr	r3, [r7, #24]
 8019a3c:	2201      	movs	r2, #1
 8019a3e:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8019a40:	69bb      	ldr	r3, [r7, #24]
 8019a42:	895a      	ldrh	r2, [r3, #10]
 8019a44:	69bb      	ldr	r3, [r7, #24]
 8019a46:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8019a48:	69bb      	ldr	r3, [r7, #24]
 8019a4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a50:	d01d      	beq.n	8019a8e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8019a52:	69bb      	ldr	r3, [r7, #24]
 8019a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019a56:	331e      	adds	r3, #30
 8019a58:	4a36      	ldr	r2, [pc, #216]	@ (8019b34 <dhcp_bind+0x1b0>)
 8019a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8019a5e:	095b      	lsrs	r3, r3, #5
 8019a60:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8019a62:	69fb      	ldr	r3, [r7, #28]
 8019a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019a68:	d302      	bcc.n	8019a70 <dhcp_bind+0xec>
      timeout = 0xffff;
 8019a6a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019a6e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8019a70:	69fb      	ldr	r3, [r7, #28]
 8019a72:	b29a      	uxth	r2, r3
 8019a74:	69bb      	ldr	r3, [r7, #24]
 8019a76:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8019a78:	69bb      	ldr	r3, [r7, #24]
 8019a7a:	899b      	ldrh	r3, [r3, #12]
 8019a7c:	2b00      	cmp	r3, #0
 8019a7e:	d102      	bne.n	8019a86 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8019a80:	69bb      	ldr	r3, [r7, #24]
 8019a82:	2201      	movs	r2, #1
 8019a84:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8019a86:	69bb      	ldr	r3, [r7, #24]
 8019a88:	899a      	ldrh	r2, [r3, #12]
 8019a8a:	69bb      	ldr	r3, [r7, #24]
 8019a8c:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8019a8e:	69bb      	ldr	r3, [r7, #24]
 8019a90:	895a      	ldrh	r2, [r3, #10]
 8019a92:	69bb      	ldr	r3, [r7, #24]
 8019a94:	899b      	ldrh	r3, [r3, #12]
 8019a96:	429a      	cmp	r2, r3
 8019a98:	d306      	bcc.n	8019aa8 <dhcp_bind+0x124>
 8019a9a:	69bb      	ldr	r3, [r7, #24]
 8019a9c:	899b      	ldrh	r3, [r3, #12]
 8019a9e:	2b00      	cmp	r3, #0
 8019aa0:	d002      	beq.n	8019aa8 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8019aa2:	69bb      	ldr	r3, [r7, #24]
 8019aa4:	2200      	movs	r2, #0
 8019aa6:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8019aa8:	69bb      	ldr	r3, [r7, #24]
 8019aaa:	79db      	ldrb	r3, [r3, #7]
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d003      	beq.n	8019ab8 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8019ab0:	69bb      	ldr	r3, [r7, #24]
 8019ab2:	6a1b      	ldr	r3, [r3, #32]
 8019ab4:	613b      	str	r3, [r7, #16]
 8019ab6:	e014      	b.n	8019ae2 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8019ab8:	69bb      	ldr	r3, [r7, #24]
 8019aba:	331c      	adds	r3, #28
 8019abc:	781b      	ldrb	r3, [r3, #0]
 8019abe:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8019ac0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	db02      	blt.n	8019ace <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8019ac8:	23ff      	movs	r3, #255	@ 0xff
 8019aca:	613b      	str	r3, [r7, #16]
 8019acc:	e009      	b.n	8019ae2 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8019ace:	7dfb      	ldrb	r3, [r7, #23]
 8019ad0:	2bbf      	cmp	r3, #191	@ 0xbf
 8019ad2:	d903      	bls.n	8019adc <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8019ad4:	f06f 437f 	mvn.w	r3, #4278190080	@ 0xff000000
 8019ad8:	613b      	str	r3, [r7, #16]
 8019ada:	e002      	b.n	8019ae2 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8019adc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8019ae0:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8019ae2:	69bb      	ldr	r3, [r7, #24]
 8019ae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ae6:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	2b00      	cmp	r3, #0
 8019aec:	d108      	bne.n	8019b00 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8019aee:	69bb      	ldr	r3, [r7, #24]
 8019af0:	69da      	ldr	r2, [r3, #28]
 8019af2:	693b      	ldr	r3, [r7, #16]
 8019af4:	4013      	ands	r3, r2
 8019af6:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8019af8:	68fb      	ldr	r3, [r7, #12]
 8019afa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8019afe:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8019b00:	210a      	movs	r1, #10
 8019b02:	69b8      	ldr	r0, [r7, #24]
 8019b04:	f000 fa9a 	bl	801a03c <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8019b08:	69bb      	ldr	r3, [r7, #24]
 8019b0a:	f103 011c 	add.w	r1, r3, #28
 8019b0e:	f107 030c 	add.w	r3, r7, #12
 8019b12:	f107 0210 	add.w	r2, r7, #16
 8019b16:	6878      	ldr	r0, [r7, #4]
 8019b18:	f7f8 f89e 	bl	8011c58 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8019b1c:	3720      	adds	r7, #32
 8019b1e:	46bd      	mov	sp, r7
 8019b20:	bd80      	pop	{r7, pc}
 8019b22:	bf00      	nop
 8019b24:	08024510 	.word	0x08024510
 8019b28:	08024670 	.word	0x08024670
 8019b2c:	08024570 	.word	0x08024570
 8019b30:	0802468c 	.word	0x0802468c
 8019b34:	88888889 	.word	0x88888889

08019b38 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8019b38:	b580      	push	{r7, lr}
 8019b3a:	b08a      	sub	sp, #40	@ 0x28
 8019b3c:	af02      	add	r7, sp, #8
 8019b3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b44:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8019b46:	2105      	movs	r1, #5
 8019b48:	69b8      	ldr	r0, [r7, #24]
 8019b4a:	f000 fa77 	bl	801a03c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019b4e:	f107 030c 	add.w	r3, r7, #12
 8019b52:	2203      	movs	r2, #3
 8019b54:	69b9      	ldr	r1, [r7, #24]
 8019b56:	6878      	ldr	r0, [r7, #4]
 8019b58:	f000 ff2c 	bl	801a9b4 <dhcp_create_msg>
 8019b5c:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019b5e:	697b      	ldr	r3, [r7, #20]
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d04e      	beq.n	8019c02 <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019b64:	697b      	ldr	r3, [r7, #20]
 8019b66:	685b      	ldr	r3, [r3, #4]
 8019b68:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019b6a:	89b8      	ldrh	r0, [r7, #12]
 8019b6c:	693b      	ldr	r3, [r7, #16]
 8019b6e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019b72:	2302      	movs	r3, #2
 8019b74:	2239      	movs	r2, #57	@ 0x39
 8019b76:	f000 fa7b 	bl	801a070 <dhcp_option>
 8019b7a:	4603      	mov	r3, r0
 8019b7c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019b7e:	89b8      	ldrh	r0, [r7, #12]
 8019b80:	693b      	ldr	r3, [r7, #16]
 8019b82:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019b8a:	461a      	mov	r2, r3
 8019b8c:	f000 faca 	bl	801a124 <dhcp_option_short>
 8019b90:	4603      	mov	r3, r0
 8019b92:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019b94:	89b8      	ldrh	r0, [r7, #12]
 8019b96:	693b      	ldr	r3, [r7, #16]
 8019b98:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019b9c:	2304      	movs	r3, #4
 8019b9e:	2237      	movs	r2, #55	@ 0x37
 8019ba0:	f000 fa66 	bl	801a070 <dhcp_option>
 8019ba4:	4603      	mov	r3, r0
 8019ba6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019ba8:	2300      	movs	r3, #0
 8019baa:	77bb      	strb	r3, [r7, #30]
 8019bac:	e00e      	b.n	8019bcc <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019bae:	89b8      	ldrh	r0, [r7, #12]
 8019bb0:	693b      	ldr	r3, [r7, #16]
 8019bb2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019bb6:	7fbb      	ldrb	r3, [r7, #30]
 8019bb8:	4a29      	ldr	r2, [pc, #164]	@ (8019c60 <dhcp_renew+0x128>)
 8019bba:	5cd3      	ldrb	r3, [r2, r3]
 8019bbc:	461a      	mov	r2, r3
 8019bbe:	f000 fa8b 	bl	801a0d8 <dhcp_option_byte>
 8019bc2:	4603      	mov	r3, r0
 8019bc4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019bc6:	7fbb      	ldrb	r3, [r7, #30]
 8019bc8:	3301      	adds	r3, #1
 8019bca:	77bb      	strb	r3, [r7, #30]
 8019bcc:	7fbb      	ldrb	r3, [r7, #30]
 8019bce:	2b03      	cmp	r3, #3
 8019bd0:	d9ed      	bls.n	8019bae <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019bd2:	89b8      	ldrh	r0, [r7, #12]
 8019bd4:	693b      	ldr	r3, [r7, #16]
 8019bd6:	33f0      	adds	r3, #240	@ 0xf0
 8019bd8:	697a      	ldr	r2, [r7, #20]
 8019bda:	4619      	mov	r1, r3
 8019bdc:	f000 ffc0 	bl	801ab60 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019be0:	4b20      	ldr	r3, [pc, #128]	@ (8019c64 <dhcp_renew+0x12c>)
 8019be2:	6818      	ldr	r0, [r3, #0]
 8019be4:	69bb      	ldr	r3, [r7, #24]
 8019be6:	f103 0218 	add.w	r2, r3, #24
 8019bea:	687b      	ldr	r3, [r7, #4]
 8019bec:	9300      	str	r3, [sp, #0]
 8019bee:	2343      	movs	r3, #67	@ 0x43
 8019bf0:	6979      	ldr	r1, [r7, #20]
 8019bf2:	f7fe fe33 	bl	801885c <udp_sendto_if>
 8019bf6:	4603      	mov	r3, r0
 8019bf8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019bfa:	6978      	ldr	r0, [r7, #20]
 8019bfc:	f7f8 fd3a 	bl	8012674 <pbuf_free>
 8019c00:	e001      	b.n	8019c06 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019c02:	23ff      	movs	r3, #255	@ 0xff
 8019c04:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019c06:	69bb      	ldr	r3, [r7, #24]
 8019c08:	799b      	ldrb	r3, [r3, #6]
 8019c0a:	2bff      	cmp	r3, #255	@ 0xff
 8019c0c:	d005      	beq.n	8019c1a <dhcp_renew+0xe2>
    dhcp->tries++;
 8019c0e:	69bb      	ldr	r3, [r7, #24]
 8019c10:	799b      	ldrb	r3, [r3, #6]
 8019c12:	3301      	adds	r3, #1
 8019c14:	b2da      	uxtb	r2, r3
 8019c16:	69bb      	ldr	r3, [r7, #24]
 8019c18:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8019c1a:	69bb      	ldr	r3, [r7, #24]
 8019c1c:	799b      	ldrb	r3, [r3, #6]
 8019c1e:	2b09      	cmp	r3, #9
 8019c20:	d809      	bhi.n	8019c36 <dhcp_renew+0xfe>
 8019c22:	69bb      	ldr	r3, [r7, #24]
 8019c24:	799b      	ldrb	r3, [r3, #6]
 8019c26:	461a      	mov	r2, r3
 8019c28:	0152      	lsls	r2, r2, #5
 8019c2a:	1ad2      	subs	r2, r2, r3
 8019c2c:	0092      	lsls	r2, r2, #2
 8019c2e:	4413      	add	r3, r2
 8019c30:	011b      	lsls	r3, r3, #4
 8019c32:	b29b      	uxth	r3, r3
 8019c34:	e001      	b.n	8019c3a <dhcp_renew+0x102>
 8019c36:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8019c3a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019c3c:	89fb      	ldrh	r3, [r7, #14]
 8019c3e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019c42:	4a09      	ldr	r2, [pc, #36]	@ (8019c68 <dhcp_renew+0x130>)
 8019c44:	fb82 1203 	smull	r1, r2, r2, r3
 8019c48:	1152      	asrs	r2, r2, #5
 8019c4a:	17db      	asrs	r3, r3, #31
 8019c4c:	1ad3      	subs	r3, r2, r3
 8019c4e:	b29a      	uxth	r2, r3
 8019c50:	69bb      	ldr	r3, [r7, #24]
 8019c52:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019c54:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019c58:	4618      	mov	r0, r3
 8019c5a:	3720      	adds	r7, #32
 8019c5c:	46bd      	mov	sp, r7
 8019c5e:	bd80      	pop	{r7, pc}
 8019c60:	2000004c 	.word	0x2000004c
 8019c64:	2001b0a8 	.word	0x2001b0a8
 8019c68:	10624dd3 	.word	0x10624dd3

08019c6c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b08a      	sub	sp, #40	@ 0x28
 8019c70:	af02      	add	r7, sp, #8
 8019c72:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019c78:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8019c7a:	2104      	movs	r1, #4
 8019c7c:	69b8      	ldr	r0, [r7, #24]
 8019c7e:	f000 f9dd 	bl	801a03c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019c82:	f107 030c 	add.w	r3, r7, #12
 8019c86:	2203      	movs	r2, #3
 8019c88:	69b9      	ldr	r1, [r7, #24]
 8019c8a:	6878      	ldr	r0, [r7, #4]
 8019c8c:	f000 fe92 	bl	801a9b4 <dhcp_create_msg>
 8019c90:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019c92:	697b      	ldr	r3, [r7, #20]
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d04c      	beq.n	8019d32 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019c98:	697b      	ldr	r3, [r7, #20]
 8019c9a:	685b      	ldr	r3, [r3, #4]
 8019c9c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019c9e:	89b8      	ldrh	r0, [r7, #12]
 8019ca0:	693b      	ldr	r3, [r7, #16]
 8019ca2:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019ca6:	2302      	movs	r3, #2
 8019ca8:	2239      	movs	r2, #57	@ 0x39
 8019caa:	f000 f9e1 	bl	801a070 <dhcp_option>
 8019cae:	4603      	mov	r3, r0
 8019cb0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8019cb2:	89b8      	ldrh	r0, [r7, #12]
 8019cb4:	693b      	ldr	r3, [r7, #16]
 8019cb6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019cba:	687b      	ldr	r3, [r7, #4]
 8019cbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8019cbe:	461a      	mov	r2, r3
 8019cc0:	f000 fa30 	bl	801a124 <dhcp_option_short>
 8019cc4:	4603      	mov	r3, r0
 8019cc6:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019cc8:	89b8      	ldrh	r0, [r7, #12]
 8019cca:	693b      	ldr	r3, [r7, #16]
 8019ccc:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019cd0:	2304      	movs	r3, #4
 8019cd2:	2237      	movs	r2, #55	@ 0x37
 8019cd4:	f000 f9cc 	bl	801a070 <dhcp_option>
 8019cd8:	4603      	mov	r3, r0
 8019cda:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019cdc:	2300      	movs	r3, #0
 8019cde:	77bb      	strb	r3, [r7, #30]
 8019ce0:	e00e      	b.n	8019d00 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019ce2:	89b8      	ldrh	r0, [r7, #12]
 8019ce4:	693b      	ldr	r3, [r7, #16]
 8019ce6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019cea:	7fbb      	ldrb	r3, [r7, #30]
 8019cec:	4a28      	ldr	r2, [pc, #160]	@ (8019d90 <dhcp_rebind+0x124>)
 8019cee:	5cd3      	ldrb	r3, [r2, r3]
 8019cf0:	461a      	mov	r2, r3
 8019cf2:	f000 f9f1 	bl	801a0d8 <dhcp_option_byte>
 8019cf6:	4603      	mov	r3, r0
 8019cf8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019cfa:	7fbb      	ldrb	r3, [r7, #30]
 8019cfc:	3301      	adds	r3, #1
 8019cfe:	77bb      	strb	r3, [r7, #30]
 8019d00:	7fbb      	ldrb	r3, [r7, #30]
 8019d02:	2b03      	cmp	r3, #3
 8019d04:	d9ed      	bls.n	8019ce2 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019d06:	89b8      	ldrh	r0, [r7, #12]
 8019d08:	693b      	ldr	r3, [r7, #16]
 8019d0a:	33f0      	adds	r3, #240	@ 0xf0
 8019d0c:	697a      	ldr	r2, [r7, #20]
 8019d0e:	4619      	mov	r1, r3
 8019d10:	f000 ff26 	bl	801ab60 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019d14:	4b1f      	ldr	r3, [pc, #124]	@ (8019d94 <dhcp_rebind+0x128>)
 8019d16:	6818      	ldr	r0, [r3, #0]
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	9300      	str	r3, [sp, #0]
 8019d1c:	2343      	movs	r3, #67	@ 0x43
 8019d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8019d98 <dhcp_rebind+0x12c>)
 8019d20:	6979      	ldr	r1, [r7, #20]
 8019d22:	f7fe fd9b 	bl	801885c <udp_sendto_if>
 8019d26:	4603      	mov	r3, r0
 8019d28:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019d2a:	6978      	ldr	r0, [r7, #20]
 8019d2c:	f7f8 fca2 	bl	8012674 <pbuf_free>
 8019d30:	e001      	b.n	8019d36 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019d32:	23ff      	movs	r3, #255	@ 0xff
 8019d34:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019d36:	69bb      	ldr	r3, [r7, #24]
 8019d38:	799b      	ldrb	r3, [r3, #6]
 8019d3a:	2bff      	cmp	r3, #255	@ 0xff
 8019d3c:	d005      	beq.n	8019d4a <dhcp_rebind+0xde>
    dhcp->tries++;
 8019d3e:	69bb      	ldr	r3, [r7, #24]
 8019d40:	799b      	ldrb	r3, [r3, #6]
 8019d42:	3301      	adds	r3, #1
 8019d44:	b2da      	uxtb	r2, r3
 8019d46:	69bb      	ldr	r3, [r7, #24]
 8019d48:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8019d4a:	69bb      	ldr	r3, [r7, #24]
 8019d4c:	799b      	ldrb	r3, [r3, #6]
 8019d4e:	2b09      	cmp	r3, #9
 8019d50:	d809      	bhi.n	8019d66 <dhcp_rebind+0xfa>
 8019d52:	69bb      	ldr	r3, [r7, #24]
 8019d54:	799b      	ldrb	r3, [r3, #6]
 8019d56:	461a      	mov	r2, r3
 8019d58:	0152      	lsls	r2, r2, #5
 8019d5a:	1ad2      	subs	r2, r2, r3
 8019d5c:	0092      	lsls	r2, r2, #2
 8019d5e:	4413      	add	r3, r2
 8019d60:	00db      	lsls	r3, r3, #3
 8019d62:	b29b      	uxth	r3, r3
 8019d64:	e001      	b.n	8019d6a <dhcp_rebind+0xfe>
 8019d66:	f242 7310 	movw	r3, #10000	@ 0x2710
 8019d6a:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019d6c:	89fb      	ldrh	r3, [r7, #14]
 8019d6e:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019d72:	4a0a      	ldr	r2, [pc, #40]	@ (8019d9c <dhcp_rebind+0x130>)
 8019d74:	fb82 1203 	smull	r1, r2, r2, r3
 8019d78:	1152      	asrs	r2, r2, #5
 8019d7a:	17db      	asrs	r3, r3, #31
 8019d7c:	1ad3      	subs	r3, r2, r3
 8019d7e:	b29a      	uxth	r2, r3
 8019d80:	69bb      	ldr	r3, [r7, #24]
 8019d82:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019d84:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019d88:	4618      	mov	r0, r3
 8019d8a:	3720      	adds	r7, #32
 8019d8c:	46bd      	mov	sp, r7
 8019d8e:	bd80      	pop	{r7, pc}
 8019d90:	2000004c 	.word	0x2000004c
 8019d94:	2001b0a8 	.word	0x2001b0a8
 8019d98:	080252ec 	.word	0x080252ec
 8019d9c:	10624dd3 	.word	0x10624dd3

08019da0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8019da0:	b5b0      	push	{r4, r5, r7, lr}
 8019da2:	b08a      	sub	sp, #40	@ 0x28
 8019da4:	af02      	add	r7, sp, #8
 8019da6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019da8:	687b      	ldr	r3, [r7, #4]
 8019daa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019dac:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8019dae:	2103      	movs	r1, #3
 8019db0:	69b8      	ldr	r0, [r7, #24]
 8019db2:	f000 f943 	bl	801a03c <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8019db6:	f107 030c 	add.w	r3, r7, #12
 8019dba:	2203      	movs	r2, #3
 8019dbc:	69b9      	ldr	r1, [r7, #24]
 8019dbe:	6878      	ldr	r0, [r7, #4]
 8019dc0:	f000 fdf8 	bl	801a9b4 <dhcp_create_msg>
 8019dc4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8019dc6:	697b      	ldr	r3, [r7, #20]
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d066      	beq.n	8019e9a <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019dcc:	697b      	ldr	r3, [r7, #20]
 8019dce:	685b      	ldr	r3, [r3, #4]
 8019dd0:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8019dd2:	89b8      	ldrh	r0, [r7, #12]
 8019dd4:	693b      	ldr	r3, [r7, #16]
 8019dd6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019dda:	2302      	movs	r3, #2
 8019ddc:	2239      	movs	r2, #57	@ 0x39
 8019dde:	f000 f947 	bl	801a070 <dhcp_option>
 8019de2:	4603      	mov	r3, r0
 8019de4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8019de6:	89b8      	ldrh	r0, [r7, #12]
 8019de8:	693b      	ldr	r3, [r7, #16]
 8019dea:	33f0      	adds	r3, #240	@ 0xf0
 8019dec:	f44f 7210 	mov.w	r2, #576	@ 0x240
 8019df0:	4619      	mov	r1, r3
 8019df2:	f000 f997 	bl	801a124 <dhcp_option_short>
 8019df6:	4603      	mov	r3, r0
 8019df8:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8019dfa:	89b8      	ldrh	r0, [r7, #12]
 8019dfc:	693b      	ldr	r3, [r7, #16]
 8019dfe:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019e02:	2304      	movs	r3, #4
 8019e04:	2232      	movs	r2, #50	@ 0x32
 8019e06:	f000 f933 	bl	801a070 <dhcp_option>
 8019e0a:	4603      	mov	r3, r0
 8019e0c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8019e0e:	89bc      	ldrh	r4, [r7, #12]
 8019e10:	693b      	ldr	r3, [r7, #16]
 8019e12:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8019e16:	69bb      	ldr	r3, [r7, #24]
 8019e18:	69db      	ldr	r3, [r3, #28]
 8019e1a:	4618      	mov	r0, r3
 8019e1c:	f7f6 fd53 	bl	80108c6 <lwip_htonl>
 8019e20:	4603      	mov	r3, r0
 8019e22:	461a      	mov	r2, r3
 8019e24:	4629      	mov	r1, r5
 8019e26:	4620      	mov	r0, r4
 8019e28:	f000 f9ae 	bl	801a188 <dhcp_option_long>
 8019e2c:	4603      	mov	r3, r0
 8019e2e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8019e30:	89b8      	ldrh	r0, [r7, #12]
 8019e32:	693b      	ldr	r3, [r7, #16]
 8019e34:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019e38:	2304      	movs	r3, #4
 8019e3a:	2237      	movs	r2, #55	@ 0x37
 8019e3c:	f000 f918 	bl	801a070 <dhcp_option>
 8019e40:	4603      	mov	r3, r0
 8019e42:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019e44:	2300      	movs	r3, #0
 8019e46:	77bb      	strb	r3, [r7, #30]
 8019e48:	e00e      	b.n	8019e68 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8019e4a:	89b8      	ldrh	r0, [r7, #12]
 8019e4c:	693b      	ldr	r3, [r7, #16]
 8019e4e:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019e52:	7fbb      	ldrb	r3, [r7, #30]
 8019e54:	4a28      	ldr	r2, [pc, #160]	@ (8019ef8 <dhcp_reboot+0x158>)
 8019e56:	5cd3      	ldrb	r3, [r2, r3]
 8019e58:	461a      	mov	r2, r3
 8019e5a:	f000 f93d 	bl	801a0d8 <dhcp_option_byte>
 8019e5e:	4603      	mov	r3, r0
 8019e60:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8019e62:	7fbb      	ldrb	r3, [r7, #30]
 8019e64:	3301      	adds	r3, #1
 8019e66:	77bb      	strb	r3, [r7, #30]
 8019e68:	7fbb      	ldrb	r3, [r7, #30]
 8019e6a:	2b03      	cmp	r3, #3
 8019e6c:	d9ed      	bls.n	8019e4a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019e6e:	89b8      	ldrh	r0, [r7, #12]
 8019e70:	693b      	ldr	r3, [r7, #16]
 8019e72:	33f0      	adds	r3, #240	@ 0xf0
 8019e74:	697a      	ldr	r2, [r7, #20]
 8019e76:	4619      	mov	r1, r3
 8019e78:	f000 fe72 	bl	801ab60 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019e7c:	4b1f      	ldr	r3, [pc, #124]	@ (8019efc <dhcp_reboot+0x15c>)
 8019e7e:	6818      	ldr	r0, [r3, #0]
 8019e80:	687b      	ldr	r3, [r7, #4]
 8019e82:	9300      	str	r3, [sp, #0]
 8019e84:	2343      	movs	r3, #67	@ 0x43
 8019e86:	4a1e      	ldr	r2, [pc, #120]	@ (8019f00 <dhcp_reboot+0x160>)
 8019e88:	6979      	ldr	r1, [r7, #20]
 8019e8a:	f7fe fce7 	bl	801885c <udp_sendto_if>
 8019e8e:	4603      	mov	r3, r0
 8019e90:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8019e92:	6978      	ldr	r0, [r7, #20]
 8019e94:	f7f8 fbee 	bl	8012674 <pbuf_free>
 8019e98:	e001      	b.n	8019e9e <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8019e9a:	23ff      	movs	r3, #255	@ 0xff
 8019e9c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8019e9e:	69bb      	ldr	r3, [r7, #24]
 8019ea0:	799b      	ldrb	r3, [r3, #6]
 8019ea2:	2bff      	cmp	r3, #255	@ 0xff
 8019ea4:	d005      	beq.n	8019eb2 <dhcp_reboot+0x112>
    dhcp->tries++;
 8019ea6:	69bb      	ldr	r3, [r7, #24]
 8019ea8:	799b      	ldrb	r3, [r3, #6]
 8019eaa:	3301      	adds	r3, #1
 8019eac:	b2da      	uxtb	r2, r3
 8019eae:	69bb      	ldr	r3, [r7, #24]
 8019eb0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8019eb2:	69bb      	ldr	r3, [r7, #24]
 8019eb4:	799b      	ldrb	r3, [r3, #6]
 8019eb6:	2b09      	cmp	r3, #9
 8019eb8:	d809      	bhi.n	8019ece <dhcp_reboot+0x12e>
 8019eba:	69bb      	ldr	r3, [r7, #24]
 8019ebc:	799b      	ldrb	r3, [r3, #6]
 8019ebe:	461a      	mov	r2, r3
 8019ec0:	0152      	lsls	r2, r2, #5
 8019ec2:	1ad2      	subs	r2, r2, r3
 8019ec4:	0092      	lsls	r2, r2, #2
 8019ec6:	4413      	add	r3, r2
 8019ec8:	00db      	lsls	r3, r3, #3
 8019eca:	b29b      	uxth	r3, r3
 8019ecc:	e001      	b.n	8019ed2 <dhcp_reboot+0x132>
 8019ece:	f242 7310 	movw	r3, #10000	@ 0x2710
 8019ed2:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8019ed4:	89fb      	ldrh	r3, [r7, #14]
 8019ed6:	f203 13f3 	addw	r3, r3, #499	@ 0x1f3
 8019eda:	4a0a      	ldr	r2, [pc, #40]	@ (8019f04 <dhcp_reboot+0x164>)
 8019edc:	fb82 1203 	smull	r1, r2, r2, r3
 8019ee0:	1152      	asrs	r2, r2, #5
 8019ee2:	17db      	asrs	r3, r3, #31
 8019ee4:	1ad3      	subs	r3, r2, r3
 8019ee6:	b29a      	uxth	r2, r3
 8019ee8:	69bb      	ldr	r3, [r7, #24]
 8019eea:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8019eec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8019ef0:	4618      	mov	r0, r3
 8019ef2:	3720      	adds	r7, #32
 8019ef4:	46bd      	mov	sp, r7
 8019ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8019ef8:	2000004c 	.word	0x2000004c
 8019efc:	2001b0a8 	.word	0x2001b0a8
 8019f00:	080252ec 	.word	0x080252ec
 8019f04:	10624dd3 	.word	0x10624dd3

08019f08 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 8019f08:	b5b0      	push	{r4, r5, r7, lr}
 8019f0a:	b08a      	sub	sp, #40	@ 0x28
 8019f0c:	af02      	add	r7, sp, #8
 8019f0e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8019f10:	687b      	ldr	r3, [r7, #4]
 8019f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f14:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 8019f16:	69fb      	ldr	r3, [r7, #28]
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	f000 8084 	beq.w	801a026 <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8019f1e:	69fb      	ldr	r3, [r7, #28]
 8019f20:	795b      	ldrb	r3, [r3, #5]
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	f000 8081 	beq.w	801a02a <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8019f28:	69fb      	ldr	r3, [r7, #28]
 8019f2a:	699b      	ldr	r3, [r3, #24]
 8019f2c:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8019f2e:	69fb      	ldr	r3, [r7, #28]
 8019f30:	2200      	movs	r2, #0
 8019f32:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8019f34:	69fb      	ldr	r3, [r7, #28]
 8019f36:	2200      	movs	r2, #0
 8019f38:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8019f3a:	69fb      	ldr	r3, [r7, #28]
 8019f3c:	2200      	movs	r2, #0
 8019f3e:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8019f40:	69fb      	ldr	r3, [r7, #28]
 8019f42:	2200      	movs	r2, #0
 8019f44:	625a      	str	r2, [r3, #36]	@ 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8019f46:	69fb      	ldr	r3, [r7, #28]
 8019f48:	2200      	movs	r2, #0
 8019f4a:	631a      	str	r2, [r3, #48]	@ 0x30
 8019f4c:	69fb      	ldr	r3, [r7, #28]
 8019f4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019f50:	69fb      	ldr	r3, [r7, #28]
 8019f52:	62da      	str	r2, [r3, #44]	@ 0x2c
 8019f54:	69fb      	ldr	r3, [r7, #28]
 8019f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019f58:	69fb      	ldr	r3, [r7, #28]
 8019f5a:	629a      	str	r2, [r3, #40]	@ 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8019f5c:	69fb      	ldr	r3, [r7, #28]
 8019f5e:	2200      	movs	r2, #0
 8019f60:	829a      	strh	r2, [r3, #20]
 8019f62:	69fb      	ldr	r3, [r7, #28]
 8019f64:	8a9a      	ldrh	r2, [r3, #20]
 8019f66:	69fb      	ldr	r3, [r7, #28]
 8019f68:	825a      	strh	r2, [r3, #18]
 8019f6a:	69fb      	ldr	r3, [r7, #28]
 8019f6c:	8a5a      	ldrh	r2, [r3, #18]
 8019f6e:	69fb      	ldr	r3, [r7, #28]
 8019f70:	821a      	strh	r2, [r3, #16]
 8019f72:	69fb      	ldr	r3, [r7, #28]
 8019f74:	8a1a      	ldrh	r2, [r3, #16]
 8019f76:	69fb      	ldr	r3, [r7, #28]
 8019f78:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8019f7a:	6878      	ldr	r0, [r7, #4]
 8019f7c:	f000 fe1e 	bl	801abbc <dhcp_supplied_address>
 8019f80:	4603      	mov	r3, r0
 8019f82:	2b00      	cmp	r3, #0
 8019f84:	d03b      	beq.n	8019ffe <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 8019f86:	f107 030e 	add.w	r3, r7, #14
 8019f8a:	2207      	movs	r2, #7
 8019f8c:	69f9      	ldr	r1, [r7, #28]
 8019f8e:	6878      	ldr	r0, [r7, #4]
 8019f90:	f000 fd10 	bl	801a9b4 <dhcp_create_msg>
 8019f94:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 8019f96:	69bb      	ldr	r3, [r7, #24]
 8019f98:	2b00      	cmp	r3, #0
 8019f9a:	d030      	beq.n	8019ffe <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8019f9c:	69bb      	ldr	r3, [r7, #24]
 8019f9e:	685b      	ldr	r3, [r3, #4]
 8019fa0:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8019fa2:	89f8      	ldrh	r0, [r7, #14]
 8019fa4:	697b      	ldr	r3, [r7, #20]
 8019fa6:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 8019faa:	2304      	movs	r3, #4
 8019fac:	2236      	movs	r2, #54	@ 0x36
 8019fae:	f000 f85f 	bl	801a070 <dhcp_option>
 8019fb2:	4603      	mov	r3, r0
 8019fb4:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8019fb6:	89fc      	ldrh	r4, [r7, #14]
 8019fb8:	697b      	ldr	r3, [r7, #20]
 8019fba:	f103 05f0 	add.w	r5, r3, #240	@ 0xf0
 8019fbe:	693b      	ldr	r3, [r7, #16]
 8019fc0:	4618      	mov	r0, r3
 8019fc2:	f7f6 fc80 	bl	80108c6 <lwip_htonl>
 8019fc6:	4603      	mov	r3, r0
 8019fc8:	461a      	mov	r2, r3
 8019fca:	4629      	mov	r1, r5
 8019fcc:	4620      	mov	r0, r4
 8019fce:	f000 f8db 	bl	801a188 <dhcp_option_long>
 8019fd2:	4603      	mov	r3, r0
 8019fd4:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8019fd6:	89f8      	ldrh	r0, [r7, #14]
 8019fd8:	697b      	ldr	r3, [r7, #20]
 8019fda:	33f0      	adds	r3, #240	@ 0xf0
 8019fdc:	69ba      	ldr	r2, [r7, #24]
 8019fde:	4619      	mov	r1, r3
 8019fe0:	f000 fdbe 	bl	801ab60 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8019fe4:	4b13      	ldr	r3, [pc, #76]	@ (801a034 <dhcp_release_and_stop+0x12c>)
 8019fe6:	6818      	ldr	r0, [r3, #0]
 8019fe8:	f107 0210 	add.w	r2, r7, #16
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	9300      	str	r3, [sp, #0]
 8019ff0:	2343      	movs	r3, #67	@ 0x43
 8019ff2:	69b9      	ldr	r1, [r7, #24]
 8019ff4:	f7fe fc32 	bl	801885c <udp_sendto_if>
      pbuf_free(p_out);
 8019ff8:	69b8      	ldr	r0, [r7, #24]
 8019ffa:	f7f8 fb3b 	bl	8012674 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8019ffe:	4b0e      	ldr	r3, [pc, #56]	@ (801a038 <dhcp_release_and_stop+0x130>)
 801a000:	4a0d      	ldr	r2, [pc, #52]	@ (801a038 <dhcp_release_and_stop+0x130>)
 801a002:	490d      	ldr	r1, [pc, #52]	@ (801a038 <dhcp_release_and_stop+0x130>)
 801a004:	6878      	ldr	r0, [r7, #4]
 801a006:	f7f7 fe27 	bl	8011c58 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801a00a:	2100      	movs	r1, #0
 801a00c:	69f8      	ldr	r0, [r7, #28]
 801a00e:	f000 f815 	bl	801a03c <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 801a012:	69fb      	ldr	r3, [r7, #28]
 801a014:	791b      	ldrb	r3, [r3, #4]
 801a016:	2b00      	cmp	r3, #0
 801a018:	d008      	beq.n	801a02c <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801a01a:	f7fe ff6b 	bl	8018ef4 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 801a01e:	69fb      	ldr	r3, [r7, #28]
 801a020:	2200      	movs	r2, #0
 801a022:	711a      	strb	r2, [r3, #4]
 801a024:	e002      	b.n	801a02c <dhcp_release_and_stop+0x124>
    return;
 801a026:	bf00      	nop
 801a028:	e000      	b.n	801a02c <dhcp_release_and_stop+0x124>
    return;
 801a02a:	bf00      	nop
  }
}
 801a02c:	3720      	adds	r7, #32
 801a02e:	46bd      	mov	sp, r7
 801a030:	bdb0      	pop	{r4, r5, r7, pc}
 801a032:	bf00      	nop
 801a034:	2001b0a8 	.word	0x2001b0a8
 801a038:	080252e8 	.word	0x080252e8

0801a03c <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 801a03c:	b480      	push	{r7}
 801a03e:	b083      	sub	sp, #12
 801a040:	af00      	add	r7, sp, #0
 801a042:	6078      	str	r0, [r7, #4]
 801a044:	460b      	mov	r3, r1
 801a046:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	795b      	ldrb	r3, [r3, #5]
 801a04c:	78fa      	ldrb	r2, [r7, #3]
 801a04e:	429a      	cmp	r2, r3
 801a050:	d008      	beq.n	801a064 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	78fa      	ldrb	r2, [r7, #3]
 801a056:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	2200      	movs	r2, #0
 801a05c:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	2200      	movs	r2, #0
 801a062:	811a      	strh	r2, [r3, #8]
  }
}
 801a064:	bf00      	nop
 801a066:	370c      	adds	r7, #12
 801a068:	46bd      	mov	sp, r7
 801a06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a06e:	4770      	bx	lr

0801a070 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 801a070:	b580      	push	{r7, lr}
 801a072:	b082      	sub	sp, #8
 801a074:	af00      	add	r7, sp, #0
 801a076:	6039      	str	r1, [r7, #0]
 801a078:	4611      	mov	r1, r2
 801a07a:	461a      	mov	r2, r3
 801a07c:	4603      	mov	r3, r0
 801a07e:	80fb      	strh	r3, [r7, #6]
 801a080:	460b      	mov	r3, r1
 801a082:	717b      	strb	r3, [r7, #5]
 801a084:	4613      	mov	r3, r2
 801a086:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 801a088:	88fa      	ldrh	r2, [r7, #6]
 801a08a:	793b      	ldrb	r3, [r7, #4]
 801a08c:	4413      	add	r3, r2
 801a08e:	3302      	adds	r3, #2
 801a090:	2b44      	cmp	r3, #68	@ 0x44
 801a092:	d906      	bls.n	801a0a2 <dhcp_option+0x32>
 801a094:	4b0d      	ldr	r3, [pc, #52]	@ (801a0cc <dhcp_option+0x5c>)
 801a096:	f240 529a 	movw	r2, #1434	@ 0x59a
 801a09a:	490d      	ldr	r1, [pc, #52]	@ (801a0d0 <dhcp_option+0x60>)
 801a09c:	480d      	ldr	r0, [pc, #52]	@ (801a0d4 <dhcp_option+0x64>)
 801a09e:	f004 fb2f 	bl	801e700 <iprintf>
  options[options_out_len++] = option_type;
 801a0a2:	88fb      	ldrh	r3, [r7, #6]
 801a0a4:	1c5a      	adds	r2, r3, #1
 801a0a6:	80fa      	strh	r2, [r7, #6]
 801a0a8:	461a      	mov	r2, r3
 801a0aa:	683b      	ldr	r3, [r7, #0]
 801a0ac:	4413      	add	r3, r2
 801a0ae:	797a      	ldrb	r2, [r7, #5]
 801a0b0:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 801a0b2:	88fb      	ldrh	r3, [r7, #6]
 801a0b4:	1c5a      	adds	r2, r3, #1
 801a0b6:	80fa      	strh	r2, [r7, #6]
 801a0b8:	461a      	mov	r2, r3
 801a0ba:	683b      	ldr	r3, [r7, #0]
 801a0bc:	4413      	add	r3, r2
 801a0be:	793a      	ldrb	r2, [r7, #4]
 801a0c0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a0c2:	88fb      	ldrh	r3, [r7, #6]
}
 801a0c4:	4618      	mov	r0, r3
 801a0c6:	3708      	adds	r7, #8
 801a0c8:	46bd      	mov	sp, r7
 801a0ca:	bd80      	pop	{r7, pc}
 801a0cc:	08024510 	.word	0x08024510
 801a0d0:	080246a4 	.word	0x080246a4
 801a0d4:	08024570 	.word	0x08024570

0801a0d8 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801a0d8:	b580      	push	{r7, lr}
 801a0da:	b082      	sub	sp, #8
 801a0dc:	af00      	add	r7, sp, #0
 801a0de:	4603      	mov	r3, r0
 801a0e0:	6039      	str	r1, [r7, #0]
 801a0e2:	80fb      	strh	r3, [r7, #6]
 801a0e4:	4613      	mov	r3, r2
 801a0e6:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801a0e8:	88fb      	ldrh	r3, [r7, #6]
 801a0ea:	2b43      	cmp	r3, #67	@ 0x43
 801a0ec:	d906      	bls.n	801a0fc <dhcp_option_byte+0x24>
 801a0ee:	4b0a      	ldr	r3, [pc, #40]	@ (801a118 <dhcp_option_byte+0x40>)
 801a0f0:	f240 52a6 	movw	r2, #1446	@ 0x5a6
 801a0f4:	4909      	ldr	r1, [pc, #36]	@ (801a11c <dhcp_option_byte+0x44>)
 801a0f6:	480a      	ldr	r0, [pc, #40]	@ (801a120 <dhcp_option_byte+0x48>)
 801a0f8:	f004 fb02 	bl	801e700 <iprintf>
  options[options_out_len++] = value;
 801a0fc:	88fb      	ldrh	r3, [r7, #6]
 801a0fe:	1c5a      	adds	r2, r3, #1
 801a100:	80fa      	strh	r2, [r7, #6]
 801a102:	461a      	mov	r2, r3
 801a104:	683b      	ldr	r3, [r7, #0]
 801a106:	4413      	add	r3, r2
 801a108:	797a      	ldrb	r2, [r7, #5]
 801a10a:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a10c:	88fb      	ldrh	r3, [r7, #6]
}
 801a10e:	4618      	mov	r0, r3
 801a110:	3708      	adds	r7, #8
 801a112:	46bd      	mov	sp, r7
 801a114:	bd80      	pop	{r7, pc}
 801a116:	bf00      	nop
 801a118:	08024510 	.word	0x08024510
 801a11c:	080246e8 	.word	0x080246e8
 801a120:	08024570 	.word	0x08024570

0801a124 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 801a124:	b580      	push	{r7, lr}
 801a126:	b082      	sub	sp, #8
 801a128:	af00      	add	r7, sp, #0
 801a12a:	4603      	mov	r3, r0
 801a12c:	6039      	str	r1, [r7, #0]
 801a12e:	80fb      	strh	r3, [r7, #6]
 801a130:	4613      	mov	r3, r2
 801a132:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801a134:	88fb      	ldrh	r3, [r7, #6]
 801a136:	3302      	adds	r3, #2
 801a138:	2b44      	cmp	r3, #68	@ 0x44
 801a13a:	d906      	bls.n	801a14a <dhcp_option_short+0x26>
 801a13c:	4b0f      	ldr	r3, [pc, #60]	@ (801a17c <dhcp_option_short+0x58>)
 801a13e:	f240 52ae 	movw	r2, #1454	@ 0x5ae
 801a142:	490f      	ldr	r1, [pc, #60]	@ (801a180 <dhcp_option_short+0x5c>)
 801a144:	480f      	ldr	r0, [pc, #60]	@ (801a184 <dhcp_option_short+0x60>)
 801a146:	f004 fadb 	bl	801e700 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801a14a:	88bb      	ldrh	r3, [r7, #4]
 801a14c:	0a1b      	lsrs	r3, r3, #8
 801a14e:	b29a      	uxth	r2, r3
 801a150:	88fb      	ldrh	r3, [r7, #6]
 801a152:	1c59      	adds	r1, r3, #1
 801a154:	80f9      	strh	r1, [r7, #6]
 801a156:	4619      	mov	r1, r3
 801a158:	683b      	ldr	r3, [r7, #0]
 801a15a:	440b      	add	r3, r1
 801a15c:	b2d2      	uxtb	r2, r2
 801a15e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 801a160:	88fb      	ldrh	r3, [r7, #6]
 801a162:	1c5a      	adds	r2, r3, #1
 801a164:	80fa      	strh	r2, [r7, #6]
 801a166:	461a      	mov	r2, r3
 801a168:	683b      	ldr	r3, [r7, #0]
 801a16a:	4413      	add	r3, r2
 801a16c:	88ba      	ldrh	r2, [r7, #4]
 801a16e:	b2d2      	uxtb	r2, r2
 801a170:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a172:	88fb      	ldrh	r3, [r7, #6]
}
 801a174:	4618      	mov	r0, r3
 801a176:	3708      	adds	r7, #8
 801a178:	46bd      	mov	sp, r7
 801a17a:	bd80      	pop	{r7, pc}
 801a17c:	08024510 	.word	0x08024510
 801a180:	08024720 	.word	0x08024720
 801a184:	08024570 	.word	0x08024570

0801a188 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 801a188:	b580      	push	{r7, lr}
 801a18a:	b084      	sub	sp, #16
 801a18c:	af00      	add	r7, sp, #0
 801a18e:	4603      	mov	r3, r0
 801a190:	60b9      	str	r1, [r7, #8]
 801a192:	607a      	str	r2, [r7, #4]
 801a194:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801a196:	89fb      	ldrh	r3, [r7, #14]
 801a198:	3304      	adds	r3, #4
 801a19a:	2b44      	cmp	r3, #68	@ 0x44
 801a19c:	d906      	bls.n	801a1ac <dhcp_option_long+0x24>
 801a19e:	4b19      	ldr	r3, [pc, #100]	@ (801a204 <dhcp_option_long+0x7c>)
 801a1a0:	f240 52b7 	movw	r2, #1463	@ 0x5b7
 801a1a4:	4918      	ldr	r1, [pc, #96]	@ (801a208 <dhcp_option_long+0x80>)
 801a1a6:	4819      	ldr	r0, [pc, #100]	@ (801a20c <dhcp_option_long+0x84>)
 801a1a8:	f004 faaa 	bl	801e700 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	0e1a      	lsrs	r2, r3, #24
 801a1b0:	89fb      	ldrh	r3, [r7, #14]
 801a1b2:	1c59      	adds	r1, r3, #1
 801a1b4:	81f9      	strh	r1, [r7, #14]
 801a1b6:	4619      	mov	r1, r3
 801a1b8:	68bb      	ldr	r3, [r7, #8]
 801a1ba:	440b      	add	r3, r1
 801a1bc:	b2d2      	uxtb	r2, r2
 801a1be:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	0c1a      	lsrs	r2, r3, #16
 801a1c4:	89fb      	ldrh	r3, [r7, #14]
 801a1c6:	1c59      	adds	r1, r3, #1
 801a1c8:	81f9      	strh	r1, [r7, #14]
 801a1ca:	4619      	mov	r1, r3
 801a1cc:	68bb      	ldr	r3, [r7, #8]
 801a1ce:	440b      	add	r3, r1
 801a1d0:	b2d2      	uxtb	r2, r2
 801a1d2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	0a1a      	lsrs	r2, r3, #8
 801a1d8:	89fb      	ldrh	r3, [r7, #14]
 801a1da:	1c59      	adds	r1, r3, #1
 801a1dc:	81f9      	strh	r1, [r7, #14]
 801a1de:	4619      	mov	r1, r3
 801a1e0:	68bb      	ldr	r3, [r7, #8]
 801a1e2:	440b      	add	r3, r1
 801a1e4:	b2d2      	uxtb	r2, r2
 801a1e6:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801a1e8:	89fb      	ldrh	r3, [r7, #14]
 801a1ea:	1c5a      	adds	r2, r3, #1
 801a1ec:	81fa      	strh	r2, [r7, #14]
 801a1ee:	461a      	mov	r2, r3
 801a1f0:	68bb      	ldr	r3, [r7, #8]
 801a1f2:	4413      	add	r3, r2
 801a1f4:	687a      	ldr	r2, [r7, #4]
 801a1f6:	b2d2      	uxtb	r2, r2
 801a1f8:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801a1fa:	89fb      	ldrh	r3, [r7, #14]
}
 801a1fc:	4618      	mov	r0, r3
 801a1fe:	3710      	adds	r7, #16
 801a200:	46bd      	mov	sp, r7
 801a202:	bd80      	pop	{r7, pc}
 801a204:	08024510 	.word	0x08024510
 801a208:	0802475c 	.word	0x0802475c
 801a20c:	08024570 	.word	0x08024570

0801a210 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 801a210:	b580      	push	{r7, lr}
 801a212:	b090      	sub	sp, #64	@ 0x40
 801a214:	af00      	add	r7, sp, #0
 801a216:	6078      	str	r0, [r7, #4]
 801a218:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801a21a:	2300      	movs	r3, #0
 801a21c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int parse_sname_as_options = 0;
 801a21e:	2300      	movs	r3, #0
 801a220:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 801a222:	220a      	movs	r2, #10
 801a224:	2100      	movs	r1, #0
 801a226:	48ba      	ldr	r0, [pc, #744]	@ (801a510 <dhcp_parse_reply+0x300>)
 801a228:	f004 fb9e 	bl	801e968 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 801a22c:	687b      	ldr	r3, [r7, #4]
 801a22e:	895b      	ldrh	r3, [r3, #10]
 801a230:	2b2b      	cmp	r3, #43	@ 0x2b
 801a232:	d802      	bhi.n	801a23a <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 801a234:	f06f 0301 	mvn.w	r3, #1
 801a238:	e2ea      	b.n	801a810 <dhcp_parse_reply+0x600>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	685b      	ldr	r3, [r3, #4]
 801a23e:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 801a240:	23f0      	movs	r3, #240	@ 0xf0
 801a242:	86fb      	strh	r3, [r7, #54]	@ 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	891b      	ldrh	r3, [r3, #8]
 801a248:	86bb      	strh	r3, [r7, #52]	@ 0x34
again:
  q = p;
 801a24a:	687b      	ldr	r3, [r7, #4]
 801a24c:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801a24e:	e00c      	b.n	801a26a <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 801a250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a252:	895b      	ldrh	r3, [r3, #10]
 801a254:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801a256:	1ad3      	subs	r3, r2, r3
 801a258:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801a25a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a25c:	895b      	ldrh	r3, [r3, #10]
 801a25e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 801a260:	1ad3      	subs	r3, r2, r3
 801a262:	86bb      	strh	r3, [r7, #52]	@ 0x34
    q = q->next;
 801a264:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	633b      	str	r3, [r7, #48]	@ 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801a26a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a26c:	2b00      	cmp	r3, #0
 801a26e:	d004      	beq.n	801a27a <dhcp_parse_reply+0x6a>
 801a270:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a272:	895b      	ldrh	r3, [r3, #10]
 801a274:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801a276:	429a      	cmp	r2, r3
 801a278:	d2ea      	bcs.n	801a250 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 801a27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a27c:	2b00      	cmp	r3, #0
 801a27e:	d102      	bne.n	801a286 <dhcp_parse_reply+0x76>
    return ERR_BUF;
 801a280:	f06f 0301 	mvn.w	r3, #1
 801a284:	e2c4      	b.n	801a810 <dhcp_parse_reply+0x600>
  }
  offset = options_idx;
 801a286:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a288:	877b      	strh	r3, [r7, #58]	@ 0x3a
  offset_max = options_idx_max;
 801a28a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801a28c:	873b      	strh	r3, [r7, #56]	@ 0x38
  options = (u8_t *)q->payload;
 801a28e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a290:	685b      	ldr	r3, [r3, #4]
 801a292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801a294:	e267      	b.n	801a766 <dhcp_parse_reply+0x556>
    u8_t op = options[offset];
 801a296:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a298:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a29a:	4413      	add	r3, r2
 801a29c:	781b      	ldrb	r3, [r3, #0]
 801a29e:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 801a2a0:	2300      	movs	r3, #0
 801a2a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    int decode_idx = -1;
 801a2a6:	f04f 33ff 	mov.w	r3, #4294967295
 801a2aa:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 801a2ac:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a2ae:	3302      	adds	r3, #2
 801a2b0:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 801a2b2:	8bfa      	ldrh	r2, [r7, #30]
 801a2b4:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a2b6:	429a      	cmp	r2, r3
 801a2b8:	d202      	bcs.n	801a2c0 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 801a2ba:	f06f 0301 	mvn.w	r3, #1
 801a2be:	e2a7      	b.n	801a810 <dhcp_parse_reply+0x600>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801a2c0:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a2c2:	3301      	adds	r3, #1
 801a2c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a2c6:	8952      	ldrh	r2, [r2, #10]
 801a2c8:	4293      	cmp	r3, r2
 801a2ca:	da07      	bge.n	801a2dc <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 801a2cc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a2ce:	3301      	adds	r3, #1
 801a2d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a2d2:	4413      	add	r3, r2
 801a2d4:	781b      	ldrb	r3, [r3, #0]
 801a2d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a2da:	e00b      	b.n	801a2f4 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 801a2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	d004      	beq.n	801a2ee <dhcp_parse_reply+0xde>
 801a2e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	685b      	ldr	r3, [r3, #4]
 801a2ea:	781b      	ldrb	r3, [r3, #0]
 801a2ec:	e000      	b.n	801a2f0 <dhcp_parse_reply+0xe0>
 801a2ee:	2300      	movs	r3, #0
 801a2f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801a2f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a2f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    switch (op) {
 801a2fc:	7dfb      	ldrb	r3, [r7, #23]
 801a2fe:	2b3b      	cmp	r3, #59	@ 0x3b
 801a300:	f200 815a 	bhi.w	801a5b8 <dhcp_parse_reply+0x3a8>
 801a304:	a201      	add	r2, pc, #4	@ (adr r2, 801a30c <dhcp_parse_reply+0xfc>)
 801a306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a30a:	bf00      	nop
 801a30c:	0801a3fd 	.word	0x0801a3fd
 801a310:	0801a40d 	.word	0x0801a40d
 801a314:	0801a5b9 	.word	0x0801a5b9
 801a318:	0801a42f 	.word	0x0801a42f
 801a31c:	0801a5b9 	.word	0x0801a5b9
 801a320:	0801a5b9 	.word	0x0801a5b9
 801a324:	0801a45b 	.word	0x0801a45b
 801a328:	0801a5b9 	.word	0x0801a5b9
 801a32c:	0801a5b9 	.word	0x0801a5b9
 801a330:	0801a5b9 	.word	0x0801a5b9
 801a334:	0801a5b9 	.word	0x0801a5b9
 801a338:	0801a5b9 	.word	0x0801a5b9
 801a33c:	0801a5b9 	.word	0x0801a5b9
 801a340:	0801a5b9 	.word	0x0801a5b9
 801a344:	0801a5b9 	.word	0x0801a5b9
 801a348:	0801a5b9 	.word	0x0801a5b9
 801a34c:	0801a5b9 	.word	0x0801a5b9
 801a350:	0801a5b9 	.word	0x0801a5b9
 801a354:	0801a5b9 	.word	0x0801a5b9
 801a358:	0801a5b9 	.word	0x0801a5b9
 801a35c:	0801a5b9 	.word	0x0801a5b9
 801a360:	0801a5b9 	.word	0x0801a5b9
 801a364:	0801a5b9 	.word	0x0801a5b9
 801a368:	0801a5b9 	.word	0x0801a5b9
 801a36c:	0801a5b9 	.word	0x0801a5b9
 801a370:	0801a5b9 	.word	0x0801a5b9
 801a374:	0801a5b9 	.word	0x0801a5b9
 801a378:	0801a5b9 	.word	0x0801a5b9
 801a37c:	0801a5b9 	.word	0x0801a5b9
 801a380:	0801a5b9 	.word	0x0801a5b9
 801a384:	0801a5b9 	.word	0x0801a5b9
 801a388:	0801a5b9 	.word	0x0801a5b9
 801a38c:	0801a5b9 	.word	0x0801a5b9
 801a390:	0801a5b9 	.word	0x0801a5b9
 801a394:	0801a5b9 	.word	0x0801a5b9
 801a398:	0801a5b9 	.word	0x0801a5b9
 801a39c:	0801a5b9 	.word	0x0801a5b9
 801a3a0:	0801a5b9 	.word	0x0801a5b9
 801a3a4:	0801a5b9 	.word	0x0801a5b9
 801a3a8:	0801a5b9 	.word	0x0801a5b9
 801a3ac:	0801a5b9 	.word	0x0801a5b9
 801a3b0:	0801a5b9 	.word	0x0801a5b9
 801a3b4:	0801a5b9 	.word	0x0801a5b9
 801a3b8:	0801a5b9 	.word	0x0801a5b9
 801a3bc:	0801a5b9 	.word	0x0801a5b9
 801a3c0:	0801a5b9 	.word	0x0801a5b9
 801a3c4:	0801a5b9 	.word	0x0801a5b9
 801a3c8:	0801a5b9 	.word	0x0801a5b9
 801a3cc:	0801a5b9 	.word	0x0801a5b9
 801a3d0:	0801a5b9 	.word	0x0801a5b9
 801a3d4:	0801a5b9 	.word	0x0801a5b9
 801a3d8:	0801a4b1 	.word	0x0801a4b1
 801a3dc:	0801a4d3 	.word	0x0801a4d3
 801a3e0:	0801a531 	.word	0x0801a531
 801a3e4:	0801a553 	.word	0x0801a553
 801a3e8:	0801a5b9 	.word	0x0801a5b9
 801a3ec:	0801a5b9 	.word	0x0801a5b9
 801a3f0:	0801a5b9 	.word	0x0801a5b9
 801a3f4:	0801a575 	.word	0x0801a575
 801a3f8:	0801a597 	.word	0x0801a597
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 801a3fc:	2300      	movs	r3, #0
 801a3fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a402:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a406:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        /* will be increased below */
        break;
 801a40a:	e0d9      	b.n	801a5c0 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a40c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a410:	2b04      	cmp	r3, #4
 801a412:	d009      	beq.n	801a428 <dhcp_parse_reply+0x218>
 801a414:	4b3f      	ldr	r3, [pc, #252]	@ (801a514 <dhcp_parse_reply+0x304>)
 801a416:	f240 622e 	movw	r2, #1582	@ 0x62e
 801a41a:	493f      	ldr	r1, [pc, #252]	@ (801a518 <dhcp_parse_reply+0x308>)
 801a41c:	483f      	ldr	r0, [pc, #252]	@ (801a51c <dhcp_parse_reply+0x30c>)
 801a41e:	f004 f96f 	bl	801e700 <iprintf>
 801a422:	f06f 0305 	mvn.w	r3, #5
 801a426:	e1f3      	b.n	801a810 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801a428:	2306      	movs	r3, #6
 801a42a:	623b      	str	r3, [r7, #32]
        break;
 801a42c:	e0c8      	b.n	801a5c0 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 801a42e:	2304      	movs	r3, #4
 801a430:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801a434:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a438:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a43c:	429a      	cmp	r2, r3
 801a43e:	d209      	bcs.n	801a454 <dhcp_parse_reply+0x244>
 801a440:	4b34      	ldr	r3, [pc, #208]	@ (801a514 <dhcp_parse_reply+0x304>)
 801a442:	f240 6233 	movw	r2, #1587	@ 0x633
 801a446:	4936      	ldr	r1, [pc, #216]	@ (801a520 <dhcp_parse_reply+0x310>)
 801a448:	4834      	ldr	r0, [pc, #208]	@ (801a51c <dhcp_parse_reply+0x30c>)
 801a44a:	f004 f959 	bl	801e700 <iprintf>
 801a44e:	f06f 0305 	mvn.w	r3, #5
 801a452:	e1dd      	b.n	801a810 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 801a454:	2307      	movs	r3, #7
 801a456:	623b      	str	r3, [r7, #32]
        break;
 801a458:	e0b2      	b.n	801a5c0 <dhcp_parse_reply+0x3b0>
#if LWIP_DHCP_PROVIDE_DNS_SERVERS
      case (DHCP_OPTION_DNS_SERVER):
        /* special case: there might be more than one server */
        LWIP_ERROR("len %% 4 == 0", len % 4 == 0, return ERR_VAL;);
 801a45a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a45e:	f003 0303 	and.w	r3, r3, #3
 801a462:	b2db      	uxtb	r3, r3
 801a464:	2b00      	cmp	r3, #0
 801a466:	d009      	beq.n	801a47c <dhcp_parse_reply+0x26c>
 801a468:	4b2a      	ldr	r3, [pc, #168]	@ (801a514 <dhcp_parse_reply+0x304>)
 801a46a:	f240 6239 	movw	r2, #1593	@ 0x639
 801a46e:	492d      	ldr	r1, [pc, #180]	@ (801a524 <dhcp_parse_reply+0x314>)
 801a470:	482a      	ldr	r0, [pc, #168]	@ (801a51c <dhcp_parse_reply+0x30c>)
 801a472:	f004 f945 	bl	801e700 <iprintf>
 801a476:	f06f 0305 	mvn.w	r3, #5
 801a47a:	e1c9      	b.n	801a810 <dhcp_parse_reply+0x600>
        /* limit number of DNS servers */
        decode_len = LWIP_MIN(len, 4 * DNS_MAX_SERVERS);
 801a47c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a480:	2b08      	cmp	r3, #8
 801a482:	bf28      	it	cs
 801a484:	2308      	movcs	r3, #8
 801a486:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 801a48a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a48e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a492:	429a      	cmp	r2, r3
 801a494:	d209      	bcs.n	801a4aa <dhcp_parse_reply+0x29a>
 801a496:	4b1f      	ldr	r3, [pc, #124]	@ (801a514 <dhcp_parse_reply+0x304>)
 801a498:	f240 623c 	movw	r2, #1596	@ 0x63c
 801a49c:	4920      	ldr	r1, [pc, #128]	@ (801a520 <dhcp_parse_reply+0x310>)
 801a49e:	481f      	ldr	r0, [pc, #124]	@ (801a51c <dhcp_parse_reply+0x30c>)
 801a4a0:	f004 f92e 	bl	801e700 <iprintf>
 801a4a4:	f06f 0305 	mvn.w	r3, #5
 801a4a8:	e1b2      	b.n	801a810 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
 801a4aa:	2308      	movs	r3, #8
 801a4ac:	623b      	str	r3, [r7, #32]
        break;
 801a4ae:	e087      	b.n	801a5c0 <dhcp_parse_reply+0x3b0>
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a4b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a4b4:	2b04      	cmp	r3, #4
 801a4b6:	d009      	beq.n	801a4cc <dhcp_parse_reply+0x2bc>
 801a4b8:	4b16      	ldr	r3, [pc, #88]	@ (801a514 <dhcp_parse_reply+0x304>)
 801a4ba:	f240 6241 	movw	r2, #1601	@ 0x641
 801a4be:	4916      	ldr	r1, [pc, #88]	@ (801a518 <dhcp_parse_reply+0x308>)
 801a4c0:	4816      	ldr	r0, [pc, #88]	@ (801a51c <dhcp_parse_reply+0x30c>)
 801a4c2:	f004 f91d 	bl	801e700 <iprintf>
 801a4c6:	f06f 0305 	mvn.w	r3, #5
 801a4ca:	e1a1      	b.n	801a810 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 801a4cc:	2303      	movs	r3, #3
 801a4ce:	623b      	str	r3, [r7, #32]
        break;
 801a4d0:	e076      	b.n	801a5c0 <dhcp_parse_reply+0x3b0>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801a4d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a4d6:	2b01      	cmp	r3, #1
 801a4d8:	d009      	beq.n	801a4ee <dhcp_parse_reply+0x2de>
 801a4da:	4b0e      	ldr	r3, [pc, #56]	@ (801a514 <dhcp_parse_reply+0x304>)
 801a4dc:	f240 624f 	movw	r2, #1615	@ 0x64f
 801a4e0:	4911      	ldr	r1, [pc, #68]	@ (801a528 <dhcp_parse_reply+0x318>)
 801a4e2:	480e      	ldr	r0, [pc, #56]	@ (801a51c <dhcp_parse_reply+0x30c>)
 801a4e4:	f004 f90c 	bl	801e700 <iprintf>
 801a4e8:	f06f 0305 	mvn.w	r3, #5
 801a4ec:	e190      	b.n	801a810 <dhcp_parse_reply+0x600>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 801a4ee:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801a4f0:	2bf0      	cmp	r3, #240	@ 0xf0
 801a4f2:	d009      	beq.n	801a508 <dhcp_parse_reply+0x2f8>
 801a4f4:	4b07      	ldr	r3, [pc, #28]	@ (801a514 <dhcp_parse_reply+0x304>)
 801a4f6:	f240 6251 	movw	r2, #1617	@ 0x651
 801a4fa:	490c      	ldr	r1, [pc, #48]	@ (801a52c <dhcp_parse_reply+0x31c>)
 801a4fc:	4807      	ldr	r0, [pc, #28]	@ (801a51c <dhcp_parse_reply+0x30c>)
 801a4fe:	f004 f8ff 	bl	801e700 <iprintf>
 801a502:	f06f 0305 	mvn.w	r3, #5
 801a506:	e183      	b.n	801a810 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801a508:	2300      	movs	r3, #0
 801a50a:	623b      	str	r3, [r7, #32]
        break;
 801a50c:	e058      	b.n	801a5c0 <dhcp_parse_reply+0x3b0>
 801a50e:	bf00      	nop
 801a510:	2001b09c 	.word	0x2001b09c
 801a514:	08024510 	.word	0x08024510
 801a518:	08024798 	.word	0x08024798
 801a51c:	08024570 	.word	0x08024570
 801a520:	080247a4 	.word	0x080247a4
 801a524:	080247b8 	.word	0x080247b8
 801a528:	080247c8 	.word	0x080247c8
 801a52c:	080247d4 	.word	0x080247d4
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 801a530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a534:	2b01      	cmp	r3, #1
 801a536:	d009      	beq.n	801a54c <dhcp_parse_reply+0x33c>
 801a538:	4b9d      	ldr	r3, [pc, #628]	@ (801a7b0 <dhcp_parse_reply+0x5a0>)
 801a53a:	f240 6255 	movw	r2, #1621	@ 0x655
 801a53e:	499d      	ldr	r1, [pc, #628]	@ (801a7b4 <dhcp_parse_reply+0x5a4>)
 801a540:	489d      	ldr	r0, [pc, #628]	@ (801a7b8 <dhcp_parse_reply+0x5a8>)
 801a542:	f004 f8dd 	bl	801e700 <iprintf>
 801a546:	f06f 0305 	mvn.w	r3, #5
 801a54a:	e161      	b.n	801a810 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801a54c:	2301      	movs	r3, #1
 801a54e:	623b      	str	r3, [r7, #32]
        break;
 801a550:	e036      	b.n	801a5c0 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a552:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a556:	2b04      	cmp	r3, #4
 801a558:	d009      	beq.n	801a56e <dhcp_parse_reply+0x35e>
 801a55a:	4b95      	ldr	r3, [pc, #596]	@ (801a7b0 <dhcp_parse_reply+0x5a0>)
 801a55c:	f240 6259 	movw	r2, #1625	@ 0x659
 801a560:	4996      	ldr	r1, [pc, #600]	@ (801a7bc <dhcp_parse_reply+0x5ac>)
 801a562:	4895      	ldr	r0, [pc, #596]	@ (801a7b8 <dhcp_parse_reply+0x5a8>)
 801a564:	f004 f8cc 	bl	801e700 <iprintf>
 801a568:	f06f 0305 	mvn.w	r3, #5
 801a56c:	e150      	b.n	801a810 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801a56e:	2302      	movs	r3, #2
 801a570:	623b      	str	r3, [r7, #32]
        break;
 801a572:	e025      	b.n	801a5c0 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a574:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a578:	2b04      	cmp	r3, #4
 801a57a:	d009      	beq.n	801a590 <dhcp_parse_reply+0x380>
 801a57c:	4b8c      	ldr	r3, [pc, #560]	@ (801a7b0 <dhcp_parse_reply+0x5a0>)
 801a57e:	f240 625d 	movw	r2, #1629	@ 0x65d
 801a582:	498e      	ldr	r1, [pc, #568]	@ (801a7bc <dhcp_parse_reply+0x5ac>)
 801a584:	488c      	ldr	r0, [pc, #560]	@ (801a7b8 <dhcp_parse_reply+0x5a8>)
 801a586:	f004 f8bb 	bl	801e700 <iprintf>
 801a58a:	f06f 0305 	mvn.w	r3, #5
 801a58e:	e13f      	b.n	801a810 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T1;
 801a590:	2304      	movs	r3, #4
 801a592:	623b      	str	r3, [r7, #32]
        break;
 801a594:	e014      	b.n	801a5c0 <dhcp_parse_reply+0x3b0>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801a596:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a59a:	2b04      	cmp	r3, #4
 801a59c:	d009      	beq.n	801a5b2 <dhcp_parse_reply+0x3a2>
 801a59e:	4b84      	ldr	r3, [pc, #528]	@ (801a7b0 <dhcp_parse_reply+0x5a0>)
 801a5a0:	f240 6261 	movw	r2, #1633	@ 0x661
 801a5a4:	4985      	ldr	r1, [pc, #532]	@ (801a7bc <dhcp_parse_reply+0x5ac>)
 801a5a6:	4884      	ldr	r0, [pc, #528]	@ (801a7b8 <dhcp_parse_reply+0x5a8>)
 801a5a8:	f004 f8aa 	bl	801e700 <iprintf>
 801a5ac:	f06f 0305 	mvn.w	r3, #5
 801a5b0:	e12e      	b.n	801a810 <dhcp_parse_reply+0x600>
        decode_idx = DHCP_OPTION_IDX_T2;
 801a5b2:	2305      	movs	r3, #5
 801a5b4:	623b      	str	r3, [r7, #32]
        break;
 801a5b6:	e003      	b.n	801a5c0 <dhcp_parse_reply+0x3b0>
      default:
        decode_len = 0;
 801a5b8:	2300      	movs	r3, #0
 801a5ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 801a5be:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 801a5c0:	7dfb      	ldrb	r3, [r7, #23]
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d103      	bne.n	801a5ce <dhcp_parse_reply+0x3be>
      offset++;
 801a5c6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a5c8:	3301      	adds	r3, #1
 801a5ca:	877b      	strh	r3, [r7, #58]	@ 0x3a
 801a5cc:	e0a1      	b.n	801a712 <dhcp_parse_reply+0x502>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 801a5ce:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a5d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a5d4:	4413      	add	r3, r2
 801a5d6:	f64f 72fd 	movw	r2, #65533	@ 0xfffd
 801a5da:	4293      	cmp	r3, r2
 801a5dc:	dd02      	ble.n	801a5e4 <dhcp_parse_reply+0x3d4>
        /* overflow */
        return ERR_BUF;
 801a5de:	f06f 0301 	mvn.w	r3, #1
 801a5e2:	e115      	b.n	801a810 <dhcp_parse_reply+0x600>
      }
      offset = (u16_t)(offset + len + 2);
 801a5e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a5e8:	b29a      	uxth	r2, r3
 801a5ea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a5ec:	4413      	add	r3, r2
 801a5ee:	b29b      	uxth	r3, r3
 801a5f0:	3302      	adds	r3, #2
 801a5f2:	877b      	strh	r3, [r7, #58]	@ 0x3a
      if (decode_len > 0) {
 801a5f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	f000 808a 	beq.w	801a712 <dhcp_parse_reply+0x502>
        u32_t value = 0;
 801a5fe:	2300      	movs	r3, #0
 801a600:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 801a602:	6a3b      	ldr	r3, [r7, #32]
 801a604:	2b00      	cmp	r3, #0
 801a606:	db02      	blt.n	801a60e <dhcp_parse_reply+0x3fe>
 801a608:	6a3b      	ldr	r3, [r7, #32]
 801a60a:	2b09      	cmp	r3, #9
 801a60c:	dd06      	ble.n	801a61c <dhcp_parse_reply+0x40c>
 801a60e:	4b68      	ldr	r3, [pc, #416]	@ (801a7b0 <dhcp_parse_reply+0x5a0>)
 801a610:	f44f 62cf 	mov.w	r2, #1656	@ 0x678
 801a614:	496a      	ldr	r1, [pc, #424]	@ (801a7c0 <dhcp_parse_reply+0x5b0>)
 801a616:	4868      	ldr	r0, [pc, #416]	@ (801a7b8 <dhcp_parse_reply+0x5a8>)
 801a618:	f004 f872 	bl	801e700 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 801a61c:	4a69      	ldr	r2, [pc, #420]	@ (801a7c4 <dhcp_parse_reply+0x5b4>)
 801a61e:	6a3b      	ldr	r3, [r7, #32]
 801a620:	4413      	add	r3, r2
 801a622:	781b      	ldrb	r3, [r3, #0]
 801a624:	2b00      	cmp	r3, #0
 801a626:	d174      	bne.n	801a712 <dhcp_parse_reply+0x502>
          copy_len = LWIP_MIN(decode_len, 4);
 801a628:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a62c:	2b04      	cmp	r3, #4
 801a62e:	bf28      	it	cs
 801a630:	2304      	movcs	r3, #4
 801a632:	b2db      	uxtb	r3, r3
 801a634:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801a636:	8bfb      	ldrh	r3, [r7, #30]
 801a638:	8aba      	ldrh	r2, [r7, #20]
 801a63a:	f107 0108 	add.w	r1, r7, #8
 801a63e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801a640:	f7f8 fa1e 	bl	8012a80 <pbuf_copy_partial>
 801a644:	4603      	mov	r3, r0
 801a646:	461a      	mov	r2, r3
 801a648:	8abb      	ldrh	r3, [r7, #20]
 801a64a:	4293      	cmp	r3, r2
 801a64c:	d002      	beq.n	801a654 <dhcp_parse_reply+0x444>
            return ERR_BUF;
 801a64e:	f06f 0301 	mvn.w	r3, #1
 801a652:	e0dd      	b.n	801a810 <dhcp_parse_reply+0x600>
          }
          if (decode_len > 4) {
 801a654:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a658:	2b04      	cmp	r3, #4
 801a65a:	d933      	bls.n	801a6c4 <dhcp_parse_reply+0x4b4>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 801a65c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a660:	f003 0303 	and.w	r3, r3, #3
 801a664:	b2db      	uxtb	r3, r3
 801a666:	2b00      	cmp	r3, #0
 801a668:	d009      	beq.n	801a67e <dhcp_parse_reply+0x46e>
 801a66a:	4b51      	ldr	r3, [pc, #324]	@ (801a7b0 <dhcp_parse_reply+0x5a0>)
 801a66c:	f240 6281 	movw	r2, #1665	@ 0x681
 801a670:	4955      	ldr	r1, [pc, #340]	@ (801a7c8 <dhcp_parse_reply+0x5b8>)
 801a672:	4851      	ldr	r0, [pc, #324]	@ (801a7b8 <dhcp_parse_reply+0x5a8>)
 801a674:	f004 f844 	bl	801e700 <iprintf>
 801a678:	f06f 0305 	mvn.w	r3, #5
 801a67c:	e0c8      	b.n	801a810 <dhcp_parse_reply+0x600>
            dhcp_got_option(dhcp, decode_idx);
 801a67e:	4a51      	ldr	r2, [pc, #324]	@ (801a7c4 <dhcp_parse_reply+0x5b4>)
 801a680:	6a3b      	ldr	r3, [r7, #32]
 801a682:	4413      	add	r3, r2
 801a684:	2201      	movs	r2, #1
 801a686:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801a688:	68bb      	ldr	r3, [r7, #8]
 801a68a:	4618      	mov	r0, r3
 801a68c:	f7f6 f91b 	bl	80108c6 <lwip_htonl>
 801a690:	4602      	mov	r2, r0
 801a692:	494e      	ldr	r1, [pc, #312]	@ (801a7cc <dhcp_parse_reply+0x5bc>)
 801a694:	6a3b      	ldr	r3, [r7, #32]
 801a696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 801a69a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a69e:	3b04      	subs	r3, #4
 801a6a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801a6a4:	8bfb      	ldrh	r3, [r7, #30]
 801a6a6:	3304      	adds	r3, #4
 801a6a8:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 801a6aa:	8a7a      	ldrh	r2, [r7, #18]
 801a6ac:	8bfb      	ldrh	r3, [r7, #30]
 801a6ae:	429a      	cmp	r2, r3
 801a6b0:	d202      	bcs.n	801a6b8 <dhcp_parse_reply+0x4a8>
              /* overflow */
              return ERR_BUF;
 801a6b2:	f06f 0301 	mvn.w	r3, #1
 801a6b6:	e0ab      	b.n	801a810 <dhcp_parse_reply+0x600>
            }
            val_offset = next_val_offset;
 801a6b8:	8a7b      	ldrh	r3, [r7, #18]
 801a6ba:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 801a6bc:	6a3b      	ldr	r3, [r7, #32]
 801a6be:	3301      	adds	r3, #1
 801a6c0:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801a6c2:	e79e      	b.n	801a602 <dhcp_parse_reply+0x3f2>
          } else if (decode_len == 4) {
 801a6c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a6c8:	2b04      	cmp	r3, #4
 801a6ca:	d106      	bne.n	801a6da <dhcp_parse_reply+0x4ca>
            value = lwip_ntohl(value);
 801a6cc:	68bb      	ldr	r3, [r7, #8]
 801a6ce:	4618      	mov	r0, r3
 801a6d0:	f7f6 f8f9 	bl	80108c6 <lwip_htonl>
 801a6d4:	4603      	mov	r3, r0
 801a6d6:	60bb      	str	r3, [r7, #8]
 801a6d8:	e011      	b.n	801a6fe <dhcp_parse_reply+0x4ee>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 801a6da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 801a6de:	2b01      	cmp	r3, #1
 801a6e0:	d009      	beq.n	801a6f6 <dhcp_parse_reply+0x4e6>
 801a6e2:	4b33      	ldr	r3, [pc, #204]	@ (801a7b0 <dhcp_parse_reply+0x5a0>)
 801a6e4:	f44f 62d2 	mov.w	r2, #1680	@ 0x690
 801a6e8:	4939      	ldr	r1, [pc, #228]	@ (801a7d0 <dhcp_parse_reply+0x5c0>)
 801a6ea:	4833      	ldr	r0, [pc, #204]	@ (801a7b8 <dhcp_parse_reply+0x5a8>)
 801a6ec:	f004 f808 	bl	801e700 <iprintf>
 801a6f0:	f06f 0305 	mvn.w	r3, #5
 801a6f4:	e08c      	b.n	801a810 <dhcp_parse_reply+0x600>
            value = ((u8_t *)&value)[0];
 801a6f6:	f107 0308 	add.w	r3, r7, #8
 801a6fa:	781b      	ldrb	r3, [r3, #0]
 801a6fc:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801a6fe:	4a31      	ldr	r2, [pc, #196]	@ (801a7c4 <dhcp_parse_reply+0x5b4>)
 801a700:	6a3b      	ldr	r3, [r7, #32]
 801a702:	4413      	add	r3, r2
 801a704:	2201      	movs	r2, #1
 801a706:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 801a708:	68ba      	ldr	r2, [r7, #8]
 801a70a:	4930      	ldr	r1, [pc, #192]	@ (801a7cc <dhcp_parse_reply+0x5bc>)
 801a70c:	6a3b      	ldr	r3, [r7, #32]
 801a70e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801a712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a714:	895b      	ldrh	r3, [r3, #10]
 801a716:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a718:	429a      	cmp	r2, r3
 801a71a:	d324      	bcc.n	801a766 <dhcp_parse_reply+0x556>
      offset = (u16_t)(offset - q->len);
 801a71c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a71e:	895b      	ldrh	r3, [r3, #10]
 801a720:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a722:	1ad3      	subs	r3, r2, r3
 801a724:	877b      	strh	r3, [r7, #58]	@ 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 801a726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a728:	895b      	ldrh	r3, [r3, #10]
 801a72a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 801a72c:	1ad3      	subs	r3, r2, r3
 801a72e:	873b      	strh	r3, [r7, #56]	@ 0x38
      if (offset < offset_max) {
 801a730:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a732:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a734:	429a      	cmp	r2, r3
 801a736:	d213      	bcs.n	801a760 <dhcp_parse_reply+0x550>
        q = q->next;
 801a738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	633b      	str	r3, [r7, #48]	@ 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801a73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a740:	2b00      	cmp	r3, #0
 801a742:	d109      	bne.n	801a758 <dhcp_parse_reply+0x548>
 801a744:	4b1a      	ldr	r3, [pc, #104]	@ (801a7b0 <dhcp_parse_reply+0x5a0>)
 801a746:	f240 629d 	movw	r2, #1693	@ 0x69d
 801a74a:	4922      	ldr	r1, [pc, #136]	@ (801a7d4 <dhcp_parse_reply+0x5c4>)
 801a74c:	481a      	ldr	r0, [pc, #104]	@ (801a7b8 <dhcp_parse_reply+0x5a8>)
 801a74e:	f003 ffd7 	bl	801e700 <iprintf>
 801a752:	f06f 0305 	mvn.w	r3, #5
 801a756:	e05b      	b.n	801a810 <dhcp_parse_reply+0x600>
        options = (u8_t *)q->payload;
 801a758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a75a:	685b      	ldr	r3, [r3, #4]
 801a75c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a75e:	e002      	b.n	801a766 <dhcp_parse_reply+0x556>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 801a760:	f06f 0301 	mvn.w	r3, #1
 801a764:	e054      	b.n	801a810 <dhcp_parse_reply+0x600>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801a766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a768:	2b00      	cmp	r3, #0
 801a76a:	d00a      	beq.n	801a782 <dhcp_parse_reply+0x572>
 801a76c:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801a76e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801a770:	429a      	cmp	r2, r3
 801a772:	d206      	bcs.n	801a782 <dhcp_parse_reply+0x572>
 801a774:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801a776:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801a778:	4413      	add	r3, r2
 801a77a:	781b      	ldrb	r3, [r3, #0]
 801a77c:	2bff      	cmp	r3, #255	@ 0xff
 801a77e:	f47f ad8a 	bne.w	801a296 <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801a782:	4b10      	ldr	r3, [pc, #64]	@ (801a7c4 <dhcp_parse_reply+0x5b4>)
 801a784:	781b      	ldrb	r3, [r3, #0]
 801a786:	2b00      	cmp	r3, #0
 801a788:	d02d      	beq.n	801a7e6 <dhcp_parse_reply+0x5d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a78a:	4b10      	ldr	r3, [pc, #64]	@ (801a7cc <dhcp_parse_reply+0x5bc>)
 801a78c:	681b      	ldr	r3, [r3, #0]
 801a78e:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 801a790:	4b0c      	ldr	r3, [pc, #48]	@ (801a7c4 <dhcp_parse_reply+0x5b4>)
 801a792:	2200      	movs	r2, #0
 801a794:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801a796:	68fb      	ldr	r3, [r7, #12]
 801a798:	2b01      	cmp	r3, #1
 801a79a:	d102      	bne.n	801a7a2 <dhcp_parse_reply+0x592>
      parse_file_as_options = 1;
 801a79c:	2301      	movs	r3, #1
 801a79e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a7a0:	e021      	b.n	801a7e6 <dhcp_parse_reply+0x5d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801a7a2:	68fb      	ldr	r3, [r7, #12]
 801a7a4:	2b02      	cmp	r3, #2
 801a7a6:	d117      	bne.n	801a7d8 <dhcp_parse_reply+0x5c8>
      parse_sname_as_options = 1;
 801a7a8:	2301      	movs	r3, #1
 801a7aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a7ac:	e01b      	b.n	801a7e6 <dhcp_parse_reply+0x5d6>
 801a7ae:	bf00      	nop
 801a7b0:	08024510 	.word	0x08024510
 801a7b4:	080247c8 	.word	0x080247c8
 801a7b8:	08024570 	.word	0x08024570
 801a7bc:	08024798 	.word	0x08024798
 801a7c0:	080247ec 	.word	0x080247ec
 801a7c4:	2001b09c 	.word	0x2001b09c
 801a7c8:	08024800 	.word	0x08024800
 801a7cc:	2001b074 	.word	0x2001b074
 801a7d0:	08024818 	.word	0x08024818
 801a7d4:	0802482c 	.word	0x0802482c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801a7d8:	68fb      	ldr	r3, [r7, #12]
 801a7da:	2b03      	cmp	r3, #3
 801a7dc:	d103      	bne.n	801a7e6 <dhcp_parse_reply+0x5d6>
      parse_sname_as_options = 1;
 801a7de:	2301      	movs	r3, #1
 801a7e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      parse_file_as_options = 1;
 801a7e2:	2301      	movs	r3, #1
 801a7e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 801a7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d006      	beq.n	801a7fa <dhcp_parse_reply+0x5ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801a7ec:	2300      	movs	r3, #0
 801a7ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    options_idx = DHCP_FILE_OFS;
 801a7f0:	236c      	movs	r3, #108	@ 0x6c
 801a7f2:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 801a7f4:	23ec      	movs	r3, #236	@ 0xec
 801a7f6:	86bb      	strh	r3, [r7, #52]	@ 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801a7f8:	e527      	b.n	801a24a <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801a7fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a7fc:	2b00      	cmp	r3, #0
 801a7fe:	d006      	beq.n	801a80e <dhcp_parse_reply+0x5fe>
    parse_sname_as_options = 0;
 801a800:	2300      	movs	r3, #0
 801a802:	62bb      	str	r3, [r7, #40]	@ 0x28
    options_idx = DHCP_SNAME_OFS;
 801a804:	232c      	movs	r3, #44	@ 0x2c
 801a806:	86fb      	strh	r3, [r7, #54]	@ 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801a808:	236c      	movs	r3, #108	@ 0x6c
 801a80a:	86bb      	strh	r3, [r7, #52]	@ 0x34
    goto again;
 801a80c:	e51d      	b.n	801a24a <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 801a80e:	2300      	movs	r3, #0
}
 801a810:	4618      	mov	r0, r3
 801a812:	3740      	adds	r7, #64	@ 0x40
 801a814:	46bd      	mov	sp, r7
 801a816:	bd80      	pop	{r7, pc}

0801a818 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 801a818:	b580      	push	{r7, lr}
 801a81a:	b08a      	sub	sp, #40	@ 0x28
 801a81c:	af00      	add	r7, sp, #0
 801a81e:	60f8      	str	r0, [r7, #12]
 801a820:	60b9      	str	r1, [r7, #8]
 801a822:	607a      	str	r2, [r7, #4]
 801a824:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801a826:	4b60      	ldr	r3, [pc, #384]	@ (801a9a8 <dhcp_recv+0x190>)
 801a828:	685b      	ldr	r3, [r3, #4]
 801a82a:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801a82c:	6a3b      	ldr	r3, [r7, #32]
 801a82e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a830:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	685b      	ldr	r3, [r3, #4]
 801a836:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801a838:	69fb      	ldr	r3, [r7, #28]
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	f000 809d 	beq.w	801a97a <dhcp_recv+0x162>
 801a840:	69fb      	ldr	r3, [r7, #28]
 801a842:	791b      	ldrb	r3, [r3, #4]
 801a844:	2b00      	cmp	r3, #0
 801a846:	f000 8098 	beq.w	801a97a <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801a84a:	687b      	ldr	r3, [r7, #4]
 801a84c:	895b      	ldrh	r3, [r3, #10]
 801a84e:	2b2b      	cmp	r3, #43	@ 0x2b
 801a850:	f240 8095 	bls.w	801a97e <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801a854:	69bb      	ldr	r3, [r7, #24]
 801a856:	781b      	ldrb	r3, [r3, #0]
 801a858:	2b02      	cmp	r3, #2
 801a85a:	f040 8092 	bne.w	801a982 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a85e:	2300      	movs	r3, #0
 801a860:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a864:	e012      	b.n	801a88c <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801a866:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a86a:	6a3a      	ldr	r2, [r7, #32]
 801a86c:	4413      	add	r3, r2
 801a86e:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 801a872:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a876:	69b9      	ldr	r1, [r7, #24]
 801a878:	440b      	add	r3, r1
 801a87a:	7f1b      	ldrb	r3, [r3, #28]
 801a87c:	429a      	cmp	r2, r3
 801a87e:	f040 8082 	bne.w	801a986 <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801a882:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a886:	3301      	adds	r3, #1
 801a888:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801a88c:	6a3b      	ldr	r3, [r7, #32]
 801a88e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801a892:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 801a896:	429a      	cmp	r2, r3
 801a898:	d203      	bcs.n	801a8a2 <dhcp_recv+0x8a>
 801a89a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801a89e:	2b05      	cmp	r3, #5
 801a8a0:	d9e1      	bls.n	801a866 <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 801a8a2:	69bb      	ldr	r3, [r7, #24]
 801a8a4:	685b      	ldr	r3, [r3, #4]
 801a8a6:	4618      	mov	r0, r3
 801a8a8:	f7f6 f80d 	bl	80108c6 <lwip_htonl>
 801a8ac:	4602      	mov	r2, r0
 801a8ae:	69fb      	ldr	r3, [r7, #28]
 801a8b0:	681b      	ldr	r3, [r3, #0]
 801a8b2:	429a      	cmp	r2, r3
 801a8b4:	d169      	bne.n	801a98a <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801a8b6:	69f9      	ldr	r1, [r7, #28]
 801a8b8:	6878      	ldr	r0, [r7, #4]
 801a8ba:	f7ff fca9 	bl	801a210 <dhcp_parse_reply>
 801a8be:	4603      	mov	r3, r0
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d164      	bne.n	801a98e <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801a8c4:	4b39      	ldr	r3, [pc, #228]	@ (801a9ac <dhcp_recv+0x194>)
 801a8c6:	785b      	ldrb	r3, [r3, #1]
 801a8c8:	2b00      	cmp	r3, #0
 801a8ca:	d062      	beq.n	801a992 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 801a8cc:	687b      	ldr	r3, [r7, #4]
 801a8ce:	685b      	ldr	r3, [r3, #4]
 801a8d0:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801a8d2:	4b37      	ldr	r3, [pc, #220]	@ (801a9b0 <dhcp_recv+0x198>)
 801a8d4:	685b      	ldr	r3, [r3, #4]
 801a8d6:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 801a8d8:	7cfb      	ldrb	r3, [r7, #19]
 801a8da:	2b05      	cmp	r3, #5
 801a8dc:	d12a      	bne.n	801a934 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 801a8de:	69fb      	ldr	r3, [r7, #28]
 801a8e0:	795b      	ldrb	r3, [r3, #5]
 801a8e2:	2b01      	cmp	r3, #1
 801a8e4:	d112      	bne.n	801a90c <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801a8e6:	6979      	ldr	r1, [r7, #20]
 801a8e8:	6a38      	ldr	r0, [r7, #32]
 801a8ea:	f7fe fdcd 	bl	8019488 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 801a8ee:	6a3b      	ldr	r3, [r7, #32]
 801a8f0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801a8f4:	f003 0308 	and.w	r3, r3, #8
 801a8f8:	2b00      	cmp	r3, #0
 801a8fa:	d003      	beq.n	801a904 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 801a8fc:	6a38      	ldr	r0, [r7, #32]
 801a8fe:	f7fe fb3d 	bl	8018f7c <dhcp_check>
 801a902:	e049      	b.n	801a998 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801a904:	6a38      	ldr	r0, [r7, #32]
 801a906:	f7ff f83d 	bl	8019984 <dhcp_bind>
 801a90a:	e045      	b.n	801a998 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801a90c:	69fb      	ldr	r3, [r7, #28]
 801a90e:	795b      	ldrb	r3, [r3, #5]
 801a910:	2b03      	cmp	r3, #3
 801a912:	d007      	beq.n	801a924 <dhcp_recv+0x10c>
 801a914:	69fb      	ldr	r3, [r7, #28]
 801a916:	795b      	ldrb	r3, [r3, #5]
 801a918:	2b04      	cmp	r3, #4
 801a91a:	d003      	beq.n	801a924 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 801a91c:	69fb      	ldr	r3, [r7, #28]
 801a91e:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 801a920:	2b05      	cmp	r3, #5
 801a922:	d139      	bne.n	801a998 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801a924:	6979      	ldr	r1, [r7, #20]
 801a926:	6a38      	ldr	r0, [r7, #32]
 801a928:	f7fe fdae 	bl	8019488 <dhcp_handle_ack>
      dhcp_bind(netif);
 801a92c:	6a38      	ldr	r0, [r7, #32]
 801a92e:	f7ff f829 	bl	8019984 <dhcp_bind>
 801a932:	e031      	b.n	801a998 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801a934:	7cfb      	ldrb	r3, [r7, #19]
 801a936:	2b06      	cmp	r3, #6
 801a938:	d113      	bne.n	801a962 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a93a:	69fb      	ldr	r3, [r7, #28]
 801a93c:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 801a93e:	2b03      	cmp	r3, #3
 801a940:	d00b      	beq.n	801a95a <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a942:	69fb      	ldr	r3, [r7, #28]
 801a944:	795b      	ldrb	r3, [r3, #5]
 801a946:	2b01      	cmp	r3, #1
 801a948:	d007      	beq.n	801a95a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801a94a:	69fb      	ldr	r3, [r7, #28]
 801a94c:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801a94e:	2b04      	cmp	r3, #4
 801a950:	d003      	beq.n	801a95a <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801a952:	69fb      	ldr	r3, [r7, #28]
 801a954:	795b      	ldrb	r3, [r3, #5]
 801a956:	2b05      	cmp	r3, #5
 801a958:	d103      	bne.n	801a962 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801a95a:	6a38      	ldr	r0, [r7, #32]
 801a95c:	f7fe faf4 	bl	8018f48 <dhcp_handle_nak>
 801a960:	e01a      	b.n	801a998 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 801a962:	7cfb      	ldrb	r3, [r7, #19]
 801a964:	2b02      	cmp	r3, #2
 801a966:	d116      	bne.n	801a996 <dhcp_recv+0x17e>
 801a968:	69fb      	ldr	r3, [r7, #28]
 801a96a:	795b      	ldrb	r3, [r3, #5]
 801a96c:	2b06      	cmp	r3, #6
 801a96e:	d112      	bne.n	801a996 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 801a970:	6979      	ldr	r1, [r7, #20]
 801a972:	6a38      	ldr	r0, [r7, #32]
 801a974:	f7fe fb36 	bl	8018fe4 <dhcp_handle_offer>
 801a978:	e00e      	b.n	801a998 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a97a:	bf00      	nop
 801a97c:	e00c      	b.n	801a998 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a97e:	bf00      	nop
 801a980:	e00a      	b.n	801a998 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a982:	bf00      	nop
 801a984:	e008      	b.n	801a998 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 801a986:	bf00      	nop
 801a988:	e006      	b.n	801a998 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a98a:	bf00      	nop
 801a98c:	e004      	b.n	801a998 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a98e:	bf00      	nop
 801a990:	e002      	b.n	801a998 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 801a992:	bf00      	nop
 801a994:	e000      	b.n	801a998 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 801a996:	bf00      	nop
  pbuf_free(p);
 801a998:	6878      	ldr	r0, [r7, #4]
 801a99a:	f7f7 fe6b 	bl	8012674 <pbuf_free>
}
 801a99e:	bf00      	nop
 801a9a0:	3728      	adds	r7, #40	@ 0x28
 801a9a2:	46bd      	mov	sp, r7
 801a9a4:	bd80      	pop	{r7, pc}
 801a9a6:	bf00      	nop
 801a9a8:	20017754 	.word	0x20017754
 801a9ac:	2001b09c 	.word	0x2001b09c
 801a9b0:	2001b074 	.word	0x2001b074

0801a9b4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801a9b4:	b580      	push	{r7, lr}
 801a9b6:	b088      	sub	sp, #32
 801a9b8:	af00      	add	r7, sp, #0
 801a9ba:	60f8      	str	r0, [r7, #12]
 801a9bc:	60b9      	str	r1, [r7, #8]
 801a9be:	603b      	str	r3, [r7, #0]
 801a9c0:	4613      	mov	r3, r2
 801a9c2:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801a9c4:	68fb      	ldr	r3, [r7, #12]
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	d108      	bne.n	801a9dc <dhcp_create_msg+0x28>
 801a9ca:	4b5f      	ldr	r3, [pc, #380]	@ (801ab48 <dhcp_create_msg+0x194>)
 801a9cc:	f240 7269 	movw	r2, #1897	@ 0x769
 801a9d0:	495e      	ldr	r1, [pc, #376]	@ (801ab4c <dhcp_create_msg+0x198>)
 801a9d2:	485f      	ldr	r0, [pc, #380]	@ (801ab50 <dhcp_create_msg+0x19c>)
 801a9d4:	f003 fe94 	bl	801e700 <iprintf>
 801a9d8:	2300      	movs	r3, #0
 801a9da:	e0b1      	b.n	801ab40 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 801a9dc:	68bb      	ldr	r3, [r7, #8]
 801a9de:	2b00      	cmp	r3, #0
 801a9e0:	d108      	bne.n	801a9f4 <dhcp_create_msg+0x40>
 801a9e2:	4b59      	ldr	r3, [pc, #356]	@ (801ab48 <dhcp_create_msg+0x194>)
 801a9e4:	f240 726a 	movw	r2, #1898	@ 0x76a
 801a9e8:	495a      	ldr	r1, [pc, #360]	@ (801ab54 <dhcp_create_msg+0x1a0>)
 801a9ea:	4859      	ldr	r0, [pc, #356]	@ (801ab50 <dhcp_create_msg+0x19c>)
 801a9ec:	f003 fe88 	bl	801e700 <iprintf>
 801a9f0:	2300      	movs	r3, #0
 801a9f2:	e0a5      	b.n	801ab40 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801a9f4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801a9f8:	f44f 719a 	mov.w	r1, #308	@ 0x134
 801a9fc:	2036      	movs	r0, #54	@ 0x36
 801a9fe:	f7f7 fb55 	bl	80120ac <pbuf_alloc>
 801aa02:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801aa04:	69bb      	ldr	r3, [r7, #24]
 801aa06:	2b00      	cmp	r3, #0
 801aa08:	d101      	bne.n	801aa0e <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 801aa0a:	2300      	movs	r3, #0
 801aa0c:	e098      	b.n	801ab40 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801aa0e:	69bb      	ldr	r3, [r7, #24]
 801aa10:	895b      	ldrh	r3, [r3, #10]
 801aa12:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 801aa16:	d206      	bcs.n	801aa26 <dhcp_create_msg+0x72>
 801aa18:	4b4b      	ldr	r3, [pc, #300]	@ (801ab48 <dhcp_create_msg+0x194>)
 801aa1a:	f240 7271 	movw	r2, #1905	@ 0x771
 801aa1e:	494e      	ldr	r1, [pc, #312]	@ (801ab58 <dhcp_create_msg+0x1a4>)
 801aa20:	484b      	ldr	r0, [pc, #300]	@ (801ab50 <dhcp_create_msg+0x19c>)
 801aa22:	f003 fe6d 	bl	801e700 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801aa26:	79fb      	ldrb	r3, [r7, #7]
 801aa28:	2b03      	cmp	r3, #3
 801aa2a:	d103      	bne.n	801aa34 <dhcp_create_msg+0x80>
 801aa2c:	68bb      	ldr	r3, [r7, #8]
 801aa2e:	795b      	ldrb	r3, [r3, #5]
 801aa30:	2b03      	cmp	r3, #3
 801aa32:	d10d      	bne.n	801aa50 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801aa34:	68bb      	ldr	r3, [r7, #8]
 801aa36:	799b      	ldrb	r3, [r3, #6]
 801aa38:	2b00      	cmp	r3, #0
 801aa3a:	d105      	bne.n	801aa48 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801aa3c:	f002 fd80 	bl	801d540 <rand>
 801aa40:	4603      	mov	r3, r0
 801aa42:	461a      	mov	r2, r3
 801aa44:	4b45      	ldr	r3, [pc, #276]	@ (801ab5c <dhcp_create_msg+0x1a8>)
 801aa46:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801aa48:	4b44      	ldr	r3, [pc, #272]	@ (801ab5c <dhcp_create_msg+0x1a8>)
 801aa4a:	681a      	ldr	r2, [r3, #0]
 801aa4c:	68bb      	ldr	r3, [r7, #8]
 801aa4e:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 801aa50:	69bb      	ldr	r3, [r7, #24]
 801aa52:	685b      	ldr	r3, [r3, #4]
 801aa54:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 801aa56:	f44f 729a 	mov.w	r2, #308	@ 0x134
 801aa5a:	2100      	movs	r1, #0
 801aa5c:	6978      	ldr	r0, [r7, #20]
 801aa5e:	f003 ff83 	bl	801e968 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 801aa62:	697b      	ldr	r3, [r7, #20]
 801aa64:	2201      	movs	r2, #1
 801aa66:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 801aa68:	697b      	ldr	r3, [r7, #20]
 801aa6a:	2201      	movs	r2, #1
 801aa6c:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 801aa74:	697b      	ldr	r3, [r7, #20]
 801aa76:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 801aa78:	68bb      	ldr	r3, [r7, #8]
 801aa7a:	681b      	ldr	r3, [r3, #0]
 801aa7c:	4618      	mov	r0, r3
 801aa7e:	f7f5 ff22 	bl	80108c6 <lwip_htonl>
 801aa82:	4602      	mov	r2, r0
 801aa84:	697b      	ldr	r3, [r7, #20]
 801aa86:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 801aa88:	79fb      	ldrb	r3, [r7, #7]
 801aa8a:	2b08      	cmp	r3, #8
 801aa8c:	d010      	beq.n	801aab0 <dhcp_create_msg+0xfc>
 801aa8e:	79fb      	ldrb	r3, [r7, #7]
 801aa90:	2b04      	cmp	r3, #4
 801aa92:	d00d      	beq.n	801aab0 <dhcp_create_msg+0xfc>
 801aa94:	79fb      	ldrb	r3, [r7, #7]
 801aa96:	2b07      	cmp	r3, #7
 801aa98:	d00a      	beq.n	801aab0 <dhcp_create_msg+0xfc>
 801aa9a:	79fb      	ldrb	r3, [r7, #7]
 801aa9c:	2b03      	cmp	r3, #3
 801aa9e:	d10c      	bne.n	801aaba <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801aaa0:	68bb      	ldr	r3, [r7, #8]
 801aaa2:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801aaa4:	2b05      	cmp	r3, #5
 801aaa6:	d003      	beq.n	801aab0 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 801aaa8:	68bb      	ldr	r3, [r7, #8]
 801aaaa:	795b      	ldrb	r3, [r3, #5]
 801aaac:	2b04      	cmp	r3, #4
 801aaae:	d104      	bne.n	801aaba <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 801aab0:	68fb      	ldr	r3, [r7, #12]
 801aab2:	3304      	adds	r3, #4
 801aab4:	681a      	ldr	r2, [r3, #0]
 801aab6:	697b      	ldr	r3, [r7, #20]
 801aab8:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801aaba:	2300      	movs	r3, #0
 801aabc:	83fb      	strh	r3, [r7, #30]
 801aabe:	e00c      	b.n	801aada <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 801aac0:	8bfa      	ldrh	r2, [r7, #30]
 801aac2:	8bfb      	ldrh	r3, [r7, #30]
 801aac4:	68f9      	ldr	r1, [r7, #12]
 801aac6:	440a      	add	r2, r1
 801aac8:	f892 102a 	ldrb.w	r1, [r2, #42]	@ 0x2a
 801aacc:	697a      	ldr	r2, [r7, #20]
 801aace:	4413      	add	r3, r2
 801aad0:	460a      	mov	r2, r1
 801aad2:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801aad4:	8bfb      	ldrh	r3, [r7, #30]
 801aad6:	3301      	adds	r3, #1
 801aad8:	83fb      	strh	r3, [r7, #30]
 801aada:	8bfb      	ldrh	r3, [r7, #30]
 801aadc:	2b05      	cmp	r3, #5
 801aade:	d9ef      	bls.n	801aac0 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 801aae0:	697b      	ldr	r3, [r7, #20]
 801aae2:	2200      	movs	r2, #0
 801aae4:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801aae8:	f883 20ec 	strb.w	r2, [r3, #236]	@ 0xec
 801aaec:	2200      	movs	r2, #0
 801aaee:	f062 027d 	orn	r2, r2, #125	@ 0x7d
 801aaf2:	f883 20ed 	strb.w	r2, [r3, #237]	@ 0xed
 801aaf6:	2200      	movs	r2, #0
 801aaf8:	f042 0253 	orr.w	r2, r2, #83	@ 0x53
 801aafc:	f883 20ee 	strb.w	r2, [r3, #238]	@ 0xee
 801ab00:	2200      	movs	r2, #0
 801ab02:	f042 0263 	orr.w	r2, r2, #99	@ 0x63
 801ab06:	f883 20ef 	strb.w	r2, [r3, #239]	@ 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 801ab0a:	697b      	ldr	r3, [r7, #20]
 801ab0c:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801ab10:	2301      	movs	r3, #1
 801ab12:	2235      	movs	r2, #53	@ 0x35
 801ab14:	2000      	movs	r0, #0
 801ab16:	f7ff faab 	bl	801a070 <dhcp_option>
 801ab1a:	4603      	mov	r3, r0
 801ab1c:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 801ab1e:	697b      	ldr	r3, [r7, #20]
 801ab20:	f103 01f0 	add.w	r1, r3, #240	@ 0xf0
 801ab24:	79fa      	ldrb	r2, [r7, #7]
 801ab26:	8a7b      	ldrh	r3, [r7, #18]
 801ab28:	4618      	mov	r0, r3
 801ab2a:	f7ff fad5 	bl	801a0d8 <dhcp_option_byte>
 801ab2e:	4603      	mov	r3, r0
 801ab30:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801ab32:	683b      	ldr	r3, [r7, #0]
 801ab34:	2b00      	cmp	r3, #0
 801ab36:	d002      	beq.n	801ab3e <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 801ab38:	683b      	ldr	r3, [r7, #0]
 801ab3a:	8a7a      	ldrh	r2, [r7, #18]
 801ab3c:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 801ab3e:	69bb      	ldr	r3, [r7, #24]
}
 801ab40:	4618      	mov	r0, r3
 801ab42:	3720      	adds	r7, #32
 801ab44:	46bd      	mov	sp, r7
 801ab46:	bd80      	pop	{r7, pc}
 801ab48:	08024510 	.word	0x08024510
 801ab4c:	08024840 	.word	0x08024840
 801ab50:	08024570 	.word	0x08024570
 801ab54:	08024860 	.word	0x08024860
 801ab58:	08024880 	.word	0x08024880
 801ab5c:	2001b0b0 	.word	0x2001b0b0

0801ab60 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 801ab60:	b580      	push	{r7, lr}
 801ab62:	b084      	sub	sp, #16
 801ab64:	af00      	add	r7, sp, #0
 801ab66:	4603      	mov	r3, r0
 801ab68:	60b9      	str	r1, [r7, #8]
 801ab6a:	607a      	str	r2, [r7, #4]
 801ab6c:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 801ab6e:	89fb      	ldrh	r3, [r7, #14]
 801ab70:	1c5a      	adds	r2, r3, #1
 801ab72:	81fa      	strh	r2, [r7, #14]
 801ab74:	461a      	mov	r2, r3
 801ab76:	68bb      	ldr	r3, [r7, #8]
 801ab78:	4413      	add	r3, r2
 801ab7a:	22ff      	movs	r2, #255	@ 0xff
 801ab7c:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801ab7e:	e007      	b.n	801ab90 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 801ab80:	89fb      	ldrh	r3, [r7, #14]
 801ab82:	1c5a      	adds	r2, r3, #1
 801ab84:	81fa      	strh	r2, [r7, #14]
 801ab86:	461a      	mov	r2, r3
 801ab88:	68bb      	ldr	r3, [r7, #8]
 801ab8a:	4413      	add	r3, r2
 801ab8c:	2200      	movs	r2, #0
 801ab8e:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 801ab90:	89fb      	ldrh	r3, [r7, #14]
 801ab92:	2b43      	cmp	r3, #67	@ 0x43
 801ab94:	d904      	bls.n	801aba0 <dhcp_option_trailer+0x40>
 801ab96:	89fb      	ldrh	r3, [r7, #14]
 801ab98:	f003 0303 	and.w	r3, r3, #3
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d002      	beq.n	801aba6 <dhcp_option_trailer+0x46>
 801aba0:	89fb      	ldrh	r3, [r7, #14]
 801aba2:	2b43      	cmp	r3, #67	@ 0x43
 801aba4:	d9ec      	bls.n	801ab80 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 801aba6:	89fb      	ldrh	r3, [r7, #14]
 801aba8:	33f0      	adds	r3, #240	@ 0xf0
 801abaa:	b29b      	uxth	r3, r3
 801abac:	4619      	mov	r1, r3
 801abae:	6878      	ldr	r0, [r7, #4]
 801abb0:	f7f7 fbda 	bl	8012368 <pbuf_realloc>
}
 801abb4:	bf00      	nop
 801abb6:	3710      	adds	r7, #16
 801abb8:	46bd      	mov	sp, r7
 801abba:	bd80      	pop	{r7, pc}

0801abbc <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 801abbc:	b480      	push	{r7}
 801abbe:	b085      	sub	sp, #20
 801abc0:	af00      	add	r7, sp, #0
 801abc2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	2b00      	cmp	r3, #0
 801abc8:	d017      	beq.n	801abfa <dhcp_supplied_address+0x3e>
 801abca:	687b      	ldr	r3, [r7, #4]
 801abcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d013      	beq.n	801abfa <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801abd2:	687b      	ldr	r3, [r7, #4]
 801abd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801abd6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	795b      	ldrb	r3, [r3, #5]
 801abdc:	2b0a      	cmp	r3, #10
 801abde:	d007      	beq.n	801abf0 <dhcp_supplied_address+0x34>
 801abe0:	68fb      	ldr	r3, [r7, #12]
 801abe2:	795b      	ldrb	r3, [r3, #5]
 801abe4:	2b05      	cmp	r3, #5
 801abe6:	d003      	beq.n	801abf0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 801abe8:	68fb      	ldr	r3, [r7, #12]
 801abea:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 801abec:	2b04      	cmp	r3, #4
 801abee:	d101      	bne.n	801abf4 <dhcp_supplied_address+0x38>
 801abf0:	2301      	movs	r3, #1
 801abf2:	e000      	b.n	801abf6 <dhcp_supplied_address+0x3a>
 801abf4:	2300      	movs	r3, #0
 801abf6:	b2db      	uxtb	r3, r3
 801abf8:	e000      	b.n	801abfc <dhcp_supplied_address+0x40>
  }
  return 0;
 801abfa:	2300      	movs	r3, #0
}
 801abfc:	4618      	mov	r0, r3
 801abfe:	3714      	adds	r7, #20
 801ac00:	46bd      	mov	sp, r7
 801ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ac06:	4770      	bx	lr

0801ac08 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801ac08:	b580      	push	{r7, lr}
 801ac0a:	b082      	sub	sp, #8
 801ac0c:	af00      	add	r7, sp, #0
 801ac0e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801ac10:	4915      	ldr	r1, [pc, #84]	@ (801ac68 <etharp_free_entry+0x60>)
 801ac12:	687a      	ldr	r2, [r7, #4]
 801ac14:	4613      	mov	r3, r2
 801ac16:	005b      	lsls	r3, r3, #1
 801ac18:	4413      	add	r3, r2
 801ac1a:	00db      	lsls	r3, r3, #3
 801ac1c:	440b      	add	r3, r1
 801ac1e:	681b      	ldr	r3, [r3, #0]
 801ac20:	2b00      	cmp	r3, #0
 801ac22:	d013      	beq.n	801ac4c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801ac24:	4910      	ldr	r1, [pc, #64]	@ (801ac68 <etharp_free_entry+0x60>)
 801ac26:	687a      	ldr	r2, [r7, #4]
 801ac28:	4613      	mov	r3, r2
 801ac2a:	005b      	lsls	r3, r3, #1
 801ac2c:	4413      	add	r3, r2
 801ac2e:	00db      	lsls	r3, r3, #3
 801ac30:	440b      	add	r3, r1
 801ac32:	681b      	ldr	r3, [r3, #0]
 801ac34:	4618      	mov	r0, r3
 801ac36:	f7f7 fd1d 	bl	8012674 <pbuf_free>
    arp_table[i].q = NULL;
 801ac3a:	490b      	ldr	r1, [pc, #44]	@ (801ac68 <etharp_free_entry+0x60>)
 801ac3c:	687a      	ldr	r2, [r7, #4]
 801ac3e:	4613      	mov	r3, r2
 801ac40:	005b      	lsls	r3, r3, #1
 801ac42:	4413      	add	r3, r2
 801ac44:	00db      	lsls	r3, r3, #3
 801ac46:	440b      	add	r3, r1
 801ac48:	2200      	movs	r2, #0
 801ac4a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801ac4c:	4906      	ldr	r1, [pc, #24]	@ (801ac68 <etharp_free_entry+0x60>)
 801ac4e:	687a      	ldr	r2, [r7, #4]
 801ac50:	4613      	mov	r3, r2
 801ac52:	005b      	lsls	r3, r3, #1
 801ac54:	4413      	add	r3, r2
 801ac56:	00db      	lsls	r3, r3, #3
 801ac58:	440b      	add	r3, r1
 801ac5a:	3314      	adds	r3, #20
 801ac5c:	2200      	movs	r2, #0
 801ac5e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801ac60:	bf00      	nop
 801ac62:	3708      	adds	r7, #8
 801ac64:	46bd      	mov	sp, r7
 801ac66:	bd80      	pop	{r7, pc}
 801ac68:	2001b0b4 	.word	0x2001b0b4

0801ac6c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801ac6c:	b580      	push	{r7, lr}
 801ac6e:	b082      	sub	sp, #8
 801ac70:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ac72:	2300      	movs	r3, #0
 801ac74:	607b      	str	r3, [r7, #4]
 801ac76:	e096      	b.n	801ada6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801ac78:	494f      	ldr	r1, [pc, #316]	@ (801adb8 <etharp_tmr+0x14c>)
 801ac7a:	687a      	ldr	r2, [r7, #4]
 801ac7c:	4613      	mov	r3, r2
 801ac7e:	005b      	lsls	r3, r3, #1
 801ac80:	4413      	add	r3, r2
 801ac82:	00db      	lsls	r3, r3, #3
 801ac84:	440b      	add	r3, r1
 801ac86:	3314      	adds	r3, #20
 801ac88:	781b      	ldrb	r3, [r3, #0]
 801ac8a:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801ac8c:	78fb      	ldrb	r3, [r7, #3]
 801ac8e:	2b00      	cmp	r3, #0
 801ac90:	f000 8086 	beq.w	801ada0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801ac94:	4948      	ldr	r1, [pc, #288]	@ (801adb8 <etharp_tmr+0x14c>)
 801ac96:	687a      	ldr	r2, [r7, #4]
 801ac98:	4613      	mov	r3, r2
 801ac9a:	005b      	lsls	r3, r3, #1
 801ac9c:	4413      	add	r3, r2
 801ac9e:	00db      	lsls	r3, r3, #3
 801aca0:	440b      	add	r3, r1
 801aca2:	3312      	adds	r3, #18
 801aca4:	881b      	ldrh	r3, [r3, #0]
 801aca6:	3301      	adds	r3, #1
 801aca8:	b298      	uxth	r0, r3
 801acaa:	4943      	ldr	r1, [pc, #268]	@ (801adb8 <etharp_tmr+0x14c>)
 801acac:	687a      	ldr	r2, [r7, #4]
 801acae:	4613      	mov	r3, r2
 801acb0:	005b      	lsls	r3, r3, #1
 801acb2:	4413      	add	r3, r2
 801acb4:	00db      	lsls	r3, r3, #3
 801acb6:	440b      	add	r3, r1
 801acb8:	3312      	adds	r3, #18
 801acba:	4602      	mov	r2, r0
 801acbc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801acbe:	493e      	ldr	r1, [pc, #248]	@ (801adb8 <etharp_tmr+0x14c>)
 801acc0:	687a      	ldr	r2, [r7, #4]
 801acc2:	4613      	mov	r3, r2
 801acc4:	005b      	lsls	r3, r3, #1
 801acc6:	4413      	add	r3, r2
 801acc8:	00db      	lsls	r3, r3, #3
 801acca:	440b      	add	r3, r1
 801accc:	3312      	adds	r3, #18
 801acce:	881b      	ldrh	r3, [r3, #0]
 801acd0:	f5b3 7f96 	cmp.w	r3, #300	@ 0x12c
 801acd4:	d215      	bcs.n	801ad02 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801acd6:	4938      	ldr	r1, [pc, #224]	@ (801adb8 <etharp_tmr+0x14c>)
 801acd8:	687a      	ldr	r2, [r7, #4]
 801acda:	4613      	mov	r3, r2
 801acdc:	005b      	lsls	r3, r3, #1
 801acde:	4413      	add	r3, r2
 801ace0:	00db      	lsls	r3, r3, #3
 801ace2:	440b      	add	r3, r1
 801ace4:	3314      	adds	r3, #20
 801ace6:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ace8:	2b01      	cmp	r3, #1
 801acea:	d10e      	bne.n	801ad0a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801acec:	4932      	ldr	r1, [pc, #200]	@ (801adb8 <etharp_tmr+0x14c>)
 801acee:	687a      	ldr	r2, [r7, #4]
 801acf0:	4613      	mov	r3, r2
 801acf2:	005b      	lsls	r3, r3, #1
 801acf4:	4413      	add	r3, r2
 801acf6:	00db      	lsls	r3, r3, #3
 801acf8:	440b      	add	r3, r1
 801acfa:	3312      	adds	r3, #18
 801acfc:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801acfe:	2b04      	cmp	r3, #4
 801ad00:	d903      	bls.n	801ad0a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801ad02:	6878      	ldr	r0, [r7, #4]
 801ad04:	f7ff ff80 	bl	801ac08 <etharp_free_entry>
 801ad08:	e04a      	b.n	801ada0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801ad0a:	492b      	ldr	r1, [pc, #172]	@ (801adb8 <etharp_tmr+0x14c>)
 801ad0c:	687a      	ldr	r2, [r7, #4]
 801ad0e:	4613      	mov	r3, r2
 801ad10:	005b      	lsls	r3, r3, #1
 801ad12:	4413      	add	r3, r2
 801ad14:	00db      	lsls	r3, r3, #3
 801ad16:	440b      	add	r3, r1
 801ad18:	3314      	adds	r3, #20
 801ad1a:	781b      	ldrb	r3, [r3, #0]
 801ad1c:	2b03      	cmp	r3, #3
 801ad1e:	d10a      	bne.n	801ad36 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801ad20:	4925      	ldr	r1, [pc, #148]	@ (801adb8 <etharp_tmr+0x14c>)
 801ad22:	687a      	ldr	r2, [r7, #4]
 801ad24:	4613      	mov	r3, r2
 801ad26:	005b      	lsls	r3, r3, #1
 801ad28:	4413      	add	r3, r2
 801ad2a:	00db      	lsls	r3, r3, #3
 801ad2c:	440b      	add	r3, r1
 801ad2e:	3314      	adds	r3, #20
 801ad30:	2204      	movs	r2, #4
 801ad32:	701a      	strb	r2, [r3, #0]
 801ad34:	e034      	b.n	801ada0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801ad36:	4920      	ldr	r1, [pc, #128]	@ (801adb8 <etharp_tmr+0x14c>)
 801ad38:	687a      	ldr	r2, [r7, #4]
 801ad3a:	4613      	mov	r3, r2
 801ad3c:	005b      	lsls	r3, r3, #1
 801ad3e:	4413      	add	r3, r2
 801ad40:	00db      	lsls	r3, r3, #3
 801ad42:	440b      	add	r3, r1
 801ad44:	3314      	adds	r3, #20
 801ad46:	781b      	ldrb	r3, [r3, #0]
 801ad48:	2b04      	cmp	r3, #4
 801ad4a:	d10a      	bne.n	801ad62 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801ad4c:	491a      	ldr	r1, [pc, #104]	@ (801adb8 <etharp_tmr+0x14c>)
 801ad4e:	687a      	ldr	r2, [r7, #4]
 801ad50:	4613      	mov	r3, r2
 801ad52:	005b      	lsls	r3, r3, #1
 801ad54:	4413      	add	r3, r2
 801ad56:	00db      	lsls	r3, r3, #3
 801ad58:	440b      	add	r3, r1
 801ad5a:	3314      	adds	r3, #20
 801ad5c:	2202      	movs	r2, #2
 801ad5e:	701a      	strb	r2, [r3, #0]
 801ad60:	e01e      	b.n	801ada0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ad62:	4915      	ldr	r1, [pc, #84]	@ (801adb8 <etharp_tmr+0x14c>)
 801ad64:	687a      	ldr	r2, [r7, #4]
 801ad66:	4613      	mov	r3, r2
 801ad68:	005b      	lsls	r3, r3, #1
 801ad6a:	4413      	add	r3, r2
 801ad6c:	00db      	lsls	r3, r3, #3
 801ad6e:	440b      	add	r3, r1
 801ad70:	3314      	adds	r3, #20
 801ad72:	781b      	ldrb	r3, [r3, #0]
 801ad74:	2b01      	cmp	r3, #1
 801ad76:	d113      	bne.n	801ada0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801ad78:	490f      	ldr	r1, [pc, #60]	@ (801adb8 <etharp_tmr+0x14c>)
 801ad7a:	687a      	ldr	r2, [r7, #4]
 801ad7c:	4613      	mov	r3, r2
 801ad7e:	005b      	lsls	r3, r3, #1
 801ad80:	4413      	add	r3, r2
 801ad82:	00db      	lsls	r3, r3, #3
 801ad84:	440b      	add	r3, r1
 801ad86:	3308      	adds	r3, #8
 801ad88:	6818      	ldr	r0, [r3, #0]
 801ad8a:	687a      	ldr	r2, [r7, #4]
 801ad8c:	4613      	mov	r3, r2
 801ad8e:	005b      	lsls	r3, r3, #1
 801ad90:	4413      	add	r3, r2
 801ad92:	00db      	lsls	r3, r3, #3
 801ad94:	4a08      	ldr	r2, [pc, #32]	@ (801adb8 <etharp_tmr+0x14c>)
 801ad96:	4413      	add	r3, r2
 801ad98:	3304      	adds	r3, #4
 801ad9a:	4619      	mov	r1, r3
 801ad9c:	f000 fe72 	bl	801ba84 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	3301      	adds	r3, #1
 801ada4:	607b      	str	r3, [r7, #4]
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	2b09      	cmp	r3, #9
 801adaa:	f77f af65 	ble.w	801ac78 <etharp_tmr+0xc>
      }
    }
  }
}
 801adae:	bf00      	nop
 801adb0:	bf00      	nop
 801adb2:	3708      	adds	r7, #8
 801adb4:	46bd      	mov	sp, r7
 801adb6:	bd80      	pop	{r7, pc}
 801adb8:	2001b0b4 	.word	0x2001b0b4

0801adbc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801adbc:	b580      	push	{r7, lr}
 801adbe:	b08a      	sub	sp, #40	@ 0x28
 801adc0:	af00      	add	r7, sp, #0
 801adc2:	60f8      	str	r0, [r7, #12]
 801adc4:	460b      	mov	r3, r1
 801adc6:	607a      	str	r2, [r7, #4]
 801adc8:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801adca:	230a      	movs	r3, #10
 801adcc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 801adce:	230a      	movs	r3, #10
 801add0:	84bb      	strh	r3, [r7, #36]	@ 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801add2:	230a      	movs	r3, #10
 801add4:	847b      	strh	r3, [r7, #34]	@ 0x22
  s16_t i = 0;
 801add6:	2300      	movs	r3, #0
 801add8:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801adda:	230a      	movs	r3, #10
 801addc:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801adde:	2300      	movs	r3, #0
 801ade0:	83bb      	strh	r3, [r7, #28]
 801ade2:	2300      	movs	r3, #0
 801ade4:	837b      	strh	r3, [r7, #26]
 801ade6:	2300      	movs	r3, #0
 801ade8:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801adea:	2300      	movs	r3, #0
 801adec:	843b      	strh	r3, [r7, #32]
 801adee:	e0ae      	b.n	801af4e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801adf0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801adf4:	49a6      	ldr	r1, [pc, #664]	@ (801b090 <etharp_find_entry+0x2d4>)
 801adf6:	4613      	mov	r3, r2
 801adf8:	005b      	lsls	r3, r3, #1
 801adfa:	4413      	add	r3, r2
 801adfc:	00db      	lsls	r3, r3, #3
 801adfe:	440b      	add	r3, r1
 801ae00:	3314      	adds	r3, #20
 801ae02:	781b      	ldrb	r3, [r3, #0]
 801ae04:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801ae06:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801ae0a:	2b0a      	cmp	r3, #10
 801ae0c:	d105      	bne.n	801ae1a <etharp_find_entry+0x5e>
 801ae0e:	7dfb      	ldrb	r3, [r7, #23]
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	d102      	bne.n	801ae1a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801ae14:	8c3b      	ldrh	r3, [r7, #32]
 801ae16:	847b      	strh	r3, [r7, #34]	@ 0x22
 801ae18:	e095      	b.n	801af46 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801ae1a:	7dfb      	ldrb	r3, [r7, #23]
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	f000 8092 	beq.w	801af46 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801ae22:	7dfb      	ldrb	r3, [r7, #23]
 801ae24:	2b01      	cmp	r3, #1
 801ae26:	d009      	beq.n	801ae3c <etharp_find_entry+0x80>
 801ae28:	7dfb      	ldrb	r3, [r7, #23]
 801ae2a:	2b01      	cmp	r3, #1
 801ae2c:	d806      	bhi.n	801ae3c <etharp_find_entry+0x80>
 801ae2e:	4b99      	ldr	r3, [pc, #612]	@ (801b094 <etharp_find_entry+0x2d8>)
 801ae30:	f240 1223 	movw	r2, #291	@ 0x123
 801ae34:	4998      	ldr	r1, [pc, #608]	@ (801b098 <etharp_find_entry+0x2dc>)
 801ae36:	4899      	ldr	r0, [pc, #612]	@ (801b09c <etharp_find_entry+0x2e0>)
 801ae38:	f003 fc62 	bl	801e700 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801ae3c:	68fb      	ldr	r3, [r7, #12]
 801ae3e:	2b00      	cmp	r3, #0
 801ae40:	d020      	beq.n	801ae84 <etharp_find_entry+0xc8>
 801ae42:	68fb      	ldr	r3, [r7, #12]
 801ae44:	6819      	ldr	r1, [r3, #0]
 801ae46:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae4a:	4891      	ldr	r0, [pc, #580]	@ (801b090 <etharp_find_entry+0x2d4>)
 801ae4c:	4613      	mov	r3, r2
 801ae4e:	005b      	lsls	r3, r3, #1
 801ae50:	4413      	add	r3, r2
 801ae52:	00db      	lsls	r3, r3, #3
 801ae54:	4403      	add	r3, r0
 801ae56:	3304      	adds	r3, #4
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	4299      	cmp	r1, r3
 801ae5c:	d112      	bne.n	801ae84 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d00c      	beq.n	801ae7e <etharp_find_entry+0xc2>
 801ae64:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae68:	4989      	ldr	r1, [pc, #548]	@ (801b090 <etharp_find_entry+0x2d4>)
 801ae6a:	4613      	mov	r3, r2
 801ae6c:	005b      	lsls	r3, r3, #1
 801ae6e:	4413      	add	r3, r2
 801ae70:	00db      	lsls	r3, r3, #3
 801ae72:	440b      	add	r3, r1
 801ae74:	3308      	adds	r3, #8
 801ae76:	681b      	ldr	r3, [r3, #0]
 801ae78:	687a      	ldr	r2, [r7, #4]
 801ae7a:	429a      	cmp	r2, r3
 801ae7c:	d102      	bne.n	801ae84 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801ae7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801ae82:	e100      	b.n	801b086 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801ae84:	7dfb      	ldrb	r3, [r7, #23]
 801ae86:	2b01      	cmp	r3, #1
 801ae88:	d140      	bne.n	801af0c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801ae8a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ae8e:	4980      	ldr	r1, [pc, #512]	@ (801b090 <etharp_find_entry+0x2d4>)
 801ae90:	4613      	mov	r3, r2
 801ae92:	005b      	lsls	r3, r3, #1
 801ae94:	4413      	add	r3, r2
 801ae96:	00db      	lsls	r3, r3, #3
 801ae98:	440b      	add	r3, r1
 801ae9a:	681b      	ldr	r3, [r3, #0]
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d01a      	beq.n	801aed6 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801aea0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aea4:	497a      	ldr	r1, [pc, #488]	@ (801b090 <etharp_find_entry+0x2d4>)
 801aea6:	4613      	mov	r3, r2
 801aea8:	005b      	lsls	r3, r3, #1
 801aeaa:	4413      	add	r3, r2
 801aeac:	00db      	lsls	r3, r3, #3
 801aeae:	440b      	add	r3, r1
 801aeb0:	3312      	adds	r3, #18
 801aeb2:	881b      	ldrh	r3, [r3, #0]
 801aeb4:	8bba      	ldrh	r2, [r7, #28]
 801aeb6:	429a      	cmp	r2, r3
 801aeb8:	d845      	bhi.n	801af46 <etharp_find_entry+0x18a>
            old_queue = i;
 801aeba:	8c3b      	ldrh	r3, [r7, #32]
 801aebc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801aebe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aec2:	4973      	ldr	r1, [pc, #460]	@ (801b090 <etharp_find_entry+0x2d4>)
 801aec4:	4613      	mov	r3, r2
 801aec6:	005b      	lsls	r3, r3, #1
 801aec8:	4413      	add	r3, r2
 801aeca:	00db      	lsls	r3, r3, #3
 801aecc:	440b      	add	r3, r1
 801aece:	3312      	adds	r3, #18
 801aed0:	881b      	ldrh	r3, [r3, #0]
 801aed2:	83bb      	strh	r3, [r7, #28]
 801aed4:	e037      	b.n	801af46 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801aed6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aeda:	496d      	ldr	r1, [pc, #436]	@ (801b090 <etharp_find_entry+0x2d4>)
 801aedc:	4613      	mov	r3, r2
 801aede:	005b      	lsls	r3, r3, #1
 801aee0:	4413      	add	r3, r2
 801aee2:	00db      	lsls	r3, r3, #3
 801aee4:	440b      	add	r3, r1
 801aee6:	3312      	adds	r3, #18
 801aee8:	881b      	ldrh	r3, [r3, #0]
 801aeea:	8b7a      	ldrh	r2, [r7, #26]
 801aeec:	429a      	cmp	r2, r3
 801aeee:	d82a      	bhi.n	801af46 <etharp_find_entry+0x18a>
            old_pending = i;
 801aef0:	8c3b      	ldrh	r3, [r7, #32]
 801aef2:	84fb      	strh	r3, [r7, #38]	@ 0x26
            age_pending = arp_table[i].ctime;
 801aef4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801aef8:	4965      	ldr	r1, [pc, #404]	@ (801b090 <etharp_find_entry+0x2d4>)
 801aefa:	4613      	mov	r3, r2
 801aefc:	005b      	lsls	r3, r3, #1
 801aefe:	4413      	add	r3, r2
 801af00:	00db      	lsls	r3, r3, #3
 801af02:	440b      	add	r3, r1
 801af04:	3312      	adds	r3, #18
 801af06:	881b      	ldrh	r3, [r3, #0]
 801af08:	837b      	strh	r3, [r7, #26]
 801af0a:	e01c      	b.n	801af46 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801af0c:	7dfb      	ldrb	r3, [r7, #23]
 801af0e:	2b01      	cmp	r3, #1
 801af10:	d919      	bls.n	801af46 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801af12:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801af16:	495e      	ldr	r1, [pc, #376]	@ (801b090 <etharp_find_entry+0x2d4>)
 801af18:	4613      	mov	r3, r2
 801af1a:	005b      	lsls	r3, r3, #1
 801af1c:	4413      	add	r3, r2
 801af1e:	00db      	lsls	r3, r3, #3
 801af20:	440b      	add	r3, r1
 801af22:	3312      	adds	r3, #18
 801af24:	881b      	ldrh	r3, [r3, #0]
 801af26:	8b3a      	ldrh	r2, [r7, #24]
 801af28:	429a      	cmp	r2, r3
 801af2a:	d80c      	bhi.n	801af46 <etharp_find_entry+0x18a>
            old_stable = i;
 801af2c:	8c3b      	ldrh	r3, [r7, #32]
 801af2e:	84bb      	strh	r3, [r7, #36]	@ 0x24
            age_stable = arp_table[i].ctime;
 801af30:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801af34:	4956      	ldr	r1, [pc, #344]	@ (801b090 <etharp_find_entry+0x2d4>)
 801af36:	4613      	mov	r3, r2
 801af38:	005b      	lsls	r3, r3, #1
 801af3a:	4413      	add	r3, r2
 801af3c:	00db      	lsls	r3, r3, #3
 801af3e:	440b      	add	r3, r1
 801af40:	3312      	adds	r3, #18
 801af42:	881b      	ldrh	r3, [r3, #0]
 801af44:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801af46:	8c3b      	ldrh	r3, [r7, #32]
 801af48:	3301      	adds	r3, #1
 801af4a:	b29b      	uxth	r3, r3
 801af4c:	843b      	strh	r3, [r7, #32]
 801af4e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801af52:	2b09      	cmp	r3, #9
 801af54:	f77f af4c 	ble.w	801adf0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801af58:	7afb      	ldrb	r3, [r7, #11]
 801af5a:	f003 0302 	and.w	r3, r3, #2
 801af5e:	2b00      	cmp	r3, #0
 801af60:	d108      	bne.n	801af74 <etharp_find_entry+0x1b8>
 801af62:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801af66:	2b0a      	cmp	r3, #10
 801af68:	d107      	bne.n	801af7a <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801af6a:	7afb      	ldrb	r3, [r7, #11]
 801af6c:	f003 0301 	and.w	r3, r3, #1
 801af70:	2b00      	cmp	r3, #0
 801af72:	d102      	bne.n	801af7a <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801af74:	f04f 33ff 	mov.w	r3, #4294967295
 801af78:	e085      	b.n	801b086 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801af7a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 801af7e:	2b09      	cmp	r3, #9
 801af80:	dc02      	bgt.n	801af88 <etharp_find_entry+0x1cc>
    i = empty;
 801af82:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801af84:	843b      	strh	r3, [r7, #32]
 801af86:	e039      	b.n	801affc <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801af88:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 801af8c:	2b09      	cmp	r3, #9
 801af8e:	dc14      	bgt.n	801afba <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801af90:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801af92:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801af94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801af98:	493d      	ldr	r1, [pc, #244]	@ (801b090 <etharp_find_entry+0x2d4>)
 801af9a:	4613      	mov	r3, r2
 801af9c:	005b      	lsls	r3, r3, #1
 801af9e:	4413      	add	r3, r2
 801afa0:	00db      	lsls	r3, r3, #3
 801afa2:	440b      	add	r3, r1
 801afa4:	681b      	ldr	r3, [r3, #0]
 801afa6:	2b00      	cmp	r3, #0
 801afa8:	d018      	beq.n	801afdc <etharp_find_entry+0x220>
 801afaa:	4b3a      	ldr	r3, [pc, #232]	@ (801b094 <etharp_find_entry+0x2d8>)
 801afac:	f240 126d 	movw	r2, #365	@ 0x16d
 801afb0:	493b      	ldr	r1, [pc, #236]	@ (801b0a0 <etharp_find_entry+0x2e4>)
 801afb2:	483a      	ldr	r0, [pc, #232]	@ (801b09c <etharp_find_entry+0x2e0>)
 801afb4:	f003 fba4 	bl	801e700 <iprintf>
 801afb8:	e010      	b.n	801afdc <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801afba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 801afbe:	2b09      	cmp	r3, #9
 801afc0:	dc02      	bgt.n	801afc8 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801afc2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801afc4:	843b      	strh	r3, [r7, #32]
 801afc6:	e009      	b.n	801afdc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801afc8:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801afcc:	2b09      	cmp	r3, #9
 801afce:	dc02      	bgt.n	801afd6 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801afd0:	8bfb      	ldrh	r3, [r7, #30]
 801afd2:	843b      	strh	r3, [r7, #32]
 801afd4:	e002      	b.n	801afdc <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801afd6:	f04f 33ff 	mov.w	r3, #4294967295
 801afda:	e054      	b.n	801b086 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801afdc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801afe0:	2b09      	cmp	r3, #9
 801afe2:	dd06      	ble.n	801aff2 <etharp_find_entry+0x236>
 801afe4:	4b2b      	ldr	r3, [pc, #172]	@ (801b094 <etharp_find_entry+0x2d8>)
 801afe6:	f240 127f 	movw	r2, #383	@ 0x17f
 801afea:	492e      	ldr	r1, [pc, #184]	@ (801b0a4 <etharp_find_entry+0x2e8>)
 801afec:	482b      	ldr	r0, [pc, #172]	@ (801b09c <etharp_find_entry+0x2e0>)
 801afee:	f003 fb87 	bl	801e700 <iprintf>
    etharp_free_entry(i);
 801aff2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801aff6:	4618      	mov	r0, r3
 801aff8:	f7ff fe06 	bl	801ac08 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801affc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b000:	2b09      	cmp	r3, #9
 801b002:	dd06      	ble.n	801b012 <etharp_find_entry+0x256>
 801b004:	4b23      	ldr	r3, [pc, #140]	@ (801b094 <etharp_find_entry+0x2d8>)
 801b006:	f240 1283 	movw	r2, #387	@ 0x183
 801b00a:	4926      	ldr	r1, [pc, #152]	@ (801b0a4 <etharp_find_entry+0x2e8>)
 801b00c:	4823      	ldr	r0, [pc, #140]	@ (801b09c <etharp_find_entry+0x2e0>)
 801b00e:	f003 fb77 	bl	801e700 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801b012:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b016:	491e      	ldr	r1, [pc, #120]	@ (801b090 <etharp_find_entry+0x2d4>)
 801b018:	4613      	mov	r3, r2
 801b01a:	005b      	lsls	r3, r3, #1
 801b01c:	4413      	add	r3, r2
 801b01e:	00db      	lsls	r3, r3, #3
 801b020:	440b      	add	r3, r1
 801b022:	3314      	adds	r3, #20
 801b024:	781b      	ldrb	r3, [r3, #0]
 801b026:	2b00      	cmp	r3, #0
 801b028:	d006      	beq.n	801b038 <etharp_find_entry+0x27c>
 801b02a:	4b1a      	ldr	r3, [pc, #104]	@ (801b094 <etharp_find_entry+0x2d8>)
 801b02c:	f44f 72c2 	mov.w	r2, #388	@ 0x184
 801b030:	491d      	ldr	r1, [pc, #116]	@ (801b0a8 <etharp_find_entry+0x2ec>)
 801b032:	481a      	ldr	r0, [pc, #104]	@ (801b09c <etharp_find_entry+0x2e0>)
 801b034:	f003 fb64 	bl	801e700 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801b038:	68fb      	ldr	r3, [r7, #12]
 801b03a:	2b00      	cmp	r3, #0
 801b03c:	d00b      	beq.n	801b056 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801b03e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b042:	68fb      	ldr	r3, [r7, #12]
 801b044:	6819      	ldr	r1, [r3, #0]
 801b046:	4812      	ldr	r0, [pc, #72]	@ (801b090 <etharp_find_entry+0x2d4>)
 801b048:	4613      	mov	r3, r2
 801b04a:	005b      	lsls	r3, r3, #1
 801b04c:	4413      	add	r3, r2
 801b04e:	00db      	lsls	r3, r3, #3
 801b050:	4403      	add	r3, r0
 801b052:	3304      	adds	r3, #4
 801b054:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801b056:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b05a:	490d      	ldr	r1, [pc, #52]	@ (801b090 <etharp_find_entry+0x2d4>)
 801b05c:	4613      	mov	r3, r2
 801b05e:	005b      	lsls	r3, r3, #1
 801b060:	4413      	add	r3, r2
 801b062:	00db      	lsls	r3, r3, #3
 801b064:	440b      	add	r3, r1
 801b066:	3312      	adds	r3, #18
 801b068:	2200      	movs	r2, #0
 801b06a:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801b06c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b070:	4907      	ldr	r1, [pc, #28]	@ (801b090 <etharp_find_entry+0x2d4>)
 801b072:	4613      	mov	r3, r2
 801b074:	005b      	lsls	r3, r3, #1
 801b076:	4413      	add	r3, r2
 801b078:	00db      	lsls	r3, r3, #3
 801b07a:	440b      	add	r3, r1
 801b07c:	3308      	adds	r3, #8
 801b07e:	687a      	ldr	r2, [r7, #4]
 801b080:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801b082:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801b086:	4618      	mov	r0, r3
 801b088:	3728      	adds	r7, #40	@ 0x28
 801b08a:	46bd      	mov	sp, r7
 801b08c:	bd80      	pop	{r7, pc}
 801b08e:	bf00      	nop
 801b090:	2001b0b4 	.word	0x2001b0b4
 801b094:	080248c0 	.word	0x080248c0
 801b098:	080248f8 	.word	0x080248f8
 801b09c:	08024938 	.word	0x08024938
 801b0a0:	08024960 	.word	0x08024960
 801b0a4:	08024978 	.word	0x08024978
 801b0a8:	0802498c 	.word	0x0802498c

0801b0ac <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801b0ac:	b580      	push	{r7, lr}
 801b0ae:	b088      	sub	sp, #32
 801b0b0:	af02      	add	r7, sp, #8
 801b0b2:	60f8      	str	r0, [r7, #12]
 801b0b4:	60b9      	str	r1, [r7, #8]
 801b0b6:	607a      	str	r2, [r7, #4]
 801b0b8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801b0ba:	68fb      	ldr	r3, [r7, #12]
 801b0bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b0c0:	2b06      	cmp	r3, #6
 801b0c2:	d006      	beq.n	801b0d2 <etharp_update_arp_entry+0x26>
 801b0c4:	4b48      	ldr	r3, [pc, #288]	@ (801b1e8 <etharp_update_arp_entry+0x13c>)
 801b0c6:	f240 12a9 	movw	r2, #425	@ 0x1a9
 801b0ca:	4948      	ldr	r1, [pc, #288]	@ (801b1ec <etharp_update_arp_entry+0x140>)
 801b0cc:	4848      	ldr	r0, [pc, #288]	@ (801b1f0 <etharp_update_arp_entry+0x144>)
 801b0ce:	f003 fb17 	bl	801e700 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801b0d2:	68bb      	ldr	r3, [r7, #8]
 801b0d4:	2b00      	cmp	r3, #0
 801b0d6:	d012      	beq.n	801b0fe <etharp_update_arp_entry+0x52>
 801b0d8:	68bb      	ldr	r3, [r7, #8]
 801b0da:	681b      	ldr	r3, [r3, #0]
 801b0dc:	2b00      	cmp	r3, #0
 801b0de:	d00e      	beq.n	801b0fe <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b0e0:	68bb      	ldr	r3, [r7, #8]
 801b0e2:	681b      	ldr	r3, [r3, #0]
 801b0e4:	68f9      	ldr	r1, [r7, #12]
 801b0e6:	4618      	mov	r0, r3
 801b0e8:	f001 f920 	bl	801c32c <ip4_addr_isbroadcast_u32>
 801b0ec:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801b0ee:	2b00      	cmp	r3, #0
 801b0f0:	d105      	bne.n	801b0fe <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801b0f2:	68bb      	ldr	r3, [r7, #8]
 801b0f4:	681b      	ldr	r3, [r3, #0]
 801b0f6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801b0fa:	2be0      	cmp	r3, #224	@ 0xe0
 801b0fc:	d102      	bne.n	801b104 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b0fe:	f06f 030f 	mvn.w	r3, #15
 801b102:	e06c      	b.n	801b1de <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801b104:	78fb      	ldrb	r3, [r7, #3]
 801b106:	68fa      	ldr	r2, [r7, #12]
 801b108:	4619      	mov	r1, r3
 801b10a:	68b8      	ldr	r0, [r7, #8]
 801b10c:	f7ff fe56 	bl	801adbc <etharp_find_entry>
 801b110:	4603      	mov	r3, r0
 801b112:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801b114:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801b118:	2b00      	cmp	r3, #0
 801b11a:	da02      	bge.n	801b122 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801b11c:	8afb      	ldrh	r3, [r7, #22]
 801b11e:	b25b      	sxtb	r3, r3
 801b120:	e05d      	b.n	801b1de <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801b122:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b126:	4933      	ldr	r1, [pc, #204]	@ (801b1f4 <etharp_update_arp_entry+0x148>)
 801b128:	4613      	mov	r3, r2
 801b12a:	005b      	lsls	r3, r3, #1
 801b12c:	4413      	add	r3, r2
 801b12e:	00db      	lsls	r3, r3, #3
 801b130:	440b      	add	r3, r1
 801b132:	3314      	adds	r3, #20
 801b134:	2202      	movs	r2, #2
 801b136:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801b138:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b13c:	492d      	ldr	r1, [pc, #180]	@ (801b1f4 <etharp_update_arp_entry+0x148>)
 801b13e:	4613      	mov	r3, r2
 801b140:	005b      	lsls	r3, r3, #1
 801b142:	4413      	add	r3, r2
 801b144:	00db      	lsls	r3, r3, #3
 801b146:	440b      	add	r3, r1
 801b148:	3308      	adds	r3, #8
 801b14a:	68fa      	ldr	r2, [r7, #12]
 801b14c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801b14e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b152:	4613      	mov	r3, r2
 801b154:	005b      	lsls	r3, r3, #1
 801b156:	4413      	add	r3, r2
 801b158:	00db      	lsls	r3, r3, #3
 801b15a:	3308      	adds	r3, #8
 801b15c:	4a25      	ldr	r2, [pc, #148]	@ (801b1f4 <etharp_update_arp_entry+0x148>)
 801b15e:	4413      	add	r3, r2
 801b160:	3304      	adds	r3, #4
 801b162:	2206      	movs	r2, #6
 801b164:	6879      	ldr	r1, [r7, #4]
 801b166:	4618      	mov	r0, r3
 801b168:	f003 fd59 	bl	801ec1e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801b16c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b170:	4920      	ldr	r1, [pc, #128]	@ (801b1f4 <etharp_update_arp_entry+0x148>)
 801b172:	4613      	mov	r3, r2
 801b174:	005b      	lsls	r3, r3, #1
 801b176:	4413      	add	r3, r2
 801b178:	00db      	lsls	r3, r3, #3
 801b17a:	440b      	add	r3, r1
 801b17c:	3312      	adds	r3, #18
 801b17e:	2200      	movs	r2, #0
 801b180:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801b182:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b186:	491b      	ldr	r1, [pc, #108]	@ (801b1f4 <etharp_update_arp_entry+0x148>)
 801b188:	4613      	mov	r3, r2
 801b18a:	005b      	lsls	r3, r3, #1
 801b18c:	4413      	add	r3, r2
 801b18e:	00db      	lsls	r3, r3, #3
 801b190:	440b      	add	r3, r1
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	2b00      	cmp	r3, #0
 801b196:	d021      	beq.n	801b1dc <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801b198:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b19c:	4915      	ldr	r1, [pc, #84]	@ (801b1f4 <etharp_update_arp_entry+0x148>)
 801b19e:	4613      	mov	r3, r2
 801b1a0:	005b      	lsls	r3, r3, #1
 801b1a2:	4413      	add	r3, r2
 801b1a4:	00db      	lsls	r3, r3, #3
 801b1a6:	440b      	add	r3, r1
 801b1a8:	681b      	ldr	r3, [r3, #0]
 801b1aa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801b1ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801b1b0:	4910      	ldr	r1, [pc, #64]	@ (801b1f4 <etharp_update_arp_entry+0x148>)
 801b1b2:	4613      	mov	r3, r2
 801b1b4:	005b      	lsls	r3, r3, #1
 801b1b6:	4413      	add	r3, r2
 801b1b8:	00db      	lsls	r3, r3, #3
 801b1ba:	440b      	add	r3, r1
 801b1bc:	2200      	movs	r2, #0
 801b1be:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801b1c0:	68fb      	ldr	r3, [r7, #12]
 801b1c2:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801b1c6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b1ca:	9300      	str	r3, [sp, #0]
 801b1cc:	687b      	ldr	r3, [r7, #4]
 801b1ce:	6939      	ldr	r1, [r7, #16]
 801b1d0:	68f8      	ldr	r0, [r7, #12]
 801b1d2:	f001 ffb9 	bl	801d148 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801b1d6:	6938      	ldr	r0, [r7, #16]
 801b1d8:	f7f7 fa4c 	bl	8012674 <pbuf_free>
  }
  return ERR_OK;
 801b1dc:	2300      	movs	r3, #0
}
 801b1de:	4618      	mov	r0, r3
 801b1e0:	3718      	adds	r7, #24
 801b1e2:	46bd      	mov	sp, r7
 801b1e4:	bd80      	pop	{r7, pc}
 801b1e6:	bf00      	nop
 801b1e8:	080248c0 	.word	0x080248c0
 801b1ec:	080249b8 	.word	0x080249b8
 801b1f0:	08024938 	.word	0x08024938
 801b1f4:	2001b0b4 	.word	0x2001b0b4

0801b1f8 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801b1f8:	b580      	push	{r7, lr}
 801b1fa:	b084      	sub	sp, #16
 801b1fc:	af00      	add	r7, sp, #0
 801b1fe:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b200:	2300      	movs	r3, #0
 801b202:	60fb      	str	r3, [r7, #12]
 801b204:	e01e      	b.n	801b244 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801b206:	4913      	ldr	r1, [pc, #76]	@ (801b254 <etharp_cleanup_netif+0x5c>)
 801b208:	68fa      	ldr	r2, [r7, #12]
 801b20a:	4613      	mov	r3, r2
 801b20c:	005b      	lsls	r3, r3, #1
 801b20e:	4413      	add	r3, r2
 801b210:	00db      	lsls	r3, r3, #3
 801b212:	440b      	add	r3, r1
 801b214:	3314      	adds	r3, #20
 801b216:	781b      	ldrb	r3, [r3, #0]
 801b218:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801b21a:	7afb      	ldrb	r3, [r7, #11]
 801b21c:	2b00      	cmp	r3, #0
 801b21e:	d00e      	beq.n	801b23e <etharp_cleanup_netif+0x46>
 801b220:	490c      	ldr	r1, [pc, #48]	@ (801b254 <etharp_cleanup_netif+0x5c>)
 801b222:	68fa      	ldr	r2, [r7, #12]
 801b224:	4613      	mov	r3, r2
 801b226:	005b      	lsls	r3, r3, #1
 801b228:	4413      	add	r3, r2
 801b22a:	00db      	lsls	r3, r3, #3
 801b22c:	440b      	add	r3, r1
 801b22e:	3308      	adds	r3, #8
 801b230:	681b      	ldr	r3, [r3, #0]
 801b232:	687a      	ldr	r2, [r7, #4]
 801b234:	429a      	cmp	r2, r3
 801b236:	d102      	bne.n	801b23e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801b238:	68f8      	ldr	r0, [r7, #12]
 801b23a:	f7ff fce5 	bl	801ac08 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b23e:	68fb      	ldr	r3, [r7, #12]
 801b240:	3301      	adds	r3, #1
 801b242:	60fb      	str	r3, [r7, #12]
 801b244:	68fb      	ldr	r3, [r7, #12]
 801b246:	2b09      	cmp	r3, #9
 801b248:	dddd      	ble.n	801b206 <etharp_cleanup_netif+0xe>
    }
  }
}
 801b24a:	bf00      	nop
 801b24c:	bf00      	nop
 801b24e:	3710      	adds	r7, #16
 801b250:	46bd      	mov	sp, r7
 801b252:	bd80      	pop	{r7, pc}
 801b254:	2001b0b4 	.word	0x2001b0b4

0801b258 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801b258:	b5b0      	push	{r4, r5, r7, lr}
 801b25a:	b08a      	sub	sp, #40	@ 0x28
 801b25c:	af04      	add	r7, sp, #16
 801b25e:	6078      	str	r0, [r7, #4]
 801b260:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801b262:	683b      	ldr	r3, [r7, #0]
 801b264:	2b00      	cmp	r3, #0
 801b266:	d107      	bne.n	801b278 <etharp_input+0x20>
 801b268:	4b3f      	ldr	r3, [pc, #252]	@ (801b368 <etharp_input+0x110>)
 801b26a:	f240 228a 	movw	r2, #650	@ 0x28a
 801b26e:	493f      	ldr	r1, [pc, #252]	@ (801b36c <etharp_input+0x114>)
 801b270:	483f      	ldr	r0, [pc, #252]	@ (801b370 <etharp_input+0x118>)
 801b272:	f003 fa45 	bl	801e700 <iprintf>
 801b276:	e074      	b.n	801b362 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	685b      	ldr	r3, [r3, #4]
 801b27c:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b27e:	693b      	ldr	r3, [r7, #16]
 801b280:	881b      	ldrh	r3, [r3, #0]
 801b282:	b29b      	uxth	r3, r3
 801b284:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b288:	d10c      	bne.n	801b2a4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b28a:	693b      	ldr	r3, [r7, #16]
 801b28c:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801b28e:	2b06      	cmp	r3, #6
 801b290:	d108      	bne.n	801b2a4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b292:	693b      	ldr	r3, [r7, #16]
 801b294:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801b296:	2b04      	cmp	r3, #4
 801b298:	d104      	bne.n	801b2a4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801b29a:	693b      	ldr	r3, [r7, #16]
 801b29c:	885b      	ldrh	r3, [r3, #2]
 801b29e:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801b2a0:	2b08      	cmp	r3, #8
 801b2a2:	d003      	beq.n	801b2ac <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801b2a4:	6878      	ldr	r0, [r7, #4]
 801b2a6:	f7f7 f9e5 	bl	8012674 <pbuf_free>
    return;
 801b2aa:	e05a      	b.n	801b362 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801b2ac:	693b      	ldr	r3, [r7, #16]
 801b2ae:	330e      	adds	r3, #14
 801b2b0:	681b      	ldr	r3, [r3, #0]
 801b2b2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801b2b4:	693b      	ldr	r3, [r7, #16]
 801b2b6:	3318      	adds	r3, #24
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b2bc:	683b      	ldr	r3, [r7, #0]
 801b2be:	3304      	adds	r3, #4
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	2b00      	cmp	r3, #0
 801b2c4:	d102      	bne.n	801b2cc <etharp_input+0x74>
    for_us = 0;
 801b2c6:	2300      	movs	r3, #0
 801b2c8:	75fb      	strb	r3, [r7, #23]
 801b2ca:	e009      	b.n	801b2e0 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801b2cc:	68ba      	ldr	r2, [r7, #8]
 801b2ce:	683b      	ldr	r3, [r7, #0]
 801b2d0:	3304      	adds	r3, #4
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	429a      	cmp	r2, r3
 801b2d6:	bf0c      	ite	eq
 801b2d8:	2301      	moveq	r3, #1
 801b2da:	2300      	movne	r3, #0
 801b2dc:	b2db      	uxtb	r3, r3
 801b2de:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801b2e0:	693b      	ldr	r3, [r7, #16]
 801b2e2:	f103 0208 	add.w	r2, r3, #8
 801b2e6:	7dfb      	ldrb	r3, [r7, #23]
 801b2e8:	2b00      	cmp	r3, #0
 801b2ea:	d001      	beq.n	801b2f0 <etharp_input+0x98>
 801b2ec:	2301      	movs	r3, #1
 801b2ee:	e000      	b.n	801b2f2 <etharp_input+0x9a>
 801b2f0:	2302      	movs	r3, #2
 801b2f2:	f107 010c 	add.w	r1, r7, #12
 801b2f6:	6838      	ldr	r0, [r7, #0]
 801b2f8:	f7ff fed8 	bl	801b0ac <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801b2fc:	693b      	ldr	r3, [r7, #16]
 801b2fe:	88db      	ldrh	r3, [r3, #6]
 801b300:	b29b      	uxth	r3, r3
 801b302:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b306:	d003      	beq.n	801b310 <etharp_input+0xb8>
 801b308:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801b30c:	d01e      	beq.n	801b34c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801b30e:	e025      	b.n	801b35c <etharp_input+0x104>
      if (for_us) {
 801b310:	7dfb      	ldrb	r3, [r7, #23]
 801b312:	2b00      	cmp	r3, #0
 801b314:	d021      	beq.n	801b35a <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801b316:	683b      	ldr	r3, [r7, #0]
 801b318:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801b31c:	693b      	ldr	r3, [r7, #16]
 801b31e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801b322:	683b      	ldr	r3, [r7, #0]
 801b324:	f103 052a 	add.w	r5, r3, #42	@ 0x2a
 801b328:	683b      	ldr	r3, [r7, #0]
 801b32a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801b32c:	693a      	ldr	r2, [r7, #16]
 801b32e:	3208      	adds	r2, #8
        etharp_raw(netif,
 801b330:	2102      	movs	r1, #2
 801b332:	9103      	str	r1, [sp, #12]
 801b334:	f107 010c 	add.w	r1, r7, #12
 801b338:	9102      	str	r1, [sp, #8]
 801b33a:	9201      	str	r2, [sp, #4]
 801b33c:	9300      	str	r3, [sp, #0]
 801b33e:	462b      	mov	r3, r5
 801b340:	4622      	mov	r2, r4
 801b342:	4601      	mov	r1, r0
 801b344:	6838      	ldr	r0, [r7, #0]
 801b346:	f000 faef 	bl	801b928 <etharp_raw>
      break;
 801b34a:	e006      	b.n	801b35a <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 801b34c:	f107 030c 	add.w	r3, r7, #12
 801b350:	4619      	mov	r1, r3
 801b352:	6838      	ldr	r0, [r7, #0]
 801b354:	f7fe f9d2 	bl	80196fc <dhcp_arp_reply>
      break;
 801b358:	e000      	b.n	801b35c <etharp_input+0x104>
      break;
 801b35a:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801b35c:	6878      	ldr	r0, [r7, #4]
 801b35e:	f7f7 f989 	bl	8012674 <pbuf_free>
}
 801b362:	3718      	adds	r7, #24
 801b364:	46bd      	mov	sp, r7
 801b366:	bdb0      	pop	{r4, r5, r7, pc}
 801b368:	080248c0 	.word	0x080248c0
 801b36c:	08024a10 	.word	0x08024a10
 801b370:	08024938 	.word	0x08024938

0801b374 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801b374:	b580      	push	{r7, lr}
 801b376:	b086      	sub	sp, #24
 801b378:	af02      	add	r7, sp, #8
 801b37a:	60f8      	str	r0, [r7, #12]
 801b37c:	60b9      	str	r1, [r7, #8]
 801b37e:	4613      	mov	r3, r2
 801b380:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801b382:	79fa      	ldrb	r2, [r7, #7]
 801b384:	4944      	ldr	r1, [pc, #272]	@ (801b498 <etharp_output_to_arp_index+0x124>)
 801b386:	4613      	mov	r3, r2
 801b388:	005b      	lsls	r3, r3, #1
 801b38a:	4413      	add	r3, r2
 801b38c:	00db      	lsls	r3, r3, #3
 801b38e:	440b      	add	r3, r1
 801b390:	3314      	adds	r3, #20
 801b392:	781b      	ldrb	r3, [r3, #0]
 801b394:	2b01      	cmp	r3, #1
 801b396:	d806      	bhi.n	801b3a6 <etharp_output_to_arp_index+0x32>
 801b398:	4b40      	ldr	r3, [pc, #256]	@ (801b49c <etharp_output_to_arp_index+0x128>)
 801b39a:	f240 22ee 	movw	r2, #750	@ 0x2ee
 801b39e:	4940      	ldr	r1, [pc, #256]	@ (801b4a0 <etharp_output_to_arp_index+0x12c>)
 801b3a0:	4840      	ldr	r0, [pc, #256]	@ (801b4a4 <etharp_output_to_arp_index+0x130>)
 801b3a2:	f003 f9ad 	bl	801e700 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801b3a6:	79fa      	ldrb	r2, [r7, #7]
 801b3a8:	493b      	ldr	r1, [pc, #236]	@ (801b498 <etharp_output_to_arp_index+0x124>)
 801b3aa:	4613      	mov	r3, r2
 801b3ac:	005b      	lsls	r3, r3, #1
 801b3ae:	4413      	add	r3, r2
 801b3b0:	00db      	lsls	r3, r3, #3
 801b3b2:	440b      	add	r3, r1
 801b3b4:	3314      	adds	r3, #20
 801b3b6:	781b      	ldrb	r3, [r3, #0]
 801b3b8:	2b02      	cmp	r3, #2
 801b3ba:	d153      	bne.n	801b464 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801b3bc:	79fa      	ldrb	r2, [r7, #7]
 801b3be:	4936      	ldr	r1, [pc, #216]	@ (801b498 <etharp_output_to_arp_index+0x124>)
 801b3c0:	4613      	mov	r3, r2
 801b3c2:	005b      	lsls	r3, r3, #1
 801b3c4:	4413      	add	r3, r2
 801b3c6:	00db      	lsls	r3, r3, #3
 801b3c8:	440b      	add	r3, r1
 801b3ca:	3312      	adds	r3, #18
 801b3cc:	881b      	ldrh	r3, [r3, #0]
 801b3ce:	f5b3 7f8e 	cmp.w	r3, #284	@ 0x11c
 801b3d2:	d919      	bls.n	801b408 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801b3d4:	79fa      	ldrb	r2, [r7, #7]
 801b3d6:	4613      	mov	r3, r2
 801b3d8:	005b      	lsls	r3, r3, #1
 801b3da:	4413      	add	r3, r2
 801b3dc:	00db      	lsls	r3, r3, #3
 801b3de:	4a2e      	ldr	r2, [pc, #184]	@ (801b498 <etharp_output_to_arp_index+0x124>)
 801b3e0:	4413      	add	r3, r2
 801b3e2:	3304      	adds	r3, #4
 801b3e4:	4619      	mov	r1, r3
 801b3e6:	68f8      	ldr	r0, [r7, #12]
 801b3e8:	f000 fb4c 	bl	801ba84 <etharp_request>
 801b3ec:	4603      	mov	r3, r0
 801b3ee:	2b00      	cmp	r3, #0
 801b3f0:	d138      	bne.n	801b464 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b3f2:	79fa      	ldrb	r2, [r7, #7]
 801b3f4:	4928      	ldr	r1, [pc, #160]	@ (801b498 <etharp_output_to_arp_index+0x124>)
 801b3f6:	4613      	mov	r3, r2
 801b3f8:	005b      	lsls	r3, r3, #1
 801b3fa:	4413      	add	r3, r2
 801b3fc:	00db      	lsls	r3, r3, #3
 801b3fe:	440b      	add	r3, r1
 801b400:	3314      	adds	r3, #20
 801b402:	2203      	movs	r2, #3
 801b404:	701a      	strb	r2, [r3, #0]
 801b406:	e02d      	b.n	801b464 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801b408:	79fa      	ldrb	r2, [r7, #7]
 801b40a:	4923      	ldr	r1, [pc, #140]	@ (801b498 <etharp_output_to_arp_index+0x124>)
 801b40c:	4613      	mov	r3, r2
 801b40e:	005b      	lsls	r3, r3, #1
 801b410:	4413      	add	r3, r2
 801b412:	00db      	lsls	r3, r3, #3
 801b414:	440b      	add	r3, r1
 801b416:	3312      	adds	r3, #18
 801b418:	881b      	ldrh	r3, [r3, #0]
 801b41a:	f5b3 7f87 	cmp.w	r3, #270	@ 0x10e
 801b41e:	d321      	bcc.n	801b464 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801b420:	79fa      	ldrb	r2, [r7, #7]
 801b422:	4613      	mov	r3, r2
 801b424:	005b      	lsls	r3, r3, #1
 801b426:	4413      	add	r3, r2
 801b428:	00db      	lsls	r3, r3, #3
 801b42a:	4a1b      	ldr	r2, [pc, #108]	@ (801b498 <etharp_output_to_arp_index+0x124>)
 801b42c:	4413      	add	r3, r2
 801b42e:	1d19      	adds	r1, r3, #4
 801b430:	79fa      	ldrb	r2, [r7, #7]
 801b432:	4613      	mov	r3, r2
 801b434:	005b      	lsls	r3, r3, #1
 801b436:	4413      	add	r3, r2
 801b438:	00db      	lsls	r3, r3, #3
 801b43a:	3308      	adds	r3, #8
 801b43c:	4a16      	ldr	r2, [pc, #88]	@ (801b498 <etharp_output_to_arp_index+0x124>)
 801b43e:	4413      	add	r3, r2
 801b440:	3304      	adds	r3, #4
 801b442:	461a      	mov	r2, r3
 801b444:	68f8      	ldr	r0, [r7, #12]
 801b446:	f000 fafb 	bl	801ba40 <etharp_request_dst>
 801b44a:	4603      	mov	r3, r0
 801b44c:	2b00      	cmp	r3, #0
 801b44e:	d109      	bne.n	801b464 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801b450:	79fa      	ldrb	r2, [r7, #7]
 801b452:	4911      	ldr	r1, [pc, #68]	@ (801b498 <etharp_output_to_arp_index+0x124>)
 801b454:	4613      	mov	r3, r2
 801b456:	005b      	lsls	r3, r3, #1
 801b458:	4413      	add	r3, r2
 801b45a:	00db      	lsls	r3, r3, #3
 801b45c:	440b      	add	r3, r1
 801b45e:	3314      	adds	r3, #20
 801b460:	2203      	movs	r2, #3
 801b462:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801b464:	68fb      	ldr	r3, [r7, #12]
 801b466:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
 801b46a:	79fa      	ldrb	r2, [r7, #7]
 801b46c:	4613      	mov	r3, r2
 801b46e:	005b      	lsls	r3, r3, #1
 801b470:	4413      	add	r3, r2
 801b472:	00db      	lsls	r3, r3, #3
 801b474:	3308      	adds	r3, #8
 801b476:	4a08      	ldr	r2, [pc, #32]	@ (801b498 <etharp_output_to_arp_index+0x124>)
 801b478:	4413      	add	r3, r2
 801b47a:	3304      	adds	r3, #4
 801b47c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b480:	9200      	str	r2, [sp, #0]
 801b482:	460a      	mov	r2, r1
 801b484:	68b9      	ldr	r1, [r7, #8]
 801b486:	68f8      	ldr	r0, [r7, #12]
 801b488:	f001 fe5e 	bl	801d148 <ethernet_output>
 801b48c:	4603      	mov	r3, r0
}
 801b48e:	4618      	mov	r0, r3
 801b490:	3710      	adds	r7, #16
 801b492:	46bd      	mov	sp, r7
 801b494:	bd80      	pop	{r7, pc}
 801b496:	bf00      	nop
 801b498:	2001b0b4 	.word	0x2001b0b4
 801b49c:	080248c0 	.word	0x080248c0
 801b4a0:	08024a30 	.word	0x08024a30
 801b4a4:	08024938 	.word	0x08024938

0801b4a8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801b4a8:	b580      	push	{r7, lr}
 801b4aa:	b08a      	sub	sp, #40	@ 0x28
 801b4ac:	af02      	add	r7, sp, #8
 801b4ae:	60f8      	str	r0, [r7, #12]
 801b4b0:	60b9      	str	r1, [r7, #8]
 801b4b2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b4b8:	68fb      	ldr	r3, [r7, #12]
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	d106      	bne.n	801b4cc <etharp_output+0x24>
 801b4be:	4b73      	ldr	r3, [pc, #460]	@ (801b68c <etharp_output+0x1e4>)
 801b4c0:	f240 321e 	movw	r2, #798	@ 0x31e
 801b4c4:	4972      	ldr	r1, [pc, #456]	@ (801b690 <etharp_output+0x1e8>)
 801b4c6:	4873      	ldr	r0, [pc, #460]	@ (801b694 <etharp_output+0x1ec>)
 801b4c8:	f003 f91a 	bl	801e700 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801b4cc:	68bb      	ldr	r3, [r7, #8]
 801b4ce:	2b00      	cmp	r3, #0
 801b4d0:	d106      	bne.n	801b4e0 <etharp_output+0x38>
 801b4d2:	4b6e      	ldr	r3, [pc, #440]	@ (801b68c <etharp_output+0x1e4>)
 801b4d4:	f240 321f 	movw	r2, #799	@ 0x31f
 801b4d8:	496f      	ldr	r1, [pc, #444]	@ (801b698 <etharp_output+0x1f0>)
 801b4da:	486e      	ldr	r0, [pc, #440]	@ (801b694 <etharp_output+0x1ec>)
 801b4dc:	f003 f910 	bl	801e700 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801b4e0:	687b      	ldr	r3, [r7, #4]
 801b4e2:	2b00      	cmp	r3, #0
 801b4e4:	d106      	bne.n	801b4f4 <etharp_output+0x4c>
 801b4e6:	4b69      	ldr	r3, [pc, #420]	@ (801b68c <etharp_output+0x1e4>)
 801b4e8:	f44f 7248 	mov.w	r2, #800	@ 0x320
 801b4ec:	496b      	ldr	r1, [pc, #428]	@ (801b69c <etharp_output+0x1f4>)
 801b4ee:	4869      	ldr	r0, [pc, #420]	@ (801b694 <etharp_output+0x1ec>)
 801b4f0:	f003 f906 	bl	801e700 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801b4f4:	687b      	ldr	r3, [r7, #4]
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	68f9      	ldr	r1, [r7, #12]
 801b4fa:	4618      	mov	r0, r3
 801b4fc:	f000 ff16 	bl	801c32c <ip4_addr_isbroadcast_u32>
 801b500:	4603      	mov	r3, r0
 801b502:	2b00      	cmp	r3, #0
 801b504:	d002      	beq.n	801b50c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801b506:	4b66      	ldr	r3, [pc, #408]	@ (801b6a0 <etharp_output+0x1f8>)
 801b508:	61fb      	str	r3, [r7, #28]
 801b50a:	e0af      	b.n	801b66c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801b50c:	687b      	ldr	r3, [r7, #4]
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801b514:	2be0      	cmp	r3, #224	@ 0xe0
 801b516:	d118      	bne.n	801b54a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801b518:	2301      	movs	r3, #1
 801b51a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801b51c:	2300      	movs	r3, #0
 801b51e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801b520:	235e      	movs	r3, #94	@ 0x5e
 801b522:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	3301      	adds	r3, #1
 801b528:	781b      	ldrb	r3, [r3, #0]
 801b52a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b52e:	b2db      	uxtb	r3, r3
 801b530:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801b532:	687b      	ldr	r3, [r7, #4]
 801b534:	3302      	adds	r3, #2
 801b536:	781b      	ldrb	r3, [r3, #0]
 801b538:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801b53a:	687b      	ldr	r3, [r7, #4]
 801b53c:	3303      	adds	r3, #3
 801b53e:	781b      	ldrb	r3, [r3, #0]
 801b540:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801b542:	f107 0310 	add.w	r3, r7, #16
 801b546:	61fb      	str	r3, [r7, #28]
 801b548:	e090      	b.n	801b66c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b54a:	687b      	ldr	r3, [r7, #4]
 801b54c:	681a      	ldr	r2, [r3, #0]
 801b54e:	68fb      	ldr	r3, [r7, #12]
 801b550:	3304      	adds	r3, #4
 801b552:	681b      	ldr	r3, [r3, #0]
 801b554:	405a      	eors	r2, r3
 801b556:	68fb      	ldr	r3, [r7, #12]
 801b558:	3308      	adds	r3, #8
 801b55a:	681b      	ldr	r3, [r3, #0]
 801b55c:	4013      	ands	r3, r2
 801b55e:	2b00      	cmp	r3, #0
 801b560:	d012      	beq.n	801b588 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	681b      	ldr	r3, [r3, #0]
 801b566:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801b568:	f64f 62a9 	movw	r2, #65193	@ 0xfea9
 801b56c:	4293      	cmp	r3, r2
 801b56e:	d00b      	beq.n	801b588 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801b570:	68fb      	ldr	r3, [r7, #12]
 801b572:	330c      	adds	r3, #12
 801b574:	681b      	ldr	r3, [r3, #0]
 801b576:	2b00      	cmp	r3, #0
 801b578:	d003      	beq.n	801b582 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801b57a:	68fb      	ldr	r3, [r7, #12]
 801b57c:	330c      	adds	r3, #12
 801b57e:	61bb      	str	r3, [r7, #24]
 801b580:	e002      	b.n	801b588 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801b582:	f06f 0303 	mvn.w	r3, #3
 801b586:	e07d      	b.n	801b684 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b588:	4b46      	ldr	r3, [pc, #280]	@ (801b6a4 <etharp_output+0x1fc>)
 801b58a:	781b      	ldrb	r3, [r3, #0]
 801b58c:	4619      	mov	r1, r3
 801b58e:	4a46      	ldr	r2, [pc, #280]	@ (801b6a8 <etharp_output+0x200>)
 801b590:	460b      	mov	r3, r1
 801b592:	005b      	lsls	r3, r3, #1
 801b594:	440b      	add	r3, r1
 801b596:	00db      	lsls	r3, r3, #3
 801b598:	4413      	add	r3, r2
 801b59a:	3314      	adds	r3, #20
 801b59c:	781b      	ldrb	r3, [r3, #0]
 801b59e:	2b01      	cmp	r3, #1
 801b5a0:	d925      	bls.n	801b5ee <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b5a2:	4b40      	ldr	r3, [pc, #256]	@ (801b6a4 <etharp_output+0x1fc>)
 801b5a4:	781b      	ldrb	r3, [r3, #0]
 801b5a6:	4619      	mov	r1, r3
 801b5a8:	4a3f      	ldr	r2, [pc, #252]	@ (801b6a8 <etharp_output+0x200>)
 801b5aa:	460b      	mov	r3, r1
 801b5ac:	005b      	lsls	r3, r3, #1
 801b5ae:	440b      	add	r3, r1
 801b5b0:	00db      	lsls	r3, r3, #3
 801b5b2:	4413      	add	r3, r2
 801b5b4:	3308      	adds	r3, #8
 801b5b6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801b5b8:	68fa      	ldr	r2, [r7, #12]
 801b5ba:	429a      	cmp	r2, r3
 801b5bc:	d117      	bne.n	801b5ee <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801b5be:	69bb      	ldr	r3, [r7, #24]
 801b5c0:	681a      	ldr	r2, [r3, #0]
 801b5c2:	4b38      	ldr	r3, [pc, #224]	@ (801b6a4 <etharp_output+0x1fc>)
 801b5c4:	781b      	ldrb	r3, [r3, #0]
 801b5c6:	4618      	mov	r0, r3
 801b5c8:	4937      	ldr	r1, [pc, #220]	@ (801b6a8 <etharp_output+0x200>)
 801b5ca:	4603      	mov	r3, r0
 801b5cc:	005b      	lsls	r3, r3, #1
 801b5ce:	4403      	add	r3, r0
 801b5d0:	00db      	lsls	r3, r3, #3
 801b5d2:	440b      	add	r3, r1
 801b5d4:	3304      	adds	r3, #4
 801b5d6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801b5d8:	429a      	cmp	r2, r3
 801b5da:	d108      	bne.n	801b5ee <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801b5dc:	4b31      	ldr	r3, [pc, #196]	@ (801b6a4 <etharp_output+0x1fc>)
 801b5de:	781b      	ldrb	r3, [r3, #0]
 801b5e0:	461a      	mov	r2, r3
 801b5e2:	68b9      	ldr	r1, [r7, #8]
 801b5e4:	68f8      	ldr	r0, [r7, #12]
 801b5e6:	f7ff fec5 	bl	801b374 <etharp_output_to_arp_index>
 801b5ea:	4603      	mov	r3, r0
 801b5ec:	e04a      	b.n	801b684 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b5ee:	2300      	movs	r3, #0
 801b5f0:	75fb      	strb	r3, [r7, #23]
 801b5f2:	e031      	b.n	801b658 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b5f4:	7dfa      	ldrb	r2, [r7, #23]
 801b5f6:	492c      	ldr	r1, [pc, #176]	@ (801b6a8 <etharp_output+0x200>)
 801b5f8:	4613      	mov	r3, r2
 801b5fa:	005b      	lsls	r3, r3, #1
 801b5fc:	4413      	add	r3, r2
 801b5fe:	00db      	lsls	r3, r3, #3
 801b600:	440b      	add	r3, r1
 801b602:	3314      	adds	r3, #20
 801b604:	781b      	ldrb	r3, [r3, #0]
 801b606:	2b01      	cmp	r3, #1
 801b608:	d923      	bls.n	801b652 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801b60a:	7dfa      	ldrb	r2, [r7, #23]
 801b60c:	4926      	ldr	r1, [pc, #152]	@ (801b6a8 <etharp_output+0x200>)
 801b60e:	4613      	mov	r3, r2
 801b610:	005b      	lsls	r3, r3, #1
 801b612:	4413      	add	r3, r2
 801b614:	00db      	lsls	r3, r3, #3
 801b616:	440b      	add	r3, r1
 801b618:	3308      	adds	r3, #8
 801b61a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801b61c:	68fa      	ldr	r2, [r7, #12]
 801b61e:	429a      	cmp	r2, r3
 801b620:	d117      	bne.n	801b652 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801b622:	69bb      	ldr	r3, [r7, #24]
 801b624:	6819      	ldr	r1, [r3, #0]
 801b626:	7dfa      	ldrb	r2, [r7, #23]
 801b628:	481f      	ldr	r0, [pc, #124]	@ (801b6a8 <etharp_output+0x200>)
 801b62a:	4613      	mov	r3, r2
 801b62c:	005b      	lsls	r3, r3, #1
 801b62e:	4413      	add	r3, r2
 801b630:	00db      	lsls	r3, r3, #3
 801b632:	4403      	add	r3, r0
 801b634:	3304      	adds	r3, #4
 801b636:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801b638:	4299      	cmp	r1, r3
 801b63a:	d10a      	bne.n	801b652 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801b63c:	4a19      	ldr	r2, [pc, #100]	@ (801b6a4 <etharp_output+0x1fc>)
 801b63e:	7dfb      	ldrb	r3, [r7, #23]
 801b640:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801b642:	7dfb      	ldrb	r3, [r7, #23]
 801b644:	461a      	mov	r2, r3
 801b646:	68b9      	ldr	r1, [r7, #8]
 801b648:	68f8      	ldr	r0, [r7, #12]
 801b64a:	f7ff fe93 	bl	801b374 <etharp_output_to_arp_index>
 801b64e:	4603      	mov	r3, r0
 801b650:	e018      	b.n	801b684 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801b652:	7dfb      	ldrb	r3, [r7, #23]
 801b654:	3301      	adds	r3, #1
 801b656:	75fb      	strb	r3, [r7, #23]
 801b658:	7dfb      	ldrb	r3, [r7, #23]
 801b65a:	2b09      	cmp	r3, #9
 801b65c:	d9ca      	bls.n	801b5f4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801b65e:	68ba      	ldr	r2, [r7, #8]
 801b660:	69b9      	ldr	r1, [r7, #24]
 801b662:	68f8      	ldr	r0, [r7, #12]
 801b664:	f000 f822 	bl	801b6ac <etharp_query>
 801b668:	4603      	mov	r3, r0
 801b66a:	e00b      	b.n	801b684 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801b66c:	68fb      	ldr	r3, [r7, #12]
 801b66e:	f103 022a 	add.w	r2, r3, #42	@ 0x2a
 801b672:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801b676:	9300      	str	r3, [sp, #0]
 801b678:	69fb      	ldr	r3, [r7, #28]
 801b67a:	68b9      	ldr	r1, [r7, #8]
 801b67c:	68f8      	ldr	r0, [r7, #12]
 801b67e:	f001 fd63 	bl	801d148 <ethernet_output>
 801b682:	4603      	mov	r3, r0
}
 801b684:	4618      	mov	r0, r3
 801b686:	3720      	adds	r7, #32
 801b688:	46bd      	mov	sp, r7
 801b68a:	bd80      	pop	{r7, pc}
 801b68c:	080248c0 	.word	0x080248c0
 801b690:	08024a10 	.word	0x08024a10
 801b694:	08024938 	.word	0x08024938
 801b698:	08024a60 	.word	0x08024a60
 801b69c:	08024a00 	.word	0x08024a00
 801b6a0:	080252f0 	.word	0x080252f0
 801b6a4:	2001b1a4 	.word	0x2001b1a4
 801b6a8:	2001b0b4 	.word	0x2001b0b4

0801b6ac <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801b6ac:	b580      	push	{r7, lr}
 801b6ae:	b08c      	sub	sp, #48	@ 0x30
 801b6b0:	af02      	add	r7, sp, #8
 801b6b2:	60f8      	str	r0, [r7, #12]
 801b6b4:	60b9      	str	r1, [r7, #8]
 801b6b6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801b6b8:	68fb      	ldr	r3, [r7, #12]
 801b6ba:	332a      	adds	r3, #42	@ 0x2a
 801b6bc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801b6be:	23ff      	movs	r3, #255	@ 0xff
 801b6c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  int is_new_entry = 0;
 801b6c4:	2300      	movs	r3, #0
 801b6c6:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b6c8:	68bb      	ldr	r3, [r7, #8]
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	68f9      	ldr	r1, [r7, #12]
 801b6ce:	4618      	mov	r0, r3
 801b6d0:	f000 fe2c 	bl	801c32c <ip4_addr_isbroadcast_u32>
 801b6d4:	4603      	mov	r3, r0
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d10c      	bne.n	801b6f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b6da:	68bb      	ldr	r3, [r7, #8]
 801b6dc:	681b      	ldr	r3, [r3, #0]
 801b6de:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801b6e2:	2be0      	cmp	r3, #224	@ 0xe0
 801b6e4:	d006      	beq.n	801b6f4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801b6e6:	68bb      	ldr	r3, [r7, #8]
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d003      	beq.n	801b6f4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801b6ec:	68bb      	ldr	r3, [r7, #8]
 801b6ee:	681b      	ldr	r3, [r3, #0]
 801b6f0:	2b00      	cmp	r3, #0
 801b6f2:	d102      	bne.n	801b6fa <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801b6f4:	f06f 030f 	mvn.w	r3, #15
 801b6f8:	e101      	b.n	801b8fe <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801b6fa:	68fa      	ldr	r2, [r7, #12]
 801b6fc:	2101      	movs	r1, #1
 801b6fe:	68b8      	ldr	r0, [r7, #8]
 801b700:	f7ff fb5c 	bl	801adbc <etharp_find_entry>
 801b704:	4603      	mov	r3, r0
 801b706:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801b708:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	da02      	bge.n	801b716 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801b710:	8a7b      	ldrh	r3, [r7, #18]
 801b712:	b25b      	sxtb	r3, r3
 801b714:	e0f3      	b.n	801b8fe <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801b716:	8a7b      	ldrh	r3, [r7, #18]
 801b718:	2b7e      	cmp	r3, #126	@ 0x7e
 801b71a:	d906      	bls.n	801b72a <etharp_query+0x7e>
 801b71c:	4b7a      	ldr	r3, [pc, #488]	@ (801b908 <etharp_query+0x25c>)
 801b71e:	f240 32c1 	movw	r2, #961	@ 0x3c1
 801b722:	497a      	ldr	r1, [pc, #488]	@ (801b90c <etharp_query+0x260>)
 801b724:	487a      	ldr	r0, [pc, #488]	@ (801b910 <etharp_query+0x264>)
 801b726:	f002 ffeb 	bl	801e700 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801b72a:	8a7b      	ldrh	r3, [r7, #18]
 801b72c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801b72e:	7c7a      	ldrb	r2, [r7, #17]
 801b730:	4978      	ldr	r1, [pc, #480]	@ (801b914 <etharp_query+0x268>)
 801b732:	4613      	mov	r3, r2
 801b734:	005b      	lsls	r3, r3, #1
 801b736:	4413      	add	r3, r2
 801b738:	00db      	lsls	r3, r3, #3
 801b73a:	440b      	add	r3, r1
 801b73c:	3314      	adds	r3, #20
 801b73e:	781b      	ldrb	r3, [r3, #0]
 801b740:	2b00      	cmp	r3, #0
 801b742:	d115      	bne.n	801b770 <etharp_query+0xc4>
    is_new_entry = 1;
 801b744:	2301      	movs	r3, #1
 801b746:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801b748:	7c7a      	ldrb	r2, [r7, #17]
 801b74a:	4972      	ldr	r1, [pc, #456]	@ (801b914 <etharp_query+0x268>)
 801b74c:	4613      	mov	r3, r2
 801b74e:	005b      	lsls	r3, r3, #1
 801b750:	4413      	add	r3, r2
 801b752:	00db      	lsls	r3, r3, #3
 801b754:	440b      	add	r3, r1
 801b756:	3314      	adds	r3, #20
 801b758:	2201      	movs	r2, #1
 801b75a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801b75c:	7c7a      	ldrb	r2, [r7, #17]
 801b75e:	496d      	ldr	r1, [pc, #436]	@ (801b914 <etharp_query+0x268>)
 801b760:	4613      	mov	r3, r2
 801b762:	005b      	lsls	r3, r3, #1
 801b764:	4413      	add	r3, r2
 801b766:	00db      	lsls	r3, r3, #3
 801b768:	440b      	add	r3, r1
 801b76a:	3308      	adds	r3, #8
 801b76c:	68fa      	ldr	r2, [r7, #12]
 801b76e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801b770:	7c7a      	ldrb	r2, [r7, #17]
 801b772:	4968      	ldr	r1, [pc, #416]	@ (801b914 <etharp_query+0x268>)
 801b774:	4613      	mov	r3, r2
 801b776:	005b      	lsls	r3, r3, #1
 801b778:	4413      	add	r3, r2
 801b77a:	00db      	lsls	r3, r3, #3
 801b77c:	440b      	add	r3, r1
 801b77e:	3314      	adds	r3, #20
 801b780:	781b      	ldrb	r3, [r3, #0]
 801b782:	2b01      	cmp	r3, #1
 801b784:	d011      	beq.n	801b7aa <etharp_query+0xfe>
 801b786:	7c7a      	ldrb	r2, [r7, #17]
 801b788:	4962      	ldr	r1, [pc, #392]	@ (801b914 <etharp_query+0x268>)
 801b78a:	4613      	mov	r3, r2
 801b78c:	005b      	lsls	r3, r3, #1
 801b78e:	4413      	add	r3, r2
 801b790:	00db      	lsls	r3, r3, #3
 801b792:	440b      	add	r3, r1
 801b794:	3314      	adds	r3, #20
 801b796:	781b      	ldrb	r3, [r3, #0]
 801b798:	2b01      	cmp	r3, #1
 801b79a:	d806      	bhi.n	801b7aa <etharp_query+0xfe>
 801b79c:	4b5a      	ldr	r3, [pc, #360]	@ (801b908 <etharp_query+0x25c>)
 801b79e:	f240 32cd 	movw	r2, #973	@ 0x3cd
 801b7a2:	495d      	ldr	r1, [pc, #372]	@ (801b918 <etharp_query+0x26c>)
 801b7a4:	485a      	ldr	r0, [pc, #360]	@ (801b910 <etharp_query+0x264>)
 801b7a6:	f002 ffab 	bl	801e700 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801b7aa:	6a3b      	ldr	r3, [r7, #32]
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d102      	bne.n	801b7b6 <etharp_query+0x10a>
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d10c      	bne.n	801b7d0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801b7b6:	68b9      	ldr	r1, [r7, #8]
 801b7b8:	68f8      	ldr	r0, [r7, #12]
 801b7ba:	f000 f963 	bl	801ba84 <etharp_request>
 801b7be:	4603      	mov	r3, r0
 801b7c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	d102      	bne.n	801b7d0 <etharp_query+0x124>
      return result;
 801b7ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 801b7ce:	e096      	b.n	801b8fe <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	2b00      	cmp	r3, #0
 801b7d4:	d106      	bne.n	801b7e4 <etharp_query+0x138>
 801b7d6:	4b4c      	ldr	r3, [pc, #304]	@ (801b908 <etharp_query+0x25c>)
 801b7d8:	f240 32e1 	movw	r2, #993	@ 0x3e1
 801b7dc:	494f      	ldr	r1, [pc, #316]	@ (801b91c <etharp_query+0x270>)
 801b7de:	484c      	ldr	r0, [pc, #304]	@ (801b910 <etharp_query+0x264>)
 801b7e0:	f002 ff8e 	bl	801e700 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801b7e4:	7c7a      	ldrb	r2, [r7, #17]
 801b7e6:	494b      	ldr	r1, [pc, #300]	@ (801b914 <etharp_query+0x268>)
 801b7e8:	4613      	mov	r3, r2
 801b7ea:	005b      	lsls	r3, r3, #1
 801b7ec:	4413      	add	r3, r2
 801b7ee:	00db      	lsls	r3, r3, #3
 801b7f0:	440b      	add	r3, r1
 801b7f2:	3314      	adds	r3, #20
 801b7f4:	781b      	ldrb	r3, [r3, #0]
 801b7f6:	2b01      	cmp	r3, #1
 801b7f8:	d917      	bls.n	801b82a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801b7fa:	4a49      	ldr	r2, [pc, #292]	@ (801b920 <etharp_query+0x274>)
 801b7fc:	7c7b      	ldrb	r3, [r7, #17]
 801b7fe:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801b800:	7c7a      	ldrb	r2, [r7, #17]
 801b802:	4613      	mov	r3, r2
 801b804:	005b      	lsls	r3, r3, #1
 801b806:	4413      	add	r3, r2
 801b808:	00db      	lsls	r3, r3, #3
 801b80a:	3308      	adds	r3, #8
 801b80c:	4a41      	ldr	r2, [pc, #260]	@ (801b914 <etharp_query+0x268>)
 801b80e:	4413      	add	r3, r2
 801b810:	3304      	adds	r3, #4
 801b812:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801b816:	9200      	str	r2, [sp, #0]
 801b818:	697a      	ldr	r2, [r7, #20]
 801b81a:	6879      	ldr	r1, [r7, #4]
 801b81c:	68f8      	ldr	r0, [r7, #12]
 801b81e:	f001 fc93 	bl	801d148 <ethernet_output>
 801b822:	4603      	mov	r3, r0
 801b824:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b828:	e067      	b.n	801b8fa <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b82a:	7c7a      	ldrb	r2, [r7, #17]
 801b82c:	4939      	ldr	r1, [pc, #228]	@ (801b914 <etharp_query+0x268>)
 801b82e:	4613      	mov	r3, r2
 801b830:	005b      	lsls	r3, r3, #1
 801b832:	4413      	add	r3, r2
 801b834:	00db      	lsls	r3, r3, #3
 801b836:	440b      	add	r3, r1
 801b838:	3314      	adds	r3, #20
 801b83a:	781b      	ldrb	r3, [r3, #0]
 801b83c:	2b01      	cmp	r3, #1
 801b83e:	d15c      	bne.n	801b8fa <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801b840:	2300      	movs	r3, #0
 801b842:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801b844:	687b      	ldr	r3, [r7, #4]
 801b846:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b848:	e01c      	b.n	801b884 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801b84a:	69fb      	ldr	r3, [r7, #28]
 801b84c:	895a      	ldrh	r2, [r3, #10]
 801b84e:	69fb      	ldr	r3, [r7, #28]
 801b850:	891b      	ldrh	r3, [r3, #8]
 801b852:	429a      	cmp	r2, r3
 801b854:	d10a      	bne.n	801b86c <etharp_query+0x1c0>
 801b856:	69fb      	ldr	r3, [r7, #28]
 801b858:	681b      	ldr	r3, [r3, #0]
 801b85a:	2b00      	cmp	r3, #0
 801b85c:	d006      	beq.n	801b86c <etharp_query+0x1c0>
 801b85e:	4b2a      	ldr	r3, [pc, #168]	@ (801b908 <etharp_query+0x25c>)
 801b860:	f240 32f1 	movw	r2, #1009	@ 0x3f1
 801b864:	492f      	ldr	r1, [pc, #188]	@ (801b924 <etharp_query+0x278>)
 801b866:	482a      	ldr	r0, [pc, #168]	@ (801b910 <etharp_query+0x264>)
 801b868:	f002 ff4a 	bl	801e700 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801b86c:	69fb      	ldr	r3, [r7, #28]
 801b86e:	7b1b      	ldrb	r3, [r3, #12]
 801b870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801b874:	2b00      	cmp	r3, #0
 801b876:	d002      	beq.n	801b87e <etharp_query+0x1d2>
        copy_needed = 1;
 801b878:	2301      	movs	r3, #1
 801b87a:	61bb      	str	r3, [r7, #24]
        break;
 801b87c:	e005      	b.n	801b88a <etharp_query+0x1de>
      }
      p = p->next;
 801b87e:	69fb      	ldr	r3, [r7, #28]
 801b880:	681b      	ldr	r3, [r3, #0]
 801b882:	61fb      	str	r3, [r7, #28]
    while (p) {
 801b884:	69fb      	ldr	r3, [r7, #28]
 801b886:	2b00      	cmp	r3, #0
 801b888:	d1df      	bne.n	801b84a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801b88a:	69bb      	ldr	r3, [r7, #24]
 801b88c:	2b00      	cmp	r3, #0
 801b88e:	d007      	beq.n	801b8a0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801b890:	687a      	ldr	r2, [r7, #4]
 801b892:	f44f 7120 	mov.w	r1, #640	@ 0x280
 801b896:	200e      	movs	r0, #14
 801b898:	f7f7 fa9c 	bl	8012dd4 <pbuf_clone>
 801b89c:	61f8      	str	r0, [r7, #28]
 801b89e:	e004      	b.n	801b8aa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801b8a4:	69f8      	ldr	r0, [r7, #28]
 801b8a6:	f7f6 ff8b 	bl	80127c0 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801b8aa:	69fb      	ldr	r3, [r7, #28]
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d021      	beq.n	801b8f4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801b8b0:	7c7a      	ldrb	r2, [r7, #17]
 801b8b2:	4918      	ldr	r1, [pc, #96]	@ (801b914 <etharp_query+0x268>)
 801b8b4:	4613      	mov	r3, r2
 801b8b6:	005b      	lsls	r3, r3, #1
 801b8b8:	4413      	add	r3, r2
 801b8ba:	00db      	lsls	r3, r3, #3
 801b8bc:	440b      	add	r3, r1
 801b8be:	681b      	ldr	r3, [r3, #0]
 801b8c0:	2b00      	cmp	r3, #0
 801b8c2:	d00a      	beq.n	801b8da <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801b8c4:	7c7a      	ldrb	r2, [r7, #17]
 801b8c6:	4913      	ldr	r1, [pc, #76]	@ (801b914 <etharp_query+0x268>)
 801b8c8:	4613      	mov	r3, r2
 801b8ca:	005b      	lsls	r3, r3, #1
 801b8cc:	4413      	add	r3, r2
 801b8ce:	00db      	lsls	r3, r3, #3
 801b8d0:	440b      	add	r3, r1
 801b8d2:	681b      	ldr	r3, [r3, #0]
 801b8d4:	4618      	mov	r0, r3
 801b8d6:	f7f6 fecd 	bl	8012674 <pbuf_free>
      }
      arp_table[i].q = p;
 801b8da:	7c7a      	ldrb	r2, [r7, #17]
 801b8dc:	490d      	ldr	r1, [pc, #52]	@ (801b914 <etharp_query+0x268>)
 801b8de:	4613      	mov	r3, r2
 801b8e0:	005b      	lsls	r3, r3, #1
 801b8e2:	4413      	add	r3, r2
 801b8e4:	00db      	lsls	r3, r3, #3
 801b8e6:	440b      	add	r3, r1
 801b8e8:	69fa      	ldr	r2, [r7, #28]
 801b8ea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801b8ec:	2300      	movs	r3, #0
 801b8ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 801b8f2:	e002      	b.n	801b8fa <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801b8f4:	23ff      	movs	r3, #255	@ 0xff
 801b8f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }
  return result;
 801b8fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 801b8fe:	4618      	mov	r0, r3
 801b900:	3728      	adds	r7, #40	@ 0x28
 801b902:	46bd      	mov	sp, r7
 801b904:	bd80      	pop	{r7, pc}
 801b906:	bf00      	nop
 801b908:	080248c0 	.word	0x080248c0
 801b90c:	08024a6c 	.word	0x08024a6c
 801b910:	08024938 	.word	0x08024938
 801b914:	2001b0b4 	.word	0x2001b0b4
 801b918:	08024a7c 	.word	0x08024a7c
 801b91c:	08024a60 	.word	0x08024a60
 801b920:	2001b1a4 	.word	0x2001b1a4
 801b924:	08024aa4 	.word	0x08024aa4

0801b928 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801b928:	b580      	push	{r7, lr}
 801b92a:	b08a      	sub	sp, #40	@ 0x28
 801b92c:	af02      	add	r7, sp, #8
 801b92e:	60f8      	str	r0, [r7, #12]
 801b930:	60b9      	str	r1, [r7, #8]
 801b932:	607a      	str	r2, [r7, #4]
 801b934:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801b936:	2300      	movs	r3, #0
 801b938:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b93a:	68fb      	ldr	r3, [r7, #12]
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	d106      	bne.n	801b94e <etharp_raw+0x26>
 801b940:	4b3a      	ldr	r3, [pc, #232]	@ (801ba2c <etharp_raw+0x104>)
 801b942:	f240 4257 	movw	r2, #1111	@ 0x457
 801b946:	493a      	ldr	r1, [pc, #232]	@ (801ba30 <etharp_raw+0x108>)
 801b948:	483a      	ldr	r0, [pc, #232]	@ (801ba34 <etharp_raw+0x10c>)
 801b94a:	f002 fed9 	bl	801e700 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801b94e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801b952:	211c      	movs	r1, #28
 801b954:	200e      	movs	r0, #14
 801b956:	f7f6 fba9 	bl	80120ac <pbuf_alloc>
 801b95a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801b95c:	69bb      	ldr	r3, [r7, #24]
 801b95e:	2b00      	cmp	r3, #0
 801b960:	d102      	bne.n	801b968 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801b962:	f04f 33ff 	mov.w	r3, #4294967295
 801b966:	e05d      	b.n	801ba24 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801b968:	69bb      	ldr	r3, [r7, #24]
 801b96a:	895b      	ldrh	r3, [r3, #10]
 801b96c:	2b1b      	cmp	r3, #27
 801b96e:	d806      	bhi.n	801b97e <etharp_raw+0x56>
 801b970:	4b2e      	ldr	r3, [pc, #184]	@ (801ba2c <etharp_raw+0x104>)
 801b972:	f240 4262 	movw	r2, #1122	@ 0x462
 801b976:	4930      	ldr	r1, [pc, #192]	@ (801ba38 <etharp_raw+0x110>)
 801b978:	482e      	ldr	r0, [pc, #184]	@ (801ba34 <etharp_raw+0x10c>)
 801b97a:	f002 fec1 	bl	801e700 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801b97e:	69bb      	ldr	r3, [r7, #24]
 801b980:	685b      	ldr	r3, [r3, #4]
 801b982:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801b984:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801b986:	4618      	mov	r0, r3
 801b988:	f7f4 ff88 	bl	801089c <lwip_htons>
 801b98c:	4603      	mov	r3, r0
 801b98e:	461a      	mov	r2, r3
 801b990:	697b      	ldr	r3, [r7, #20]
 801b992:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801b994:	68fb      	ldr	r3, [r7, #12]
 801b996:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801b99a:	2b06      	cmp	r3, #6
 801b99c:	d006      	beq.n	801b9ac <etharp_raw+0x84>
 801b99e:	4b23      	ldr	r3, [pc, #140]	@ (801ba2c <etharp_raw+0x104>)
 801b9a0:	f240 4269 	movw	r2, #1129	@ 0x469
 801b9a4:	4925      	ldr	r1, [pc, #148]	@ (801ba3c <etharp_raw+0x114>)
 801b9a6:	4823      	ldr	r0, [pc, #140]	@ (801ba34 <etharp_raw+0x10c>)
 801b9a8:	f002 feaa 	bl	801e700 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801b9ac:	697b      	ldr	r3, [r7, #20]
 801b9ae:	3308      	adds	r3, #8
 801b9b0:	2206      	movs	r2, #6
 801b9b2:	6839      	ldr	r1, [r7, #0]
 801b9b4:	4618      	mov	r0, r3
 801b9b6:	f003 f932 	bl	801ec1e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801b9ba:	697b      	ldr	r3, [r7, #20]
 801b9bc:	3312      	adds	r3, #18
 801b9be:	2206      	movs	r2, #6
 801b9c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801b9c2:	4618      	mov	r0, r3
 801b9c4:	f003 f92b 	bl	801ec1e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801b9c8:	697b      	ldr	r3, [r7, #20]
 801b9ca:	330e      	adds	r3, #14
 801b9cc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b9ce:	6812      	ldr	r2, [r2, #0]
 801b9d0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801b9d2:	697b      	ldr	r3, [r7, #20]
 801b9d4:	3318      	adds	r3, #24
 801b9d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b9d8:	6812      	ldr	r2, [r2, #0]
 801b9da:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801b9dc:	697b      	ldr	r3, [r7, #20]
 801b9de:	2200      	movs	r2, #0
 801b9e0:	701a      	strb	r2, [r3, #0]
 801b9e2:	2200      	movs	r2, #0
 801b9e4:	f042 0201 	orr.w	r2, r2, #1
 801b9e8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b9ea:	697b      	ldr	r3, [r7, #20]
 801b9ec:	2200      	movs	r2, #0
 801b9ee:	f042 0208 	orr.w	r2, r2, #8
 801b9f2:	709a      	strb	r2, [r3, #2]
 801b9f4:	2200      	movs	r2, #0
 801b9f6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801b9f8:	697b      	ldr	r3, [r7, #20]
 801b9fa:	2206      	movs	r2, #6
 801b9fc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801b9fe:	697b      	ldr	r3, [r7, #20]
 801ba00:	2204      	movs	r2, #4
 801ba02:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801ba04:	f640 0306 	movw	r3, #2054	@ 0x806
 801ba08:	9300      	str	r3, [sp, #0]
 801ba0a:	687b      	ldr	r3, [r7, #4]
 801ba0c:	68ba      	ldr	r2, [r7, #8]
 801ba0e:	69b9      	ldr	r1, [r7, #24]
 801ba10:	68f8      	ldr	r0, [r7, #12]
 801ba12:	f001 fb99 	bl	801d148 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801ba16:	69b8      	ldr	r0, [r7, #24]
 801ba18:	f7f6 fe2c 	bl	8012674 <pbuf_free>
  p = NULL;
 801ba1c:	2300      	movs	r3, #0
 801ba1e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801ba20:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801ba24:	4618      	mov	r0, r3
 801ba26:	3720      	adds	r7, #32
 801ba28:	46bd      	mov	sp, r7
 801ba2a:	bd80      	pop	{r7, pc}
 801ba2c:	080248c0 	.word	0x080248c0
 801ba30:	08024a10 	.word	0x08024a10
 801ba34:	08024938 	.word	0x08024938
 801ba38:	08024ac0 	.word	0x08024ac0
 801ba3c:	08024af4 	.word	0x08024af4

0801ba40 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801ba40:	b580      	push	{r7, lr}
 801ba42:	b088      	sub	sp, #32
 801ba44:	af04      	add	r7, sp, #16
 801ba46:	60f8      	str	r0, [r7, #12]
 801ba48:	60b9      	str	r1, [r7, #8]
 801ba4a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ba4c:	68fb      	ldr	r3, [r7, #12]
 801ba4e:	f103 012a 	add.w	r1, r3, #42	@ 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801ba52:	68fb      	ldr	r3, [r7, #12]
 801ba54:	f103 002a 	add.w	r0, r3, #42	@ 0x2a
 801ba58:	68fb      	ldr	r3, [r7, #12]
 801ba5a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801ba5c:	2201      	movs	r2, #1
 801ba5e:	9203      	str	r2, [sp, #12]
 801ba60:	68ba      	ldr	r2, [r7, #8]
 801ba62:	9202      	str	r2, [sp, #8]
 801ba64:	4a06      	ldr	r2, [pc, #24]	@ (801ba80 <etharp_request_dst+0x40>)
 801ba66:	9201      	str	r2, [sp, #4]
 801ba68:	9300      	str	r3, [sp, #0]
 801ba6a:	4603      	mov	r3, r0
 801ba6c:	687a      	ldr	r2, [r7, #4]
 801ba6e:	68f8      	ldr	r0, [r7, #12]
 801ba70:	f7ff ff5a 	bl	801b928 <etharp_raw>
 801ba74:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801ba76:	4618      	mov	r0, r3
 801ba78:	3710      	adds	r7, #16
 801ba7a:	46bd      	mov	sp, r7
 801ba7c:	bd80      	pop	{r7, pc}
 801ba7e:	bf00      	nop
 801ba80:	080252f8 	.word	0x080252f8

0801ba84 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801ba84:	b580      	push	{r7, lr}
 801ba86:	b082      	sub	sp, #8
 801ba88:	af00      	add	r7, sp, #0
 801ba8a:	6078      	str	r0, [r7, #4]
 801ba8c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801ba8e:	4a05      	ldr	r2, [pc, #20]	@ (801baa4 <etharp_request+0x20>)
 801ba90:	6839      	ldr	r1, [r7, #0]
 801ba92:	6878      	ldr	r0, [r7, #4]
 801ba94:	f7ff ffd4 	bl	801ba40 <etharp_request_dst>
 801ba98:	4603      	mov	r3, r0
}
 801ba9a:	4618      	mov	r0, r3
 801ba9c:	3708      	adds	r7, #8
 801ba9e:	46bd      	mov	sp, r7
 801baa0:	bd80      	pop	{r7, pc}
 801baa2:	bf00      	nop
 801baa4:	080252f0 	.word	0x080252f0

0801baa8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801baa8:	b580      	push	{r7, lr}
 801baaa:	b08e      	sub	sp, #56	@ 0x38
 801baac:	af04      	add	r7, sp, #16
 801baae:	6078      	str	r0, [r7, #4]
 801bab0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801bab2:	4b79      	ldr	r3, [pc, #484]	@ (801bc98 <icmp_input+0x1f0>)
 801bab4:	689b      	ldr	r3, [r3, #8]
 801bab6:	627b      	str	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801bab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801baba:	781b      	ldrb	r3, [r3, #0]
 801babc:	f003 030f 	and.w	r3, r3, #15
 801bac0:	b2db      	uxtb	r3, r3
 801bac2:	009b      	lsls	r3, r3, #2
 801bac4:	b2db      	uxtb	r3, r3
 801bac6:	847b      	strh	r3, [r7, #34]	@ 0x22
  if (hlen < IP_HLEN) {
 801bac8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801baca:	2b13      	cmp	r3, #19
 801bacc:	f240 80cd 	bls.w	801bc6a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801bad0:	687b      	ldr	r3, [r7, #4]
 801bad2:	895b      	ldrh	r3, [r3, #10]
 801bad4:	2b03      	cmp	r3, #3
 801bad6:	f240 80ca 	bls.w	801bc6e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	685b      	ldr	r3, [r3, #4]
 801bade:	781b      	ldrb	r3, [r3, #0]
 801bae0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801bae4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 801bae8:	2b00      	cmp	r3, #0
 801baea:	f000 80b7 	beq.w	801bc5c <icmp_input+0x1b4>
 801baee:	2b08      	cmp	r3, #8
 801baf0:	f040 80b7 	bne.w	801bc62 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801baf4:	4b69      	ldr	r3, [pc, #420]	@ (801bc9c <icmp_input+0x1f4>)
 801baf6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801baf8:	4b67      	ldr	r3, [pc, #412]	@ (801bc98 <icmp_input+0x1f0>)
 801bafa:	695b      	ldr	r3, [r3, #20]
 801bafc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801bb00:	2be0      	cmp	r3, #224	@ 0xe0
 801bb02:	f000 80bb 	beq.w	801bc7c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801bb06:	4b64      	ldr	r3, [pc, #400]	@ (801bc98 <icmp_input+0x1f0>)
 801bb08:	695b      	ldr	r3, [r3, #20]
 801bb0a:	4a63      	ldr	r2, [pc, #396]	@ (801bc98 <icmp_input+0x1f0>)
 801bb0c:	6812      	ldr	r2, [r2, #0]
 801bb0e:	4611      	mov	r1, r2
 801bb10:	4618      	mov	r0, r3
 801bb12:	f000 fc0b 	bl	801c32c <ip4_addr_isbroadcast_u32>
 801bb16:	4603      	mov	r3, r0
 801bb18:	2b00      	cmp	r3, #0
 801bb1a:	f040 80b1 	bne.w	801bc80 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	891b      	ldrh	r3, [r3, #8]
 801bb22:	2b07      	cmp	r3, #7
 801bb24:	f240 80a5 	bls.w	801bc72 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801bb28:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bb2a:	330e      	adds	r3, #14
 801bb2c:	4619      	mov	r1, r3
 801bb2e:	6878      	ldr	r0, [r7, #4]
 801bb30:	f7f6 fd0a 	bl	8012548 <pbuf_add_header>
 801bb34:	4603      	mov	r3, r0
 801bb36:	2b00      	cmp	r3, #0
 801bb38:	d04b      	beq.n	801bbd2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801bb3a:	687b      	ldr	r3, [r7, #4]
 801bb3c:	891a      	ldrh	r2, [r3, #8]
 801bb3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bb40:	4413      	add	r3, r2
 801bb42:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801bb44:	687b      	ldr	r3, [r7, #4]
 801bb46:	891b      	ldrh	r3, [r3, #8]
 801bb48:	8b7a      	ldrh	r2, [r7, #26]
 801bb4a:	429a      	cmp	r2, r3
 801bb4c:	f0c0 809a 	bcc.w	801bc84 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801bb50:	8b7b      	ldrh	r3, [r7, #26]
 801bb52:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bb56:	4619      	mov	r1, r3
 801bb58:	200e      	movs	r0, #14
 801bb5a:	f7f6 faa7 	bl	80120ac <pbuf_alloc>
 801bb5e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801bb60:	697b      	ldr	r3, [r7, #20]
 801bb62:	2b00      	cmp	r3, #0
 801bb64:	f000 8090 	beq.w	801bc88 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801bb68:	697b      	ldr	r3, [r7, #20]
 801bb6a:	895b      	ldrh	r3, [r3, #10]
 801bb6c:	461a      	mov	r2, r3
 801bb6e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bb70:	3308      	adds	r3, #8
 801bb72:	429a      	cmp	r2, r3
 801bb74:	d203      	bcs.n	801bb7e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801bb76:	6978      	ldr	r0, [r7, #20]
 801bb78:	f7f6 fd7c 	bl	8012674 <pbuf_free>
          goto icmperr;
 801bb7c:	e085      	b.n	801bc8a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801bb7e:	697b      	ldr	r3, [r7, #20]
 801bb80:	685b      	ldr	r3, [r3, #4]
 801bb82:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 801bb84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801bb86:	4618      	mov	r0, r3
 801bb88:	f003 f849 	bl	801ec1e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801bb8c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bb8e:	4619      	mov	r1, r3
 801bb90:	6978      	ldr	r0, [r7, #20]
 801bb92:	f7f6 fce9 	bl	8012568 <pbuf_remove_header>
 801bb96:	4603      	mov	r3, r0
 801bb98:	2b00      	cmp	r3, #0
 801bb9a:	d009      	beq.n	801bbb0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801bb9c:	4b40      	ldr	r3, [pc, #256]	@ (801bca0 <icmp_input+0x1f8>)
 801bb9e:	22b6      	movs	r2, #182	@ 0xb6
 801bba0:	4940      	ldr	r1, [pc, #256]	@ (801bca4 <icmp_input+0x1fc>)
 801bba2:	4841      	ldr	r0, [pc, #260]	@ (801bca8 <icmp_input+0x200>)
 801bba4:	f002 fdac 	bl	801e700 <iprintf>
          pbuf_free(r);
 801bba8:	6978      	ldr	r0, [r7, #20]
 801bbaa:	f7f6 fd63 	bl	8012674 <pbuf_free>
          goto icmperr;
 801bbae:	e06c      	b.n	801bc8a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801bbb0:	6879      	ldr	r1, [r7, #4]
 801bbb2:	6978      	ldr	r0, [r7, #20]
 801bbb4:	f7f6 fe92 	bl	80128dc <pbuf_copy>
 801bbb8:	4603      	mov	r3, r0
 801bbba:	2b00      	cmp	r3, #0
 801bbbc:	d003      	beq.n	801bbc6 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801bbbe:	6978      	ldr	r0, [r7, #20]
 801bbc0:	f7f6 fd58 	bl	8012674 <pbuf_free>
          goto icmperr;
 801bbc4:	e061      	b.n	801bc8a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801bbc6:	6878      	ldr	r0, [r7, #4]
 801bbc8:	f7f6 fd54 	bl	8012674 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801bbcc:	697b      	ldr	r3, [r7, #20]
 801bbce:	607b      	str	r3, [r7, #4]
 801bbd0:	e00f      	b.n	801bbf2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801bbd2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bbd4:	330e      	adds	r3, #14
 801bbd6:	4619      	mov	r1, r3
 801bbd8:	6878      	ldr	r0, [r7, #4]
 801bbda:	f7f6 fcc5 	bl	8012568 <pbuf_remove_header>
 801bbde:	4603      	mov	r3, r0
 801bbe0:	2b00      	cmp	r3, #0
 801bbe2:	d006      	beq.n	801bbf2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801bbe4:	4b2e      	ldr	r3, [pc, #184]	@ (801bca0 <icmp_input+0x1f8>)
 801bbe6:	22c7      	movs	r2, #199	@ 0xc7
 801bbe8:	4930      	ldr	r1, [pc, #192]	@ (801bcac <icmp_input+0x204>)
 801bbea:	482f      	ldr	r0, [pc, #188]	@ (801bca8 <icmp_input+0x200>)
 801bbec:	f002 fd88 	bl	801e700 <iprintf>
          goto icmperr;
 801bbf0:	e04b      	b.n	801bc8a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801bbf2:	687b      	ldr	r3, [r7, #4]
 801bbf4:	685b      	ldr	r3, [r3, #4]
 801bbf6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801bbf8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 801bbfa:	4619      	mov	r1, r3
 801bbfc:	6878      	ldr	r0, [r7, #4]
 801bbfe:	f7f6 fca3 	bl	8012548 <pbuf_add_header>
 801bc02:	4603      	mov	r3, r0
 801bc04:	2b00      	cmp	r3, #0
 801bc06:	d12b      	bne.n	801bc60 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	685b      	ldr	r3, [r3, #4]
 801bc0c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801bc0e:	69fb      	ldr	r3, [r7, #28]
 801bc10:	681a      	ldr	r2, [r3, #0]
 801bc12:	68fb      	ldr	r3, [r7, #12]
 801bc14:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801bc16:	4b20      	ldr	r3, [pc, #128]	@ (801bc98 <icmp_input+0x1f0>)
 801bc18:	691a      	ldr	r2, [r3, #16]
 801bc1a:	68fb      	ldr	r3, [r7, #12]
 801bc1c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801bc1e:	693b      	ldr	r3, [r7, #16]
 801bc20:	2200      	movs	r2, #0
 801bc22:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801bc24:	693b      	ldr	r3, [r7, #16]
 801bc26:	2200      	movs	r2, #0
 801bc28:	709a      	strb	r2, [r3, #2]
 801bc2a:	2200      	movs	r2, #0
 801bc2c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801bc2e:	68fb      	ldr	r3, [r7, #12]
 801bc30:	22ff      	movs	r2, #255	@ 0xff
 801bc32:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801bc34:	68fb      	ldr	r3, [r7, #12]
 801bc36:	2200      	movs	r2, #0
 801bc38:	729a      	strb	r2, [r3, #10]
 801bc3a:	2200      	movs	r2, #0
 801bc3c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801bc3e:	683b      	ldr	r3, [r7, #0]
 801bc40:	9302      	str	r3, [sp, #8]
 801bc42:	2301      	movs	r3, #1
 801bc44:	9301      	str	r3, [sp, #4]
 801bc46:	2300      	movs	r3, #0
 801bc48:	9300      	str	r3, [sp, #0]
 801bc4a:	23ff      	movs	r3, #255	@ 0xff
 801bc4c:	2200      	movs	r2, #0
 801bc4e:	69f9      	ldr	r1, [r7, #28]
 801bc50:	6878      	ldr	r0, [r7, #4]
 801bc52:	f000 fa93 	bl	801c17c <ip4_output_if>
 801bc56:	4603      	mov	r3, r0
 801bc58:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801bc5a:	e001      	b.n	801bc60 <icmp_input+0x1b8>
      break;
 801bc5c:	bf00      	nop
 801bc5e:	e000      	b.n	801bc62 <icmp_input+0x1ba>
      break;
 801bc60:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801bc62:	6878      	ldr	r0, [r7, #4]
 801bc64:	f7f6 fd06 	bl	8012674 <pbuf_free>
  return;
 801bc68:	e013      	b.n	801bc92 <icmp_input+0x1ea>
    goto lenerr;
 801bc6a:	bf00      	nop
 801bc6c:	e002      	b.n	801bc74 <icmp_input+0x1cc>
    goto lenerr;
 801bc6e:	bf00      	nop
 801bc70:	e000      	b.n	801bc74 <icmp_input+0x1cc>
        goto lenerr;
 801bc72:	bf00      	nop
lenerr:
  pbuf_free(p);
 801bc74:	6878      	ldr	r0, [r7, #4]
 801bc76:	f7f6 fcfd 	bl	8012674 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801bc7a:	e00a      	b.n	801bc92 <icmp_input+0x1ea>
        goto icmperr;
 801bc7c:	bf00      	nop
 801bc7e:	e004      	b.n	801bc8a <icmp_input+0x1e2>
        goto icmperr;
 801bc80:	bf00      	nop
 801bc82:	e002      	b.n	801bc8a <icmp_input+0x1e2>
          goto icmperr;
 801bc84:	bf00      	nop
 801bc86:	e000      	b.n	801bc8a <icmp_input+0x1e2>
          goto icmperr;
 801bc88:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801bc8a:	6878      	ldr	r0, [r7, #4]
 801bc8c:	f7f6 fcf2 	bl	8012674 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801bc90:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801bc92:	3728      	adds	r7, #40	@ 0x28
 801bc94:	46bd      	mov	sp, r7
 801bc96:	bd80      	pop	{r7, pc}
 801bc98:	20017754 	.word	0x20017754
 801bc9c:	20017768 	.word	0x20017768
 801bca0:	08024b38 	.word	0x08024b38
 801bca4:	08024b70 	.word	0x08024b70
 801bca8:	08024ba8 	.word	0x08024ba8
 801bcac:	08024bd0 	.word	0x08024bd0

0801bcb0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801bcb0:	b580      	push	{r7, lr}
 801bcb2:	b082      	sub	sp, #8
 801bcb4:	af00      	add	r7, sp, #0
 801bcb6:	6078      	str	r0, [r7, #4]
 801bcb8:	460b      	mov	r3, r1
 801bcba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801bcbc:	78fb      	ldrb	r3, [r7, #3]
 801bcbe:	461a      	mov	r2, r3
 801bcc0:	2103      	movs	r1, #3
 801bcc2:	6878      	ldr	r0, [r7, #4]
 801bcc4:	f000 f814 	bl	801bcf0 <icmp_send_response>
}
 801bcc8:	bf00      	nop
 801bcca:	3708      	adds	r7, #8
 801bccc:	46bd      	mov	sp, r7
 801bcce:	bd80      	pop	{r7, pc}

0801bcd0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801bcd0:	b580      	push	{r7, lr}
 801bcd2:	b082      	sub	sp, #8
 801bcd4:	af00      	add	r7, sp, #0
 801bcd6:	6078      	str	r0, [r7, #4]
 801bcd8:	460b      	mov	r3, r1
 801bcda:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801bcdc:	78fb      	ldrb	r3, [r7, #3]
 801bcde:	461a      	mov	r2, r3
 801bce0:	210b      	movs	r1, #11
 801bce2:	6878      	ldr	r0, [r7, #4]
 801bce4:	f000 f804 	bl	801bcf0 <icmp_send_response>
}
 801bce8:	bf00      	nop
 801bcea:	3708      	adds	r7, #8
 801bcec:	46bd      	mov	sp, r7
 801bcee:	bd80      	pop	{r7, pc}

0801bcf0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801bcf0:	b580      	push	{r7, lr}
 801bcf2:	b08c      	sub	sp, #48	@ 0x30
 801bcf4:	af04      	add	r7, sp, #16
 801bcf6:	6078      	str	r0, [r7, #4]
 801bcf8:	460b      	mov	r3, r1
 801bcfa:	70fb      	strb	r3, [r7, #3]
 801bcfc:	4613      	mov	r3, r2
 801bcfe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801bd00:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801bd04:	2124      	movs	r1, #36	@ 0x24
 801bd06:	2022      	movs	r0, #34	@ 0x22
 801bd08:	f7f6 f9d0 	bl	80120ac <pbuf_alloc>
 801bd0c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801bd0e:	69fb      	ldr	r3, [r7, #28]
 801bd10:	2b00      	cmp	r3, #0
 801bd12:	d04c      	beq.n	801bdae <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801bd14:	69fb      	ldr	r3, [r7, #28]
 801bd16:	895b      	ldrh	r3, [r3, #10]
 801bd18:	2b23      	cmp	r3, #35	@ 0x23
 801bd1a:	d806      	bhi.n	801bd2a <icmp_send_response+0x3a>
 801bd1c:	4b26      	ldr	r3, [pc, #152]	@ (801bdb8 <icmp_send_response+0xc8>)
 801bd1e:	f44f 72b4 	mov.w	r2, #360	@ 0x168
 801bd22:	4926      	ldr	r1, [pc, #152]	@ (801bdbc <icmp_send_response+0xcc>)
 801bd24:	4826      	ldr	r0, [pc, #152]	@ (801bdc0 <icmp_send_response+0xd0>)
 801bd26:	f002 fceb 	bl	801e700 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801bd2a:	687b      	ldr	r3, [r7, #4]
 801bd2c:	685b      	ldr	r3, [r3, #4]
 801bd2e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801bd30:	69fb      	ldr	r3, [r7, #28]
 801bd32:	685b      	ldr	r3, [r3, #4]
 801bd34:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801bd36:	697b      	ldr	r3, [r7, #20]
 801bd38:	78fa      	ldrb	r2, [r7, #3]
 801bd3a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801bd3c:	697b      	ldr	r3, [r7, #20]
 801bd3e:	78ba      	ldrb	r2, [r7, #2]
 801bd40:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801bd42:	697b      	ldr	r3, [r7, #20]
 801bd44:	2200      	movs	r2, #0
 801bd46:	711a      	strb	r2, [r3, #4]
 801bd48:	2200      	movs	r2, #0
 801bd4a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801bd4c:	697b      	ldr	r3, [r7, #20]
 801bd4e:	2200      	movs	r2, #0
 801bd50:	719a      	strb	r2, [r3, #6]
 801bd52:	2200      	movs	r2, #0
 801bd54:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801bd56:	69fb      	ldr	r3, [r7, #28]
 801bd58:	685b      	ldr	r3, [r3, #4]
 801bd5a:	f103 0008 	add.w	r0, r3, #8
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	685b      	ldr	r3, [r3, #4]
 801bd62:	221c      	movs	r2, #28
 801bd64:	4619      	mov	r1, r3
 801bd66:	f002 ff5a 	bl	801ec1e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801bd6a:	69bb      	ldr	r3, [r7, #24]
 801bd6c:	68db      	ldr	r3, [r3, #12]
 801bd6e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801bd70:	f107 030c 	add.w	r3, r7, #12
 801bd74:	4618      	mov	r0, r3
 801bd76:	f000 f825 	bl	801bdc4 <ip4_route>
 801bd7a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801bd7c:	693b      	ldr	r3, [r7, #16]
 801bd7e:	2b00      	cmp	r3, #0
 801bd80:	d011      	beq.n	801bda6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801bd82:	697b      	ldr	r3, [r7, #20]
 801bd84:	2200      	movs	r2, #0
 801bd86:	709a      	strb	r2, [r3, #2]
 801bd88:	2200      	movs	r2, #0
 801bd8a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801bd8c:	f107 020c 	add.w	r2, r7, #12
 801bd90:	693b      	ldr	r3, [r7, #16]
 801bd92:	9302      	str	r3, [sp, #8]
 801bd94:	2301      	movs	r3, #1
 801bd96:	9301      	str	r3, [sp, #4]
 801bd98:	2300      	movs	r3, #0
 801bd9a:	9300      	str	r3, [sp, #0]
 801bd9c:	23ff      	movs	r3, #255	@ 0xff
 801bd9e:	2100      	movs	r1, #0
 801bda0:	69f8      	ldr	r0, [r7, #28]
 801bda2:	f000 f9eb 	bl	801c17c <ip4_output_if>
  }
  pbuf_free(q);
 801bda6:	69f8      	ldr	r0, [r7, #28]
 801bda8:	f7f6 fc64 	bl	8012674 <pbuf_free>
 801bdac:	e000      	b.n	801bdb0 <icmp_send_response+0xc0>
    return;
 801bdae:	bf00      	nop
}
 801bdb0:	3720      	adds	r7, #32
 801bdb2:	46bd      	mov	sp, r7
 801bdb4:	bd80      	pop	{r7, pc}
 801bdb6:	bf00      	nop
 801bdb8:	08024b38 	.word	0x08024b38
 801bdbc:	08024c04 	.word	0x08024c04
 801bdc0:	08024ba8 	.word	0x08024ba8

0801bdc4 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801bdc4:	b480      	push	{r7}
 801bdc6:	b085      	sub	sp, #20
 801bdc8:	af00      	add	r7, sp, #0
 801bdca:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801bdcc:	4b33      	ldr	r3, [pc, #204]	@ (801be9c <ip4_route+0xd8>)
 801bdce:	681b      	ldr	r3, [r3, #0]
 801bdd0:	60fb      	str	r3, [r7, #12]
 801bdd2:	e036      	b.n	801be42 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801bdd4:	68fb      	ldr	r3, [r7, #12]
 801bdd6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bdda:	f003 0301 	and.w	r3, r3, #1
 801bdde:	b2db      	uxtb	r3, r3
 801bde0:	2b00      	cmp	r3, #0
 801bde2:	d02b      	beq.n	801be3c <ip4_route+0x78>
 801bde4:	68fb      	ldr	r3, [r7, #12]
 801bde6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bdea:	089b      	lsrs	r3, r3, #2
 801bdec:	f003 0301 	and.w	r3, r3, #1
 801bdf0:	b2db      	uxtb	r3, r3
 801bdf2:	2b00      	cmp	r3, #0
 801bdf4:	d022      	beq.n	801be3c <ip4_route+0x78>
 801bdf6:	68fb      	ldr	r3, [r7, #12]
 801bdf8:	3304      	adds	r3, #4
 801bdfa:	681b      	ldr	r3, [r3, #0]
 801bdfc:	2b00      	cmp	r3, #0
 801bdfe:	d01d      	beq.n	801be3c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	681a      	ldr	r2, [r3, #0]
 801be04:	68fb      	ldr	r3, [r7, #12]
 801be06:	3304      	adds	r3, #4
 801be08:	681b      	ldr	r3, [r3, #0]
 801be0a:	405a      	eors	r2, r3
 801be0c:	68fb      	ldr	r3, [r7, #12]
 801be0e:	3308      	adds	r3, #8
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	4013      	ands	r3, r2
 801be14:	2b00      	cmp	r3, #0
 801be16:	d101      	bne.n	801be1c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801be18:	68fb      	ldr	r3, [r7, #12]
 801be1a:	e038      	b.n	801be8e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801be1c:	68fb      	ldr	r3, [r7, #12]
 801be1e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801be22:	f003 0302 	and.w	r3, r3, #2
 801be26:	2b00      	cmp	r3, #0
 801be28:	d108      	bne.n	801be3c <ip4_route+0x78>
 801be2a:	687b      	ldr	r3, [r7, #4]
 801be2c:	681a      	ldr	r2, [r3, #0]
 801be2e:	68fb      	ldr	r3, [r7, #12]
 801be30:	330c      	adds	r3, #12
 801be32:	681b      	ldr	r3, [r3, #0]
 801be34:	429a      	cmp	r2, r3
 801be36:	d101      	bne.n	801be3c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801be38:	68fb      	ldr	r3, [r7, #12]
 801be3a:	e028      	b.n	801be8e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801be3c:	68fb      	ldr	r3, [r7, #12]
 801be3e:	681b      	ldr	r3, [r3, #0]
 801be40:	60fb      	str	r3, [r7, #12]
 801be42:	68fb      	ldr	r3, [r7, #12]
 801be44:	2b00      	cmp	r3, #0
 801be46:	d1c5      	bne.n	801bdd4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801be48:	4b15      	ldr	r3, [pc, #84]	@ (801bea0 <ip4_route+0xdc>)
 801be4a:	681b      	ldr	r3, [r3, #0]
 801be4c:	2b00      	cmp	r3, #0
 801be4e:	d01a      	beq.n	801be86 <ip4_route+0xc2>
 801be50:	4b13      	ldr	r3, [pc, #76]	@ (801bea0 <ip4_route+0xdc>)
 801be52:	681b      	ldr	r3, [r3, #0]
 801be54:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801be58:	f003 0301 	and.w	r3, r3, #1
 801be5c:	2b00      	cmp	r3, #0
 801be5e:	d012      	beq.n	801be86 <ip4_route+0xc2>
 801be60:	4b0f      	ldr	r3, [pc, #60]	@ (801bea0 <ip4_route+0xdc>)
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801be68:	f003 0304 	and.w	r3, r3, #4
 801be6c:	2b00      	cmp	r3, #0
 801be6e:	d00a      	beq.n	801be86 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801be70:	4b0b      	ldr	r3, [pc, #44]	@ (801bea0 <ip4_route+0xdc>)
 801be72:	681b      	ldr	r3, [r3, #0]
 801be74:	3304      	adds	r3, #4
 801be76:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801be78:	2b00      	cmp	r3, #0
 801be7a:	d004      	beq.n	801be86 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801be7c:	687b      	ldr	r3, [r7, #4]
 801be7e:	681b      	ldr	r3, [r3, #0]
 801be80:	b2db      	uxtb	r3, r3
 801be82:	2b7f      	cmp	r3, #127	@ 0x7f
 801be84:	d101      	bne.n	801be8a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801be86:	2300      	movs	r3, #0
 801be88:	e001      	b.n	801be8e <ip4_route+0xca>
  }

  return netif_default;
 801be8a:	4b05      	ldr	r3, [pc, #20]	@ (801bea0 <ip4_route+0xdc>)
 801be8c:	681b      	ldr	r3, [r3, #0]
}
 801be8e:	4618      	mov	r0, r3
 801be90:	3714      	adds	r7, #20
 801be92:	46bd      	mov	sp, r7
 801be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be98:	4770      	bx	lr
 801be9a:	bf00      	nop
 801be9c:	2001b008 	.word	0x2001b008
 801bea0:	2001b00c 	.word	0x2001b00c

0801bea4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801bea4:	b580      	push	{r7, lr}
 801bea6:	b082      	sub	sp, #8
 801bea8:	af00      	add	r7, sp, #0
 801beaa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801beac:	687b      	ldr	r3, [r7, #4]
 801beae:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801beb2:	f003 0301 	and.w	r3, r3, #1
 801beb6:	b2db      	uxtb	r3, r3
 801beb8:	2b00      	cmp	r3, #0
 801beba:	d016      	beq.n	801beea <ip4_input_accept+0x46>
 801bebc:	687b      	ldr	r3, [r7, #4]
 801bebe:	3304      	adds	r3, #4
 801bec0:	681b      	ldr	r3, [r3, #0]
 801bec2:	2b00      	cmp	r3, #0
 801bec4:	d011      	beq.n	801beea <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bec6:	4b0b      	ldr	r3, [pc, #44]	@ (801bef4 <ip4_input_accept+0x50>)
 801bec8:	695a      	ldr	r2, [r3, #20]
 801beca:	687b      	ldr	r3, [r7, #4]
 801becc:	3304      	adds	r3, #4
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	429a      	cmp	r2, r3
 801bed2:	d008      	beq.n	801bee6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801bed4:	4b07      	ldr	r3, [pc, #28]	@ (801bef4 <ip4_input_accept+0x50>)
 801bed6:	695b      	ldr	r3, [r3, #20]
 801bed8:	6879      	ldr	r1, [r7, #4]
 801beda:	4618      	mov	r0, r3
 801bedc:	f000 fa26 	bl	801c32c <ip4_addr_isbroadcast_u32>
 801bee0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d001      	beq.n	801beea <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801bee6:	2301      	movs	r3, #1
 801bee8:	e000      	b.n	801beec <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801beea:	2300      	movs	r3, #0
}
 801beec:	4618      	mov	r0, r3
 801beee:	3708      	adds	r7, #8
 801bef0:	46bd      	mov	sp, r7
 801bef2:	bd80      	pop	{r7, pc}
 801bef4:	20017754 	.word	0x20017754

0801bef8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801bef8:	b580      	push	{r7, lr}
 801befa:	b088      	sub	sp, #32
 801befc:	af00      	add	r7, sp, #0
 801befe:	6078      	str	r0, [r7, #4]
 801bf00:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801bf02:	2301      	movs	r3, #1
 801bf04:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801bf06:	687b      	ldr	r3, [r7, #4]
 801bf08:	685b      	ldr	r3, [r3, #4]
 801bf0a:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 801bf0c:	69fb      	ldr	r3, [r7, #28]
 801bf0e:	781b      	ldrb	r3, [r3, #0]
 801bf10:	091b      	lsrs	r3, r3, #4
 801bf12:	b2db      	uxtb	r3, r3
 801bf14:	2b04      	cmp	r3, #4
 801bf16:	d004      	beq.n	801bf22 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801bf18:	6878      	ldr	r0, [r7, #4]
 801bf1a:	f7f6 fbab 	bl	8012674 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801bf1e:	2300      	movs	r3, #0
 801bf20:	e123      	b.n	801c16a <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801bf22:	69fb      	ldr	r3, [r7, #28]
 801bf24:	781b      	ldrb	r3, [r3, #0]
 801bf26:	f003 030f 	and.w	r3, r3, #15
 801bf2a:	b2db      	uxtb	r3, r3
 801bf2c:	009b      	lsls	r3, r3, #2
 801bf2e:	b2db      	uxtb	r3, r3
 801bf30:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801bf32:	69fb      	ldr	r3, [r7, #28]
 801bf34:	885b      	ldrh	r3, [r3, #2]
 801bf36:	b29b      	uxth	r3, r3
 801bf38:	4618      	mov	r0, r3
 801bf3a:	f7f4 fcaf 	bl	801089c <lwip_htons>
 801bf3e:	4603      	mov	r3, r0
 801bf40:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	891b      	ldrh	r3, [r3, #8]
 801bf46:	8a3a      	ldrh	r2, [r7, #16]
 801bf48:	429a      	cmp	r2, r3
 801bf4a:	d204      	bcs.n	801bf56 <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 801bf4c:	8a3b      	ldrh	r3, [r7, #16]
 801bf4e:	4619      	mov	r1, r3
 801bf50:	6878      	ldr	r0, [r7, #4]
 801bf52:	f7f6 fa09 	bl	8012368 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801bf56:	687b      	ldr	r3, [r7, #4]
 801bf58:	895b      	ldrh	r3, [r3, #10]
 801bf5a:	8a7a      	ldrh	r2, [r7, #18]
 801bf5c:	429a      	cmp	r2, r3
 801bf5e:	d807      	bhi.n	801bf70 <ip4_input+0x78>
 801bf60:	687b      	ldr	r3, [r7, #4]
 801bf62:	891b      	ldrh	r3, [r3, #8]
 801bf64:	8a3a      	ldrh	r2, [r7, #16]
 801bf66:	429a      	cmp	r2, r3
 801bf68:	d802      	bhi.n	801bf70 <ip4_input+0x78>
 801bf6a:	8a7b      	ldrh	r3, [r7, #18]
 801bf6c:	2b13      	cmp	r3, #19
 801bf6e:	d804      	bhi.n	801bf7a <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801bf70:	6878      	ldr	r0, [r7, #4]
 801bf72:	f7f6 fb7f 	bl	8012674 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801bf76:	2300      	movs	r3, #0
 801bf78:	e0f7      	b.n	801c16a <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801bf7a:	69fb      	ldr	r3, [r7, #28]
 801bf7c:	691b      	ldr	r3, [r3, #16]
 801bf7e:	4a7d      	ldr	r2, [pc, #500]	@ (801c174 <ip4_input+0x27c>)
 801bf80:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801bf82:	69fb      	ldr	r3, [r7, #28]
 801bf84:	68db      	ldr	r3, [r3, #12]
 801bf86:	4a7b      	ldr	r2, [pc, #492]	@ (801c174 <ip4_input+0x27c>)
 801bf88:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801bf8a:	4b7a      	ldr	r3, [pc, #488]	@ (801c174 <ip4_input+0x27c>)
 801bf8c:	695b      	ldr	r3, [r3, #20]
 801bf8e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801bf92:	2be0      	cmp	r3, #224	@ 0xe0
 801bf94:	d112      	bne.n	801bfbc <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801bf96:	683b      	ldr	r3, [r7, #0]
 801bf98:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801bf9c:	f003 0301 	and.w	r3, r3, #1
 801bfa0:	b2db      	uxtb	r3, r3
 801bfa2:	2b00      	cmp	r3, #0
 801bfa4:	d007      	beq.n	801bfb6 <ip4_input+0xbe>
 801bfa6:	683b      	ldr	r3, [r7, #0]
 801bfa8:	3304      	adds	r3, #4
 801bfaa:	681b      	ldr	r3, [r3, #0]
 801bfac:	2b00      	cmp	r3, #0
 801bfae:	d002      	beq.n	801bfb6 <ip4_input+0xbe>
      netif = inp;
 801bfb0:	683b      	ldr	r3, [r7, #0]
 801bfb2:	61bb      	str	r3, [r7, #24]
 801bfb4:	e02a      	b.n	801c00c <ip4_input+0x114>
    } else {
      netif = NULL;
 801bfb6:	2300      	movs	r3, #0
 801bfb8:	61bb      	str	r3, [r7, #24]
 801bfba:	e027      	b.n	801c00c <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801bfbc:	6838      	ldr	r0, [r7, #0]
 801bfbe:	f7ff ff71 	bl	801bea4 <ip4_input_accept>
 801bfc2:	4603      	mov	r3, r0
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	d002      	beq.n	801bfce <ip4_input+0xd6>
      netif = inp;
 801bfc8:	683b      	ldr	r3, [r7, #0]
 801bfca:	61bb      	str	r3, [r7, #24]
 801bfcc:	e01e      	b.n	801c00c <ip4_input+0x114>
    } else {
      netif = NULL;
 801bfce:	2300      	movs	r3, #0
 801bfd0:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801bfd2:	4b68      	ldr	r3, [pc, #416]	@ (801c174 <ip4_input+0x27c>)
 801bfd4:	695b      	ldr	r3, [r3, #20]
 801bfd6:	b2db      	uxtb	r3, r3
 801bfd8:	2b7f      	cmp	r3, #127	@ 0x7f
 801bfda:	d017      	beq.n	801c00c <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801bfdc:	4b66      	ldr	r3, [pc, #408]	@ (801c178 <ip4_input+0x280>)
 801bfde:	681b      	ldr	r3, [r3, #0]
 801bfe0:	61bb      	str	r3, [r7, #24]
 801bfe2:	e00e      	b.n	801c002 <ip4_input+0x10a>
          if (netif == inp) {
 801bfe4:	69ba      	ldr	r2, [r7, #24]
 801bfe6:	683b      	ldr	r3, [r7, #0]
 801bfe8:	429a      	cmp	r2, r3
 801bfea:	d006      	beq.n	801bffa <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801bfec:	69b8      	ldr	r0, [r7, #24]
 801bfee:	f7ff ff59 	bl	801bea4 <ip4_input_accept>
 801bff2:	4603      	mov	r3, r0
 801bff4:	2b00      	cmp	r3, #0
 801bff6:	d108      	bne.n	801c00a <ip4_input+0x112>
 801bff8:	e000      	b.n	801bffc <ip4_input+0x104>
            continue;
 801bffa:	bf00      	nop
        NETIF_FOREACH(netif) {
 801bffc:	69bb      	ldr	r3, [r7, #24]
 801bffe:	681b      	ldr	r3, [r3, #0]
 801c000:	61bb      	str	r3, [r7, #24]
 801c002:	69bb      	ldr	r3, [r7, #24]
 801c004:	2b00      	cmp	r3, #0
 801c006:	d1ed      	bne.n	801bfe4 <ip4_input+0xec>
 801c008:	e000      	b.n	801c00c <ip4_input+0x114>
            break;
 801c00a:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 801c00c:	69bb      	ldr	r3, [r7, #24]
 801c00e:	2b00      	cmp	r3, #0
 801c010:	d111      	bne.n	801c036 <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801c012:	69fb      	ldr	r3, [r7, #28]
 801c014:	7a5b      	ldrb	r3, [r3, #9]
 801c016:	2b11      	cmp	r3, #17
 801c018:	d10d      	bne.n	801c036 <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 801c01a:	8a7b      	ldrh	r3, [r7, #18]
 801c01c:	69fa      	ldr	r2, [r7, #28]
 801c01e:	4413      	add	r3, r2
 801c020:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801c022:	68fb      	ldr	r3, [r7, #12]
 801c024:	885b      	ldrh	r3, [r3, #2]
 801c026:	b29b      	uxth	r3, r3
 801c028:	f5b3 4f88 	cmp.w	r3, #17408	@ 0x4400
 801c02c:	d103      	bne.n	801c036 <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 801c02e:	683b      	ldr	r3, [r7, #0]
 801c030:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801c032:	2300      	movs	r3, #0
 801c034:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801c036:	697b      	ldr	r3, [r7, #20]
 801c038:	2b00      	cmp	r3, #0
 801c03a:	d017      	beq.n	801c06c <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 801c03c:	4b4d      	ldr	r3, [pc, #308]	@ (801c174 <ip4_input+0x27c>)
 801c03e:	691b      	ldr	r3, [r3, #16]
 801c040:	2b00      	cmp	r3, #0
 801c042:	d013      	beq.n	801c06c <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c044:	4b4b      	ldr	r3, [pc, #300]	@ (801c174 <ip4_input+0x27c>)
 801c046:	691b      	ldr	r3, [r3, #16]
 801c048:	6839      	ldr	r1, [r7, #0]
 801c04a:	4618      	mov	r0, r3
 801c04c:	f000 f96e 	bl	801c32c <ip4_addr_isbroadcast_u32>
 801c050:	4603      	mov	r3, r0
 801c052:	2b00      	cmp	r3, #0
 801c054:	d105      	bne.n	801c062 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801c056:	4b47      	ldr	r3, [pc, #284]	@ (801c174 <ip4_input+0x27c>)
 801c058:	691b      	ldr	r3, [r3, #16]
 801c05a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801c05e:	2be0      	cmp	r3, #224	@ 0xe0
 801c060:	d104      	bne.n	801c06c <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801c062:	6878      	ldr	r0, [r7, #4]
 801c064:	f7f6 fb06 	bl	8012674 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801c068:	2300      	movs	r3, #0
 801c06a:	e07e      	b.n	801c16a <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801c06c:	69bb      	ldr	r3, [r7, #24]
 801c06e:	2b00      	cmp	r3, #0
 801c070:	d104      	bne.n	801c07c <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801c072:	6878      	ldr	r0, [r7, #4]
 801c074:	f7f6 fafe 	bl	8012674 <pbuf_free>
    return ERR_OK;
 801c078:	2300      	movs	r3, #0
 801c07a:	e076      	b.n	801c16a <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801c07c:	69fb      	ldr	r3, [r7, #28]
 801c07e:	88db      	ldrh	r3, [r3, #6]
 801c080:	b29b      	uxth	r3, r3
 801c082:	461a      	mov	r2, r3
 801c084:	f64f 733f 	movw	r3, #65343	@ 0xff3f
 801c088:	4013      	ands	r3, r2
 801c08a:	2b00      	cmp	r3, #0
 801c08c:	d00b      	beq.n	801c0a6 <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801c08e:	6878      	ldr	r0, [r7, #4]
 801c090:	f000 fc92 	bl	801c9b8 <ip4_reass>
 801c094:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	2b00      	cmp	r3, #0
 801c09a:	d101      	bne.n	801c0a0 <ip4_input+0x1a8>
      return ERR_OK;
 801c09c:	2300      	movs	r3, #0
 801c09e:	e064      	b.n	801c16a <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801c0a0:	687b      	ldr	r3, [r7, #4]
 801c0a2:	685b      	ldr	r3, [r3, #4]
 801c0a4:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801c0a6:	4a33      	ldr	r2, [pc, #204]	@ (801c174 <ip4_input+0x27c>)
 801c0a8:	69bb      	ldr	r3, [r7, #24]
 801c0aa:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801c0ac:	4a31      	ldr	r2, [pc, #196]	@ (801c174 <ip4_input+0x27c>)
 801c0ae:	683b      	ldr	r3, [r7, #0]
 801c0b0:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801c0b2:	4a30      	ldr	r2, [pc, #192]	@ (801c174 <ip4_input+0x27c>)
 801c0b4:	69fb      	ldr	r3, [r7, #28]
 801c0b6:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801c0b8:	69fb      	ldr	r3, [r7, #28]
 801c0ba:	781b      	ldrb	r3, [r3, #0]
 801c0bc:	f003 030f 	and.w	r3, r3, #15
 801c0c0:	b2db      	uxtb	r3, r3
 801c0c2:	009b      	lsls	r3, r3, #2
 801c0c4:	b2db      	uxtb	r3, r3
 801c0c6:	461a      	mov	r2, r3
 801c0c8:	4b2a      	ldr	r3, [pc, #168]	@ (801c174 <ip4_input+0x27c>)
 801c0ca:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801c0cc:	8a7b      	ldrh	r3, [r7, #18]
 801c0ce:	4619      	mov	r1, r3
 801c0d0:	6878      	ldr	r0, [r7, #4]
 801c0d2:	f7f6 fa49 	bl	8012568 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801c0d6:	69fb      	ldr	r3, [r7, #28]
 801c0d8:	7a5b      	ldrb	r3, [r3, #9]
 801c0da:	2b11      	cmp	r3, #17
 801c0dc:	d006      	beq.n	801c0ec <ip4_input+0x1f4>
 801c0de:	2b11      	cmp	r3, #17
 801c0e0:	dc13      	bgt.n	801c10a <ip4_input+0x212>
 801c0e2:	2b01      	cmp	r3, #1
 801c0e4:	d00c      	beq.n	801c100 <ip4_input+0x208>
 801c0e6:	2b06      	cmp	r3, #6
 801c0e8:	d005      	beq.n	801c0f6 <ip4_input+0x1fe>
 801c0ea:	e00e      	b.n	801c10a <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801c0ec:	6839      	ldr	r1, [r7, #0]
 801c0ee:	6878      	ldr	r0, [r7, #4]
 801c0f0:	f7fc fa44 	bl	801857c <udp_input>
        break;
 801c0f4:	e026      	b.n	801c144 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801c0f6:	6839      	ldr	r1, [r7, #0]
 801c0f8:	6878      	ldr	r0, [r7, #4]
 801c0fa:	f7f8 fa5b 	bl	80145b4 <tcp_input>
        break;
 801c0fe:	e021      	b.n	801c144 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801c100:	6839      	ldr	r1, [r7, #0]
 801c102:	6878      	ldr	r0, [r7, #4]
 801c104:	f7ff fcd0 	bl	801baa8 <icmp_input>
        break;
 801c108:	e01c      	b.n	801c144 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c10a:	4b1a      	ldr	r3, [pc, #104]	@ (801c174 <ip4_input+0x27c>)
 801c10c:	695b      	ldr	r3, [r3, #20]
 801c10e:	69b9      	ldr	r1, [r7, #24]
 801c110:	4618      	mov	r0, r3
 801c112:	f000 f90b 	bl	801c32c <ip4_addr_isbroadcast_u32>
 801c116:	4603      	mov	r3, r0
 801c118:	2b00      	cmp	r3, #0
 801c11a:	d10f      	bne.n	801c13c <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c11c:	4b15      	ldr	r3, [pc, #84]	@ (801c174 <ip4_input+0x27c>)
 801c11e:	695b      	ldr	r3, [r3, #20]
 801c120:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801c124:	2be0      	cmp	r3, #224	@ 0xe0
 801c126:	d009      	beq.n	801c13c <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801c128:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c12c:	4619      	mov	r1, r3
 801c12e:	6878      	ldr	r0, [r7, #4]
 801c130:	f7f6 fa8d 	bl	801264e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801c134:	2102      	movs	r1, #2
 801c136:	6878      	ldr	r0, [r7, #4]
 801c138:	f7ff fdba 	bl	801bcb0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801c13c:	6878      	ldr	r0, [r7, #4]
 801c13e:	f7f6 fa99 	bl	8012674 <pbuf_free>
        break;
 801c142:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801c144:	4b0b      	ldr	r3, [pc, #44]	@ (801c174 <ip4_input+0x27c>)
 801c146:	2200      	movs	r2, #0
 801c148:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801c14a:	4b0a      	ldr	r3, [pc, #40]	@ (801c174 <ip4_input+0x27c>)
 801c14c:	2200      	movs	r2, #0
 801c14e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801c150:	4b08      	ldr	r3, [pc, #32]	@ (801c174 <ip4_input+0x27c>)
 801c152:	2200      	movs	r2, #0
 801c154:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801c156:	4b07      	ldr	r3, [pc, #28]	@ (801c174 <ip4_input+0x27c>)
 801c158:	2200      	movs	r2, #0
 801c15a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801c15c:	4b05      	ldr	r3, [pc, #20]	@ (801c174 <ip4_input+0x27c>)
 801c15e:	2200      	movs	r2, #0
 801c160:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801c162:	4b04      	ldr	r3, [pc, #16]	@ (801c174 <ip4_input+0x27c>)
 801c164:	2200      	movs	r2, #0
 801c166:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801c168:	2300      	movs	r3, #0
}
 801c16a:	4618      	mov	r0, r3
 801c16c:	3720      	adds	r7, #32
 801c16e:	46bd      	mov	sp, r7
 801c170:	bd80      	pop	{r7, pc}
 801c172:	bf00      	nop
 801c174:	20017754 	.word	0x20017754
 801c178:	2001b008 	.word	0x2001b008

0801c17c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801c17c:	b580      	push	{r7, lr}
 801c17e:	b08a      	sub	sp, #40	@ 0x28
 801c180:	af04      	add	r7, sp, #16
 801c182:	60f8      	str	r0, [r7, #12]
 801c184:	60b9      	str	r1, [r7, #8]
 801c186:	607a      	str	r2, [r7, #4]
 801c188:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801c18a:	68bb      	ldr	r3, [r7, #8]
 801c18c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801c18e:	687b      	ldr	r3, [r7, #4]
 801c190:	2b00      	cmp	r3, #0
 801c192:	d009      	beq.n	801c1a8 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801c194:	68bb      	ldr	r3, [r7, #8]
 801c196:	2b00      	cmp	r3, #0
 801c198:	d003      	beq.n	801c1a2 <ip4_output_if+0x26>
 801c19a:	68bb      	ldr	r3, [r7, #8]
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	d102      	bne.n	801c1a8 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801c1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1a4:	3304      	adds	r3, #4
 801c1a6:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801c1a8:	78fa      	ldrb	r2, [r7, #3]
 801c1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c1ac:	9302      	str	r3, [sp, #8]
 801c1ae:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801c1b2:	9301      	str	r3, [sp, #4]
 801c1b4:	f897 3020 	ldrb.w	r3, [r7, #32]
 801c1b8:	9300      	str	r3, [sp, #0]
 801c1ba:	4613      	mov	r3, r2
 801c1bc:	687a      	ldr	r2, [r7, #4]
 801c1be:	6979      	ldr	r1, [r7, #20]
 801c1c0:	68f8      	ldr	r0, [r7, #12]
 801c1c2:	f000 f805 	bl	801c1d0 <ip4_output_if_src>
 801c1c6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801c1c8:	4618      	mov	r0, r3
 801c1ca:	3718      	adds	r7, #24
 801c1cc:	46bd      	mov	sp, r7
 801c1ce:	bd80      	pop	{r7, pc}

0801c1d0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801c1d0:	b580      	push	{r7, lr}
 801c1d2:	b088      	sub	sp, #32
 801c1d4:	af00      	add	r7, sp, #0
 801c1d6:	60f8      	str	r0, [r7, #12]
 801c1d8:	60b9      	str	r1, [r7, #8]
 801c1da:	607a      	str	r2, [r7, #4]
 801c1dc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801c1de:	68fb      	ldr	r3, [r7, #12]
 801c1e0:	7b9b      	ldrb	r3, [r3, #14]
 801c1e2:	2b01      	cmp	r3, #1
 801c1e4:	d006      	beq.n	801c1f4 <ip4_output_if_src+0x24>
 801c1e6:	4b4b      	ldr	r3, [pc, #300]	@ (801c314 <ip4_output_if_src+0x144>)
 801c1e8:	f44f 7255 	mov.w	r2, #852	@ 0x354
 801c1ec:	494a      	ldr	r1, [pc, #296]	@ (801c318 <ip4_output_if_src+0x148>)
 801c1ee:	484b      	ldr	r0, [pc, #300]	@ (801c31c <ip4_output_if_src+0x14c>)
 801c1f0:	f002 fa86 	bl	801e700 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801c1f4:	687b      	ldr	r3, [r7, #4]
 801c1f6:	2b00      	cmp	r3, #0
 801c1f8:	d060      	beq.n	801c2bc <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801c1fa:	2314      	movs	r3, #20
 801c1fc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801c1fe:	2114      	movs	r1, #20
 801c200:	68f8      	ldr	r0, [r7, #12]
 801c202:	f7f6 f9a1 	bl	8012548 <pbuf_add_header>
 801c206:	4603      	mov	r3, r0
 801c208:	2b00      	cmp	r3, #0
 801c20a:	d002      	beq.n	801c212 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c20c:	f06f 0301 	mvn.w	r3, #1
 801c210:	e07c      	b.n	801c30c <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801c212:	68fb      	ldr	r3, [r7, #12]
 801c214:	685b      	ldr	r3, [r3, #4]
 801c216:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801c218:	68fb      	ldr	r3, [r7, #12]
 801c21a:	895b      	ldrh	r3, [r3, #10]
 801c21c:	2b13      	cmp	r3, #19
 801c21e:	d806      	bhi.n	801c22e <ip4_output_if_src+0x5e>
 801c220:	4b3c      	ldr	r3, [pc, #240]	@ (801c314 <ip4_output_if_src+0x144>)
 801c222:	f44f 7262 	mov.w	r2, #904	@ 0x388
 801c226:	493e      	ldr	r1, [pc, #248]	@ (801c320 <ip4_output_if_src+0x150>)
 801c228:	483c      	ldr	r0, [pc, #240]	@ (801c31c <ip4_output_if_src+0x14c>)
 801c22a:	f002 fa69 	bl	801e700 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801c22e:	69fb      	ldr	r3, [r7, #28]
 801c230:	78fa      	ldrb	r2, [r7, #3]
 801c232:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801c234:	69fb      	ldr	r3, [r7, #28]
 801c236:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 801c23a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	681a      	ldr	r2, [r3, #0]
 801c240:	69fb      	ldr	r3, [r7, #28]
 801c242:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801c244:	8b7b      	ldrh	r3, [r7, #26]
 801c246:	089b      	lsrs	r3, r3, #2
 801c248:	b29b      	uxth	r3, r3
 801c24a:	b2db      	uxtb	r3, r3
 801c24c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801c250:	b2da      	uxtb	r2, r3
 801c252:	69fb      	ldr	r3, [r7, #28]
 801c254:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801c256:	69fb      	ldr	r3, [r7, #28]
 801c258:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 801c25c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801c25e:	68fb      	ldr	r3, [r7, #12]
 801c260:	891b      	ldrh	r3, [r3, #8]
 801c262:	4618      	mov	r0, r3
 801c264:	f7f4 fb1a 	bl	801089c <lwip_htons>
 801c268:	4603      	mov	r3, r0
 801c26a:	461a      	mov	r2, r3
 801c26c:	69fb      	ldr	r3, [r7, #28]
 801c26e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801c270:	69fb      	ldr	r3, [r7, #28]
 801c272:	2200      	movs	r2, #0
 801c274:	719a      	strb	r2, [r3, #6]
 801c276:	2200      	movs	r2, #0
 801c278:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801c27a:	4b2a      	ldr	r3, [pc, #168]	@ (801c324 <ip4_output_if_src+0x154>)
 801c27c:	881b      	ldrh	r3, [r3, #0]
 801c27e:	4618      	mov	r0, r3
 801c280:	f7f4 fb0c 	bl	801089c <lwip_htons>
 801c284:	4603      	mov	r3, r0
 801c286:	461a      	mov	r2, r3
 801c288:	69fb      	ldr	r3, [r7, #28]
 801c28a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801c28c:	4b25      	ldr	r3, [pc, #148]	@ (801c324 <ip4_output_if_src+0x154>)
 801c28e:	881b      	ldrh	r3, [r3, #0]
 801c290:	3301      	adds	r3, #1
 801c292:	b29a      	uxth	r2, r3
 801c294:	4b23      	ldr	r3, [pc, #140]	@ (801c324 <ip4_output_if_src+0x154>)
 801c296:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801c298:	68bb      	ldr	r3, [r7, #8]
 801c29a:	2b00      	cmp	r3, #0
 801c29c:	d104      	bne.n	801c2a8 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801c29e:	4b22      	ldr	r3, [pc, #136]	@ (801c328 <ip4_output_if_src+0x158>)
 801c2a0:	681a      	ldr	r2, [r3, #0]
 801c2a2:	69fb      	ldr	r3, [r7, #28]
 801c2a4:	60da      	str	r2, [r3, #12]
 801c2a6:	e003      	b.n	801c2b0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801c2a8:	68bb      	ldr	r3, [r7, #8]
 801c2aa:	681a      	ldr	r2, [r3, #0]
 801c2ac:	69fb      	ldr	r3, [r7, #28]
 801c2ae:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801c2b0:	69fb      	ldr	r3, [r7, #28]
 801c2b2:	2200      	movs	r2, #0
 801c2b4:	729a      	strb	r2, [r3, #10]
 801c2b6:	2200      	movs	r2, #0
 801c2b8:	72da      	strb	r2, [r3, #11]
 801c2ba:	e00f      	b.n	801c2dc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801c2bc:	68fb      	ldr	r3, [r7, #12]
 801c2be:	895b      	ldrh	r3, [r3, #10]
 801c2c0:	2b13      	cmp	r3, #19
 801c2c2:	d802      	bhi.n	801c2ca <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801c2c4:	f06f 0301 	mvn.w	r3, #1
 801c2c8:	e020      	b.n	801c30c <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801c2ca:	68fb      	ldr	r3, [r7, #12]
 801c2cc:	685b      	ldr	r3, [r3, #4]
 801c2ce:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801c2d0:	69fb      	ldr	r3, [r7, #28]
 801c2d2:	691b      	ldr	r3, [r3, #16]
 801c2d4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801c2d6:	f107 0314 	add.w	r3, r7, #20
 801c2da:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801c2dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c2de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c2e0:	2b00      	cmp	r3, #0
 801c2e2:	d00c      	beq.n	801c2fe <ip4_output_if_src+0x12e>
 801c2e4:	68fb      	ldr	r3, [r7, #12]
 801c2e6:	891a      	ldrh	r2, [r3, #8]
 801c2e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c2ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801c2ec:	429a      	cmp	r2, r3
 801c2ee:	d906      	bls.n	801c2fe <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801c2f0:	687a      	ldr	r2, [r7, #4]
 801c2f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801c2f4:	68f8      	ldr	r0, [r7, #12]
 801c2f6:	f000 fd53 	bl	801cda0 <ip4_frag>
 801c2fa:	4603      	mov	r3, r0
 801c2fc:	e006      	b.n	801c30c <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801c2fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c300:	695b      	ldr	r3, [r3, #20]
 801c302:	687a      	ldr	r2, [r7, #4]
 801c304:	68f9      	ldr	r1, [r7, #12]
 801c306:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801c308:	4798      	blx	r3
 801c30a:	4603      	mov	r3, r0
}
 801c30c:	4618      	mov	r0, r3
 801c30e:	3720      	adds	r7, #32
 801c310:	46bd      	mov	sp, r7
 801c312:	bd80      	pop	{r7, pc}
 801c314:	08024c30 	.word	0x08024c30
 801c318:	08024c64 	.word	0x08024c64
 801c31c:	08024c70 	.word	0x08024c70
 801c320:	08024c98 	.word	0x08024c98
 801c324:	2001b1a6 	.word	0x2001b1a6
 801c328:	080252e8 	.word	0x080252e8

0801c32c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801c32c:	b480      	push	{r7}
 801c32e:	b085      	sub	sp, #20
 801c330:	af00      	add	r7, sp, #0
 801c332:	6078      	str	r0, [r7, #4]
 801c334:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801c336:	687b      	ldr	r3, [r7, #4]
 801c338:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801c33a:	687b      	ldr	r3, [r7, #4]
 801c33c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c340:	d002      	beq.n	801c348 <ip4_addr_isbroadcast_u32+0x1c>
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	2b00      	cmp	r3, #0
 801c346:	d101      	bne.n	801c34c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801c348:	2301      	movs	r3, #1
 801c34a:	e02a      	b.n	801c3a2 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801c34c:	683b      	ldr	r3, [r7, #0]
 801c34e:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801c352:	f003 0302 	and.w	r3, r3, #2
 801c356:	2b00      	cmp	r3, #0
 801c358:	d101      	bne.n	801c35e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801c35a:	2300      	movs	r3, #0
 801c35c:	e021      	b.n	801c3a2 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801c35e:	683b      	ldr	r3, [r7, #0]
 801c360:	3304      	adds	r3, #4
 801c362:	681b      	ldr	r3, [r3, #0]
 801c364:	687a      	ldr	r2, [r7, #4]
 801c366:	429a      	cmp	r2, r3
 801c368:	d101      	bne.n	801c36e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801c36a:	2300      	movs	r3, #0
 801c36c:	e019      	b.n	801c3a2 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801c36e:	68fa      	ldr	r2, [r7, #12]
 801c370:	683b      	ldr	r3, [r7, #0]
 801c372:	3304      	adds	r3, #4
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	405a      	eors	r2, r3
 801c378:	683b      	ldr	r3, [r7, #0]
 801c37a:	3308      	adds	r3, #8
 801c37c:	681b      	ldr	r3, [r3, #0]
 801c37e:	4013      	ands	r3, r2
 801c380:	2b00      	cmp	r3, #0
 801c382:	d10d      	bne.n	801c3a0 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c384:	683b      	ldr	r3, [r7, #0]
 801c386:	3308      	adds	r3, #8
 801c388:	681b      	ldr	r3, [r3, #0]
 801c38a:	43da      	mvns	r2, r3
 801c38c:	687b      	ldr	r3, [r7, #4]
 801c38e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801c390:	683b      	ldr	r3, [r7, #0]
 801c392:	3308      	adds	r3, #8
 801c394:	681b      	ldr	r3, [r3, #0]
 801c396:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801c398:	429a      	cmp	r2, r3
 801c39a:	d101      	bne.n	801c3a0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801c39c:	2301      	movs	r3, #1
 801c39e:	e000      	b.n	801c3a2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801c3a0:	2300      	movs	r3, #0
  }
}
 801c3a2:	4618      	mov	r0, r3
 801c3a4:	3714      	adds	r7, #20
 801c3a6:	46bd      	mov	sp, r7
 801c3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c3ac:	4770      	bx	lr
	...

0801c3b0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801c3b0:	b580      	push	{r7, lr}
 801c3b2:	b084      	sub	sp, #16
 801c3b4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801c3b6:	2300      	movs	r3, #0
 801c3b8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801c3ba:	4b12      	ldr	r3, [pc, #72]	@ (801c404 <ip_reass_tmr+0x54>)
 801c3bc:	681b      	ldr	r3, [r3, #0]
 801c3be:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801c3c0:	e018      	b.n	801c3f4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801c3c2:	68fb      	ldr	r3, [r7, #12]
 801c3c4:	7fdb      	ldrb	r3, [r3, #31]
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d00b      	beq.n	801c3e2 <ip_reass_tmr+0x32>
      r->timer--;
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	7fdb      	ldrb	r3, [r3, #31]
 801c3ce:	3b01      	subs	r3, #1
 801c3d0:	b2da      	uxtb	r2, r3
 801c3d2:	68fb      	ldr	r3, [r7, #12]
 801c3d4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801c3d6:	68fb      	ldr	r3, [r7, #12]
 801c3d8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801c3da:	68fb      	ldr	r3, [r7, #12]
 801c3dc:	681b      	ldr	r3, [r3, #0]
 801c3de:	60fb      	str	r3, [r7, #12]
 801c3e0:	e008      	b.n	801c3f4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801c3e2:	68fb      	ldr	r3, [r7, #12]
 801c3e4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801c3e6:	68fb      	ldr	r3, [r7, #12]
 801c3e8:	681b      	ldr	r3, [r3, #0]
 801c3ea:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801c3ec:	68b9      	ldr	r1, [r7, #8]
 801c3ee:	6878      	ldr	r0, [r7, #4]
 801c3f0:	f000 f80a 	bl	801c408 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801c3f4:	68fb      	ldr	r3, [r7, #12]
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d1e3      	bne.n	801c3c2 <ip_reass_tmr+0x12>
    }
  }
}
 801c3fa:	bf00      	nop
 801c3fc:	bf00      	nop
 801c3fe:	3710      	adds	r7, #16
 801c400:	46bd      	mov	sp, r7
 801c402:	bd80      	pop	{r7, pc}
 801c404:	2001b1a8 	.word	0x2001b1a8

0801c408 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c408:	b580      	push	{r7, lr}
 801c40a:	b088      	sub	sp, #32
 801c40c:	af00      	add	r7, sp, #0
 801c40e:	6078      	str	r0, [r7, #4]
 801c410:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801c412:	2300      	movs	r3, #0
 801c414:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801c416:	683a      	ldr	r2, [r7, #0]
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	429a      	cmp	r2, r3
 801c41c:	d105      	bne.n	801c42a <ip_reass_free_complete_datagram+0x22>
 801c41e:	4b45      	ldr	r3, [pc, #276]	@ (801c534 <ip_reass_free_complete_datagram+0x12c>)
 801c420:	22ab      	movs	r2, #171	@ 0xab
 801c422:	4945      	ldr	r1, [pc, #276]	@ (801c538 <ip_reass_free_complete_datagram+0x130>)
 801c424:	4845      	ldr	r0, [pc, #276]	@ (801c53c <ip_reass_free_complete_datagram+0x134>)
 801c426:	f002 f96b 	bl	801e700 <iprintf>
  if (prev != NULL) {
 801c42a:	683b      	ldr	r3, [r7, #0]
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	d00a      	beq.n	801c446 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801c430:	683b      	ldr	r3, [r7, #0]
 801c432:	681b      	ldr	r3, [r3, #0]
 801c434:	687a      	ldr	r2, [r7, #4]
 801c436:	429a      	cmp	r2, r3
 801c438:	d005      	beq.n	801c446 <ip_reass_free_complete_datagram+0x3e>
 801c43a:	4b3e      	ldr	r3, [pc, #248]	@ (801c534 <ip_reass_free_complete_datagram+0x12c>)
 801c43c:	22ad      	movs	r2, #173	@ 0xad
 801c43e:	4940      	ldr	r1, [pc, #256]	@ (801c540 <ip_reass_free_complete_datagram+0x138>)
 801c440:	483e      	ldr	r0, [pc, #248]	@ (801c53c <ip_reass_free_complete_datagram+0x134>)
 801c442:	f002 f95d 	bl	801e700 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801c446:	687b      	ldr	r3, [r7, #4]
 801c448:	685b      	ldr	r3, [r3, #4]
 801c44a:	685b      	ldr	r3, [r3, #4]
 801c44c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801c44e:	697b      	ldr	r3, [r7, #20]
 801c450:	889b      	ldrh	r3, [r3, #4]
 801c452:	b29b      	uxth	r3, r3
 801c454:	2b00      	cmp	r3, #0
 801c456:	d12a      	bne.n	801c4ae <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801c458:	687b      	ldr	r3, [r7, #4]
 801c45a:	685b      	ldr	r3, [r3, #4]
 801c45c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801c45e:	697b      	ldr	r3, [r7, #20]
 801c460:	681a      	ldr	r2, [r3, #0]
 801c462:	687b      	ldr	r3, [r7, #4]
 801c464:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801c466:	69bb      	ldr	r3, [r7, #24]
 801c468:	6858      	ldr	r0, [r3, #4]
 801c46a:	687b      	ldr	r3, [r7, #4]
 801c46c:	3308      	adds	r3, #8
 801c46e:	2214      	movs	r2, #20
 801c470:	4619      	mov	r1, r3
 801c472:	f002 fbd4 	bl	801ec1e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801c476:	2101      	movs	r1, #1
 801c478:	69b8      	ldr	r0, [r7, #24]
 801c47a:	f7ff fc29 	bl	801bcd0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801c47e:	69b8      	ldr	r0, [r7, #24]
 801c480:	f7f6 f986 	bl	8012790 <pbuf_clen>
 801c484:	4603      	mov	r3, r0
 801c486:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c488:	8bfa      	ldrh	r2, [r7, #30]
 801c48a:	8a7b      	ldrh	r3, [r7, #18]
 801c48c:	4413      	add	r3, r2
 801c48e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c492:	db05      	blt.n	801c4a0 <ip_reass_free_complete_datagram+0x98>
 801c494:	4b27      	ldr	r3, [pc, #156]	@ (801c534 <ip_reass_free_complete_datagram+0x12c>)
 801c496:	22bc      	movs	r2, #188	@ 0xbc
 801c498:	492a      	ldr	r1, [pc, #168]	@ (801c544 <ip_reass_free_complete_datagram+0x13c>)
 801c49a:	4828      	ldr	r0, [pc, #160]	@ (801c53c <ip_reass_free_complete_datagram+0x134>)
 801c49c:	f002 f930 	bl	801e700 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c4a0:	8bfa      	ldrh	r2, [r7, #30]
 801c4a2:	8a7b      	ldrh	r3, [r7, #18]
 801c4a4:	4413      	add	r3, r2
 801c4a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801c4a8:	69b8      	ldr	r0, [r7, #24]
 801c4aa:	f7f6 f8e3 	bl	8012674 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801c4ae:	687b      	ldr	r3, [r7, #4]
 801c4b0:	685b      	ldr	r3, [r3, #4]
 801c4b2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801c4b4:	e01f      	b.n	801c4f6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801c4b6:	69bb      	ldr	r3, [r7, #24]
 801c4b8:	685b      	ldr	r3, [r3, #4]
 801c4ba:	617b      	str	r3, [r7, #20]
    pcur = p;
 801c4bc:	69bb      	ldr	r3, [r7, #24]
 801c4be:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801c4c0:	697b      	ldr	r3, [r7, #20]
 801c4c2:	681b      	ldr	r3, [r3, #0]
 801c4c4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801c4c6:	68f8      	ldr	r0, [r7, #12]
 801c4c8:	f7f6 f962 	bl	8012790 <pbuf_clen>
 801c4cc:	4603      	mov	r3, r0
 801c4ce:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801c4d0:	8bfa      	ldrh	r2, [r7, #30]
 801c4d2:	8a7b      	ldrh	r3, [r7, #18]
 801c4d4:	4413      	add	r3, r2
 801c4d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c4da:	db05      	blt.n	801c4e8 <ip_reass_free_complete_datagram+0xe0>
 801c4dc:	4b15      	ldr	r3, [pc, #84]	@ (801c534 <ip_reass_free_complete_datagram+0x12c>)
 801c4de:	22cc      	movs	r2, #204	@ 0xcc
 801c4e0:	4918      	ldr	r1, [pc, #96]	@ (801c544 <ip_reass_free_complete_datagram+0x13c>)
 801c4e2:	4816      	ldr	r0, [pc, #88]	@ (801c53c <ip_reass_free_complete_datagram+0x134>)
 801c4e4:	f002 f90c 	bl	801e700 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801c4e8:	8bfa      	ldrh	r2, [r7, #30]
 801c4ea:	8a7b      	ldrh	r3, [r7, #18]
 801c4ec:	4413      	add	r3, r2
 801c4ee:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801c4f0:	68f8      	ldr	r0, [r7, #12]
 801c4f2:	f7f6 f8bf 	bl	8012674 <pbuf_free>
  while (p != NULL) {
 801c4f6:	69bb      	ldr	r3, [r7, #24]
 801c4f8:	2b00      	cmp	r3, #0
 801c4fa:	d1dc      	bne.n	801c4b6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801c4fc:	6839      	ldr	r1, [r7, #0]
 801c4fe:	6878      	ldr	r0, [r7, #4]
 801c500:	f000 f8c2 	bl	801c688 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801c504:	4b10      	ldr	r3, [pc, #64]	@ (801c548 <ip_reass_free_complete_datagram+0x140>)
 801c506:	881b      	ldrh	r3, [r3, #0]
 801c508:	8bfa      	ldrh	r2, [r7, #30]
 801c50a:	429a      	cmp	r2, r3
 801c50c:	d905      	bls.n	801c51a <ip_reass_free_complete_datagram+0x112>
 801c50e:	4b09      	ldr	r3, [pc, #36]	@ (801c534 <ip_reass_free_complete_datagram+0x12c>)
 801c510:	22d2      	movs	r2, #210	@ 0xd2
 801c512:	490e      	ldr	r1, [pc, #56]	@ (801c54c <ip_reass_free_complete_datagram+0x144>)
 801c514:	4809      	ldr	r0, [pc, #36]	@ (801c53c <ip_reass_free_complete_datagram+0x134>)
 801c516:	f002 f8f3 	bl	801e700 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801c51a:	4b0b      	ldr	r3, [pc, #44]	@ (801c548 <ip_reass_free_complete_datagram+0x140>)
 801c51c:	881a      	ldrh	r2, [r3, #0]
 801c51e:	8bfb      	ldrh	r3, [r7, #30]
 801c520:	1ad3      	subs	r3, r2, r3
 801c522:	b29a      	uxth	r2, r3
 801c524:	4b08      	ldr	r3, [pc, #32]	@ (801c548 <ip_reass_free_complete_datagram+0x140>)
 801c526:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801c528:	8bfb      	ldrh	r3, [r7, #30]
}
 801c52a:	4618      	mov	r0, r3
 801c52c:	3720      	adds	r7, #32
 801c52e:	46bd      	mov	sp, r7
 801c530:	bd80      	pop	{r7, pc}
 801c532:	bf00      	nop
 801c534:	08024cc8 	.word	0x08024cc8
 801c538:	08024d04 	.word	0x08024d04
 801c53c:	08024d10 	.word	0x08024d10
 801c540:	08024d38 	.word	0x08024d38
 801c544:	08024d4c 	.word	0x08024d4c
 801c548:	2001b1ac 	.word	0x2001b1ac
 801c54c:	08024d6c 	.word	0x08024d6c

0801c550 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801c550:	b580      	push	{r7, lr}
 801c552:	b08a      	sub	sp, #40	@ 0x28
 801c554:	af00      	add	r7, sp, #0
 801c556:	6078      	str	r0, [r7, #4]
 801c558:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801c55a:	2300      	movs	r3, #0
 801c55c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801c55e:	2300      	movs	r3, #0
 801c560:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801c562:	2300      	movs	r3, #0
 801c564:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801c566:	2300      	movs	r3, #0
 801c568:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801c56a:	2300      	movs	r3, #0
 801c56c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801c56e:	4b28      	ldr	r3, [pc, #160]	@ (801c610 <ip_reass_remove_oldest_datagram+0xc0>)
 801c570:	681b      	ldr	r3, [r3, #0]
 801c572:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c574:	e030      	b.n	801c5d8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801c576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c578:	695a      	ldr	r2, [r3, #20]
 801c57a:	687b      	ldr	r3, [r7, #4]
 801c57c:	68db      	ldr	r3, [r3, #12]
 801c57e:	429a      	cmp	r2, r3
 801c580:	d10c      	bne.n	801c59c <ip_reass_remove_oldest_datagram+0x4c>
 801c582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c584:	699a      	ldr	r2, [r3, #24]
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	691b      	ldr	r3, [r3, #16]
 801c58a:	429a      	cmp	r2, r3
 801c58c:	d106      	bne.n	801c59c <ip_reass_remove_oldest_datagram+0x4c>
 801c58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c590:	899a      	ldrh	r2, [r3, #12]
 801c592:	687b      	ldr	r3, [r7, #4]
 801c594:	889b      	ldrh	r3, [r3, #4]
 801c596:	b29b      	uxth	r3, r3
 801c598:	429a      	cmp	r2, r3
 801c59a:	d014      	beq.n	801c5c6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801c59c:	693b      	ldr	r3, [r7, #16]
 801c59e:	3301      	adds	r3, #1
 801c5a0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801c5a2:	6a3b      	ldr	r3, [r7, #32]
 801c5a4:	2b00      	cmp	r3, #0
 801c5a6:	d104      	bne.n	801c5b2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801c5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5aa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c5ac:	69fb      	ldr	r3, [r7, #28]
 801c5ae:	61bb      	str	r3, [r7, #24]
 801c5b0:	e009      	b.n	801c5c6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801c5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5b4:	7fda      	ldrb	r2, [r3, #31]
 801c5b6:	6a3b      	ldr	r3, [r7, #32]
 801c5b8:	7fdb      	ldrb	r3, [r3, #31]
 801c5ba:	429a      	cmp	r2, r3
 801c5bc:	d803      	bhi.n	801c5c6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801c5be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5c0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801c5c2:	69fb      	ldr	r3, [r7, #28]
 801c5c4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801c5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5c8:	681b      	ldr	r3, [r3, #0]
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d001      	beq.n	801c5d2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801c5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5d0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801c5d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5d4:	681b      	ldr	r3, [r3, #0]
 801c5d6:	627b      	str	r3, [r7, #36]	@ 0x24
    while (r != NULL) {
 801c5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5da:	2b00      	cmp	r3, #0
 801c5dc:	d1cb      	bne.n	801c576 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801c5de:	6a3b      	ldr	r3, [r7, #32]
 801c5e0:	2b00      	cmp	r3, #0
 801c5e2:	d008      	beq.n	801c5f6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801c5e4:	69b9      	ldr	r1, [r7, #24]
 801c5e6:	6a38      	ldr	r0, [r7, #32]
 801c5e8:	f7ff ff0e 	bl	801c408 <ip_reass_free_complete_datagram>
 801c5ec:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801c5ee:	697a      	ldr	r2, [r7, #20]
 801c5f0:	68fb      	ldr	r3, [r7, #12]
 801c5f2:	4413      	add	r3, r2
 801c5f4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801c5f6:	697a      	ldr	r2, [r7, #20]
 801c5f8:	683b      	ldr	r3, [r7, #0]
 801c5fa:	429a      	cmp	r2, r3
 801c5fc:	da02      	bge.n	801c604 <ip_reass_remove_oldest_datagram+0xb4>
 801c5fe:	693b      	ldr	r3, [r7, #16]
 801c600:	2b01      	cmp	r3, #1
 801c602:	dcac      	bgt.n	801c55e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801c604:	697b      	ldr	r3, [r7, #20]
}
 801c606:	4618      	mov	r0, r3
 801c608:	3728      	adds	r7, #40	@ 0x28
 801c60a:	46bd      	mov	sp, r7
 801c60c:	bd80      	pop	{r7, pc}
 801c60e:	bf00      	nop
 801c610:	2001b1a8 	.word	0x2001b1a8

0801c614 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801c614:	b580      	push	{r7, lr}
 801c616:	b084      	sub	sp, #16
 801c618:	af00      	add	r7, sp, #0
 801c61a:	6078      	str	r0, [r7, #4]
 801c61c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c61e:	2004      	movs	r0, #4
 801c620:	f7f5 f902 	bl	8011828 <memp_malloc>
 801c624:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801c626:	68fb      	ldr	r3, [r7, #12]
 801c628:	2b00      	cmp	r3, #0
 801c62a:	d110      	bne.n	801c64e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801c62c:	6839      	ldr	r1, [r7, #0]
 801c62e:	6878      	ldr	r0, [r7, #4]
 801c630:	f7ff ff8e 	bl	801c550 <ip_reass_remove_oldest_datagram>
 801c634:	4602      	mov	r2, r0
 801c636:	683b      	ldr	r3, [r7, #0]
 801c638:	4293      	cmp	r3, r2
 801c63a:	dc03      	bgt.n	801c644 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801c63c:	2004      	movs	r0, #4
 801c63e:	f7f5 f8f3 	bl	8011828 <memp_malloc>
 801c642:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801c644:	68fb      	ldr	r3, [r7, #12]
 801c646:	2b00      	cmp	r3, #0
 801c648:	d101      	bne.n	801c64e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801c64a:	2300      	movs	r3, #0
 801c64c:	e016      	b.n	801c67c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801c64e:	2220      	movs	r2, #32
 801c650:	2100      	movs	r1, #0
 801c652:	68f8      	ldr	r0, [r7, #12]
 801c654:	f002 f988 	bl	801e968 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801c658:	68fb      	ldr	r3, [r7, #12]
 801c65a:	220f      	movs	r2, #15
 801c65c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801c65e:	4b09      	ldr	r3, [pc, #36]	@ (801c684 <ip_reass_enqueue_new_datagram+0x70>)
 801c660:	681a      	ldr	r2, [r3, #0]
 801c662:	68fb      	ldr	r3, [r7, #12]
 801c664:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801c666:	4a07      	ldr	r2, [pc, #28]	@ (801c684 <ip_reass_enqueue_new_datagram+0x70>)
 801c668:	68fb      	ldr	r3, [r7, #12]
 801c66a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801c66c:	68fb      	ldr	r3, [r7, #12]
 801c66e:	3308      	adds	r3, #8
 801c670:	2214      	movs	r2, #20
 801c672:	6879      	ldr	r1, [r7, #4]
 801c674:	4618      	mov	r0, r3
 801c676:	f002 fad2 	bl	801ec1e <memcpy>
  return ipr;
 801c67a:	68fb      	ldr	r3, [r7, #12]
}
 801c67c:	4618      	mov	r0, r3
 801c67e:	3710      	adds	r7, #16
 801c680:	46bd      	mov	sp, r7
 801c682:	bd80      	pop	{r7, pc}
 801c684:	2001b1a8 	.word	0x2001b1a8

0801c688 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801c688:	b580      	push	{r7, lr}
 801c68a:	b082      	sub	sp, #8
 801c68c:	af00      	add	r7, sp, #0
 801c68e:	6078      	str	r0, [r7, #4]
 801c690:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801c692:	4b10      	ldr	r3, [pc, #64]	@ (801c6d4 <ip_reass_dequeue_datagram+0x4c>)
 801c694:	681b      	ldr	r3, [r3, #0]
 801c696:	687a      	ldr	r2, [r7, #4]
 801c698:	429a      	cmp	r2, r3
 801c69a:	d104      	bne.n	801c6a6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801c69c:	687b      	ldr	r3, [r7, #4]
 801c69e:	681b      	ldr	r3, [r3, #0]
 801c6a0:	4a0c      	ldr	r2, [pc, #48]	@ (801c6d4 <ip_reass_dequeue_datagram+0x4c>)
 801c6a2:	6013      	str	r3, [r2, #0]
 801c6a4:	e00d      	b.n	801c6c2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801c6a6:	683b      	ldr	r3, [r7, #0]
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	d106      	bne.n	801c6ba <ip_reass_dequeue_datagram+0x32>
 801c6ac:	4b0a      	ldr	r3, [pc, #40]	@ (801c6d8 <ip_reass_dequeue_datagram+0x50>)
 801c6ae:	f240 1245 	movw	r2, #325	@ 0x145
 801c6b2:	490a      	ldr	r1, [pc, #40]	@ (801c6dc <ip_reass_dequeue_datagram+0x54>)
 801c6b4:	480a      	ldr	r0, [pc, #40]	@ (801c6e0 <ip_reass_dequeue_datagram+0x58>)
 801c6b6:	f002 f823 	bl	801e700 <iprintf>
    prev->next = ipr->next;
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	681a      	ldr	r2, [r3, #0]
 801c6be:	683b      	ldr	r3, [r7, #0]
 801c6c0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801c6c2:	6879      	ldr	r1, [r7, #4]
 801c6c4:	2004      	movs	r0, #4
 801c6c6:	f7f5 f925 	bl	8011914 <memp_free>
}
 801c6ca:	bf00      	nop
 801c6cc:	3708      	adds	r7, #8
 801c6ce:	46bd      	mov	sp, r7
 801c6d0:	bd80      	pop	{r7, pc}
 801c6d2:	bf00      	nop
 801c6d4:	2001b1a8 	.word	0x2001b1a8
 801c6d8:	08024cc8 	.word	0x08024cc8
 801c6dc:	08024d90 	.word	0x08024d90
 801c6e0:	08024d10 	.word	0x08024d10

0801c6e4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801c6e4:	b580      	push	{r7, lr}
 801c6e6:	b08c      	sub	sp, #48	@ 0x30
 801c6e8:	af00      	add	r7, sp, #0
 801c6ea:	60f8      	str	r0, [r7, #12]
 801c6ec:	60b9      	str	r1, [r7, #8]
 801c6ee:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801c6f0:	2300      	movs	r3, #0
 801c6f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801c6f4:	2301      	movs	r3, #1
 801c6f6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801c6f8:	68bb      	ldr	r3, [r7, #8]
 801c6fa:	685b      	ldr	r3, [r3, #4]
 801c6fc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c6fe:	69fb      	ldr	r3, [r7, #28]
 801c700:	885b      	ldrh	r3, [r3, #2]
 801c702:	b29b      	uxth	r3, r3
 801c704:	4618      	mov	r0, r3
 801c706:	f7f4 f8c9 	bl	801089c <lwip_htons>
 801c70a:	4603      	mov	r3, r0
 801c70c:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801c70e:	69fb      	ldr	r3, [r7, #28]
 801c710:	781b      	ldrb	r3, [r3, #0]
 801c712:	f003 030f 	and.w	r3, r3, #15
 801c716:	b2db      	uxtb	r3, r3
 801c718:	009b      	lsls	r3, r3, #2
 801c71a:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801c71c:	7e7b      	ldrb	r3, [r7, #25]
 801c71e:	b29b      	uxth	r3, r3
 801c720:	8b7a      	ldrh	r2, [r7, #26]
 801c722:	429a      	cmp	r2, r3
 801c724:	d202      	bcs.n	801c72c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c726:	f04f 33ff 	mov.w	r3, #4294967295
 801c72a:	e135      	b.n	801c998 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801c72c:	7e7b      	ldrb	r3, [r7, #25]
 801c72e:	b29b      	uxth	r3, r3
 801c730:	8b7a      	ldrh	r2, [r7, #26]
 801c732:	1ad3      	subs	r3, r2, r3
 801c734:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801c736:	69fb      	ldr	r3, [r7, #28]
 801c738:	88db      	ldrh	r3, [r3, #6]
 801c73a:	b29b      	uxth	r3, r3
 801c73c:	4618      	mov	r0, r3
 801c73e:	f7f4 f8ad 	bl	801089c <lwip_htons>
 801c742:	4603      	mov	r3, r0
 801c744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c748:	b29b      	uxth	r3, r3
 801c74a:	00db      	lsls	r3, r3, #3
 801c74c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801c74e:	68bb      	ldr	r3, [r7, #8]
 801c750:	685b      	ldr	r3, [r3, #4]
 801c752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  iprh->next_pbuf = NULL;
 801c754:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c756:	2200      	movs	r2, #0
 801c758:	701a      	strb	r2, [r3, #0]
 801c75a:	2200      	movs	r2, #0
 801c75c:	705a      	strb	r2, [r3, #1]
 801c75e:	2200      	movs	r2, #0
 801c760:	709a      	strb	r2, [r3, #2]
 801c762:	2200      	movs	r2, #0
 801c764:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801c766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c768:	8afa      	ldrh	r2, [r7, #22]
 801c76a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801c76c:	8afa      	ldrh	r2, [r7, #22]
 801c76e:	8b7b      	ldrh	r3, [r7, #26]
 801c770:	4413      	add	r3, r2
 801c772:	b29a      	uxth	r2, r3
 801c774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c776:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801c778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c77a:	88db      	ldrh	r3, [r3, #6]
 801c77c:	b29b      	uxth	r3, r3
 801c77e:	8afa      	ldrh	r2, [r7, #22]
 801c780:	429a      	cmp	r2, r3
 801c782:	d902      	bls.n	801c78a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c784:	f04f 33ff 	mov.w	r3, #4294967295
 801c788:	e106      	b.n	801c998 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801c78a:	68fb      	ldr	r3, [r7, #12]
 801c78c:	685b      	ldr	r3, [r3, #4]
 801c78e:	627b      	str	r3, [r7, #36]	@ 0x24
 801c790:	e068      	b.n	801c864 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801c792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c794:	685b      	ldr	r3, [r3, #4]
 801c796:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801c798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c79a:	889b      	ldrh	r3, [r3, #4]
 801c79c:	b29a      	uxth	r2, r3
 801c79e:	693b      	ldr	r3, [r7, #16]
 801c7a0:	889b      	ldrh	r3, [r3, #4]
 801c7a2:	b29b      	uxth	r3, r3
 801c7a4:	429a      	cmp	r2, r3
 801c7a6:	d235      	bcs.n	801c814 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801c7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801c7ac:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801c7ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7b0:	2b00      	cmp	r3, #0
 801c7b2:	d020      	beq.n	801c7f6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801c7b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7b6:	889b      	ldrh	r3, [r3, #4]
 801c7b8:	b29a      	uxth	r2, r3
 801c7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7bc:	88db      	ldrh	r3, [r3, #6]
 801c7be:	b29b      	uxth	r3, r3
 801c7c0:	429a      	cmp	r2, r3
 801c7c2:	d307      	bcc.n	801c7d4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801c7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7c6:	88db      	ldrh	r3, [r3, #6]
 801c7c8:	b29a      	uxth	r2, r3
 801c7ca:	693b      	ldr	r3, [r7, #16]
 801c7cc:	889b      	ldrh	r3, [r3, #4]
 801c7ce:	b29b      	uxth	r3, r3
 801c7d0:	429a      	cmp	r2, r3
 801c7d2:	d902      	bls.n	801c7da <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c7d4:	f04f 33ff 	mov.w	r3, #4294967295
 801c7d8:	e0de      	b.n	801c998 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801c7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7dc:	68ba      	ldr	r2, [r7, #8]
 801c7de:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801c7e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c7e2:	88db      	ldrh	r3, [r3, #6]
 801c7e4:	b29a      	uxth	r2, r3
 801c7e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7e8:	889b      	ldrh	r3, [r3, #4]
 801c7ea:	b29b      	uxth	r3, r3
 801c7ec:	429a      	cmp	r2, r3
 801c7ee:	d03d      	beq.n	801c86c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c7f0:	2300      	movs	r3, #0
 801c7f2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801c7f4:	e03a      	b.n	801c86c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801c7f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7f8:	88db      	ldrh	r3, [r3, #6]
 801c7fa:	b29a      	uxth	r2, r3
 801c7fc:	693b      	ldr	r3, [r7, #16]
 801c7fe:	889b      	ldrh	r3, [r3, #4]
 801c800:	b29b      	uxth	r3, r3
 801c802:	429a      	cmp	r2, r3
 801c804:	d902      	bls.n	801c80c <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c806:	f04f 33ff 	mov.w	r3, #4294967295
 801c80a:	e0c5      	b.n	801c998 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801c80c:	68fb      	ldr	r3, [r7, #12]
 801c80e:	68ba      	ldr	r2, [r7, #8]
 801c810:	605a      	str	r2, [r3, #4]
      break;
 801c812:	e02b      	b.n	801c86c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801c814:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c816:	889b      	ldrh	r3, [r3, #4]
 801c818:	b29a      	uxth	r2, r3
 801c81a:	693b      	ldr	r3, [r7, #16]
 801c81c:	889b      	ldrh	r3, [r3, #4]
 801c81e:	b29b      	uxth	r3, r3
 801c820:	429a      	cmp	r2, r3
 801c822:	d102      	bne.n	801c82a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c824:	f04f 33ff 	mov.w	r3, #4294967295
 801c828:	e0b6      	b.n	801c998 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801c82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c82c:	889b      	ldrh	r3, [r3, #4]
 801c82e:	b29a      	uxth	r2, r3
 801c830:	693b      	ldr	r3, [r7, #16]
 801c832:	88db      	ldrh	r3, [r3, #6]
 801c834:	b29b      	uxth	r3, r3
 801c836:	429a      	cmp	r2, r3
 801c838:	d202      	bcs.n	801c840 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801c83a:	f04f 33ff 	mov.w	r3, #4294967295
 801c83e:	e0ab      	b.n	801c998 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801c840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c842:	2b00      	cmp	r3, #0
 801c844:	d009      	beq.n	801c85a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801c846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c848:	88db      	ldrh	r3, [r3, #6]
 801c84a:	b29a      	uxth	r2, r3
 801c84c:	693b      	ldr	r3, [r7, #16]
 801c84e:	889b      	ldrh	r3, [r3, #4]
 801c850:	b29b      	uxth	r3, r3
 801c852:	429a      	cmp	r2, r3
 801c854:	d001      	beq.n	801c85a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801c856:	2300      	movs	r3, #0
 801c858:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801c85a:	693b      	ldr	r3, [r7, #16]
 801c85c:	681b      	ldr	r3, [r3, #0]
 801c85e:	627b      	str	r3, [r7, #36]	@ 0x24
    iprh_prev = iprh_tmp;
 801c860:	693b      	ldr	r3, [r7, #16]
 801c862:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (q = ipr->p; q != NULL;) {
 801c864:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c866:	2b00      	cmp	r3, #0
 801c868:	d193      	bne.n	801c792 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801c86a:	e000      	b.n	801c86e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801c86c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801c86e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c870:	2b00      	cmp	r3, #0
 801c872:	d12d      	bne.n	801c8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801c874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c876:	2b00      	cmp	r3, #0
 801c878:	d01c      	beq.n	801c8b4 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801c87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c87c:	88db      	ldrh	r3, [r3, #6]
 801c87e:	b29a      	uxth	r2, r3
 801c880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c882:	889b      	ldrh	r3, [r3, #4]
 801c884:	b29b      	uxth	r3, r3
 801c886:	429a      	cmp	r2, r3
 801c888:	d906      	bls.n	801c898 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801c88a:	4b45      	ldr	r3, [pc, #276]	@ (801c9a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c88c:	f44f 72db 	mov.w	r2, #438	@ 0x1b6
 801c890:	4944      	ldr	r1, [pc, #272]	@ (801c9a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801c892:	4845      	ldr	r0, [pc, #276]	@ (801c9a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c894:	f001 ff34 	bl	801e700 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801c898:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c89a:	68ba      	ldr	r2, [r7, #8]
 801c89c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801c89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c8a0:	88db      	ldrh	r3, [r3, #6]
 801c8a2:	b29a      	uxth	r2, r3
 801c8a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8a6:	889b      	ldrh	r3, [r3, #4]
 801c8a8:	b29b      	uxth	r3, r3
 801c8aa:	429a      	cmp	r2, r3
 801c8ac:	d010      	beq.n	801c8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801c8ae:	2300      	movs	r3, #0
 801c8b0:	623b      	str	r3, [r7, #32]
 801c8b2:	e00d      	b.n	801c8d0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801c8b4:	68fb      	ldr	r3, [r7, #12]
 801c8b6:	685b      	ldr	r3, [r3, #4]
 801c8b8:	2b00      	cmp	r3, #0
 801c8ba:	d006      	beq.n	801c8ca <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801c8bc:	4b38      	ldr	r3, [pc, #224]	@ (801c9a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c8be:	f44f 72df 	mov.w	r2, #446	@ 0x1be
 801c8c2:	493a      	ldr	r1, [pc, #232]	@ (801c9ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801c8c4:	4838      	ldr	r0, [pc, #224]	@ (801c9a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c8c6:	f001 ff1b 	bl	801e700 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	68ba      	ldr	r2, [r7, #8]
 801c8ce:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801c8d0:	687b      	ldr	r3, [r7, #4]
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d105      	bne.n	801c8e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801c8d6:	68fb      	ldr	r3, [r7, #12]
 801c8d8:	7f9b      	ldrb	r3, [r3, #30]
 801c8da:	f003 0301 	and.w	r3, r3, #1
 801c8de:	2b00      	cmp	r3, #0
 801c8e0:	d059      	beq.n	801c996 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801c8e2:	6a3b      	ldr	r3, [r7, #32]
 801c8e4:	2b00      	cmp	r3, #0
 801c8e6:	d04f      	beq.n	801c988 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801c8e8:	68fb      	ldr	r3, [r7, #12]
 801c8ea:	685b      	ldr	r3, [r3, #4]
 801c8ec:	2b00      	cmp	r3, #0
 801c8ee:	d006      	beq.n	801c8fe <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801c8f0:	68fb      	ldr	r3, [r7, #12]
 801c8f2:	685b      	ldr	r3, [r3, #4]
 801c8f4:	685b      	ldr	r3, [r3, #4]
 801c8f6:	889b      	ldrh	r3, [r3, #4]
 801c8f8:	b29b      	uxth	r3, r3
 801c8fa:	2b00      	cmp	r3, #0
 801c8fc:	d002      	beq.n	801c904 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801c8fe:	2300      	movs	r3, #0
 801c900:	623b      	str	r3, [r7, #32]
 801c902:	e041      	b.n	801c988 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801c904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c906:	62bb      	str	r3, [r7, #40]	@ 0x28
        q = iprh->next_pbuf;
 801c908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c90a:	681b      	ldr	r3, [r3, #0]
 801c90c:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c90e:	e012      	b.n	801c936 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801c910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c912:	685b      	ldr	r3, [r3, #4]
 801c914:	62fb      	str	r3, [r7, #44]	@ 0x2c
          if (iprh_prev->end != iprh->start) {
 801c916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c918:	88db      	ldrh	r3, [r3, #6]
 801c91a:	b29a      	uxth	r2, r3
 801c91c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c91e:	889b      	ldrh	r3, [r3, #4]
 801c920:	b29b      	uxth	r3, r3
 801c922:	429a      	cmp	r2, r3
 801c924:	d002      	beq.n	801c92c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801c926:	2300      	movs	r3, #0
 801c928:	623b      	str	r3, [r7, #32]
            break;
 801c92a:	e007      	b.n	801c93c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801c92c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c92e:	62bb      	str	r3, [r7, #40]	@ 0x28
          q = iprh->next_pbuf;
 801c930:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c932:	681b      	ldr	r3, [r3, #0]
 801c934:	627b      	str	r3, [r7, #36]	@ 0x24
        while (q != NULL) {
 801c936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c938:	2b00      	cmp	r3, #0
 801c93a:	d1e9      	bne.n	801c910 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801c93c:	6a3b      	ldr	r3, [r7, #32]
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d022      	beq.n	801c988 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801c942:	68fb      	ldr	r3, [r7, #12]
 801c944:	685b      	ldr	r3, [r3, #4]
 801c946:	2b00      	cmp	r3, #0
 801c948:	d106      	bne.n	801c958 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801c94a:	4b15      	ldr	r3, [pc, #84]	@ (801c9a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c94c:	f240 12df 	movw	r2, #479	@ 0x1df
 801c950:	4917      	ldr	r1, [pc, #92]	@ (801c9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c952:	4815      	ldr	r0, [pc, #84]	@ (801c9a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c954:	f001 fed4 	bl	801e700 <iprintf>
          LWIP_ASSERT("sanity check",
 801c958:	68fb      	ldr	r3, [r7, #12]
 801c95a:	685b      	ldr	r3, [r3, #4]
 801c95c:	685b      	ldr	r3, [r3, #4]
 801c95e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801c960:	429a      	cmp	r2, r3
 801c962:	d106      	bne.n	801c972 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801c964:	4b0e      	ldr	r3, [pc, #56]	@ (801c9a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c966:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 801c96a:	4911      	ldr	r1, [pc, #68]	@ (801c9b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c96c:	480e      	ldr	r0, [pc, #56]	@ (801c9a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c96e:	f001 fec7 	bl	801e700 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801c972:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c974:	681b      	ldr	r3, [r3, #0]
 801c976:	2b00      	cmp	r3, #0
 801c978:	d006      	beq.n	801c988 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801c97a:	4b09      	ldr	r3, [pc, #36]	@ (801c9a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c97c:	f44f 72f1 	mov.w	r2, #482	@ 0x1e2
 801c980:	490c      	ldr	r1, [pc, #48]	@ (801c9b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801c982:	4809      	ldr	r0, [pc, #36]	@ (801c9a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c984:	f001 febc 	bl	801e700 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801c988:	6a3b      	ldr	r3, [r7, #32]
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	bf14      	ite	ne
 801c98e:	2301      	movne	r3, #1
 801c990:	2300      	moveq	r3, #0
 801c992:	b2db      	uxtb	r3, r3
 801c994:	e000      	b.n	801c998 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801c996:	2300      	movs	r3, #0
}
 801c998:	4618      	mov	r0, r3
 801c99a:	3730      	adds	r7, #48	@ 0x30
 801c99c:	46bd      	mov	sp, r7
 801c99e:	bd80      	pop	{r7, pc}
 801c9a0:	08024cc8 	.word	0x08024cc8
 801c9a4:	08024dac 	.word	0x08024dac
 801c9a8:	08024d10 	.word	0x08024d10
 801c9ac:	08024dcc 	.word	0x08024dcc
 801c9b0:	08024e04 	.word	0x08024e04
 801c9b4:	08024e14 	.word	0x08024e14

0801c9b8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801c9b8:	b580      	push	{r7, lr}
 801c9ba:	b08e      	sub	sp, #56	@ 0x38
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801c9c0:	687b      	ldr	r3, [r7, #4]
 801c9c2:	685b      	ldr	r3, [r3, #4]
 801c9c4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801c9c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c9c8:	781b      	ldrb	r3, [r3, #0]
 801c9ca:	f003 030f 	and.w	r3, r3, #15
 801c9ce:	b2db      	uxtb	r3, r3
 801c9d0:	009b      	lsls	r3, r3, #2
 801c9d2:	b2db      	uxtb	r3, r3
 801c9d4:	2b14      	cmp	r3, #20
 801c9d6:	f040 8171 	bne.w	801ccbc <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801c9da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c9dc:	88db      	ldrh	r3, [r3, #6]
 801c9de:	b29b      	uxth	r3, r3
 801c9e0:	4618      	mov	r0, r3
 801c9e2:	f7f3 ff5b 	bl	801089c <lwip_htons>
 801c9e6:	4603      	mov	r3, r0
 801c9e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c9ec:	b29b      	uxth	r3, r3
 801c9ee:	00db      	lsls	r3, r3, #3
 801c9f0:	84fb      	strh	r3, [r7, #38]	@ 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c9f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c9f4:	885b      	ldrh	r3, [r3, #2]
 801c9f6:	b29b      	uxth	r3, r3
 801c9f8:	4618      	mov	r0, r3
 801c9fa:	f7f3 ff4f 	bl	801089c <lwip_htons>
 801c9fe:	4603      	mov	r3, r0
 801ca00:	84bb      	strh	r3, [r7, #36]	@ 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801ca02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca04:	781b      	ldrb	r3, [r3, #0]
 801ca06:	f003 030f 	and.w	r3, r3, #15
 801ca0a:	b2db      	uxtb	r3, r3
 801ca0c:	009b      	lsls	r3, r3, #2
 801ca0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  if (hlen > len) {
 801ca12:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ca16:	b29b      	uxth	r3, r3
 801ca18:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ca1a:	429a      	cmp	r2, r3
 801ca1c:	f0c0 8150 	bcc.w	801ccc0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801ca20:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801ca24:	b29b      	uxth	r3, r3
 801ca26:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801ca28:	1ad3      	subs	r3, r2, r3
 801ca2a:	84bb      	strh	r3, [r7, #36]	@ 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801ca2c:	6878      	ldr	r0, [r7, #4]
 801ca2e:	f7f5 feaf 	bl	8012790 <pbuf_clen>
 801ca32:	4603      	mov	r3, r0
 801ca34:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801ca36:	4b8c      	ldr	r3, [pc, #560]	@ (801cc68 <ip4_reass+0x2b0>)
 801ca38:	881b      	ldrh	r3, [r3, #0]
 801ca3a:	461a      	mov	r2, r3
 801ca3c:	8c3b      	ldrh	r3, [r7, #32]
 801ca3e:	4413      	add	r3, r2
 801ca40:	2b0a      	cmp	r3, #10
 801ca42:	dd10      	ble.n	801ca66 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ca44:	8c3b      	ldrh	r3, [r7, #32]
 801ca46:	4619      	mov	r1, r3
 801ca48:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801ca4a:	f7ff fd81 	bl	801c550 <ip_reass_remove_oldest_datagram>
 801ca4e:	4603      	mov	r3, r0
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	f000 8137 	beq.w	801ccc4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801ca56:	4b84      	ldr	r3, [pc, #528]	@ (801cc68 <ip4_reass+0x2b0>)
 801ca58:	881b      	ldrh	r3, [r3, #0]
 801ca5a:	461a      	mov	r2, r3
 801ca5c:	8c3b      	ldrh	r3, [r7, #32]
 801ca5e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801ca60:	2b0a      	cmp	r3, #10
 801ca62:	f300 812f 	bgt.w	801ccc4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ca66:	4b81      	ldr	r3, [pc, #516]	@ (801cc6c <ip4_reass+0x2b4>)
 801ca68:	681b      	ldr	r3, [r3, #0]
 801ca6a:	633b      	str	r3, [r7, #48]	@ 0x30
 801ca6c:	e015      	b.n	801ca9a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801ca6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca70:	695a      	ldr	r2, [r3, #20]
 801ca72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca74:	68db      	ldr	r3, [r3, #12]
 801ca76:	429a      	cmp	r2, r3
 801ca78:	d10c      	bne.n	801ca94 <ip4_reass+0xdc>
 801ca7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca7c:	699a      	ldr	r2, [r3, #24]
 801ca7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca80:	691b      	ldr	r3, [r3, #16]
 801ca82:	429a      	cmp	r2, r3
 801ca84:	d106      	bne.n	801ca94 <ip4_reass+0xdc>
 801ca86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca88:	899a      	ldrh	r2, [r3, #12]
 801ca8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ca8c:	889b      	ldrh	r3, [r3, #4]
 801ca8e:	b29b      	uxth	r3, r3
 801ca90:	429a      	cmp	r2, r3
 801ca92:	d006      	beq.n	801caa2 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801ca94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca96:	681b      	ldr	r3, [r3, #0]
 801ca98:	633b      	str	r3, [r7, #48]	@ 0x30
 801ca9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d1e6      	bne.n	801ca6e <ip4_reass+0xb6>
 801caa0:	e000      	b.n	801caa4 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801caa2:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801caa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801caa6:	2b00      	cmp	r3, #0
 801caa8:	d109      	bne.n	801cabe <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801caaa:	8c3b      	ldrh	r3, [r7, #32]
 801caac:	4619      	mov	r1, r3
 801caae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cab0:	f7ff fdb0 	bl	801c614 <ip_reass_enqueue_new_datagram>
 801cab4:	6338      	str	r0, [r7, #48]	@ 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801cab6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cab8:	2b00      	cmp	r3, #0
 801caba:	d11c      	bne.n	801caf6 <ip4_reass+0x13e>
      goto nullreturn;
 801cabc:	e105      	b.n	801ccca <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801cabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cac0:	88db      	ldrh	r3, [r3, #6]
 801cac2:	b29b      	uxth	r3, r3
 801cac4:	4618      	mov	r0, r3
 801cac6:	f7f3 fee9 	bl	801089c <lwip_htons>
 801caca:	4603      	mov	r3, r0
 801cacc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cad0:	2b00      	cmp	r3, #0
 801cad2:	d110      	bne.n	801caf6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801cad4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cad6:	89db      	ldrh	r3, [r3, #14]
 801cad8:	4618      	mov	r0, r3
 801cada:	f7f3 fedf 	bl	801089c <lwip_htons>
 801cade:	4603      	mov	r3, r0
 801cae0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	d006      	beq.n	801caf6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801cae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801caea:	3308      	adds	r3, #8
 801caec:	2214      	movs	r2, #20
 801caee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801caf0:	4618      	mov	r0, r3
 801caf2:	f002 f894 	bl	801ec1e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801caf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801caf8:	88db      	ldrh	r3, [r3, #6]
 801cafa:	b29b      	uxth	r3, r3
 801cafc:	f003 0320 	and.w	r3, r3, #32
 801cb00:	2b00      	cmp	r3, #0
 801cb02:	bf0c      	ite	eq
 801cb04:	2301      	moveq	r3, #1
 801cb06:	2300      	movne	r3, #0
 801cb08:	b2db      	uxtb	r3, r3
 801cb0a:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801cb0c:	69fb      	ldr	r3, [r7, #28]
 801cb0e:	2b00      	cmp	r3, #0
 801cb10:	d00e      	beq.n	801cb30 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801cb12:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801cb14:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb16:	4413      	add	r3, r2
 801cb18:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801cb1a:	8b7a      	ldrh	r2, [r7, #26]
 801cb1c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 801cb1e:	429a      	cmp	r2, r3
 801cb20:	f0c0 80a0 	bcc.w	801cc64 <ip4_reass+0x2ac>
 801cb24:	8b7b      	ldrh	r3, [r7, #26]
 801cb26:	f64f 72eb 	movw	r2, #65515	@ 0xffeb
 801cb2a:	4293      	cmp	r3, r2
 801cb2c:	f200 809a 	bhi.w	801cc64 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801cb30:	69fa      	ldr	r2, [r7, #28]
 801cb32:	6879      	ldr	r1, [r7, #4]
 801cb34:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cb36:	f7ff fdd5 	bl	801c6e4 <ip_reass_chain_frag_into_datagram_and_validate>
 801cb3a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801cb3c:	697b      	ldr	r3, [r7, #20]
 801cb3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801cb42:	f000 809b 	beq.w	801cc7c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801cb46:	4b48      	ldr	r3, [pc, #288]	@ (801cc68 <ip4_reass+0x2b0>)
 801cb48:	881a      	ldrh	r2, [r3, #0]
 801cb4a:	8c3b      	ldrh	r3, [r7, #32]
 801cb4c:	4413      	add	r3, r2
 801cb4e:	b29a      	uxth	r2, r3
 801cb50:	4b45      	ldr	r3, [pc, #276]	@ (801cc68 <ip4_reass+0x2b0>)
 801cb52:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801cb54:	69fb      	ldr	r3, [r7, #28]
 801cb56:	2b00      	cmp	r3, #0
 801cb58:	d00d      	beq.n	801cb76 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801cb5a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 801cb5c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801cb5e:	4413      	add	r3, r2
 801cb60:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801cb62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb64:	8a7a      	ldrh	r2, [r7, #18]
 801cb66:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801cb68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb6a:	7f9b      	ldrb	r3, [r3, #30]
 801cb6c:	f043 0301 	orr.w	r3, r3, #1
 801cb70:	b2da      	uxtb	r2, r3
 801cb72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb74:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801cb76:	697b      	ldr	r3, [r7, #20]
 801cb78:	2b01      	cmp	r3, #1
 801cb7a:	d171      	bne.n	801cc60 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801cb7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb7e:	8b9b      	ldrh	r3, [r3, #28]
 801cb80:	3314      	adds	r3, #20
 801cb82:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801cb84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb86:	685b      	ldr	r3, [r3, #4]
 801cb88:	685b      	ldr	r3, [r3, #4]
 801cb8a:	681b      	ldr	r3, [r3, #0]
 801cb8c:	637b      	str	r3, [r7, #52]	@ 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801cb8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb90:	685b      	ldr	r3, [r3, #4]
 801cb92:	685b      	ldr	r3, [r3, #4]
 801cb94:	62bb      	str	r3, [r7, #40]	@ 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801cb96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cb98:	3308      	adds	r3, #8
 801cb9a:	2214      	movs	r2, #20
 801cb9c:	4619      	mov	r1, r3
 801cb9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801cba0:	f002 f83d 	bl	801ec1e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801cba4:	8a3b      	ldrh	r3, [r7, #16]
 801cba6:	4618      	mov	r0, r3
 801cba8:	f7f3 fe78 	bl	801089c <lwip_htons>
 801cbac:	4603      	mov	r3, r0
 801cbae:	461a      	mov	r2, r3
 801cbb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbb2:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801cbb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbb6:	2200      	movs	r2, #0
 801cbb8:	719a      	strb	r2, [r3, #6]
 801cbba:	2200      	movs	r2, #0
 801cbbc:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801cbbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cbc0:	2200      	movs	r2, #0
 801cbc2:	729a      	strb	r2, [r3, #10]
 801cbc4:	2200      	movs	r2, #0
 801cbc6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801cbc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbca:	685b      	ldr	r3, [r3, #4]
 801cbcc:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801cbce:	e00d      	b.n	801cbec <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801cbd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cbd2:	685b      	ldr	r3, [r3, #4]
 801cbd4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801cbd6:	2114      	movs	r1, #20
 801cbd8:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 801cbda:	f7f5 fcc5 	bl	8012568 <pbuf_remove_header>
      pbuf_cat(p, r);
 801cbde:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801cbe0:	6878      	ldr	r0, [r7, #4]
 801cbe2:	f7f5 fe15 	bl	8012810 <pbuf_cat>
      r = iprh->next_pbuf;
 801cbe6:	68fb      	ldr	r3, [r7, #12]
 801cbe8:	681b      	ldr	r3, [r3, #0]
 801cbea:	637b      	str	r3, [r7, #52]	@ 0x34
    while (r != NULL) {
 801cbec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	d1ee      	bne.n	801cbd0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801cbf2:	4b1e      	ldr	r3, [pc, #120]	@ (801cc6c <ip4_reass+0x2b4>)
 801cbf4:	681b      	ldr	r3, [r3, #0]
 801cbf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cbf8:	429a      	cmp	r2, r3
 801cbfa:	d102      	bne.n	801cc02 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801cbfc:	2300      	movs	r3, #0
 801cbfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cc00:	e010      	b.n	801cc24 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801cc02:	4b1a      	ldr	r3, [pc, #104]	@ (801cc6c <ip4_reass+0x2b4>)
 801cc04:	681b      	ldr	r3, [r3, #0]
 801cc06:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cc08:	e007      	b.n	801cc1a <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801cc0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc0c:	681b      	ldr	r3, [r3, #0]
 801cc0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cc10:	429a      	cmp	r2, r3
 801cc12:	d006      	beq.n	801cc22 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801cc14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc16:	681b      	ldr	r3, [r3, #0]
 801cc18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801cc1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cc1c:	2b00      	cmp	r3, #0
 801cc1e:	d1f4      	bne.n	801cc0a <ip4_reass+0x252>
 801cc20:	e000      	b.n	801cc24 <ip4_reass+0x26c>
          break;
 801cc22:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801cc24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801cc26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801cc28:	f7ff fd2e 	bl	801c688 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801cc2c:	6878      	ldr	r0, [r7, #4]
 801cc2e:	f7f5 fdaf 	bl	8012790 <pbuf_clen>
 801cc32:	4603      	mov	r3, r0
 801cc34:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801cc36:	4b0c      	ldr	r3, [pc, #48]	@ (801cc68 <ip4_reass+0x2b0>)
 801cc38:	881b      	ldrh	r3, [r3, #0]
 801cc3a:	8c3a      	ldrh	r2, [r7, #32]
 801cc3c:	429a      	cmp	r2, r3
 801cc3e:	d906      	bls.n	801cc4e <ip4_reass+0x296>
 801cc40:	4b0b      	ldr	r3, [pc, #44]	@ (801cc70 <ip4_reass+0x2b8>)
 801cc42:	f240 229b 	movw	r2, #667	@ 0x29b
 801cc46:	490b      	ldr	r1, [pc, #44]	@ (801cc74 <ip4_reass+0x2bc>)
 801cc48:	480b      	ldr	r0, [pc, #44]	@ (801cc78 <ip4_reass+0x2c0>)
 801cc4a:	f001 fd59 	bl	801e700 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801cc4e:	4b06      	ldr	r3, [pc, #24]	@ (801cc68 <ip4_reass+0x2b0>)
 801cc50:	881a      	ldrh	r2, [r3, #0]
 801cc52:	8c3b      	ldrh	r3, [r7, #32]
 801cc54:	1ad3      	subs	r3, r2, r3
 801cc56:	b29a      	uxth	r2, r3
 801cc58:	4b03      	ldr	r3, [pc, #12]	@ (801cc68 <ip4_reass+0x2b0>)
 801cc5a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801cc5c:	687b      	ldr	r3, [r7, #4]
 801cc5e:	e038      	b.n	801ccd2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801cc60:	2300      	movs	r3, #0
 801cc62:	e036      	b.n	801ccd2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801cc64:	bf00      	nop
 801cc66:	e00a      	b.n	801cc7e <ip4_reass+0x2c6>
 801cc68:	2001b1ac 	.word	0x2001b1ac
 801cc6c:	2001b1a8 	.word	0x2001b1a8
 801cc70:	08024cc8 	.word	0x08024cc8
 801cc74:	08024e38 	.word	0x08024e38
 801cc78:	08024d10 	.word	0x08024d10
    goto nullreturn_ipr;
 801cc7c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801cc7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc80:	2b00      	cmp	r3, #0
 801cc82:	d106      	bne.n	801cc92 <ip4_reass+0x2da>
 801cc84:	4b15      	ldr	r3, [pc, #84]	@ (801ccdc <ip4_reass+0x324>)
 801cc86:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 801cc8a:	4915      	ldr	r1, [pc, #84]	@ (801cce0 <ip4_reass+0x328>)
 801cc8c:	4815      	ldr	r0, [pc, #84]	@ (801cce4 <ip4_reass+0x32c>)
 801cc8e:	f001 fd37 	bl	801e700 <iprintf>
  if (ipr->p == NULL) {
 801cc92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cc94:	685b      	ldr	r3, [r3, #4]
 801cc96:	2b00      	cmp	r3, #0
 801cc98:	d116      	bne.n	801ccc8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801cc9a:	4b13      	ldr	r3, [pc, #76]	@ (801cce8 <ip4_reass+0x330>)
 801cc9c:	681b      	ldr	r3, [r3, #0]
 801cc9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801cca0:	429a      	cmp	r2, r3
 801cca2:	d006      	beq.n	801ccb2 <ip4_reass+0x2fa>
 801cca4:	4b0d      	ldr	r3, [pc, #52]	@ (801ccdc <ip4_reass+0x324>)
 801cca6:	f240 22ab 	movw	r2, #683	@ 0x2ab
 801ccaa:	4910      	ldr	r1, [pc, #64]	@ (801ccec <ip4_reass+0x334>)
 801ccac:	480d      	ldr	r0, [pc, #52]	@ (801cce4 <ip4_reass+0x32c>)
 801ccae:	f001 fd27 	bl	801e700 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801ccb2:	2100      	movs	r1, #0
 801ccb4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801ccb6:	f7ff fce7 	bl	801c688 <ip_reass_dequeue_datagram>
 801ccba:	e006      	b.n	801ccca <ip4_reass+0x312>
    goto nullreturn;
 801ccbc:	bf00      	nop
 801ccbe:	e004      	b.n	801ccca <ip4_reass+0x312>
    goto nullreturn;
 801ccc0:	bf00      	nop
 801ccc2:	e002      	b.n	801ccca <ip4_reass+0x312>
      goto nullreturn;
 801ccc4:	bf00      	nop
 801ccc6:	e000      	b.n	801ccca <ip4_reass+0x312>
  }

nullreturn:
 801ccc8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801ccca:	6878      	ldr	r0, [r7, #4]
 801cccc:	f7f5 fcd2 	bl	8012674 <pbuf_free>
  return NULL;
 801ccd0:	2300      	movs	r3, #0
}
 801ccd2:	4618      	mov	r0, r3
 801ccd4:	3738      	adds	r7, #56	@ 0x38
 801ccd6:	46bd      	mov	sp, r7
 801ccd8:	bd80      	pop	{r7, pc}
 801ccda:	bf00      	nop
 801ccdc:	08024cc8 	.word	0x08024cc8
 801cce0:	08024e54 	.word	0x08024e54
 801cce4:	08024d10 	.word	0x08024d10
 801cce8:	2001b1a8 	.word	0x2001b1a8
 801ccec:	08024e60 	.word	0x08024e60

0801ccf0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801ccf0:	b580      	push	{r7, lr}
 801ccf2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801ccf4:	2005      	movs	r0, #5
 801ccf6:	f7f4 fd97 	bl	8011828 <memp_malloc>
 801ccfa:	4603      	mov	r3, r0
}
 801ccfc:	4618      	mov	r0, r3
 801ccfe:	bd80      	pop	{r7, pc}

0801cd00 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801cd00:	b580      	push	{r7, lr}
 801cd02:	b082      	sub	sp, #8
 801cd04:	af00      	add	r7, sp, #0
 801cd06:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	d106      	bne.n	801cd1c <ip_frag_free_pbuf_custom_ref+0x1c>
 801cd0e:	4b07      	ldr	r3, [pc, #28]	@ (801cd2c <ip_frag_free_pbuf_custom_ref+0x2c>)
 801cd10:	f44f 7231 	mov.w	r2, #708	@ 0x2c4
 801cd14:	4906      	ldr	r1, [pc, #24]	@ (801cd30 <ip_frag_free_pbuf_custom_ref+0x30>)
 801cd16:	4807      	ldr	r0, [pc, #28]	@ (801cd34 <ip_frag_free_pbuf_custom_ref+0x34>)
 801cd18:	f001 fcf2 	bl	801e700 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801cd1c:	6879      	ldr	r1, [r7, #4]
 801cd1e:	2005      	movs	r0, #5
 801cd20:	f7f4 fdf8 	bl	8011914 <memp_free>
}
 801cd24:	bf00      	nop
 801cd26:	3708      	adds	r7, #8
 801cd28:	46bd      	mov	sp, r7
 801cd2a:	bd80      	pop	{r7, pc}
 801cd2c:	08024cc8 	.word	0x08024cc8
 801cd30:	08024e80 	.word	0x08024e80
 801cd34:	08024d10 	.word	0x08024d10

0801cd38 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801cd38:	b580      	push	{r7, lr}
 801cd3a:	b084      	sub	sp, #16
 801cd3c:	af00      	add	r7, sp, #0
 801cd3e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801cd40:	687b      	ldr	r3, [r7, #4]
 801cd42:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801cd44:	68fb      	ldr	r3, [r7, #12]
 801cd46:	2b00      	cmp	r3, #0
 801cd48:	d106      	bne.n	801cd58 <ipfrag_free_pbuf_custom+0x20>
 801cd4a:	4b11      	ldr	r3, [pc, #68]	@ (801cd90 <ipfrag_free_pbuf_custom+0x58>)
 801cd4c:	f240 22ce 	movw	r2, #718	@ 0x2ce
 801cd50:	4910      	ldr	r1, [pc, #64]	@ (801cd94 <ipfrag_free_pbuf_custom+0x5c>)
 801cd52:	4811      	ldr	r0, [pc, #68]	@ (801cd98 <ipfrag_free_pbuf_custom+0x60>)
 801cd54:	f001 fcd4 	bl	801e700 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801cd58:	68fa      	ldr	r2, [r7, #12]
 801cd5a:	687b      	ldr	r3, [r7, #4]
 801cd5c:	429a      	cmp	r2, r3
 801cd5e:	d006      	beq.n	801cd6e <ipfrag_free_pbuf_custom+0x36>
 801cd60:	4b0b      	ldr	r3, [pc, #44]	@ (801cd90 <ipfrag_free_pbuf_custom+0x58>)
 801cd62:	f240 22cf 	movw	r2, #719	@ 0x2cf
 801cd66:	490d      	ldr	r1, [pc, #52]	@ (801cd9c <ipfrag_free_pbuf_custom+0x64>)
 801cd68:	480b      	ldr	r0, [pc, #44]	@ (801cd98 <ipfrag_free_pbuf_custom+0x60>)
 801cd6a:	f001 fcc9 	bl	801e700 <iprintf>
  if (pcr->original != NULL) {
 801cd6e:	68fb      	ldr	r3, [r7, #12]
 801cd70:	695b      	ldr	r3, [r3, #20]
 801cd72:	2b00      	cmp	r3, #0
 801cd74:	d004      	beq.n	801cd80 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801cd76:	68fb      	ldr	r3, [r7, #12]
 801cd78:	695b      	ldr	r3, [r3, #20]
 801cd7a:	4618      	mov	r0, r3
 801cd7c:	f7f5 fc7a 	bl	8012674 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801cd80:	68f8      	ldr	r0, [r7, #12]
 801cd82:	f7ff ffbd 	bl	801cd00 <ip_frag_free_pbuf_custom_ref>
}
 801cd86:	bf00      	nop
 801cd88:	3710      	adds	r7, #16
 801cd8a:	46bd      	mov	sp, r7
 801cd8c:	bd80      	pop	{r7, pc}
 801cd8e:	bf00      	nop
 801cd90:	08024cc8 	.word	0x08024cc8
 801cd94:	08024e8c 	.word	0x08024e8c
 801cd98:	08024d10 	.word	0x08024d10
 801cd9c:	08024e98 	.word	0x08024e98

0801cda0 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801cda0:	b580      	push	{r7, lr}
 801cda2:	b094      	sub	sp, #80	@ 0x50
 801cda4:	af02      	add	r7, sp, #8
 801cda6:	60f8      	str	r0, [r7, #12]
 801cda8:	60b9      	str	r1, [r7, #8]
 801cdaa:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801cdac:	2300      	movs	r3, #0
 801cdae:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801cdb2:	68bb      	ldr	r3, [r7, #8]
 801cdb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801cdb6:	3b14      	subs	r3, #20
 801cdb8:	2b00      	cmp	r3, #0
 801cdba:	da00      	bge.n	801cdbe <ip4_frag+0x1e>
 801cdbc:	3307      	adds	r3, #7
 801cdbe:	10db      	asrs	r3, r3, #3
 801cdc0:	877b      	strh	r3, [r7, #58]	@ 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801cdc2:	2314      	movs	r3, #20
 801cdc4:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801cdc6:	68fb      	ldr	r3, [r7, #12]
 801cdc8:	685b      	ldr	r3, [r3, #4]
 801cdca:	637b      	str	r3, [r7, #52]	@ 0x34
  iphdr = original_iphdr;
 801cdcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cdce:	633b      	str	r3, [r7, #48]	@ 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801cdd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cdd2:	781b      	ldrb	r3, [r3, #0]
 801cdd4:	f003 030f 	and.w	r3, r3, #15
 801cdd8:	b2db      	uxtb	r3, r3
 801cdda:	009b      	lsls	r3, r3, #2
 801cddc:	b2db      	uxtb	r3, r3
 801cdde:	2b14      	cmp	r3, #20
 801cde0:	d002      	beq.n	801cde8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801cde2:	f06f 0305 	mvn.w	r3, #5
 801cde6:	e110      	b.n	801d00a <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801cde8:	68fb      	ldr	r3, [r7, #12]
 801cdea:	895b      	ldrh	r3, [r3, #10]
 801cdec:	2b13      	cmp	r3, #19
 801cdee:	d809      	bhi.n	801ce04 <ip4_frag+0x64>
 801cdf0:	4b88      	ldr	r3, [pc, #544]	@ (801d014 <ip4_frag+0x274>)
 801cdf2:	f44f 723f 	mov.w	r2, #764	@ 0x2fc
 801cdf6:	4988      	ldr	r1, [pc, #544]	@ (801d018 <ip4_frag+0x278>)
 801cdf8:	4888      	ldr	r0, [pc, #544]	@ (801d01c <ip4_frag+0x27c>)
 801cdfa:	f001 fc81 	bl	801e700 <iprintf>
 801cdfe:	f06f 0305 	mvn.w	r3, #5
 801ce02:	e102      	b.n	801d00a <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801ce04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ce06:	88db      	ldrh	r3, [r3, #6]
 801ce08:	b29b      	uxth	r3, r3
 801ce0a:	4618      	mov	r0, r3
 801ce0c:	f7f3 fd46 	bl	801089c <lwip_htons>
 801ce10:	4603      	mov	r3, r0
 801ce12:	87bb      	strh	r3, [r7, #60]	@ 0x3c
  ofo = tmp & IP_OFFMASK;
 801ce14:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ce16:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ce1a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801ce1e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801ce20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801ce24:	62fb      	str	r3, [r7, #44]	@ 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801ce26:	68fb      	ldr	r3, [r7, #12]
 801ce28:	891b      	ldrh	r3, [r3, #8]
 801ce2a:	3b14      	subs	r3, #20
 801ce2c:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

  while (left) {
 801ce30:	e0e1      	b.n	801cff6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801ce32:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801ce34:	00db      	lsls	r3, r3, #3
 801ce36:	b29b      	uxth	r3, r3
 801ce38:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801ce3c:	4293      	cmp	r3, r2
 801ce3e:	bf28      	it	cs
 801ce40:	4613      	movcs	r3, r2
 801ce42:	857b      	strh	r3, [r7, #42]	@ 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801ce44:	f44f 7220 	mov.w	r2, #640	@ 0x280
 801ce48:	2114      	movs	r1, #20
 801ce4a:	200e      	movs	r0, #14
 801ce4c:	f7f5 f92e 	bl	80120ac <pbuf_alloc>
 801ce50:	6278      	str	r0, [r7, #36]	@ 0x24
    if (rambuf == NULL) {
 801ce52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce54:	2b00      	cmp	r3, #0
 801ce56:	f000 80d5 	beq.w	801d004 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801ce5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce5c:	895b      	ldrh	r3, [r3, #10]
 801ce5e:	2b13      	cmp	r3, #19
 801ce60:	d806      	bhi.n	801ce70 <ip4_frag+0xd0>
 801ce62:	4b6c      	ldr	r3, [pc, #432]	@ (801d014 <ip4_frag+0x274>)
 801ce64:	f44f 7249 	mov.w	r2, #804	@ 0x324
 801ce68:	496d      	ldr	r1, [pc, #436]	@ (801d020 <ip4_frag+0x280>)
 801ce6a:	486c      	ldr	r0, [pc, #432]	@ (801d01c <ip4_frag+0x27c>)
 801ce6c:	f001 fc48 	bl	801e700 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801ce70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce72:	685b      	ldr	r3, [r3, #4]
 801ce74:	2214      	movs	r2, #20
 801ce76:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 801ce78:	4618      	mov	r0, r3
 801ce7a:	f001 fed0 	bl	801ec1e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801ce7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ce80:	685b      	ldr	r3, [r3, #4]
 801ce82:	633b      	str	r3, [r7, #48]	@ 0x30

    left_to_copy = fragsize;
 801ce84:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801ce86:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
    while (left_to_copy) {
 801ce8a:	e064      	b.n	801cf56 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801ce8c:	68fb      	ldr	r3, [r7, #12]
 801ce8e:	895a      	ldrh	r2, [r3, #10]
 801ce90:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ce92:	1ad3      	subs	r3, r2, r3
 801ce94:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801ce96:	68fb      	ldr	r3, [r7, #12]
 801ce98:	895b      	ldrh	r3, [r3, #10]
 801ce9a:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801ce9c:	429a      	cmp	r2, r3
 801ce9e:	d906      	bls.n	801ceae <ip4_frag+0x10e>
 801cea0:	4b5c      	ldr	r3, [pc, #368]	@ (801d014 <ip4_frag+0x274>)
 801cea2:	f240 322d 	movw	r2, #813	@ 0x32d
 801cea6:	495f      	ldr	r1, [pc, #380]	@ (801d024 <ip4_frag+0x284>)
 801cea8:	485c      	ldr	r0, [pc, #368]	@ (801d01c <ip4_frag+0x27c>)
 801ceaa:	f001 fc29 	bl	801e700 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801ceae:	8bfa      	ldrh	r2, [r7, #30]
 801ceb0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801ceb4:	4293      	cmp	r3, r2
 801ceb6:	bf28      	it	cs
 801ceb8:	4613      	movcs	r3, r2
 801ceba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801cebe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cec2:	2b00      	cmp	r3, #0
 801cec4:	d105      	bne.n	801ced2 <ip4_frag+0x132>
        poff = 0;
 801cec6:	2300      	movs	r3, #0
 801cec8:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801ceca:	68fb      	ldr	r3, [r7, #12]
 801cecc:	681b      	ldr	r3, [r3, #0]
 801cece:	60fb      	str	r3, [r7, #12]
        continue;
 801ced0:	e041      	b.n	801cf56 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801ced2:	f7ff ff0d 	bl	801ccf0 <ip_frag_alloc_pbuf_custom_ref>
 801ced6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801ced8:	69bb      	ldr	r3, [r7, #24]
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	d103      	bne.n	801cee6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801cede:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cee0:	f7f5 fbc8 	bl	8012674 <pbuf_free>
        goto memerr;
 801cee4:	e08f      	b.n	801d006 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801cee6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801cee8:	68fb      	ldr	r3, [r7, #12]
 801ceea:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801ceec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 801ceee:	4413      	add	r3, r2
 801cef0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	@ 0x46
 801cef4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 801cef8:	9201      	str	r2, [sp, #4]
 801cefa:	9300      	str	r3, [sp, #0]
 801cefc:	4603      	mov	r3, r0
 801cefe:	2241      	movs	r2, #65	@ 0x41
 801cf00:	2000      	movs	r0, #0
 801cf02:	f7f5 f9fd 	bl	8012300 <pbuf_alloced_custom>
 801cf06:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801cf08:	697b      	ldr	r3, [r7, #20]
 801cf0a:	2b00      	cmp	r3, #0
 801cf0c:	d106      	bne.n	801cf1c <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801cf0e:	69b8      	ldr	r0, [r7, #24]
 801cf10:	f7ff fef6 	bl	801cd00 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801cf14:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cf16:	f7f5 fbad 	bl	8012674 <pbuf_free>
        goto memerr;
 801cf1a:	e074      	b.n	801d006 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801cf1c:	68f8      	ldr	r0, [r7, #12]
 801cf1e:	f7f5 fc4f 	bl	80127c0 <pbuf_ref>
      pcr->original = p;
 801cf22:	69bb      	ldr	r3, [r7, #24]
 801cf24:	68fa      	ldr	r2, [r7, #12]
 801cf26:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801cf28:	69bb      	ldr	r3, [r7, #24]
 801cf2a:	4a3f      	ldr	r2, [pc, #252]	@ (801d028 <ip4_frag+0x288>)
 801cf2c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801cf2e:	6979      	ldr	r1, [r7, #20]
 801cf30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cf32:	f7f5 fc6d 	bl	8012810 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801cf36:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 801cf3a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cf3e:	1ad3      	subs	r3, r2, r3
 801cf40:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
      if (left_to_copy) {
 801cf44:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cf48:	2b00      	cmp	r3, #0
 801cf4a:	d004      	beq.n	801cf56 <ip4_frag+0x1b6>
        poff = 0;
 801cf4c:	2300      	movs	r3, #0
 801cf4e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        p = p->next;
 801cf50:	68fb      	ldr	r3, [r7, #12]
 801cf52:	681b      	ldr	r3, [r3, #0]
 801cf54:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801cf56:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801cf5a:	2b00      	cmp	r3, #0
 801cf5c:	d196      	bne.n	801ce8c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801cf5e:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 801cf60:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 801cf64:	4413      	add	r3, r2
 801cf66:	87fb      	strh	r3, [r7, #62]	@ 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801cf68:	68bb      	ldr	r3, [r7, #8]
 801cf6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801cf6c:	f1a3 0213 	sub.w	r2, r3, #19
 801cf70:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801cf74:	429a      	cmp	r2, r3
 801cf76:	bfcc      	ite	gt
 801cf78:	2301      	movgt	r3, #1
 801cf7a:	2300      	movle	r3, #0
 801cf7c:	b2db      	uxtb	r3, r3
 801cf7e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801cf80:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 801cf84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801cf88:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    if (!last || mf_set) {
 801cf8a:	6a3b      	ldr	r3, [r7, #32]
 801cf8c:	2b00      	cmp	r3, #0
 801cf8e:	d002      	beq.n	801cf96 <ip4_frag+0x1f6>
 801cf90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801cf92:	2b00      	cmp	r3, #0
 801cf94:	d003      	beq.n	801cf9e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801cf96:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cf98:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 801cf9c:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801cf9e:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 801cfa0:	4618      	mov	r0, r3
 801cfa2:	f7f3 fc7b 	bl	801089c <lwip_htons>
 801cfa6:	4603      	mov	r3, r0
 801cfa8:	461a      	mov	r2, r3
 801cfaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cfac:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801cfae:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cfb0:	3314      	adds	r3, #20
 801cfb2:	b29b      	uxth	r3, r3
 801cfb4:	4618      	mov	r0, r3
 801cfb6:	f7f3 fc71 	bl	801089c <lwip_htons>
 801cfba:	4603      	mov	r3, r0
 801cfbc:	461a      	mov	r2, r3
 801cfbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cfc0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801cfc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cfc4:	2200      	movs	r2, #0
 801cfc6:	729a      	strb	r2, [r3, #10]
 801cfc8:	2200      	movs	r2, #0
 801cfca:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801cfcc:	68bb      	ldr	r3, [r7, #8]
 801cfce:	695b      	ldr	r3, [r3, #20]
 801cfd0:	687a      	ldr	r2, [r7, #4]
 801cfd2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801cfd4:	68b8      	ldr	r0, [r7, #8]
 801cfd6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801cfd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801cfda:	f7f5 fb4b 	bl	8012674 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801cfde:	f8b7 2042 	ldrh.w	r2, [r7, #66]	@ 0x42
 801cfe2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 801cfe4:	1ad3      	subs	r3, r2, r3
 801cfe6:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
    ofo = (u16_t)(ofo + nfb);
 801cfea:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 801cfee:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 801cff0:	4413      	add	r3, r2
 801cff2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  while (left) {
 801cff6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 801cffa:	2b00      	cmp	r3, #0
 801cffc:	f47f af19 	bne.w	801ce32 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801d000:	2300      	movs	r3, #0
 801d002:	e002      	b.n	801d00a <ip4_frag+0x26a>
      goto memerr;
 801d004:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801d006:	f04f 33ff 	mov.w	r3, #4294967295
}
 801d00a:	4618      	mov	r0, r3
 801d00c:	3748      	adds	r7, #72	@ 0x48
 801d00e:	46bd      	mov	sp, r7
 801d010:	bd80      	pop	{r7, pc}
 801d012:	bf00      	nop
 801d014:	08024cc8 	.word	0x08024cc8
 801d018:	08024ea4 	.word	0x08024ea4
 801d01c:	08024d10 	.word	0x08024d10
 801d020:	08024ec0 	.word	0x08024ec0
 801d024:	08024ee0 	.word	0x08024ee0
 801d028:	0801cd39 	.word	0x0801cd39

0801d02c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801d02c:	b580      	push	{r7, lr}
 801d02e:	b086      	sub	sp, #24
 801d030:	af00      	add	r7, sp, #0
 801d032:	6078      	str	r0, [r7, #4]
 801d034:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801d036:	230e      	movs	r3, #14
 801d038:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801d03a:	687b      	ldr	r3, [r7, #4]
 801d03c:	895b      	ldrh	r3, [r3, #10]
 801d03e:	2b0e      	cmp	r3, #14
 801d040:	d96e      	bls.n	801d120 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801d042:	687b      	ldr	r3, [r7, #4]
 801d044:	7bdb      	ldrb	r3, [r3, #15]
 801d046:	2b00      	cmp	r3, #0
 801d048:	d106      	bne.n	801d058 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801d04a:	683b      	ldr	r3, [r7, #0]
 801d04c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801d050:	3301      	adds	r3, #1
 801d052:	b2da      	uxtb	r2, r3
 801d054:	687b      	ldr	r3, [r7, #4]
 801d056:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801d058:	687b      	ldr	r3, [r7, #4]
 801d05a:	685b      	ldr	r3, [r3, #4]
 801d05c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801d05e:	693b      	ldr	r3, [r7, #16]
 801d060:	7b1a      	ldrb	r2, [r3, #12]
 801d062:	7b5b      	ldrb	r3, [r3, #13]
 801d064:	021b      	lsls	r3, r3, #8
 801d066:	4313      	orrs	r3, r2
 801d068:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801d06a:	693b      	ldr	r3, [r7, #16]
 801d06c:	781b      	ldrb	r3, [r3, #0]
 801d06e:	f003 0301 	and.w	r3, r3, #1
 801d072:	2b00      	cmp	r3, #0
 801d074:	d023      	beq.n	801d0be <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801d076:	693b      	ldr	r3, [r7, #16]
 801d078:	781b      	ldrb	r3, [r3, #0]
 801d07a:	2b01      	cmp	r3, #1
 801d07c:	d10f      	bne.n	801d09e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d07e:	693b      	ldr	r3, [r7, #16]
 801d080:	785b      	ldrb	r3, [r3, #1]
 801d082:	2b00      	cmp	r3, #0
 801d084:	d11b      	bne.n	801d0be <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801d086:	693b      	ldr	r3, [r7, #16]
 801d088:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801d08a:	2b5e      	cmp	r3, #94	@ 0x5e
 801d08c:	d117      	bne.n	801d0be <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	7b5b      	ldrb	r3, [r3, #13]
 801d092:	f043 0310 	orr.w	r3, r3, #16
 801d096:	b2da      	uxtb	r2, r3
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	735a      	strb	r2, [r3, #13]
 801d09c:	e00f      	b.n	801d0be <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801d09e:	693b      	ldr	r3, [r7, #16]
 801d0a0:	2206      	movs	r2, #6
 801d0a2:	4928      	ldr	r1, [pc, #160]	@ (801d144 <ethernet_input+0x118>)
 801d0a4:	4618      	mov	r0, r3
 801d0a6:	f001 fc35 	bl	801e914 <memcmp>
 801d0aa:	4603      	mov	r3, r0
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	d106      	bne.n	801d0be <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801d0b0:	687b      	ldr	r3, [r7, #4]
 801d0b2:	7b5b      	ldrb	r3, [r3, #13]
 801d0b4:	f043 0308 	orr.w	r3, r3, #8
 801d0b8:	b2da      	uxtb	r2, r3
 801d0ba:	687b      	ldr	r3, [r7, #4]
 801d0bc:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801d0be:	89fb      	ldrh	r3, [r7, #14]
 801d0c0:	2b08      	cmp	r3, #8
 801d0c2:	d003      	beq.n	801d0cc <ethernet_input+0xa0>
 801d0c4:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 801d0c8:	d014      	beq.n	801d0f4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801d0ca:	e032      	b.n	801d132 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d0cc:	683b      	ldr	r3, [r7, #0]
 801d0ce:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801d0d2:	f003 0308 	and.w	r3, r3, #8
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	d024      	beq.n	801d124 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d0da:	8afb      	ldrh	r3, [r7, #22]
 801d0dc:	4619      	mov	r1, r3
 801d0de:	6878      	ldr	r0, [r7, #4]
 801d0e0:	f7f5 fa42 	bl	8012568 <pbuf_remove_header>
 801d0e4:	4603      	mov	r3, r0
 801d0e6:	2b00      	cmp	r3, #0
 801d0e8:	d11e      	bne.n	801d128 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801d0ea:	6839      	ldr	r1, [r7, #0]
 801d0ec:	6878      	ldr	r0, [r7, #4]
 801d0ee:	f7fe ff03 	bl	801bef8 <ip4_input>
      break;
 801d0f2:	e013      	b.n	801d11c <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801d0f4:	683b      	ldr	r3, [r7, #0]
 801d0f6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 801d0fa:	f003 0308 	and.w	r3, r3, #8
 801d0fe:	2b00      	cmp	r3, #0
 801d100:	d014      	beq.n	801d12c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801d102:	8afb      	ldrh	r3, [r7, #22]
 801d104:	4619      	mov	r1, r3
 801d106:	6878      	ldr	r0, [r7, #4]
 801d108:	f7f5 fa2e 	bl	8012568 <pbuf_remove_header>
 801d10c:	4603      	mov	r3, r0
 801d10e:	2b00      	cmp	r3, #0
 801d110:	d10e      	bne.n	801d130 <ethernet_input+0x104>
        etharp_input(p, netif);
 801d112:	6839      	ldr	r1, [r7, #0]
 801d114:	6878      	ldr	r0, [r7, #4]
 801d116:	f7fe f89f 	bl	801b258 <etharp_input>
      break;
 801d11a:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801d11c:	2300      	movs	r3, #0
 801d11e:	e00c      	b.n	801d13a <ethernet_input+0x10e>
    goto free_and_return;
 801d120:	bf00      	nop
 801d122:	e006      	b.n	801d132 <ethernet_input+0x106>
        goto free_and_return;
 801d124:	bf00      	nop
 801d126:	e004      	b.n	801d132 <ethernet_input+0x106>
        goto free_and_return;
 801d128:	bf00      	nop
 801d12a:	e002      	b.n	801d132 <ethernet_input+0x106>
        goto free_and_return;
 801d12c:	bf00      	nop
 801d12e:	e000      	b.n	801d132 <ethernet_input+0x106>
        goto free_and_return;
 801d130:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801d132:	6878      	ldr	r0, [r7, #4]
 801d134:	f7f5 fa9e 	bl	8012674 <pbuf_free>
  return ERR_OK;
 801d138:	2300      	movs	r3, #0
}
 801d13a:	4618      	mov	r0, r3
 801d13c:	3718      	adds	r7, #24
 801d13e:	46bd      	mov	sp, r7
 801d140:	bd80      	pop	{r7, pc}
 801d142:	bf00      	nop
 801d144:	080252f0 	.word	0x080252f0

0801d148 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801d148:	b580      	push	{r7, lr}
 801d14a:	b086      	sub	sp, #24
 801d14c:	af00      	add	r7, sp, #0
 801d14e:	60f8      	str	r0, [r7, #12]
 801d150:	60b9      	str	r1, [r7, #8]
 801d152:	607a      	str	r2, [r7, #4]
 801d154:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801d156:	8c3b      	ldrh	r3, [r7, #32]
 801d158:	4618      	mov	r0, r3
 801d15a:	f7f3 fb9f 	bl	801089c <lwip_htons>
 801d15e:	4603      	mov	r3, r0
 801d160:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801d162:	210e      	movs	r1, #14
 801d164:	68b8      	ldr	r0, [r7, #8]
 801d166:	f7f5 f9ef 	bl	8012548 <pbuf_add_header>
 801d16a:	4603      	mov	r3, r0
 801d16c:	2b00      	cmp	r3, #0
 801d16e:	d125      	bne.n	801d1bc <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801d170:	68bb      	ldr	r3, [r7, #8]
 801d172:	685b      	ldr	r3, [r3, #4]
 801d174:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801d176:	693b      	ldr	r3, [r7, #16]
 801d178:	8afa      	ldrh	r2, [r7, #22]
 801d17a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801d17c:	693b      	ldr	r3, [r7, #16]
 801d17e:	2206      	movs	r2, #6
 801d180:	6839      	ldr	r1, [r7, #0]
 801d182:	4618      	mov	r0, r3
 801d184:	f001 fd4b 	bl	801ec1e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801d188:	693b      	ldr	r3, [r7, #16]
 801d18a:	3306      	adds	r3, #6
 801d18c:	2206      	movs	r2, #6
 801d18e:	6879      	ldr	r1, [r7, #4]
 801d190:	4618      	mov	r0, r3
 801d192:	f001 fd44 	bl	801ec1e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801d19c:	2b06      	cmp	r3, #6
 801d19e:	d006      	beq.n	801d1ae <ethernet_output+0x66>
 801d1a0:	4b0a      	ldr	r3, [pc, #40]	@ (801d1cc <ethernet_output+0x84>)
 801d1a2:	f44f 7299 	mov.w	r2, #306	@ 0x132
 801d1a6:	490a      	ldr	r1, [pc, #40]	@ (801d1d0 <ethernet_output+0x88>)
 801d1a8:	480a      	ldr	r0, [pc, #40]	@ (801d1d4 <ethernet_output+0x8c>)
 801d1aa:	f001 faa9 	bl	801e700 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801d1ae:	68fb      	ldr	r3, [r7, #12]
 801d1b0:	699b      	ldr	r3, [r3, #24]
 801d1b2:	68b9      	ldr	r1, [r7, #8]
 801d1b4:	68f8      	ldr	r0, [r7, #12]
 801d1b6:	4798      	blx	r3
 801d1b8:	4603      	mov	r3, r0
 801d1ba:	e002      	b.n	801d1c2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801d1bc:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801d1be:	f06f 0301 	mvn.w	r3, #1
}
 801d1c2:	4618      	mov	r0, r3
 801d1c4:	3718      	adds	r7, #24
 801d1c6:	46bd      	mov	sp, r7
 801d1c8:	bd80      	pop	{r7, pc}
 801d1ca:	bf00      	nop
 801d1cc:	08024ef0 	.word	0x08024ef0
 801d1d0:	08024f28 	.word	0x08024f28
 801d1d4:	08024f5c 	.word	0x08024f5c

0801d1d8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801d1d8:	b580      	push	{r7, lr}
 801d1da:	b082      	sub	sp, #8
 801d1dc:	af00      	add	r7, sp, #0
 801d1de:	6078      	str	r0, [r7, #4]
 801d1e0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 801d1e2:	683b      	ldr	r3, [r7, #0]
 801d1e4:	2200      	movs	r2, #0
 801d1e6:	2104      	movs	r1, #4
 801d1e8:	4618      	mov	r0, r3
 801d1ea:	f7ef fd93 	bl	800cd14 <osMessageQueueNew>
 801d1ee:	4602      	mov	r2, r0
 801d1f0:	687b      	ldr	r3, [r7, #4]
 801d1f2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801d1f4:	687b      	ldr	r3, [r7, #4]
 801d1f6:	681b      	ldr	r3, [r3, #0]
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	d102      	bne.n	801d202 <sys_mbox_new+0x2a>
    return ERR_MEM;
 801d1fc:	f04f 33ff 	mov.w	r3, #4294967295
 801d200:	e000      	b.n	801d204 <sys_mbox_new+0x2c>

  return ERR_OK;
 801d202:	2300      	movs	r3, #0
}
 801d204:	4618      	mov	r0, r3
 801d206:	3708      	adds	r7, #8
 801d208:	46bd      	mov	sp, r7
 801d20a:	bd80      	pop	{r7, pc}

0801d20c <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801d20c:	b580      	push	{r7, lr}
 801d20e:	b084      	sub	sp, #16
 801d210:	af00      	add	r7, sp, #0
 801d212:	6078      	str	r0, [r7, #4]
 801d214:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801d216:	687b      	ldr	r3, [r7, #4]
 801d218:	6818      	ldr	r0, [r3, #0]
 801d21a:	4639      	mov	r1, r7
 801d21c:	2300      	movs	r3, #0
 801d21e:	2200      	movs	r2, #0
 801d220:	f7ef fdec 	bl	800cdfc <osMessageQueuePut>
 801d224:	4603      	mov	r3, r0
 801d226:	2b00      	cmp	r3, #0
 801d228:	d102      	bne.n	801d230 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801d22a:	2300      	movs	r3, #0
 801d22c:	73fb      	strb	r3, [r7, #15]
 801d22e:	e001      	b.n	801d234 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801d230:	23ff      	movs	r3, #255	@ 0xff
 801d232:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801d234:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801d238:	4618      	mov	r0, r3
 801d23a:	3710      	adds	r7, #16
 801d23c:	46bd      	mov	sp, r7
 801d23e:	bd80      	pop	{r7, pc}

0801d240 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801d240:	b580      	push	{r7, lr}
 801d242:	b086      	sub	sp, #24
 801d244:	af00      	add	r7, sp, #0
 801d246:	60f8      	str	r0, [r7, #12]
 801d248:	60b9      	str	r1, [r7, #8]
 801d24a:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 801d24c:	f7ef fa4e 	bl	800c6ec <osKernelGetTickCount>
 801d250:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	2b00      	cmp	r3, #0
 801d256:	d013      	beq.n	801d280 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801d258:	68fb      	ldr	r3, [r7, #12]
 801d25a:	6818      	ldr	r0, [r3, #0]
 801d25c:	687b      	ldr	r3, [r7, #4]
 801d25e:	2200      	movs	r2, #0
 801d260:	68b9      	ldr	r1, [r7, #8]
 801d262:	f7ef fe2b 	bl	800cebc <osMessageQueueGet>
 801d266:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801d268:	693b      	ldr	r3, [r7, #16]
 801d26a:	2b00      	cmp	r3, #0
 801d26c:	d105      	bne.n	801d27a <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801d26e:	f7ef fa3d 	bl	800c6ec <osKernelGetTickCount>
 801d272:	4602      	mov	r2, r0
 801d274:	697b      	ldr	r3, [r7, #20]
 801d276:	1ad3      	subs	r3, r2, r3
 801d278:	e00f      	b.n	801d29a <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801d27a:	f04f 33ff 	mov.w	r3, #4294967295
 801d27e:	e00c      	b.n	801d29a <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801d280:	68fb      	ldr	r3, [r7, #12]
 801d282:	6818      	ldr	r0, [r3, #0]
 801d284:	f04f 33ff 	mov.w	r3, #4294967295
 801d288:	2200      	movs	r2, #0
 801d28a:	68b9      	ldr	r1, [r7, #8]
 801d28c:	f7ef fe16 	bl	800cebc <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801d290:	f7ef fa2c 	bl	800c6ec <osKernelGetTickCount>
 801d294:	4602      	mov	r2, r0
 801d296:	697b      	ldr	r3, [r7, #20]
 801d298:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801d29a:	4618      	mov	r0, r3
 801d29c:	3718      	adds	r7, #24
 801d29e:	46bd      	mov	sp, r7
 801d2a0:	bd80      	pop	{r7, pc}

0801d2a2 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801d2a2:	b480      	push	{r7}
 801d2a4:	b083      	sub	sp, #12
 801d2a6:	af00      	add	r7, sp, #0
 801d2a8:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801d2aa:	687b      	ldr	r3, [r7, #4]
 801d2ac:	681b      	ldr	r3, [r3, #0]
 801d2ae:	2b00      	cmp	r3, #0
 801d2b0:	d101      	bne.n	801d2b6 <sys_mbox_valid+0x14>
    return 0;
 801d2b2:	2300      	movs	r3, #0
 801d2b4:	e000      	b.n	801d2b8 <sys_mbox_valid+0x16>
  else
    return 1;
 801d2b6:	2301      	movs	r3, #1
}
 801d2b8:	4618      	mov	r0, r3
 801d2ba:	370c      	adds	r7, #12
 801d2bc:	46bd      	mov	sp, r7
 801d2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d2c2:	4770      	bx	lr

0801d2c4 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801d2c4:	b580      	push	{r7, lr}
 801d2c6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801d2c8:	2000      	movs	r0, #0
 801d2ca:	f7ef fad2 	bl	800c872 <osMutexNew>
 801d2ce:	4603      	mov	r3, r0
 801d2d0:	4a01      	ldr	r2, [pc, #4]	@ (801d2d8 <sys_init+0x14>)
 801d2d2:	6013      	str	r3, [r2, #0]
#endif
}
 801d2d4:	bf00      	nop
 801d2d6:	bd80      	pop	{r7, pc}
 801d2d8:	2001b1b0 	.word	0x2001b1b0

0801d2dc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801d2dc:	b580      	push	{r7, lr}
 801d2de:	b082      	sub	sp, #8
 801d2e0:	af00      	add	r7, sp, #0
 801d2e2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 801d2e4:	2000      	movs	r0, #0
 801d2e6:	f7ef fac4 	bl	800c872 <osMutexNew>
 801d2ea:	4602      	mov	r2, r0
 801d2ec:	687b      	ldr	r3, [r7, #4]
 801d2ee:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 801d2f0:	687b      	ldr	r3, [r7, #4]
 801d2f2:	681b      	ldr	r3, [r3, #0]
 801d2f4:	2b00      	cmp	r3, #0
 801d2f6:	d102      	bne.n	801d2fe <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801d2f8:	f04f 33ff 	mov.w	r3, #4294967295
 801d2fc:	e000      	b.n	801d300 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801d2fe:	2300      	movs	r3, #0
}
 801d300:	4618      	mov	r0, r3
 801d302:	3708      	adds	r7, #8
 801d304:	46bd      	mov	sp, r7
 801d306:	bd80      	pop	{r7, pc}

0801d308 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801d308:	b580      	push	{r7, lr}
 801d30a:	b082      	sub	sp, #8
 801d30c:	af00      	add	r7, sp, #0
 801d30e:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801d310:	687b      	ldr	r3, [r7, #4]
 801d312:	681b      	ldr	r3, [r3, #0]
 801d314:	f04f 31ff 	mov.w	r1, #4294967295
 801d318:	4618      	mov	r0, r3
 801d31a:	f7ef fb30 	bl	800c97e <osMutexAcquire>
#endif
}
 801d31e:	bf00      	nop
 801d320:	3708      	adds	r7, #8
 801d322:	46bd      	mov	sp, r7
 801d324:	bd80      	pop	{r7, pc}

0801d326 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801d326:	b580      	push	{r7, lr}
 801d328:	b082      	sub	sp, #8
 801d32a:	af00      	add	r7, sp, #0
 801d32c:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801d32e:	687b      	ldr	r3, [r7, #4]
 801d330:	681b      	ldr	r3, [r3, #0]
 801d332:	4618      	mov	r0, r3
 801d334:	f7ef fb6e 	bl	800ca14 <osMutexRelease>
}
 801d338:	bf00      	nop
 801d33a:	3708      	adds	r7, #8
 801d33c:	46bd      	mov	sp, r7
 801d33e:	bd80      	pop	{r7, pc}

0801d340 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801d340:	b580      	push	{r7, lr}
 801d342:	b08e      	sub	sp, #56	@ 0x38
 801d344:	af00      	add	r7, sp, #0
 801d346:	60f8      	str	r0, [r7, #12]
 801d348:	60b9      	str	r1, [r7, #8]
 801d34a:	607a      	str	r2, [r7, #4]
 801d34c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801d34e:	f107 0314 	add.w	r3, r7, #20
 801d352:	2224      	movs	r2, #36	@ 0x24
 801d354:	2100      	movs	r1, #0
 801d356:	4618      	mov	r0, r3
 801d358:	f001 fb06 	bl	801e968 <memset>
 801d35c:	68fb      	ldr	r3, [r7, #12]
 801d35e:	617b      	str	r3, [r7, #20]
 801d360:	683b      	ldr	r3, [r7, #0]
 801d362:	62bb      	str	r3, [r7, #40]	@ 0x28
 801d364:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801d366:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801d368:	f107 0314 	add.w	r3, r7, #20
 801d36c:	461a      	mov	r2, r3
 801d36e:	6879      	ldr	r1, [r7, #4]
 801d370:	68b8      	ldr	r0, [r7, #8]
 801d372:	f7ef f9d0 	bl	800c716 <osThreadNew>
 801d376:	4603      	mov	r3, r0
#endif
}
 801d378:	4618      	mov	r0, r3
 801d37a:	3738      	adds	r7, #56	@ 0x38
 801d37c:	46bd      	mov	sp, r7
 801d37e:	bd80      	pop	{r7, pc}

0801d380 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801d380:	b580      	push	{r7, lr}
 801d382:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 801d384:	4b04      	ldr	r3, [pc, #16]	@ (801d398 <sys_arch_protect+0x18>)
 801d386:	681b      	ldr	r3, [r3, #0]
 801d388:	f04f 31ff 	mov.w	r1, #4294967295
 801d38c:	4618      	mov	r0, r3
 801d38e:	f7ef faf6 	bl	800c97e <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801d392:	2301      	movs	r3, #1
}
 801d394:	4618      	mov	r0, r3
 801d396:	bd80      	pop	{r7, pc}
 801d398:	2001b1b0 	.word	0x2001b1b0

0801d39c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801d39c:	b580      	push	{r7, lr}
 801d39e:	b082      	sub	sp, #8
 801d3a0:	af00      	add	r7, sp, #0
 801d3a2:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801d3a4:	4b04      	ldr	r3, [pc, #16]	@ (801d3b8 <sys_arch_unprotect+0x1c>)
 801d3a6:	681b      	ldr	r3, [r3, #0]
 801d3a8:	4618      	mov	r0, r3
 801d3aa:	f7ef fb33 	bl	800ca14 <osMutexRelease>
}
 801d3ae:	bf00      	nop
 801d3b0:	3708      	adds	r7, #8
 801d3b2:	46bd      	mov	sp, r7
 801d3b4:	bd80      	pop	{r7, pc}
 801d3b6:	bf00      	nop
 801d3b8:	2001b1b0 	.word	0x2001b1b0

0801d3bc <abort>:
 801d3bc:	b508      	push	{r3, lr}
 801d3be:	2006      	movs	r0, #6
 801d3c0:	f001 fb34 	bl	801ea2c <raise>
 801d3c4:	2001      	movs	r0, #1
 801d3c6:	f7e4 fe99 	bl	80020fc <_exit>

0801d3ca <atoi>:
 801d3ca:	220a      	movs	r2, #10
 801d3cc:	2100      	movs	r1, #0
 801d3ce:	f000 b99f 	b.w	801d710 <strtol>
	...

0801d3d4 <malloc>:
 801d3d4:	4b02      	ldr	r3, [pc, #8]	@ (801d3e0 <malloc+0xc>)
 801d3d6:	4601      	mov	r1, r0
 801d3d8:	6818      	ldr	r0, [r3, #0]
 801d3da:	f000 b825 	b.w	801d428 <_malloc_r>
 801d3de:	bf00      	nop
 801d3e0:	2000005c 	.word	0x2000005c

0801d3e4 <sbrk_aligned>:
 801d3e4:	b570      	push	{r4, r5, r6, lr}
 801d3e6:	4e0f      	ldr	r6, [pc, #60]	@ (801d424 <sbrk_aligned+0x40>)
 801d3e8:	460c      	mov	r4, r1
 801d3ea:	6831      	ldr	r1, [r6, #0]
 801d3ec:	4605      	mov	r5, r0
 801d3ee:	b911      	cbnz	r1, 801d3f6 <sbrk_aligned+0x12>
 801d3f0:	f001 fbc6 	bl	801eb80 <_sbrk_r>
 801d3f4:	6030      	str	r0, [r6, #0]
 801d3f6:	4621      	mov	r1, r4
 801d3f8:	4628      	mov	r0, r5
 801d3fa:	f001 fbc1 	bl	801eb80 <_sbrk_r>
 801d3fe:	1c43      	adds	r3, r0, #1
 801d400:	d103      	bne.n	801d40a <sbrk_aligned+0x26>
 801d402:	f04f 34ff 	mov.w	r4, #4294967295
 801d406:	4620      	mov	r0, r4
 801d408:	bd70      	pop	{r4, r5, r6, pc}
 801d40a:	1cc4      	adds	r4, r0, #3
 801d40c:	f024 0403 	bic.w	r4, r4, #3
 801d410:	42a0      	cmp	r0, r4
 801d412:	d0f8      	beq.n	801d406 <sbrk_aligned+0x22>
 801d414:	1a21      	subs	r1, r4, r0
 801d416:	4628      	mov	r0, r5
 801d418:	f001 fbb2 	bl	801eb80 <_sbrk_r>
 801d41c:	3001      	adds	r0, #1
 801d41e:	d1f2      	bne.n	801d406 <sbrk_aligned+0x22>
 801d420:	e7ef      	b.n	801d402 <sbrk_aligned+0x1e>
 801d422:	bf00      	nop
 801d424:	2001b1b4 	.word	0x2001b1b4

0801d428 <_malloc_r>:
 801d428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d42c:	1ccd      	adds	r5, r1, #3
 801d42e:	f025 0503 	bic.w	r5, r5, #3
 801d432:	3508      	adds	r5, #8
 801d434:	2d0c      	cmp	r5, #12
 801d436:	bf38      	it	cc
 801d438:	250c      	movcc	r5, #12
 801d43a:	2d00      	cmp	r5, #0
 801d43c:	4606      	mov	r6, r0
 801d43e:	db01      	blt.n	801d444 <_malloc_r+0x1c>
 801d440:	42a9      	cmp	r1, r5
 801d442:	d904      	bls.n	801d44e <_malloc_r+0x26>
 801d444:	230c      	movs	r3, #12
 801d446:	6033      	str	r3, [r6, #0]
 801d448:	2000      	movs	r0, #0
 801d44a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d44e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801d524 <_malloc_r+0xfc>
 801d452:	f000 f869 	bl	801d528 <__malloc_lock>
 801d456:	f8d8 3000 	ldr.w	r3, [r8]
 801d45a:	461c      	mov	r4, r3
 801d45c:	bb44      	cbnz	r4, 801d4b0 <_malloc_r+0x88>
 801d45e:	4629      	mov	r1, r5
 801d460:	4630      	mov	r0, r6
 801d462:	f7ff ffbf 	bl	801d3e4 <sbrk_aligned>
 801d466:	1c43      	adds	r3, r0, #1
 801d468:	4604      	mov	r4, r0
 801d46a:	d158      	bne.n	801d51e <_malloc_r+0xf6>
 801d46c:	f8d8 4000 	ldr.w	r4, [r8]
 801d470:	4627      	mov	r7, r4
 801d472:	2f00      	cmp	r7, #0
 801d474:	d143      	bne.n	801d4fe <_malloc_r+0xd6>
 801d476:	2c00      	cmp	r4, #0
 801d478:	d04b      	beq.n	801d512 <_malloc_r+0xea>
 801d47a:	6823      	ldr	r3, [r4, #0]
 801d47c:	4639      	mov	r1, r7
 801d47e:	4630      	mov	r0, r6
 801d480:	eb04 0903 	add.w	r9, r4, r3
 801d484:	f001 fb7c 	bl	801eb80 <_sbrk_r>
 801d488:	4581      	cmp	r9, r0
 801d48a:	d142      	bne.n	801d512 <_malloc_r+0xea>
 801d48c:	6821      	ldr	r1, [r4, #0]
 801d48e:	1a6d      	subs	r5, r5, r1
 801d490:	4629      	mov	r1, r5
 801d492:	4630      	mov	r0, r6
 801d494:	f7ff ffa6 	bl	801d3e4 <sbrk_aligned>
 801d498:	3001      	adds	r0, #1
 801d49a:	d03a      	beq.n	801d512 <_malloc_r+0xea>
 801d49c:	6823      	ldr	r3, [r4, #0]
 801d49e:	442b      	add	r3, r5
 801d4a0:	6023      	str	r3, [r4, #0]
 801d4a2:	f8d8 3000 	ldr.w	r3, [r8]
 801d4a6:	685a      	ldr	r2, [r3, #4]
 801d4a8:	bb62      	cbnz	r2, 801d504 <_malloc_r+0xdc>
 801d4aa:	f8c8 7000 	str.w	r7, [r8]
 801d4ae:	e00f      	b.n	801d4d0 <_malloc_r+0xa8>
 801d4b0:	6822      	ldr	r2, [r4, #0]
 801d4b2:	1b52      	subs	r2, r2, r5
 801d4b4:	d420      	bmi.n	801d4f8 <_malloc_r+0xd0>
 801d4b6:	2a0b      	cmp	r2, #11
 801d4b8:	d917      	bls.n	801d4ea <_malloc_r+0xc2>
 801d4ba:	1961      	adds	r1, r4, r5
 801d4bc:	42a3      	cmp	r3, r4
 801d4be:	6025      	str	r5, [r4, #0]
 801d4c0:	bf18      	it	ne
 801d4c2:	6059      	strne	r1, [r3, #4]
 801d4c4:	6863      	ldr	r3, [r4, #4]
 801d4c6:	bf08      	it	eq
 801d4c8:	f8c8 1000 	streq.w	r1, [r8]
 801d4cc:	5162      	str	r2, [r4, r5]
 801d4ce:	604b      	str	r3, [r1, #4]
 801d4d0:	4630      	mov	r0, r6
 801d4d2:	f000 f82f 	bl	801d534 <__malloc_unlock>
 801d4d6:	f104 000b 	add.w	r0, r4, #11
 801d4da:	1d23      	adds	r3, r4, #4
 801d4dc:	f020 0007 	bic.w	r0, r0, #7
 801d4e0:	1ac2      	subs	r2, r0, r3
 801d4e2:	bf1c      	itt	ne
 801d4e4:	1a1b      	subne	r3, r3, r0
 801d4e6:	50a3      	strne	r3, [r4, r2]
 801d4e8:	e7af      	b.n	801d44a <_malloc_r+0x22>
 801d4ea:	6862      	ldr	r2, [r4, #4]
 801d4ec:	42a3      	cmp	r3, r4
 801d4ee:	bf0c      	ite	eq
 801d4f0:	f8c8 2000 	streq.w	r2, [r8]
 801d4f4:	605a      	strne	r2, [r3, #4]
 801d4f6:	e7eb      	b.n	801d4d0 <_malloc_r+0xa8>
 801d4f8:	4623      	mov	r3, r4
 801d4fa:	6864      	ldr	r4, [r4, #4]
 801d4fc:	e7ae      	b.n	801d45c <_malloc_r+0x34>
 801d4fe:	463c      	mov	r4, r7
 801d500:	687f      	ldr	r7, [r7, #4]
 801d502:	e7b6      	b.n	801d472 <_malloc_r+0x4a>
 801d504:	461a      	mov	r2, r3
 801d506:	685b      	ldr	r3, [r3, #4]
 801d508:	42a3      	cmp	r3, r4
 801d50a:	d1fb      	bne.n	801d504 <_malloc_r+0xdc>
 801d50c:	2300      	movs	r3, #0
 801d50e:	6053      	str	r3, [r2, #4]
 801d510:	e7de      	b.n	801d4d0 <_malloc_r+0xa8>
 801d512:	230c      	movs	r3, #12
 801d514:	6033      	str	r3, [r6, #0]
 801d516:	4630      	mov	r0, r6
 801d518:	f000 f80c 	bl	801d534 <__malloc_unlock>
 801d51c:	e794      	b.n	801d448 <_malloc_r+0x20>
 801d51e:	6005      	str	r5, [r0, #0]
 801d520:	e7d6      	b.n	801d4d0 <_malloc_r+0xa8>
 801d522:	bf00      	nop
 801d524:	2001b1b8 	.word	0x2001b1b8

0801d528 <__malloc_lock>:
 801d528:	4801      	ldr	r0, [pc, #4]	@ (801d530 <__malloc_lock+0x8>)
 801d52a:	f001 bb76 	b.w	801ec1a <__retarget_lock_acquire_recursive>
 801d52e:	bf00      	nop
 801d530:	2001b2fc 	.word	0x2001b2fc

0801d534 <__malloc_unlock>:
 801d534:	4801      	ldr	r0, [pc, #4]	@ (801d53c <__malloc_unlock+0x8>)
 801d536:	f001 bb71 	b.w	801ec1c <__retarget_lock_release_recursive>
 801d53a:	bf00      	nop
 801d53c:	2001b2fc 	.word	0x2001b2fc

0801d540 <rand>:
 801d540:	4b16      	ldr	r3, [pc, #88]	@ (801d59c <rand+0x5c>)
 801d542:	b510      	push	{r4, lr}
 801d544:	681c      	ldr	r4, [r3, #0]
 801d546:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801d548:	b9b3      	cbnz	r3, 801d578 <rand+0x38>
 801d54a:	2018      	movs	r0, #24
 801d54c:	f7ff ff42 	bl	801d3d4 <malloc>
 801d550:	4602      	mov	r2, r0
 801d552:	6320      	str	r0, [r4, #48]	@ 0x30
 801d554:	b920      	cbnz	r0, 801d560 <rand+0x20>
 801d556:	4b12      	ldr	r3, [pc, #72]	@ (801d5a0 <rand+0x60>)
 801d558:	4812      	ldr	r0, [pc, #72]	@ (801d5a4 <rand+0x64>)
 801d55a:	2152      	movs	r1, #82	@ 0x52
 801d55c:	f001 fb74 	bl	801ec48 <__assert_func>
 801d560:	4911      	ldr	r1, [pc, #68]	@ (801d5a8 <rand+0x68>)
 801d562:	4b12      	ldr	r3, [pc, #72]	@ (801d5ac <rand+0x6c>)
 801d564:	e9c0 1300 	strd	r1, r3, [r0]
 801d568:	4b11      	ldr	r3, [pc, #68]	@ (801d5b0 <rand+0x70>)
 801d56a:	6083      	str	r3, [r0, #8]
 801d56c:	230b      	movs	r3, #11
 801d56e:	8183      	strh	r3, [r0, #12]
 801d570:	2100      	movs	r1, #0
 801d572:	2001      	movs	r0, #1
 801d574:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d578:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801d57a:	480e      	ldr	r0, [pc, #56]	@ (801d5b4 <rand+0x74>)
 801d57c:	690b      	ldr	r3, [r1, #16]
 801d57e:	694c      	ldr	r4, [r1, #20]
 801d580:	4a0d      	ldr	r2, [pc, #52]	@ (801d5b8 <rand+0x78>)
 801d582:	4358      	muls	r0, r3
 801d584:	fb02 0004 	mla	r0, r2, r4, r0
 801d588:	fba3 3202 	umull	r3, r2, r3, r2
 801d58c:	3301      	adds	r3, #1
 801d58e:	eb40 0002 	adc.w	r0, r0, r2
 801d592:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d596:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801d59a:	bd10      	pop	{r4, pc}
 801d59c:	2000005c 	.word	0x2000005c
 801d5a0:	080252fe 	.word	0x080252fe
 801d5a4:	08025315 	.word	0x08025315
 801d5a8:	abcd330e 	.word	0xabcd330e
 801d5ac:	e66d1234 	.word	0xe66d1234
 801d5b0:	0005deec 	.word	0x0005deec
 801d5b4:	5851f42d 	.word	0x5851f42d
 801d5b8:	4c957f2d 	.word	0x4c957f2d

0801d5bc <_realloc_r>:
 801d5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5c0:	4680      	mov	r8, r0
 801d5c2:	4615      	mov	r5, r2
 801d5c4:	460c      	mov	r4, r1
 801d5c6:	b921      	cbnz	r1, 801d5d2 <_realloc_r+0x16>
 801d5c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d5cc:	4611      	mov	r1, r2
 801d5ce:	f7ff bf2b 	b.w	801d428 <_malloc_r>
 801d5d2:	b92a      	cbnz	r2, 801d5e0 <_realloc_r+0x24>
 801d5d4:	f002 f9a4 	bl	801f920 <_free_r>
 801d5d8:	2400      	movs	r4, #0
 801d5da:	4620      	mov	r0, r4
 801d5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d5e0:	f002 fe9a 	bl	8020318 <_malloc_usable_size_r>
 801d5e4:	4285      	cmp	r5, r0
 801d5e6:	4606      	mov	r6, r0
 801d5e8:	d802      	bhi.n	801d5f0 <_realloc_r+0x34>
 801d5ea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801d5ee:	d8f4      	bhi.n	801d5da <_realloc_r+0x1e>
 801d5f0:	4629      	mov	r1, r5
 801d5f2:	4640      	mov	r0, r8
 801d5f4:	f7ff ff18 	bl	801d428 <_malloc_r>
 801d5f8:	4607      	mov	r7, r0
 801d5fa:	2800      	cmp	r0, #0
 801d5fc:	d0ec      	beq.n	801d5d8 <_realloc_r+0x1c>
 801d5fe:	42b5      	cmp	r5, r6
 801d600:	462a      	mov	r2, r5
 801d602:	4621      	mov	r1, r4
 801d604:	bf28      	it	cs
 801d606:	4632      	movcs	r2, r6
 801d608:	f001 fb09 	bl	801ec1e <memcpy>
 801d60c:	4621      	mov	r1, r4
 801d60e:	4640      	mov	r0, r8
 801d610:	f002 f986 	bl	801f920 <_free_r>
 801d614:	463c      	mov	r4, r7
 801d616:	e7e0      	b.n	801d5da <_realloc_r+0x1e>

0801d618 <_strtol_l.constprop.0>:
 801d618:	2b24      	cmp	r3, #36	@ 0x24
 801d61a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d61e:	4686      	mov	lr, r0
 801d620:	4690      	mov	r8, r2
 801d622:	d801      	bhi.n	801d628 <_strtol_l.constprop.0+0x10>
 801d624:	2b01      	cmp	r3, #1
 801d626:	d106      	bne.n	801d636 <_strtol_l.constprop.0+0x1e>
 801d628:	f001 facc 	bl	801ebc4 <__errno>
 801d62c:	2316      	movs	r3, #22
 801d62e:	6003      	str	r3, [r0, #0]
 801d630:	2000      	movs	r0, #0
 801d632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d636:	4834      	ldr	r0, [pc, #208]	@ (801d708 <_strtol_l.constprop.0+0xf0>)
 801d638:	460d      	mov	r5, r1
 801d63a:	462a      	mov	r2, r5
 801d63c:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d640:	5d06      	ldrb	r6, [r0, r4]
 801d642:	f016 0608 	ands.w	r6, r6, #8
 801d646:	d1f8      	bne.n	801d63a <_strtol_l.constprop.0+0x22>
 801d648:	2c2d      	cmp	r4, #45	@ 0x2d
 801d64a:	d12d      	bne.n	801d6a8 <_strtol_l.constprop.0+0x90>
 801d64c:	782c      	ldrb	r4, [r5, #0]
 801d64e:	2601      	movs	r6, #1
 801d650:	1c95      	adds	r5, r2, #2
 801d652:	f033 0210 	bics.w	r2, r3, #16
 801d656:	d109      	bne.n	801d66c <_strtol_l.constprop.0+0x54>
 801d658:	2c30      	cmp	r4, #48	@ 0x30
 801d65a:	d12a      	bne.n	801d6b2 <_strtol_l.constprop.0+0x9a>
 801d65c:	782a      	ldrb	r2, [r5, #0]
 801d65e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801d662:	2a58      	cmp	r2, #88	@ 0x58
 801d664:	d125      	bne.n	801d6b2 <_strtol_l.constprop.0+0x9a>
 801d666:	786c      	ldrb	r4, [r5, #1]
 801d668:	2310      	movs	r3, #16
 801d66a:	3502      	adds	r5, #2
 801d66c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801d670:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d674:	2200      	movs	r2, #0
 801d676:	fbbc f9f3 	udiv	r9, ip, r3
 801d67a:	4610      	mov	r0, r2
 801d67c:	fb03 ca19 	mls	sl, r3, r9, ip
 801d680:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801d684:	2f09      	cmp	r7, #9
 801d686:	d81b      	bhi.n	801d6c0 <_strtol_l.constprop.0+0xa8>
 801d688:	463c      	mov	r4, r7
 801d68a:	42a3      	cmp	r3, r4
 801d68c:	dd27      	ble.n	801d6de <_strtol_l.constprop.0+0xc6>
 801d68e:	1c57      	adds	r7, r2, #1
 801d690:	d007      	beq.n	801d6a2 <_strtol_l.constprop.0+0x8a>
 801d692:	4581      	cmp	r9, r0
 801d694:	d320      	bcc.n	801d6d8 <_strtol_l.constprop.0+0xc0>
 801d696:	d101      	bne.n	801d69c <_strtol_l.constprop.0+0x84>
 801d698:	45a2      	cmp	sl, r4
 801d69a:	db1d      	blt.n	801d6d8 <_strtol_l.constprop.0+0xc0>
 801d69c:	fb00 4003 	mla	r0, r0, r3, r4
 801d6a0:	2201      	movs	r2, #1
 801d6a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 801d6a6:	e7eb      	b.n	801d680 <_strtol_l.constprop.0+0x68>
 801d6a8:	2c2b      	cmp	r4, #43	@ 0x2b
 801d6aa:	bf04      	itt	eq
 801d6ac:	782c      	ldrbeq	r4, [r5, #0]
 801d6ae:	1c95      	addeq	r5, r2, #2
 801d6b0:	e7cf      	b.n	801d652 <_strtol_l.constprop.0+0x3a>
 801d6b2:	2b00      	cmp	r3, #0
 801d6b4:	d1da      	bne.n	801d66c <_strtol_l.constprop.0+0x54>
 801d6b6:	2c30      	cmp	r4, #48	@ 0x30
 801d6b8:	bf0c      	ite	eq
 801d6ba:	2308      	moveq	r3, #8
 801d6bc:	230a      	movne	r3, #10
 801d6be:	e7d5      	b.n	801d66c <_strtol_l.constprop.0+0x54>
 801d6c0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801d6c4:	2f19      	cmp	r7, #25
 801d6c6:	d801      	bhi.n	801d6cc <_strtol_l.constprop.0+0xb4>
 801d6c8:	3c37      	subs	r4, #55	@ 0x37
 801d6ca:	e7de      	b.n	801d68a <_strtol_l.constprop.0+0x72>
 801d6cc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801d6d0:	2f19      	cmp	r7, #25
 801d6d2:	d804      	bhi.n	801d6de <_strtol_l.constprop.0+0xc6>
 801d6d4:	3c57      	subs	r4, #87	@ 0x57
 801d6d6:	e7d8      	b.n	801d68a <_strtol_l.constprop.0+0x72>
 801d6d8:	f04f 32ff 	mov.w	r2, #4294967295
 801d6dc:	e7e1      	b.n	801d6a2 <_strtol_l.constprop.0+0x8a>
 801d6de:	1c53      	adds	r3, r2, #1
 801d6e0:	d108      	bne.n	801d6f4 <_strtol_l.constprop.0+0xdc>
 801d6e2:	2322      	movs	r3, #34	@ 0x22
 801d6e4:	f8ce 3000 	str.w	r3, [lr]
 801d6e8:	4660      	mov	r0, ip
 801d6ea:	f1b8 0f00 	cmp.w	r8, #0
 801d6ee:	d0a0      	beq.n	801d632 <_strtol_l.constprop.0+0x1a>
 801d6f0:	1e69      	subs	r1, r5, #1
 801d6f2:	e006      	b.n	801d702 <_strtol_l.constprop.0+0xea>
 801d6f4:	b106      	cbz	r6, 801d6f8 <_strtol_l.constprop.0+0xe0>
 801d6f6:	4240      	negs	r0, r0
 801d6f8:	f1b8 0f00 	cmp.w	r8, #0
 801d6fc:	d099      	beq.n	801d632 <_strtol_l.constprop.0+0x1a>
 801d6fe:	2a00      	cmp	r2, #0
 801d700:	d1f6      	bne.n	801d6f0 <_strtol_l.constprop.0+0xd8>
 801d702:	f8c8 1000 	str.w	r1, [r8]
 801d706:	e794      	b.n	801d632 <_strtol_l.constprop.0+0x1a>
 801d708:	0802536e 	.word	0x0802536e

0801d70c <_strtol_r>:
 801d70c:	f7ff bf84 	b.w	801d618 <_strtol_l.constprop.0>

0801d710 <strtol>:
 801d710:	4613      	mov	r3, r2
 801d712:	460a      	mov	r2, r1
 801d714:	4601      	mov	r1, r0
 801d716:	4802      	ldr	r0, [pc, #8]	@ (801d720 <strtol+0x10>)
 801d718:	6800      	ldr	r0, [r0, #0]
 801d71a:	f7ff bf7d 	b.w	801d618 <_strtol_l.constprop.0>
 801d71e:	bf00      	nop
 801d720:	2000005c 	.word	0x2000005c

0801d724 <__cvt>:
 801d724:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d728:	ec57 6b10 	vmov	r6, r7, d0
 801d72c:	2f00      	cmp	r7, #0
 801d72e:	460c      	mov	r4, r1
 801d730:	4619      	mov	r1, r3
 801d732:	463b      	mov	r3, r7
 801d734:	bfbb      	ittet	lt
 801d736:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 801d73a:	461f      	movlt	r7, r3
 801d73c:	2300      	movge	r3, #0
 801d73e:	232d      	movlt	r3, #45	@ 0x2d
 801d740:	700b      	strb	r3, [r1, #0]
 801d742:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d744:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 801d748:	4691      	mov	r9, r2
 801d74a:	f023 0820 	bic.w	r8, r3, #32
 801d74e:	bfbc      	itt	lt
 801d750:	4632      	movlt	r2, r6
 801d752:	4616      	movlt	r6, r2
 801d754:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d758:	d005      	beq.n	801d766 <__cvt+0x42>
 801d75a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 801d75e:	d100      	bne.n	801d762 <__cvt+0x3e>
 801d760:	3401      	adds	r4, #1
 801d762:	2102      	movs	r1, #2
 801d764:	e000      	b.n	801d768 <__cvt+0x44>
 801d766:	2103      	movs	r1, #3
 801d768:	ab03      	add	r3, sp, #12
 801d76a:	9301      	str	r3, [sp, #4]
 801d76c:	ab02      	add	r3, sp, #8
 801d76e:	9300      	str	r3, [sp, #0]
 801d770:	ec47 6b10 	vmov	d0, r6, r7
 801d774:	4653      	mov	r3, sl
 801d776:	4622      	mov	r2, r4
 801d778:	f001 fb0e 	bl	801ed98 <_dtoa_r>
 801d77c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 801d780:	4605      	mov	r5, r0
 801d782:	d119      	bne.n	801d7b8 <__cvt+0x94>
 801d784:	f019 0f01 	tst.w	r9, #1
 801d788:	d00e      	beq.n	801d7a8 <__cvt+0x84>
 801d78a:	eb00 0904 	add.w	r9, r0, r4
 801d78e:	2200      	movs	r2, #0
 801d790:	2300      	movs	r3, #0
 801d792:	4630      	mov	r0, r6
 801d794:	4639      	mov	r1, r7
 801d796:	f7e3 f997 	bl	8000ac8 <__aeabi_dcmpeq>
 801d79a:	b108      	cbz	r0, 801d7a0 <__cvt+0x7c>
 801d79c:	f8cd 900c 	str.w	r9, [sp, #12]
 801d7a0:	2230      	movs	r2, #48	@ 0x30
 801d7a2:	9b03      	ldr	r3, [sp, #12]
 801d7a4:	454b      	cmp	r3, r9
 801d7a6:	d31e      	bcc.n	801d7e6 <__cvt+0xc2>
 801d7a8:	9b03      	ldr	r3, [sp, #12]
 801d7aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d7ac:	1b5b      	subs	r3, r3, r5
 801d7ae:	4628      	mov	r0, r5
 801d7b0:	6013      	str	r3, [r2, #0]
 801d7b2:	b004      	add	sp, #16
 801d7b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d7b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 801d7bc:	eb00 0904 	add.w	r9, r0, r4
 801d7c0:	d1e5      	bne.n	801d78e <__cvt+0x6a>
 801d7c2:	7803      	ldrb	r3, [r0, #0]
 801d7c4:	2b30      	cmp	r3, #48	@ 0x30
 801d7c6:	d10a      	bne.n	801d7de <__cvt+0xba>
 801d7c8:	2200      	movs	r2, #0
 801d7ca:	2300      	movs	r3, #0
 801d7cc:	4630      	mov	r0, r6
 801d7ce:	4639      	mov	r1, r7
 801d7d0:	f7e3 f97a 	bl	8000ac8 <__aeabi_dcmpeq>
 801d7d4:	b918      	cbnz	r0, 801d7de <__cvt+0xba>
 801d7d6:	f1c4 0401 	rsb	r4, r4, #1
 801d7da:	f8ca 4000 	str.w	r4, [sl]
 801d7de:	f8da 3000 	ldr.w	r3, [sl]
 801d7e2:	4499      	add	r9, r3
 801d7e4:	e7d3      	b.n	801d78e <__cvt+0x6a>
 801d7e6:	1c59      	adds	r1, r3, #1
 801d7e8:	9103      	str	r1, [sp, #12]
 801d7ea:	701a      	strb	r2, [r3, #0]
 801d7ec:	e7d9      	b.n	801d7a2 <__cvt+0x7e>

0801d7ee <__exponent>:
 801d7ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d7f0:	2900      	cmp	r1, #0
 801d7f2:	bfba      	itte	lt
 801d7f4:	4249      	neglt	r1, r1
 801d7f6:	232d      	movlt	r3, #45	@ 0x2d
 801d7f8:	232b      	movge	r3, #43	@ 0x2b
 801d7fa:	2909      	cmp	r1, #9
 801d7fc:	7002      	strb	r2, [r0, #0]
 801d7fe:	7043      	strb	r3, [r0, #1]
 801d800:	dd29      	ble.n	801d856 <__exponent+0x68>
 801d802:	f10d 0307 	add.w	r3, sp, #7
 801d806:	461d      	mov	r5, r3
 801d808:	270a      	movs	r7, #10
 801d80a:	461a      	mov	r2, r3
 801d80c:	fbb1 f6f7 	udiv	r6, r1, r7
 801d810:	fb07 1416 	mls	r4, r7, r6, r1
 801d814:	3430      	adds	r4, #48	@ 0x30
 801d816:	f802 4c01 	strb.w	r4, [r2, #-1]
 801d81a:	460c      	mov	r4, r1
 801d81c:	2c63      	cmp	r4, #99	@ 0x63
 801d81e:	f103 33ff 	add.w	r3, r3, #4294967295
 801d822:	4631      	mov	r1, r6
 801d824:	dcf1      	bgt.n	801d80a <__exponent+0x1c>
 801d826:	3130      	adds	r1, #48	@ 0x30
 801d828:	1e94      	subs	r4, r2, #2
 801d82a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801d82e:	1c41      	adds	r1, r0, #1
 801d830:	4623      	mov	r3, r4
 801d832:	42ab      	cmp	r3, r5
 801d834:	d30a      	bcc.n	801d84c <__exponent+0x5e>
 801d836:	f10d 0309 	add.w	r3, sp, #9
 801d83a:	1a9b      	subs	r3, r3, r2
 801d83c:	42ac      	cmp	r4, r5
 801d83e:	bf88      	it	hi
 801d840:	2300      	movhi	r3, #0
 801d842:	3302      	adds	r3, #2
 801d844:	4403      	add	r3, r0
 801d846:	1a18      	subs	r0, r3, r0
 801d848:	b003      	add	sp, #12
 801d84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d84c:	f813 6b01 	ldrb.w	r6, [r3], #1
 801d850:	f801 6f01 	strb.w	r6, [r1, #1]!
 801d854:	e7ed      	b.n	801d832 <__exponent+0x44>
 801d856:	2330      	movs	r3, #48	@ 0x30
 801d858:	3130      	adds	r1, #48	@ 0x30
 801d85a:	7083      	strb	r3, [r0, #2]
 801d85c:	70c1      	strb	r1, [r0, #3]
 801d85e:	1d03      	adds	r3, r0, #4
 801d860:	e7f1      	b.n	801d846 <__exponent+0x58>
	...

0801d864 <_printf_float>:
 801d864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d868:	b08d      	sub	sp, #52	@ 0x34
 801d86a:	460c      	mov	r4, r1
 801d86c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801d870:	4616      	mov	r6, r2
 801d872:	461f      	mov	r7, r3
 801d874:	4605      	mov	r5, r0
 801d876:	f001 f8e1 	bl	801ea3c <_localeconv_r>
 801d87a:	6803      	ldr	r3, [r0, #0]
 801d87c:	9304      	str	r3, [sp, #16]
 801d87e:	4618      	mov	r0, r3
 801d880:	f7e2 fcf6 	bl	8000270 <strlen>
 801d884:	2300      	movs	r3, #0
 801d886:	930a      	str	r3, [sp, #40]	@ 0x28
 801d888:	f8d8 3000 	ldr.w	r3, [r8]
 801d88c:	9005      	str	r0, [sp, #20]
 801d88e:	3307      	adds	r3, #7
 801d890:	f023 0307 	bic.w	r3, r3, #7
 801d894:	f103 0208 	add.w	r2, r3, #8
 801d898:	f894 a018 	ldrb.w	sl, [r4, #24]
 801d89c:	f8d4 b000 	ldr.w	fp, [r4]
 801d8a0:	f8c8 2000 	str.w	r2, [r8]
 801d8a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 801d8a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 801d8ac:	9307      	str	r3, [sp, #28]
 801d8ae:	f8cd 8018 	str.w	r8, [sp, #24]
 801d8b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 801d8b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d8ba:	4b9c      	ldr	r3, [pc, #624]	@ (801db2c <_printf_float+0x2c8>)
 801d8bc:	f04f 32ff 	mov.w	r2, #4294967295
 801d8c0:	f7e3 f934 	bl	8000b2c <__aeabi_dcmpun>
 801d8c4:	bb70      	cbnz	r0, 801d924 <_printf_float+0xc0>
 801d8c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801d8ca:	4b98      	ldr	r3, [pc, #608]	@ (801db2c <_printf_float+0x2c8>)
 801d8cc:	f04f 32ff 	mov.w	r2, #4294967295
 801d8d0:	f7e3 f90e 	bl	8000af0 <__aeabi_dcmple>
 801d8d4:	bb30      	cbnz	r0, 801d924 <_printf_float+0xc0>
 801d8d6:	2200      	movs	r2, #0
 801d8d8:	2300      	movs	r3, #0
 801d8da:	4640      	mov	r0, r8
 801d8dc:	4649      	mov	r1, r9
 801d8de:	f7e3 f8fd 	bl	8000adc <__aeabi_dcmplt>
 801d8e2:	b110      	cbz	r0, 801d8ea <_printf_float+0x86>
 801d8e4:	232d      	movs	r3, #45	@ 0x2d
 801d8e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d8ea:	4a91      	ldr	r2, [pc, #580]	@ (801db30 <_printf_float+0x2cc>)
 801d8ec:	4b91      	ldr	r3, [pc, #580]	@ (801db34 <_printf_float+0x2d0>)
 801d8ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 801d8f2:	bf94      	ite	ls
 801d8f4:	4690      	movls	r8, r2
 801d8f6:	4698      	movhi	r8, r3
 801d8f8:	2303      	movs	r3, #3
 801d8fa:	6123      	str	r3, [r4, #16]
 801d8fc:	f02b 0304 	bic.w	r3, fp, #4
 801d900:	6023      	str	r3, [r4, #0]
 801d902:	f04f 0900 	mov.w	r9, #0
 801d906:	9700      	str	r7, [sp, #0]
 801d908:	4633      	mov	r3, r6
 801d90a:	aa0b      	add	r2, sp, #44	@ 0x2c
 801d90c:	4621      	mov	r1, r4
 801d90e:	4628      	mov	r0, r5
 801d910:	f000 f9d2 	bl	801dcb8 <_printf_common>
 801d914:	3001      	adds	r0, #1
 801d916:	f040 808d 	bne.w	801da34 <_printf_float+0x1d0>
 801d91a:	f04f 30ff 	mov.w	r0, #4294967295
 801d91e:	b00d      	add	sp, #52	@ 0x34
 801d920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d924:	4642      	mov	r2, r8
 801d926:	464b      	mov	r3, r9
 801d928:	4640      	mov	r0, r8
 801d92a:	4649      	mov	r1, r9
 801d92c:	f7e3 f8fe 	bl	8000b2c <__aeabi_dcmpun>
 801d930:	b140      	cbz	r0, 801d944 <_printf_float+0xe0>
 801d932:	464b      	mov	r3, r9
 801d934:	2b00      	cmp	r3, #0
 801d936:	bfbc      	itt	lt
 801d938:	232d      	movlt	r3, #45	@ 0x2d
 801d93a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 801d93e:	4a7e      	ldr	r2, [pc, #504]	@ (801db38 <_printf_float+0x2d4>)
 801d940:	4b7e      	ldr	r3, [pc, #504]	@ (801db3c <_printf_float+0x2d8>)
 801d942:	e7d4      	b.n	801d8ee <_printf_float+0x8a>
 801d944:	6863      	ldr	r3, [r4, #4]
 801d946:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 801d94a:	9206      	str	r2, [sp, #24]
 801d94c:	1c5a      	adds	r2, r3, #1
 801d94e:	d13b      	bne.n	801d9c8 <_printf_float+0x164>
 801d950:	2306      	movs	r3, #6
 801d952:	6063      	str	r3, [r4, #4]
 801d954:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 801d958:	2300      	movs	r3, #0
 801d95a:	6022      	str	r2, [r4, #0]
 801d95c:	9303      	str	r3, [sp, #12]
 801d95e:	ab0a      	add	r3, sp, #40	@ 0x28
 801d960:	e9cd a301 	strd	sl, r3, [sp, #4]
 801d964:	ab09      	add	r3, sp, #36	@ 0x24
 801d966:	9300      	str	r3, [sp, #0]
 801d968:	6861      	ldr	r1, [r4, #4]
 801d96a:	ec49 8b10 	vmov	d0, r8, r9
 801d96e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 801d972:	4628      	mov	r0, r5
 801d974:	f7ff fed6 	bl	801d724 <__cvt>
 801d978:	9b06      	ldr	r3, [sp, #24]
 801d97a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d97c:	2b47      	cmp	r3, #71	@ 0x47
 801d97e:	4680      	mov	r8, r0
 801d980:	d129      	bne.n	801d9d6 <_printf_float+0x172>
 801d982:	1cc8      	adds	r0, r1, #3
 801d984:	db02      	blt.n	801d98c <_printf_float+0x128>
 801d986:	6863      	ldr	r3, [r4, #4]
 801d988:	4299      	cmp	r1, r3
 801d98a:	dd41      	ble.n	801da10 <_printf_float+0x1ac>
 801d98c:	f1aa 0a02 	sub.w	sl, sl, #2
 801d990:	fa5f fa8a 	uxtb.w	sl, sl
 801d994:	3901      	subs	r1, #1
 801d996:	4652      	mov	r2, sl
 801d998:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 801d99c:	9109      	str	r1, [sp, #36]	@ 0x24
 801d99e:	f7ff ff26 	bl	801d7ee <__exponent>
 801d9a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d9a4:	1813      	adds	r3, r2, r0
 801d9a6:	2a01      	cmp	r2, #1
 801d9a8:	4681      	mov	r9, r0
 801d9aa:	6123      	str	r3, [r4, #16]
 801d9ac:	dc02      	bgt.n	801d9b4 <_printf_float+0x150>
 801d9ae:	6822      	ldr	r2, [r4, #0]
 801d9b0:	07d2      	lsls	r2, r2, #31
 801d9b2:	d501      	bpl.n	801d9b8 <_printf_float+0x154>
 801d9b4:	3301      	adds	r3, #1
 801d9b6:	6123      	str	r3, [r4, #16]
 801d9b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 801d9bc:	2b00      	cmp	r3, #0
 801d9be:	d0a2      	beq.n	801d906 <_printf_float+0xa2>
 801d9c0:	232d      	movs	r3, #45	@ 0x2d
 801d9c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d9c6:	e79e      	b.n	801d906 <_printf_float+0xa2>
 801d9c8:	9a06      	ldr	r2, [sp, #24]
 801d9ca:	2a47      	cmp	r2, #71	@ 0x47
 801d9cc:	d1c2      	bne.n	801d954 <_printf_float+0xf0>
 801d9ce:	2b00      	cmp	r3, #0
 801d9d0:	d1c0      	bne.n	801d954 <_printf_float+0xf0>
 801d9d2:	2301      	movs	r3, #1
 801d9d4:	e7bd      	b.n	801d952 <_printf_float+0xee>
 801d9d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801d9da:	d9db      	bls.n	801d994 <_printf_float+0x130>
 801d9dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 801d9e0:	d118      	bne.n	801da14 <_printf_float+0x1b0>
 801d9e2:	2900      	cmp	r1, #0
 801d9e4:	6863      	ldr	r3, [r4, #4]
 801d9e6:	dd0b      	ble.n	801da00 <_printf_float+0x19c>
 801d9e8:	6121      	str	r1, [r4, #16]
 801d9ea:	b913      	cbnz	r3, 801d9f2 <_printf_float+0x18e>
 801d9ec:	6822      	ldr	r2, [r4, #0]
 801d9ee:	07d0      	lsls	r0, r2, #31
 801d9f0:	d502      	bpl.n	801d9f8 <_printf_float+0x194>
 801d9f2:	3301      	adds	r3, #1
 801d9f4:	440b      	add	r3, r1
 801d9f6:	6123      	str	r3, [r4, #16]
 801d9f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 801d9fa:	f04f 0900 	mov.w	r9, #0
 801d9fe:	e7db      	b.n	801d9b8 <_printf_float+0x154>
 801da00:	b913      	cbnz	r3, 801da08 <_printf_float+0x1a4>
 801da02:	6822      	ldr	r2, [r4, #0]
 801da04:	07d2      	lsls	r2, r2, #31
 801da06:	d501      	bpl.n	801da0c <_printf_float+0x1a8>
 801da08:	3302      	adds	r3, #2
 801da0a:	e7f4      	b.n	801d9f6 <_printf_float+0x192>
 801da0c:	2301      	movs	r3, #1
 801da0e:	e7f2      	b.n	801d9f6 <_printf_float+0x192>
 801da10:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 801da14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801da16:	4299      	cmp	r1, r3
 801da18:	db05      	blt.n	801da26 <_printf_float+0x1c2>
 801da1a:	6823      	ldr	r3, [r4, #0]
 801da1c:	6121      	str	r1, [r4, #16]
 801da1e:	07d8      	lsls	r0, r3, #31
 801da20:	d5ea      	bpl.n	801d9f8 <_printf_float+0x194>
 801da22:	1c4b      	adds	r3, r1, #1
 801da24:	e7e7      	b.n	801d9f6 <_printf_float+0x192>
 801da26:	2900      	cmp	r1, #0
 801da28:	bfd4      	ite	le
 801da2a:	f1c1 0202 	rsble	r2, r1, #2
 801da2e:	2201      	movgt	r2, #1
 801da30:	4413      	add	r3, r2
 801da32:	e7e0      	b.n	801d9f6 <_printf_float+0x192>
 801da34:	6823      	ldr	r3, [r4, #0]
 801da36:	055a      	lsls	r2, r3, #21
 801da38:	d407      	bmi.n	801da4a <_printf_float+0x1e6>
 801da3a:	6923      	ldr	r3, [r4, #16]
 801da3c:	4642      	mov	r2, r8
 801da3e:	4631      	mov	r1, r6
 801da40:	4628      	mov	r0, r5
 801da42:	47b8      	blx	r7
 801da44:	3001      	adds	r0, #1
 801da46:	d12b      	bne.n	801daa0 <_printf_float+0x23c>
 801da48:	e767      	b.n	801d91a <_printf_float+0xb6>
 801da4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 801da4e:	f240 80dd 	bls.w	801dc0c <_printf_float+0x3a8>
 801da52:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801da56:	2200      	movs	r2, #0
 801da58:	2300      	movs	r3, #0
 801da5a:	f7e3 f835 	bl	8000ac8 <__aeabi_dcmpeq>
 801da5e:	2800      	cmp	r0, #0
 801da60:	d033      	beq.n	801daca <_printf_float+0x266>
 801da62:	4a37      	ldr	r2, [pc, #220]	@ (801db40 <_printf_float+0x2dc>)
 801da64:	2301      	movs	r3, #1
 801da66:	4631      	mov	r1, r6
 801da68:	4628      	mov	r0, r5
 801da6a:	47b8      	blx	r7
 801da6c:	3001      	adds	r0, #1
 801da6e:	f43f af54 	beq.w	801d91a <_printf_float+0xb6>
 801da72:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 801da76:	4543      	cmp	r3, r8
 801da78:	db02      	blt.n	801da80 <_printf_float+0x21c>
 801da7a:	6823      	ldr	r3, [r4, #0]
 801da7c:	07d8      	lsls	r0, r3, #31
 801da7e:	d50f      	bpl.n	801daa0 <_printf_float+0x23c>
 801da80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801da84:	4631      	mov	r1, r6
 801da86:	4628      	mov	r0, r5
 801da88:	47b8      	blx	r7
 801da8a:	3001      	adds	r0, #1
 801da8c:	f43f af45 	beq.w	801d91a <_printf_float+0xb6>
 801da90:	f04f 0900 	mov.w	r9, #0
 801da94:	f108 38ff 	add.w	r8, r8, #4294967295
 801da98:	f104 0a1a 	add.w	sl, r4, #26
 801da9c:	45c8      	cmp	r8, r9
 801da9e:	dc09      	bgt.n	801dab4 <_printf_float+0x250>
 801daa0:	6823      	ldr	r3, [r4, #0]
 801daa2:	079b      	lsls	r3, r3, #30
 801daa4:	f100 8103 	bmi.w	801dcae <_printf_float+0x44a>
 801daa8:	68e0      	ldr	r0, [r4, #12]
 801daaa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801daac:	4298      	cmp	r0, r3
 801daae:	bfb8      	it	lt
 801dab0:	4618      	movlt	r0, r3
 801dab2:	e734      	b.n	801d91e <_printf_float+0xba>
 801dab4:	2301      	movs	r3, #1
 801dab6:	4652      	mov	r2, sl
 801dab8:	4631      	mov	r1, r6
 801daba:	4628      	mov	r0, r5
 801dabc:	47b8      	blx	r7
 801dabe:	3001      	adds	r0, #1
 801dac0:	f43f af2b 	beq.w	801d91a <_printf_float+0xb6>
 801dac4:	f109 0901 	add.w	r9, r9, #1
 801dac8:	e7e8      	b.n	801da9c <_printf_float+0x238>
 801daca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dacc:	2b00      	cmp	r3, #0
 801dace:	dc39      	bgt.n	801db44 <_printf_float+0x2e0>
 801dad0:	4a1b      	ldr	r2, [pc, #108]	@ (801db40 <_printf_float+0x2dc>)
 801dad2:	2301      	movs	r3, #1
 801dad4:	4631      	mov	r1, r6
 801dad6:	4628      	mov	r0, r5
 801dad8:	47b8      	blx	r7
 801dada:	3001      	adds	r0, #1
 801dadc:	f43f af1d 	beq.w	801d91a <_printf_float+0xb6>
 801dae0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 801dae4:	ea59 0303 	orrs.w	r3, r9, r3
 801dae8:	d102      	bne.n	801daf0 <_printf_float+0x28c>
 801daea:	6823      	ldr	r3, [r4, #0]
 801daec:	07d9      	lsls	r1, r3, #31
 801daee:	d5d7      	bpl.n	801daa0 <_printf_float+0x23c>
 801daf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801daf4:	4631      	mov	r1, r6
 801daf6:	4628      	mov	r0, r5
 801daf8:	47b8      	blx	r7
 801dafa:	3001      	adds	r0, #1
 801dafc:	f43f af0d 	beq.w	801d91a <_printf_float+0xb6>
 801db00:	f04f 0a00 	mov.w	sl, #0
 801db04:	f104 0b1a 	add.w	fp, r4, #26
 801db08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db0a:	425b      	negs	r3, r3
 801db0c:	4553      	cmp	r3, sl
 801db0e:	dc01      	bgt.n	801db14 <_printf_float+0x2b0>
 801db10:	464b      	mov	r3, r9
 801db12:	e793      	b.n	801da3c <_printf_float+0x1d8>
 801db14:	2301      	movs	r3, #1
 801db16:	465a      	mov	r2, fp
 801db18:	4631      	mov	r1, r6
 801db1a:	4628      	mov	r0, r5
 801db1c:	47b8      	blx	r7
 801db1e:	3001      	adds	r0, #1
 801db20:	f43f aefb 	beq.w	801d91a <_printf_float+0xb6>
 801db24:	f10a 0a01 	add.w	sl, sl, #1
 801db28:	e7ee      	b.n	801db08 <_printf_float+0x2a4>
 801db2a:	bf00      	nop
 801db2c:	7fefffff 	.word	0x7fefffff
 801db30:	0802546e 	.word	0x0802546e
 801db34:	08025472 	.word	0x08025472
 801db38:	08025476 	.word	0x08025476
 801db3c:	0802547a 	.word	0x0802547a
 801db40:	0802547e 	.word	0x0802547e
 801db44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801db46:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801db4a:	4553      	cmp	r3, sl
 801db4c:	bfa8      	it	ge
 801db4e:	4653      	movge	r3, sl
 801db50:	2b00      	cmp	r3, #0
 801db52:	4699      	mov	r9, r3
 801db54:	dc36      	bgt.n	801dbc4 <_printf_float+0x360>
 801db56:	f04f 0b00 	mov.w	fp, #0
 801db5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801db5e:	f104 021a 	add.w	r2, r4, #26
 801db62:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801db64:	9306      	str	r3, [sp, #24]
 801db66:	eba3 0309 	sub.w	r3, r3, r9
 801db6a:	455b      	cmp	r3, fp
 801db6c:	dc31      	bgt.n	801dbd2 <_printf_float+0x36e>
 801db6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db70:	459a      	cmp	sl, r3
 801db72:	dc3a      	bgt.n	801dbea <_printf_float+0x386>
 801db74:	6823      	ldr	r3, [r4, #0]
 801db76:	07da      	lsls	r2, r3, #31
 801db78:	d437      	bmi.n	801dbea <_printf_float+0x386>
 801db7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db7c:	ebaa 0903 	sub.w	r9, sl, r3
 801db80:	9b06      	ldr	r3, [sp, #24]
 801db82:	ebaa 0303 	sub.w	r3, sl, r3
 801db86:	4599      	cmp	r9, r3
 801db88:	bfa8      	it	ge
 801db8a:	4699      	movge	r9, r3
 801db8c:	f1b9 0f00 	cmp.w	r9, #0
 801db90:	dc33      	bgt.n	801dbfa <_printf_float+0x396>
 801db92:	f04f 0800 	mov.w	r8, #0
 801db96:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801db9a:	f104 0b1a 	add.w	fp, r4, #26
 801db9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dba0:	ebaa 0303 	sub.w	r3, sl, r3
 801dba4:	eba3 0309 	sub.w	r3, r3, r9
 801dba8:	4543      	cmp	r3, r8
 801dbaa:	f77f af79 	ble.w	801daa0 <_printf_float+0x23c>
 801dbae:	2301      	movs	r3, #1
 801dbb0:	465a      	mov	r2, fp
 801dbb2:	4631      	mov	r1, r6
 801dbb4:	4628      	mov	r0, r5
 801dbb6:	47b8      	blx	r7
 801dbb8:	3001      	adds	r0, #1
 801dbba:	f43f aeae 	beq.w	801d91a <_printf_float+0xb6>
 801dbbe:	f108 0801 	add.w	r8, r8, #1
 801dbc2:	e7ec      	b.n	801db9e <_printf_float+0x33a>
 801dbc4:	4642      	mov	r2, r8
 801dbc6:	4631      	mov	r1, r6
 801dbc8:	4628      	mov	r0, r5
 801dbca:	47b8      	blx	r7
 801dbcc:	3001      	adds	r0, #1
 801dbce:	d1c2      	bne.n	801db56 <_printf_float+0x2f2>
 801dbd0:	e6a3      	b.n	801d91a <_printf_float+0xb6>
 801dbd2:	2301      	movs	r3, #1
 801dbd4:	4631      	mov	r1, r6
 801dbd6:	4628      	mov	r0, r5
 801dbd8:	9206      	str	r2, [sp, #24]
 801dbda:	47b8      	blx	r7
 801dbdc:	3001      	adds	r0, #1
 801dbde:	f43f ae9c 	beq.w	801d91a <_printf_float+0xb6>
 801dbe2:	9a06      	ldr	r2, [sp, #24]
 801dbe4:	f10b 0b01 	add.w	fp, fp, #1
 801dbe8:	e7bb      	b.n	801db62 <_printf_float+0x2fe>
 801dbea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dbee:	4631      	mov	r1, r6
 801dbf0:	4628      	mov	r0, r5
 801dbf2:	47b8      	blx	r7
 801dbf4:	3001      	adds	r0, #1
 801dbf6:	d1c0      	bne.n	801db7a <_printf_float+0x316>
 801dbf8:	e68f      	b.n	801d91a <_printf_float+0xb6>
 801dbfa:	9a06      	ldr	r2, [sp, #24]
 801dbfc:	464b      	mov	r3, r9
 801dbfe:	4442      	add	r2, r8
 801dc00:	4631      	mov	r1, r6
 801dc02:	4628      	mov	r0, r5
 801dc04:	47b8      	blx	r7
 801dc06:	3001      	adds	r0, #1
 801dc08:	d1c3      	bne.n	801db92 <_printf_float+0x32e>
 801dc0a:	e686      	b.n	801d91a <_printf_float+0xb6>
 801dc0c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 801dc10:	f1ba 0f01 	cmp.w	sl, #1
 801dc14:	dc01      	bgt.n	801dc1a <_printf_float+0x3b6>
 801dc16:	07db      	lsls	r3, r3, #31
 801dc18:	d536      	bpl.n	801dc88 <_printf_float+0x424>
 801dc1a:	2301      	movs	r3, #1
 801dc1c:	4642      	mov	r2, r8
 801dc1e:	4631      	mov	r1, r6
 801dc20:	4628      	mov	r0, r5
 801dc22:	47b8      	blx	r7
 801dc24:	3001      	adds	r0, #1
 801dc26:	f43f ae78 	beq.w	801d91a <_printf_float+0xb6>
 801dc2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801dc2e:	4631      	mov	r1, r6
 801dc30:	4628      	mov	r0, r5
 801dc32:	47b8      	blx	r7
 801dc34:	3001      	adds	r0, #1
 801dc36:	f43f ae70 	beq.w	801d91a <_printf_float+0xb6>
 801dc3a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 801dc3e:	2200      	movs	r2, #0
 801dc40:	2300      	movs	r3, #0
 801dc42:	f10a 3aff 	add.w	sl, sl, #4294967295
 801dc46:	f7e2 ff3f 	bl	8000ac8 <__aeabi_dcmpeq>
 801dc4a:	b9c0      	cbnz	r0, 801dc7e <_printf_float+0x41a>
 801dc4c:	4653      	mov	r3, sl
 801dc4e:	f108 0201 	add.w	r2, r8, #1
 801dc52:	4631      	mov	r1, r6
 801dc54:	4628      	mov	r0, r5
 801dc56:	47b8      	blx	r7
 801dc58:	3001      	adds	r0, #1
 801dc5a:	d10c      	bne.n	801dc76 <_printf_float+0x412>
 801dc5c:	e65d      	b.n	801d91a <_printf_float+0xb6>
 801dc5e:	2301      	movs	r3, #1
 801dc60:	465a      	mov	r2, fp
 801dc62:	4631      	mov	r1, r6
 801dc64:	4628      	mov	r0, r5
 801dc66:	47b8      	blx	r7
 801dc68:	3001      	adds	r0, #1
 801dc6a:	f43f ae56 	beq.w	801d91a <_printf_float+0xb6>
 801dc6e:	f108 0801 	add.w	r8, r8, #1
 801dc72:	45d0      	cmp	r8, sl
 801dc74:	dbf3      	blt.n	801dc5e <_printf_float+0x3fa>
 801dc76:	464b      	mov	r3, r9
 801dc78:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 801dc7c:	e6df      	b.n	801da3e <_printf_float+0x1da>
 801dc7e:	f04f 0800 	mov.w	r8, #0
 801dc82:	f104 0b1a 	add.w	fp, r4, #26
 801dc86:	e7f4      	b.n	801dc72 <_printf_float+0x40e>
 801dc88:	2301      	movs	r3, #1
 801dc8a:	4642      	mov	r2, r8
 801dc8c:	e7e1      	b.n	801dc52 <_printf_float+0x3ee>
 801dc8e:	2301      	movs	r3, #1
 801dc90:	464a      	mov	r2, r9
 801dc92:	4631      	mov	r1, r6
 801dc94:	4628      	mov	r0, r5
 801dc96:	47b8      	blx	r7
 801dc98:	3001      	adds	r0, #1
 801dc9a:	f43f ae3e 	beq.w	801d91a <_printf_float+0xb6>
 801dc9e:	f108 0801 	add.w	r8, r8, #1
 801dca2:	68e3      	ldr	r3, [r4, #12]
 801dca4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801dca6:	1a5b      	subs	r3, r3, r1
 801dca8:	4543      	cmp	r3, r8
 801dcaa:	dcf0      	bgt.n	801dc8e <_printf_float+0x42a>
 801dcac:	e6fc      	b.n	801daa8 <_printf_float+0x244>
 801dcae:	f04f 0800 	mov.w	r8, #0
 801dcb2:	f104 0919 	add.w	r9, r4, #25
 801dcb6:	e7f4      	b.n	801dca2 <_printf_float+0x43e>

0801dcb8 <_printf_common>:
 801dcb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dcbc:	4616      	mov	r6, r2
 801dcbe:	4698      	mov	r8, r3
 801dcc0:	688a      	ldr	r2, [r1, #8]
 801dcc2:	690b      	ldr	r3, [r1, #16]
 801dcc4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801dcc8:	4293      	cmp	r3, r2
 801dcca:	bfb8      	it	lt
 801dccc:	4613      	movlt	r3, r2
 801dcce:	6033      	str	r3, [r6, #0]
 801dcd0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801dcd4:	4607      	mov	r7, r0
 801dcd6:	460c      	mov	r4, r1
 801dcd8:	b10a      	cbz	r2, 801dcde <_printf_common+0x26>
 801dcda:	3301      	adds	r3, #1
 801dcdc:	6033      	str	r3, [r6, #0]
 801dcde:	6823      	ldr	r3, [r4, #0]
 801dce0:	0699      	lsls	r1, r3, #26
 801dce2:	bf42      	ittt	mi
 801dce4:	6833      	ldrmi	r3, [r6, #0]
 801dce6:	3302      	addmi	r3, #2
 801dce8:	6033      	strmi	r3, [r6, #0]
 801dcea:	6825      	ldr	r5, [r4, #0]
 801dcec:	f015 0506 	ands.w	r5, r5, #6
 801dcf0:	d106      	bne.n	801dd00 <_printf_common+0x48>
 801dcf2:	f104 0a19 	add.w	sl, r4, #25
 801dcf6:	68e3      	ldr	r3, [r4, #12]
 801dcf8:	6832      	ldr	r2, [r6, #0]
 801dcfa:	1a9b      	subs	r3, r3, r2
 801dcfc:	42ab      	cmp	r3, r5
 801dcfe:	dc26      	bgt.n	801dd4e <_printf_common+0x96>
 801dd00:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801dd04:	6822      	ldr	r2, [r4, #0]
 801dd06:	3b00      	subs	r3, #0
 801dd08:	bf18      	it	ne
 801dd0a:	2301      	movne	r3, #1
 801dd0c:	0692      	lsls	r2, r2, #26
 801dd0e:	d42b      	bmi.n	801dd68 <_printf_common+0xb0>
 801dd10:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801dd14:	4641      	mov	r1, r8
 801dd16:	4638      	mov	r0, r7
 801dd18:	47c8      	blx	r9
 801dd1a:	3001      	adds	r0, #1
 801dd1c:	d01e      	beq.n	801dd5c <_printf_common+0xa4>
 801dd1e:	6823      	ldr	r3, [r4, #0]
 801dd20:	6922      	ldr	r2, [r4, #16]
 801dd22:	f003 0306 	and.w	r3, r3, #6
 801dd26:	2b04      	cmp	r3, #4
 801dd28:	bf02      	ittt	eq
 801dd2a:	68e5      	ldreq	r5, [r4, #12]
 801dd2c:	6833      	ldreq	r3, [r6, #0]
 801dd2e:	1aed      	subeq	r5, r5, r3
 801dd30:	68a3      	ldr	r3, [r4, #8]
 801dd32:	bf0c      	ite	eq
 801dd34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dd38:	2500      	movne	r5, #0
 801dd3a:	4293      	cmp	r3, r2
 801dd3c:	bfc4      	itt	gt
 801dd3e:	1a9b      	subgt	r3, r3, r2
 801dd40:	18ed      	addgt	r5, r5, r3
 801dd42:	2600      	movs	r6, #0
 801dd44:	341a      	adds	r4, #26
 801dd46:	42b5      	cmp	r5, r6
 801dd48:	d11a      	bne.n	801dd80 <_printf_common+0xc8>
 801dd4a:	2000      	movs	r0, #0
 801dd4c:	e008      	b.n	801dd60 <_printf_common+0xa8>
 801dd4e:	2301      	movs	r3, #1
 801dd50:	4652      	mov	r2, sl
 801dd52:	4641      	mov	r1, r8
 801dd54:	4638      	mov	r0, r7
 801dd56:	47c8      	blx	r9
 801dd58:	3001      	adds	r0, #1
 801dd5a:	d103      	bne.n	801dd64 <_printf_common+0xac>
 801dd5c:	f04f 30ff 	mov.w	r0, #4294967295
 801dd60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd64:	3501      	adds	r5, #1
 801dd66:	e7c6      	b.n	801dcf6 <_printf_common+0x3e>
 801dd68:	18e1      	adds	r1, r4, r3
 801dd6a:	1c5a      	adds	r2, r3, #1
 801dd6c:	2030      	movs	r0, #48	@ 0x30
 801dd6e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801dd72:	4422      	add	r2, r4
 801dd74:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801dd78:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801dd7c:	3302      	adds	r3, #2
 801dd7e:	e7c7      	b.n	801dd10 <_printf_common+0x58>
 801dd80:	2301      	movs	r3, #1
 801dd82:	4622      	mov	r2, r4
 801dd84:	4641      	mov	r1, r8
 801dd86:	4638      	mov	r0, r7
 801dd88:	47c8      	blx	r9
 801dd8a:	3001      	adds	r0, #1
 801dd8c:	d0e6      	beq.n	801dd5c <_printf_common+0xa4>
 801dd8e:	3601      	adds	r6, #1
 801dd90:	e7d9      	b.n	801dd46 <_printf_common+0x8e>
	...

0801dd94 <_printf_i>:
 801dd94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dd98:	7e0f      	ldrb	r7, [r1, #24]
 801dd9a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801dd9c:	2f78      	cmp	r7, #120	@ 0x78
 801dd9e:	4691      	mov	r9, r2
 801dda0:	4680      	mov	r8, r0
 801dda2:	460c      	mov	r4, r1
 801dda4:	469a      	mov	sl, r3
 801dda6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801ddaa:	d807      	bhi.n	801ddbc <_printf_i+0x28>
 801ddac:	2f62      	cmp	r7, #98	@ 0x62
 801ddae:	d80a      	bhi.n	801ddc6 <_printf_i+0x32>
 801ddb0:	2f00      	cmp	r7, #0
 801ddb2:	f000 80d2 	beq.w	801df5a <_printf_i+0x1c6>
 801ddb6:	2f58      	cmp	r7, #88	@ 0x58
 801ddb8:	f000 80b9 	beq.w	801df2e <_printf_i+0x19a>
 801ddbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ddc0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ddc4:	e03a      	b.n	801de3c <_printf_i+0xa8>
 801ddc6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ddca:	2b15      	cmp	r3, #21
 801ddcc:	d8f6      	bhi.n	801ddbc <_printf_i+0x28>
 801ddce:	a101      	add	r1, pc, #4	@ (adr r1, 801ddd4 <_printf_i+0x40>)
 801ddd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ddd4:	0801de2d 	.word	0x0801de2d
 801ddd8:	0801de41 	.word	0x0801de41
 801dddc:	0801ddbd 	.word	0x0801ddbd
 801dde0:	0801ddbd 	.word	0x0801ddbd
 801dde4:	0801ddbd 	.word	0x0801ddbd
 801dde8:	0801ddbd 	.word	0x0801ddbd
 801ddec:	0801de41 	.word	0x0801de41
 801ddf0:	0801ddbd 	.word	0x0801ddbd
 801ddf4:	0801ddbd 	.word	0x0801ddbd
 801ddf8:	0801ddbd 	.word	0x0801ddbd
 801ddfc:	0801ddbd 	.word	0x0801ddbd
 801de00:	0801df41 	.word	0x0801df41
 801de04:	0801de6b 	.word	0x0801de6b
 801de08:	0801defb 	.word	0x0801defb
 801de0c:	0801ddbd 	.word	0x0801ddbd
 801de10:	0801ddbd 	.word	0x0801ddbd
 801de14:	0801df63 	.word	0x0801df63
 801de18:	0801ddbd 	.word	0x0801ddbd
 801de1c:	0801de6b 	.word	0x0801de6b
 801de20:	0801ddbd 	.word	0x0801ddbd
 801de24:	0801ddbd 	.word	0x0801ddbd
 801de28:	0801df03 	.word	0x0801df03
 801de2c:	6833      	ldr	r3, [r6, #0]
 801de2e:	1d1a      	adds	r2, r3, #4
 801de30:	681b      	ldr	r3, [r3, #0]
 801de32:	6032      	str	r2, [r6, #0]
 801de34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801de38:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801de3c:	2301      	movs	r3, #1
 801de3e:	e09d      	b.n	801df7c <_printf_i+0x1e8>
 801de40:	6833      	ldr	r3, [r6, #0]
 801de42:	6820      	ldr	r0, [r4, #0]
 801de44:	1d19      	adds	r1, r3, #4
 801de46:	6031      	str	r1, [r6, #0]
 801de48:	0606      	lsls	r6, r0, #24
 801de4a:	d501      	bpl.n	801de50 <_printf_i+0xbc>
 801de4c:	681d      	ldr	r5, [r3, #0]
 801de4e:	e003      	b.n	801de58 <_printf_i+0xc4>
 801de50:	0645      	lsls	r5, r0, #25
 801de52:	d5fb      	bpl.n	801de4c <_printf_i+0xb8>
 801de54:	f9b3 5000 	ldrsh.w	r5, [r3]
 801de58:	2d00      	cmp	r5, #0
 801de5a:	da03      	bge.n	801de64 <_printf_i+0xd0>
 801de5c:	232d      	movs	r3, #45	@ 0x2d
 801de5e:	426d      	negs	r5, r5
 801de60:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801de64:	4859      	ldr	r0, [pc, #356]	@ (801dfcc <_printf_i+0x238>)
 801de66:	230a      	movs	r3, #10
 801de68:	e011      	b.n	801de8e <_printf_i+0xfa>
 801de6a:	6821      	ldr	r1, [r4, #0]
 801de6c:	6833      	ldr	r3, [r6, #0]
 801de6e:	0608      	lsls	r0, r1, #24
 801de70:	f853 5b04 	ldr.w	r5, [r3], #4
 801de74:	d402      	bmi.n	801de7c <_printf_i+0xe8>
 801de76:	0649      	lsls	r1, r1, #25
 801de78:	bf48      	it	mi
 801de7a:	b2ad      	uxthmi	r5, r5
 801de7c:	2f6f      	cmp	r7, #111	@ 0x6f
 801de7e:	4853      	ldr	r0, [pc, #332]	@ (801dfcc <_printf_i+0x238>)
 801de80:	6033      	str	r3, [r6, #0]
 801de82:	bf14      	ite	ne
 801de84:	230a      	movne	r3, #10
 801de86:	2308      	moveq	r3, #8
 801de88:	2100      	movs	r1, #0
 801de8a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801de8e:	6866      	ldr	r6, [r4, #4]
 801de90:	60a6      	str	r6, [r4, #8]
 801de92:	2e00      	cmp	r6, #0
 801de94:	bfa2      	ittt	ge
 801de96:	6821      	ldrge	r1, [r4, #0]
 801de98:	f021 0104 	bicge.w	r1, r1, #4
 801de9c:	6021      	strge	r1, [r4, #0]
 801de9e:	b90d      	cbnz	r5, 801dea4 <_printf_i+0x110>
 801dea0:	2e00      	cmp	r6, #0
 801dea2:	d04b      	beq.n	801df3c <_printf_i+0x1a8>
 801dea4:	4616      	mov	r6, r2
 801dea6:	fbb5 f1f3 	udiv	r1, r5, r3
 801deaa:	fb03 5711 	mls	r7, r3, r1, r5
 801deae:	5dc7      	ldrb	r7, [r0, r7]
 801deb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801deb4:	462f      	mov	r7, r5
 801deb6:	42bb      	cmp	r3, r7
 801deb8:	460d      	mov	r5, r1
 801deba:	d9f4      	bls.n	801dea6 <_printf_i+0x112>
 801debc:	2b08      	cmp	r3, #8
 801debe:	d10b      	bne.n	801ded8 <_printf_i+0x144>
 801dec0:	6823      	ldr	r3, [r4, #0]
 801dec2:	07df      	lsls	r7, r3, #31
 801dec4:	d508      	bpl.n	801ded8 <_printf_i+0x144>
 801dec6:	6923      	ldr	r3, [r4, #16]
 801dec8:	6861      	ldr	r1, [r4, #4]
 801deca:	4299      	cmp	r1, r3
 801decc:	bfde      	ittt	le
 801dece:	2330      	movle	r3, #48	@ 0x30
 801ded0:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ded4:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ded8:	1b92      	subs	r2, r2, r6
 801deda:	6122      	str	r2, [r4, #16]
 801dedc:	f8cd a000 	str.w	sl, [sp]
 801dee0:	464b      	mov	r3, r9
 801dee2:	aa03      	add	r2, sp, #12
 801dee4:	4621      	mov	r1, r4
 801dee6:	4640      	mov	r0, r8
 801dee8:	f7ff fee6 	bl	801dcb8 <_printf_common>
 801deec:	3001      	adds	r0, #1
 801deee:	d14a      	bne.n	801df86 <_printf_i+0x1f2>
 801def0:	f04f 30ff 	mov.w	r0, #4294967295
 801def4:	b004      	add	sp, #16
 801def6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801defa:	6823      	ldr	r3, [r4, #0]
 801defc:	f043 0320 	orr.w	r3, r3, #32
 801df00:	6023      	str	r3, [r4, #0]
 801df02:	4833      	ldr	r0, [pc, #204]	@ (801dfd0 <_printf_i+0x23c>)
 801df04:	2778      	movs	r7, #120	@ 0x78
 801df06:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801df0a:	6823      	ldr	r3, [r4, #0]
 801df0c:	6831      	ldr	r1, [r6, #0]
 801df0e:	061f      	lsls	r7, r3, #24
 801df10:	f851 5b04 	ldr.w	r5, [r1], #4
 801df14:	d402      	bmi.n	801df1c <_printf_i+0x188>
 801df16:	065f      	lsls	r7, r3, #25
 801df18:	bf48      	it	mi
 801df1a:	b2ad      	uxthmi	r5, r5
 801df1c:	6031      	str	r1, [r6, #0]
 801df1e:	07d9      	lsls	r1, r3, #31
 801df20:	bf44      	itt	mi
 801df22:	f043 0320 	orrmi.w	r3, r3, #32
 801df26:	6023      	strmi	r3, [r4, #0]
 801df28:	b11d      	cbz	r5, 801df32 <_printf_i+0x19e>
 801df2a:	2310      	movs	r3, #16
 801df2c:	e7ac      	b.n	801de88 <_printf_i+0xf4>
 801df2e:	4827      	ldr	r0, [pc, #156]	@ (801dfcc <_printf_i+0x238>)
 801df30:	e7e9      	b.n	801df06 <_printf_i+0x172>
 801df32:	6823      	ldr	r3, [r4, #0]
 801df34:	f023 0320 	bic.w	r3, r3, #32
 801df38:	6023      	str	r3, [r4, #0]
 801df3a:	e7f6      	b.n	801df2a <_printf_i+0x196>
 801df3c:	4616      	mov	r6, r2
 801df3e:	e7bd      	b.n	801debc <_printf_i+0x128>
 801df40:	6833      	ldr	r3, [r6, #0]
 801df42:	6825      	ldr	r5, [r4, #0]
 801df44:	6961      	ldr	r1, [r4, #20]
 801df46:	1d18      	adds	r0, r3, #4
 801df48:	6030      	str	r0, [r6, #0]
 801df4a:	062e      	lsls	r6, r5, #24
 801df4c:	681b      	ldr	r3, [r3, #0]
 801df4e:	d501      	bpl.n	801df54 <_printf_i+0x1c0>
 801df50:	6019      	str	r1, [r3, #0]
 801df52:	e002      	b.n	801df5a <_printf_i+0x1c6>
 801df54:	0668      	lsls	r0, r5, #25
 801df56:	d5fb      	bpl.n	801df50 <_printf_i+0x1bc>
 801df58:	8019      	strh	r1, [r3, #0]
 801df5a:	2300      	movs	r3, #0
 801df5c:	6123      	str	r3, [r4, #16]
 801df5e:	4616      	mov	r6, r2
 801df60:	e7bc      	b.n	801dedc <_printf_i+0x148>
 801df62:	6833      	ldr	r3, [r6, #0]
 801df64:	1d1a      	adds	r2, r3, #4
 801df66:	6032      	str	r2, [r6, #0]
 801df68:	681e      	ldr	r6, [r3, #0]
 801df6a:	6862      	ldr	r2, [r4, #4]
 801df6c:	2100      	movs	r1, #0
 801df6e:	4630      	mov	r0, r6
 801df70:	f7e2 f92e 	bl	80001d0 <memchr>
 801df74:	b108      	cbz	r0, 801df7a <_printf_i+0x1e6>
 801df76:	1b80      	subs	r0, r0, r6
 801df78:	6060      	str	r0, [r4, #4]
 801df7a:	6863      	ldr	r3, [r4, #4]
 801df7c:	6123      	str	r3, [r4, #16]
 801df7e:	2300      	movs	r3, #0
 801df80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801df84:	e7aa      	b.n	801dedc <_printf_i+0x148>
 801df86:	6923      	ldr	r3, [r4, #16]
 801df88:	4632      	mov	r2, r6
 801df8a:	4649      	mov	r1, r9
 801df8c:	4640      	mov	r0, r8
 801df8e:	47d0      	blx	sl
 801df90:	3001      	adds	r0, #1
 801df92:	d0ad      	beq.n	801def0 <_printf_i+0x15c>
 801df94:	6823      	ldr	r3, [r4, #0]
 801df96:	079b      	lsls	r3, r3, #30
 801df98:	d413      	bmi.n	801dfc2 <_printf_i+0x22e>
 801df9a:	68e0      	ldr	r0, [r4, #12]
 801df9c:	9b03      	ldr	r3, [sp, #12]
 801df9e:	4298      	cmp	r0, r3
 801dfa0:	bfb8      	it	lt
 801dfa2:	4618      	movlt	r0, r3
 801dfa4:	e7a6      	b.n	801def4 <_printf_i+0x160>
 801dfa6:	2301      	movs	r3, #1
 801dfa8:	4632      	mov	r2, r6
 801dfaa:	4649      	mov	r1, r9
 801dfac:	4640      	mov	r0, r8
 801dfae:	47d0      	blx	sl
 801dfb0:	3001      	adds	r0, #1
 801dfb2:	d09d      	beq.n	801def0 <_printf_i+0x15c>
 801dfb4:	3501      	adds	r5, #1
 801dfb6:	68e3      	ldr	r3, [r4, #12]
 801dfb8:	9903      	ldr	r1, [sp, #12]
 801dfba:	1a5b      	subs	r3, r3, r1
 801dfbc:	42ab      	cmp	r3, r5
 801dfbe:	dcf2      	bgt.n	801dfa6 <_printf_i+0x212>
 801dfc0:	e7eb      	b.n	801df9a <_printf_i+0x206>
 801dfc2:	2500      	movs	r5, #0
 801dfc4:	f104 0619 	add.w	r6, r4, #25
 801dfc8:	e7f5      	b.n	801dfb6 <_printf_i+0x222>
 801dfca:	bf00      	nop
 801dfcc:	08025480 	.word	0x08025480
 801dfd0:	08025491 	.word	0x08025491

0801dfd4 <_scanf_float>:
 801dfd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dfd8:	b087      	sub	sp, #28
 801dfda:	4617      	mov	r7, r2
 801dfdc:	9303      	str	r3, [sp, #12]
 801dfde:	688b      	ldr	r3, [r1, #8]
 801dfe0:	1e5a      	subs	r2, r3, #1
 801dfe2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801dfe6:	bf81      	itttt	hi
 801dfe8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 801dfec:	eb03 0b05 	addhi.w	fp, r3, r5
 801dff0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801dff4:	608b      	strhi	r3, [r1, #8]
 801dff6:	680b      	ldr	r3, [r1, #0]
 801dff8:	460a      	mov	r2, r1
 801dffa:	f04f 0500 	mov.w	r5, #0
 801dffe:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 801e002:	f842 3b1c 	str.w	r3, [r2], #28
 801e006:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801e00a:	4680      	mov	r8, r0
 801e00c:	460c      	mov	r4, r1
 801e00e:	bf98      	it	ls
 801e010:	f04f 0b00 	movls.w	fp, #0
 801e014:	9201      	str	r2, [sp, #4]
 801e016:	4616      	mov	r6, r2
 801e018:	46aa      	mov	sl, r5
 801e01a:	46a9      	mov	r9, r5
 801e01c:	9502      	str	r5, [sp, #8]
 801e01e:	68a2      	ldr	r2, [r4, #8]
 801e020:	b152      	cbz	r2, 801e038 <_scanf_float+0x64>
 801e022:	683b      	ldr	r3, [r7, #0]
 801e024:	781b      	ldrb	r3, [r3, #0]
 801e026:	2b4e      	cmp	r3, #78	@ 0x4e
 801e028:	d864      	bhi.n	801e0f4 <_scanf_float+0x120>
 801e02a:	2b40      	cmp	r3, #64	@ 0x40
 801e02c:	d83c      	bhi.n	801e0a8 <_scanf_float+0xd4>
 801e02e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 801e032:	b2c8      	uxtb	r0, r1
 801e034:	280e      	cmp	r0, #14
 801e036:	d93a      	bls.n	801e0ae <_scanf_float+0xda>
 801e038:	f1b9 0f00 	cmp.w	r9, #0
 801e03c:	d003      	beq.n	801e046 <_scanf_float+0x72>
 801e03e:	6823      	ldr	r3, [r4, #0]
 801e040:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801e044:	6023      	str	r3, [r4, #0]
 801e046:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e04a:	f1ba 0f01 	cmp.w	sl, #1
 801e04e:	f200 8117 	bhi.w	801e280 <_scanf_float+0x2ac>
 801e052:	9b01      	ldr	r3, [sp, #4]
 801e054:	429e      	cmp	r6, r3
 801e056:	f200 8108 	bhi.w	801e26a <_scanf_float+0x296>
 801e05a:	2001      	movs	r0, #1
 801e05c:	b007      	add	sp, #28
 801e05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e062:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 801e066:	2a0d      	cmp	r2, #13
 801e068:	d8e6      	bhi.n	801e038 <_scanf_float+0x64>
 801e06a:	a101      	add	r1, pc, #4	@ (adr r1, 801e070 <_scanf_float+0x9c>)
 801e06c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801e070:	0801e1b7 	.word	0x0801e1b7
 801e074:	0801e039 	.word	0x0801e039
 801e078:	0801e039 	.word	0x0801e039
 801e07c:	0801e039 	.word	0x0801e039
 801e080:	0801e217 	.word	0x0801e217
 801e084:	0801e1ef 	.word	0x0801e1ef
 801e088:	0801e039 	.word	0x0801e039
 801e08c:	0801e039 	.word	0x0801e039
 801e090:	0801e1c5 	.word	0x0801e1c5
 801e094:	0801e039 	.word	0x0801e039
 801e098:	0801e039 	.word	0x0801e039
 801e09c:	0801e039 	.word	0x0801e039
 801e0a0:	0801e039 	.word	0x0801e039
 801e0a4:	0801e17d 	.word	0x0801e17d
 801e0a8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 801e0ac:	e7db      	b.n	801e066 <_scanf_float+0x92>
 801e0ae:	290e      	cmp	r1, #14
 801e0b0:	d8c2      	bhi.n	801e038 <_scanf_float+0x64>
 801e0b2:	a001      	add	r0, pc, #4	@ (adr r0, 801e0b8 <_scanf_float+0xe4>)
 801e0b4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801e0b8:	0801e16d 	.word	0x0801e16d
 801e0bc:	0801e039 	.word	0x0801e039
 801e0c0:	0801e16d 	.word	0x0801e16d
 801e0c4:	0801e203 	.word	0x0801e203
 801e0c8:	0801e039 	.word	0x0801e039
 801e0cc:	0801e115 	.word	0x0801e115
 801e0d0:	0801e153 	.word	0x0801e153
 801e0d4:	0801e153 	.word	0x0801e153
 801e0d8:	0801e153 	.word	0x0801e153
 801e0dc:	0801e153 	.word	0x0801e153
 801e0e0:	0801e153 	.word	0x0801e153
 801e0e4:	0801e153 	.word	0x0801e153
 801e0e8:	0801e153 	.word	0x0801e153
 801e0ec:	0801e153 	.word	0x0801e153
 801e0f0:	0801e153 	.word	0x0801e153
 801e0f4:	2b6e      	cmp	r3, #110	@ 0x6e
 801e0f6:	d809      	bhi.n	801e10c <_scanf_float+0x138>
 801e0f8:	2b60      	cmp	r3, #96	@ 0x60
 801e0fa:	d8b2      	bhi.n	801e062 <_scanf_float+0x8e>
 801e0fc:	2b54      	cmp	r3, #84	@ 0x54
 801e0fe:	d07b      	beq.n	801e1f8 <_scanf_float+0x224>
 801e100:	2b59      	cmp	r3, #89	@ 0x59
 801e102:	d199      	bne.n	801e038 <_scanf_float+0x64>
 801e104:	2d07      	cmp	r5, #7
 801e106:	d197      	bne.n	801e038 <_scanf_float+0x64>
 801e108:	2508      	movs	r5, #8
 801e10a:	e02c      	b.n	801e166 <_scanf_float+0x192>
 801e10c:	2b74      	cmp	r3, #116	@ 0x74
 801e10e:	d073      	beq.n	801e1f8 <_scanf_float+0x224>
 801e110:	2b79      	cmp	r3, #121	@ 0x79
 801e112:	e7f6      	b.n	801e102 <_scanf_float+0x12e>
 801e114:	6821      	ldr	r1, [r4, #0]
 801e116:	05c8      	lsls	r0, r1, #23
 801e118:	d51b      	bpl.n	801e152 <_scanf_float+0x17e>
 801e11a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 801e11e:	6021      	str	r1, [r4, #0]
 801e120:	f109 0901 	add.w	r9, r9, #1
 801e124:	f1bb 0f00 	cmp.w	fp, #0
 801e128:	d003      	beq.n	801e132 <_scanf_float+0x15e>
 801e12a:	3201      	adds	r2, #1
 801e12c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e130:	60a2      	str	r2, [r4, #8]
 801e132:	68a3      	ldr	r3, [r4, #8]
 801e134:	3b01      	subs	r3, #1
 801e136:	60a3      	str	r3, [r4, #8]
 801e138:	6923      	ldr	r3, [r4, #16]
 801e13a:	3301      	adds	r3, #1
 801e13c:	6123      	str	r3, [r4, #16]
 801e13e:	687b      	ldr	r3, [r7, #4]
 801e140:	3b01      	subs	r3, #1
 801e142:	2b00      	cmp	r3, #0
 801e144:	607b      	str	r3, [r7, #4]
 801e146:	f340 8087 	ble.w	801e258 <_scanf_float+0x284>
 801e14a:	683b      	ldr	r3, [r7, #0]
 801e14c:	3301      	adds	r3, #1
 801e14e:	603b      	str	r3, [r7, #0]
 801e150:	e765      	b.n	801e01e <_scanf_float+0x4a>
 801e152:	eb1a 0105 	adds.w	r1, sl, r5
 801e156:	f47f af6f 	bne.w	801e038 <_scanf_float+0x64>
 801e15a:	6822      	ldr	r2, [r4, #0]
 801e15c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 801e160:	6022      	str	r2, [r4, #0]
 801e162:	460d      	mov	r5, r1
 801e164:	468a      	mov	sl, r1
 801e166:	f806 3b01 	strb.w	r3, [r6], #1
 801e16a:	e7e2      	b.n	801e132 <_scanf_float+0x15e>
 801e16c:	6822      	ldr	r2, [r4, #0]
 801e16e:	0610      	lsls	r0, r2, #24
 801e170:	f57f af62 	bpl.w	801e038 <_scanf_float+0x64>
 801e174:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801e178:	6022      	str	r2, [r4, #0]
 801e17a:	e7f4      	b.n	801e166 <_scanf_float+0x192>
 801e17c:	f1ba 0f00 	cmp.w	sl, #0
 801e180:	d10e      	bne.n	801e1a0 <_scanf_float+0x1cc>
 801e182:	f1b9 0f00 	cmp.w	r9, #0
 801e186:	d10e      	bne.n	801e1a6 <_scanf_float+0x1d2>
 801e188:	6822      	ldr	r2, [r4, #0]
 801e18a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e18e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e192:	d108      	bne.n	801e1a6 <_scanf_float+0x1d2>
 801e194:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e198:	6022      	str	r2, [r4, #0]
 801e19a:	f04f 0a01 	mov.w	sl, #1
 801e19e:	e7e2      	b.n	801e166 <_scanf_float+0x192>
 801e1a0:	f1ba 0f02 	cmp.w	sl, #2
 801e1a4:	d055      	beq.n	801e252 <_scanf_float+0x27e>
 801e1a6:	2d01      	cmp	r5, #1
 801e1a8:	d002      	beq.n	801e1b0 <_scanf_float+0x1dc>
 801e1aa:	2d04      	cmp	r5, #4
 801e1ac:	f47f af44 	bne.w	801e038 <_scanf_float+0x64>
 801e1b0:	3501      	adds	r5, #1
 801e1b2:	b2ed      	uxtb	r5, r5
 801e1b4:	e7d7      	b.n	801e166 <_scanf_float+0x192>
 801e1b6:	f1ba 0f01 	cmp.w	sl, #1
 801e1ba:	f47f af3d 	bne.w	801e038 <_scanf_float+0x64>
 801e1be:	f04f 0a02 	mov.w	sl, #2
 801e1c2:	e7d0      	b.n	801e166 <_scanf_float+0x192>
 801e1c4:	b97d      	cbnz	r5, 801e1e6 <_scanf_float+0x212>
 801e1c6:	f1b9 0f00 	cmp.w	r9, #0
 801e1ca:	f47f af38 	bne.w	801e03e <_scanf_float+0x6a>
 801e1ce:	6822      	ldr	r2, [r4, #0]
 801e1d0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 801e1d4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 801e1d8:	f040 8108 	bne.w	801e3ec <_scanf_float+0x418>
 801e1dc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e1e0:	6022      	str	r2, [r4, #0]
 801e1e2:	2501      	movs	r5, #1
 801e1e4:	e7bf      	b.n	801e166 <_scanf_float+0x192>
 801e1e6:	2d03      	cmp	r5, #3
 801e1e8:	d0e2      	beq.n	801e1b0 <_scanf_float+0x1dc>
 801e1ea:	2d05      	cmp	r5, #5
 801e1ec:	e7de      	b.n	801e1ac <_scanf_float+0x1d8>
 801e1ee:	2d02      	cmp	r5, #2
 801e1f0:	f47f af22 	bne.w	801e038 <_scanf_float+0x64>
 801e1f4:	2503      	movs	r5, #3
 801e1f6:	e7b6      	b.n	801e166 <_scanf_float+0x192>
 801e1f8:	2d06      	cmp	r5, #6
 801e1fa:	f47f af1d 	bne.w	801e038 <_scanf_float+0x64>
 801e1fe:	2507      	movs	r5, #7
 801e200:	e7b1      	b.n	801e166 <_scanf_float+0x192>
 801e202:	6822      	ldr	r2, [r4, #0]
 801e204:	0591      	lsls	r1, r2, #22
 801e206:	f57f af17 	bpl.w	801e038 <_scanf_float+0x64>
 801e20a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 801e20e:	6022      	str	r2, [r4, #0]
 801e210:	f8cd 9008 	str.w	r9, [sp, #8]
 801e214:	e7a7      	b.n	801e166 <_scanf_float+0x192>
 801e216:	6822      	ldr	r2, [r4, #0]
 801e218:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 801e21c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 801e220:	d006      	beq.n	801e230 <_scanf_float+0x25c>
 801e222:	0550      	lsls	r0, r2, #21
 801e224:	f57f af08 	bpl.w	801e038 <_scanf_float+0x64>
 801e228:	f1b9 0f00 	cmp.w	r9, #0
 801e22c:	f000 80de 	beq.w	801e3ec <_scanf_float+0x418>
 801e230:	0591      	lsls	r1, r2, #22
 801e232:	bf58      	it	pl
 801e234:	9902      	ldrpl	r1, [sp, #8]
 801e236:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 801e23a:	bf58      	it	pl
 801e23c:	eba9 0101 	subpl.w	r1, r9, r1
 801e240:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 801e244:	bf58      	it	pl
 801e246:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801e24a:	6022      	str	r2, [r4, #0]
 801e24c:	f04f 0900 	mov.w	r9, #0
 801e250:	e789      	b.n	801e166 <_scanf_float+0x192>
 801e252:	f04f 0a03 	mov.w	sl, #3
 801e256:	e786      	b.n	801e166 <_scanf_float+0x192>
 801e258:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801e25c:	4639      	mov	r1, r7
 801e25e:	4640      	mov	r0, r8
 801e260:	4798      	blx	r3
 801e262:	2800      	cmp	r0, #0
 801e264:	f43f aedb 	beq.w	801e01e <_scanf_float+0x4a>
 801e268:	e6e6      	b.n	801e038 <_scanf_float+0x64>
 801e26a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e26e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e272:	463a      	mov	r2, r7
 801e274:	4640      	mov	r0, r8
 801e276:	4798      	blx	r3
 801e278:	6923      	ldr	r3, [r4, #16]
 801e27a:	3b01      	subs	r3, #1
 801e27c:	6123      	str	r3, [r4, #16]
 801e27e:	e6e8      	b.n	801e052 <_scanf_float+0x7e>
 801e280:	1e6b      	subs	r3, r5, #1
 801e282:	2b06      	cmp	r3, #6
 801e284:	d824      	bhi.n	801e2d0 <_scanf_float+0x2fc>
 801e286:	2d02      	cmp	r5, #2
 801e288:	d836      	bhi.n	801e2f8 <_scanf_float+0x324>
 801e28a:	9b01      	ldr	r3, [sp, #4]
 801e28c:	429e      	cmp	r6, r3
 801e28e:	f67f aee4 	bls.w	801e05a <_scanf_float+0x86>
 801e292:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e296:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e29a:	463a      	mov	r2, r7
 801e29c:	4640      	mov	r0, r8
 801e29e:	4798      	blx	r3
 801e2a0:	6923      	ldr	r3, [r4, #16]
 801e2a2:	3b01      	subs	r3, #1
 801e2a4:	6123      	str	r3, [r4, #16]
 801e2a6:	e7f0      	b.n	801e28a <_scanf_float+0x2b6>
 801e2a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e2ac:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 801e2b0:	463a      	mov	r2, r7
 801e2b2:	4640      	mov	r0, r8
 801e2b4:	4798      	blx	r3
 801e2b6:	6923      	ldr	r3, [r4, #16]
 801e2b8:	3b01      	subs	r3, #1
 801e2ba:	6123      	str	r3, [r4, #16]
 801e2bc:	f10a 3aff 	add.w	sl, sl, #4294967295
 801e2c0:	fa5f fa8a 	uxtb.w	sl, sl
 801e2c4:	f1ba 0f02 	cmp.w	sl, #2
 801e2c8:	d1ee      	bne.n	801e2a8 <_scanf_float+0x2d4>
 801e2ca:	3d03      	subs	r5, #3
 801e2cc:	b2ed      	uxtb	r5, r5
 801e2ce:	1b76      	subs	r6, r6, r5
 801e2d0:	6823      	ldr	r3, [r4, #0]
 801e2d2:	05da      	lsls	r2, r3, #23
 801e2d4:	d530      	bpl.n	801e338 <_scanf_float+0x364>
 801e2d6:	055b      	lsls	r3, r3, #21
 801e2d8:	d511      	bpl.n	801e2fe <_scanf_float+0x32a>
 801e2da:	9b01      	ldr	r3, [sp, #4]
 801e2dc:	429e      	cmp	r6, r3
 801e2de:	f67f aebc 	bls.w	801e05a <_scanf_float+0x86>
 801e2e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e2e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801e2ea:	463a      	mov	r2, r7
 801e2ec:	4640      	mov	r0, r8
 801e2ee:	4798      	blx	r3
 801e2f0:	6923      	ldr	r3, [r4, #16]
 801e2f2:	3b01      	subs	r3, #1
 801e2f4:	6123      	str	r3, [r4, #16]
 801e2f6:	e7f0      	b.n	801e2da <_scanf_float+0x306>
 801e2f8:	46aa      	mov	sl, r5
 801e2fa:	46b3      	mov	fp, r6
 801e2fc:	e7de      	b.n	801e2bc <_scanf_float+0x2e8>
 801e2fe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801e302:	6923      	ldr	r3, [r4, #16]
 801e304:	2965      	cmp	r1, #101	@ 0x65
 801e306:	f103 33ff 	add.w	r3, r3, #4294967295
 801e30a:	f106 35ff 	add.w	r5, r6, #4294967295
 801e30e:	6123      	str	r3, [r4, #16]
 801e310:	d00c      	beq.n	801e32c <_scanf_float+0x358>
 801e312:	2945      	cmp	r1, #69	@ 0x45
 801e314:	d00a      	beq.n	801e32c <_scanf_float+0x358>
 801e316:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e31a:	463a      	mov	r2, r7
 801e31c:	4640      	mov	r0, r8
 801e31e:	4798      	blx	r3
 801e320:	6923      	ldr	r3, [r4, #16]
 801e322:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801e326:	3b01      	subs	r3, #1
 801e328:	1eb5      	subs	r5, r6, #2
 801e32a:	6123      	str	r3, [r4, #16]
 801e32c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 801e330:	463a      	mov	r2, r7
 801e332:	4640      	mov	r0, r8
 801e334:	4798      	blx	r3
 801e336:	462e      	mov	r6, r5
 801e338:	6822      	ldr	r2, [r4, #0]
 801e33a:	f012 0210 	ands.w	r2, r2, #16
 801e33e:	d001      	beq.n	801e344 <_scanf_float+0x370>
 801e340:	2000      	movs	r0, #0
 801e342:	e68b      	b.n	801e05c <_scanf_float+0x88>
 801e344:	7032      	strb	r2, [r6, #0]
 801e346:	6823      	ldr	r3, [r4, #0]
 801e348:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 801e34c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801e350:	d11c      	bne.n	801e38c <_scanf_float+0x3b8>
 801e352:	9b02      	ldr	r3, [sp, #8]
 801e354:	454b      	cmp	r3, r9
 801e356:	eba3 0209 	sub.w	r2, r3, r9
 801e35a:	d123      	bne.n	801e3a4 <_scanf_float+0x3d0>
 801e35c:	9901      	ldr	r1, [sp, #4]
 801e35e:	2200      	movs	r2, #0
 801e360:	4640      	mov	r0, r8
 801e362:	f002 fde5 	bl	8020f30 <_strtod_r>
 801e366:	9b03      	ldr	r3, [sp, #12]
 801e368:	6821      	ldr	r1, [r4, #0]
 801e36a:	681b      	ldr	r3, [r3, #0]
 801e36c:	f011 0f02 	tst.w	r1, #2
 801e370:	ec57 6b10 	vmov	r6, r7, d0
 801e374:	f103 0204 	add.w	r2, r3, #4
 801e378:	d01f      	beq.n	801e3ba <_scanf_float+0x3e6>
 801e37a:	9903      	ldr	r1, [sp, #12]
 801e37c:	600a      	str	r2, [r1, #0]
 801e37e:	681b      	ldr	r3, [r3, #0]
 801e380:	e9c3 6700 	strd	r6, r7, [r3]
 801e384:	68e3      	ldr	r3, [r4, #12]
 801e386:	3301      	adds	r3, #1
 801e388:	60e3      	str	r3, [r4, #12]
 801e38a:	e7d9      	b.n	801e340 <_scanf_float+0x36c>
 801e38c:	9b04      	ldr	r3, [sp, #16]
 801e38e:	2b00      	cmp	r3, #0
 801e390:	d0e4      	beq.n	801e35c <_scanf_float+0x388>
 801e392:	9905      	ldr	r1, [sp, #20]
 801e394:	230a      	movs	r3, #10
 801e396:	3101      	adds	r1, #1
 801e398:	4640      	mov	r0, r8
 801e39a:	f7ff f9b7 	bl	801d70c <_strtol_r>
 801e39e:	9b04      	ldr	r3, [sp, #16]
 801e3a0:	9e05      	ldr	r6, [sp, #20]
 801e3a2:	1ac2      	subs	r2, r0, r3
 801e3a4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 801e3a8:	429e      	cmp	r6, r3
 801e3aa:	bf28      	it	cs
 801e3ac:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 801e3b0:	4910      	ldr	r1, [pc, #64]	@ (801e3f4 <_scanf_float+0x420>)
 801e3b2:	4630      	mov	r0, r6
 801e3b4:	f000 f9b6 	bl	801e724 <siprintf>
 801e3b8:	e7d0      	b.n	801e35c <_scanf_float+0x388>
 801e3ba:	f011 0f04 	tst.w	r1, #4
 801e3be:	9903      	ldr	r1, [sp, #12]
 801e3c0:	600a      	str	r2, [r1, #0]
 801e3c2:	d1dc      	bne.n	801e37e <_scanf_float+0x3aa>
 801e3c4:	681d      	ldr	r5, [r3, #0]
 801e3c6:	4632      	mov	r2, r6
 801e3c8:	463b      	mov	r3, r7
 801e3ca:	4630      	mov	r0, r6
 801e3cc:	4639      	mov	r1, r7
 801e3ce:	f7e2 fbad 	bl	8000b2c <__aeabi_dcmpun>
 801e3d2:	b128      	cbz	r0, 801e3e0 <_scanf_float+0x40c>
 801e3d4:	4808      	ldr	r0, [pc, #32]	@ (801e3f8 <_scanf_float+0x424>)
 801e3d6:	f000 fc31 	bl	801ec3c <nanf>
 801e3da:	ed85 0a00 	vstr	s0, [r5]
 801e3de:	e7d1      	b.n	801e384 <_scanf_float+0x3b0>
 801e3e0:	4630      	mov	r0, r6
 801e3e2:	4639      	mov	r1, r7
 801e3e4:	f7e2 fc00 	bl	8000be8 <__aeabi_d2f>
 801e3e8:	6028      	str	r0, [r5, #0]
 801e3ea:	e7cb      	b.n	801e384 <_scanf_float+0x3b0>
 801e3ec:	f04f 0900 	mov.w	r9, #0
 801e3f0:	e629      	b.n	801e046 <_scanf_float+0x72>
 801e3f2:	bf00      	nop
 801e3f4:	080254a2 	.word	0x080254a2
 801e3f8:	080254e2 	.word	0x080254e2

0801e3fc <__sflush_r>:
 801e3fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801e400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e404:	0716      	lsls	r6, r2, #28
 801e406:	4605      	mov	r5, r0
 801e408:	460c      	mov	r4, r1
 801e40a:	d454      	bmi.n	801e4b6 <__sflush_r+0xba>
 801e40c:	684b      	ldr	r3, [r1, #4]
 801e40e:	2b00      	cmp	r3, #0
 801e410:	dc02      	bgt.n	801e418 <__sflush_r+0x1c>
 801e412:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801e414:	2b00      	cmp	r3, #0
 801e416:	dd48      	ble.n	801e4aa <__sflush_r+0xae>
 801e418:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e41a:	2e00      	cmp	r6, #0
 801e41c:	d045      	beq.n	801e4aa <__sflush_r+0xae>
 801e41e:	2300      	movs	r3, #0
 801e420:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801e424:	682f      	ldr	r7, [r5, #0]
 801e426:	6a21      	ldr	r1, [r4, #32]
 801e428:	602b      	str	r3, [r5, #0]
 801e42a:	d030      	beq.n	801e48e <__sflush_r+0x92>
 801e42c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801e42e:	89a3      	ldrh	r3, [r4, #12]
 801e430:	0759      	lsls	r1, r3, #29
 801e432:	d505      	bpl.n	801e440 <__sflush_r+0x44>
 801e434:	6863      	ldr	r3, [r4, #4]
 801e436:	1ad2      	subs	r2, r2, r3
 801e438:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801e43a:	b10b      	cbz	r3, 801e440 <__sflush_r+0x44>
 801e43c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801e43e:	1ad2      	subs	r2, r2, r3
 801e440:	2300      	movs	r3, #0
 801e442:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801e444:	6a21      	ldr	r1, [r4, #32]
 801e446:	4628      	mov	r0, r5
 801e448:	47b0      	blx	r6
 801e44a:	1c43      	adds	r3, r0, #1
 801e44c:	89a3      	ldrh	r3, [r4, #12]
 801e44e:	d106      	bne.n	801e45e <__sflush_r+0x62>
 801e450:	6829      	ldr	r1, [r5, #0]
 801e452:	291d      	cmp	r1, #29
 801e454:	d82b      	bhi.n	801e4ae <__sflush_r+0xb2>
 801e456:	4a2a      	ldr	r2, [pc, #168]	@ (801e500 <__sflush_r+0x104>)
 801e458:	410a      	asrs	r2, r1
 801e45a:	07d6      	lsls	r6, r2, #31
 801e45c:	d427      	bmi.n	801e4ae <__sflush_r+0xb2>
 801e45e:	2200      	movs	r2, #0
 801e460:	6062      	str	r2, [r4, #4]
 801e462:	04d9      	lsls	r1, r3, #19
 801e464:	6922      	ldr	r2, [r4, #16]
 801e466:	6022      	str	r2, [r4, #0]
 801e468:	d504      	bpl.n	801e474 <__sflush_r+0x78>
 801e46a:	1c42      	adds	r2, r0, #1
 801e46c:	d101      	bne.n	801e472 <__sflush_r+0x76>
 801e46e:	682b      	ldr	r3, [r5, #0]
 801e470:	b903      	cbnz	r3, 801e474 <__sflush_r+0x78>
 801e472:	6560      	str	r0, [r4, #84]	@ 0x54
 801e474:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e476:	602f      	str	r7, [r5, #0]
 801e478:	b1b9      	cbz	r1, 801e4aa <__sflush_r+0xae>
 801e47a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e47e:	4299      	cmp	r1, r3
 801e480:	d002      	beq.n	801e488 <__sflush_r+0x8c>
 801e482:	4628      	mov	r0, r5
 801e484:	f001 fa4c 	bl	801f920 <_free_r>
 801e488:	2300      	movs	r3, #0
 801e48a:	6363      	str	r3, [r4, #52]	@ 0x34
 801e48c:	e00d      	b.n	801e4aa <__sflush_r+0xae>
 801e48e:	2301      	movs	r3, #1
 801e490:	4628      	mov	r0, r5
 801e492:	47b0      	blx	r6
 801e494:	4602      	mov	r2, r0
 801e496:	1c50      	adds	r0, r2, #1
 801e498:	d1c9      	bne.n	801e42e <__sflush_r+0x32>
 801e49a:	682b      	ldr	r3, [r5, #0]
 801e49c:	2b00      	cmp	r3, #0
 801e49e:	d0c6      	beq.n	801e42e <__sflush_r+0x32>
 801e4a0:	2b1d      	cmp	r3, #29
 801e4a2:	d001      	beq.n	801e4a8 <__sflush_r+0xac>
 801e4a4:	2b16      	cmp	r3, #22
 801e4a6:	d11e      	bne.n	801e4e6 <__sflush_r+0xea>
 801e4a8:	602f      	str	r7, [r5, #0]
 801e4aa:	2000      	movs	r0, #0
 801e4ac:	e022      	b.n	801e4f4 <__sflush_r+0xf8>
 801e4ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e4b2:	b21b      	sxth	r3, r3
 801e4b4:	e01b      	b.n	801e4ee <__sflush_r+0xf2>
 801e4b6:	690f      	ldr	r7, [r1, #16]
 801e4b8:	2f00      	cmp	r7, #0
 801e4ba:	d0f6      	beq.n	801e4aa <__sflush_r+0xae>
 801e4bc:	0793      	lsls	r3, r2, #30
 801e4be:	680e      	ldr	r6, [r1, #0]
 801e4c0:	bf08      	it	eq
 801e4c2:	694b      	ldreq	r3, [r1, #20]
 801e4c4:	600f      	str	r7, [r1, #0]
 801e4c6:	bf18      	it	ne
 801e4c8:	2300      	movne	r3, #0
 801e4ca:	eba6 0807 	sub.w	r8, r6, r7
 801e4ce:	608b      	str	r3, [r1, #8]
 801e4d0:	f1b8 0f00 	cmp.w	r8, #0
 801e4d4:	dde9      	ble.n	801e4aa <__sflush_r+0xae>
 801e4d6:	6a21      	ldr	r1, [r4, #32]
 801e4d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801e4da:	4643      	mov	r3, r8
 801e4dc:	463a      	mov	r2, r7
 801e4de:	4628      	mov	r0, r5
 801e4e0:	47b0      	blx	r6
 801e4e2:	2800      	cmp	r0, #0
 801e4e4:	dc08      	bgt.n	801e4f8 <__sflush_r+0xfc>
 801e4e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e4ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e4ee:	81a3      	strh	r3, [r4, #12]
 801e4f0:	f04f 30ff 	mov.w	r0, #4294967295
 801e4f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e4f8:	4407      	add	r7, r0
 801e4fa:	eba8 0800 	sub.w	r8, r8, r0
 801e4fe:	e7e7      	b.n	801e4d0 <__sflush_r+0xd4>
 801e500:	dfbffffe 	.word	0xdfbffffe

0801e504 <_fflush_r>:
 801e504:	b538      	push	{r3, r4, r5, lr}
 801e506:	690b      	ldr	r3, [r1, #16]
 801e508:	4605      	mov	r5, r0
 801e50a:	460c      	mov	r4, r1
 801e50c:	b913      	cbnz	r3, 801e514 <_fflush_r+0x10>
 801e50e:	2500      	movs	r5, #0
 801e510:	4628      	mov	r0, r5
 801e512:	bd38      	pop	{r3, r4, r5, pc}
 801e514:	b118      	cbz	r0, 801e51e <_fflush_r+0x1a>
 801e516:	6a03      	ldr	r3, [r0, #32]
 801e518:	b90b      	cbnz	r3, 801e51e <_fflush_r+0x1a>
 801e51a:	f000 f8bb 	bl	801e694 <__sinit>
 801e51e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e522:	2b00      	cmp	r3, #0
 801e524:	d0f3      	beq.n	801e50e <_fflush_r+0xa>
 801e526:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801e528:	07d0      	lsls	r0, r2, #31
 801e52a:	d404      	bmi.n	801e536 <_fflush_r+0x32>
 801e52c:	0599      	lsls	r1, r3, #22
 801e52e:	d402      	bmi.n	801e536 <_fflush_r+0x32>
 801e530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e532:	f000 fb72 	bl	801ec1a <__retarget_lock_acquire_recursive>
 801e536:	4628      	mov	r0, r5
 801e538:	4621      	mov	r1, r4
 801e53a:	f7ff ff5f 	bl	801e3fc <__sflush_r>
 801e53e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801e540:	07da      	lsls	r2, r3, #31
 801e542:	4605      	mov	r5, r0
 801e544:	d4e4      	bmi.n	801e510 <_fflush_r+0xc>
 801e546:	89a3      	ldrh	r3, [r4, #12]
 801e548:	059b      	lsls	r3, r3, #22
 801e54a:	d4e1      	bmi.n	801e510 <_fflush_r+0xc>
 801e54c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801e54e:	f000 fb65 	bl	801ec1c <__retarget_lock_release_recursive>
 801e552:	e7dd      	b.n	801e510 <_fflush_r+0xc>

0801e554 <fflush>:
 801e554:	4601      	mov	r1, r0
 801e556:	b920      	cbnz	r0, 801e562 <fflush+0xe>
 801e558:	4a04      	ldr	r2, [pc, #16]	@ (801e56c <fflush+0x18>)
 801e55a:	4905      	ldr	r1, [pc, #20]	@ (801e570 <fflush+0x1c>)
 801e55c:	4805      	ldr	r0, [pc, #20]	@ (801e574 <fflush+0x20>)
 801e55e:	f000 b8b1 	b.w	801e6c4 <_fwalk_sglue>
 801e562:	4b05      	ldr	r3, [pc, #20]	@ (801e578 <fflush+0x24>)
 801e564:	6818      	ldr	r0, [r3, #0]
 801e566:	f7ff bfcd 	b.w	801e504 <_fflush_r>
 801e56a:	bf00      	nop
 801e56c:	20000050 	.word	0x20000050
 801e570:	0801e505 	.word	0x0801e505
 801e574:	20000060 	.word	0x20000060
 801e578:	2000005c 	.word	0x2000005c

0801e57c <std>:
 801e57c:	2300      	movs	r3, #0
 801e57e:	b510      	push	{r4, lr}
 801e580:	4604      	mov	r4, r0
 801e582:	e9c0 3300 	strd	r3, r3, [r0]
 801e586:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e58a:	6083      	str	r3, [r0, #8]
 801e58c:	8181      	strh	r1, [r0, #12]
 801e58e:	6643      	str	r3, [r0, #100]	@ 0x64
 801e590:	81c2      	strh	r2, [r0, #14]
 801e592:	6183      	str	r3, [r0, #24]
 801e594:	4619      	mov	r1, r3
 801e596:	2208      	movs	r2, #8
 801e598:	305c      	adds	r0, #92	@ 0x5c
 801e59a:	f000 f9e5 	bl	801e968 <memset>
 801e59e:	4b0d      	ldr	r3, [pc, #52]	@ (801e5d4 <std+0x58>)
 801e5a0:	6263      	str	r3, [r4, #36]	@ 0x24
 801e5a2:	4b0d      	ldr	r3, [pc, #52]	@ (801e5d8 <std+0x5c>)
 801e5a4:	62a3      	str	r3, [r4, #40]	@ 0x28
 801e5a6:	4b0d      	ldr	r3, [pc, #52]	@ (801e5dc <std+0x60>)
 801e5a8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801e5aa:	4b0d      	ldr	r3, [pc, #52]	@ (801e5e0 <std+0x64>)
 801e5ac:	6323      	str	r3, [r4, #48]	@ 0x30
 801e5ae:	4b0d      	ldr	r3, [pc, #52]	@ (801e5e4 <std+0x68>)
 801e5b0:	6224      	str	r4, [r4, #32]
 801e5b2:	429c      	cmp	r4, r3
 801e5b4:	d006      	beq.n	801e5c4 <std+0x48>
 801e5b6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801e5ba:	4294      	cmp	r4, r2
 801e5bc:	d002      	beq.n	801e5c4 <std+0x48>
 801e5be:	33d0      	adds	r3, #208	@ 0xd0
 801e5c0:	429c      	cmp	r4, r3
 801e5c2:	d105      	bne.n	801e5d0 <std+0x54>
 801e5c4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801e5c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e5cc:	f000 bb24 	b.w	801ec18 <__retarget_lock_init_recursive>
 801e5d0:	bd10      	pop	{r4, pc}
 801e5d2:	bf00      	nop
 801e5d4:	0801e765 	.word	0x0801e765
 801e5d8:	0801e787 	.word	0x0801e787
 801e5dc:	0801e7bf 	.word	0x0801e7bf
 801e5e0:	0801e7e3 	.word	0x0801e7e3
 801e5e4:	2001b1bc 	.word	0x2001b1bc

0801e5e8 <stdio_exit_handler>:
 801e5e8:	4a02      	ldr	r2, [pc, #8]	@ (801e5f4 <stdio_exit_handler+0xc>)
 801e5ea:	4903      	ldr	r1, [pc, #12]	@ (801e5f8 <stdio_exit_handler+0x10>)
 801e5ec:	4803      	ldr	r0, [pc, #12]	@ (801e5fc <stdio_exit_handler+0x14>)
 801e5ee:	f000 b869 	b.w	801e6c4 <_fwalk_sglue>
 801e5f2:	bf00      	nop
 801e5f4:	20000050 	.word	0x20000050
 801e5f8:	0801e505 	.word	0x0801e505
 801e5fc:	20000060 	.word	0x20000060

0801e600 <cleanup_stdio>:
 801e600:	6841      	ldr	r1, [r0, #4]
 801e602:	4b0c      	ldr	r3, [pc, #48]	@ (801e634 <cleanup_stdio+0x34>)
 801e604:	4299      	cmp	r1, r3
 801e606:	b510      	push	{r4, lr}
 801e608:	4604      	mov	r4, r0
 801e60a:	d001      	beq.n	801e610 <cleanup_stdio+0x10>
 801e60c:	f7ff ff7a 	bl	801e504 <_fflush_r>
 801e610:	68a1      	ldr	r1, [r4, #8]
 801e612:	4b09      	ldr	r3, [pc, #36]	@ (801e638 <cleanup_stdio+0x38>)
 801e614:	4299      	cmp	r1, r3
 801e616:	d002      	beq.n	801e61e <cleanup_stdio+0x1e>
 801e618:	4620      	mov	r0, r4
 801e61a:	f7ff ff73 	bl	801e504 <_fflush_r>
 801e61e:	68e1      	ldr	r1, [r4, #12]
 801e620:	4b06      	ldr	r3, [pc, #24]	@ (801e63c <cleanup_stdio+0x3c>)
 801e622:	4299      	cmp	r1, r3
 801e624:	d004      	beq.n	801e630 <cleanup_stdio+0x30>
 801e626:	4620      	mov	r0, r4
 801e628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e62c:	f7ff bf6a 	b.w	801e504 <_fflush_r>
 801e630:	bd10      	pop	{r4, pc}
 801e632:	bf00      	nop
 801e634:	2001b1bc 	.word	0x2001b1bc
 801e638:	2001b224 	.word	0x2001b224
 801e63c:	2001b28c 	.word	0x2001b28c

0801e640 <global_stdio_init.part.0>:
 801e640:	b510      	push	{r4, lr}
 801e642:	4b0b      	ldr	r3, [pc, #44]	@ (801e670 <global_stdio_init.part.0+0x30>)
 801e644:	4c0b      	ldr	r4, [pc, #44]	@ (801e674 <global_stdio_init.part.0+0x34>)
 801e646:	4a0c      	ldr	r2, [pc, #48]	@ (801e678 <global_stdio_init.part.0+0x38>)
 801e648:	601a      	str	r2, [r3, #0]
 801e64a:	4620      	mov	r0, r4
 801e64c:	2200      	movs	r2, #0
 801e64e:	2104      	movs	r1, #4
 801e650:	f7ff ff94 	bl	801e57c <std>
 801e654:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801e658:	2201      	movs	r2, #1
 801e65a:	2109      	movs	r1, #9
 801e65c:	f7ff ff8e 	bl	801e57c <std>
 801e660:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801e664:	2202      	movs	r2, #2
 801e666:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e66a:	2112      	movs	r1, #18
 801e66c:	f7ff bf86 	b.w	801e57c <std>
 801e670:	2001b2f4 	.word	0x2001b2f4
 801e674:	2001b1bc 	.word	0x2001b1bc
 801e678:	0801e5e9 	.word	0x0801e5e9

0801e67c <__sfp_lock_acquire>:
 801e67c:	4801      	ldr	r0, [pc, #4]	@ (801e684 <__sfp_lock_acquire+0x8>)
 801e67e:	f000 bacc 	b.w	801ec1a <__retarget_lock_acquire_recursive>
 801e682:	bf00      	nop
 801e684:	2001b2fd 	.word	0x2001b2fd

0801e688 <__sfp_lock_release>:
 801e688:	4801      	ldr	r0, [pc, #4]	@ (801e690 <__sfp_lock_release+0x8>)
 801e68a:	f000 bac7 	b.w	801ec1c <__retarget_lock_release_recursive>
 801e68e:	bf00      	nop
 801e690:	2001b2fd 	.word	0x2001b2fd

0801e694 <__sinit>:
 801e694:	b510      	push	{r4, lr}
 801e696:	4604      	mov	r4, r0
 801e698:	f7ff fff0 	bl	801e67c <__sfp_lock_acquire>
 801e69c:	6a23      	ldr	r3, [r4, #32]
 801e69e:	b11b      	cbz	r3, 801e6a8 <__sinit+0x14>
 801e6a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e6a4:	f7ff bff0 	b.w	801e688 <__sfp_lock_release>
 801e6a8:	4b04      	ldr	r3, [pc, #16]	@ (801e6bc <__sinit+0x28>)
 801e6aa:	6223      	str	r3, [r4, #32]
 801e6ac:	4b04      	ldr	r3, [pc, #16]	@ (801e6c0 <__sinit+0x2c>)
 801e6ae:	681b      	ldr	r3, [r3, #0]
 801e6b0:	2b00      	cmp	r3, #0
 801e6b2:	d1f5      	bne.n	801e6a0 <__sinit+0xc>
 801e6b4:	f7ff ffc4 	bl	801e640 <global_stdio_init.part.0>
 801e6b8:	e7f2      	b.n	801e6a0 <__sinit+0xc>
 801e6ba:	bf00      	nop
 801e6bc:	0801e601 	.word	0x0801e601
 801e6c0:	2001b2f4 	.word	0x2001b2f4

0801e6c4 <_fwalk_sglue>:
 801e6c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e6c8:	4607      	mov	r7, r0
 801e6ca:	4688      	mov	r8, r1
 801e6cc:	4614      	mov	r4, r2
 801e6ce:	2600      	movs	r6, #0
 801e6d0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e6d4:	f1b9 0901 	subs.w	r9, r9, #1
 801e6d8:	d505      	bpl.n	801e6e6 <_fwalk_sglue+0x22>
 801e6da:	6824      	ldr	r4, [r4, #0]
 801e6dc:	2c00      	cmp	r4, #0
 801e6de:	d1f7      	bne.n	801e6d0 <_fwalk_sglue+0xc>
 801e6e0:	4630      	mov	r0, r6
 801e6e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e6e6:	89ab      	ldrh	r3, [r5, #12]
 801e6e8:	2b01      	cmp	r3, #1
 801e6ea:	d907      	bls.n	801e6fc <_fwalk_sglue+0x38>
 801e6ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e6f0:	3301      	adds	r3, #1
 801e6f2:	d003      	beq.n	801e6fc <_fwalk_sglue+0x38>
 801e6f4:	4629      	mov	r1, r5
 801e6f6:	4638      	mov	r0, r7
 801e6f8:	47c0      	blx	r8
 801e6fa:	4306      	orrs	r6, r0
 801e6fc:	3568      	adds	r5, #104	@ 0x68
 801e6fe:	e7e9      	b.n	801e6d4 <_fwalk_sglue+0x10>

0801e700 <iprintf>:
 801e700:	b40f      	push	{r0, r1, r2, r3}
 801e702:	b507      	push	{r0, r1, r2, lr}
 801e704:	4906      	ldr	r1, [pc, #24]	@ (801e720 <iprintf+0x20>)
 801e706:	ab04      	add	r3, sp, #16
 801e708:	6808      	ldr	r0, [r1, #0]
 801e70a:	f853 2b04 	ldr.w	r2, [r3], #4
 801e70e:	6881      	ldr	r1, [r0, #8]
 801e710:	9301      	str	r3, [sp, #4]
 801e712:	f002 fd95 	bl	8021240 <_vfiprintf_r>
 801e716:	b003      	add	sp, #12
 801e718:	f85d eb04 	ldr.w	lr, [sp], #4
 801e71c:	b004      	add	sp, #16
 801e71e:	4770      	bx	lr
 801e720:	2000005c 	.word	0x2000005c

0801e724 <siprintf>:
 801e724:	b40e      	push	{r1, r2, r3}
 801e726:	b500      	push	{lr}
 801e728:	b09c      	sub	sp, #112	@ 0x70
 801e72a:	ab1d      	add	r3, sp, #116	@ 0x74
 801e72c:	9002      	str	r0, [sp, #8]
 801e72e:	9006      	str	r0, [sp, #24]
 801e730:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801e734:	4809      	ldr	r0, [pc, #36]	@ (801e75c <siprintf+0x38>)
 801e736:	9107      	str	r1, [sp, #28]
 801e738:	9104      	str	r1, [sp, #16]
 801e73a:	4909      	ldr	r1, [pc, #36]	@ (801e760 <siprintf+0x3c>)
 801e73c:	f853 2b04 	ldr.w	r2, [r3], #4
 801e740:	9105      	str	r1, [sp, #20]
 801e742:	6800      	ldr	r0, [r0, #0]
 801e744:	9301      	str	r3, [sp, #4]
 801e746:	a902      	add	r1, sp, #8
 801e748:	f002 fc54 	bl	8020ff4 <_svfiprintf_r>
 801e74c:	9b02      	ldr	r3, [sp, #8]
 801e74e:	2200      	movs	r2, #0
 801e750:	701a      	strb	r2, [r3, #0]
 801e752:	b01c      	add	sp, #112	@ 0x70
 801e754:	f85d eb04 	ldr.w	lr, [sp], #4
 801e758:	b003      	add	sp, #12
 801e75a:	4770      	bx	lr
 801e75c:	2000005c 	.word	0x2000005c
 801e760:	ffff0208 	.word	0xffff0208

0801e764 <__sread>:
 801e764:	b510      	push	{r4, lr}
 801e766:	460c      	mov	r4, r1
 801e768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e76c:	f000 f9e2 	bl	801eb34 <_read_r>
 801e770:	2800      	cmp	r0, #0
 801e772:	bfab      	itete	ge
 801e774:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801e776:	89a3      	ldrhlt	r3, [r4, #12]
 801e778:	181b      	addge	r3, r3, r0
 801e77a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801e77e:	bfac      	ite	ge
 801e780:	6563      	strge	r3, [r4, #84]	@ 0x54
 801e782:	81a3      	strhlt	r3, [r4, #12]
 801e784:	bd10      	pop	{r4, pc}

0801e786 <__swrite>:
 801e786:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e78a:	461f      	mov	r7, r3
 801e78c:	898b      	ldrh	r3, [r1, #12]
 801e78e:	05db      	lsls	r3, r3, #23
 801e790:	4605      	mov	r5, r0
 801e792:	460c      	mov	r4, r1
 801e794:	4616      	mov	r6, r2
 801e796:	d505      	bpl.n	801e7a4 <__swrite+0x1e>
 801e798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e79c:	2302      	movs	r3, #2
 801e79e:	2200      	movs	r2, #0
 801e7a0:	f000 f9b6 	bl	801eb10 <_lseek_r>
 801e7a4:	89a3      	ldrh	r3, [r4, #12]
 801e7a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e7aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801e7ae:	81a3      	strh	r3, [r4, #12]
 801e7b0:	4632      	mov	r2, r6
 801e7b2:	463b      	mov	r3, r7
 801e7b4:	4628      	mov	r0, r5
 801e7b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e7ba:	f000 b9f1 	b.w	801eba0 <_write_r>

0801e7be <__sseek>:
 801e7be:	b510      	push	{r4, lr}
 801e7c0:	460c      	mov	r4, r1
 801e7c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7c6:	f000 f9a3 	bl	801eb10 <_lseek_r>
 801e7ca:	1c43      	adds	r3, r0, #1
 801e7cc:	89a3      	ldrh	r3, [r4, #12]
 801e7ce:	bf15      	itete	ne
 801e7d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 801e7d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801e7d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801e7da:	81a3      	strheq	r3, [r4, #12]
 801e7dc:	bf18      	it	ne
 801e7de:	81a3      	strhne	r3, [r4, #12]
 801e7e0:	bd10      	pop	{r4, pc}

0801e7e2 <__sclose>:
 801e7e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e7e6:	f000 b92d 	b.w	801ea44 <_close_r>

0801e7ea <__swbuf_r>:
 801e7ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e7ec:	460e      	mov	r6, r1
 801e7ee:	4614      	mov	r4, r2
 801e7f0:	4605      	mov	r5, r0
 801e7f2:	b118      	cbz	r0, 801e7fc <__swbuf_r+0x12>
 801e7f4:	6a03      	ldr	r3, [r0, #32]
 801e7f6:	b90b      	cbnz	r3, 801e7fc <__swbuf_r+0x12>
 801e7f8:	f7ff ff4c 	bl	801e694 <__sinit>
 801e7fc:	69a3      	ldr	r3, [r4, #24]
 801e7fe:	60a3      	str	r3, [r4, #8]
 801e800:	89a3      	ldrh	r3, [r4, #12]
 801e802:	071a      	lsls	r2, r3, #28
 801e804:	d501      	bpl.n	801e80a <__swbuf_r+0x20>
 801e806:	6923      	ldr	r3, [r4, #16]
 801e808:	b943      	cbnz	r3, 801e81c <__swbuf_r+0x32>
 801e80a:	4621      	mov	r1, r4
 801e80c:	4628      	mov	r0, r5
 801e80e:	f000 f82b 	bl	801e868 <__swsetup_r>
 801e812:	b118      	cbz	r0, 801e81c <__swbuf_r+0x32>
 801e814:	f04f 37ff 	mov.w	r7, #4294967295
 801e818:	4638      	mov	r0, r7
 801e81a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e81c:	6823      	ldr	r3, [r4, #0]
 801e81e:	6922      	ldr	r2, [r4, #16]
 801e820:	1a98      	subs	r0, r3, r2
 801e822:	6963      	ldr	r3, [r4, #20]
 801e824:	b2f6      	uxtb	r6, r6
 801e826:	4283      	cmp	r3, r0
 801e828:	4637      	mov	r7, r6
 801e82a:	dc05      	bgt.n	801e838 <__swbuf_r+0x4e>
 801e82c:	4621      	mov	r1, r4
 801e82e:	4628      	mov	r0, r5
 801e830:	f7ff fe68 	bl	801e504 <_fflush_r>
 801e834:	2800      	cmp	r0, #0
 801e836:	d1ed      	bne.n	801e814 <__swbuf_r+0x2a>
 801e838:	68a3      	ldr	r3, [r4, #8]
 801e83a:	3b01      	subs	r3, #1
 801e83c:	60a3      	str	r3, [r4, #8]
 801e83e:	6823      	ldr	r3, [r4, #0]
 801e840:	1c5a      	adds	r2, r3, #1
 801e842:	6022      	str	r2, [r4, #0]
 801e844:	701e      	strb	r6, [r3, #0]
 801e846:	6962      	ldr	r2, [r4, #20]
 801e848:	1c43      	adds	r3, r0, #1
 801e84a:	429a      	cmp	r2, r3
 801e84c:	d004      	beq.n	801e858 <__swbuf_r+0x6e>
 801e84e:	89a3      	ldrh	r3, [r4, #12]
 801e850:	07db      	lsls	r3, r3, #31
 801e852:	d5e1      	bpl.n	801e818 <__swbuf_r+0x2e>
 801e854:	2e0a      	cmp	r6, #10
 801e856:	d1df      	bne.n	801e818 <__swbuf_r+0x2e>
 801e858:	4621      	mov	r1, r4
 801e85a:	4628      	mov	r0, r5
 801e85c:	f7ff fe52 	bl	801e504 <_fflush_r>
 801e860:	2800      	cmp	r0, #0
 801e862:	d0d9      	beq.n	801e818 <__swbuf_r+0x2e>
 801e864:	e7d6      	b.n	801e814 <__swbuf_r+0x2a>
	...

0801e868 <__swsetup_r>:
 801e868:	b538      	push	{r3, r4, r5, lr}
 801e86a:	4b29      	ldr	r3, [pc, #164]	@ (801e910 <__swsetup_r+0xa8>)
 801e86c:	4605      	mov	r5, r0
 801e86e:	6818      	ldr	r0, [r3, #0]
 801e870:	460c      	mov	r4, r1
 801e872:	b118      	cbz	r0, 801e87c <__swsetup_r+0x14>
 801e874:	6a03      	ldr	r3, [r0, #32]
 801e876:	b90b      	cbnz	r3, 801e87c <__swsetup_r+0x14>
 801e878:	f7ff ff0c 	bl	801e694 <__sinit>
 801e87c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e880:	0719      	lsls	r1, r3, #28
 801e882:	d422      	bmi.n	801e8ca <__swsetup_r+0x62>
 801e884:	06da      	lsls	r2, r3, #27
 801e886:	d407      	bmi.n	801e898 <__swsetup_r+0x30>
 801e888:	2209      	movs	r2, #9
 801e88a:	602a      	str	r2, [r5, #0]
 801e88c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801e890:	81a3      	strh	r3, [r4, #12]
 801e892:	f04f 30ff 	mov.w	r0, #4294967295
 801e896:	e033      	b.n	801e900 <__swsetup_r+0x98>
 801e898:	0758      	lsls	r0, r3, #29
 801e89a:	d512      	bpl.n	801e8c2 <__swsetup_r+0x5a>
 801e89c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801e89e:	b141      	cbz	r1, 801e8b2 <__swsetup_r+0x4a>
 801e8a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801e8a4:	4299      	cmp	r1, r3
 801e8a6:	d002      	beq.n	801e8ae <__swsetup_r+0x46>
 801e8a8:	4628      	mov	r0, r5
 801e8aa:	f001 f839 	bl	801f920 <_free_r>
 801e8ae:	2300      	movs	r3, #0
 801e8b0:	6363      	str	r3, [r4, #52]	@ 0x34
 801e8b2:	89a3      	ldrh	r3, [r4, #12]
 801e8b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801e8b8:	81a3      	strh	r3, [r4, #12]
 801e8ba:	2300      	movs	r3, #0
 801e8bc:	6063      	str	r3, [r4, #4]
 801e8be:	6923      	ldr	r3, [r4, #16]
 801e8c0:	6023      	str	r3, [r4, #0]
 801e8c2:	89a3      	ldrh	r3, [r4, #12]
 801e8c4:	f043 0308 	orr.w	r3, r3, #8
 801e8c8:	81a3      	strh	r3, [r4, #12]
 801e8ca:	6923      	ldr	r3, [r4, #16]
 801e8cc:	b94b      	cbnz	r3, 801e8e2 <__swsetup_r+0x7a>
 801e8ce:	89a3      	ldrh	r3, [r4, #12]
 801e8d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801e8d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801e8d8:	d003      	beq.n	801e8e2 <__swsetup_r+0x7a>
 801e8da:	4621      	mov	r1, r4
 801e8dc:	4628      	mov	r0, r5
 801e8de:	f002 fdff 	bl	80214e0 <__smakebuf_r>
 801e8e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e8e6:	f013 0201 	ands.w	r2, r3, #1
 801e8ea:	d00a      	beq.n	801e902 <__swsetup_r+0x9a>
 801e8ec:	2200      	movs	r2, #0
 801e8ee:	60a2      	str	r2, [r4, #8]
 801e8f0:	6962      	ldr	r2, [r4, #20]
 801e8f2:	4252      	negs	r2, r2
 801e8f4:	61a2      	str	r2, [r4, #24]
 801e8f6:	6922      	ldr	r2, [r4, #16]
 801e8f8:	b942      	cbnz	r2, 801e90c <__swsetup_r+0xa4>
 801e8fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801e8fe:	d1c5      	bne.n	801e88c <__swsetup_r+0x24>
 801e900:	bd38      	pop	{r3, r4, r5, pc}
 801e902:	0799      	lsls	r1, r3, #30
 801e904:	bf58      	it	pl
 801e906:	6962      	ldrpl	r2, [r4, #20]
 801e908:	60a2      	str	r2, [r4, #8]
 801e90a:	e7f4      	b.n	801e8f6 <__swsetup_r+0x8e>
 801e90c:	2000      	movs	r0, #0
 801e90e:	e7f7      	b.n	801e900 <__swsetup_r+0x98>
 801e910:	2000005c 	.word	0x2000005c

0801e914 <memcmp>:
 801e914:	b510      	push	{r4, lr}
 801e916:	3901      	subs	r1, #1
 801e918:	4402      	add	r2, r0
 801e91a:	4290      	cmp	r0, r2
 801e91c:	d101      	bne.n	801e922 <memcmp+0xe>
 801e91e:	2000      	movs	r0, #0
 801e920:	e005      	b.n	801e92e <memcmp+0x1a>
 801e922:	7803      	ldrb	r3, [r0, #0]
 801e924:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e928:	42a3      	cmp	r3, r4
 801e92a:	d001      	beq.n	801e930 <memcmp+0x1c>
 801e92c:	1b18      	subs	r0, r3, r4
 801e92e:	bd10      	pop	{r4, pc}
 801e930:	3001      	adds	r0, #1
 801e932:	e7f2      	b.n	801e91a <memcmp+0x6>

0801e934 <memmove>:
 801e934:	4288      	cmp	r0, r1
 801e936:	b510      	push	{r4, lr}
 801e938:	eb01 0402 	add.w	r4, r1, r2
 801e93c:	d902      	bls.n	801e944 <memmove+0x10>
 801e93e:	4284      	cmp	r4, r0
 801e940:	4623      	mov	r3, r4
 801e942:	d807      	bhi.n	801e954 <memmove+0x20>
 801e944:	1e43      	subs	r3, r0, #1
 801e946:	42a1      	cmp	r1, r4
 801e948:	d008      	beq.n	801e95c <memmove+0x28>
 801e94a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e94e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e952:	e7f8      	b.n	801e946 <memmove+0x12>
 801e954:	4402      	add	r2, r0
 801e956:	4601      	mov	r1, r0
 801e958:	428a      	cmp	r2, r1
 801e95a:	d100      	bne.n	801e95e <memmove+0x2a>
 801e95c:	bd10      	pop	{r4, pc}
 801e95e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e962:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e966:	e7f7      	b.n	801e958 <memmove+0x24>

0801e968 <memset>:
 801e968:	4402      	add	r2, r0
 801e96a:	4603      	mov	r3, r0
 801e96c:	4293      	cmp	r3, r2
 801e96e:	d100      	bne.n	801e972 <memset+0xa>
 801e970:	4770      	bx	lr
 801e972:	f803 1b01 	strb.w	r1, [r3], #1
 801e976:	e7f9      	b.n	801e96c <memset+0x4>

0801e978 <strchr>:
 801e978:	b2c9      	uxtb	r1, r1
 801e97a:	4603      	mov	r3, r0
 801e97c:	4618      	mov	r0, r3
 801e97e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e982:	b112      	cbz	r2, 801e98a <strchr+0x12>
 801e984:	428a      	cmp	r2, r1
 801e986:	d1f9      	bne.n	801e97c <strchr+0x4>
 801e988:	4770      	bx	lr
 801e98a:	2900      	cmp	r1, #0
 801e98c:	bf18      	it	ne
 801e98e:	2000      	movne	r0, #0
 801e990:	4770      	bx	lr

0801e992 <strncmp>:
 801e992:	b510      	push	{r4, lr}
 801e994:	b16a      	cbz	r2, 801e9b2 <strncmp+0x20>
 801e996:	3901      	subs	r1, #1
 801e998:	1884      	adds	r4, r0, r2
 801e99a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e99e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801e9a2:	429a      	cmp	r2, r3
 801e9a4:	d103      	bne.n	801e9ae <strncmp+0x1c>
 801e9a6:	42a0      	cmp	r0, r4
 801e9a8:	d001      	beq.n	801e9ae <strncmp+0x1c>
 801e9aa:	2a00      	cmp	r2, #0
 801e9ac:	d1f5      	bne.n	801e99a <strncmp+0x8>
 801e9ae:	1ad0      	subs	r0, r2, r3
 801e9b0:	bd10      	pop	{r4, pc}
 801e9b2:	4610      	mov	r0, r2
 801e9b4:	e7fc      	b.n	801e9b0 <strncmp+0x1e>

0801e9b6 <strncpy>:
 801e9b6:	b510      	push	{r4, lr}
 801e9b8:	3901      	subs	r1, #1
 801e9ba:	4603      	mov	r3, r0
 801e9bc:	b132      	cbz	r2, 801e9cc <strncpy+0x16>
 801e9be:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801e9c2:	f803 4b01 	strb.w	r4, [r3], #1
 801e9c6:	3a01      	subs	r2, #1
 801e9c8:	2c00      	cmp	r4, #0
 801e9ca:	d1f7      	bne.n	801e9bc <strncpy+0x6>
 801e9cc:	441a      	add	r2, r3
 801e9ce:	2100      	movs	r1, #0
 801e9d0:	4293      	cmp	r3, r2
 801e9d2:	d100      	bne.n	801e9d6 <strncpy+0x20>
 801e9d4:	bd10      	pop	{r4, pc}
 801e9d6:	f803 1b01 	strb.w	r1, [r3], #1
 801e9da:	e7f9      	b.n	801e9d0 <strncpy+0x1a>

0801e9dc <_raise_r>:
 801e9dc:	291f      	cmp	r1, #31
 801e9de:	b538      	push	{r3, r4, r5, lr}
 801e9e0:	4605      	mov	r5, r0
 801e9e2:	460c      	mov	r4, r1
 801e9e4:	d904      	bls.n	801e9f0 <_raise_r+0x14>
 801e9e6:	2316      	movs	r3, #22
 801e9e8:	6003      	str	r3, [r0, #0]
 801e9ea:	f04f 30ff 	mov.w	r0, #4294967295
 801e9ee:	bd38      	pop	{r3, r4, r5, pc}
 801e9f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801e9f2:	b112      	cbz	r2, 801e9fa <_raise_r+0x1e>
 801e9f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e9f8:	b94b      	cbnz	r3, 801ea0e <_raise_r+0x32>
 801e9fa:	4628      	mov	r0, r5
 801e9fc:	f000 f8be 	bl	801eb7c <_getpid_r>
 801ea00:	4622      	mov	r2, r4
 801ea02:	4601      	mov	r1, r0
 801ea04:	4628      	mov	r0, r5
 801ea06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801ea0a:	f000 b8a5 	b.w	801eb58 <_kill_r>
 801ea0e:	2b01      	cmp	r3, #1
 801ea10:	d00a      	beq.n	801ea28 <_raise_r+0x4c>
 801ea12:	1c59      	adds	r1, r3, #1
 801ea14:	d103      	bne.n	801ea1e <_raise_r+0x42>
 801ea16:	2316      	movs	r3, #22
 801ea18:	6003      	str	r3, [r0, #0]
 801ea1a:	2001      	movs	r0, #1
 801ea1c:	e7e7      	b.n	801e9ee <_raise_r+0x12>
 801ea1e:	2100      	movs	r1, #0
 801ea20:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801ea24:	4620      	mov	r0, r4
 801ea26:	4798      	blx	r3
 801ea28:	2000      	movs	r0, #0
 801ea2a:	e7e0      	b.n	801e9ee <_raise_r+0x12>

0801ea2c <raise>:
 801ea2c:	4b02      	ldr	r3, [pc, #8]	@ (801ea38 <raise+0xc>)
 801ea2e:	4601      	mov	r1, r0
 801ea30:	6818      	ldr	r0, [r3, #0]
 801ea32:	f7ff bfd3 	b.w	801e9dc <_raise_r>
 801ea36:	bf00      	nop
 801ea38:	2000005c 	.word	0x2000005c

0801ea3c <_localeconv_r>:
 801ea3c:	4800      	ldr	r0, [pc, #0]	@ (801ea40 <_localeconv_r+0x4>)
 801ea3e:	4770      	bx	lr
 801ea40:	2000019c 	.word	0x2000019c

0801ea44 <_close_r>:
 801ea44:	b538      	push	{r3, r4, r5, lr}
 801ea46:	4d06      	ldr	r5, [pc, #24]	@ (801ea60 <_close_r+0x1c>)
 801ea48:	2300      	movs	r3, #0
 801ea4a:	4604      	mov	r4, r0
 801ea4c:	4608      	mov	r0, r1
 801ea4e:	602b      	str	r3, [r5, #0]
 801ea50:	f7e3 fb7c 	bl	800214c <_close>
 801ea54:	1c43      	adds	r3, r0, #1
 801ea56:	d102      	bne.n	801ea5e <_close_r+0x1a>
 801ea58:	682b      	ldr	r3, [r5, #0]
 801ea5a:	b103      	cbz	r3, 801ea5e <_close_r+0x1a>
 801ea5c:	6023      	str	r3, [r4, #0]
 801ea5e:	bd38      	pop	{r3, r4, r5, pc}
 801ea60:	2001b2f8 	.word	0x2001b2f8

0801ea64 <_reclaim_reent>:
 801ea64:	4b29      	ldr	r3, [pc, #164]	@ (801eb0c <_reclaim_reent+0xa8>)
 801ea66:	681b      	ldr	r3, [r3, #0]
 801ea68:	4283      	cmp	r3, r0
 801ea6a:	b570      	push	{r4, r5, r6, lr}
 801ea6c:	4604      	mov	r4, r0
 801ea6e:	d04b      	beq.n	801eb08 <_reclaim_reent+0xa4>
 801ea70:	69c3      	ldr	r3, [r0, #28]
 801ea72:	b1ab      	cbz	r3, 801eaa0 <_reclaim_reent+0x3c>
 801ea74:	68db      	ldr	r3, [r3, #12]
 801ea76:	b16b      	cbz	r3, 801ea94 <_reclaim_reent+0x30>
 801ea78:	2500      	movs	r5, #0
 801ea7a:	69e3      	ldr	r3, [r4, #28]
 801ea7c:	68db      	ldr	r3, [r3, #12]
 801ea7e:	5959      	ldr	r1, [r3, r5]
 801ea80:	2900      	cmp	r1, #0
 801ea82:	d13b      	bne.n	801eafc <_reclaim_reent+0x98>
 801ea84:	3504      	adds	r5, #4
 801ea86:	2d80      	cmp	r5, #128	@ 0x80
 801ea88:	d1f7      	bne.n	801ea7a <_reclaim_reent+0x16>
 801ea8a:	69e3      	ldr	r3, [r4, #28]
 801ea8c:	4620      	mov	r0, r4
 801ea8e:	68d9      	ldr	r1, [r3, #12]
 801ea90:	f000 ff46 	bl	801f920 <_free_r>
 801ea94:	69e3      	ldr	r3, [r4, #28]
 801ea96:	6819      	ldr	r1, [r3, #0]
 801ea98:	b111      	cbz	r1, 801eaa0 <_reclaim_reent+0x3c>
 801ea9a:	4620      	mov	r0, r4
 801ea9c:	f000 ff40 	bl	801f920 <_free_r>
 801eaa0:	6961      	ldr	r1, [r4, #20]
 801eaa2:	b111      	cbz	r1, 801eaaa <_reclaim_reent+0x46>
 801eaa4:	4620      	mov	r0, r4
 801eaa6:	f000 ff3b 	bl	801f920 <_free_r>
 801eaaa:	69e1      	ldr	r1, [r4, #28]
 801eaac:	b111      	cbz	r1, 801eab4 <_reclaim_reent+0x50>
 801eaae:	4620      	mov	r0, r4
 801eab0:	f000 ff36 	bl	801f920 <_free_r>
 801eab4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801eab6:	b111      	cbz	r1, 801eabe <_reclaim_reent+0x5a>
 801eab8:	4620      	mov	r0, r4
 801eaba:	f000 ff31 	bl	801f920 <_free_r>
 801eabe:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801eac0:	b111      	cbz	r1, 801eac8 <_reclaim_reent+0x64>
 801eac2:	4620      	mov	r0, r4
 801eac4:	f000 ff2c 	bl	801f920 <_free_r>
 801eac8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 801eaca:	b111      	cbz	r1, 801ead2 <_reclaim_reent+0x6e>
 801eacc:	4620      	mov	r0, r4
 801eace:	f000 ff27 	bl	801f920 <_free_r>
 801ead2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 801ead4:	b111      	cbz	r1, 801eadc <_reclaim_reent+0x78>
 801ead6:	4620      	mov	r0, r4
 801ead8:	f000 ff22 	bl	801f920 <_free_r>
 801eadc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 801eade:	b111      	cbz	r1, 801eae6 <_reclaim_reent+0x82>
 801eae0:	4620      	mov	r0, r4
 801eae2:	f000 ff1d 	bl	801f920 <_free_r>
 801eae6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 801eae8:	b111      	cbz	r1, 801eaf0 <_reclaim_reent+0x8c>
 801eaea:	4620      	mov	r0, r4
 801eaec:	f000 ff18 	bl	801f920 <_free_r>
 801eaf0:	6a23      	ldr	r3, [r4, #32]
 801eaf2:	b14b      	cbz	r3, 801eb08 <_reclaim_reent+0xa4>
 801eaf4:	4620      	mov	r0, r4
 801eaf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801eafa:	4718      	bx	r3
 801eafc:	680e      	ldr	r6, [r1, #0]
 801eafe:	4620      	mov	r0, r4
 801eb00:	f000 ff0e 	bl	801f920 <_free_r>
 801eb04:	4631      	mov	r1, r6
 801eb06:	e7bb      	b.n	801ea80 <_reclaim_reent+0x1c>
 801eb08:	bd70      	pop	{r4, r5, r6, pc}
 801eb0a:	bf00      	nop
 801eb0c:	2000005c 	.word	0x2000005c

0801eb10 <_lseek_r>:
 801eb10:	b538      	push	{r3, r4, r5, lr}
 801eb12:	4d07      	ldr	r5, [pc, #28]	@ (801eb30 <_lseek_r+0x20>)
 801eb14:	4604      	mov	r4, r0
 801eb16:	4608      	mov	r0, r1
 801eb18:	4611      	mov	r1, r2
 801eb1a:	2200      	movs	r2, #0
 801eb1c:	602a      	str	r2, [r5, #0]
 801eb1e:	461a      	mov	r2, r3
 801eb20:	f7e3 fb3b 	bl	800219a <_lseek>
 801eb24:	1c43      	adds	r3, r0, #1
 801eb26:	d102      	bne.n	801eb2e <_lseek_r+0x1e>
 801eb28:	682b      	ldr	r3, [r5, #0]
 801eb2a:	b103      	cbz	r3, 801eb2e <_lseek_r+0x1e>
 801eb2c:	6023      	str	r3, [r4, #0]
 801eb2e:	bd38      	pop	{r3, r4, r5, pc}
 801eb30:	2001b2f8 	.word	0x2001b2f8

0801eb34 <_read_r>:
 801eb34:	b538      	push	{r3, r4, r5, lr}
 801eb36:	4d07      	ldr	r5, [pc, #28]	@ (801eb54 <_read_r+0x20>)
 801eb38:	4604      	mov	r4, r0
 801eb3a:	4608      	mov	r0, r1
 801eb3c:	4611      	mov	r1, r2
 801eb3e:	2200      	movs	r2, #0
 801eb40:	602a      	str	r2, [r5, #0]
 801eb42:	461a      	mov	r2, r3
 801eb44:	f7e3 fae5 	bl	8002112 <_read>
 801eb48:	1c43      	adds	r3, r0, #1
 801eb4a:	d102      	bne.n	801eb52 <_read_r+0x1e>
 801eb4c:	682b      	ldr	r3, [r5, #0]
 801eb4e:	b103      	cbz	r3, 801eb52 <_read_r+0x1e>
 801eb50:	6023      	str	r3, [r4, #0]
 801eb52:	bd38      	pop	{r3, r4, r5, pc}
 801eb54:	2001b2f8 	.word	0x2001b2f8

0801eb58 <_kill_r>:
 801eb58:	b538      	push	{r3, r4, r5, lr}
 801eb5a:	4d07      	ldr	r5, [pc, #28]	@ (801eb78 <_kill_r+0x20>)
 801eb5c:	2300      	movs	r3, #0
 801eb5e:	4604      	mov	r4, r0
 801eb60:	4608      	mov	r0, r1
 801eb62:	4611      	mov	r1, r2
 801eb64:	602b      	str	r3, [r5, #0]
 801eb66:	f7e3 fab7 	bl	80020d8 <_kill>
 801eb6a:	1c43      	adds	r3, r0, #1
 801eb6c:	d102      	bne.n	801eb74 <_kill_r+0x1c>
 801eb6e:	682b      	ldr	r3, [r5, #0]
 801eb70:	b103      	cbz	r3, 801eb74 <_kill_r+0x1c>
 801eb72:	6023      	str	r3, [r4, #0]
 801eb74:	bd38      	pop	{r3, r4, r5, pc}
 801eb76:	bf00      	nop
 801eb78:	2001b2f8 	.word	0x2001b2f8

0801eb7c <_getpid_r>:
 801eb7c:	f7e3 baa4 	b.w	80020c8 <_getpid>

0801eb80 <_sbrk_r>:
 801eb80:	b538      	push	{r3, r4, r5, lr}
 801eb82:	4d06      	ldr	r5, [pc, #24]	@ (801eb9c <_sbrk_r+0x1c>)
 801eb84:	2300      	movs	r3, #0
 801eb86:	4604      	mov	r4, r0
 801eb88:	4608      	mov	r0, r1
 801eb8a:	602b      	str	r3, [r5, #0]
 801eb8c:	f7e3 fb12 	bl	80021b4 <_sbrk>
 801eb90:	1c43      	adds	r3, r0, #1
 801eb92:	d102      	bne.n	801eb9a <_sbrk_r+0x1a>
 801eb94:	682b      	ldr	r3, [r5, #0]
 801eb96:	b103      	cbz	r3, 801eb9a <_sbrk_r+0x1a>
 801eb98:	6023      	str	r3, [r4, #0]
 801eb9a:	bd38      	pop	{r3, r4, r5, pc}
 801eb9c:	2001b2f8 	.word	0x2001b2f8

0801eba0 <_write_r>:
 801eba0:	b538      	push	{r3, r4, r5, lr}
 801eba2:	4d07      	ldr	r5, [pc, #28]	@ (801ebc0 <_write_r+0x20>)
 801eba4:	4604      	mov	r4, r0
 801eba6:	4608      	mov	r0, r1
 801eba8:	4611      	mov	r1, r2
 801ebaa:	2200      	movs	r2, #0
 801ebac:	602a      	str	r2, [r5, #0]
 801ebae:	461a      	mov	r2, r3
 801ebb0:	f7e2 fbca 	bl	8001348 <_write>
 801ebb4:	1c43      	adds	r3, r0, #1
 801ebb6:	d102      	bne.n	801ebbe <_write_r+0x1e>
 801ebb8:	682b      	ldr	r3, [r5, #0]
 801ebba:	b103      	cbz	r3, 801ebbe <_write_r+0x1e>
 801ebbc:	6023      	str	r3, [r4, #0]
 801ebbe:	bd38      	pop	{r3, r4, r5, pc}
 801ebc0:	2001b2f8 	.word	0x2001b2f8

0801ebc4 <__errno>:
 801ebc4:	4b01      	ldr	r3, [pc, #4]	@ (801ebcc <__errno+0x8>)
 801ebc6:	6818      	ldr	r0, [r3, #0]
 801ebc8:	4770      	bx	lr
 801ebca:	bf00      	nop
 801ebcc:	2000005c 	.word	0x2000005c

0801ebd0 <__libc_init_array>:
 801ebd0:	b570      	push	{r4, r5, r6, lr}
 801ebd2:	4d0d      	ldr	r5, [pc, #52]	@ (801ec08 <__libc_init_array+0x38>)
 801ebd4:	4c0d      	ldr	r4, [pc, #52]	@ (801ec0c <__libc_init_array+0x3c>)
 801ebd6:	1b64      	subs	r4, r4, r5
 801ebd8:	10a4      	asrs	r4, r4, #2
 801ebda:	2600      	movs	r6, #0
 801ebdc:	42a6      	cmp	r6, r4
 801ebde:	d109      	bne.n	801ebf4 <__libc_init_array+0x24>
 801ebe0:	4d0b      	ldr	r5, [pc, #44]	@ (801ec10 <__libc_init_array+0x40>)
 801ebe2:	4c0c      	ldr	r4, [pc, #48]	@ (801ec14 <__libc_init_array+0x44>)
 801ebe4:	f003 f850 	bl	8021c88 <_init>
 801ebe8:	1b64      	subs	r4, r4, r5
 801ebea:	10a4      	asrs	r4, r4, #2
 801ebec:	2600      	movs	r6, #0
 801ebee:	42a6      	cmp	r6, r4
 801ebf0:	d105      	bne.n	801ebfe <__libc_init_array+0x2e>
 801ebf2:	bd70      	pop	{r4, r5, r6, pc}
 801ebf4:	f855 3b04 	ldr.w	r3, [r5], #4
 801ebf8:	4798      	blx	r3
 801ebfa:	3601      	adds	r6, #1
 801ebfc:	e7ee      	b.n	801ebdc <__libc_init_array+0xc>
 801ebfe:	f855 3b04 	ldr.w	r3, [r5], #4
 801ec02:	4798      	blx	r3
 801ec04:	3601      	adds	r6, #1
 801ec06:	e7f2      	b.n	801ebee <__libc_init_array+0x1e>
 801ec08:	0802578c 	.word	0x0802578c
 801ec0c:	0802578c 	.word	0x0802578c
 801ec10:	0802578c 	.word	0x0802578c
 801ec14:	08025790 	.word	0x08025790

0801ec18 <__retarget_lock_init_recursive>:
 801ec18:	4770      	bx	lr

0801ec1a <__retarget_lock_acquire_recursive>:
 801ec1a:	4770      	bx	lr

0801ec1c <__retarget_lock_release_recursive>:
 801ec1c:	4770      	bx	lr

0801ec1e <memcpy>:
 801ec1e:	440a      	add	r2, r1
 801ec20:	4291      	cmp	r1, r2
 801ec22:	f100 33ff 	add.w	r3, r0, #4294967295
 801ec26:	d100      	bne.n	801ec2a <memcpy+0xc>
 801ec28:	4770      	bx	lr
 801ec2a:	b510      	push	{r4, lr}
 801ec2c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ec30:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ec34:	4291      	cmp	r1, r2
 801ec36:	d1f9      	bne.n	801ec2c <memcpy+0xe>
 801ec38:	bd10      	pop	{r4, pc}
	...

0801ec3c <nanf>:
 801ec3c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801ec44 <nanf+0x8>
 801ec40:	4770      	bx	lr
 801ec42:	bf00      	nop
 801ec44:	7fc00000 	.word	0x7fc00000

0801ec48 <__assert_func>:
 801ec48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801ec4a:	4614      	mov	r4, r2
 801ec4c:	461a      	mov	r2, r3
 801ec4e:	4b09      	ldr	r3, [pc, #36]	@ (801ec74 <__assert_func+0x2c>)
 801ec50:	681b      	ldr	r3, [r3, #0]
 801ec52:	4605      	mov	r5, r0
 801ec54:	68d8      	ldr	r0, [r3, #12]
 801ec56:	b954      	cbnz	r4, 801ec6e <__assert_func+0x26>
 801ec58:	4b07      	ldr	r3, [pc, #28]	@ (801ec78 <__assert_func+0x30>)
 801ec5a:	461c      	mov	r4, r3
 801ec5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801ec60:	9100      	str	r1, [sp, #0]
 801ec62:	462b      	mov	r3, r5
 801ec64:	4905      	ldr	r1, [pc, #20]	@ (801ec7c <__assert_func+0x34>)
 801ec66:	f002 fc03 	bl	8021470 <fiprintf>
 801ec6a:	f7fe fba7 	bl	801d3bc <abort>
 801ec6e:	4b04      	ldr	r3, [pc, #16]	@ (801ec80 <__assert_func+0x38>)
 801ec70:	e7f4      	b.n	801ec5c <__assert_func+0x14>
 801ec72:	bf00      	nop
 801ec74:	2000005c 	.word	0x2000005c
 801ec78:	080254e2 	.word	0x080254e2
 801ec7c:	080254b4 	.word	0x080254b4
 801ec80:	080254a7 	.word	0x080254a7

0801ec84 <quorem>:
 801ec84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ec88:	6903      	ldr	r3, [r0, #16]
 801ec8a:	690c      	ldr	r4, [r1, #16]
 801ec8c:	42a3      	cmp	r3, r4
 801ec8e:	4607      	mov	r7, r0
 801ec90:	db7e      	blt.n	801ed90 <quorem+0x10c>
 801ec92:	3c01      	subs	r4, #1
 801ec94:	f101 0814 	add.w	r8, r1, #20
 801ec98:	00a3      	lsls	r3, r4, #2
 801ec9a:	f100 0514 	add.w	r5, r0, #20
 801ec9e:	9300      	str	r3, [sp, #0]
 801eca0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801eca4:	9301      	str	r3, [sp, #4]
 801eca6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801ecaa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ecae:	3301      	adds	r3, #1
 801ecb0:	429a      	cmp	r2, r3
 801ecb2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801ecb6:	fbb2 f6f3 	udiv	r6, r2, r3
 801ecba:	d32e      	bcc.n	801ed1a <quorem+0x96>
 801ecbc:	f04f 0a00 	mov.w	sl, #0
 801ecc0:	46c4      	mov	ip, r8
 801ecc2:	46ae      	mov	lr, r5
 801ecc4:	46d3      	mov	fp, sl
 801ecc6:	f85c 3b04 	ldr.w	r3, [ip], #4
 801ecca:	b298      	uxth	r0, r3
 801eccc:	fb06 a000 	mla	r0, r6, r0, sl
 801ecd0:	0c02      	lsrs	r2, r0, #16
 801ecd2:	0c1b      	lsrs	r3, r3, #16
 801ecd4:	fb06 2303 	mla	r3, r6, r3, r2
 801ecd8:	f8de 2000 	ldr.w	r2, [lr]
 801ecdc:	b280      	uxth	r0, r0
 801ecde:	b292      	uxth	r2, r2
 801ece0:	1a12      	subs	r2, r2, r0
 801ece2:	445a      	add	r2, fp
 801ece4:	f8de 0000 	ldr.w	r0, [lr]
 801ece8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801ecec:	b29b      	uxth	r3, r3
 801ecee:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801ecf2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 801ecf6:	b292      	uxth	r2, r2
 801ecf8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 801ecfc:	45e1      	cmp	r9, ip
 801ecfe:	f84e 2b04 	str.w	r2, [lr], #4
 801ed02:	ea4f 4b23 	mov.w	fp, r3, asr #16
 801ed06:	d2de      	bcs.n	801ecc6 <quorem+0x42>
 801ed08:	9b00      	ldr	r3, [sp, #0]
 801ed0a:	58eb      	ldr	r3, [r5, r3]
 801ed0c:	b92b      	cbnz	r3, 801ed1a <quorem+0x96>
 801ed0e:	9b01      	ldr	r3, [sp, #4]
 801ed10:	3b04      	subs	r3, #4
 801ed12:	429d      	cmp	r5, r3
 801ed14:	461a      	mov	r2, r3
 801ed16:	d32f      	bcc.n	801ed78 <quorem+0xf4>
 801ed18:	613c      	str	r4, [r7, #16]
 801ed1a:	4638      	mov	r0, r7
 801ed1c:	f001 f90e 	bl	801ff3c <__mcmp>
 801ed20:	2800      	cmp	r0, #0
 801ed22:	db25      	blt.n	801ed70 <quorem+0xec>
 801ed24:	4629      	mov	r1, r5
 801ed26:	2000      	movs	r0, #0
 801ed28:	f858 2b04 	ldr.w	r2, [r8], #4
 801ed2c:	f8d1 c000 	ldr.w	ip, [r1]
 801ed30:	fa1f fe82 	uxth.w	lr, r2
 801ed34:	fa1f f38c 	uxth.w	r3, ip
 801ed38:	eba3 030e 	sub.w	r3, r3, lr
 801ed3c:	4403      	add	r3, r0
 801ed3e:	0c12      	lsrs	r2, r2, #16
 801ed40:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 801ed44:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 801ed48:	b29b      	uxth	r3, r3
 801ed4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801ed4e:	45c1      	cmp	r9, r8
 801ed50:	f841 3b04 	str.w	r3, [r1], #4
 801ed54:	ea4f 4022 	mov.w	r0, r2, asr #16
 801ed58:	d2e6      	bcs.n	801ed28 <quorem+0xa4>
 801ed5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801ed5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801ed62:	b922      	cbnz	r2, 801ed6e <quorem+0xea>
 801ed64:	3b04      	subs	r3, #4
 801ed66:	429d      	cmp	r5, r3
 801ed68:	461a      	mov	r2, r3
 801ed6a:	d30b      	bcc.n	801ed84 <quorem+0x100>
 801ed6c:	613c      	str	r4, [r7, #16]
 801ed6e:	3601      	adds	r6, #1
 801ed70:	4630      	mov	r0, r6
 801ed72:	b003      	add	sp, #12
 801ed74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed78:	6812      	ldr	r2, [r2, #0]
 801ed7a:	3b04      	subs	r3, #4
 801ed7c:	2a00      	cmp	r2, #0
 801ed7e:	d1cb      	bne.n	801ed18 <quorem+0x94>
 801ed80:	3c01      	subs	r4, #1
 801ed82:	e7c6      	b.n	801ed12 <quorem+0x8e>
 801ed84:	6812      	ldr	r2, [r2, #0]
 801ed86:	3b04      	subs	r3, #4
 801ed88:	2a00      	cmp	r2, #0
 801ed8a:	d1ef      	bne.n	801ed6c <quorem+0xe8>
 801ed8c:	3c01      	subs	r4, #1
 801ed8e:	e7ea      	b.n	801ed66 <quorem+0xe2>
 801ed90:	2000      	movs	r0, #0
 801ed92:	e7ee      	b.n	801ed72 <quorem+0xee>
 801ed94:	0000      	movs	r0, r0
	...

0801ed98 <_dtoa_r>:
 801ed98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed9c:	69c7      	ldr	r7, [r0, #28]
 801ed9e:	b099      	sub	sp, #100	@ 0x64
 801eda0:	ed8d 0b02 	vstr	d0, [sp, #8]
 801eda4:	ec55 4b10 	vmov	r4, r5, d0
 801eda8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 801edaa:	9109      	str	r1, [sp, #36]	@ 0x24
 801edac:	4683      	mov	fp, r0
 801edae:	920e      	str	r2, [sp, #56]	@ 0x38
 801edb0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801edb2:	b97f      	cbnz	r7, 801edd4 <_dtoa_r+0x3c>
 801edb4:	2010      	movs	r0, #16
 801edb6:	f7fe fb0d 	bl	801d3d4 <malloc>
 801edba:	4602      	mov	r2, r0
 801edbc:	f8cb 001c 	str.w	r0, [fp, #28]
 801edc0:	b920      	cbnz	r0, 801edcc <_dtoa_r+0x34>
 801edc2:	4ba7      	ldr	r3, [pc, #668]	@ (801f060 <_dtoa_r+0x2c8>)
 801edc4:	21ef      	movs	r1, #239	@ 0xef
 801edc6:	48a7      	ldr	r0, [pc, #668]	@ (801f064 <_dtoa_r+0x2cc>)
 801edc8:	f7ff ff3e 	bl	801ec48 <__assert_func>
 801edcc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801edd0:	6007      	str	r7, [r0, #0]
 801edd2:	60c7      	str	r7, [r0, #12]
 801edd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 801edd8:	6819      	ldr	r1, [r3, #0]
 801edda:	b159      	cbz	r1, 801edf4 <_dtoa_r+0x5c>
 801eddc:	685a      	ldr	r2, [r3, #4]
 801edde:	604a      	str	r2, [r1, #4]
 801ede0:	2301      	movs	r3, #1
 801ede2:	4093      	lsls	r3, r2
 801ede4:	608b      	str	r3, [r1, #8]
 801ede6:	4658      	mov	r0, fp
 801ede8:	f000 fe24 	bl	801fa34 <_Bfree>
 801edec:	f8db 301c 	ldr.w	r3, [fp, #28]
 801edf0:	2200      	movs	r2, #0
 801edf2:	601a      	str	r2, [r3, #0]
 801edf4:	1e2b      	subs	r3, r5, #0
 801edf6:	bfb9      	ittee	lt
 801edf8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 801edfc:	9303      	strlt	r3, [sp, #12]
 801edfe:	2300      	movge	r3, #0
 801ee00:	6033      	strge	r3, [r6, #0]
 801ee02:	9f03      	ldr	r7, [sp, #12]
 801ee04:	4b98      	ldr	r3, [pc, #608]	@ (801f068 <_dtoa_r+0x2d0>)
 801ee06:	bfbc      	itt	lt
 801ee08:	2201      	movlt	r2, #1
 801ee0a:	6032      	strlt	r2, [r6, #0]
 801ee0c:	43bb      	bics	r3, r7
 801ee0e:	d112      	bne.n	801ee36 <_dtoa_r+0x9e>
 801ee10:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ee12:	f242 730f 	movw	r3, #9999	@ 0x270f
 801ee16:	6013      	str	r3, [r2, #0]
 801ee18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801ee1c:	4323      	orrs	r3, r4
 801ee1e:	f000 854d 	beq.w	801f8bc <_dtoa_r+0xb24>
 801ee22:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ee24:	f8df a254 	ldr.w	sl, [pc, #596]	@ 801f07c <_dtoa_r+0x2e4>
 801ee28:	2b00      	cmp	r3, #0
 801ee2a:	f000 854f 	beq.w	801f8cc <_dtoa_r+0xb34>
 801ee2e:	f10a 0303 	add.w	r3, sl, #3
 801ee32:	f000 bd49 	b.w	801f8c8 <_dtoa_r+0xb30>
 801ee36:	ed9d 7b02 	vldr	d7, [sp, #8]
 801ee3a:	2200      	movs	r2, #0
 801ee3c:	ec51 0b17 	vmov	r0, r1, d7
 801ee40:	2300      	movs	r3, #0
 801ee42:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 801ee46:	f7e1 fe3f 	bl	8000ac8 <__aeabi_dcmpeq>
 801ee4a:	4680      	mov	r8, r0
 801ee4c:	b158      	cbz	r0, 801ee66 <_dtoa_r+0xce>
 801ee4e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801ee50:	2301      	movs	r3, #1
 801ee52:	6013      	str	r3, [r2, #0]
 801ee54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ee56:	b113      	cbz	r3, 801ee5e <_dtoa_r+0xc6>
 801ee58:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ee5a:	4b84      	ldr	r3, [pc, #528]	@ (801f06c <_dtoa_r+0x2d4>)
 801ee5c:	6013      	str	r3, [r2, #0]
 801ee5e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 801f080 <_dtoa_r+0x2e8>
 801ee62:	f000 bd33 	b.w	801f8cc <_dtoa_r+0xb34>
 801ee66:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 801ee6a:	aa16      	add	r2, sp, #88	@ 0x58
 801ee6c:	a917      	add	r1, sp, #92	@ 0x5c
 801ee6e:	4658      	mov	r0, fp
 801ee70:	f001 f984 	bl	802017c <__d2b>
 801ee74:	f3c7 560a 	ubfx	r6, r7, #20, #11
 801ee78:	4681      	mov	r9, r0
 801ee7a:	2e00      	cmp	r6, #0
 801ee7c:	d077      	beq.n	801ef6e <_dtoa_r+0x1d6>
 801ee7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ee80:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 801ee84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801ee88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ee8c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 801ee90:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 801ee94:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 801ee98:	4619      	mov	r1, r3
 801ee9a:	2200      	movs	r2, #0
 801ee9c:	4b74      	ldr	r3, [pc, #464]	@ (801f070 <_dtoa_r+0x2d8>)
 801ee9e:	f7e1 f9f3 	bl	8000288 <__aeabi_dsub>
 801eea2:	a369      	add	r3, pc, #420	@ (adr r3, 801f048 <_dtoa_r+0x2b0>)
 801eea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eea8:	f7e1 fba6 	bl	80005f8 <__aeabi_dmul>
 801eeac:	a368      	add	r3, pc, #416	@ (adr r3, 801f050 <_dtoa_r+0x2b8>)
 801eeae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eeb2:	f7e1 f9eb 	bl	800028c <__adddf3>
 801eeb6:	4604      	mov	r4, r0
 801eeb8:	4630      	mov	r0, r6
 801eeba:	460d      	mov	r5, r1
 801eebc:	f7e1 fb32 	bl	8000524 <__aeabi_i2d>
 801eec0:	a365      	add	r3, pc, #404	@ (adr r3, 801f058 <_dtoa_r+0x2c0>)
 801eec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801eec6:	f7e1 fb97 	bl	80005f8 <__aeabi_dmul>
 801eeca:	4602      	mov	r2, r0
 801eecc:	460b      	mov	r3, r1
 801eece:	4620      	mov	r0, r4
 801eed0:	4629      	mov	r1, r5
 801eed2:	f7e1 f9db 	bl	800028c <__adddf3>
 801eed6:	4604      	mov	r4, r0
 801eed8:	460d      	mov	r5, r1
 801eeda:	f7e1 fe3d 	bl	8000b58 <__aeabi_d2iz>
 801eede:	2200      	movs	r2, #0
 801eee0:	4607      	mov	r7, r0
 801eee2:	2300      	movs	r3, #0
 801eee4:	4620      	mov	r0, r4
 801eee6:	4629      	mov	r1, r5
 801eee8:	f7e1 fdf8 	bl	8000adc <__aeabi_dcmplt>
 801eeec:	b140      	cbz	r0, 801ef00 <_dtoa_r+0x168>
 801eeee:	4638      	mov	r0, r7
 801eef0:	f7e1 fb18 	bl	8000524 <__aeabi_i2d>
 801eef4:	4622      	mov	r2, r4
 801eef6:	462b      	mov	r3, r5
 801eef8:	f7e1 fde6 	bl	8000ac8 <__aeabi_dcmpeq>
 801eefc:	b900      	cbnz	r0, 801ef00 <_dtoa_r+0x168>
 801eefe:	3f01      	subs	r7, #1
 801ef00:	2f16      	cmp	r7, #22
 801ef02:	d851      	bhi.n	801efa8 <_dtoa_r+0x210>
 801ef04:	4b5b      	ldr	r3, [pc, #364]	@ (801f074 <_dtoa_r+0x2dc>)
 801ef06:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801ef0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ef0e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801ef12:	f7e1 fde3 	bl	8000adc <__aeabi_dcmplt>
 801ef16:	2800      	cmp	r0, #0
 801ef18:	d048      	beq.n	801efac <_dtoa_r+0x214>
 801ef1a:	3f01      	subs	r7, #1
 801ef1c:	2300      	movs	r3, #0
 801ef1e:	9312      	str	r3, [sp, #72]	@ 0x48
 801ef20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ef22:	1b9b      	subs	r3, r3, r6
 801ef24:	1e5a      	subs	r2, r3, #1
 801ef26:	bf44      	itt	mi
 801ef28:	f1c3 0801 	rsbmi	r8, r3, #1
 801ef2c:	2300      	movmi	r3, #0
 801ef2e:	9208      	str	r2, [sp, #32]
 801ef30:	bf54      	ite	pl
 801ef32:	f04f 0800 	movpl.w	r8, #0
 801ef36:	9308      	strmi	r3, [sp, #32]
 801ef38:	2f00      	cmp	r7, #0
 801ef3a:	db39      	blt.n	801efb0 <_dtoa_r+0x218>
 801ef3c:	9b08      	ldr	r3, [sp, #32]
 801ef3e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801ef40:	443b      	add	r3, r7
 801ef42:	9308      	str	r3, [sp, #32]
 801ef44:	2300      	movs	r3, #0
 801ef46:	930a      	str	r3, [sp, #40]	@ 0x28
 801ef48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef4a:	2b09      	cmp	r3, #9
 801ef4c:	d864      	bhi.n	801f018 <_dtoa_r+0x280>
 801ef4e:	2b05      	cmp	r3, #5
 801ef50:	bfc4      	itt	gt
 801ef52:	3b04      	subgt	r3, #4
 801ef54:	9309      	strgt	r3, [sp, #36]	@ 0x24
 801ef56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef58:	f1a3 0302 	sub.w	r3, r3, #2
 801ef5c:	bfcc      	ite	gt
 801ef5e:	2400      	movgt	r4, #0
 801ef60:	2401      	movle	r4, #1
 801ef62:	2b03      	cmp	r3, #3
 801ef64:	d863      	bhi.n	801f02e <_dtoa_r+0x296>
 801ef66:	e8df f003 	tbb	[pc, r3]
 801ef6a:	372a      	.short	0x372a
 801ef6c:	5535      	.short	0x5535
 801ef6e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 801ef72:	441e      	add	r6, r3
 801ef74:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 801ef78:	2b20      	cmp	r3, #32
 801ef7a:	bfc1      	itttt	gt
 801ef7c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 801ef80:	409f      	lslgt	r7, r3
 801ef82:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 801ef86:	fa24 f303 	lsrgt.w	r3, r4, r3
 801ef8a:	bfd6      	itet	le
 801ef8c:	f1c3 0320 	rsble	r3, r3, #32
 801ef90:	ea47 0003 	orrgt.w	r0, r7, r3
 801ef94:	fa04 f003 	lslle.w	r0, r4, r3
 801ef98:	f7e1 fab4 	bl	8000504 <__aeabi_ui2d>
 801ef9c:	2201      	movs	r2, #1
 801ef9e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 801efa2:	3e01      	subs	r6, #1
 801efa4:	9214      	str	r2, [sp, #80]	@ 0x50
 801efa6:	e777      	b.n	801ee98 <_dtoa_r+0x100>
 801efa8:	2301      	movs	r3, #1
 801efaa:	e7b8      	b.n	801ef1e <_dtoa_r+0x186>
 801efac:	9012      	str	r0, [sp, #72]	@ 0x48
 801efae:	e7b7      	b.n	801ef20 <_dtoa_r+0x188>
 801efb0:	427b      	negs	r3, r7
 801efb2:	930a      	str	r3, [sp, #40]	@ 0x28
 801efb4:	2300      	movs	r3, #0
 801efb6:	eba8 0807 	sub.w	r8, r8, r7
 801efba:	930f      	str	r3, [sp, #60]	@ 0x3c
 801efbc:	e7c4      	b.n	801ef48 <_dtoa_r+0x1b0>
 801efbe:	2300      	movs	r3, #0
 801efc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801efc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801efc4:	2b00      	cmp	r3, #0
 801efc6:	dc35      	bgt.n	801f034 <_dtoa_r+0x29c>
 801efc8:	2301      	movs	r3, #1
 801efca:	9300      	str	r3, [sp, #0]
 801efcc:	9307      	str	r3, [sp, #28]
 801efce:	461a      	mov	r2, r3
 801efd0:	920e      	str	r2, [sp, #56]	@ 0x38
 801efd2:	e00b      	b.n	801efec <_dtoa_r+0x254>
 801efd4:	2301      	movs	r3, #1
 801efd6:	e7f3      	b.n	801efc0 <_dtoa_r+0x228>
 801efd8:	2300      	movs	r3, #0
 801efda:	930b      	str	r3, [sp, #44]	@ 0x2c
 801efdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801efde:	18fb      	adds	r3, r7, r3
 801efe0:	9300      	str	r3, [sp, #0]
 801efe2:	3301      	adds	r3, #1
 801efe4:	2b01      	cmp	r3, #1
 801efe6:	9307      	str	r3, [sp, #28]
 801efe8:	bfb8      	it	lt
 801efea:	2301      	movlt	r3, #1
 801efec:	f8db 001c 	ldr.w	r0, [fp, #28]
 801eff0:	2100      	movs	r1, #0
 801eff2:	2204      	movs	r2, #4
 801eff4:	f102 0514 	add.w	r5, r2, #20
 801eff8:	429d      	cmp	r5, r3
 801effa:	d91f      	bls.n	801f03c <_dtoa_r+0x2a4>
 801effc:	6041      	str	r1, [r0, #4]
 801effe:	4658      	mov	r0, fp
 801f000:	f000 fcd8 	bl	801f9b4 <_Balloc>
 801f004:	4682      	mov	sl, r0
 801f006:	2800      	cmp	r0, #0
 801f008:	d13c      	bne.n	801f084 <_dtoa_r+0x2ec>
 801f00a:	4b1b      	ldr	r3, [pc, #108]	@ (801f078 <_dtoa_r+0x2e0>)
 801f00c:	4602      	mov	r2, r0
 801f00e:	f240 11af 	movw	r1, #431	@ 0x1af
 801f012:	e6d8      	b.n	801edc6 <_dtoa_r+0x2e>
 801f014:	2301      	movs	r3, #1
 801f016:	e7e0      	b.n	801efda <_dtoa_r+0x242>
 801f018:	2401      	movs	r4, #1
 801f01a:	2300      	movs	r3, #0
 801f01c:	9309      	str	r3, [sp, #36]	@ 0x24
 801f01e:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f020:	f04f 33ff 	mov.w	r3, #4294967295
 801f024:	9300      	str	r3, [sp, #0]
 801f026:	9307      	str	r3, [sp, #28]
 801f028:	2200      	movs	r2, #0
 801f02a:	2312      	movs	r3, #18
 801f02c:	e7d0      	b.n	801efd0 <_dtoa_r+0x238>
 801f02e:	2301      	movs	r3, #1
 801f030:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f032:	e7f5      	b.n	801f020 <_dtoa_r+0x288>
 801f034:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f036:	9300      	str	r3, [sp, #0]
 801f038:	9307      	str	r3, [sp, #28]
 801f03a:	e7d7      	b.n	801efec <_dtoa_r+0x254>
 801f03c:	3101      	adds	r1, #1
 801f03e:	0052      	lsls	r2, r2, #1
 801f040:	e7d8      	b.n	801eff4 <_dtoa_r+0x25c>
 801f042:	bf00      	nop
 801f044:	f3af 8000 	nop.w
 801f048:	636f4361 	.word	0x636f4361
 801f04c:	3fd287a7 	.word	0x3fd287a7
 801f050:	8b60c8b3 	.word	0x8b60c8b3
 801f054:	3fc68a28 	.word	0x3fc68a28
 801f058:	509f79fb 	.word	0x509f79fb
 801f05c:	3fd34413 	.word	0x3fd34413
 801f060:	080252fe 	.word	0x080252fe
 801f064:	080254f0 	.word	0x080254f0
 801f068:	7ff00000 	.word	0x7ff00000
 801f06c:	0802547f 	.word	0x0802547f
 801f070:	3ff80000 	.word	0x3ff80000
 801f074:	080255e8 	.word	0x080255e8
 801f078:	08025548 	.word	0x08025548
 801f07c:	080254ec 	.word	0x080254ec
 801f080:	0802547e 	.word	0x0802547e
 801f084:	f8db 301c 	ldr.w	r3, [fp, #28]
 801f088:	6018      	str	r0, [r3, #0]
 801f08a:	9b07      	ldr	r3, [sp, #28]
 801f08c:	2b0e      	cmp	r3, #14
 801f08e:	f200 80a4 	bhi.w	801f1da <_dtoa_r+0x442>
 801f092:	2c00      	cmp	r4, #0
 801f094:	f000 80a1 	beq.w	801f1da <_dtoa_r+0x442>
 801f098:	2f00      	cmp	r7, #0
 801f09a:	dd33      	ble.n	801f104 <_dtoa_r+0x36c>
 801f09c:	4bad      	ldr	r3, [pc, #692]	@ (801f354 <_dtoa_r+0x5bc>)
 801f09e:	f007 020f 	and.w	r2, r7, #15
 801f0a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f0a6:	ed93 7b00 	vldr	d7, [r3]
 801f0aa:	05f8      	lsls	r0, r7, #23
 801f0ac:	ed8d 7b04 	vstr	d7, [sp, #16]
 801f0b0:	ea4f 1427 	mov.w	r4, r7, asr #4
 801f0b4:	d516      	bpl.n	801f0e4 <_dtoa_r+0x34c>
 801f0b6:	4ba8      	ldr	r3, [pc, #672]	@ (801f358 <_dtoa_r+0x5c0>)
 801f0b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f0bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801f0c0:	f7e1 fbc4 	bl	800084c <__aeabi_ddiv>
 801f0c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f0c8:	f004 040f 	and.w	r4, r4, #15
 801f0cc:	2603      	movs	r6, #3
 801f0ce:	4da2      	ldr	r5, [pc, #648]	@ (801f358 <_dtoa_r+0x5c0>)
 801f0d0:	b954      	cbnz	r4, 801f0e8 <_dtoa_r+0x350>
 801f0d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801f0d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f0da:	f7e1 fbb7 	bl	800084c <__aeabi_ddiv>
 801f0de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f0e2:	e028      	b.n	801f136 <_dtoa_r+0x39e>
 801f0e4:	2602      	movs	r6, #2
 801f0e6:	e7f2      	b.n	801f0ce <_dtoa_r+0x336>
 801f0e8:	07e1      	lsls	r1, r4, #31
 801f0ea:	d508      	bpl.n	801f0fe <_dtoa_r+0x366>
 801f0ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801f0f0:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f0f4:	f7e1 fa80 	bl	80005f8 <__aeabi_dmul>
 801f0f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801f0fc:	3601      	adds	r6, #1
 801f0fe:	1064      	asrs	r4, r4, #1
 801f100:	3508      	adds	r5, #8
 801f102:	e7e5      	b.n	801f0d0 <_dtoa_r+0x338>
 801f104:	f000 80d2 	beq.w	801f2ac <_dtoa_r+0x514>
 801f108:	427c      	negs	r4, r7
 801f10a:	4b92      	ldr	r3, [pc, #584]	@ (801f354 <_dtoa_r+0x5bc>)
 801f10c:	4d92      	ldr	r5, [pc, #584]	@ (801f358 <_dtoa_r+0x5c0>)
 801f10e:	f004 020f 	and.w	r2, r4, #15
 801f112:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801f116:	e9d3 2300 	ldrd	r2, r3, [r3]
 801f11a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 801f11e:	f7e1 fa6b 	bl	80005f8 <__aeabi_dmul>
 801f122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f126:	1124      	asrs	r4, r4, #4
 801f128:	2300      	movs	r3, #0
 801f12a:	2602      	movs	r6, #2
 801f12c:	2c00      	cmp	r4, #0
 801f12e:	f040 80b2 	bne.w	801f296 <_dtoa_r+0x4fe>
 801f132:	2b00      	cmp	r3, #0
 801f134:	d1d3      	bne.n	801f0de <_dtoa_r+0x346>
 801f136:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f138:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f13c:	2b00      	cmp	r3, #0
 801f13e:	f000 80b7 	beq.w	801f2b0 <_dtoa_r+0x518>
 801f142:	4b86      	ldr	r3, [pc, #536]	@ (801f35c <_dtoa_r+0x5c4>)
 801f144:	2200      	movs	r2, #0
 801f146:	4620      	mov	r0, r4
 801f148:	4629      	mov	r1, r5
 801f14a:	f7e1 fcc7 	bl	8000adc <__aeabi_dcmplt>
 801f14e:	2800      	cmp	r0, #0
 801f150:	f000 80ae 	beq.w	801f2b0 <_dtoa_r+0x518>
 801f154:	9b07      	ldr	r3, [sp, #28]
 801f156:	2b00      	cmp	r3, #0
 801f158:	f000 80aa 	beq.w	801f2b0 <_dtoa_r+0x518>
 801f15c:	9b00      	ldr	r3, [sp, #0]
 801f15e:	2b00      	cmp	r3, #0
 801f160:	dd37      	ble.n	801f1d2 <_dtoa_r+0x43a>
 801f162:	1e7b      	subs	r3, r7, #1
 801f164:	9304      	str	r3, [sp, #16]
 801f166:	4620      	mov	r0, r4
 801f168:	4b7d      	ldr	r3, [pc, #500]	@ (801f360 <_dtoa_r+0x5c8>)
 801f16a:	2200      	movs	r2, #0
 801f16c:	4629      	mov	r1, r5
 801f16e:	f7e1 fa43 	bl	80005f8 <__aeabi_dmul>
 801f172:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f176:	9c00      	ldr	r4, [sp, #0]
 801f178:	3601      	adds	r6, #1
 801f17a:	4630      	mov	r0, r6
 801f17c:	f7e1 f9d2 	bl	8000524 <__aeabi_i2d>
 801f180:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f184:	f7e1 fa38 	bl	80005f8 <__aeabi_dmul>
 801f188:	4b76      	ldr	r3, [pc, #472]	@ (801f364 <_dtoa_r+0x5cc>)
 801f18a:	2200      	movs	r2, #0
 801f18c:	f7e1 f87e 	bl	800028c <__adddf3>
 801f190:	4605      	mov	r5, r0
 801f192:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 801f196:	2c00      	cmp	r4, #0
 801f198:	f040 808d 	bne.w	801f2b6 <_dtoa_r+0x51e>
 801f19c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f1a0:	4b71      	ldr	r3, [pc, #452]	@ (801f368 <_dtoa_r+0x5d0>)
 801f1a2:	2200      	movs	r2, #0
 801f1a4:	f7e1 f870 	bl	8000288 <__aeabi_dsub>
 801f1a8:	4602      	mov	r2, r0
 801f1aa:	460b      	mov	r3, r1
 801f1ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f1b0:	462a      	mov	r2, r5
 801f1b2:	4633      	mov	r3, r6
 801f1b4:	f7e1 fcb0 	bl	8000b18 <__aeabi_dcmpgt>
 801f1b8:	2800      	cmp	r0, #0
 801f1ba:	f040 828b 	bne.w	801f6d4 <_dtoa_r+0x93c>
 801f1be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f1c2:	462a      	mov	r2, r5
 801f1c4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 801f1c8:	f7e1 fc88 	bl	8000adc <__aeabi_dcmplt>
 801f1cc:	2800      	cmp	r0, #0
 801f1ce:	f040 8128 	bne.w	801f422 <_dtoa_r+0x68a>
 801f1d2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 801f1d6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 801f1da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801f1dc:	2b00      	cmp	r3, #0
 801f1de:	f2c0 815a 	blt.w	801f496 <_dtoa_r+0x6fe>
 801f1e2:	2f0e      	cmp	r7, #14
 801f1e4:	f300 8157 	bgt.w	801f496 <_dtoa_r+0x6fe>
 801f1e8:	4b5a      	ldr	r3, [pc, #360]	@ (801f354 <_dtoa_r+0x5bc>)
 801f1ea:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 801f1ee:	ed93 7b00 	vldr	d7, [r3]
 801f1f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f1f4:	2b00      	cmp	r3, #0
 801f1f6:	ed8d 7b00 	vstr	d7, [sp]
 801f1fa:	da03      	bge.n	801f204 <_dtoa_r+0x46c>
 801f1fc:	9b07      	ldr	r3, [sp, #28]
 801f1fe:	2b00      	cmp	r3, #0
 801f200:	f340 8101 	ble.w	801f406 <_dtoa_r+0x66e>
 801f204:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 801f208:	4656      	mov	r6, sl
 801f20a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f20e:	4620      	mov	r0, r4
 801f210:	4629      	mov	r1, r5
 801f212:	f7e1 fb1b 	bl	800084c <__aeabi_ddiv>
 801f216:	f7e1 fc9f 	bl	8000b58 <__aeabi_d2iz>
 801f21a:	4680      	mov	r8, r0
 801f21c:	f7e1 f982 	bl	8000524 <__aeabi_i2d>
 801f220:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f224:	f7e1 f9e8 	bl	80005f8 <__aeabi_dmul>
 801f228:	4602      	mov	r2, r0
 801f22a:	460b      	mov	r3, r1
 801f22c:	4620      	mov	r0, r4
 801f22e:	4629      	mov	r1, r5
 801f230:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 801f234:	f7e1 f828 	bl	8000288 <__aeabi_dsub>
 801f238:	f806 4b01 	strb.w	r4, [r6], #1
 801f23c:	9d07      	ldr	r5, [sp, #28]
 801f23e:	eba6 040a 	sub.w	r4, r6, sl
 801f242:	42a5      	cmp	r5, r4
 801f244:	4602      	mov	r2, r0
 801f246:	460b      	mov	r3, r1
 801f248:	f040 8117 	bne.w	801f47a <_dtoa_r+0x6e2>
 801f24c:	f7e1 f81e 	bl	800028c <__adddf3>
 801f250:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f254:	4604      	mov	r4, r0
 801f256:	460d      	mov	r5, r1
 801f258:	f7e1 fc5e 	bl	8000b18 <__aeabi_dcmpgt>
 801f25c:	2800      	cmp	r0, #0
 801f25e:	f040 80f9 	bne.w	801f454 <_dtoa_r+0x6bc>
 801f262:	e9dd 2300 	ldrd	r2, r3, [sp]
 801f266:	4620      	mov	r0, r4
 801f268:	4629      	mov	r1, r5
 801f26a:	f7e1 fc2d 	bl	8000ac8 <__aeabi_dcmpeq>
 801f26e:	b118      	cbz	r0, 801f278 <_dtoa_r+0x4e0>
 801f270:	f018 0f01 	tst.w	r8, #1
 801f274:	f040 80ee 	bne.w	801f454 <_dtoa_r+0x6bc>
 801f278:	4649      	mov	r1, r9
 801f27a:	4658      	mov	r0, fp
 801f27c:	f000 fbda 	bl	801fa34 <_Bfree>
 801f280:	2300      	movs	r3, #0
 801f282:	7033      	strb	r3, [r6, #0]
 801f284:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801f286:	3701      	adds	r7, #1
 801f288:	601f      	str	r7, [r3, #0]
 801f28a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f28c:	2b00      	cmp	r3, #0
 801f28e:	f000 831d 	beq.w	801f8cc <_dtoa_r+0xb34>
 801f292:	601e      	str	r6, [r3, #0]
 801f294:	e31a      	b.n	801f8cc <_dtoa_r+0xb34>
 801f296:	07e2      	lsls	r2, r4, #31
 801f298:	d505      	bpl.n	801f2a6 <_dtoa_r+0x50e>
 801f29a:	e9d5 2300 	ldrd	r2, r3, [r5]
 801f29e:	f7e1 f9ab 	bl	80005f8 <__aeabi_dmul>
 801f2a2:	3601      	adds	r6, #1
 801f2a4:	2301      	movs	r3, #1
 801f2a6:	1064      	asrs	r4, r4, #1
 801f2a8:	3508      	adds	r5, #8
 801f2aa:	e73f      	b.n	801f12c <_dtoa_r+0x394>
 801f2ac:	2602      	movs	r6, #2
 801f2ae:	e742      	b.n	801f136 <_dtoa_r+0x39e>
 801f2b0:	9c07      	ldr	r4, [sp, #28]
 801f2b2:	9704      	str	r7, [sp, #16]
 801f2b4:	e761      	b.n	801f17a <_dtoa_r+0x3e2>
 801f2b6:	4b27      	ldr	r3, [pc, #156]	@ (801f354 <_dtoa_r+0x5bc>)
 801f2b8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f2ba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801f2be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801f2c2:	4454      	add	r4, sl
 801f2c4:	2900      	cmp	r1, #0
 801f2c6:	d053      	beq.n	801f370 <_dtoa_r+0x5d8>
 801f2c8:	4928      	ldr	r1, [pc, #160]	@ (801f36c <_dtoa_r+0x5d4>)
 801f2ca:	2000      	movs	r0, #0
 801f2cc:	f7e1 fabe 	bl	800084c <__aeabi_ddiv>
 801f2d0:	4633      	mov	r3, r6
 801f2d2:	462a      	mov	r2, r5
 801f2d4:	f7e0 ffd8 	bl	8000288 <__aeabi_dsub>
 801f2d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f2dc:	4656      	mov	r6, sl
 801f2de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f2e2:	f7e1 fc39 	bl	8000b58 <__aeabi_d2iz>
 801f2e6:	4605      	mov	r5, r0
 801f2e8:	f7e1 f91c 	bl	8000524 <__aeabi_i2d>
 801f2ec:	4602      	mov	r2, r0
 801f2ee:	460b      	mov	r3, r1
 801f2f0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f2f4:	f7e0 ffc8 	bl	8000288 <__aeabi_dsub>
 801f2f8:	3530      	adds	r5, #48	@ 0x30
 801f2fa:	4602      	mov	r2, r0
 801f2fc:	460b      	mov	r3, r1
 801f2fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f302:	f806 5b01 	strb.w	r5, [r6], #1
 801f306:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f30a:	f7e1 fbe7 	bl	8000adc <__aeabi_dcmplt>
 801f30e:	2800      	cmp	r0, #0
 801f310:	d171      	bne.n	801f3f6 <_dtoa_r+0x65e>
 801f312:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f316:	4911      	ldr	r1, [pc, #68]	@ (801f35c <_dtoa_r+0x5c4>)
 801f318:	2000      	movs	r0, #0
 801f31a:	f7e0 ffb5 	bl	8000288 <__aeabi_dsub>
 801f31e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f322:	f7e1 fbdb 	bl	8000adc <__aeabi_dcmplt>
 801f326:	2800      	cmp	r0, #0
 801f328:	f040 8095 	bne.w	801f456 <_dtoa_r+0x6be>
 801f32c:	42a6      	cmp	r6, r4
 801f32e:	f43f af50 	beq.w	801f1d2 <_dtoa_r+0x43a>
 801f332:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f336:	4b0a      	ldr	r3, [pc, #40]	@ (801f360 <_dtoa_r+0x5c8>)
 801f338:	2200      	movs	r2, #0
 801f33a:	f7e1 f95d 	bl	80005f8 <__aeabi_dmul>
 801f33e:	4b08      	ldr	r3, [pc, #32]	@ (801f360 <_dtoa_r+0x5c8>)
 801f340:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f344:	2200      	movs	r2, #0
 801f346:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f34a:	f7e1 f955 	bl	80005f8 <__aeabi_dmul>
 801f34e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f352:	e7c4      	b.n	801f2de <_dtoa_r+0x546>
 801f354:	080255e8 	.word	0x080255e8
 801f358:	080255c0 	.word	0x080255c0
 801f35c:	3ff00000 	.word	0x3ff00000
 801f360:	40240000 	.word	0x40240000
 801f364:	401c0000 	.word	0x401c0000
 801f368:	40140000 	.word	0x40140000
 801f36c:	3fe00000 	.word	0x3fe00000
 801f370:	4631      	mov	r1, r6
 801f372:	4628      	mov	r0, r5
 801f374:	f7e1 f940 	bl	80005f8 <__aeabi_dmul>
 801f378:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 801f37c:	9415      	str	r4, [sp, #84]	@ 0x54
 801f37e:	4656      	mov	r6, sl
 801f380:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f384:	f7e1 fbe8 	bl	8000b58 <__aeabi_d2iz>
 801f388:	4605      	mov	r5, r0
 801f38a:	f7e1 f8cb 	bl	8000524 <__aeabi_i2d>
 801f38e:	4602      	mov	r2, r0
 801f390:	460b      	mov	r3, r1
 801f392:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f396:	f7e0 ff77 	bl	8000288 <__aeabi_dsub>
 801f39a:	3530      	adds	r5, #48	@ 0x30
 801f39c:	f806 5b01 	strb.w	r5, [r6], #1
 801f3a0:	4602      	mov	r2, r0
 801f3a2:	460b      	mov	r3, r1
 801f3a4:	42a6      	cmp	r6, r4
 801f3a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 801f3aa:	f04f 0200 	mov.w	r2, #0
 801f3ae:	d124      	bne.n	801f3fa <_dtoa_r+0x662>
 801f3b0:	4bac      	ldr	r3, [pc, #688]	@ (801f664 <_dtoa_r+0x8cc>)
 801f3b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 801f3b6:	f7e0 ff69 	bl	800028c <__adddf3>
 801f3ba:	4602      	mov	r2, r0
 801f3bc:	460b      	mov	r3, r1
 801f3be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f3c2:	f7e1 fba9 	bl	8000b18 <__aeabi_dcmpgt>
 801f3c6:	2800      	cmp	r0, #0
 801f3c8:	d145      	bne.n	801f456 <_dtoa_r+0x6be>
 801f3ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 801f3ce:	49a5      	ldr	r1, [pc, #660]	@ (801f664 <_dtoa_r+0x8cc>)
 801f3d0:	2000      	movs	r0, #0
 801f3d2:	f7e0 ff59 	bl	8000288 <__aeabi_dsub>
 801f3d6:	4602      	mov	r2, r0
 801f3d8:	460b      	mov	r3, r1
 801f3da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801f3de:	f7e1 fb7d 	bl	8000adc <__aeabi_dcmplt>
 801f3e2:	2800      	cmp	r0, #0
 801f3e4:	f43f aef5 	beq.w	801f1d2 <_dtoa_r+0x43a>
 801f3e8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 801f3ea:	1e73      	subs	r3, r6, #1
 801f3ec:	9315      	str	r3, [sp, #84]	@ 0x54
 801f3ee:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801f3f2:	2b30      	cmp	r3, #48	@ 0x30
 801f3f4:	d0f8      	beq.n	801f3e8 <_dtoa_r+0x650>
 801f3f6:	9f04      	ldr	r7, [sp, #16]
 801f3f8:	e73e      	b.n	801f278 <_dtoa_r+0x4e0>
 801f3fa:	4b9b      	ldr	r3, [pc, #620]	@ (801f668 <_dtoa_r+0x8d0>)
 801f3fc:	f7e1 f8fc 	bl	80005f8 <__aeabi_dmul>
 801f400:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801f404:	e7bc      	b.n	801f380 <_dtoa_r+0x5e8>
 801f406:	d10c      	bne.n	801f422 <_dtoa_r+0x68a>
 801f408:	4b98      	ldr	r3, [pc, #608]	@ (801f66c <_dtoa_r+0x8d4>)
 801f40a:	2200      	movs	r2, #0
 801f40c:	e9dd 0100 	ldrd	r0, r1, [sp]
 801f410:	f7e1 f8f2 	bl	80005f8 <__aeabi_dmul>
 801f414:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801f418:	f7e1 fb74 	bl	8000b04 <__aeabi_dcmpge>
 801f41c:	2800      	cmp	r0, #0
 801f41e:	f000 8157 	beq.w	801f6d0 <_dtoa_r+0x938>
 801f422:	2400      	movs	r4, #0
 801f424:	4625      	mov	r5, r4
 801f426:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f428:	43db      	mvns	r3, r3
 801f42a:	9304      	str	r3, [sp, #16]
 801f42c:	4656      	mov	r6, sl
 801f42e:	2700      	movs	r7, #0
 801f430:	4621      	mov	r1, r4
 801f432:	4658      	mov	r0, fp
 801f434:	f000 fafe 	bl	801fa34 <_Bfree>
 801f438:	2d00      	cmp	r5, #0
 801f43a:	d0dc      	beq.n	801f3f6 <_dtoa_r+0x65e>
 801f43c:	b12f      	cbz	r7, 801f44a <_dtoa_r+0x6b2>
 801f43e:	42af      	cmp	r7, r5
 801f440:	d003      	beq.n	801f44a <_dtoa_r+0x6b2>
 801f442:	4639      	mov	r1, r7
 801f444:	4658      	mov	r0, fp
 801f446:	f000 faf5 	bl	801fa34 <_Bfree>
 801f44a:	4629      	mov	r1, r5
 801f44c:	4658      	mov	r0, fp
 801f44e:	f000 faf1 	bl	801fa34 <_Bfree>
 801f452:	e7d0      	b.n	801f3f6 <_dtoa_r+0x65e>
 801f454:	9704      	str	r7, [sp, #16]
 801f456:	4633      	mov	r3, r6
 801f458:	461e      	mov	r6, r3
 801f45a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f45e:	2a39      	cmp	r2, #57	@ 0x39
 801f460:	d107      	bne.n	801f472 <_dtoa_r+0x6da>
 801f462:	459a      	cmp	sl, r3
 801f464:	d1f8      	bne.n	801f458 <_dtoa_r+0x6c0>
 801f466:	9a04      	ldr	r2, [sp, #16]
 801f468:	3201      	adds	r2, #1
 801f46a:	9204      	str	r2, [sp, #16]
 801f46c:	2230      	movs	r2, #48	@ 0x30
 801f46e:	f88a 2000 	strb.w	r2, [sl]
 801f472:	781a      	ldrb	r2, [r3, #0]
 801f474:	3201      	adds	r2, #1
 801f476:	701a      	strb	r2, [r3, #0]
 801f478:	e7bd      	b.n	801f3f6 <_dtoa_r+0x65e>
 801f47a:	4b7b      	ldr	r3, [pc, #492]	@ (801f668 <_dtoa_r+0x8d0>)
 801f47c:	2200      	movs	r2, #0
 801f47e:	f7e1 f8bb 	bl	80005f8 <__aeabi_dmul>
 801f482:	2200      	movs	r2, #0
 801f484:	2300      	movs	r3, #0
 801f486:	4604      	mov	r4, r0
 801f488:	460d      	mov	r5, r1
 801f48a:	f7e1 fb1d 	bl	8000ac8 <__aeabi_dcmpeq>
 801f48e:	2800      	cmp	r0, #0
 801f490:	f43f aebb 	beq.w	801f20a <_dtoa_r+0x472>
 801f494:	e6f0      	b.n	801f278 <_dtoa_r+0x4e0>
 801f496:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801f498:	2a00      	cmp	r2, #0
 801f49a:	f000 80db 	beq.w	801f654 <_dtoa_r+0x8bc>
 801f49e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801f4a0:	2a01      	cmp	r2, #1
 801f4a2:	f300 80bf 	bgt.w	801f624 <_dtoa_r+0x88c>
 801f4a6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f4a8:	2a00      	cmp	r2, #0
 801f4aa:	f000 80b7 	beq.w	801f61c <_dtoa_r+0x884>
 801f4ae:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 801f4b2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f4b4:	4646      	mov	r6, r8
 801f4b6:	9a08      	ldr	r2, [sp, #32]
 801f4b8:	2101      	movs	r1, #1
 801f4ba:	441a      	add	r2, r3
 801f4bc:	4658      	mov	r0, fp
 801f4be:	4498      	add	r8, r3
 801f4c0:	9208      	str	r2, [sp, #32]
 801f4c2:	f000 fbb5 	bl	801fc30 <__i2b>
 801f4c6:	4605      	mov	r5, r0
 801f4c8:	b15e      	cbz	r6, 801f4e2 <_dtoa_r+0x74a>
 801f4ca:	9b08      	ldr	r3, [sp, #32]
 801f4cc:	2b00      	cmp	r3, #0
 801f4ce:	dd08      	ble.n	801f4e2 <_dtoa_r+0x74a>
 801f4d0:	42b3      	cmp	r3, r6
 801f4d2:	9a08      	ldr	r2, [sp, #32]
 801f4d4:	bfa8      	it	ge
 801f4d6:	4633      	movge	r3, r6
 801f4d8:	eba8 0803 	sub.w	r8, r8, r3
 801f4dc:	1af6      	subs	r6, r6, r3
 801f4de:	1ad3      	subs	r3, r2, r3
 801f4e0:	9308      	str	r3, [sp, #32]
 801f4e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f4e4:	b1f3      	cbz	r3, 801f524 <_dtoa_r+0x78c>
 801f4e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f4e8:	2b00      	cmp	r3, #0
 801f4ea:	f000 80b7 	beq.w	801f65c <_dtoa_r+0x8c4>
 801f4ee:	b18c      	cbz	r4, 801f514 <_dtoa_r+0x77c>
 801f4f0:	4629      	mov	r1, r5
 801f4f2:	4622      	mov	r2, r4
 801f4f4:	4658      	mov	r0, fp
 801f4f6:	f000 fc5b 	bl	801fdb0 <__pow5mult>
 801f4fa:	464a      	mov	r2, r9
 801f4fc:	4601      	mov	r1, r0
 801f4fe:	4605      	mov	r5, r0
 801f500:	4658      	mov	r0, fp
 801f502:	f000 fbab 	bl	801fc5c <__multiply>
 801f506:	4649      	mov	r1, r9
 801f508:	9004      	str	r0, [sp, #16]
 801f50a:	4658      	mov	r0, fp
 801f50c:	f000 fa92 	bl	801fa34 <_Bfree>
 801f510:	9b04      	ldr	r3, [sp, #16]
 801f512:	4699      	mov	r9, r3
 801f514:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f516:	1b1a      	subs	r2, r3, r4
 801f518:	d004      	beq.n	801f524 <_dtoa_r+0x78c>
 801f51a:	4649      	mov	r1, r9
 801f51c:	4658      	mov	r0, fp
 801f51e:	f000 fc47 	bl	801fdb0 <__pow5mult>
 801f522:	4681      	mov	r9, r0
 801f524:	2101      	movs	r1, #1
 801f526:	4658      	mov	r0, fp
 801f528:	f000 fb82 	bl	801fc30 <__i2b>
 801f52c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f52e:	4604      	mov	r4, r0
 801f530:	2b00      	cmp	r3, #0
 801f532:	f000 81cf 	beq.w	801f8d4 <_dtoa_r+0xb3c>
 801f536:	461a      	mov	r2, r3
 801f538:	4601      	mov	r1, r0
 801f53a:	4658      	mov	r0, fp
 801f53c:	f000 fc38 	bl	801fdb0 <__pow5mult>
 801f540:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f542:	2b01      	cmp	r3, #1
 801f544:	4604      	mov	r4, r0
 801f546:	f300 8095 	bgt.w	801f674 <_dtoa_r+0x8dc>
 801f54a:	9b02      	ldr	r3, [sp, #8]
 801f54c:	2b00      	cmp	r3, #0
 801f54e:	f040 8087 	bne.w	801f660 <_dtoa_r+0x8c8>
 801f552:	9b03      	ldr	r3, [sp, #12]
 801f554:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801f558:	2b00      	cmp	r3, #0
 801f55a:	f040 8089 	bne.w	801f670 <_dtoa_r+0x8d8>
 801f55e:	9b03      	ldr	r3, [sp, #12]
 801f560:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801f564:	0d1b      	lsrs	r3, r3, #20
 801f566:	051b      	lsls	r3, r3, #20
 801f568:	b12b      	cbz	r3, 801f576 <_dtoa_r+0x7de>
 801f56a:	9b08      	ldr	r3, [sp, #32]
 801f56c:	3301      	adds	r3, #1
 801f56e:	9308      	str	r3, [sp, #32]
 801f570:	f108 0801 	add.w	r8, r8, #1
 801f574:	2301      	movs	r3, #1
 801f576:	930a      	str	r3, [sp, #40]	@ 0x28
 801f578:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f57a:	2b00      	cmp	r3, #0
 801f57c:	f000 81b0 	beq.w	801f8e0 <_dtoa_r+0xb48>
 801f580:	6923      	ldr	r3, [r4, #16]
 801f582:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801f586:	6918      	ldr	r0, [r3, #16]
 801f588:	f000 fb06 	bl	801fb98 <__hi0bits>
 801f58c:	f1c0 0020 	rsb	r0, r0, #32
 801f590:	9b08      	ldr	r3, [sp, #32]
 801f592:	4418      	add	r0, r3
 801f594:	f010 001f 	ands.w	r0, r0, #31
 801f598:	d077      	beq.n	801f68a <_dtoa_r+0x8f2>
 801f59a:	f1c0 0320 	rsb	r3, r0, #32
 801f59e:	2b04      	cmp	r3, #4
 801f5a0:	dd6b      	ble.n	801f67a <_dtoa_r+0x8e2>
 801f5a2:	9b08      	ldr	r3, [sp, #32]
 801f5a4:	f1c0 001c 	rsb	r0, r0, #28
 801f5a8:	4403      	add	r3, r0
 801f5aa:	4480      	add	r8, r0
 801f5ac:	4406      	add	r6, r0
 801f5ae:	9308      	str	r3, [sp, #32]
 801f5b0:	f1b8 0f00 	cmp.w	r8, #0
 801f5b4:	dd05      	ble.n	801f5c2 <_dtoa_r+0x82a>
 801f5b6:	4649      	mov	r1, r9
 801f5b8:	4642      	mov	r2, r8
 801f5ba:	4658      	mov	r0, fp
 801f5bc:	f000 fc52 	bl	801fe64 <__lshift>
 801f5c0:	4681      	mov	r9, r0
 801f5c2:	9b08      	ldr	r3, [sp, #32]
 801f5c4:	2b00      	cmp	r3, #0
 801f5c6:	dd05      	ble.n	801f5d4 <_dtoa_r+0x83c>
 801f5c8:	4621      	mov	r1, r4
 801f5ca:	461a      	mov	r2, r3
 801f5cc:	4658      	mov	r0, fp
 801f5ce:	f000 fc49 	bl	801fe64 <__lshift>
 801f5d2:	4604      	mov	r4, r0
 801f5d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801f5d6:	2b00      	cmp	r3, #0
 801f5d8:	d059      	beq.n	801f68e <_dtoa_r+0x8f6>
 801f5da:	4621      	mov	r1, r4
 801f5dc:	4648      	mov	r0, r9
 801f5de:	f000 fcad 	bl	801ff3c <__mcmp>
 801f5e2:	2800      	cmp	r0, #0
 801f5e4:	da53      	bge.n	801f68e <_dtoa_r+0x8f6>
 801f5e6:	1e7b      	subs	r3, r7, #1
 801f5e8:	9304      	str	r3, [sp, #16]
 801f5ea:	4649      	mov	r1, r9
 801f5ec:	2300      	movs	r3, #0
 801f5ee:	220a      	movs	r2, #10
 801f5f0:	4658      	mov	r0, fp
 801f5f2:	f000 fa41 	bl	801fa78 <__multadd>
 801f5f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f5f8:	4681      	mov	r9, r0
 801f5fa:	2b00      	cmp	r3, #0
 801f5fc:	f000 8172 	beq.w	801f8e4 <_dtoa_r+0xb4c>
 801f600:	2300      	movs	r3, #0
 801f602:	4629      	mov	r1, r5
 801f604:	220a      	movs	r2, #10
 801f606:	4658      	mov	r0, fp
 801f608:	f000 fa36 	bl	801fa78 <__multadd>
 801f60c:	9b00      	ldr	r3, [sp, #0]
 801f60e:	2b00      	cmp	r3, #0
 801f610:	4605      	mov	r5, r0
 801f612:	dc67      	bgt.n	801f6e4 <_dtoa_r+0x94c>
 801f614:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f616:	2b02      	cmp	r3, #2
 801f618:	dc41      	bgt.n	801f69e <_dtoa_r+0x906>
 801f61a:	e063      	b.n	801f6e4 <_dtoa_r+0x94c>
 801f61c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801f61e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801f622:	e746      	b.n	801f4b2 <_dtoa_r+0x71a>
 801f624:	9b07      	ldr	r3, [sp, #28]
 801f626:	1e5c      	subs	r4, r3, #1
 801f628:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f62a:	42a3      	cmp	r3, r4
 801f62c:	bfbf      	itttt	lt
 801f62e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 801f630:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801f632:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801f634:	1ae3      	sublt	r3, r4, r3
 801f636:	bfb4      	ite	lt
 801f638:	18d2      	addlt	r2, r2, r3
 801f63a:	1b1c      	subge	r4, r3, r4
 801f63c:	9b07      	ldr	r3, [sp, #28]
 801f63e:	bfbc      	itt	lt
 801f640:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801f642:	2400      	movlt	r4, #0
 801f644:	2b00      	cmp	r3, #0
 801f646:	bfb5      	itete	lt
 801f648:	eba8 0603 	sublt.w	r6, r8, r3
 801f64c:	9b07      	ldrge	r3, [sp, #28]
 801f64e:	2300      	movlt	r3, #0
 801f650:	4646      	movge	r6, r8
 801f652:	e730      	b.n	801f4b6 <_dtoa_r+0x71e>
 801f654:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801f656:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 801f658:	4646      	mov	r6, r8
 801f65a:	e735      	b.n	801f4c8 <_dtoa_r+0x730>
 801f65c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801f65e:	e75c      	b.n	801f51a <_dtoa_r+0x782>
 801f660:	2300      	movs	r3, #0
 801f662:	e788      	b.n	801f576 <_dtoa_r+0x7de>
 801f664:	3fe00000 	.word	0x3fe00000
 801f668:	40240000 	.word	0x40240000
 801f66c:	40140000 	.word	0x40140000
 801f670:	9b02      	ldr	r3, [sp, #8]
 801f672:	e780      	b.n	801f576 <_dtoa_r+0x7de>
 801f674:	2300      	movs	r3, #0
 801f676:	930a      	str	r3, [sp, #40]	@ 0x28
 801f678:	e782      	b.n	801f580 <_dtoa_r+0x7e8>
 801f67a:	d099      	beq.n	801f5b0 <_dtoa_r+0x818>
 801f67c:	9a08      	ldr	r2, [sp, #32]
 801f67e:	331c      	adds	r3, #28
 801f680:	441a      	add	r2, r3
 801f682:	4498      	add	r8, r3
 801f684:	441e      	add	r6, r3
 801f686:	9208      	str	r2, [sp, #32]
 801f688:	e792      	b.n	801f5b0 <_dtoa_r+0x818>
 801f68a:	4603      	mov	r3, r0
 801f68c:	e7f6      	b.n	801f67c <_dtoa_r+0x8e4>
 801f68e:	9b07      	ldr	r3, [sp, #28]
 801f690:	9704      	str	r7, [sp, #16]
 801f692:	2b00      	cmp	r3, #0
 801f694:	dc20      	bgt.n	801f6d8 <_dtoa_r+0x940>
 801f696:	9300      	str	r3, [sp, #0]
 801f698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f69a:	2b02      	cmp	r3, #2
 801f69c:	dd1e      	ble.n	801f6dc <_dtoa_r+0x944>
 801f69e:	9b00      	ldr	r3, [sp, #0]
 801f6a0:	2b00      	cmp	r3, #0
 801f6a2:	f47f aec0 	bne.w	801f426 <_dtoa_r+0x68e>
 801f6a6:	4621      	mov	r1, r4
 801f6a8:	2205      	movs	r2, #5
 801f6aa:	4658      	mov	r0, fp
 801f6ac:	f000 f9e4 	bl	801fa78 <__multadd>
 801f6b0:	4601      	mov	r1, r0
 801f6b2:	4604      	mov	r4, r0
 801f6b4:	4648      	mov	r0, r9
 801f6b6:	f000 fc41 	bl	801ff3c <__mcmp>
 801f6ba:	2800      	cmp	r0, #0
 801f6bc:	f77f aeb3 	ble.w	801f426 <_dtoa_r+0x68e>
 801f6c0:	4656      	mov	r6, sl
 801f6c2:	2331      	movs	r3, #49	@ 0x31
 801f6c4:	f806 3b01 	strb.w	r3, [r6], #1
 801f6c8:	9b04      	ldr	r3, [sp, #16]
 801f6ca:	3301      	adds	r3, #1
 801f6cc:	9304      	str	r3, [sp, #16]
 801f6ce:	e6ae      	b.n	801f42e <_dtoa_r+0x696>
 801f6d0:	9c07      	ldr	r4, [sp, #28]
 801f6d2:	9704      	str	r7, [sp, #16]
 801f6d4:	4625      	mov	r5, r4
 801f6d6:	e7f3      	b.n	801f6c0 <_dtoa_r+0x928>
 801f6d8:	9b07      	ldr	r3, [sp, #28]
 801f6da:	9300      	str	r3, [sp, #0]
 801f6dc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f6de:	2b00      	cmp	r3, #0
 801f6e0:	f000 8104 	beq.w	801f8ec <_dtoa_r+0xb54>
 801f6e4:	2e00      	cmp	r6, #0
 801f6e6:	dd05      	ble.n	801f6f4 <_dtoa_r+0x95c>
 801f6e8:	4629      	mov	r1, r5
 801f6ea:	4632      	mov	r2, r6
 801f6ec:	4658      	mov	r0, fp
 801f6ee:	f000 fbb9 	bl	801fe64 <__lshift>
 801f6f2:	4605      	mov	r5, r0
 801f6f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f6f6:	2b00      	cmp	r3, #0
 801f6f8:	d05a      	beq.n	801f7b0 <_dtoa_r+0xa18>
 801f6fa:	6869      	ldr	r1, [r5, #4]
 801f6fc:	4658      	mov	r0, fp
 801f6fe:	f000 f959 	bl	801f9b4 <_Balloc>
 801f702:	4606      	mov	r6, r0
 801f704:	b928      	cbnz	r0, 801f712 <_dtoa_r+0x97a>
 801f706:	4b84      	ldr	r3, [pc, #528]	@ (801f918 <_dtoa_r+0xb80>)
 801f708:	4602      	mov	r2, r0
 801f70a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 801f70e:	f7ff bb5a 	b.w	801edc6 <_dtoa_r+0x2e>
 801f712:	692a      	ldr	r2, [r5, #16]
 801f714:	3202      	adds	r2, #2
 801f716:	0092      	lsls	r2, r2, #2
 801f718:	f105 010c 	add.w	r1, r5, #12
 801f71c:	300c      	adds	r0, #12
 801f71e:	f7ff fa7e 	bl	801ec1e <memcpy>
 801f722:	2201      	movs	r2, #1
 801f724:	4631      	mov	r1, r6
 801f726:	4658      	mov	r0, fp
 801f728:	f000 fb9c 	bl	801fe64 <__lshift>
 801f72c:	f10a 0301 	add.w	r3, sl, #1
 801f730:	9307      	str	r3, [sp, #28]
 801f732:	9b00      	ldr	r3, [sp, #0]
 801f734:	4453      	add	r3, sl
 801f736:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f738:	9b02      	ldr	r3, [sp, #8]
 801f73a:	f003 0301 	and.w	r3, r3, #1
 801f73e:	462f      	mov	r7, r5
 801f740:	930a      	str	r3, [sp, #40]	@ 0x28
 801f742:	4605      	mov	r5, r0
 801f744:	9b07      	ldr	r3, [sp, #28]
 801f746:	4621      	mov	r1, r4
 801f748:	3b01      	subs	r3, #1
 801f74a:	4648      	mov	r0, r9
 801f74c:	9300      	str	r3, [sp, #0]
 801f74e:	f7ff fa99 	bl	801ec84 <quorem>
 801f752:	4639      	mov	r1, r7
 801f754:	9002      	str	r0, [sp, #8]
 801f756:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801f75a:	4648      	mov	r0, r9
 801f75c:	f000 fbee 	bl	801ff3c <__mcmp>
 801f760:	462a      	mov	r2, r5
 801f762:	9008      	str	r0, [sp, #32]
 801f764:	4621      	mov	r1, r4
 801f766:	4658      	mov	r0, fp
 801f768:	f000 fc04 	bl	801ff74 <__mdiff>
 801f76c:	68c2      	ldr	r2, [r0, #12]
 801f76e:	4606      	mov	r6, r0
 801f770:	bb02      	cbnz	r2, 801f7b4 <_dtoa_r+0xa1c>
 801f772:	4601      	mov	r1, r0
 801f774:	4648      	mov	r0, r9
 801f776:	f000 fbe1 	bl	801ff3c <__mcmp>
 801f77a:	4602      	mov	r2, r0
 801f77c:	4631      	mov	r1, r6
 801f77e:	4658      	mov	r0, fp
 801f780:	920e      	str	r2, [sp, #56]	@ 0x38
 801f782:	f000 f957 	bl	801fa34 <_Bfree>
 801f786:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f788:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f78a:	9e07      	ldr	r6, [sp, #28]
 801f78c:	ea43 0102 	orr.w	r1, r3, r2
 801f790:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f792:	4319      	orrs	r1, r3
 801f794:	d110      	bne.n	801f7b8 <_dtoa_r+0xa20>
 801f796:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f79a:	d029      	beq.n	801f7f0 <_dtoa_r+0xa58>
 801f79c:	9b08      	ldr	r3, [sp, #32]
 801f79e:	2b00      	cmp	r3, #0
 801f7a0:	dd02      	ble.n	801f7a8 <_dtoa_r+0xa10>
 801f7a2:	9b02      	ldr	r3, [sp, #8]
 801f7a4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 801f7a8:	9b00      	ldr	r3, [sp, #0]
 801f7aa:	f883 8000 	strb.w	r8, [r3]
 801f7ae:	e63f      	b.n	801f430 <_dtoa_r+0x698>
 801f7b0:	4628      	mov	r0, r5
 801f7b2:	e7bb      	b.n	801f72c <_dtoa_r+0x994>
 801f7b4:	2201      	movs	r2, #1
 801f7b6:	e7e1      	b.n	801f77c <_dtoa_r+0x9e4>
 801f7b8:	9b08      	ldr	r3, [sp, #32]
 801f7ba:	2b00      	cmp	r3, #0
 801f7bc:	db04      	blt.n	801f7c8 <_dtoa_r+0xa30>
 801f7be:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801f7c0:	430b      	orrs	r3, r1
 801f7c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801f7c4:	430b      	orrs	r3, r1
 801f7c6:	d120      	bne.n	801f80a <_dtoa_r+0xa72>
 801f7c8:	2a00      	cmp	r2, #0
 801f7ca:	dded      	ble.n	801f7a8 <_dtoa_r+0xa10>
 801f7cc:	4649      	mov	r1, r9
 801f7ce:	2201      	movs	r2, #1
 801f7d0:	4658      	mov	r0, fp
 801f7d2:	f000 fb47 	bl	801fe64 <__lshift>
 801f7d6:	4621      	mov	r1, r4
 801f7d8:	4681      	mov	r9, r0
 801f7da:	f000 fbaf 	bl	801ff3c <__mcmp>
 801f7de:	2800      	cmp	r0, #0
 801f7e0:	dc03      	bgt.n	801f7ea <_dtoa_r+0xa52>
 801f7e2:	d1e1      	bne.n	801f7a8 <_dtoa_r+0xa10>
 801f7e4:	f018 0f01 	tst.w	r8, #1
 801f7e8:	d0de      	beq.n	801f7a8 <_dtoa_r+0xa10>
 801f7ea:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f7ee:	d1d8      	bne.n	801f7a2 <_dtoa_r+0xa0a>
 801f7f0:	9a00      	ldr	r2, [sp, #0]
 801f7f2:	2339      	movs	r3, #57	@ 0x39
 801f7f4:	7013      	strb	r3, [r2, #0]
 801f7f6:	4633      	mov	r3, r6
 801f7f8:	461e      	mov	r6, r3
 801f7fa:	3b01      	subs	r3, #1
 801f7fc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 801f800:	2a39      	cmp	r2, #57	@ 0x39
 801f802:	d052      	beq.n	801f8aa <_dtoa_r+0xb12>
 801f804:	3201      	adds	r2, #1
 801f806:	701a      	strb	r2, [r3, #0]
 801f808:	e612      	b.n	801f430 <_dtoa_r+0x698>
 801f80a:	2a00      	cmp	r2, #0
 801f80c:	dd07      	ble.n	801f81e <_dtoa_r+0xa86>
 801f80e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801f812:	d0ed      	beq.n	801f7f0 <_dtoa_r+0xa58>
 801f814:	9a00      	ldr	r2, [sp, #0]
 801f816:	f108 0301 	add.w	r3, r8, #1
 801f81a:	7013      	strb	r3, [r2, #0]
 801f81c:	e608      	b.n	801f430 <_dtoa_r+0x698>
 801f81e:	9b07      	ldr	r3, [sp, #28]
 801f820:	9a07      	ldr	r2, [sp, #28]
 801f822:	f803 8c01 	strb.w	r8, [r3, #-1]
 801f826:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f828:	4293      	cmp	r3, r2
 801f82a:	d028      	beq.n	801f87e <_dtoa_r+0xae6>
 801f82c:	4649      	mov	r1, r9
 801f82e:	2300      	movs	r3, #0
 801f830:	220a      	movs	r2, #10
 801f832:	4658      	mov	r0, fp
 801f834:	f000 f920 	bl	801fa78 <__multadd>
 801f838:	42af      	cmp	r7, r5
 801f83a:	4681      	mov	r9, r0
 801f83c:	f04f 0300 	mov.w	r3, #0
 801f840:	f04f 020a 	mov.w	r2, #10
 801f844:	4639      	mov	r1, r7
 801f846:	4658      	mov	r0, fp
 801f848:	d107      	bne.n	801f85a <_dtoa_r+0xac2>
 801f84a:	f000 f915 	bl	801fa78 <__multadd>
 801f84e:	4607      	mov	r7, r0
 801f850:	4605      	mov	r5, r0
 801f852:	9b07      	ldr	r3, [sp, #28]
 801f854:	3301      	adds	r3, #1
 801f856:	9307      	str	r3, [sp, #28]
 801f858:	e774      	b.n	801f744 <_dtoa_r+0x9ac>
 801f85a:	f000 f90d 	bl	801fa78 <__multadd>
 801f85e:	4629      	mov	r1, r5
 801f860:	4607      	mov	r7, r0
 801f862:	2300      	movs	r3, #0
 801f864:	220a      	movs	r2, #10
 801f866:	4658      	mov	r0, fp
 801f868:	f000 f906 	bl	801fa78 <__multadd>
 801f86c:	4605      	mov	r5, r0
 801f86e:	e7f0      	b.n	801f852 <_dtoa_r+0xaba>
 801f870:	9b00      	ldr	r3, [sp, #0]
 801f872:	2b00      	cmp	r3, #0
 801f874:	bfcc      	ite	gt
 801f876:	461e      	movgt	r6, r3
 801f878:	2601      	movle	r6, #1
 801f87a:	4456      	add	r6, sl
 801f87c:	2700      	movs	r7, #0
 801f87e:	4649      	mov	r1, r9
 801f880:	2201      	movs	r2, #1
 801f882:	4658      	mov	r0, fp
 801f884:	f000 faee 	bl	801fe64 <__lshift>
 801f888:	4621      	mov	r1, r4
 801f88a:	4681      	mov	r9, r0
 801f88c:	f000 fb56 	bl	801ff3c <__mcmp>
 801f890:	2800      	cmp	r0, #0
 801f892:	dcb0      	bgt.n	801f7f6 <_dtoa_r+0xa5e>
 801f894:	d102      	bne.n	801f89c <_dtoa_r+0xb04>
 801f896:	f018 0f01 	tst.w	r8, #1
 801f89a:	d1ac      	bne.n	801f7f6 <_dtoa_r+0xa5e>
 801f89c:	4633      	mov	r3, r6
 801f89e:	461e      	mov	r6, r3
 801f8a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801f8a4:	2a30      	cmp	r2, #48	@ 0x30
 801f8a6:	d0fa      	beq.n	801f89e <_dtoa_r+0xb06>
 801f8a8:	e5c2      	b.n	801f430 <_dtoa_r+0x698>
 801f8aa:	459a      	cmp	sl, r3
 801f8ac:	d1a4      	bne.n	801f7f8 <_dtoa_r+0xa60>
 801f8ae:	9b04      	ldr	r3, [sp, #16]
 801f8b0:	3301      	adds	r3, #1
 801f8b2:	9304      	str	r3, [sp, #16]
 801f8b4:	2331      	movs	r3, #49	@ 0x31
 801f8b6:	f88a 3000 	strb.w	r3, [sl]
 801f8ba:	e5b9      	b.n	801f430 <_dtoa_r+0x698>
 801f8bc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f8be:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 801f91c <_dtoa_r+0xb84>
 801f8c2:	b11b      	cbz	r3, 801f8cc <_dtoa_r+0xb34>
 801f8c4:	f10a 0308 	add.w	r3, sl, #8
 801f8c8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801f8ca:	6013      	str	r3, [r2, #0]
 801f8cc:	4650      	mov	r0, sl
 801f8ce:	b019      	add	sp, #100	@ 0x64
 801f8d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f8d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f8d6:	2b01      	cmp	r3, #1
 801f8d8:	f77f ae37 	ble.w	801f54a <_dtoa_r+0x7b2>
 801f8dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f8de:	930a      	str	r3, [sp, #40]	@ 0x28
 801f8e0:	2001      	movs	r0, #1
 801f8e2:	e655      	b.n	801f590 <_dtoa_r+0x7f8>
 801f8e4:	9b00      	ldr	r3, [sp, #0]
 801f8e6:	2b00      	cmp	r3, #0
 801f8e8:	f77f aed6 	ble.w	801f698 <_dtoa_r+0x900>
 801f8ec:	4656      	mov	r6, sl
 801f8ee:	4621      	mov	r1, r4
 801f8f0:	4648      	mov	r0, r9
 801f8f2:	f7ff f9c7 	bl	801ec84 <quorem>
 801f8f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 801f8fa:	f806 8b01 	strb.w	r8, [r6], #1
 801f8fe:	9b00      	ldr	r3, [sp, #0]
 801f900:	eba6 020a 	sub.w	r2, r6, sl
 801f904:	4293      	cmp	r3, r2
 801f906:	ddb3      	ble.n	801f870 <_dtoa_r+0xad8>
 801f908:	4649      	mov	r1, r9
 801f90a:	2300      	movs	r3, #0
 801f90c:	220a      	movs	r2, #10
 801f90e:	4658      	mov	r0, fp
 801f910:	f000 f8b2 	bl	801fa78 <__multadd>
 801f914:	4681      	mov	r9, r0
 801f916:	e7ea      	b.n	801f8ee <_dtoa_r+0xb56>
 801f918:	08025548 	.word	0x08025548
 801f91c:	080254e3 	.word	0x080254e3

0801f920 <_free_r>:
 801f920:	b538      	push	{r3, r4, r5, lr}
 801f922:	4605      	mov	r5, r0
 801f924:	2900      	cmp	r1, #0
 801f926:	d041      	beq.n	801f9ac <_free_r+0x8c>
 801f928:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f92c:	1f0c      	subs	r4, r1, #4
 801f92e:	2b00      	cmp	r3, #0
 801f930:	bfb8      	it	lt
 801f932:	18e4      	addlt	r4, r4, r3
 801f934:	f7fd fdf8 	bl	801d528 <__malloc_lock>
 801f938:	4a1d      	ldr	r2, [pc, #116]	@ (801f9b0 <_free_r+0x90>)
 801f93a:	6813      	ldr	r3, [r2, #0]
 801f93c:	b933      	cbnz	r3, 801f94c <_free_r+0x2c>
 801f93e:	6063      	str	r3, [r4, #4]
 801f940:	6014      	str	r4, [r2, #0]
 801f942:	4628      	mov	r0, r5
 801f944:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f948:	f7fd bdf4 	b.w	801d534 <__malloc_unlock>
 801f94c:	42a3      	cmp	r3, r4
 801f94e:	d908      	bls.n	801f962 <_free_r+0x42>
 801f950:	6820      	ldr	r0, [r4, #0]
 801f952:	1821      	adds	r1, r4, r0
 801f954:	428b      	cmp	r3, r1
 801f956:	bf01      	itttt	eq
 801f958:	6819      	ldreq	r1, [r3, #0]
 801f95a:	685b      	ldreq	r3, [r3, #4]
 801f95c:	1809      	addeq	r1, r1, r0
 801f95e:	6021      	streq	r1, [r4, #0]
 801f960:	e7ed      	b.n	801f93e <_free_r+0x1e>
 801f962:	461a      	mov	r2, r3
 801f964:	685b      	ldr	r3, [r3, #4]
 801f966:	b10b      	cbz	r3, 801f96c <_free_r+0x4c>
 801f968:	42a3      	cmp	r3, r4
 801f96a:	d9fa      	bls.n	801f962 <_free_r+0x42>
 801f96c:	6811      	ldr	r1, [r2, #0]
 801f96e:	1850      	adds	r0, r2, r1
 801f970:	42a0      	cmp	r0, r4
 801f972:	d10b      	bne.n	801f98c <_free_r+0x6c>
 801f974:	6820      	ldr	r0, [r4, #0]
 801f976:	4401      	add	r1, r0
 801f978:	1850      	adds	r0, r2, r1
 801f97a:	4283      	cmp	r3, r0
 801f97c:	6011      	str	r1, [r2, #0]
 801f97e:	d1e0      	bne.n	801f942 <_free_r+0x22>
 801f980:	6818      	ldr	r0, [r3, #0]
 801f982:	685b      	ldr	r3, [r3, #4]
 801f984:	6053      	str	r3, [r2, #4]
 801f986:	4408      	add	r0, r1
 801f988:	6010      	str	r0, [r2, #0]
 801f98a:	e7da      	b.n	801f942 <_free_r+0x22>
 801f98c:	d902      	bls.n	801f994 <_free_r+0x74>
 801f98e:	230c      	movs	r3, #12
 801f990:	602b      	str	r3, [r5, #0]
 801f992:	e7d6      	b.n	801f942 <_free_r+0x22>
 801f994:	6820      	ldr	r0, [r4, #0]
 801f996:	1821      	adds	r1, r4, r0
 801f998:	428b      	cmp	r3, r1
 801f99a:	bf04      	itt	eq
 801f99c:	6819      	ldreq	r1, [r3, #0]
 801f99e:	685b      	ldreq	r3, [r3, #4]
 801f9a0:	6063      	str	r3, [r4, #4]
 801f9a2:	bf04      	itt	eq
 801f9a4:	1809      	addeq	r1, r1, r0
 801f9a6:	6021      	streq	r1, [r4, #0]
 801f9a8:	6054      	str	r4, [r2, #4]
 801f9aa:	e7ca      	b.n	801f942 <_free_r+0x22>
 801f9ac:	bd38      	pop	{r3, r4, r5, pc}
 801f9ae:	bf00      	nop
 801f9b0:	2001b1b8 	.word	0x2001b1b8

0801f9b4 <_Balloc>:
 801f9b4:	b570      	push	{r4, r5, r6, lr}
 801f9b6:	69c6      	ldr	r6, [r0, #28]
 801f9b8:	4604      	mov	r4, r0
 801f9ba:	460d      	mov	r5, r1
 801f9bc:	b976      	cbnz	r6, 801f9dc <_Balloc+0x28>
 801f9be:	2010      	movs	r0, #16
 801f9c0:	f7fd fd08 	bl	801d3d4 <malloc>
 801f9c4:	4602      	mov	r2, r0
 801f9c6:	61e0      	str	r0, [r4, #28]
 801f9c8:	b920      	cbnz	r0, 801f9d4 <_Balloc+0x20>
 801f9ca:	4b18      	ldr	r3, [pc, #96]	@ (801fa2c <_Balloc+0x78>)
 801f9cc:	4818      	ldr	r0, [pc, #96]	@ (801fa30 <_Balloc+0x7c>)
 801f9ce:	216b      	movs	r1, #107	@ 0x6b
 801f9d0:	f7ff f93a 	bl	801ec48 <__assert_func>
 801f9d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801f9d8:	6006      	str	r6, [r0, #0]
 801f9da:	60c6      	str	r6, [r0, #12]
 801f9dc:	69e6      	ldr	r6, [r4, #28]
 801f9de:	68f3      	ldr	r3, [r6, #12]
 801f9e0:	b183      	cbz	r3, 801fa04 <_Balloc+0x50>
 801f9e2:	69e3      	ldr	r3, [r4, #28]
 801f9e4:	68db      	ldr	r3, [r3, #12]
 801f9e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801f9ea:	b9b8      	cbnz	r0, 801fa1c <_Balloc+0x68>
 801f9ec:	2101      	movs	r1, #1
 801f9ee:	fa01 f605 	lsl.w	r6, r1, r5
 801f9f2:	1d72      	adds	r2, r6, #5
 801f9f4:	0092      	lsls	r2, r2, #2
 801f9f6:	4620      	mov	r0, r4
 801f9f8:	f001 fdda 	bl	80215b0 <_calloc_r>
 801f9fc:	b160      	cbz	r0, 801fa18 <_Balloc+0x64>
 801f9fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801fa02:	e00e      	b.n	801fa22 <_Balloc+0x6e>
 801fa04:	2221      	movs	r2, #33	@ 0x21
 801fa06:	2104      	movs	r1, #4
 801fa08:	4620      	mov	r0, r4
 801fa0a:	f001 fdd1 	bl	80215b0 <_calloc_r>
 801fa0e:	69e3      	ldr	r3, [r4, #28]
 801fa10:	60f0      	str	r0, [r6, #12]
 801fa12:	68db      	ldr	r3, [r3, #12]
 801fa14:	2b00      	cmp	r3, #0
 801fa16:	d1e4      	bne.n	801f9e2 <_Balloc+0x2e>
 801fa18:	2000      	movs	r0, #0
 801fa1a:	bd70      	pop	{r4, r5, r6, pc}
 801fa1c:	6802      	ldr	r2, [r0, #0]
 801fa1e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801fa22:	2300      	movs	r3, #0
 801fa24:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801fa28:	e7f7      	b.n	801fa1a <_Balloc+0x66>
 801fa2a:	bf00      	nop
 801fa2c:	080252fe 	.word	0x080252fe
 801fa30:	08025559 	.word	0x08025559

0801fa34 <_Bfree>:
 801fa34:	b570      	push	{r4, r5, r6, lr}
 801fa36:	69c6      	ldr	r6, [r0, #28]
 801fa38:	4605      	mov	r5, r0
 801fa3a:	460c      	mov	r4, r1
 801fa3c:	b976      	cbnz	r6, 801fa5c <_Bfree+0x28>
 801fa3e:	2010      	movs	r0, #16
 801fa40:	f7fd fcc8 	bl	801d3d4 <malloc>
 801fa44:	4602      	mov	r2, r0
 801fa46:	61e8      	str	r0, [r5, #28]
 801fa48:	b920      	cbnz	r0, 801fa54 <_Bfree+0x20>
 801fa4a:	4b09      	ldr	r3, [pc, #36]	@ (801fa70 <_Bfree+0x3c>)
 801fa4c:	4809      	ldr	r0, [pc, #36]	@ (801fa74 <_Bfree+0x40>)
 801fa4e:	218f      	movs	r1, #143	@ 0x8f
 801fa50:	f7ff f8fa 	bl	801ec48 <__assert_func>
 801fa54:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801fa58:	6006      	str	r6, [r0, #0]
 801fa5a:	60c6      	str	r6, [r0, #12]
 801fa5c:	b13c      	cbz	r4, 801fa6e <_Bfree+0x3a>
 801fa5e:	69eb      	ldr	r3, [r5, #28]
 801fa60:	6862      	ldr	r2, [r4, #4]
 801fa62:	68db      	ldr	r3, [r3, #12]
 801fa64:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801fa68:	6021      	str	r1, [r4, #0]
 801fa6a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801fa6e:	bd70      	pop	{r4, r5, r6, pc}
 801fa70:	080252fe 	.word	0x080252fe
 801fa74:	08025559 	.word	0x08025559

0801fa78 <__multadd>:
 801fa78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fa7c:	690d      	ldr	r5, [r1, #16]
 801fa7e:	4607      	mov	r7, r0
 801fa80:	460c      	mov	r4, r1
 801fa82:	461e      	mov	r6, r3
 801fa84:	f101 0c14 	add.w	ip, r1, #20
 801fa88:	2000      	movs	r0, #0
 801fa8a:	f8dc 3000 	ldr.w	r3, [ip]
 801fa8e:	b299      	uxth	r1, r3
 801fa90:	fb02 6101 	mla	r1, r2, r1, r6
 801fa94:	0c1e      	lsrs	r6, r3, #16
 801fa96:	0c0b      	lsrs	r3, r1, #16
 801fa98:	fb02 3306 	mla	r3, r2, r6, r3
 801fa9c:	b289      	uxth	r1, r1
 801fa9e:	3001      	adds	r0, #1
 801faa0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801faa4:	4285      	cmp	r5, r0
 801faa6:	f84c 1b04 	str.w	r1, [ip], #4
 801faaa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801faae:	dcec      	bgt.n	801fa8a <__multadd+0x12>
 801fab0:	b30e      	cbz	r6, 801faf6 <__multadd+0x7e>
 801fab2:	68a3      	ldr	r3, [r4, #8]
 801fab4:	42ab      	cmp	r3, r5
 801fab6:	dc19      	bgt.n	801faec <__multadd+0x74>
 801fab8:	6861      	ldr	r1, [r4, #4]
 801faba:	4638      	mov	r0, r7
 801fabc:	3101      	adds	r1, #1
 801fabe:	f7ff ff79 	bl	801f9b4 <_Balloc>
 801fac2:	4680      	mov	r8, r0
 801fac4:	b928      	cbnz	r0, 801fad2 <__multadd+0x5a>
 801fac6:	4602      	mov	r2, r0
 801fac8:	4b0c      	ldr	r3, [pc, #48]	@ (801fafc <__multadd+0x84>)
 801faca:	480d      	ldr	r0, [pc, #52]	@ (801fb00 <__multadd+0x88>)
 801facc:	21ba      	movs	r1, #186	@ 0xba
 801face:	f7ff f8bb 	bl	801ec48 <__assert_func>
 801fad2:	6922      	ldr	r2, [r4, #16]
 801fad4:	3202      	adds	r2, #2
 801fad6:	f104 010c 	add.w	r1, r4, #12
 801fada:	0092      	lsls	r2, r2, #2
 801fadc:	300c      	adds	r0, #12
 801fade:	f7ff f89e 	bl	801ec1e <memcpy>
 801fae2:	4621      	mov	r1, r4
 801fae4:	4638      	mov	r0, r7
 801fae6:	f7ff ffa5 	bl	801fa34 <_Bfree>
 801faea:	4644      	mov	r4, r8
 801faec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801faf0:	3501      	adds	r5, #1
 801faf2:	615e      	str	r6, [r3, #20]
 801faf4:	6125      	str	r5, [r4, #16]
 801faf6:	4620      	mov	r0, r4
 801faf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fafc:	08025548 	.word	0x08025548
 801fb00:	08025559 	.word	0x08025559

0801fb04 <__s2b>:
 801fb04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fb08:	460c      	mov	r4, r1
 801fb0a:	4615      	mov	r5, r2
 801fb0c:	461f      	mov	r7, r3
 801fb0e:	2209      	movs	r2, #9
 801fb10:	3308      	adds	r3, #8
 801fb12:	4606      	mov	r6, r0
 801fb14:	fb93 f3f2 	sdiv	r3, r3, r2
 801fb18:	2100      	movs	r1, #0
 801fb1a:	2201      	movs	r2, #1
 801fb1c:	429a      	cmp	r2, r3
 801fb1e:	db09      	blt.n	801fb34 <__s2b+0x30>
 801fb20:	4630      	mov	r0, r6
 801fb22:	f7ff ff47 	bl	801f9b4 <_Balloc>
 801fb26:	b940      	cbnz	r0, 801fb3a <__s2b+0x36>
 801fb28:	4602      	mov	r2, r0
 801fb2a:	4b19      	ldr	r3, [pc, #100]	@ (801fb90 <__s2b+0x8c>)
 801fb2c:	4819      	ldr	r0, [pc, #100]	@ (801fb94 <__s2b+0x90>)
 801fb2e:	21d3      	movs	r1, #211	@ 0xd3
 801fb30:	f7ff f88a 	bl	801ec48 <__assert_func>
 801fb34:	0052      	lsls	r2, r2, #1
 801fb36:	3101      	adds	r1, #1
 801fb38:	e7f0      	b.n	801fb1c <__s2b+0x18>
 801fb3a:	9b08      	ldr	r3, [sp, #32]
 801fb3c:	6143      	str	r3, [r0, #20]
 801fb3e:	2d09      	cmp	r5, #9
 801fb40:	f04f 0301 	mov.w	r3, #1
 801fb44:	6103      	str	r3, [r0, #16]
 801fb46:	dd16      	ble.n	801fb76 <__s2b+0x72>
 801fb48:	f104 0909 	add.w	r9, r4, #9
 801fb4c:	46c8      	mov	r8, r9
 801fb4e:	442c      	add	r4, r5
 801fb50:	f818 3b01 	ldrb.w	r3, [r8], #1
 801fb54:	4601      	mov	r1, r0
 801fb56:	3b30      	subs	r3, #48	@ 0x30
 801fb58:	220a      	movs	r2, #10
 801fb5a:	4630      	mov	r0, r6
 801fb5c:	f7ff ff8c 	bl	801fa78 <__multadd>
 801fb60:	45a0      	cmp	r8, r4
 801fb62:	d1f5      	bne.n	801fb50 <__s2b+0x4c>
 801fb64:	f1a5 0408 	sub.w	r4, r5, #8
 801fb68:	444c      	add	r4, r9
 801fb6a:	1b2d      	subs	r5, r5, r4
 801fb6c:	1963      	adds	r3, r4, r5
 801fb6e:	42bb      	cmp	r3, r7
 801fb70:	db04      	blt.n	801fb7c <__s2b+0x78>
 801fb72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fb76:	340a      	adds	r4, #10
 801fb78:	2509      	movs	r5, #9
 801fb7a:	e7f6      	b.n	801fb6a <__s2b+0x66>
 801fb7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 801fb80:	4601      	mov	r1, r0
 801fb82:	3b30      	subs	r3, #48	@ 0x30
 801fb84:	220a      	movs	r2, #10
 801fb86:	4630      	mov	r0, r6
 801fb88:	f7ff ff76 	bl	801fa78 <__multadd>
 801fb8c:	e7ee      	b.n	801fb6c <__s2b+0x68>
 801fb8e:	bf00      	nop
 801fb90:	08025548 	.word	0x08025548
 801fb94:	08025559 	.word	0x08025559

0801fb98 <__hi0bits>:
 801fb98:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801fb9c:	4603      	mov	r3, r0
 801fb9e:	bf36      	itet	cc
 801fba0:	0403      	lslcc	r3, r0, #16
 801fba2:	2000      	movcs	r0, #0
 801fba4:	2010      	movcc	r0, #16
 801fba6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801fbaa:	bf3c      	itt	cc
 801fbac:	021b      	lslcc	r3, r3, #8
 801fbae:	3008      	addcc	r0, #8
 801fbb0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801fbb4:	bf3c      	itt	cc
 801fbb6:	011b      	lslcc	r3, r3, #4
 801fbb8:	3004      	addcc	r0, #4
 801fbba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801fbbe:	bf3c      	itt	cc
 801fbc0:	009b      	lslcc	r3, r3, #2
 801fbc2:	3002      	addcc	r0, #2
 801fbc4:	2b00      	cmp	r3, #0
 801fbc6:	db05      	blt.n	801fbd4 <__hi0bits+0x3c>
 801fbc8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 801fbcc:	f100 0001 	add.w	r0, r0, #1
 801fbd0:	bf08      	it	eq
 801fbd2:	2020      	moveq	r0, #32
 801fbd4:	4770      	bx	lr

0801fbd6 <__lo0bits>:
 801fbd6:	6803      	ldr	r3, [r0, #0]
 801fbd8:	4602      	mov	r2, r0
 801fbda:	f013 0007 	ands.w	r0, r3, #7
 801fbde:	d00b      	beq.n	801fbf8 <__lo0bits+0x22>
 801fbe0:	07d9      	lsls	r1, r3, #31
 801fbe2:	d421      	bmi.n	801fc28 <__lo0bits+0x52>
 801fbe4:	0798      	lsls	r0, r3, #30
 801fbe6:	bf49      	itett	mi
 801fbe8:	085b      	lsrmi	r3, r3, #1
 801fbea:	089b      	lsrpl	r3, r3, #2
 801fbec:	2001      	movmi	r0, #1
 801fbee:	6013      	strmi	r3, [r2, #0]
 801fbf0:	bf5c      	itt	pl
 801fbf2:	6013      	strpl	r3, [r2, #0]
 801fbf4:	2002      	movpl	r0, #2
 801fbf6:	4770      	bx	lr
 801fbf8:	b299      	uxth	r1, r3
 801fbfa:	b909      	cbnz	r1, 801fc00 <__lo0bits+0x2a>
 801fbfc:	0c1b      	lsrs	r3, r3, #16
 801fbfe:	2010      	movs	r0, #16
 801fc00:	b2d9      	uxtb	r1, r3
 801fc02:	b909      	cbnz	r1, 801fc08 <__lo0bits+0x32>
 801fc04:	3008      	adds	r0, #8
 801fc06:	0a1b      	lsrs	r3, r3, #8
 801fc08:	0719      	lsls	r1, r3, #28
 801fc0a:	bf04      	itt	eq
 801fc0c:	091b      	lsreq	r3, r3, #4
 801fc0e:	3004      	addeq	r0, #4
 801fc10:	0799      	lsls	r1, r3, #30
 801fc12:	bf04      	itt	eq
 801fc14:	089b      	lsreq	r3, r3, #2
 801fc16:	3002      	addeq	r0, #2
 801fc18:	07d9      	lsls	r1, r3, #31
 801fc1a:	d403      	bmi.n	801fc24 <__lo0bits+0x4e>
 801fc1c:	085b      	lsrs	r3, r3, #1
 801fc1e:	f100 0001 	add.w	r0, r0, #1
 801fc22:	d003      	beq.n	801fc2c <__lo0bits+0x56>
 801fc24:	6013      	str	r3, [r2, #0]
 801fc26:	4770      	bx	lr
 801fc28:	2000      	movs	r0, #0
 801fc2a:	4770      	bx	lr
 801fc2c:	2020      	movs	r0, #32
 801fc2e:	4770      	bx	lr

0801fc30 <__i2b>:
 801fc30:	b510      	push	{r4, lr}
 801fc32:	460c      	mov	r4, r1
 801fc34:	2101      	movs	r1, #1
 801fc36:	f7ff febd 	bl	801f9b4 <_Balloc>
 801fc3a:	4602      	mov	r2, r0
 801fc3c:	b928      	cbnz	r0, 801fc4a <__i2b+0x1a>
 801fc3e:	4b05      	ldr	r3, [pc, #20]	@ (801fc54 <__i2b+0x24>)
 801fc40:	4805      	ldr	r0, [pc, #20]	@ (801fc58 <__i2b+0x28>)
 801fc42:	f240 1145 	movw	r1, #325	@ 0x145
 801fc46:	f7fe ffff 	bl	801ec48 <__assert_func>
 801fc4a:	2301      	movs	r3, #1
 801fc4c:	6144      	str	r4, [r0, #20]
 801fc4e:	6103      	str	r3, [r0, #16]
 801fc50:	bd10      	pop	{r4, pc}
 801fc52:	bf00      	nop
 801fc54:	08025548 	.word	0x08025548
 801fc58:	08025559 	.word	0x08025559

0801fc5c <__multiply>:
 801fc5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fc60:	4614      	mov	r4, r2
 801fc62:	690a      	ldr	r2, [r1, #16]
 801fc64:	6923      	ldr	r3, [r4, #16]
 801fc66:	429a      	cmp	r2, r3
 801fc68:	bfa8      	it	ge
 801fc6a:	4623      	movge	r3, r4
 801fc6c:	460f      	mov	r7, r1
 801fc6e:	bfa4      	itt	ge
 801fc70:	460c      	movge	r4, r1
 801fc72:	461f      	movge	r7, r3
 801fc74:	f8d4 a010 	ldr.w	sl, [r4, #16]
 801fc78:	f8d7 9010 	ldr.w	r9, [r7, #16]
 801fc7c:	68a3      	ldr	r3, [r4, #8]
 801fc7e:	6861      	ldr	r1, [r4, #4]
 801fc80:	eb0a 0609 	add.w	r6, sl, r9
 801fc84:	42b3      	cmp	r3, r6
 801fc86:	b085      	sub	sp, #20
 801fc88:	bfb8      	it	lt
 801fc8a:	3101      	addlt	r1, #1
 801fc8c:	f7ff fe92 	bl	801f9b4 <_Balloc>
 801fc90:	b930      	cbnz	r0, 801fca0 <__multiply+0x44>
 801fc92:	4602      	mov	r2, r0
 801fc94:	4b44      	ldr	r3, [pc, #272]	@ (801fda8 <__multiply+0x14c>)
 801fc96:	4845      	ldr	r0, [pc, #276]	@ (801fdac <__multiply+0x150>)
 801fc98:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801fc9c:	f7fe ffd4 	bl	801ec48 <__assert_func>
 801fca0:	f100 0514 	add.w	r5, r0, #20
 801fca4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801fca8:	462b      	mov	r3, r5
 801fcaa:	2200      	movs	r2, #0
 801fcac:	4543      	cmp	r3, r8
 801fcae:	d321      	bcc.n	801fcf4 <__multiply+0x98>
 801fcb0:	f107 0114 	add.w	r1, r7, #20
 801fcb4:	f104 0214 	add.w	r2, r4, #20
 801fcb8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 801fcbc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 801fcc0:	9302      	str	r3, [sp, #8]
 801fcc2:	1b13      	subs	r3, r2, r4
 801fcc4:	3b15      	subs	r3, #21
 801fcc6:	f023 0303 	bic.w	r3, r3, #3
 801fcca:	3304      	adds	r3, #4
 801fccc:	f104 0715 	add.w	r7, r4, #21
 801fcd0:	42ba      	cmp	r2, r7
 801fcd2:	bf38      	it	cc
 801fcd4:	2304      	movcc	r3, #4
 801fcd6:	9301      	str	r3, [sp, #4]
 801fcd8:	9b02      	ldr	r3, [sp, #8]
 801fcda:	9103      	str	r1, [sp, #12]
 801fcdc:	428b      	cmp	r3, r1
 801fcde:	d80c      	bhi.n	801fcfa <__multiply+0x9e>
 801fce0:	2e00      	cmp	r6, #0
 801fce2:	dd03      	ble.n	801fcec <__multiply+0x90>
 801fce4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801fce8:	2b00      	cmp	r3, #0
 801fcea:	d05b      	beq.n	801fda4 <__multiply+0x148>
 801fcec:	6106      	str	r6, [r0, #16]
 801fcee:	b005      	add	sp, #20
 801fcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fcf4:	f843 2b04 	str.w	r2, [r3], #4
 801fcf8:	e7d8      	b.n	801fcac <__multiply+0x50>
 801fcfa:	f8b1 a000 	ldrh.w	sl, [r1]
 801fcfe:	f1ba 0f00 	cmp.w	sl, #0
 801fd02:	d024      	beq.n	801fd4e <__multiply+0xf2>
 801fd04:	f104 0e14 	add.w	lr, r4, #20
 801fd08:	46a9      	mov	r9, r5
 801fd0a:	f04f 0c00 	mov.w	ip, #0
 801fd0e:	f85e 7b04 	ldr.w	r7, [lr], #4
 801fd12:	f8d9 3000 	ldr.w	r3, [r9]
 801fd16:	fa1f fb87 	uxth.w	fp, r7
 801fd1a:	b29b      	uxth	r3, r3
 801fd1c:	fb0a 330b 	mla	r3, sl, fp, r3
 801fd20:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 801fd24:	f8d9 7000 	ldr.w	r7, [r9]
 801fd28:	4463      	add	r3, ip
 801fd2a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801fd2e:	fb0a c70b 	mla	r7, sl, fp, ip
 801fd32:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 801fd36:	b29b      	uxth	r3, r3
 801fd38:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801fd3c:	4572      	cmp	r2, lr
 801fd3e:	f849 3b04 	str.w	r3, [r9], #4
 801fd42:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801fd46:	d8e2      	bhi.n	801fd0e <__multiply+0xb2>
 801fd48:	9b01      	ldr	r3, [sp, #4]
 801fd4a:	f845 c003 	str.w	ip, [r5, r3]
 801fd4e:	9b03      	ldr	r3, [sp, #12]
 801fd50:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801fd54:	3104      	adds	r1, #4
 801fd56:	f1b9 0f00 	cmp.w	r9, #0
 801fd5a:	d021      	beq.n	801fda0 <__multiply+0x144>
 801fd5c:	682b      	ldr	r3, [r5, #0]
 801fd5e:	f104 0c14 	add.w	ip, r4, #20
 801fd62:	46ae      	mov	lr, r5
 801fd64:	f04f 0a00 	mov.w	sl, #0
 801fd68:	f8bc b000 	ldrh.w	fp, [ip]
 801fd6c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 801fd70:	fb09 770b 	mla	r7, r9, fp, r7
 801fd74:	4457      	add	r7, sl
 801fd76:	b29b      	uxth	r3, r3
 801fd78:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 801fd7c:	f84e 3b04 	str.w	r3, [lr], #4
 801fd80:	f85c 3b04 	ldr.w	r3, [ip], #4
 801fd84:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801fd88:	f8be 3000 	ldrh.w	r3, [lr]
 801fd8c:	fb09 330a 	mla	r3, r9, sl, r3
 801fd90:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 801fd94:	4562      	cmp	r2, ip
 801fd96:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 801fd9a:	d8e5      	bhi.n	801fd68 <__multiply+0x10c>
 801fd9c:	9f01      	ldr	r7, [sp, #4]
 801fd9e:	51eb      	str	r3, [r5, r7]
 801fda0:	3504      	adds	r5, #4
 801fda2:	e799      	b.n	801fcd8 <__multiply+0x7c>
 801fda4:	3e01      	subs	r6, #1
 801fda6:	e79b      	b.n	801fce0 <__multiply+0x84>
 801fda8:	08025548 	.word	0x08025548
 801fdac:	08025559 	.word	0x08025559

0801fdb0 <__pow5mult>:
 801fdb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801fdb4:	4615      	mov	r5, r2
 801fdb6:	f012 0203 	ands.w	r2, r2, #3
 801fdba:	4607      	mov	r7, r0
 801fdbc:	460e      	mov	r6, r1
 801fdbe:	d007      	beq.n	801fdd0 <__pow5mult+0x20>
 801fdc0:	4c25      	ldr	r4, [pc, #148]	@ (801fe58 <__pow5mult+0xa8>)
 801fdc2:	3a01      	subs	r2, #1
 801fdc4:	2300      	movs	r3, #0
 801fdc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801fdca:	f7ff fe55 	bl	801fa78 <__multadd>
 801fdce:	4606      	mov	r6, r0
 801fdd0:	10ad      	asrs	r5, r5, #2
 801fdd2:	d03d      	beq.n	801fe50 <__pow5mult+0xa0>
 801fdd4:	69fc      	ldr	r4, [r7, #28]
 801fdd6:	b97c      	cbnz	r4, 801fdf8 <__pow5mult+0x48>
 801fdd8:	2010      	movs	r0, #16
 801fdda:	f7fd fafb 	bl	801d3d4 <malloc>
 801fdde:	4602      	mov	r2, r0
 801fde0:	61f8      	str	r0, [r7, #28]
 801fde2:	b928      	cbnz	r0, 801fdf0 <__pow5mult+0x40>
 801fde4:	4b1d      	ldr	r3, [pc, #116]	@ (801fe5c <__pow5mult+0xac>)
 801fde6:	481e      	ldr	r0, [pc, #120]	@ (801fe60 <__pow5mult+0xb0>)
 801fde8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 801fdec:	f7fe ff2c 	bl	801ec48 <__assert_func>
 801fdf0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801fdf4:	6004      	str	r4, [r0, #0]
 801fdf6:	60c4      	str	r4, [r0, #12]
 801fdf8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 801fdfc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801fe00:	b94c      	cbnz	r4, 801fe16 <__pow5mult+0x66>
 801fe02:	f240 2171 	movw	r1, #625	@ 0x271
 801fe06:	4638      	mov	r0, r7
 801fe08:	f7ff ff12 	bl	801fc30 <__i2b>
 801fe0c:	2300      	movs	r3, #0
 801fe0e:	f8c8 0008 	str.w	r0, [r8, #8]
 801fe12:	4604      	mov	r4, r0
 801fe14:	6003      	str	r3, [r0, #0]
 801fe16:	f04f 0900 	mov.w	r9, #0
 801fe1a:	07eb      	lsls	r3, r5, #31
 801fe1c:	d50a      	bpl.n	801fe34 <__pow5mult+0x84>
 801fe1e:	4631      	mov	r1, r6
 801fe20:	4622      	mov	r2, r4
 801fe22:	4638      	mov	r0, r7
 801fe24:	f7ff ff1a 	bl	801fc5c <__multiply>
 801fe28:	4631      	mov	r1, r6
 801fe2a:	4680      	mov	r8, r0
 801fe2c:	4638      	mov	r0, r7
 801fe2e:	f7ff fe01 	bl	801fa34 <_Bfree>
 801fe32:	4646      	mov	r6, r8
 801fe34:	106d      	asrs	r5, r5, #1
 801fe36:	d00b      	beq.n	801fe50 <__pow5mult+0xa0>
 801fe38:	6820      	ldr	r0, [r4, #0]
 801fe3a:	b938      	cbnz	r0, 801fe4c <__pow5mult+0x9c>
 801fe3c:	4622      	mov	r2, r4
 801fe3e:	4621      	mov	r1, r4
 801fe40:	4638      	mov	r0, r7
 801fe42:	f7ff ff0b 	bl	801fc5c <__multiply>
 801fe46:	6020      	str	r0, [r4, #0]
 801fe48:	f8c0 9000 	str.w	r9, [r0]
 801fe4c:	4604      	mov	r4, r0
 801fe4e:	e7e4      	b.n	801fe1a <__pow5mult+0x6a>
 801fe50:	4630      	mov	r0, r6
 801fe52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801fe56:	bf00      	nop
 801fe58:	080255b4 	.word	0x080255b4
 801fe5c:	080252fe 	.word	0x080252fe
 801fe60:	08025559 	.word	0x08025559

0801fe64 <__lshift>:
 801fe64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801fe68:	460c      	mov	r4, r1
 801fe6a:	6849      	ldr	r1, [r1, #4]
 801fe6c:	6923      	ldr	r3, [r4, #16]
 801fe6e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801fe72:	68a3      	ldr	r3, [r4, #8]
 801fe74:	4607      	mov	r7, r0
 801fe76:	4691      	mov	r9, r2
 801fe78:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801fe7c:	f108 0601 	add.w	r6, r8, #1
 801fe80:	42b3      	cmp	r3, r6
 801fe82:	db0b      	blt.n	801fe9c <__lshift+0x38>
 801fe84:	4638      	mov	r0, r7
 801fe86:	f7ff fd95 	bl	801f9b4 <_Balloc>
 801fe8a:	4605      	mov	r5, r0
 801fe8c:	b948      	cbnz	r0, 801fea2 <__lshift+0x3e>
 801fe8e:	4602      	mov	r2, r0
 801fe90:	4b28      	ldr	r3, [pc, #160]	@ (801ff34 <__lshift+0xd0>)
 801fe92:	4829      	ldr	r0, [pc, #164]	@ (801ff38 <__lshift+0xd4>)
 801fe94:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 801fe98:	f7fe fed6 	bl	801ec48 <__assert_func>
 801fe9c:	3101      	adds	r1, #1
 801fe9e:	005b      	lsls	r3, r3, #1
 801fea0:	e7ee      	b.n	801fe80 <__lshift+0x1c>
 801fea2:	2300      	movs	r3, #0
 801fea4:	f100 0114 	add.w	r1, r0, #20
 801fea8:	f100 0210 	add.w	r2, r0, #16
 801feac:	4618      	mov	r0, r3
 801feae:	4553      	cmp	r3, sl
 801feb0:	db33      	blt.n	801ff1a <__lshift+0xb6>
 801feb2:	6920      	ldr	r0, [r4, #16]
 801feb4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801feb8:	f104 0314 	add.w	r3, r4, #20
 801febc:	f019 091f 	ands.w	r9, r9, #31
 801fec0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801fec4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801fec8:	d02b      	beq.n	801ff22 <__lshift+0xbe>
 801feca:	f1c9 0e20 	rsb	lr, r9, #32
 801fece:	468a      	mov	sl, r1
 801fed0:	2200      	movs	r2, #0
 801fed2:	6818      	ldr	r0, [r3, #0]
 801fed4:	fa00 f009 	lsl.w	r0, r0, r9
 801fed8:	4310      	orrs	r0, r2
 801feda:	f84a 0b04 	str.w	r0, [sl], #4
 801fede:	f853 2b04 	ldr.w	r2, [r3], #4
 801fee2:	459c      	cmp	ip, r3
 801fee4:	fa22 f20e 	lsr.w	r2, r2, lr
 801fee8:	d8f3      	bhi.n	801fed2 <__lshift+0x6e>
 801feea:	ebac 0304 	sub.w	r3, ip, r4
 801feee:	3b15      	subs	r3, #21
 801fef0:	f023 0303 	bic.w	r3, r3, #3
 801fef4:	3304      	adds	r3, #4
 801fef6:	f104 0015 	add.w	r0, r4, #21
 801fefa:	4584      	cmp	ip, r0
 801fefc:	bf38      	it	cc
 801fefe:	2304      	movcc	r3, #4
 801ff00:	50ca      	str	r2, [r1, r3]
 801ff02:	b10a      	cbz	r2, 801ff08 <__lshift+0xa4>
 801ff04:	f108 0602 	add.w	r6, r8, #2
 801ff08:	3e01      	subs	r6, #1
 801ff0a:	4638      	mov	r0, r7
 801ff0c:	612e      	str	r6, [r5, #16]
 801ff0e:	4621      	mov	r1, r4
 801ff10:	f7ff fd90 	bl	801fa34 <_Bfree>
 801ff14:	4628      	mov	r0, r5
 801ff16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ff1a:	f842 0f04 	str.w	r0, [r2, #4]!
 801ff1e:	3301      	adds	r3, #1
 801ff20:	e7c5      	b.n	801feae <__lshift+0x4a>
 801ff22:	3904      	subs	r1, #4
 801ff24:	f853 2b04 	ldr.w	r2, [r3], #4
 801ff28:	f841 2f04 	str.w	r2, [r1, #4]!
 801ff2c:	459c      	cmp	ip, r3
 801ff2e:	d8f9      	bhi.n	801ff24 <__lshift+0xc0>
 801ff30:	e7ea      	b.n	801ff08 <__lshift+0xa4>
 801ff32:	bf00      	nop
 801ff34:	08025548 	.word	0x08025548
 801ff38:	08025559 	.word	0x08025559

0801ff3c <__mcmp>:
 801ff3c:	690a      	ldr	r2, [r1, #16]
 801ff3e:	4603      	mov	r3, r0
 801ff40:	6900      	ldr	r0, [r0, #16]
 801ff42:	1a80      	subs	r0, r0, r2
 801ff44:	b530      	push	{r4, r5, lr}
 801ff46:	d10e      	bne.n	801ff66 <__mcmp+0x2a>
 801ff48:	3314      	adds	r3, #20
 801ff4a:	3114      	adds	r1, #20
 801ff4c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801ff50:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801ff54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801ff58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 801ff5c:	4295      	cmp	r5, r2
 801ff5e:	d003      	beq.n	801ff68 <__mcmp+0x2c>
 801ff60:	d205      	bcs.n	801ff6e <__mcmp+0x32>
 801ff62:	f04f 30ff 	mov.w	r0, #4294967295
 801ff66:	bd30      	pop	{r4, r5, pc}
 801ff68:	42a3      	cmp	r3, r4
 801ff6a:	d3f3      	bcc.n	801ff54 <__mcmp+0x18>
 801ff6c:	e7fb      	b.n	801ff66 <__mcmp+0x2a>
 801ff6e:	2001      	movs	r0, #1
 801ff70:	e7f9      	b.n	801ff66 <__mcmp+0x2a>
	...

0801ff74 <__mdiff>:
 801ff74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff78:	4689      	mov	r9, r1
 801ff7a:	4606      	mov	r6, r0
 801ff7c:	4611      	mov	r1, r2
 801ff7e:	4648      	mov	r0, r9
 801ff80:	4614      	mov	r4, r2
 801ff82:	f7ff ffdb 	bl	801ff3c <__mcmp>
 801ff86:	1e05      	subs	r5, r0, #0
 801ff88:	d112      	bne.n	801ffb0 <__mdiff+0x3c>
 801ff8a:	4629      	mov	r1, r5
 801ff8c:	4630      	mov	r0, r6
 801ff8e:	f7ff fd11 	bl	801f9b4 <_Balloc>
 801ff92:	4602      	mov	r2, r0
 801ff94:	b928      	cbnz	r0, 801ffa2 <__mdiff+0x2e>
 801ff96:	4b3f      	ldr	r3, [pc, #252]	@ (8020094 <__mdiff+0x120>)
 801ff98:	f240 2137 	movw	r1, #567	@ 0x237
 801ff9c:	483e      	ldr	r0, [pc, #248]	@ (8020098 <__mdiff+0x124>)
 801ff9e:	f7fe fe53 	bl	801ec48 <__assert_func>
 801ffa2:	2301      	movs	r3, #1
 801ffa4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ffa8:	4610      	mov	r0, r2
 801ffaa:	b003      	add	sp, #12
 801ffac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ffb0:	bfbc      	itt	lt
 801ffb2:	464b      	movlt	r3, r9
 801ffb4:	46a1      	movlt	r9, r4
 801ffb6:	4630      	mov	r0, r6
 801ffb8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801ffbc:	bfba      	itte	lt
 801ffbe:	461c      	movlt	r4, r3
 801ffc0:	2501      	movlt	r5, #1
 801ffc2:	2500      	movge	r5, #0
 801ffc4:	f7ff fcf6 	bl	801f9b4 <_Balloc>
 801ffc8:	4602      	mov	r2, r0
 801ffca:	b918      	cbnz	r0, 801ffd4 <__mdiff+0x60>
 801ffcc:	4b31      	ldr	r3, [pc, #196]	@ (8020094 <__mdiff+0x120>)
 801ffce:	f240 2145 	movw	r1, #581	@ 0x245
 801ffd2:	e7e3      	b.n	801ff9c <__mdiff+0x28>
 801ffd4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 801ffd8:	6926      	ldr	r6, [r4, #16]
 801ffda:	60c5      	str	r5, [r0, #12]
 801ffdc:	f109 0310 	add.w	r3, r9, #16
 801ffe0:	f109 0514 	add.w	r5, r9, #20
 801ffe4:	f104 0e14 	add.w	lr, r4, #20
 801ffe8:	f100 0b14 	add.w	fp, r0, #20
 801ffec:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 801fff0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 801fff4:	9301      	str	r3, [sp, #4]
 801fff6:	46d9      	mov	r9, fp
 801fff8:	f04f 0c00 	mov.w	ip, #0
 801fffc:	9b01      	ldr	r3, [sp, #4]
 801fffe:	f85e 0b04 	ldr.w	r0, [lr], #4
 8020002:	f853 af04 	ldr.w	sl, [r3, #4]!
 8020006:	9301      	str	r3, [sp, #4]
 8020008:	fa1f f38a 	uxth.w	r3, sl
 802000c:	4619      	mov	r1, r3
 802000e:	b283      	uxth	r3, r0
 8020010:	1acb      	subs	r3, r1, r3
 8020012:	0c00      	lsrs	r0, r0, #16
 8020014:	4463      	add	r3, ip
 8020016:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 802001a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 802001e:	b29b      	uxth	r3, r3
 8020020:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8020024:	4576      	cmp	r6, lr
 8020026:	f849 3b04 	str.w	r3, [r9], #4
 802002a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802002e:	d8e5      	bhi.n	801fffc <__mdiff+0x88>
 8020030:	1b33      	subs	r3, r6, r4
 8020032:	3b15      	subs	r3, #21
 8020034:	f023 0303 	bic.w	r3, r3, #3
 8020038:	3415      	adds	r4, #21
 802003a:	3304      	adds	r3, #4
 802003c:	42a6      	cmp	r6, r4
 802003e:	bf38      	it	cc
 8020040:	2304      	movcc	r3, #4
 8020042:	441d      	add	r5, r3
 8020044:	445b      	add	r3, fp
 8020046:	461e      	mov	r6, r3
 8020048:	462c      	mov	r4, r5
 802004a:	4544      	cmp	r4, r8
 802004c:	d30e      	bcc.n	802006c <__mdiff+0xf8>
 802004e:	f108 0103 	add.w	r1, r8, #3
 8020052:	1b49      	subs	r1, r1, r5
 8020054:	f021 0103 	bic.w	r1, r1, #3
 8020058:	3d03      	subs	r5, #3
 802005a:	45a8      	cmp	r8, r5
 802005c:	bf38      	it	cc
 802005e:	2100      	movcc	r1, #0
 8020060:	440b      	add	r3, r1
 8020062:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020066:	b191      	cbz	r1, 802008e <__mdiff+0x11a>
 8020068:	6117      	str	r7, [r2, #16]
 802006a:	e79d      	b.n	801ffa8 <__mdiff+0x34>
 802006c:	f854 1b04 	ldr.w	r1, [r4], #4
 8020070:	46e6      	mov	lr, ip
 8020072:	0c08      	lsrs	r0, r1, #16
 8020074:	fa1c fc81 	uxtah	ip, ip, r1
 8020078:	4471      	add	r1, lr
 802007a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 802007e:	b289      	uxth	r1, r1
 8020080:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8020084:	f846 1b04 	str.w	r1, [r6], #4
 8020088:	ea4f 4c20 	mov.w	ip, r0, asr #16
 802008c:	e7dd      	b.n	802004a <__mdiff+0xd6>
 802008e:	3f01      	subs	r7, #1
 8020090:	e7e7      	b.n	8020062 <__mdiff+0xee>
 8020092:	bf00      	nop
 8020094:	08025548 	.word	0x08025548
 8020098:	08025559 	.word	0x08025559

0802009c <__ulp>:
 802009c:	b082      	sub	sp, #8
 802009e:	ed8d 0b00 	vstr	d0, [sp]
 80200a2:	9a01      	ldr	r2, [sp, #4]
 80200a4:	4b0f      	ldr	r3, [pc, #60]	@ (80200e4 <__ulp+0x48>)
 80200a6:	4013      	ands	r3, r2
 80200a8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 80200ac:	2b00      	cmp	r3, #0
 80200ae:	dc08      	bgt.n	80200c2 <__ulp+0x26>
 80200b0:	425b      	negs	r3, r3
 80200b2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 80200b6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80200ba:	da04      	bge.n	80200c6 <__ulp+0x2a>
 80200bc:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80200c0:	4113      	asrs	r3, r2
 80200c2:	2200      	movs	r2, #0
 80200c4:	e008      	b.n	80200d8 <__ulp+0x3c>
 80200c6:	f1a2 0314 	sub.w	r3, r2, #20
 80200ca:	2b1e      	cmp	r3, #30
 80200cc:	bfda      	itte	le
 80200ce:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80200d2:	40da      	lsrle	r2, r3
 80200d4:	2201      	movgt	r2, #1
 80200d6:	2300      	movs	r3, #0
 80200d8:	4619      	mov	r1, r3
 80200da:	4610      	mov	r0, r2
 80200dc:	ec41 0b10 	vmov	d0, r0, r1
 80200e0:	b002      	add	sp, #8
 80200e2:	4770      	bx	lr
 80200e4:	7ff00000 	.word	0x7ff00000

080200e8 <__b2d>:
 80200e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80200ec:	6906      	ldr	r6, [r0, #16]
 80200ee:	f100 0814 	add.w	r8, r0, #20
 80200f2:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80200f6:	1f37      	subs	r7, r6, #4
 80200f8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80200fc:	4610      	mov	r0, r2
 80200fe:	f7ff fd4b 	bl	801fb98 <__hi0bits>
 8020102:	f1c0 0320 	rsb	r3, r0, #32
 8020106:	280a      	cmp	r0, #10
 8020108:	600b      	str	r3, [r1, #0]
 802010a:	491b      	ldr	r1, [pc, #108]	@ (8020178 <__b2d+0x90>)
 802010c:	dc15      	bgt.n	802013a <__b2d+0x52>
 802010e:	f1c0 0c0b 	rsb	ip, r0, #11
 8020112:	fa22 f30c 	lsr.w	r3, r2, ip
 8020116:	45b8      	cmp	r8, r7
 8020118:	ea43 0501 	orr.w	r5, r3, r1
 802011c:	bf34      	ite	cc
 802011e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8020122:	2300      	movcs	r3, #0
 8020124:	3015      	adds	r0, #21
 8020126:	fa02 f000 	lsl.w	r0, r2, r0
 802012a:	fa23 f30c 	lsr.w	r3, r3, ip
 802012e:	4303      	orrs	r3, r0
 8020130:	461c      	mov	r4, r3
 8020132:	ec45 4b10 	vmov	d0, r4, r5
 8020136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802013a:	45b8      	cmp	r8, r7
 802013c:	bf3a      	itte	cc
 802013e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8020142:	f1a6 0708 	subcc.w	r7, r6, #8
 8020146:	2300      	movcs	r3, #0
 8020148:	380b      	subs	r0, #11
 802014a:	d012      	beq.n	8020172 <__b2d+0x8a>
 802014c:	f1c0 0120 	rsb	r1, r0, #32
 8020150:	fa23 f401 	lsr.w	r4, r3, r1
 8020154:	4082      	lsls	r2, r0
 8020156:	4322      	orrs	r2, r4
 8020158:	4547      	cmp	r7, r8
 802015a:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 802015e:	bf8c      	ite	hi
 8020160:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8020164:	2200      	movls	r2, #0
 8020166:	4083      	lsls	r3, r0
 8020168:	40ca      	lsrs	r2, r1
 802016a:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 802016e:	4313      	orrs	r3, r2
 8020170:	e7de      	b.n	8020130 <__b2d+0x48>
 8020172:	ea42 0501 	orr.w	r5, r2, r1
 8020176:	e7db      	b.n	8020130 <__b2d+0x48>
 8020178:	3ff00000 	.word	0x3ff00000

0802017c <__d2b>:
 802017c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8020180:	460f      	mov	r7, r1
 8020182:	2101      	movs	r1, #1
 8020184:	ec59 8b10 	vmov	r8, r9, d0
 8020188:	4616      	mov	r6, r2
 802018a:	f7ff fc13 	bl	801f9b4 <_Balloc>
 802018e:	4604      	mov	r4, r0
 8020190:	b930      	cbnz	r0, 80201a0 <__d2b+0x24>
 8020192:	4602      	mov	r2, r0
 8020194:	4b23      	ldr	r3, [pc, #140]	@ (8020224 <__d2b+0xa8>)
 8020196:	4824      	ldr	r0, [pc, #144]	@ (8020228 <__d2b+0xac>)
 8020198:	f240 310f 	movw	r1, #783	@ 0x30f
 802019c:	f7fe fd54 	bl	801ec48 <__assert_func>
 80201a0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80201a4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80201a8:	b10d      	cbz	r5, 80201ae <__d2b+0x32>
 80201aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80201ae:	9301      	str	r3, [sp, #4]
 80201b0:	f1b8 0300 	subs.w	r3, r8, #0
 80201b4:	d023      	beq.n	80201fe <__d2b+0x82>
 80201b6:	4668      	mov	r0, sp
 80201b8:	9300      	str	r3, [sp, #0]
 80201ba:	f7ff fd0c 	bl	801fbd6 <__lo0bits>
 80201be:	e9dd 1200 	ldrd	r1, r2, [sp]
 80201c2:	b1d0      	cbz	r0, 80201fa <__d2b+0x7e>
 80201c4:	f1c0 0320 	rsb	r3, r0, #32
 80201c8:	fa02 f303 	lsl.w	r3, r2, r3
 80201cc:	430b      	orrs	r3, r1
 80201ce:	40c2      	lsrs	r2, r0
 80201d0:	6163      	str	r3, [r4, #20]
 80201d2:	9201      	str	r2, [sp, #4]
 80201d4:	9b01      	ldr	r3, [sp, #4]
 80201d6:	61a3      	str	r3, [r4, #24]
 80201d8:	2b00      	cmp	r3, #0
 80201da:	bf0c      	ite	eq
 80201dc:	2201      	moveq	r2, #1
 80201de:	2202      	movne	r2, #2
 80201e0:	6122      	str	r2, [r4, #16]
 80201e2:	b1a5      	cbz	r5, 802020e <__d2b+0x92>
 80201e4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80201e8:	4405      	add	r5, r0
 80201ea:	603d      	str	r5, [r7, #0]
 80201ec:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80201f0:	6030      	str	r0, [r6, #0]
 80201f2:	4620      	mov	r0, r4
 80201f4:	b003      	add	sp, #12
 80201f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80201fa:	6161      	str	r1, [r4, #20]
 80201fc:	e7ea      	b.n	80201d4 <__d2b+0x58>
 80201fe:	a801      	add	r0, sp, #4
 8020200:	f7ff fce9 	bl	801fbd6 <__lo0bits>
 8020204:	9b01      	ldr	r3, [sp, #4]
 8020206:	6163      	str	r3, [r4, #20]
 8020208:	3020      	adds	r0, #32
 802020a:	2201      	movs	r2, #1
 802020c:	e7e8      	b.n	80201e0 <__d2b+0x64>
 802020e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8020212:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8020216:	6038      	str	r0, [r7, #0]
 8020218:	6918      	ldr	r0, [r3, #16]
 802021a:	f7ff fcbd 	bl	801fb98 <__hi0bits>
 802021e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8020222:	e7e5      	b.n	80201f0 <__d2b+0x74>
 8020224:	08025548 	.word	0x08025548
 8020228:	08025559 	.word	0x08025559

0802022c <__ratio>:
 802022c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020230:	b085      	sub	sp, #20
 8020232:	e9cd 1000 	strd	r1, r0, [sp]
 8020236:	a902      	add	r1, sp, #8
 8020238:	f7ff ff56 	bl	80200e8 <__b2d>
 802023c:	9800      	ldr	r0, [sp, #0]
 802023e:	a903      	add	r1, sp, #12
 8020240:	ec55 4b10 	vmov	r4, r5, d0
 8020244:	f7ff ff50 	bl	80200e8 <__b2d>
 8020248:	9b01      	ldr	r3, [sp, #4]
 802024a:	6919      	ldr	r1, [r3, #16]
 802024c:	9b00      	ldr	r3, [sp, #0]
 802024e:	691b      	ldr	r3, [r3, #16]
 8020250:	1ac9      	subs	r1, r1, r3
 8020252:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8020256:	1a9b      	subs	r3, r3, r2
 8020258:	ec5b ab10 	vmov	sl, fp, d0
 802025c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8020260:	2b00      	cmp	r3, #0
 8020262:	bfce      	itee	gt
 8020264:	462a      	movgt	r2, r5
 8020266:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 802026a:	465a      	movle	r2, fp
 802026c:	462f      	mov	r7, r5
 802026e:	46d9      	mov	r9, fp
 8020270:	bfcc      	ite	gt
 8020272:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8020276:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 802027a:	464b      	mov	r3, r9
 802027c:	4652      	mov	r2, sl
 802027e:	4620      	mov	r0, r4
 8020280:	4639      	mov	r1, r7
 8020282:	f7e0 fae3 	bl	800084c <__aeabi_ddiv>
 8020286:	ec41 0b10 	vmov	d0, r0, r1
 802028a:	b005      	add	sp, #20
 802028c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020290 <__copybits>:
 8020290:	3901      	subs	r1, #1
 8020292:	b570      	push	{r4, r5, r6, lr}
 8020294:	1149      	asrs	r1, r1, #5
 8020296:	6914      	ldr	r4, [r2, #16]
 8020298:	3101      	adds	r1, #1
 802029a:	f102 0314 	add.w	r3, r2, #20
 802029e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80202a2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80202a6:	1f05      	subs	r5, r0, #4
 80202a8:	42a3      	cmp	r3, r4
 80202aa:	d30c      	bcc.n	80202c6 <__copybits+0x36>
 80202ac:	1aa3      	subs	r3, r4, r2
 80202ae:	3b11      	subs	r3, #17
 80202b0:	f023 0303 	bic.w	r3, r3, #3
 80202b4:	3211      	adds	r2, #17
 80202b6:	42a2      	cmp	r2, r4
 80202b8:	bf88      	it	hi
 80202ba:	2300      	movhi	r3, #0
 80202bc:	4418      	add	r0, r3
 80202be:	2300      	movs	r3, #0
 80202c0:	4288      	cmp	r0, r1
 80202c2:	d305      	bcc.n	80202d0 <__copybits+0x40>
 80202c4:	bd70      	pop	{r4, r5, r6, pc}
 80202c6:	f853 6b04 	ldr.w	r6, [r3], #4
 80202ca:	f845 6f04 	str.w	r6, [r5, #4]!
 80202ce:	e7eb      	b.n	80202a8 <__copybits+0x18>
 80202d0:	f840 3b04 	str.w	r3, [r0], #4
 80202d4:	e7f4      	b.n	80202c0 <__copybits+0x30>

080202d6 <__any_on>:
 80202d6:	f100 0214 	add.w	r2, r0, #20
 80202da:	6900      	ldr	r0, [r0, #16]
 80202dc:	114b      	asrs	r3, r1, #5
 80202de:	4298      	cmp	r0, r3
 80202e0:	b510      	push	{r4, lr}
 80202e2:	db11      	blt.n	8020308 <__any_on+0x32>
 80202e4:	dd0a      	ble.n	80202fc <__any_on+0x26>
 80202e6:	f011 011f 	ands.w	r1, r1, #31
 80202ea:	d007      	beq.n	80202fc <__any_on+0x26>
 80202ec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80202f0:	fa24 f001 	lsr.w	r0, r4, r1
 80202f4:	fa00 f101 	lsl.w	r1, r0, r1
 80202f8:	428c      	cmp	r4, r1
 80202fa:	d10b      	bne.n	8020314 <__any_on+0x3e>
 80202fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8020300:	4293      	cmp	r3, r2
 8020302:	d803      	bhi.n	802030c <__any_on+0x36>
 8020304:	2000      	movs	r0, #0
 8020306:	bd10      	pop	{r4, pc}
 8020308:	4603      	mov	r3, r0
 802030a:	e7f7      	b.n	80202fc <__any_on+0x26>
 802030c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8020310:	2900      	cmp	r1, #0
 8020312:	d0f5      	beq.n	8020300 <__any_on+0x2a>
 8020314:	2001      	movs	r0, #1
 8020316:	e7f6      	b.n	8020306 <__any_on+0x30>

08020318 <_malloc_usable_size_r>:
 8020318:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802031c:	1f18      	subs	r0, r3, #4
 802031e:	2b00      	cmp	r3, #0
 8020320:	bfbc      	itt	lt
 8020322:	580b      	ldrlt	r3, [r1, r0]
 8020324:	18c0      	addlt	r0, r0, r3
 8020326:	4770      	bx	lr

08020328 <sulp>:
 8020328:	b570      	push	{r4, r5, r6, lr}
 802032a:	4604      	mov	r4, r0
 802032c:	460d      	mov	r5, r1
 802032e:	ec45 4b10 	vmov	d0, r4, r5
 8020332:	4616      	mov	r6, r2
 8020334:	f7ff feb2 	bl	802009c <__ulp>
 8020338:	ec51 0b10 	vmov	r0, r1, d0
 802033c:	b17e      	cbz	r6, 802035e <sulp+0x36>
 802033e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8020342:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8020346:	2b00      	cmp	r3, #0
 8020348:	dd09      	ble.n	802035e <sulp+0x36>
 802034a:	051b      	lsls	r3, r3, #20
 802034c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8020350:	2400      	movs	r4, #0
 8020352:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8020356:	4622      	mov	r2, r4
 8020358:	462b      	mov	r3, r5
 802035a:	f7e0 f94d 	bl	80005f8 <__aeabi_dmul>
 802035e:	ec41 0b10 	vmov	d0, r0, r1
 8020362:	bd70      	pop	{r4, r5, r6, pc}
 8020364:	0000      	movs	r0, r0
	...

08020368 <_strtod_l>:
 8020368:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802036c:	b09f      	sub	sp, #124	@ 0x7c
 802036e:	460c      	mov	r4, r1
 8020370:	9217      	str	r2, [sp, #92]	@ 0x5c
 8020372:	2200      	movs	r2, #0
 8020374:	921a      	str	r2, [sp, #104]	@ 0x68
 8020376:	9005      	str	r0, [sp, #20]
 8020378:	f04f 0a00 	mov.w	sl, #0
 802037c:	f04f 0b00 	mov.w	fp, #0
 8020380:	460a      	mov	r2, r1
 8020382:	9219      	str	r2, [sp, #100]	@ 0x64
 8020384:	7811      	ldrb	r1, [r2, #0]
 8020386:	292b      	cmp	r1, #43	@ 0x2b
 8020388:	d04a      	beq.n	8020420 <_strtod_l+0xb8>
 802038a:	d838      	bhi.n	80203fe <_strtod_l+0x96>
 802038c:	290d      	cmp	r1, #13
 802038e:	d832      	bhi.n	80203f6 <_strtod_l+0x8e>
 8020390:	2908      	cmp	r1, #8
 8020392:	d832      	bhi.n	80203fa <_strtod_l+0x92>
 8020394:	2900      	cmp	r1, #0
 8020396:	d03b      	beq.n	8020410 <_strtod_l+0xa8>
 8020398:	2200      	movs	r2, #0
 802039a:	920b      	str	r2, [sp, #44]	@ 0x2c
 802039c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 802039e:	782a      	ldrb	r2, [r5, #0]
 80203a0:	2a30      	cmp	r2, #48	@ 0x30
 80203a2:	f040 80b3 	bne.w	802050c <_strtod_l+0x1a4>
 80203a6:	786a      	ldrb	r2, [r5, #1]
 80203a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80203ac:	2a58      	cmp	r2, #88	@ 0x58
 80203ae:	d16e      	bne.n	802048e <_strtod_l+0x126>
 80203b0:	9302      	str	r3, [sp, #8]
 80203b2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80203b4:	9301      	str	r3, [sp, #4]
 80203b6:	ab1a      	add	r3, sp, #104	@ 0x68
 80203b8:	9300      	str	r3, [sp, #0]
 80203ba:	4a8e      	ldr	r2, [pc, #568]	@ (80205f4 <_strtod_l+0x28c>)
 80203bc:	9805      	ldr	r0, [sp, #20]
 80203be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80203c0:	a919      	add	r1, sp, #100	@ 0x64
 80203c2:	f001 f971 	bl	80216a8 <__gethex>
 80203c6:	f010 060f 	ands.w	r6, r0, #15
 80203ca:	4604      	mov	r4, r0
 80203cc:	d005      	beq.n	80203da <_strtod_l+0x72>
 80203ce:	2e06      	cmp	r6, #6
 80203d0:	d128      	bne.n	8020424 <_strtod_l+0xbc>
 80203d2:	3501      	adds	r5, #1
 80203d4:	2300      	movs	r3, #0
 80203d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80203d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80203da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80203dc:	2b00      	cmp	r3, #0
 80203de:	f040 858e 	bne.w	8020efe <_strtod_l+0xb96>
 80203e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80203e4:	b1cb      	cbz	r3, 802041a <_strtod_l+0xb2>
 80203e6:	4652      	mov	r2, sl
 80203e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80203ec:	ec43 2b10 	vmov	d0, r2, r3
 80203f0:	b01f      	add	sp, #124	@ 0x7c
 80203f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203f6:	2920      	cmp	r1, #32
 80203f8:	d1ce      	bne.n	8020398 <_strtod_l+0x30>
 80203fa:	3201      	adds	r2, #1
 80203fc:	e7c1      	b.n	8020382 <_strtod_l+0x1a>
 80203fe:	292d      	cmp	r1, #45	@ 0x2d
 8020400:	d1ca      	bne.n	8020398 <_strtod_l+0x30>
 8020402:	2101      	movs	r1, #1
 8020404:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020406:	1c51      	adds	r1, r2, #1
 8020408:	9119      	str	r1, [sp, #100]	@ 0x64
 802040a:	7852      	ldrb	r2, [r2, #1]
 802040c:	2a00      	cmp	r2, #0
 802040e:	d1c5      	bne.n	802039c <_strtod_l+0x34>
 8020410:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020412:	9419      	str	r4, [sp, #100]	@ 0x64
 8020414:	2b00      	cmp	r3, #0
 8020416:	f040 8570 	bne.w	8020efa <_strtod_l+0xb92>
 802041a:	4652      	mov	r2, sl
 802041c:	465b      	mov	r3, fp
 802041e:	e7e5      	b.n	80203ec <_strtod_l+0x84>
 8020420:	2100      	movs	r1, #0
 8020422:	e7ef      	b.n	8020404 <_strtod_l+0x9c>
 8020424:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020426:	b13a      	cbz	r2, 8020438 <_strtod_l+0xd0>
 8020428:	2135      	movs	r1, #53	@ 0x35
 802042a:	a81c      	add	r0, sp, #112	@ 0x70
 802042c:	f7ff ff30 	bl	8020290 <__copybits>
 8020430:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020432:	9805      	ldr	r0, [sp, #20]
 8020434:	f7ff fafe 	bl	801fa34 <_Bfree>
 8020438:	3e01      	subs	r6, #1
 802043a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 802043c:	2e04      	cmp	r6, #4
 802043e:	d806      	bhi.n	802044e <_strtod_l+0xe6>
 8020440:	e8df f006 	tbb	[pc, r6]
 8020444:	201d0314 	.word	0x201d0314
 8020448:	14          	.byte	0x14
 8020449:	00          	.byte	0x00
 802044a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 802044e:	05e1      	lsls	r1, r4, #23
 8020450:	bf48      	it	mi
 8020452:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8020456:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 802045a:	0d1b      	lsrs	r3, r3, #20
 802045c:	051b      	lsls	r3, r3, #20
 802045e:	2b00      	cmp	r3, #0
 8020460:	d1bb      	bne.n	80203da <_strtod_l+0x72>
 8020462:	f7fe fbaf 	bl	801ebc4 <__errno>
 8020466:	2322      	movs	r3, #34	@ 0x22
 8020468:	6003      	str	r3, [r0, #0]
 802046a:	e7b6      	b.n	80203da <_strtod_l+0x72>
 802046c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8020470:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8020474:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8020478:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 802047c:	e7e7      	b.n	802044e <_strtod_l+0xe6>
 802047e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 80205fc <_strtod_l+0x294>
 8020482:	e7e4      	b.n	802044e <_strtod_l+0xe6>
 8020484:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8020488:	f04f 3aff 	mov.w	sl, #4294967295
 802048c:	e7df      	b.n	802044e <_strtod_l+0xe6>
 802048e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020490:	1c5a      	adds	r2, r3, #1
 8020492:	9219      	str	r2, [sp, #100]	@ 0x64
 8020494:	785b      	ldrb	r3, [r3, #1]
 8020496:	2b30      	cmp	r3, #48	@ 0x30
 8020498:	d0f9      	beq.n	802048e <_strtod_l+0x126>
 802049a:	2b00      	cmp	r3, #0
 802049c:	d09d      	beq.n	80203da <_strtod_l+0x72>
 802049e:	2301      	movs	r3, #1
 80204a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80204a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80204a4:	930c      	str	r3, [sp, #48]	@ 0x30
 80204a6:	2300      	movs	r3, #0
 80204a8:	9308      	str	r3, [sp, #32]
 80204aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80204ac:	461f      	mov	r7, r3
 80204ae:	220a      	movs	r2, #10
 80204b0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80204b2:	7805      	ldrb	r5, [r0, #0]
 80204b4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80204b8:	b2d9      	uxtb	r1, r3
 80204ba:	2909      	cmp	r1, #9
 80204bc:	d928      	bls.n	8020510 <_strtod_l+0x1a8>
 80204be:	494e      	ldr	r1, [pc, #312]	@ (80205f8 <_strtod_l+0x290>)
 80204c0:	2201      	movs	r2, #1
 80204c2:	f7fe fa66 	bl	801e992 <strncmp>
 80204c6:	2800      	cmp	r0, #0
 80204c8:	d032      	beq.n	8020530 <_strtod_l+0x1c8>
 80204ca:	2000      	movs	r0, #0
 80204cc:	462a      	mov	r2, r5
 80204ce:	4681      	mov	r9, r0
 80204d0:	463d      	mov	r5, r7
 80204d2:	4603      	mov	r3, r0
 80204d4:	2a65      	cmp	r2, #101	@ 0x65
 80204d6:	d001      	beq.n	80204dc <_strtod_l+0x174>
 80204d8:	2a45      	cmp	r2, #69	@ 0x45
 80204da:	d114      	bne.n	8020506 <_strtod_l+0x19e>
 80204dc:	b91d      	cbnz	r5, 80204e6 <_strtod_l+0x17e>
 80204de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80204e0:	4302      	orrs	r2, r0
 80204e2:	d095      	beq.n	8020410 <_strtod_l+0xa8>
 80204e4:	2500      	movs	r5, #0
 80204e6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80204e8:	1c62      	adds	r2, r4, #1
 80204ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80204ec:	7862      	ldrb	r2, [r4, #1]
 80204ee:	2a2b      	cmp	r2, #43	@ 0x2b
 80204f0:	d077      	beq.n	80205e2 <_strtod_l+0x27a>
 80204f2:	2a2d      	cmp	r2, #45	@ 0x2d
 80204f4:	d07b      	beq.n	80205ee <_strtod_l+0x286>
 80204f6:	f04f 0c00 	mov.w	ip, #0
 80204fa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80204fe:	2909      	cmp	r1, #9
 8020500:	f240 8082 	bls.w	8020608 <_strtod_l+0x2a0>
 8020504:	9419      	str	r4, [sp, #100]	@ 0x64
 8020506:	f04f 0800 	mov.w	r8, #0
 802050a:	e0a2      	b.n	8020652 <_strtod_l+0x2ea>
 802050c:	2300      	movs	r3, #0
 802050e:	e7c7      	b.n	80204a0 <_strtod_l+0x138>
 8020510:	2f08      	cmp	r7, #8
 8020512:	bfd5      	itete	le
 8020514:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8020516:	9908      	ldrgt	r1, [sp, #32]
 8020518:	fb02 3301 	mlale	r3, r2, r1, r3
 802051c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8020520:	f100 0001 	add.w	r0, r0, #1
 8020524:	bfd4      	ite	le
 8020526:	930a      	strle	r3, [sp, #40]	@ 0x28
 8020528:	9308      	strgt	r3, [sp, #32]
 802052a:	3701      	adds	r7, #1
 802052c:	9019      	str	r0, [sp, #100]	@ 0x64
 802052e:	e7bf      	b.n	80204b0 <_strtod_l+0x148>
 8020530:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020532:	1c5a      	adds	r2, r3, #1
 8020534:	9219      	str	r2, [sp, #100]	@ 0x64
 8020536:	785a      	ldrb	r2, [r3, #1]
 8020538:	b37f      	cbz	r7, 802059a <_strtod_l+0x232>
 802053a:	4681      	mov	r9, r0
 802053c:	463d      	mov	r5, r7
 802053e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8020542:	2b09      	cmp	r3, #9
 8020544:	d912      	bls.n	802056c <_strtod_l+0x204>
 8020546:	2301      	movs	r3, #1
 8020548:	e7c4      	b.n	80204d4 <_strtod_l+0x16c>
 802054a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802054c:	1c5a      	adds	r2, r3, #1
 802054e:	9219      	str	r2, [sp, #100]	@ 0x64
 8020550:	785a      	ldrb	r2, [r3, #1]
 8020552:	3001      	adds	r0, #1
 8020554:	2a30      	cmp	r2, #48	@ 0x30
 8020556:	d0f8      	beq.n	802054a <_strtod_l+0x1e2>
 8020558:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 802055c:	2b08      	cmp	r3, #8
 802055e:	f200 84d3 	bhi.w	8020f08 <_strtod_l+0xba0>
 8020562:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020564:	930c      	str	r3, [sp, #48]	@ 0x30
 8020566:	4681      	mov	r9, r0
 8020568:	2000      	movs	r0, #0
 802056a:	4605      	mov	r5, r0
 802056c:	3a30      	subs	r2, #48	@ 0x30
 802056e:	f100 0301 	add.w	r3, r0, #1
 8020572:	d02a      	beq.n	80205ca <_strtod_l+0x262>
 8020574:	4499      	add	r9, r3
 8020576:	eb00 0c05 	add.w	ip, r0, r5
 802057a:	462b      	mov	r3, r5
 802057c:	210a      	movs	r1, #10
 802057e:	4563      	cmp	r3, ip
 8020580:	d10d      	bne.n	802059e <_strtod_l+0x236>
 8020582:	1c69      	adds	r1, r5, #1
 8020584:	4401      	add	r1, r0
 8020586:	4428      	add	r0, r5
 8020588:	2808      	cmp	r0, #8
 802058a:	dc16      	bgt.n	80205ba <_strtod_l+0x252>
 802058c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 802058e:	230a      	movs	r3, #10
 8020590:	fb03 2300 	mla	r3, r3, r0, r2
 8020594:	930a      	str	r3, [sp, #40]	@ 0x28
 8020596:	2300      	movs	r3, #0
 8020598:	e018      	b.n	80205cc <_strtod_l+0x264>
 802059a:	4638      	mov	r0, r7
 802059c:	e7da      	b.n	8020554 <_strtod_l+0x1ec>
 802059e:	2b08      	cmp	r3, #8
 80205a0:	f103 0301 	add.w	r3, r3, #1
 80205a4:	dc03      	bgt.n	80205ae <_strtod_l+0x246>
 80205a6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80205a8:	434e      	muls	r6, r1
 80205aa:	960a      	str	r6, [sp, #40]	@ 0x28
 80205ac:	e7e7      	b.n	802057e <_strtod_l+0x216>
 80205ae:	2b10      	cmp	r3, #16
 80205b0:	bfde      	ittt	le
 80205b2:	9e08      	ldrle	r6, [sp, #32]
 80205b4:	434e      	mulle	r6, r1
 80205b6:	9608      	strle	r6, [sp, #32]
 80205b8:	e7e1      	b.n	802057e <_strtod_l+0x216>
 80205ba:	280f      	cmp	r0, #15
 80205bc:	dceb      	bgt.n	8020596 <_strtod_l+0x22e>
 80205be:	9808      	ldr	r0, [sp, #32]
 80205c0:	230a      	movs	r3, #10
 80205c2:	fb03 2300 	mla	r3, r3, r0, r2
 80205c6:	9308      	str	r3, [sp, #32]
 80205c8:	e7e5      	b.n	8020596 <_strtod_l+0x22e>
 80205ca:	4629      	mov	r1, r5
 80205cc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80205ce:	1c50      	adds	r0, r2, #1
 80205d0:	9019      	str	r0, [sp, #100]	@ 0x64
 80205d2:	7852      	ldrb	r2, [r2, #1]
 80205d4:	4618      	mov	r0, r3
 80205d6:	460d      	mov	r5, r1
 80205d8:	e7b1      	b.n	802053e <_strtod_l+0x1d6>
 80205da:	f04f 0900 	mov.w	r9, #0
 80205de:	2301      	movs	r3, #1
 80205e0:	e77d      	b.n	80204de <_strtod_l+0x176>
 80205e2:	f04f 0c00 	mov.w	ip, #0
 80205e6:	1ca2      	adds	r2, r4, #2
 80205e8:	9219      	str	r2, [sp, #100]	@ 0x64
 80205ea:	78a2      	ldrb	r2, [r4, #2]
 80205ec:	e785      	b.n	80204fa <_strtod_l+0x192>
 80205ee:	f04f 0c01 	mov.w	ip, #1
 80205f2:	e7f8      	b.n	80205e6 <_strtod_l+0x27e>
 80205f4:	080256c8 	.word	0x080256c8
 80205f8:	080256b0 	.word	0x080256b0
 80205fc:	7ff00000 	.word	0x7ff00000
 8020600:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020602:	1c51      	adds	r1, r2, #1
 8020604:	9119      	str	r1, [sp, #100]	@ 0x64
 8020606:	7852      	ldrb	r2, [r2, #1]
 8020608:	2a30      	cmp	r2, #48	@ 0x30
 802060a:	d0f9      	beq.n	8020600 <_strtod_l+0x298>
 802060c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8020610:	2908      	cmp	r1, #8
 8020612:	f63f af78 	bhi.w	8020506 <_strtod_l+0x19e>
 8020616:	3a30      	subs	r2, #48	@ 0x30
 8020618:	920e      	str	r2, [sp, #56]	@ 0x38
 802061a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 802061c:	920f      	str	r2, [sp, #60]	@ 0x3c
 802061e:	f04f 080a 	mov.w	r8, #10
 8020622:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8020624:	1c56      	adds	r6, r2, #1
 8020626:	9619      	str	r6, [sp, #100]	@ 0x64
 8020628:	7852      	ldrb	r2, [r2, #1]
 802062a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 802062e:	f1be 0f09 	cmp.w	lr, #9
 8020632:	d939      	bls.n	80206a8 <_strtod_l+0x340>
 8020634:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8020636:	1a76      	subs	r6, r6, r1
 8020638:	2e08      	cmp	r6, #8
 802063a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 802063e:	dc03      	bgt.n	8020648 <_strtod_l+0x2e0>
 8020640:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8020642:	4588      	cmp	r8, r1
 8020644:	bfa8      	it	ge
 8020646:	4688      	movge	r8, r1
 8020648:	f1bc 0f00 	cmp.w	ip, #0
 802064c:	d001      	beq.n	8020652 <_strtod_l+0x2ea>
 802064e:	f1c8 0800 	rsb	r8, r8, #0
 8020652:	2d00      	cmp	r5, #0
 8020654:	d14e      	bne.n	80206f4 <_strtod_l+0x38c>
 8020656:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8020658:	4308      	orrs	r0, r1
 802065a:	f47f aebe 	bne.w	80203da <_strtod_l+0x72>
 802065e:	2b00      	cmp	r3, #0
 8020660:	f47f aed6 	bne.w	8020410 <_strtod_l+0xa8>
 8020664:	2a69      	cmp	r2, #105	@ 0x69
 8020666:	d028      	beq.n	80206ba <_strtod_l+0x352>
 8020668:	dc25      	bgt.n	80206b6 <_strtod_l+0x34e>
 802066a:	2a49      	cmp	r2, #73	@ 0x49
 802066c:	d025      	beq.n	80206ba <_strtod_l+0x352>
 802066e:	2a4e      	cmp	r2, #78	@ 0x4e
 8020670:	f47f aece 	bne.w	8020410 <_strtod_l+0xa8>
 8020674:	499b      	ldr	r1, [pc, #620]	@ (80208e4 <_strtod_l+0x57c>)
 8020676:	a819      	add	r0, sp, #100	@ 0x64
 8020678:	f001 fa38 	bl	8021aec <__match>
 802067c:	2800      	cmp	r0, #0
 802067e:	f43f aec7 	beq.w	8020410 <_strtod_l+0xa8>
 8020682:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020684:	781b      	ldrb	r3, [r3, #0]
 8020686:	2b28      	cmp	r3, #40	@ 0x28
 8020688:	d12e      	bne.n	80206e8 <_strtod_l+0x380>
 802068a:	4997      	ldr	r1, [pc, #604]	@ (80208e8 <_strtod_l+0x580>)
 802068c:	aa1c      	add	r2, sp, #112	@ 0x70
 802068e:	a819      	add	r0, sp, #100	@ 0x64
 8020690:	f001 fa40 	bl	8021b14 <__hexnan>
 8020694:	2805      	cmp	r0, #5
 8020696:	d127      	bne.n	80206e8 <_strtod_l+0x380>
 8020698:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 802069a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 802069e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80206a2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80206a6:	e698      	b.n	80203da <_strtod_l+0x72>
 80206a8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80206aa:	fb08 2101 	mla	r1, r8, r1, r2
 80206ae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80206b2:	920e      	str	r2, [sp, #56]	@ 0x38
 80206b4:	e7b5      	b.n	8020622 <_strtod_l+0x2ba>
 80206b6:	2a6e      	cmp	r2, #110	@ 0x6e
 80206b8:	e7da      	b.n	8020670 <_strtod_l+0x308>
 80206ba:	498c      	ldr	r1, [pc, #560]	@ (80208ec <_strtod_l+0x584>)
 80206bc:	a819      	add	r0, sp, #100	@ 0x64
 80206be:	f001 fa15 	bl	8021aec <__match>
 80206c2:	2800      	cmp	r0, #0
 80206c4:	f43f aea4 	beq.w	8020410 <_strtod_l+0xa8>
 80206c8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80206ca:	4989      	ldr	r1, [pc, #548]	@ (80208f0 <_strtod_l+0x588>)
 80206cc:	3b01      	subs	r3, #1
 80206ce:	a819      	add	r0, sp, #100	@ 0x64
 80206d0:	9319      	str	r3, [sp, #100]	@ 0x64
 80206d2:	f001 fa0b 	bl	8021aec <__match>
 80206d6:	b910      	cbnz	r0, 80206de <_strtod_l+0x376>
 80206d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80206da:	3301      	adds	r3, #1
 80206dc:	9319      	str	r3, [sp, #100]	@ 0x64
 80206de:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8020900 <_strtod_l+0x598>
 80206e2:	f04f 0a00 	mov.w	sl, #0
 80206e6:	e678      	b.n	80203da <_strtod_l+0x72>
 80206e8:	4882      	ldr	r0, [pc, #520]	@ (80208f4 <_strtod_l+0x58c>)
 80206ea:	f000 ff59 	bl	80215a0 <nan>
 80206ee:	ec5b ab10 	vmov	sl, fp, d0
 80206f2:	e672      	b.n	80203da <_strtod_l+0x72>
 80206f4:	eba8 0309 	sub.w	r3, r8, r9
 80206f8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80206fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80206fc:	2f00      	cmp	r7, #0
 80206fe:	bf08      	it	eq
 8020700:	462f      	moveq	r7, r5
 8020702:	2d10      	cmp	r5, #16
 8020704:	462c      	mov	r4, r5
 8020706:	bfa8      	it	ge
 8020708:	2410      	movge	r4, #16
 802070a:	f7df fefb 	bl	8000504 <__aeabi_ui2d>
 802070e:	2d09      	cmp	r5, #9
 8020710:	4682      	mov	sl, r0
 8020712:	468b      	mov	fp, r1
 8020714:	dc13      	bgt.n	802073e <_strtod_l+0x3d6>
 8020716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020718:	2b00      	cmp	r3, #0
 802071a:	f43f ae5e 	beq.w	80203da <_strtod_l+0x72>
 802071e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020720:	dd78      	ble.n	8020814 <_strtod_l+0x4ac>
 8020722:	2b16      	cmp	r3, #22
 8020724:	dc5f      	bgt.n	80207e6 <_strtod_l+0x47e>
 8020726:	4974      	ldr	r1, [pc, #464]	@ (80208f8 <_strtod_l+0x590>)
 8020728:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 802072c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020730:	4652      	mov	r2, sl
 8020732:	465b      	mov	r3, fp
 8020734:	f7df ff60 	bl	80005f8 <__aeabi_dmul>
 8020738:	4682      	mov	sl, r0
 802073a:	468b      	mov	fp, r1
 802073c:	e64d      	b.n	80203da <_strtod_l+0x72>
 802073e:	4b6e      	ldr	r3, [pc, #440]	@ (80208f8 <_strtod_l+0x590>)
 8020740:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8020744:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8020748:	f7df ff56 	bl	80005f8 <__aeabi_dmul>
 802074c:	4682      	mov	sl, r0
 802074e:	9808      	ldr	r0, [sp, #32]
 8020750:	468b      	mov	fp, r1
 8020752:	f7df fed7 	bl	8000504 <__aeabi_ui2d>
 8020756:	4602      	mov	r2, r0
 8020758:	460b      	mov	r3, r1
 802075a:	4650      	mov	r0, sl
 802075c:	4659      	mov	r1, fp
 802075e:	f7df fd95 	bl	800028c <__adddf3>
 8020762:	2d0f      	cmp	r5, #15
 8020764:	4682      	mov	sl, r0
 8020766:	468b      	mov	fp, r1
 8020768:	ddd5      	ble.n	8020716 <_strtod_l+0x3ae>
 802076a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802076c:	1b2c      	subs	r4, r5, r4
 802076e:	441c      	add	r4, r3
 8020770:	2c00      	cmp	r4, #0
 8020772:	f340 8096 	ble.w	80208a2 <_strtod_l+0x53a>
 8020776:	f014 030f 	ands.w	r3, r4, #15
 802077a:	d00a      	beq.n	8020792 <_strtod_l+0x42a>
 802077c:	495e      	ldr	r1, [pc, #376]	@ (80208f8 <_strtod_l+0x590>)
 802077e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8020782:	4652      	mov	r2, sl
 8020784:	465b      	mov	r3, fp
 8020786:	e9d1 0100 	ldrd	r0, r1, [r1]
 802078a:	f7df ff35 	bl	80005f8 <__aeabi_dmul>
 802078e:	4682      	mov	sl, r0
 8020790:	468b      	mov	fp, r1
 8020792:	f034 040f 	bics.w	r4, r4, #15
 8020796:	d073      	beq.n	8020880 <_strtod_l+0x518>
 8020798:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 802079c:	dd48      	ble.n	8020830 <_strtod_l+0x4c8>
 802079e:	2400      	movs	r4, #0
 80207a0:	46a0      	mov	r8, r4
 80207a2:	940a      	str	r4, [sp, #40]	@ 0x28
 80207a4:	46a1      	mov	r9, r4
 80207a6:	9a05      	ldr	r2, [sp, #20]
 80207a8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8020900 <_strtod_l+0x598>
 80207ac:	2322      	movs	r3, #34	@ 0x22
 80207ae:	6013      	str	r3, [r2, #0]
 80207b0:	f04f 0a00 	mov.w	sl, #0
 80207b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80207b6:	2b00      	cmp	r3, #0
 80207b8:	f43f ae0f 	beq.w	80203da <_strtod_l+0x72>
 80207bc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80207be:	9805      	ldr	r0, [sp, #20]
 80207c0:	f7ff f938 	bl	801fa34 <_Bfree>
 80207c4:	9805      	ldr	r0, [sp, #20]
 80207c6:	4649      	mov	r1, r9
 80207c8:	f7ff f934 	bl	801fa34 <_Bfree>
 80207cc:	9805      	ldr	r0, [sp, #20]
 80207ce:	4641      	mov	r1, r8
 80207d0:	f7ff f930 	bl	801fa34 <_Bfree>
 80207d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80207d6:	9805      	ldr	r0, [sp, #20]
 80207d8:	f7ff f92c 	bl	801fa34 <_Bfree>
 80207dc:	9805      	ldr	r0, [sp, #20]
 80207de:	4621      	mov	r1, r4
 80207e0:	f7ff f928 	bl	801fa34 <_Bfree>
 80207e4:	e5f9      	b.n	80203da <_strtod_l+0x72>
 80207e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80207e8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80207ec:	4293      	cmp	r3, r2
 80207ee:	dbbc      	blt.n	802076a <_strtod_l+0x402>
 80207f0:	4c41      	ldr	r4, [pc, #260]	@ (80208f8 <_strtod_l+0x590>)
 80207f2:	f1c5 050f 	rsb	r5, r5, #15
 80207f6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80207fa:	4652      	mov	r2, sl
 80207fc:	465b      	mov	r3, fp
 80207fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8020802:	f7df fef9 	bl	80005f8 <__aeabi_dmul>
 8020806:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020808:	1b5d      	subs	r5, r3, r5
 802080a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 802080e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8020812:	e78f      	b.n	8020734 <_strtod_l+0x3cc>
 8020814:	3316      	adds	r3, #22
 8020816:	dba8      	blt.n	802076a <_strtod_l+0x402>
 8020818:	4b37      	ldr	r3, [pc, #220]	@ (80208f8 <_strtod_l+0x590>)
 802081a:	eba9 0808 	sub.w	r8, r9, r8
 802081e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8020822:	e9d8 2300 	ldrd	r2, r3, [r8]
 8020826:	4650      	mov	r0, sl
 8020828:	4659      	mov	r1, fp
 802082a:	f7e0 f80f 	bl	800084c <__aeabi_ddiv>
 802082e:	e783      	b.n	8020738 <_strtod_l+0x3d0>
 8020830:	4b32      	ldr	r3, [pc, #200]	@ (80208fc <_strtod_l+0x594>)
 8020832:	9308      	str	r3, [sp, #32]
 8020834:	2300      	movs	r3, #0
 8020836:	1124      	asrs	r4, r4, #4
 8020838:	4650      	mov	r0, sl
 802083a:	4659      	mov	r1, fp
 802083c:	461e      	mov	r6, r3
 802083e:	2c01      	cmp	r4, #1
 8020840:	dc21      	bgt.n	8020886 <_strtod_l+0x51e>
 8020842:	b10b      	cbz	r3, 8020848 <_strtod_l+0x4e0>
 8020844:	4682      	mov	sl, r0
 8020846:	468b      	mov	fp, r1
 8020848:	492c      	ldr	r1, [pc, #176]	@ (80208fc <_strtod_l+0x594>)
 802084a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 802084e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8020852:	4652      	mov	r2, sl
 8020854:	465b      	mov	r3, fp
 8020856:	e9d1 0100 	ldrd	r0, r1, [r1]
 802085a:	f7df fecd 	bl	80005f8 <__aeabi_dmul>
 802085e:	4b28      	ldr	r3, [pc, #160]	@ (8020900 <_strtod_l+0x598>)
 8020860:	460a      	mov	r2, r1
 8020862:	400b      	ands	r3, r1
 8020864:	4927      	ldr	r1, [pc, #156]	@ (8020904 <_strtod_l+0x59c>)
 8020866:	428b      	cmp	r3, r1
 8020868:	4682      	mov	sl, r0
 802086a:	d898      	bhi.n	802079e <_strtod_l+0x436>
 802086c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8020870:	428b      	cmp	r3, r1
 8020872:	bf86      	itte	hi
 8020874:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8020908 <_strtod_l+0x5a0>
 8020878:	f04f 3aff 	movhi.w	sl, #4294967295
 802087c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8020880:	2300      	movs	r3, #0
 8020882:	9308      	str	r3, [sp, #32]
 8020884:	e07a      	b.n	802097c <_strtod_l+0x614>
 8020886:	07e2      	lsls	r2, r4, #31
 8020888:	d505      	bpl.n	8020896 <_strtod_l+0x52e>
 802088a:	9b08      	ldr	r3, [sp, #32]
 802088c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020890:	f7df feb2 	bl	80005f8 <__aeabi_dmul>
 8020894:	2301      	movs	r3, #1
 8020896:	9a08      	ldr	r2, [sp, #32]
 8020898:	3208      	adds	r2, #8
 802089a:	3601      	adds	r6, #1
 802089c:	1064      	asrs	r4, r4, #1
 802089e:	9208      	str	r2, [sp, #32]
 80208a0:	e7cd      	b.n	802083e <_strtod_l+0x4d6>
 80208a2:	d0ed      	beq.n	8020880 <_strtod_l+0x518>
 80208a4:	4264      	negs	r4, r4
 80208a6:	f014 020f 	ands.w	r2, r4, #15
 80208aa:	d00a      	beq.n	80208c2 <_strtod_l+0x55a>
 80208ac:	4b12      	ldr	r3, [pc, #72]	@ (80208f8 <_strtod_l+0x590>)
 80208ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80208b2:	4650      	mov	r0, sl
 80208b4:	4659      	mov	r1, fp
 80208b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80208ba:	f7df ffc7 	bl	800084c <__aeabi_ddiv>
 80208be:	4682      	mov	sl, r0
 80208c0:	468b      	mov	fp, r1
 80208c2:	1124      	asrs	r4, r4, #4
 80208c4:	d0dc      	beq.n	8020880 <_strtod_l+0x518>
 80208c6:	2c1f      	cmp	r4, #31
 80208c8:	dd20      	ble.n	802090c <_strtod_l+0x5a4>
 80208ca:	2400      	movs	r4, #0
 80208cc:	46a0      	mov	r8, r4
 80208ce:	940a      	str	r4, [sp, #40]	@ 0x28
 80208d0:	46a1      	mov	r9, r4
 80208d2:	9a05      	ldr	r2, [sp, #20]
 80208d4:	2322      	movs	r3, #34	@ 0x22
 80208d6:	f04f 0a00 	mov.w	sl, #0
 80208da:	f04f 0b00 	mov.w	fp, #0
 80208de:	6013      	str	r3, [r2, #0]
 80208e0:	e768      	b.n	80207b4 <_strtod_l+0x44c>
 80208e2:	bf00      	nop
 80208e4:	0802547b 	.word	0x0802547b
 80208e8:	080256b4 	.word	0x080256b4
 80208ec:	08025473 	.word	0x08025473
 80208f0:	080254e6 	.word	0x080254e6
 80208f4:	080254e2 	.word	0x080254e2
 80208f8:	080255e8 	.word	0x080255e8
 80208fc:	080255c0 	.word	0x080255c0
 8020900:	7ff00000 	.word	0x7ff00000
 8020904:	7ca00000 	.word	0x7ca00000
 8020908:	7fefffff 	.word	0x7fefffff
 802090c:	f014 0310 	ands.w	r3, r4, #16
 8020910:	bf18      	it	ne
 8020912:	236a      	movne	r3, #106	@ 0x6a
 8020914:	4ea9      	ldr	r6, [pc, #676]	@ (8020bbc <_strtod_l+0x854>)
 8020916:	9308      	str	r3, [sp, #32]
 8020918:	4650      	mov	r0, sl
 802091a:	4659      	mov	r1, fp
 802091c:	2300      	movs	r3, #0
 802091e:	07e2      	lsls	r2, r4, #31
 8020920:	d504      	bpl.n	802092c <_strtod_l+0x5c4>
 8020922:	e9d6 2300 	ldrd	r2, r3, [r6]
 8020926:	f7df fe67 	bl	80005f8 <__aeabi_dmul>
 802092a:	2301      	movs	r3, #1
 802092c:	1064      	asrs	r4, r4, #1
 802092e:	f106 0608 	add.w	r6, r6, #8
 8020932:	d1f4      	bne.n	802091e <_strtod_l+0x5b6>
 8020934:	b10b      	cbz	r3, 802093a <_strtod_l+0x5d2>
 8020936:	4682      	mov	sl, r0
 8020938:	468b      	mov	fp, r1
 802093a:	9b08      	ldr	r3, [sp, #32]
 802093c:	b1b3      	cbz	r3, 802096c <_strtod_l+0x604>
 802093e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8020942:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8020946:	2b00      	cmp	r3, #0
 8020948:	4659      	mov	r1, fp
 802094a:	dd0f      	ble.n	802096c <_strtod_l+0x604>
 802094c:	2b1f      	cmp	r3, #31
 802094e:	dd55      	ble.n	80209fc <_strtod_l+0x694>
 8020950:	2b34      	cmp	r3, #52	@ 0x34
 8020952:	bfde      	ittt	le
 8020954:	f04f 33ff 	movle.w	r3, #4294967295
 8020958:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 802095c:	4093      	lslle	r3, r2
 802095e:	f04f 0a00 	mov.w	sl, #0
 8020962:	bfcc      	ite	gt
 8020964:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8020968:	ea03 0b01 	andle.w	fp, r3, r1
 802096c:	2200      	movs	r2, #0
 802096e:	2300      	movs	r3, #0
 8020970:	4650      	mov	r0, sl
 8020972:	4659      	mov	r1, fp
 8020974:	f7e0 f8a8 	bl	8000ac8 <__aeabi_dcmpeq>
 8020978:	2800      	cmp	r0, #0
 802097a:	d1a6      	bne.n	80208ca <_strtod_l+0x562>
 802097c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802097e:	9300      	str	r3, [sp, #0]
 8020980:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8020982:	9805      	ldr	r0, [sp, #20]
 8020984:	462b      	mov	r3, r5
 8020986:	463a      	mov	r2, r7
 8020988:	f7ff f8bc 	bl	801fb04 <__s2b>
 802098c:	900a      	str	r0, [sp, #40]	@ 0x28
 802098e:	2800      	cmp	r0, #0
 8020990:	f43f af05 	beq.w	802079e <_strtod_l+0x436>
 8020994:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8020996:	2a00      	cmp	r2, #0
 8020998:	eba9 0308 	sub.w	r3, r9, r8
 802099c:	bfa8      	it	ge
 802099e:	2300      	movge	r3, #0
 80209a0:	9312      	str	r3, [sp, #72]	@ 0x48
 80209a2:	2400      	movs	r4, #0
 80209a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80209a8:	9316      	str	r3, [sp, #88]	@ 0x58
 80209aa:	46a0      	mov	r8, r4
 80209ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80209ae:	9805      	ldr	r0, [sp, #20]
 80209b0:	6859      	ldr	r1, [r3, #4]
 80209b2:	f7fe ffff 	bl	801f9b4 <_Balloc>
 80209b6:	4681      	mov	r9, r0
 80209b8:	2800      	cmp	r0, #0
 80209ba:	f43f aef4 	beq.w	80207a6 <_strtod_l+0x43e>
 80209be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80209c0:	691a      	ldr	r2, [r3, #16]
 80209c2:	3202      	adds	r2, #2
 80209c4:	f103 010c 	add.w	r1, r3, #12
 80209c8:	0092      	lsls	r2, r2, #2
 80209ca:	300c      	adds	r0, #12
 80209cc:	f7fe f927 	bl	801ec1e <memcpy>
 80209d0:	ec4b ab10 	vmov	d0, sl, fp
 80209d4:	9805      	ldr	r0, [sp, #20]
 80209d6:	aa1c      	add	r2, sp, #112	@ 0x70
 80209d8:	a91b      	add	r1, sp, #108	@ 0x6c
 80209da:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80209de:	f7ff fbcd 	bl	802017c <__d2b>
 80209e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80209e4:	2800      	cmp	r0, #0
 80209e6:	f43f aede 	beq.w	80207a6 <_strtod_l+0x43e>
 80209ea:	9805      	ldr	r0, [sp, #20]
 80209ec:	2101      	movs	r1, #1
 80209ee:	f7ff f91f 	bl	801fc30 <__i2b>
 80209f2:	4680      	mov	r8, r0
 80209f4:	b948      	cbnz	r0, 8020a0a <_strtod_l+0x6a2>
 80209f6:	f04f 0800 	mov.w	r8, #0
 80209fa:	e6d4      	b.n	80207a6 <_strtod_l+0x43e>
 80209fc:	f04f 32ff 	mov.w	r2, #4294967295
 8020a00:	fa02 f303 	lsl.w	r3, r2, r3
 8020a04:	ea03 0a0a 	and.w	sl, r3, sl
 8020a08:	e7b0      	b.n	802096c <_strtod_l+0x604>
 8020a0a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8020a0c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8020a0e:	2d00      	cmp	r5, #0
 8020a10:	bfab      	itete	ge
 8020a12:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8020a14:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8020a16:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8020a18:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8020a1a:	bfac      	ite	ge
 8020a1c:	18ef      	addge	r7, r5, r3
 8020a1e:	1b5e      	sublt	r6, r3, r5
 8020a20:	9b08      	ldr	r3, [sp, #32]
 8020a22:	1aed      	subs	r5, r5, r3
 8020a24:	4415      	add	r5, r2
 8020a26:	4b66      	ldr	r3, [pc, #408]	@ (8020bc0 <_strtod_l+0x858>)
 8020a28:	3d01      	subs	r5, #1
 8020a2a:	429d      	cmp	r5, r3
 8020a2c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8020a30:	da50      	bge.n	8020ad4 <_strtod_l+0x76c>
 8020a32:	1b5b      	subs	r3, r3, r5
 8020a34:	2b1f      	cmp	r3, #31
 8020a36:	eba2 0203 	sub.w	r2, r2, r3
 8020a3a:	f04f 0101 	mov.w	r1, #1
 8020a3e:	dc3d      	bgt.n	8020abc <_strtod_l+0x754>
 8020a40:	fa01 f303 	lsl.w	r3, r1, r3
 8020a44:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020a46:	2300      	movs	r3, #0
 8020a48:	9310      	str	r3, [sp, #64]	@ 0x40
 8020a4a:	18bd      	adds	r5, r7, r2
 8020a4c:	9b08      	ldr	r3, [sp, #32]
 8020a4e:	42af      	cmp	r7, r5
 8020a50:	4416      	add	r6, r2
 8020a52:	441e      	add	r6, r3
 8020a54:	463b      	mov	r3, r7
 8020a56:	bfa8      	it	ge
 8020a58:	462b      	movge	r3, r5
 8020a5a:	42b3      	cmp	r3, r6
 8020a5c:	bfa8      	it	ge
 8020a5e:	4633      	movge	r3, r6
 8020a60:	2b00      	cmp	r3, #0
 8020a62:	bfc2      	ittt	gt
 8020a64:	1aed      	subgt	r5, r5, r3
 8020a66:	1af6      	subgt	r6, r6, r3
 8020a68:	1aff      	subgt	r7, r7, r3
 8020a6a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8020a6c:	2b00      	cmp	r3, #0
 8020a6e:	dd16      	ble.n	8020a9e <_strtod_l+0x736>
 8020a70:	4641      	mov	r1, r8
 8020a72:	9805      	ldr	r0, [sp, #20]
 8020a74:	461a      	mov	r2, r3
 8020a76:	f7ff f99b 	bl	801fdb0 <__pow5mult>
 8020a7a:	4680      	mov	r8, r0
 8020a7c:	2800      	cmp	r0, #0
 8020a7e:	d0ba      	beq.n	80209f6 <_strtod_l+0x68e>
 8020a80:	4601      	mov	r1, r0
 8020a82:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020a84:	9805      	ldr	r0, [sp, #20]
 8020a86:	f7ff f8e9 	bl	801fc5c <__multiply>
 8020a8a:	900e      	str	r0, [sp, #56]	@ 0x38
 8020a8c:	2800      	cmp	r0, #0
 8020a8e:	f43f ae8a 	beq.w	80207a6 <_strtod_l+0x43e>
 8020a92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020a94:	9805      	ldr	r0, [sp, #20]
 8020a96:	f7fe ffcd 	bl	801fa34 <_Bfree>
 8020a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020a9c:	931a      	str	r3, [sp, #104]	@ 0x68
 8020a9e:	2d00      	cmp	r5, #0
 8020aa0:	dc1d      	bgt.n	8020ade <_strtod_l+0x776>
 8020aa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020aa4:	2b00      	cmp	r3, #0
 8020aa6:	dd23      	ble.n	8020af0 <_strtod_l+0x788>
 8020aa8:	4649      	mov	r1, r9
 8020aaa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8020aac:	9805      	ldr	r0, [sp, #20]
 8020aae:	f7ff f97f 	bl	801fdb0 <__pow5mult>
 8020ab2:	4681      	mov	r9, r0
 8020ab4:	b9e0      	cbnz	r0, 8020af0 <_strtod_l+0x788>
 8020ab6:	f04f 0900 	mov.w	r9, #0
 8020aba:	e674      	b.n	80207a6 <_strtod_l+0x43e>
 8020abc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8020ac0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8020ac4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8020ac8:	35e2      	adds	r5, #226	@ 0xe2
 8020aca:	fa01 f305 	lsl.w	r3, r1, r5
 8020ace:	9310      	str	r3, [sp, #64]	@ 0x40
 8020ad0:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020ad2:	e7ba      	b.n	8020a4a <_strtod_l+0x6e2>
 8020ad4:	2300      	movs	r3, #0
 8020ad6:	9310      	str	r3, [sp, #64]	@ 0x40
 8020ad8:	2301      	movs	r3, #1
 8020ada:	9313      	str	r3, [sp, #76]	@ 0x4c
 8020adc:	e7b5      	b.n	8020a4a <_strtod_l+0x6e2>
 8020ade:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020ae0:	9805      	ldr	r0, [sp, #20]
 8020ae2:	462a      	mov	r2, r5
 8020ae4:	f7ff f9be 	bl	801fe64 <__lshift>
 8020ae8:	901a      	str	r0, [sp, #104]	@ 0x68
 8020aea:	2800      	cmp	r0, #0
 8020aec:	d1d9      	bne.n	8020aa2 <_strtod_l+0x73a>
 8020aee:	e65a      	b.n	80207a6 <_strtod_l+0x43e>
 8020af0:	2e00      	cmp	r6, #0
 8020af2:	dd07      	ble.n	8020b04 <_strtod_l+0x79c>
 8020af4:	4649      	mov	r1, r9
 8020af6:	9805      	ldr	r0, [sp, #20]
 8020af8:	4632      	mov	r2, r6
 8020afa:	f7ff f9b3 	bl	801fe64 <__lshift>
 8020afe:	4681      	mov	r9, r0
 8020b00:	2800      	cmp	r0, #0
 8020b02:	d0d8      	beq.n	8020ab6 <_strtod_l+0x74e>
 8020b04:	2f00      	cmp	r7, #0
 8020b06:	dd08      	ble.n	8020b1a <_strtod_l+0x7b2>
 8020b08:	4641      	mov	r1, r8
 8020b0a:	9805      	ldr	r0, [sp, #20]
 8020b0c:	463a      	mov	r2, r7
 8020b0e:	f7ff f9a9 	bl	801fe64 <__lshift>
 8020b12:	4680      	mov	r8, r0
 8020b14:	2800      	cmp	r0, #0
 8020b16:	f43f ae46 	beq.w	80207a6 <_strtod_l+0x43e>
 8020b1a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020b1c:	9805      	ldr	r0, [sp, #20]
 8020b1e:	464a      	mov	r2, r9
 8020b20:	f7ff fa28 	bl	801ff74 <__mdiff>
 8020b24:	4604      	mov	r4, r0
 8020b26:	2800      	cmp	r0, #0
 8020b28:	f43f ae3d 	beq.w	80207a6 <_strtod_l+0x43e>
 8020b2c:	68c3      	ldr	r3, [r0, #12]
 8020b2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020b30:	2300      	movs	r3, #0
 8020b32:	60c3      	str	r3, [r0, #12]
 8020b34:	4641      	mov	r1, r8
 8020b36:	f7ff fa01 	bl	801ff3c <__mcmp>
 8020b3a:	2800      	cmp	r0, #0
 8020b3c:	da46      	bge.n	8020bcc <_strtod_l+0x864>
 8020b3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020b40:	ea53 030a 	orrs.w	r3, r3, sl
 8020b44:	d16c      	bne.n	8020c20 <_strtod_l+0x8b8>
 8020b46:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020b4a:	2b00      	cmp	r3, #0
 8020b4c:	d168      	bne.n	8020c20 <_strtod_l+0x8b8>
 8020b4e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020b52:	0d1b      	lsrs	r3, r3, #20
 8020b54:	051b      	lsls	r3, r3, #20
 8020b56:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8020b5a:	d961      	bls.n	8020c20 <_strtod_l+0x8b8>
 8020b5c:	6963      	ldr	r3, [r4, #20]
 8020b5e:	b913      	cbnz	r3, 8020b66 <_strtod_l+0x7fe>
 8020b60:	6923      	ldr	r3, [r4, #16]
 8020b62:	2b01      	cmp	r3, #1
 8020b64:	dd5c      	ble.n	8020c20 <_strtod_l+0x8b8>
 8020b66:	4621      	mov	r1, r4
 8020b68:	2201      	movs	r2, #1
 8020b6a:	9805      	ldr	r0, [sp, #20]
 8020b6c:	f7ff f97a 	bl	801fe64 <__lshift>
 8020b70:	4641      	mov	r1, r8
 8020b72:	4604      	mov	r4, r0
 8020b74:	f7ff f9e2 	bl	801ff3c <__mcmp>
 8020b78:	2800      	cmp	r0, #0
 8020b7a:	dd51      	ble.n	8020c20 <_strtod_l+0x8b8>
 8020b7c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020b80:	9a08      	ldr	r2, [sp, #32]
 8020b82:	0d1b      	lsrs	r3, r3, #20
 8020b84:	051b      	lsls	r3, r3, #20
 8020b86:	2a00      	cmp	r2, #0
 8020b88:	d06b      	beq.n	8020c62 <_strtod_l+0x8fa>
 8020b8a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8020b8e:	d868      	bhi.n	8020c62 <_strtod_l+0x8fa>
 8020b90:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8020b94:	f67f ae9d 	bls.w	80208d2 <_strtod_l+0x56a>
 8020b98:	4b0a      	ldr	r3, [pc, #40]	@ (8020bc4 <_strtod_l+0x85c>)
 8020b9a:	4650      	mov	r0, sl
 8020b9c:	4659      	mov	r1, fp
 8020b9e:	2200      	movs	r2, #0
 8020ba0:	f7df fd2a 	bl	80005f8 <__aeabi_dmul>
 8020ba4:	4b08      	ldr	r3, [pc, #32]	@ (8020bc8 <_strtod_l+0x860>)
 8020ba6:	400b      	ands	r3, r1
 8020ba8:	4682      	mov	sl, r0
 8020baa:	468b      	mov	fp, r1
 8020bac:	2b00      	cmp	r3, #0
 8020bae:	f47f ae05 	bne.w	80207bc <_strtod_l+0x454>
 8020bb2:	9a05      	ldr	r2, [sp, #20]
 8020bb4:	2322      	movs	r3, #34	@ 0x22
 8020bb6:	6013      	str	r3, [r2, #0]
 8020bb8:	e600      	b.n	80207bc <_strtod_l+0x454>
 8020bba:	bf00      	nop
 8020bbc:	080256e0 	.word	0x080256e0
 8020bc0:	fffffc02 	.word	0xfffffc02
 8020bc4:	39500000 	.word	0x39500000
 8020bc8:	7ff00000 	.word	0x7ff00000
 8020bcc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020bd0:	d165      	bne.n	8020c9e <_strtod_l+0x936>
 8020bd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020bd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020bd8:	b35a      	cbz	r2, 8020c32 <_strtod_l+0x8ca>
 8020bda:	4a9f      	ldr	r2, [pc, #636]	@ (8020e58 <_strtod_l+0xaf0>)
 8020bdc:	4293      	cmp	r3, r2
 8020bde:	d12b      	bne.n	8020c38 <_strtod_l+0x8d0>
 8020be0:	9b08      	ldr	r3, [sp, #32]
 8020be2:	4651      	mov	r1, sl
 8020be4:	b303      	cbz	r3, 8020c28 <_strtod_l+0x8c0>
 8020be6:	4b9d      	ldr	r3, [pc, #628]	@ (8020e5c <_strtod_l+0xaf4>)
 8020be8:	465a      	mov	r2, fp
 8020bea:	4013      	ands	r3, r2
 8020bec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8020bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8020bf4:	d81b      	bhi.n	8020c2e <_strtod_l+0x8c6>
 8020bf6:	0d1b      	lsrs	r3, r3, #20
 8020bf8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8020bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8020c00:	4299      	cmp	r1, r3
 8020c02:	d119      	bne.n	8020c38 <_strtod_l+0x8d0>
 8020c04:	4b96      	ldr	r3, [pc, #600]	@ (8020e60 <_strtod_l+0xaf8>)
 8020c06:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020c08:	429a      	cmp	r2, r3
 8020c0a:	d102      	bne.n	8020c12 <_strtod_l+0x8aa>
 8020c0c:	3101      	adds	r1, #1
 8020c0e:	f43f adca 	beq.w	80207a6 <_strtod_l+0x43e>
 8020c12:	4b92      	ldr	r3, [pc, #584]	@ (8020e5c <_strtod_l+0xaf4>)
 8020c14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020c16:	401a      	ands	r2, r3
 8020c18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8020c1c:	f04f 0a00 	mov.w	sl, #0
 8020c20:	9b08      	ldr	r3, [sp, #32]
 8020c22:	2b00      	cmp	r3, #0
 8020c24:	d1b8      	bne.n	8020b98 <_strtod_l+0x830>
 8020c26:	e5c9      	b.n	80207bc <_strtod_l+0x454>
 8020c28:	f04f 33ff 	mov.w	r3, #4294967295
 8020c2c:	e7e8      	b.n	8020c00 <_strtod_l+0x898>
 8020c2e:	4613      	mov	r3, r2
 8020c30:	e7e6      	b.n	8020c00 <_strtod_l+0x898>
 8020c32:	ea53 030a 	orrs.w	r3, r3, sl
 8020c36:	d0a1      	beq.n	8020b7c <_strtod_l+0x814>
 8020c38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8020c3a:	b1db      	cbz	r3, 8020c74 <_strtod_l+0x90c>
 8020c3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8020c3e:	4213      	tst	r3, r2
 8020c40:	d0ee      	beq.n	8020c20 <_strtod_l+0x8b8>
 8020c42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020c44:	9a08      	ldr	r2, [sp, #32]
 8020c46:	4650      	mov	r0, sl
 8020c48:	4659      	mov	r1, fp
 8020c4a:	b1bb      	cbz	r3, 8020c7c <_strtod_l+0x914>
 8020c4c:	f7ff fb6c 	bl	8020328 <sulp>
 8020c50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020c54:	ec53 2b10 	vmov	r2, r3, d0
 8020c58:	f7df fb18 	bl	800028c <__adddf3>
 8020c5c:	4682      	mov	sl, r0
 8020c5e:	468b      	mov	fp, r1
 8020c60:	e7de      	b.n	8020c20 <_strtod_l+0x8b8>
 8020c62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8020c66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8020c6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8020c6e:	f04f 3aff 	mov.w	sl, #4294967295
 8020c72:	e7d5      	b.n	8020c20 <_strtod_l+0x8b8>
 8020c74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8020c76:	ea13 0f0a 	tst.w	r3, sl
 8020c7a:	e7e1      	b.n	8020c40 <_strtod_l+0x8d8>
 8020c7c:	f7ff fb54 	bl	8020328 <sulp>
 8020c80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020c84:	ec53 2b10 	vmov	r2, r3, d0
 8020c88:	f7df fafe 	bl	8000288 <__aeabi_dsub>
 8020c8c:	2200      	movs	r2, #0
 8020c8e:	2300      	movs	r3, #0
 8020c90:	4682      	mov	sl, r0
 8020c92:	468b      	mov	fp, r1
 8020c94:	f7df ff18 	bl	8000ac8 <__aeabi_dcmpeq>
 8020c98:	2800      	cmp	r0, #0
 8020c9a:	d0c1      	beq.n	8020c20 <_strtod_l+0x8b8>
 8020c9c:	e619      	b.n	80208d2 <_strtod_l+0x56a>
 8020c9e:	4641      	mov	r1, r8
 8020ca0:	4620      	mov	r0, r4
 8020ca2:	f7ff fac3 	bl	802022c <__ratio>
 8020ca6:	ec57 6b10 	vmov	r6, r7, d0
 8020caa:	2200      	movs	r2, #0
 8020cac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8020cb0:	4630      	mov	r0, r6
 8020cb2:	4639      	mov	r1, r7
 8020cb4:	f7df ff1c 	bl	8000af0 <__aeabi_dcmple>
 8020cb8:	2800      	cmp	r0, #0
 8020cba:	d06f      	beq.n	8020d9c <_strtod_l+0xa34>
 8020cbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020cbe:	2b00      	cmp	r3, #0
 8020cc0:	d17a      	bne.n	8020db8 <_strtod_l+0xa50>
 8020cc2:	f1ba 0f00 	cmp.w	sl, #0
 8020cc6:	d158      	bne.n	8020d7a <_strtod_l+0xa12>
 8020cc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020cca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020cce:	2b00      	cmp	r3, #0
 8020cd0:	d15a      	bne.n	8020d88 <_strtod_l+0xa20>
 8020cd2:	4b64      	ldr	r3, [pc, #400]	@ (8020e64 <_strtod_l+0xafc>)
 8020cd4:	2200      	movs	r2, #0
 8020cd6:	4630      	mov	r0, r6
 8020cd8:	4639      	mov	r1, r7
 8020cda:	f7df feff 	bl	8000adc <__aeabi_dcmplt>
 8020cde:	2800      	cmp	r0, #0
 8020ce0:	d159      	bne.n	8020d96 <_strtod_l+0xa2e>
 8020ce2:	4630      	mov	r0, r6
 8020ce4:	4639      	mov	r1, r7
 8020ce6:	4b60      	ldr	r3, [pc, #384]	@ (8020e68 <_strtod_l+0xb00>)
 8020ce8:	2200      	movs	r2, #0
 8020cea:	f7df fc85 	bl	80005f8 <__aeabi_dmul>
 8020cee:	4606      	mov	r6, r0
 8020cf0:	460f      	mov	r7, r1
 8020cf2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8020cf6:	9606      	str	r6, [sp, #24]
 8020cf8:	9307      	str	r3, [sp, #28]
 8020cfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020cfe:	4d57      	ldr	r5, [pc, #348]	@ (8020e5c <_strtod_l+0xaf4>)
 8020d00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8020d04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020d06:	401d      	ands	r5, r3
 8020d08:	4b58      	ldr	r3, [pc, #352]	@ (8020e6c <_strtod_l+0xb04>)
 8020d0a:	429d      	cmp	r5, r3
 8020d0c:	f040 80b2 	bne.w	8020e74 <_strtod_l+0xb0c>
 8020d10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020d12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8020d16:	ec4b ab10 	vmov	d0, sl, fp
 8020d1a:	f7ff f9bf 	bl	802009c <__ulp>
 8020d1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8020d22:	ec51 0b10 	vmov	r0, r1, d0
 8020d26:	f7df fc67 	bl	80005f8 <__aeabi_dmul>
 8020d2a:	4652      	mov	r2, sl
 8020d2c:	465b      	mov	r3, fp
 8020d2e:	f7df faad 	bl	800028c <__adddf3>
 8020d32:	460b      	mov	r3, r1
 8020d34:	4949      	ldr	r1, [pc, #292]	@ (8020e5c <_strtod_l+0xaf4>)
 8020d36:	4a4e      	ldr	r2, [pc, #312]	@ (8020e70 <_strtod_l+0xb08>)
 8020d38:	4019      	ands	r1, r3
 8020d3a:	4291      	cmp	r1, r2
 8020d3c:	4682      	mov	sl, r0
 8020d3e:	d942      	bls.n	8020dc6 <_strtod_l+0xa5e>
 8020d40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8020d42:	4b47      	ldr	r3, [pc, #284]	@ (8020e60 <_strtod_l+0xaf8>)
 8020d44:	429a      	cmp	r2, r3
 8020d46:	d103      	bne.n	8020d50 <_strtod_l+0x9e8>
 8020d48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8020d4a:	3301      	adds	r3, #1
 8020d4c:	f43f ad2b 	beq.w	80207a6 <_strtod_l+0x43e>
 8020d50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8020e60 <_strtod_l+0xaf8>
 8020d54:	f04f 3aff 	mov.w	sl, #4294967295
 8020d58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8020d5a:	9805      	ldr	r0, [sp, #20]
 8020d5c:	f7fe fe6a 	bl	801fa34 <_Bfree>
 8020d60:	9805      	ldr	r0, [sp, #20]
 8020d62:	4649      	mov	r1, r9
 8020d64:	f7fe fe66 	bl	801fa34 <_Bfree>
 8020d68:	9805      	ldr	r0, [sp, #20]
 8020d6a:	4641      	mov	r1, r8
 8020d6c:	f7fe fe62 	bl	801fa34 <_Bfree>
 8020d70:	9805      	ldr	r0, [sp, #20]
 8020d72:	4621      	mov	r1, r4
 8020d74:	f7fe fe5e 	bl	801fa34 <_Bfree>
 8020d78:	e618      	b.n	80209ac <_strtod_l+0x644>
 8020d7a:	f1ba 0f01 	cmp.w	sl, #1
 8020d7e:	d103      	bne.n	8020d88 <_strtod_l+0xa20>
 8020d80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8020d82:	2b00      	cmp	r3, #0
 8020d84:	f43f ada5 	beq.w	80208d2 <_strtod_l+0x56a>
 8020d88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8020e38 <_strtod_l+0xad0>
 8020d8c:	4f35      	ldr	r7, [pc, #212]	@ (8020e64 <_strtod_l+0xafc>)
 8020d8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020d92:	2600      	movs	r6, #0
 8020d94:	e7b1      	b.n	8020cfa <_strtod_l+0x992>
 8020d96:	4f34      	ldr	r7, [pc, #208]	@ (8020e68 <_strtod_l+0xb00>)
 8020d98:	2600      	movs	r6, #0
 8020d9a:	e7aa      	b.n	8020cf2 <_strtod_l+0x98a>
 8020d9c:	4b32      	ldr	r3, [pc, #200]	@ (8020e68 <_strtod_l+0xb00>)
 8020d9e:	4630      	mov	r0, r6
 8020da0:	4639      	mov	r1, r7
 8020da2:	2200      	movs	r2, #0
 8020da4:	f7df fc28 	bl	80005f8 <__aeabi_dmul>
 8020da8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020daa:	4606      	mov	r6, r0
 8020dac:	460f      	mov	r7, r1
 8020dae:	2b00      	cmp	r3, #0
 8020db0:	d09f      	beq.n	8020cf2 <_strtod_l+0x98a>
 8020db2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8020db6:	e7a0      	b.n	8020cfa <_strtod_l+0x992>
 8020db8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8020e40 <_strtod_l+0xad8>
 8020dbc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8020dc0:	ec57 6b17 	vmov	r6, r7, d7
 8020dc4:	e799      	b.n	8020cfa <_strtod_l+0x992>
 8020dc6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8020dca:	9b08      	ldr	r3, [sp, #32]
 8020dcc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8020dd0:	2b00      	cmp	r3, #0
 8020dd2:	d1c1      	bne.n	8020d58 <_strtod_l+0x9f0>
 8020dd4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8020dd8:	0d1b      	lsrs	r3, r3, #20
 8020dda:	051b      	lsls	r3, r3, #20
 8020ddc:	429d      	cmp	r5, r3
 8020dde:	d1bb      	bne.n	8020d58 <_strtod_l+0x9f0>
 8020de0:	4630      	mov	r0, r6
 8020de2:	4639      	mov	r1, r7
 8020de4:	f7df ff68 	bl	8000cb8 <__aeabi_d2lz>
 8020de8:	f7df fbd8 	bl	800059c <__aeabi_l2d>
 8020dec:	4602      	mov	r2, r0
 8020dee:	460b      	mov	r3, r1
 8020df0:	4630      	mov	r0, r6
 8020df2:	4639      	mov	r1, r7
 8020df4:	f7df fa48 	bl	8000288 <__aeabi_dsub>
 8020df8:	460b      	mov	r3, r1
 8020dfa:	4602      	mov	r2, r0
 8020dfc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8020e00:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8020e04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020e06:	ea46 060a 	orr.w	r6, r6, sl
 8020e0a:	431e      	orrs	r6, r3
 8020e0c:	d06f      	beq.n	8020eee <_strtod_l+0xb86>
 8020e0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8020e48 <_strtod_l+0xae0>)
 8020e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e14:	f7df fe62 	bl	8000adc <__aeabi_dcmplt>
 8020e18:	2800      	cmp	r0, #0
 8020e1a:	f47f accf 	bne.w	80207bc <_strtod_l+0x454>
 8020e1e:	a30c      	add	r3, pc, #48	@ (adr r3, 8020e50 <_strtod_l+0xae8>)
 8020e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8020e28:	f7df fe76 	bl	8000b18 <__aeabi_dcmpgt>
 8020e2c:	2800      	cmp	r0, #0
 8020e2e:	d093      	beq.n	8020d58 <_strtod_l+0x9f0>
 8020e30:	e4c4      	b.n	80207bc <_strtod_l+0x454>
 8020e32:	bf00      	nop
 8020e34:	f3af 8000 	nop.w
 8020e38:	00000000 	.word	0x00000000
 8020e3c:	bff00000 	.word	0xbff00000
 8020e40:	00000000 	.word	0x00000000
 8020e44:	3ff00000 	.word	0x3ff00000
 8020e48:	94a03595 	.word	0x94a03595
 8020e4c:	3fdfffff 	.word	0x3fdfffff
 8020e50:	35afe535 	.word	0x35afe535
 8020e54:	3fe00000 	.word	0x3fe00000
 8020e58:	000fffff 	.word	0x000fffff
 8020e5c:	7ff00000 	.word	0x7ff00000
 8020e60:	7fefffff 	.word	0x7fefffff
 8020e64:	3ff00000 	.word	0x3ff00000
 8020e68:	3fe00000 	.word	0x3fe00000
 8020e6c:	7fe00000 	.word	0x7fe00000
 8020e70:	7c9fffff 	.word	0x7c9fffff
 8020e74:	9b08      	ldr	r3, [sp, #32]
 8020e76:	b323      	cbz	r3, 8020ec2 <_strtod_l+0xb5a>
 8020e78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8020e7c:	d821      	bhi.n	8020ec2 <_strtod_l+0xb5a>
 8020e7e:	a328      	add	r3, pc, #160	@ (adr r3, 8020f20 <_strtod_l+0xbb8>)
 8020e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020e84:	4630      	mov	r0, r6
 8020e86:	4639      	mov	r1, r7
 8020e88:	f7df fe32 	bl	8000af0 <__aeabi_dcmple>
 8020e8c:	b1a0      	cbz	r0, 8020eb8 <_strtod_l+0xb50>
 8020e8e:	4639      	mov	r1, r7
 8020e90:	4630      	mov	r0, r6
 8020e92:	f7df fe89 	bl	8000ba8 <__aeabi_d2uiz>
 8020e96:	2801      	cmp	r0, #1
 8020e98:	bf38      	it	cc
 8020e9a:	2001      	movcc	r0, #1
 8020e9c:	f7df fb32 	bl	8000504 <__aeabi_ui2d>
 8020ea0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8020ea2:	4606      	mov	r6, r0
 8020ea4:	460f      	mov	r7, r1
 8020ea6:	b9fb      	cbnz	r3, 8020ee8 <_strtod_l+0xb80>
 8020ea8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8020eac:	9014      	str	r0, [sp, #80]	@ 0x50
 8020eae:	9315      	str	r3, [sp, #84]	@ 0x54
 8020eb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8020eb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8020eb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8020eba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8020ebe:	1b5b      	subs	r3, r3, r5
 8020ec0:	9311      	str	r3, [sp, #68]	@ 0x44
 8020ec2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8020ec6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8020eca:	f7ff f8e7 	bl	802009c <__ulp>
 8020ece:	4650      	mov	r0, sl
 8020ed0:	ec53 2b10 	vmov	r2, r3, d0
 8020ed4:	4659      	mov	r1, fp
 8020ed6:	f7df fb8f 	bl	80005f8 <__aeabi_dmul>
 8020eda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8020ede:	f7df f9d5 	bl	800028c <__adddf3>
 8020ee2:	4682      	mov	sl, r0
 8020ee4:	468b      	mov	fp, r1
 8020ee6:	e770      	b.n	8020dca <_strtod_l+0xa62>
 8020ee8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8020eec:	e7e0      	b.n	8020eb0 <_strtod_l+0xb48>
 8020eee:	a30e      	add	r3, pc, #56	@ (adr r3, 8020f28 <_strtod_l+0xbc0>)
 8020ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020ef4:	f7df fdf2 	bl	8000adc <__aeabi_dcmplt>
 8020ef8:	e798      	b.n	8020e2c <_strtod_l+0xac4>
 8020efa:	2300      	movs	r3, #0
 8020efc:	930b      	str	r3, [sp, #44]	@ 0x2c
 8020efe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8020f00:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020f02:	6013      	str	r3, [r2, #0]
 8020f04:	f7ff ba6d 	b.w	80203e2 <_strtod_l+0x7a>
 8020f08:	2a65      	cmp	r2, #101	@ 0x65
 8020f0a:	f43f ab66 	beq.w	80205da <_strtod_l+0x272>
 8020f0e:	2a45      	cmp	r2, #69	@ 0x45
 8020f10:	f43f ab63 	beq.w	80205da <_strtod_l+0x272>
 8020f14:	2301      	movs	r3, #1
 8020f16:	f7ff bb9e 	b.w	8020656 <_strtod_l+0x2ee>
 8020f1a:	bf00      	nop
 8020f1c:	f3af 8000 	nop.w
 8020f20:	ffc00000 	.word	0xffc00000
 8020f24:	41dfffff 	.word	0x41dfffff
 8020f28:	94a03595 	.word	0x94a03595
 8020f2c:	3fcfffff 	.word	0x3fcfffff

08020f30 <_strtod_r>:
 8020f30:	4b01      	ldr	r3, [pc, #4]	@ (8020f38 <_strtod_r+0x8>)
 8020f32:	f7ff ba19 	b.w	8020368 <_strtod_l>
 8020f36:	bf00      	nop
 8020f38:	200000ac 	.word	0x200000ac

08020f3c <__ssputs_r>:
 8020f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020f40:	688e      	ldr	r6, [r1, #8]
 8020f42:	461f      	mov	r7, r3
 8020f44:	42be      	cmp	r6, r7
 8020f46:	680b      	ldr	r3, [r1, #0]
 8020f48:	4682      	mov	sl, r0
 8020f4a:	460c      	mov	r4, r1
 8020f4c:	4690      	mov	r8, r2
 8020f4e:	d82d      	bhi.n	8020fac <__ssputs_r+0x70>
 8020f50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8020f54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8020f58:	d026      	beq.n	8020fa8 <__ssputs_r+0x6c>
 8020f5a:	6965      	ldr	r5, [r4, #20]
 8020f5c:	6909      	ldr	r1, [r1, #16]
 8020f5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8020f62:	eba3 0901 	sub.w	r9, r3, r1
 8020f66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8020f6a:	1c7b      	adds	r3, r7, #1
 8020f6c:	444b      	add	r3, r9
 8020f6e:	106d      	asrs	r5, r5, #1
 8020f70:	429d      	cmp	r5, r3
 8020f72:	bf38      	it	cc
 8020f74:	461d      	movcc	r5, r3
 8020f76:	0553      	lsls	r3, r2, #21
 8020f78:	d527      	bpl.n	8020fca <__ssputs_r+0x8e>
 8020f7a:	4629      	mov	r1, r5
 8020f7c:	f7fc fa54 	bl	801d428 <_malloc_r>
 8020f80:	4606      	mov	r6, r0
 8020f82:	b360      	cbz	r0, 8020fde <__ssputs_r+0xa2>
 8020f84:	6921      	ldr	r1, [r4, #16]
 8020f86:	464a      	mov	r2, r9
 8020f88:	f7fd fe49 	bl	801ec1e <memcpy>
 8020f8c:	89a3      	ldrh	r3, [r4, #12]
 8020f8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8020f92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8020f96:	81a3      	strh	r3, [r4, #12]
 8020f98:	6126      	str	r6, [r4, #16]
 8020f9a:	6165      	str	r5, [r4, #20]
 8020f9c:	444e      	add	r6, r9
 8020f9e:	eba5 0509 	sub.w	r5, r5, r9
 8020fa2:	6026      	str	r6, [r4, #0]
 8020fa4:	60a5      	str	r5, [r4, #8]
 8020fa6:	463e      	mov	r6, r7
 8020fa8:	42be      	cmp	r6, r7
 8020faa:	d900      	bls.n	8020fae <__ssputs_r+0x72>
 8020fac:	463e      	mov	r6, r7
 8020fae:	6820      	ldr	r0, [r4, #0]
 8020fb0:	4632      	mov	r2, r6
 8020fb2:	4641      	mov	r1, r8
 8020fb4:	f7fd fcbe 	bl	801e934 <memmove>
 8020fb8:	68a3      	ldr	r3, [r4, #8]
 8020fba:	1b9b      	subs	r3, r3, r6
 8020fbc:	60a3      	str	r3, [r4, #8]
 8020fbe:	6823      	ldr	r3, [r4, #0]
 8020fc0:	4433      	add	r3, r6
 8020fc2:	6023      	str	r3, [r4, #0]
 8020fc4:	2000      	movs	r0, #0
 8020fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020fca:	462a      	mov	r2, r5
 8020fcc:	f7fc faf6 	bl	801d5bc <_realloc_r>
 8020fd0:	4606      	mov	r6, r0
 8020fd2:	2800      	cmp	r0, #0
 8020fd4:	d1e0      	bne.n	8020f98 <__ssputs_r+0x5c>
 8020fd6:	6921      	ldr	r1, [r4, #16]
 8020fd8:	4650      	mov	r0, sl
 8020fda:	f7fe fca1 	bl	801f920 <_free_r>
 8020fde:	230c      	movs	r3, #12
 8020fe0:	f8ca 3000 	str.w	r3, [sl]
 8020fe4:	89a3      	ldrh	r3, [r4, #12]
 8020fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020fea:	81a3      	strh	r3, [r4, #12]
 8020fec:	f04f 30ff 	mov.w	r0, #4294967295
 8020ff0:	e7e9      	b.n	8020fc6 <__ssputs_r+0x8a>
	...

08020ff4 <_svfiprintf_r>:
 8020ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ff8:	4698      	mov	r8, r3
 8020ffa:	898b      	ldrh	r3, [r1, #12]
 8020ffc:	061b      	lsls	r3, r3, #24
 8020ffe:	b09d      	sub	sp, #116	@ 0x74
 8021000:	4607      	mov	r7, r0
 8021002:	460d      	mov	r5, r1
 8021004:	4614      	mov	r4, r2
 8021006:	d510      	bpl.n	802102a <_svfiprintf_r+0x36>
 8021008:	690b      	ldr	r3, [r1, #16]
 802100a:	b973      	cbnz	r3, 802102a <_svfiprintf_r+0x36>
 802100c:	2140      	movs	r1, #64	@ 0x40
 802100e:	f7fc fa0b 	bl	801d428 <_malloc_r>
 8021012:	6028      	str	r0, [r5, #0]
 8021014:	6128      	str	r0, [r5, #16]
 8021016:	b930      	cbnz	r0, 8021026 <_svfiprintf_r+0x32>
 8021018:	230c      	movs	r3, #12
 802101a:	603b      	str	r3, [r7, #0]
 802101c:	f04f 30ff 	mov.w	r0, #4294967295
 8021020:	b01d      	add	sp, #116	@ 0x74
 8021022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021026:	2340      	movs	r3, #64	@ 0x40
 8021028:	616b      	str	r3, [r5, #20]
 802102a:	2300      	movs	r3, #0
 802102c:	9309      	str	r3, [sp, #36]	@ 0x24
 802102e:	2320      	movs	r3, #32
 8021030:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021034:	f8cd 800c 	str.w	r8, [sp, #12]
 8021038:	2330      	movs	r3, #48	@ 0x30
 802103a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80211d8 <_svfiprintf_r+0x1e4>
 802103e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021042:	f04f 0901 	mov.w	r9, #1
 8021046:	4623      	mov	r3, r4
 8021048:	469a      	mov	sl, r3
 802104a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802104e:	b10a      	cbz	r2, 8021054 <_svfiprintf_r+0x60>
 8021050:	2a25      	cmp	r2, #37	@ 0x25
 8021052:	d1f9      	bne.n	8021048 <_svfiprintf_r+0x54>
 8021054:	ebba 0b04 	subs.w	fp, sl, r4
 8021058:	d00b      	beq.n	8021072 <_svfiprintf_r+0x7e>
 802105a:	465b      	mov	r3, fp
 802105c:	4622      	mov	r2, r4
 802105e:	4629      	mov	r1, r5
 8021060:	4638      	mov	r0, r7
 8021062:	f7ff ff6b 	bl	8020f3c <__ssputs_r>
 8021066:	3001      	adds	r0, #1
 8021068:	f000 80a7 	beq.w	80211ba <_svfiprintf_r+0x1c6>
 802106c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802106e:	445a      	add	r2, fp
 8021070:	9209      	str	r2, [sp, #36]	@ 0x24
 8021072:	f89a 3000 	ldrb.w	r3, [sl]
 8021076:	2b00      	cmp	r3, #0
 8021078:	f000 809f 	beq.w	80211ba <_svfiprintf_r+0x1c6>
 802107c:	2300      	movs	r3, #0
 802107e:	f04f 32ff 	mov.w	r2, #4294967295
 8021082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021086:	f10a 0a01 	add.w	sl, sl, #1
 802108a:	9304      	str	r3, [sp, #16]
 802108c:	9307      	str	r3, [sp, #28]
 802108e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021092:	931a      	str	r3, [sp, #104]	@ 0x68
 8021094:	4654      	mov	r4, sl
 8021096:	2205      	movs	r2, #5
 8021098:	f814 1b01 	ldrb.w	r1, [r4], #1
 802109c:	484e      	ldr	r0, [pc, #312]	@ (80211d8 <_svfiprintf_r+0x1e4>)
 802109e:	f7df f897 	bl	80001d0 <memchr>
 80210a2:	9a04      	ldr	r2, [sp, #16]
 80210a4:	b9d8      	cbnz	r0, 80210de <_svfiprintf_r+0xea>
 80210a6:	06d0      	lsls	r0, r2, #27
 80210a8:	bf44      	itt	mi
 80210aa:	2320      	movmi	r3, #32
 80210ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80210b0:	0711      	lsls	r1, r2, #28
 80210b2:	bf44      	itt	mi
 80210b4:	232b      	movmi	r3, #43	@ 0x2b
 80210b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80210ba:	f89a 3000 	ldrb.w	r3, [sl]
 80210be:	2b2a      	cmp	r3, #42	@ 0x2a
 80210c0:	d015      	beq.n	80210ee <_svfiprintf_r+0xfa>
 80210c2:	9a07      	ldr	r2, [sp, #28]
 80210c4:	4654      	mov	r4, sl
 80210c6:	2000      	movs	r0, #0
 80210c8:	f04f 0c0a 	mov.w	ip, #10
 80210cc:	4621      	mov	r1, r4
 80210ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80210d2:	3b30      	subs	r3, #48	@ 0x30
 80210d4:	2b09      	cmp	r3, #9
 80210d6:	d94b      	bls.n	8021170 <_svfiprintf_r+0x17c>
 80210d8:	b1b0      	cbz	r0, 8021108 <_svfiprintf_r+0x114>
 80210da:	9207      	str	r2, [sp, #28]
 80210dc:	e014      	b.n	8021108 <_svfiprintf_r+0x114>
 80210de:	eba0 0308 	sub.w	r3, r0, r8
 80210e2:	fa09 f303 	lsl.w	r3, r9, r3
 80210e6:	4313      	orrs	r3, r2
 80210e8:	9304      	str	r3, [sp, #16]
 80210ea:	46a2      	mov	sl, r4
 80210ec:	e7d2      	b.n	8021094 <_svfiprintf_r+0xa0>
 80210ee:	9b03      	ldr	r3, [sp, #12]
 80210f0:	1d19      	adds	r1, r3, #4
 80210f2:	681b      	ldr	r3, [r3, #0]
 80210f4:	9103      	str	r1, [sp, #12]
 80210f6:	2b00      	cmp	r3, #0
 80210f8:	bfbb      	ittet	lt
 80210fa:	425b      	neglt	r3, r3
 80210fc:	f042 0202 	orrlt.w	r2, r2, #2
 8021100:	9307      	strge	r3, [sp, #28]
 8021102:	9307      	strlt	r3, [sp, #28]
 8021104:	bfb8      	it	lt
 8021106:	9204      	strlt	r2, [sp, #16]
 8021108:	7823      	ldrb	r3, [r4, #0]
 802110a:	2b2e      	cmp	r3, #46	@ 0x2e
 802110c:	d10a      	bne.n	8021124 <_svfiprintf_r+0x130>
 802110e:	7863      	ldrb	r3, [r4, #1]
 8021110:	2b2a      	cmp	r3, #42	@ 0x2a
 8021112:	d132      	bne.n	802117a <_svfiprintf_r+0x186>
 8021114:	9b03      	ldr	r3, [sp, #12]
 8021116:	1d1a      	adds	r2, r3, #4
 8021118:	681b      	ldr	r3, [r3, #0]
 802111a:	9203      	str	r2, [sp, #12]
 802111c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021120:	3402      	adds	r4, #2
 8021122:	9305      	str	r3, [sp, #20]
 8021124:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80211e8 <_svfiprintf_r+0x1f4>
 8021128:	7821      	ldrb	r1, [r4, #0]
 802112a:	2203      	movs	r2, #3
 802112c:	4650      	mov	r0, sl
 802112e:	f7df f84f 	bl	80001d0 <memchr>
 8021132:	b138      	cbz	r0, 8021144 <_svfiprintf_r+0x150>
 8021134:	9b04      	ldr	r3, [sp, #16]
 8021136:	eba0 000a 	sub.w	r0, r0, sl
 802113a:	2240      	movs	r2, #64	@ 0x40
 802113c:	4082      	lsls	r2, r0
 802113e:	4313      	orrs	r3, r2
 8021140:	3401      	adds	r4, #1
 8021142:	9304      	str	r3, [sp, #16]
 8021144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021148:	4824      	ldr	r0, [pc, #144]	@ (80211dc <_svfiprintf_r+0x1e8>)
 802114a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 802114e:	2206      	movs	r2, #6
 8021150:	f7df f83e 	bl	80001d0 <memchr>
 8021154:	2800      	cmp	r0, #0
 8021156:	d036      	beq.n	80211c6 <_svfiprintf_r+0x1d2>
 8021158:	4b21      	ldr	r3, [pc, #132]	@ (80211e0 <_svfiprintf_r+0x1ec>)
 802115a:	bb1b      	cbnz	r3, 80211a4 <_svfiprintf_r+0x1b0>
 802115c:	9b03      	ldr	r3, [sp, #12]
 802115e:	3307      	adds	r3, #7
 8021160:	f023 0307 	bic.w	r3, r3, #7
 8021164:	3308      	adds	r3, #8
 8021166:	9303      	str	r3, [sp, #12]
 8021168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802116a:	4433      	add	r3, r6
 802116c:	9309      	str	r3, [sp, #36]	@ 0x24
 802116e:	e76a      	b.n	8021046 <_svfiprintf_r+0x52>
 8021170:	fb0c 3202 	mla	r2, ip, r2, r3
 8021174:	460c      	mov	r4, r1
 8021176:	2001      	movs	r0, #1
 8021178:	e7a8      	b.n	80210cc <_svfiprintf_r+0xd8>
 802117a:	2300      	movs	r3, #0
 802117c:	3401      	adds	r4, #1
 802117e:	9305      	str	r3, [sp, #20]
 8021180:	4619      	mov	r1, r3
 8021182:	f04f 0c0a 	mov.w	ip, #10
 8021186:	4620      	mov	r0, r4
 8021188:	f810 2b01 	ldrb.w	r2, [r0], #1
 802118c:	3a30      	subs	r2, #48	@ 0x30
 802118e:	2a09      	cmp	r2, #9
 8021190:	d903      	bls.n	802119a <_svfiprintf_r+0x1a6>
 8021192:	2b00      	cmp	r3, #0
 8021194:	d0c6      	beq.n	8021124 <_svfiprintf_r+0x130>
 8021196:	9105      	str	r1, [sp, #20]
 8021198:	e7c4      	b.n	8021124 <_svfiprintf_r+0x130>
 802119a:	fb0c 2101 	mla	r1, ip, r1, r2
 802119e:	4604      	mov	r4, r0
 80211a0:	2301      	movs	r3, #1
 80211a2:	e7f0      	b.n	8021186 <_svfiprintf_r+0x192>
 80211a4:	ab03      	add	r3, sp, #12
 80211a6:	9300      	str	r3, [sp, #0]
 80211a8:	462a      	mov	r2, r5
 80211aa:	4b0e      	ldr	r3, [pc, #56]	@ (80211e4 <_svfiprintf_r+0x1f0>)
 80211ac:	a904      	add	r1, sp, #16
 80211ae:	4638      	mov	r0, r7
 80211b0:	f7fc fb58 	bl	801d864 <_printf_float>
 80211b4:	1c42      	adds	r2, r0, #1
 80211b6:	4606      	mov	r6, r0
 80211b8:	d1d6      	bne.n	8021168 <_svfiprintf_r+0x174>
 80211ba:	89ab      	ldrh	r3, [r5, #12]
 80211bc:	065b      	lsls	r3, r3, #25
 80211be:	f53f af2d 	bmi.w	802101c <_svfiprintf_r+0x28>
 80211c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80211c4:	e72c      	b.n	8021020 <_svfiprintf_r+0x2c>
 80211c6:	ab03      	add	r3, sp, #12
 80211c8:	9300      	str	r3, [sp, #0]
 80211ca:	462a      	mov	r2, r5
 80211cc:	4b05      	ldr	r3, [pc, #20]	@ (80211e4 <_svfiprintf_r+0x1f0>)
 80211ce:	a904      	add	r1, sp, #16
 80211d0:	4638      	mov	r0, r7
 80211d2:	f7fc fddf 	bl	801dd94 <_printf_i>
 80211d6:	e7ed      	b.n	80211b4 <_svfiprintf_r+0x1c0>
 80211d8:	08025708 	.word	0x08025708
 80211dc:	08025712 	.word	0x08025712
 80211e0:	0801d865 	.word	0x0801d865
 80211e4:	08020f3d 	.word	0x08020f3d
 80211e8:	0802570e 	.word	0x0802570e

080211ec <__sfputc_r>:
 80211ec:	6893      	ldr	r3, [r2, #8]
 80211ee:	3b01      	subs	r3, #1
 80211f0:	2b00      	cmp	r3, #0
 80211f2:	b410      	push	{r4}
 80211f4:	6093      	str	r3, [r2, #8]
 80211f6:	da08      	bge.n	802120a <__sfputc_r+0x1e>
 80211f8:	6994      	ldr	r4, [r2, #24]
 80211fa:	42a3      	cmp	r3, r4
 80211fc:	db01      	blt.n	8021202 <__sfputc_r+0x16>
 80211fe:	290a      	cmp	r1, #10
 8021200:	d103      	bne.n	802120a <__sfputc_r+0x1e>
 8021202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021206:	f7fd baf0 	b.w	801e7ea <__swbuf_r>
 802120a:	6813      	ldr	r3, [r2, #0]
 802120c:	1c58      	adds	r0, r3, #1
 802120e:	6010      	str	r0, [r2, #0]
 8021210:	7019      	strb	r1, [r3, #0]
 8021212:	4608      	mov	r0, r1
 8021214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021218:	4770      	bx	lr

0802121a <__sfputs_r>:
 802121a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802121c:	4606      	mov	r6, r0
 802121e:	460f      	mov	r7, r1
 8021220:	4614      	mov	r4, r2
 8021222:	18d5      	adds	r5, r2, r3
 8021224:	42ac      	cmp	r4, r5
 8021226:	d101      	bne.n	802122c <__sfputs_r+0x12>
 8021228:	2000      	movs	r0, #0
 802122a:	e007      	b.n	802123c <__sfputs_r+0x22>
 802122c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021230:	463a      	mov	r2, r7
 8021232:	4630      	mov	r0, r6
 8021234:	f7ff ffda 	bl	80211ec <__sfputc_r>
 8021238:	1c43      	adds	r3, r0, #1
 802123a:	d1f3      	bne.n	8021224 <__sfputs_r+0xa>
 802123c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021240 <_vfiprintf_r>:
 8021240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021244:	460d      	mov	r5, r1
 8021246:	b09d      	sub	sp, #116	@ 0x74
 8021248:	4614      	mov	r4, r2
 802124a:	4698      	mov	r8, r3
 802124c:	4606      	mov	r6, r0
 802124e:	b118      	cbz	r0, 8021258 <_vfiprintf_r+0x18>
 8021250:	6a03      	ldr	r3, [r0, #32]
 8021252:	b90b      	cbnz	r3, 8021258 <_vfiprintf_r+0x18>
 8021254:	f7fd fa1e 	bl	801e694 <__sinit>
 8021258:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802125a:	07d9      	lsls	r1, r3, #31
 802125c:	d405      	bmi.n	802126a <_vfiprintf_r+0x2a>
 802125e:	89ab      	ldrh	r3, [r5, #12]
 8021260:	059a      	lsls	r2, r3, #22
 8021262:	d402      	bmi.n	802126a <_vfiprintf_r+0x2a>
 8021264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021266:	f7fd fcd8 	bl	801ec1a <__retarget_lock_acquire_recursive>
 802126a:	89ab      	ldrh	r3, [r5, #12]
 802126c:	071b      	lsls	r3, r3, #28
 802126e:	d501      	bpl.n	8021274 <_vfiprintf_r+0x34>
 8021270:	692b      	ldr	r3, [r5, #16]
 8021272:	b99b      	cbnz	r3, 802129c <_vfiprintf_r+0x5c>
 8021274:	4629      	mov	r1, r5
 8021276:	4630      	mov	r0, r6
 8021278:	f7fd faf6 	bl	801e868 <__swsetup_r>
 802127c:	b170      	cbz	r0, 802129c <_vfiprintf_r+0x5c>
 802127e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021280:	07dc      	lsls	r4, r3, #31
 8021282:	d504      	bpl.n	802128e <_vfiprintf_r+0x4e>
 8021284:	f04f 30ff 	mov.w	r0, #4294967295
 8021288:	b01d      	add	sp, #116	@ 0x74
 802128a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802128e:	89ab      	ldrh	r3, [r5, #12]
 8021290:	0598      	lsls	r0, r3, #22
 8021292:	d4f7      	bmi.n	8021284 <_vfiprintf_r+0x44>
 8021294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021296:	f7fd fcc1 	bl	801ec1c <__retarget_lock_release_recursive>
 802129a:	e7f3      	b.n	8021284 <_vfiprintf_r+0x44>
 802129c:	2300      	movs	r3, #0
 802129e:	9309      	str	r3, [sp, #36]	@ 0x24
 80212a0:	2320      	movs	r3, #32
 80212a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80212a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80212aa:	2330      	movs	r3, #48	@ 0x30
 80212ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 802145c <_vfiprintf_r+0x21c>
 80212b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80212b4:	f04f 0901 	mov.w	r9, #1
 80212b8:	4623      	mov	r3, r4
 80212ba:	469a      	mov	sl, r3
 80212bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80212c0:	b10a      	cbz	r2, 80212c6 <_vfiprintf_r+0x86>
 80212c2:	2a25      	cmp	r2, #37	@ 0x25
 80212c4:	d1f9      	bne.n	80212ba <_vfiprintf_r+0x7a>
 80212c6:	ebba 0b04 	subs.w	fp, sl, r4
 80212ca:	d00b      	beq.n	80212e4 <_vfiprintf_r+0xa4>
 80212cc:	465b      	mov	r3, fp
 80212ce:	4622      	mov	r2, r4
 80212d0:	4629      	mov	r1, r5
 80212d2:	4630      	mov	r0, r6
 80212d4:	f7ff ffa1 	bl	802121a <__sfputs_r>
 80212d8:	3001      	adds	r0, #1
 80212da:	f000 80a7 	beq.w	802142c <_vfiprintf_r+0x1ec>
 80212de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80212e0:	445a      	add	r2, fp
 80212e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80212e4:	f89a 3000 	ldrb.w	r3, [sl]
 80212e8:	2b00      	cmp	r3, #0
 80212ea:	f000 809f 	beq.w	802142c <_vfiprintf_r+0x1ec>
 80212ee:	2300      	movs	r3, #0
 80212f0:	f04f 32ff 	mov.w	r2, #4294967295
 80212f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80212f8:	f10a 0a01 	add.w	sl, sl, #1
 80212fc:	9304      	str	r3, [sp, #16]
 80212fe:	9307      	str	r3, [sp, #28]
 8021300:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021304:	931a      	str	r3, [sp, #104]	@ 0x68
 8021306:	4654      	mov	r4, sl
 8021308:	2205      	movs	r2, #5
 802130a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802130e:	4853      	ldr	r0, [pc, #332]	@ (802145c <_vfiprintf_r+0x21c>)
 8021310:	f7de ff5e 	bl	80001d0 <memchr>
 8021314:	9a04      	ldr	r2, [sp, #16]
 8021316:	b9d8      	cbnz	r0, 8021350 <_vfiprintf_r+0x110>
 8021318:	06d1      	lsls	r1, r2, #27
 802131a:	bf44      	itt	mi
 802131c:	2320      	movmi	r3, #32
 802131e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021322:	0713      	lsls	r3, r2, #28
 8021324:	bf44      	itt	mi
 8021326:	232b      	movmi	r3, #43	@ 0x2b
 8021328:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802132c:	f89a 3000 	ldrb.w	r3, [sl]
 8021330:	2b2a      	cmp	r3, #42	@ 0x2a
 8021332:	d015      	beq.n	8021360 <_vfiprintf_r+0x120>
 8021334:	9a07      	ldr	r2, [sp, #28]
 8021336:	4654      	mov	r4, sl
 8021338:	2000      	movs	r0, #0
 802133a:	f04f 0c0a 	mov.w	ip, #10
 802133e:	4621      	mov	r1, r4
 8021340:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021344:	3b30      	subs	r3, #48	@ 0x30
 8021346:	2b09      	cmp	r3, #9
 8021348:	d94b      	bls.n	80213e2 <_vfiprintf_r+0x1a2>
 802134a:	b1b0      	cbz	r0, 802137a <_vfiprintf_r+0x13a>
 802134c:	9207      	str	r2, [sp, #28]
 802134e:	e014      	b.n	802137a <_vfiprintf_r+0x13a>
 8021350:	eba0 0308 	sub.w	r3, r0, r8
 8021354:	fa09 f303 	lsl.w	r3, r9, r3
 8021358:	4313      	orrs	r3, r2
 802135a:	9304      	str	r3, [sp, #16]
 802135c:	46a2      	mov	sl, r4
 802135e:	e7d2      	b.n	8021306 <_vfiprintf_r+0xc6>
 8021360:	9b03      	ldr	r3, [sp, #12]
 8021362:	1d19      	adds	r1, r3, #4
 8021364:	681b      	ldr	r3, [r3, #0]
 8021366:	9103      	str	r1, [sp, #12]
 8021368:	2b00      	cmp	r3, #0
 802136a:	bfbb      	ittet	lt
 802136c:	425b      	neglt	r3, r3
 802136e:	f042 0202 	orrlt.w	r2, r2, #2
 8021372:	9307      	strge	r3, [sp, #28]
 8021374:	9307      	strlt	r3, [sp, #28]
 8021376:	bfb8      	it	lt
 8021378:	9204      	strlt	r2, [sp, #16]
 802137a:	7823      	ldrb	r3, [r4, #0]
 802137c:	2b2e      	cmp	r3, #46	@ 0x2e
 802137e:	d10a      	bne.n	8021396 <_vfiprintf_r+0x156>
 8021380:	7863      	ldrb	r3, [r4, #1]
 8021382:	2b2a      	cmp	r3, #42	@ 0x2a
 8021384:	d132      	bne.n	80213ec <_vfiprintf_r+0x1ac>
 8021386:	9b03      	ldr	r3, [sp, #12]
 8021388:	1d1a      	adds	r2, r3, #4
 802138a:	681b      	ldr	r3, [r3, #0]
 802138c:	9203      	str	r2, [sp, #12]
 802138e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021392:	3402      	adds	r4, #2
 8021394:	9305      	str	r3, [sp, #20]
 8021396:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 802146c <_vfiprintf_r+0x22c>
 802139a:	7821      	ldrb	r1, [r4, #0]
 802139c:	2203      	movs	r2, #3
 802139e:	4650      	mov	r0, sl
 80213a0:	f7de ff16 	bl	80001d0 <memchr>
 80213a4:	b138      	cbz	r0, 80213b6 <_vfiprintf_r+0x176>
 80213a6:	9b04      	ldr	r3, [sp, #16]
 80213a8:	eba0 000a 	sub.w	r0, r0, sl
 80213ac:	2240      	movs	r2, #64	@ 0x40
 80213ae:	4082      	lsls	r2, r0
 80213b0:	4313      	orrs	r3, r2
 80213b2:	3401      	adds	r4, #1
 80213b4:	9304      	str	r3, [sp, #16]
 80213b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80213ba:	4829      	ldr	r0, [pc, #164]	@ (8021460 <_vfiprintf_r+0x220>)
 80213bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80213c0:	2206      	movs	r2, #6
 80213c2:	f7de ff05 	bl	80001d0 <memchr>
 80213c6:	2800      	cmp	r0, #0
 80213c8:	d03f      	beq.n	802144a <_vfiprintf_r+0x20a>
 80213ca:	4b26      	ldr	r3, [pc, #152]	@ (8021464 <_vfiprintf_r+0x224>)
 80213cc:	bb1b      	cbnz	r3, 8021416 <_vfiprintf_r+0x1d6>
 80213ce:	9b03      	ldr	r3, [sp, #12]
 80213d0:	3307      	adds	r3, #7
 80213d2:	f023 0307 	bic.w	r3, r3, #7
 80213d6:	3308      	adds	r3, #8
 80213d8:	9303      	str	r3, [sp, #12]
 80213da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80213dc:	443b      	add	r3, r7
 80213de:	9309      	str	r3, [sp, #36]	@ 0x24
 80213e0:	e76a      	b.n	80212b8 <_vfiprintf_r+0x78>
 80213e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80213e6:	460c      	mov	r4, r1
 80213e8:	2001      	movs	r0, #1
 80213ea:	e7a8      	b.n	802133e <_vfiprintf_r+0xfe>
 80213ec:	2300      	movs	r3, #0
 80213ee:	3401      	adds	r4, #1
 80213f0:	9305      	str	r3, [sp, #20]
 80213f2:	4619      	mov	r1, r3
 80213f4:	f04f 0c0a 	mov.w	ip, #10
 80213f8:	4620      	mov	r0, r4
 80213fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80213fe:	3a30      	subs	r2, #48	@ 0x30
 8021400:	2a09      	cmp	r2, #9
 8021402:	d903      	bls.n	802140c <_vfiprintf_r+0x1cc>
 8021404:	2b00      	cmp	r3, #0
 8021406:	d0c6      	beq.n	8021396 <_vfiprintf_r+0x156>
 8021408:	9105      	str	r1, [sp, #20]
 802140a:	e7c4      	b.n	8021396 <_vfiprintf_r+0x156>
 802140c:	fb0c 2101 	mla	r1, ip, r1, r2
 8021410:	4604      	mov	r4, r0
 8021412:	2301      	movs	r3, #1
 8021414:	e7f0      	b.n	80213f8 <_vfiprintf_r+0x1b8>
 8021416:	ab03      	add	r3, sp, #12
 8021418:	9300      	str	r3, [sp, #0]
 802141a:	462a      	mov	r2, r5
 802141c:	4b12      	ldr	r3, [pc, #72]	@ (8021468 <_vfiprintf_r+0x228>)
 802141e:	a904      	add	r1, sp, #16
 8021420:	4630      	mov	r0, r6
 8021422:	f7fc fa1f 	bl	801d864 <_printf_float>
 8021426:	4607      	mov	r7, r0
 8021428:	1c78      	adds	r0, r7, #1
 802142a:	d1d6      	bne.n	80213da <_vfiprintf_r+0x19a>
 802142c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802142e:	07d9      	lsls	r1, r3, #31
 8021430:	d405      	bmi.n	802143e <_vfiprintf_r+0x1fe>
 8021432:	89ab      	ldrh	r3, [r5, #12]
 8021434:	059a      	lsls	r2, r3, #22
 8021436:	d402      	bmi.n	802143e <_vfiprintf_r+0x1fe>
 8021438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802143a:	f7fd fbef 	bl	801ec1c <__retarget_lock_release_recursive>
 802143e:	89ab      	ldrh	r3, [r5, #12]
 8021440:	065b      	lsls	r3, r3, #25
 8021442:	f53f af1f 	bmi.w	8021284 <_vfiprintf_r+0x44>
 8021446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8021448:	e71e      	b.n	8021288 <_vfiprintf_r+0x48>
 802144a:	ab03      	add	r3, sp, #12
 802144c:	9300      	str	r3, [sp, #0]
 802144e:	462a      	mov	r2, r5
 8021450:	4b05      	ldr	r3, [pc, #20]	@ (8021468 <_vfiprintf_r+0x228>)
 8021452:	a904      	add	r1, sp, #16
 8021454:	4630      	mov	r0, r6
 8021456:	f7fc fc9d 	bl	801dd94 <_printf_i>
 802145a:	e7e4      	b.n	8021426 <_vfiprintf_r+0x1e6>
 802145c:	08025708 	.word	0x08025708
 8021460:	08025712 	.word	0x08025712
 8021464:	0801d865 	.word	0x0801d865
 8021468:	0802121b 	.word	0x0802121b
 802146c:	0802570e 	.word	0x0802570e

08021470 <fiprintf>:
 8021470:	b40e      	push	{r1, r2, r3}
 8021472:	b503      	push	{r0, r1, lr}
 8021474:	4601      	mov	r1, r0
 8021476:	ab03      	add	r3, sp, #12
 8021478:	4805      	ldr	r0, [pc, #20]	@ (8021490 <fiprintf+0x20>)
 802147a:	f853 2b04 	ldr.w	r2, [r3], #4
 802147e:	6800      	ldr	r0, [r0, #0]
 8021480:	9301      	str	r3, [sp, #4]
 8021482:	f7ff fedd 	bl	8021240 <_vfiprintf_r>
 8021486:	b002      	add	sp, #8
 8021488:	f85d eb04 	ldr.w	lr, [sp], #4
 802148c:	b003      	add	sp, #12
 802148e:	4770      	bx	lr
 8021490:	2000005c 	.word	0x2000005c

08021494 <__swhatbuf_r>:
 8021494:	b570      	push	{r4, r5, r6, lr}
 8021496:	460c      	mov	r4, r1
 8021498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802149c:	2900      	cmp	r1, #0
 802149e:	b096      	sub	sp, #88	@ 0x58
 80214a0:	4615      	mov	r5, r2
 80214a2:	461e      	mov	r6, r3
 80214a4:	da0d      	bge.n	80214c2 <__swhatbuf_r+0x2e>
 80214a6:	89a3      	ldrh	r3, [r4, #12]
 80214a8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80214ac:	f04f 0100 	mov.w	r1, #0
 80214b0:	bf14      	ite	ne
 80214b2:	2340      	movne	r3, #64	@ 0x40
 80214b4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80214b8:	2000      	movs	r0, #0
 80214ba:	6031      	str	r1, [r6, #0]
 80214bc:	602b      	str	r3, [r5, #0]
 80214be:	b016      	add	sp, #88	@ 0x58
 80214c0:	bd70      	pop	{r4, r5, r6, pc}
 80214c2:	466a      	mov	r2, sp
 80214c4:	f000 f848 	bl	8021558 <_fstat_r>
 80214c8:	2800      	cmp	r0, #0
 80214ca:	dbec      	blt.n	80214a6 <__swhatbuf_r+0x12>
 80214cc:	9901      	ldr	r1, [sp, #4]
 80214ce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80214d2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80214d6:	4259      	negs	r1, r3
 80214d8:	4159      	adcs	r1, r3
 80214da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80214de:	e7eb      	b.n	80214b8 <__swhatbuf_r+0x24>

080214e0 <__smakebuf_r>:
 80214e0:	898b      	ldrh	r3, [r1, #12]
 80214e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80214e4:	079d      	lsls	r5, r3, #30
 80214e6:	4606      	mov	r6, r0
 80214e8:	460c      	mov	r4, r1
 80214ea:	d507      	bpl.n	80214fc <__smakebuf_r+0x1c>
 80214ec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80214f0:	6023      	str	r3, [r4, #0]
 80214f2:	6123      	str	r3, [r4, #16]
 80214f4:	2301      	movs	r3, #1
 80214f6:	6163      	str	r3, [r4, #20]
 80214f8:	b003      	add	sp, #12
 80214fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80214fc:	ab01      	add	r3, sp, #4
 80214fe:	466a      	mov	r2, sp
 8021500:	f7ff ffc8 	bl	8021494 <__swhatbuf_r>
 8021504:	9f00      	ldr	r7, [sp, #0]
 8021506:	4605      	mov	r5, r0
 8021508:	4639      	mov	r1, r7
 802150a:	4630      	mov	r0, r6
 802150c:	f7fb ff8c 	bl	801d428 <_malloc_r>
 8021510:	b948      	cbnz	r0, 8021526 <__smakebuf_r+0x46>
 8021512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021516:	059a      	lsls	r2, r3, #22
 8021518:	d4ee      	bmi.n	80214f8 <__smakebuf_r+0x18>
 802151a:	f023 0303 	bic.w	r3, r3, #3
 802151e:	f043 0302 	orr.w	r3, r3, #2
 8021522:	81a3      	strh	r3, [r4, #12]
 8021524:	e7e2      	b.n	80214ec <__smakebuf_r+0xc>
 8021526:	89a3      	ldrh	r3, [r4, #12]
 8021528:	6020      	str	r0, [r4, #0]
 802152a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 802152e:	81a3      	strh	r3, [r4, #12]
 8021530:	9b01      	ldr	r3, [sp, #4]
 8021532:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021536:	b15b      	cbz	r3, 8021550 <__smakebuf_r+0x70>
 8021538:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802153c:	4630      	mov	r0, r6
 802153e:	f000 f81d 	bl	802157c <_isatty_r>
 8021542:	b128      	cbz	r0, 8021550 <__smakebuf_r+0x70>
 8021544:	89a3      	ldrh	r3, [r4, #12]
 8021546:	f023 0303 	bic.w	r3, r3, #3
 802154a:	f043 0301 	orr.w	r3, r3, #1
 802154e:	81a3      	strh	r3, [r4, #12]
 8021550:	89a3      	ldrh	r3, [r4, #12]
 8021552:	431d      	orrs	r5, r3
 8021554:	81a5      	strh	r5, [r4, #12]
 8021556:	e7cf      	b.n	80214f8 <__smakebuf_r+0x18>

08021558 <_fstat_r>:
 8021558:	b538      	push	{r3, r4, r5, lr}
 802155a:	4d07      	ldr	r5, [pc, #28]	@ (8021578 <_fstat_r+0x20>)
 802155c:	2300      	movs	r3, #0
 802155e:	4604      	mov	r4, r0
 8021560:	4608      	mov	r0, r1
 8021562:	4611      	mov	r1, r2
 8021564:	602b      	str	r3, [r5, #0]
 8021566:	f7e0 fdfd 	bl	8002164 <_fstat>
 802156a:	1c43      	adds	r3, r0, #1
 802156c:	d102      	bne.n	8021574 <_fstat_r+0x1c>
 802156e:	682b      	ldr	r3, [r5, #0]
 8021570:	b103      	cbz	r3, 8021574 <_fstat_r+0x1c>
 8021572:	6023      	str	r3, [r4, #0]
 8021574:	bd38      	pop	{r3, r4, r5, pc}
 8021576:	bf00      	nop
 8021578:	2001b2f8 	.word	0x2001b2f8

0802157c <_isatty_r>:
 802157c:	b538      	push	{r3, r4, r5, lr}
 802157e:	4d06      	ldr	r5, [pc, #24]	@ (8021598 <_isatty_r+0x1c>)
 8021580:	2300      	movs	r3, #0
 8021582:	4604      	mov	r4, r0
 8021584:	4608      	mov	r0, r1
 8021586:	602b      	str	r3, [r5, #0]
 8021588:	f7e0 fdfc 	bl	8002184 <_isatty>
 802158c:	1c43      	adds	r3, r0, #1
 802158e:	d102      	bne.n	8021596 <_isatty_r+0x1a>
 8021590:	682b      	ldr	r3, [r5, #0]
 8021592:	b103      	cbz	r3, 8021596 <_isatty_r+0x1a>
 8021594:	6023      	str	r3, [r4, #0]
 8021596:	bd38      	pop	{r3, r4, r5, pc}
 8021598:	2001b2f8 	.word	0x2001b2f8
 802159c:	00000000 	.word	0x00000000

080215a0 <nan>:
 80215a0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80215a8 <nan+0x8>
 80215a4:	4770      	bx	lr
 80215a6:	bf00      	nop
 80215a8:	00000000 	.word	0x00000000
 80215ac:	7ff80000 	.word	0x7ff80000

080215b0 <_calloc_r>:
 80215b0:	b570      	push	{r4, r5, r6, lr}
 80215b2:	fba1 5402 	umull	r5, r4, r1, r2
 80215b6:	b93c      	cbnz	r4, 80215c8 <_calloc_r+0x18>
 80215b8:	4629      	mov	r1, r5
 80215ba:	f7fb ff35 	bl	801d428 <_malloc_r>
 80215be:	4606      	mov	r6, r0
 80215c0:	b928      	cbnz	r0, 80215ce <_calloc_r+0x1e>
 80215c2:	2600      	movs	r6, #0
 80215c4:	4630      	mov	r0, r6
 80215c6:	bd70      	pop	{r4, r5, r6, pc}
 80215c8:	220c      	movs	r2, #12
 80215ca:	6002      	str	r2, [r0, #0]
 80215cc:	e7f9      	b.n	80215c2 <_calloc_r+0x12>
 80215ce:	462a      	mov	r2, r5
 80215d0:	4621      	mov	r1, r4
 80215d2:	f7fd f9c9 	bl	801e968 <memset>
 80215d6:	e7f5      	b.n	80215c4 <_calloc_r+0x14>

080215d8 <rshift>:
 80215d8:	6903      	ldr	r3, [r0, #16]
 80215da:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80215de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80215e2:	ea4f 1261 	mov.w	r2, r1, asr #5
 80215e6:	f100 0414 	add.w	r4, r0, #20
 80215ea:	dd45      	ble.n	8021678 <rshift+0xa0>
 80215ec:	f011 011f 	ands.w	r1, r1, #31
 80215f0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80215f4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80215f8:	d10c      	bne.n	8021614 <rshift+0x3c>
 80215fa:	f100 0710 	add.w	r7, r0, #16
 80215fe:	4629      	mov	r1, r5
 8021600:	42b1      	cmp	r1, r6
 8021602:	d334      	bcc.n	802166e <rshift+0x96>
 8021604:	1a9b      	subs	r3, r3, r2
 8021606:	009b      	lsls	r3, r3, #2
 8021608:	1eea      	subs	r2, r5, #3
 802160a:	4296      	cmp	r6, r2
 802160c:	bf38      	it	cc
 802160e:	2300      	movcc	r3, #0
 8021610:	4423      	add	r3, r4
 8021612:	e015      	b.n	8021640 <rshift+0x68>
 8021614:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8021618:	f1c1 0820 	rsb	r8, r1, #32
 802161c:	40cf      	lsrs	r7, r1
 802161e:	f105 0e04 	add.w	lr, r5, #4
 8021622:	46a1      	mov	r9, r4
 8021624:	4576      	cmp	r6, lr
 8021626:	46f4      	mov	ip, lr
 8021628:	d815      	bhi.n	8021656 <rshift+0x7e>
 802162a:	1a9a      	subs	r2, r3, r2
 802162c:	0092      	lsls	r2, r2, #2
 802162e:	3a04      	subs	r2, #4
 8021630:	3501      	adds	r5, #1
 8021632:	42ae      	cmp	r6, r5
 8021634:	bf38      	it	cc
 8021636:	2200      	movcc	r2, #0
 8021638:	18a3      	adds	r3, r4, r2
 802163a:	50a7      	str	r7, [r4, r2]
 802163c:	b107      	cbz	r7, 8021640 <rshift+0x68>
 802163e:	3304      	adds	r3, #4
 8021640:	1b1a      	subs	r2, r3, r4
 8021642:	42a3      	cmp	r3, r4
 8021644:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8021648:	bf08      	it	eq
 802164a:	2300      	moveq	r3, #0
 802164c:	6102      	str	r2, [r0, #16]
 802164e:	bf08      	it	eq
 8021650:	6143      	streq	r3, [r0, #20]
 8021652:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8021656:	f8dc c000 	ldr.w	ip, [ip]
 802165a:	fa0c fc08 	lsl.w	ip, ip, r8
 802165e:	ea4c 0707 	orr.w	r7, ip, r7
 8021662:	f849 7b04 	str.w	r7, [r9], #4
 8021666:	f85e 7b04 	ldr.w	r7, [lr], #4
 802166a:	40cf      	lsrs	r7, r1
 802166c:	e7da      	b.n	8021624 <rshift+0x4c>
 802166e:	f851 cb04 	ldr.w	ip, [r1], #4
 8021672:	f847 cf04 	str.w	ip, [r7, #4]!
 8021676:	e7c3      	b.n	8021600 <rshift+0x28>
 8021678:	4623      	mov	r3, r4
 802167a:	e7e1      	b.n	8021640 <rshift+0x68>

0802167c <__hexdig_fun>:
 802167c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8021680:	2b09      	cmp	r3, #9
 8021682:	d802      	bhi.n	802168a <__hexdig_fun+0xe>
 8021684:	3820      	subs	r0, #32
 8021686:	b2c0      	uxtb	r0, r0
 8021688:	4770      	bx	lr
 802168a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 802168e:	2b05      	cmp	r3, #5
 8021690:	d801      	bhi.n	8021696 <__hexdig_fun+0x1a>
 8021692:	3847      	subs	r0, #71	@ 0x47
 8021694:	e7f7      	b.n	8021686 <__hexdig_fun+0xa>
 8021696:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 802169a:	2b05      	cmp	r3, #5
 802169c:	d801      	bhi.n	80216a2 <__hexdig_fun+0x26>
 802169e:	3827      	subs	r0, #39	@ 0x27
 80216a0:	e7f1      	b.n	8021686 <__hexdig_fun+0xa>
 80216a2:	2000      	movs	r0, #0
 80216a4:	4770      	bx	lr
	...

080216a8 <__gethex>:
 80216a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216ac:	b085      	sub	sp, #20
 80216ae:	468a      	mov	sl, r1
 80216b0:	9302      	str	r3, [sp, #8]
 80216b2:	680b      	ldr	r3, [r1, #0]
 80216b4:	9001      	str	r0, [sp, #4]
 80216b6:	4690      	mov	r8, r2
 80216b8:	1c9c      	adds	r4, r3, #2
 80216ba:	46a1      	mov	r9, r4
 80216bc:	f814 0b01 	ldrb.w	r0, [r4], #1
 80216c0:	2830      	cmp	r0, #48	@ 0x30
 80216c2:	d0fa      	beq.n	80216ba <__gethex+0x12>
 80216c4:	eba9 0303 	sub.w	r3, r9, r3
 80216c8:	f1a3 0b02 	sub.w	fp, r3, #2
 80216cc:	f7ff ffd6 	bl	802167c <__hexdig_fun>
 80216d0:	4605      	mov	r5, r0
 80216d2:	2800      	cmp	r0, #0
 80216d4:	d168      	bne.n	80217a8 <__gethex+0x100>
 80216d6:	49a0      	ldr	r1, [pc, #640]	@ (8021958 <__gethex+0x2b0>)
 80216d8:	2201      	movs	r2, #1
 80216da:	4648      	mov	r0, r9
 80216dc:	f7fd f959 	bl	801e992 <strncmp>
 80216e0:	4607      	mov	r7, r0
 80216e2:	2800      	cmp	r0, #0
 80216e4:	d167      	bne.n	80217b6 <__gethex+0x10e>
 80216e6:	f899 0001 	ldrb.w	r0, [r9, #1]
 80216ea:	4626      	mov	r6, r4
 80216ec:	f7ff ffc6 	bl	802167c <__hexdig_fun>
 80216f0:	2800      	cmp	r0, #0
 80216f2:	d062      	beq.n	80217ba <__gethex+0x112>
 80216f4:	4623      	mov	r3, r4
 80216f6:	7818      	ldrb	r0, [r3, #0]
 80216f8:	2830      	cmp	r0, #48	@ 0x30
 80216fa:	4699      	mov	r9, r3
 80216fc:	f103 0301 	add.w	r3, r3, #1
 8021700:	d0f9      	beq.n	80216f6 <__gethex+0x4e>
 8021702:	f7ff ffbb 	bl	802167c <__hexdig_fun>
 8021706:	fab0 f580 	clz	r5, r0
 802170a:	096d      	lsrs	r5, r5, #5
 802170c:	f04f 0b01 	mov.w	fp, #1
 8021710:	464a      	mov	r2, r9
 8021712:	4616      	mov	r6, r2
 8021714:	3201      	adds	r2, #1
 8021716:	7830      	ldrb	r0, [r6, #0]
 8021718:	f7ff ffb0 	bl	802167c <__hexdig_fun>
 802171c:	2800      	cmp	r0, #0
 802171e:	d1f8      	bne.n	8021712 <__gethex+0x6a>
 8021720:	498d      	ldr	r1, [pc, #564]	@ (8021958 <__gethex+0x2b0>)
 8021722:	2201      	movs	r2, #1
 8021724:	4630      	mov	r0, r6
 8021726:	f7fd f934 	bl	801e992 <strncmp>
 802172a:	2800      	cmp	r0, #0
 802172c:	d13f      	bne.n	80217ae <__gethex+0x106>
 802172e:	b944      	cbnz	r4, 8021742 <__gethex+0x9a>
 8021730:	1c74      	adds	r4, r6, #1
 8021732:	4622      	mov	r2, r4
 8021734:	4616      	mov	r6, r2
 8021736:	3201      	adds	r2, #1
 8021738:	7830      	ldrb	r0, [r6, #0]
 802173a:	f7ff ff9f 	bl	802167c <__hexdig_fun>
 802173e:	2800      	cmp	r0, #0
 8021740:	d1f8      	bne.n	8021734 <__gethex+0x8c>
 8021742:	1ba4      	subs	r4, r4, r6
 8021744:	00a7      	lsls	r7, r4, #2
 8021746:	7833      	ldrb	r3, [r6, #0]
 8021748:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 802174c:	2b50      	cmp	r3, #80	@ 0x50
 802174e:	d13e      	bne.n	80217ce <__gethex+0x126>
 8021750:	7873      	ldrb	r3, [r6, #1]
 8021752:	2b2b      	cmp	r3, #43	@ 0x2b
 8021754:	d033      	beq.n	80217be <__gethex+0x116>
 8021756:	2b2d      	cmp	r3, #45	@ 0x2d
 8021758:	d034      	beq.n	80217c4 <__gethex+0x11c>
 802175a:	1c71      	adds	r1, r6, #1
 802175c:	2400      	movs	r4, #0
 802175e:	7808      	ldrb	r0, [r1, #0]
 8021760:	f7ff ff8c 	bl	802167c <__hexdig_fun>
 8021764:	1e43      	subs	r3, r0, #1
 8021766:	b2db      	uxtb	r3, r3
 8021768:	2b18      	cmp	r3, #24
 802176a:	d830      	bhi.n	80217ce <__gethex+0x126>
 802176c:	f1a0 0210 	sub.w	r2, r0, #16
 8021770:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021774:	f7ff ff82 	bl	802167c <__hexdig_fun>
 8021778:	f100 3cff 	add.w	ip, r0, #4294967295
 802177c:	fa5f fc8c 	uxtb.w	ip, ip
 8021780:	f1bc 0f18 	cmp.w	ip, #24
 8021784:	f04f 030a 	mov.w	r3, #10
 8021788:	d91e      	bls.n	80217c8 <__gethex+0x120>
 802178a:	b104      	cbz	r4, 802178e <__gethex+0xe6>
 802178c:	4252      	negs	r2, r2
 802178e:	4417      	add	r7, r2
 8021790:	f8ca 1000 	str.w	r1, [sl]
 8021794:	b1ed      	cbz	r5, 80217d2 <__gethex+0x12a>
 8021796:	f1bb 0f00 	cmp.w	fp, #0
 802179a:	bf0c      	ite	eq
 802179c:	2506      	moveq	r5, #6
 802179e:	2500      	movne	r5, #0
 80217a0:	4628      	mov	r0, r5
 80217a2:	b005      	add	sp, #20
 80217a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80217a8:	2500      	movs	r5, #0
 80217aa:	462c      	mov	r4, r5
 80217ac:	e7b0      	b.n	8021710 <__gethex+0x68>
 80217ae:	2c00      	cmp	r4, #0
 80217b0:	d1c7      	bne.n	8021742 <__gethex+0x9a>
 80217b2:	4627      	mov	r7, r4
 80217b4:	e7c7      	b.n	8021746 <__gethex+0x9e>
 80217b6:	464e      	mov	r6, r9
 80217b8:	462f      	mov	r7, r5
 80217ba:	2501      	movs	r5, #1
 80217bc:	e7c3      	b.n	8021746 <__gethex+0x9e>
 80217be:	2400      	movs	r4, #0
 80217c0:	1cb1      	adds	r1, r6, #2
 80217c2:	e7cc      	b.n	802175e <__gethex+0xb6>
 80217c4:	2401      	movs	r4, #1
 80217c6:	e7fb      	b.n	80217c0 <__gethex+0x118>
 80217c8:	fb03 0002 	mla	r0, r3, r2, r0
 80217cc:	e7ce      	b.n	802176c <__gethex+0xc4>
 80217ce:	4631      	mov	r1, r6
 80217d0:	e7de      	b.n	8021790 <__gethex+0xe8>
 80217d2:	eba6 0309 	sub.w	r3, r6, r9
 80217d6:	3b01      	subs	r3, #1
 80217d8:	4629      	mov	r1, r5
 80217da:	2b07      	cmp	r3, #7
 80217dc:	dc0a      	bgt.n	80217f4 <__gethex+0x14c>
 80217de:	9801      	ldr	r0, [sp, #4]
 80217e0:	f7fe f8e8 	bl	801f9b4 <_Balloc>
 80217e4:	4604      	mov	r4, r0
 80217e6:	b940      	cbnz	r0, 80217fa <__gethex+0x152>
 80217e8:	4b5c      	ldr	r3, [pc, #368]	@ (802195c <__gethex+0x2b4>)
 80217ea:	4602      	mov	r2, r0
 80217ec:	21e4      	movs	r1, #228	@ 0xe4
 80217ee:	485c      	ldr	r0, [pc, #368]	@ (8021960 <__gethex+0x2b8>)
 80217f0:	f7fd fa2a 	bl	801ec48 <__assert_func>
 80217f4:	3101      	adds	r1, #1
 80217f6:	105b      	asrs	r3, r3, #1
 80217f8:	e7ef      	b.n	80217da <__gethex+0x132>
 80217fa:	f100 0a14 	add.w	sl, r0, #20
 80217fe:	2300      	movs	r3, #0
 8021800:	4655      	mov	r5, sl
 8021802:	469b      	mov	fp, r3
 8021804:	45b1      	cmp	r9, r6
 8021806:	d337      	bcc.n	8021878 <__gethex+0x1d0>
 8021808:	f845 bb04 	str.w	fp, [r5], #4
 802180c:	eba5 050a 	sub.w	r5, r5, sl
 8021810:	10ad      	asrs	r5, r5, #2
 8021812:	6125      	str	r5, [r4, #16]
 8021814:	4658      	mov	r0, fp
 8021816:	f7fe f9bf 	bl	801fb98 <__hi0bits>
 802181a:	016d      	lsls	r5, r5, #5
 802181c:	f8d8 6000 	ldr.w	r6, [r8]
 8021820:	1a2d      	subs	r5, r5, r0
 8021822:	42b5      	cmp	r5, r6
 8021824:	dd54      	ble.n	80218d0 <__gethex+0x228>
 8021826:	1bad      	subs	r5, r5, r6
 8021828:	4629      	mov	r1, r5
 802182a:	4620      	mov	r0, r4
 802182c:	f7fe fd53 	bl	80202d6 <__any_on>
 8021830:	4681      	mov	r9, r0
 8021832:	b178      	cbz	r0, 8021854 <__gethex+0x1ac>
 8021834:	1e6b      	subs	r3, r5, #1
 8021836:	1159      	asrs	r1, r3, #5
 8021838:	f003 021f 	and.w	r2, r3, #31
 802183c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8021840:	f04f 0901 	mov.w	r9, #1
 8021844:	fa09 f202 	lsl.w	r2, r9, r2
 8021848:	420a      	tst	r2, r1
 802184a:	d003      	beq.n	8021854 <__gethex+0x1ac>
 802184c:	454b      	cmp	r3, r9
 802184e:	dc36      	bgt.n	80218be <__gethex+0x216>
 8021850:	f04f 0902 	mov.w	r9, #2
 8021854:	4629      	mov	r1, r5
 8021856:	4620      	mov	r0, r4
 8021858:	f7ff febe 	bl	80215d8 <rshift>
 802185c:	442f      	add	r7, r5
 802185e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021862:	42bb      	cmp	r3, r7
 8021864:	da42      	bge.n	80218ec <__gethex+0x244>
 8021866:	9801      	ldr	r0, [sp, #4]
 8021868:	4621      	mov	r1, r4
 802186a:	f7fe f8e3 	bl	801fa34 <_Bfree>
 802186e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021870:	2300      	movs	r3, #0
 8021872:	6013      	str	r3, [r2, #0]
 8021874:	25a3      	movs	r5, #163	@ 0xa3
 8021876:	e793      	b.n	80217a0 <__gethex+0xf8>
 8021878:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 802187c:	2a2e      	cmp	r2, #46	@ 0x2e
 802187e:	d012      	beq.n	80218a6 <__gethex+0x1fe>
 8021880:	2b20      	cmp	r3, #32
 8021882:	d104      	bne.n	802188e <__gethex+0x1e6>
 8021884:	f845 bb04 	str.w	fp, [r5], #4
 8021888:	f04f 0b00 	mov.w	fp, #0
 802188c:	465b      	mov	r3, fp
 802188e:	7830      	ldrb	r0, [r6, #0]
 8021890:	9303      	str	r3, [sp, #12]
 8021892:	f7ff fef3 	bl	802167c <__hexdig_fun>
 8021896:	9b03      	ldr	r3, [sp, #12]
 8021898:	f000 000f 	and.w	r0, r0, #15
 802189c:	4098      	lsls	r0, r3
 802189e:	ea4b 0b00 	orr.w	fp, fp, r0
 80218a2:	3304      	adds	r3, #4
 80218a4:	e7ae      	b.n	8021804 <__gethex+0x15c>
 80218a6:	45b1      	cmp	r9, r6
 80218a8:	d8ea      	bhi.n	8021880 <__gethex+0x1d8>
 80218aa:	492b      	ldr	r1, [pc, #172]	@ (8021958 <__gethex+0x2b0>)
 80218ac:	9303      	str	r3, [sp, #12]
 80218ae:	2201      	movs	r2, #1
 80218b0:	4630      	mov	r0, r6
 80218b2:	f7fd f86e 	bl	801e992 <strncmp>
 80218b6:	9b03      	ldr	r3, [sp, #12]
 80218b8:	2800      	cmp	r0, #0
 80218ba:	d1e1      	bne.n	8021880 <__gethex+0x1d8>
 80218bc:	e7a2      	b.n	8021804 <__gethex+0x15c>
 80218be:	1ea9      	subs	r1, r5, #2
 80218c0:	4620      	mov	r0, r4
 80218c2:	f7fe fd08 	bl	80202d6 <__any_on>
 80218c6:	2800      	cmp	r0, #0
 80218c8:	d0c2      	beq.n	8021850 <__gethex+0x1a8>
 80218ca:	f04f 0903 	mov.w	r9, #3
 80218ce:	e7c1      	b.n	8021854 <__gethex+0x1ac>
 80218d0:	da09      	bge.n	80218e6 <__gethex+0x23e>
 80218d2:	1b75      	subs	r5, r6, r5
 80218d4:	4621      	mov	r1, r4
 80218d6:	9801      	ldr	r0, [sp, #4]
 80218d8:	462a      	mov	r2, r5
 80218da:	f7fe fac3 	bl	801fe64 <__lshift>
 80218de:	1b7f      	subs	r7, r7, r5
 80218e0:	4604      	mov	r4, r0
 80218e2:	f100 0a14 	add.w	sl, r0, #20
 80218e6:	f04f 0900 	mov.w	r9, #0
 80218ea:	e7b8      	b.n	802185e <__gethex+0x1b6>
 80218ec:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80218f0:	42bd      	cmp	r5, r7
 80218f2:	dd6f      	ble.n	80219d4 <__gethex+0x32c>
 80218f4:	1bed      	subs	r5, r5, r7
 80218f6:	42ae      	cmp	r6, r5
 80218f8:	dc34      	bgt.n	8021964 <__gethex+0x2bc>
 80218fa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80218fe:	2b02      	cmp	r3, #2
 8021900:	d022      	beq.n	8021948 <__gethex+0x2a0>
 8021902:	2b03      	cmp	r3, #3
 8021904:	d024      	beq.n	8021950 <__gethex+0x2a8>
 8021906:	2b01      	cmp	r3, #1
 8021908:	d115      	bne.n	8021936 <__gethex+0x28e>
 802190a:	42ae      	cmp	r6, r5
 802190c:	d113      	bne.n	8021936 <__gethex+0x28e>
 802190e:	2e01      	cmp	r6, #1
 8021910:	d10b      	bne.n	802192a <__gethex+0x282>
 8021912:	9a02      	ldr	r2, [sp, #8]
 8021914:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021918:	6013      	str	r3, [r2, #0]
 802191a:	2301      	movs	r3, #1
 802191c:	6123      	str	r3, [r4, #16]
 802191e:	f8ca 3000 	str.w	r3, [sl]
 8021922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021924:	2562      	movs	r5, #98	@ 0x62
 8021926:	601c      	str	r4, [r3, #0]
 8021928:	e73a      	b.n	80217a0 <__gethex+0xf8>
 802192a:	1e71      	subs	r1, r6, #1
 802192c:	4620      	mov	r0, r4
 802192e:	f7fe fcd2 	bl	80202d6 <__any_on>
 8021932:	2800      	cmp	r0, #0
 8021934:	d1ed      	bne.n	8021912 <__gethex+0x26a>
 8021936:	9801      	ldr	r0, [sp, #4]
 8021938:	4621      	mov	r1, r4
 802193a:	f7fe f87b 	bl	801fa34 <_Bfree>
 802193e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021940:	2300      	movs	r3, #0
 8021942:	6013      	str	r3, [r2, #0]
 8021944:	2550      	movs	r5, #80	@ 0x50
 8021946:	e72b      	b.n	80217a0 <__gethex+0xf8>
 8021948:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 802194a:	2b00      	cmp	r3, #0
 802194c:	d1f3      	bne.n	8021936 <__gethex+0x28e>
 802194e:	e7e0      	b.n	8021912 <__gethex+0x26a>
 8021950:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021952:	2b00      	cmp	r3, #0
 8021954:	d1dd      	bne.n	8021912 <__gethex+0x26a>
 8021956:	e7ee      	b.n	8021936 <__gethex+0x28e>
 8021958:	080256b0 	.word	0x080256b0
 802195c:	08025548 	.word	0x08025548
 8021960:	08025721 	.word	0x08025721
 8021964:	1e6f      	subs	r7, r5, #1
 8021966:	f1b9 0f00 	cmp.w	r9, #0
 802196a:	d130      	bne.n	80219ce <__gethex+0x326>
 802196c:	b127      	cbz	r7, 8021978 <__gethex+0x2d0>
 802196e:	4639      	mov	r1, r7
 8021970:	4620      	mov	r0, r4
 8021972:	f7fe fcb0 	bl	80202d6 <__any_on>
 8021976:	4681      	mov	r9, r0
 8021978:	117a      	asrs	r2, r7, #5
 802197a:	2301      	movs	r3, #1
 802197c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8021980:	f007 071f 	and.w	r7, r7, #31
 8021984:	40bb      	lsls	r3, r7
 8021986:	4213      	tst	r3, r2
 8021988:	4629      	mov	r1, r5
 802198a:	4620      	mov	r0, r4
 802198c:	bf18      	it	ne
 802198e:	f049 0902 	orrne.w	r9, r9, #2
 8021992:	f7ff fe21 	bl	80215d8 <rshift>
 8021996:	f8d8 7004 	ldr.w	r7, [r8, #4]
 802199a:	1b76      	subs	r6, r6, r5
 802199c:	2502      	movs	r5, #2
 802199e:	f1b9 0f00 	cmp.w	r9, #0
 80219a2:	d047      	beq.n	8021a34 <__gethex+0x38c>
 80219a4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80219a8:	2b02      	cmp	r3, #2
 80219aa:	d015      	beq.n	80219d8 <__gethex+0x330>
 80219ac:	2b03      	cmp	r3, #3
 80219ae:	d017      	beq.n	80219e0 <__gethex+0x338>
 80219b0:	2b01      	cmp	r3, #1
 80219b2:	d109      	bne.n	80219c8 <__gethex+0x320>
 80219b4:	f019 0f02 	tst.w	r9, #2
 80219b8:	d006      	beq.n	80219c8 <__gethex+0x320>
 80219ba:	f8da 3000 	ldr.w	r3, [sl]
 80219be:	ea49 0903 	orr.w	r9, r9, r3
 80219c2:	f019 0f01 	tst.w	r9, #1
 80219c6:	d10e      	bne.n	80219e6 <__gethex+0x33e>
 80219c8:	f045 0510 	orr.w	r5, r5, #16
 80219cc:	e032      	b.n	8021a34 <__gethex+0x38c>
 80219ce:	f04f 0901 	mov.w	r9, #1
 80219d2:	e7d1      	b.n	8021978 <__gethex+0x2d0>
 80219d4:	2501      	movs	r5, #1
 80219d6:	e7e2      	b.n	802199e <__gethex+0x2f6>
 80219d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80219da:	f1c3 0301 	rsb	r3, r3, #1
 80219de:	930f      	str	r3, [sp, #60]	@ 0x3c
 80219e0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80219e2:	2b00      	cmp	r3, #0
 80219e4:	d0f0      	beq.n	80219c8 <__gethex+0x320>
 80219e6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80219ea:	f104 0314 	add.w	r3, r4, #20
 80219ee:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80219f2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80219f6:	f04f 0c00 	mov.w	ip, #0
 80219fa:	4618      	mov	r0, r3
 80219fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8021a00:	f1b2 3fff 	cmp.w	r2, #4294967295
 8021a04:	d01b      	beq.n	8021a3e <__gethex+0x396>
 8021a06:	3201      	adds	r2, #1
 8021a08:	6002      	str	r2, [r0, #0]
 8021a0a:	2d02      	cmp	r5, #2
 8021a0c:	f104 0314 	add.w	r3, r4, #20
 8021a10:	d13c      	bne.n	8021a8c <__gethex+0x3e4>
 8021a12:	f8d8 2000 	ldr.w	r2, [r8]
 8021a16:	3a01      	subs	r2, #1
 8021a18:	42b2      	cmp	r2, r6
 8021a1a:	d109      	bne.n	8021a30 <__gethex+0x388>
 8021a1c:	1171      	asrs	r1, r6, #5
 8021a1e:	2201      	movs	r2, #1
 8021a20:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021a24:	f006 061f 	and.w	r6, r6, #31
 8021a28:	fa02 f606 	lsl.w	r6, r2, r6
 8021a2c:	421e      	tst	r6, r3
 8021a2e:	d13a      	bne.n	8021aa6 <__gethex+0x3fe>
 8021a30:	f045 0520 	orr.w	r5, r5, #32
 8021a34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8021a36:	601c      	str	r4, [r3, #0]
 8021a38:	9b02      	ldr	r3, [sp, #8]
 8021a3a:	601f      	str	r7, [r3, #0]
 8021a3c:	e6b0      	b.n	80217a0 <__gethex+0xf8>
 8021a3e:	4299      	cmp	r1, r3
 8021a40:	f843 cc04 	str.w	ip, [r3, #-4]
 8021a44:	d8d9      	bhi.n	80219fa <__gethex+0x352>
 8021a46:	68a3      	ldr	r3, [r4, #8]
 8021a48:	459b      	cmp	fp, r3
 8021a4a:	db17      	blt.n	8021a7c <__gethex+0x3d4>
 8021a4c:	6861      	ldr	r1, [r4, #4]
 8021a4e:	9801      	ldr	r0, [sp, #4]
 8021a50:	3101      	adds	r1, #1
 8021a52:	f7fd ffaf 	bl	801f9b4 <_Balloc>
 8021a56:	4681      	mov	r9, r0
 8021a58:	b918      	cbnz	r0, 8021a62 <__gethex+0x3ba>
 8021a5a:	4b1a      	ldr	r3, [pc, #104]	@ (8021ac4 <__gethex+0x41c>)
 8021a5c:	4602      	mov	r2, r0
 8021a5e:	2184      	movs	r1, #132	@ 0x84
 8021a60:	e6c5      	b.n	80217ee <__gethex+0x146>
 8021a62:	6922      	ldr	r2, [r4, #16]
 8021a64:	3202      	adds	r2, #2
 8021a66:	f104 010c 	add.w	r1, r4, #12
 8021a6a:	0092      	lsls	r2, r2, #2
 8021a6c:	300c      	adds	r0, #12
 8021a6e:	f7fd f8d6 	bl	801ec1e <memcpy>
 8021a72:	4621      	mov	r1, r4
 8021a74:	9801      	ldr	r0, [sp, #4]
 8021a76:	f7fd ffdd 	bl	801fa34 <_Bfree>
 8021a7a:	464c      	mov	r4, r9
 8021a7c:	6923      	ldr	r3, [r4, #16]
 8021a7e:	1c5a      	adds	r2, r3, #1
 8021a80:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8021a84:	6122      	str	r2, [r4, #16]
 8021a86:	2201      	movs	r2, #1
 8021a88:	615a      	str	r2, [r3, #20]
 8021a8a:	e7be      	b.n	8021a0a <__gethex+0x362>
 8021a8c:	6922      	ldr	r2, [r4, #16]
 8021a8e:	455a      	cmp	r2, fp
 8021a90:	dd0b      	ble.n	8021aaa <__gethex+0x402>
 8021a92:	2101      	movs	r1, #1
 8021a94:	4620      	mov	r0, r4
 8021a96:	f7ff fd9f 	bl	80215d8 <rshift>
 8021a9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8021a9e:	3701      	adds	r7, #1
 8021aa0:	42bb      	cmp	r3, r7
 8021aa2:	f6ff aee0 	blt.w	8021866 <__gethex+0x1be>
 8021aa6:	2501      	movs	r5, #1
 8021aa8:	e7c2      	b.n	8021a30 <__gethex+0x388>
 8021aaa:	f016 061f 	ands.w	r6, r6, #31
 8021aae:	d0fa      	beq.n	8021aa6 <__gethex+0x3fe>
 8021ab0:	4453      	add	r3, sl
 8021ab2:	f1c6 0620 	rsb	r6, r6, #32
 8021ab6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8021aba:	f7fe f86d 	bl	801fb98 <__hi0bits>
 8021abe:	42b0      	cmp	r0, r6
 8021ac0:	dbe7      	blt.n	8021a92 <__gethex+0x3ea>
 8021ac2:	e7f0      	b.n	8021aa6 <__gethex+0x3fe>
 8021ac4:	08025548 	.word	0x08025548

08021ac8 <L_shift>:
 8021ac8:	f1c2 0208 	rsb	r2, r2, #8
 8021acc:	0092      	lsls	r2, r2, #2
 8021ace:	b570      	push	{r4, r5, r6, lr}
 8021ad0:	f1c2 0620 	rsb	r6, r2, #32
 8021ad4:	6843      	ldr	r3, [r0, #4]
 8021ad6:	6804      	ldr	r4, [r0, #0]
 8021ad8:	fa03 f506 	lsl.w	r5, r3, r6
 8021adc:	432c      	orrs	r4, r5
 8021ade:	40d3      	lsrs	r3, r2
 8021ae0:	6004      	str	r4, [r0, #0]
 8021ae2:	f840 3f04 	str.w	r3, [r0, #4]!
 8021ae6:	4288      	cmp	r0, r1
 8021ae8:	d3f4      	bcc.n	8021ad4 <L_shift+0xc>
 8021aea:	bd70      	pop	{r4, r5, r6, pc}

08021aec <__match>:
 8021aec:	b530      	push	{r4, r5, lr}
 8021aee:	6803      	ldr	r3, [r0, #0]
 8021af0:	3301      	adds	r3, #1
 8021af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021af6:	b914      	cbnz	r4, 8021afe <__match+0x12>
 8021af8:	6003      	str	r3, [r0, #0]
 8021afa:	2001      	movs	r0, #1
 8021afc:	bd30      	pop	{r4, r5, pc}
 8021afe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021b02:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8021b06:	2d19      	cmp	r5, #25
 8021b08:	bf98      	it	ls
 8021b0a:	3220      	addls	r2, #32
 8021b0c:	42a2      	cmp	r2, r4
 8021b0e:	d0f0      	beq.n	8021af2 <__match+0x6>
 8021b10:	2000      	movs	r0, #0
 8021b12:	e7f3      	b.n	8021afc <__match+0x10>

08021b14 <__hexnan>:
 8021b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b18:	680b      	ldr	r3, [r1, #0]
 8021b1a:	6801      	ldr	r1, [r0, #0]
 8021b1c:	115e      	asrs	r6, r3, #5
 8021b1e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8021b22:	f013 031f 	ands.w	r3, r3, #31
 8021b26:	b087      	sub	sp, #28
 8021b28:	bf18      	it	ne
 8021b2a:	3604      	addne	r6, #4
 8021b2c:	2500      	movs	r5, #0
 8021b2e:	1f37      	subs	r7, r6, #4
 8021b30:	4682      	mov	sl, r0
 8021b32:	4690      	mov	r8, r2
 8021b34:	9301      	str	r3, [sp, #4]
 8021b36:	f846 5c04 	str.w	r5, [r6, #-4]
 8021b3a:	46b9      	mov	r9, r7
 8021b3c:	463c      	mov	r4, r7
 8021b3e:	9502      	str	r5, [sp, #8]
 8021b40:	46ab      	mov	fp, r5
 8021b42:	784a      	ldrb	r2, [r1, #1]
 8021b44:	1c4b      	adds	r3, r1, #1
 8021b46:	9303      	str	r3, [sp, #12]
 8021b48:	b342      	cbz	r2, 8021b9c <__hexnan+0x88>
 8021b4a:	4610      	mov	r0, r2
 8021b4c:	9105      	str	r1, [sp, #20]
 8021b4e:	9204      	str	r2, [sp, #16]
 8021b50:	f7ff fd94 	bl	802167c <__hexdig_fun>
 8021b54:	2800      	cmp	r0, #0
 8021b56:	d151      	bne.n	8021bfc <__hexnan+0xe8>
 8021b58:	9a04      	ldr	r2, [sp, #16]
 8021b5a:	9905      	ldr	r1, [sp, #20]
 8021b5c:	2a20      	cmp	r2, #32
 8021b5e:	d818      	bhi.n	8021b92 <__hexnan+0x7e>
 8021b60:	9b02      	ldr	r3, [sp, #8]
 8021b62:	459b      	cmp	fp, r3
 8021b64:	dd13      	ble.n	8021b8e <__hexnan+0x7a>
 8021b66:	454c      	cmp	r4, r9
 8021b68:	d206      	bcs.n	8021b78 <__hexnan+0x64>
 8021b6a:	2d07      	cmp	r5, #7
 8021b6c:	dc04      	bgt.n	8021b78 <__hexnan+0x64>
 8021b6e:	462a      	mov	r2, r5
 8021b70:	4649      	mov	r1, r9
 8021b72:	4620      	mov	r0, r4
 8021b74:	f7ff ffa8 	bl	8021ac8 <L_shift>
 8021b78:	4544      	cmp	r4, r8
 8021b7a:	d952      	bls.n	8021c22 <__hexnan+0x10e>
 8021b7c:	2300      	movs	r3, #0
 8021b7e:	f1a4 0904 	sub.w	r9, r4, #4
 8021b82:	f844 3c04 	str.w	r3, [r4, #-4]
 8021b86:	f8cd b008 	str.w	fp, [sp, #8]
 8021b8a:	464c      	mov	r4, r9
 8021b8c:	461d      	mov	r5, r3
 8021b8e:	9903      	ldr	r1, [sp, #12]
 8021b90:	e7d7      	b.n	8021b42 <__hexnan+0x2e>
 8021b92:	2a29      	cmp	r2, #41	@ 0x29
 8021b94:	d157      	bne.n	8021c46 <__hexnan+0x132>
 8021b96:	3102      	adds	r1, #2
 8021b98:	f8ca 1000 	str.w	r1, [sl]
 8021b9c:	f1bb 0f00 	cmp.w	fp, #0
 8021ba0:	d051      	beq.n	8021c46 <__hexnan+0x132>
 8021ba2:	454c      	cmp	r4, r9
 8021ba4:	d206      	bcs.n	8021bb4 <__hexnan+0xa0>
 8021ba6:	2d07      	cmp	r5, #7
 8021ba8:	dc04      	bgt.n	8021bb4 <__hexnan+0xa0>
 8021baa:	462a      	mov	r2, r5
 8021bac:	4649      	mov	r1, r9
 8021bae:	4620      	mov	r0, r4
 8021bb0:	f7ff ff8a 	bl	8021ac8 <L_shift>
 8021bb4:	4544      	cmp	r4, r8
 8021bb6:	d936      	bls.n	8021c26 <__hexnan+0x112>
 8021bb8:	f1a8 0204 	sub.w	r2, r8, #4
 8021bbc:	4623      	mov	r3, r4
 8021bbe:	f853 1b04 	ldr.w	r1, [r3], #4
 8021bc2:	f842 1f04 	str.w	r1, [r2, #4]!
 8021bc6:	429f      	cmp	r7, r3
 8021bc8:	d2f9      	bcs.n	8021bbe <__hexnan+0xaa>
 8021bca:	1b3b      	subs	r3, r7, r4
 8021bcc:	f023 0303 	bic.w	r3, r3, #3
 8021bd0:	3304      	adds	r3, #4
 8021bd2:	3401      	adds	r4, #1
 8021bd4:	3e03      	subs	r6, #3
 8021bd6:	42b4      	cmp	r4, r6
 8021bd8:	bf88      	it	hi
 8021bda:	2304      	movhi	r3, #4
 8021bdc:	4443      	add	r3, r8
 8021bde:	2200      	movs	r2, #0
 8021be0:	f843 2b04 	str.w	r2, [r3], #4
 8021be4:	429f      	cmp	r7, r3
 8021be6:	d2fb      	bcs.n	8021be0 <__hexnan+0xcc>
 8021be8:	683b      	ldr	r3, [r7, #0]
 8021bea:	b91b      	cbnz	r3, 8021bf4 <__hexnan+0xe0>
 8021bec:	4547      	cmp	r7, r8
 8021bee:	d128      	bne.n	8021c42 <__hexnan+0x12e>
 8021bf0:	2301      	movs	r3, #1
 8021bf2:	603b      	str	r3, [r7, #0]
 8021bf4:	2005      	movs	r0, #5
 8021bf6:	b007      	add	sp, #28
 8021bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021bfc:	3501      	adds	r5, #1
 8021bfe:	2d08      	cmp	r5, #8
 8021c00:	f10b 0b01 	add.w	fp, fp, #1
 8021c04:	dd06      	ble.n	8021c14 <__hexnan+0x100>
 8021c06:	4544      	cmp	r4, r8
 8021c08:	d9c1      	bls.n	8021b8e <__hexnan+0x7a>
 8021c0a:	2300      	movs	r3, #0
 8021c0c:	f844 3c04 	str.w	r3, [r4, #-4]
 8021c10:	2501      	movs	r5, #1
 8021c12:	3c04      	subs	r4, #4
 8021c14:	6822      	ldr	r2, [r4, #0]
 8021c16:	f000 000f 	and.w	r0, r0, #15
 8021c1a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8021c1e:	6020      	str	r0, [r4, #0]
 8021c20:	e7b5      	b.n	8021b8e <__hexnan+0x7a>
 8021c22:	2508      	movs	r5, #8
 8021c24:	e7b3      	b.n	8021b8e <__hexnan+0x7a>
 8021c26:	9b01      	ldr	r3, [sp, #4]
 8021c28:	2b00      	cmp	r3, #0
 8021c2a:	d0dd      	beq.n	8021be8 <__hexnan+0xd4>
 8021c2c:	f1c3 0320 	rsb	r3, r3, #32
 8021c30:	f04f 32ff 	mov.w	r2, #4294967295
 8021c34:	40da      	lsrs	r2, r3
 8021c36:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8021c3a:	4013      	ands	r3, r2
 8021c3c:	f846 3c04 	str.w	r3, [r6, #-4]
 8021c40:	e7d2      	b.n	8021be8 <__hexnan+0xd4>
 8021c42:	3f04      	subs	r7, #4
 8021c44:	e7d0      	b.n	8021be8 <__hexnan+0xd4>
 8021c46:	2004      	movs	r0, #4
 8021c48:	e7d5      	b.n	8021bf6 <__hexnan+0xe2>

08021c4a <__ascii_mbtowc>:
 8021c4a:	b082      	sub	sp, #8
 8021c4c:	b901      	cbnz	r1, 8021c50 <__ascii_mbtowc+0x6>
 8021c4e:	a901      	add	r1, sp, #4
 8021c50:	b142      	cbz	r2, 8021c64 <__ascii_mbtowc+0x1a>
 8021c52:	b14b      	cbz	r3, 8021c68 <__ascii_mbtowc+0x1e>
 8021c54:	7813      	ldrb	r3, [r2, #0]
 8021c56:	600b      	str	r3, [r1, #0]
 8021c58:	7812      	ldrb	r2, [r2, #0]
 8021c5a:	1e10      	subs	r0, r2, #0
 8021c5c:	bf18      	it	ne
 8021c5e:	2001      	movne	r0, #1
 8021c60:	b002      	add	sp, #8
 8021c62:	4770      	bx	lr
 8021c64:	4610      	mov	r0, r2
 8021c66:	e7fb      	b.n	8021c60 <__ascii_mbtowc+0x16>
 8021c68:	f06f 0001 	mvn.w	r0, #1
 8021c6c:	e7f8      	b.n	8021c60 <__ascii_mbtowc+0x16>

08021c6e <__ascii_wctomb>:
 8021c6e:	4603      	mov	r3, r0
 8021c70:	4608      	mov	r0, r1
 8021c72:	b141      	cbz	r1, 8021c86 <__ascii_wctomb+0x18>
 8021c74:	2aff      	cmp	r2, #255	@ 0xff
 8021c76:	d904      	bls.n	8021c82 <__ascii_wctomb+0x14>
 8021c78:	228a      	movs	r2, #138	@ 0x8a
 8021c7a:	601a      	str	r2, [r3, #0]
 8021c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8021c80:	4770      	bx	lr
 8021c82:	700a      	strb	r2, [r1, #0]
 8021c84:	2001      	movs	r0, #1
 8021c86:	4770      	bx	lr

08021c88 <_init>:
 8021c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c8a:	bf00      	nop
 8021c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021c8e:	bc08      	pop	{r3}
 8021c90:	469e      	mov	lr, r3
 8021c92:	4770      	bx	lr

08021c94 <_fini>:
 8021c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021c96:	bf00      	nop
 8021c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021c9a:	bc08      	pop	{r3}
 8021c9c:	469e      	mov	lr, r3
 8021c9e:	4770      	bx	lr
